{"pr_number": 686, "pr_title": "Added support for listing and aborting WarpScript executions", "pr_createdAt": "2020-03-07T14:05:08Z", "pr_url": "https://github.com/senx/warp10-platform/pull/686", "timeline": [{"oid": "812d37465658e8d309dac205aedb5bcfdb277d28", "url": "https://github.com/senx/warp10-platform/commit/812d37465658e8d309dac205aedb5bcfdb277d28", "message": "Initial commit of StackPS extension", "committedDate": "2020-03-07T14:02:41Z", "type": "commit"}, {"oid": "8051f4c690a33e423ce33a2570cda0f681c797cf", "url": "https://github.com/senx/warp10-platform/commit/8051f4c690a33e423ce33a2570cda0f681c797cf", "message": "Fixed copyright notice", "committedDate": "2020-03-07T14:03:48Z", "type": "commit"}, {"oid": "03f1afd24f970948976473f7378f2ae013fdd93c", "url": "https://github.com/senx/warp10-platform/commit/03f1afd24f970948976473f7378f2ae013fdd93c", "message": "Added missing registry file", "committedDate": "2020-03-07T17:47:11Z", "type": "commit"}, {"oid": "fd8f287867c3849231dc39928fa04886324798b1", "url": "https://github.com/senx/warp10-platform/commit/fd8f287867c3849231dc39928fa04886324798b1", "message": "Initial commit of WSNAME", "committedDate": "2020-03-08T16:47:27Z", "type": "commit"}, {"oid": "5140b9bc18cb7274b395f548fb4f657f3baefa0e", "url": "https://github.com/senx/warp10-platform/commit/5140b9bc18cb7274b395f548fb4f657f3baefa0e", "message": "Added support for session aborts.", "committedDate": "2020-03-09T09:43:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNTUzMA==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r393725530", "bodyText": "That's great, but could be greater : is it possible to pass the session attribute_name and the attribute_session in a req.header ?\nWith this mecanism, both VScode and WarpStudio can inject meaningful headers automatically, and will be able to abort the current session easily. I already developed the function to stop everything, it will be easy to add a uuid session name at startup, and a request to abort scripts:\n\nBoth new headers name should be hardcoded, to avoid too much settings both in Warp 10 and WarpScript tooling.\nKeep this default name if there is no headers in request.", "author": "pi-r-p", "createdAt": "2020-03-17T14:35:24Z", "path": "warp10/src/main/java/io/warp10/continuum/egress/EgressExecHandler.java", "diffHunk": "@@ -138,7 +139,8 @@ public void handle(String target, Request baseRequest, HttpServletRequest req, H\n     //\n     \n     WarpScriptStack stack = new MemoryWarpScriptStack(this.storeClient, this.directoryClient);\n-\n+    stack.setAttribute(WarpScriptStack.ATTRIBUTE_NAME, \"[EgressExecHandler \" + Thread.currentThread().getName() + \"]\");\n+    ", "originalCommit": "5140b9bc18cb7274b395f548fb4f657f3baefa0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4NjkzMg==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r393786932", "bodyText": "Why can't they add a prefix to the WarpScript code they push?", "author": "hbs", "createdAt": "2020-03-17T15:57:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNTUzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1MTMwMw==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r393951303", "bodyText": "It is more simple than prepend lines, shift line numbers or statement number in error messages. VSCode already does macro inlining and error message transformations, studio does not.\nIt does not appear in the 'warpscript.script' WarpScript logs.\nMore flexible to enforce some extra policy later, for example include the user name in each request, or to add a proxy that automatically add the incoming IP or other metadata in attribute_name if a company want to find who is taking all the shared resources. (128 character is a bit too short for that)", "author": "pi-r-p", "createdAt": "2020-03-17T20:31:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNTUzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk2MDMyNw==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r393960327", "bodyText": "You don't need to shift lines as you could very well set the session on the first line without a LF.\nHaving an alternate way of setting things just for the /exec endpoint brings redundancy and lack of coherency without added value, therefore this will not be added.", "author": "hbs", "createdAt": "2020-03-17T20:48:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNTUzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkyNzEyOA==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r394927128", "bodyText": "Second thoughts, added possibility to set the session via header (but not the name), but disallowed overwriting the session in WSSESSION.\nPTAL.", "author": "hbs", "createdAt": "2020-03-19T10:28:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNTUzMA=="}], "type": "inlineReview", "revised_code": {"commit": "fcd948797b71830d5fff4e6bd3de1de062a82fc5", "chunk": "diff --git a/warp10/src/main/java/io/warp10/continuum/egress/EgressExecHandler.java b/warp10/src/main/java/io/warp10/continuum/egress/EgressExecHandler.java\nindex b7764a14..51c7a521 100644\n--- a/warp10/src/main/java/io/warp10/continuum/egress/EgressExecHandler.java\n+++ b/warp10/src/main/java/io/warp10/continuum/egress/EgressExecHandler.java\n\n@@ -141,6 +142,10 @@ public class EgressExecHandler extends AbstractHandler {\n     WarpScriptStack stack = new MemoryWarpScriptStack(this.storeClient, this.directoryClient);\n     stack.setAttribute(WarpScriptStack.ATTRIBUTE_NAME, \"[EgressExecHandler \" + Thread.currentThread().getName() + \"]\");\n     \n+    if (null != req.getHeader(StackPSWarpScriptExtension.HEADER_SESSION)) {\n+      stack.setAttribute(StackPSWarpScriptExtension.ATTRIBUTE_SESSION, req.getHeader(StackPSWarpScriptExtension.HEADER_SESSION));\n+    }\n+    \n     Throwable t = null;\n \n     StringBuilder scriptSB = new StringBuilder();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NTMzMw==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r393755333", "bodyText": "Why isn't session name a property of the stack, just like attribute_name ?", "author": "pi-r-p", "createdAt": "2020-03-17T15:16:17Z", "path": "warp10/src/main/java/io/warp10/script/ext/stackps/StackPSWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,61 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStackRegistry;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+public class StackPSWarpScriptExtension extends WarpScriptExtension {\n+  /*\n+   *  Name of configuration key with the stackps secret. \n+   */\n+  public static final String CONF_STACKPS_SECRET = \"stackps.secret\";\n+  \n+  /**\n+   * Current StackPS Secret\n+   */\n+  public static String STACKPS_SECRET;  \n+\n+  public static final String ATTRIBUTE_SESSION = \"stackps.session\";", "originalCommit": "5140b9bc18cb7274b395f548fb4f657f3baefa0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fcd948797b71830d5fff4e6bd3de1de062a82fc5", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/stackps/StackPSWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/stackps/StackPSWarpScriptExtension.java\nindex 6f095a09..83e689e9 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/stackps/StackPSWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/stackps/StackPSWarpScriptExtension.java\n\n@@ -36,6 +36,8 @@ public class StackPSWarpScriptExtension extends WarpScriptExtension {\n \n   public static final String ATTRIBUTE_SESSION = \"stackps.session\";\n   \n+  public static final String HEADER_SESSION = \"X-Warp10-WarpScriptSession\";\n+  \n   private static final Map<String,Object> functions;\n   \n   static {\n"}}, {"oid": "fcd948797b71830d5fff4e6bd3de1de062a82fc5", "url": "https://github.com/senx/warp10-platform/commit/fcd948797b71830d5fff4e6bd3de1de062a82fc5", "message": "Added possibility to set session via HTTP header. Ignore overwriting session", "committedDate": "2020-03-19T10:28:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1Mjk1MA==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r395052950", "bodyText": "also add session here\nresult.add(stck.getAttribute(StackPSWarpScriptExtension.ATTRIBUTE_SESSION));", "author": "pi-r-p", "createdAt": "2020-03-19T14:09:37Z", "path": "warp10/src/main/java/io/warp10/script/ext/stackps/WSPS.java", "diffHunk": "@@ -0,0 +1,66 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptStackRegistry;\n+\n+public class WSPS extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  public WSPS(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    //\n+    // A non null stackps secret was configured, check it\n+    //\n+    String secret = StackPSWarpScriptExtension.STACKPS_SECRET;\n+    \n+    if (null != secret) {\n+      Object top = stack.pop();\n+      \n+      if (!(top instanceof String)) {\n+        throw new WarpScriptException(getName() + \" expects a secret.\");\n+      }\n+      if (!secret.equals(top)) {\n+        throw new WarpScriptException(getName() + \" invalid secret.\");\n+      }\n+    }      \n+\n+    List<Object> results = new ArrayList<Object>();\n+    \n+    for (WarpScriptStack stck: WarpScriptStackRegistry.stacks()) {\n+      List<Object> result = new ArrayList<Object>();\n+      \n+      result.add(stck.getUUID());\n+      result.add(stck.getAttribute(WarpScriptStack.ATTRIBUTE_CREATION_TIME));\n+      result.add(stck.getAttribute(WarpScriptStack.ATTRIBUTE_NAME));\n+      results.add(result);", "originalCommit": "fcd948797b71830d5fff4e6bd3de1de062a82fc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc8ca16277e3fe90819d55115a8adb1d27aa53eb", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/stackps/WSPS.java b/warp10/src/main/java/io/warp10/script/ext/stackps/WSPS.java\nindex d2030f7e..bf5cd430 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/stackps/WSPS.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/stackps/WSPS.java\n\n@@ -17,7 +17,9 @@\n package io.warp10.script.ext.stackps;\n \n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n \n import io.warp10.script.NamedWarpScriptFunction;\n import io.warp10.script.WarpScriptException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1NDg3OA==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r395054878", "bodyText": "Will be better to replace the list output by a list of map, with keys such as \"session_name\" \"warpscript_name\" and so on. It allows greater flexibility in the future, and easier javascript reading for guys who will code frontend.", "author": "pi-r-p", "createdAt": "2020-03-19T14:12:15Z", "path": "warp10/src/main/java/io/warp10/script/ext/stackps/WSPS.java", "diffHunk": "@@ -0,0 +1,66 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptStackRegistry;\n+\n+public class WSPS extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  public WSPS(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    //\n+    // A non null stackps secret was configured, check it\n+    //\n+    String secret = StackPSWarpScriptExtension.STACKPS_SECRET;\n+    \n+    if (null != secret) {\n+      Object top = stack.pop();\n+      \n+      if (!(top instanceof String)) {\n+        throw new WarpScriptException(getName() + \" expects a secret.\");\n+      }\n+      if (!secret.equals(top)) {\n+        throw new WarpScriptException(getName() + \" invalid secret.\");\n+      }\n+    }      \n+\n+    List<Object> results = new ArrayList<Object>();\n+    \n+    for (WarpScriptStack stck: WarpScriptStackRegistry.stacks()) {\n+      List<Object> result = new ArrayList<Object>();\n+      \n+      result.add(stck.getUUID());\n+      result.add(stck.getAttribute(WarpScriptStack.ATTRIBUTE_CREATION_TIME));\n+      result.add(stck.getAttribute(WarpScriptStack.ATTRIBUTE_NAME));\n+      results.add(result);\n+    }", "originalCommit": "fcd948797b71830d5fff4e6bd3de1de062a82fc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc8ca16277e3fe90819d55115a8adb1d27aa53eb", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/stackps/WSPS.java b/warp10/src/main/java/io/warp10/script/ext/stackps/WSPS.java\nindex d2030f7e..bf5cd430 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/stackps/WSPS.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/stackps/WSPS.java\n\n@@ -17,7 +17,9 @@\n package io.warp10.script.ext.stackps;\n \n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n \n import io.warp10.script.NamedWarpScriptFunction;\n import io.warp10.script.WarpScriptException;\n"}}, {"oid": "bc8ca16277e3fe90819d55115a8adb1d27aa53eb", "url": "https://github.com/senx/warp10-platform/commit/bc8ca16277e3fe90819d55115a8adb1d27aa53eb", "message": "Changed result of WSPS to be a list of maps", "committedDate": "2020-03-19T14:21:00Z", "type": "commit"}, {"oid": "4e41d7181580b0862688dbf700dfd9fc81d60955", "url": "https://github.com/senx/warp10-platform/commit/4e41d7181580b0862688dbf700dfd9fc81d60955", "message": "Added section", "committedDate": "2020-03-19T14:29:44Z", "type": "commit"}, {"oid": "56ff25571454f6993e74e1c9a68ff99fcb9b2651", "url": "https://github.com/senx/warp10-platform/commit/56ff25571454f6993e74e1c9a68ff99fcb9b2651", "message": "Factorized info extraction between WSINFO and WSPS", "committedDate": "2020-03-19T14:38:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5NzU3MQ==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r395097571", "bodyText": "Missing:\nStackPSWarpScriptExtension.ATTRIBUTE_SESSION\n(could be relocated in WarpScriptStack maybe ?)", "author": "pi-r-p", "createdAt": "2020-03-19T15:07:08Z", "path": "warp10/src/main/java/io/warp10/script/ext/stackps/WSINFO.java", "diffHunk": "@@ -0,0 +1,96 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptStackRegistry;\n+\n+public class WSINFO extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  \n+  public static final String[] EXPOSED_ATTRIBUTES = new String[] {\n+      WarpScriptStack.ATTRIBUTE_CREATION_TIME,\n+      WarpScriptStack.ATTRIBUTE_FETCH_COUNT,\n+      WarpScriptStack.ATTRIBUTE_GTS_COUNT,\n+      WarpScriptStack.ATTRIBUTE_MACRO_NAME,\n+      WarpScriptStack.ATTRIBUTE_NAME,\n+      WarpScriptStack.ATTRIBUTE_SECTION_NAME,", "originalCommit": "56ff25571454f6993e74e1c9a68ff99fcb9b2651", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEwODc2OA==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r395108768", "bodyText": "nope since it is added by an extension it is more logical to have it in the extension itself", "author": "hbs", "createdAt": "2020-03-19T15:21:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5NzU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExMjUxMA==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r395112510", "bodyText": "Yes for location, but having session name among infos in WSPS is great too.", "author": "pi-r-p", "createdAt": "2020-03-19T15:26:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5NzU3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/stackps/WSINFO.java b/warp10/src/main/java/io/warp10/script/ext/stackps/WSINFO.java\nindex 0743f9f4..3b17af3c 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/stackps/WSINFO.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/stackps/WSINFO.java\n\n@@ -34,6 +34,7 @@ public class WSINFO extends NamedWarpScriptFunction implements WarpScriptStackFu\n       WarpScriptStack.ATTRIBUTE_MACRO_NAME,\n       WarpScriptStack.ATTRIBUTE_NAME,\n       WarpScriptStack.ATTRIBUTE_SECTION_NAME,\n+      StackPSWarpScriptExtension.ATTRIBUTE_SESSION,\n   };\n   \n   public WSINFO(String name) {\n"}}, {"oid": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "url": "https://github.com/senx/warp10-platform/commit/9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "message": "Added SESSION", "committedDate": "2020-03-19T15:30:31Z", "type": "commit"}, {"oid": "f324bb7868203a0de55ef5f3de2a5da73dfaacb7", "url": "https://github.com/senx/warp10-platform/commit/f324bb7868203a0de55ef5f3de2a5da73dfaacb7", "message": "Commented out secret checking", "committedDate": "2020-03-23T20:38:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5NzU0OQ==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r396597549", "bodyText": "Missing WarpScriptStackRegistry.unregister(stack) for this registration.", "author": "ftence", "createdAt": "2020-03-23T16:46:37Z", "path": "warp10/src/main/java/io/warp10/plugins/http/WarpScriptHandler.java", "diffHunk": "@@ -67,6 +68,7 @@ public void handle(String target, Request baseRequest, HttpServletRequest reques\n     baseRequest.setHandled(true);\n \n     MemoryWarpScriptStack stack = new MemoryWarpScriptStack(HTTPWarp10Plugin.getExposedStoreClient(), HTTPWarp10Plugin.getExposedDirectoryClient(), this.properties);\n+    stack.setAttribute(WarpScriptStack.ATTRIBUTE_NAME, \"[HTTPWarp10Plugin \" + request.getRequestURL() + \"]\");", "originalCommit": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3d1920627129e59515e13363548a91076237ec5", "chunk": "diff --git a/warp10/src/main/java/io/warp10/plugins/http/WarpScriptHandler.java b/warp10/src/main/java/io/warp10/plugins/http/WarpScriptHandler.java\nindex 277b0f2f..30e9567c 100644\n--- a/warp10/src/main/java/io/warp10/plugins/http/WarpScriptHandler.java\n+++ b/warp10/src/main/java/io/warp10/plugins/http/WarpScriptHandler.java\n\n@@ -68,98 +70,103 @@ public class WarpScriptHandler extends AbstractHandler {\n     baseRequest.setHandled(true);\n \n     MemoryWarpScriptStack stack = new MemoryWarpScriptStack(HTTPWarp10Plugin.getExposedStoreClient(), HTTPWarp10Plugin.getExposedDirectoryClient(), this.properties);\n-    stack.setAttribute(WarpScriptStack.ATTRIBUTE_NAME, \"[HTTPWarp10Plugin \" + request.getRequestURL() + \"]\");\n-\n-    //\n-    // Push the details onto the stack\n-    //\n-\n-    Map<String, Object> params = new HashMap<String, Object>();\n-\n-    params.put(\"method\", request.getMethod());\n-    params.put(\"target\", target);\n-    params.put(\"pathinfo\", target.substring(prefix.length()));\n-\n-    Enumeration<String> hdrs = request.getHeaderNames();\n-    Map<String, List<String>> headers = new HashMap<String, List<String>>();\n-    while (hdrs.hasMoreElements()) {\n-      String hdr = hdrs.nextElement();\n-      Enumeration<String> hvalues = request.getHeaders(hdr);\n-      List<String> hval = new ArrayList<String>();\n-      while (hvalues.hasMoreElements()) {\n-        hval.add(hvalues.nextElement());\n-      }\n-      if (plugin.isLcHeaders()) {\n-        headers.put(hdr.toLowerCase(), hval);\n-      } else {\n-        headers.put(hdr, hval);\n+\n+    try {\n+      stack.setAttribute(WarpScriptStack.ATTRIBUTE_NAME, \"[HTTPWarp10Plugin \" + request.getRequestURL() + \"]\");\n+\n+      //\n+      // Push the details onto the stack\n+      //\n+\n+      Map<String, Object> params = new HashMap<String, Object>();\n+\n+      params.put(\"method\", request.getMethod());\n+      params.put(\"target\", target);\n+      params.put(\"pathinfo\", target.substring(prefix.length()));\n+\n+      Enumeration<String> hdrs = request.getHeaderNames();\n+      Map<String, List<String>> headers = new HashMap<String, List<String>>();\n+      while (hdrs.hasMoreElements()) {\n+        String hdr = hdrs.nextElement();\n+        Enumeration<String> hvalues = request.getHeaders(hdr);\n+        List<String> hval = new ArrayList<String>();\n+        while (hvalues.hasMoreElements()) {\n+          hval.add(hvalues.nextElement());\n+        }\n+        if (plugin.isLcHeaders()) {\n+          headers.put(hdr.toLowerCase(), hval);\n+        } else {\n+          headers.put(hdr, hval);\n+        }\n       }\n-    }\n-    params.put(\"headers\", headers);\n+      params.put(\"headers\", headers);\n \n-    // Get the payload if the content-type is not application/x-www-form-urlencoded or we do not want to parse the payload\n-    if (!MimeTypes.Type.FORM_ENCODED.is(request.getContentType()) || !plugin.isParsePayload(prefix)) {\n-      byte[] payload = IOUtils.toByteArray(request.getInputStream());\n-      if (0 < payload.length) {\n-        params.put(\"payload\", payload);\n+      // Get the payload if the content-type is not application/x-www-form-urlencoded or we do not want to parse the payload\n+      if (!MimeTypes.Type.FORM_ENCODED.is(request.getContentType()) || !plugin.isParsePayload(prefix)) {\n+        byte[] payload = IOUtils.toByteArray(request.getInputStream());\n+        if (0 < payload.length) {\n+          params.put(\"payload\", payload);\n+        }\n       }\n-    }\n \n-    Map<String, List<String>> httpparams = new HashMap<String, List<String>>();\n-    Map<String, String[]> pmap = request.getParameterMap();\n-    for (Entry<String, String[]> param: pmap.entrySet()) {\n-      httpparams.put(param.getKey(), Arrays.asList(param.getValue()));\n-    }\n-    params.put(\"params\", httpparams);\n+      Map<String, List<String>> httpparams = new HashMap<String, List<String>>();\n+      Map<String, String[]> pmap = request.getParameterMap();\n+      for (Entry<String, String[]> param: pmap.entrySet()) {\n+        httpparams.put(param.getKey(), Arrays.asList(param.getValue()));\n+      }\n+      params.put(\"params\", httpparams);\n \n-    try {\n-      stack.push(params);\n-      stack.exec(macro);\n+      try {\n+        stack.push(params);\n+        stack.exec(macro);\n \n-      Object top = stack.pop();\n+        Object top = stack.pop();\n \n-      if (top instanceof Map) {\n-        Map<String, Object> result = (Map<String, Object>) top;\n-        if (result.containsKey(\"status\")) {\n-          response.setStatus(((Number) result.get(\"status\")).intValue());\n-        }\n+        if (top instanceof Map) {\n+          Map<String, Object> result = (Map<String, Object>) top;\n+          if (result.containsKey(\"status\")) {\n+            response.setStatus(((Number) result.get(\"status\")).intValue());\n+          }\n \n-        if (result.containsKey(\"headers\")) {\n-          Map<String, Object> respheaders = (Map<String, Object>) result.get(\"headers\");\n-          for (Entry<String, Object> hdr: respheaders.entrySet()) {\n-            if (hdr.getValue() instanceof List) {\n-              for (Object o: (List) hdr.getValue()) {\n-                response.addHeader(hdr.getKey(), o.toString());\n+          if (result.containsKey(\"headers\")) {\n+            Map<String, Object> respheaders = (Map<String, Object>) result.get(\"headers\");\n+            for (Entry<String, Object> hdr: respheaders.entrySet()) {\n+              if (hdr.getValue() instanceof List) {\n+                for (Object o: (List) hdr.getValue()) {\n+                  response.addHeader(hdr.getKey(), o.toString());\n+                }\n+              } else {\n+                response.setHeader(hdr.getKey(), hdr.getValue().toString());\n               }\n-            } else {\n-              response.setHeader(hdr.getKey(), hdr.getValue().toString());\n             }\n           }\n-        }\n \n-        if (result.containsKey(\"body\")) {\n-          Object body = result.get(\"body\");\n-          if (body instanceof byte[]) {\n+          if (result.containsKey(\"body\")) {\n+            Object body = result.get(\"body\");\n+            if (body instanceof byte[]) {\n+              OutputStream out = response.getOutputStream();\n+              out.write((byte[]) body);\n+            } else {\n+              PrintWriter writer = response.getWriter();\n+              writer.print(body.toString());\n+            }\n+          }\n+        } else {\n+          if (top instanceof byte[]) {\n+            response.setContentType(\"application/octet-stream\");\n             OutputStream out = response.getOutputStream();\n-            out.write((byte[]) body);\n+            out.write((byte[]) top);\n           } else {\n+            response.setContentType(\"text/plain\");\n             PrintWriter writer = response.getWriter();\n-            writer.print(body.toString());\n+            writer.println(String.valueOf(top));\n           }\n         }\n-      } else {\n-        if (top instanceof byte[]) {\n-          response.setContentType(\"application/octet-stream\");\n-          OutputStream out = response.getOutputStream();\n-          out.write((byte[]) top);\n-        } else {\n-          response.setContentType(\"text/plain\");\n-          PrintWriter writer = response.getWriter();\n-          writer.println(String.valueOf(top));\n-        }\n-      }\n-    } catch (WarpScriptException wse) {\n-      throw new IOException(wse);\n-    }\n+      } catch (WarpScriptException wse) {\n+        throw new IOException(wse);\n+      }      \n+    } finally {\n+      WarpScriptStackRegistry.unregister(stack);\n+    }    \n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwODI1OA==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r396608258", "bodyText": "Missing WarpScriptStackRegistry.unregister(stack) for this registration.", "author": "ftence", "createdAt": "2020-03-23T17:01:24Z", "path": "warp10/src/main/java/io/warp10/plugins/tcp/TCPClient.java", "diffHunk": "@@ -56,6 +57,7 @@\n \n     this.reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), charset));\n     this.stack = new MemoryWarpScriptStack(null, null, new Properties());\n+    this.stack.setAttribute(WarpScriptStack.ATTRIBUTE_NAME, \"[Warp10TCPPlugin \" + socket.getLocalPort() + \"]\");", "originalCommit": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwOTI3OA==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r396609278", "bodyText": "Extra spaces to be removed.", "author": "ftence", "createdAt": "2020-03-23T17:02:51Z", "path": "warp10/src/main/java/io/warp10/continuum/egress/EgressMobiusHandler.java", "diffHunk": "@@ -454,7 +458,7 @@ public void run() {\n           \n           pw.flush();\n           \n-          fsession.getRemote().sendStringByFuture(sw.toString());\n+          fsession.getRemote().sendStringByFuture(sw.toString());          ", "originalCommit": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3d1920627129e59515e13363548a91076237ec5", "chunk": "diff --git a/warp10/src/main/java/io/warp10/continuum/egress/EgressMobiusHandler.java b/warp10/src/main/java/io/warp10/continuum/egress/EgressMobiusHandler.java\nindex 76e7fea6..2b49d33a 100644\n--- a/warp10/src/main/java/io/warp10/continuum/egress/EgressMobiusHandler.java\n+++ b/warp10/src/main/java/io/warp10/continuum/egress/EgressMobiusHandler.java\n\n@@ -458,7 +458,7 @@ public class EgressMobiusHandler extends WebSocketHandler.Simple implements Runn\n           \n           pw.flush();\n           \n-          fsession.getRemote().sendStringByFuture(sw.toString());          \n+          fsession.getRemote().sendStringByFuture(sw.toString());\n         }\n       };\n       \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMzk2MQ==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r396623961", "bodyText": "stack, not this.stack.", "author": "ftence", "createdAt": "2020-03-23T17:23:51Z", "path": "warp10/src/main/java/io/warp10/plugins/udp/UDPConsumer.java", "diffHunk": "@@ -155,6 +156,7 @@ public void run() {\n     for (int i = 0; i < this.parallelism; i++) {\n \n       final MemoryWarpScriptStack stack = new MemoryWarpScriptStack(null, null, new Properties());\n+      this.stack.setAttribute(WarpScriptStack.ATTRIBUTE_NAME, \"[Warp10UDPPlugin \" + socket.getLocalPort() + \" #\" + i + \"]\");", "originalCommit": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNzk1NQ==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r396627955", "bodyText": "Also, not unregistered but as these stacks are meant to live during all the lifetime of the platform, this is not that important.", "author": "ftence", "createdAt": "2020-03-23T17:29:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyMzk2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c3d1920627129e59515e13363548a91076237ec5", "chunk": "diff --git a/warp10/src/main/java/io/warp10/plugins/udp/UDPConsumer.java b/warp10/src/main/java/io/warp10/plugins/udp/UDPConsumer.java\nindex 181bd496..ac808a94 100644\n--- a/warp10/src/main/java/io/warp10/plugins/udp/UDPConsumer.java\n+++ b/warp10/src/main/java/io/warp10/plugins/udp/UDPConsumer.java\n\n@@ -156,7 +158,7 @@ public class UDPConsumer extends Thread {\n     for (int i = 0; i < this.parallelism; i++) {\n \n       final MemoryWarpScriptStack stack = new MemoryWarpScriptStack(null, null, new Properties());\n-      this.stack.setAttribute(WarpScriptStack.ATTRIBUTE_NAME, \"[Warp10UDPPlugin \" + socket.getLocalPort() + \" #\" + i + \"]\");\n+      stack.setAttribute(WarpScriptStack.ATTRIBUTE_NAME, \"[Warp10UDPPlugin \" + socket.getLocalPort() + \" #\" + i + \"]\");\n       stack.maxLimits();\n \n       final LinkedBlockingQueue<List<Object>> queue = this.queues[Math.min(i, this.queues.length - 1)];\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNjI5MQ==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r396626291", "bodyText": "I think this.aborted should be reset to false in order to be able to reuse this stack. For instance, UDP or TCP stacks are persistent so aborting a stack will make all subsequent exec early abort.", "author": "ftence", "createdAt": "2020-03-23T17:27:16Z", "path": "warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java", "diffHunk": "@@ -562,6 +571,10 @@ public void exec(String line) throws WarpScriptException {\n       //\n \n       for (int st = 0; st < statements.length; st++) {\n+        if (this.aborted) {\n+          throw new WarpScriptException(\"Execution aborted.\");", "originalCommit": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyMzU4MA==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r397723580", "bodyText": "Aborted stacks should never be reused, this is the whole point of aborting them. Are you suggesting that we should be able to externally STOP a stack on top of being able to abort one?", "author": "hbs", "createdAt": "2020-03-25T09:45:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNjI5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c3d1920627129e59515e13363548a91076237ec5", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java b/warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java\nindex e9c6ce99..e1f9c573 100644\n--- a/warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java\n+++ b/warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java\n\n@@ -571,7 +572,7 @@ public class MemoryWarpScriptStack implements WarpScriptStack, Progressable {\n       //\n \n       for (int st = 0; st < statements.length; st++) {\n-        if (this.aborted) {\n+        if (this.signaled) {\n           throw new WarpScriptException(\"Execution aborted.\");\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNjUyMQ==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r396626521", "bodyText": "Ditto.", "author": "ftence", "createdAt": "2020-03-23T17:27:36Z", "path": "warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java", "diffHunk": "@@ -940,6 +953,10 @@ public void exec(Macro macro) throws WarpScriptException {\n \n       for (i = 0; i < n; i++) {        \n \n+        if (this.aborted) {\n+          throw new WarpScriptException(\"Execution aborted.\");", "originalCommit": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3d1920627129e59515e13363548a91076237ec5", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java b/warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java\nindex e9c6ce99..e1f9c573 100644\n--- a/warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java\n+++ b/warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java\n\n@@ -953,8 +954,10 @@ public class MemoryWarpScriptStack implements WarpScriptStack, Progressable {\n \n       for (i = 0; i < n; i++) {        \n \n-        if (this.aborted) {\n-          throw new WarpScriptException(\"Execution aborted.\");\n+        // We check the boolean outside of a synchronized block for efficiency\n+        // even though we might miss a change\n+        if (this.signaled) {\n+          signal();\n         }\n         \n         Object stmt = stmts.get(i);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzMzQ0OA==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r396633448", "bodyText": "Missing WarpScriptStackRegistry.unregister(stack) for this registration.", "author": "ftence", "createdAt": "2020-03-23T17:37:39Z", "path": "warp10/src/main/java/io/warp10/script/WarpScriptExecutor.java", "diffHunk": "@@ -219,6 +219,7 @@ private void initStack() {\n       @Override\n       protected WarpScriptStack initialValue() {\n         MemoryWarpScriptStack stack = new MemoryWarpScriptStack(null, null, properties);\n+        stack.setAttribute(WarpScriptStack.ATTRIBUTE_NAME, \"[WarpScriptExecutor \" + semantics.name() + \"]\");", "originalCommit": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzNTE1Ng==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r396635156", "bodyText": "Missing copyright notice.", "author": "ftence", "createdAt": "2020-03-23T17:40:19Z", "path": "warp10/src/main/java/io/warp10/script/WarpScriptStackRegistry.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.warp10.script;", "originalCommit": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3d1920627129e59515e13363548a91076237ec5", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/WarpScriptStackRegistry.java b/warp10/src/main/java/io/warp10/script/WarpScriptStackRegistry.java\nindex 39e8e915..5c69ab9e 100644\n--- a/warp10/src/main/java/io/warp10/script/WarpScriptStackRegistry.java\n+++ b/warp10/src/main/java/io/warp10/script/WarpScriptStackRegistry.java\n\n@@ -6,6 +6,7 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n+import io.warp10.script.WarpScriptStack.Signal;\n import io.warp10.script.ext.stackps.StackPSWarpScriptExtension;\n \n public class WarpScriptStackRegistry {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzNTgyNw==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r396635827", "bodyText": "Could fail if a stack has not been unregistered but has been garbage collected.", "author": "ftence", "createdAt": "2020-03-23T17:41:23Z", "path": "warp10/src/main/java/io/warp10/script/WarpScriptStackRegistry.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.warp10.script;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.warp10.script.ext.stackps.StackPSWarpScriptExtension;\n+\n+public class WarpScriptStackRegistry {\n+  \n+  private static final Map<String,WeakReference<WarpScriptStack>> stacks = new HashMap<String,WeakReference<WarpScriptStack>>();\n+  \n+  private static boolean enabled = false;\n+  \n+  public static void register(WarpScriptStack stack) {\n+    if (!enabled || null == stack) {\n+      return;\n+    }\n+    stacks.put(stack.getUUID(), new WeakReference<WarpScriptStack>(stack));\n+  }\n+  \n+  public static boolean unregister(WarpScriptStack stack) {\n+    if (!enabled || null == stack) {\n+      return false;\n+    }\n+    return null != stacks.remove(stack.getUUID());\n+  }\n+  \n+  public static boolean unregister(String uuid) {\n+    if (!enabled) {\n+      return false;\n+    }\n+    return null != stacks.remove(uuid);\n+  }\n+  \n+  public static boolean abort(String uuid) {\n+    if (!enabled) {\n+      return false;\n+    }\n+    \n+    WeakReference<WarpScriptStack> stackref = stacks.get(uuid);\n+    \n+    if (null == stackref) {\n+      return false;\n+    }\n+    \n+    stackref.get().abort();", "originalCommit": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3d1920627129e59515e13363548a91076237ec5", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/WarpScriptStackRegistry.java b/warp10/src/main/java/io/warp10/script/WarpScriptStackRegistry.java\nindex 39e8e915..5c69ab9e 100644\n--- a/warp10/src/main/java/io/warp10/script/WarpScriptStackRegistry.java\n+++ b/warp10/src/main/java/io/warp10/script/WarpScriptStackRegistry.java\n\n@@ -6,6 +6,7 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n+import io.warp10.script.WarpScriptStack.Signal;\n import io.warp10.script.ext.stackps.StackPSWarpScriptExtension;\n \n public class WarpScriptStackRegistry {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzNTU3NA==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r397035574", "bodyText": "It would better to create and expose a WarpScriptStackRegistry.getStack(String uuid) to take advantage of the underlying Map.\nAlso be careful that WeakReference.get() could return null if the stack has not been unregistered but GCed.", "author": "ftence", "createdAt": "2020-03-24T10:07:56Z", "path": "warp10/src/main/java/io/warp10/script/ext/stackps/WSINFO.java", "diffHunk": "@@ -0,0 +1,97 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptStackRegistry;\n+\n+public class WSINFO extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  \n+  public static final String[] EXPOSED_ATTRIBUTES = new String[] {\n+      WarpScriptStack.ATTRIBUTE_CREATION_TIME,\n+      WarpScriptStack.ATTRIBUTE_FETCH_COUNT,\n+      WarpScriptStack.ATTRIBUTE_GTS_COUNT,\n+      WarpScriptStack.ATTRIBUTE_MACRO_NAME,\n+      WarpScriptStack.ATTRIBUTE_NAME,\n+      WarpScriptStack.ATTRIBUTE_SECTION_NAME,\n+      StackPSWarpScriptExtension.ATTRIBUTE_SESSION,\n+  };\n+  \n+  public WSINFO(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+\n+    //\n+    // A non null stackps secret was configured, check it\n+    //\n+    String secret = StackPSWarpScriptExtension.STACKPS_SECRET;\n+    \n+    if (null != secret) {     \n+      if (!(top instanceof String)) {\n+        throw new WarpScriptException(getName() + \" expects a secret.\");\n+      }\n+      if (!secret.equals(top)) {\n+        throw new WarpScriptException(getName() + \" invalid secret.\");\n+      }\n+      \n+      top = stack.pop();\n+    }      \n+\n+    if (!(top instanceof String)) {\n+      throw new WarpScriptException(getName() + \" expects a UUID.\");\n+    }\n+    \n+    Map<Object,Object> infos = null;\n+\n+    String uuid = top.toString();\n+    \n+    for (WarpScriptStack stck: WarpScriptStackRegistry.stacks()) {\n+      if (uuid.equals(stck.getUUID())) {\n+        infos = getInfos(stck);\n+      }\n+    }", "originalCommit": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE2NjU5MA==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r400166590", "bodyText": "It's actually the session name we use to identify the stack, not the UUID, so it is not readily available in the underlying map.", "author": "hbs", "createdAt": "2020-03-30T12:53:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzNTU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "925b45a9c14d8162ea9aaeb8f338a57f6e3207b0", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/stackps/WSINFO.java b/warp10/src/main/java/io/warp10/script/ext/stackps/WSINFO.java\nindex 3b17af3c..f7bf8d0b 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/stackps/WSINFO.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/stackps/WSINFO.java\n\n@@ -45,24 +45,24 @@ public class WSINFO extends NamedWarpScriptFunction implements WarpScriptStackFu\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n     Object top = stack.pop();\n \n-    //\n-    // A non null stackps secret was configured, check it\n-    //\n-    String secret = StackPSWarpScriptExtension.STACKPS_SECRET;\n-    \n-    if (null != secret) {     \n-      if (!(top instanceof String)) {\n-        throw new WarpScriptException(getName() + \" expects a secret.\");\n-      }\n-      if (!secret.equals(top)) {\n-        throw new WarpScriptException(getName() + \" invalid secret.\");\n-      }\n-      \n-      top = stack.pop();\n-    }      \n+//    //\n+//    // A non null stackps secret was configured, check it\n+//    //\n+//    String secret = StackPSWarpScriptExtension.STACKPS_SECRET;\n+//    \n+//    if (null != secret) {     \n+//      if (!(top instanceof String)) {\n+//        throw new WarpScriptException(getName() + \" expects a secret.\");\n+//      }\n+//      if (!secret.equals(top)) {\n+//        throw new WarpScriptException(getName() + \" invalid secret.\");\n+//      }\n+//      \n+//      top = stack.pop();\n+//    }      \n \n     if (!(top instanceof String)) {\n-      throw new WarpScriptException(getName() + \" expects a UUID.\");\n+      throw new WarpScriptException(getName() + \" expects a session id.\");\n     }\n     \n     Map<Object,Object> infos = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzNjU1OQ==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r397036559", "bodyText": "stck can be null if not unregistered and GCed.", "author": "ftence", "createdAt": "2020-03-24T10:09:40Z", "path": "warp10/src/main/java/io/warp10/script/ext/stackps/WSPS.java", "diffHunk": "@@ -0,0 +1,66 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptStackRegistry;\n+\n+public class WSPS extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  \n+  public WSPS(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    //\n+    // A non null stackps secret was configured, check it\n+    //\n+    String secret = StackPSWarpScriptExtension.STACKPS_SECRET;\n+    \n+    if (null != secret) {\n+      Object top = stack.pop();\n+      \n+      if (!(top instanceof String)) {\n+        throw new WarpScriptException(getName() + \" expects a secret.\");\n+      }\n+      if (!secret.equals(top)) {\n+        throw new WarpScriptException(getName() + \" invalid secret.\");\n+      }\n+    }      \n+\n+    List<Object> results = new ArrayList<Object>();\n+    \n+    for (WarpScriptStack stck: WarpScriptStackRegistry.stacks()) {\n+      Map<Object,Object> result = WSINFO.getInfos(stck);", "originalCommit": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0MjcwMQ==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r397042701", "bodyText": "Why not simply (String)top?", "author": "ftence", "createdAt": "2020-03-24T10:19:59Z", "path": "warp10/src/main/java/io/warp10/script/ext/stackps/STACKPSSECRET.java", "diffHunk": "@@ -0,0 +1,55 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+public class STACKPSSECRET extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  public STACKPSSECRET(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    \n+    String secret = StackPSWarpScriptExtension.STACKPS_SECRET;\n+    \n+    if (null == secret) {\n+      throw new WarpScriptException(getName() + \" cannot be used if a stackps secret was not configured.\");\n+    }\n+    \n+    Object top = stack.pop();\n+    \n+    if (!secret.equals(top)) {\n+      throw new WarpScriptException(getName() + \" invalid secret.\");\n+    }\n+    \n+    // pop the new secret to use\n+    top = stack.pop();\n+    \n+    if (!(top instanceof String)) {\n+      throw new WarpScriptException(getName() + \" expects a new secret which is a non null string.\");\n+    }\n+    \n+    StackPSWarpScriptExtension.STACKPS_SECRET = String.valueOf(top);", "originalCommit": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d0e884db573a93d64bab4e036980d3ac4817e29", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/stackps/STACKPSSECRET.java b/warp10/src/main/java/io/warp10/script/ext/stackps/STACKPSSECRET.java\nindex bde6f433..af126e13 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/stackps/STACKPSSECRET.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/stackps/STACKPSSECRET.java\n\n@@ -48,7 +48,7 @@ public class STACKPSSECRET extends NamedWarpScriptFunction implements WarpScript\n       throw new WarpScriptException(getName() + \" expects a new secret which is a non null string.\");\n     }\n     \n-    StackPSWarpScriptExtension.STACKPS_SECRET = String.valueOf(top);\n+    StackPSWarpScriptExtension.STACKPS_SECRET = (String) top;\n     \n     return stack;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1NjEyNA==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r397056124", "bodyText": "Why a stack without session name can't be renamed?\nAt least an error would be welcome instead of silently not setting the session name.", "author": "ftence", "createdAt": "2020-03-24T10:42:32Z", "path": "warp10/src/main/java/io/warp10/script/ext/stackps/WSNAME.java", "diffHunk": "@@ -0,0 +1,62 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+public class WSNAME extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  \n+  private static final int MAX_SIZE = 128;\n+  \n+  /**\n+   * True when setting the session\n+   */\n+  private final boolean session;\n+  \n+  public WSNAME(String name, boolean session) {\n+    super(name);\n+    this.session = session;\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+\n+    if (!(top instanceof String)) {\n+      throw new WarpScriptException(getName() + \" expects a STRING.\");\n+    }\n+    \n+    String name = top.toString();\n+    \n+    if (name.length() > MAX_SIZE) {\n+      throw new WarpScriptException(getName() + \" expects a name less than \" + MAX_SIZE + \" characters.\");\n+    }\n+    \n+    if (session) {\n+      if (null != stack.getAttribute(StackPSWarpScriptExtension.ATTRIBUTE_SESSION)) {", "originalCommit": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE2MTYyMw==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r400161623", "bodyText": "The idea was the opposite, if it already has a session name you cannot change the session name", "author": "hbs", "createdAt": "2020-03-30T12:45:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1NjEyNA=="}], "type": "inlineReview", "revised_code": {"commit": "7d0e884db573a93d64bab4e036980d3ac4817e29", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/stackps/WSNAME.java b/warp10/src/main/java/io/warp10/script/ext/stackps/WSNAME.java\nindex 9e54134c..da0b2ded 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/stackps/WSNAME.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/stackps/WSNAME.java\n\n@@ -50,7 +50,7 @@ public class WSNAME extends NamedWarpScriptFunction implements WarpScriptStackFu\n     }\n     \n     if (session) {\n-      if (null != stack.getAttribute(StackPSWarpScriptExtension.ATTRIBUTE_SESSION)) {\n+      if (null == stack.getAttribute(StackPSWarpScriptExtension.ATTRIBUTE_SESSION)) {\n         stack.setAttribute(StackPSWarpScriptExtension.ATTRIBUTE_SESSION, name);      \n       }\n     } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyNzM1Nw==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r397127357", "bodyText": "Wouldn't it be clearer if the two share the same terminology? They effectively do the same but use different info to achieve it.\nKILL seems to stop right now the stack, which is not the case, whereas ABORT seems more suited.\nMaybe WSABORT and WSABORTSESSION ?", "author": "ftence", "createdAt": "2020-03-24T12:51:20Z", "path": "warp10/src/main/java/io/warp10/script/ext/stackps/StackPSWarpScriptExtension.java", "diffHunk": "@@ -0,0 +1,63 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStackRegistry;\n+import io.warp10.warp.sdk.WarpScriptExtension;\n+\n+public class StackPSWarpScriptExtension extends WarpScriptExtension {\n+  /*\n+   *  Name of configuration key with the stackps secret. \n+   */\n+  public static final String CONF_STACKPS_SECRET = \"stackps.secret\";\n+  \n+  /**\n+   * Current StackPS Secret\n+   */\n+  public static String STACKPS_SECRET;  \n+\n+  public static final String ATTRIBUTE_SESSION = \"stackps.session\";\n+  \n+  public static final String HEADER_SESSION = \"X-Warp10-WarpScriptSession\";\n+  \n+  private static final Map<String,Object> functions;\n+  \n+  static {\n+    WarpScriptStackRegistry.enable();\n+    \n+    STACKPS_SECRET = WarpConfig.getProperty(CONF_STACKPS_SECRET);\n+\n+    functions = new HashMap<String,Object>();\n+    \n+    functions.put(\"STACKPSSECRET\", new STACKPSSECRET(\"STACKPSSECRET\"));\n+    functions.put(\"WSPS\", new WSPS(\"WSPS\"));\n+    functions.put(\"WSINFO\", new WSINFO(\"WSINFO\"));\n+    functions.put(\"WSKILL\", new WSKILL(\"WSKILL\"));\n+    functions.put(\"WSABORT\", new WSABORT(\"WSABORT\"));", "originalCommit": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3d1920627129e59515e13363548a91076237ec5", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/stackps/StackPSWarpScriptExtension.java b/warp10/src/main/java/io/warp10/script/ext/stackps/StackPSWarpScriptExtension.java\nindex 83e689e9..e8b56d93 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/stackps/StackPSWarpScriptExtension.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/stackps/StackPSWarpScriptExtension.java\n\n@@ -20,6 +20,7 @@ import java.util.HashMap;\n import java.util.Map;\n \n import io.warp10.WarpConfig;\n+import io.warp10.script.WarpScriptStack.Signal;\n import io.warp10.script.WarpScriptStackRegistry;\n import io.warp10.warp.sdk.WarpScriptExtension;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyODQ1OA==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r397128458", "bodyText": "Should we make an exception when aborting its own stack?", "author": "ftence", "createdAt": "2020-03-24T12:53:10Z", "path": "warp10/src/main/java/io/warp10/script/ext/stackps/WSABORT.java", "diffHunk": "@@ -0,0 +1,42 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptStackRegistry;\n+\n+public class WSABORT extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  public WSABORT(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+    \n+    if (!(top instanceof String)) {\n+      throw new WarpScriptException(getName() + \" expects a session name (STRING).\");\n+    }\n+    \n+    stack.push(WarpScriptStackRegistry.abortSession(top.toString()));", "originalCommit": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE2NjgxOA==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r400166818", "bodyText": "use with caution, but no", "author": "hbs", "createdAt": "2020-03-30T12:53:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyODQ1OA=="}], "type": "inlineReview", "revised_code": {"commit": "c3d1920627129e59515e13363548a91076237ec5", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/stackps/WSABORT.java b/warp10/src/main/java/io/warp10/script/ext/stackps/WSKILLSESSION.java\nsimilarity index 77%\nrename from warp10/src/main/java/io/warp10/script/ext/stackps/WSABORT.java\nrename to warp10/src/main/java/io/warp10/script/ext/stackps/WSKILLSESSION.java\nindex 7914ccd9..0449ed55 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/stackps/WSABORT.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/stackps/WSKILLSESSION.java\n\n@@ -19,12 +19,17 @@ package io.warp10.script.ext.stackps;\n import io.warp10.script.NamedWarpScriptFunction;\n import io.warp10.script.WarpScriptException;\n import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStack.Signal;\n import io.warp10.script.WarpScriptStackFunction;\n import io.warp10.script.WarpScriptStackRegistry;\n \n-public class WSABORT extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n-  public WSABORT(String name) {\n+public class WSKILLSESSION extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  \n+  private final Signal signal;\n+  \n+  public WSKILLSESSION(String name, Signal signal) {\n     super(name);\n+    this.signal = signal;\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwMDQwMA==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r397200400", "bodyText": "Same comment as for WSABORT: do we make a specific case for own stack?", "author": "ftence", "createdAt": "2020-03-24T14:35:08Z", "path": "warp10/src/main/java/io/warp10/script/ext/stackps/WSKILL.java", "diffHunk": "@@ -0,0 +1,58 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptStackRegistry;\n+\n+public class WSKILL extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  public WSKILL(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+\n+    //\n+    // A non null stackps secret was configured, check it\n+    //\n+\n+    String secret = StackPSWarpScriptExtension.STACKPS_SECRET;\n+\n+    if (null != secret) {\n+      if (!(top instanceof String)) {\n+        throw new WarpScriptException(getName() + \" expects a secret.\");\n+      }\n+      if (!secret.equals(top)) {\n+        throw new WarpScriptException(getName() + \" invalid secret.\");\n+      }        \n+      top = stack.pop();\n+    }      \n+\n+    if (!(top instanceof String)) {\n+      throw new WarpScriptException(getName() + \" expects a UUID.\");\n+    }\n+    \n+    stack.push(WarpScriptStackRegistry.abort(top.toString()));", "originalCommit": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE2NjczMQ==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r400166731", "bodyText": "use with caution, but no", "author": "hbs", "createdAt": "2020-03-30T12:53:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwMDQwMA=="}], "type": "inlineReview", "revised_code": {"commit": "c3d1920627129e59515e13363548a91076237ec5", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/stackps/WSKILL.java b/warp10/src/main/java/io/warp10/script/ext/stackps/WSKILL.java\nindex cd7a6c61..93935e71 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/stackps/WSKILL.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/stackps/WSKILL.java\n\n@@ -19,12 +19,17 @@ package io.warp10.script.ext.stackps;\n import io.warp10.script.NamedWarpScriptFunction;\n import io.warp10.script.WarpScriptException;\n import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStack.Signal;\n import io.warp10.script.WarpScriptStackFunction;\n import io.warp10.script.WarpScriptStackRegistry;\n \n public class WSKILL extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n-  public WSKILL(String name) {\n+\n+  private final Signal signal;\n+\n+  public WSKILL(String name, Signal signal) {\n     super(name);\n+    this.signal = signal;\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwNDcxMg==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r397204712", "bodyText": "I think it should be inside the while several line above, not after. It could be added after line 511 for instance.", "author": "ftence", "createdAt": "2020-03-24T14:40:45Z", "path": "warp10/src/main/java/io/warp10/script/functions/FETCH.java", "diffHunk": "@@ -514,6 +518,10 @@ public Object apply(WarpScriptStack stack) throws WarpScriptException {\n                 throw new WarpScriptException(getName() + \" exceeded limit of \" + fetchLimit + \" datapoints, current count is \" + fetched.get());\n               }\n \n+              if (stack.aborted()) {\n+                throw new WarpScriptException(getName() + \" execution aborted.\");\n+              }\n+              ", "originalCommit": "9e58a8822dacfdace57c5e2860fc2cf7e96c64f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3d1920627129e59515e13363548a91076237ec5", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/functions/FETCH.java b/warp10/src/main/java/io/warp10/script/functions/FETCH.java\nindex 006ab7e2..08b1acb0 100644\n--- a/warp10/src/main/java/io/warp10/script/functions/FETCH.java\n+++ b/warp10/src/main/java/io/warp10/script/functions/FETCH.java\n\n@@ -518,9 +590,7 @@ public class FETCH extends NamedWarpScriptFunction implements WarpScriptStackFun\n                 throw new WarpScriptException(getName() + \" exceeded limit of \" + fetchLimit + \" datapoints, current count is \" + fetched.get());\n               }\n \n-              if (stack.aborted()) {\n-                throw new WarpScriptException(getName() + \" execution aborted.\");\n-              }\n+              stack.signal();\n               \n               lastCount += dpcount;\n               \n"}}, {"oid": "925b45a9c14d8162ea9aaeb8f338a57f6e3207b0", "url": "https://github.com/senx/warp10-platform/commit/925b45a9c14d8162ea9aaeb8f338a57f6e3207b0", "message": "Merge branch 'master' into stackps", "committedDate": "2020-03-25T09:32:21Z", "type": "commit"}, {"oid": "c3d1920627129e59515e13363548a91076237ec5", "url": "https://github.com/senx/warp10-platform/commit/c3d1920627129e59515e13363548a91076237ec5", "message": "Refactored to enable multiple signals", "committedDate": "2020-03-25T14:54:35Z", "type": "commit"}, {"oid": "06976653d5a7bbe8b870a371cc4516a107c44c8b", "url": "https://github.com/senx/warp10-platform/commit/06976653d5a7bbe8b870a371cc4516a107c44c8b", "message": "Refactored to ease inlining in case we add signals", "committedDate": "2020-03-26T06:22:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA1ODc0Mg==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r400058742", "bodyText": "We should still allow overriding a STOP by a KILL.", "author": "ftence", "createdAt": "2020-03-30T09:42:51Z", "path": "warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java", "diffHunk": "@@ -1614,14 +1617,39 @@ private String rewriteMacroSymbol(String symbol) {\n   }\n   \n   @Override\n-  public void abort() {\n+  public void signal(Signal signal) {\n+    // Only set the signal if the stack is not yet signaled so a KILL is not\n+    // overriden by anything else for example\n+    if (this.signaled) {\n+      return;\n+    }", "originalCommit": "06976653d5a7bbe8b870a371cc4516a107c44c8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA3MjQyNw==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r400072427", "bodyText": "So enforce a hierarchy of signals", "author": "hbs", "createdAt": "2020-03-30T10:04:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA1ODc0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "889ef1cd7bc424a2ef4b731afe1c3353f9c5538d", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java b/warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java\nindex ebc9d47a..437dd8a2 100644\n--- a/warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java\n+++ b/warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java\n\n@@ -1618,14 +1618,19 @@ public class MemoryWarpScriptStack implements WarpScriptStack, Progressable {\n   \n   @Override\n   public void signal(Signal signal) {\n-    // Only set the signal if the stack is not yet signaled so a KILL is not\n-    // overriden by anything else for example\n-    if (this.signaled) {\n-      return;\n-    }\n+    //\n+    // Only set the signal is 'signal' is of higher priority than the current\n+    // signal\n+    //\n+    \n+    // Only set the signal if the stack is not yet signaled or if 'signal' is\n+    // of higher priority than the current signal\n+\n     synchronized(this) {\n-      this.signal = signal;\n-      this.signaled = true;\n+      if (!this.signaled || this.signal.ordinal() < signal.ordinal()) {\n+        this.signal = signal;\n+        this.signaled = true;\n+      }\n     }\n   }\n   \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA2MDY1OA==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r400060658", "bodyText": "I find signal() to be confusing, can it be called checkSignal()?", "author": "ftence", "createdAt": "2020-03-30T09:45:46Z", "path": "warp10/src/main/java/io/warp10/script/WarpScriptStack.java", "diffHunk": "@@ -739,14 +744,14 @@ private void ensureCapacity(int n) {\n   public String getUUID();\n   \n   /**\n-   * Abort the stack, i.e. stop the currently executing code after the current statement and prevent further executions.\n+   * Signal the stack, i.e. stop the currently executing code after the current statement and prevent further executions.\n    */\n-  public void abort();\n+  public void signal(Signal signal);\n   \n   /**\n-   * Return the state of execution abortion.\n+   * Throw the exception associated with the current signal sent to the stack\n    */\n-  public boolean aborted();\n+  public void signal() throws WarpScriptATCException;", "originalCommit": "06976653d5a7bbe8b870a371cc4516a107c44c8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA3MjEyMg==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r400072122", "bodyText": "It's not a check, it's a triggering of a buffered signal, so maybe triggerSignal?", "author": "hbs", "createdAt": "2020-03-30T10:04:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA2MDY1OA=="}], "type": "inlineReview", "revised_code": {"commit": "05e0bd1f8612e2624aa376329140bcb6ba555e17", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/WarpScriptStack.java b/warp10/src/main/java/io/warp10/script/WarpScriptStack.java\nindex e79bd058..34dd5f56 100644\n--- a/warp10/src/main/java/io/warp10/script/WarpScriptStack.java\n+++ b/warp10/src/main/java/io/warp10/script/WarpScriptStack.java\n\n@@ -751,7 +756,7 @@ public interface WarpScriptStack {\n   /**\n    * Throw the exception associated with the current signal sent to the stack\n    */\n-  public void signal() throws WarpScriptATCException;\n+  public void handleSignal() throws WarpScriptATCException;\n   \n   /**\n    * Set a stack attribute.\n"}}, {"oid": "46818b9ee2e3b7e801053c0d1cb9d983cc01caa0", "url": "https://github.com/senx/warp10-platform/commit/46818b9ee2e3b7e801053c0d1cb9d983cc01caa0", "message": "Merge branch 'master' into stackps", "committedDate": "2020-03-30T10:05:26Z", "type": "commit"}, {"oid": "889ef1cd7bc424a2ef4b731afe1c3353f9c5538d", "url": "https://github.com/senx/warp10-platform/commit/889ef1cd7bc424a2ef4b731afe1c3353f9c5538d", "message": "Added priority checking of signals", "committedDate": "2020-03-30T10:11:30Z", "type": "commit"}, {"oid": "05e0bd1f8612e2624aa376329140bcb6ba555e17", "url": "https://github.com/senx/warp10-platform/commit/05e0bd1f8612e2624aa376329140bcb6ba555e17", "message": "Renamed signal() into handleSignal()", "committedDate": "2020-03-30T10:18:57Z", "type": "commit"}, {"oid": "ed4b0b2a024c0d128333efed45135eca0c085d01", "url": "https://github.com/senx/warp10-platform/commit/ed4b0b2a024c0d128333efed45135eca0c085d01", "message": "Renamed signal into handleSignal", "committedDate": "2020-03-30T11:41:29Z", "type": "commit"}, {"oid": "7d0e884db573a93d64bab4e036980d3ac4817e29", "url": "https://github.com/senx/warp10-platform/commit/7d0e884db573a93d64bab4e036980d3ac4817e29", "message": "Addressed PR comments", "committedDate": "2020-03-30T12:56:21Z", "type": "commit"}, {"oid": "4aaf30275039553ba5343cf392bd0a2cfae8f4bf", "url": "https://github.com/senx/warp10-platform/commit/4aaf30275039553ba5343cf392bd0a2cfae8f4bf", "message": "Corrected output of WSINFO", "committedDate": "2020-03-30T12:59:44Z", "type": "commit"}, {"oid": "ffdda380d2ab30eb9713b0f0991fab6f99df3b29", "url": "https://github.com/senx/warp10-platform/commit/ffdda380d2ab30eb9713b0f0991fab6f99df3b29", "message": "Modified type", "committedDate": "2020-03-30T14:43:54Z", "type": "commit"}, {"oid": "3a33dd99248a0628ce3533ae86f8e143cfbe9986", "url": "https://github.com/senx/warp10-platform/commit/3a33dd99248a0628ce3533ae86f8e143cfbe9986", "message": "Added CORS header", "committedDate": "2020-03-30T20:59:02Z", "type": "commit"}, {"oid": "0fa403d4daf894fac68e2e9eb2655be8266f1240", "url": "https://github.com/senx/warp10-platform/commit/0fa403d4daf894fac68e2e9eb2655be8266f1240", "message": "Made WSNAME/WSSESSION return the current value", "committedDate": "2020-03-31T11:31:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4MjI5OA==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r400882298", "bodyText": "Is there a reason this comment is here?", "author": "ftence", "createdAt": "2020-03-31T12:44:01Z", "path": "warp10/src/main/java/io/warp10/script/ext/stackps/WSINFO.java", "diffHunk": "@@ -0,0 +1,99 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.ext.stackps;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptStackRegistry;\n+\n+public class WSINFO extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+  \n+  public static final String[] EXPOSED_ATTRIBUTES = new String[] {\n+      WarpScriptStack.ATTRIBUTE_CREATION_TIME,\n+      WarpScriptStack.ATTRIBUTE_FETCH_COUNT,\n+      WarpScriptStack.ATTRIBUTE_GTS_COUNT,\n+      WarpScriptStack.ATTRIBUTE_MACRO_NAME,\n+      WarpScriptStack.ATTRIBUTE_NAME,\n+      WarpScriptStack.ATTRIBUTE_SECTION_NAME,\n+      StackPSWarpScriptExtension.ATTRIBUTE_SESSION,\n+  };\n+  \n+  public WSINFO(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+    Object top = stack.pop();\n+\n+//    //\n+//    // A non null stackps secret was configured, check it\n+//    //\n+//    String secret = StackPSWarpScriptExtension.STACKPS_SECRET;\n+//    \n+//    if (null != secret) {     \n+//      if (!(top instanceof String)) {\n+//        throw new WarpScriptException(getName() + \" expects a secret.\");\n+//      }\n+//      if (!secret.equals(top)) {\n+//        throw new WarpScriptException(getName() + \" invalid secret.\");\n+//      }\n+//      \n+//      top = stack.pop();\n+//    }      ", "originalCommit": "3a33dd99248a0628ce3533ae86f8e143cfbe9986", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NDQ4NA==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r400884484", "bodyText": "sediment has been cleared", "author": "hbs", "createdAt": "2020-03-31T12:47:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4MjI5OA=="}], "type": "inlineReview", "revised_code": {"commit": "06184ab4dcbcca7b6f5afb28029a44539a13f605", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ext/stackps/WSINFO.java b/warp10/src/main/java/io/warp10/script/ext/stackps/WSINFO.java\nindex 6c3fa228..926fed22 100644\n--- a/warp10/src/main/java/io/warp10/script/ext/stackps/WSINFO.java\n+++ b/warp10/src/main/java/io/warp10/script/ext/stackps/WSINFO.java\n\n@@ -47,22 +47,6 @@ public class WSINFO extends NamedWarpScriptFunction implements WarpScriptStackFu\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n     Object top = stack.pop();\n \n-//    //\n-//    // A non null stackps secret was configured, check it\n-//    //\n-//    String secret = StackPSWarpScriptExtension.STACKPS_SECRET;\n-//    \n-//    if (null != secret) {     \n-//      if (!(top instanceof String)) {\n-//        throw new WarpScriptException(getName() + \" expects a secret.\");\n-//      }\n-//      if (!secret.equals(top)) {\n-//        throw new WarpScriptException(getName() + \" invalid secret.\");\n-//      }\n-//      \n-//      top = stack.pop();\n-//    }      \n-\n     if (!(top instanceof String)) {\n       throw new WarpScriptException(getName() + \" expects a session id.\");\n     }\n"}}, {"oid": "06184ab4dcbcca7b6f5afb28029a44539a13f605", "url": "https://github.com/senx/warp10-platform/commit/06184ab4dcbcca7b6f5afb28029a44539a13f605", "message": "Removed comment", "committedDate": "2020-03-31T12:47:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0MTU0Mg==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r401141542", "bodyText": "handleSignal already checks this.signaled, so the if can be removed.", "author": "ftence", "createdAt": "2020-03-31T18:55:30Z", "path": "warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java", "diffHunk": "@@ -940,6 +954,12 @@ public void exec(Macro macro) throws WarpScriptException {\n \n       for (i = 0; i < n; i++) {        \n \n+        // We check the boolean outside of a synchronized block for efficiency\n+        // even though we might miss a change\n+        if (this.signaled) {\n+          handleSignal();\n+        }", "originalCommit": "06184ab4dcbcca7b6f5afb28029a44539a13f605", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cc0ead717d67589a091db0550308b59cf3dc7f6b", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java b/warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java\nindex 64adde24..40e2e7d2 100644\n--- a/warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java\n+++ b/warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java\n\n@@ -953,12 +951,7 @@ public class MemoryWarpScriptStack implements WarpScriptStack, Progressable {\n       progress();\n \n       for (i = 0; i < n; i++) {        \n-\n-        // We check the boolean outside of a synchronized block for efficiency\n-        // even though we might miss a change\n-        if (this.signaled) {\n-          handleSignal();\n-        }\n+        handleSignal();\n         \n         Object stmt = stmts.get(i);\n         \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0MjExMA==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r401142110", "bodyText": "Replace with handleSignal();", "author": "ftence", "createdAt": "2020-03-31T18:56:25Z", "path": "warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java", "diffHunk": "@@ -562,6 +572,10 @@ public void exec(String line) throws WarpScriptException {\n       //\n \n       for (int st = 0; st < statements.length; st++) {\n+        if (this.signaled) {\n+          throw new WarpScriptException(\"Execution aborted.\");\n+        }", "originalCommit": "06184ab4dcbcca7b6f5afb28029a44539a13f605", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cc0ead717d67589a091db0550308b59cf3dc7f6b", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java b/warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java\nindex 64adde24..40e2e7d2 100644\n--- a/warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java\n+++ b/warp10/src/main/java/io/warp10/script/MemoryWarpScriptStack.java\n\n@@ -572,9 +572,7 @@ public class MemoryWarpScriptStack implements WarpScriptStack, Progressable {\n       //\n \n       for (int st = 0; st < statements.length; st++) {\n-        if (this.signaled) {\n-          throw new WarpScriptException(\"Execution aborted.\");\n-        }\n+        handleSignal();\n \n         String stmt = statements[st];\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0OTMxMA==", "url": "https://github.com/senx/warp10-platform/pull/686#discussion_r401149310", "bodyText": "Because none of the methods are synchronized, there could be stacks in stacks after this registry is disabled.\nI think it does not matter that much but as a precaution, I would allow unregister even if it is disabled.", "author": "ftence", "createdAt": "2020-03-31T19:08:41Z", "path": "warp10/src/main/java/io/warp10/script/WarpScriptStackRegistry.java", "diffHunk": "@@ -0,0 +1,120 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.warp10.script.WarpScriptStack.Signal;\n+import io.warp10.script.ext.stackps.StackPSWarpScriptExtension;\n+\n+public class WarpScriptStackRegistry {\n+  \n+  private static final Map<String,WeakReference<WarpScriptStack>> stacks = new HashMap<String,WeakReference<WarpScriptStack>>();\n+  \n+  private static boolean enabled = false;\n+  \n+  public static void register(WarpScriptStack stack) {\n+    if (!enabled || null == stack) {\n+      return;\n+    }\n+    stacks.put(stack.getUUID(), new WeakReference<WarpScriptStack>(stack));\n+  }\n+  \n+  public static boolean unregister(WarpScriptStack stack) {\n+    if (!enabled || null == stack) {\n+      return false;\n+    }\n+    return null != stacks.remove(stack.getUUID());\n+  }\n+  \n+  public static boolean unregister(String uuid) {\n+    if (!enabled) {\n+      return false;\n+    }\n+    return null != stacks.remove(uuid);\n+  }\n+  \n+  public static boolean signalByUuid(String uuid, Signal signal) {\n+    if (!enabled) {\n+      return false;\n+    }\n+    \n+    WeakReference<WarpScriptStack> stackref = stacks.get(uuid);\n+    \n+    if (null == stackref) {\n+      return false;\n+    }\n+    \n+    WarpScriptStack stack = stackref.get();\n+    \n+    if (null == stack) {\n+      return false;\n+    }\n+    stack.signal(signal);\n+    return true;\n+  }\n+  \n+  public static int signalBySession(String session, Signal signal) {\n+    if (null == session) {\n+      return 0;\n+    }\n+    \n+    List<WeakReference<WarpScriptStack>> refs = new ArrayList<WeakReference<WarpScriptStack>>(stacks.values());\n+    \n+    int aborted = 0;\n+    \n+    for (WeakReference<WarpScriptStack> ref: refs) {\n+      WarpScriptStack stack = ref.get();\n+      \n+      if (null != stack) {\n+        if (session.equals(stack.getAttribute(StackPSWarpScriptExtension.ATTRIBUTE_SESSION))) {\n+          stack.signal(signal);\n+          aborted++;\n+        }\n+      }\n+    }\n+    \n+    return aborted;\n+  }\n+  \n+  public static void enable() {\n+    enabled = true;\n+  }\n+  \n+  public static void disable() {\n+    // Clear the registered stacks\n+    stacks.clear();\n+    enabled = false;", "originalCommit": "06184ab4dcbcca7b6f5afb28029a44539a13f605", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cc0ead717d67589a091db0550308b59cf3dc7f6b", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/WarpScriptStackRegistry.java b/warp10/src/main/java/io/warp10/script/WarpScriptStackRegistry.java\nindex b67c30cb..f5f87899 100644\n--- a/warp10/src/main/java/io/warp10/script/WarpScriptStackRegistry.java\n+++ b/warp10/src/main/java/io/warp10/script/WarpScriptStackRegistry.java\n\n@@ -46,9 +46,6 @@ public class WarpScriptStackRegistry {\n   }\n   \n   public static boolean unregister(String uuid) {\n-    if (!enabled) {\n-      return false;\n-    }\n     return null != stacks.remove(uuid);\n   }\n   \n"}}, {"oid": "cc0ead717d67589a091db0550308b59cf3dc7f6b", "url": "https://github.com/senx/warp10-platform/commit/cc0ead717d67589a091db0550308b59cf3dc7f6b", "message": "Addressed PR comments", "committedDate": "2020-03-31T19:37:57Z", "type": "commit"}, {"oid": "2e84283e2113eb085afbd53ca18bc36ad195ce2f", "url": "https://github.com/senx/warp10-platform/commit/2e84283e2113eb085afbd53ca18bc36ad195ce2f", "message": "Added calls to handleSignal in META and UPDATE", "committedDate": "2020-03-31T19:38:15Z", "type": "commit"}, {"oid": "7dbc44530354ef87ac84873835d062845e085314", "url": "https://github.com/senx/warp10-platform/commit/7dbc44530354ef87ac84873835d062845e085314", "message": "Changed copyright notice", "committedDate": "2020-03-31T19:39:34Z", "type": "commit"}]}