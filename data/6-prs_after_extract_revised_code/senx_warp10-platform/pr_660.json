{"pr_number": 660, "pr_title": "Change JSON lib from Boon to Jackson", "pr_createdAt": "2020-02-10T12:34:07Z", "pr_url": "https://github.com/senx/warp10-platform/pull/660", "timeline": [{"oid": "72fcbd29969f17d9fd2fb891a1195f4b92bc9a88", "url": "https://github.com/senx/warp10-platform/commit/72fcbd29969f17d9fd2fb891a1195f4b92bc9a88", "message": "Abstract all JSON ser/deser and switch to Jackson", "committedDate": "2019-09-04T08:02:39Z", "type": "commit"}, {"oid": "2f3e7f10a9bb6e0f21f4c5b0abccfb3a56f8246e", "url": "https://github.com/senx/warp10-platform/commit/2f3e7f10a9bb6e0f21f4c5b0abccfb3a56f8246e", "message": "Merge branch 'master' of github.com:senx/warp10-platform into json_lib", "committedDate": "2019-12-16T10:55:10Z", "type": "commit"}, {"oid": "e09b1fc193dc78d4d6c692ef8297982b8debe725", "url": "https://github.com/senx/warp10-platform/commit/e09b1fc193dc78d4d6c692ef8297982b8debe725", "message": "Bump Jackson version to 2.10 and simplify API", "committedDate": "2019-12-17T16:40:36Z", "type": "commit"}, {"oid": "0fc5eae82563d568fb22fd36f61009b7dd1cbd19", "url": "https://github.com/senx/warp10-platform/commit/0fc5eae82563d568fb22fd36f61009b7dd1cbd19", "message": "Delegate the stricness to the json serialization lib", "committedDate": "2019-12-20T08:30:44Z", "type": "commit"}, {"oid": "d3a5ceea84749557542a05bcad6b8249668b92c2", "url": "https://github.com/senx/warp10-platform/commit/d3a5ceea84749557542a05bcad6b8249668b92c2", "message": "Small fixes", "committedDate": "2019-12-30T16:22:02Z", "type": "commit"}, {"oid": "aba33e8de08c07f4b5bc28f7c8ec77df52f481fc", "url": "https://github.com/senx/warp10-platform/commit/aba33e8de08c07f4b5bc28f7c8ec77df52f481fc", "message": "Internalize json serialization", "committedDate": "2019-12-31T14:59:23Z", "type": "commit"}, {"oid": "f05ca021c8062c2f90bd08b61b2a4798b4bb141e", "url": "https://github.com/senx/warp10-platform/commit/f05ca021c8062c2f90bd08b61b2a4798b4bb141e", "message": "Use Jackson for serialization because it is faster this way.", "committedDate": "2020-01-03T16:23:41Z", "type": "commit"}, {"oid": "e982250dcfc5cf2b6c07f4baa75b1f63784b8f8e", "url": "https://github.com/senx/warp10-platform/commit/e982250dcfc5cf2b6c07f4baa75b1f63784b8f8e", "message": "Add and improve comments", "committedDate": "2020-01-06T09:00:44Z", "type": "commit"}, {"oid": "2b158c9e42492a5b89aaf5ca7d4d943fefeac1c9", "url": "https://github.com/senx/warp10-platform/commit/2b158c9e42492a5b89aaf5ca7d4d943fefeac1c9", "message": "Merge branch 'master' of github.com:senx/warp10-platform into json_lib", "committedDate": "2020-02-06T08:47:20Z", "type": "commit"}, {"oid": "d3a95b491e62c0301642aaf9dcf8569c39c825a9", "url": "https://github.com/senx/warp10-platform/commit/d3a95b491e62c0301642aaf9dcf8569c39c825a9", "message": "Better handling of max json size and the errors it generates.", "committedDate": "2020-02-07T13:57:12Z", "type": "commit"}, {"oid": "f5173f5e590145bff64573c2728fab88e1517849", "url": "https://github.com/senx/warp10-platform/commit/f5173f5e590145bff64573c2728fab88e1517849", "message": "Add a way to register custom serializers.", "committedDate": "2020-02-07T15:10:51Z", "type": "commit"}, {"oid": "3176c4b51b3f984bda46d6f270530cb6933f0c1d", "url": "https://github.com/senx/warp10-platform/commit/3176c4b51b3f984bda46d6f270530cb6933f0c1d", "message": "Optimization and more conservative limits", "committedDate": "2020-02-10T10:19:32Z", "type": "commit"}, {"oid": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137", "url": "https://github.com/senx/warp10-platform/commit/1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137", "message": "Code style and comments", "committedDate": "2020-02-10T10:26:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2NDg4Mw==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377064883", "bodyText": "Comment can be removed.", "author": "hbs", "createdAt": "2020-02-10T13:35:51Z", "path": "warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java", "diffHunk": "@@ -1451,7 +1443,7 @@ static void jsonDump(PrintWriter pw, Iterator<GTSDecoder> iter, long now, long c\n             pw.print(Boolean.TRUE.equals(value) ? \"true\" : \"false\");\n           } else {\n             //pw.print(gson.toJson(value.toString()));", "originalCommit": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3df08c5715d884834a21c0047d407763459db95", "chunk": "diff --git a/warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java b/warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java\nindex f5a2737b..3868365c 100644\n--- a/warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java\n+++ b/warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java\n\n@@ -1442,7 +1442,6 @@ public class EgressFetchHandler extends AbstractHandler {\n           } else if (value instanceof Boolean) {\n             pw.print(Boolean.TRUE.equals(value) ? \"true\" : \"false\");\n           } else {\n-            //pw.print(gson.toJson(value.toString()));\n             pw.print(JsonUtils.objectToJson(value.toString()));\n           }\n           pw.print(\"]\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2OTAxNA==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377069014", "bodyText": "Add a comment indicating whether start/end are inclusive or exclusive", "author": "hbs", "createdAt": "2020-02-10T13:43:18Z", "path": "warp10/src/main/java/io/warp10/json/BoundedWriter.java", "diffHunk": "@@ -0,0 +1,64 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.json;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+\n+/**\n+ * A wrapper for Writers to limit the number of written chars.\n+ * When the number of chars that should be written exceeds the given limit, a WriterBoundReachedException is thrown.\n+ */\n+public class BoundedWriter extends Writer {\n+\n+  public static class WriterBoundReachedException extends IOException {\n+\n+    public WriterBoundReachedException(String message) {\n+      super(message);\n+    }\n+\n+  }\n+\n+  protected final Writer writer;\n+  protected final long maxWrittenChars;\n+  protected long currentWrittenChars;\n+\n+  public BoundedWriter(Writer writer, long maxAppendedChars) {\n+    this.writer = writer;\n+    this.maxWrittenChars = maxAppendedChars;\n+    this.currentWrittenChars = 0;\n+  }\n+\n+  @Override\n+  public void write(char[] chars, int start, int end) throws IOException {", "originalCommit": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3df08c5715d884834a21c0047d407763459db95", "chunk": "diff --git a/warp10/src/main/java/io/warp10/json/BoundedWriter.java b/warp10/src/main/java/io/warp10/json/BoundedWriter.java\nindex 6fdb2138..f7e6ce8a 100644\n--- a/warp10/src/main/java/io/warp10/json/BoundedWriter.java\n+++ b/warp10/src/main/java/io/warp10/json/BoundedWriter.java\n\n@@ -43,13 +43,21 @@ public class BoundedWriter extends Writer {\n     this.currentWrittenChars = 0;\n   }\n \n+  /**\n+   * Writes a portion of an array of characters.\n+   * @param cbuf Array of characters\n+   * @param off Offset from which to start writing characters\n+   * @param len Number of characters to write\n+   * @throws WriterBoundReachedException if this write would exceed the maximum number of written characters to this writer.\n+   * @throws IOException if this the underlying writer throws an IOException.\n+   */\n   @Override\n-  public void write(char[] chars, int start, int end) throws IOException {\n-    if (end - start + currentWrittenChars - maxWrittenChars > 0) {\n+  public void write(char[] cbuf, int off, int len) throws IOException {\n+    if (len + currentWrittenChars - maxWrittenChars > 0) {\n       throw new WriterBoundReachedException(\"Cannot write, maximum number of characters written :\" + this.maxWrittenChars);\n     }\n-    this.currentWrittenChars += end - start;\n-    writer.write(chars, start, end);\n+    this.currentWrittenChars += len;\n+    writer.write(cbuf, off, len);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MDMxMg==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377070312", "bodyText": "How are .producer/.owner labels handled? The check for their exposure should probably be performed here too as this method might be called in the future from other places and responsability for exposing those labels might not be logical to implement in the caller.", "author": "hbs", "createdAt": "2020-02-10T13:45:39Z", "path": "warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java", "diffHunk": "@@ -0,0 +1,86 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.json;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.geoxp.GeoXPLib;\n+import io.warp10.continuum.gts.GTSDecoder;\n+import io.warp10.continuum.gts.GTSEncoder;\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.continuum.store.thrift.data.Metadata;\n+\n+import java.io.IOException;\n+\n+public class GTSEncoderSerializer extends JsonSerializer<GTSEncoder> {\n+\n+  @Override\n+  public void serialize(GTSEncoder encoder, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Metadata metadata = encoder.getMetadata();\n+    String name = metadata.getName();\n+    if (null == name) {\n+      name = \"\";\n+    }\n+\n+    gen.writeStartObject();\n+    gen.writeStringField(\"c\", name);\n+    gen.writeObjectField(\"l\", metadata.getLabels());", "originalCommit": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUyMTI2MQ==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377521261", "bodyText": "Problem is that we don't  have access to the token here, so we can't know if internal labels should be exposed or not.", "author": "ftence", "createdAt": "2020-02-11T09:32:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MDMxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUyODQzNg==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377528436", "bodyText": "Actually it should be fine since the labels will have been removed just after the FETCH if they needed to be.", "author": "hbs", "createdAt": "2020-02-11T09:46:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MDMxMg=="}], "type": "inlineReview", "revised_code": {"commit": "c3df08c5715d884834a21c0047d407763459db95", "chunk": "diff --git a/warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java b/warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java\nindex 8abdca6a..22967896 100644\n--- a/warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java\n+++ b/warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java\n\n@@ -19,6 +19,7 @@ package io.warp10.json;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n import com.geoxp.GeoXPLib;\n import io.warp10.continuum.gts.GTSDecoder;\n import io.warp10.continuum.gts.GTSEncoder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTM5Mg==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377071392", "bodyText": "This introduces a different handling of byte arrays whether it appears in a GTS/GTSEncoder or outside of one. Everywhere else byte arrays are serialized as b64, but here they will be serialized as an ISO-8859-1 string?", "author": "hbs", "createdAt": "2020-02-10T13:47:30Z", "path": "warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java", "diffHunk": "@@ -0,0 +1,86 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.json;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.geoxp.GeoXPLib;\n+import io.warp10.continuum.gts.GTSDecoder;\n+import io.warp10.continuum.gts.GTSEncoder;\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.continuum.store.thrift.data.Metadata;\n+\n+import java.io.IOException;\n+\n+public class GTSEncoderSerializer extends JsonSerializer<GTSEncoder> {\n+\n+  @Override\n+  public void serialize(GTSEncoder encoder, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Metadata metadata = encoder.getMetadata();\n+    String name = metadata.getName();\n+    if (null == name) {\n+      name = \"\";\n+    }\n+\n+    gen.writeStartObject();\n+    gen.writeStringField(\"c\", name);\n+    gen.writeObjectField(\"l\", metadata.getLabels());\n+    gen.writeObjectField(\"a\", metadata.getAttributes());\n+    gen.writeNumberField(\"la\", metadata.getLastActivity());\n+    gen.writeFieldName(\"v\");\n+    gen.writeStartArray();\n+\n+    GTSDecoder decoder = encoder.getUnsafeDecoder(false);\n+    while (decoder.next()) {\n+      long ts = decoder.getTimestamp();\n+      long location = decoder.getLocation();\n+      long elevation = decoder.getElevation();\n+      // We do not call getBinaryValue because JSON cannot represent byte arrays", "originalCommit": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE4OTU2OA==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377189568", "bodyText": "You're right.\nIf you're fine with the b64 serialization of byte[] we could call getBinaryValue here and b64 encode if the returned value it byte[].\nHowever, in the case of a GTS, we're stuck with an ISO-8859-1 string, correct me if I'm wrong.", "author": "ftence", "createdAt": "2020-02-10T16:56:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUyODk5OQ==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377528999", "bodyText": "I am not too fond of emitting b64 content for byte arrays, why not simply output an ISO-8859-1 string?", "author": "hbs", "createdAt": "2020-02-11T09:47:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYwMjMxNg==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377602316", "bodyText": "This would unify the GTS, Encoder and byte[] representation for binary data which is nice.\nThere is a slight downside as it will produce a lot of special characters which will be escaped in JSON, making that not very compact. I think it's fine because JSON shouldn't be used for large transfer of binary data.", "author": "ftence", "createdAt": "2020-02-11T12:24:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTM5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c3df08c5715d884834a21c0047d407763459db95", "chunk": "diff --git a/warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java b/warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java\nindex 8abdca6a..22967896 100644\n--- a/warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java\n+++ b/warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java\n\n@@ -19,6 +19,7 @@ package io.warp10.json;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n import com.geoxp.GeoXPLib;\n import io.warp10.continuum.gts.GTSDecoder;\n import io.warp10.continuum.gts.GTSEncoder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MjQxMA==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377072410", "bodyText": "Those strings should be externalized as constants since they are used in at least the two serializers", "author": "hbs", "createdAt": "2020-02-10T13:49:16Z", "path": "warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java", "diffHunk": "@@ -0,0 +1,86 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.json;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.geoxp.GeoXPLib;\n+import io.warp10.continuum.gts.GTSDecoder;\n+import io.warp10.continuum.gts.GTSEncoder;\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.continuum.store.thrift.data.Metadata;\n+\n+import java.io.IOException;\n+\n+public class GTSEncoderSerializer extends JsonSerializer<GTSEncoder> {\n+\n+  @Override\n+  public void serialize(GTSEncoder encoder, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Metadata metadata = encoder.getMetadata();\n+    String name = metadata.getName();\n+    if (null == name) {\n+      name = \"\";\n+    }\n+\n+    gen.writeStartObject();\n+    gen.writeStringField(\"c\", name);", "originalCommit": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3df08c5715d884834a21c0047d407763459db95", "chunk": "diff --git a/warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java b/warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java\nindex 8abdca6a..22967896 100644\n--- a/warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java\n+++ b/warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java\n\n@@ -19,6 +19,7 @@ package io.warp10.json;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n import com.geoxp.GeoXPLib;\n import io.warp10.continuum.gts.GTSDecoder;\n import io.warp10.continuum.gts.GTSEncoder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MzI2OQ==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377073269", "bodyText": "Same question about exposing .producer/.owner", "author": "hbs", "createdAt": "2020-02-10T13:50:53Z", "path": "warp10/src/main/java/io/warp10/json/GeoTimeSerieSerializer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.json;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.geoxp.GeoXPLib;\n+import io.warp10.continuum.gts.GTSHelper;\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.continuum.store.thrift.data.Metadata;\n+\n+import java.io.IOException;\n+\n+public class GeoTimeSerieSerializer extends JsonSerializer<GeoTimeSerie> {\n+\n+  @Override\n+  public void serialize(GeoTimeSerie gts, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Metadata metadata = gts.getMetadata();\n+    String name = metadata.getName();\n+    if (null == name) {\n+      name = \"\";\n+    }\n+\n+    gen.writeStartObject();\n+    gen.writeStringField(\"c\", name);\n+    gen.writeObjectField(\"l\", metadata.getLabels());", "originalCommit": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3df08c5715d884834a21c0047d407763459db95", "chunk": "diff --git a/warp10/src/main/java/io/warp10/json/GeoTimeSerieSerializer.java b/warp10/src/main/java/io/warp10/json/GeoTimeSerieSerializer.java\nindex 679f75ae..4b0601f5 100644\n--- a/warp10/src/main/java/io/warp10/json/GeoTimeSerieSerializer.java\n+++ b/warp10/src/main/java/io/warp10/json/GeoTimeSerieSerializer.java\n\n@@ -17,8 +17,8 @@\n package io.warp10.json;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n import com.geoxp.GeoXPLib;\n import io.warp10.continuum.gts.GTSHelper;\n import io.warp10.continuum.gts.GeoTimeSerie;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NTM5NQ==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377075395", "bodyText": "Constants should be externalized.", "author": "hbs", "createdAt": "2020-02-10T13:54:49Z", "path": "warp10/src/main/java/io/warp10/json/MetadataSerializer.java", "diffHunk": "@@ -0,0 +1,42 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.json;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import io.warp10.continuum.store.thrift.data.Metadata;\n+\n+import java.io.IOException;\n+\n+public class MetadataSerializer extends JsonSerializer<Metadata> {\n+\n+  @Override\n+  public void serialize(Metadata metadata, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    String name = metadata.getName();\n+    if (null == name) {\n+      name = \"\";\n+    }\n+\n+    gen.writeStartObject();\n+    gen.writeStringField(\"c\", name);", "originalCommit": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3df08c5715d884834a21c0047d407763459db95", "chunk": "diff --git a/warp10/src/main/java/io/warp10/json/MetadataSerializer.java b/warp10/src/main/java/io/warp10/json/MetadataSerializer.java\nindex 011c061f..2d03bed7 100644\n--- a/warp10/src/main/java/io/warp10/json/MetadataSerializer.java\n+++ b/warp10/src/main/java/io/warp10/json/MetadataSerializer.java\n\n@@ -19,24 +19,38 @@ package io.warp10.json;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n import io.warp10.continuum.store.thrift.data.Metadata;\n \n import java.io.IOException;\n \n-public class MetadataSerializer extends JsonSerializer<Metadata> {\n+public class MetadataSerializer extends StdSerializer<Metadata> {\n+\n+  public static final String FIELD_NAME = \"c\";\n+  public static final String FIELD_LABELS = \"l\";\n+  public static final String FIELD_ATTRIBUTES = \"a\";\n+  public static final String FIELD_LASTACTIVITY = \"la\";\n+\n+  protected MetadataSerializer() {\n+    super(Metadata.class);\n+  }\n \n   @Override\n   public void serialize(Metadata metadata, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    gen.writeStartObject();\n+    serializeMetadataFields(metadata, gen);\n+    gen.writeEndObject();\n+  }\n+\n+  public static void serializeMetadataFields(Metadata metadata, JsonGenerator gen) throws IOException {\n     String name = metadata.getName();\n     if (null == name) {\n       name = \"\";\n     }\n \n-    gen.writeStartObject();\n-    gen.writeStringField(\"c\", name);\n-    gen.writeObjectField(\"l\", metadata.getLabels());\n-    gen.writeObjectField(\"a\", metadata.getAttributes());\n-    gen.writeNumberField(\"la\", metadata.getLastActivity());\n-    gen.writeEndObject();\n+    gen.writeStringField(FIELD_NAME, name);\n+    gen.writeObjectField(FIELD_LABELS, metadata.getLabels());\n+    gen.writeObjectField(FIELD_ATTRIBUTES, metadata.getAttributes());\n+    gen.writeNumberField(FIELD_LASTACTIVITY, metadata.getLastActivity());\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NzczNw==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377077737", "bodyText": "Missing whitespace", "author": "hbs", "createdAt": "2020-02-10T13:58:47Z", "path": "warp10/src/main/java/io/warp10/script/functions/JSONTO.java", "diffHunk": "@@ -51,19 +46,13 @@ public Object apply(WarpScriptStack stack) throws WarpScriptException {\n       throw new WarpScriptException(getName() + \" expects a string on top of the stack.\");\n     }\n     \n-    JsonParser parser = BOON_PARSER_FACTORY.create();\n-    \n-    Object json = null;\n-    \n     try {\n-      json = parser.parse(o.toString());\n-    } catch(JsonException je) {      \n-      // We don't include the original message as it can be very long\n-      throw new WarpScriptException(\"Error parsing JSON\", je);\n+      Object json = JsonUtils.jsonToObject(o.toString());\n+      stack.push(transform(json));\n+    } catch (IOException ioe) {\n+      throw new WarpScriptException(getName() + \"failed to parse JSON\", ioe);", "originalCommit": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3df08c5715d884834a21c0047d407763459db95", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/functions/JSONTO.java b/warp10/src/main/java/io/warp10/script/functions/JSONTO.java\nindex d9a1cc44..dc173943 100644\n--- a/warp10/src/main/java/io/warp10/script/functions/JSONTO.java\n+++ b/warp10/src/main/java/io/warp10/script/functions/JSONTO.java\n\n@@ -50,7 +50,7 @@ public class JSONTO extends NamedWarpScriptFunction implements WarpScriptStackFu\n       Object json = JsonUtils.jsonToObject(o.toString());\n       stack.push(transform(json));\n     } catch (IOException ioe) {\n-      throw new WarpScriptException(getName() + \"failed to parse JSON\", ioe);\n+      throw new WarpScriptException(getName() + \" failed to parse JSON\", ioe);\n     }\n \n     return stack;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3OTY5MA==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377079690", "bodyText": "This call will fail with an NPE if the stack attribute retrieved above is not set. It is set in the case of MemoryWarpScriptStack instances but potentially not in other implementations of WarpScriptStack.\nSame in MAXJSON", "author": "hbs", "createdAt": "2020-02-10T14:02:21Z", "path": "warp10/src/main/java/io/warp10/script/functions/TOJSON.java", "diffHunk": "@@ -43,120 +37,22 @@ public TOJSON(String name) {\n   public Object apply(WarpScriptStack stack) throws WarpScriptException {\n     Object o = stack.pop();\n \n-    JsonSerializer parser = BOON_SERIALIZER_FACTORY.create();\n-\n     //\n     // Only allow the serialization of simple lists and maps, otherwise JSON might\n     // expose internals\n     //\n \n-    if (!validate(o)) {\n-      throw new WarpScriptException(getName() + \" can only serialize structures containing numbers, strings, booleans, lists and maps which do not reference the same list/map multiple times.\");\n+    try {\n+      Long maxJsonSize = (Long)stack.getAttribute(WarpScriptStack.ATTRIBUTE_JSON_MAXSIZE);\n+      String json = JsonUtils.objectToJson(o, false, maxJsonSize);", "originalCommit": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE4NjU1OQ==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377186559", "bodyText": "I think this is the case for all other limits.\nIt this is not set, what should be the value? The default one or the max one?", "author": "ftence", "createdAt": "2020-02-10T16:51:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3OTY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxOTE3OA==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377619178", "bodyText": "Better fix that in another PR as all other limit attributes suffer from the same problem.", "author": "ftence", "createdAt": "2020-02-11T13:01:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3OTY5MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA4OTQ3Mg==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377089472", "bodyText": "Won't that surround sb's content with double quotes and escape it? This might not be what is expected.", "author": "hbs", "createdAt": "2020-02-10T14:19:39Z", "path": "warp10/src/main/java/io/warp10/json/JsonUtils.java", "diffHunk": "@@ -0,0 +1,211 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.json;\n+\n+import com.fasterxml.jackson.core.JsonFactoryBuilder;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.StreamWriteFeature;\n+import com.fasterxml.jackson.core.json.JsonReadFeature;\n+import com.fasterxml.jackson.core.json.JsonWriteFeature;\n+import com.fasterxml.jackson.databind.BeanDescription;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.databind.ser.BeanSerializer;\n+import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;\n+import com.fasterxml.jackson.databind.ser.impl.UnknownSerializer;\n+import io.warp10.continuum.gts.GTSEncoder;\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.continuum.store.thrift.data.Metadata;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptStack;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class JsonUtils {\n+\n+  /**\n+   * A serializer for null keys.\n+   * Outputs \"null\" because most javascript engines coerce null to \"null\" when using it as a key.\n+   */\n+  private static class NullKeySerializer extends JsonSerializer<Object> {\n+    @Override\n+    public void serialize(Object value, JsonGenerator gen, SerializerProvider serializers) throws IOException {\n+      gen.writeFieldName(\"null\");\n+    }\n+  }\n+\n+  /**\n+   * Used to swap UnknownSerializer and BeanSerializer for CustomEncodersSerializer.\n+   */\n+  public static class NotSerializedToCustomSerializedModifier extends BeanSerializerModifier {\n+    @Override\n+    public JsonSerializer<?> modifySerializer(SerializationConfig config, BeanDescription beanDesc, JsonSerializer<?> serializer) {\n+      if (serializer instanceof UnknownSerializer || serializer instanceof BeanSerializer) {\n+        return customEncodersSerializer;\n+      } else {\n+        return serializer;\n+      }\n+    }\n+  }\n+\n+  public static class CustomEncodersSerializer extends JsonSerializer<Object> {\n+    @Override\n+    public void serialize(Object value, JsonGenerator gen, SerializerProvider serializers) throws IOException {\n+      if (null != encoders && !encoders.isEmpty()) {\n+        StringBuilder sb = new StringBuilder();\n+        boolean encoded = false;\n+        for (JsonEncoder encoder: encoders) {\n+          encoded = encoder.addElement(sb, value);\n+          if (encoded) {\n+            break;\n+          }\n+        }\n+        if (encoded) {\n+          gen.writeString(sb.toString());", "originalCommit": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3df08c5715d884834a21c0047d407763459db95", "chunk": "diff --git a/warp10/src/main/java/io/warp10/json/JsonUtils.java b/warp10/src/main/java/io/warp10/json/JsonUtils.java\nindex 1936d6ac..03ca781d 100644\n--- a/warp10/src/main/java/io/warp10/json/JsonUtils.java\n+++ b/warp10/src/main/java/io/warp10/json/JsonUtils.java\n\n@@ -83,7 +83,7 @@ public class JsonUtils {\n           }\n         }\n         if (encoded) {\n-          gen.writeString(sb.toString());\n+          gen.writeRaw(sb.toString());\n         } else {\n           // No custom encoders able to encode this object, write null.\n           gen.writeNull();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA5MDg4NQ==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377090885", "bodyText": "Why isn't this called by the serializer for GTS and GTS Encoders?", "author": "hbs", "createdAt": "2020-02-10T14:21:54Z", "path": "warp10/src/main/java/io/warp10/json/MetadataSerializer.java", "diffHunk": "@@ -0,0 +1,42 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.json;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import io.warp10.continuum.store.thrift.data.Metadata;\n+\n+import java.io.IOException;\n+\n+public class MetadataSerializer extends JsonSerializer<Metadata> {", "originalCommit": "1b27cd97ec7375ab4d2ab7a6d62ef1c7597e9137", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3df08c5715d884834a21c0047d407763459db95", "chunk": "diff --git a/warp10/src/main/java/io/warp10/json/MetadataSerializer.java b/warp10/src/main/java/io/warp10/json/MetadataSerializer.java\nindex 011c061f..2d03bed7 100644\n--- a/warp10/src/main/java/io/warp10/json/MetadataSerializer.java\n+++ b/warp10/src/main/java/io/warp10/json/MetadataSerializer.java\n\n@@ -19,24 +19,38 @@ package io.warp10.json;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n import io.warp10.continuum.store.thrift.data.Metadata;\n \n import java.io.IOException;\n \n-public class MetadataSerializer extends JsonSerializer<Metadata> {\n+public class MetadataSerializer extends StdSerializer<Metadata> {\n+\n+  public static final String FIELD_NAME = \"c\";\n+  public static final String FIELD_LABELS = \"l\";\n+  public static final String FIELD_ATTRIBUTES = \"a\";\n+  public static final String FIELD_LASTACTIVITY = \"la\";\n+\n+  protected MetadataSerializer() {\n+    super(Metadata.class);\n+  }\n \n   @Override\n   public void serialize(Metadata metadata, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    gen.writeStartObject();\n+    serializeMetadataFields(metadata, gen);\n+    gen.writeEndObject();\n+  }\n+\n+  public static void serializeMetadataFields(Metadata metadata, JsonGenerator gen) throws IOException {\n     String name = metadata.getName();\n     if (null == name) {\n       name = \"\";\n     }\n \n-    gen.writeStartObject();\n-    gen.writeStringField(\"c\", name);\n-    gen.writeObjectField(\"l\", metadata.getLabels());\n-    gen.writeObjectField(\"a\", metadata.getAttributes());\n-    gen.writeNumberField(\"la\", metadata.getLastActivity());\n-    gen.writeEndObject();\n+    gen.writeStringField(FIELD_NAME, name);\n+    gen.writeObjectField(FIELD_LABELS, metadata.getLabels());\n+    gen.writeObjectField(FIELD_ATTRIBUTES, metadata.getAttributes());\n+    gen.writeNumberField(FIELD_LASTACTIVITY, metadata.getLastActivity());\n   }\n }\n"}}, {"oid": "c3df08c5715d884834a21c0047d407763459db95", "url": "https://github.com/senx/warp10-platform/commit/c3df08c5715d884834a21c0047d407763459db95", "message": "Address PR comments and other fixes", "committedDate": "2020-02-11T13:07:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3MTM0OA==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377671348", "bodyText": "Use the constant", "author": "hbs", "createdAt": "2020-02-11T14:34:36Z", "path": "warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java", "diffHunk": "@@ -0,0 +1,84 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.json;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+import com.geoxp.GeoXPLib;\n+import io.warp10.continuum.gts.GTSDecoder;\n+import io.warp10.continuum.gts.GTSEncoder;\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.continuum.store.thrift.data.Metadata;\n+\n+import java.io.IOException;\n+\n+public class GTSEncoderSerializer extends StdSerializer<GTSEncoder> {\n+\n+  protected GTSEncoderSerializer() {\n+    super(GTSEncoder.class);\n+  }\n+\n+  @Override\n+  public void serialize(GTSEncoder encoder, JsonGenerator gen, SerializerProvider provider) throws IOException {\n+    Metadata metadata = encoder.getMetadata();\n+\n+    gen.writeStartObject();\n+    MetadataSerializer.serializeMetadataFields(metadata, gen);\n+    gen.writeFieldName(\"v\");", "originalCommit": "c3df08c5715d884834a21c0047d407763459db95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d19b437e1adfcd813f5f6be5453372c73dfc4e00", "chunk": "diff --git a/warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java b/warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java\nindex 22967896..b168c3f2 100644\n--- a/warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java\n+++ b/warp10/src/main/java/io/warp10/json/GTSEncoderSerializer.java\n\n@@ -40,7 +40,7 @@ public class GTSEncoderSerializer extends StdSerializer<GTSEncoder> {\n \n     gen.writeStartObject();\n     MetadataSerializer.serializeMetadataFields(metadata, gen);\n-    gen.writeFieldName(\"v\");\n+    gen.writeFieldName(GeoTimeSerieSerializer.FIELD_VALUES);\n     gen.writeStartArray();\n \n     GTSDecoder decoder = encoder.getUnsafeDecoder(false);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY3MzYzNQ==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r377673635", "bodyText": "Use the constants defined in the MetadataSerializer?", "author": "hbs", "createdAt": "2020-02-11T14:38:19Z", "path": "warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java", "diffHunk": "@@ -1341,8 +1338,7 @@ static void jsonDump(PrintWriter pw, Iterator<GTSDecoder> iter, long now, long c\n           \n           sb.append(\"{\\\"c\\\":\");", "originalCommit": "c3df08c5715d884834a21c0047d407763459db95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d19b437e1adfcd813f5f6be5453372c73dfc4e00", "chunk": "diff --git a/warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java b/warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java\nindex 3868365c..869f0e26 100644\n--- a/warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java\n+++ b/warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java\n\n@@ -1335,15 +1337,19 @@ public class EgressFetchHandler extends AbstractHandler {\n           name = decoder.getName();\n           labels = lbls;\n           sb.setLength(0);\n-          \n-          sb.append(\"{\\\"c\\\":\");\n-      \n+\n+          sb.append(\"{\\\"\");\n+          sb.append(MetadataSerializer.FIELD_NAME);\n+          sb.append(\"\\\":\");\n+\n           sb.append(JsonUtils.objectToJson(name));\n \n           boolean first = true;\n-          \n-          sb.append(\",\\\"l\\\":{\");\n-          \n+\n+          sb.append(\",\\\"\");\n+          sb.append(MetadataSerializer.FIELD_LABELS);\n+          sb.append(\"\\\":{\");\n+\n           for (Entry<String, String> entry: lbls.entrySet()) {\n             //\n             // Skip owner/producer labels and any other 'private' labels\n"}}, {"oid": "d19b437e1adfcd813f5f6be5453372c73dfc4e00", "url": "https://github.com/senx/warp10-platform/commit/d19b437e1adfcd813f5f6be5453372c73dfc4e00", "message": "Add RealVector and RealMatrix serialization, use of constants and minor fixes", "committedDate": "2020-02-12T14:24:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0MzAyMg==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r378543022", "bodyText": "FIELD_ID", "author": "hbs", "createdAt": "2020-02-12T22:12:04Z", "path": "warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java", "diffHunk": "@@ -1365,38 +1367,40 @@ static void jsonDump(PrintWriter pw, Iterator<GTSDecoder> iter, long now, long c\n               sb.append(\",\");\n             }\n             \n-            //sb.append(gson.toJson(entry.getKey()));\n-            sb.append(serializer.serialize(entry.getKey()));\n+            sb.append(JsonUtils.objectToJson(entry.getKey()));\n             sb.append(\":\");\n-            //sb.append(gson.toJson(entry.getValue()));\n-            sb.append(serializer.serialize(entry.getValue()));\n+            sb.append(JsonUtils.objectToJson(entry.getValue()));\n             first = false;\n           }\n           sb.append(\"}\");\n-          \n-          sb.append(\",\\\"a\\\":{\");\n+\n+          sb.append(\",\\\"\");\n+          sb.append(MetadataSerializer.FIELD_ATTRIBUTES);\n+          sb.append(\"\\\":{\");\n \n           first = true;\n           for (Entry<String, String> entry: decoder.getMetadata().getAttributes().entrySet()) {\n             if (!first) {\n               sb.append(\",\");\n             }\n             \n-            //sb.append(gson.toJson(entry.getKey()));\n-            sb.append(serializer.serialize(entry.getKey()));\n+            sb.append(JsonUtils.objectToJson(entry.getKey()));\n             sb.append(\":\");\n-            //sb.append(gson.toJson(entry.getValue()));\n-            sb.append(serializer.serialize(entry.getValue()));\n+            sb.append(JsonUtils.objectToJson(entry.getValue()));\n             first = false;\n           }\n           \n           sb.append(\"}\");\n           sb.append(\",\\\"i\\\":\\\"\");", "originalCommit": "d19b437e1adfcd813f5f6be5453372c73dfc4e00", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4e1b2b6977dd432d50ccb33033ffd53d5bd55d4", "chunk": "diff --git a/warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java b/warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java\nindex 869f0e26..f92ae13d 100644\n--- a/warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java\n+++ b/warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java\n\n@@ -1391,7 +1391,9 @@ public class EgressFetchHandler extends AbstractHandler {\n           }\n           \n           sb.append(\"}\");\n-          sb.append(\",\\\"i\\\":\\\"\");\n+          sb.append(\",\\\"\");\n+          sb.append(MetadataSerializer.FIELD_LABELSID);\n+          sb.append(\"\\\":\\\"\");\n           sb.append(decoder.getLabelsId() & mask);\n           sb.append(\"\\\",\\\"\");\n           sb.append(MetadataSerializer.FIELD_LASTACTIVITY);\n"}}, {"oid": "f4e1b2b6977dd432d50ccb33033ffd53d5bd55d4", "url": "https://github.com/senx/warp10-platform/commit/f4e1b2b6977dd432d50ccb33033ffd53d5bd55d4", "message": "Add constant for labels ids field name", "committedDate": "2020-02-14T10:42:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM2OTEwOA==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r379369108", "bodyText": "It is a an id, not directly the labelsId, so better call this field FIELD_ID as it could very well not stay related to the labels id only", "author": "hbs", "createdAt": "2020-02-14T10:55:15Z", "path": "warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java", "diffHunk": "@@ -1365,38 +1367,42 @@ static void jsonDump(PrintWriter pw, Iterator<GTSDecoder> iter, long now, long c\n               sb.append(\",\");\n             }\n             \n-            //sb.append(gson.toJson(entry.getKey()));\n-            sb.append(serializer.serialize(entry.getKey()));\n+            sb.append(JsonUtils.objectToJson(entry.getKey()));\n             sb.append(\":\");\n-            //sb.append(gson.toJson(entry.getValue()));\n-            sb.append(serializer.serialize(entry.getValue()));\n+            sb.append(JsonUtils.objectToJson(entry.getValue()));\n             first = false;\n           }\n           sb.append(\"}\");\n-          \n-          sb.append(\",\\\"a\\\":{\");\n+\n+          sb.append(\",\\\"\");\n+          sb.append(MetadataSerializer.FIELD_ATTRIBUTES);\n+          sb.append(\"\\\":{\");\n \n           first = true;\n           for (Entry<String, String> entry: decoder.getMetadata().getAttributes().entrySet()) {\n             if (!first) {\n               sb.append(\",\");\n             }\n             \n-            //sb.append(gson.toJson(entry.getKey()));\n-            sb.append(serializer.serialize(entry.getKey()));\n+            sb.append(JsonUtils.objectToJson(entry.getKey()));\n             sb.append(\":\");\n-            //sb.append(gson.toJson(entry.getValue()));\n-            sb.append(serializer.serialize(entry.getValue()));\n+            sb.append(JsonUtils.objectToJson(entry.getValue()));\n             first = false;\n           }\n           \n           sb.append(\"}\");\n-          sb.append(\",\\\"i\\\":\\\"\");\n+          sb.append(\",\\\"\");\n+          sb.append(MetadataSerializer.FIELD_LABELSID);", "originalCommit": "f4e1b2b6977dd432d50ccb33033ffd53d5bd55d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3MjE4OA==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r379372188", "bodyText": "True. As this is not related to Metadata, I have to put this constant in EgressFetchHandler.", "author": "ftence", "createdAt": "2020-02-14T11:02:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM2OTEwOA=="}], "type": "inlineReview", "revised_code": {"commit": "654d9c9a61c765bbeb10bfea9d42a23d54e72092", "chunk": "diff --git a/warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java b/warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java\nindex f92ae13d..74e6949c 100644\n--- a/warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java\n+++ b/warp10/src/main/java/io/warp10/continuum/egress/EgressFetchHandler.java\n\n@@ -1392,7 +1394,7 @@ public class EgressFetchHandler extends AbstractHandler {\n           \n           sb.append(\"}\");\n           sb.append(\",\\\"\");\n-          sb.append(MetadataSerializer.FIELD_LABELSID);\n+          sb.append(FIELD_ID);\n           sb.append(\"\\\":\\\"\");\n           sb.append(decoder.getLabelsId() & mask);\n           sb.append(\"\\\",\\\"\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3MDM0Mg==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r379370342", "bodyText": "Are integer numbers correctly converted to LONGs by this?", "author": "hbs", "createdAt": "2020-02-14T10:58:03Z", "path": "warp10/src/main/java/io/warp10/json/JsonUtils.java", "diffHunk": "@@ -0,0 +1,214 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.json;\n+\n+import com.fasterxml.jackson.core.JsonFactoryBuilder;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.StreamWriteFeature;\n+import com.fasterxml.jackson.core.json.JsonReadFeature;\n+import com.fasterxml.jackson.core.json.JsonWriteFeature;\n+import com.fasterxml.jackson.databind.BeanDescription;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.databind.ser.BeanSerializer;\n+import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;\n+import com.fasterxml.jackson.databind.ser.impl.UnknownSerializer;\n+import io.warp10.continuum.gts.GTSEncoder;\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.continuum.store.thrift.data.Metadata;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptStack;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class JsonUtils {\n+\n+  /**\n+   * A serializer for null keys.\n+   * Outputs \"null\" because most javascript engines coerce null to \"null\" when using it as a key.\n+   */\n+  private static class NullKeySerializer extends JsonSerializer<Object> {\n+    @Override\n+    public void serialize(Object value, JsonGenerator gen, SerializerProvider serializers) throws IOException {\n+      gen.writeFieldName(\"null\");\n+    }\n+  }\n+\n+  /**\n+   * Used to swap UnknownSerializer and BeanSerializer for CustomEncodersSerializer.\n+   */\n+  public static class NotSerializedToCustomSerializedModifier extends BeanSerializerModifier {\n+    @Override\n+    public JsonSerializer<?> modifySerializer(SerializationConfig config, BeanDescription beanDesc, JsonSerializer<?> serializer) {\n+      if (serializer instanceof UnknownSerializer || serializer instanceof BeanSerializer) {\n+        return customEncodersSerializer;\n+      } else {\n+        return serializer;\n+      }\n+    }\n+  }\n+\n+  public static class CustomEncodersSerializer extends JsonSerializer<Object> {\n+    @Override\n+    public void serialize(Object value, JsonGenerator gen, SerializerProvider serializers) throws IOException {\n+      if (null != encoders && !encoders.isEmpty()) {\n+        StringBuilder sb = new StringBuilder();\n+        boolean encoded = false;\n+        for (JsonEncoder encoder: encoders) {\n+          encoded = encoder.addElement(sb, value);\n+          if (encoded) {\n+            break;\n+          }\n+        }\n+        if (encoded) {\n+          gen.writeRaw(sb.toString());\n+        } else {\n+          // No custom encoders able to encode this object, write null.\n+          gen.writeNull();\n+        }\n+      } else {\n+        // No custom encoders defined, write null.\n+        gen.writeNull();\n+      }\n+    }\n+  }\n+\n+  public static final NullKeySerializer nullKeySerializer = new NullKeySerializer();\n+  public static final CustomEncodersSerializer customEncodersSerializer = new CustomEncodersSerializer();\n+\n+  //\n+  // ObjectMapper instances are thread-safe, so we can safely use a single static instance.\n+  //\n+  private static final ObjectMapper strictMapper;\n+  private static final ObjectMapper looseMapper;\n+\n+  public interface JsonEncoder {\n+    boolean addElement(StringBuilder sb, Object o);\n+  }\n+\n+  private static List<JsonEncoder> encoders;\n+\n+  static {\n+    //\n+    // Configure a module to handle the serialization of non-base classes.\n+    //\n+    SimpleModule module = new SimpleModule();\n+    // Add the NotSerializedToCustomSerializedModifier instance\n+    module.setSerializerModifier(new NotSerializedToCustomSerializedModifier());\n+    // Add core custom serializers\n+    module.addSerializer(new GeoTimeSerieSerializer());\n+    module.addSerializer(new GTSEncoderSerializer());\n+    module.addSerializer(new MetadataSerializer());\n+    module.addSerializer(new NamedWarpScriptFunctionSerializer());\n+    module.addSerializer(new MacroSerializer());\n+    module.addSerializer(new BytesSerializer());\n+    module.addSerializer(new RealVectorSerializer());\n+    module.addSerializer(new RealMatrixSerializer());\n+\n+    //\n+    // Common configuration for both strict and loose mappers.\n+    //\n+    JsonFactoryBuilder builder = new JsonFactoryBuilder();\n+    builder.enable(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS);\n+    builder.enable(JsonReadFeature.ALLOW_MISSING_VALUES);\n+    builder.enable(JsonWriteFeature.ESCAPE_NON_ASCII);\n+    builder.disable(JsonWriteFeature.WRITE_NUMBERS_AS_STRINGS);\n+    builder.disable(StreamWriteFeature.AUTO_CLOSE_TARGET);\n+\n+    //\n+    // Configure strict mapper\n+    //\n+    builder.enable(JsonWriteFeature.WRITE_NAN_AS_STRINGS);\n+    strictMapper = new ObjectMapper(builder.build());\n+    strictMapper.getSerializerProvider().setNullKeySerializer(nullKeySerializer);\n+    strictMapper.registerModule(module);\n+\n+    //\n+    // Configure loose mapper\n+    //\n+    builder.disable(JsonWriteFeature.WRITE_NAN_AS_STRINGS);\n+    looseMapper = new ObjectMapper(builder.build());\n+    looseMapper.getSerializerProvider().setNullKeySerializer(nullKeySerializer);\n+    looseMapper.registerModule(module);\n+  }\n+\n+  //\n+  // Method to deserialize JSON to Objects.\n+  //\n+\n+  public static Object jsonToObject(String json) throws JsonProcessingException {\n+    return strictMapper.readValue(json, Object.class);", "originalCommit": "f4e1b2b6977dd432d50ccb33033ffd53d5bd55d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3MzY5OA==", "url": "https://github.com/senx/warp10-platform/pull/660#discussion_r379373698", "bodyText": "Yes, and floating-point numbers to Double.", "author": "ftence", "createdAt": "2020-02-14T11:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3MDM0Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "654d9c9a61c765bbeb10bfea9d42a23d54e72092", "url": "https://github.com/senx/warp10-platform/commit/654d9c9a61c765bbeb10bfea9d42a23d54e72092", "message": "Fix constant name and place to reflect the fact it is a generic id", "committedDate": "2020-02-14T11:08:38Z", "type": "commit"}]}