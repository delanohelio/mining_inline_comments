{"pr_number": 761, "pr_title": "Merge most Math functions and make them applicable on lists", "pr_createdAt": "2020-05-13T16:03:08Z", "pr_url": "https://github.com/senx/warp10-platform/pull/761", "timeline": [{"oid": "24a6ccc34decc3ea01a4ef76dac6c24722c04479", "url": "https://github.com/senx/warp10-platform/commit/24a6ccc34decc3ea01a4ef76dac6c24722c04479", "message": "Factorize code for many Math functions and make them compatible with Lists", "committedDate": "2020-05-12T14:25:03Z", "type": "commit"}, {"oid": "918245aed025064e0230cef4faa3ec95e986049b", "url": "https://github.com/senx/warp10-platform/commit/918245aed025064e0230cef4faa3ec95e986049b", "message": "Add ListRecursiveSF, merge long and double ops", "committedDate": "2020-05-13T15:59:49Z", "type": "commit"}, {"oid": "3b97b63c7a9a150d74ed8b2e32d58399981d2cc1", "url": "https://github.com/senx/warp10-platform/commit/3b97b63c7a9a150d74ed8b2e32d58399981d2cc1", "message": "Fix copyright", "committedDate": "2020-05-13T16:02:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2MTQwNg==", "url": "https://github.com/senx/warp10-platform/pull/761#discussion_r424561406", "bodyText": "The handling of nested lists should be done by ElementStackFunction itself not left to the willingness of the applyOnElement implementation.\napplyOnElement should be declared abstract, but a final apply method should be added which checks if the passed object is a list, and if so it will build the resulting list by calling apply recursively until an element is not a list in which case applyOnElement will be called.", "author": "hbs", "createdAt": "2020-05-13T16:12:29Z", "path": "warp10/src/main/java/io/warp10/script/ListRecursiveStackFunction.java", "diffHunk": "@@ -0,0 +1,101 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Abstract class to inherit when a function can be called on a single element or a list of elements or list of list of elements, etc.\n+ * This class can be used, for instance, for a function working on GTSs, GTSEncoders and lists thereof, including lists with mixed types.\n+ * The idea is to generate a function using the parameters on the stack and then to apply this function on the element\n+ * or the list of elements.\n+ * This is similar to GTSStackFunction for GTSs but it is a tad faster if the function uses some parameters as this\n+ * implementation does not use a Map for parameters.\n+ * This is similar to ElementOrListStackFunction but it is faster has it checks for List after the other cases which\n+ * it optimal in almost all the cases where the number of elements is higher than the nesting depth of the lists.\n+ */\n+public abstract class ListRecursiveStackFunction extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  /**\n+   * Interface defining the function to be generated which is applied to each element.\n+   * This method should check the type of the given element and call unhandled on it if the element is of", "originalCommit": "3b97b63c7a9a150d74ed8b2e32d58399981d2cc1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4Njg2OQ==", "url": "https://github.com/senx/warp10-platform/pull/761#discussion_r424986869", "bodyText": "After some benchmarks, this solution seems indeed better at the cost of little to none decrease in performance.", "author": "ftence", "createdAt": "2020-05-14T09:10:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2MTQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "2af66bb26f5462a8b7cd2fdee292f5a8137b759a", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ListRecursiveStackFunction.java b/warp10/src/main/java/io/warp10/script/ListRecursiveStackFunction.java\nindex db007217..467b8c09 100644\n--- a/warp10/src/main/java/io/warp10/script/ListRecursiveStackFunction.java\n+++ b/warp10/src/main/java/io/warp10/script/ListRecursiveStackFunction.java\n\n@@ -31,15 +31,17 @@ import java.util.List;\n  */\n public abstract class ListRecursiveStackFunction extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n \n+  public static final Object UNHANDLED = new Object();\n+\n   /**\n    * Interface defining the function to be generated which is applied to each element.\n-   * This method should check the type of the given element and call unhandled on it if the element is of\n+   * This method should check the type of the given element and return UNHANDLED if the element is of\n    * unexpected type.\n    */\n   public abstract class ElementStackFunction {\n     /**\n      * Apply the function on a single element (not a List).\n-     * If it can't handle the element, MUST call unhandled.\n+     * If it can't handle the element, MUST return UNHANDLED.\n      *\n      * @param element The element to apply the function on.\n      * @return The result of the application of the function.\n"}}, {"oid": "2af66bb26f5462a8b7cd2fdee292f5a8137b759a", "url": "https://github.com/senx/warp10-platform/commit/2af66bb26f5462a8b7cd2fdee292f5a8137b759a", "message": "Change the logic so that applyOnElement does not have to call unhandled.", "committedDate": "2020-05-14T09:11:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE3MTE0Mw==", "url": "https://github.com/senx/warp10-platform/pull/761#discussion_r425171143", "bodyText": "list of lists or nested lists in a more general way?", "author": "hbs", "createdAt": "2020-05-14T14:15:40Z", "path": "warp10/src/main/java/io/warp10/script/ListRecursiveStackFunction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Abstract class to inherit when a function can be called on a single element or a list of elements or list of list of elements, etc.", "originalCommit": "2af66bb26f5462a8b7cd2fdee292f5a8137b759a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8631581e10b7aa87023d145b2f0f3d080ab6b7f", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/ListRecursiveStackFunction.java b/warp10/src/main/java/io/warp10/script/ListRecursiveStackFunction.java\nindex 467b8c09..217a8d16 100644\n--- a/warp10/src/main/java/io/warp10/script/ListRecursiveStackFunction.java\n+++ b/warp10/src/main/java/io/warp10/script/ListRecursiveStackFunction.java\n\n@@ -20,10 +20,10 @@ import java.util.ArrayList;\n import java.util.List;\n \n /**\n- * Abstract class to inherit when a function can be called on a single element or a list of elements or list of list of elements, etc.\n+ * Abstract class to inherit when a function can be called on a single element or a nested list of elements.\n  * This class can be used, for instance, for a function working on GTSs, GTSEncoders and lists thereof, including lists with mixed types.\n  * The idea is to generate a function using the parameters on the stack and then to apply this function on the element\n- * or the list of elements.\n+ * or each element of the nested list.\n  * This is similar to GTSStackFunction for GTSs but it is a tad faster if the function uses some parameters as this\n  * implementation does not use a Map for parameters.\n  * This is similar to ElementOrListStackFunction but it is faster has it checks for List after the other cases which\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMTUxOQ==", "url": "https://github.com/senx/warp10-platform/pull/761#discussion_r425201519", "bodyText": "extraneous 'the'", "author": "hbs", "createdAt": "2020-05-14T14:55:18Z", "path": "warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java", "diffHunk": "@@ -0,0 +1,151 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.DoubleBinaryOperator;\n+import java.util.function.LongBinaryOperator;\n+\n+/**\n+ * Apply a double or long binary operator to two values.\n+ * If the only the long operator is defined, all numbers are converted to long.", "originalCommit": "2af66bb26f5462a8b7cd2fdee292f5a8137b759a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8631581e10b7aa87023d145b2f0f3d080ab6b7f", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java b/warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java\nindex 7d805309..ff310875 100644\n--- a/warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java\n+++ b/warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java\n\n@@ -29,17 +29,17 @@ import java.util.function.LongBinaryOperator;\n \n /**\n  * Apply a double or long binary operator to two values.\n- * If the only the long operator is defined, all numbers are converted to long.\n- * If the only the double operator is defined, all numbers are converted to double.\n- * If the both long and double operator are defined, all numbers are converted long until a Double or BigDecimal is found,\n+ * If only the long operator is defined, all numbers are converted to long.\n+ * If only the double operator is defined, all numbers are converted to double.\n+ * If both long and double operators are defined, all numbers are converted to long until a Double or BigDecimal is found,\n  * then they are all converted to double.\n  *\n  * The operator can also be applied to a list of values and a single operand, on top.\n  * The result is a copy of the list with values being the result of the operator applied on the initial value and the single operand.\n  *\n  * If the function is given a list on top, its behavior depends on applyOnSingleList:\n- * - if True the result is op(...op(op(op(v[0], v[1]), v[2]), v[3]), ... v[n])\n- * - if False, the function expects a single value under the list and behave the same as described in the paragraph before, operands being switched.\n+ * - if true the result is op(...op(op(op(v[0], v[1]), v[2]), v[3]), ... v[n])\n+ * - if false, the function expects a single value under the list and behave the same as described in the paragraph before, operands being switched.\n  *\n  * Whether applyOnSingleList should be set to true of false depends on the commutativity of the operator:\n  * - max, sum, multiplication, for instance, do have meaning for a single list. Moreover, being commutative,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMTk5NA==", "url": "https://github.com/senx/warp10-platform/pull/761#discussion_r425201994", "bodyText": "extraneous 'the'", "author": "hbs", "createdAt": "2020-05-14T14:55:53Z", "path": "warp10/src/main/java/io/warp10/script/functions/NumericalUnaryFunction.java", "diffHunk": "@@ -0,0 +1,66 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import io.warp10.script.ListRecursiveStackFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+\n+import java.math.BigDecimal;\n+import java.util.function.DoubleUnaryOperator;\n+import java.util.function.LongUnaryOperator;\n+\n+/**\n+ * Apply a double or long unary operator to one value, a list of values or nested lists of values.\n+ * If the only the long operator is defined, all numbers are converted to long.", "originalCommit": "2af66bb26f5462a8b7cd2fdee292f5a8137b759a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMzYzNw==", "url": "https://github.com/senx/warp10-platform/pull/761#discussion_r425203637", "bodyText": "Use 'true' and 'false', not the pythonic 'True' and 'False'", "author": "hbs", "createdAt": "2020-05-14T14:57:52Z", "path": "warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java", "diffHunk": "@@ -0,0 +1,151 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.DoubleBinaryOperator;\n+import java.util.function.LongBinaryOperator;\n+\n+/**\n+ * Apply a double or long binary operator to two values.\n+ * If the only the long operator is defined, all numbers are converted to long.\n+ * If the only the double operator is defined, all numbers are converted to double.\n+ * If the both long and double operator are defined, all numbers are converted long until a Double or BigDecimal is found,\n+ * then they are all converted to double.\n+ *\n+ * The operator can also be applied to a list of values and a single operand, on top.\n+ * The result is a copy of the list with values being the result of the operator applied on the initial value and the single operand.\n+ *\n+ * If the function is given a list on top, its behavior depends on applyOnSingleList:\n+ * - if True the result is op(...op(op(op(v[0], v[1]), v[2]), v[3]), ... v[n])", "originalCommit": "2af66bb26f5462a8b7cd2fdee292f5a8137b759a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8631581e10b7aa87023d145b2f0f3d080ab6b7f", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java b/warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java\nindex 7d805309..ff310875 100644\n--- a/warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java\n+++ b/warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java\n\n@@ -29,17 +29,17 @@ import java.util.function.LongBinaryOperator;\n \n /**\n  * Apply a double or long binary operator to two values.\n- * If the only the long operator is defined, all numbers are converted to long.\n- * If the only the double operator is defined, all numbers are converted to double.\n- * If the both long and double operator are defined, all numbers are converted long until a Double or BigDecimal is found,\n+ * If only the long operator is defined, all numbers are converted to long.\n+ * If only the double operator is defined, all numbers are converted to double.\n+ * If both long and double operators are defined, all numbers are converted to long until a Double or BigDecimal is found,\n  * then they are all converted to double.\n  *\n  * The operator can also be applied to a list of values and a single operand, on top.\n  * The result is a copy of the list with values being the result of the operator applied on the initial value and the single operand.\n  *\n  * If the function is given a list on top, its behavior depends on applyOnSingleList:\n- * - if True the result is op(...op(op(op(v[0], v[1]), v[2]), v[3]), ... v[n])\n- * - if False, the function expects a single value under the list and behave the same as described in the paragraph before, operands being switched.\n+ * - if true the result is op(...op(op(op(v[0], v[1]), v[2]), v[3]), ... v[n])\n+ * - if false, the function expects a single value under the list and behave the same as described in the paragraph before, operands being switched.\n  *\n  * Whether applyOnSingleList should be set to true of false depends on the commutativity of the operator:\n  * - max, sum, multiplication, for instance, do have meaning for a single list. Moreover, being commutative,\n"}}, {"oid": "b8631581e10b7aa87023d145b2f0f3d080ab6b7f", "url": "https://github.com/senx/warp10-platform/commit/b8631581e10b7aa87023d145b2f0f3d080ab6b7f", "message": "Fix comments", "committedDate": "2020-05-15T08:35:27Z", "type": "commit"}]}