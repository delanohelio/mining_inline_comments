{"pr_number": 832, "pr_title": "Make numerical functions work on GTSs", "pr_createdAt": "2020-09-17T15:14:05Z", "pr_url": "https://github.com/senx/warp10-platform/pull/832", "timeline": [{"oid": "98238957b6c90cbd033d0759a30dcb7491eb8028", "url": "https://github.com/senx/warp10-platform/commit/98238957b6c90cbd033d0759a30dcb7491eb8028", "message": "Make numerical functions work on GTSs, using their values, the same way they work on Lists", "committedDate": "2020-09-17T15:13:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc1NTA2OA==", "url": "https://github.com/senx/warp10-platform/pull/832#discussion_r490755068", "bodyText": "why call .longValue() on the GTS value?", "author": "hbs", "createdAt": "2020-09-18T07:28:25Z", "path": "warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java", "diffHunk": "@@ -88,9 +101,43 @@ public Object apply(WarpScriptStack stack) throws WarpScriptException {\n             result.add(opL.applyAsLong(((Number) element).longValue(), ((Number) op0).longValue()));\n           }\n         }\n+        stack.push(result);\n+      } else if (op1 instanceof GeoTimeSerie) {\n+        // A numeric operand on top and a GTS under: apply the operator on each value of the GTS and the single operand.\n+        GeoTimeSerie gts = (GeoTimeSerie) op1;\n+\n+        GeoTimeSerie.TYPE type = gts.getType();\n+\n+        // Only numerical and empty GTSs are allowed.\n+        if (GeoTimeSerie.TYPE.LONG != type && GeoTimeSerie.TYPE.DOUBLE != type && GeoTimeSerie.TYPE.UNDEFINED != type) {\n+          throw new WarpScriptException(unhandledErrorMessage);\n+        }\n+\n+        GeoTimeSerie result = gts.cloneEmpty(gts.size());\n+\n+        GTSOpsHelper.GTSUnaryOp op;\n+\n+        if (null != opD && (null == opL || op0 instanceof Double || type == GeoTimeSerie.TYPE.DOUBLE || op0 instanceof BigDecimal)) {\n+          op = new GTSOpsHelper.GTSUnaryOp() {\n+            @Override\n+            public Object op(GeoTimeSerie gts, int idx) {\n+              return opD.applyAsDouble(((Number) GTSHelper.valueAtIndex(gts, idx)).longValue(), ((Number) op0).doubleValue());", "originalCommit": "98238957b6c90cbd033d0759a30dcb7491eb8028", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92935c95b665e94b69bc95cc0af5b9092c091c59", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java b/warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java\nindex 75176419..269b4e94 100644\n--- a/warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java\n+++ b/warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java\n\n@@ -121,7 +121,7 @@ public class NumericalBinaryFunction extends NamedWarpScriptFunction implements\n           op = new GTSOpsHelper.GTSUnaryOp() {\n             @Override\n             public Object op(GeoTimeSerie gts, int idx) {\n-              return opD.applyAsDouble(((Number) GTSHelper.valueAtIndex(gts, idx)).longValue(), ((Number) op0).doubleValue());\n+              return opD.applyAsDouble(((Number) GTSHelper.valueAtIndex(gts, idx)).doubleValue(), ((Number) op0).doubleValue());\n             }\n           };\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc1NTgwOA==", "url": "https://github.com/senx/warp10-platform/pull/832#discussion_r490755808", "bodyText": "why longValue()?", "author": "hbs", "createdAt": "2020-09-18T07:30:00Z", "path": "warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java", "diffHunk": "@@ -140,10 +187,87 @@ public Object apply(WarpScriptStack stack) throws WarpScriptException {\n             result.add(opL.applyAsLong(((Number) op1).longValue(), ((Number) element).longValue()));\n           }\n         }\n+        stack.push(result);\n+      }\n+    } else if (op0 instanceof GeoTimeSerie) {\n+      GeoTimeSerie gts = (GeoTimeSerie) op0;\n+\n+      GeoTimeSerie.TYPE type = gts.getType();\n+\n+      if (type != GeoTimeSerie.TYPE.LONG && type != GeoTimeSerie.TYPE.DOUBLE && type != GeoTimeSerie.TYPE.UNDEFINED) {\n+        throw new WarpScriptException(unhandledErrorMessage);\n+      }\n+\n+      // A GTS on top, whether the function expects a single operand under or not depends on applyInList.\n+      if (applyInList) {\n+        // Apply operator only on the elements of the list op(...op(op(op(v[0], v[1]), v[2]), v[3]), ... v[n])\n+\n+\n+        int n = gts.size();\n+\n+        if (null != opD && (null == opL || GeoTimeSerie.TYPE.DOUBLE == type)) {\n+          Double result = null;\n+\n+          for (int idx = 0; idx < n; idx++) {\n+            Number value = (Number) GTSHelper.valueAtIndex(gts, idx);\n+\n+            if (null == result) {\n+              result = value.doubleValue();\n+            } else {\n+              result = opD.applyAsDouble(result, value.doubleValue());\n+            }\n+          }\n+\n+          stack.push(result);\n+        } else {\n+          Long result = null;\n+\n+          for (int idx = 0; idx < n; idx++) {\n+            Number value = (Number) GTSHelper.valueAtIndex(gts, idx);\n+\n+            if (null == result) {\n+              result = value.longValue();\n+            } else {\n+              result = opL.applyAsLong(result, value.longValue());\n+            }\n+          }\n+\n+          stack.push(result);\n+        }\n+      } else {\n+        // Expect a single operand under the GTS and apply the operator on the single operand and each value of the GTS.\n+        Object op1 = stack.pop();\n+\n+        if (!(op1 instanceof Number)) {\n+          throw new WarpScriptException(unhandledErrorMessage);\n+        }\n+\n+        GeoTimeSerie result = gts.cloneEmpty(gts.size());\n+\n+        GTSOpsHelper.GTSUnaryOp op;\n+\n+        if (null != opD && (null == opL || op1 instanceof Double || type == GeoTimeSerie.TYPE.DOUBLE || op1 instanceof BigDecimal)) {\n+          op = new GTSOpsHelper.GTSUnaryOp() {\n+            @Override\n+            public Object op(GeoTimeSerie gts, int idx) {\n+              return opD.applyAsDouble(((Number) op1).doubleValue(), ((Number) GTSHelper.valueAtIndex(gts, idx)).longValue());", "originalCommit": "98238957b6c90cbd033d0759a30dcb7491eb8028", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92935c95b665e94b69bc95cc0af5b9092c091c59", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java b/warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java\nindex 75176419..269b4e94 100644\n--- a/warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java\n+++ b/warp10/src/main/java/io/warp10/script/functions/NumericalBinaryFunction.java\n\n@@ -250,7 +250,7 @@ public class NumericalBinaryFunction extends NamedWarpScriptFunction implements\n           op = new GTSOpsHelper.GTSUnaryOp() {\n             @Override\n             public Object op(GeoTimeSerie gts, int idx) {\n-              return opD.applyAsDouble(((Number) op1).doubleValue(), ((Number) GTSHelper.valueAtIndex(gts, idx)).longValue());\n+              return opD.applyAsDouble(((Number) op1).doubleValue(), ((Number) GTSHelper.valueAtIndex(gts, idx)).doubleValue());\n             }\n           };\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc1NjE4MA==", "url": "https://github.com/senx/warp10-platform/pull/832#discussion_r490756180", "bodyText": "Why longValue()?", "author": "hbs", "createdAt": "2020-09-18T07:30:44Z", "path": "warp10/src/main/java/io/warp10/script/functions/NumericalUnaryFunction.java", "diffHunk": "@@ -47,6 +51,43 @@ public Object applyOnElement(Object element) throws WarpScriptException {\n           } else {\n             return opL.applyAsLong(((Number) element).longValue());\n           }\n+        } else if (element instanceof GeoTimeSerie) {\n+          GeoTimeSerie gts = (GeoTimeSerie) element;\n+\n+          GeoTimeSerie.TYPE type = gts.getType();\n+\n+          // Only numerical and empty GTSs are allowed.\n+          if (GeoTimeSerie.TYPE.LONG != type && GeoTimeSerie.TYPE.DOUBLE != type && GeoTimeSerie.TYPE.UNDEFINED != type) {\n+            throw new WarpScriptException(getName() + \" can only operate on LONG, DOUBLE or empty GTSs.\");\n+          }\n+\n+          GeoTimeSerie result = gts.cloneEmpty(gts.size());\n+\n+          GTSOpsHelper.GTSUnaryOp op;\n+\n+          // Initialize the operator depending on which ones are defined and the GTS type.\n+          if (null != opD && (null == opL || gts.getType() == GeoTimeSerie.TYPE.DOUBLE)) {\n+            // Consider all values as doubles because only the double operator is defined or the GTS is of type DOUBLE.\n+            op = new GTSOpsHelper.GTSUnaryOp() {\n+              @Override\n+              public Object op(GeoTimeSerie gts, int idx) {\n+                return opD.applyAsDouble(((Number) GTSHelper.valueAtIndex(gts, idx)).longValue());", "originalCommit": "98238957b6c90cbd033d0759a30dcb7491eb8028", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "92935c95b665e94b69bc95cc0af5b9092c091c59", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/functions/NumericalUnaryFunction.java b/warp10/src/main/java/io/warp10/script/functions/NumericalUnaryFunction.java\nindex 44ccb525..a4fcbb24 100644\n--- a/warp10/src/main/java/io/warp10/script/functions/NumericalUnaryFunction.java\n+++ b/warp10/src/main/java/io/warp10/script/functions/NumericalUnaryFunction.java\n\n@@ -71,7 +71,7 @@ public class NumericalUnaryFunction extends ListRecursiveStackFunction {\n             op = new GTSOpsHelper.GTSUnaryOp() {\n               @Override\n               public Object op(GeoTimeSerie gts, int idx) {\n-                return opD.applyAsDouble(((Number) GTSHelper.valueAtIndex(gts, idx)).longValue());\n+                return opD.applyAsDouble(((Number) GTSHelper.valueAtIndex(gts, idx)).doubleValue());\n               }\n             };\n           } else {\n"}}, {"oid": "92935c95b665e94b69bc95cc0af5b9092c091c59", "url": "https://github.com/senx/warp10-platform/commit/92935c95b665e94b69bc95cc0af5b9092c091c59", "message": "Use .doubleValue() for applyAsDouble parameters", "committedDate": "2020-09-18T10:12:40Z", "type": "commit"}]}