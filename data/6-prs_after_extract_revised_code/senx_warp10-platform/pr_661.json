{"pr_number": 661, "pr_title": "Add types and clean TYPEOF", "pr_createdAt": "2020-02-10T13:49:57Z", "pr_url": "https://github.com/senx/warp10-platform/pull/661", "timeline": [{"oid": "eb51a7184eef28e82232435dcd5875608160332d", "url": "https://github.com/senx/warp10-platform/commit/eb51a7184eef28e82232435dcd5875608160332d", "message": "Add types and clean TYPEOF", "committedDate": "2020-02-10T13:48:49Z", "type": "commit"}, {"oid": "7a390c9c86cd65adcd5a537aa27656540abdfa54", "url": "https://github.com/senx/warp10-platform/commit/7a390c9c86cd65adcd5a537aa27656540abdfa54", "message": "Keep typeof(Class) for extensions", "committedDate": "2020-02-12T15:42:23Z", "type": "commit"}, {"oid": "41165e4022d32e3ac7076346f6043b38e12a6a2e", "url": "https://github.com/senx/warp10-platform/commit/41165e4022d32e3ac7076346f6043b38e12a6a2e", "message": "Add comment to make sure classes implement Typeofable correctly", "committedDate": "2020-02-12T16:18:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0MjU3MA==", "url": "https://github.com/senx/warp10-platform/pull/661#discussion_r378542570", "bodyText": "It would be better to use neither parens nor spaces.\nX-Local-Anonymous-Class?", "author": "hbs", "createdAt": "2020-02-12T22:11:01Z", "path": "warp10/src/main/java/io/warp10/script/functions/TYPEOF.java", "diffHunk": "@@ -97,57 +108,72 @@ public static String typeof(Object o) {\n \n   public static String typeof(Class c) {\n     if (String.class.isAssignableFrom(c)) {\n-      return (TYPE_STRING);\n+      return TYPE_STRING;\n     } else if (Long.class.isAssignableFrom(c) || Integer.class.isAssignableFrom(c) || Short.class.isAssignableFrom(c) || Byte.class.isAssignableFrom(c) || BigInteger.class.isAssignableFrom(c)) {\n-      return (TYPE_LONG);\n+      return TYPE_LONG;\n     } else if (Double.class.isAssignableFrom(c) || Float.class.isAssignableFrom(c) || BigDecimal.class.isAssignableFrom(c)) {\n-      return (TYPE_DOUBLE);\n+      return TYPE_DOUBLE;\n     } else if (Boolean.class.isAssignableFrom(c)) {\n-      return (TYPE_BOOLEAN);\n+      return TYPE_BOOLEAN;\n     } else if (Vector.class.isAssignableFrom(c)) {  // place before List. Vector implements List.\n-      return (TYPE_VECTOR);\n+      return TYPE_VECTOR;\n     } else if (List.class.isAssignableFrom(c)) {\n-      return (TYPE_LIST);\n+      return TYPE_LIST;\n     } else if (Map.class.isAssignableFrom(c)) {\n-      return (TYPE_MAP);\n+      return TYPE_MAP;\n     } else if (Macro.class.isAssignableFrom(c)) {\n-      return (TYPE_MACRO);\n-    } else if (WarpScriptMapperFunction.class.isAssignableFrom(c)) {\n-      return (TYPE_MAPPER);\n-    } else if (WarpScriptReducerFunction.class.isAssignableFrom(c)) {\n-      return (TYPE_REDUCER);\n+      return TYPE_MACRO;\n+    } else if (WarpScriptAggregatorFunction.class.isAssignableFrom(c)) {\n+      return TYPE_AGGREGATOR;\n+    } else if (WarpScriptFillerFunction.class.isAssignableFrom(c)) {\n+      return TYPE_FILLER;\n+    } else if (WarpScriptFilterFunction.class.isAssignableFrom(c)) {\n+      return TYPE_FILTER;\n+    } else if (WarpScriptNAryFunction.class.isAssignableFrom(c)) {\n+      return TYPE_OPERATOR;\n     } else if (GeoTimeSerie.class.isAssignableFrom(c)) {\n-      return (TYPE_GTS);\n+      return TYPE_GTS;\n+    } else if (GTSEncoder.class.isAssignableFrom(c)) {\n+      return TYPE_GTSENCODER;\n     } else if (byte[].class.isAssignableFrom(c)) {\n-      return (TYPE_BYTES);\n+      return TYPE_BYTES;\n     } else if (PGraphics.class.isAssignableFrom(c)) {\n-      return (TYPE_PGRAPHICSIMAGE);\n+      return TYPE_PGRAPHICSIMAGE;\n     } else if (PImage.class.isAssignableFrom(c)) {\n-      return (TYPE_PIMAGE);\n+      return TYPE_PIMAGE;\n     } else if (PFont.class.isAssignableFrom(c)) {\n-      return (TYPE_PFONT);\n+      return TYPE_PFONT;\n     } else if (PShape.class.isAssignableFrom(c)) {\n-      return (TYPE_PSHAPE);\n+      return TYPE_PSHAPE;\n     } else if (GeoXPLib.GeoXPShape.class.isAssignableFrom(c)) {\n-      return (TYPE_GEOSHAPE);\n+      return TYPE_GEOSHAPE;\n     } else if (Set.class.isAssignableFrom(c)) {\n-      return (TYPE_SET);\n+      return TYPE_SET;\n     } else if (BitSet.class.isAssignableFrom(c)) {\n-      return (TYPE_BITSET);\n+      return TYPE_BITSET;\n     } else if (ArrayRealVector.class.isAssignableFrom(c)) {\n-      return (TYPE_REALVECTOR);\n+      return TYPE_REALVECTOR;\n     } else if (RealMatrix.class.isAssignableFrom(c)) {\n-      return (TYPE_REALMATRIX);\n+      return TYPE_REALMATRIX;\n     } else if (AtomicLong.class.isAssignableFrom(c)) {\n-      return (TYPE_COUNTER);\n+      return TYPE_COUNTER;\n     } else if (Typeofable.class.isAssignableFrom(c)) {\n       try {\n-        return (((Typeofable) c.newInstance()).typeof());\n-      } catch(Exception e) {\n-        return (\"X-\" + c.getSimpleName().toUpperCase());\n+        return \"X-\" + ((Typeofable) c.getDeclaredConstructor().newInstance()).typeof();\n+      } catch (Exception e) {\n+        return defaultType(c);\n       }\n     } else {\n-      return (c.getSimpleName().toUpperCase());\n+      return defaultType(c);\n+    }\n+  }\n+\n+  private static String defaultType(Class c) {\n+    String canonicalName = c.getCanonicalName();\n+    if (null == canonicalName) {\n+      return \"X-(Local/Anonymous Class)\";", "originalCommit": "41165e4022d32e3ac7076346f6043b38e12a6a2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd2959f5a5f0e7bb9d46c0d05eabafb122c0ecc1", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/functions/TYPEOF.java b/warp10/src/main/java/io/warp10/script/functions/TYPEOF.java\nindex 03ba554e..3b4dd512 100644\n--- a/warp10/src/main/java/io/warp10/script/functions/TYPEOF.java\n+++ b/warp10/src/main/java/io/warp10/script/functions/TYPEOF.java\n\n@@ -171,7 +171,7 @@ public class TYPEOF extends NamedWarpScriptFunction implements WarpScriptStackFu\n   private static String defaultType(Class c) {\n     String canonicalName = c.getCanonicalName();\n     if (null == canonicalName) {\n-      return \"X-(Local/Anonymous Class)\";\n+      return \"X-Local-Anonymous-Class)\";\n     } else {\n       return \"X-\" + canonicalName;\n     }\n"}}, {"oid": "bd2959f5a5f0e7bb9d46c0d05eabafb122c0ecc1", "url": "https://github.com/senx/warp10-platform/commit/bd2959f5a5f0e7bb9d46c0d05eabafb122c0ecc1", "message": "Change returned type for local or anon classes", "committedDate": "2020-02-17T16:10:12Z", "type": "commit"}]}