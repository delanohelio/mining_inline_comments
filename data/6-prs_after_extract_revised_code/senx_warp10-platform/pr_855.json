{"pr_number": 855, "pr_title": "Add streamDelimiter parameter to HTTP definitions to stream the POST payload to the macro", "pr_createdAt": "2020-09-28T15:37:05Z", "pr_url": "https://github.com/senx/warp10-platform/pull/855", "timeline": [{"oid": "ca91cd5e8a8ee8321c077aa213d930078040b0ca", "url": "https://github.com/senx/warp10-platform/commit/ca91cd5e8a8ee8321c077aa213d930078040b0ca", "message": "Add stream mode to HTTP plugin", "committedDate": "2020-09-28T15:24:23Z", "type": "commit"}, {"oid": "4e8a5bf9d1ad64a410e7a3a593c089217a39d33c", "url": "https://github.com/senx/warp10-platform/commit/4e8a5bf9d1ad64a410e7a3a593c089217a39d33c", "message": "Remove unused import and update copyright notice", "committedDate": "2020-09-28T15:30:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwMDU4Ng==", "url": "https://github.com/senx/warp10-platform/pull/855#discussion_r497800586", "bodyText": "field should use plura to conform to the other field names.", "author": "hbs", "createdAt": "2020-09-30T21:06:40Z", "path": "warp10/src/main/java/io/warp10/plugins/http/HTTPWarp10Plugin.java", "diffHunk": "@@ -108,6 +109,11 @@\n    */\n   private Map<String, Boolean> parsePayloads = new HashMap<String, Boolean>();\n \n+  /**\n+   * Map of uri to stream delimiter.\n+   */\n+  private Map<String, Byte> streamDelimiter = new HashMap<String, Byte>();", "originalCommit": "4e8a5bf9d1ad64a410e7a3a593c089217a39d33c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94337eba7efda0d966c5c63e74af9dccfd8661f4", "chunk": "diff --git a/warp10/src/main/java/io/warp10/plugins/http/HTTPWarp10Plugin.java b/warp10/src/main/java/io/warp10/plugins/http/HTTPWarp10Plugin.java\nindex 3fde8dac..10b2d4a6 100644\n--- a/warp10/src/main/java/io/warp10/plugins/http/HTTPWarp10Plugin.java\n+++ b/warp10/src/main/java/io/warp10/plugins/http/HTTPWarp10Plugin.java\n\n@@ -112,7 +112,7 @@ public class HTTPWarp10Plugin extends AbstractWarp10Plugin implements Runnable {\n   /**\n    * Map of uri to stream delimiter.\n    */\n-  private Map<String, Byte> streamDelimiter = new HashMap<String, Byte>();\n+  private Map<String, Byte> streamDelimiters = new HashMap<String, Byte>();\n \n   /**\n    * Map of filename to uri\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNDA5NA==", "url": "https://github.com/senx/warp10-platform/pull/855#discussion_r497804094", "bodyText": "The lines below are unclear, they are executed even if isParsePayload is false, the fact that it works should be described in a comment.", "author": "hbs", "createdAt": "2020-09-30T21:13:46Z", "path": "warp10/src/main/java/io/warp10/plugins/http/WarpScriptHandler.java", "diffHunk": "@@ -103,14 +112,29 @@ public void handle(String target, Request baseRequest, HttpServletRequest reques\n       }\n       params.put(\"headers\", headers);\n \n-      // Get the payload if the content-type is not application/x-www-form-urlencoded or we do not want to parse the payload\n-      if (!MimeTypes.Type.FORM_ENCODED.is(request.getContentType()) || !plugin.isParsePayload(prefix)) {\n-        byte[] payload = IOUtils.toByteArray(request.getInputStream());\n-        if (0 < payload.length) {\n-          params.put(\"payload\", payload);\n+      // We have to get the input stream before getting the parameters, else we won't be able to read it!\n+      InputStream inputStream = null;\n+\n+      // The input stream is handled very differently if the WarpScript is expecting a splitted stream or not.\n+      if (null == plugin.streamDelimiter(prefix)) {\n+        // Get the payload if the content-type is not application/x-www-form-urlencoded or we do not want to parse the payload\n+        if ((!MimeTypes.Type.FORM_ENCODED.is(request.getContentType()) || !plugin.isParsePayload(prefix))) {\n+          // Ready all the stream and store the payload.\n+          byte[] payload = IOUtils.toByteArray(request.getInputStream());\n+          if (0 < payload.length) {\n+            params.put(\"payload\", payload);\n+          }\n+        }\n+      } else {\n+        // The input stream will be splitted and given to the macro later.\n+        if (null != request.getHeader(\"Content-Type\") && \"application/gzip\".equals(request.getHeader(\"Content-Type\"))) {\n+          inputStream = new GZIPInputStream(request.getInputStream());\n+        } else {\n+          inputStream = request.getInputStream();\n         }\n       }\n \n+      // Get the parameters in the URL and payload if we want to parse the x-www-form-urlencoded payload.", "originalCommit": "4e8a5bf9d1ad64a410e7a3a593c089217a39d33c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94337eba7efda0d966c5c63e74af9dccfd8661f4", "chunk": "diff --git a/warp10/src/main/java/io/warp10/plugins/http/WarpScriptHandler.java b/warp10/src/main/java/io/warp10/plugins/http/WarpScriptHandler.java\nindex 3568fa84..fb3302f3 100644\n--- a/warp10/src/main/java/io/warp10/plugins/http/WarpScriptHandler.java\n+++ b/warp10/src/main/java/io/warp10/plugins/http/WarpScriptHandler.java\n\n@@ -117,7 +117,11 @@ public class WarpScriptHandler extends AbstractHandler {\n \n       // The input stream is handled very differently if the WarpScript is expecting a splitted stream or not.\n       if (null == plugin.streamDelimiter(prefix)) {\n-        // Get the payload if the content-type is not application/x-www-form-urlencoded or we do not want to parse the payload\n+        // In the case of x-www-form-urlencoded request, the parameters are sent in the payload.\n+        // We must not get the input stream if we want the request.getParameterMap() below to\n+        // automatically parse the payload and add the result to the parameter map.\n+        // Thus we get the input stream if the request is not x-www-form-urlencoded or if the configuration\n+        // explicitly states that the payload must not be parsed.\n         if ((!MimeTypes.Type.FORM_ENCODED.is(request.getContentType()) || !plugin.isParsePayload(prefix))) {\n           // Ready all the stream and store the payload.\n           byte[] payload = IOUtils.toByteArray(request.getInputStream());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNTQyMw==", "url": "https://github.com/senx/warp10-platform/pull/855#discussion_r497805423", "bodyText": "make target final and use target == array[i]", "author": "hbs", "createdAt": "2020-09-30T21:16:30Z", "path": "warp10/src/main/java/io/warp10/plugins/http/WarpScriptHandler.java", "diffHunk": "@@ -166,10 +233,19 @@ public void handle(String target, Request baseRequest, HttpServletRequest reques\n         }\n       } catch (WarpScriptException wse) {\n         throw new IOException(wse);\n-      }      \n+      }\n     } finally {\n       WarpConfig.clearThreadProperties();\n       WarpScriptStackRegistry.unregister(stack);\n-    }    \n+    }\n+  }\n+\n+  private static int indexOf(byte[] array, byte target, int start, int end) {\n+    for (int i = start; i < end; i++) {\n+      if (array[i] == target) {", "originalCommit": "4e8a5bf9d1ad64a410e7a3a593c089217a39d33c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94337eba7efda0d966c5c63e74af9dccfd8661f4", "chunk": "diff --git a/warp10/src/main/java/io/warp10/plugins/http/WarpScriptHandler.java b/warp10/src/main/java/io/warp10/plugins/http/WarpScriptHandler.java\nindex 3568fa84..fb3302f3 100644\n--- a/warp10/src/main/java/io/warp10/plugins/http/WarpScriptHandler.java\n+++ b/warp10/src/main/java/io/warp10/plugins/http/WarpScriptHandler.java\n\n@@ -240,9 +245,9 @@ public class WarpScriptHandler extends AbstractHandler {\n     }\n   }\n \n-  private static int indexOf(byte[] array, byte target, int start, int end) {\n+  private static int indexOf(byte[] array, final byte target, int start, int end) {\n     for (int i = start; i < end; i++) {\n-      if (array[i] == target) {\n+      if (target == array[i]) {\n         return i;\n       }\n     }\n"}}, {"oid": "94337eba7efda0d966c5c63e74af9dccfd8661f4", "url": "https://github.com/senx/warp10-platform/commit/94337eba7efda0d966c5c63e74af9dccfd8661f4", "message": "Address PR comments", "committedDate": "2020-10-01T11:42:21Z", "type": "commit"}]}