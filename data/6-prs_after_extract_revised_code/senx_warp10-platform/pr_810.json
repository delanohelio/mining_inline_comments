{"pr_number": 810, "pr_title": "Add optimization to ASREGS", "pr_createdAt": "2020-07-31T14:03:45Z", "pr_url": "https://github.com/senx/warp10-platform/pull/810", "timeline": [{"oid": "1908def4919131c41cb4ef3855e8fe9e3ca5f24b", "url": "https://github.com/senx/warp10-platform/commit/1908def4919131c41cb4ef3855e8fe9e3ca5f24b", "message": "Add optimization to ASREGS so it replaces STORE on lists containing only register numbers by POPRs", "committedDate": "2020-07-31T14:02:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3NTg1OA==", "url": "https://github.com/senx/warp10-platform/pull/810#discussion_r464475858", "bodyText": "What happens if you initially had 1 2 3 [ 1 2 2 ] STORE? It seems that register 2 will end up with value 2 instead of 3.", "author": "hbs", "createdAt": "2020-08-03T15:08:41Z", "path": "warp10/src/main/java/io/warp10/script/functions/ASREGS.java", "diffHunk": "@@ -242,16 +242,40 @@ public Object apply(WarpScriptStack stack) throws WarpScriptException {\n             }\n           } else if (symbol instanceof ENDLIST) {\n             int idx = i - 2;\n+            int nbOfReg = 0; // Keeps track of the number of registers in this list\n             while (idx >= 0 && !(statements.get(idx) instanceof MARK)) {\n               Object stmt = statements.get(idx);\n               if (stmt instanceof String) {\n                 Integer regno = varregs.get(stmt);\n                 if (null != regno) {\n                   statements.set(idx, (long) regno);\n+                  nbOfReg++;\n                 }\n+              } else if (stmt instanceof Long) {\n+                nbOfReg++;\n               }\n               idx--;\n-            }            \n+            }\n+\n+            // Further optimization: if the list contains only registers, replace by POPRs which is much faster.\n+            // For instance, replace [ 3 7 9 ] STORE by NOOP POPR9 POPR7 POPR3 NOOP NOOP.\n+            int listLength = i - idx - 2;\n+            if (nbOfReg == listLength) {\n+              statements.set(idx, NOOP); // replace MARK\n+              statements.set(i - 1, NOOP); // replace ENDLIST\n+              statements.set(i, NOOP); // replace STORE\n+\n+              // As we must flip the order of the list, we must store the registers first.\n+              int[] regInList = new int[listLength];\n+              for (int listIndex = 0; listIndex < listLength; listIndex++) {\n+                regInList[listIndex] = ((Long) statements.get(idx + 1 + listIndex)).intValue();\n+              }\n+\n+              // Replace register number by POPRs. Be careful, we flip the list order!", "originalCommit": "1908def4919131c41cb4ef3855e8fe9e3ca5f24b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ4NzgxNQ==", "url": "https://github.com/senx/warp10-platform/pull/810#discussion_r464487815", "bodyText": "Good question, I didn't think about this case.\nTurns out\n  1 2 3 [ 1 2 2 ] STORE\n  2 LOAD\n\nLeaves 2 on the stack as STORE iterates through the array backwards poping and storing. So the behavior is the same with or without ASREGS.\nHowever there is an other bug, I'm investigating.", "author": "ftence", "createdAt": "2020-08-03T15:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3NTg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0MzMxMA==", "url": "https://github.com/senx/warp10-platform/pull/810#discussion_r464543310", "bodyText": "I think we should consider fixing STORE in the process, 1 2 3 [ 1 2 2 ] STORE should really leave 3 in register 2, at least that is what would be expected.", "author": "hbs", "createdAt": "2020-08-03T17:04:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3NTg1OA=="}], "type": "inlineReview", "revised_code": {"commit": "53c3ef8fc9de140388ba455eb0e2305b821525fd", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/functions/ASREGS.java b/warp10/src/main/java/io/warp10/script/functions/ASREGS.java\nindex 58ef0396..bdb31bbe 100644\n--- a/warp10/src/main/java/io/warp10/script/functions/ASREGS.java\n+++ b/warp10/src/main/java/io/warp10/script/functions/ASREGS.java\n\n@@ -242,41 +241,72 @@ public class ASREGS extends NamedWarpScriptFunction implements WarpScriptStackFu\n             }\n           } else if (symbol instanceof ENDLIST) {\n             int idx = i - 2;\n-            int nbOfReg = 0; // Keeps track of the number of registers in this list\n+            int nbOfRegOrNull = 0; // Keeps track of the number of registers or nulls in this list\n             while (idx >= 0 && !(statements.get(idx) instanceof MARK)) {\n               Object stmt = statements.get(idx);\n               if (stmt instanceof String) {\n                 Integer regno = varregs.get(stmt);\n                 if (null != regno) {\n                   statements.set(idx, (long) regno);\n-                  nbOfReg++;\n+                  nbOfRegOrNull++;\n                 }\n-              } else if (stmt instanceof Long) {\n-                nbOfReg++;\n+              } else if (stmt instanceof Long || stmt instanceof NULL) {\n+                nbOfRegOrNull++;\n               }\n               idx--;\n             }\n \n-            // Further optimization: if the list contains only registers, replace by POPRs which is much faster.\n-            // For instance, replace [ 3 7 9 ] STORE by NOOP POPR9 POPR7 POPR3 NOOP NOOP.\n+            // Further optimization: if the list contains only registers or nulls, replace by POPRs or DROP\n+            // which are much faster.\n+            // For instance, replace [ 3 7 NULL 9 ] STORE by NOOP POPR9 DROP POPR7 POPR3 NOOP NOOP.\n             int listLength = i - idx - 2;\n-            if (nbOfReg == listLength) {\n+            if (nbOfRegOrNull == listLength) {\n               statements.set(idx, NOOP); // replace MARK\n               statements.set(i - 1, NOOP); // replace ENDLIST\n               statements.set(i, NOOP); // replace STORE\n \n+              // Set of register numbers to detect duplicates.\n+              HashSet<Integer> regset = new HashSet<Integer>(listLength);\n+\n               // As we must flip the order of the list, we must store the registers first.\n               int[] regInList = new int[listLength];\n-              for (int listIndex = 0; listIndex < listLength; listIndex++) {\n-                regInList[listIndex] = ((Long) statements.get(idx + 1 + listIndex)).intValue();\n+              for (int listIndex = listLength - 1; listIndex >= 0; listIndex--) {\n+                Object stmt = statements.get(idx + 1 + listIndex);\n+                if(stmt instanceof Long) {\n+                  int regno = ((Long)stmt).intValue();\n+                  if(regset.add(regno)) {\n+                    regInList[listIndex] = regno;\n+                  } else {\n+                    // The register is already used after in this list so we ignore this one, it will be\n+                    // replaced with a DROP.\n+                    regInList[listIndex] = - 1;\n+                  }\n+                } else {\n+                  regInList[listIndex] = - 1; // NULL\n+                }\n               }\n \n+              // DROP used for NULL or duplicate registers.\n+              // [ 1 1 ] STORE will be replaced by POPR1 DROP\n+              DROP drop = new DROP(\"DROP\");\n+\n               // Replace register number by POPRs. Be careful, we flip the list order!\n               for (int listIndex = 0; listIndex < listLength; listIndex++) {\n-                statements.set(i - 2 - listIndex, regfuncs[regInList[listIndex] + numregs]);\n+                int regno = regInList[listIndex];\n+                if (regno < 0) {\n+                  statements.set(i - 2 - listIndex, drop);\n+                } else {\n+                  POPR popr = POPRs.computeIfAbsent(regInList[listIndex], r -> new POPR(\"POPR\" + r, r));\n+                  statements.set(i - 2 - listIndex, popr);\n+                }\n               }\n             }\n-          } else if (!(symbol instanceof Long)) {\n+          } else if (symbol instanceof Long) {\n+            // Also optimize STORE on a long with POPR which is much faster\n+            statements.set(i - 1, NOOP);\n+            POPR popr = POPRs.computeIfAbsent(((Long) symbol).intValue(), r -> new POPR(\"POPR\" + r, r));\n+            statements.set(i, popr);\n+          } else {\n             abort = true;\n             break;\n           }\n"}}, {"oid": "bd0961c7d3389d6ab21756ae9474a1ac8e8b3620", "url": "https://github.com/senx/warp10-platform/commit/bd0961c7d3389d6ab21756ae9474a1ac8e8b3620", "message": "Fix STORE on a list with duplicate symbols", "committedDate": "2020-08-04T10:18:59Z", "type": "commit"}, {"oid": "53c3ef8fc9de140388ba455eb0e2305b821525fd", "url": "https://github.com/senx/warp10-platform/commit/53c3ef8fc9de140388ba455eb0e2305b821525fd", "message": "More optimizations for ASREGS to convert STORE/CSTORE/LOAD on LONG to equivalent register function", "committedDate": "2020-08-04T10:21:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1NTY0MQ==", "url": "https://github.com/senx/warp10-platform/pull/810#discussion_r464955641", "bodyText": "Use get(n) in the loop then a dropn instead of calling popn which will allocate a new array.", "author": "hbs", "createdAt": "2020-08-04T10:31:29Z", "path": "warp10/src/main/java/io/warp10/script/functions/STORE.java", "diffHunk": "@@ -56,19 +56,22 @@ public Object apply(WarpScriptStack stack) throws WarpScriptException {\n     }\n     \n     if (count > 0) {\n-      for (int i = count - 1; i >= 0; i--) {\n+      Object[] objectsToStore = stack.popn(count);", "originalCommit": "53c3ef8fc9de140388ba455eb0e2305b821525fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b58a7721384657b0aeb276491a2c45e3de55e7cd", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/functions/STORE.java b/warp10/src/main/java/io/warp10/script/functions/STORE.java\nindex 2fbca7ba..7f931f5a 100644\n--- a/warp10/src/main/java/io/warp10/script/functions/STORE.java\n+++ b/warp10/src/main/java/io/warp10/script/functions/STORE.java\n\n@@ -56,8 +56,6 @@ public class STORE extends NamedWarpScriptFunction implements WarpScriptStackFun\n     }\n     \n     if (count > 0) {\n-      Object[] objectsToStore = stack.popn(count);\n-\n       // Iterate from first to last symbol to make sure\n       // 1 2 3 [ 'a' 'b' 'b' ] STORE $b\n       // pushes 3\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk1NzA0Nw==", "url": "https://github.com/senx/warp10-platform/pull/810#discussion_r464957047", "bodyText": "Use a static set of maps instead of per call maps.", "author": "hbs", "createdAt": "2020-08-04T10:34:22Z", "path": "warp10/src/main/java/io/warp10/script/functions/ASREGS.java", "diffHunk": "@@ -177,22 +175,16 @@ public Object apply(WarpScriptStack stack) throws WarpScriptException {\n       }\n       \n       if (null == varregs.get(v.toString())) {\n-        regidx = inuse.nextClearBit(0);\n+        int regidx = inuse.nextClearBit(0);\n         inuse.set(regidx);\n         varregs.put(v.toString(), regidx);\n       }\n-    }    \n+    }\n \n-    numregs = regidx + 1;\n+    HashMap<Integer, PUSHR> PUSHRs = new HashMap<Integer, PUSHR>();", "originalCommit": "53c3ef8fc9de140388ba455eb0e2305b821525fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "360fe232777cd93ea372fa2b0ab69f5d5284816b", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/functions/ASREGS.java b/warp10/src/main/java/io/warp10/script/functions/ASREGS.java\nindex bdb31bbe..f534a939 100644\n--- a/warp10/src/main/java/io/warp10/script/functions/ASREGS.java\n+++ b/warp10/src/main/java/io/warp10/script/functions/ASREGS.java\n\n@@ -181,10 +190,6 @@ public class ASREGS extends NamedWarpScriptFunction implements WarpScriptStackFu\n       }\n     }\n \n-    HashMap<Integer, PUSHR> PUSHRs = new HashMap<Integer, PUSHR>();\n-    HashMap<Integer, POPR> POPRs = new HashMap<Integer, POPR>();\n-    HashMap<Integer, POPR> CPOPRs = new HashMap<Integer, POPR>();\n-\n     //\n     // Now loop over the macro statement, replacing occurrences of X LOAD and X STORE by the use\n     // of the assigned register\n"}}, {"oid": "b58a7721384657b0aeb276491a2c45e3de55e7cd", "url": "https://github.com/senx/warp10-platform/commit/b58a7721384657b0aeb276491a2c45e3de55e7cd", "message": "Use get and dropn instead of popn", "committedDate": "2020-08-04T12:28:58Z", "type": "commit"}, {"oid": "360fe232777cd93ea372fa2b0ab69f5d5284816b", "url": "https://github.com/senx/warp10-platform/commit/360fe232777cd93ea372fa2b0ab69f5d5284816b", "message": "Use static instance for DROP and register functions, fix CPOPR, comments", "committedDate": "2020-08-04T12:33:19Z", "type": "commit"}]}