{"pr_number": 769, "pr_title": "Refactored Accelerator Config for WarpScript lib compatibility", "pr_createdAt": "2020-05-27T09:34:20Z", "pr_url": "https://github.com/senx/warp10-platform/pull/769", "timeline": [{"oid": "96b8866ee9d3c86265a6b85dec2ff08962a73d97", "url": "https://github.com/senx/warp10-platform/commit/96b8866ee9d3c86265a6b85dec2ff08962a73d97", "message": "Refactored Accelerator Config for WarpScript lib compatibility", "committedDate": "2020-05-27T09:33:52Z", "type": "commit"}, {"oid": "571364dc56c15762e4154fc2c3ffb232b9c750af", "url": "https://github.com/senx/warp10-platform/commit/571364dc56c15762e4154fc2c3ffb232b9c750af", "message": "Initial commit of AcceleratorConfig", "committedDate": "2020-05-27T10:42:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEzNDQ3MA==", "url": "https://github.com/senx/warp10-platform/pull/769#discussion_r431134470", "bodyText": "return chunkCount", "author": "ftence", "createdAt": "2020-05-27T13:34:14Z", "path": "warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java", "diffHunk": "@@ -0,0 +1,145 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.standalone;\n+\n+public class AcceleratorConfig {\n+\n+  static boolean defaultWriteNocache = false;\n+  static boolean defaultWriteNopersist = false;\n+  static boolean defaultDeleteNocache = false;\n+  static boolean defaultDeleteNopersist = false;\n+  static boolean defaultReadNocache = false;\n+  static boolean defaultReadNopersist = false;\n+  \n+  private static int chunkCount = 0;\n+  private static long chunkSpan = 0L;\n+  \n+  /**\n+   * Is the Accelerator on (configured) or not\n+   */\n+  private static boolean instantiated = false;\n+  \n+  /**\n+   * Was the last FETCH accelerated for the given Thread?\n+   */\n+  static final ThreadLocal<Boolean> accelerated = new ThreadLocal<Boolean>() {\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    };\n+  };\n+  static final ThreadLocal<Boolean> nocache = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  static final ThreadLocal<Boolean> nopersist = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  public static final boolean getDefaultReadNocache() {\n+    return defaultReadNocache;\n+  }\n+  public static final boolean getDefaultReadNopersist() {\n+    return defaultReadNopersist;\n+  }\n+  public static final boolean getDefaultWriteNocache() {\n+    return defaultWriteNocache;\n+  }\n+  public static final boolean getDefaultWriteNopersist() {\n+    return defaultWriteNopersist;\n+  }\n+  public static final boolean getDefaultDeleteNocache() {\n+    return defaultDeleteNocache;\n+  }\n+  public static final boolean getDefaultDeleteNopersist() {\n+    return defaultDeleteNopersist;\n+  }\n+\n+  public static void instantiated() {\n+    instantiated = true;\n+  }\n+\n+  public static final void nocache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.TRUE);\n+    }\n+  }\n+  public static final void cache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.FALSE);\n+    }\n+  }\n+  public static final void nopersist() {\n+    if (instantiated) {\n+      nopersist.set(Boolean.TRUE);\n+    }\n+  }\n+  public static final void persist() {\n+    if (instantiated) {   \n+      nopersist.set(Boolean.FALSE);\n+    }\n+  }\n+  public static final boolean isCache() {\n+    if (instantiated) {\n+      return !nocache.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+  public static final boolean isPersist() {\n+    if (instantiated) {\n+      return !nopersist.get();\n+    } else {\n+      return true;\n+    }\n+  }\n+  public static final boolean accelerated() {\n+    if (instantiated) {\n+      return accelerated.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+  public static final String ATTR_NOCACHE = \"accel.nocache\";\n+  public static final String ATTR_NOPERSIST = \"accel.nopersist\";\n+  \n+  public static final boolean isInstantiated() {\n+    return instantiated;\n+  }\n+  \n+  public static void setChunkCount(int count) {\n+    chunkCount = count;\n+  }\n+  \n+  public static void setChunkSpan(long span) {\n+    chunkSpan = span;\n+  }\n+  public static int getChunkCount() {\n+    return 0;", "originalCommit": "571364dc56c15762e4154fc2c3ffb232b9c750af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "367e49f8e0409245e89f4b3289f09a0d11c979c1", "chunk": "diff --git a/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java b/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java\nindex 2688727b..fb2d6e20 100644\n--- a/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java\n+++ b/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java\n\n@@ -18,6 +18,14 @@ package io.warp10.standalone;\n \n public class AcceleratorConfig {\n \n+  public static final String ATTR_NOCACHE = \"accel.nocache\";\n+  public static final String ATTR_NOPERSIST = \"accel.nopersist\";\n+  public static final String NOCACHE = \"nocache\";\n+  public static final String NOPERSIST = \"nopersist\";\n+  public static final String CACHE = \"cache\";\n+  public static final String PERSIST = \"persist\";\n+  public static final String ACCELERATOR_HEADER = \"X-Warp10-Accelerator\";\n+\n   static boolean defaultWriteNocache = false;\n   static boolean defaultWriteNopersist = false;\n   static boolean defaultDeleteNocache = false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEzNDU3NA==", "url": "https://github.com/senx/warp10-platform/pull/769#discussion_r431134574", "bodyText": "return chunkSpan", "author": "ftence", "createdAt": "2020-05-27T13:34:24Z", "path": "warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java", "diffHunk": "@@ -0,0 +1,145 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.standalone;\n+\n+public class AcceleratorConfig {\n+\n+  static boolean defaultWriteNocache = false;\n+  static boolean defaultWriteNopersist = false;\n+  static boolean defaultDeleteNocache = false;\n+  static boolean defaultDeleteNopersist = false;\n+  static boolean defaultReadNocache = false;\n+  static boolean defaultReadNopersist = false;\n+  \n+  private static int chunkCount = 0;\n+  private static long chunkSpan = 0L;\n+  \n+  /**\n+   * Is the Accelerator on (configured) or not\n+   */\n+  private static boolean instantiated = false;\n+  \n+  /**\n+   * Was the last FETCH accelerated for the given Thread?\n+   */\n+  static final ThreadLocal<Boolean> accelerated = new ThreadLocal<Boolean>() {\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    };\n+  };\n+  static final ThreadLocal<Boolean> nocache = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  static final ThreadLocal<Boolean> nopersist = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  public static final boolean getDefaultReadNocache() {\n+    return defaultReadNocache;\n+  }\n+  public static final boolean getDefaultReadNopersist() {\n+    return defaultReadNopersist;\n+  }\n+  public static final boolean getDefaultWriteNocache() {\n+    return defaultWriteNocache;\n+  }\n+  public static final boolean getDefaultWriteNopersist() {\n+    return defaultWriteNopersist;\n+  }\n+  public static final boolean getDefaultDeleteNocache() {\n+    return defaultDeleteNocache;\n+  }\n+  public static final boolean getDefaultDeleteNopersist() {\n+    return defaultDeleteNopersist;\n+  }\n+\n+  public static void instantiated() {\n+    instantiated = true;\n+  }\n+\n+  public static final void nocache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.TRUE);\n+    }\n+  }\n+  public static final void cache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.FALSE);\n+    }\n+  }\n+  public static final void nopersist() {\n+    if (instantiated) {\n+      nopersist.set(Boolean.TRUE);\n+    }\n+  }\n+  public static final void persist() {\n+    if (instantiated) {   \n+      nopersist.set(Boolean.FALSE);\n+    }\n+  }\n+  public static final boolean isCache() {\n+    if (instantiated) {\n+      return !nocache.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+  public static final boolean isPersist() {\n+    if (instantiated) {\n+      return !nopersist.get();\n+    } else {\n+      return true;\n+    }\n+  }\n+  public static final boolean accelerated() {\n+    if (instantiated) {\n+      return accelerated.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+  public static final String ATTR_NOCACHE = \"accel.nocache\";\n+  public static final String ATTR_NOPERSIST = \"accel.nopersist\";\n+  \n+  public static final boolean isInstantiated() {\n+    return instantiated;\n+  }\n+  \n+  public static void setChunkCount(int count) {\n+    chunkCount = count;\n+  }\n+  \n+  public static void setChunkSpan(long span) {\n+    chunkSpan = span;\n+  }\n+  public static int getChunkCount() {\n+    return 0;\n+  }\n+  public static long getChunkSpan() {\n+    return 0L;", "originalCommit": "571364dc56c15762e4154fc2c3ffb232b9c750af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "367e49f8e0409245e89f4b3289f09a0d11c979c1", "chunk": "diff --git a/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java b/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java\nindex 2688727b..fb2d6e20 100644\n--- a/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java\n+++ b/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java\n\n@@ -18,6 +18,14 @@ package io.warp10.standalone;\n \n public class AcceleratorConfig {\n \n+  public static final String ATTR_NOCACHE = \"accel.nocache\";\n+  public static final String ATTR_NOPERSIST = \"accel.nopersist\";\n+  public static final String NOCACHE = \"nocache\";\n+  public static final String NOPERSIST = \"nopersist\";\n+  public static final String CACHE = \"cache\";\n+  public static final String PERSIST = \"persist\";\n+  public static final String ACCELERATOR_HEADER = \"X-Warp10-Accelerator\";\n+\n   static boolean defaultWriteNocache = false;\n   static boolean defaultWriteNopersist = false;\n   static boolean defaultDeleteNocache = false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0MTgwOA==", "url": "https://github.com/senx/warp10-platform/pull/769#discussion_r431141808", "bodyText": "I would have put these constant as the beginning of the class.", "author": "ftence", "createdAt": "2020-05-27T13:44:17Z", "path": "warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java", "diffHunk": "@@ -0,0 +1,145 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.standalone;\n+\n+public class AcceleratorConfig {\n+\n+  static boolean defaultWriteNocache = false;\n+  static boolean defaultWriteNopersist = false;\n+  static boolean defaultDeleteNocache = false;\n+  static boolean defaultDeleteNopersist = false;\n+  static boolean defaultReadNocache = false;\n+  static boolean defaultReadNopersist = false;\n+  \n+  private static int chunkCount = 0;\n+  private static long chunkSpan = 0L;\n+  \n+  /**\n+   * Is the Accelerator on (configured) or not\n+   */\n+  private static boolean instantiated = false;\n+  \n+  /**\n+   * Was the last FETCH accelerated for the given Thread?\n+   */\n+  static final ThreadLocal<Boolean> accelerated = new ThreadLocal<Boolean>() {\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    };\n+  };\n+  static final ThreadLocal<Boolean> nocache = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  static final ThreadLocal<Boolean> nopersist = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  public static final boolean getDefaultReadNocache() {\n+    return defaultReadNocache;\n+  }\n+  public static final boolean getDefaultReadNopersist() {\n+    return defaultReadNopersist;\n+  }\n+  public static final boolean getDefaultWriteNocache() {\n+    return defaultWriteNocache;\n+  }\n+  public static final boolean getDefaultWriteNopersist() {\n+    return defaultWriteNopersist;\n+  }\n+  public static final boolean getDefaultDeleteNocache() {\n+    return defaultDeleteNocache;\n+  }\n+  public static final boolean getDefaultDeleteNopersist() {\n+    return defaultDeleteNopersist;\n+  }\n+\n+  public static void instantiated() {\n+    instantiated = true;\n+  }\n+\n+  public static final void nocache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.TRUE);\n+    }\n+  }\n+  public static final void cache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.FALSE);\n+    }\n+  }\n+  public static final void nopersist() {\n+    if (instantiated) {\n+      nopersist.set(Boolean.TRUE);\n+    }\n+  }\n+  public static final void persist() {\n+    if (instantiated) {   \n+      nopersist.set(Boolean.FALSE);\n+    }\n+  }\n+  public static final boolean isCache() {\n+    if (instantiated) {\n+      return !nocache.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+  public static final boolean isPersist() {\n+    if (instantiated) {\n+      return !nopersist.get();\n+    } else {\n+      return true;\n+    }\n+  }\n+  public static final boolean accelerated() {\n+    if (instantiated) {\n+      return accelerated.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+  public static final String ATTR_NOCACHE = \"accel.nocache\";\n+  public static final String ATTR_NOPERSIST = \"accel.nopersist\";\n+  \n+  public static final boolean isInstantiated() {\n+    return instantiated;\n+  }\n+  \n+  public static void setChunkCount(int count) {\n+    chunkCount = count;\n+  }\n+  \n+  public static void setChunkSpan(long span) {\n+    chunkSpan = span;\n+  }\n+  public static int getChunkCount() {\n+    return 0;\n+  }\n+  public static long getChunkSpan() {\n+    return 0L;\n+  }\n+  public static final String NOCACHE = \"nocache\";\n+  public static final String NOPERSIST = \"nopersist\";\n+  public static final String CACHE = \"cache\";\n+  public static final String PERSIST = \"persist\";\n+  public static final String ACCELERATOR_HEADER = \"X-Warp10-Accelerator\";", "originalCommit": "571364dc56c15762e4154fc2c3ffb232b9c750af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "367e49f8e0409245e89f4b3289f09a0d11c979c1", "chunk": "diff --git a/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java b/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java\nindex 2688727b..fb2d6e20 100644\n--- a/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java\n+++ b/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java\n\n@@ -18,6 +18,14 @@ package io.warp10.standalone;\n \n public class AcceleratorConfig {\n \n+  public static final String ATTR_NOCACHE = \"accel.nocache\";\n+  public static final String ATTR_NOPERSIST = \"accel.nopersist\";\n+  public static final String NOCACHE = \"nocache\";\n+  public static final String NOPERSIST = \"nopersist\";\n+  public static final String CACHE = \"cache\";\n+  public static final String PERSIST = \"persist\";\n+  public static final String ACCELERATOR_HEADER = \"X-Warp10-Accelerator\";\n+\n   static boolean defaultWriteNocache = false;\n   static boolean defaultWriteNopersist = false;\n   static boolean defaultDeleteNocache = false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0MTg5NA==", "url": "https://github.com/senx/warp10-platform/pull/769#discussion_r431141894", "bodyText": "I would have put these constant as the beginning of the class.", "author": "ftence", "createdAt": "2020-05-27T13:44:25Z", "path": "warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java", "diffHunk": "@@ -0,0 +1,145 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.standalone;\n+\n+public class AcceleratorConfig {\n+\n+  static boolean defaultWriteNocache = false;\n+  static boolean defaultWriteNopersist = false;\n+  static boolean defaultDeleteNocache = false;\n+  static boolean defaultDeleteNopersist = false;\n+  static boolean defaultReadNocache = false;\n+  static boolean defaultReadNopersist = false;\n+  \n+  private static int chunkCount = 0;\n+  private static long chunkSpan = 0L;\n+  \n+  /**\n+   * Is the Accelerator on (configured) or not\n+   */\n+  private static boolean instantiated = false;\n+  \n+  /**\n+   * Was the last FETCH accelerated for the given Thread?\n+   */\n+  static final ThreadLocal<Boolean> accelerated = new ThreadLocal<Boolean>() {\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    };\n+  };\n+  static final ThreadLocal<Boolean> nocache = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  static final ThreadLocal<Boolean> nopersist = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  public static final boolean getDefaultReadNocache() {\n+    return defaultReadNocache;\n+  }\n+  public static final boolean getDefaultReadNopersist() {\n+    return defaultReadNopersist;\n+  }\n+  public static final boolean getDefaultWriteNocache() {\n+    return defaultWriteNocache;\n+  }\n+  public static final boolean getDefaultWriteNopersist() {\n+    return defaultWriteNopersist;\n+  }\n+  public static final boolean getDefaultDeleteNocache() {\n+    return defaultDeleteNocache;\n+  }\n+  public static final boolean getDefaultDeleteNopersist() {\n+    return defaultDeleteNopersist;\n+  }\n+\n+  public static void instantiated() {\n+    instantiated = true;\n+  }\n+\n+  public static final void nocache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.TRUE);\n+    }\n+  }\n+  public static final void cache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.FALSE);\n+    }\n+  }\n+  public static final void nopersist() {\n+    if (instantiated) {\n+      nopersist.set(Boolean.TRUE);\n+    }\n+  }\n+  public static final void persist() {\n+    if (instantiated) {   \n+      nopersist.set(Boolean.FALSE);\n+    }\n+  }\n+  public static final boolean isCache() {\n+    if (instantiated) {\n+      return !nocache.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+  public static final boolean isPersist() {\n+    if (instantiated) {\n+      return !nopersist.get();\n+    } else {\n+      return true;\n+    }\n+  }\n+  public static final boolean accelerated() {\n+    if (instantiated) {\n+      return accelerated.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+  public static final String ATTR_NOCACHE = \"accel.nocache\";\n+  public static final String ATTR_NOPERSIST = \"accel.nopersist\";", "originalCommit": "571364dc56c15762e4154fc2c3ffb232b9c750af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "367e49f8e0409245e89f4b3289f09a0d11c979c1", "chunk": "diff --git a/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java b/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java\nindex 2688727b..fb2d6e20 100644\n--- a/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java\n+++ b/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java\n\n@@ -18,6 +18,14 @@ package io.warp10.standalone;\n \n public class AcceleratorConfig {\n \n+  public static final String ATTR_NOCACHE = \"accel.nocache\";\n+  public static final String ATTR_NOPERSIST = \"accel.nopersist\";\n+  public static final String NOCACHE = \"nocache\";\n+  public static final String NOPERSIST = \"nopersist\";\n+  public static final String CACHE = \"cache\";\n+  public static final String PERSIST = \"persist\";\n+  public static final String ACCELERATOR_HEADER = \"X-Warp10-Accelerator\";\n+\n   static boolean defaultWriteNocache = false;\n   static boolean defaultWriteNopersist = false;\n   static boolean defaultDeleteNocache = false;\n"}}, {"oid": "367e49f8e0409245e89f4b3289f09a0d11c979c1", "url": "https://github.com/senx/warp10-platform/commit/367e49f8e0409245e89f4b3289f09a0d11c979c1", "message": "Addressed PR comments", "committedDate": "2020-05-27T14:15:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3NjM3OQ==", "url": "https://github.com/senx/warp10-platform/pull/769#discussion_r431176379", "bodyText": "A an empty line between these methods.", "author": "ftence", "createdAt": "2020-05-27T14:28:42Z", "path": "warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java", "diffHunk": "@@ -0,0 +1,159 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.standalone;\n+\n+public class AcceleratorConfig {\n+\n+  public static final String ATTR_NOCACHE = \"accel.nocache\";\n+  public static final String ATTR_NOPERSIST = \"accel.nopersist\";\n+  public static final String NOCACHE = \"nocache\";\n+  public static final String NOPERSIST = \"nopersist\";\n+  public static final String CACHE = \"cache\";\n+  public static final String PERSIST = \"persist\";\n+  public static final String ACCELERATOR_HEADER = \"X-Warp10-Accelerator\";\n+\n+  static boolean defaultWriteNocache = false;\n+  static boolean defaultWriteNopersist = false;\n+  static boolean defaultDeleteNocache = false;\n+  static boolean defaultDeleteNopersist = false;\n+  static boolean defaultReadNocache = false;\n+  static boolean defaultReadNopersist = false;\n+  \n+  private static int chunkCount = 0;\n+  private static long chunkSpan = 0L;\n+  \n+  /**\n+   * Is the Accelerator on (configured) or not\n+   */\n+  private static boolean instantiated = false;\n+  \n+  /**\n+   * Was the last FETCH accelerated for the given Thread?\n+   */\n+  static final ThreadLocal<Boolean> accelerated = new ThreadLocal<Boolean>() {\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    };\n+  };\n+  \n+  static final ThreadLocal<Boolean> nocache = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  \n+  static final ThreadLocal<Boolean> nopersist = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  \n+  public static final boolean getDefaultReadNocache() {\n+    return defaultReadNocache;\n+  }\n+  \n+  public static final boolean getDefaultReadNopersist() {\n+    return defaultReadNopersist;\n+  }\n+  public static final boolean getDefaultWriteNocache() {\n+    return defaultWriteNocache;\n+  }\n+  \n+  public static final boolean getDefaultWriteNopersist() {\n+    return defaultWriteNopersist;\n+  }\n+  \n+  public static final boolean getDefaultDeleteNocache() {\n+    return defaultDeleteNocache;\n+  }\n+  \n+  public static final boolean getDefaultDeleteNopersist() {\n+    return defaultDeleteNopersist;\n+  }\n+\n+  public static void instantiated() {\n+    instantiated = true;\n+  }\n+\n+  public static final void nocache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.TRUE);\n+    }\n+  }\n+  \n+  public static final void cache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.FALSE);\n+    }\n+  }\n+  \n+  public static final void nopersist() {\n+    if (instantiated) {\n+      nopersist.set(Boolean.TRUE);\n+    }\n+  }\n+  public static final void persist() {", "originalCommit": "367e49f8e0409245e89f4b3289f09a0d11c979c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "30d0b2780d5df86be085c7157c3ad479eafd2638", "chunk": "diff --git a/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java b/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java\nindex fb2d6e20..1e59cb58 100644\n--- a/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java\n+++ b/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java\n\n@@ -108,6 +108,7 @@ public class AcceleratorConfig {\n       nopersist.set(Boolean.TRUE);\n     }\n   }\n+  \n   public static final void persist() {\n     if (instantiated) {   \n       nopersist.set(Boolean.FALSE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3NjYzNA==", "url": "https://github.com/senx/warp10-platform/pull/769#discussion_r431176634", "bodyText": "A an empty line between these methods.", "author": "ftence", "createdAt": "2020-05-27T14:28:53Z", "path": "warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java", "diffHunk": "@@ -0,0 +1,159 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.standalone;\n+\n+public class AcceleratorConfig {\n+\n+  public static final String ATTR_NOCACHE = \"accel.nocache\";\n+  public static final String ATTR_NOPERSIST = \"accel.nopersist\";\n+  public static final String NOCACHE = \"nocache\";\n+  public static final String NOPERSIST = \"nopersist\";\n+  public static final String CACHE = \"cache\";\n+  public static final String PERSIST = \"persist\";\n+  public static final String ACCELERATOR_HEADER = \"X-Warp10-Accelerator\";\n+\n+  static boolean defaultWriteNocache = false;\n+  static boolean defaultWriteNopersist = false;\n+  static boolean defaultDeleteNocache = false;\n+  static boolean defaultDeleteNopersist = false;\n+  static boolean defaultReadNocache = false;\n+  static boolean defaultReadNopersist = false;\n+  \n+  private static int chunkCount = 0;\n+  private static long chunkSpan = 0L;\n+  \n+  /**\n+   * Is the Accelerator on (configured) or not\n+   */\n+  private static boolean instantiated = false;\n+  \n+  /**\n+   * Was the last FETCH accelerated for the given Thread?\n+   */\n+  static final ThreadLocal<Boolean> accelerated = new ThreadLocal<Boolean>() {\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    };\n+  };\n+  \n+  static final ThreadLocal<Boolean> nocache = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  \n+  static final ThreadLocal<Boolean> nopersist = new ThreadLocal<Boolean>() {\n+    @Override\n+    protected Boolean initialValue() {\n+      return Boolean.FALSE;\n+    }\n+  };\n+  \n+  public static final boolean getDefaultReadNocache() {\n+    return defaultReadNocache;\n+  }\n+  \n+  public static final boolean getDefaultReadNopersist() {\n+    return defaultReadNopersist;\n+  }\n+  public static final boolean getDefaultWriteNocache() {\n+    return defaultWriteNocache;\n+  }\n+  \n+  public static final boolean getDefaultWriteNopersist() {\n+    return defaultWriteNopersist;\n+  }\n+  \n+  public static final boolean getDefaultDeleteNocache() {\n+    return defaultDeleteNocache;\n+  }\n+  \n+  public static final boolean getDefaultDeleteNopersist() {\n+    return defaultDeleteNopersist;\n+  }\n+\n+  public static void instantiated() {\n+    instantiated = true;\n+  }\n+\n+  public static final void nocache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.TRUE);\n+    }\n+  }\n+  \n+  public static final void cache() {\n+    if (instantiated) {\n+      nocache.set(Boolean.FALSE);\n+    }\n+  }\n+  \n+  public static final void nopersist() {\n+    if (instantiated) {\n+      nopersist.set(Boolean.TRUE);\n+    }\n+  }\n+  public static final void persist() {\n+    if (instantiated) {   \n+      nopersist.set(Boolean.FALSE);\n+    }\n+  }\n+  \n+  public static final boolean isCache() {\n+    if (instantiated) {\n+      return !nocache.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+  \n+  public static final boolean isPersist() {\n+    if (instantiated) {\n+      return !nopersist.get();\n+    } else {\n+      return true;\n+    }\n+  }\n+  \n+  public static final boolean accelerated() {\n+    if (instantiated) {\n+      return accelerated.get();\n+    } else {\n+      return false;\n+    }\n+  }\n+  \n+  public static final boolean isInstantiated() {\n+    return instantiated;\n+  }\n+  \n+  public static void setChunkCount(int count) {\n+    chunkCount = count;\n+  }\n+  \n+  public static void setChunkSpan(long span) {\n+    chunkSpan = span;\n+  }\n+  \n+  public static int getChunkCount() {\n+    return chunkCount;\n+  }\n+  public static long getChunkSpan() {", "originalCommit": "367e49f8e0409245e89f4b3289f09a0d11c979c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "30d0b2780d5df86be085c7157c3ad479eafd2638", "chunk": "diff --git a/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java b/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java\nindex fb2d6e20..1e59cb58 100644\n--- a/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java\n+++ b/warp10/src/main/java/io/warp10/standalone/AcceleratorConfig.java\n\n@@ -108,6 +108,7 @@ public class AcceleratorConfig {\n       nopersist.set(Boolean.TRUE);\n     }\n   }\n+  \n   public static final void persist() {\n     if (instantiated) {   \n       nopersist.set(Boolean.FALSE);\n"}}, {"oid": "30d0b2780d5df86be085c7157c3ad479eafd2638", "url": "https://github.com/senx/warp10-platform/commit/30d0b2780d5df86be085c7157c3ad479eafd2638", "message": "Addressed PR comments", "committedDate": "2020-05-27T14:32:00Z", "type": "commit"}]}