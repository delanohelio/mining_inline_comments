{"pr_number": 796, "pr_title": "Added support for encoding iTXt PNG chunks", "pr_createdAt": "2020-07-22T15:11:55Z", "pr_url": "https://github.com/senx/warp10-platform/pull/796", "timeline": [{"oid": "654b51a6bb32076ad69b3757efcde58cd8a19b64", "url": "https://github.com/senx/warp10-platform/commit/654b51a6bb32076ad69b3757efcde58cd8a19b64", "message": "Added support for encoding iTXt PNG chunks", "committedDate": "2020-07-22T15:11:19Z", "type": "commit"}, {"oid": "eb3c4ac0ec3f431222ed8d1b70c3c1d4d64f7aa8", "url": "https://github.com/senx/warp10-platform/commit/eb3c4ac0ec3f431222ed8d1b70c3c1d4d64f7aa8", "message": "Fixed compression method", "committedDate": "2020-07-22T15:57:48Z", "type": "commit"}, {"oid": "3aea08221ca27c6e7cdbfb0201eec2f29828dc46", "url": "https://github.com/senx/warp10-platform/commit/3aea08221ca27c6e7cdbfb0201eec2f29828dc46", "message": "Added support of tEXt and zTXt chunks", "committedDate": "2020-07-23T13:26:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2ODc4NQ==", "url": "https://github.com/senx/warp10-platform/pull/796#discussion_r459468785", "bodyText": "Fix the message with tEXt and zEXt", "author": "pi-r-p", "createdAt": "2020-07-23T13:56:40Z", "path": "warp10/src/main/java/io/warp10/script/processing/Pencode.java", "diffHunk": "@@ -69,7 +80,73 @@ public Object apply(WarpScriptStack stack) throws WarpScriptException {\n     \n     try {\n       writer.setOutput(ImageIO.createImageOutputStream(output));\n-      writer.write(null, new IIOImage(bimage, null, null), param);\n+      \n+      IIOImage iioimage = new IIOImage(bimage, null, null);\n+      \n+      if (null != chunks) {\n+        PNGMetadata metadata = new PNGMetadata();\n+        \n+        for (Entry<Object,Object> entry: chunks.entrySet()) {\n+          if (\"tEXt\".equals(entry.getKey()) || \"zTXt\".equals(entry.getKey())) {\n+            boolean zTXt = \"zTXt\".equals(entry.getKey());\n+            Object chunklist = entry.getValue();\n+            \n+            if (!(chunklist instanceof List)) {\n+              throw new WarpScriptException(getName() + \" expects chunk type to be associated with a list of chunks.\");\n+            }\n+            \n+            for (Object chunkelt: (List<Object>) chunklist) {\n+              if (!(chunkelt instanceof Map)) {\n+                throw new WarpScriptException(getName() + \" expects iTXt chunks to be MAP instances.\");\n+              }\n+              Map<Object,Object> chunkmap = (Map<Object,Object>) chunkelt;\n+              \n+              if (chunkmap.get(\"keyword\") instanceof String && chunkmap.get(\"text\") instanceof String) {\n+                if (zTXt) {\n+                  metadata.zTXt_keyword.add((String) chunkmap.get(\"keyword\"));\n+                  metadata.zTXt_text.add((String) chunkmap.get(\"text\"));\n+                  metadata.zTXt_compressionMethod.add(0);\n+                } else {\n+                  metadata.tEXt_keyword.add((String) chunkmap.get(\"keyword\"));\n+                  metadata.tEXt_text.add((String) chunkmap.get(\"text\"));                  \n+                }\n+              } else {\n+                throw new WarpScriptException(getName() + \" tEXt chunks MUST contains 'keyword' and 'text' entries of type STRING.\");\n+              }\n+            }\n+          } else if (\"iTXt\".equals(entry.getKey())) {\n+            Object chunklist = entry.getValue();\n+            \n+            if (!(chunklist instanceof List)) {\n+              throw new WarpScriptException(getName() + \" expects chunk type to be associated with a list of chunks.\");\n+            }\n+            \n+            for (Object chunkelt: (List<Object>) chunklist) {\n+              if (!(chunkelt instanceof Map)) {\n+                throw new WarpScriptException(getName() + \" expects iTXt chunks to be MAP instances.\");\n+              }\n+              Map<Object,Object> chunkmap = (Map<Object,Object>) chunkelt;\n+              \n+              if (chunkmap.get(\"keyword\") instanceof String && chunkmap.get(\"text\") instanceof String) {\n+                metadata.iTXt_keyword.add((String) chunkmap.get(\"keyword\"));\n+                metadata.iTXt_text.add((String) chunkmap.get(\"text\"));\n+                metadata.iTXt_compressionFlag.add(Boolean.TRUE.equals(chunkmap.get(\"compressionFlag\")));\n+                // 0 is the only supported compression method (http://www.libpng.org/pub/png/spec/1.2/PNG-Chunks.html)\n+                metadata.iTXt_compressionMethod.add(0);\n+                metadata.iTXt_languageTag.add(chunkmap.getOrDefault(\"languageTag\", \"\").toString());\n+                metadata.iTXt_translatedKeyword.add(chunkmap.getOrDefault(\"translatedKeyword\", \"\").toString());\n+              } else {\n+                throw new WarpScriptException(getName() + \" iTXt chunks MUST contains 'keyword' and 'text' entries of type STRING.\");\n+              }\n+            }\n+          } else {\n+            throw new WarpScriptException(getName() + \" only 'iTXt' chunks can be specified.\");\n+          }", "originalCommit": "3aea08221ca27c6e7cdbfb0201eec2f29828dc46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2301ea4e5bb8e6c5d4546d0346f8cac435d07fcd", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/processing/Pencode.java b/warp10/src/main/java/io/warp10/script/processing/Pencode.java\nindex 68fed0a5..7f6fa8fd 100644\n--- a/warp10/src/main/java/io/warp10/script/processing/Pencode.java\n+++ b/warp10/src/main/java/io/warp10/script/processing/Pencode.java\n\n@@ -97,7 +97,7 @@ public class Pencode extends NamedWarpScriptFunction implements WarpScriptStackF\n             \n             for (Object chunkelt: (List<Object>) chunklist) {\n               if (!(chunkelt instanceof Map)) {\n-                throw new WarpScriptException(getName() + \" expects iTXt chunks to be MAP instances.\");\n+                throw new WarpScriptException(getName() + \" expects tEXt and zTXt chunks to be MAP instances.\");\n               }\n               Map<Object,Object> chunkmap = (Map<Object,Object>) chunkelt;\n               \n"}}, {"oid": "2301ea4e5bb8e6c5d4546d0346f8cac435d07fcd", "url": "https://github.com/senx/warp10-platform/commit/2301ea4e5bb8e6c5d4546d0346f8cac435d07fcd", "message": "Fixed messages", "committedDate": "2020-07-23T14:06:47Z", "type": "commit"}]}