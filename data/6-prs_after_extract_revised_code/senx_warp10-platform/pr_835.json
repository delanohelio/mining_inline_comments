{"pr_number": 835, "pr_title": "Initial commit of mapper.geo.fence, added constants for geo mappers", "pr_createdAt": "2020-09-18T10:04:02Z", "pr_url": "https://github.com/senx/warp10-platform/pull/835", "timeline": [{"oid": "a4a71d9b39a4146b0123996933a34d1035603753", "url": "https://github.com/senx/warp10-platform/commit/a4a71d9b39a4146b0123996933a34d1035603753", "message": "Initial commit of mapper.geo.fence, added constants for geo mappers", "committedDate": "2020-09-18T07:45:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk2NTc1Ng==", "url": "https://github.com/senx/warp10-platform/pull/835#discussion_r491965756", "bodyText": "The comment does not match the code.\nOn top of that, I'm not sure returning false for GeoTimeSerie.NO_LOCATION is what most users expect. I'd rather return null for no location.", "author": "ftence", "createdAt": "2020-09-21T11:22:27Z", "path": "warp10/src/main/java/io/warp10/script/mapper/MapperGeoFence.java", "diffHunk": "@@ -0,0 +1,107 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.mapper;\n+\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.StackUtils;\n+import io.warp10.script.WarpScriptLib;\n+import io.warp10.script.WarpScriptMapperFunction;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.functions.GEOPACK;\n+\n+import com.geoxp.GeoXPLib;\n+import com.geoxp.GeoXPLib.GeoXPShape;\n+\n+/**\n+ * Mapper which returns true or false whether a point location falls within or outside a given GeoShape.\n+ */\n+public class MapperGeoFence extends NamedWarpScriptFunction implements WarpScriptMapperFunction {\n+  \n+  public static class Builder extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+    \n+    public Builder(String name) {\n+      super(name);\n+    }\n+    \n+    @Override\n+    public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+      Object shape = stack.pop();\n+      \n+      if (!(shape instanceof GeoXPShape)) {\n+        throw new WarpScriptException(getName() + \" expects a Geo Shape.\");\n+      }\n+      \n+      stack.push(new MapperGeoFence(getName(), (GeoXPShape) shape));\n+      return stack;\n+    }\n+  }\n+\n+  private final GeoXPShape shape;\n+  \n+  /**\n+   * Default constructor, the timezone will be UTC\n+   */\n+  public MapperGeoFence(String name, GeoXPShape shape) {\n+    super(name);\n+    this.shape = shape;\n+  }\n+  \n+  @Override\n+  public Object apply(Object[] args) throws WarpScriptException {\n+    long tick = (long) args[0];\n+    long[] locations = (long[]) args[4];\n+    long[] elevations = (long[]) args[5];\n+    Object[] values = (Object[]) args[6];\n+\n+    if (values.length < 1) {\n+      return new Object[] { tick, GeoTimeSerie.NO_LOCATION, GeoTimeSerie.NO_ELEVATION, null };\n+    }\n+    \n+    long location = locations[0];\n+    long elevation = elevations[0];\n+    \n+    //\n+    // If there is less than one value or if there is no location associated with the\n+    // value, return null as the tick value.\n+    //\n+   \n+    if (null == values[0] || GeoTimeSerie.NO_LOCATION == location || !GeoXPLib.isGeoXPPointInGeoXPShape(location, this.shape)) {\n+      return new Object[] { tick, location, elevation, false };", "originalCommit": "a4a71d9b39a4146b0123996933a34d1035603753", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5668191c76f446255c4079342eaf5c2ac6ecf554", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/mapper/MapperGeoFence.java b/warp10/src/main/java/io/warp10/script/mapper/MapperGeoFence.java\nindex d73fbc75..27aebd7d 100644\n--- a/warp10/src/main/java/io/warp10/script/mapper/MapperGeoFence.java\n+++ b/warp10/src/main/java/io/warp10/script/mapper/MapperGeoFence.java\n\n@@ -55,9 +55,6 @@ public class MapperGeoFence extends NamedWarpScriptFunction implements WarpScrip\n \n   private final GeoXPShape shape;\n   \n-  /**\n-   * Default constructor, the timezone will be UTC\n-   */\n   public MapperGeoFence(String name, GeoXPShape shape) {\n     super(name);\n     this.shape = shape;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk2NjA1OQ==", "url": "https://github.com/senx/warp10-platform/pull/835#discussion_r491966059", "bodyText": "Timezone of the GeoXPShape?", "author": "ftence", "createdAt": "2020-09-21T11:23:05Z", "path": "warp10/src/main/java/io/warp10/script/mapper/MapperGeoFence.java", "diffHunk": "@@ -0,0 +1,107 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.mapper;\n+\n+import io.warp10.continuum.gts.GeoTimeSerie;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.StackUtils;\n+import io.warp10.script.WarpScriptLib;\n+import io.warp10.script.WarpScriptMapperFunction;\n+import io.warp10.script.WarpScriptStackFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.functions.GEOPACK;\n+\n+import com.geoxp.GeoXPLib;\n+import com.geoxp.GeoXPLib.GeoXPShape;\n+\n+/**\n+ * Mapper which returns true or false whether a point location falls within or outside a given GeoShape.\n+ */\n+public class MapperGeoFence extends NamedWarpScriptFunction implements WarpScriptMapperFunction {\n+  \n+  public static class Builder extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+    \n+    public Builder(String name) {\n+      super(name);\n+    }\n+    \n+    @Override\n+    public Object apply(WarpScriptStack stack) throws WarpScriptException {\n+      Object shape = stack.pop();\n+      \n+      if (!(shape instanceof GeoXPShape)) {\n+        throw new WarpScriptException(getName() + \" expects a Geo Shape.\");\n+      }\n+      \n+      stack.push(new MapperGeoFence(getName(), (GeoXPShape) shape));\n+      return stack;\n+    }\n+  }\n+\n+  private final GeoXPShape shape;\n+  \n+  /**\n+   * Default constructor, the timezone will be UTC\n+   */", "originalCommit": "a4a71d9b39a4146b0123996933a34d1035603753", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5668191c76f446255c4079342eaf5c2ac6ecf554", "chunk": "diff --git a/warp10/src/main/java/io/warp10/script/mapper/MapperGeoFence.java b/warp10/src/main/java/io/warp10/script/mapper/MapperGeoFence.java\nindex d73fbc75..27aebd7d 100644\n--- a/warp10/src/main/java/io/warp10/script/mapper/MapperGeoFence.java\n+++ b/warp10/src/main/java/io/warp10/script/mapper/MapperGeoFence.java\n\n@@ -55,9 +55,6 @@ public class MapperGeoFence extends NamedWarpScriptFunction implements WarpScrip\n \n   private final GeoXPShape shape;\n   \n-  /**\n-   * Default constructor, the timezone will be UTC\n-   */\n   public MapperGeoFence(String name, GeoXPShape shape) {\n     super(name);\n     this.shape = shape;\n"}}, {"oid": "5668191c76f446255c4079342eaf5c2ac6ecf554", "url": "https://github.com/senx/warp10-platform/commit/5668191c76f446255c4079342eaf5c2ac6ecf554", "message": "Addressed PR comments", "committedDate": "2020-09-21T11:30:13Z", "type": "commit"}, {"oid": "6bc71e1bbe4d6e40400efe07e43f9afb36c3c97b", "url": "https://github.com/senx/warp10-platform/commit/6bc71e1bbe4d6e40400efe07e43f9afb36c3c97b", "message": "Simplified conditional", "committedDate": "2020-09-21T15:57:23Z", "type": "commit"}]}