{"pr_number": 544, "pr_title": "Ndegwa tt 06", "pr_createdAt": "2020-06-02T11:13:25Z", "pr_url": "https://github.com/opensrp/opensrp-client-core/pull/544", "timeline": [{"oid": "41102e436de02e4065068f15ee30a9144825163e", "url": "https://github.com/opensrp/opensrp-client-core/commit/41102e436de02e4065068f15ee30a9144825163e", "message": "HTTPAgent Unit tests\n- Add more unit test cases", "committedDate": "2020-06-02T11:11:28Z", "type": "commit"}, {"oid": "bdb4315fd910de403f43911fe5d57cba826a5882", "url": "https://github.com/opensrp/opensrp-client-core/commit/bdb4315fd910de403f43911fe5d57cba826a5882", "message": "CI Configuration updates\n- Add codacy configuration file\n- Rename test case", "committedDate": "2020-06-02T16:18:58Z", "type": "commit"}, {"oid": "bdb4315fd910de403f43911fe5d57cba826a5882", "url": "https://github.com/opensrp/opensrp-client-core/commit/bdb4315fd910de403f43911fe5d57cba826a5882", "message": "CI Configuration updates\n- Add codacy configuration file\n- Rename test case", "committedDate": "2020-06-02T16:18:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM5NzIwNA==", "url": "https://github.com/opensrp/opensrp-client-core/pull/544#discussion_r434397204", "bodyText": "I think this should get getErrorStream\nI also think that the loginresponse for an internal error is a custom message & not the message checked in this test. Kindly fix and confirm if the assumptions here are correct", "author": "ekigamba", "createdAt": "2020-06-03T08:29:00Z", "path": "opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java", "diffHunk": "@@ -560,4 +566,342 @@ public void testOauth2authenticateRefreshTokenInvokesOauth2authenticateCoreWithC\n \n \n     }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponse() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doReturn(inputStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpsURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(LoginResponseTestData.USER_DETAILS_REQUEST_SERVER_RESPONSE);\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Login successful.\", loginResponse.message());\n+        Assert.assertNotNull(loginResponse.payload());\n+\n+        Assert.assertNotNull(loginResponse.payload().user);\n+        Assert.assertEquals(\"demo\", loginResponse.payload().user.getUsername());\n+        Assert.assertEquals(\"Demo User\", loginResponse.payload().user.getPreferredName());\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().user.getBaseEntityId());\n+\n+        Assert.assertNotNull(loginResponse.payload().time);\n+        Assert.assertEquals(\"2020-06-02 08:21:40\", loginResponse.payload().time.getTime());\n+        Assert.assertEquals(\"Africa/Nairobi\", loginResponse.payload().time.getTimeZone());\n+\n+        Assert.assertNotNull(loginResponse.payload().locations);\n+        Assert.assertNotNull(loginResponse.payload().locations.getLocationsHierarchy());\n+\n+        Assert.assertNotNull(loginResponse.payload().jurisdictions);\n+        Assert.assertEquals(1, loginResponse.payload().jurisdictions.size());\n+        Assert.assertNotNull(\"Health Team Kasarani\", loginResponse.payload().jurisdictions.get(0));\n+\n+        Assert.assertNotNull(loginResponse.payload().team);\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.identifier);\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.uuid);\n+\n+        Assert.assertEquals(\"SUCCESS\", loginResponse.name());\n+\n+        ArgumentCaptor<String> headerKey = ArgumentCaptor.forClass(String.class);\n+        ArgumentCaptor<String> headerValue = ArgumentCaptor.forClass(String.class);\n+\n+        Mockito.verify(httpsURLConnection).setRequestProperty(headerKey.capture(), headerValue.capture());\n+        String capturedKey = headerKey.getValue();\n+        String capturedValue = headerValue.getValue();\n+\n+        Assert.assertEquals(capturedKey, AllConstants.HTTP_REQUEST_HEADERS.AUTHORIZATION);\n+        Assert.assertEquals(capturedValue, AllConstants.HTTP_REQUEST_AUTH_TOKEN_TYPE.BEARER + \" \" + SAMPLE_TEST_TOKEN);\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForUnauthorizedRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Please check the credentials\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"UNAUTHORIZED\", loginResponse.name());\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForRandomServerError() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doReturn(errorStream).when(httpsURLConnection).getInputStream();", "originalCommit": "bdb4315fd910de403f43911fe5d57cba826a5882", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwNTc3MQ==", "url": "https://github.com/opensrp/opensrp-client-core/pull/544#discussion_r434405771", "bodyText": "This might be a duplicate with test on line 880", "author": "ekigamba", "createdAt": "2020-06-03T08:43:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM5NzIwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyNzQ5NA==", "url": "https://github.com/opensrp/opensrp-client-core/pull/544#discussion_r434427494", "bodyText": "Fixed the first one\n880 tests a different method with has a similar response flow", "author": "ndegwamartin", "createdAt": "2020-06-03T09:18:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM5NzIwNA=="}], "type": "inlineReview", "revised_code": {"commit": "2d5385feaba9763803f9da56aebc84e440285e9d", "chunk": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex c433d204..8f0ae1e2 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n\n@@ -655,7 +655,7 @@ public class HTTPAgentTest {\n \n         Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n \n-        Mockito.doReturn(errorStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(errorStream).when(httpsURLConnection).getErrorStream();\n         Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpsURLConnection).getResponseCode();\n \n         PowerMockito.mockStatic(IOUtils.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwMjg3Mg==", "url": "https://github.com/opensrp/opensrp-client-core/pull/544#discussion_r434402872", "bodyText": "Spelling to WithoutNetworkConnectivity", "author": "ekigamba", "createdAt": "2020-06-03T08:38:34Z", "path": "opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java", "diffHunk": "@@ -560,4 +566,342 @@ public void testOauth2authenticateRefreshTokenInvokesOauth2authenticateCoreWithC\n \n \n     }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponse() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doReturn(inputStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpsURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(LoginResponseTestData.USER_DETAILS_REQUEST_SERVER_RESPONSE);\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Login successful.\", loginResponse.message());\n+        Assert.assertNotNull(loginResponse.payload());\n+\n+        Assert.assertNotNull(loginResponse.payload().user);\n+        Assert.assertEquals(\"demo\", loginResponse.payload().user.getUsername());\n+        Assert.assertEquals(\"Demo User\", loginResponse.payload().user.getPreferredName());\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().user.getBaseEntityId());\n+\n+        Assert.assertNotNull(loginResponse.payload().time);\n+        Assert.assertEquals(\"2020-06-02 08:21:40\", loginResponse.payload().time.getTime());\n+        Assert.assertEquals(\"Africa/Nairobi\", loginResponse.payload().time.getTimeZone());\n+\n+        Assert.assertNotNull(loginResponse.payload().locations);\n+        Assert.assertNotNull(loginResponse.payload().locations.getLocationsHierarchy());\n+\n+        Assert.assertNotNull(loginResponse.payload().jurisdictions);\n+        Assert.assertEquals(1, loginResponse.payload().jurisdictions.size());\n+        Assert.assertNotNull(\"Health Team Kasarani\", loginResponse.payload().jurisdictions.get(0));\n+\n+        Assert.assertNotNull(loginResponse.payload().team);\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.identifier);\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.uuid);\n+\n+        Assert.assertEquals(\"SUCCESS\", loginResponse.name());\n+\n+        ArgumentCaptor<String> headerKey = ArgumentCaptor.forClass(String.class);\n+        ArgumentCaptor<String> headerValue = ArgumentCaptor.forClass(String.class);\n+\n+        Mockito.verify(httpsURLConnection).setRequestProperty(headerKey.capture(), headerValue.capture());\n+        String capturedKey = headerKey.getValue();\n+        String capturedValue = headerValue.getValue();\n+\n+        Assert.assertEquals(capturedKey, AllConstants.HTTP_REQUEST_HEADERS.AUTHORIZATION);\n+        Assert.assertEquals(capturedValue, AllConstants.HTTP_REQUEST_AUTH_TOKEN_TYPE.BEARER + \" \" + SAMPLE_TEST_TOKEN);\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForUnauthorizedRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Please check the credentials\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"UNAUTHORIZED\", loginResponse.name());\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForRandomServerError() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doReturn(errorStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpsURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(\"<html><p><b>message</b> Oops, something went wrong </u></p></html>\");\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Dristhi login failed. Try later\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"UNKNOWN_RESPONSE\", loginResponse.name());\n+\n+    }\n+\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForMalformedURLRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doThrow(new MalformedURLException()).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Incorrect url\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"MALFORMED_URL\", loginResponse.name());\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForConnectionTimedOutRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doThrow(new SocketTimeoutException()).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"The server could not be reached. Try again\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"TIMEOUT\", loginResponse.name());\n+\n+    }\n+\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForRequestsWithNetworkConnectivity() throws Exception {", "originalCommit": "bdb4315fd910de403f43911fe5d57cba826a5882", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyODA5OA==", "url": "https://github.com/opensrp/opensrp-client-core/pull/544#discussion_r434428098", "bodyText": "Fixed", "author": "ndegwamartin", "createdAt": "2020-06-03T09:19:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwMjg3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2d5385feaba9763803f9da56aebc84e440285e9d", "chunk": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex c433d204..8f0ae1e2 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n\n@@ -655,7 +655,7 @@ public class HTTPAgentTest {\n \n         Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n \n-        Mockito.doReturn(errorStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(errorStream).when(httpsURLConnection).getErrorStream();\n         Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpsURLConnection).getResponseCode();\n \n         PowerMockito.mockStatic(IOUtils.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwNTAzOA==", "url": "https://github.com/opensrp/opensrp-client-core/pull/544#discussion_r434405038", "bodyText": "I think this test name is incorrect. We have a socket timeout being thrown on line 707 in this file. I am not sure if this test is a duplicate since we also have another test that checks for MalformedURLException", "author": "ekigamba", "createdAt": "2020-06-03T08:42:08Z", "path": "opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java", "diffHunk": "@@ -560,4 +566,342 @@ public void testOauth2authenticateRefreshTokenInvokesOauth2authenticateCoreWithC\n \n \n     }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponse() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doReturn(inputStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpsURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(inputStream)).thenReturn(LoginResponseTestData.USER_DETAILS_REQUEST_SERVER_RESPONSE);\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Login successful.\", loginResponse.message());\n+        Assert.assertNotNull(loginResponse.payload());\n+\n+        Assert.assertNotNull(loginResponse.payload().user);\n+        Assert.assertEquals(\"demo\", loginResponse.payload().user.getUsername());\n+        Assert.assertEquals(\"Demo User\", loginResponse.payload().user.getPreferredName());\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().user.getBaseEntityId());\n+\n+        Assert.assertNotNull(loginResponse.payload().time);\n+        Assert.assertEquals(\"2020-06-02 08:21:40\", loginResponse.payload().time.getTime());\n+        Assert.assertEquals(\"Africa/Nairobi\", loginResponse.payload().time.getTimeZone());\n+\n+        Assert.assertNotNull(loginResponse.payload().locations);\n+        Assert.assertNotNull(loginResponse.payload().locations.getLocationsHierarchy());\n+\n+        Assert.assertNotNull(loginResponse.payload().jurisdictions);\n+        Assert.assertEquals(1, loginResponse.payload().jurisdictions.size());\n+        Assert.assertNotNull(\"Health Team Kasarani\", loginResponse.payload().jurisdictions.get(0));\n+\n+        Assert.assertNotNull(loginResponse.payload().team);\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.identifier);\n+        Assert.assertEquals(\"93c6526-6667-3333-a611112-f3b309999999\", loginResponse.payload().team.uuid);\n+\n+        Assert.assertEquals(\"SUCCESS\", loginResponse.name());\n+\n+        ArgumentCaptor<String> headerKey = ArgumentCaptor.forClass(String.class);\n+        ArgumentCaptor<String> headerValue = ArgumentCaptor.forClass(String.class);\n+\n+        Mockito.verify(httpsURLConnection).setRequestProperty(headerKey.capture(), headerValue.capture());\n+        String capturedKey = headerKey.getValue();\n+        String capturedValue = headerValue.getValue();\n+\n+        Assert.assertEquals(capturedKey, AllConstants.HTTP_REQUEST_HEADERS.AUTHORIZATION);\n+        Assert.assertEquals(capturedValue, AllConstants.HTTP_REQUEST_AUTH_TOKEN_TYPE.BEARER + \" \" + SAMPLE_TEST_TOKEN);\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForUnauthorizedRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Please check the credentials\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"UNAUTHORIZED\", loginResponse.name());\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForRandomServerError() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doReturn(errorStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpsURLConnection).getResponseCode();\n+\n+        PowerMockito.mockStatic(IOUtils.class);\n+        PowerMockito.when(IOUtils.toString(errorStream)).thenReturn(\"<html><p><b>message</b> Oops, something went wrong </u></p></html>\");\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Dristhi login failed. Try later\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"UNKNOWN_RESPONSE\", loginResponse.name());\n+\n+    }\n+\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForMalformedURLRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doThrow(new MalformedURLException()).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"Incorrect url\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"MALFORMED_URL\", loginResponse.name());\n+\n+    }\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForConnectionTimedOutRequests() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doThrow(new SocketTimeoutException()).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"The server could not be reached. Try again\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"TIMEOUT\", loginResponse.name());\n+\n+    }\n+\n+\n+    @Test\n+    public void testFetchUserDetailsConstructsCorrectResponseForRequestsWithNetworkConnectivity() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+        Mockito.doThrow(new IOException()).when(httpsURLConnection).getResponseCode();\n+\n+        LoginResponse loginResponse = httpAgentSpy.fetchUserDetails(USER_DETAILS_ENDPOINT, SAMPLE_TEST_TOKEN);\n+\n+        Assert.assertNotNull(loginResponse);\n+        Assert.assertNotNull(loginResponse.message());\n+        Assert.assertEquals(\"No internet connection. Please ensure data connectivity\", loginResponse.message());\n+        Assert.assertNull(loginResponse.payload());\n+\n+        Assert.assertEquals(\"NO_INTERNET_CONNECTIVITY\", loginResponse.name());\n+\n+    }\n+\n+\n+    @Test\n+    public void testVerifyAuthorizationReturnsTrueForAuthorizedResponse() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(KEYClOAK_CONFIGURATION_ENDPOINT);\n+\n+        Mockito.doReturn(HttpURLConnection.HTTP_OK).when(httpURLConnection).getResponseCode();\n+\n+        boolean isVerified = httpAgentSpy.verifyAuthorization();\n+        Assert.assertTrue(isVerified);\n+\n+    }\n+\n+    @Test\n+    public void testVerifyAuthorizationReturnsFalseForUnauthorizedResponse() throws Exception {\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(\"https://my-server.com/user-details?anm-id=\" + TEST_USERNAME);\n+\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n+\n+        boolean isVerified = httpAgentSpy.verifyAuthorization();\n+        Assert.assertFalse(isVerified);\n+\n+    }\n+\n+    @Test\n+    public void testUrlCanBeAccessWithGivenCredentialsReturnsUnauthorizedResponse() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doReturn(HttpURLConnection.HTTP_UNAUTHORIZED).when(httpURLConnection).getResponseCode();\n+\n+        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n+        Assert.assertNotNull(response);\n+        Assert.assertNotNull(response.message());\n+        Assert.assertNull(response.payload());\n+        Assert.assertEquals(\"Please check the credentials\", response.message());\n+\n+    }\n+\n+    @Test\n+    public void testUrlCanBeAccessWithGivenCredentialsReturnsErrorResponseForMalformedURL() throws Exception {\n+\n+        PowerMockito.mockStatic(Base64.class);\n+\n+        URL url = PowerMockito.mock(URL.class);\n+        Assert.assertNotNull(url);\n+\n+        HTTPAgent httpAgentSpy = Mockito.spy(httpAgent);\n+\n+        Mockito.doReturn(TEST_BASE_URL).when(dristhiConfiguration).dristhiBaseURL();\n+        Mockito.doReturn(TEST_USERNAME).when(allSharedPreferences).fetchRegisteredANM();\n+        Mockito.doReturn(httpURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n+\n+        Mockito.doThrow(new MalformedURLException()).when(httpURLConnection).getResponseCode();\n+\n+        LoginResponse response = httpAgentSpy.urlCanBeAccessWithGivenCredentials(USER_DETAILS_ENDPOINT, TEST_USERNAME, TEST_PASSWORD);\n+        Assert.assertNotNull(response);\n+        Assert.assertNull(response.payload());\n+        Assert.assertNotNull(response.message());\n+        Assert.assertEquals(LoginResponse.MALFORMED_URL.name(), response.name());\n+\n+    }\n+\n+    @Test\n+    public void testUrlCanBeAccessWithGivenCredentialsReturnsCorrectErrorResponseForSocketTimeout() throws Exception {", "originalCommit": "bdb4315fd910de403f43911fe5d57cba826a5882", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyODEzOA==", "url": "https://github.com/opensrp/opensrp-client-core/pull/544#discussion_r434428138", "bodyText": "Fixed", "author": "ndegwamartin", "createdAt": "2020-06-03T09:19:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwNTAzOA=="}], "type": "inlineReview", "revised_code": {"commit": "2d5385feaba9763803f9da56aebc84e440285e9d", "chunk": "diff --git a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\nindex c433d204..8f0ae1e2 100644\n--- a/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n+++ b/opensrp-app/src/test/java/org/smartregister/service/HTTPAgentTest.java\n\n@@ -655,7 +655,7 @@ public class HTTPAgentTest {\n \n         Mockito.doReturn(httpsURLConnection).when(httpAgentSpy).getHttpURLConnection(USER_DETAILS_ENDPOINT);\n \n-        Mockito.doReturn(errorStream).when(httpsURLConnection).getInputStream();\n+        Mockito.doReturn(errorStream).when(httpsURLConnection).getErrorStream();\n         Mockito.doReturn(HttpURLConnection.HTTP_INTERNAL_ERROR).when(httpsURLConnection).getResponseCode();\n \n         PowerMockito.mockStatic(IOUtils.class);\n"}}, {"oid": "2d5385feaba9763803f9da56aebc84e440285e9d", "url": "https://github.com/opensrp/opensrp-client-core/commit/2d5385feaba9763803f9da56aebc84e440285e9d", "message": "Fixed/Implment code review change requests on HTTP Agent test\n- Renamed test case\n- Refactored test case logic", "committedDate": "2020-06-03T09:54:58Z", "type": "commit"}, {"oid": "2d5385feaba9763803f9da56aebc84e440285e9d", "url": "https://github.com/opensrp/opensrp-client-core/commit/2d5385feaba9763803f9da56aebc84e440285e9d", "message": "Fixed/Implment code review change requests on HTTP Agent test\n- Renamed test case\n- Refactored test case logic", "committedDate": "2020-06-03T09:54:58Z", "type": "forcePushed"}]}