{"pr_number": 754, "pr_title": "PARQUET-1784: Column-wise configuration", "pr_createdAt": "2020-02-06T15:21:10Z", "pr_url": "https://github.com/apache/parquet-mr/pull/754", "timeline": [{"oid": "49a85fec4153e1ea12610cd2cf7ce4e064e6e042", "url": "https://github.com/apache/parquet-mr/commit/49a85fec4153e1ea12610cd2cf7ce4e064e6e042", "message": "PARQUET-1784: Column-wise configuration", "committedDate": "2020-02-06T15:17:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3NDY4Mw==", "url": "https://github.com/apache/parquet-mr/pull/754#discussion_r376274683", "bodyText": "Is it better to use a warning here?", "author": "chenjunjiedada", "createdAt": "2020-02-07T08:49:35Z", "path": "parquet-column/src/main/java/org/apache/parquet/column/ColumnProperty.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.parquet.column;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.apache.parquet.hadoop.metadata.ColumnPath;\n+\n+/**\n+ * Represents a Parquet property that may have different values for the different columns.\n+ */\n+abstract class ColumnProperty<T> {\n+  private static class DefaultColumnProperty<T> extends ColumnProperty<T> {\n+    private final T defaultValue;\n+\n+    private DefaultColumnProperty(T defaultValue) {\n+      this.defaultValue = defaultValue;\n+    }\n+\n+    @Override\n+    public T getDefaultValue() {\n+      return defaultValue;\n+    }\n+\n+    @Override\n+    public T getValue(ColumnPath columnPath) {\n+      return getDefaultValue();\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return Objects.toString(getDefaultValue());\n+    }\n+  }\n+\n+  private static class MultipleColumnProperty<T> extends DefaultColumnProperty<T> {\n+    private final Map<ColumnPath, T> values;\n+\n+    private MultipleColumnProperty(T defaultValue, Map<ColumnPath, T> values) {\n+      super(defaultValue);\n+      assert !values.isEmpty();", "originalCommit": "49a85fec4153e1ea12610cd2cf7ce4e064e6e042", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3OTA4MA==", "url": "https://github.com/apache/parquet-mr/pull/754#discussion_r376279080", "bodyText": "I usually use assert to ensure something that if not happens then it is a coding issue. Here, this private constructor is invoked only at one place where the map is not empty. It is just that I've coded this line first and wanted to not forget about the check :)\n(assert is good for such checks because they do not impact performance in production.)", "author": "gszadovszky", "createdAt": "2020-02-07T09:00:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3NDY4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMxMjgxNQ==", "url": "https://github.com/apache/parquet-mr/pull/754#discussion_r376312815", "bodyText": "I see, thanks for the explanation.", "author": "chenjunjiedada", "createdAt": "2020-02-07T10:13:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3NDY4Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5MTYyMg==", "url": "https://github.com/apache/parquet-mr/pull/754#discussion_r376691622", "bodyText": "why not name it as 'MultipleDefaultColumnProperty'?", "author": "shangxinli", "createdAt": "2020-02-08T06:28:21Z", "path": "parquet-column/src/main/java/org/apache/parquet/column/ColumnProperty.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.parquet.column;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.apache.parquet.hadoop.metadata.ColumnPath;\n+\n+/**\n+ * Represents a Parquet property that may have different values for the different columns.\n+ */\n+abstract class ColumnProperty<T> {\n+  private static class DefaultColumnProperty<T> extends ColumnProperty<T> {\n+    private final T defaultValue;\n+\n+    private DefaultColumnProperty(T defaultValue) {\n+      this.defaultValue = defaultValue;\n+    }\n+\n+    @Override\n+    public T getDefaultValue() {\n+      return defaultValue;\n+    }\n+\n+    @Override\n+    public T getValue(ColumnPath columnPath) {\n+      return getDefaultValue();\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return Objects.toString(getDefaultValue());\n+    }\n+  }\n+\n+  private static class MultipleColumnProperty<T> extends DefaultColumnProperty<T> {", "originalCommit": "49a85fec4153e1ea12610cd2cf7ce4e064e6e042", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkwOTY5Mg==", "url": "https://github.com/apache/parquet-mr/pull/754#discussion_r376909692", "bodyText": "I usually don't like long class names if it is not required and here it is a private class. But if you have a strong opinion to change the name I'm happy to do so. :)", "author": "gszadovszky", "createdAt": "2020-02-10T08:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5MTYyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE2NzM4OA==", "url": "https://github.com/apache/parquet-mr/pull/754#discussion_r377167388", "bodyText": "I usually like the name to be more specific than being short. But I don't have a strong opinion as this is a pretty personal preference.", "author": "shangxinli", "createdAt": "2020-02-10T16:21:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5MTYyMg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "7e19e0864bc2000c096662afd1b87dbcdc826f82", "url": "https://github.com/apache/parquet-mr/commit/7e19e0864bc2000c096662afd1b87dbcdc826f82", "message": "Merge branch 'master' into PARQUET-1784", "committedDate": "2020-02-13T15:04:47Z", "type": "commit"}]}