{"pr_number": 756, "pr_title": "PARQUET-1790: Add Api for writing DataPageV2 to ParquetFileWriter class", "pr_createdAt": "2020-02-09T22:16:59Z", "pr_url": "https://github.com/apache/parquet-mr/pull/756", "timeline": [{"oid": "513eccdc0cbc546d5183cb51dfa0af36d0f9ca67", "url": "https://github.com/apache/parquet-mr/commit/513eccdc0cbc546d5183cb51dfa0af36d0f9ca67", "message": "PARQUET-1790: Add Api for writing DataPageV2 to ParquetFileWriter class", "committedDate": "2020-02-09T22:00:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk2ODQwOA==", "url": "https://github.com/apache/parquet-mr/pull/756#discussion_r376968408", "bodyText": "In other places we use java.util.Math.toIntExact(long).", "author": "gszadovszky", "createdAt": "2020-02-10T10:09:11Z", "path": "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetFileWriter.java", "diffHunk": "@@ -886,6 +951,15 @@ private static void serializeColumnIndexes(\n     }\n   }\n \n+  private int toIntWithCheck(long size) {", "originalCommit": "513eccdc0cbc546d5183cb51dfa0af36d0f9ca67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA0MjgyMA==", "url": "https://github.com/apache/parquet-mr/pull/756#discussion_r377042820", "bodyText": "Yes you are right, I was thinking of keeping it this way here(like in ColumnChunkPageWriteStore ) so the message can be clearer to the caller of what failed", "author": "brimzi", "createdAt": "2020-02-10T12:50:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk2ODQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUzNzc3Nw==", "url": "https://github.com/apache/parquet-mr/pull/756#discussion_r377537777", "bodyText": "It's fine for me.\nThen, I would suggest using a similar approach of implementation then they have it in toIntExact(long). The one you used is not universal (think of negative numbers out of int).", "author": "gszadovszky", "createdAt": "2020-02-11T10:05:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk2ODQwOA=="}], "type": "inlineReview", "revised_code": {"commit": "220113d4e7ebcc877b6d28f7b012fafb3f2a7236", "chunk": "diff --git a/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetFileWriter.java b/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetFileWriter.java\nindex 2d924e6d4..d1cdee7ff 100644\n--- a/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetFileWriter.java\n+++ b/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetFileWriter.java\n\n@@ -952,10 +952,8 @@ public class ParquetFileWriter {\n   }\n \n   private int toIntWithCheck(long size) {\n-    if (size > Integer.MAX_VALUE) {\n-      throw new ParquetEncodingException(\n-        \"Cannot write page larger than \" + Integer.MAX_VALUE + \" bytes: \" +\n-          size);\n+    if ((int)size != size) {\n+      throw new ParquetEncodingException(\"Cannot write page larger than \" + Integer.MAX_VALUE + \" bytes: \" + size);\n     }\n     return (int)size;\n   }\n"}}, {"oid": "220113d4e7ebcc877b6d28f7b012fafb3f2a7236", "url": "https://github.com/apache/parquet-mr/commit/220113d4e7ebcc877b6d28f7b012fafb3f2a7236", "message": "PARQUET-1790: apply review suggestions - use a more universal approach to int check", "committedDate": "2020-02-11T12:45:37Z", "type": "commit"}]}