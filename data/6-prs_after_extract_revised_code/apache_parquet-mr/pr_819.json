{"pr_number": 819, "pr_title": "PARQUET-1915: Add nullify column", "pr_createdAt": "2020-09-24T03:29:49Z", "pr_url": "https://github.com/apache/parquet-mr/pull/819", "timeline": [{"oid": "616f23ce537961e347aa0cf30ff9b25e897dbc43", "url": "https://github.com/apache/parquet-mr/commit/616f23ce537961e347aa0cf30ff9b25e897dbc43", "message": "PARQUET-1915: Add nullify column", "committedDate": "2020-09-24T17:53:36Z", "type": "forcePushed"}, {"oid": "8b6452a0babe45fc2fc13e8a497fd7b7eb731e04", "url": "https://github.com/apache/parquet-mr/commit/8b6452a0babe45fc2fc13e8a497fd7b7eb731e04", "message": "PARQUET-1915: Add nullify column", "committedDate": "2020-09-24T17:58:04Z", "type": "forcePushed"}, {"oid": "b63948705d37143bd1103196557384b4a026d67c", "url": "https://github.com/apache/parquet-mr/commit/b63948705d37143bd1103196557384b4a026d67c", "message": "PARQUET-1915: Add nullify column", "committedDate": "2020-09-24T18:15:03Z", "type": "forcePushed"}, {"oid": "a4e654bb6149f99e8da6efd2b56d31dc3bd2bb55", "url": "https://github.com/apache/parquet-mr/commit/a4e654bb6149f99e8da6efd2b56d31dc3bd2bb55", "message": "PARQUET-1915: Add nullify column", "committedDate": "2020-09-24T18:19:44Z", "type": "forcePushed"}, {"oid": "485a5b8ef184e1f8c3670c3c3baaa0fc423c6b39", "url": "https://github.com/apache/parquet-mr/commit/485a5b8ef184e1f8c3670c3c3baaa0fc423c6b39", "message": "PARQUET-1915: Add nullify column", "committedDate": "2020-09-25T17:32:11Z", "type": "commit"}, {"oid": "485a5b8ef184e1f8c3670c3c3baaa0fc423c6b39", "url": "https://github.com/apache/parquet-mr/commit/485a5b8ef184e1f8c3670c3c3baaa0fc423c6b39", "message": "PARQUET-1915: Add nullify column", "committedDate": "2020-09-25T17:32:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDExMzI3NQ==", "url": "https://github.com/apache/parquet-mr/pull/819#discussion_r510113275", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Parameter(description = \"columns to be repalced with masked value\")\n          \n          \n            \n              @Parameter(description = \"columns to be replaced with masked value\")", "author": "gszadovszky", "createdAt": "2020-10-22T12:18:05Z", "path": "parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnMaskingCommand.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.parquet.cli.commands;\n+\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.HadoopReadOptions;\n+import org.apache.parquet.cli.BaseCommand;\n+import org.apache.parquet.hadoop.ParquetFileReader;\n+import org.apache.parquet.hadoop.ParquetFileWriter;\n+import org.apache.parquet.hadoop.metadata.ParquetMetadata;\n+import org.apache.parquet.hadoop.util.ColumnMasker;\n+import org.apache.parquet.hadoop.util.ColumnMasker.MaskMode;\n+import org.apache.parquet.hadoop.util.CompressionConverter.TransParquetFileReader;\n+import org.apache.parquet.hadoop.util.CompressionConverter.TransParquetFileWriter;\n+import org.apache.parquet.hadoop.util.HadoopInputFile;\n+import org.apache.parquet.schema.MessageType;\n+import org.slf4j.Logger;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.apache.parquet.format.converter.ParquetMetadataConverter.NO_FILTER;\n+\n+@Parameters(commandDescription=\"Replace columns with masked values and write to a new Parquet file\")\n+public class ColumnMaskingCommand extends BaseCommand {\n+\n+  private ColumnMasker masker;\n+\n+  public ColumnMaskingCommand(Logger console) {\n+    super(console);\n+    masker = new ColumnMasker();\n+  }\n+\n+  @Parameter(description = \"<mask mode: nullify, hash, redact>\")\n+  String mode;\n+\n+  @Parameter(description = \"<input parquet file path>\")\n+  String input;\n+\n+  @Parameter(description = \"<output parquet file path>\")\n+  String output;\n+\n+  @Parameter(description = \"columns to be repalced with masked value\")", "originalCommit": "485a5b8ef184e1f8c3670c3c3baaa0fc423c6b39", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5d65286e4f6a0bc009d04bed8c885bde4ec16659", "chunk": "diff --git a/parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnMaskingCommand.java b/parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnMaskingCommand.java\nindex e88af98b0..877642772 100644\n--- a/parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnMaskingCommand.java\n+++ b/parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnMaskingCommand.java\n\n@@ -61,7 +61,7 @@ public class ColumnMaskingCommand extends BaseCommand {\n   @Parameter(description = \"<output parquet file path>\")\n   String output;\n \n-  @Parameter(description = \"columns to be repalced with masked value\")\n+  @Parameter(description = \"columns to be replaced with masked value\")\n   List<String> cols;\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyMzU0NQ==", "url": "https://github.com/apache/parquet-mr/pull/819#discussion_r510123545", "bodyText": "So the concept is to write the nulls into a \"hacked\" ColumnWriter and extract the bytes from it then write it as a page. This way you write the whole column chunk into one page. This breaks the concept of column-indexes that we write new pages for a couple of rows (default is 20k) even if the pages are small in bytes.\nI think, it would be much better to use a proper PageWriteStore instead of a dummy one and let the original implementation decide when to create new pages. This way you do not need to extend the existing interface with contactWriters (which also breaks the current concept of the interface that is only a sink for the data).", "author": "gszadovszky", "createdAt": "2020-10-22T12:34:20Z", "path": "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/util/ColumnMasker.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.hadoop.util;\n+\n+import org.apache.parquet.bytes.BytesInput;\n+import org.apache.parquet.column.ColumnDescriptor;\n+import org.apache.parquet.column.ColumnReader;\n+import org.apache.parquet.column.ColumnWriter;\n+import org.apache.parquet.column.Encoding;\n+import org.apache.parquet.column.ParquetProperties;\n+import org.apache.parquet.column.ParquetProperties.WriterVersion;\n+import org.apache.parquet.column.impl.ColumnReadStoreImpl;\n+import org.apache.parquet.column.page.DataPage;\n+import org.apache.parquet.column.page.DictionaryPage;\n+import org.apache.parquet.column.page.PageReadStore;\n+import org.apache.parquet.column.page.PageWriteStore;\n+import org.apache.parquet.column.page.PageWriter;\n+import org.apache.parquet.column.statistics.Statistics;\n+import org.apache.parquet.column.values.bloomfilter.BloomFilter;\n+import org.apache.parquet.hadoop.metadata.ColumnChunkMetaData;\n+import org.apache.parquet.hadoop.metadata.ColumnPath;\n+import org.apache.parquet.hadoop.metadata.CompressionCodecName;\n+import org.apache.parquet.hadoop.metadata.ParquetMetadata;\n+import org.apache.parquet.hadoop.util.CompressionConverter.TransParquetFileReader;\n+import org.apache.parquet.hadoop.util.CompressionConverter.TransParquetFileWriter;\n+import org.apache.parquet.internal.column.columnindex.ColumnIndex;\n+import org.apache.parquet.internal.column.columnindex.OffsetIndex;\n+import org.apache.parquet.io.ParquetEncodingException;\n+import org.apache.parquet.io.api.Converter;\n+import org.apache.parquet.io.api.GroupConverter;\n+import org.apache.parquet.io.api.PrimitiveConverter;\n+import org.apache.parquet.schema.MessageType;\n+import org.apache.parquet.schema.PrimitiveType;\n+import org.apache.parquet.schema.Type;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class ColumnMasker {\n+  /**\n+   *\n+   * @param reader Reader of source file\n+   * @param writer Writer of destination file\n+   * @param meta Metadata of source file\n+   * @param schema Schema of source file\n+   * @param paths Column Paths need to be masked\n+   * @param maskMode Mode to mask\n+   * @throws IOException\n+   */\n+  public void processBlocks(TransParquetFileReader reader, TransParquetFileWriter writer, ParquetMetadata meta,\n+                            MessageType schema, List<String> paths, MaskMode maskMode) throws IOException {\n+    Set<ColumnPath> nullifyColumns = convertToColumnPaths(paths);\n+    int blockIndex = 0;\n+    PageReadStore store = reader.readNextRowGroup();\n+\n+    while (store != null) {\n+      writer.startBlock(store.getRowCount());\n+      List<ColumnChunkMetaData> columnsInOrder = meta.getBlocks().get(blockIndex).getColumns();\n+      Map<ColumnPath, ColumnDescriptor> descriptorsMap = schema.getColumns().stream().collect(\n+        Collectors.toMap(x -> ColumnPath.get(x.getPath()), x -> x));\n+      ColumnReadStoreImpl crStore = new ColumnReadStoreImpl(store, new DummyGroupConverter(), schema,\n+        meta.getFileMetaData().getCreatedBy());\n+\n+      for (int i = 0; i < columnsInOrder.size(); i += 1) {\n+        ColumnChunkMetaData chunk = columnsInOrder.get(i);\n+        ColumnDescriptor descriptor = descriptorsMap.get(chunk.getPath());\n+        processChunk(descriptor, chunk, crStore, reader, writer, schema, nullifyColumns, maskMode);\n+      }\n+\n+      writer.endBlock();\n+      store = reader.readNextRowGroup();\n+      blockIndex++;\n+    }\n+  }\n+\n+  private void processChunk(ColumnDescriptor descriptor, ColumnChunkMetaData chunk, ColumnReadStoreImpl crStore,\n+                            TransParquetFileReader reader, TransParquetFileWriter writer, MessageType schema,\n+                            Set<ColumnPath> paths, MaskMode maskMode) throws IOException {\n+    reader.setStreamPosition(chunk.getStartingPos());\n+\n+    if (paths.contains(chunk.getPath())) {\n+      if (maskMode.equals(MaskMode.NULLIFY)) {\n+        Type.Repetition repetition = descriptor.getPrimitiveType().getRepetition();\n+        if (repetition.equals(Type.Repetition.REQUIRED)) {\n+          throw new IOException(\"Required column [\" + descriptor.getPrimitiveType().getName() + \"] cannot be nullified\");\n+        }\n+        nullifyColumn(descriptor, chunk, crStore, writer, schema);\n+      } else {\n+        throw new UnsupportedOperationException(\"Only nullify is supported for now\");\n+      }\n+    } else {\n+      BloomFilter bloomFilter = reader.readBloomFilter(chunk);\n+      ColumnIndex columnIndex = reader.readColumnIndex(chunk);\n+      OffsetIndex offsetIndex = reader.readOffsetIndex(chunk);\n+      writer.appendColumnChunk(descriptor, reader.getStream(), chunk, bloomFilter, columnIndex, offsetIndex);\n+    }\n+  }\n+\n+  private void nullifyColumn(ColumnDescriptor descriptor, ColumnChunkMetaData chunk, ColumnReadStoreImpl crStore,\n+                             TransParquetFileWriter writer, MessageType schema) throws IOException {\n+    long totalChunkValues = chunk.getValueCount();\n+    int dMax = descriptor.getMaxDefinitionLevel();\n+    ColumnReader cReader = crStore.getColumnReader(descriptor);\n+\n+    writer.startColumn(descriptor, totalChunkValues, CompressionCodecName.UNCOMPRESSED);\n+\n+    WriterVersion writerVersion = chunk.getEncodingStats().usesV2Pages() ? WriterVersion.PARQUET_2_0 : WriterVersion.PARQUET_1_0;\n+    ParquetProperties props = ParquetProperties.builder()\n+      .withWriterVersion(writerVersion)\n+      .build();\n+    ColumnWriter cWriter = props.newColumnWriteStore(schema, new DummyPageWriterStore()).getColumnWriter(descriptor);\n+\n+    for (int i = 0; i < totalChunkValues; i++) {\n+      int rlvl = cReader.getCurrentRepetitionLevel();\n+      int dlvl = cReader.getCurrentDefinitionLevel();\n+      if (dlvl == dMax) {\n+        // since we checked ether optional or repeated, dlvl should be > 0\n+        if (dlvl == 0) {\n+          throw new IOException(\"definition level is detected to be 0 for column \" + chunk.getPath().toDotString() + \" to be nullified\");\n+        }\n+        // we just write one null for the whole list at the top level, instead of nullify the elements in the list one by one\n+        if (rlvl == 0) {\n+          cWriter.writeNull(rlvl, dlvl - 1);\n+        }\n+      } else {\n+        cWriter.writeNull(rlvl, dlvl);\n+      }\n+    }\n+\n+    BytesInput data = cWriter.concatWriters();", "originalCommit": "485a5b8ef184e1f8c3670c3c3baaa0fc423c6b39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIxMjIxMg==", "url": "https://github.com/apache/parquet-mr/pull/819#discussion_r511212212", "bodyText": "The problem is we need to make the class ColumnChunkPageWriteStore public because we are under the namespace of org.apache.parquet.hadoop.util which cannot use ColumnChunkPageWriteStore for now.", "author": "shangxinli", "createdAt": "2020-10-24T00:31:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyMzU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzNTkyOQ==", "url": "https://github.com/apache/parquet-mr/pull/819#discussion_r511835929", "bodyText": "We already have a lot of classes that are public because of we cannot fine-tune the java visibility but are for internal use only. I would suggest make it public if it is required for your design and comment that it is not for public use. You may want to use the yetus' @Private annotation as well.", "author": "gszadovszky", "createdAt": "2020-10-26T09:51:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyMzU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM3Nzc3OQ==", "url": "https://github.com/apache/parquet-mr/pull/819#discussion_r515377779", "bodyText": "sure", "author": "shangxinli", "createdAt": "2020-10-30T20:52:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyMzU0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "14e42ba9cb98baee1508a50a7d1109a2428bacda", "chunk": "diff --git a/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/util/ColumnMasker.java b/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/util/ColumnMasker.java\nindex c9b2d4c66..4dbcc43d3 100644\n--- a/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/util/ColumnMasker.java\n+++ b/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/util/ColumnMasker.java\n\n@@ -18,9 +18,12 @@\n  */\n package org.apache.parquet.hadoop.util;\n \n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.parquet.bytes.ByteBufferAllocator;\n import org.apache.parquet.bytes.BytesInput;\n import org.apache.parquet.column.ColumnDescriptor;\n import org.apache.parquet.column.ColumnReader;\n+import org.apache.parquet.column.ColumnWriteStore;\n import org.apache.parquet.column.ColumnWriter;\n import org.apache.parquet.column.Encoding;\n import org.apache.parquet.column.ParquetProperties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyNDk1Ng==", "url": "https://github.com/apache/parquet-mr/pull/819#discussion_r510124956", "bodyText": "I am not sure it is a good idea the different modes and throw exceptions that some of them are not supported/implemented. We are heading to the next major release and I think it is not a good user experience to have such features list as if they work properly but they are not implemented yet.", "author": "gszadovszky", "createdAt": "2020-10-22T12:36:36Z", "path": "parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnMaskingCommand.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.parquet.cli.commands;\n+\n+import com.beust.jcommander.Parameter;\n+import com.beust.jcommander.Parameters;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.HadoopReadOptions;\n+import org.apache.parquet.cli.BaseCommand;\n+import org.apache.parquet.hadoop.ParquetFileReader;\n+import org.apache.parquet.hadoop.ParquetFileWriter;\n+import org.apache.parquet.hadoop.metadata.ParquetMetadata;\n+import org.apache.parquet.hadoop.util.ColumnMasker;\n+import org.apache.parquet.hadoop.util.ColumnMasker.MaskMode;\n+import org.apache.parquet.hadoop.util.CompressionConverter.TransParquetFileReader;\n+import org.apache.parquet.hadoop.util.CompressionConverter.TransParquetFileWriter;\n+import org.apache.parquet.hadoop.util.HadoopInputFile;\n+import org.apache.parquet.schema.MessageType;\n+import org.slf4j.Logger;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.apache.parquet.format.converter.ParquetMetadataConverter.NO_FILTER;\n+\n+@Parameters(commandDescription=\"Replace columns with masked values and write to a new Parquet file\")\n+public class ColumnMaskingCommand extends BaseCommand {\n+\n+  private ColumnMasker masker;\n+\n+  public ColumnMaskingCommand(Logger console) {\n+    super(console);\n+    masker = new ColumnMasker();\n+  }\n+\n+  @Parameter(description = \"<mask mode: nullify, hash, redact>\")", "originalCommit": "485a5b8ef184e1f8c3670c3c3baaa0fc423c6b39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg5Njg1Mg==", "url": "https://github.com/apache/parquet-mr/pull/819#discussion_r510896852", "bodyText": "I am not sure it is a good idea the different modes and throw exceptions that some of them are not supported/implemented. We are heading to the next major release and I think it is not a good user experience to have such features list as if they work properly but they are not implemented yet.\n\nSounds good! I will remove unsupported ones from the list.", "author": "shangxinli", "createdAt": "2020-10-23T13:49:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyNDk1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5d65286e4f6a0bc009d04bed8c885bde4ec16659", "chunk": "diff --git a/parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnMaskingCommand.java b/parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnMaskingCommand.java\nindex e88af98b0..877642772 100644\n--- a/parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnMaskingCommand.java\n+++ b/parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnMaskingCommand.java\n\n@@ -61,7 +61,7 @@ public class ColumnMaskingCommand extends BaseCommand {\n   @Parameter(description = \"<output parquet file path>\")\n   String output;\n \n-  @Parameter(description = \"columns to be repalced with masked value\")\n+  @Parameter(description = \"columns to be replaced with masked value\")\n   List<String> cols;\n \n   @Override\n"}}, {"oid": "5d65286e4f6a0bc009d04bed8c885bde4ec16659", "url": "https://github.com/apache/parquet-mr/commit/5d65286e4f6a0bc009d04bed8c885bde4ec16659", "message": "Update parquet-cli/src/main/java/org/apache/parquet/cli/commands/ColumnMaskingCommand.java\n\nCo-authored-by: Gabor Szadovszky <gabor@apache.org>", "committedDate": "2020-10-23T13:39:48Z", "type": "commit"}, {"oid": "14e42ba9cb98baee1508a50a7d1109a2428bacda", "url": "https://github.com/apache/parquet-mr/commit/14e42ba9cb98baee1508a50a7d1109a2428bacda", "message": "Address feedbacks wave #1", "committedDate": "2020-10-30T20:26:33Z", "type": "forcePushed"}, {"oid": "031130d101a01c1b5c8479661c86f57db1953fd7", "url": "https://github.com/apache/parquet-mr/commit/031130d101a01c1b5c8479661c86f57db1953fd7", "message": "Address feedbacks wave #1", "committedDate": "2020-10-30T20:30:30Z", "type": "forcePushed"}, {"oid": "221fec64baa080a7c1e4e16961c8b7d5a8e7d35e", "url": "https://github.com/apache/parquet-mr/commit/221fec64baa080a7c1e4e16961c8b7d5a8e7d35e", "message": "Address feedbacks wave #1", "committedDate": "2020-10-30T20:47:12Z", "type": "forcePushed"}, {"oid": "f3af56557c6cad1971db766ad9c2c925d12c94b2", "url": "https://github.com/apache/parquet-mr/commit/f3af56557c6cad1971db766ad9c2c925d12c94b2", "message": "Address feedbacks wave #1", "committedDate": "2020-10-30T20:53:50Z", "type": "forcePushed"}, {"oid": "02b0e43610478770a3b17263917f37319b3d034e", "url": "https://github.com/apache/parquet-mr/commit/02b0e43610478770a3b17263917f37319b3d034e", "message": "Address feedbacks wave #1", "committedDate": "2020-11-01T02:01:03Z", "type": "commit"}, {"oid": "02b0e43610478770a3b17263917f37319b3d034e", "url": "https://github.com/apache/parquet-mr/commit/02b0e43610478770a3b17263917f37319b3d034e", "message": "Address feedbacks wave #1", "committedDate": "2020-11-01T02:01:03Z", "type": "forcePushed"}, {"oid": "56034b256b84b73ee30809855f677fdb118962a5", "url": "https://github.com/apache/parquet-mr/commit/56034b256b84b73ee30809855f677fdb118962a5", "message": "Add fix like PARQUET-1910", "committedDate": "2020-11-01T15:15:30Z", "type": "commit"}, {"oid": "45462992c5a8cffaa5f647d06e724ac0daee427f", "url": "https://github.com/apache/parquet-mr/commit/45462992c5a8cffaa5f647d06e724ac0daee427f", "message": "Fix sample", "committedDate": "2020-11-01T15:58:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyNDEyNg==", "url": "https://github.com/apache/parquet-mr/pull/819#discussion_r515924126", "bodyText": "Is it intentional to have named arguments (e.g. -c --columns) in cli but have only positioned ones for tools?", "author": "gszadovszky", "createdAt": "2020-11-02T11:58:35Z", "path": "parquet-tools/src/main/java/org/apache/parquet/tools/command/ColumnMaskingCommand.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.tools.command;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.HadoopReadOptions;\n+import org.apache.parquet.hadoop.ParquetFileReader;\n+import org.apache.parquet.hadoop.ParquetFileWriter;\n+import org.apache.parquet.hadoop.metadata.ParquetMetadata;\n+import org.apache.parquet.hadoop.util.ColumnMasker;\n+import org.apache.parquet.hadoop.util.CompressionConverter.TransParquetFileReader;\n+import org.apache.parquet.hadoop.util.HadoopInputFile;\n+import org.apache.parquet.schema.MessageType;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.apache.parquet.format.converter.ParquetMetadataConverter.NO_FILTER;\n+import org.apache.parquet.hadoop.util.ColumnMasker.MaskMode;\n+import org.apache.parquet.hadoop.util.CompressionConverter.TransParquetFileWriter;\n+\n+public class ColumnMaskingCommand extends ArgsOnlyCommand {", "originalCommit": "45462992c5a8cffaa5f647d06e724ac0daee427f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgwMTk4MQ==", "url": "https://github.com/apache/parquet-mr/pull/819#discussion_r516801981", "bodyText": "Yes. I added the named arguments for cli because of PARQUET-1910. For tools, I see no other commands added. So just follow the pattern.", "author": "shangxinli", "createdAt": "2020-11-03T16:35:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyNDEyNg=="}], "type": "inlineReview", "revised_code": {"commit": "118ada2ac1b2a5cc21db30c2b0c74cc8ccc535ff", "chunk": "diff --git a/parquet-tools/src/main/java/org/apache/parquet/tools/command/ColumnMaskingCommand.java b/parquet-tools/src/main/java/org/apache/parquet/tools/command/ColumnMaskingCommand.java\nindex 5c3f483cf..aba0dc735 100644\n--- a/parquet-tools/src/main/java/org/apache/parquet/tools/command/ColumnMaskingCommand.java\n+++ b/parquet-tools/src/main/java/org/apache/parquet/tools/command/ColumnMaskingCommand.java\n\n@@ -31,11 +31,9 @@ import org.apache.parquet.hadoop.util.HadoopInputFile;\n import org.apache.parquet.schema.MessageType;\n \n import java.util.List;\n-import java.util.Set;\n \n import static org.apache.parquet.format.converter.ParquetMetadataConverter.NO_FILTER;\n import org.apache.parquet.hadoop.util.ColumnMasker.MaskMode;\n-import org.apache.parquet.hadoop.util.CompressionConverter.TransParquetFileWriter;\n \n public class ColumnMaskingCommand extends ArgsOnlyCommand {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyNTQzMw==", "url": "https://github.com/apache/parquet-mr/pull/819#discussion_r515925433", "bodyText": "Does not seem to be used anymore.", "author": "gszadovszky", "createdAt": "2020-11-02T12:01:20Z", "path": "parquet-column/src/main/java/org/apache/parquet/column/ColumnWriter.java", "diffHunk": "@@ -91,5 +92,11 @@\n    * @return the number of bytes of memory used to buffer the current data\n    */\n   long getBufferedSizeInMemory();\n+\n+  /**\n+   * concat all the values writer in the order of repetitionLevel writer, definitionLevel writer, and data writer\n+   * @return combined values in the type of ByteInput\n+   */\n+  BytesInput concatWriters();", "originalCommit": "45462992c5a8cffaa5f647d06e724ac0daee427f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc3MzI3OA==", "url": "https://github.com/apache/parquet-mr/pull/819#discussion_r516773278", "bodyText": "yes, leftovers", "author": "shangxinli", "createdAt": "2020-11-03T15:55:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyNTQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgwMDg3NA==", "url": "https://github.com/apache/parquet-mr/pull/819#discussion_r516800874", "bodyText": "I will remove", "author": "shangxinli", "createdAt": "2020-11-03T16:33:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyNTQzMw=="}], "type": "inlineReview", "revised_code": {"commit": "118ada2ac1b2a5cc21db30c2b0c74cc8ccc535ff", "chunk": "diff --git a/parquet-column/src/main/java/org/apache/parquet/column/ColumnWriter.java b/parquet-column/src/main/java/org/apache/parquet/column/ColumnWriter.java\nindex 11b3e4a60..b0a1fa8e2 100644\n--- a/parquet-column/src/main/java/org/apache/parquet/column/ColumnWriter.java\n+++ b/parquet-column/src/main/java/org/apache/parquet/column/ColumnWriter.java\n\n@@ -92,11 +92,5 @@ public interface ColumnWriter {\n    * @return the number of bytes of memory used to buffer the current data\n    */\n   long getBufferedSizeInMemory();\n-\n-  /**\n-   * concat all the values writer in the order of repetitionLevel writer, definitionLevel writer, and data writer\n-   * @return combined values in the type of ByteInput\n-   */\n-  BytesInput concatWriters();\n }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAxODAwNw==", "url": "https://github.com/apache/parquet-mr/pull/819#discussion_r516018007", "bodyText": "Cannot see the purpose of this class. Its constructor invokes a public (however deprecated) constructor and does not add any functionality.\nIf the purpose is to hide the usage of the deprecated constructor (so it will use the default values for a couple of arguments) a simple factory method would be a better choice. Also, I would suggest commenting why you invoke that deprecated constructor.", "author": "gszadovszky", "createdAt": "2020-11-02T14:42:26Z", "path": "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/util/CompressionConverter.java", "diffHunk": "@@ -267,5 +275,19 @@ public PageHeader readPageHeader() throws IOException {\n     public long getPos() throws IOException {\n       return f.getPos();\n     }\n+\n+    public SeekableInputStream getStream() {\n+      return f;\n+    }\n+  }\n+\n+  public static final class TransParquetFileWriter extends ParquetFileWriter {", "originalCommit": "45462992c5a8cffaa5f647d06e724ac0daee427f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc3MjU0Nw==", "url": "https://github.com/apache/parquet-mr/pull/819#discussion_r516772547", "bodyText": "It is a left over. I will remove it.", "author": "shangxinli", "createdAt": "2020-11-03T15:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAxODAwNw=="}], "type": "inlineReview", "revised_code": {"commit": "118ada2ac1b2a5cc21db30c2b0c74cc8ccc535ff", "chunk": "diff --git a/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/util/CompressionConverter.java b/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/util/CompressionConverter.java\nindex 8bf933596..c77674d8c 100644\n--- a/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/util/CompressionConverter.java\n+++ b/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/util/CompressionConverter.java\n\n@@ -280,14 +273,4 @@ public class CompressionConverter {\n       return f;\n     }\n   }\n-\n-  public static final class TransParquetFileWriter extends ParquetFileWriter {\n-\n-    public TransParquetFileWriter(Configuration configuration, MessageType schema,\n-                             Path file, Mode mode) throws IOException {\n-      super(configuration, schema, file, mode);\n-    }\n-\n-\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAxODI0Ng==", "url": "https://github.com/apache/parquet-mr/pull/819#discussion_r516018246", "bodyText": "Please, remove the unused imports.", "author": "gszadovszky", "createdAt": "2020-11-02T14:42:44Z", "path": "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/util/CompressionConverter.java", "diffHunk": "@@ -53,10 +56,15 @@\n import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n \n+import static org.apache.parquet.hadoop.ParquetWriter.DEFAULT_BLOCK_SIZE;\n+import static org.apache.parquet.hadoop.ParquetWriter.MAX_PADDING_SIZE_DEFAULT;", "originalCommit": "45462992c5a8cffaa5f647d06e724ac0daee427f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc2Njk5Nw==", "url": "https://github.com/apache/parquet-mr/pull/819#discussion_r516766997", "bodyText": "Sounds good!", "author": "shangxinli", "createdAt": "2020-11-03T15:47:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAxODI0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "118ada2ac1b2a5cc21db30c2b0c74cc8ccc535ff", "chunk": "diff --git a/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/util/CompressionConverter.java b/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/util/CompressionConverter.java\nindex 8bf933596..c77674d8c 100644\n--- a/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/util/CompressionConverter.java\n+++ b/parquet-hadoop/src/main/java/org/apache/parquet/hadoop/util/CompressionConverter.java\n\n@@ -56,15 +54,10 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n \n-import static org.apache.parquet.hadoop.ParquetWriter.DEFAULT_BLOCK_SIZE;\n-import static org.apache.parquet.hadoop.ParquetWriter.MAX_PADDING_SIZE_DEFAULT;\n-\n public class CompressionConverter {\n \n   private static final Logger LOG = LoggerFactory.getLogger(CompressionConverter.class);\n"}}, {"oid": "118ada2ac1b2a5cc21db30c2b0c74cc8ccc535ff", "url": "https://github.com/apache/parquet-mr/commit/118ada2ac1b2a5cc21db30c2b0c74cc8ccc535ff", "message": "Address feedback wave#2", "committedDate": "2020-11-03T17:02:27Z", "type": "commit"}]}