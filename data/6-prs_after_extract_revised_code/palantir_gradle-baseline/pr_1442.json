{"pr_number": 1442, "pr_title": "Disable FallThrough on Java 14 for switch expressions", "pr_createdAt": "2020-06-30T20:47:22Z", "pr_url": "https://github.com/palantir/gradle-baseline/pull/1442", "timeline": [{"oid": "81c3351af9ff97341b2d89e40867a6acf9a56a75", "url": "https://github.com/palantir/gradle-baseline/commit/81c3351af9ff97341b2d89e40867a6acf9a56a75", "message": "Disable FallThrough on Java 14 for switch expressions", "committedDate": "2020-06-30T20:45:30Z", "type": "commit"}, {"oid": "eb2d7700baf14be1bc9b44ec5a940c232715a093", "url": "https://github.com/palantir/gradle-baseline/commit/eb2d7700baf14be1bc9b44ec5a940c232715a093", "message": "Add generated changelog entries", "committedDate": "2020-06-30T20:45:30Z", "type": "commit"}, {"oid": "69b744aa2923ed76c013c9793842764287c1d632", "url": "https://github.com/palantir/gradle-baseline/commit/69b744aa2923ed76c013c9793842764287c1d632", "message": "Add generated changelog entries", "committedDate": "2020-06-30T20:45:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2OTc0MQ==", "url": "https://github.com/palantir/gradle-baseline/pull/1442#discussion_r447969741", "bodyText": "I had to use Diagnostic matches and expectErrorMessage because otherwise the diagnostic message matches the magic comment that will suppress the check.\nhttps://github.com/google/error-prone/blob/v2.4.0/core/src/main/java/com/google/errorprone/bugpatterns/FallThrough.java#L45-L46", "author": "pkoenig10", "createdAt": "2020-06-30T20:48:46Z", "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/FallThroughTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.errorprone.CompilationTestHelper;\n+import com.google.errorprone.bugpatterns.FallThrough;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.DisabledForJreRange;\n+import org.junit.jupiter.api.condition.JRE;\n+\n+public class FallThroughTest {\n+\n+    @Test\n+    @DisabledForJreRange(max = JRE.JAVA_13)\n+    public void testSwitchExpression() {\n+        CompilationTestHelper compilationHelper = CompilationTestHelper.newInstance(FallThrough.class, getClass())\n+                .setArgs(ImmutableList.of(\"--enable-preview\", \"--release\", \"14\"));\n+\n+        compilationHelper\n+                .addSourceLines(\n+                        \"Test.java\",\n+                        \"class Test {\",\n+                        \"  static void foo(int value) {\",\n+                        \"    switch (value) {\",\n+                        \"      case 42 -> {}\",\n+                        \"      // BUG: Diagnostic matches: X\",\n+                        \"      default -> {}\",\n+                        \"    };\",\n+                        \"  }\",\n+                        \"}\")\n+                .expectErrorMessage(\"X\", input -> input.contains(\"Execution may fall through from the previous case\"))", "originalCommit": "81c3351af9ff97341b2d89e40867a6acf9a56a75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}