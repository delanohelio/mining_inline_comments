{"pr_number": 1262, "pr_title": "BaselineExactDependencies applies to all source sets", "pr_createdAt": "2020-02-26T21:31:40Z", "pr_url": "https://github.com/palantir/gradle-baseline/pull/1262", "timeline": [{"oid": "7f56d14587feeb6fe3c66fc97511b9da143ce753", "url": "https://github.com/palantir/gradle-baseline/commit/7f56d14587feeb6fe3c66fc97511b9da143ce753", "message": "checkUnusedDependencies ignores all sourceSets compileOnly configuration", "committedDate": "2020-02-26T21:02:45Z", "type": "commit"}, {"oid": "000b180b6a722f3d8140f5e94b10d1fa1f3cfd81", "url": "https://github.com/palantir/gradle-baseline/commit/000b180b6a722f3d8140f5e94b10d1fa1f3cfd81", "message": "on all source sets", "committedDate": "2020-02-26T21:29:43Z", "type": "commit"}, {"oid": "d599b2dcdb8bced9eb982011cd6549850223fc30", "url": "https://github.com/palantir/gradle-baseline/commit/d599b2dcdb8bced9eb982011cd6549850223fc30", "message": "Add generated changelog entries", "committedDate": "2020-02-26T21:29:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MDIzOA==", "url": "https://github.com/palantir/gradle-baseline/pull/1262#discussion_r385090238", "bodyText": "this should be per source set", "author": "dansanduleac", "createdAt": "2020-02-27T12:16:32Z", "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineExactDependencies.java", "diffHunk": "@@ -60,47 +63,65 @@\n     @Override\n     public void apply(Project project) {\n         project.getPluginManager().withPlugin(\"java\", plugin -> {\n-            SourceSet mainSourceSet = project.getConvention()\n+            TaskProvider<Task> checkUnusedDependencies = project.getTasks().register(\"checkUnusedDependencies\");\n+            TaskProvider<Task> checkImplicitDependencies = project.getTasks().register(\"checkImplicitDependencies\");\n+\n+            project.getConvention()\n                     .getPlugin(JavaPluginConvention.class)\n                     .getSourceSets()\n-                    .getByName(SourceSet.MAIN_SOURCE_SET_NAME);\n-            Configuration compileClasspath =\n-                    project.getConfigurations().getByName(JavaPlugin.COMPILE_CLASSPATH_CONFIGURATION_NAME);\n-            Configuration compileOnly =\n-                    project.getConfigurations().getByName(JavaPlugin.COMPILE_ONLY_CONFIGURATION_NAME);\n-            Configuration justCompileOnlyResolvable = project.getConfigurations()\n-                    .create(\"baseline-exact-dependencies-compileOnly\", conf -> {\n-                        conf.setVisible(false);\n-                        conf.setCanBeConsumed(false);\n-                        conf.extendsFrom(compileOnly);\n-                        // Important! this ensures we resolve 'compile' variants rather than 'runtime'\n-                        // This is the same attribute that's being set on compileClasspath\n-                        conf.getAttributes()\n-                                .attribute(\n-                                        Usage.USAGE_ATTRIBUTE,\n-                                        project.getObjects().named(Usage.class, Usage.JAVA_API));\n-                    });\n-\n-            project.getTasks().create(\"checkUnusedDependencies\", CheckUnusedDependenciesTask.class, task -> {\n-                task.dependsOn(JavaPlugin.CLASSES_TASK_NAME);\n-                task.setSourceClasses(mainSourceSet.getOutput().getClassesDirs());\n-                task.dependenciesConfiguration(compileClasspath);\n-                task.sourceOnlyConfiguration(justCompileOnlyResolvable);\n-\n-                // this is liberally applied to ease the Java8 -> 11 transition\n-                task.ignore(\"javax.annotation\", \"javax.annotation-api\");\n-            });\n-\n-            project.getTasks().create(\"checkImplicitDependencies\", CheckImplicitDependenciesTask.class, task -> {\n-                task.dependsOn(JavaPlugin.CLASSES_TASK_NAME);\n-                task.setSourceClasses(mainSourceSet.getOutput().getClassesDirs());\n-                task.dependenciesConfiguration(compileClasspath);\n-\n-                task.ignore(\"org.slf4j\", \"slf4j-api\");\n-            });\n+                    .forEach(sourceSet ->\n+                            configureSourceSet(project, sourceSet, checkUnusedDependencies, checkImplicitDependencies));\n         });\n     }\n \n+    private static void configureSourceSet(\n+            Project project,\n+            SourceSet sourceSet,\n+            TaskProvider<Task> checkUnusedDependencies,\n+            TaskProvider<Task> checkImplicitDependencies) {\n+        Configuration compileClasspath =\n+                project.getConfigurations().getByName(sourceSet.getCompileClasspathConfigurationName());\n+        Configuration compileOnly = project.getConfigurations().getByName(sourceSet.getCompileOnlyConfigurationName());\n+        Configuration resolvableCompileOnly = project.getConfigurations()\n+                .create(\"baseline-exact-dependencies-\" + sourceSet.getCompileOnlyConfigurationName(), conf -> {\n+                    conf.setVisible(false);\n+                    conf.setCanBeConsumed(false);\n+                    conf.extendsFrom(compileOnly);\n+                    // Important! this ensures we resolve 'compile' variants rather than\n+                    // 'runtime'\n+                    // This is the same attribute that's being set on compileClasspath\n+                    conf.getAttributes()\n+                            .attribute(\n+                                    Usage.USAGE_ATTRIBUTE, project.getObjects().named(Usage.class, Usage.JAVA_API));\n+                });\n+        TaskProvider<CheckUnusedDependenciesTask> sourceSetUnusedDependencies = project.getTasks()\n+                .register(\n+                        GUtil.toLowerCamelCase(\"checkUnusedDependencies \" + sourceSet.getName()),\n+                        CheckUnusedDependenciesTask.class,\n+                        task -> {\n+                            task.dependsOn(JavaPlugin.CLASSES_TASK_NAME);", "originalCommit": "d599b2dcdb8bced9eb982011cd6549850223fc30", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df86f65647974064850ef5e5c0e1df643a546574", "chunk": "diff --git a/gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineExactDependencies.java b/gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineExactDependencies.java\nindex 591521c9..e3abb650 100644\n--- a/gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineExactDependencies.java\n+++ b/gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineExactDependencies.java\n\n@@ -99,7 +98,7 @@ public final class BaselineExactDependencies implements Plugin<Project> {\n                         GUtil.toLowerCamelCase(\"checkUnusedDependencies \" + sourceSet.getName()),\n                         CheckUnusedDependenciesTask.class,\n                         task -> {\n-                            task.dependsOn(JavaPlugin.CLASSES_TASK_NAME);\n+                            task.dependsOn(sourceSet.getClassesTaskName());\n                             task.setSourceClasses(sourceSet.getOutput().getClassesDirs());\n                             task.dependenciesConfiguration(compileClasspath);\n                             task.sourceOnlyConfiguration(resolvableCompileOnly);\n"}}, {"oid": "df86f65647974064850ef5e5c0e1df643a546574", "url": "https://github.com/palantir/gradle-baseline/commit/df86f65647974064850ef5e5c0e1df643a546574", "message": "source set classes", "committedDate": "2020-02-27T12:18:21Z", "type": "commit"}, {"oid": "bc8e9e2cca856833a02d3d8775c9641378a8953f", "url": "https://github.com/palantir/gradle-baseline/commit/bc8e9e2cca856833a02d3d8775c9641378a8953f", "message": "comment", "committedDate": "2020-02-27T12:21:48Z", "type": "commit"}, {"oid": "3f16f85ada959a12cc2d14508605e6d4c70df705", "url": "https://github.com/palantir/gradle-baseline/commit/3f16f85ada959a12cc2d14508605e6d4c70df705", "message": "fail if trying to add unresolvable sourceOnlyConfiguration", "committedDate": "2020-02-27T12:27:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5NjEyNA==", "url": "https://github.com/palantir/gradle-baseline/pull/1262#discussion_r385096124", "bodyText": "To be fair this method shouldn't exist, because I don't know in what situation users might actually use it.\nThe name is confusing now too since it implies source-only configurations need to be added, but we already add (ignore) all compileOnly configurations from all source sets.\nBut for now, let's at least throw eagerly if the user gave us a bad configuration.", "author": "dansanduleac", "createdAt": "2020-02-27T12:29:51Z", "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/CheckUnusedDependenciesTask.java", "diffHunk": "@@ -190,6 +191,11 @@ public final void dependenciesConfiguration(Configuration dependenciesConfigurat\n     }\n \n     public final void sourceOnlyConfiguration(Configuration configuration) {\n+        Preconditions.checkNotNull(configuration);\n+        Preconditions.checkArgument(\n+                configuration.isCanBeResolved(),\n+                \"May only add sourceOnlyConfiguration if it is resolvable: %s\",\n+                configuration);", "originalCommit": "3f16f85ada959a12cc2d14508605e6d4c70df705", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "82c3df450a6789f31a96ab59758f732d560461d8", "chunk": "diff --git a/gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/CheckUnusedDependenciesTask.java b/gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/CheckUnusedDependenciesTask.java\nindex adbba4f8..3deb8193 100644\n--- a/gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/CheckUnusedDependenciesTask.java\n+++ b/gradle-baseline-java/src/main/groovy/com/palantir/baseline/tasks/CheckUnusedDependenciesTask.java\n\n@@ -191,7 +191,7 @@ public class CheckUnusedDependenciesTask extends DefaultTask {\n     }\n \n     public final void sourceOnlyConfiguration(Configuration configuration) {\n-        Preconditions.checkNotNull(configuration);\n+        Preconditions.checkNotNull(configuration, \"This method requires a non-null configuration\");\n         Preconditions.checkArgument(\n                 configuration.isCanBeResolved(),\n                 \"May only add sourceOnlyConfiguration if it is resolvable: %s\",\n"}}, {"oid": "82c3df450a6789f31a96ab59758f732d560461d8", "url": "https://github.com/palantir/gradle-baseline/commit/82c3df450a6789f31a96ab59758f732d560461d8", "message": "sigh", "committedDate": "2020-02-27T12:30:54Z", "type": "commit"}, {"oid": "4f1fae622f019512e9baadcc851b8f230ce3d6fb", "url": "https://github.com/palantir/gradle-baseline/commit/4f1fae622f019512e9baadcc851b8f230ce3d6fb", "message": "abstract out  makeInternalCompileConfiguration", "committedDate": "2020-02-27T16:38:22Z", "type": "commit"}, {"oid": "d8473df44de9869f779e4cafbdf31f40d2296b80", "url": "https://github.com/palantir/gradle-baseline/commit/d8473df44de9869f779e4cafbdf31f40d2296b80", "message": "only explicit direct dependencies", "committedDate": "2020-02-28T11:54:37Z", "type": "commit"}, {"oid": "55c0f2b9198654c8d87a42a111806ca21cef596e", "url": "https://github.com/palantir/gradle-baseline/commit/55c0f2b9198654c8d87a42a111806ca21cef596e", "message": "delete unused", "committedDate": "2020-02-28T11:57:09Z", "type": "commit"}, {"oid": "8e58b4a7f765064c5560b5ca7b7e25400065f7d1", "url": "https://github.com/palantir/gradle-baseline/commit/8e58b4a7f765064c5560b5ca7b7e25400065f7d1", "message": "fix null pointer bug", "committedDate": "2020-02-28T12:02:46Z", "type": "commit"}, {"oid": "6bdc909f80b746aa03bfda5981ed2331ea07d630", "url": "https://github.com/palantir/gradle-baseline/commit/6bdc909f80b746aa03bfda5981ed2331ea07d630", "message": "garbaggio", "committedDate": "2020-02-28T14:48:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2MTI0Nw==", "url": "https://github.com/palantir/gradle-baseline/pull/1262#discussion_r385761247", "bodyText": "Can we write a test for this?", "author": "CRogers", "createdAt": "2020-02-28T15:32:31Z", "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineExactDependencies.java", "diffHunk": "@@ -60,45 +65,100 @@\n     @Override\n     public void apply(Project project) {\n         project.getPluginManager().withPlugin(\"java\", plugin -> {\n-            SourceSet mainSourceSet = project.getConvention()\n+            TaskProvider<Task> checkUnusedDependencies = project.getTasks().register(\"checkUnusedDependencies\");\n+            TaskProvider<Task> checkImplicitDependencies = project.getTasks().register(\"checkImplicitDependencies\");\n+\n+            project.getConvention()\n                     .getPlugin(JavaPluginConvention.class)\n                     .getSourceSets()\n-                    .getByName(SourceSet.MAIN_SOURCE_SET_NAME);\n-            Configuration compileClasspath =\n-                    project.getConfigurations().getByName(JavaPlugin.COMPILE_CLASSPATH_CONFIGURATION_NAME);\n-            Configuration compileOnly =\n-                    project.getConfigurations().getByName(JavaPlugin.COMPILE_ONLY_CONFIGURATION_NAME);\n-            Configuration justCompileOnlyResolvable = project.getConfigurations()\n-                    .create(\"baseline-exact-dependencies-compileOnly\", conf -> {\n-                        conf.setVisible(false);\n-                        conf.setCanBeConsumed(false);\n-                        conf.extendsFrom(compileOnly);\n-                        // Important! this ensures we resolve 'compile' variants rather than 'runtime'\n-                        // This is the same attribute that's being set on compileClasspath\n-                        conf.getAttributes()\n-                                .attribute(\n-                                        Usage.USAGE_ATTRIBUTE,\n-                                        project.getObjects().named(Usage.class, Usage.JAVA_API));\n-                    });\n-\n-            project.getTasks().create(\"checkUnusedDependencies\", CheckUnusedDependenciesTask.class, task -> {\n-                task.dependsOn(JavaPlugin.CLASSES_TASK_NAME);\n-                task.setSourceClasses(mainSourceSet.getOutput().getClassesDirs());\n-                task.dependenciesConfiguration(compileClasspath);\n-                task.sourceOnlyConfiguration(justCompileOnlyResolvable);\n-\n-                // this is liberally applied to ease the Java8 -> 11 transition\n-                task.ignore(\"javax.annotation\", \"javax.annotation-api\");\n-            });\n+                    .all(sourceSet ->\n+                            configureSourceSet(project, sourceSet, checkUnusedDependencies, checkImplicitDependencies));\n+        });\n+    }\n \n-            project.getTasks().create(\"checkImplicitDependencies\", CheckImplicitDependenciesTask.class, task -> {\n-                task.dependsOn(JavaPlugin.CLASSES_TASK_NAME);\n-                task.setSourceClasses(mainSourceSet.getOutput().getClassesDirs());\n-                task.dependenciesConfiguration(compileClasspath);\n+    private static void configureSourceSet(\n+            Project project,\n+            SourceSet sourceSet,\n+            TaskProvider<Task> checkUnusedDependencies,\n+            TaskProvider<Task> checkImplicitDependencies) {\n+        Configuration implementation =\n+                project.getConfigurations().getByName(sourceSet.getImplementationConfigurationName());\n+        Configuration compile = project.getConfigurations().getByName(sourceSet.getCompileConfigurationName());\n+        Configuration compileClasspath =\n+                project.getConfigurations().getByName(sourceSet.getCompileClasspathConfigurationName());\n \n-                task.ignore(\"org.slf4j\", \"slf4j-api\");\n-            });\n+        Configuration explicitCompile = project.getConfigurations()\n+                .create(\"baseline-exact-dependencies-\" + sourceSet.getName(), conf -> {\n+                    conf.setDescription(String.format(\n+                            \"Tracks the explicit (not inherited) dependencies added to either %s or %s\",\n+                            compile.toString(), implementation.toString()));\n+                    conf.setVisible(false);\n+                    conf.setCanBeConsumed(false);\n+                    // Important! this ensures we resolve 'compile' variants rather than 'runtime'\n+                    // This is the same attribute that's being set on compileClasspath\n+                    conf.getAttributes()\n+                            .attribute(\n+                                    Usage.USAGE_ATTRIBUTE, project.getObjects().named(Usage.class, Usage.JAVA_API));\n+                });\n+\n+        // Figure out what our compile dependencies are while ignoring dependencies we've inherited from other source\n+        // sets. For example, if we are `test`, some of our configurations extend from the `main` source set:\n+        // testImplementation     extendsFrom(implementation)\n+        //  \\-- testCompile       extendsFrom(compile)\n+        // We therefore want to look at only the dependencies _directly_ declared in the implementation and compile\n+        // configurations (belonging to our source set)", "originalCommit": "6bdc909f80b746aa03bfda5981ed2331ea07d630", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2ODkzMg==", "url": "https://github.com/palantir/gradle-baseline/pull/1262#discussion_r385768932", "bodyText": "Yep, wrote one", "author": "dansanduleac", "createdAt": "2020-02-28T15:45:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2MTI0Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "29f4c912d07d898374b20108cf45d1aa7a07fb49", "url": "https://github.com/palantir/gradle-baseline/commit/29f4c912d07d898374b20108cf45d1aa7a07fb49", "message": "test", "committedDate": "2020-02-28T15:43:08Z", "type": "commit"}]}