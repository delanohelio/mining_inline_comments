{"pr_number": 1355, "pr_title": "Strict unused variable enforces lambda parameters", "pr_createdAt": "2020-05-27T19:08:53Z", "pr_url": "https://github.com/palantir/gradle-baseline/pull/1355", "timeline": [{"oid": "2d984e4d28a62829d112b2c5ae47132ac34512dd", "url": "https://github.com/palantir/gradle-baseline/commit/2d984e4d28a62829d112b2c5ae47132ac34512dd", "message": "strict unused variable enforces lambda parameters", "committedDate": "2020-05-27T19:07:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4MDg0MA==", "url": "https://github.com/palantir/gradle-baseline/pull/1355#discussion_r431380840", "bodyText": "might be nice to log the symbol and the method if we're gonna throw? :)", "author": "dansanduleac", "createdAt": "2020-05-27T19:11:54Z", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/StrictUnusedVariable.java", "diffHunk": "@@ -472,11 +479,34 @@ public Boolean visitEnhancedForLoop(EnhancedForLoopTree tree, Void unused) {\n         return ImmutableList.of(fix.build());\n     }\n \n+    private static ImmutableList<SuggestedFix> buildUnusedLambdaParameterFix(\n+            Symbol.VarSymbol _symbol, Collection<UnusedSpec> values, VisitorState state) {\n+        SuggestedFix.Builder fix = SuggestedFix.builder();\n+\n+        for (UnusedSpec unusedSpec : values) {\n+            Tree leaf = unusedSpec.variableTree().getLeaf();\n+            if (!(leaf instanceof VariableTree)) {\n+                continue;\n+            }\n+\n+            VariableTree tree = (VariableTree) leaf;\n+            if (state.getEndPosition(tree.getType()) == -1) {\n+                fix.replace(tree, \"_\" + tree.getName());\n+            } else {\n+                int startPos = state.getEndPosition(tree.getType()) + 1;\n+                int endPos = state.getEndPosition(tree);\n+                fix.replace(startPos, endPos, \"_\" + tree.getName());\n+            }\n+        }\n+\n+        return ImmutableList.of(fix.build());\n+    }\n+\n     private static ImmutableList<SuggestedFix> buildUnusedParameterFixes(\n-            Symbol varSymbol, List<TreePath> usagePaths, VisitorState state) {\n-        Symbol.MethodSymbol methodSymbol = (Symbol.MethodSymbol) varSymbol.owner;\n+            Symbol varSymbol, Symbol.MethodSymbol methodSymbol, List<TreePath> usagePaths, VisitorState state) {\n         boolean isPrivateMethod = methodSymbol.getModifiers().contains(Modifier.PRIVATE);\n         int index = methodSymbol.params.indexOf(varSymbol);\n+        Preconditions.checkState(index != -1, \"symbol must be a parameter to the owning method\");", "originalCommit": "2d984e4d28a62829d112b2c5ae47132ac34512dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4ac26c330b839d478f265c980c21fb1db388827", "chunk": "diff --git a/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/StrictUnusedVariable.java b/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/StrictUnusedVariable.java\nindex 756cdf6d..c9773335 100644\n--- a/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/StrictUnusedVariable.java\n+++ b/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/StrictUnusedVariable.java\n\n@@ -506,7 +508,7 @@ public final class StrictUnusedVariable extends BugChecker implements BugChecker\n             Symbol varSymbol, Symbol.MethodSymbol methodSymbol, List<TreePath> usagePaths, VisitorState state) {\n         boolean isPrivateMethod = methodSymbol.getModifiers().contains(Modifier.PRIVATE);\n         int index = methodSymbol.params.indexOf(varSymbol);\n-        Preconditions.checkState(index != -1, \"symbol must be a parameter to the owning method\");\n+        Preconditions.checkState(index != -1, \"symbol {} must be a parameter to the owning method\", varSymbol);\n         SuggestedFix.Builder fix = SuggestedFix.builder();\n         for (TreePath path : usagePaths) {\n             fix.delete(path.getLeaf());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4MTc0OQ==", "url": "https://github.com/palantir/gradle-baseline/pull/1355#discussion_r431381749", "bodyText": "I'd maybe use one of them to check that it only renames the other one", "author": "dansanduleac", "createdAt": "2020-05-27T19:13:00Z", "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/StrictUnusedVariableTest.java", "diffHunk": "@@ -133,6 +151,30 @@ public void renames_unused_param() {\n                 .doTest(TestMode.TEXT_MATCH);\n     }\n \n+    @Test\n+    void renames_unused_lambda_params() {\n+        refactoringTestHelper\n+                .addInputLines(\n+                        \"Test.java\",\n+                        \"import java.util.function.BiFunction;\",\n+                        \"class Test {\",\n+                        \"  private static BiFunction<String, String, Integer> doStuff() {\",\n+                        \"    BiFunction<String, String, Integer> first = (String value1, String value2) -> 1;\",", "originalCommit": "2d984e4d28a62829d112b2c5ae47132ac34512dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "e4ac26c330b839d478f265c980c21fb1db388827", "url": "https://github.com/palantir/gradle-baseline/commit/e4ac26c330b839d478f265c980c21fb1db388827", "message": "CR", "committedDate": "2020-05-27T19:16:39Z", "type": "commit"}, {"oid": "3fb305ad71d38ca960f1da3f6313de4db89694d4", "url": "https://github.com/palantir/gradle-baseline/commit/3fb305ad71d38ca960f1da3f6313de4db89694d4", "message": "Add generated changelog entries", "committedDate": "2020-05-27T19:16:39Z", "type": "commit"}, {"oid": "344d32c6f5cea362eb85e301191be65159d32ca2", "url": "https://github.com/palantir/gradle-baseline/commit/344d32c6f5cea362eb85e301191be65159d32ca2", "message": "ugh", "committedDate": "2020-05-27T19:21:52Z", "type": "commit"}, {"oid": "8c20117bbc28e692cb0fe18ec29b8e1e31636bdc", "url": "https://github.com/palantir/gradle-baseline/commit/8c20117bbc28e692cb0fe18ec29b8e1e31636bdc", "message": "Merge branch 'fo/unused-lambda-params' of github.com:palantir/gradle-baseline into fo/unused-lambda-params", "committedDate": "2020-05-27T19:21:58Z", "type": "commit"}]}