{"pr_number": 1492, "pr_title": "BuilderPrivateConstructor error prone rule", "pr_createdAt": "2020-09-14T18:27:05Z", "pr_url": "https://github.com/palantir/gradle-baseline/pull/1492", "timeline": [{"oid": "ea6f538d31f8e8ee1da0f488ad4aaca326fb0580", "url": "https://github.com/palantir/gradle-baseline/commit/ea6f538d31f8e8ee1da0f488ad4aaca326fb0580", "message": "BuilderPrivateConstructor error prone rule", "committedDate": "2020-09-14T18:05:39Z", "type": "commit"}, {"oid": "9bd43c190f99c03f4e0ff691d675797e56990e5b", "url": "https://github.com/palantir/gradle-baseline/commit/9bd43c190f99c03f4e0ff691d675797e56990e5b", "message": "better constructor placement", "committedDate": "2020-09-14T18:24:23Z", "type": "commit"}, {"oid": "1278fc616fb56d13dfc3b298b309b14d2d3bc741", "url": "https://github.com/palantir/gradle-baseline/commit/1278fc616fb56d13dfc3b298b309b14d2d3bc741", "message": "Add generated changelog entries", "committedDate": "2020-09-14T18:21:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNDE3OA==", "url": "https://github.com/palantir/gradle-baseline/pull/1492#discussion_r488204178", "bodyText": "possible endsWith? I'm thinking we might want to catch some classes like FooBuilder or SimpleBuilder?", "author": "iamdanfox", "createdAt": "2020-09-14T20:35:09Z", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/BuilderPrivateConstructor.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.common.collect.Iterables;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.MethodTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import com.sun.tools.javac.code.Symbol.ClassSymbol;\n+import com.sun.tools.javac.code.Symbol.MethodSymbol;\n+import com.sun.tools.javac.tree.JCTree;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.Modifier;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"BuilderPrivateConstructor\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = BugPattern.SeverityLevel.WARNING,\n+        summary = \"A Builder with a static factory method on the encapsulating class must have a private constructor. \"\n+                + \"Minimizing unnecessary public API prevents future API breaks from impacting consumers. \")\n+public final class BuilderPrivateConstructor extends BugChecker implements BugChecker.ClassTreeMatcher {\n+\n+    @Override\n+    public Description matchClass(ClassTree tree, VisitorState state) {\n+        ClassSymbol enclosingClass = ASTHelpers.enclosingClass(ASTHelpers.getSymbol(tree));\n+        if (enclosingClass == null) {\n+            return Description.NO_MATCH;\n+        }\n+        if (!isValidBuilderClass(tree)) {\n+            return Description.NO_MATCH;\n+        }\n+        List<MethodTree> constructors = ASTHelpers.getConstructors(tree);\n+        if (constructors.size() != 1 || !ASTHelpers.isGeneratedConstructor(Iterables.getOnlyElement(constructors))) {\n+            return Description.NO_MATCH;\n+        }\n+\n+        if (!hasStaticBuilderFactory(enclosingClass, state)) {\n+            // No factory method, the public constructor is used\n+            return Description.NO_MATCH;\n+        }\n+\n+        // If no fields exist, the constructor is placed after the curly brace\n+        int constructorPosition = ((JCTree) tree).getStartPosition()\n+                + state.getSourceForNode(tree).indexOf('{')\n+                + 1;\n+\n+        for (Tree member : tree.getMembers()) {\n+            if (member.getKind() == Kind.VARIABLE) {\n+                int endPosition = state.getEndPosition(member);\n+                if (endPosition > constructorPosition) {\n+                    constructorPosition = endPosition;\n+                }\n+            }\n+        }\n+        return buildDescription(tree)\n+                .addFix(SuggestedFix.builder()\n+                        .replace(\n+                                constructorPosition,\n+                                constructorPosition,\n+                                String.format(\"\\nprivate %s() {}\", tree.getSimpleName()))\n+                        .build())\n+                .build();\n+    }\n+\n+    private static boolean isValidBuilderClass(ClassTree tree) {\n+        return tree.getSimpleName().contentEquals(\"Builder\")", "originalCommit": "1278fc616fb56d13dfc3b298b309b14d2d3bc741", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNTQzMA==", "url": "https://github.com/palantir/gradle-baseline/pull/1492#discussion_r488205430", "bodyText": "\ud83d\udc4d We might as well catch those :-)", "author": "carterkozak", "createdAt": "2020-09-14T20:37:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNDE3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNTYyNQ==", "url": "https://github.com/palantir/gradle-baseline/pull/1492#discussion_r488205625", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return tree.getSimpleName().contentEquals(\"Builder\")\n          \n          \n            \n                    return tree.getSimpleName().toString().endsWith(\"Builder\")", "author": "carterkozak", "createdAt": "2020-09-14T20:38:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNDE3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwOTM4NQ==", "url": "https://github.com/palantir/gradle-baseline/pull/1492#discussion_r488209385", "bodyText": "odd that Name has a startsWith, but not endsWith \u00af_(\u30c4)_/\u00af", "author": "carterkozak", "createdAt": "2020-09-14T20:45:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNDE3OA=="}], "type": "inlineReview", "revised_code": {"commit": "e02a0ba0fbcae361fd96ed7e0f7830eaa676c9f8", "chunk": "diff --git a/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/BuilderPrivateConstructor.java b/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/ImplicitPublicBuilderConstructor.java\nsimilarity index 87%\nrename from baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/BuilderPrivateConstructor.java\nrename to baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/ImplicitPublicBuilderConstructor.java\nindex 1e52bf07..f629cc05 100644\n--- a/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/BuilderPrivateConstructor.java\n+++ b/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/ImplicitPublicBuilderConstructor.java\n\n@@ -37,14 +37,14 @@ import javax.lang.model.element.Modifier;\n \n @AutoService(BugChecker.class)\n @BugPattern(\n-        name = \"BuilderPrivateConstructor\",\n+        name = \"ImplicitPublicBuilderConstructor\",\n         link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n         linkType = BugPattern.LinkType.CUSTOM,\n         providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n         severity = BugPattern.SeverityLevel.WARNING,\n         summary = \"A Builder with a static factory method on the encapsulating class must have a private constructor. \"\n                 + \"Minimizing unnecessary public API prevents future API breaks from impacting consumers. \")\n-public final class BuilderPrivateConstructor extends BugChecker implements BugChecker.ClassTreeMatcher {\n+public final class ImplicitPublicBuilderConstructor extends BugChecker implements BugChecker.ClassTreeMatcher {\n \n     @Override\n     public Description matchClass(ClassTree tree, VisitorState state) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNDczOQ==", "url": "https://github.com/palantir/gradle-baseline/pull/1492#discussion_r488204739", "bodyText": "requiring it to not implement any methods is probably going to mean we miss any staged builders right? (these would have one class implementing FooStage, BarStage, BazStage which each declare one method?)", "author": "iamdanfox", "createdAt": "2020-09-14T20:36:19Z", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/BuilderPrivateConstructor.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.common.collect.Iterables;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.MethodTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import com.sun.tools.javac.code.Symbol.ClassSymbol;\n+import com.sun.tools.javac.code.Symbol.MethodSymbol;\n+import com.sun.tools.javac.tree.JCTree;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.Modifier;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"BuilderPrivateConstructor\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = BugPattern.SeverityLevel.WARNING,\n+        summary = \"A Builder with a static factory method on the encapsulating class must have a private constructor. \"\n+                + \"Minimizing unnecessary public API prevents future API breaks from impacting consumers. \")\n+public final class BuilderPrivateConstructor extends BugChecker implements BugChecker.ClassTreeMatcher {\n+\n+    @Override\n+    public Description matchClass(ClassTree tree, VisitorState state) {\n+        ClassSymbol enclosingClass = ASTHelpers.enclosingClass(ASTHelpers.getSymbol(tree));\n+        if (enclosingClass == null) {\n+            return Description.NO_MATCH;\n+        }\n+        if (!isValidBuilderClass(tree)) {\n+            return Description.NO_MATCH;\n+        }\n+        List<MethodTree> constructors = ASTHelpers.getConstructors(tree);\n+        if (constructors.size() != 1 || !ASTHelpers.isGeneratedConstructor(Iterables.getOnlyElement(constructors))) {\n+            return Description.NO_MATCH;\n+        }\n+\n+        if (!hasStaticBuilderFactory(enclosingClass, state)) {\n+            // No factory method, the public constructor is used\n+            return Description.NO_MATCH;\n+        }\n+\n+        // If no fields exist, the constructor is placed after the curly brace\n+        int constructorPosition = ((JCTree) tree).getStartPosition()\n+                + state.getSourceForNode(tree).indexOf('{')\n+                + 1;\n+\n+        for (Tree member : tree.getMembers()) {\n+            if (member.getKind() == Kind.VARIABLE) {\n+                int endPosition = state.getEndPosition(member);\n+                if (endPosition > constructorPosition) {\n+                    constructorPosition = endPosition;\n+                }\n+            }\n+        }\n+        return buildDescription(tree)\n+                .addFix(SuggestedFix.builder()\n+                        .replace(\n+                                constructorPosition,\n+                                constructorPosition,\n+                                String.format(\"\\nprivate %s() {}\", tree.getSimpleName()))\n+                        .build())\n+                .build();\n+    }\n+\n+    private static boolean isValidBuilderClass(ClassTree tree) {\n+        return tree.getSimpleName().contentEquals(\"Builder\")\n+                && tree.getImplementsClause().isEmpty()", "originalCommit": "1278fc616fb56d13dfc3b298b309b14d2d3bc741", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNTIzMQ==", "url": "https://github.com/palantir/gradle-baseline/pull/1492#discussion_r488205231", "bodyText": "That's correct, however staged builders generally use several interfaces with an internal hidden implementation.", "author": "carterkozak", "createdAt": "2020-09-14T20:37:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNDczOQ=="}], "type": "inlineReview", "revised_code": {"commit": "e02a0ba0fbcae361fd96ed7e0f7830eaa676c9f8", "chunk": "diff --git a/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/BuilderPrivateConstructor.java b/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/ImplicitPublicBuilderConstructor.java\nsimilarity index 87%\nrename from baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/BuilderPrivateConstructor.java\nrename to baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/ImplicitPublicBuilderConstructor.java\nindex 1e52bf07..f629cc05 100644\n--- a/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/BuilderPrivateConstructor.java\n+++ b/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/ImplicitPublicBuilderConstructor.java\n\n@@ -37,14 +37,14 @@ import javax.lang.model.element.Modifier;\n \n @AutoService(BugChecker.class)\n @BugPattern(\n-        name = \"BuilderPrivateConstructor\",\n+        name = \"ImplicitPublicBuilderConstructor\",\n         link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n         linkType = BugPattern.LinkType.CUSTOM,\n         providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n         severity = BugPattern.SeverityLevel.WARNING,\n         summary = \"A Builder with a static factory method on the encapsulating class must have a private constructor. \"\n                 + \"Minimizing unnecessary public API prevents future API breaks from impacting consumers. \")\n-public final class BuilderPrivateConstructor extends BugChecker implements BugChecker.ClassTreeMatcher {\n+public final class ImplicitPublicBuilderConstructor extends BugChecker implements BugChecker.ClassTreeMatcher {\n \n     @Override\n     public Description matchClass(ClassTree tree, VisitorState state) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNTQ5OA==", "url": "https://github.com/palantir/gradle-baseline/pull/1492#discussion_r488205498", "bodyText": "might be fine to skip this type return validation? people can always tell us if there are false positives (and suppress as aa workaround :)", "author": "iamdanfox", "createdAt": "2020-09-14T20:37:53Z", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/BuilderPrivateConstructor.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.common.collect.Iterables;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.MethodTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import com.sun.tools.javac.code.Symbol.ClassSymbol;\n+import com.sun.tools.javac.code.Symbol.MethodSymbol;\n+import com.sun.tools.javac.tree.JCTree;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.Modifier;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"BuilderPrivateConstructor\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = BugPattern.SeverityLevel.WARNING,\n+        summary = \"A Builder with a static factory method on the encapsulating class must have a private constructor. \"\n+                + \"Minimizing unnecessary public API prevents future API breaks from impacting consumers. \")\n+public final class BuilderPrivateConstructor extends BugChecker implements BugChecker.ClassTreeMatcher {\n+\n+    @Override\n+    public Description matchClass(ClassTree tree, VisitorState state) {\n+        ClassSymbol enclosingClass = ASTHelpers.enclosingClass(ASTHelpers.getSymbol(tree));\n+        if (enclosingClass == null) {\n+            return Description.NO_MATCH;\n+        }\n+        if (!isValidBuilderClass(tree)) {\n+            return Description.NO_MATCH;\n+        }\n+        List<MethodTree> constructors = ASTHelpers.getConstructors(tree);\n+        if (constructors.size() != 1 || !ASTHelpers.isGeneratedConstructor(Iterables.getOnlyElement(constructors))) {\n+            return Description.NO_MATCH;\n+        }\n+\n+        if (!hasStaticBuilderFactory(enclosingClass, state)) {\n+            // No factory method, the public constructor is used\n+            return Description.NO_MATCH;\n+        }\n+\n+        // If no fields exist, the constructor is placed after the curly brace\n+        int constructorPosition = ((JCTree) tree).getStartPosition()\n+                + state.getSourceForNode(tree).indexOf('{')\n+                + 1;\n+\n+        for (Tree member : tree.getMembers()) {\n+            if (member.getKind() == Kind.VARIABLE) {\n+                int endPosition = state.getEndPosition(member);\n+                if (endPosition > constructorPosition) {\n+                    constructorPosition = endPosition;\n+                }\n+            }\n+        }\n+        return buildDescription(tree)\n+                .addFix(SuggestedFix.builder()\n+                        .replace(\n+                                constructorPosition,\n+                                constructorPosition,\n+                                String.format(\"\\nprivate %s() {}\", tree.getSimpleName()))\n+                        .build())\n+                .build();\n+    }\n+\n+    private static boolean isValidBuilderClass(ClassTree tree) {\n+        return tree.getSimpleName().contentEquals(\"Builder\")\n+                && tree.getImplementsClause().isEmpty()\n+                && tree.getExtendsClause() == null\n+                && tree.getModifiers().getFlags().contains(Modifier.STATIC);\n+    }\n+\n+    private static boolean hasStaticBuilderFactory(ClassSymbol classSymbol, VisitorState state) {\n+        Set<MethodSymbol> matching = ASTHelpers.findMatchingMethods(\n+                state.getName(\"builder\"),\n+                methodSymbol -> methodSymbol != null\n+                        && methodSymbol.getReturnType().tsym.getSimpleName().contentEquals(\"Builder\")", "originalCommit": "1278fc616fb56d13dfc3b298b309b14d2d3bc741", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNzYwNg==", "url": "https://github.com/palantir/gradle-baseline/pull/1492#discussion_r488207606", "bodyText": "Idea is that some (largely legacy) builders are meant to be used via their constructors, I don't want to create a bunch of false positives. This way we only flag builders that we expect aren't supposed to have exposed constructors.", "author": "carterkozak", "createdAt": "2020-09-14T20:42:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNTQ5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIxMjUzNg==", "url": "https://github.com/palantir/gradle-baseline/pull/1492#discussion_r488212536", "bodyText": "I've updated this to take the builder ClassTree into account given the endsWith matcher.", "author": "carterkozak", "createdAt": "2020-09-14T20:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNTQ5OA=="}], "type": "inlineReview", "revised_code": {"commit": "e02a0ba0fbcae361fd96ed7e0f7830eaa676c9f8", "chunk": "diff --git a/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/BuilderPrivateConstructor.java b/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/ImplicitPublicBuilderConstructor.java\nsimilarity index 87%\nrename from baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/BuilderPrivateConstructor.java\nrename to baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/ImplicitPublicBuilderConstructor.java\nindex 1e52bf07..f629cc05 100644\n--- a/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/BuilderPrivateConstructor.java\n+++ b/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/ImplicitPublicBuilderConstructor.java\n\n@@ -37,14 +37,14 @@ import javax.lang.model.element.Modifier;\n \n @AutoService(BugChecker.class)\n @BugPattern(\n-        name = \"BuilderPrivateConstructor\",\n+        name = \"ImplicitPublicBuilderConstructor\",\n         link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n         linkType = BugPattern.LinkType.CUSTOM,\n         providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n         severity = BugPattern.SeverityLevel.WARNING,\n         summary = \"A Builder with a static factory method on the encapsulating class must have a private constructor. \"\n                 + \"Minimizing unnecessary public API prevents future API breaks from impacting consumers. \")\n-public final class BuilderPrivateConstructor extends BugChecker implements BugChecker.ClassTreeMatcher {\n+public final class ImplicitPublicBuilderConstructor extends BugChecker implements BugChecker.ClassTreeMatcher {\n \n     @Override\n     public Description matchClass(ClassTree tree, VisitorState state) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwNjA4MQ==", "url": "https://github.com/palantir/gradle-baseline/pull/1492#discussion_r488206081", "bodyText": "nice ;)", "author": "iamdanfox", "createdAt": "2020-09-14T20:39:04Z", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/BuilderPrivateConstructor.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * (c) Copyright 2019 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.common.collect.Iterables;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.fixes.SuggestedFix;\n+import com.google.errorprone.matchers.Description;\n+import com.google.errorprone.util.ASTHelpers;\n+import com.sun.source.tree.ClassTree;\n+import com.sun.source.tree.MethodTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import com.sun.tools.javac.code.Symbol.ClassSymbol;\n+import com.sun.tools.javac.code.Symbol.MethodSymbol;\n+import com.sun.tools.javac.tree.JCTree;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.Modifier;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"BuilderPrivateConstructor\",\n+        link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n+        linkType = BugPattern.LinkType.CUSTOM,\n+        providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n+        severity = BugPattern.SeverityLevel.WARNING,\n+        summary = \"A Builder with a static factory method on the encapsulating class must have a private constructor. \"\n+                + \"Minimizing unnecessary public API prevents future API breaks from impacting consumers. \")\n+public final class BuilderPrivateConstructor extends BugChecker implements BugChecker.ClassTreeMatcher {\n+\n+    @Override\n+    public Description matchClass(ClassTree tree, VisitorState state) {\n+        ClassSymbol enclosingClass = ASTHelpers.enclosingClass(ASTHelpers.getSymbol(tree));\n+        if (enclosingClass == null) {\n+            return Description.NO_MATCH;\n+        }\n+        if (!isValidBuilderClass(tree)) {\n+            return Description.NO_MATCH;\n+        }\n+        List<MethodTree> constructors = ASTHelpers.getConstructors(tree);\n+        if (constructors.size() != 1 || !ASTHelpers.isGeneratedConstructor(Iterables.getOnlyElement(constructors))) {\n+            return Description.NO_MATCH;\n+        }\n+\n+        if (!hasStaticBuilderFactory(enclosingClass, state)) {\n+            // No factory method, the public constructor is used\n+            return Description.NO_MATCH;\n+        }\n+\n+        // If no fields exist, the constructor is placed after the curly brace\n+        int constructorPosition = ((JCTree) tree).getStartPosition()\n+                + state.getSourceForNode(tree).indexOf('{')\n+                + 1;\n+\n+        for (Tree member : tree.getMembers()) {\n+            if (member.getKind() == Kind.VARIABLE) {\n+                int endPosition = state.getEndPosition(member);\n+                if (endPosition > constructorPosition) {\n+                    constructorPosition = endPosition;", "originalCommit": "1278fc616fb56d13dfc3b298b309b14d2d3bc741", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e02a0ba0fbcae361fd96ed7e0f7830eaa676c9f8", "chunk": "diff --git a/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/BuilderPrivateConstructor.java b/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/ImplicitPublicBuilderConstructor.java\nsimilarity index 87%\nrename from baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/BuilderPrivateConstructor.java\nrename to baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/ImplicitPublicBuilderConstructor.java\nindex 1e52bf07..f629cc05 100644\n--- a/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/BuilderPrivateConstructor.java\n+++ b/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/ImplicitPublicBuilderConstructor.java\n\n@@ -37,14 +37,14 @@ import javax.lang.model.element.Modifier;\n \n @AutoService(BugChecker.class)\n @BugPattern(\n-        name = \"BuilderPrivateConstructor\",\n+        name = \"ImplicitPublicBuilderConstructor\",\n         link = \"https://github.com/palantir/gradle-baseline#baseline-error-prone-checks\",\n         linkType = BugPattern.LinkType.CUSTOM,\n         providesFix = BugPattern.ProvidesFix.REQUIRES_HUMAN_ATTENTION,\n         severity = BugPattern.SeverityLevel.WARNING,\n         summary = \"A Builder with a static factory method on the encapsulating class must have a private constructor. \"\n                 + \"Minimizing unnecessary public API prevents future API breaks from impacting consumers. \")\n-public final class BuilderPrivateConstructor extends BugChecker implements BugChecker.ClassTreeMatcher {\n+public final class ImplicitPublicBuilderConstructor extends BugChecker implements BugChecker.ClassTreeMatcher {\n \n     @Override\n     public Description matchClass(ClassTree tree, VisitorState state) {\n"}}, {"oid": "e02a0ba0fbcae361fd96ed7e0f7830eaa676c9f8", "url": "https://github.com/palantir/gradle-baseline/commit/e02a0ba0fbcae361fd96ed7e0f7830eaa676c9f8", "message": "rename to ImplicitPublicBuilderConstructor", "committedDate": "2020-09-14T20:44:34Z", "type": "commit"}, {"oid": "2e9df67d7d77c9606239e09ea2a79bd3be4a87f3", "url": "https://github.com/palantir/gradle-baseline/commit/2e9df67d7d77c9606239e09ea2a79bd3be4a87f3", "message": "update name in BaselineErrorProneExtension", "committedDate": "2020-09-14T20:51:02Z", "type": "commit"}]}