{"pr_number": 1465, "pr_title": "Ignore non-literal arg names in LogsafeArgName", "pr_createdAt": "2020-08-03T16:45:40Z", "pr_url": "https://github.com/palantir/gradle-baseline/pull/1465", "timeline": [{"oid": "c559e8f8e52bf06a816d74229655d9e53ff80033", "url": "https://github.com/palantir/gradle-baseline/commit/c559e8f8e52bf06a816d74229655d9e53ff80033", "message": "Ignore non-literal arg names in LogsafeArgName", "committedDate": "2020-08-03T16:43:09Z", "type": "commit"}, {"oid": "82bfb2815b3c1de891b032bd504e7735b154f1db", "url": "https://github.com/palantir/gradle-baseline/commit/82bfb2815b3c1de891b032bd504e7735b154f1db", "message": "Add generated changelog entries", "committedDate": "2020-08-03T16:43:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzNDIyOA==", "url": "https://github.com/palantir/gradle-baseline/pull/1465#discussion_r464534228", "bodyText": "nit: we might as well combine these two conditional expressions.", "author": "carterkozak", "createdAt": "2020-08-03T16:47:54Z", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/LogsafeArgName.java", "diffHunk": "@@ -73,15 +73,17 @@ public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState\n         List<? extends ExpressionTree> args = tree.getArguments();\n         ExpressionTree argNameExpression = args.get(0);\n         if (compileTimeConstExpressionMatcher.matches(argNameExpression, state)) {\n-            String argName = (String) ((JCTree.JCLiteral) argNameExpression).getValue();\n-            if (unsafeParamNames.stream().anyMatch(unsafeArgName -> unsafeArgName.equalsIgnoreCase(argName))) {\n-                SuggestedFix.Builder builder = SuggestedFix.builder();\n-                String unsafeArg = SuggestedFixes.qualifyType(state, builder, \"com.palantir.logsafe.UnsafeArg\");\n-                return buildDescription(tree)\n-                        .setMessage(\"Arguments with name '\" + argName + \"' must be marked as unsafe.\")\n-                        .addFix(builder.replace(tree.getMethodSelect(), unsafeArg + \".of\")\n-                                .build())\n-                        .build();\n+            if (argNameExpression instanceof JCTree.JCLiteral) {", "originalCommit": "82bfb2815b3c1de891b032bd504e7735b154f1db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzNjc1NA==", "url": "https://github.com/palantir/gradle-baseline/pull/1465#discussion_r464536754", "bodyText": "We can just get rid of the compile time constant matcher, right? All literals are compile time constants.", "author": "pkoenig10", "createdAt": "2020-08-03T16:52:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzNDIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzNzYzNw==", "url": "https://github.com/palantir/gradle-baseline/pull/1465#discussion_r464537637", "bodyText": "Yep, you're right", "author": "carterkozak", "createdAt": "2020-08-03T16:54:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzNDIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "e0aa047d5f2d313e27482df7b94780a7227d13d0", "chunk": "diff --git a/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/LogsafeArgName.java b/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/LogsafeArgName.java\nindex 5b0a0e13..38ff4cf0 100644\n--- a/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/LogsafeArgName.java\n+++ b/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/LogsafeArgName.java\n\n@@ -72,18 +72,17 @@ public final class LogsafeArgName extends BugChecker implements MethodInvocation\n \n         List<? extends ExpressionTree> args = tree.getArguments();\n         ExpressionTree argNameExpression = args.get(0);\n-        if (compileTimeConstExpressionMatcher.matches(argNameExpression, state)) {\n-            if (argNameExpression instanceof JCTree.JCLiteral) {\n-                String argName = (String) ((JCTree.JCLiteral) argNameExpression).getValue();\n-                if (unsafeParamNames.stream().anyMatch(unsafeArgName -> unsafeArgName.equalsIgnoreCase(argName))) {\n-                    SuggestedFix.Builder builder = SuggestedFix.builder();\n-                    String unsafeArg = SuggestedFixes.qualifyType(state, builder, \"com.palantir.logsafe.UnsafeArg\");\n-                    return buildDescription(tree)\n-                            .setMessage(\"Arguments with name '\" + argName + \"' must be marked as unsafe.\")\n-                            .addFix(builder.replace(tree.getMethodSelect(), unsafeArg + \".of\")\n-                                    .build())\n-                            .build();\n-                }\n+        if (compileTimeConstExpressionMatcher.matches(argNameExpression, state)\n+                && argNameExpression instanceof JCTree.JCLiteral) {\n+            String argName = (String) ((JCTree.JCLiteral) argNameExpression).getValue();\n+            if (unsafeParamNames.stream().anyMatch(unsafeArgName -> unsafeArgName.equalsIgnoreCase(argName))) {\n+                SuggestedFix.Builder builder = SuggestedFix.builder();\n+                String unsafeArg = SuggestedFixes.qualifyType(state, builder, \"com.palantir.logsafe.UnsafeArg\");\n+                return buildDescription(tree)\n+                        .setMessage(\"Arguments with name '\" + argName + \"' must be marked as unsafe.\")\n+                        .addFix(builder.replace(tree.getMethodSelect(), unsafeArg + \".of\")\n+                                .build())\n+                        .build();\n             }\n         }\n \n"}}, {"oid": "e0aa047d5f2d313e27482df7b94780a7227d13d0", "url": "https://github.com/palantir/gradle-baseline/commit/e0aa047d5f2d313e27482df7b94780a7227d13d0", "message": "Combine", "committedDate": "2020-08-03T16:51:37Z", "type": "commit"}, {"oid": "24ee9061c8139a0f0eb993e1016a97f273ad7f2d", "url": "https://github.com/palantir/gradle-baseline/commit/24ee9061c8139a0f0eb993e1016a97f273ad7f2d", "message": "Clean up", "committedDate": "2020-08-03T16:54:20Z", "type": "commit"}]}