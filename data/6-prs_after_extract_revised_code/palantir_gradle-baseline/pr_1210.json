{"pr_number": 1210, "pr_title": "Turn off UnnecessaryLambda check in tests", "pr_createdAt": "2020-02-04T12:08:00Z", "pr_url": "https://github.com/palantir/gradle-baseline/pull/1210", "timeline": [{"oid": "9661d92d428fb8226a5ad0b160a9829556c25eef", "url": "https://github.com/palantir/gradle-baseline/commit/9661d92d428fb8226a5ad0b160a9829556c25eef", "message": "Turn off UnnecessaryLambda check in tests", "committedDate": "2020-02-04T11:58:37Z", "type": "commit"}, {"oid": "7c5e27257a839cee08753c7c87cdb85bed807ad5", "url": "https://github.com/palantir/gradle-baseline/commit/7c5e27257a839cee08753c7c87cdb85bed807ad5", "message": "Add generated changelog entries", "committedDate": "2020-02-04T11:58:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY1MTcyNg==", "url": "https://github.com/palantir/gradle-baseline/pull/1210#discussion_r374651726", "bodyText": "is this intentionally only disabled for people that use java-gradle-plugin? It feels a little odd to disable it in such a specific case.\nIf we think this UnnecessaryLambda is genuinely not great signal, why not just turn it off for all test code?", "author": "iamdanfox", "createdAt": "2020-02-04T12:51:00Z", "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineErrorProne.java", "diffHunk": "@@ -154,6 +154,17 @@ private static void applyToJavaProject(Project project) {\n                                 errorProneOptions.check(\"PreferSafeLoggingPreconditions\", CheckSeverity.OFF);\n                                 errorProneOptions.check(\"PreconditionsConstantMessage\", CheckSeverity.OFF);\n                             }));\n+\n+            project.getTasks().withType(JavaCompile.class).configureEach(javaCompile -> {", "originalCommit": "7c5e27257a839cee08753c7c87cdb85bed807ad5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY4NTk5Nw==", "url": "https://github.com/palantir/gradle-baseline/pull/1210#discussion_r374685997", "bodyText": "that's what i meant to do, sorry", "author": "dansanduleac", "createdAt": "2020-02-04T14:01:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY1MTcyNg=="}], "type": "inlineReview", "revised_code": {"commit": "60c70883aa20e239f7b7eeac107d950d8cfb9b0c", "chunk": "diff --git a/gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineErrorProne.java b/gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineErrorProne.java\nindex 6d95d812..ae11c675 100644\n--- a/gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineErrorProne.java\n+++ b/gradle-baseline-java/src/main/groovy/com/palantir/baseline/plugins/BaselineErrorProne.java\n\n@@ -154,17 +154,17 @@ public final class BaselineErrorProne implements Plugin<Project> {\n                                 errorProneOptions.check(\"PreferSafeLoggingPreconditions\", CheckSeverity.OFF);\n                                 errorProneOptions.check(\"PreconditionsConstantMessage\", CheckSeverity.OFF);\n                             }));\n+        });\n \n-            project.getTasks().withType(JavaCompile.class).configureEach(javaCompile -> {\n-                ((ExtensionAware) javaCompile.getOptions())\n-                        .getExtensions()\n-                        .configure(ErrorProneOptions.class, errorProneOptions -> {\n-                            // Relax some checks for test code\n-                            if (errorProneOptions.isCompilingTestOnlyCode()) {\n-                                errorProneOptions.check(\"UnnecessaryLambda\", CheckSeverity.OFF);\n-                            }\n-                        });\n-            });\n+        project.getTasks().withType(JavaCompile.class).configureEach(javaCompile -> {\n+            ((ExtensionAware) javaCompile.getOptions())\n+                    .getExtensions()\n+                    .configure(ErrorProneOptions.class, errorProneOptions -> {\n+                        // Relax some checks for test code\n+                        if (errorProneOptions.isCompilingTestOnlyCode()) {\n+                            errorProneOptions.check(\"UnnecessaryLambda\", CheckSeverity.OFF);\n+                        }\n+                    });\n         });\n \n         // In case of java 8 we need to add errorprone javac compiler to bootstrap classpath of tasks that perform\n"}}, {"oid": "60c70883aa20e239f7b7eeac107d950d8cfb9b0c", "url": "https://github.com/palantir/gradle-baseline/commit/60c70883aa20e239f7b7eeac107d950d8cfb9b0c", "message": "move to the right scope", "committedDate": "2020-02-04T13:59:56Z", "type": "commit"}, {"oid": "d37239ead8b40177d70f2d9e17859fd7f212ccba", "url": "https://github.com/palantir/gradle-baseline/commit/d37239ead8b40177d70f2d9e17859fd7f212ccba", "message": "also auto-fix if possible", "committedDate": "2020-02-04T13:59:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY4NTk1Ng==", "url": "https://github.com/palantir/gradle-baseline/pull/1210#discussion_r374685956", "bodyText": "I recall this creating code that didn\u2019t compile, might want to test it on something large and internal (or atlas) first", "author": "carterkozak", "createdAt": "2020-02-04T14:01:25Z", "path": "gradle-baseline-java/src/main/groovy/com/palantir/baseline/extensions/BaselineErrorProneExtension.java", "diffHunk": "@@ -57,7 +57,8 @@\n             \"ArrayEquals\",\n             \"MissingOverride\",\n             \"UnnecessaryParentheses\",\n-            \"PreferJavaTimeOverload\");\n+            \"PreferJavaTimeOverload\",\n+            \"UnnecessaryLambda\");", "originalCommit": "d37239ead8b40177d70f2d9e17859fd7f212ccba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY4OTg5NA==", "url": "https://github.com/palantir/gradle-baseline/pull/1210#discussion_r374689894", "bodyText": "@dansanduleac you can use the hot new ./gradlew compileJava compileTestJava -PerrorProneApply=UnnecessaryLambda", "author": "iamdanfox", "createdAt": "2020-02-04T14:08:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY4NTk1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5MzEzMA==", "url": "https://github.com/palantir/gradle-baseline/pull/1210#discussion_r374693130", "bodyText": "I've tested it on a project where this was causing trouble and it produced no fixes... if you recall this way, then maybe i can just remove it from here and let people deal with it", "author": "dansanduleac", "createdAt": "2020-02-04T14:13:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY4NTk1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "eea3b6c116261884fe2bc053f797f10e240fed6b", "chunk": "diff --git a/gradle-baseline-java/src/main/groovy/com/palantir/baseline/extensions/BaselineErrorProneExtension.java b/gradle-baseline-java/src/main/groovy/com/palantir/baseline/extensions/BaselineErrorProneExtension.java\nindex 66275e63..a58f2383 100644\n--- a/gradle-baseline-java/src/main/groovy/com/palantir/baseline/extensions/BaselineErrorProneExtension.java\n+++ b/gradle-baseline-java/src/main/groovy/com/palantir/baseline/extensions/BaselineErrorProneExtension.java\n\n@@ -57,8 +57,7 @@ public class BaselineErrorProneExtension {\n             \"ArrayEquals\",\n             \"MissingOverride\",\n             \"UnnecessaryParentheses\",\n-            \"PreferJavaTimeOverload\",\n-            \"UnnecessaryLambda\");\n+            \"PreferJavaTimeOverload\");\n \n     private final ListProperty<String> patchChecks;\n \n"}}, {"oid": "eea3b6c116261884fe2bc053f797f10e240fed6b", "url": "https://github.com/palantir/gradle-baseline/commit/eea3b6c116261884fe2bc053f797f10e240fed6b", "message": "remove it", "committedDate": "2020-02-04T14:14:13Z", "type": "commit"}]}