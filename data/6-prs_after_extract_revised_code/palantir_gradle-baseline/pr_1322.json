{"pr_number": 1322, "pr_title": "Provider implicit toString", "pr_createdAt": "2020-04-16T08:32:04Z", "pr_url": "https://github.com/palantir/gradle-baseline/pull/1322", "timeline": [{"oid": "d450981b7c6cd0150d9251813c0ea72c69285a7b", "url": "https://github.com/palantir/gradle-baseline/commit/d450981b7c6cd0150d9251813c0ea72c69285a7b", "message": "Provider implicit toString", "committedDate": "2020-04-16T08:28:40Z", "type": "commit"}, {"oid": "05294b065d1932bcdc845a141cac5c396a1a5542", "url": "https://github.com/palantir/gradle-baseline/commit/05294b065d1932bcdc845a141cac5c396a1a5542", "message": "Add generated changelog entries", "committedDate": "2020-04-16T08:28:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyNTc4Mg==", "url": "https://github.com/palantir/gradle-baseline/pull/1322#discussion_r409425782", "bodyText": "I would just add a second test to check that toString on non-providers is not broken.", "author": "CRogers", "createdAt": "2020-04-16T09:46:58Z", "path": "baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/GradleProviderToStringTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.errorprone.CompilationTestHelper;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+public class GradleProviderToStringTest {\n+\n+    private CompilationTestHelper compilationHelper;\n+\n+    @BeforeEach\n+    public void before() {\n+        compilationHelper = CompilationTestHelper.newInstance(GradleProviderToString.class, getClass());\n+    }\n+\n+    @Test\n+    public void failsUsedInStringConcatenation() {\n+        compilationHelper\n+                .addSourceLines(\n+                        \"Foo.java\",\n+                        \"import org.gradle.api.Project;\",\n+                        \"import org.gradle.api.Plugin;\",\n+                        \"import org.gradle.api.provider.Provider;\",\n+                        \"class Foo implements Plugin<Project> {\",\n+                        \"  public final void apply(Project project) {\",\n+                        \"    Provider<String> provider = project.provider(() -> \\\"hello\\\");\",\n+                        \"    // BUG: Diagnostic contains: Calling toString on a Provider\",\n+                        \"    String value = \\\"My bad provider value: \\\" + provider;\",\n+                        \"  }\",\n+                        \"}\")\n+                .doTest();\n+    }", "originalCommit": "05294b065d1932bcdc845a141cac5c396a1a5542", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "31f28b55e3ce52bfc3e8229865aca69e12af54f2", "chunk": "diff --git a/baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/GradleProviderToStringTest.java b/baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/GradleProviderToStringTest.java\nindex cbdca4ad..05e95585 100644\n--- a/baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/GradleProviderToStringTest.java\n+++ b/baseline-error-prone/src/test/java/com/palantir/baseline/errorprone/GradleProviderToStringTest.java\n\n@@ -23,10 +23,12 @@ import org.junit.jupiter.api.Test;\n public class GradleProviderToStringTest {\n \n     private CompilationTestHelper compilationHelper;\n+    private RefactoringValidator refactoringValidator;\n \n     @BeforeEach\n     public void before() {\n         compilationHelper = CompilationTestHelper.newInstance(GradleProviderToString.class, getClass());\n+        refactoringValidator = RefactoringValidator.of(new GradleProviderToString(), getClass());\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcxNzU4MQ==", "url": "https://github.com/palantir/gradle-baseline/pull/1322#discussion_r409717581", "bodyText": "oh this is just too easy :D", "author": "iamdanfox", "createdAt": "2020-04-16T17:12:14Z", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/GradleProviderToString.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.AbstractToString;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.fixes.Fix;\n+import com.google.errorprone.predicates.TypePredicate;\n+import com.google.errorprone.predicates.TypePredicates;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.Tree;\n+import java.util.Optional;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"GradleProviderToString\",\n+        summary = \"Calling toString on a Provider does not render the contained value\",\n+        severity = BugPattern.SeverityLevel.ERROR)\n+public final class GradleProviderToString extends AbstractToString {", "originalCommit": "05294b065d1932bcdc845a141cac5c396a1a5542", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "31f28b55e3ce52bfc3e8229865aca69e12af54f2", "chunk": "diff --git a/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/GradleProviderToString.java b/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/GradleProviderToString.java\nindex ea47acc8..70ce742b 100644\n--- a/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/GradleProviderToString.java\n+++ b/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/GradleProviderToString.java\n\n@@ -22,6 +22,7 @@ import com.google.errorprone.VisitorState;\n import com.google.errorprone.bugpatterns.AbstractToString;\n import com.google.errorprone.bugpatterns.BugChecker;\n import com.google.errorprone.fixes.Fix;\n+import com.google.errorprone.fixes.SuggestedFix;\n import com.google.errorprone.predicates.TypePredicate;\n import com.google.errorprone.predicates.TypePredicates;\n import com.sun.source.tree.ExpressionTree;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcxODY1MA==", "url": "https://github.com/palantir/gradle-baseline/pull/1322#discussion_r409718650", "bodyText": "if it's right enough of the time, we could do it for convenience. We don't need to automatically apply it.", "author": "carterkozak", "createdAt": "2020-04-16T17:14:02Z", "path": "baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/GradleProviderToString.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.baseline.errorprone;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.errorprone.BugPattern;\n+import com.google.errorprone.VisitorState;\n+import com.google.errorprone.bugpatterns.AbstractToString;\n+import com.google.errorprone.bugpatterns.BugChecker;\n+import com.google.errorprone.fixes.Fix;\n+import com.google.errorprone.predicates.TypePredicate;\n+import com.google.errorprone.predicates.TypePredicates;\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.Tree;\n+import java.util.Optional;\n+\n+@AutoService(BugChecker.class)\n+@BugPattern(\n+        name = \"GradleProviderToString\",\n+        summary = \"Calling toString on a Provider does not render the contained value\",\n+        severity = BugPattern.SeverityLevel.ERROR)\n+public final class GradleProviderToString extends AbstractToString {\n+\n+    private static final TypePredicate IS_PROVIDER = TypePredicates.isDescendantOf(\"org.gradle.api.provider.Provider\");\n+\n+    @Override\n+    protected TypePredicate typePredicate() {\n+        return IS_PROVIDER;\n+    }\n+\n+    @Override\n+    protected Optional<Fix> implicitToStringFix(ExpressionTree tree, VisitorState state) {\n+        // We could automatically call Provider#get, but is that always right?\n+        return Optional.empty();", "originalCommit": "05294b065d1932bcdc845a141cac5c396a1a5542", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "31f28b55e3ce52bfc3e8229865aca69e12af54f2", "chunk": "diff --git a/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/GradleProviderToString.java b/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/GradleProviderToString.java\nindex ea47acc8..70ce742b 100644\n--- a/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/GradleProviderToString.java\n+++ b/baseline-error-prone/src/main/java/com/palantir/baseline/errorprone/GradleProviderToString.java\n\n@@ -22,6 +22,7 @@ import com.google.errorprone.VisitorState;\n import com.google.errorprone.bugpatterns.AbstractToString;\n import com.google.errorprone.bugpatterns.BugChecker;\n import com.google.errorprone.fixes.Fix;\n+import com.google.errorprone.fixes.SuggestedFix;\n import com.google.errorprone.predicates.TypePredicate;\n import com.google.errorprone.predicates.TypePredicates;\n import com.sun.source.tree.ExpressionTree;\n"}}, {"oid": "31f28b55e3ce52bfc3e8229865aca69e12af54f2", "url": "https://github.com/palantir/gradle-baseline/commit/31f28b55e3ce52bfc3e8229865aca69e12af54f2", "message": "Include null comparison value", "committedDate": "2020-05-06T18:10:31Z", "type": "commit"}, {"oid": "fcd32f984dd7a57d96a6dfcbf7902f4fcdeeec75", "url": "https://github.com/palantir/gradle-baseline/commit/fcd32f984dd7a57d96a6dfcbf7902f4fcdeeec75", "message": "Merge branch 'ngates/implicit-provider-to-string' of github.com:palantir/gradle-baseline into ngates/implicit-provider-to-string", "committedDate": "2020-05-06T18:10:42Z", "type": "commit"}, {"oid": "5d39aa565e4c55a0058962a7659cfc77813b5814", "url": "https://github.com/palantir/gradle-baseline/commit/5d39aa565e4c55a0058962a7659cfc77813b5814", "message": "Update GradleProviderToStringTest.java", "committedDate": "2020-05-06T18:25:35Z", "type": "commit"}]}