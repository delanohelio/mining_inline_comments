{"pr_number": 1642, "pr_title": "LinkageProblemCauseAnnotator to take ClassPathBuilder to configure repositories", "pr_createdAt": "2020-09-10T16:12:08Z", "pr_url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642", "timeline": [{"oid": "946ddeb2f9c7e19139c3f0b7d0c01439bbdc05b2", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/946ddeb2f9c7e19139c3f0b7d0c01439bbdc05b2", "message": "Annotator to take ClassPathBuilder to configure repositories", "committedDate": "2020-09-10T16:11:08Z", "type": "commit"}, {"oid": "78c72d7288b50d9efc8bcc78eb6518cab736776e", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/78c72d7288b50d9efc8bcc78eb6518cab736776e", "message": "format", "committedDate": "2020-09-10T16:17:13Z", "type": "commit"}, {"oid": "7beaa8e21d940de7b98c3b85d3e639b060e8e8e3", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/7beaa8e21d940de7b98c3b85d3e639b060e8e8e3", "message": "Detailed test case", "committedDate": "2020-09-10T16:24:24Z", "type": "commit"}, {"oid": "707d1e1bd6a96cee087dfb23adec955ba92c1fb8", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/707d1e1bd6a96cee087dfb23adec955ba92c1fb8", "message": "Comment on the hypothetical problem", "committedDate": "2020-09-10T16:27:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUwNjc2NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486506765", "bodyText": "classPathBuilder looks like it can be null here.", "author": "elharo", "createdAt": "2020-09-10T17:17:11Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblemCauseAnnotator.java", "diffHunk": "@@ -47,7 +52,6 @@ public static void annotate(ClassPathResult rootResult, Iterable<LinkageProblem>\n       ClassPathResult subtreeResult = cache.get(sourceArtifact);\n       if (subtreeResult == null) {\n         // Resolves the dependency graph with the source artifact at the root.\n-        ClassPathBuilder classPathBuilder = new ClassPathBuilder();\n         subtreeResult = classPathBuilder.resolveWithMaven(sourceArtifact);", "originalCommit": "707d1e1bd6a96cee087dfb23adec955ba92c1fb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxODIxNw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486518217", "bodyText": "classPathBuilder parameter cannot be null; otherwise it throws NullPointerException here.\nInitially I thought making the parameter @Nullable. However, the enforcer rule and LinkageCheckerMain both need to resolve dependency graphs using their ClassPathBuilder.\nDo you see a chance some non-test class passes null for the 1st argument?", "author": "suztomo", "createdAt": "2020-09-10T17:36:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUwNjc2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzMTM5OA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486531398", "bodyText": "It is a public method so anything can be passed. If you expect to be not null, it's worth checking.", "author": "elharo", "createdAt": "2020-09-10T17:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUwNjc2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0NDYwOA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486544608", "bodyText": "Added checkNotNull()s.", "author": "suztomo", "createdAt": "2020-09-10T18:20:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUwNjc2NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxOTM3NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486519375", "bodyText": "if classPathResult is not null, then classPathBuilder is not null. (the classPathResult is generated from the classPathBuilder).", "author": "suztomo", "createdAt": "2020-09-10T17:38:51Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -100,7 +101,7 @@ public static void main(String[] arguments)\n         }\n \n         if (classPathResult != null) {", "originalCommit": "707d1e1bd6a96cee087dfb23adec955ba92c1fb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bf533f4b894d86b1b7ea8a3970e6c30ba23ecb83", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\nindex 7c3bcdc2..f21df0b5 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n\n@@ -100,7 +101,7 @@ class LinkageCheckerMain {\n                   .collect(toImmutableSet());\n         }\n \n-        if (classPathResult != null) {\n+        if (!artifactsInArguments.isEmpty()) {\n           LinkageProblemCauseAnnotator.annotate(classPathBuilder, classPathResult, linkageProblems);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzMDYwMQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486530601", "bodyText": "using these in two variables in only one branch of the if-else block is a bit of a code smell. I wonder if there's an alternative approach that doesn't use nullness as flags?", "author": "elharo", "createdAt": "2020-09-10T17:57:49Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -67,7 +67,8 @@ public static void main(String[] arguments)\n         List<ArtifactProblem> artifactProblems = new ArrayList<>();\n         // classPathResult is kept null if JAR files are specified in the argument\n         ClassPathResult classPathResult = null;\n-    \n+        ClassPathBuilder classPathBuilder = null;", "originalCommit": "707d1e1bd6a96cee087dfb23adec955ba92c1fb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0NDIyNA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486544224", "bodyText": "It now relies on artifactsInArguments variable. It's empty when we specify JAR files.", "author": "suztomo", "createdAt": "2020-09-10T18:19:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzMDYwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2NTAyMw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486565023", "bodyText": "This is becoming more complex, not less. I think the fundamental issue is that two very different cases are being managed with lots of if-else instead of different methods or objects. When I looked at this code in my IDE, it was quite hard to follow.", "author": "elharo", "createdAt": "2020-09-10T18:52:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzMDYwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwMTYxMQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486601611", "bodyText": "let me try to split the 2 (3?) cases into methods.", "author": "suztomo", "createdAt": "2020-09-10T20:03:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzMDYwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "bf533f4b894d86b1b7ea8a3970e6c30ba23ecb83", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\nindex 7c3bcdc2..f21df0b5 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n\n@@ -57,19 +57,20 @@ class LinkageCheckerMain {\n         linkageCheckerArguments.printHelp();\n       }\n \n-      if (linkageCheckerArguments.hasInput()) { \n-        // This is non-empty if a BOM or artifacts are specified in the argument\n-        ImmutableList<Artifact> artifacts = linkageCheckerArguments.getArtifacts();\n+      if (linkageCheckerArguments.hasInput()) {\n+        // artifactsInArguments is not empty if a BOM or artifacts are specified in the argument.\n+        // If JAR files are specified, it's empty.\n+        ImmutableList<Artifact> artifactsInArguments = linkageCheckerArguments.getArtifacts();\n \n-        // When JAR files are specified in the argument, artifacts are empty.\n         ImmutableList<ClassPathEntry> inputClassPath;\n         ImmutableSet<ClassPathEntry> entryPoints;\n         List<ArtifactProblem> artifactProblems = new ArrayList<>();\n-        // classPathResult is kept null if JAR files are specified in the argument\n+        // classPathResult and classPathBuilder are kept null if JAR files are specified in the\n+        // argument\n         ClassPathResult classPathResult = null;\n         ClassPathBuilder classPathBuilder = null;\n \n-        if (artifacts.isEmpty()) {\n+        if (artifactsInArguments.isEmpty()) {\n           // When JAR files are passed as arguments, classPathResult is null, because there is no need\n           // to resolve Maven dependencies.\n           inputClassPath = linkageCheckerArguments.getJarFiles();\n"}}, {"oid": "bf533f4b894d86b1b7ea8a3970e6c30ba23ecb83", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/bf533f4b894d86b1b7ea8a3970e6c30ba23ecb83", "message": "Not relying on non-null", "committedDate": "2020-09-10T18:18:24Z", "type": "commit"}, {"oid": "dda311ebbab1d2649cdaa8fdbac366ccc37314b3", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/dda311ebbab1d2649cdaa8fdbac366ccc37314b3", "message": "Split the case of JAR files and artifacts", "committedDate": "2020-09-10T20:57:22Z", "type": "commit"}, {"oid": "72ea7c8b86f6d8970f48945f07a5015d13c3274e", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/72ea7c8b86f6d8970f48945f07a5015d13c3274e", "message": "Merge remote-tracking branch 'origin/master' into i1609", "committedDate": "2020-09-10T20:57:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzNzgzMQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486637831", "bodyText": "Now the the case of JAR file and the case of artifacts are separated.", "author": "suztomo", "createdAt": "2020-09-10T21:15:25Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -57,85 +55,19 @@ public static void main(String[] arguments)\n         linkageCheckerArguments.printHelp();\n       }\n \n-      if (linkageCheckerArguments.hasInput()) { \n-        // This is non-empty if a BOM or artifacts are specified in the argument\n-        ImmutableList<Artifact> artifacts = linkageCheckerArguments.getArtifacts();\n-\n-        // When JAR files are specified in the argument, artifacts are empty.\n-        ImmutableList<ClassPathEntry> inputClassPath;\n-        ImmutableSet<ClassPathEntry> entryPoints;\n-        List<ArtifactProblem> artifactProblems = new ArrayList<>();\n-        // classPathResult is kept null if JAR files are specified in the argument\n-        ClassPathResult classPathResult = null;\n-    \n-        if (artifacts.isEmpty()) {\n-          // When JAR files are passed as arguments, classPathResult is null, because there is no need\n-          // to resolve Maven dependencies.\n-          inputClassPath = linkageCheckerArguments.getJarFiles();\n-          entryPoints = ImmutableSet.copyOf(inputClassPath);\n-        } else {\n-          // When a BOM or Maven artifacts are passed as arguments, resolve the dependencies.\n-          DependencyGraphBuilder dependencyGraphBuilder =\n-              new DependencyGraphBuilder(linkageCheckerArguments.getMavenRepositoryUrls());\n-          ClassPathBuilder classPathBuilder = new ClassPathBuilder(dependencyGraphBuilder);\n-          classPathResult = classPathBuilder.resolve(artifacts, false);\n-          inputClassPath = classPathResult.getClassPath();\n-          artifactProblems.addAll(classPathResult.getArtifactProblems());\n-          entryPoints = ImmutableSet.copyOf(inputClassPath.subList(0, artifacts.size()));\n-        }\n-\n-        LinkageChecker linkageChecker =\n-            LinkageChecker.create(\n-                inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n-        ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n-\n-        if (linkageCheckerArguments.getReportOnlyReachable()) {\n-          ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n-          linkageProblems =\n-              linkageProblems.stream()\n-                  .filter(\n-                      (LinkageProblem problem) ->\n-                          graph.isReachable(problem.getSourceClass().getBinaryName()))\n-                  .collect(toImmutableSet());\n-        }\n-\n-        if (classPathResult != null) {\n-          LinkageProblemCauseAnnotator.annotate(classPathResult, linkageProblems);\n-        }\n-\n-        Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n-        if (writeAsExclusionFile != null) {\n-          ExclusionFiles.write(writeAsExclusionFile, linkageProblems);\n-          System.out.println(\"Wrote the linkage errors as exclusion file: \" + writeAsExclusionFile);\n-          return;\n-        }\n+      if (linkageCheckerArguments.hasInput()) {\n+        // artifactsInArguments is not empty if a BOM or artifacts are specified in the argument.\n+        // If JAR files are specified, it's empty.\n+        ImmutableList<Artifact> artifactsInArguments = linkageCheckerArguments.getArtifacts();\n \n+        ImmutableSet<LinkageProblem> linkageProblems =\n+            artifactsInArguments.isEmpty()\n+                ? runWithJarFiles(linkageCheckerArguments)\n+                : runWithArtifacts(linkageCheckerArguments);", "originalCommit": "72ea7c8b86f6d8970f48945f07a5015d13c3274e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "738b30fe88cb033695d8c488c116cbae459ac0d4", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\nindex 6a16f4bb..b411b591 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n\n@@ -62,8 +62,8 @@ class LinkageCheckerMain {\n \n         ImmutableSet<LinkageProblem> linkageProblems =\n             artifactsInArguments.isEmpty()\n-                ? runWithJarFiles(linkageCheckerArguments)\n-                : runWithArtifacts(linkageCheckerArguments);\n+                ? checkJarFiles(linkageCheckerArguments)\n+                : checkArtifacts(linkageCheckerArguments);\n         if (!linkageProblems.isEmpty()) {\n           System.out.println(\n               \"For the details of the linkage errors, see \"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzODUyNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486638526", "bodyText": "classPathBuilder is always non-null.", "author": "suztomo", "createdAt": "2020-09-10T21:16:55Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -145,4 +77,102 @@ public static void main(String[] arguments)\n       System.err.println(ex.getMessage());\n     }\n   }\n+\n+  private static ImmutableSet<LinkageProblem> runWithJarFiles(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, TransformerException, XMLStreamException {\n+    ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n+    ImmutableSet<ClassPathEntry> entryPoints = ImmutableSet.copyOf(inputClassPath);\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n+      linkageProblems =\n+          linkageProblems.stream()\n+              .filter(\n+                  (LinkageProblem problem) ->\n+                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n+              .collect(toImmutableSet());\n+    }\n+\n+    Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n+    if (writeAsExclusionFile != null) {\n+      ExclusionFiles.write(writeAsExclusionFile, linkageProblems);\n+      System.out.println(\"Wrote the linkage errors as exclusion file: \" + writeAsExclusionFile);\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {\n+      System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n+    }\n+\n+    return linkageProblems;\n+  }\n+\n+  private static ImmutableSet<LinkageProblem> runWithArtifacts(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, RepositoryException, TransformerException, XMLStreamException {\n+    ImmutableList<Artifact> artifactsInArguments = linkageCheckerArguments.getArtifacts();\n+\n+    // When a BOM or Maven artifacts are passed as arguments, resolve the dependencies.\n+    DependencyGraphBuilder dependencyGraphBuilder =\n+        new DependencyGraphBuilder(linkageCheckerArguments.getMavenRepositoryUrls());\n+    ClassPathBuilder classPathBuilder = new ClassPathBuilder(dependencyGraphBuilder);\n+    ClassPathResult classPathResult = classPathBuilder.resolve(artifactsInArguments, false);", "originalCommit": "72ea7c8b86f6d8970f48945f07a5015d13c3274e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "738b30fe88cb033695d8c488c116cbae459ac0d4", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\nindex 6a16f4bb..b411b591 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n\n@@ -78,7 +78,7 @@ class LinkageCheckerMain {\n     }\n   }\n \n-  private static ImmutableSet<LinkageProblem> runWithJarFiles(\n+  private static ImmutableSet<LinkageProblem> checkJarFiles(\n       LinkageCheckerArguments linkageCheckerArguments)\n       throws IOException, TransformerException, XMLStreamException {\n     ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0MjE3MQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486642171", "bodyText": "checkJarFiles?", "author": "elharo", "createdAt": "2020-09-10T21:24:34Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -145,4 +77,102 @@ public static void main(String[] arguments)\n       System.err.println(ex.getMessage());\n     }\n   }\n+\n+  private static ImmutableSet<LinkageProblem> runWithJarFiles(", "originalCommit": "72ea7c8b86f6d8970f48945f07a5015d13c3274e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1OTkzNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486659936", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-09-10T22:06:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0MjE3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "738b30fe88cb033695d8c488c116cbae459ac0d4", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\nindex 6a16f4bb..b411b591 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n\n@@ -78,7 +78,7 @@ class LinkageCheckerMain {\n     }\n   }\n \n-  private static ImmutableSet<LinkageProblem> runWithJarFiles(\n+  private static ImmutableSet<LinkageProblem> checkJarFiles(\n       LinkageCheckerArguments linkageCheckerArguments)\n       throws IOException, TransformerException, XMLStreamException {\n     ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0MjM1Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486642352", "bodyText": "checkArtifacts?", "author": "elharo", "createdAt": "2020-09-10T21:24:58Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -145,4 +77,102 @@ public static void main(String[] arguments)\n       System.err.println(ex.getMessage());\n     }\n   }\n+\n+  private static ImmutableSet<LinkageProblem> runWithJarFiles(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, TransformerException, XMLStreamException {\n+    ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n+    ImmutableSet<ClassPathEntry> entryPoints = ImmutableSet.copyOf(inputClassPath);\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n+      linkageProblems =\n+          linkageProblems.stream()\n+              .filter(\n+                  (LinkageProblem problem) ->\n+                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n+              .collect(toImmutableSet());\n+    }\n+\n+    Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n+    if (writeAsExclusionFile != null) {\n+      ExclusionFiles.write(writeAsExclusionFile, linkageProblems);\n+      System.out.println(\"Wrote the linkage errors as exclusion file: \" + writeAsExclusionFile);\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {\n+      System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n+    }\n+\n+    return linkageProblems;\n+  }\n+\n+  private static ImmutableSet<LinkageProblem> runWithArtifacts(", "originalCommit": "72ea7c8b86f6d8970f48945f07a5015d13c3274e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2MDAxNQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486660015", "bodyText": "Updated", "author": "suztomo", "createdAt": "2020-09-10T22:06:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0MjM1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "738b30fe88cb033695d8c488c116cbae459ac0d4", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\nindex 6a16f4bb..b411b591 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n\n@@ -78,7 +78,7 @@ class LinkageCheckerMain {\n     }\n   }\n \n-  private static ImmutableSet<LinkageProblem> runWithJarFiles(\n+  private static ImmutableSet<LinkageProblem> checkJarFiles(\n       LinkageCheckerArguments linkageCheckerArguments)\n       throws IOException, TransformerException, XMLStreamException {\n     ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0Mjg1MA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486642850", "bodyText": "This chunk of code could be extracted to a writeExclusionFile helper method to avoid duplication", "author": "elharo", "createdAt": "2020-09-10T21:26:02Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -145,4 +77,102 @@ public static void main(String[] arguments)\n       System.err.println(ex.getMessage());\n     }\n   }\n+\n+  private static ImmutableSet<LinkageProblem> runWithJarFiles(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, TransformerException, XMLStreamException {\n+    ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n+    ImmutableSet<ClassPathEntry> entryPoints = ImmutableSet.copyOf(inputClassPath);\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n+      linkageProblems =\n+          linkageProblems.stream()\n+              .filter(\n+                  (LinkageProblem problem) ->\n+                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n+              .collect(toImmutableSet());\n+    }\n+\n+    Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();", "originalCommit": "72ea7c8b86f6d8970f48945f07a5015d13c3274e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2MjUyOA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486662528", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-09-10T22:13:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0Mjg1MA=="}], "type": "inlineReview", "revised_code": {"commit": "738b30fe88cb033695d8c488c116cbae459ac0d4", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\nindex 6a16f4bb..b411b591 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n\n@@ -78,7 +78,7 @@ class LinkageCheckerMain {\n     }\n   }\n \n-  private static ImmutableSet<LinkageProblem> runWithJarFiles(\n+  private static ImmutableSet<LinkageProblem> checkJarFiles(\n       LinkageCheckerArguments linkageCheckerArguments)\n       throws IOException, TransformerException, XMLStreamException {\n     ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0NTUwOQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486645509", "bodyText": "the body of this if block can probably be pulled out to a helper method (or maybe the whole if block) to avoid the duplication", "author": "elharo", "createdAt": "2020-09-10T21:31:56Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -145,4 +77,102 @@ public static void main(String[] arguments)\n       System.err.println(ex.getMessage());\n     }\n   }\n+\n+  private static ImmutableSet<LinkageProblem> runWithJarFiles(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, TransformerException, XMLStreamException {\n+    ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n+    ImmutableSet<ClassPathEntry> entryPoints = ImmutableSet.copyOf(inputClassPath);\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n+      linkageProblems =\n+          linkageProblems.stream()\n+              .filter(\n+                  (LinkageProblem problem) ->\n+                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n+              .collect(toImmutableSet());\n+    }\n+\n+    Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n+    if (writeAsExclusionFile != null) {\n+      ExclusionFiles.write(writeAsExclusionFile, linkageProblems);\n+      System.out.println(\"Wrote the linkage errors as exclusion file: \" + writeAsExclusionFile);\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {\n+      System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n+    }\n+\n+    return linkageProblems;\n+  }\n+\n+  private static ImmutableSet<LinkageProblem> runWithArtifacts(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, RepositoryException, TransformerException, XMLStreamException {\n+    ImmutableList<Artifact> artifactsInArguments = linkageCheckerArguments.getArtifacts();\n+\n+    // When a BOM or Maven artifacts are passed as arguments, resolve the dependencies.\n+    DependencyGraphBuilder dependencyGraphBuilder =\n+        new DependencyGraphBuilder(linkageCheckerArguments.getMavenRepositoryUrls());\n+    ClassPathBuilder classPathBuilder = new ClassPathBuilder(dependencyGraphBuilder);\n+    ClassPathResult classPathResult = classPathBuilder.resolve(artifactsInArguments, false);\n+    ImmutableList<ClassPathEntry> inputClassPath = classPathResult.getClassPath();\n+    ImmutableList<ArtifactProblem> artifactProblems =\n+        ImmutableList.copyOf(classPathResult.getArtifactProblems());\n+    ImmutableSet<ClassPathEntry> entryPoints =\n+        ImmutableSet.copyOf(inputClassPath.subList(0, artifactsInArguments.size()));\n+\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();", "originalCommit": "72ea7c8b86f6d8970f48945f07a5015d13c3274e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2MzUwNw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486663507", "bodyText": "Done.", "author": "suztomo", "createdAt": "2020-09-10T22:15:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0NTUwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "738b30fe88cb033695d8c488c116cbae459ac0d4", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\nindex 6a16f4bb..b411b591 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n\n@@ -78,7 +78,7 @@ class LinkageCheckerMain {\n     }\n   }\n \n-  private static ImmutableSet<LinkageProblem> runWithJarFiles(\n+  private static ImmutableSet<LinkageProblem> checkJarFiles(\n       LinkageCheckerArguments linkageCheckerArguments)\n       throws IOException, TransformerException, XMLStreamException {\n     ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0NTcyNQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486645725", "bodyText": "tempted to move this if block to a printLinkageProblems method too", "author": "elharo", "createdAt": "2020-09-10T21:32:28Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -145,4 +77,102 @@ public static void main(String[] arguments)\n       System.err.println(ex.getMessage());\n     }\n   }\n+\n+  private static ImmutableSet<LinkageProblem> runWithJarFiles(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, TransformerException, XMLStreamException {\n+    ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n+    ImmutableSet<ClassPathEntry> entryPoints = ImmutableSet.copyOf(inputClassPath);\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n+      linkageProblems =\n+          linkageProblems.stream()\n+              .filter(\n+                  (LinkageProblem problem) ->\n+                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n+              .collect(toImmutableSet());\n+    }\n+\n+    Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n+    if (writeAsExclusionFile != null) {\n+      ExclusionFiles.write(writeAsExclusionFile, linkageProblems);\n+      System.out.println(\"Wrote the linkage errors as exclusion file: \" + writeAsExclusionFile);\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {\n+      System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n+    }\n+\n+    return linkageProblems;\n+  }\n+\n+  private static ImmutableSet<LinkageProblem> runWithArtifacts(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, RepositoryException, TransformerException, XMLStreamException {\n+    ImmutableList<Artifact> artifactsInArguments = linkageCheckerArguments.getArtifacts();\n+\n+    // When a BOM or Maven artifacts are passed as arguments, resolve the dependencies.\n+    DependencyGraphBuilder dependencyGraphBuilder =\n+        new DependencyGraphBuilder(linkageCheckerArguments.getMavenRepositoryUrls());\n+    ClassPathBuilder classPathBuilder = new ClassPathBuilder(dependencyGraphBuilder);\n+    ClassPathResult classPathResult = classPathBuilder.resolve(artifactsInArguments, false);\n+    ImmutableList<ClassPathEntry> inputClassPath = classPathResult.getClassPath();\n+    ImmutableList<ArtifactProblem> artifactProblems =\n+        ImmutableList.copyOf(classPathResult.getArtifactProblems());\n+    ImmutableSet<ClassPathEntry> entryPoints =\n+        ImmutableSet.copyOf(inputClassPath.subList(0, artifactsInArguments.size()));\n+\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n+      linkageProblems =\n+          linkageProblems.stream()\n+              .filter(\n+                  (LinkageProblem problem) ->\n+                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n+              .collect(toImmutableSet());\n+    }\n+\n+    LinkageProblemCauseAnnotator.annotate(classPathBuilder, classPathResult, linkageProblems);\n+\n+    Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n+    if (writeAsExclusionFile != null) {\n+      ExclusionFiles.write(writeAsExclusionFile, linkageProblems);\n+      System.out.println(\"Wrote the linkage errors as exclusion file: \" + writeAsExclusionFile);\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {", "originalCommit": "72ea7c8b86f6d8970f48945f07a5015d13c3274e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2NjAwMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486666000", "bodyText": "I searched the usage of formatLinkageProblems.  The enforcer rule uses logger. That printLinkageProblems method would be only used by LinkageCheckerMain. So it's better to have if statement here.", "author": "suztomo", "createdAt": "2020-09-10T22:21:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0NTcyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "738b30fe88cb033695d8c488c116cbae459ac0d4", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\nindex 6a16f4bb..b411b591 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n\n@@ -78,7 +78,7 @@ class LinkageCheckerMain {\n     }\n   }\n \n-  private static ImmutableSet<LinkageProblem> runWithJarFiles(\n+  private static ImmutableSet<LinkageProblem> checkJarFiles(\n       LinkageCheckerArguments linkageCheckerArguments)\n       throws IOException, TransformerException, XMLStreamException {\n     ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n"}}, {"oid": "738b30fe88cb033695d8c488c116cbae459ac0d4", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/738b30fe88cb033695d8c488c116cbae459ac0d4", "message": "Applied review", "committedDate": "2020-09-10T22:24:15Z", "type": "commit"}, {"oid": "6fcbc94ce00763b6bc313b067debb4455bf0aba5", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/6fcbc94ce00763b6bc313b067debb4455bf0aba5", "message": "javadoc", "committedDate": "2020-09-10T22:27:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2NzYxNQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486667615", "bodyText": "@elharo Do you think of a better name for such function that does nothing depending on the argument? I was thinking writeExclusionFileIfnecessary but this sounds redundant.", "author": "suztomo", "createdAt": "2020-09-10T22:25:53Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -145,4 +77,112 @@ public static void main(String[] arguments)\n       System.err.println(ex.getMessage());\n     }\n   }\n+\n+  private static ImmutableSet<LinkageProblem> checkJarFiles(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, TransformerException, XMLStreamException {\n+    ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n+    ImmutableSet<ClassPathEntry> entryPoints = ImmutableSet.copyOf(inputClassPath);\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    linkageProblems = filterReachable(linkageCheckerArguments, linkageChecker, linkageProblems);\n+\n+    if (writeExclusionFile(linkageCheckerArguments, linkageProblems)) {\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {\n+      System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n+    }\n+\n+    return linkageProblems;\n+  }\n+\n+  private static ImmutableSet<LinkageProblem> filterReachable(\n+      LinkageCheckerArguments linkageCheckerArguments,\n+      LinkageChecker linkageChecker,\n+      ImmutableSet<LinkageProblem> linkageProblems) {\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n+      linkageProblems =\n+          linkageProblems.stream()\n+              .filter(\n+                  (LinkageProblem problem) ->\n+                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n+              .collect(toImmutableSet());\n+    }\n+    return linkageProblems;\n+  }\n+\n+  /**\n+   * Writes {@code linkageProblems} to a file and returns true if {@code linkageCheckerArguments}\n+   * specifies the option; otherwise returns false.\n+   */\n+  private static boolean writeExclusionFile(", "originalCommit": "738b30fe88cb033695d8c488c116cbae459ac0d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NDg0MA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486674840", "bodyText": "writeExclusionFile is fine", "author": "elharo", "createdAt": "2020-09-10T22:45:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2NzYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4MjUxOA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486682518", "bodyText": "writeExclusionFile is merged into findLinkageProblems.", "author": "suztomo", "createdAt": "2020-09-10T23:10:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2NzYxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6fcbc94ce00763b6bc313b067debb4455bf0aba5", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\nindex b411b591..7f2a887b 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n\n@@ -119,7 +119,7 @@ class LinkageCheckerMain {\n \n   /**\n    * Writes {@code linkageProblems} to a file and returns true if {@code linkageCheckerArguments}\n-   * specifies the option; otherwise returns false.\n+   * has the option; otherwise returns false.\n    */\n   private static boolean writeExclusionFile(\n       LinkageCheckerArguments linkageCheckerArguments, ImmutableSet<LinkageProblem> linkageProblems)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NDcxMg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486674712", "bodyText": "I don't think you need this linkageProblems argument", "author": "elharo", "createdAt": "2020-09-10T22:45:33Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -88,6 +88,23 @@ public static void main(String[] arguments)\n             inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n     ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n \n+    linkageProblems = filterReachable(linkageCheckerArguments, linkageChecker, linkageProblems);\n+\n+    if (writeExclusionFile(linkageCheckerArguments, linkageProblems)) {\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {\n+      System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n+    }\n+\n+    return linkageProblems;\n+  }\n+\n+  private static ImmutableSet<LinkageProblem> filterReachable(\n+      LinkageCheckerArguments linkageCheckerArguments,\n+      LinkageChecker linkageChecker,\n+      ImmutableSet<LinkageProblem> linkageProblems) {", "originalCommit": "738b30fe88cb033695d8c488c116cbae459ac0d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4MjI3OA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486682278", "bodyText": "That's a nice idea. Updated this function as findLinkageProblems.", "author": "suztomo", "createdAt": "2020-09-10T23:09:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NDcxMg=="}], "type": "inlineReview", "revised_code": {"commit": "f2488bec7ac32fdd7ca284b36c24c65b582fcb77", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\nindex b411b591..76539d73 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n\n@@ -86,13 +86,9 @@ class LinkageCheckerMain {\n     LinkageChecker linkageChecker =\n         LinkageChecker.create(\n             inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n-    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n-\n-    linkageProblems = filterReachable(linkageCheckerArguments, linkageChecker, linkageProblems);\n \n-    if (writeExclusionFile(linkageCheckerArguments, linkageProblems)) {\n-      return ImmutableSet.of();\n-    }\n+    ImmutableSet<LinkageProblem> linkageProblems =\n+        findLinkageProblems(linkageCheckerArguments, linkageChecker);\n \n     if (!linkageProblems.isEmpty()) {\n       System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NTAwNA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486675004", "bodyText": "exclusionFilePath or just path", "author": "elharo", "createdAt": "2020-09-10T22:46:33Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -97,22 +114,26 @@ public static void main(String[] arguments)\n                       graph.isReachable(problem.getSourceClass().getBinaryName()))\n               .collect(toImmutableSet());\n     }\n+    return linkageProblems;\n+  }\n \n+  /**\n+   * Writes {@code linkageProblems} to a file and returns true if {@code linkageCheckerArguments}\n+   * specifies the option; otherwise returns false.\n+   */\n+  private static boolean writeExclusionFile(\n+      LinkageCheckerArguments linkageCheckerArguments, ImmutableSet<LinkageProblem> linkageProblems)\n+      throws TransformerException, XMLStreamException, IOException {\n     Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();", "originalCommit": "738b30fe88cb033695d8c488c116cbae459ac0d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3OTc0NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486679745", "bodyText": "Updated to outputExclusionFile as per option name.", "author": "suztomo", "createdAt": "2020-09-10T23:01:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NTAwNA=="}], "type": "inlineReview", "revised_code": {"commit": "f2488bec7ac32fdd7ca284b36c24c65b582fcb77", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\nindex b411b591..76539d73 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n\n@@ -101,38 +97,6 @@ class LinkageCheckerMain {\n     return linkageProblems;\n   }\n \n-  private static ImmutableSet<LinkageProblem> filterReachable(\n-      LinkageCheckerArguments linkageCheckerArguments,\n-      LinkageChecker linkageChecker,\n-      ImmutableSet<LinkageProblem> linkageProblems) {\n-    if (linkageCheckerArguments.getReportOnlyReachable()) {\n-      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n-      linkageProblems =\n-          linkageProblems.stream()\n-              .filter(\n-                  (LinkageProblem problem) ->\n-                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n-              .collect(toImmutableSet());\n-    }\n-    return linkageProblems;\n-  }\n-\n-  /**\n-   * Writes {@code linkageProblems} to a file and returns true if {@code linkageCheckerArguments}\n-   * specifies the option; otherwise returns false.\n-   */\n-  private static boolean writeExclusionFile(\n-      LinkageCheckerArguments linkageCheckerArguments, ImmutableSet<LinkageProblem> linkageProblems)\n-      throws TransformerException, XMLStreamException, IOException {\n-    Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n-    if (writeAsExclusionFile != null) {\n-      ExclusionFiles.write(writeAsExclusionFile, linkageProblems);\n-      System.out.println(\"Wrote the linkage errors as exclusion file: \" + writeAsExclusionFile);\n-      return true;\n-    }\n-    return false;\n-  }\n-\n   private static ImmutableSet<LinkageProblem> checkArtifacts(\n       LinkageCheckerArguments linkageCheckerArguments)\n       throws IOException, RepositoryException, TransformerException, XMLStreamException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NTM3Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486675377", "bodyText": "I'm tempted to pull the if out of this method and not pass the linkageChecker arguments in", "author": "elharo", "createdAt": "2020-09-10T22:47:47Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -88,6 +88,23 @@ public static void main(String[] arguments)\n             inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n     ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n \n+    linkageProblems = filterReachable(linkageCheckerArguments, linkageChecker, linkageProblems);\n+\n+    if (writeExclusionFile(linkageCheckerArguments, linkageProblems)) {\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {\n+      System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n+    }\n+\n+    return linkageProblems;\n+  }\n+\n+  private static ImmutableSet<LinkageProblem> filterReachable(\n+      LinkageCheckerArguments linkageCheckerArguments,\n+      LinkageChecker linkageChecker,\n+      ImmutableSet<LinkageProblem> linkageProblems) {\n     if (linkageCheckerArguments.getReportOnlyReachable()) {", "originalCommit": "738b30fe88cb033695d8c488c116cbae459ac0d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3ODAyMw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486678023", "bodyText": "It's now shared code in findLinkageProblems.", "author": "suztomo", "createdAt": "2020-09-10T22:56:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NTM3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f2488bec7ac32fdd7ca284b36c24c65b582fcb77", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\nindex b411b591..76539d73 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java\n\n@@ -86,13 +86,9 @@ class LinkageCheckerMain {\n     LinkageChecker linkageChecker =\n         LinkageChecker.create(\n             inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n-    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n-\n-    linkageProblems = filterReachable(linkageCheckerArguments, linkageChecker, linkageProblems);\n \n-    if (writeExclusionFile(linkageCheckerArguments, linkageProblems)) {\n-      return ImmutableSet.of();\n-    }\n+    ImmutableSet<LinkageProblem> linkageProblems =\n+        findLinkageProblems(linkageCheckerArguments, linkageChecker);\n \n     if (!linkageProblems.isEmpty()) {\n       System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n"}}, {"oid": "f2488bec7ac32fdd7ca284b36c24c65b582fcb77", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/f2488bec7ac32fdd7ca284b36c24c65b582fcb77", "message": "checkJarFile and checkArtifacts share findLinkageProblem", "committedDate": "2020-09-10T23:12:31Z", "type": "commit"}, {"oid": "c80e21c03f0bd0a3358d156b1d3c7a6d365598d0", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c80e21c03f0bd0a3358d156b1d3c7a6d365598d0", "message": "Pushed dependencyPaths to formatLinkageProblems", "committedDate": "2020-09-10T23:26:20Z", "type": "commit"}, {"oid": "c16d0adf01879d1a1652a436485fc7890ae018ec", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c16d0adf01879d1a1652a436485fc7890ae018ec", "message": "Fixed test", "committedDate": "2020-09-10T23:59:20Z", "type": "commit"}, {"oid": "701f864e8c904d41d802e7ac8ed8a2825404b317", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/701f864e8c904d41d802e7ac8ed8a2825404b317", "message": "Fixed assertions", "committedDate": "2020-09-11T00:25:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwNDc0Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486704747", "bodyText": "This logic has moved to formatDependencyPaths.", "author": "suztomo", "createdAt": "2020-09-11T00:27:45Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -57,85 +55,19 @@ public static void main(String[] arguments)\n         linkageCheckerArguments.printHelp();\n       }\n \n-      if (linkageCheckerArguments.hasInput()) { \n-        // This is non-empty if a BOM or artifacts are specified in the argument\n-        ImmutableList<Artifact> artifacts = linkageCheckerArguments.getArtifacts();\n-\n-        // When JAR files are specified in the argument, artifacts are empty.\n-        ImmutableList<ClassPathEntry> inputClassPath;\n-        ImmutableSet<ClassPathEntry> entryPoints;\n-        List<ArtifactProblem> artifactProblems = new ArrayList<>();\n-        // classPathResult is kept null if JAR files are specified in the argument\n-        ClassPathResult classPathResult = null;\n-    \n-        if (artifacts.isEmpty()) {\n-          // When JAR files are passed as arguments, classPathResult is null, because there is no need\n-          // to resolve Maven dependencies.\n-          inputClassPath = linkageCheckerArguments.getJarFiles();\n-          entryPoints = ImmutableSet.copyOf(inputClassPath);\n-        } else {\n-          // When a BOM or Maven artifacts are passed as arguments, resolve the dependencies.\n-          DependencyGraphBuilder dependencyGraphBuilder =\n-              new DependencyGraphBuilder(linkageCheckerArguments.getMavenRepositoryUrls());\n-          ClassPathBuilder classPathBuilder = new ClassPathBuilder(dependencyGraphBuilder);\n-          classPathResult = classPathBuilder.resolve(artifacts, false);\n-          inputClassPath = classPathResult.getClassPath();\n-          artifactProblems.addAll(classPathResult.getArtifactProblems());\n-          entryPoints = ImmutableSet.copyOf(inputClassPath.subList(0, artifacts.size()));\n-        }\n-\n-        LinkageChecker linkageChecker =\n-            LinkageChecker.create(\n-                inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n-        ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n-\n-        if (linkageCheckerArguments.getReportOnlyReachable()) {\n-          ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n-          linkageProblems =\n-              linkageProblems.stream()\n-                  .filter(\n-                      (LinkageProblem problem) ->\n-                          graph.isReachable(problem.getSourceClass().getBinaryName()))\n-                  .collect(toImmutableSet());\n-        }\n-\n-        if (classPathResult != null) {\n-          LinkageProblemCauseAnnotator.annotate(classPathResult, linkageProblems);\n-        }\n-\n-        Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n-        if (writeAsExclusionFile != null) {\n-          ExclusionFiles.write(writeAsExclusionFile, linkageProblems);\n-          System.out.println(\"Wrote the linkage errors as exclusion file: \" + writeAsExclusionFile);\n-          return;\n-        }\n+      if (linkageCheckerArguments.hasInput()) {\n+        // artifactsInArguments is not empty if a BOM or artifacts are specified in the argument.\n+        // If JAR files are specified, it's empty.\n+        ImmutableList<Artifact> artifactsInArguments = linkageCheckerArguments.getArtifacts();\n \n+        ImmutableSet<LinkageProblem> linkageProblems =\n+            artifactsInArguments.isEmpty()\n+                ? checkJarFiles(linkageCheckerArguments)\n+                : checkArtifacts(linkageCheckerArguments);\n         if (!linkageProblems.isEmpty()) {\n-          System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n-        }\n-\n-        if (classPathResult != null && !linkageProblems.isEmpty()) {\n-          ImmutableSet.Builder<ClassPathEntry> problematicJars = ImmutableSet.builder();\n-          for (LinkageProblem linkageProblem : linkageProblems) {\n-            ClassFile targetClass = linkageProblem.getTargetClass();\n-            if (targetClass != null) {\n-              problematicJars.add(targetClass.getClassPathEntry());\n-            }\n-            ClassFile sourceClassFile = linkageProblem.getSourceClass();\n-            problematicJars.add(sourceClassFile.getClassPathEntry());\n-          }\n-          System.out.println(classPathResult.formatDependencyPaths(problematicJars.build()));\n-        }", "originalCommit": "701f864e8c904d41d802e7ac8ed8a2825404b317", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwNTI5OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486705299", "bodyText": "This has moved to formatLinkageProblems.", "author": "suztomo", "createdAt": "2020-09-11T00:29:52Z", "path": "enforcer-rules/src/main/java/com/google/cloud/tools/dependencies/enforcer/LinkageCheckerRule.java", "diffHunk": "@@ -385,20 +382,4 @@ private ClassPathResult findBomClasspath(\n     }\n     return result;\n   }\n-\n-  private String dependencyPathsOfProblematicJars(", "originalCommit": "701f864e8c904d41d802e7ac8ed8a2825404b317", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwNTQ0MA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486705440", "bodyText": "Now one error() prints both linkage problems and dependency paths.", "author": "suztomo", "createdAt": "2020-09-11T00:30:29Z", "path": "enforcer-rules/src/test/java/com/google/cloud/tools/dependencies/enforcer/LinkageCheckerRuleTest.java", "diffHunk": "@@ -232,12 +231,12 @@ public void testExecute_shouldFailForBadProject() throws RepositoryException {\n     } catch (EnforcerRuleException ex) {\n       // pass\n       ArgumentCaptor<String> errorMessageCaptor = ArgumentCaptor.forClass(String.class);\n-      verify(mockLog, times(2)).error(errorMessageCaptor.capture());\n+      verify(mockLog, times(1)).error(errorMessageCaptor.capture());", "originalCommit": "701f864e8c904d41d802e7ac8ed8a2825404b317", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e85403c7efd8e6557470a0f18b4a3acc5a0d1d7", "chunk": "diff --git a/enforcer-rules/src/test/java/com/google/cloud/tools/dependencies/enforcer/LinkageCheckerRuleTest.java b/enforcer-rules/src/test/java/com/google/cloud/tools/dependencies/enforcer/LinkageCheckerRuleTest.java\nindex 9356b950..d888e706 100644\n--- a/enforcer-rules/src/test/java/com/google/cloud/tools/dependencies/enforcer/LinkageCheckerRuleTest.java\n+++ b/enforcer-rules/src/test/java/com/google/cloud/tools/dependencies/enforcer/LinkageCheckerRuleTest.java\n\n@@ -234,7 +234,7 @@ public class LinkageCheckerRuleTest {\n       verify(mockLog, times(1)).error(errorMessageCaptor.capture());\n \n       String errorMessage = errorMessageCaptor.getValue();\n-      Truth.assertThat(errorMessage).startsWith(\"Linkage Checker rule found 112 errors.\");\n+      Truth.assertThat(errorMessage).startsWith(\"Linkage Checker rule found 112 errors:\");\n       Truth.assertThat(errorMessage)\n           .contains(\n               \"Problematic artifacts in the dependency tree:\\n\"\n"}}, {"oid": "73e537727f69776dfca145309b67ca7d774b48c6", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/73e537727f69776dfca145309b67ca7d774b48c6", "message": "Merge remote-tracking branch 'origin/master' into i1609", "committedDate": "2020-09-11T13:23:13Z", "type": "commit"}, {"oid": "3e85403c7efd8e6557470a0f18b4a3acc5a0d1d7", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/3e85403c7efd8e6557470a0f18b4a3acc5a0d1d7", "message": "Fixed test", "committedDate": "2020-09-11T13:24:40Z", "type": "commit"}]}