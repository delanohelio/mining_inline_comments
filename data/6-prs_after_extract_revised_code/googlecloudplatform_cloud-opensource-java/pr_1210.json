{"pr_number": 1210, "pr_title": "DependencyGraphBuilder.buildLinkageCheckDependencyGraph to catch DependencyResolutionException", "pr_createdAt": "2020-02-12T19:15:38Z", "pr_url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210", "timeline": [{"oid": "90caed04b8d420c568f490cb0c0617ee467206e7", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/90caed04b8d420c568f490cb0c0617ee467206e7", "message": "Refactoring", "committedDate": "2020-02-12T18:48:01Z", "type": "commit"}, {"oid": "f14cf8943fd8fea3b2031d1e8676c88fa4b73fcf", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/f14cf8943fd8fea3b2031d1e8676c88fa4b73fcf", "message": "Added test", "committedDate": "2020-02-12T18:55:47Z", "type": "commit"}, {"oid": "36b0a8abab1e63d5a4232918eddfe183c37099e9", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/36b0a8abab1e63d5a4232918eddfe183c37099e9", "message": "refactoring", "committedDate": "2020-02-12T19:00:24Z", "type": "commit"}, {"oid": "229c1baa4c3d303f9029f5a826fd857614eacf9e", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/229c1baa4c3d303f9029f5a826fd857614eacf9e", "message": "Fixed implementation", "committedDate": "2020-02-12T19:14:18Z", "type": "commit"}, {"oid": "dfec57bfd61e4c2b1ee336330dbde94ce49a4c76", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/dfec57bfd61e4c2b1ee336330dbde94ce49a4c76", "message": "ArtifactProblem uniqueness", "committedDate": "2020-02-12T19:53:40Z", "type": "commit"}, {"oid": "677254e341793861538839993e452f6531aa8534", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/677254e341793861538839993e452f6531aa8534", "message": "Equals test", "committedDate": "2020-02-12T19:58:16Z", "type": "commit"}, {"oid": "3be3c1f904061f76f119e606203f1fcbbdd10211", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/3be3c1f904061f76f119e606203f1fcbbdd10211", "message": "More test", "committedDate": "2020-02-12T20:00:18Z", "type": "commit"}, {"oid": "c24eee3017d7038014126400063c806d1127e5e7", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c24eee3017d7038014126400063c806d1127e5e7", "message": "Fixed tests", "committedDate": "2020-02-12T20:05:38Z", "type": "commit"}, {"oid": "37ca27b2ccdb551328a9279ee53fe0f777f615a5", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/37ca27b2ccdb551328a9279ee53fe0f777f615a5", "message": "Fixed test", "committedDate": "2020-02-12T20:34:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5NzgyMQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378497821", "bodyText": "Renamed getStaticLinkageCheckDependencyGraph to build ... to follow the previous refactoring.", "author": "suztomo", "createdAt": "2020-02-12T20:35:17Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java", "diffHunk": "@@ -68,15 +69,20 @@ public ClassPathResult resolve(List<Artifact> artifacts) throws RepositoryExcept\n     }\n     // dependencyGraph holds multiple versions for one artifact key (groupId:artifactId)\n     DependencyGraphResult result =\n-        dependencyGraphBuilder.getStaticLinkageCheckDependencyGraph(artifacts);\n+        dependencyGraphBuilder.buildLinkageCheckDependencyGraph(artifacts);", "originalCommit": "37ca27b2ccdb551328a9279ee53fe0f777f615a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1MTQ2Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378851466", "bodyText": "Good idea, though it's a little easier if this sort of change can happen in its own PR that takes less time to review and approve", "author": "elharo", "createdAt": "2020-02-13T13:14:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5NzgyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7f688f536391798bb9eb6f1cda763088baa66bd6", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java\nindex 9de2be7d..61a67c11 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java\n\n@@ -59,9 +58,8 @@ public final class ClassPathBuilder {\n    * closest' strategy follows Maven's dependency mediation.\n    *\n    * @param artifacts Maven artifacts to check. They are treated as the root of the dependency tree.\n-   * @throws RepositoryException when there is a problem retrieving jar files\n    */\n-  public ClassPathResult resolve(List<Artifact> artifacts) throws RepositoryException {\n+  public ClassPathResult resolve(List<Artifact> artifacts) {\n \n     LinkedListMultimap<Path, DependencyPath> multimap = LinkedListMultimap.create();\n     if (artifacts.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5ODQ5Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378498493", "bodyText": "Equality function is added to dedup at https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210/files#diff-659d7bf4148f942fcc1eb60a50a2ee80R261", "author": "suztomo", "createdAt": "2020-02-12T20:36:40Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java", "diffHunk": "@@ -78,4 +81,44 @@ public static String formatProblems(Iterable<ArtifactProblem> problems) {\n     }\n     return output.toString();\n   }\n+\n+  @Override\n+  public boolean equals(Object other) {", "originalCommit": "37ca27b2ccdb551328a9279ee53fe0f777f615a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5OTY3Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378499676", "bodyText": "Equality test is added in ArtifactProblemTest.", "author": "suztomo", "createdAt": "2020-02-12T20:39:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5ODQ5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8dad1efde325e71c13bbeabf97da4e1a421715ae", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java\nindex febf81e9..7a850da0 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java\n\n@@ -93,11 +93,11 @@ public abstract class ArtifactProblem {\n \n     ArtifactProblem otherProblem = (ArtifactProblem) other;\n     return Objects.equals(artifact, otherProblem.artifact)\n-        && sameDependencyPath(dependencyPath, otherProblem.dependencyPath);\n+        && equalsOnDependencies(dependencyPath, otherProblem.dependencyPath);\n   }\n \n-  private static boolean sameDependencyPath(\n-      ImmutableList<DependencyNode> listA, ImmutableList<DependencyNode> listB) {\n+  private static boolean equalsOnDependencies(\n+      List<DependencyNode> listA, List<DependencyNode> listB) {\n     int size = listA.size();\n     if (listB.size() != size) {\n       return false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5OTMyOQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378499329", "bodyText": "With this PR, missing artifact is recorded as getArtifactProblem(), not as an exception.", "author": "suztomo", "createdAt": "2020-02-12T20:38:35Z", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilderTest.java", "diffHunk": "@@ -131,15 +130,15 @@ public void testResolveClassPath_optionalDependency() throws RepositoryException\n   }\n \n   @Test\n-  public void testResolveClassPath_invalidCoordinate() {\n+  public void testResolveClassPath_invalidCoordinate() throws RepositoryException {\n     Artifact nonExistentArtifact = new DefaultArtifact(\"io.grpc:nosuchartifact:1.2.3\");\n-    try {\n-      classPathBuilder.resolve(ImmutableList.of(nonExistentArtifact));\n-      Assert.fail(\"Invalid Maven coodinate should raise RepositoryException\");", "originalCommit": "37ca27b2ccdb551328a9279ee53fe0f777f615a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f688f536391798bb9eb6f1cda763088baa66bd6", "chunk": "diff --git a/dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilderTest.java b/dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilderTest.java\nindex dd787bda..23937d02 100644\n--- a/dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilderTest.java\n+++ b/dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilderTest.java\n\n@@ -124,13 +122,13 @@ public class ClassPathBuilderTest {\n   }\n \n   @Test\n-  public void testResolveClassPath_optionalDependency() throws RepositoryException {\n+  public void testResolveClassPath_optionalDependency() {\n     List<Path> paths = resolveClassPath(\"com.google.cloud:google-cloud-bigtable:jar:0.66.0-alpha\");\n     Truth.assertThat(paths).comparingElementsUsing(PATH_FILE_NAMES).contains(\"log4j-1.2.12.jar\");\n   }\n \n   @Test\n-  public void testResolveClassPath_invalidCoordinate() throws RepositoryException {\n+  public void testResolveClassPath_invalidCoordinate() {\n     Artifact nonExistentArtifact = new DefaultArtifact(\"io.grpc:nosuchartifact:1.2.3\");\n     ClassPathResult result = classPathBuilder.resolve(ImmutableList.of(nonExistentArtifact));\n     ImmutableList<UnresolvableArtifactProblem> artifactProblems = result.getArtifactProblems();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwMDg0OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378500849", "bodyText": "This function has moved to DependencyGraphBuilder.\nhttps://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210/files#diff-659d7bf4148f942fcc1eb60a50a2ee80R283", "author": "suztomo", "createdAt": "2020-02-12T20:41:57Z", "path": "enforcer-rules/src/main/java/com/google/cloud/tools/dependencies/enforcer/LinkageCheckerRule.java", "diffHunk": "@@ -352,14 +339,4 @@ public void execute(@Nonnull EnforcerRuleHelper helper) throws EnforcerRuleExcep\n       throw new EnforcerRuleException(\"Failed to collect dependency \" + ex.getMessage(), ex);\n     }\n   }\n-\n-  private static ImmutableList<List<DependencyNode>> findArtifactPaths(", "originalCommit": "37ca27b2ccdb551328a9279ee53fe0f777f615a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f688f536391798bb9eb6f1cda763088baa66bd6", "chunk": "diff --git a/enforcer-rules/src/main/java/com/google/cloud/tools/dependencies/enforcer/LinkageCheckerRule.java b/enforcer-rules/src/main/java/com/google/cloud/tools/dependencies/enforcer/LinkageCheckerRule.java\nindex 35816626..860a8780 100644\n--- a/enforcer-rules/src/main/java/com/google/cloud/tools/dependencies/enforcer/LinkageCheckerRule.java\n+++ b/enforcer-rules/src/main/java/com/google/cloud/tools/dependencies/enforcer/LinkageCheckerRule.java\n\n@@ -327,16 +328,18 @@ public class LinkageCheckerRule extends AbstractNonCacheableEnforcerRule {\n       throws EnforcerRuleException {\n \n     ArtifactTypeRegistry artifactTypeRegistry = repositorySystemSession.getArtifactTypeRegistry();\n-    try {\n-      ImmutableList<Artifact> artifacts =\n-          bomProject.getDependencyManagement().getDependencies().stream()\n-              .map(dependency -> RepositoryUtils.toDependency(dependency, artifactTypeRegistry))\n-              .map(Dependency::getArtifact)\n-              .filter(artifact -> !shouldSkipBomMember(artifact))\n-              .collect(toImmutableList());\n-      return classPathBuilder.resolve(artifacts).getClassPath();\n-    } catch (RepositoryException ex) {\n-      throw new EnforcerRuleException(\"Failed to collect dependency \" + ex.getMessage(), ex);\n+    ImmutableList<Artifact> artifacts =\n+        bomProject.getDependencyManagement().getDependencies().stream()\n+            .map(dependency -> RepositoryUtils.toDependency(dependency, artifactTypeRegistry))\n+            .map(Dependency::getArtifact)\n+            .filter(artifact -> !shouldSkipBomMember(artifact))\n+            .collect(toImmutableList());\n+\n+    ClassPathResult result = classPathBuilder.resolve(artifacts);\n+    ImmutableList<UnresolvableArtifactProblem> artifactProblems = result.getArtifactProblems();\n+    if (!artifactProblems.isEmpty()) {\n+      throw new EnforcerRuleException(\"Failed to collect dependency: \" + artifactProblems);\n     }\n+    return result.getClassPath();\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwMTY2NA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378501664", "bodyText": "This is the motivation of this PR. Before this PR, the function threw DependencyResolutionException. Such errors should be reported as result.getArtifactProblems().", "author": "suztomo", "createdAt": "2020-02-12T20:43:48Z", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilderTest.java", "diffHunk": "@@ -234,14 +233,34 @@ public void testConfigureAdditionalMavenRepositories_notToUseMavenCentral()\n     // This artifact does not exist in Android's repository\n     Artifact artifact = new DefaultArtifact(\"com.google.guava:guava:28.2-jre\");\n \n-    try {\n-      graphBuilder.buildCompleteGraph(new Dependency(artifact, \"compile\"));\n-      fail(\"The dependency resolution should fail if Maven Central is not used\");\n-    } catch (DependencyResolutionException ex) {\n-      Truth.assertThat(ex.getMessage())\n-          .startsWith(\n-              \"Could not find artifact com.google.guava:guava:jar:28.2-jre in \"\n-                  + \" (https://dl.google.com/dl/android/maven2)\");\n-    }\n+    DependencyGraphResult result =\n+        graphBuilder.buildCompleteGraph(new Dependency(artifact, \"compile\"));\n+    Truth.assertThat(result.getArtifactProblems())\n+        .comparingElementsUsing(problemOnArtifact)\n+        .contains(\"com.google.guava:guava:28.2-jre\");\n+  }\n+\n+  @Test\n+  public void testBuildLinkageCheckDependencyGraph_catchRootException() throws RepositoryException {\n+    // This should not throw exception", "originalCommit": "37ca27b2ccdb551328a9279ee53fe0f777f615a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8835a0fbfddf9b801fcf6350694c05fc7c3b0ee8", "chunk": "diff --git a/dependencies/src/test/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilderTest.java b/dependencies/src/test/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilderTest.java\nindex d8a7fc60..7c93ad0c 100644\n--- a/dependencies/src/test/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilderTest.java\n+++ b/dependencies/src/test/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilderTest.java\n\n@@ -244,7 +246,7 @@ public class DependencyGraphBuilderTest {\n   public void testBuildLinkageCheckDependencyGraph_catchRootException() throws RepositoryException {\n     // This should not throw exception\n     DependencyGraphResult result =\n-        dependencyGraphBuilder.buildLinkageCheckDependencyGraph(\n+        dependencyGraphBuilder.getStaticLinkageCheckDependencyGraph(\n             ImmutableList.of(new DefaultArtifact(\"ant:ant:jar:1.6.2\")));\n \n     ImmutableList<UnresolvableArtifactProblem> problems = result.getArtifactProblems();\n"}}, {"oid": "ef916fb1a8328675fcd5e34b90f6cd913bff48bb", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/ef916fb1a8328675fcd5e34b90f6cd913bff48bb", "message": "Fixed compilation error", "committedDate": "2020-02-12T20:45:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwMzIxNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378503216", "bodyText": "This exception is not thrown any more.", "author": "suztomo", "createdAt": "2020-02-12T20:46:57Z", "path": "dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/DashboardMain.java", "diffHunk": "@@ -339,23 +339,18 @@ private static ArtifactCache loadArtifactInfo(List<Artifact> artifacts) {\n     List<DependencyGraph> globalDependencies = new ArrayList<>();\n \n     for (Artifact artifact : artifacts) {\n-      try {\n-        DependencyGraphResult completeDependencyResult =\n-            dependencyGraphBuilder.buildCompleteGraph(new Dependency(artifact, \"compile\"));\n-        DependencyGraph completeDependencies = completeDependencyResult.getDependencyGraph();\n-        globalDependencies.add(completeDependencies);\n-\n-        // picks versions according to Maven rules\n-        DependencyGraphResult transitiveDependencyResult =\n-            dependencyGraphBuilder.buildGraph(new Dependency(artifact, \"compile\"));\n-        DependencyGraph transitiveDependencies = transitiveDependencyResult.getDependencyGraph();\n-\n-        ArtifactInfo info = new ArtifactInfo(completeDependencies, transitiveDependencies);\n-        infoMap.put(artifact, info);\n-      } catch (RepositoryException ex) {", "originalCommit": "ef916fb1a8328675fcd5e34b90f6cd913bff48bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwMzYzMg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378503632", "bodyText": "DependencyNode does not have equals/hashcode. So leveraging Dependency class's equality.", "author": "suztomo", "createdAt": "2020-02-12T20:47:48Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java", "diffHunk": "@@ -78,4 +81,44 @@ public static String formatProblems(Iterable<ArtifactProblem> problems) {\n     }\n     return output.toString();\n   }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    }\n+    if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    ArtifactProblem otherProblem = (ArtifactProblem) other;\n+    return Objects.equals(artifact, otherProblem.artifact)\n+        && sameDependencyPath(dependencyPath, otherProblem.dependencyPath);\n+  }\n+\n+  private static boolean sameDependencyPath(\n+      ImmutableList<DependencyNode> listA, ImmutableList<DependencyNode> listB) {\n+    int size = listA.size();\n+    if (listB.size() != size) {\n+      return false;\n+    }\n+\n+    for (int i = 0; i < size; i++) {\n+      DependencyNode nodeA = listA.get(i);\n+      DependencyNode nodeB = listB.get(i);\n+      Dependency dependencyA = nodeA.getDependency();\n+      Dependency dependencyB = nodeB.getDependency();\n+      if (!Objects.equals(dependencyA, dependencyB)) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    ImmutableList<Dependency> dependencyList =", "originalCommit": "ef916fb1a8328675fcd5e34b90f6cd913bff48bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8dad1efde325e71c13bbeabf97da4e1a421715ae", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java\nindex febf81e9..7a850da0 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java\n\n@@ -93,11 +93,11 @@ public abstract class ArtifactProblem {\n \n     ArtifactProblem otherProblem = (ArtifactProblem) other;\n     return Objects.equals(artifact, otherProblem.artifact)\n-        && sameDependencyPath(dependencyPath, otherProblem.dependencyPath);\n+        && equalsOnDependencies(dependencyPath, otherProblem.dependencyPath);\n   }\n \n-  private static boolean sameDependencyPath(\n-      ImmutableList<DependencyNode> listA, ImmutableList<DependencyNode> listB) {\n+  private static boolean equalsOnDependencies(\n+      List<DependencyNode> listA, List<DependencyNode> listB) {\n     int size = listA.size();\n     if (listB.size() != size) {\n       return false;\n"}}, {"oid": "c2ac9a2e2c021e67e3e0dffa246298ffdeabbe15", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c2ac9a2e2c021e67e3e0dffa246298ffdeabbe15", "message": "Not to rely on exceptions", "committedDate": "2020-02-12T20:54:02Z", "type": "commit"}, {"oid": "71fe7aaac8ab3e54045c853cd3757af4a07cd8ad", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/71fe7aaac8ab3e54045c853cd3757af4a07cd8ad", "message": "javadoc fix", "committedDate": "2020-02-12T21:27:36Z", "type": "commit"}, {"oid": "bef1ca21680cb4aa687b96bda4b8977cc51f3eec", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/bef1ca21680cb4aa687b96bda4b8977cc51f3eec", "message": "Merge remote-tracking branch 'origin/master' into catch_root_exception", "committedDate": "2020-02-13T03:45:11Z", "type": "commit"}, {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/7f688f536391798bb9eb6f1cda763088baa66bd6", "message": "RepositoryException not thrown", "committedDate": "2020-02-13T04:05:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0MjQ0OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378642449", "bodyText": "Removing unnecessary override.", "author": "suztomo", "createdAt": "2020-02-13T04:10:56Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -128,21 +131,9 @@ public DependencyGraphBuilder(Iterable<String> mavenRepositoryUrls) {\n     this.repositories = repositoryListBuilder.build();\n   }\n \n-  private DependencyNode resolveCompileTimeDependencies(DependencyNode root)\n-      throws DependencyCollectionException, DependencyResolutionException {\n-    return resolveCompileTimeDependencies(root, false);", "originalCommit": "7f688f536391798bb9eb6f1cda763088baa66bd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1NTg3Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378855876", "bodyText": "What was being overridden? Or did you mean overload?\nAlso, is this removal dependent on this PR or could it be done separately?", "author": "elharo", "createdAt": "2020-02-13T13:23:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0MjQ0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkxNDYyOQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378914629", "bodyText": "Overload, yes.", "author": "suztomo", "createdAt": "2020-02-13T15:00:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0MjQ0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzMTc5MQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r379131791", "bodyText": "Reverted irrelevant refactoring.", "author": "suztomo", "createdAt": "2020-02-13T21:35:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0MjQ0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8835a0fbfddf9b801fcf6350694c05fc7c3b0ee8", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java\nindex 54dde855..8e46fe47 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java\n\n@@ -131,7 +131,18 @@ public final class DependencyGraphBuilder {\n     this.repositories = repositoryListBuilder.build();\n   }\n \n-  private DependencyNode resolveDependencyGraph(\n+  private DependencyNode resolveCompileTimeDependencies(DependencyNode root)\n+      throws DependencyResolutionException {\n+    return resolveCompileTimeDependencies(root, false);\n+  }\n+\n+  private DependencyNode resolveCompileTimeDependencies(\n+      DependencyNode root, boolean includeProvidedScope) throws DependencyResolutionException {\n+    return resolveCompileTimeDependencies(\n+        ImmutableList.of(root), includeProvidedScope);\n+  }\n+\n+  private DependencyNode resolveCompileTimeDependencies(\n       List<DependencyNode> dependencyNodes, boolean includeProvidedScope)\n       throws DependencyResolutionException {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NDA3Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378644073", "bodyText": "This function is now used by LinkageCheckerRule", "author": "suztomo", "createdAt": "2020-02-13T04:20:04Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java", "diffHunk": "@@ -67,7 +67,7 @@ public ClassPathResult(\n   }\n \n   /** Returns problems encountered while constructing the dependency graph. */\n-  ImmutableList<UnresolvableArtifactProblem> getArtifactProblems() {\n+  public ImmutableList<UnresolvableArtifactProblem> getArtifactProblems() {", "originalCommit": "7f688f536391798bb9eb6f1cda763088baa66bd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NDI4OA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378644288", "bodyText": "This method \"resolve\" does not throw RepositoryException any more.\nHandling the unresolved artifact error by checking result.getArtifactProblems().", "author": "suztomo", "createdAt": "2020-02-13T04:21:11Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java", "diffHunk": "@@ -200,7 +202,13 @@ private static Options configureOptions() {\n \n     if (commandLine.hasOption(\"b\") || commandLine.hasOption(\"a\")) {\n       List<Artifact> artifacts = getArtifacts();\n-      cachedInputClasspath = classPathBuilder.resolve(artifacts).getClassPath();", "originalCommit": "7f688f536391798bb9eb6f1cda763088baa66bd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a94840111e1f09ff12e49996c674875a195df7d", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java\nindex 7b158eb5..8618ba55 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java\n\n@@ -206,7 +206,7 @@ final class LinkageCheckerArguments {\n       ImmutableList<UnresolvableArtifactProblem> artifactProblems = result.getArtifactProblems();\n       if (!artifactProblems.isEmpty()) {\n         throw new RepositoryException(\n-            \"Unresolved artifacts: \" + Joiner.on(\",\").join(artifactProblems));\n+            \"Unresolved artifacts: \" + Joiner.on(\", \").join(artifactProblems));\n       }\n       cachedInputClasspath = result.getClassPath();\n     } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NDgyMQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378644821", "bodyText": "renamed this method to follow other method \"build...\"", "author": "suztomo", "createdAt": "2020-02-13T04:24:39Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -216,38 +208,90 @@ private DependencyNode resolveCompileTimeDependencies(\n    *\n    * @param artifacts Maven artifacts to retrieve their dependencies\n    * @return dependency graph representing the tree of Maven artifacts\n-   * @throws RepositoryException when there is a problem resolving or collecting dependencies\n    */\n-  public DependencyGraphResult getStaticLinkageCheckDependencyGraph(List<Artifact> artifacts)\n-      throws RepositoryException {\n+  public DependencyGraphResult buildLinkageCheckDependencyGraph(List<Artifact> artifacts) {", "originalCommit": "7f688f536391798bb9eb6f1cda763088baa66bd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8835a0fbfddf9b801fcf6350694c05fc7c3b0ee8", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java\nindex 54dde855..8e46fe47 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java\n\n@@ -209,7 +219,7 @@ public final class DependencyGraphBuilder {\n    * @param artifacts Maven artifacts to retrieve their dependencies\n    * @return dependency graph representing the tree of Maven artifacts\n    */\n-  public DependencyGraphResult buildLinkageCheckDependencyGraph(List<Artifact> artifacts) {\n+  public DependencyGraphResult getStaticLinkageCheckDependencyGraph(List<Artifact> artifacts) {\n     ImmutableList<DependencyNode> dependencyNodes =\n         artifacts.stream().map(DefaultDependencyNode::new).collect(toImmutableList());\n     return buildDependencyGraph(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NDkyMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378644920", "bodyText": "Set to remove duplicates.", "author": "suztomo", "createdAt": "2020-02-13T04:25:11Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -216,38 +208,90 @@ private DependencyNode resolveCompileTimeDependencies(\n    *\n    * @param artifacts Maven artifacts to retrieve their dependencies\n    * @return dependency graph representing the tree of Maven artifacts\n-   * @throws RepositoryException when there is a problem resolving or collecting dependencies\n    */\n-  public DependencyGraphResult getStaticLinkageCheckDependencyGraph(List<Artifact> artifacts)\n-      throws RepositoryException {\n+  public DependencyGraphResult buildLinkageCheckDependencyGraph(List<Artifact> artifacts) {\n     ImmutableList<DependencyNode> dependencyNodes =\n         artifacts.stream().map(DefaultDependencyNode::new).collect(toImmutableList());\n-    DependencyNode node = resolveCompileTimeDependencies(dependencyNodes, true);\n-    return levelOrder(node, GraphTraversalOption.FULL_DEPENDENCY_WITH_PROVIDED);\n+    return buildDependencyGraph(\n+        dependencyNodes, GraphTraversalOption.FULL_DEPENDENCY_WITH_PROVIDED);\n   }\n \n   /**\n    * Finds the full compile time, transitive dependency graph including duplicates and conflicting\n    * versions.\n    */\n-  public DependencyGraphResult buildCompleteGraph(Dependency dependency)\n-      throws RepositoryException {\n-\n+  public DependencyGraphResult buildCompleteGraph(Dependency dependency) {\n     DefaultDependencyNode root = new DefaultDependencyNode(dependency);\n-    DependencyNode node = resolveCompileTimeDependencies(root);\n-    return levelOrder(node, GraphTraversalOption.FULL_DEPENDENCY);\n+    return buildDependencyGraph(ImmutableList.of(root), GraphTraversalOption.FULL_DEPENDENCY);\n   }\n \n   /**\n    * Finds the complete transitive dependency graph as seen by Maven. It does not include duplicates\n    * and conflicting versions. That is, this resolves conflicting versions by picking the first\n    * version seen. This is how Maven normally operates.\n    */\n-  public DependencyGraphResult buildGraph(Dependency dependency)\n-      throws RepositoryException {\n-    // root node\n-    DependencyNode node = resolveCompileTimeDependencies(new DefaultDependencyNode(dependency));\n-    return levelOrder(node);\n+  public DependencyGraphResult buildGraph(Dependency dependency) {\n+    return buildDependencyGraph(\n+        ImmutableList.of(new DefaultDependencyNode(dependency)), GraphTraversalOption.NONE);\n+  }\n+\n+  private DependencyGraphResult buildDependencyGraph(\n+      List<DependencyNode> dependencyNodes, GraphTraversalOption traversalOption) {\n+    boolean includeProvidedScope =\n+        traversalOption == GraphTraversalOption.FULL_DEPENDENCY_WITH_PROVIDED;\n+    DependencyNode node;\n+    ImmutableSet.Builder<UnresolvableArtifactProblem> artifactProblems = ImmutableSet.builder();", "originalCommit": "7f688f536391798bb9eb6f1cda763088baa66bd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8835a0fbfddf9b801fcf6350694c05fc7c3b0ee8", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java\nindex 54dde855..8e46fe47 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java\n\n@@ -209,7 +219,7 @@ public final class DependencyGraphBuilder {\n    * @param artifacts Maven artifacts to retrieve their dependencies\n    * @return dependency graph representing the tree of Maven artifacts\n    */\n-  public DependencyGraphResult buildLinkageCheckDependencyGraph(List<Artifact> artifacts) {\n+  public DependencyGraphResult getStaticLinkageCheckDependencyGraph(List<Artifact> artifacts) {\n     ImmutableList<DependencyNode> dependencyNodes =\n         artifacts.stream().map(DefaultDependencyNode::new).collect(toImmutableList());\n     return buildDependencyGraph(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NTE2Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378645163", "bodyText": "artifact is null at a root dummy node.", "author": "suztomo", "createdAt": "2020-02-13T04:26:15Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -216,38 +208,90 @@ private DependencyNode resolveCompileTimeDependencies(\n    *\n    * @param artifacts Maven artifacts to retrieve their dependencies\n    * @return dependency graph representing the tree of Maven artifacts\n-   * @throws RepositoryException when there is a problem resolving or collecting dependencies\n    */\n-  public DependencyGraphResult getStaticLinkageCheckDependencyGraph(List<Artifact> artifacts)\n-      throws RepositoryException {\n+  public DependencyGraphResult buildLinkageCheckDependencyGraph(List<Artifact> artifacts) {\n     ImmutableList<DependencyNode> dependencyNodes =\n         artifacts.stream().map(DefaultDependencyNode::new).collect(toImmutableList());\n-    DependencyNode node = resolveCompileTimeDependencies(dependencyNodes, true);\n-    return levelOrder(node, GraphTraversalOption.FULL_DEPENDENCY_WITH_PROVIDED);\n+    return buildDependencyGraph(\n+        dependencyNodes, GraphTraversalOption.FULL_DEPENDENCY_WITH_PROVIDED);\n   }\n \n   /**\n    * Finds the full compile time, transitive dependency graph including duplicates and conflicting\n    * versions.\n    */\n-  public DependencyGraphResult buildCompleteGraph(Dependency dependency)\n-      throws RepositoryException {\n-\n+  public DependencyGraphResult buildCompleteGraph(Dependency dependency) {\n     DefaultDependencyNode root = new DefaultDependencyNode(dependency);\n-    DependencyNode node = resolveCompileTimeDependencies(root);\n-    return levelOrder(node, GraphTraversalOption.FULL_DEPENDENCY);\n+    return buildDependencyGraph(ImmutableList.of(root), GraphTraversalOption.FULL_DEPENDENCY);\n   }\n \n   /**\n    * Finds the complete transitive dependency graph as seen by Maven. It does not include duplicates\n    * and conflicting versions. That is, this resolves conflicting versions by picking the first\n    * version seen. This is how Maven normally operates.\n    */\n-  public DependencyGraphResult buildGraph(Dependency dependency)\n-      throws RepositoryException {\n-    // root node\n-    DependencyNode node = resolveCompileTimeDependencies(new DefaultDependencyNode(dependency));\n-    return levelOrder(node);\n+  public DependencyGraphResult buildGraph(Dependency dependency) {\n+    return buildDependencyGraph(\n+        ImmutableList.of(new DefaultDependencyNode(dependency)), GraphTraversalOption.NONE);\n+  }\n+\n+  private DependencyGraphResult buildDependencyGraph(\n+      List<DependencyNode> dependencyNodes, GraphTraversalOption traversalOption) {\n+    boolean includeProvidedScope =\n+        traversalOption == GraphTraversalOption.FULL_DEPENDENCY_WITH_PROVIDED;\n+    DependencyNode node;\n+    ImmutableSet.Builder<UnresolvableArtifactProblem> artifactProblems = ImmutableSet.builder();\n+\n+    try {\n+      node = resolveDependencyGraph(dependencyNodes, includeProvidedScope);\n+    } catch (DependencyResolutionException ex) {\n+      DependencyResult result = ex.getResult();\n+      node = result.getRoot();\n+      for (ArtifactResult artifactResult : result.getArtifactResults()) {\n+        Artifact resolvedArtifact = artifactResult.getArtifact();\n+        if (resolvedArtifact != null) {\n+          continue;\n+        }\n+        Artifact requestedArtifact = artifactResult.getRequest().getArtifact();\n+        artifactProblems.add(createUnresolvableArtifactProblem(node, requestedArtifact));\n+      }\n+    }\n+\n+    DependencyGraphResult result = levelOrder(node, traversalOption);\n+    // Duplicate problems found in resolveDependencyGraph and levelOrder are removed by ImmutableSet\n+    artifactProblems.addAll(result.getArtifactProblems());\n+\n+    return new DependencyGraphResult(result.getDependencyGraph(), artifactProblems.build());\n+  }\n+\n+  /**\n+   * Returns a problem describing that {@code artifact} is unresolvable in the {@code\n+   * dependencyGraph}.\n+   */\n+  public static UnresolvableArtifactProblem createUnresolvableArtifactProblem(\n+      DependencyNode dependencyGraph, Artifact artifact) {\n+    ImmutableList<List<DependencyNode>> paths = findArtifactPaths(dependencyGraph, artifact);\n+    if (paths.isEmpty()) {\n+      // On certain conditions, Maven throws ArtifactDescriptorException even when the\n+      // (transformed) dependency dependencyGraph does not contain the problematic artifact any\n+      // more.\n+      // https://issues.apache.org/jira/browse/MNG-6732\n+      return new UnresolvableArtifactProblem(artifact);\n+    } else {\n+      return new UnresolvableArtifactProblem(paths.get(0));\n+    }\n+  }\n+\n+  private static ImmutableList<List<DependencyNode>> findArtifactPaths(\n+      DependencyNode root, Artifact artifact) {\n+    String coordinates = Artifacts.toCoordinates(artifact);\n+    DependencyFilter filter =\n+        (node, parents) ->\n+            node.getArtifact() != null", "originalCommit": "7f688f536391798bb9eb6f1cda763088baa66bd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1NjczMg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378856732", "bodyText": "This would be more useful as a code comment than a review comment.", "author": "elharo", "createdAt": "2020-02-13T13:25:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NTE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzMzQ4MQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r379133481", "bodyText": "Added source code comment.", "author": "suztomo", "createdAt": "2020-02-13T21:39:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NTE2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8835a0fbfddf9b801fcf6350694c05fc7c3b0ee8", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java\nindex 54dde855..8e46fe47 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java\n\n@@ -209,7 +219,7 @@ public final class DependencyGraphBuilder {\n    * @param artifacts Maven artifacts to retrieve their dependencies\n    * @return dependency graph representing the tree of Maven artifacts\n    */\n-  public DependencyGraphResult buildLinkageCheckDependencyGraph(List<Artifact> artifacts) {\n+  public DependencyGraphResult getStaticLinkageCheckDependencyGraph(List<Artifact> artifacts) {\n     ImmutableList<DependencyNode> dependencyNodes =\n         artifacts.stream().map(DefaultDependencyNode::new).collect(toImmutableList());\n     return buildDependencyGraph(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NTI5Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378645292", "bodyText": "This exception is no longer thrown.", "author": "suztomo", "createdAt": "2020-02-13T04:26:53Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -345,8 +386,6 @@ private DependencyGraphResult levelOrder(\n                 artifactProblems.add(new UnresolvableArtifactProblem(fullPath));\n               }\n             }\n-          } catch (DependencyCollectionException collectionException) {", "originalCommit": "7f688f536391798bb9eb6f1cda763088baa66bd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NjA1Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378646057", "bodyText": "testBuildLinkageCheckDependencyGraph_catchRootException revealed that sometimes there was duplicate element in dependency path. For example:\nxerces:xerces-impl:jar:2.6.2 was not resolved. Dependency path: ant:ant:jar:1.6.2 (compile) > xerces:xerces-impl:jar:2.6.2 (compile?) > xerces:xerces-impl:jar:2.6.2 (compile?)", "author": "suztomo", "createdAt": "2020-02-13T04:30:44Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -365,7 +404,14 @@ private DependencyGraphResult levelOrder(\n       Stack<DependencyNode> parentNodes, DependencyNode failedDependencyNode) {\n     List<DependencyNode> fullPath = new ArrayList<>();\n     fullPath.addAll(parentNodes);\n-    fullPath.add(failedDependencyNode);", "originalCommit": "7f688f536391798bb9eb6f1cda763088baa66bd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8835a0fbfddf9b801fcf6350694c05fc7c3b0ee8", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java\nindex 54dde855..8e46fe47 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java\n\n@@ -407,7 +420,9 @@ public final class DependencyGraphBuilder {\n \n     DependencyNode lastParent = Iterables.getLast(parentNodes);\n \n-    // Duplicate happens when root artifact is unavailable\n+    // Duplicate happens when root artifact is unavailable. For example:\n+    // xerces:xerces-impl:jar:2.6.2 was not resolved. Dependency path: ant:ant:jar:1.6.2 (compile)\n+    //   > xerces:xerces-impl:jar:2.6.2 (compile?) > xerces:xerces-impl:jar:2.6.2 (compile?)\n     if (!lastParent.getDependency().equals(failedDependencyNode.getDependency())) {\n       // Add child only when it's not duplicate\n       fullPath.add(failedDependencyNode);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NjUxNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378646516", "bodyText": "xerces-impl and xml-apis are not available (in Maven Central).", "author": "suztomo", "createdAt": "2020-02-13T04:33:15Z", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilderTest.java", "diffHunk": "@@ -234,14 +233,34 @@ public void testConfigureAdditionalMavenRepositories_notToUseMavenCentral()\n     // This artifact does not exist in Android's repository\n     Artifact artifact = new DefaultArtifact(\"com.google.guava:guava:28.2-jre\");\n \n-    try {\n-      graphBuilder.buildCompleteGraph(new Dependency(artifact, \"compile\"));\n-      fail(\"The dependency resolution should fail if Maven Central is not used\");\n-    } catch (DependencyResolutionException ex) {\n-      Truth.assertThat(ex.getMessage())\n-          .startsWith(\n-              \"Could not find artifact com.google.guava:guava:jar:28.2-jre in \"\n-                  + \" (https://dl.google.com/dl/android/maven2)\");\n-    }\n+    DependencyGraphResult result =\n+        graphBuilder.buildCompleteGraph(new Dependency(artifact, \"compile\"));\n+    Truth.assertThat(result.getArtifactProblems())\n+        .comparingElementsUsing(problemOnArtifact)\n+        .contains(\"com.google.guava:guava:28.2-jre\");\n+  }\n+\n+  @Test\n+  public void testBuildLinkageCheckDependencyGraph_catchRootException() throws RepositoryException {\n+    // This should not throw exception\n+    DependencyGraphResult result =\n+        dependencyGraphBuilder.buildLinkageCheckDependencyGraph(\n+            ImmutableList.of(new DefaultArtifact(\"ant:ant:jar:1.6.2\")));\n+\n+    ImmutableList<UnresolvableArtifactProblem> problems = result.getArtifactProblems();\n+\n+    Truth.assertThat(problems)\n+        .comparingElementsUsing(problemOnArtifact)\n+        .containsAtLeast(\"xerces:xerces-impl:2.6.2\", \"xml-apis:xml-apis:2.6.2\");\n+\n+    Truth.assertThat(problems).hasSize(2);\n+    Truth.assertThat(problems)\n+        .comparingElementsUsing(\n+            Correspondence.transforming(UnresolvableArtifactProblem::toString, \"has description\"))\n+        .containsExactly(\n+            \"xerces:xerces-impl:jar:2.6.2 was not resolved. Dependency path: ant:ant:jar:1.6.2\"\n+                + \" (compile) > xerces:xerces-impl:jar:2.6.2 (compile?)\",\n+            \"xml-apis:xml-apis:jar:2.6.2 was not resolved. Dependency path: ant:ant:jar:1.6.2\"\n+                + \" (compile) > xml-apis:xml-apis:jar:2.6.2 (compile?)\");", "originalCommit": "7f688f536391798bb9eb6f1cda763088baa66bd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8835a0fbfddf9b801fcf6350694c05fc7c3b0ee8", "chunk": "diff --git a/dependencies/src/test/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilderTest.java b/dependencies/src/test/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilderTest.java\nindex d8a7fc60..7c93ad0c 100644\n--- a/dependencies/src/test/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilderTest.java\n+++ b/dependencies/src/test/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilderTest.java\n\n@@ -244,7 +246,7 @@ public class DependencyGraphBuilderTest {\n   public void testBuildLinkageCheckDependencyGraph_catchRootException() throws RepositoryException {\n     // This should not throw exception\n     DependencyGraphResult result =\n-        dependencyGraphBuilder.buildLinkageCheckDependencyGraph(\n+        dependencyGraphBuilder.getStaticLinkageCheckDependencyGraph(\n             ImmutableList.of(new DefaultArtifact(\"ant:ant:jar:1.6.2\")));\n \n     ImmutableList<UnresolvableArtifactProblem> problems = result.getArtifactProblems();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1MzM1Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378853356", "bodyText": "not sure, but what if a file is not found for foo:bar:21.6 but we already have foo:bar:24.8 in the graph? Do we still record an unresolved artifact problem? Does this method still work?", "author": "elharo", "createdAt": "2020-02-13T13:18:47Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java", "diffHunk": "@@ -58,25 +58,29 @@ public ClassPathBuilder(DependencyGraphBuilder dependencyGraphBuilder) {\n    * closest' strategy follows Maven's dependency mediation.\n    *\n    * @param artifacts Maven artifacts to check. They are treated as the root of the dependency tree.\n-   * @throws RepositoryException when there is a problem retrieving jar files\n    */\n-  public ClassPathResult resolve(List<Artifact> artifacts) throws RepositoryException {\n+  public ClassPathResult resolve(List<Artifact> artifacts) {\n \n     LinkedListMultimap<Path, DependencyPath> multimap = LinkedListMultimap.create();\n     if (artifacts.isEmpty()) {\n       return new ClassPathResult(multimap, ImmutableList.of());\n     }\n     // dependencyGraph holds multiple versions for one artifact key (groupId:artifactId)\n     DependencyGraphResult result =\n-        dependencyGraphBuilder.getStaticLinkageCheckDependencyGraph(artifacts);\n+        dependencyGraphBuilder.buildLinkageCheckDependencyGraph(artifacts);\n     List<DependencyPath> dependencyPaths = result.getDependencyGraph().list();\n \n     // To remove duplicates on (groupId:artifactId) for dependency mediation\n     Map<String, String> keyToFirstArtifactVersion = Maps.newHashMap();\n \n     for (DependencyPath dependencyPath : dependencyPaths) {\n       Artifact artifact = dependencyPath.getLeaf();\n-      Path jarAbsolutePath = artifact.getFile().toPath().toAbsolutePath();\n+      File file = artifact.getFile();\n+      if (file == null) {", "originalCommit": "7f688f536391798bb9eb6f1cda763088baa66bd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkxODQ0OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378918449", "bodyText": "Yes, that unavailable artifacts are recorded in result.getArtifactProblems().\nCreated the followup. #1215", "author": "suztomo", "createdAt": "2020-02-13T15:06:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1MzM1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "8835a0fbfddf9b801fcf6350694c05fc7c3b0ee8", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java\nindex 61a67c11..db6b0cde 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java\n\n@@ -67,7 +67,7 @@ public final class ClassPathBuilder {\n     }\n     // dependencyGraph holds multiple versions for one artifact key (groupId:artifactId)\n     DependencyGraphResult result =\n-        dependencyGraphBuilder.buildLinkageCheckDependencyGraph(artifacts);\n+        dependencyGraphBuilder.getStaticLinkageCheckDependencyGraph(artifacts);\n     List<DependencyPath> dependencyPaths = result.getDependencyGraph().list();\n \n     // To remove duplicates on (groupId:artifactId) for dependency mediation\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1MzgyOA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378853828", "bodyText": "should probably add a space after the comma in the joiner", "author": "elharo", "createdAt": "2020-02-13T13:19:47Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java", "diffHunk": "@@ -200,7 +202,13 @@ private static Options configureOptions() {\n \n     if (commandLine.hasOption(\"b\") || commandLine.hasOption(\"a\")) {\n       List<Artifact> artifacts = getArtifacts();\n-      cachedInputClasspath = classPathBuilder.resolve(artifacts).getClassPath();\n+      ClassPathResult result = classPathBuilder.resolve(artifacts);\n+      ImmutableList<UnresolvableArtifactProblem> artifactProblems = result.getArtifactProblems();\n+      if (!artifactProblems.isEmpty()) {\n+        throw new RepositoryException(\n+            \"Unresolved artifacts: \" + Joiner.on(\",\").join(artifactProblems));", "originalCommit": "7f688f536391798bb9eb6f1cda763088baa66bd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyMDg0OA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378920848", "bodyText": "Added", "author": "suztomo", "createdAt": "2020-02-13T15:10:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1MzgyOA=="}], "type": "inlineReview", "revised_code": {"commit": "4a94840111e1f09ff12e49996c674875a195df7d", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java\nindex 7b158eb5..8618ba55 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java\n\n@@ -206,7 +206,7 @@ final class LinkageCheckerArguments {\n       ImmutableList<UnresolvableArtifactProblem> artifactProblems = result.getArtifactProblems();\n       if (!artifactProblems.isEmpty()) {\n         throw new RepositoryException(\n-            \"Unresolved artifacts: \" + Joiner.on(\",\").join(artifactProblems));\n+            \"Unresolved artifacts: \" + Joiner.on(\", \").join(artifactProblems));\n       }\n       cachedInputClasspath = result.getClassPath();\n     } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1NDg4NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378854885", "bodyText": "Any chance this method belongs in DependencyPath?", "author": "elharo", "createdAt": "2020-02-13T13:21:54Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java", "diffHunk": "@@ -78,4 +81,44 @@ public static String formatProblems(Iterable<ArtifactProblem> problems) {\n     }\n     return output.toString();\n   }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    }\n+    if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    ArtifactProblem otherProblem = (ArtifactProblem) other;\n+    return Objects.equals(artifact, otherProblem.artifact)\n+        && sameDependencyPath(dependencyPath, otherProblem.dependencyPath);\n+  }\n+\n+  private static boolean sameDependencyPath(", "originalCommit": "7f688f536391798bb9eb6f1cda763088baa66bd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyMDE5Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378920197", "bodyText": "com.google.cloud.tools.opensource.dependencies.DependencyPath does not use ImmutableList<DependencyNode>. It uses List<Dependency>. So this method should be in DependencyPath.", "author": "suztomo", "createdAt": "2020-02-13T15:09:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1NDg4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExMDg1MQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r379110851", "bodyText": "This method eeems like it works with both mutable and immutable lists.", "author": "elharo", "createdAt": "2020-02-13T20:49:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1NDg4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyOTY4OA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r379129688", "bodyText": "Yes. Updated. Also renamed to equalsOnDependencies as \"same\" implies checking object identity.\n  private static boolean equalsOnDependencies(\n      List<DependencyNode> listA, List<DependencyNode> listB) {", "author": "suztomo", "createdAt": "2020-02-13T21:31:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1NDg4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8dad1efde325e71c13bbeabf97da4e1a421715ae", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java\nindex febf81e9..7a850da0 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java\n\n@@ -93,11 +93,11 @@ public abstract class ArtifactProblem {\n \n     ArtifactProblem otherProblem = (ArtifactProblem) other;\n     return Objects.equals(artifact, otherProblem.artifact)\n-        && sameDependencyPath(dependencyPath, otherProblem.dependencyPath);\n+        && equalsOnDependencies(dependencyPath, otherProblem.dependencyPath);\n   }\n \n-  private static boolean sameDependencyPath(\n-      ImmutableList<DependencyNode> listA, ImmutableList<DependencyNode> listB) {\n+  private static boolean equalsOnDependencies(\n+      List<DependencyNode> listA, List<DependencyNode> listB) {\n     int size = listA.size();\n     if (listB.size() != size) {\n       return false;\n"}}, {"oid": "8835a0fbfddf9b801fcf6350694c05fc7c3b0ee8", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/8835a0fbfddf9b801fcf6350694c05fc7c3b0ee8", "message": "Reverted irrelevant refactoring", "committedDate": "2020-02-13T14:58:35Z", "type": "commit"}, {"oid": "4a94840111e1f09ff12e49996c674875a195df7d", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/4a94840111e1f09ff12e49996c674875a195df7d", "message": "Space after comma", "committedDate": "2020-02-13T15:10:39Z", "type": "commit"}, {"oid": "0d7e8db603d5fa7ed0fe9dab0994a09bf3aa4a3a", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/0d7e8db603d5fa7ed0fe9dab0994a09bf3aa4a3a", "message": "Merge branch 'master' into catch_root_exception", "committedDate": "2020-02-13T16:11:57Z", "type": "commit"}, {"oid": "8dad1efde325e71c13bbeabf97da4e1a421715ae", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/8dad1efde325e71c13bbeabf97da4e1a421715ae", "message": "equalsOnDependencies", "committedDate": "2020-02-13T21:29:55Z", "type": "commit"}]}