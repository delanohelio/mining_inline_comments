{"pr_number": 1826, "pr_title": "InaccessibleClassProblem.toString shouldn't rely on targetClass which may be null", "pr_createdAt": "2020-11-19T21:34:50Z", "pr_url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826", "timeline": [{"oid": "b9a56bac64d41e563a607b94569b126821ab4709", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/b9a56bac64d41e563a607b94569b126821ab4709", "message": "Target class may be null", "committedDate": "2020-11-19T21:32:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIxNjU0Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527216543", "bodyText": "why is this stored here and in the superclass? The superclass should be enough.", "author": "elharo", "createdAt": "2020-11-19T21:37:20Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblem.java", "diffHunk": "@@ -26,17 +28,22 @@\n  */\n final class InaccessibleClassProblem extends LinkageProblem {\n   private AccessModifier modifier;\n+  private ClassSymbol classSymbol;", "originalCommit": "b9a56bac64d41e563a607b94569b126821ab4709", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0NjgxNw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527246817", "bodyText": "That's a good point. It's not needed. Removed.", "author": "suztomo", "createdAt": "2020-11-19T22:28:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIxNjU0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "42dfb2fe225c248c7827abb5d454f57b05f25bac", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblem.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblem.java\nindex 4cff9c48..2f4a8edb 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblem.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblem.java\n\n@@ -28,7 +28,6 @@ import javax.annotation.Nullable;\n  */\n final class InaccessibleClassProblem extends LinkageProblem {\n   private AccessModifier modifier;\n-  private ClassSymbol classSymbol;\n \n   InaccessibleClassProblem(\n       ClassFile sourceClass,\n"}}, {"oid": "42dfb2fe225c248c7827abb5d454f57b05f25bac", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/42dfb2fe225c248c7827abb5d454f57b05f25bac", "message": "No classSymbol member", "committedDate": "2020-11-19T22:26:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0ODM0OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527248349", "bodyText": "I don't think there's a test for the case where this is null yet.", "author": "elharo", "createdAt": "2020-11-19T22:32:11Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -60,7 +60,10 @@\n    *     not exist in the class path.\n    */\n   LinkageProblem(\n-      String symbolProblemMessage, ClassFile sourceClass, Symbol symbol, ClassFile targetClass) {\n+      String symbolProblemMessage,\n+      ClassFile sourceClass,\n+      Symbol symbol,\n+      @Nullable ClassFile targetClass) {", "originalCommit": "42dfb2fe225c248c7827abb5d454f57b05f25bac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1MTMxOA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527251318", "bodyText": "Let me add a test.", "author": "suztomo", "createdAt": "2020-11-19T22:38:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0ODM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI3NjYwMw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527276603", "bodyText": "Added a test.", "author": "suztomo", "createdAt": "2020-11-19T23:40:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0ODM0OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0ODcyOQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527248729", "bodyText": "Is there a reason you have to change the type here?", "author": "elharo", "createdAt": "2020-11-19T22:33:04Z", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblemTest.java", "diffHunk": "@@ -25,42 +25,42 @@\n public class InaccessibleClassProblemTest {\n   \n   private ClassFile file;\n-  private Symbol symbol;\n-  \n+  private ClassSymbol symbol;", "originalCommit": "42dfb2fe225c248c7827abb5d454f57b05f25bac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1MTYxNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527251616", "bodyText": "It's because InaccessibleClassProblem now takes a class symbol, not a generic Symbol.", "author": "suztomo", "createdAt": "2020-11-19T22:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0ODcyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "24a012c8b280566e764c3696ee3b9b54c4c83c33", "chunk": "diff --git a/dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblemTest.java b/dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblemTest.java\nindex 2ce1c53d..37bfb0d1 100644\n--- a/dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblemTest.java\n+++ b/dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblemTest.java\n\n@@ -60,8 +60,18 @@ public class InaccessibleClassProblemTest {\n   public void testDefault() {\n     InaccessibleClassProblem problem =\n         new InaccessibleClassProblem(file, file, symbol, AccessModifier.DEFAULT);\n-    Assert.assertEquals(\"Class Foo has default access and is referenced by foo (different package)\",\n+    Assert.assertEquals(\n+        \"Class Foo has default access and is referenced by foo (different package)\",\n         problem.toString());\n   }\n \n+  @Test\n+  public void testToString_nullTargetClass() {\n+    InaccessibleClassProblem problem =\n+        new InaccessibleClassProblem(file, null, symbol, AccessModifier.DEFAULT);\n+\n+    Assert.assertEquals(\n+        \"Class Foo has default access and is referenced by foo (different package)\",\n+        problem.toString());\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0NTg0Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527245843", "bodyText": "getTargetClass() may return null. It caused the NullPointerException in the issue (#1825).", "author": "suztomo", "createdAt": "2020-11-19T22:26:56Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblem.java", "diffHunk": "@@ -28,15 +30,18 @@\n   private AccessModifier modifier;\n \n   InaccessibleClassProblem(\n-      ClassFile sourceClass, ClassFile targetClass, Symbol classSymbol, AccessModifier modifier) {\n+      ClassFile sourceClass,\n+      @Nullable ClassFile targetClass,\n+      ClassSymbol classSymbol,\n+      AccessModifier modifier) {\n     super(\"is not accessible\", sourceClass, classSymbol, targetClass);\n     this.modifier = modifier;\n   }\n \n   @Override\n   public final String toString() {\n     StringBuilder message = new StringBuilder();\n-    message.append(\"Class \" + getTargetClass().getBinaryName());", "originalCommit": "42dfb2fe225c248c7827abb5d454f57b05f25bac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0NjQ5MA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527246490", "bodyText": "The symbol for InaccessibleClassProblem should be a class symbol, not a field symbol or method symbol.", "author": "suztomo", "createdAt": "2020-11-19T22:28:11Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -266,7 +266,11 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n       if (!isClassAccessibleFrom(targetJavaClass, sourceClassName)) {\n         AccessModifier modifier = AccessModifier.fromFlag(targetJavaClass.getModifiers());\n         return Optional.of(\n-            new InaccessibleClassProblem(sourceClassFile, targetClassFile, symbol, modifier));\n+            new InaccessibleClassProblem(\n+                sourceClassFile,\n+                targetClassFile,\n+                new ClassSymbol(symbol.getClassBinaryName()),", "originalCommit": "42dfb2fe225c248c7827abb5d454f57b05f25bac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "24a012c8b280566e764c3696ee3b9b54c4c83c33", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/24a012c8b280566e764c3696ee3b9b54c4c83c33", "message": "Added test for null target", "committedDate": "2020-11-19T23:35:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI3NTM2NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527275365", "bodyText": "It was a generic Symbol. But InaccessibleClassProblem's symbol should always be a class symbol as written in the parameter name.", "author": "suztomo", "createdAt": "2020-11-19T23:36:54Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblem.java", "diffHunk": "@@ -28,15 +30,18 @@\n   private AccessModifier modifier;\n \n   InaccessibleClassProblem(\n-      ClassFile sourceClass, ClassFile targetClass, Symbol classSymbol, AccessModifier modifier) {\n+      ClassFile sourceClass,\n+      @Nullable ClassFile targetClass,\n+      ClassSymbol classSymbol,", "originalCommit": "24a012c8b280566e764c3696ee3b9b54c4c83c33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI3Njg4NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527276885", "bodyText": "#1825 had NullPointerException at this toString method.\njava.lang.NullPointerException\n\tat com.google.cloud.tools.opensource.classpath.InaccessibleClassProblem.toString(InaccessibleClassProblem.java:40)", "author": "suztomo", "createdAt": "2020-11-19T23:41:13Z", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblemTest.java", "diffHunk": "@@ -25,43 +25,53 @@\n public class InaccessibleClassProblemTest {\n   \n   private ClassFile file;\n-  private Symbol symbol;\n-  \n+  private ClassSymbol symbol;\n+\n   @Before\n   public void setUp() {\n     Path path = Paths.get(\"/usr/tmp\");\n     ClassPathEntry entry = new ClassPathEntry(path);\n     file = new ClassFile(entry, \"foo\");\n-    symbol = new ClassSymbol(\"\");\n+    symbol = new ClassSymbol(\"Foo\");\n   }\n \n   @Test\n   public void testProtected() {\n     InaccessibleClassProblem problem =\n         new InaccessibleClassProblem(file, file, symbol, AccessModifier.PROTECTED);\n-    Assert.assertEquals(\"Class foo is protected and is referenced by foo\", problem.toString());\n+    Assert.assertEquals(\"Class Foo is protected and is referenced by foo\", problem.toString());\n   }\n \n   @Test\n   public void testPrivate() {\n     InaccessibleClassProblem problem =\n         new InaccessibleClassProblem(file, file, symbol, AccessModifier.PRIVATE);\n-    Assert.assertEquals(\"Class foo is private and is referenced by foo\", problem.toString());\n+    Assert.assertEquals(\"Class Foo is private and is referenced by foo\", problem.toString());\n   }\n \n   @Test\n   public void testPublic() {\n     InaccessibleClassProblem problem =\n         new InaccessibleClassProblem(file, file, symbol, AccessModifier.PUBLIC);\n-    Assert.assertEquals(\"Class foo is public and is referenced by foo\", problem.toString());\n+    Assert.assertEquals(\"Class Foo is public and is referenced by foo\", problem.toString());\n   }\n \n   @Test\n   public void testDefault() {\n     InaccessibleClassProblem problem =\n         new InaccessibleClassProblem(file, file, symbol, AccessModifier.DEFAULT);\n-    Assert.assertEquals(\"Class foo has default access and is referenced by foo (different package)\",\n+    Assert.assertEquals(\n+        \"Class Foo has default access and is referenced by foo (different package)\",\n         problem.toString());\n   }\n \n+  @Test\n+  public void testToString_nullTargetClass() {\n+    InaccessibleClassProblem problem =\n+        new InaccessibleClassProblem(file, null, symbol, AccessModifier.DEFAULT);\n+\n+    Assert.assertEquals(\n+        \"Class Foo has default access and is referenced by foo (different package)\",\n+        problem.toString());", "originalCommit": "24a012c8b280566e764c3696ee3b9b54c4c83c33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}