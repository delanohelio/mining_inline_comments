{"pr_number": 1501, "pr_title": "Dependency Trees in BOM Dashboard", "pr_createdAt": "2020-06-26T18:18:38Z", "pr_url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501", "timeline": [{"oid": "ebccc08d31ea60e4eeae598026548359de9aeee9", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/ebccc08d31ea60e4eeae598026548359de9aeee9", "message": "Showing dependency trees in dashboard", "committedDate": "2020-06-26T18:01:21Z", "type": "commit"}, {"oid": "bbd9fcbd20d298db5517c3f8325796f123db1a6f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/bbd9fcbd20d298db5517c3f8325796f123db1a6f", "message": "link from index", "committedDate": "2020-06-26T18:08:10Z", "type": "commit"}, {"oid": "70ce242b33882bea5992f7d8fbf8e0ce76268b07", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/70ce242b33882bea5992f7d8fbf8e0ce76268b07", "message": "Fixed test", "committedDate": "2020-06-26T19:04:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4OTU3Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r446389573", "bodyText": "can we use a more specific type here? i.e. a semantic class instead of a data structure?", "author": "elharo", "createdAt": "2020-06-26T20:15:02Z", "path": "dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/ArtifactResults.java", "diffHunk": "@@ -33,6 +37,7 @@\n   private final Map<String, Integer> results = new HashMap<>();\n   private final Artifact artifact;\n   private String exceptionMessage;\n+  private ImmutableListMultimap<DependencyPath, DependencyPath> dependencyTree;", "originalCommit": "70ce242b33882bea5992f7d8fbf8e0ce76268b07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNzQ2NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r446417465", "bodyText": "Will do.", "author": "suztomo", "createdAt": "2020-06-26T21:26:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4OTU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0MzAwMg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r446443002", "bodyText": "This is reverted in favor of DependencyGraph class.", "author": "suztomo", "createdAt": "2020-06-26T22:52:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4OTU3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e6f926fbefb66e492af5b2a910035102682bd0ba", "chunk": "diff --git a/dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/ArtifactResults.java b/dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/ArtifactResults.java\nindex 11a33ee5..da528a2f 100644\n--- a/dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/ArtifactResults.java\n+++ b/dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/ArtifactResults.java\n\n@@ -37,7 +33,6 @@ public final class ArtifactResults {\n   private final Map<String, Integer> results = new HashMap<>();\n   private final Artifact artifact;\n   private String exceptionMessage;\n-  private ImmutableListMultimap<DependencyPath, DependencyPath> dependencyTree;\n \n   public ArtifactResults(Artifact artifact) {\n     this.artifact = artifact;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM5MDcxNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r446390716", "bodyText": "why are we passing the same object as key and value?", "author": "elharo", "createdAt": "2020-06-26T20:17:55Z", "path": "dashboard/src/test/java/com/google/cloud/tools/opensource/dashboard/DashboardUnavailableArtifactTest.java", "diffHunk": "@@ -118,12 +120,17 @@ public void testDashboardWithRepositoryException()\n     validArtifactResult.addResult(DashboardMain.TEST_NAME_UPPER_BOUND, 0);\n     validArtifactResult.addResult(DashboardMain.TEST_NAME_DEPENDENCY_CONVERGENCE, 0);\n     validArtifactResult.addResult(DashboardMain.TEST_NAME_GLOBAL_UPPER_BOUND, 0);\n+    DependencyPath rootValid = new DependencyPath(validArtifact);\n+    validArtifactResult.setDependencyTree(ImmutableListMultimap.of(rootValid, rootValid));", "originalCommit": "70ce242b33882bea5992f7d8fbf8e0ce76268b07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNzc0Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r446417746", "bodyText": "It's a convention of the multipmap<DependencyPath, dependencyPath>. I'll try to use DependencyGraph and this will be gone.", "author": "suztomo", "createdAt": "2020-06-26T21:27:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM5MDcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0MDM3NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r446440375", "bodyText": "This piece of code is removed.", "author": "suztomo", "createdAt": "2020-06-26T22:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM5MDcxNg=="}], "type": "inlineReview", "revised_code": {"commit": "e6f926fbefb66e492af5b2a910035102682bd0ba", "chunk": "diff --git a/dashboard/src/test/java/com/google/cloud/tools/opensource/dashboard/DashboardUnavailableArtifactTest.java b/dashboard/src/test/java/com/google/cloud/tools/opensource/dashboard/DashboardUnavailableArtifactTest.java\nindex 7c7be17a..270583ca 100644\n--- a/dashboard/src/test/java/com/google/cloud/tools/opensource/dashboard/DashboardUnavailableArtifactTest.java\n+++ b/dashboard/src/test/java/com/google/cloud/tools/opensource/dashboard/DashboardUnavailableArtifactTest.java\n\n@@ -120,16 +122,12 @@ public class DashboardUnavailableArtifactTest {\n     validArtifactResult.addResult(DashboardMain.TEST_NAME_UPPER_BOUND, 0);\n     validArtifactResult.addResult(DashboardMain.TEST_NAME_DEPENDENCY_CONVERGENCE, 0);\n     validArtifactResult.addResult(DashboardMain.TEST_NAME_GLOBAL_UPPER_BOUND, 0);\n-    DependencyPath rootValid = new DependencyPath(validArtifact);\n-    validArtifactResult.setDependencyTree(ImmutableListMultimap.of(rootValid, rootValid));\n \n     Artifact invalidArtifact = new DefaultArtifact(\"io.grpc:nonexistent:jar:1.15.0\");\n     ArtifactResults errorArtifactResult = new ArtifactResults(invalidArtifact);\n     errorArtifactResult.setExceptionMessage(\n         \"Could not find artifact io.grpc:nonexistent:jar:1.15.0 in central\"\n             + \" (https://repo1.maven.org/maven2/)\");\n-    DependencyPath rootInvalid = new DependencyPath(invalidArtifact);\n-    errorArtifactResult.setDependencyTree(ImmutableListMultimap.of(rootInvalid, rootInvalid));\n \n     List<ArtifactResults> table = new ArrayList<>();\n     table.add(validArtifactResult);\n"}}, {"oid": "e6f926fbefb66e492af5b2a910035102682bd0ba", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/e6f926fbefb66e492af5b2a910035102682bd0ba", "message": "DependencyGraph", "committedDate": "2020-06-26T22:38:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzOTk2MQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r446439961", "bodyText": "Now we don't need to depend on ListMultimap<DependencyPath, DependencyPath>, because the parent-children relationship is inside DependencyGraph.", "author": "suztomo", "createdAt": "2020-06-26T22:39:33Z", "path": "dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/DashboardMain.java", "diffHunk": "@@ -348,40 +345,33 @@ private static ArtifactResults generateArtifactReport(\n         new FileOutputStream(outputFile), StandardCharsets.UTF_8)) {\n \n       // includes all versions\n-      DependencyGraph completeDependencies = artifactInfo.getCompleteDependencies();\n-      List<Update> convergenceIssues = completeDependencies.findUpdates();\n+      DependencyGraph graph = artifactInfo.getCompleteDependencies();\n+      List<Update> convergenceIssues = graph.findUpdates();\n \n       // picks versions according to Maven rules\n       DependencyGraph transitiveDependencies = artifactInfo.getTransitiveDependencies();\n \n       Map<Artifact, Artifact> upperBoundFailures =\n-          findUpperBoundsFailures(completeDependencies.getHighestVersionMap(),\n-              transitiveDependencies);\n+          findUpperBoundsFailures(graph.getHighestVersionMap(), transitiveDependencies);\n \n       Map<Artifact, Artifact> globalUpperBoundFailures = findUpperBoundsFailures(\n           collectLatestVersions(globalDependencies), transitiveDependencies);\n \n-      List<DependencyPath> dependencyPaths = completeDependencies.list();\n-\n       long totalLinkageErrorCount =\n           symbolProblemTable.values().stream()\n               .flatMap(problemToClasses -> problemToClasses.keySet().stream())\n               .distinct()\n               .count();\n \n-      ListMultimap<DependencyPath, DependencyPath> dependencyTree =\n-          DependencyTreeFormatter.buildDependencyPathTree(dependencyPaths);\n       Template report = configuration.getTemplate(\"/templates/component.ftl\");\n \n-      DependencyPath rootNode = Iterables.getFirst(dependencyTree.values(), null);", "originalCommit": "e6f926fbefb66e492af5b2a910035102682bd0ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0MDY0Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r446440643", "bodyText": "It used to pass parent-children relationship and the root node. Now DependencyGraph knows both.", "author": "suztomo", "createdAt": "2020-06-26T22:42:29Z", "path": "dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/DashboardMain.java", "diffHunk": "@@ -348,40 +345,33 @@ private static ArtifactResults generateArtifactReport(\n         new FileOutputStream(outputFile), StandardCharsets.UTF_8)) {\n \n       // includes all versions\n-      DependencyGraph completeDependencies = artifactInfo.getCompleteDependencies();\n-      List<Update> convergenceIssues = completeDependencies.findUpdates();\n+      DependencyGraph graph = artifactInfo.getCompleteDependencies();\n+      List<Update> convergenceIssues = graph.findUpdates();\n \n       // picks versions according to Maven rules\n       DependencyGraph transitiveDependencies = artifactInfo.getTransitiveDependencies();\n \n       Map<Artifact, Artifact> upperBoundFailures =\n-          findUpperBoundsFailures(completeDependencies.getHighestVersionMap(),\n-              transitiveDependencies);\n+          findUpperBoundsFailures(graph.getHighestVersionMap(), transitiveDependencies);\n \n       Map<Artifact, Artifact> globalUpperBoundFailures = findUpperBoundsFailures(\n           collectLatestVersions(globalDependencies), transitiveDependencies);\n \n-      List<DependencyPath> dependencyPaths = completeDependencies.list();\n-\n       long totalLinkageErrorCount =\n           symbolProblemTable.values().stream()\n               .flatMap(problemToClasses -> problemToClasses.keySet().stream())\n               .distinct()\n               .count();\n \n-      ListMultimap<DependencyPath, DependencyPath> dependencyTree =\n-          DependencyTreeFormatter.buildDependencyPathTree(dependencyPaths);\n       Template report = configuration.getTemplate(\"/templates/component.ftl\");\n \n-      DependencyPath rootNode = Iterables.getFirst(dependencyTree.values(), null);\n       Map<String, Object> templateData = new HashMap<>();\n       templateData.put(\"artifact\", artifact);\n       templateData.put(\"updates\", convergenceIssues);\n       templateData.put(\"upperBoundFailures\", upperBoundFailures);\n       templateData.put(\"globalUpperBoundFailures\", globalUpperBoundFailures);\n       templateData.put(\"lastUpdated\", LocalDateTime.now());\n-      templateData.put(\"dependencyTree\", dependencyTree);\n-      templateData.put(\"dependencyRootNode\", rootNode);\n+      templateData.put(\"dependencyGraph\", graph);", "originalCommit": "e6f926fbefb66e492af5b2a910035102682bd0ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0MDk0Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r446440946", "bodyText": "This test is set to use libraries-bom:1.0.0. Therefore this number 53144 does not change when we make changes to libraries-bom.", "author": "suztomo", "createdAt": "2020-06-26T22:43:41Z", "path": "dashboard/src/test/java/com/google/cloud/tools/opensource/dashboard/DashboardTest.java", "diffHunk": "@@ -439,6 +439,16 @@ public void testBomCoordinatesInUnstableArtifacts() throws IOException, ParsingE\n         \"BOM: com.google.cloud:libraries-bom:1.0.0\", bomCoordinatesNodes.get(0).getValue());\n   }\n \n+  @Test\n+  public void testDependencyTrees() throws IOException, ParsingException {\n+    Document document = parseOutputFile(\"dependency_trees.html\");\n+    Nodes dependencyTreeParagraph = document.query(\"//p[@class='dependency-tree-node']\");\n+\n+    Assert.assertEquals(53144, dependencyTreeParagraph.size());", "originalCommit": "e6f926fbefb66e492af5b2a910035102682bd0ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3NDI5Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r447774292", "bodyText": "However it appears it does change when we drop transitive optional dependencies. Not unexpected.", "author": "elharo", "createdAt": "2020-06-30T15:28:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0MDk0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwODYxMQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r447808611", "bodyText": "Yes, that's correct.", "author": "suztomo", "createdAt": "2020-06-30T16:16:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0MDk0Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1NzY4Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r447057682", "bodyText": "do we need to preserve insertion order here? If so, the type should be LinkedListMultimap", "author": "elharo", "createdAt": "2020-06-29T15:27:17Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java", "diffHunk": "@@ -79,6 +81,9 @@\n   // map of groupId:artifactId:version to paths\n   private SetMultimap<String, DependencyPath> paths = HashMultimap.create();\n \n+  private final ListMultimap<DependencyPath, DependencyPath> parentToChildren =\n+      LinkedListMultimap.create();", "originalCommit": "e6f926fbefb66e492af5b2a910035102682bd0ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3Njk0NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r447076945", "bodyText": "Updated for clarity.\nListMultimap holds the insertion order.\n\nA Multimap that can hold duplicate key-value pairs and that maintains the insertion ordering of values for a given key\n\nhttps://guava.dev/releases/19.0/api/docs/com/google/common/collect/ListMultimap.html", "author": "suztomo", "createdAt": "2020-06-29T15:54:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1NzY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ab6be0d7838c538d929676f5c25b5cbd286e41f5", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java\nindex 87759f6c..a7b3c430 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java\n\n@@ -81,7 +80,7 @@ public class DependencyGraph {\n   // map of groupId:artifactId:version to paths\n   private SetMultimap<String, DependencyPath> paths = HashMultimap.create();\n \n-  private final ListMultimap<DependencyPath, DependencyPath> parentToChildren =\n+  private final LinkedListMultimap<DependencyPath, DependencyPath> parentToChildren =\n       LinkedListMultimap.create();\n \n   private DependencyNode root;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1ODgxNw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r447058817", "bodyText": "This comment could be clearer. Is this the paths from the root to what exactly? What are the child paths of a dependency path?", "author": "elharo", "createdAt": "2020-06-29T15:28:51Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java", "diffHunk": "@@ -115,16 +120,29 @@ void addPath(DependencyPath path) {\n     return result;\n   }\n \n-  /**\n-   * @return a mutable copy of the paths in this graph, usually in breadth first order\n-   */\n+  /** Returns a mutable copy of the paths in this graph, usually in breadth first order. */\n   public List<DependencyPath> list() {\n     return new ArrayList<>(graph);\n   }\n \n   /**\n-   * @return all paths to the specified artifact\n+   * Returns dependency path of the root node.\n+   *\n+   * @throws IllegalStateException if the graph is empty\n    */\n+  public DependencyPath getRootPath() {\n+    if (graph.isEmpty()) {\n+      throw new IllegalStateException(\"The graph is empty\");\n+    }\n+    return graph.get(0);\n+  }\n+\n+  /** Returns the dependency paths of the children of the node at {@code dependencyPath}. */", "originalCommit": "e6f926fbefb66e492af5b2a910035102682bd0ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA4MjExMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r447082110", "bodyText": "Updated as Returns dependency paths from the root to the dependencies of the node at {@code  dependencyPath}..\nI thought renaming this to getDependencyDependencyPaths but this verbosity does not give clarity. Keeping getChildPaths.", "author": "suztomo", "createdAt": "2020-06-29T16:01:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1ODgxNw=="}], "type": "inlineReview", "revised_code": {"commit": "ab6be0d7838c538d929676f5c25b5cbd286e41f5", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java\nindex 87759f6c..a7b3c430 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java\n\n@@ -137,7 +136,10 @@ public class DependencyGraph {\n     return graph.get(0);\n   }\n \n-  /** Returns the dependency paths of the children of the node at {@code dependencyPath}. */\n+  /**\n+   * Returns dependency paths from the root to the dependencies of the node at {@code\n+   * dependencyPath}.\n+   */\n   public List<DependencyPath> getChildPaths(DependencyPath dependencyPath) {\n     return parentToChildren.get(dependencyPath);\n   }\n"}}, {"oid": "b9ed50f2eefff5b16ad74fa993c25937f54ac789", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/b9ed50f2eefff5b16ad74fa993c25937f54ac789", "message": "Merge remote-tracking branch 'origin/master' into dashboard_tree", "committedDate": "2020-06-29T15:50:31Z", "type": "commit"}, {"oid": "ab6be0d7838c538d929676f5c25b5cbd286e41f5", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/ab6be0d7838c538d929676f5c25b5cbd286e41f5", "message": "Applied review", "committedDate": "2020-06-29T15:58:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5MDcxMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r447090710", "bodyText": "dependencies of the node --> children of the node", "author": "elharo", "createdAt": "2020-06-29T16:15:03Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java", "diffHunk": "@@ -115,16 +119,32 @@ void addPath(DependencyPath path) {\n     return result;\n   }\n \n-  /**\n-   * @return a mutable copy of the paths in this graph, usually in breadth first order\n-   */\n+  /** Returns a mutable copy of the paths in this graph, usually in breadth first order. */\n   public List<DependencyPath> list() {\n     return new ArrayList<>(graph);\n   }\n \n   /**\n-   * @return all paths to the specified artifact\n+   * Returns dependency path of the root node.\n+   *\n+   * @throws IllegalStateException if the graph is empty\n+   */\n+  public DependencyPath getRootPath() {\n+    if (graph.isEmpty()) {\n+      throw new IllegalStateException(\"The graph is empty\");\n+    }\n+    return graph.get(0);\n+  }\n+\n+  /**\n+   * Returns dependency paths from the root to the dependencies of the node at {@code", "originalCommit": "ab6be0d7838c538d929676f5c25b5cbd286e41f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5NjM4NA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r447096384", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-06-29T16:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5MDcxMA=="}], "type": "inlineReview", "revised_code": {"commit": "e69f95499444838962b76221ecc8d50dc61a9fe8", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java\nindex a7b3c430..c42b3420 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java\n\n@@ -137,11 +137,10 @@ public class DependencyGraph {\n   }\n \n   /**\n-   * Returns dependency paths from the root to the dependencies of the node at {@code\n-   * dependencyPath}.\n+   * Returns dependency paths from the root to the children of the node at {@code dependencyPath}.\n    */\n-  public List<DependencyPath> getChildPaths(DependencyPath dependencyPath) {\n-    return parentToChildren.get(dependencyPath);\n+  public List<DependencyPath> getChildren(DependencyPath parent) {\n+    return parentToChildren.get(parent);\n   }\n \n   /** Returns all paths to the specified artifact. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5MTA4MA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r447091080", "bodyText": "possibly rename dependencyPath --> node or perhaps dependencyPath --> parent\nand now that I think about it, getChildren might be a better method name than getChildPaths", "author": "elharo", "createdAt": "2020-06-29T16:15:29Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java", "diffHunk": "@@ -115,16 +119,32 @@ void addPath(DependencyPath path) {\n     return result;\n   }\n \n-  /**\n-   * @return a mutable copy of the paths in this graph, usually in breadth first order\n-   */\n+  /** Returns a mutable copy of the paths in this graph, usually in breadth first order. */\n   public List<DependencyPath> list() {\n     return new ArrayList<>(graph);\n   }\n \n   /**\n-   * @return all paths to the specified artifact\n+   * Returns dependency path of the root node.\n+   *\n+   * @throws IllegalStateException if the graph is empty\n+   */\n+  public DependencyPath getRootPath() {\n+    if (graph.isEmpty()) {\n+      throw new IllegalStateException(\"The graph is empty\");\n+    }\n+    return graph.get(0);\n+  }\n+\n+  /**\n+   * Returns dependency paths from the root to the dependencies of the node at {@code\n+   * dependencyPath}.\n    */\n+  public List<DependencyPath> getChildPaths(DependencyPath dependencyPath) {", "originalCommit": "ab6be0d7838c538d929676f5c25b5cbd286e41f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5NjMyOQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r447096329", "bodyText": "Updated to getChildren. Thank you for suggestion.", "author": "suztomo", "createdAt": "2020-06-29T16:23:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5MTA4MA=="}], "type": "inlineReview", "revised_code": {"commit": "e69f95499444838962b76221ecc8d50dc61a9fe8", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java\nindex a7b3c430..c42b3420 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java\n\n@@ -137,11 +137,10 @@ public class DependencyGraph {\n   }\n \n   /**\n-   * Returns dependency paths from the root to the dependencies of the node at {@code\n-   * dependencyPath}.\n+   * Returns dependency paths from the root to the children of the node at {@code dependencyPath}.\n    */\n-  public List<DependencyPath> getChildPaths(DependencyPath dependencyPath) {\n-    return parentToChildren.get(dependencyPath);\n+  public List<DependencyPath> getChildren(DependencyPath parent) {\n+    return parentToChildren.get(parent);\n   }\n \n   /** Returns all paths to the specified artifact. */\n"}}, {"oid": "d0d14e4a8cf3c5f3143de6680ec42e39ec0bbd36", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d0d14e4a8cf3c5f3143de6680ec42e39ec0bbd36", "message": "Merge remote-tracking branch 'origin/master' into dashboard_tree", "committedDate": "2020-06-29T16:19:06Z", "type": "commit"}, {"oid": "e69f95499444838962b76221ecc8d50dc61a9fe8", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/e69f95499444838962b76221ecc8d50dc61a9fe8", "message": "getChildren", "committedDate": "2020-06-29T16:20:14Z", "type": "commit"}, {"oid": "7743c60b1d203edcf07aeb0c92bd1e55dc2dabce", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/7743c60b1d203edcf07aeb0c92bd1e55dc2dabce", "message": "Javadoc", "committedDate": "2020-06-29T16:21:47Z", "type": "commit"}, {"oid": "f712e0b8f8afe8762101123093905be08bbf663b", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/f712e0b8f8afe8762101123093905be08bbf663b", "message": "Fixing test", "committedDate": "2020-06-29T16:48:00Z", "type": "commit"}, {"oid": "e4f819d918d5a7ec94da3b5d58bd849b9ea920b3", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/e4f819d918d5a7ec94da3b5d58bd849b9ea920b3", "message": "Merge remote-tracking branch 'origin/master' into dashboard_tree", "committedDate": "2020-06-29T17:37:45Z", "type": "commit"}, {"oid": "f359674e67764a9388703b14f434a961bcb515d2", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/f359674e67764a9388703b14f434a961bcb515d2", "message": "Merge branch 'master' into dashboard_tree", "committedDate": "2020-06-29T20:22:08Z", "type": "commit"}]}