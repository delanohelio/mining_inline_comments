{"pr_number": 1404, "pr_title": "clarify distinction between file names and class names", "pr_createdAt": "2020-05-14T16:06:34Z", "pr_url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1404", "timeline": [{"oid": "d029fa87100046e388f888b8ac8413d96ea320d6", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d029fa87100046e388f888b8ac8413d96ea320d6", "message": "clarify comment", "committedDate": "2020-05-14T16:05:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2ODUzMQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1404#discussion_r425268531", "bodyText": "This locates a class file in a class path. Not in a class path entry. This FixedSizeClassPathRepository operates on a class path.\nDo you see this description is inaccurate?", "author": "suztomo", "createdAt": "2020-05-14T16:24:51Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/FixedSizeClassPathRepository.java", "diffHunk": "@@ -52,14 +52,15 @@\n    *\r\n    * <p>While class name and class file name are the same in most cases, sometimes classes are not\r\n    * placed in the root of a JAR file to support a framework-specific JAR structure. For example,\r\n-   * Spring Boot Gradle Java plugin places class files under \"BOOT-INF/classes\". To load such\r\n+   * the Spring Boot Gradle Java plugin places class files under \"BOOT-INF/classes\". To load such\r\n    * classes by class name, this mapping keeps track of the special location once they are loaded.\r\n    *\r\n    * <ul>\r\n    *   <li>Key: class name (value from {@link JavaClass#getClassName()}) which has a special class\r\n    *       file name different from its class name. Example: {@code com.google.Foo}\r\n    *   <li>Value: the special class file name as in {@link JavaClass#getFileName()}, a path that\r\n-   *       locates a class file in a class path. Example: {@code BOOT-INF.classes.com.google.Foo}\r\n+   *       locates a class file in a class path entry.\r", "originalCommit": "d029fa87100046e388f888b8ac8413d96ea320d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI3NjEzMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1404#discussion_r425276130", "bodyText": "A class file name such as BOOT-INF.classes.com.google.Foo does not tell us which jar the file is in. It only tells us where in this jar the file will be. Or am I misunderstanding the special class file name?", "author": "elharo", "createdAt": "2020-05-14T16:35:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2ODUzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMwOTY3Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1404#discussion_r425309672", "bodyText": "A class file name such as BOOT-INF.classes.com.google.Foo does not tell us which jar the file is in\n\nCorrect. No specific JAR file. That's why this is a path to locate a class file in a class path, not a JAR file.", "author": "suztomo", "createdAt": "2020-05-14T17:27:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2ODUzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMxNTE0MQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1404#discussion_r425315141", "bodyText": "I think I see where you're coming from, but I don't think as written this is correct. For instance, there can be multiple files with the same name in the class path. There can be only one of these in a class path entry. Perhaps we need to get rid of the notion of this as \"locating\" something. That's not what it does.", "author": "elharo", "createdAt": "2020-05-14T17:36:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2ODUzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "2ca383a3b058fc9b11be80546dcaf571a053729f", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/FixedSizeClassPathRepository.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/FixedSizeClassPathRepository.java\nindex 61890b2b..fdd777dc 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/FixedSizeClassPathRepository.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/FixedSizeClassPathRepository.java\n\n@@ -48,19 +48,23 @@ final class FixedSizeClassPathRepository extends ClassPathRepository {\n   private final Cache<String, JavaClass> loadedClass;\n \n   /**\n-   * Mapping from class names to special class file locations.\n+   * Mapping from class names to file names.\n    *\n-   * <p>While class name and class file name are the same in most cases, sometimes classes are not\n-   * placed in the root of a JAR file to support a framework-specific JAR structure. For example,\n-   * the Spring Boot Gradle Java plugin places class files under \"BOOT-INF/classes\". To load such\n-   * classes by class name, this mapping keeps track of the special location once they are loaded.\n+   * <p>Class names are the fully package qualified names found in Java source code such as\n+   * {@code com.google.Foo}. The byte code of this class is normally found in a JAR at the path\n+   * com/google/Foo.class. In this case {@code com.google.Foo} is also the file name.\n+   * \n+   * A few tools relocate classes into different directories within the JAR and use a special\n+   * class loader to process these JARs. For example, Spring Boot stores the byte code\n+   * for {@code com.google.Foo} in BOOT-INF/classes/com/google/Foo.class.\n+   * In this case, the class name is still {@code com.google.Foo} but the file name\n+   * is {@code BOOT-INF.classes.com.google.Foo}. To load such\n+   * classes, this mapping keeps track of the file names for each class name.\n    *\n    * <ul>\n-   *   <li>Key: class name (value from {@link JavaClass#getClassName()}) which has a special class\n-   *       file name different from its class name. Example: {@code com.google.Foo}\n-   *   <li>Value: the special class file name as in {@link JavaClass#getFileName()}, a path that\n-   *       locates a class file in a class path entry.\n-   *       Example: {@code BOOT-INF.classes.com.google.Foo}\n+   *   <li>Key: class name (value from {@link JavaClass#getClassName()}) such as {@code com.google.Foo}\n+   *   <li>Value: file name (value from {@link JavaClass#getFileName()} such as \n+   *   {@code BOOT-INF.classes.com.google.Foo}\n    * </ul>\n    *\n    * @see <a\n"}}, {"oid": "2ca383a3b058fc9b11be80546dcaf571a053729f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/2ca383a3b058fc9b11be80546dcaf571a053729f", "message": "distinguish file names", "committedDate": "2020-05-14T18:32:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1ODMzOQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1404#discussion_r425358339", "bodyText": "This is nice. Placing getOrDefault here is simplifying other places.", "author": "suztomo", "createdAt": "2020-05-14T18:49:26Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/FixedSizeClassPathRepository.java", "diffHunk": "@@ -114,11 +119,9 @@ public void clear() {\n   }\r\n \r\n   /**\r\n-   * Returns the special location for {@code className}. Null if no special location is known.\r\n-   *\r\n-   * @see #classFileNames\r\n+   * Returns the file name for the class.\r\n    */\r\n-  String getSpecialLocation(String className) {\r\n-    return classFileNames.get(className);\r\n+  String getFileName(String className) {\r\n+    return classFileNames.getOrDefault(className, className);\r", "originalCommit": "2ca383a3b058fc9b11be80546dcaf571a053729f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4MTUzNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1404#discussion_r425381536", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * A few tools relocate classes into different directories within the JAR and use a special\n          \n          \n            \n               * <p>A few tools relocate classes into different directories within the JAR and use a special\n          \n      \n    \n    \n  \n\nI like the clear explanation of the difference.", "author": "suztomo", "createdAt": "2020-05-14T19:33:02Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/FixedSizeClassPathRepository.java", "diffHunk": "@@ -48,18 +48,23 @@\n   private final Cache<String, JavaClass> loadedClass;\r\n \r\n   /**\r\n-   * Mapping from class names to special class file locations.\r\n+   * Mapping from class names to file names.\r\n    *\r\n-   * <p>While class name and class file name are the same in most cases, sometimes classes are not\r\n-   * placed in the root of a JAR file to support a framework-specific JAR structure. For example,\r\n-   * Spring Boot Gradle Java plugin places class files under \"BOOT-INF/classes\". To load such\r\n-   * classes by class name, this mapping keeps track of the special location once they are loaded.\r\n+   * <p>Class names are the fully package qualified names found in Java source code such as\r\n+   * {@code com.google.Foo}. The byte code of this class is normally found in a JAR at the path\r\n+   * com/google/Foo.class. In this case {@code com.google.Foo} is also the file name.\r\n+   * \r\n+   * A few tools relocate classes into different directories within the JAR and use a special\r", "originalCommit": "2ca383a3b058fc9b11be80546dcaf571a053729f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}