{"pr_number": 1152, "pr_title": "LinkageCheckerMain to report dependency paths", "pr_createdAt": "2020-01-24T17:03:55Z", "pr_url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1152", "timeline": [{"oid": "725a41cda21d65fbb79bdcc0cca4e9a63c525fb8", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/725a41cda21d65fbb79bdcc0cca4e9a63c525fb8", "message": "LinkageCheckerMain to report dependency paths", "committedDate": "2020-01-24T16:57:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0NDkyNA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1152#discussion_r370744924", "bodyText": "and 163 other dependency paths\ninstead\nand other 163 dependency paths", "author": "elharo", "createdAt": "2020-01-24T17:11:56Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java", "diffHunk": "@@ -69,4 +71,24 @@ public ClassPathResult(\n   ImmutableList<UnresolvableArtifactProblem> getArtifactProblems() {\n     return artifactProblems;\n   }\n+\n+  /** Returns text describing dependency paths to {@code jars} in the dependency tree. */\n+  public String formatDependencyPaths(Iterable<Path> jars) {\n+    StringBuilder message = new StringBuilder();\n+    for (Path jar : jars) {\n+      ImmutableList<DependencyPath> dependencyPaths = getDependencyPaths(jar);\n+      checkArgument(dependencyPaths.size() >= 1, \"%s is not in the class path\", jar);\n+\n+      message.append(jar.getFileName() + \" is at:\\n\");\n+\n+      int otherCount = dependencyPaths.size() - 1;\n+      message.append(\"  \" + dependencyPaths.get(0) + \"\\n\");\n+      if (otherCount == 1) {\n+        message.append(\"  and 1 dependency path.\\n\");\n+      } else if (otherCount > 1) {\n+        message.append(\"  and other \" + otherCount + \" dependency paths.\\n\");", "originalCommit": "725a41cda21d65fbb79bdcc0cca4e9a63c525fb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1MTUxOQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1152#discussion_r370751519", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-01-24T17:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0NDkyNA=="}], "type": "inlineReview", "revised_code": {"commit": "c6cc92b4c1be265e76e99b3e7d420eb2f6f56159", "chunk": "diff --git a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java\nindex 22e8cfdd..cce29547 100644\n--- a/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java\n+++ b/dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java\n\n@@ -86,7 +86,7 @@ public final class ClassPathResult {\n       if (otherCount == 1) {\n         message.append(\"  and 1 dependency path.\\n\");\n       } else if (otherCount > 1) {\n-        message.append(\"  and other \" + otherCount + \" dependency paths.\\n\");\n+        message.append(\"  and \" + otherCount + \" other dependency paths.\\n\");\n       }\n     }\n     return message.toString();\n"}}, {"oid": "c6cc92b4c1be265e76e99b3e7d420eb2f6f56159", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c6cc92b4c1be265e76e99b3e7d420eb2f6f56159", "message": "Applied review", "committedDate": "2020-01-24T17:26:04Z", "type": "commit"}, {"oid": "fe7d13a8ea02b5dd47dca2c7cba3db72dabd8ad6", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/fe7d13a8ea02b5dd47dca2c7cba3db72dabd8ad6", "message": "Added comment", "committedDate": "2020-01-24T17:33:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NzgwMQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1152#discussion_r370767801", "bodyText": "This could be simpler if this method only formatted a single jar. Then you'd only need one loop in LinkageChecker.main and you wouldn't have to build an intermediate list.", "author": "elharo", "createdAt": "2020-01-24T18:05:47Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java", "diffHunk": "@@ -69,4 +71,24 @@ public ClassPathResult(\n   ImmutableList<UnresolvableArtifactProblem> getArtifactProblems() {\n     return artifactProblems;\n   }\n+\n+  /** Returns text describing dependency paths to {@code jars} in the dependency tree. */\n+  public String formatDependencyPaths(Iterable<Path> jars) {\n+    StringBuilder message = new StringBuilder();\n+    for (Path jar : jars) {", "originalCommit": "fe7d13a8ea02b5dd47dca2c7cba3db72dabd8ad6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3MjYyMQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1152#discussion_r370772621", "bodyText": "The intermediate ImmutableSet is for deduplication logic.", "author": "suztomo", "createdAt": "2020-01-24T18:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NzgwMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2ODM0NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1152#discussion_r370768345", "bodyText": "You don't need this set, just print each jar as you find it. That should also make the order more predictable.", "author": "elharo", "createdAt": "2020-01-24T18:07:06Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -82,6 +86,20 @@ public static void main(String[] arguments)\n \n     System.out.println(SymbolProblem.formatSymbolProblems(symbolProblems));\n \n+    if (classPathResult != null && !symbolProblems.isEmpty()) {\n+      ImmutableSet.Builder<Path> problematicJars = ImmutableSet.builder();", "originalCommit": "fe7d13a8ea02b5dd47dca2c7cba3db72dabd8ad6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3MTkzNQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1152#discussion_r370771935", "bodyText": "That would explode the number of lines in the output. We need this de-duplication logic. When there's 100 linkage errors on 100 classes from a JAR file, this should not print the dependency path to the that JAR file 100 times.", "author": "suztomo", "createdAt": "2020-01-24T18:15:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2ODM0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3OTM3MQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1152#discussion_r370779371", "bodyText": "OK, that makes sense. Does the order of output matter though?", "author": "elharo", "createdAt": "2020-01-24T18:32:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2ODM0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4OTg0Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1152#discussion_r370789842", "bodyText": "No, the order does not matter.\n(Guava\u2019s ImmutableSet guarantees a deterministic iteration order, which is not affected by JVM implementation.)", "author": "suztomo", "createdAt": "2020-01-24T18:55:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2ODM0NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "eeb7cec3998891f0a39d1ba222f1acbfccd51fd4", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/eeb7cec3998891f0a39d1ba222f1acbfccd51fd4", "message": "Merge branch 'master' into problematic_jars", "committedDate": "2020-01-24T20:12:27Z", "type": "commit"}]}