{"pr_number": 988, "pr_title": "KOGITO-764: Create a Guided Tour for first time users on DMN editor", "pr_createdAt": "2020-06-17T13:46:51Z", "pr_url": "https://github.com/kiegroup/appformer/pull/988", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMjI5OQ==", "url": "https://github.com/kiegroup/appformer/pull/988#discussion_r442312299", "bodyText": "Could we please add javadoc to all new classes and their public methods?", "author": "jomarko", "createdAt": "2020-06-18T15:26:59Z", "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/guided/tour/GuidedTourBridge.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.bridge.client.guided.tour;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.appformer.kogito.bridge.client.guided.tour.GuidedTourCustomSelectorPositionProvider.PositionProviderFunction;\n+import org.appformer.kogito.bridge.client.guided.tour.observers.GlobalHTMLObserver;\n+import org.appformer.kogito.bridge.client.guided.tour.service.GuidedTourService;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Tutorial;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.UserInteraction;\n+\n+@ApplicationScoped\n+public class GuidedTourBridge {", "originalCommit": "4c8131117c37f6b0ae0c2b1454807ee3568b2645", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4OTIxNQ==", "url": "https://github.com/kiegroup/appformer/pull/988#discussion_r443889215", "bodyText": "Java docs were added.", "author": "karreiro", "createdAt": "2020-06-23T00:05:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMjI5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "883de4cf051fb631811446128060198397c96341", "chunk": "diff --git a/appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/guided/tour/GuidedTourBridge.java b/appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/guided/tour/GuidedTourBridge.java\nindex b1698f424..a8ea8f5eb 100644\n--- a/appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/guided/tour/GuidedTourBridge.java\n+++ b/appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/guided/tour/GuidedTourBridge.java\n\n@@ -29,6 +29,9 @@ import org.appformer.kogito.bridge.client.guided.tour.service.GuidedTourService;\n import org.appformer.kogito.bridge.client.guided.tour.service.api.Tutorial;\n import org.appformer.kogito.bridge.client.guided.tour.service.api.UserInteraction;\n \n+/**\n+ * Provides a bridge between the GWT code and the the native JavaScript implementations.\n+ */\n @ApplicationScoped\n public class GuidedTourBridge {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMjcyNw==", "url": "https://github.com/kiegroup/appformer/pull/988#discussion_r442312727", "bodyText": "This test is not correct", "author": "jomarko", "createdAt": "2020-06-18T15:27:35Z", "path": "appformer-kogito-bridge/src/test/java/org/appformer/kogito/bridge/client/guided/tour/GuidedTourBridgeTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.bridge.client.guided.tour;\n+\n+import org.appformer.kogito.bridge.client.guided.tour.GuidedTourCustomSelectorPositionProvider.PositionProviderFunction;\n+import org.appformer.kogito.bridge.client.guided.tour.observers.GlobalHTMLObserver;\n+import org.appformer.kogito.bridge.client.guided.tour.service.GuidedTourService;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Tutorial;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.UserInteraction;\n+import org.jboss.errai.ioc.client.api.Disposer;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.singletonList;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class GuidedTourBridgeTest {\n+\n+    @Mock\n+    private GuidedTourService service;\n+\n+    @Mock\n+    private GlobalHTMLObserverFake observer;\n+\n+    private GuidedTourBridge bridge;\n+\n+    @Before\n+    public void setup() {\n+        bridge = spy(new GuidedTourBridge(service, observer));\n+        bridge.init();\n+    }\n+\n+    @Test\n+    public void testInit() {\n+        // 'init' is called on setup\n+        assertEquals(singletonList(observer), bridge.observers);\n+    }\n+\n+    @Test\n+    public void testRefresh() {\n+        final UserInteraction userInteraction = mock(UserInteraction.class);\n+        when(service.isEnabled()).thenReturn(true);\n+\n+        bridge.refresh(userInteraction);\n+\n+        verify(service).refresh(userInteraction);\n+    }\n+\n+    @Test\n+    public void testRegisterTutorial() {\n+        final Tutorial tutorial = mock(Tutorial.class);\n+        when(service.isEnabled()).thenReturn(true);\n+\n+        bridge.registerTutorial(tutorial);\n+\n+        verify(service).registerTutorial(tutorial);\n+    }\n+\n+    @Test\n+    public void testRefreshWhenBridgeIsNotEnabled() {\n+        final UserInteraction userInteraction = mock(UserInteraction.class);\n+        when(service.isEnabled()).thenReturn(false);\n+\n+        bridge.refresh(userInteraction);\n+\n+        verify(observer).dispose();\n+    }\n+\n+    @Test\n+    public void testRegisterTutorialWhenBridgeIsNotEnabled() {\n+        final Tutorial tutorial = mock(Tutorial.class);\n+        when(service.isEnabled()).thenReturn(false);\n+\n+        bridge.registerTutorial(tutorial);\n+\n+        verify(observer).dispose();\n+    }\n+\n+    @Test\n+    public void testRegisterObserver() {\n+        final GuidedTourObserver observer = mock(GuidedTourObserver.class);\n+\n+        bridge.registerObserver(observer);\n+\n+        verify(observer).setMonitorBridge(bridge);\n+        assertEquals(asList(this.observer, observer), bridge.observers);\n+    }\n+\n+    @Test\n+    public void testRegisterPositionProvider() {\n+        final GuidedTourCustomSelectorPositionProvider positionProvider = mock(GuidedTourCustomSelectorPositionProvider.class);\n+        final PositionProviderFunction positionProviderFunction = mock(PositionProviderFunction.class);\n+        final String type = \"type\";\n+\n+        doReturn(positionProvider).when(bridge).getPositionProviderInstance();\n+\n+        bridge.registerPositionProvider(type, positionProviderFunction);\n+\n+        verify(bridge).registerPositionProvider(type, positionProviderFunction);\n+    }", "originalCommit": "4c8131117c37f6b0ae0c2b1454807ee3568b2645", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4OTI3Nw==", "url": "https://github.com/kiegroup/appformer/pull/988#discussion_r443889277", "bodyText": "Well spotted! Thank you!", "author": "karreiro", "createdAt": "2020-06-23T00:05:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMjcyNw=="}], "type": "inlineReview", "revised_code": {"commit": "44a80bbc5889ca348f9c96fd115dc4e7f00e1b4a", "chunk": "diff --git a/appformer-kogito-bridge/src/test/java/org/appformer/kogito/bridge/client/guided/tour/GuidedTourBridgeTest.java b/appformer-kogito-bridge/src/test/java/org/appformer/kogito/bridge/client/guided/tour/GuidedTourBridgeTest.java\nindex 48cbd9cb8..adf6140e4 100644\n--- a/appformer-kogito-bridge/src/test/java/org/appformer/kogito/bridge/client/guided/tour/GuidedTourBridgeTest.java\n+++ b/appformer-kogito-bridge/src/test/java/org/appformer/kogito/bridge/client/guided/tour/GuidedTourBridgeTest.java\n\n@@ -120,7 +120,7 @@ public class GuidedTourBridgeTest {\n \n         bridge.registerPositionProvider(type, positionProviderFunction);\n \n-        verify(bridge).registerPositionProvider(type, positionProviderFunction);\n+        verify(positionProvider).registerPositionProvider(type, positionProviderFunction);\n     }\n \n     class GlobalHTMLObserverFake extends GlobalHTMLObserver {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMzM2Nw==", "url": "https://github.com/kiegroup/appformer/pull/988#discussion_r442313367", "bodyText": "Shouldn't we check if position is Rect.NONE?", "author": "jomarko", "createdAt": "2020-06-18T15:28:31Z", "path": "appformer-kogito-bridge/src/test/java/org/appformer/kogito/bridge/client/guided/tour/GuidedTourCustomSelectorPositionProviderTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.bridge.client.guided.tour;\n+\n+import java.util.Objects;\n+\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import elemental2.dom.Console;\n+import elemental2.dom.DomGlobal;\n+import org.appformer.kogito.bridge.client.guided.tour.service.api.Rect;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+public class GuidedTourCustomSelectorPositionProviderTest {\n+\n+    @Mock\n+    private Console console;\n+\n+    private GuidedTourCustomSelectorPositionProvider positionProvider;\n+\n+    @Before\n+    public void setup() {\n+        positionProvider = spy(GuidedTourCustomSelectorPositionProvider.getInstance());\n+        DomGlobal.console = console;\n+    }\n+\n+    @Test\n+    public void testGetPosition() {\n+        final Rect rect1 = makeRect(1);\n+        final Rect rect2 = makeRect(2);\n+\n+        positionProvider.registerPositionProvider(\"TEST_PROVIDER_1\", name -> Objects.equals(name, \"OBJECT-1\") ? rect1 : rect2);\n+\n+        assertEquals(rect1, positionProvider.getPosition(\"TEST_PROVIDER_1:::OBJECT-1\"));\n+        assertEquals(rect2, positionProvider.getPosition(\"TEST_PROVIDER_1:::OBJECT-2\"));\n+    }\n+\n+    @Test\n+    public void testGetPositionWhenSelectorIsInvalid() {\n+        final Rect rect1 = makeRect(1);\n+        final Rect rect2 = makeRect(2);\n+\n+        positionProvider.registerPositionProvider(\"TEST_PROVIDER_2\", name -> Objects.equals(name, \"OBJECT-1\") ? rect1 : rect2);\n+\n+        final Rect position = positionProvider.getPosition(\"TEST_PROVIDER_2___OBJECT-1\");\n+\n+        verify(console).warn(\"[Guided Tour - Position Provider] Invalid custom query selector: TEST_PROVIDER_2___OBJECT-1\");\n+        assertNotNull(position);\n+    }\n+\n+    @Test\n+    public void testGetPositionWhenNoSelectorIsRegistered() {\n+        final Rect position = positionProvider.getPosition(\"TEST_PROVIDER_3:::OBJECT-1\");\n+\n+        verify(console).warn(\"[Guided Tour - Position Provider] The position provider could not be found: TEST_PROVIDER_3\");\n+        assertNotNull(position);\n+    }\n+\n+    @Test\n+    public void testGetPositionWhenSelectorIsNull() {\n+        final Rect position = positionProvider.getPosition(null);\n+\n+        verify(console).warn(\"[Guided Tour - Position Provider] Invalid custom query selector: null\");\n+        assertNotNull(position);", "originalCommit": "4c8131117c37f6b0ae0c2b1454807ee3568b2645", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4OTcwMQ==", "url": "https://github.com/kiegroup/appformer/pull/988#discussion_r443889701", "bodyText": "I've improved tests on this class. Unfortunately, Rect is a native type so we have some assertion limitations, but I believe this test class is good enough now.", "author": "karreiro", "createdAt": "2020-06-23T00:07:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMzM2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "44a80bbc5889ca348f9c96fd115dc4e7f00e1b4a", "chunk": "diff --git a/appformer-kogito-bridge/src/test/java/org/appformer/kogito/bridge/client/guided/tour/GuidedTourCustomSelectorPositionProviderTest.java b/appformer-kogito-bridge/src/test/java/org/appformer/kogito/bridge/client/guided/tour/GuidedTourCustomSelectorPositionProviderTest.java\nindex 56fdc9812..3da3fbf4a 100644\n--- a/appformer-kogito-bridge/src/test/java/org/appformer/kogito/bridge/client/guided/tour/GuidedTourCustomSelectorPositionProviderTest.java\n+++ b/appformer-kogito-bridge/src/test/java/org/appformer/kogito/bridge/client/guided/tour/GuidedTourCustomSelectorPositionProviderTest.java\n\n@@ -28,7 +28,7 @@ import org.junit.runner.RunWith;\n import org.mockito.Mock;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.doReturn;\n import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.verify;\n \n"}}, {"oid": "6474dd24b7b7f94f80c52ae88e6287ceba538f0e", "url": "https://github.com/kiegroup/appformer/commit/6474dd24b7b7f94f80c52ae88e6287ceba538f0e", "message": "KOGITO-764: Create a Guided Tour for first time users on DMN editor", "committedDate": "2020-06-22T21:23:39Z", "type": "commit"}, {"oid": "4d0174828913f3c32823f41e0c87aef5bfecc5ed", "url": "https://github.com/kiegroup/appformer/commit/4d0174828913f3c32823f41e0c87aef5bfecc5ed", "message": "Fix issue 10 - Guided Tour does not work on Firefox", "committedDate": "2020-06-22T21:23:39Z", "type": "commit"}, {"oid": "4d0174828913f3c32823f41e0c87aef5bfecc5ed", "url": "https://github.com/kiegroup/appformer/commit/4d0174828913f3c32823f41e0c87aef5bfecc5ed", "message": "Fix issue 10 - Guided Tour does not work on Firefox", "committedDate": "2020-06-22T21:23:39Z", "type": "forcePushed"}, {"oid": "883de4cf051fb631811446128060198397c96341", "url": "https://github.com/kiegroup/appformer/commit/883de4cf051fb631811446128060198397c96341", "message": "Add Java docs", "committedDate": "2020-06-22T23:55:01Z", "type": "commit"}, {"oid": "44a80bbc5889ca348f9c96fd115dc4e7f00e1b4a", "url": "https://github.com/kiegroup/appformer/commit/44a80bbc5889ca348f9c96fd115dc4e7f00e1b4a", "message": "Improve tests", "committedDate": "2020-06-23T00:03:54Z", "type": "commit"}, {"oid": "e8b4c2ec3d67c00240630e87b9fb08d7ce9fb243", "url": "https://github.com/kiegroup/appformer/commit/e8b4c2ec3d67c00240630e87b9fb08d7ce9fb243", "message": "Add 'Step' Java doc", "committedDate": "2020-06-23T00:43:39Z", "type": "commit"}]}