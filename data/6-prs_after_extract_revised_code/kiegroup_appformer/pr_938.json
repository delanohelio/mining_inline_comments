{"pr_number": 938, "pr_title": "RHPAM-2721 :Clone project via http can not be re-enabled", "pr_createdAt": "2020-04-07T07:04:48Z", "pr_url": "https://github.com/kiegroup/appformer/pull/938", "timeline": [{"oid": "72cdfa5173299a95c22821715bf0d6d079dc277a", "url": "https://github.com/kiegroup/appformer/commit/72cdfa5173299a95c22821715bf0d6d079dc277a", "message": "RHPAM-2721 :Clone project via http can not be re-enabled", "committedDate": "2020-04-07T07:10:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzOTUxMQ==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404639511", "bodyText": "We could simplify as:\n    @Override\n    public void setPublicURI(Map<String, String> fullHostNames) {\n        if (fullHostNames != null && !fullHostNames.isEmpty()) {\n            toStringContent = fullHostNames.entrySet()\n                    .stream()\n                    .map(e -> e.getKey() + \"://\" + e.getValue() + \"/\" + name)\n                    .collect(Collectors.joining(\"\\n\"));\n        } else {\n            toStringContent = \"git://\" + name;\n        }\n    }", "author": "jomarko", "createdAt": "2020-04-07T08:43:50Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemImpl.java", "diffHunk": "@@ -559,4 +546,22 @@ public void filterBranchAccess(final UploadPack uploadPack,\n             JGitFSHooks.executeFSHooks(hook, FileSystemHooks.BranchAccessFilter, ctx);\n         }\n     }\n+\n+    @Override\n+    public void setPublicURI(Map<String, String> fullHostNames) {\n+        if (fullHostNames != null && !fullHostNames.isEmpty()) {\n+            final StringBuilder sb = new StringBuilder();\n+            final Iterator<Map.Entry<String, String>> iterator = fullHostNames.entrySet().iterator();\n+            while (iterator.hasNext()) {\n+                final Map.Entry<String, String> entry = iterator.next();\n+                sb.append(entry.getKey()).append(\"://\").append(entry.getValue()).append(\"/\").append(name);\n+                if (iterator.hasNext()) {\n+                    sb.append(\"\\n\");\n+                }\n+            }\n+            toStringContent = sb.toString();\n+        } else {\n+            toStringContent = \"git://\" + name;\n+        }\n+    }", "originalCommit": "72cdfa5173299a95c22821715bf0d6d079dc277a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3MTU2OQ==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404871569", "bodyText": "looks neat. Thanks", "author": "RishiRajAnand", "createdAt": "2020-04-07T14:51:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzOTUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "chunk": "diff --git a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemImpl.java b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemImpl.java\nindex 695029d33..7623420b3 100644\n--- a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemImpl.java\n+++ b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemImpl.java\n\n@@ -550,16 +551,10 @@ public class JGitFileSystemImpl implements JGitFileSystem {\n     @Override\n     public void setPublicURI(Map<String, String> fullHostNames) {\n         if (fullHostNames != null && !fullHostNames.isEmpty()) {\n-            final StringBuilder sb = new StringBuilder();\n-            final Iterator<Map.Entry<String, String>> iterator = fullHostNames.entrySet().iterator();\n-            while (iterator.hasNext()) {\n-                final Map.Entry<String, String> entry = iterator.next();\n-                sb.append(entry.getKey()).append(\"://\").append(entry.getValue()).append(\"/\").append(name);\n-                if (iterator.hasNext()) {\n-                    sb.append(\"\\n\");\n-                }\n-            }\n-            toStringContent = sb.toString();\n+            toStringContent = fullHostNames.entrySet()\n+                    .stream()\n+                    .map(e -> e.getKey() + \"://\" + e.getValue() + \"/\" + name)\n+                    .collect(Collectors.joining(\"\\n\"));\n         } else {\n             toStringContent = \"git://\" + name;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MTIyOQ==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404641229", "bodyText": "formatting if (...", "author": "jomarko", "createdAt": "2020-04-07T08:46:31Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/manager/JGitFileSystemsManager.java", "diffHunk": "@@ -78,6 +78,13 @@ public void newFileSystem(Supplier<Map<String, String>> fullHostNames,\n         fileSystemsRoot.addAll(parseFSRoots(fsName.get()));\n     }\n \n+    public void replaceFSCacheEntry(String fsKey, JGitFileSystem jGitFileSystem) {\n+       if(getFsCache().containsKey(fsKey)) {", "originalCommit": "72cdfa5173299a95c22821715bf0d6d079dc277a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "chunk": "diff --git a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/manager/JGitFileSystemsManager.java b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/manager/JGitFileSystemsManager.java\nindex 1e9e95172..f287718da 100644\n--- a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/manager/JGitFileSystemsManager.java\n+++ b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/manager/JGitFileSystemsManager.java\n\n@@ -79,12 +78,13 @@ public class JGitFileSystemsManager {\n     }\n \n     public void replaceFSCacheEntry(String fsKey, JGitFileSystem jGitFileSystem) {\n-       if(getFsCache().containsKey(fsKey)) {\n-           this.remove(fsKey);\n-           fsCache.addSupplier(fsKey, ()-> jGitFileSystem);\n-           fileSystemsRoot.addAll(parseFSRoots(fsKey));\n+        if (getFsCache().containsKey(fsKey)) {\n+            this.remove(fsKey);\n+            fsCache.addSupplier(fsKey, () -> jGitFileSystem);\n+            fileSystemsRoot.addAll(parseFSRoots(fsKey));\n         }\n     }\n+\n     List<String> parseFSRoots(String fsKey) {\n         List<String> roots = new ArrayList<>();\n         fsKey = cleanupFsName(fsKey);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MzYxMw==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404643613", "bodyText": "Could we please replace uri.equals(protocolName) with Objects.equals(uri, protocolName)? The later one doesn't throw an exception in case uri or protocolName is null.", "author": "jomarko", "createdAt": "2020-04-07T08:50:15Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/AbstractTestInfra.java", "diffHunk": "@@ -355,4 +356,10 @@ protected static String multiline(String prefix, String... lines) {\n                 .reduce((s1, s2) -> s1 + \"\\n\" + s2)\n                 .orElse(\"\");\n     }\n+    protected static boolean checkProtocolPresent(String hostNames, String protocolName) {\n+        final String[] uris = hostNames.toString().split(\"\\\\r?\\\\n\");\n+        return Arrays.stream(uris)\n+                .map(uri -> uri.substring(0, uri.indexOf(PROTOCOL_SEPARATOR)))\n+                .anyMatch(uri -> uri.equals(protocolName));", "originalCommit": "72cdfa5173299a95c22821715bf0d6d079dc277a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3Mjg0Mw==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404872843", "bodyText": "Nice catch, thanks", "author": "RishiRajAnand", "createdAt": "2020-04-07T14:53:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MzYxMw=="}], "type": "inlineReview", "revised_code": {"commit": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "chunk": "diff --git a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/AbstractTestInfra.java b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/AbstractTestInfra.java\nindex 376afd78f..9f3f0c5fa 100644\n--- a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/AbstractTestInfra.java\n+++ b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/AbstractTestInfra.java\n\n@@ -356,10 +360,11 @@ public abstract class AbstractTestInfra {\n                 .reduce((s1, s2) -> s1 + \"\\n\" + s2)\n                 .orElse(\"\");\n     }\n+\n     protected static boolean checkProtocolPresent(String hostNames, String protocolName) {\n         final String[] uris = hostNames.toString().split(\"\\\\r?\\\\n\");\n         return Arrays.stream(uris)\n                 .map(uri -> uri.substring(0, uri.indexOf(PROTOCOL_SEPARATOR)))\n-                .anyMatch(uri -> uri.equals(protocolName));\n+                .anyMatch(uri -> Objects.equals(uri, protocolName));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0Nzk5NQ==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404647995", "bodyText": "In past, sonarcloud reported anonymous static initialization as possible risk. @hasys implemented different kind of builders due to this.\nCould we please replace all HashMap constructions in this way?\nnew Maps.Builder<String, String>()\n   .put(\"ssh\", \"localhost:8080/git\")\n   .build()", "author": "jomarko", "createdAt": "2020-04-07T08:56:51Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemImplTest.java", "diffHunk": "@@ -516,4 +517,35 @@ public void lockTest() throws IOException, GitAPIException {\n         verify(lockSpy,\n                times(1)).physicalUnLockOnFS();\n     }\n+\n+    @Test\n+    public void testSetPublicURI() throws IOException, GitAPIException {\n+\n+        final JGitFileSystemProvider fsProvider = mock(JGitFileSystemProvider.class);\n+\n+        final Git git = setupGit();\n+\n+        final JGitFileSystemImpl fileSystem = new JGitFileSystemImpl(fsProvider,\n+                                                                     new HashMap<String, String>() {{\n+                                                                         put(\"ssh\", \"localhost:8080/git\");\n+                                                                     }},", "originalCommit": "72cdfa5173299a95c22821715bf0d6d079dc277a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3NDI4Ng==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404874286", "bodyText": "updated", "author": "RishiRajAnand", "createdAt": "2020-04-07T14:54:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0Nzk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "chunk": "diff --git a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemImplTest.java b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemImplTest.java\nindex 675bdedcd..69a04d0d4 100644\n--- a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemImplTest.java\n+++ b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemImplTest.java\n\n@@ -526,9 +526,9 @@ public class JGitFileSystemImplTest extends AbstractTestInfra {\n         final Git git = setupGit();\n \n         final JGitFileSystemImpl fileSystem = new JGitFileSystemImpl(fsProvider,\n-                                                                     new HashMap<String, String>() {{\n-                                                                         put(\"ssh\", \"localhost:8080/git\");\n-                                                                     }},\n+                                                                     new Maps.Builder<String, String>()\n+                                                                             .put(\"ssh\", \"localhost:8080/git\")\n+                                                                             .build(),\n                                                                      git,\n                                                                      createFSLock(git),\n                                                                      \"my-repo\",\n"}}, {"oid": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "url": "https://github.com/kiegroup/appformer/commit/1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "message": "RHPAM-2721 :Clone project via http can not be re-enabled", "committedDate": "2020-04-07T14:47:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0MDI1MA==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404940250", "bodyText": "Just a suggestion.\nYou could replace the collect() by a forEach with the content of the for loop below.\nThis way you don't need to create a List<JGitFileSystem>.", "author": "caponetto", "createdAt": "2020-04-07T16:20:26Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemProvider.java", "diffHunk": "@@ -439,6 +440,18 @@ public void addHostName(final String protocol, String s) {\n         fullHostNames.put(protocol, s);\n     }\n \n+    public void updateCacheWithHostNames() {\n+        JGitFileSystemsCache fc = fsManager.getFsCache();\n+        List<JGitFileSystem> jGitFileSystems = fc.getFileSystems().stream()\n+                .map(fsName -> ((JGitFileSystemProxy) fsManager.get(fsName)).getRealJGitFileSystem()).collect(Collectors.toList());", "originalCommit": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4NTAyOQ==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r405285029", "bodyText": "done,Nice catch. Thanks @caponetto", "author": "RishiRajAnand", "createdAt": "2020-04-08T06:24:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0MDI1MA=="}], "type": "inlineReview", "revised_code": {"commit": "12b2f75af6492094b25f6ef4eb50d480d51eb17d", "chunk": "diff --git a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemProvider.java b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemProvider.java\nindex e73ca17d4..7136940a5 100644\n--- a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemProvider.java\n+++ b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemProvider.java\n\n@@ -442,14 +390,14 @@ public class JGitFileSystemProvider implements SecuredFileSystemProvider,\n \n     public void updateCacheWithHostNames() {\n         JGitFileSystemsCache fc = fsManager.getFsCache();\n-        List<JGitFileSystem> jGitFileSystems = fc.getFileSystems().stream()\n-                .map(fsName -> ((JGitFileSystemProxy) fsManager.get(fsName)).getRealJGitFileSystem()).collect(Collectors.toList());\n-\n-        for (JGitFileSystem fs : jGitFileSystems) {\n-            JGitFileSystemImpl fsImpl = (JGitFileSystemImpl) fs;\n-            fs.setPublicURI(fullHostNames);\n-            fsManager.replaceFSCacheEntry(fs.getName(), fsImpl);\n-        }\n+        fc.getFileSystems()\n+                .stream()\n+                .map(fsName -> ((JGitFileSystemProxy) fsManager.get(fsName)).getRealJGitFileSystem())\n+                .forEach(fs -> {\n+                    JGitFileSystemImpl fsImpl = (JGitFileSystemImpl) fs;\n+                    fs.setPublicURI(fullHostNames);\n+                    fsManager.updateFSCacheEntry(fs.getName(), fsImpl);\n+                });\n     }\n \n     public Map<String, String> getFullHostNames() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0MTk3OA==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404941978", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void replaceFSCacheEntry(String fsKey, JGitFileSystem jGitFileSystem) {\n          \n          \n            \n                public void updateFSCacheEntry(String fsKey, JGitFileSystem jGitFileSystem) {\n          \n      \n    \n    \n  \n\nJust a suggestion.", "author": "caponetto", "createdAt": "2020-04-07T16:22:53Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/manager/JGitFileSystemsManager.java", "diffHunk": "@@ -78,6 +77,14 @@ public void newFileSystem(Supplier<Map<String, String>> fullHostNames,\n         fileSystemsRoot.addAll(parseFSRoots(fsName.get()));\n     }\n \n+    public void replaceFSCacheEntry(String fsKey, JGitFileSystem jGitFileSystem) {", "originalCommit": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4NTE5NQ==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r405285195", "bodyText": "Makes sense", "author": "RishiRajAnand", "createdAt": "2020-04-08T06:25:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0MTk3OA=="}], "type": "inlineReview", "revised_code": {"commit": "12b2f75af6492094b25f6ef4eb50d480d51eb17d", "chunk": "diff --git a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/manager/JGitFileSystemsManager.java b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/manager/JGitFileSystemsManager.java\nindex f287718da..55ce1385a 100644\n--- a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/manager/JGitFileSystemsManager.java\n+++ b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/main/java/org/uberfire/java/nio/fs/jgit/manager/JGitFileSystemsManager.java\n\n@@ -77,7 +77,7 @@ public class JGitFileSystemsManager {\n         fileSystemsRoot.addAll(parseFSRoots(fsName.get()));\n     }\n \n-    public void replaceFSCacheEntry(String fsKey, JGitFileSystem jGitFileSystem) {\n+    public void updateFSCacheEntry(String fsKey, JGitFileSystem jGitFileSystem) {\n         if (getFsCache().containsKey(fsKey)) {\n             this.remove(fsKey);\n             fsCache.addSupplier(fsKey, () -> jGitFileSystem);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0MzY5Mw==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404943693", "bodyText": "You could use assertTrue() here instead of assertThat().isEqualTo(true).", "author": "caponetto", "createdAt": "2020-04-07T16:25:13Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemImplTest.java", "diffHunk": "@@ -516,4 +517,35 @@ public void lockTest() throws IOException, GitAPIException {\n         verify(lockSpy,\n                times(1)).physicalUnLockOnFS();\n     }\n+\n+    @Test\n+    public void testSetPublicURI() throws IOException, GitAPIException {\n+\n+        final JGitFileSystemProvider fsProvider = mock(JGitFileSystemProvider.class);\n+\n+        final Git git = setupGit();\n+\n+        final JGitFileSystemImpl fileSystem = new JGitFileSystemImpl(fsProvider,\n+                                                                     new Maps.Builder<String, String>()\n+                                                                             .put(\"ssh\", \"localhost:8080/git\")\n+                                                                             .build(),\n+                                                                     git,\n+                                                                     createFSLock(git),\n+                                                                     \"my-repo\",\n+                                                                     CredentialsProvider.getDefault(),\n+                                                                     null,\n+                                                                     null);\n+\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"ssh\")).isEqualTo(true);\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"http\")).isEqualTo(false);\n+\n+        fileSystem.setPublicURI(new Maps.Builder<String, String>()\n+                                        .put(\"http\", \"localhost:8080/git\")\n+                                        .put(\"ssh\", \"localhost:8080/git\")\n+                                        .build());\n+\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"ssh\")).isEqualTo(true);\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"http\")).isEqualTo(true);", "originalCommit": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12b2f75af6492094b25f6ef4eb50d480d51eb17d", "chunk": "diff --git a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemImplTest.java b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemImplTest.java\nindex 69a04d0d4..e51decfbe 100644\n--- a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemImplTest.java\n+++ b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitFileSystemImplTest.java\n\n@@ -536,16 +538,14 @@ public class JGitFileSystemImplTest extends AbstractTestInfra {\n                                                                      null,\n                                                                      null);\n \n-        assertThat(checkProtocolPresent(fileSystem.toString(), \"ssh\")).isEqualTo(true);\n-        assertThat(checkProtocolPresent(fileSystem.toString(), \"http\")).isEqualTo(false);\n+        assertTrue(checkProtocolPresent(fileSystem.toString(), \"ssh\"));\n+        assertFalse(checkProtocolPresent(fileSystem.toString(), \"http\"));\n \n         fileSystem.setPublicURI(new Maps.Builder<String, String>()\n                                         .put(\"http\", \"localhost:8080/git\")\n                                         .put(\"ssh\", \"localhost:8080/git\")\n                                         .build());\n-\n-        assertThat(checkProtocolPresent(fileSystem.toString(), \"ssh\")).isEqualTo(true);\n-        assertThat(checkProtocolPresent(fileSystem.toString(), \"http\")).isEqualTo(true);\n-        fileSystem.lock();\n+        assertTrue(checkProtocolPresent(fileSystem.toString(), \"ssh\"));\n+        assertTrue(checkProtocolPresent(fileSystem.toString(), \"http\"));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0MzgyMQ==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404943821", "bodyText": "You could use assertTrue() here instead of assertThat().isEqualTo(true).", "author": "caponetto", "createdAt": "2020-04-07T16:25:22Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.uberfire.java.nio.fs.jgit;\n+\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.uberfire.java.nio.file.FileSystem;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsCache;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsManager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class JGitUpdateFSCacheWithHostnameTest extends AbstractTestInfra {\n+\n+    @Override\n+    public Map<String, String> getGitPreferences() {\n+        Map<String, String> gitPrefs = super.getGitPreferences();\n+        gitPrefs.put(JGitFileSystemProviderConfiguration.GIT_HTTP_ENABLED, \"true\");\n+        return gitPrefs;\n+    }\n+\n+    @Test\n+    public void testFSCacheUpdateWithHostName() {\n+        final URI newRepo = URI.create(\"git://repo-name\");\n+        provider.addHostName(\"ssh\", \"localhost:8080/git\");\n+        final FileSystem fs = provider.newFileSystem(newRepo,\n+                                                     EMPTY_ENV);\n+        JGitFileSystemsCache fileSystemsCache = provider.getFsManager().getFsCache();\n+        final FileSystem fileSystem = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"ssh\")).isEqualTo(true);\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"http\")).isEqualTo(false);\n+\n+        provider.addHostName(\"http\", \"localhost:8080/git\");\n+\n+        final FileSystem fileSystem1 = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem1).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem1.toString(), \"http\")).isEqualTo(false);\n+        assertThat(fileSystemsCache.getFileSystems().size()).isEqualTo(1);\n+        provider.updateCacheWithHostNames();\n+\n+        final FileSystem fileSystem2 = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem2).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem2.toString(), \"http\")).isEqualTo(true);", "originalCommit": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12b2f75af6492094b25f6ef4eb50d480d51eb17d", "chunk": "diff --git a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java\nindex 5ea12c40b..f9135ca74 100644\n--- a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java\n+++ b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java\n\n@@ -1,15 +1,31 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.uberfire.java.nio.fs.jgit;\n \n import java.net.URI;\n-import java.util.Arrays;\n import java.util.Map;\n \n import org.junit.Test;\n import org.uberfire.java.nio.file.FileSystem;\n import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsCache;\n-import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsManager;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n \n public class JGitUpdateFSCacheWithHostnameTest extends AbstractTestInfra {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NjAwMg==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404946002", "bodyText": "You could use isOne() here instead of isEqualTo(1).", "author": "caponetto", "createdAt": "2020-04-07T16:28:12Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.uberfire.java.nio.fs.jgit;\n+\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.uberfire.java.nio.file.FileSystem;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsCache;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsManager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class JGitUpdateFSCacheWithHostnameTest extends AbstractTestInfra {\n+\n+    @Override\n+    public Map<String, String> getGitPreferences() {\n+        Map<String, String> gitPrefs = super.getGitPreferences();\n+        gitPrefs.put(JGitFileSystemProviderConfiguration.GIT_HTTP_ENABLED, \"true\");\n+        return gitPrefs;\n+    }\n+\n+    @Test\n+    public void testFSCacheUpdateWithHostName() {\n+        final URI newRepo = URI.create(\"git://repo-name\");\n+        provider.addHostName(\"ssh\", \"localhost:8080/git\");\n+        final FileSystem fs = provider.newFileSystem(newRepo,\n+                                                     EMPTY_ENV);\n+        JGitFileSystemsCache fileSystemsCache = provider.getFsManager().getFsCache();\n+        final FileSystem fileSystem = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"ssh\")).isEqualTo(true);\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"http\")).isEqualTo(false);\n+\n+        provider.addHostName(\"http\", \"localhost:8080/git\");\n+\n+        final FileSystem fileSystem1 = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem1).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem1.toString(), \"http\")).isEqualTo(false);\n+        assertThat(fileSystemsCache.getFileSystems().size()).isEqualTo(1);\n+        provider.updateCacheWithHostNames();\n+\n+        final FileSystem fileSystem2 = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem2).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem2.toString(), \"http\")).isEqualTo(true);\n+        assertThat(fileSystemsCache.getFileSystems().size()).isEqualTo(1);", "originalCommit": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12b2f75af6492094b25f6ef4eb50d480d51eb17d", "chunk": "diff --git a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java\nindex 5ea12c40b..f9135ca74 100644\n--- a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java\n+++ b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java\n\n@@ -1,15 +1,31 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.uberfire.java.nio.fs.jgit;\n \n import java.net.URI;\n-import java.util.Arrays;\n import java.util.Map;\n \n import org.junit.Test;\n import org.uberfire.java.nio.file.FileSystem;\n import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsCache;\n-import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsManager;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n \n public class JGitUpdateFSCacheWithHostnameTest extends AbstractTestInfra {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NjI2NQ==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404946265", "bodyText": "You could use assertFalse() here instead of assertThat().isEqualTo(false).", "author": "caponetto", "createdAt": "2020-04-07T16:28:34Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.uberfire.java.nio.fs.jgit;\n+\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.uberfire.java.nio.file.FileSystem;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsCache;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsManager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class JGitUpdateFSCacheWithHostnameTest extends AbstractTestInfra {\n+\n+    @Override\n+    public Map<String, String> getGitPreferences() {\n+        Map<String, String> gitPrefs = super.getGitPreferences();\n+        gitPrefs.put(JGitFileSystemProviderConfiguration.GIT_HTTP_ENABLED, \"true\");\n+        return gitPrefs;\n+    }\n+\n+    @Test\n+    public void testFSCacheUpdateWithHostName() {\n+        final URI newRepo = URI.create(\"git://repo-name\");\n+        provider.addHostName(\"ssh\", \"localhost:8080/git\");\n+        final FileSystem fs = provider.newFileSystem(newRepo,\n+                                                     EMPTY_ENV);\n+        JGitFileSystemsCache fileSystemsCache = provider.getFsManager().getFsCache();\n+        final FileSystem fileSystem = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"ssh\")).isEqualTo(true);\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"http\")).isEqualTo(false);\n+\n+        provider.addHostName(\"http\", \"localhost:8080/git\");\n+\n+        final FileSystem fileSystem1 = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem1).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem1.toString(), \"http\")).isEqualTo(false);", "originalCommit": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12b2f75af6492094b25f6ef4eb50d480d51eb17d", "chunk": "diff --git a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java\nindex 5ea12c40b..f9135ca74 100644\n--- a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java\n+++ b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java\n\n@@ -1,15 +1,31 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.uberfire.java.nio.fs.jgit;\n \n import java.net.URI;\n-import java.util.Arrays;\n import java.util.Map;\n \n import org.junit.Test;\n import org.uberfire.java.nio.file.FileSystem;\n import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsCache;\n-import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsManager;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n \n public class JGitUpdateFSCacheWithHostnameTest extends AbstractTestInfra {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NjQzNw==", "url": "https://github.com/kiegroup/appformer/pull/938#discussion_r404946437", "bodyText": "You could use isOne() here instead of isEqualTo(1).", "author": "caponetto", "createdAt": "2020-04-07T16:28:49Z", "path": "uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.uberfire.java.nio.fs.jgit;\n+\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.uberfire.java.nio.file.FileSystem;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsCache;\n+import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsManager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class JGitUpdateFSCacheWithHostnameTest extends AbstractTestInfra {\n+\n+    @Override\n+    public Map<String, String> getGitPreferences() {\n+        Map<String, String> gitPrefs = super.getGitPreferences();\n+        gitPrefs.put(JGitFileSystemProviderConfiguration.GIT_HTTP_ENABLED, \"true\");\n+        return gitPrefs;\n+    }\n+\n+    @Test\n+    public void testFSCacheUpdateWithHostName() {\n+        final URI newRepo = URI.create(\"git://repo-name\");\n+        provider.addHostName(\"ssh\", \"localhost:8080/git\");\n+        final FileSystem fs = provider.newFileSystem(newRepo,\n+                                                     EMPTY_ENV);\n+        JGitFileSystemsCache fileSystemsCache = provider.getFsManager().getFsCache();\n+        final FileSystem fileSystem = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"ssh\")).isEqualTo(true);\n+        assertThat(checkProtocolPresent(fileSystem.toString(), \"http\")).isEqualTo(false);\n+\n+        provider.addHostName(\"http\", \"localhost:8080/git\");\n+\n+        final FileSystem fileSystem1 = fileSystemsCache.get(\"repo-name\");\n+        assertThat(fileSystem1).isNotNull();\n+        assertThat(checkProtocolPresent(fileSystem1.toString(), \"http\")).isEqualTo(false);\n+        assertThat(fileSystemsCache.getFileSystems().size()).isEqualTo(1);", "originalCommit": "1cde199330b7cf3c24e0de8a7a6ec3e900d87a60", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "12b2f75af6492094b25f6ef4eb50d480d51eb17d", "chunk": "diff --git a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java\nindex 5ea12c40b..f9135ca74 100644\n--- a/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java\n+++ b/uberfire-nio2-backport/uberfire-nio2-impls/uberfire-nio2-jgit/src/test/java/org/uberfire/java/nio/fs/jgit/JGitUpdateFSCacheWithHostnameTest.java\n\n@@ -1,15 +1,31 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.uberfire.java.nio.fs.jgit;\n \n import java.net.URI;\n-import java.util.Arrays;\n import java.util.Map;\n \n import org.junit.Test;\n import org.uberfire.java.nio.file.FileSystem;\n import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsCache;\n-import org.uberfire.java.nio.fs.jgit.manager.JGitFileSystemsManager;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n \n public class JGitUpdateFSCacheWithHostnameTest extends AbstractTestInfra {\n \n"}}, {"oid": "12b2f75af6492094b25f6ef4eb50d480d51eb17d", "url": "https://github.com/kiegroup/appformer/commit/12b2f75af6492094b25f6ef4eb50d480d51eb17d", "message": "RHPAM-2721 :Clone project via http can not be re-enabled", "committedDate": "2020-04-08T06:23:15Z", "type": "forcePushed"}, {"oid": "1d0ba53dc9778bf524162c62f14bf45a46471e9b", "url": "https://github.com/kiegroup/appformer/commit/1d0ba53dc9778bf524162c62f14bf45a46471e9b", "message": "RHPAM-2721 :Clone project via http can not be re-enabled", "committedDate": "2020-04-21T18:06:04Z", "type": "commit"}, {"oid": "1d0ba53dc9778bf524162c62f14bf45a46471e9b", "url": "https://github.com/kiegroup/appformer/commit/1d0ba53dc9778bf524162c62f14bf45a46471e9b", "message": "RHPAM-2721 :Clone project via http can not be re-enabled", "committedDate": "2020-04-21T18:06:04Z", "type": "forcePushed"}]}