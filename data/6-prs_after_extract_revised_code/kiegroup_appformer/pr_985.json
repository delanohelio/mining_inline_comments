{"pr_number": 985, "pr_title": "AF-2529: Allow users to embed dashboards", "pr_createdAt": "2020-06-05T21:28:33Z", "pr_url": "https://github.com/kiegroup/appformer/pull/985", "timeline": [{"oid": "848a078387b0dfbdc693e58a5833ddd5010d516d", "url": "https://github.com/kiegroup/appformer/commit/848a078387b0dfbdc693e58a5833ddd5010d516d", "message": "AF-2529: Allow users to embed dashboards", "committedDate": "2020-06-09T23:35:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczMjc1NA==", "url": "https://github.com/kiegroup/appformer/pull/985#discussion_r441732754", "bodyText": "Suggested change", "author": "caponetto", "createdAt": "2020-06-17T18:06:57Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/impl/ImportValidationServiceImpl.java", "diffHunk": "@@ -35,32 +35,36 @@\n @ApplicationScoped\n public class ImportValidationServiceImpl implements ImportValidationService {\n \n+    /**\n+     * Checks if the given file URL is valid for a Runtime Model.\n+     */\n     @Override\n-    public boolean validate(String file) {\n-        boolean hasDataset = false;\n+    public boolean validate(final String file) {\n+        boolean hasDatasetDir = false;\n         boolean hasPage = false;\n         boolean hasNavigation = false;\n-        try (ZipInputStream zis = new ZipInputStream(new FileInputStream(file))) {\n+        try (final ZipInputStream zis = new ZipInputStream(new FileInputStream(file))) {\n             ZipEntry entry;\n             while ((entry = zis.getNextEntry()) != null) {\n \n-                hasDataset = hasDataset || entryStartsWith(entry, DATASET_PREFIX);\n+                hasDatasetDir = hasDatasetDir || entryStartsWith(entry, DATASET_PREFIX);\n                 hasPage = hasPage || entryStartsWith(entry, PERSPECTIVE_PREFIX);\n                 hasNavigation = hasNavigation || entryStartsWith(entry, NAVIGATION_PREFIX);\n \n-                if (hasDataset && hasPage && hasNavigation) {\n+                if (hasNavigation && hasDatasetDir && hasPage) {\n                     return true;\n                 }\n             }\n         } catch (Exception e) {\n             throw new IllegalArgumentException(\"Error validating file: \" + file, e);\n         }\n-\n+        ", "originalCommit": "848a078387b0dfbdc693e58a5833ddd5010d516d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11bda25d2a52618842374b2823478ae99ac81027", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/impl/ImportValidationServiceImpl.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/impl/ImportValidationServiceImpl.java\nindex c3677b6e9..359a69c02 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/impl/ImportValidationServiceImpl.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/impl/ImportValidationServiceImpl.java\n\n@@ -35,30 +35,27 @@ import static org.dashbuilder.shared.model.ImportDefinitions.PERSPECTIVE_PREFIX;\n @ApplicationScoped\n public class ImportValidationServiceImpl implements ImportValidationService {\n \n-    /**\n-     * Checks if the given file URL is valid for a Runtime Model.\n-     */\n     @Override\n-    public boolean validate(final String file) {\n-        boolean hasDatasetDir = false;\n+    public boolean validate(String file) {\n+        boolean hasDataset = false;\n         boolean hasPage = false;\n         boolean hasNavigation = false;\n-        try (final ZipInputStream zis = new ZipInputStream(new FileInputStream(file))) {\n+        try (ZipInputStream zis = new ZipInputStream(new FileInputStream(file))) {\n             ZipEntry entry;\n             while ((entry = zis.getNextEntry()) != null) {\n \n-                hasDatasetDir = hasDatasetDir || entryStartsWith(entry, DATASET_PREFIX);\n+                hasDataset = hasDataset || entryStartsWith(entry, DATASET_PREFIX);\n                 hasPage = hasPage || entryStartsWith(entry, PERSPECTIVE_PREFIX);\n                 hasNavigation = hasNavigation || entryStartsWith(entry, NAVIGATION_PREFIX);\n \n-                if (hasNavigation && hasDatasetDir && hasPage) {\n+                if (hasDataset && hasPage && hasNavigation) {\n                     return true;\n                 }\n             }\n         } catch (Exception e) {\n             throw new IllegalArgumentException(\"Error validating file: \" + file, e);\n         }\n-        \n+\n         return false;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczNjYwNw==", "url": "https://github.com/kiegroup/appformer/pull/985#discussion_r441736607", "bodyText": "NAVIGATION_FILE == \"dashbuilder/navigation/navigation/navtree.json\".\nIs it correct with two navigation? Just double-checking.", "author": "caponetto", "createdAt": "2020-06-17T18:13:47Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/model/ImportDefinitions.java", "diffHunk": "@@ -22,13 +22,15 @@\n  */\n public class ImportDefinitions {\n \n-    public static final String DATASET_PREFIX = \"dashbuilder/datasets/definitions/\";\n-    public static final String NAVIGATION_PREFIX = \"dashbuilder/navigation/navigation/\";\n-    public static final String PERSPECTIVE_PREFIX = \"dashbuilder/navigation/navigation/\";\n-\n+    public static final String DATASET_PREFIX = \"dashbuilder/datasets\";\n+    public static final String DATASET_DEF_PREFIX = DATASET_PREFIX + \"/definitions\";\n+    public static final String DATASET_SUFFIX = \".dset\";\n+    \n+    public static final String PERSPECTIVE_PREFIX = \"dashbuilder/perspectives\";\n     public static final String PERSPECTIVE_SUFFIX = \"perspective_layout\";\n \n-    public static final String NAVIGATION_FILE = NAVIGATION_PREFIX + \"navtree.json\";\n+    public static final String NAVIGATION_PREFIX = \"dashbuilder/navigation\";\n+    public static final String NAVIGATION_FILE = NAVIGATION_PREFIX + \"/navigation/navtree.json\";", "originalCommit": "848a078387b0dfbdc693e58a5833ddd5010d516d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MTQwMg==", "url": "https://github.com/kiegroup/appformer/pull/985#discussion_r442391402", "bodyText": "Yes, it is stored this way:", "author": "jesuino", "createdAt": "2020-06-18T17:32:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczNjYwNw=="}], "type": "inlineReview", "revised_code": {"commit": "11bda25d2a52618842374b2823478ae99ac81027", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/model/ImportDefinitions.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/model/ImportDefinitions.java\nindex 2175df417..5cc3e2d71 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/model/ImportDefinitions.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/model/ImportDefinitions.java\n\n@@ -22,15 +22,13 @@ package org.dashbuilder.shared.model;\n  */\n public class ImportDefinitions {\n \n-    public static final String DATASET_PREFIX = \"dashbuilder/datasets\";\n-    public static final String DATASET_DEF_PREFIX = DATASET_PREFIX + \"/definitions\";\n-    public static final String DATASET_SUFFIX = \".dset\";\n-    \n-    public static final String PERSPECTIVE_PREFIX = \"dashbuilder/perspectives\";\n+    public static final String DATASET_PREFIX = \"dashbuilder/datasets/definitions/\";\n+    public static final String NAVIGATION_PREFIX = \"dashbuilder/navigation/navigation/\";\n+    public static final String PERSPECTIVE_PREFIX = \"dashbuilder/navigation/navigation/\";\n+\n     public static final String PERSPECTIVE_SUFFIX = \"perspective_layout\";\n \n-    public static final String NAVIGATION_PREFIX = \"dashbuilder/navigation\";\n-    public static final String NAVIGATION_FILE = NAVIGATION_PREFIX + \"/navigation/navtree.json\";\n+    public static final String NAVIGATION_FILE = NAVIGATION_PREFIX + \"navtree.json\";\n \n     private ImportDefinitions() {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwMTYwNw==", "url": "https://github.com/kiegroup/appformer/pull/985#discussion_r441801607", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }, (ErrorCallback<Exception>) (Exception message, Throwable throwable) -> {\n          \n          \n            \n                    }, (message, throwable) -> {", "author": "caponetto", "createdAt": "2020-06-17T20:04:11Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/ClientRuntimeModelLoader.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.client;\n+\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.Command;\n+import com.google.gwt.user.client.Window;\n+import org.dashbuilder.client.perspective.RuntimePerspectiveGenerator;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.service.RuntimeModelService;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.jboss.errai.common.client.api.ErrorCallback;\n+\n+@ApplicationScoped\n+public class ClientRuntimeModelLoader {\n+\n+    public static final String IMPORT_ID_PARAM = \"import\";\n+\n+    @Inject\n+    private Caller<RuntimeModelService> importModelServiceCaller;\n+\n+    RuntimeModel modelCache = null;\n+\n+    @Inject\n+    RuntimePerspectiveGenerator perspectiveEditorGenerator;\n+\n+    public void loadModel(Consumer<RuntimeModel> modelLoaded,\n+                          Command emptyModel,\n+                          BiConsumer<Exception, Throwable> error) {\n+        String importID = Window.Location.getParameter(IMPORT_ID_PARAM);\n+        loadModel(importID, modelLoaded, emptyModel, error);\n+\n+    }\n+\n+    public void loadModel(String modelId,\n+                          Consumer<RuntimeModel> modelLoaded,\n+                          Command emptyModel,\n+                          BiConsumer<Exception, Throwable> error) {\n+        if (modelCache != null) {\n+            modelLoaded.accept(modelCache);\n+            return;\n+        }\n+\n+        importModelServiceCaller.call((Optional<RuntimeModel> runtimeModelOp) -> {\n+            if (runtimeModelOp.isPresent()) {\n+                RuntimeModel runtimeModel = runtimeModelOp.get();\n+                runtimeModel.getLayoutTemplates().forEach(perspectiveEditorGenerator::generatePerspective);\n+                modelCache = runtimeModel;\n+                modelLoaded.accept(runtimeModel);\n+            } else {\n+                emptyModel.execute();\n+            }\n+        }, (ErrorCallback<Exception>) (Exception message, Throwable throwable) -> {", "originalCommit": "848a078387b0dfbdc693e58a5833ddd5010d516d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11bda25d2a52618842374b2823478ae99ac81027", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/ClientRuntimeModelLoader.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/ClientRuntimeModelLoader.java\ndeleted file mode 100644\nindex 027dbce6b..000000000\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/ClientRuntimeModelLoader.java\n+++ /dev/null\n\n@@ -1,78 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.dashbuilder.client;\n-\n-import java.util.Optional;\n-import java.util.function.BiConsumer;\n-import java.util.function.Consumer;\n-\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.inject.Inject;\n-\n-import com.google.gwt.user.client.Command;\n-import com.google.gwt.user.client.Window;\n-import org.dashbuilder.client.perspective.RuntimePerspectiveGenerator;\n-import org.dashbuilder.shared.model.RuntimeModel;\n-import org.dashbuilder.shared.service.RuntimeModelService;\n-import org.jboss.errai.common.client.api.Caller;\n-import org.jboss.errai.common.client.api.ErrorCallback;\n-\n-@ApplicationScoped\n-public class ClientRuntimeModelLoader {\n-\n-    public static final String IMPORT_ID_PARAM = \"import\";\n-\n-    @Inject\n-    private Caller<RuntimeModelService> importModelServiceCaller;\n-\n-    RuntimeModel modelCache = null;\n-\n-    @Inject\n-    RuntimePerspectiveGenerator perspectiveEditorGenerator;\n-\n-    public void loadModel(Consumer<RuntimeModel> modelLoaded,\n-                          Command emptyModel,\n-                          BiConsumer<Exception, Throwable> error) {\n-        String importID = Window.Location.getParameter(IMPORT_ID_PARAM);\n-        loadModel(importID, modelLoaded, emptyModel, error);\n-\n-    }\n-\n-    public void loadModel(String modelId,\n-                          Consumer<RuntimeModel> modelLoaded,\n-                          Command emptyModel,\n-                          BiConsumer<Exception, Throwable> error) {\n-        if (modelCache != null) {\n-            modelLoaded.accept(modelCache);\n-            return;\n-        }\n-\n-        importModelServiceCaller.call((Optional<RuntimeModel> runtimeModelOp) -> {\n-            if (runtimeModelOp.isPresent()) {\n-                RuntimeModel runtimeModel = runtimeModelOp.get();\n-                runtimeModel.getLayoutTemplates().forEach(perspectiveEditorGenerator::generatePerspective);\n-                modelCache = runtimeModel;\n-                modelLoaded.accept(runtimeModel);\n-            } else {\n-                emptyModel.execute();\n-            }\n-        }, (ErrorCallback<Exception>) (Exception message, Throwable throwable) -> {\n-            error.accept(message, throwable);\n-            return false;\n-        }).getRuntimeModel(modelId);\n-    }\n-\n-}\n\\ No newline at end of file\n"}}, {"oid": "11bda25d2a52618842374b2823478ae99ac81027", "url": "https://github.com/kiegroup/appformer/commit/11bda25d2a52618842374b2823478ae99ac81027", "message": "AF-2560: Update Widlfly version in showcases", "committedDate": "2020-06-18T17:04:04Z", "type": "commit"}, {"oid": "dd9241ac59acc498ee39409b9c8460cb5e7022c1", "url": "https://github.com/kiegroup/appformer/commit/dd9241ac59acc498ee39409b9c8460cb5e7022c1", "message": "AF-2529: Allow users to embed dashboards", "committedDate": "2020-06-18T17:33:46Z", "type": "commit"}, {"oid": "b85b67b5a5e36c57e5e6012bf664291a9b97fe91", "url": "https://github.com/kiegroup/appformer/commit/b85b67b5a5e36c57e5e6012bf664291a9b97fe91", "message": "Improvements", "committedDate": "2020-06-18T18:26:55Z", "type": "commit"}, {"oid": "b85b67b5a5e36c57e5e6012bf664291a9b97fe91", "url": "https://github.com/kiegroup/appformer/commit/b85b67b5a5e36c57e5e6012bf664291a9b97fe91", "message": "Improvements", "committedDate": "2020-06-18T18:26:55Z", "type": "forcePushed"}, {"oid": "e998c3d75dbfe89194c178a591334c0939af6e35", "url": "https://github.com/kiegroup/appformer/commit/e998c3d75dbfe89194c178a591334c0939af6e35", "message": "tests for RuntimeClientModelService + 404 page for standalone mode", "committedDate": "2020-06-19T22:42:35Z", "type": "commit"}]}