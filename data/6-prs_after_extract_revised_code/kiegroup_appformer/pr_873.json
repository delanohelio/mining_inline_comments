{"pr_number": 873, "pr_title": "KOGITO-652: Context for editors", "pr_createdAt": "2020-01-03T19:50:25Z", "pr_url": "https://github.com/kiegroup/appformer/pull/873", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE3ODM1MQ==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r363178351", "bodyText": "Maybe you could mention what those parameters should represent - path to the content & value of the content as string. Just a nitpick to make the message more helpful.", "author": "domhanak", "createdAt": "2020-01-06T07:02:12Z", "path": "uberfire-workbench/uberfire-workbench-processors-tests/src/test/java/org/uberfire/annotations/processors/WorkbenchClientEditorProcessorTest.java", "diffHunk": "@@ -85,7 +85,7 @@ public void testMissingSetContent() throws FileNotFoundException {\n                                  Kind.ERROR,\n                                  Diagnostic.NOPOS,\n                                  Diagnostic.NOPOS,\n-                                 \"org.uberfire.annotations.processors.WorkbenchClientEditorTest4Activity: The WorkbenchClientEditor must provide a @SetContent annotated method that has a java.lang.String as parameter.\");\n+                                 \"org.uberfire.annotations.processors.WorkbenchClientEditorTest4Activity: The WorkbenchClientEditor must provide a @SetContent annotated method that has two java.lang.String as parameters.\");", "originalCommit": "a0c1efac7bc331fe59984f3ac05da7960cda9158", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMxMzI1NA==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r363313254", "bodyText": "Hello Domink, thanks for your comments. I added a small parenthesis saying that the parameters are the path and content. These annotation processors errors are threw during build, while generating the activity classes, hence I was just reusing previous messages.", "author": "jesuino", "createdAt": "2020-01-06T14:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE3ODM1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "2ecba40294b5e20b72a0a6f816496b79e81100f4", "chunk": "diff --git a/uberfire-workbench/uberfire-workbench-processors-tests/src/test/java/org/uberfire/annotations/processors/WorkbenchClientEditorProcessorTest.java b/uberfire-workbench/uberfire-workbench-processors-tests/src/test/java/org/uberfire/annotations/processors/WorkbenchClientEditorProcessorTest.java\nindex 2d833b554..ffbf96d6b 100644\n--- a/uberfire-workbench/uberfire-workbench-processors-tests/src/test/java/org/uberfire/annotations/processors/WorkbenchClientEditorProcessorTest.java\n+++ b/uberfire-workbench/uberfire-workbench-processors-tests/src/test/java/org/uberfire/annotations/processors/WorkbenchClientEditorProcessorTest.java\n\n@@ -85,7 +85,7 @@ public class WorkbenchClientEditorProcessorTest extends AbstractProcessorTest {\n                                  Kind.ERROR,\n                                  Diagnostic.NOPOS,\n                                  Diagnostic.NOPOS,\n-                                 \"org.uberfire.annotations.processors.WorkbenchClientEditorTest4Activity: The WorkbenchClientEditor must provide a @SetContent annotated method that has two java.lang.String as parameters.\");\n+                                 \"org.uberfire.annotations.processors.WorkbenchClientEditorTest4Activity: The WorkbenchClientEditor must provide a @SetContent annotated method that has two java.lang.String (path and content) as parameters.\");\n         assertNull(result.getActualCode());\n     }\n     \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE3OTIyNQ==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r363179225", "bodyText": "does it matter if the path is relative or absolute? does it make sense to state it here or when I use it I will simply know? :)", "author": "domhanak", "createdAt": "2020-01-06T07:07:02Z", "path": "uberfire-workbench/uberfire-workbench-client/src/main/java/org/uberfire/client/mvp/WorkbenchClientEditorActivity.java", "diffHunk": "@@ -26,11 +26,15 @@\n public interface WorkbenchClientEditorActivity extends WorkbenchActivity {\n \n     /**\n-     * Set the editor content\n+     *  \n+     *  Set the editor content\n+     *  \n+     * @param path\n+     * Content Path ", "originalCommit": "a0c1efac7bc331fe59984f3ac05da7960cda9158", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMxNTIyMg==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r363315222", "bodyText": "Improved the comment to say that it is the relative path - in fact, full path does not make sense in GITHUB channel, it would make sense in VSCODE and in the future DESKTOP channel (full path of a file in the disk), so relative paths should be always the choice.", "author": "jesuino", "createdAt": "2020-01-06T14:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE3OTIyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "2ecba40294b5e20b72a0a6f816496b79e81100f4", "chunk": "diff --git a/uberfire-workbench/uberfire-workbench-client/src/main/java/org/uberfire/client/mvp/WorkbenchClientEditorActivity.java b/uberfire-workbench/uberfire-workbench-client/src/main/java/org/uberfire/client/mvp/WorkbenchClientEditorActivity.java\nindex 5ea99f856..bb66b7067 100644\n--- a/uberfire-workbench/uberfire-workbench-client/src/main/java/org/uberfire/client/mvp/WorkbenchClientEditorActivity.java\n+++ b/uberfire-workbench/uberfire-workbench-client/src/main/java/org/uberfire/client/mvp/WorkbenchClientEditorActivity.java\n\n@@ -30,9 +30,9 @@ public interface WorkbenchClientEditorActivity extends WorkbenchActivity {\n      *  Set the editor content\n      *  \n      * @param path\n-     * Content Path \n+     *  Content Relative Path\n      * @param value\n-     * The editor content\n+     *  The editor content\n      */\n     void setContent(String path, String value);\n \n"}}, {"oid": "2ecba40294b5e20b72a0a6f816496b79e81100f4", "url": "https://github.com/kiegroup/appformer/commit/2ecba40294b5e20b72a0a6f816496b79e81100f4", "message": "Improving error message and setContent comment", "committedDate": "2020-01-06T13:55:17Z", "type": "forcePushed"}, {"oid": "7dabac0276a07a9e0fd1636db7bb9966460ab0dc", "url": "https://github.com/kiegroup/appformer/commit/7dabac0276a07a9e0fd1636db7bb9966460ab0dc", "message": "KOGITO-652: Context for editors", "committedDate": "2020-01-07T15:50:01Z", "type": "commit"}, {"oid": "92b291c23806487a0e57b5022c12b9b920ac8bed", "url": "https://github.com/kiegroup/appformer/commit/92b291c23806487a0e57b5022c12b9b920ac8bed", "message": "Improving error message and setContent comment", "committedDate": "2020-01-07T15:50:01Z", "type": "commit"}, {"oid": "fe1d7b9ecca5080a56a0028c0e7652c321bae21f", "url": "https://github.com/kiegroup/appformer/commit/fe1d7b9ecca5080a56a0028c0e7652c321bae21f", "message": "Adding isKogito functionality", "committedDate": "2020-01-08T01:39:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE4NDYwNg==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r364184606", "bodyText": "@jesuino\nHi. I think this should be removed/avoided.\nIf \"WindowRef.isGwtEditorBeansAvailable()\" mean you have the gwtEditorBeans variable, this one may be not instantiated for a lot of different reasons - i.e. some error in code implementation/compilation, that are not related to the environment itself.", "author": "gitgabrio", "createdAt": "2020-01-08T11:25:58Z", "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/context/impl/EditorContextProviderImpl.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.bridge.client.context.impl;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.appformer.kogito.bridge.client.context.EditorContextProvider;\n+import org.appformer.kogito.bridge.client.context.interop.EditorContextWrapper;\n+import org.appformer.kogito.bridge.client.interop.WindowRef;\n+\n+@ApplicationScoped\n+public class EditorContextProviderImpl implements EditorContextProvider {\n+\n+    @Override\n+    public Optional<String> getChannel() {\n+        return nullSafe(EditorContextWrapper::getChannel);\n+    }\n+\n+    @Override\n+    public boolean isKogito() {", "originalCommit": "fe1d7b9ecca5080a56a0028c0e7652c321bae21f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIwNTM1OQ==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r364205359", "bodyText": "Thanks for the feedback, @gitgabrio", "author": "jesuino", "createdAt": "2020-01-08T12:23:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE4NDYwNg=="}], "type": "inlineReview", "revised_code": {"commit": "c6760d6b37ac09966d52feb72b92998a944c5652", "chunk": "diff --git a/appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/context/impl/EditorContextProviderImpl.java b/appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/context/impl/EditorContextProviderImpl.java\nindex 3db21a542..9e84186e7 100644\n--- a/appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/context/impl/EditorContextProviderImpl.java\n+++ b/appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/context/impl/EditorContextProviderImpl.java\n\n@@ -16,11 +16,9 @@\n \n package org.appformer.kogito.bridge.client.context.impl;\n \n-import java.util.Optional;\n-import java.util.function.Function;\n-\n import javax.enterprise.context.ApplicationScoped;\n \n+import org.appformer.kogito.bridge.client.context.KogitoChannel;\n import org.appformer.kogito.bridge.client.context.EditorContextProvider;\n import org.appformer.kogito.bridge.client.context.interop.EditorContextWrapper;\n import org.appformer.kogito.bridge.client.interop.WindowRef;\n"}}, {"oid": "92b291c23806487a0e57b5022c12b9b920ac8bed", "url": "https://github.com/kiegroup/appformer/commit/92b291c23806487a0e57b5022c12b9b920ac8bed", "message": "Improving error message and setContent comment", "committedDate": "2020-01-07T15:50:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxMzU4MQ==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r364213581", "bodyText": "I think it is more readable as\n public Optional<String> getChannel() {\n      return Optional.ofNullable(EditorContextWrapper.get()).map(EditorContextWrapper::getChannel);\n }", "author": "danielezonca", "createdAt": "2020-01-08T12:47:48Z", "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/context/EditorContextProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.bridge.client.context;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.appformer.kogito.bridge.client.context.interop.EditorContextWrapper;\n+\n+/**\n+ * \n+ * CDI Bean to provide access to EditorContext properties\n+ *\n+ */\n+@ApplicationScoped\n+public class EditorContextProvider {\n+\n+    /**\n+     * The channel where the editor is running\n+     * @return\n+     */\n+    public Optional<String> getChannel() {\n+        return nullSafe(wrapper -> wrapper.getChannel());\n+    }\n+\n+    private Optional<String> nullSafe(Function<EditorContextWrapper, String> action) {\n+        EditorContextWrapper wrapper = EditorContextWrapper.get();\n+        if (wrapper != null) {\n+            return Optional.of(action.apply(wrapper));\n+        }\n+        return Optional.empty();\n+    }", "originalCommit": "92b291c23806487a0e57b5022c12b9b920ac8bed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxNDIyMw==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r364214223", "bodyText": "I think it is more readable as\n public Optional<String> getChannel() {\n      return Optional.ofNullable(EditorContextWrapper.get()).map(EditorContextWrapper::getChannel);\n }\n\n@jesuino One question: what does Optional.empty would mean from a functional point of view? Is there a possible situation where the \"channel\" is empty ?", "author": "gitgabrio", "createdAt": "2020-01-08T12:49:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxMzU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxNTQyMA==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r364215420", "bodyText": "Presumably, given the current implementation, the channel would be empty when IsKogito is true. However I'm proposing IsKogito is killed-off and channel always returns a value... but let's wait for @jesuino to advise.", "author": "manstis", "createdAt": "2020-01-08T12:52:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxMzU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIyMzQxNg==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r364223416", "bodyText": "What I was testing yesterday was something  like:\nIf you are running Kogito and in a channel, so: isKogito==true and channel==channel where the editor is running\nIf you are running on Business Central or in a webapp: isKogito==false\nWhen you test the editor in the browser (without any channel), channel.isEmpty() == true\nNow adding BUSINESS-CENTRAL channel we simply would have an additional channel for Business Central only or channel.isEmpty ==true if no channel. This is what I am working right now.", "author": "jesuino", "createdAt": "2020-01-08T13:13:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxMzU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIyNTAzNw==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r364225037", "bodyText": "As long as we only have one place to check the environment in which an editor is running I'm happy... i.e. kill off IsKogito everywhere. My preference is to simply use EditorContextProvider.getChannel() to determine where the editor is running, be it VSCode, GitHub, Business Central or elsewhere.", "author": "manstis", "createdAt": "2020-01-08T13:17:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxMzU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIyOTkzNg==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r364229936", "bodyText": "@jesuino @manstis\nI think your comments may be merged in one solution (correct me if I'm wrong):\n\nalways return the channel identifier in one single place\ndo not rely on IsKogito (as you see, using it lead to a matrix of cases)\n\nI personally agree, but still not really like the overall idea that somehow the content (i.e. the editor) should know about the container to work correctly - it seems against the concept of modularity - I have the impression there is some architectural issue behind that this \"channel\" information is meant to solve.\nBeside that, Optional.empty() is a nice way to say null, and null has not any semantical meaning: I would prefer to always return a value or throw an exception.", "author": "gitgabrio", "createdAt": "2020-01-08T13:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxMzU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzMTcxNQ==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r364231715", "bodyText": "My understanding is that channel may be used to determine where to show docks and which may be open by default etc based upon the container/channel... we could achieve this by composing different plugins/extensions for different containers/channels but IMO that could all too easily explode into a maintenance nightmare! There may be other uses of which I am unaware..", "author": "manstis", "createdAt": "2020-01-08T13:33:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxMzU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzOTAxOA==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r364239018", "bodyText": "@manstis\nIf I follow correctly, that would lead to the following scenario:\n\neditors must invoke the \"channel\" to know where they are running\nbased on that, the editor itself must implement a sort of \"if\" - based on the channel, the editor should behave/look differently\nthis could go far away of the simple \"screen container\" approach I've understood from the beginning - it would require to spread the consequences of such \"if\" all over the code.\n\nBut what I still fail to understand is: we already have two specific modules - one is meant for kogito (and with it I mean client-side only - maybe this is my misunderstanding) and the other for business central. What other differentiation could possible be? If we are saying that some behavior of an editor inside VSCode must be different from the github extension, then we are saying that potentially for every new possible channel a different implementation should be provided, and that would lead to nightmare too, IMHO.\nI think that editors should be thought as composable pieces - with the wrapper layer provided only to allow the client-side requirements. Beside that, they should be absolutely agnostic about the container they are running in.", "author": "gitgabrio", "createdAt": "2020-01-08T13:48:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxMzU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI1OTQwNA==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r364259404", "bodyText": "Hi @gitgabrio IDK the full purpose of channel other than what I've said above that some editors in some channels may need to behave differently - and I don't mean offer different feature sets.. We have 2 wrappers. Plain and simple. One for (current) Business Central and one for kogito (be it VSCode, GitHub etc). The feature sets in each wrapper remain constant however I've heard mention of, for example (and I may be mis-quoting), the Properties Panel (in DMN and BPMN) may be required to be open by default in VSCode but not GitHub.", "author": "manstis", "createdAt": "2020-01-08T14:32:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxMzU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI1OTc4OA==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r364259788", "bodyText": "If channel is meant to be providing the meta-data for something else perhaps @jesuino or someone in foundation can explain it's exact purpose.", "author": "manstis", "createdAt": "2020-01-08T14:33:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxMzU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1NjA4Ng==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r364356086", "bodyText": "@manstis @yesamer\nSo, if I understand correctly, that channel has some meaning only inside the client-side editors.\nHaving said that, IMO it looks much more like a \"configuration\" parameter, that should be set once and for all depending on the environment, and not something to be continuously invoked at runtime.  With that said, I think it would be better to move that during \"compilation/build\" (or whatever) phase: define a \"channel\" property that is set when the code is embedded in the container (VSCode, other) and then the editor behave differently based on that variable. I think the behavior would be much easier to predict and the code easier to test (not saying avoiding unpredictable method invocation depending on who-know-what mechanism)", "author": "gitgabrio", "createdAt": "2020-01-08T17:38:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxMzU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1NjEzNQ==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r364356135", "bodyText": "Hi everyone,\nEditorContextProvider.getChannel()  will return an Enum with\n\nDEFAULT (on any web app running based on AppFormer);\nOn Kogito we will return VSCODE|GITHUB|Online based on the channel that the envelope is running;\n\nOur webapps to ensure the correct values are returned in -testing and -runtime will have to implement an\n@Alternative for EditorContextProvider that will return the desired channel mock.\nI also agree with Michael that is a good idea to remove isKogito() API after this PR gets merged.\nThanks everyone for the discussion. I hope that makes sense and provide value for us.", "author": "ederign", "createdAt": "2020-01-08T17:38:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxMzU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwODU4NA==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r364408584", "bodyText": "updated PR with commit c6760d6", "author": "jesuino", "createdAt": "2020-01-08T19:39:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxMzU4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c6760d6b37ac09966d52feb72b92998a944c5652", "chunk": "diff --git a/appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/context/EditorContextProvider.java b/appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/context/EditorContextProvider.java\nindex 9bcb2baae..485e47a62 100644\n--- a/appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/context/EditorContextProvider.java\n+++ b/appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/context/EditorContextProvider.java\n\n@@ -16,35 +16,19 @@\n \n package org.appformer.kogito.bridge.client.context;\n \n-import java.util.Optional;\n-import java.util.function.Function;\n-\n-import javax.enterprise.context.ApplicationScoped;\n-\n-import org.appformer.kogito.bridge.client.context.interop.EditorContextWrapper;\n-\n /**\n  * \n- * CDI Bean to provide access to EditorContext properties\n+ * Provide access to EditorContext properties\n  *\n  */\n-@ApplicationScoped\n-public class EditorContextProvider {\n+public interface EditorContextProvider {\n \n     /**\n-     * The channel where the editor is running\n+     * Access the channel where the editor is running (e.g. ONLINE, GITHUB or VSCODE).\n+     * \n      * @return\n+     * The channel where the editor is running or an empty optional if no channel is available.\n      */\n-    public Optional<String> getChannel() {\n-        return nullSafe(wrapper -> wrapper.getChannel());\n-    }\n-\n-    private Optional<String> nullSafe(Function<EditorContextWrapper, String> action) {\n-        EditorContextWrapper wrapper = EditorContextWrapper.get();\n-        if (wrapper != null) {\n-            return Optional.of(action.apply(wrapper));\n-        }\n-        return Optional.empty();\n-    }\n+    KogitoChannel getChannel();\n \n }\n"}}, {"oid": "c6760d6b37ac09966d52feb72b92998a944c5652", "url": "https://github.com/kiegroup/appformer/commit/c6760d6b37ac09966d52feb72b92998a944c5652", "message": "Refactor", "committedDate": "2020-01-08T18:19:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY4NzE2OA==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r364687168", "bodyText": "KogitoChannel is an enum. Not sure an empty optional can be returned as we state in javadoc.", "author": "jomarko", "createdAt": "2020-01-09T11:22:57Z", "path": "appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/context/EditorContextProvider.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.bridge.client.context;\n+\n+/**\n+ * \n+ * Provide access to EditorContext properties\n+ *\n+ */\n+public interface EditorContextProvider {\n+\n+    /**\n+     * Access the channel where the editor is running (e.g. ONLINE, GITHUB or VSCODE).\n+     * \n+     * @return\n+     * The channel where the editor is running or an empty optional if no channel is available.\n+     */\n+    KogitoChannel getChannel();", "originalCommit": "c6760d6b37ac09966d52feb72b92998a944c5652", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc0MzI5Nw==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r364743297", "bodyText": "fixed", "author": "jesuino", "createdAt": "2020-01-09T13:42:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY4NzE2OA=="}], "type": "inlineReview", "revised_code": {"commit": "3b047e9ed7494ed3e17d0b602ebdc377f6b958d0", "chunk": "diff --git a/appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/context/EditorContextProvider.java b/appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/context/EditorContextProvider.java\nindex 485e47a62..29072725b 100644\n--- a/appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/context/EditorContextProvider.java\n+++ b/appformer-kogito-bridge/src/main/java/org/appformer/kogito/bridge/client/context/EditorContextProvider.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"oid": "3b047e9ed7494ed3e17d0b602ebdc377f6b958d0", "url": "https://github.com/kiegroup/appformer/commit/3b047e9ed7494ed3e17d0b602ebdc377f6b958d0", "message": "Fixing comments", "committedDate": "2020-01-09T13:41:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg1ODQ5OA==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r365858498", "bodyText": "Please cover also ONLINE, VSCODE, DEFAULT", "author": "jomarko", "createdAt": "2020-01-13T15:16:21Z", "path": "appformer-kogito-bridge/src/test/java/org/appformer/kogito/bridge/client/context/KogitoChannelTest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.appformer.kogito.bridge.client.context;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class KogitoChannelTest {\n+\n+    @Test\n+    public void withNameTest() {\n+        assertEquals(KogitoChannel.GITHUB, KogitoChannel.withName(\"GitHub\"));", "originalCommit": "3b047e9ed7494ed3e17d0b602ebdc377f6b958d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg2NTg5Mg==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r365865892", "bodyText": "@jomarko can we fix this in a later JIRA? @jesuino is on PTO and I don't want to block the PR.", "author": "ederign", "createdAt": "2020-01-13T15:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg1ODQ5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg3MDI4Nw==", "url": "https://github.com/kiegroup/appformer/pull/873#discussion_r365870287", "bodyText": "https://issues.redhat.com/browse/KOGITO-866", "author": "ederign", "createdAt": "2020-01-13T15:37:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg1ODQ5OA=="}], "type": "inlineReview", "revised_code": null}]}