{"pr_number": 995, "pr_title": "AF-2549, AF-2550, AF-2551: Dashbuilder Runtime Multi Mode Support", "pr_createdAt": "2020-06-25T21:53:39Z", "pr_url": "https://github.com/kiegroup/appformer/pull/995", "timeline": [{"oid": "259fe020d6e45f713e931ffac637d5f6ee6bc30a", "url": "https://github.com/kiegroup/appformer/commit/259fe020d6e45f713e931ffac637d5f6ee6bc30a", "message": "AF-2549: Support for multi dashboards mode", "committedDate": "2020-06-25T21:54:34Z", "type": "forcePushed"}, {"oid": "e7fa4f9848cd6ea5808b2add3d1578198e6acd20", "url": "https://github.com/kiegroup/appformer/commit/e7fa4f9848cd6ea5808b2add3d1578198e6acd20", "message": "AF-2549: Support for multi dashboards mode", "committedDate": "2020-06-26T15:01:29Z", "type": "forcePushed"}, {"oid": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "url": "https://github.com/kiegroup/appformer/commit/39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "message": "Increasing test coverage", "committedDate": "2020-07-07T22:18:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwOTg4Mw==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452809883", "bodyText": "Consider appending the expected size into the constant name, like DEFAULT_UPLOAD_SIZE_KB.\nIt'll improve the code readability.", "author": "caponetto", "createdAt": "2020-07-10T12:24:28Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java", "diffHunk": "@@ -28,41 +27,68 @@\n import org.uberfire.commons.data.Pair;\n \n /**\n- * Holds Runtime System properties\n+ * Holds Runtime System properties and information.\n  *\n  */\n @ApplicationScoped\n public class RuntimeOptions {\n \n     Logger logger = LoggerFactory.getLogger(RuntimeOptions.class);\n \n+    public static final String DASHBOARD_EXTENSION = \".zip\";\n+\n+    private static final String DEFAULT_MODEL_DIR = \"/tmp/dashbuilder/models\";\n+    \n+    private static final int DEFAULT_UPLOAD_SIZE = 96 * 1024;", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java\nindex 43eba6865..342e49300 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java\n\n@@ -38,13 +38,13 @@ public class RuntimeOptions {\n     public static final String DASHBOARD_EXTENSION = \".zip\";\n \n     private static final String DEFAULT_MODEL_DIR = \"/tmp/dashbuilder/models\";\n-    \n-    private static final int DEFAULT_UPLOAD_SIZE = 96 * 1024;\n+\n+    private static final int DEFAULT_UPLOAD_SIZE_KB = 96 * 1024;\n \n     /**\n      * Base Directory where dashboards ZIPs are stored\n      */\n-    private static final String IMPORTS_BASE_DIR_PROP = \"org.dashbuilder.import.base.dir\";\n+    private static final String IMPORTS_BASE_DIR_PROP = \"dashbuilder.import.base.dir\";\n \n     /**\n      * Set a static dashboard to run with runtime. When this property is set no new imports are allowed.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMTIwMg==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452811202", "bodyText": "The other properties don't start with org. Is there a reason for not following this pattern?", "author": "caponetto", "createdAt": "2020-07-10T12:27:15Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java", "diffHunk": "@@ -28,41 +27,68 @@\n import org.uberfire.commons.data.Pair;\n \n /**\n- * Holds Runtime System properties\n+ * Holds Runtime System properties and information.\n  *\n  */\n @ApplicationScoped\n public class RuntimeOptions {\n \n     Logger logger = LoggerFactory.getLogger(RuntimeOptions.class);\n \n+    public static final String DASHBOARD_EXTENSION = \".zip\";\n+\n+    private static final String DEFAULT_MODEL_DIR = \"/tmp/dashbuilder/models\";\n+    \n+    private static final int DEFAULT_UPLOAD_SIZE = 96 * 1024;\n+\n+    /**\n+     * Base Directory where dashboards ZIPs are stored\n+     */\n     private static final String IMPORTS_BASE_DIR_PROP = \"org.dashbuilder.import.base.dir\";", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java\nindex 43eba6865..342e49300 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java\n\n@@ -38,13 +38,13 @@ public class RuntimeOptions {\n     public static final String DASHBOARD_EXTENSION = \".zip\";\n \n     private static final String DEFAULT_MODEL_DIR = \"/tmp/dashbuilder/models\";\n-    \n-    private static final int DEFAULT_UPLOAD_SIZE = 96 * 1024;\n+\n+    private static final int DEFAULT_UPLOAD_SIZE_KB = 96 * 1024;\n \n     /**\n      * Base Directory where dashboards ZIPs are stored\n      */\n-    private static final String IMPORTS_BASE_DIR_PROP = \"org.dashbuilder.import.base.dir\";\n+    private static final String IMPORTS_BASE_DIR_PROP = \"dashbuilder.import.base.dir\";\n \n     /**\n      * Set a static dashboard to run with runtime. When this property is set no new imports are allowed.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMzYwNA==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452813604", "bodyText": "Consider using else if here. There is not need to evaluate this if block if the previous one is true.", "author": "caponetto", "createdAt": "2020-07-10T12:32:27Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java", "diffHunk": "@@ -91,14 +117,23 @@ public void init() {\n     }\n \n     /**\n-     * Generates a new valid file path\n-     * \n+     * Generates a new valid file path.\n+     * @param fileName\n+     * The fileName\n      * @return\n      */\n-    public Pair<String, String> newFilePath() {\n-        String fileId = System.currentTimeMillis() + \"\";\n-        String filePath = buildFilePath(fileId);\n-        return Pair.newPair(fileId, filePath);\n+    public Pair<String, String> newFilePath(String fileName) {\n+        if (fileName == null || fileName.trim().isEmpty()) {\n+            fileName = System.currentTimeMillis() + \"\";\n+        }\n+\n+        if (fileName.endsWith(DASHBOARD_EXTENSION)) {", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java\nindex 43eba6865..342e49300 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java\n\n@@ -122,18 +122,17 @@ public class RuntimeOptions {\n      * The fileName\n      * @return\n      */\n-    public Pair<String, String> newFilePath(String fileName) {\n+    public Pair<String, String> newFilePath(final String fileName) {\n+        String newFileName = fileName;\n         if (fileName == null || fileName.trim().isEmpty()) {\n-            fileName = System.currentTimeMillis() + \"\";\n-        }\n-\n-        if (fileName.endsWith(DASHBOARD_EXTENSION)) {\n+            newFileName = System.currentTimeMillis() + \"\";\n+        } else if (fileName.endsWith(DASHBOARD_EXTENSION)) {\n             int lastIndex = fileName.length() - DASHBOARD_EXTENSION.length();\n-            fileName = fileName.substring(0, lastIndex);\n+            newFileName = fileName.substring(0, lastIndex);\n         }\n \n-        String filePath = buildFilePath(fileName);\n-        return Pair.newPair(fileName, filePath);\n+        String filePath = buildFilePath(newFileName);\n+        return Pair.newPair(newFileName, filePath);\n     }\n \n     public boolean isMultipleImport() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxNDYzOA==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452814638", "bodyText": "Consider making the parameter fileName immutable.", "author": "caponetto", "createdAt": "2020-07-10T12:34:26Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java", "diffHunk": "@@ -91,14 +117,23 @@ public void init() {\n     }\n \n     /**\n-     * Generates a new valid file path\n-     * \n+     * Generates a new valid file path.\n+     * @param fileName\n+     * The fileName\n      * @return\n      */\n-    public Pair<String, String> newFilePath() {\n-        String fileId = System.currentTimeMillis() + \"\";\n-        String filePath = buildFilePath(fileId);\n-        return Pair.newPair(fileId, filePath);\n+    public Pair<String, String> newFilePath(String fileName) {", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java\nindex 43eba6865..342e49300 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeOptions.java\n\n@@ -122,18 +122,17 @@ public class RuntimeOptions {\n      * The fileName\n      * @return\n      */\n-    public Pair<String, String> newFilePath(String fileName) {\n+    public Pair<String, String> newFilePath(final String fileName) {\n+        String newFileName = fileName;\n         if (fileName == null || fileName.trim().isEmpty()) {\n-            fileName = System.currentTimeMillis() + \"\";\n-        }\n-\n-        if (fileName.endsWith(DASHBOARD_EXTENSION)) {\n+            newFileName = System.currentTimeMillis() + \"\";\n+        } else if (fileName.endsWith(DASHBOARD_EXTENSION)) {\n             int lastIndex = fileName.length() - DASHBOARD_EXTENSION.length();\n-            fileName = fileName.substring(0, lastIndex);\n+            newFileName = fileName.substring(0, lastIndex);\n         }\n \n-        String filePath = buildFilePath(fileName);\n-        return Pair.newPair(fileName, filePath);\n+        String filePath = buildFilePath(newFileName);\n+        return Pair.newPair(newFileName, filePath);\n     }\n \n     public boolean isMultipleImport() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMTM0Ng==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452821346", "bodyText": "hideLoading() will be called twice if notFound() is called.", "author": "caponetto", "createdAt": "2020-07-10T12:48:17Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeEntryPoint.java", "diffHunk": "@@ -83,9 +83,9 @@ private void foundRuntimeModel(RuntimeModel runtimeModel) {\n                                                   .noneMatch(lt -> lt.getName().equals(perspective));\n         if (perspectiveNotFound) {\n             notFound();\n-        } else {\n-            this.hideLoading();\n-        }\n+        } \n+        \n+        this.hideLoading();", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "272fa36f49151b086e7686875f76219e1874b1bb", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeEntryPoint.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeEntryPoint.java\nindex 5d0fef567..ecdc35e9c 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeEntryPoint.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeEntryPoint.java\n\n@@ -83,9 +83,9 @@ public class RuntimeEntryPoint {\n                                                   .noneMatch(lt -> lt.getName().equals(perspective));\n         if (perspectiveNotFound) {\n             notFound();\n-        } \n-        \n-        this.hideLoading();\n+        } else {\n+            this.hideLoading();\n+        }\n     }\n \n     public void notFound() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMjU4OQ==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452822589", "bodyText": "Consider using i18n for \"List Dashboards\".", "author": "caponetto", "createdAt": "2020-07-10T12:50:39Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/perspective/DashboardsListPerspective.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.perspective;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.dashbuilder.client.screens.DashboardsListScreen;\n+import org.uberfire.client.annotations.Perspective;\n+import org.uberfire.client.annotations.WorkbenchPerspective;\n+import org.uberfire.client.workbench.panels.impl.StaticWorkbenchPanelPresenter;\n+import org.uberfire.mvp.PlaceRequest;\n+import org.uberfire.mvp.impl.DefaultPlaceRequest;\n+import org.uberfire.workbench.model.PerspectiveDefinition;\n+import org.uberfire.workbench.model.impl.PartDefinitionImpl;\n+import org.uberfire.workbench.model.impl.PerspectiveDefinitionImpl;\n+\n+@ApplicationScoped\n+@WorkbenchPerspective(identifier = DashboardsListPerspective.ID)\n+public class DashboardsListPerspective {\n+\n+    public static final String ID = \"DashboardsListPerspective\";\n+\n+    @Perspective\n+    public PerspectiveDefinition buildPerspective() {\n+        PerspectiveDefinition perspective = new PerspectiveDefinitionImpl(StaticWorkbenchPanelPresenter.class.getName());\n+        final PlaceRequest place = new DefaultPlaceRequest(DashboardsListScreen.ID);\n+        PartDefinitionImpl dashboardScreen = new PartDefinitionImpl(place);\n+        perspective.getRoot().addPart(dashboardScreen);\n+        perspective.setName(\"List Dashboards\");", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/perspective/DashboardsListPerspective.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/perspective/DashboardsListPerspective.java\nindex f6dc3cd2b..0e51ed9d6 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/perspective/DashboardsListPerspective.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/perspective/DashboardsListPerspective.java\n\n@@ -18,6 +18,7 @@ package org.dashbuilder.client.perspective;\n \n import javax.enterprise.context.ApplicationScoped;\n \n+import org.dashbuilder.client.resources.i18n.AppConstants;\n import org.dashbuilder.client.screens.DashboardsListScreen;\n import org.uberfire.client.annotations.Perspective;\n import org.uberfire.client.annotations.WorkbenchPerspective;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMzA4OQ==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452823089", "bodyText": "Consider using i18n from \"Router\".", "author": "caponetto", "createdAt": "2020-07-10T12:51:38Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/perspective/RouterPerspective.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.perspective;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import elemental2.dom.DomGlobal;\n+import org.dashbuilder.client.screens.RouterScreen;\n+import org.uberfire.client.annotations.Perspective;\n+import org.uberfire.client.annotations.WorkbenchPerspective;\n+import org.uberfire.client.workbench.panels.impl.StaticWorkbenchPanelPresenter;\n+import org.uberfire.lifecycle.OnOpen;\n+import org.uberfire.mvp.PlaceRequest;\n+import org.uberfire.mvp.impl.DefaultPlaceRequest;\n+import org.uberfire.workbench.model.PerspectiveDefinition;\n+import org.uberfire.workbench.model.impl.PartDefinitionImpl;\n+import org.uberfire.workbench.model.impl.PerspectiveDefinitionImpl;\n+\n+@ApplicationScoped\n+@WorkbenchPerspective(identifier = RouterPerspective.ID, isDefault = true)\n+public class RouterPerspective {\n+\n+    public static final String ID = \"RouterPerspective\";\n+\n+    @Perspective\n+    public PerspectiveDefinition buildPerspective() {\n+        PerspectiveDefinition perspective = new PerspectiveDefinitionImpl(StaticWorkbenchPanelPresenter.class.getName());\n+        final PlaceRequest place = new DefaultPlaceRequest(RouterScreen.ID);\n+        PartDefinitionImpl dashboardScreen = new PartDefinitionImpl(place);\n+        perspective.getRoot().addPart(dashboardScreen);\n+        perspective.setName(\"Router\");", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/perspective/RouterPerspective.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/perspective/RouterPerspective.java\nindex 3764eec9e..c0ed146c9 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/perspective/RouterPerspective.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/perspective/RouterPerspective.java\n\n@@ -18,12 +18,11 @@ package org.dashbuilder.client.perspective;\n \n import javax.enterprise.context.ApplicationScoped;\n \n-import elemental2.dom.DomGlobal;\n+import org.dashbuilder.client.resources.i18n.AppConstants;\n import org.dashbuilder.client.screens.RouterScreen;\n import org.uberfire.client.annotations.Perspective;\n import org.uberfire.client.annotations.WorkbenchPerspective;\n import org.uberfire.client.workbench.panels.impl.StaticWorkbenchPanelPresenter;\n-import org.uberfire.lifecycle.OnOpen;\n import org.uberfire.mvp.PlaceRequest;\n import org.uberfire.mvp.impl.DefaultPlaceRequest;\n import org.uberfire.workbench.model.PerspectiveDefinition;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyNzM0MA==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452827340", "bodyText": "This inject seems unnecessary.", "author": "caponetto", "createdAt": "2020-07-10T12:59:54Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/view/EmptyScreenView.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.dashbuilder.client.screens.view;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import elemental2.dom.HTMLDivElement;\n+import elemental2.dom.HTMLElement;\n+import org.dashbuilder.client.RuntimeCommunication;\n+import org.dashbuilder.client.resources.i18n.AppConstants;\n+import org.dashbuilder.client.screens.EmptyScreen;\n+import org.dashbuilder.client.widgets.UploadWidget;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+\n+@Templated\n+@Dependent\n+public class EmptyScreenView implements EmptyScreen.View {\n+\n+    AppConstants i18n = AppConstants.INSTANCE;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement emptyImport;\n+\n+    @Inject\n+    @DataField\n+    HTMLDivElement uploadContainer;\n+\n+    @Inject\n+    RuntimeCommunication runtimeCommunication;", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/view/EmptyScreenView.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/view/EmptyScreenView.java\nindex c1641c927..f2163954a 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/view/EmptyScreenView.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/view/EmptyScreenView.java\n\n@@ -20,7 +20,6 @@ import javax.inject.Inject;\n \n import elemental2.dom.HTMLDivElement;\n import elemental2.dom.HTMLElement;\n-import org.dashbuilder.client.RuntimeCommunication;\n import org.dashbuilder.client.resources.i18n.AppConstants;\n import org.dashbuilder.client.screens.EmptyScreen;\n import org.dashbuilder.client.widgets.UploadWidget;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyOTMwMA==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452829300", "bodyText": "Suggested change", "author": "caponetto", "createdAt": "2020-07-10T13:03:43Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/UploadWidget.java", "diffHunk": "@@ -13,48 +13,45 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.dashbuilder.client.screens;\n+\n+package org.dashbuilder.client.widgets;\n \n import javax.annotation.PostConstruct;\n import javax.enterprise.context.Dependent;\n import javax.inject.Inject;\n \n-import com.google.gwt.core.client.GWT;\n import elemental2.dom.DomGlobal;\n import elemental2.dom.FormData;\n+import elemental2.dom.HTMLElement;\n import elemental2.dom.HTMLFormElement;\n import elemental2.dom.RequestInit;\n import elemental2.dom.Response;\n-import org.dashbuilder.client.ClientRuntimeModelLoader;\n import org.dashbuilder.client.resources.i18n.AppConstants;\n-import org.uberfire.client.annotations.WorkbenchPartTitle;\n-import org.uberfire.client.annotations.WorkbenchPartView;\n-import org.uberfire.client.annotations.WorkbenchScreen;\n+import org.dashbuilder.client.screens.RouterScreen;\n+import org.jboss.errai.ui.client.local.api.elemental2.IsElement;\n import org.uberfire.client.mvp.PlaceManager;\n import org.uberfire.client.mvp.UberElemental;\n \n /**\n- * A screen that prompts users to upload a dashboard.\n+ * Allow users to upload new dashboards\n  *\n  */\n @Dependent\n-@WorkbenchScreen(identifier = UploadDashboardsScreen.ID)\n-public class UploadDashboardsScreen {\n-\n-    public static final String ID = \"UploadDashboardsScreen\";\n+public class UploadWidget implements IsElement {\n \n-    private static final AppConstants i18n = AppConstants.INSTANCE;\n+    static final AppConstants i18n = AppConstants.INSTANCE;\n \n     @Inject\n     View view;\n-\n+    ", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/UploadWidget.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/UploadWidget.java\nindex 37d342d16..05fc18f2b 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/UploadWidget.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/UploadWidget.java\n\n@@ -43,13 +43,12 @@ public class UploadWidget implements IsElement {\n \n     @Inject\n     View view;\n-    \n+\n     @Inject\n     RouterScreen routerScreen;\n \n     @Inject\n     PlaceManager placeManager;\n-    \n \n     public interface View extends UberElemental<UploadWidget> {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzMjc3Ng==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452832776", "bodyText": "If this event goes from server to client, then I guess you'll need to make it @Portable.\nSame applies here (*).", "author": "caponetto", "createdAt": "2020-07-10T13:10:18Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/NewDataSetContentEvent.java", "diffHunk": "@@ -20,16 +20,27 @@\n \n import org.dashbuilder.shared.model.DataSetContent;\n \n+/**\n+ * Fired when new datasets are found in a Runtime model.\n+ *\n+ */\n public class NewDataSetContentEvent {", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "272fa36f49151b086e7686875f76219e1874b1bb", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/NewDataSetContentEvent.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/NewDataSetContentEvent.java\nindex 0f45480c6..27bfff9fa 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/NewDataSetContentEvent.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/NewDataSetContentEvent.java\n\n@@ -20,18 +20,11 @@ import java.util.List;\n \n import org.dashbuilder.shared.model.DataSetContent;\n \n-/**\n- * Fired when new datasets are found in a Runtime model.\n- *\n- */\n public class NewDataSetContentEvent {\n \n-    private String runtimeModelId;\n-    \n-    private List<DataSetContent> content;\n+    List<DataSetContent> content;\n \n-    public NewDataSetContentEvent(String runtimeModelId, List<DataSetContent> content) {\n-        this.runtimeModelId = runtimeModelId;\n+    public NewDataSetContentEvent(List<DataSetContent> content) {\n         this.content = content;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzMzIyNQ==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452833225", "bodyText": "If this event is @Portable then consider annotating these parameters with @MapsTo.\nSame applies here (*).", "author": "caponetto", "createdAt": "2020-07-10T13:11:06Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/NewDataSetContentEvent.java", "diffHunk": "@@ -20,16 +20,27 @@\n \n import org.dashbuilder.shared.model.DataSetContent;\n \n+/**\n+ * Fired when new datasets are found in a Runtime model.\n+ *\n+ */\n public class NewDataSetContentEvent {\n \n-    List<DataSetContent> content;\n+    private String runtimeModelId;\n+    \n+    private List<DataSetContent> content;\n \n-    public NewDataSetContentEvent(List<DataSetContent> content) {\n+    public NewDataSetContentEvent(String runtimeModelId, List<DataSetContent> content) {", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4NTExNA==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r453885114", "bodyText": "This should not go to client, if goes to client I will refactor it", "author": "jesuino", "createdAt": "2020-07-13T19:35:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzMzIyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "272fa36f49151b086e7686875f76219e1874b1bb", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/NewDataSetContentEvent.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/NewDataSetContentEvent.java\nindex 0f45480c6..27bfff9fa 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/NewDataSetContentEvent.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/NewDataSetContentEvent.java\n\n@@ -20,18 +20,11 @@ import java.util.List;\n \n import org.dashbuilder.shared.model.DataSetContent;\n \n-/**\n- * Fired when new datasets are found in a Runtime model.\n- *\n- */\n public class NewDataSetContentEvent {\n \n-    private String runtimeModelId;\n-    \n-    private List<DataSetContent> content;\n+    List<DataSetContent> content;\n \n-    public NewDataSetContentEvent(String runtimeModelId, List<DataSetContent> content) {\n-        this.runtimeModelId = runtimeModelId;\n+    public NewDataSetContentEvent(List<DataSetContent> content) {\n         this.content = content;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzNDA5OA==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452834098", "bodyText": "Suggested change", "author": "caponetto", "createdAt": "2020-07-10T13:12:42Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/RemovedRuntimeModelEvent.java", "diffHunk": "@@ -13,25 +13,29 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.dashbuilder.shared.event;\n \n-import org.dashbuilder.shared.model.RuntimeModel;\n import org.jboss.errai.common.client.api.annotations.MapsTo;\n \n /**\n- * Fired when runtime model is loaded\n+ * Fired when datasets are removed.\n  *\n  */\n-public class RuntimeModelEvent {\n+public class RemovedRuntimeModelEvent {\n \n-    RuntimeModel runtimeModel;\n+    /**\n+     * Removed runtime model IDs\n+     */\n+    String runtimeModelId;\n \n-    public RuntimeModelEvent(@MapsTo(\"runtimeModel\") RuntimeModel runtimeModel) {\n-        this.runtimeModel = runtimeModel;\n+    public RemovedRuntimeModelEvent(@MapsTo(\"id\") String id) {\n+        this.runtimeModelId = id;\n     }\n-\n-    public RuntimeModel getRuntimeModel() {\n-        return runtimeModel;\n+    ", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/RemovedRuntimeModelEvent.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/RemovedRuntimeModelEvent.java\nindex 08f3d3309..2f51cd138 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/RemovedRuntimeModelEvent.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/RemovedRuntimeModelEvent.java\n\n@@ -17,11 +17,13 @@\n package org.dashbuilder.shared.event;\n \n import org.jboss.errai.common.client.api.annotations.MapsTo;\n+import org.jboss.errai.common.client.api.annotations.Portable;\n \n /**\n  * Fired when datasets are removed.\n  *\n  */\n+@Portable\n public class RemovedRuntimeModelEvent {\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzNDY1Mg==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452834652", "bodyText": "(*)", "author": "caponetto", "createdAt": "2020-07-10T13:13:44Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/RemovedRuntimeModelEvent.java", "diffHunk": "@@ -13,25 +13,29 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4NTI1NA==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r453885254", "bodyText": "I made it portable, thanks!", "author": "jesuino", "createdAt": "2020-07-13T19:36:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzNDY1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/RemovedRuntimeModelEvent.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/RemovedRuntimeModelEvent.java\nindex 08f3d3309..2f51cd138 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/RemovedRuntimeModelEvent.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/event/RemovedRuntimeModelEvent.java\n\n@@ -17,11 +17,13 @@\n package org.dashbuilder.shared.event;\n \n import org.jboss.errai.common.client.api.annotations.MapsTo;\n+import org.jboss.errai.common.client.api.annotations.Portable;\n \n /**\n  * Fired when datasets are removed.\n  *\n  */\n+@Portable\n public class RemovedRuntimeModelEvent {\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzNTU0Ng==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452835546", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public RuntimeServiceResponse() {\n          \n          \n            \n                    // not used\n          \n          \n            \n                }", "author": "caponetto", "createdAt": "2020-07-10T13:15:28Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/model/RuntimeServiceResponse.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.shared.model;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jboss.errai.common.client.api.annotations.MapsTo;\n+\n+/**\n+ * Runtime Service response model object that contains any useful information for the client.\n+ */\n+public class RuntimeServiceResponse {\n+\n+    private DashbuilderRuntimeMode mode;\n+\n+    private Optional<RuntimeModel> runtimeModelOp;\n+\n+    private List<String> availableModels;\n+\n+    public RuntimeServiceResponse() {\n+        // not used\n+    }", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4NTk1NA==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r453885954", "bodyText": "If I remove this I have error with CDI and errai :(", "author": "jesuino", "createdAt": "2020-07-13T19:37:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzNTU0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/model/RuntimeServiceResponse.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/model/RuntimeServiceResponse.java\nindex 171add232..26616a592 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/model/RuntimeServiceResponse.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/model/RuntimeServiceResponse.java\n\n@@ -20,10 +20,12 @@ import java.util.List;\n import java.util.Optional;\n \n import org.jboss.errai.common.client.api.annotations.MapsTo;\n+import org.jboss.errai.common.client.api.annotations.Portable;\n \n /**\n  * Runtime Service response model object that contains any useful information for the client.\n  */\n+@Portable\n public class RuntimeServiceResponse {\n \n     private DashbuilderRuntimeMode mode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzNTg0NQ==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452835845", "bodyText": "Please annotate this class with @Portable.", "author": "caponetto", "createdAt": "2020-07-10T13:16:01Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/model/RuntimeServiceResponse.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.shared.model;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jboss.errai.common.client.api.annotations.MapsTo;\n+\n+/**\n+ * Runtime Service response model object that contains any useful information for the client.\n+ */\n+public class RuntimeServiceResponse {", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/model/RuntimeServiceResponse.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/model/RuntimeServiceResponse.java\nindex 171add232..26616a592 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/model/RuntimeServiceResponse.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/shared/model/RuntimeServiceResponse.java\n\n@@ -20,10 +20,12 @@ import java.util.List;\n import java.util.Optional;\n \n import org.jboss.errai.common.client.api.annotations.MapsTo;\n+import org.jboss.errai.common.client.api.annotations.Portable;\n \n /**\n  * Runtime Service response model object that contains any useful information for the client.\n  */\n+@Portable\n public class RuntimeServiceResponse {\n \n     private DashbuilderRuntimeMode mode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgzNzQ4OA==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452837488", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Before\n          \n          \n            \n                public void init() {}", "author": "caponetto", "createdAt": "2020-07-10T13:18:44Z", "path": "dashbuilder/dashbuilder-runtime/src/test/java/org/dashbuilder/backend/DataSetContentListenerTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.backend;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.dashbuilder.backend.services.dataset.RuntimeCSVFileStorage;\n+import org.dashbuilder.dataset.def.DataSetDef;\n+import org.dashbuilder.dataset.def.DataSetDefRegistry;\n+import org.dashbuilder.dataset.json.DataSetDefJSONMarshaller;\n+import org.dashbuilder.shared.event.NewDataSetContentEvent;\n+import org.dashbuilder.shared.event.RemovedRuntimeModelEvent;\n+import org.dashbuilder.shared.model.DataSetContent;\n+import org.dashbuilder.shared.model.DataSetContentType;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import static org.mockito.Matchers.matches;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DataSetContentListenerTest {\n+\n+    @Mock\n+    DataSetDefRegistry registry;\n+\n+    @Mock\n+    RuntimeCSVFileStorage storage;\n+\n+    @Mock\n+    DataSetDefJSONMarshaller defMarshaller;\n+\n+    @Mock\n+    Map<String, List<String>> runtimeModelDatasetContents;\n+\n+    @InjectMocks\n+    DataSetContentListener datasetContentListener;\n+\n+    @Before\n+    public void init() {}", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/test/java/org/dashbuilder/backend/DataSetContentListenerTest.java b/dashbuilder/dashbuilder-runtime/src/test/java/org/dashbuilder/backend/DataSetContentListenerTest.java\nindex 39b6a7725..495e7a691 100644\n--- a/dashbuilder/dashbuilder-runtime/src/test/java/org/dashbuilder/backend/DataSetContentListenerTest.java\n+++ b/dashbuilder/dashbuilder-runtime/src/test/java/org/dashbuilder/backend/DataSetContentListenerTest.java\n\n@@ -28,7 +28,6 @@ import org.dashbuilder.shared.event.NewDataSetContentEvent;\n import org.dashbuilder.shared.event.RemovedRuntimeModelEvent;\n import org.dashbuilder.shared.model.DataSetContent;\n import org.dashbuilder.shared.model.DataSetContentType;\n-import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.InjectMocks;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0OTIzNQ==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452849235", "bodyText": "This BusyIndicatorView does not seem to be used here anymore.", "author": "caponetto", "createdAt": "2020-07-10T13:38:57Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/view/UploadWidgetView.java", "diffHunk": "@@ -57,32 +60,18 @@\n     HTMLInputElement inputFile;\n \n     @Inject\n-    BusyIndicatorView loading;\n+    @DataField\n+    HTMLInputElement inputFileName;\n \n     @Inject\n     RuntimeCommunication runtimeCommunication;\n \n-    private UploadDashboardsScreen presenter;\n-\n-    @Override\n-    public HTMLElement getElement() {\n-        return emptyImport;\n-    }\n+    @Inject\n+    BusyIndicatorView loading;", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4Njg0OA==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r453886848", "bodyText": "It is used in loading/stopLoading which are called from the presenter when an uploading is happening", "author": "jesuino", "createdAt": "2020-07-13T19:39:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0OTIzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "272fa36f49151b086e7686875f76219e1874b1bb", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/view/UploadWidgetView.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/view/UploadDashboardsScreenView.java\nsimilarity index 78%\nrename from dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/view/UploadWidgetView.java\nrename to dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/view/UploadDashboardsScreenView.java\nindex caf54f9cd..9990d7b2f 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/view/UploadWidgetView.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/view/UploadDashboardsScreenView.java\n\n@@ -60,18 +57,32 @@ public class UploadWidgetView implements UploadWidget.View {\n     HTMLInputElement inputFile;\n \n     @Inject\n-    @DataField\n-    HTMLInputElement inputFileName;\n+    BusyIndicatorView loading;\n \n     @Inject\n     RuntimeCommunication runtimeCommunication;\n \n-    @Inject\n-    BusyIndicatorView loading;\n+    private UploadDashboardsScreen presenter;\n \n     @Override\n-    public void init(UploadWidget presenter) {\n+    public HTMLElement getElement() {\n+        return emptyImport;\n+    }\n+\n+    @Override\n+    public void init(UploadDashboardsScreen presenter) {\n         this.presenter = presenter;\n+\n+    }\n+\n+    @EventHandler(\"inputFile\")\n+    public void handleInputFileChange(ChangeEvent e) {\n+        presenter.submit(uploadForm);\n+    }\n+\n+    @EventHandler(\"btnImport\")\n+    public void handleImport(ClickEvent e) {\n+        inputFile.click();\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1MDI2NA==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452850264", "bodyText": "Consider moving this logic to the presenter.", "author": "caponetto", "createdAt": "2020-07-10T13:40:35Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/view/UploadWidgetView.java", "diffHunk": "@@ -104,4 +93,33 @@ public void badResponseUploading(Response response) {\n     public void errorDuringUpload(Object error) {\n         runtimeCommunication.showError(i18n.errorUploadingDashboards(), error);\n     }\n+\n+    @EventHandler(\"btnImport\")\n+    public void handleImport(ClickEvent e) {\n+        inputFile.click();\n+    }\n+\n+    @EventHandler(\"inputFile\")\n+    public void handleInputFileChange(ChangeEvent e) {\n+        inputFileName.value = retrieveFileName(inputFile.value);\n+        presenter.submit(uploadForm);\n+    }\n+\n+    private String retrieveFileName(String value) {\n+        int pos = 0;\n+        if (value.contains(\"\\\\\")) {\n+            pos = value.lastIndexOf(\"\\\\\");\n+        }\n+\n+        if (value.contains(\"/\")) {\n+            pos = value.lastIndexOf(\"/\");\n+        }\n+        return value.substring(pos + 1);\n+    }", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/view/UploadWidgetView.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/view/UploadWidgetView.java\nindex caf54f9cd..8152da28d 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/view/UploadWidgetView.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/view/UploadWidgetView.java\n\n@@ -101,22 +101,10 @@ public class UploadWidgetView implements UploadWidget.View {\n \n     @EventHandler(\"inputFile\")\n     public void handleInputFileChange(ChangeEvent e) {\n-        inputFileName.value = retrieveFileName(inputFile.value);\n+        inputFileName.value = presenter.retrieveFileName(inputFile.value);\n         presenter.submit(uploadForm);\n     }\n \n-    private String retrieveFileName(String value) {\n-        int pos = 0;\n-        if (value.contains(\"\\\\\")) {\n-            pos = value.lastIndexOf(\"\\\\\");\n-        }\n-\n-        if (value.contains(\"/\")) {\n-            pos = value.lastIndexOf(\"/\");\n-        }\n-        return value.substring(pos + 1);\n-    }\n-\n     @Override\n     public HTMLElement getElement() {\n         return uploadButtonContainer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1MDkyNg==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452850926", "bodyText": "Consider an else if here.", "author": "caponetto", "createdAt": "2020-07-10T13:41:37Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/view/UploadWidgetView.java", "diffHunk": "@@ -104,4 +93,33 @@ public void badResponseUploading(Response response) {\n     public void errorDuringUpload(Object error) {\n         runtimeCommunication.showError(i18n.errorUploadingDashboards(), error);\n     }\n+\n+    @EventHandler(\"btnImport\")\n+    public void handleImport(ClickEvent e) {\n+        inputFile.click();\n+    }\n+\n+    @EventHandler(\"inputFile\")\n+    public void handleInputFileChange(ChangeEvent e) {\n+        inputFileName.value = retrieveFileName(inputFile.value);\n+        presenter.submit(uploadForm);\n+    }\n+\n+    private String retrieveFileName(String value) {\n+        int pos = 0;\n+        if (value.contains(\"\\\\\")) {\n+            pos = value.lastIndexOf(\"\\\\\");\n+        }\n+\n+        if (value.contains(\"/\")) {", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/view/UploadWidgetView.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/view/UploadWidgetView.java\nindex caf54f9cd..8152da28d 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/view/UploadWidgetView.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/widgets/view/UploadWidgetView.java\n\n@@ -101,22 +101,10 @@ public class UploadWidgetView implements UploadWidget.View {\n \n     @EventHandler(\"inputFile\")\n     public void handleInputFileChange(ChangeEvent e) {\n-        inputFileName.value = retrieveFileName(inputFile.value);\n+        inputFileName.value = presenter.retrieveFileName(inputFile.value);\n         presenter.submit(uploadForm);\n     }\n \n-    private String retrieveFileName(String value) {\n-        int pos = 0;\n-        if (value.contains(\"\\\\\")) {\n-            pos = value.lastIndexOf(\"\\\\\");\n-        }\n-\n-        if (value.contains(\"/\")) {\n-            pos = value.lastIndexOf(\"/\");\n-        }\n-        return value.substring(pos + 1);\n-    }\n-\n     @Override\n     public HTMLElement getElement() {\n         return uploadButtonContainer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1MTczMA==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452851730", "bodyText": "Is it a TODO?", "author": "caponetto", "createdAt": "2020-07-10T13:42:56Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RouterScreen.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.screens;\n+\n+import java.util.Optional;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.core.client.GWT;\n+import elemental2.dom.DomGlobal;\n+import org.dashbuilder.client.RuntimeClientLoader;\n+import org.dashbuilder.client.RuntimeCommunication;\n+import org.dashbuilder.client.navbar.AppNavBar;\n+import org.dashbuilder.client.perspective.DashboardsListPerspective;\n+import org.dashbuilder.client.perspective.EmptyPerspective;\n+import org.dashbuilder.client.perspective.RuntimePerspective;\n+import org.dashbuilder.client.resources.i18n.AppConstants;\n+import org.dashbuilder.shared.model.DashbuilderRuntimeMode;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.model.RuntimeServiceResponse;\n+import org.uberfire.client.annotations.WorkbenchPartTitle;\n+import org.uberfire.client.annotations.WorkbenchPartView;\n+import org.uberfire.client.annotations.WorkbenchScreen;\n+import org.uberfire.client.mvp.PlaceManager;\n+import org.uberfire.client.mvp.UberElemental;\n+import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n+import org.uberfire.lifecycle.OnOpen;\n+\n+/**\n+ * \n+ * Responsible for handling screens transition and communication. No view for this screen is required.\n+ * \n+ */\n+@ApplicationScoped\n+@WorkbenchScreen(identifier = RouterScreen.ID)\n+public class RouterScreen {\n+\n+    public static final String ID = \"RouterScreen\";\n+\n+    private static AppConstants i18n = AppConstants.INSTANCE;\n+\n+    public interface View extends UberElemental<RouterScreen> {\n+\n+    }\n+\n+    @Inject\n+    RuntimeClientLoader clientLoader;\n+\n+    @Inject\n+    RuntimeScreen runtimeScreen;\n+\n+    @Inject\n+    DashboardsListScreen dashboardsListScreen;\n+\n+    @Inject\n+    RuntimeCommunication runtimeCommunication;\n+\n+    @Inject\n+    BusyIndicatorView loading;\n+\n+    @Inject\n+    PlaceManager placeManager;\n+\n+    @Inject\n+    AppNavBar appNavBar;\n+\n+    @Inject\n+    View view;\n+\n+    @WorkbenchPartTitle\n+    public String title() {\n+        return i18n.routerScreenTitle();\n+\n+    }\n+\n+    @WorkbenchPartView\n+    public View view() {\n+        return view;\n+    }\n+\n+    @OnOpen\n+    public void onOpen() {\n+        doRoute();\n+    }\n+\n+    public void doRoute() {\n+        loading.showBusyIndicator(i18n.loadingDashboards());\n+        clientLoader.load(response -> {\n+            loading.hideBusyIndicator();\n+            route(response);\n+        }, (a, throwable) -> {\n+            loading.hideBusyIndicator();\n+            // Error screen?", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4ODAxOA==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r453888018", "bodyText": "Yes, it was, I gave up an error screen :P", "author": "jesuino", "createdAt": "2020-07-13T19:41:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1MTczMA=="}], "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RouterScreen.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RouterScreen.java\nindex fb90ec81e..45e400c89 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RouterScreen.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RouterScreen.java\n\n@@ -70,9 +70,6 @@ public class RouterScreen {\n     @Inject\n     RuntimeCommunication runtimeCommunication;\n \n-    @Inject\n-    BusyIndicatorView loading;\n-\n     @Inject\n     PlaceManager placeManager;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1MjY0Mg==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452852642", "bodyText": "Suggested change", "author": "caponetto", "createdAt": "2020-07-10T13:44:34Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RouterScreen.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.screens;\n+\n+import java.util.Optional;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.core.client.GWT;\n+import elemental2.dom.DomGlobal;\n+import org.dashbuilder.client.RuntimeClientLoader;\n+import org.dashbuilder.client.RuntimeCommunication;\n+import org.dashbuilder.client.navbar.AppNavBar;\n+import org.dashbuilder.client.perspective.DashboardsListPerspective;\n+import org.dashbuilder.client.perspective.EmptyPerspective;\n+import org.dashbuilder.client.perspective.RuntimePerspective;\n+import org.dashbuilder.client.resources.i18n.AppConstants;\n+import org.dashbuilder.shared.model.DashbuilderRuntimeMode;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.model.RuntimeServiceResponse;\n+import org.uberfire.client.annotations.WorkbenchPartTitle;\n+import org.uberfire.client.annotations.WorkbenchPartView;\n+import org.uberfire.client.annotations.WorkbenchScreen;\n+import org.uberfire.client.mvp.PlaceManager;\n+import org.uberfire.client.mvp.UberElemental;\n+import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n+import org.uberfire.lifecycle.OnOpen;\n+\n+/**\n+ * \n+ * Responsible for handling screens transition and communication. No view for this screen is required.\n+ * \n+ */\n+@ApplicationScoped\n+@WorkbenchScreen(identifier = RouterScreen.ID)\n+public class RouterScreen {\n+\n+    public static final String ID = \"RouterScreen\";\n+\n+    private static AppConstants i18n = AppConstants.INSTANCE;\n+\n+    public interface View extends UberElemental<RouterScreen> {\n+\n+    }\n+\n+    @Inject\n+    RuntimeClientLoader clientLoader;\n+\n+    @Inject\n+    RuntimeScreen runtimeScreen;\n+\n+    @Inject\n+    DashboardsListScreen dashboardsListScreen;\n+\n+    @Inject\n+    RuntimeCommunication runtimeCommunication;\n+\n+    @Inject\n+    BusyIndicatorView loading;\n+\n+    @Inject\n+    PlaceManager placeManager;\n+\n+    @Inject\n+    AppNavBar appNavBar;\n+\n+    @Inject\n+    View view;\n+\n+    @WorkbenchPartTitle\n+    public String title() {\n+        return i18n.routerScreenTitle();\n+", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RouterScreen.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RouterScreen.java\nindex fb90ec81e..45e400c89 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RouterScreen.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RouterScreen.java\n\n@@ -70,9 +70,6 @@ public class RouterScreen {\n     @Inject\n     RuntimeCommunication runtimeCommunication;\n \n-    @Inject\n-    BusyIndicatorView loading;\n-\n     @Inject\n     PlaceManager placeManager;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1Mjg2MA==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452852860", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public View view() {\n          \n          \n            \n                public View getView() {", "author": "caponetto", "createdAt": "2020-07-10T13:45:01Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RouterScreen.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client.screens;\n+\n+import java.util.Optional;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.core.client.GWT;\n+import elemental2.dom.DomGlobal;\n+import org.dashbuilder.client.RuntimeClientLoader;\n+import org.dashbuilder.client.RuntimeCommunication;\n+import org.dashbuilder.client.navbar.AppNavBar;\n+import org.dashbuilder.client.perspective.DashboardsListPerspective;\n+import org.dashbuilder.client.perspective.EmptyPerspective;\n+import org.dashbuilder.client.perspective.RuntimePerspective;\n+import org.dashbuilder.client.resources.i18n.AppConstants;\n+import org.dashbuilder.shared.model.DashbuilderRuntimeMode;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.model.RuntimeServiceResponse;\n+import org.uberfire.client.annotations.WorkbenchPartTitle;\n+import org.uberfire.client.annotations.WorkbenchPartView;\n+import org.uberfire.client.annotations.WorkbenchScreen;\n+import org.uberfire.client.mvp.PlaceManager;\n+import org.uberfire.client.mvp.UberElemental;\n+import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n+import org.uberfire.lifecycle.OnOpen;\n+\n+/**\n+ * \n+ * Responsible for handling screens transition and communication. No view for this screen is required.\n+ * \n+ */\n+@ApplicationScoped\n+@WorkbenchScreen(identifier = RouterScreen.ID)\n+public class RouterScreen {\n+\n+    public static final String ID = \"RouterScreen\";\n+\n+    private static AppConstants i18n = AppConstants.INSTANCE;\n+\n+    public interface View extends UberElemental<RouterScreen> {\n+\n+    }\n+\n+    @Inject\n+    RuntimeClientLoader clientLoader;\n+\n+    @Inject\n+    RuntimeScreen runtimeScreen;\n+\n+    @Inject\n+    DashboardsListScreen dashboardsListScreen;\n+\n+    @Inject\n+    RuntimeCommunication runtimeCommunication;\n+\n+    @Inject\n+    BusyIndicatorView loading;\n+\n+    @Inject\n+    PlaceManager placeManager;\n+\n+    @Inject\n+    AppNavBar appNavBar;\n+\n+    @Inject\n+    View view;\n+\n+    @WorkbenchPartTitle\n+    public String title() {\n+        return i18n.routerScreenTitle();\n+\n+    }\n+\n+    @WorkbenchPartView\n+    public View view() {", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RouterScreen.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RouterScreen.java\nindex fb90ec81e..45e400c89 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RouterScreen.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/screens/RouterScreen.java\n\n@@ -70,9 +70,6 @@ public class RouterScreen {\n     @Inject\n     RuntimeCommunication runtimeCommunication;\n \n-    @Inject\n-    BusyIndicatorView loading;\n-\n     @Inject\n     PlaceManager placeManager;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MjI1Nw==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452892257", "bodyText": "Consider merging these two filter operations into a single one.", "author": "caponetto", "createdAt": "2020-07-10T14:50:08Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeModelLoader.java", "diffHunk": "@@ -48,7 +60,43 @@ private void doInitialImport() {\n \n         if (runtimeOptions.isMultipleImport() && !runtimeOptions.importFileLocation().isPresent()) {\n             runtimeModelRegistry.setMode(DashbuilderRuntimeMode.MULTIPLE_IMPORT);\n+            loadAvailableModels();\n+        }\n+    }\n+\n+    /**\n+     * Create, if do not exist, the base directory for runtime models\n+     */\n+    protected void createBaseDir() {\n+        java.nio.file.Path baseDirPath = Paths.get(runtimeOptions.getImportsBaseDir());\n+        if (!baseDirPath.toFile().exists()) {\n+            try {\n+                Files.createDirectory(baseDirPath);\n+            } catch (IOException e) {\n+                logger.debug(\"Error creating base directory for dashboards: {}\", baseDirPath, e);\n+                throw new RuntimeException(\"Base directory for dashboards could not be created: \" + baseDirPath, e);\n+            }\n+        } else {\n+            logger.info(\"Base directory for dashboards already exist: {}\", runtimeOptions.getImportsBaseDir());\n+        }\n+    }\n+\n+    protected void loadAvailableModels() {\n+        logger.info(\"Registering existing models\");\n+        try (Stream<java.nio.file.Path> walk = Files.walk(Paths.get(runtimeOptions.getImportsBaseDir()), 1)) {\n+            walk.filter(p -> p.toFile().isFile())\n+                .filter(p -> p.toString().toLowerCase().endsWith(DASHBOARD_EXTENSION))", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeModelLoader.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeModelLoader.java\nindex 0287188f6..be56a24fe 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeModelLoader.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeModelLoader.java\n\n@@ -84,16 +84,15 @@ public class RuntimeModelLoader {\n     protected void loadAvailableModels() {\n         logger.info(\"Registering existing models\");\n         try (Stream<java.nio.file.Path> walk = Files.walk(Paths.get(runtimeOptions.getImportsBaseDir()), 1)) {\n-            walk.filter(p -> p.toFile().isFile())\n-                .filter(p -> p.toString().toLowerCase().endsWith(DASHBOARD_EXTENSION))\n-                .map(p -> p.toString())\n+            walk.filter(p -> p.toFile().isFile() && p.toString().toLowerCase().endsWith(DASHBOARD_EXTENSION))\n+                .map(Object::toString)\n                 .peek(p -> logger.info(\"Registering {}\", p))\n-                .peek(runtimeModelRegistry::registerFile)\n-                .forEach(p -> logger.info(\"Sucessfully Registered {}\", p));\n+                .forEach(p -> {\n+                    runtimeModelRegistry.registerFile(p);\n+                    logger.info(\"Sucessfully Registered {}\", p);\n+                });\n \n         } catch (Exception e) {\n-            logger.info(\"Error Registering existing models\");\n-            logger.debug(\"Error Registering existing models.\", e);\n             throw new RuntimeException(\"Error registering existing models.\", e);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5NDEyOQ==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452894129", "bodyText": "These logs are redundant since you're throwing a RuntimeException. The exception will be logged anyway.", "author": "caponetto", "createdAt": "2020-07-10T14:53:07Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeModelLoader.java", "diffHunk": "@@ -48,7 +60,43 @@ private void doInitialImport() {\n \n         if (runtimeOptions.isMultipleImport() && !runtimeOptions.importFileLocation().isPresent()) {\n             runtimeModelRegistry.setMode(DashbuilderRuntimeMode.MULTIPLE_IMPORT);\n+            loadAvailableModels();\n+        }\n+    }\n+\n+    /**\n+     * Create, if do not exist, the base directory for runtime models\n+     */\n+    protected void createBaseDir() {\n+        java.nio.file.Path baseDirPath = Paths.get(runtimeOptions.getImportsBaseDir());\n+        if (!baseDirPath.toFile().exists()) {\n+            try {\n+                Files.createDirectory(baseDirPath);\n+            } catch (IOException e) {\n+                logger.debug(\"Error creating base directory for dashboards: {}\", baseDirPath, e);\n+                throw new RuntimeException(\"Base directory for dashboards could not be created: \" + baseDirPath, e);\n+            }\n+        } else {\n+            logger.info(\"Base directory for dashboards already exist: {}\", runtimeOptions.getImportsBaseDir());\n+        }\n+    }\n+\n+    protected void loadAvailableModels() {\n+        logger.info(\"Registering existing models\");\n+        try (Stream<java.nio.file.Path> walk = Files.walk(Paths.get(runtimeOptions.getImportsBaseDir()), 1)) {\n+            walk.filter(p -> p.toFile().isFile())\n+                .filter(p -> p.toString().toLowerCase().endsWith(DASHBOARD_EXTENSION))\n+                .map(p -> p.toString())\n+                .peek(p -> logger.info(\"Registering {}\", p))\n+                .peek(runtimeModelRegistry::registerFile)\n+                .forEach(p -> logger.info(\"Sucessfully Registered {}\", p));\n+\n+        } catch (Exception e) {\n+            logger.info(\"Error Registering existing models\");\n+            logger.debug(\"Error Registering existing models.\", e);", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeModelLoader.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeModelLoader.java\nindex 0287188f6..be56a24fe 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeModelLoader.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/RuntimeModelLoader.java\n\n@@ -84,16 +84,15 @@ public class RuntimeModelLoader {\n     protected void loadAvailableModels() {\n         logger.info(\"Registering existing models\");\n         try (Stream<java.nio.file.Path> walk = Files.walk(Paths.get(runtimeOptions.getImportsBaseDir()), 1)) {\n-            walk.filter(p -> p.toFile().isFile())\n-                .filter(p -> p.toString().toLowerCase().endsWith(DASHBOARD_EXTENSION))\n-                .map(p -> p.toString())\n+            walk.filter(p -> p.toFile().isFile() && p.toString().toLowerCase().endsWith(DASHBOARD_EXTENSION))\n+                .map(Object::toString)\n                 .peek(p -> logger.info(\"Registering {}\", p))\n-                .peek(runtimeModelRegistry::registerFile)\n-                .forEach(p -> logger.info(\"Sucessfully Registered {}\", p));\n+                .forEach(p -> {\n+                    runtimeModelRegistry.registerFile(p);\n+                    logger.info(\"Sucessfully Registered {}\", p);\n+                });\n \n         } catch (Exception e) {\n-            logger.info(\"Error Registering existing models\");\n-            logger.debug(\"Error Registering existing models.\", e);\n             throw new RuntimeException(\"Error registering existing models.\", e);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkwMDc1NQ==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452900755", "bodyText": "It might be useful for users if the allowed size is appended into this message.", "author": "caponetto", "createdAt": "2020-07-10T15:03:51Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/resources/UploadResourceImpl.java", "diffHunk": "@@ -95,4 +90,53 @@ public Response uploadFile(@MultipartForm FileUploadModel form) throws IOExcepti\n         return Response.ok(newImportInfo.getK1()).build();\n     }\n \n+    /**\n+     * Reads the uploaded model bytes controlling the size and throwing exception when the size exceeds the allowed size.\n+     * @param fileData\n+     * @return\n+     */\n+    private void checkInputSize(byte[] bytes) {\n+        if (bytes.length > runtimeOptions.getUploadSize()) {\n+            logger.debug(\"Total size {} is greater than the allowed size {}\",\n+                         bytes.length,\n+                         runtimeOptions.getUploadSize());\n+            throw new WebApplicationException(\"Upload size is greater than the allowed size.\",", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/resources/UploadResourceImpl.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/resources/UploadResourceImpl.java\nindex bc3e75794..c3a203c0e 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/resources/UploadResourceImpl.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/resources/UploadResourceImpl.java\n\n@@ -100,7 +100,7 @@ public class UploadResourceImpl {\n             logger.debug(\"Total size {} is greater than the allowed size {}\",\n                          bytes.length,\n                          runtimeOptions.getUploadSize());\n-            throw new WebApplicationException(\"Upload size is greater than the allowed size.\",\n+            throw new WebApplicationException(\"Upload size is greater than the allowed size: \" + runtimeOptions.getUploadSize(),\n                                               Response.Status.BAD_REQUEST);\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkwNTA1OQ==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r452905059", "bodyText": "Can you merge these three filter operations into a single one?", "author": "caponetto", "createdAt": "2020-07-10T15:10:56Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/resources/UploadResourceImpl.java", "diffHunk": "@@ -95,4 +90,53 @@ public Response uploadFile(@MultipartForm FileUploadModel form) throws IOExcepti\n         return Response.ok(newImportInfo.getK1()).build();\n     }\n \n+    /**\n+     * Reads the uploaded model bytes controlling the size and throwing exception when the size exceeds the allowed size.\n+     * @param fileData\n+     * @return\n+     */\n+    private void checkInputSize(byte[] bytes) {\n+        if (bytes.length > runtimeOptions.getUploadSize()) {\n+            logger.debug(\"Total size {} is greater than the allowed size {}\",\n+                         bytes.length,\n+                         runtimeOptions.getUploadSize());\n+            throw new WebApplicationException(\"Upload size is greater than the allowed size.\",\n+                                              Response.Status.BAD_REQUEST);\n+        }\n+    }\n+\n+    /**\n+     * \n+     * If a file exists with a given size then probably it is a repeated.\n+     * \n+     * @param uploadSize\n+     * @return\n+     * @throws IOException \n+     */\n+    private Optional<String> checkForExistingFile(byte[] uploadedFile) throws IOException {\n+        try (Stream<java.nio.file.Path> walk = Files.walk(Paths.get(runtimeOptions.getImportsBaseDir()), 1)) {\n+            return walk\n+                       .filter(p -> p.toFile().isFile())\n+                       .filter(p -> p.toString().toLowerCase().endsWith(DASHBOARD_EXTENSION))\n+                       .filter(p -> isContentEquals(uploadedFile, p))", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/resources/UploadResourceImpl.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/resources/UploadResourceImpl.java\nindex bc3e75794..c3a203c0e 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/resources/UploadResourceImpl.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/resources/UploadResourceImpl.java\n\n@@ -100,7 +100,7 @@ public class UploadResourceImpl {\n             logger.debug(\"Total size {} is greater than the allowed size {}\",\n                          bytes.length,\n                          runtimeOptions.getUploadSize());\n-            throw new WebApplicationException(\"Upload size is greater than the allowed size.\",\n+            throw new WebApplicationException(\"Upload size is greater than the allowed size: \" + runtimeOptions.getUploadSize(),\n                                               Response.Status.BAD_REQUEST);\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU3MzgwMQ==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r453573801", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Stream<LayoutComponent> allComponentsStream(List<LayoutRow> row) {\n          \n          \n            \n                     return row.stream().flatMap(r -> r.getLayoutColumns().stream()).flatMap(cl -> { \n          \n          \n            \n                         return Stream.concat(cl.getLayoutComponents().stream(), allComponentsStream(cl.getRows())); \n          \n          \n            \n                     });\n          \n          \n            \n                }\n          \n          \n            \n                private Stream<LayoutComponent> allComponentsStream(List<LayoutRow> row) {\n          \n          \n            \n                    return row.stream()\n          \n          \n            \n                            .flatMap(r -> r.getLayoutColumns().stream())\n          \n          \n            \n                            .flatMap(cl -> Stream.concat(cl.getLayoutComponents().stream(),\n          \n          \n            \n                                                         allComponentsStream(cl.getRows())));\n          \n          \n            \n                }", "author": "caponetto", "createdAt": "2020-07-13T11:09:46Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/impl/RuntimeModelParserImpl.java", "diffHunk": "@@ -135,4 +157,27 @@ private String nextEntryContent(final ZipInputStream zis) {\n \n     }\n \n+    private void setLayoutTemplateRuntimeModelId(String modelId, LayoutTemplate lt) {\n+       allComponentsStream(lt.getRows())\n+          .filter(lc -> lc.getProperties().get(\"json\") != null)\n+          .forEach(lc -> {\n+              String json = lc.getProperties().get(\"json\");\n+              DisplayerSettings settings = displayerSettingsMarshaller.fromJsonString(json);\n+              DataSetLookup dataSetLookup = settings.getDataSetLookup();\n+              String newId = transformId(modelId, dataSetLookup.getDataSetUUID());\n+              dataSetLookup.setDataSetUUID(newId);\n+              lc.getProperties().put(\"json\", displayerSettingsMarshaller.toJsonString(settings));\n+          });\n+    }\n+    \n+    private Stream<LayoutComponent> allComponentsStream(List<LayoutRow> row) {\n+         return row.stream().flatMap(r -> r.getLayoutColumns().stream()).flatMap(cl -> { \n+             return Stream.concat(cl.getLayoutComponents().stream(), allComponentsStream(cl.getRows())); \n+         });\n+    }", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/impl/RuntimeModelParserImpl.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/impl/RuntimeModelParserImpl.java\nindex 930585ef0..0c78f1f55 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/impl/RuntimeModelParserImpl.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/backend/services/impl/RuntimeModelParserImpl.java\n\n@@ -158,26 +158,27 @@ public class RuntimeModelParserImpl implements RuntimeModelParser {\n     }\n \n     private void setLayoutTemplateRuntimeModelId(String modelId, LayoutTemplate lt) {\n-       allComponentsStream(lt.getRows())\n-          .filter(lc -> lc.getProperties().get(\"json\") != null)\n-          .forEach(lc -> {\n-              String json = lc.getProperties().get(\"json\");\n-              DisplayerSettings settings = displayerSettingsMarshaller.fromJsonString(json);\n-              DataSetLookup dataSetLookup = settings.getDataSetLookup();\n-              String newId = transformId(modelId, dataSetLookup.getDataSetUUID());\n-              dataSetLookup.setDataSetUUID(newId);\n-              lc.getProperties().put(\"json\", displayerSettingsMarshaller.toJsonString(settings));\n-          });\n+        allComponentsStream(lt.getRows())\n+                                         .filter(lc -> lc.getProperties().get(\"json\") != null)\n+                                         .forEach(lc -> {\n+                                             String json = lc.getProperties().get(\"json\");\n+                                             DisplayerSettings settings = displayerSettingsMarshaller.fromJsonString(json);\n+                                             DataSetLookup dataSetLookup = settings.getDataSetLookup();\n+                                             String newId = transformId(modelId, dataSetLookup.getDataSetUUID());\n+                                             dataSetLookup.setDataSetUUID(newId);\n+                                             lc.getProperties().put(\"json\", displayerSettingsMarshaller.toJsonString(settings));\n+                                         });\n     }\n-    \n+\n     private Stream<LayoutComponent> allComponentsStream(List<LayoutRow> row) {\n-         return row.stream().flatMap(r -> r.getLayoutColumns().stream()).flatMap(cl -> { \n-             return Stream.concat(cl.getLayoutComponents().stream(), allComponentsStream(cl.getRows())); \n-         });\n+        return row.stream()\n+                  .flatMap(r -> r.getLayoutColumns().stream())\n+                  .flatMap(cl -> Stream.concat(cl.getLayoutComponents().stream(),\n+                                               allComponentsStream(cl.getRows())));\n     }\n \n     protected String transformId(String modelId, String id) {\n-        return id + \"|RuntimeModel=\" + modelId;\n+        return id + \"| RuntimeModel=\" + modelId;\n     }\n-    \n+\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4NDYyMw==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r453584623", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public RuntimeClientLoader() {\n          \n          \n            \n                    // do nothing\n          \n          \n            \n                }", "author": "caponetto", "createdAt": "2020-07-13T11:31:21Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client;\n+\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.Window;\n+import org.dashbuilder.client.navigation.NavigationManager;\n+import org.dashbuilder.client.perspective.generator.RuntimePerspectiveGenerator;\n+import org.dashbuilder.client.plugins.RuntimePerspectivePluginManager;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.model.RuntimeServiceResponse;\n+import org.dashbuilder.shared.service.RuntimeModelService;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.mvp.Command;\n+\n+@ApplicationScoped\n+public class RuntimeClientLoader {\n+\n+    public static final String IMPORT_ID_PARAM = \"import\";\n+\n+    private Caller<RuntimeModelService> runtimeModelServiceCaller;\n+\n+    RuntimePerspectiveGenerator perspectiveEditorGenerator;\n+\n+    RuntimePerspectivePluginManager runtimePerspectivePluginManager;\n+\n+    NavigationManager navigationManager;\n+\n+    public RuntimeClientLoader() {\n+        // do nothing\n+    }", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg5MDk4Ng==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r453890986", "bodyText": "Usually Errai complains when there's no default constructor", "author": "jesuino", "createdAt": "2020-07-13T19:47:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4NDYyMw=="}], "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java\nindex 341fb5e2f..75211b6e7 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java\n\n@@ -27,15 +27,19 @@ import com.google.gwt.user.client.Window;\n import org.dashbuilder.client.navigation.NavigationManager;\n import org.dashbuilder.client.perspective.generator.RuntimePerspectiveGenerator;\n import org.dashbuilder.client.plugins.RuntimePerspectivePluginManager;\n+import org.dashbuilder.client.resources.i18n.AppConstants;\n import org.dashbuilder.shared.model.RuntimeModel;\n import org.dashbuilder.shared.model.RuntimeServiceResponse;\n import org.dashbuilder.shared.service.RuntimeModelService;\n import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n import org.uberfire.mvp.Command;\n \n @ApplicationScoped\n public class RuntimeClientLoader {\n \n+    private static AppConstants i18n = AppConstants.INSTANCE;\n+\n     public static final String IMPORT_ID_PARAM = \"import\";\n \n     private Caller<RuntimeModelService> runtimeModelServiceCaller;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4NTkyMw==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r453585923", "bodyText": "Consider adding a BusyIndicatorView for this call.", "author": "caponetto", "createdAt": "2020-07-13T11:33:57Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client;\n+\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.Window;\n+import org.dashbuilder.client.navigation.NavigationManager;\n+import org.dashbuilder.client.perspective.generator.RuntimePerspectiveGenerator;\n+import org.dashbuilder.client.plugins.RuntimePerspectivePluginManager;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.model.RuntimeServiceResponse;\n+import org.dashbuilder.shared.service.RuntimeModelService;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.mvp.Command;\n+\n+@ApplicationScoped\n+public class RuntimeClientLoader {\n+\n+    public static final String IMPORT_ID_PARAM = \"import\";\n+\n+    private Caller<RuntimeModelService> runtimeModelServiceCaller;\n+\n+    RuntimePerspectiveGenerator perspectiveEditorGenerator;\n+\n+    RuntimePerspectivePluginManager runtimePerspectivePluginManager;\n+\n+    NavigationManager navigationManager;\n+\n+    public RuntimeClientLoader() {\n+        // do nothing\n+    }\n+\n+    @Inject\n+    public RuntimeClientLoader(Caller<RuntimeModelService> importModelServiceCaller,\n+                               RuntimePerspectiveGenerator perspectiveEditorGenerator,\n+                               RuntimePerspectivePluginManager runtimePerspectivePluginManager,\n+                               NavigationManager navigationManager) {\n+        this.runtimeModelServiceCaller = importModelServiceCaller;\n+        this.perspectiveEditorGenerator = perspectiveEditorGenerator;\n+        this.runtimePerspectivePluginManager = runtimePerspectivePluginManager;\n+        this.navigationManager = navigationManager;\n+    }\n+\n+    public void load(Consumer<RuntimeServiceResponse> responseConsumer,\n+                     BiConsumer<Object, Throwable> error) {\n+        String importID = getImportId();\n+        runtimeModelServiceCaller.call((RuntimeServiceResponse response) -> {", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java\nindex 341fb5e2f..75211b6e7 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java\n\n@@ -27,15 +27,19 @@ import com.google.gwt.user.client.Window;\n import org.dashbuilder.client.navigation.NavigationManager;\n import org.dashbuilder.client.perspective.generator.RuntimePerspectiveGenerator;\n import org.dashbuilder.client.plugins.RuntimePerspectivePluginManager;\n+import org.dashbuilder.client.resources.i18n.AppConstants;\n import org.dashbuilder.shared.model.RuntimeModel;\n import org.dashbuilder.shared.model.RuntimeServiceResponse;\n import org.dashbuilder.shared.service.RuntimeModelService;\n import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n import org.uberfire.mvp.Command;\n \n @ApplicationScoped\n public class RuntimeClientLoader {\n \n+    private static AppConstants i18n = AppConstants.INSTANCE;\n+\n     public static final String IMPORT_ID_PARAM = \"import\";\n \n     private Caller<RuntimeModelService> runtimeModelServiceCaller;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4NjIxNQ==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r453586215", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public RuntimeClientLoader(Caller<RuntimeModelService> importModelServiceCaller,\n          \n          \n            \n                public RuntimeClientLoader(Caller<RuntimeModelService> runtimeModelServiceCaller,", "author": "caponetto", "createdAt": "2020-07-13T11:34:30Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client;\n+\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.Window;\n+import org.dashbuilder.client.navigation.NavigationManager;\n+import org.dashbuilder.client.perspective.generator.RuntimePerspectiveGenerator;\n+import org.dashbuilder.client.plugins.RuntimePerspectivePluginManager;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.model.RuntimeServiceResponse;\n+import org.dashbuilder.shared.service.RuntimeModelService;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.mvp.Command;\n+\n+@ApplicationScoped\n+public class RuntimeClientLoader {\n+\n+    public static final String IMPORT_ID_PARAM = \"import\";\n+\n+    private Caller<RuntimeModelService> runtimeModelServiceCaller;\n+\n+    RuntimePerspectiveGenerator perspectiveEditorGenerator;\n+\n+    RuntimePerspectivePluginManager runtimePerspectivePluginManager;\n+\n+    NavigationManager navigationManager;\n+\n+    public RuntimeClientLoader() {\n+        // do nothing\n+    }\n+\n+    @Inject\n+    public RuntimeClientLoader(Caller<RuntimeModelService> importModelServiceCaller,", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java\nindex 341fb5e2f..75211b6e7 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java\n\n@@ -27,15 +27,19 @@ import com.google.gwt.user.client.Window;\n import org.dashbuilder.client.navigation.NavigationManager;\n import org.dashbuilder.client.perspective.generator.RuntimePerspectiveGenerator;\n import org.dashbuilder.client.plugins.RuntimePerspectivePluginManager;\n+import org.dashbuilder.client.resources.i18n.AppConstants;\n import org.dashbuilder.shared.model.RuntimeModel;\n import org.dashbuilder.shared.model.RuntimeServiceResponse;\n import org.dashbuilder.shared.service.RuntimeModelService;\n import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n import org.uberfire.mvp.Command;\n \n @ApplicationScoped\n public class RuntimeClientLoader {\n \n+    private static AppConstants i18n = AppConstants.INSTANCE;\n+\n     public static final String IMPORT_ID_PARAM = \"import\";\n \n     private Caller<RuntimeModelService> runtimeModelServiceCaller;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4ODc4OQ==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r453588789", "bodyText": "Shouldn't we show some sort of feedback if ifPresent is false? For example, when importID is null.", "author": "caponetto", "createdAt": "2020-07-13T11:39:42Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client;\n+\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.Window;\n+import org.dashbuilder.client.navigation.NavigationManager;\n+import org.dashbuilder.client.perspective.generator.RuntimePerspectiveGenerator;\n+import org.dashbuilder.client.plugins.RuntimePerspectivePluginManager;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.model.RuntimeServiceResponse;\n+import org.dashbuilder.shared.service.RuntimeModelService;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.mvp.Command;\n+\n+@ApplicationScoped\n+public class RuntimeClientLoader {\n+\n+    public static final String IMPORT_ID_PARAM = \"import\";\n+\n+    private Caller<RuntimeModelService> runtimeModelServiceCaller;\n+\n+    RuntimePerspectiveGenerator perspectiveEditorGenerator;\n+\n+    RuntimePerspectivePluginManager runtimePerspectivePluginManager;\n+\n+    NavigationManager navigationManager;\n+\n+    public RuntimeClientLoader() {\n+        // do nothing\n+    }\n+\n+    @Inject\n+    public RuntimeClientLoader(Caller<RuntimeModelService> importModelServiceCaller,\n+                               RuntimePerspectiveGenerator perspectiveEditorGenerator,\n+                               RuntimePerspectivePluginManager runtimePerspectivePluginManager,\n+                               NavigationManager navigationManager) {\n+        this.runtimeModelServiceCaller = importModelServiceCaller;\n+        this.perspectiveEditorGenerator = perspectiveEditorGenerator;\n+        this.runtimePerspectivePluginManager = runtimePerspectivePluginManager;\n+        this.navigationManager = navigationManager;\n+    }\n+\n+    public void load(Consumer<RuntimeServiceResponse> responseConsumer,\n+                     BiConsumer<Object, Throwable> error) {\n+        String importID = getImportId();\n+        runtimeModelServiceCaller.call((RuntimeServiceResponse response) -> {\n+            response.getRuntimeModelOp().ifPresent(this::registerModel);", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkwMDQ5Nw==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r453900497", "bodyText": "If is not present then the caller will decide what to do, in this case it will route to the list dashboards or empty screen. The feedback is indeed the empty optional. But if there's a runtime model we must register it (perspectives and navigation) before responding", "author": "jesuino", "createdAt": "2020-07-13T20:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4ODc4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java\nindex 341fb5e2f..75211b6e7 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java\n\n@@ -27,15 +27,19 @@ import com.google.gwt.user.client.Window;\n import org.dashbuilder.client.navigation.NavigationManager;\n import org.dashbuilder.client.perspective.generator.RuntimePerspectiveGenerator;\n import org.dashbuilder.client.plugins.RuntimePerspectivePluginManager;\n+import org.dashbuilder.client.resources.i18n.AppConstants;\n import org.dashbuilder.shared.model.RuntimeModel;\n import org.dashbuilder.shared.model.RuntimeServiceResponse;\n import org.dashbuilder.shared.service.RuntimeModelService;\n import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n import org.uberfire.mvp.Command;\n \n @ApplicationScoped\n public class RuntimeClientLoader {\n \n+    private static AppConstants i18n = AppConstants.INSTANCE;\n+\n     public static final String IMPORT_ID_PARAM = \"import\";\n \n     private Caller<RuntimeModelService> runtimeModelServiceCaller;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4OTQwMg==", "url": "https://github.com/kiegroup/appformer/pull/995#discussion_r453589402", "bodyText": "Consider adding a BusyIndicatorView for this call.", "author": "caponetto", "createdAt": "2020-07-13T11:40:52Z", "path": "dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.dashbuilder.client;\n+\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.user.client.Window;\n+import org.dashbuilder.client.navigation.NavigationManager;\n+import org.dashbuilder.client.perspective.generator.RuntimePerspectiveGenerator;\n+import org.dashbuilder.client.plugins.RuntimePerspectivePluginManager;\n+import org.dashbuilder.shared.model.RuntimeModel;\n+import org.dashbuilder.shared.model.RuntimeServiceResponse;\n+import org.dashbuilder.shared.service.RuntimeModelService;\n+import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.mvp.Command;\n+\n+@ApplicationScoped\n+public class RuntimeClientLoader {\n+\n+    public static final String IMPORT_ID_PARAM = \"import\";\n+\n+    private Caller<RuntimeModelService> runtimeModelServiceCaller;\n+\n+    RuntimePerspectiveGenerator perspectiveEditorGenerator;\n+\n+    RuntimePerspectivePluginManager runtimePerspectivePluginManager;\n+\n+    NavigationManager navigationManager;\n+\n+    public RuntimeClientLoader() {\n+        // do nothing\n+    }\n+\n+    @Inject\n+    public RuntimeClientLoader(Caller<RuntimeModelService> importModelServiceCaller,\n+                               RuntimePerspectiveGenerator perspectiveEditorGenerator,\n+                               RuntimePerspectivePluginManager runtimePerspectivePluginManager,\n+                               NavigationManager navigationManager) {\n+        this.runtimeModelServiceCaller = importModelServiceCaller;\n+        this.perspectiveEditorGenerator = perspectiveEditorGenerator;\n+        this.runtimePerspectivePluginManager = runtimePerspectivePluginManager;\n+        this.navigationManager = navigationManager;\n+    }\n+\n+    public void load(Consumer<RuntimeServiceResponse> responseConsumer,\n+                     BiConsumer<Object, Throwable> error) {\n+        String importID = getImportId();\n+        runtimeModelServiceCaller.call((RuntimeServiceResponse response) -> {\n+            response.getRuntimeModelOp().ifPresent(this::registerModel);\n+            responseConsumer.accept(response);\n+        }, (msg, t) -> handleError(error, msg, t))\n+                                 .info(importID);\n+\n+    }\n+\n+    public void loadModel(Consumer<RuntimeModel> modelLoaded,\n+                          Command emptyModel,\n+                          BiConsumer<Object, Throwable> error) {\n+        String importID = getImportId();\n+        loadModel(importID, modelLoaded, emptyModel, error);\n+\n+    }\n+\n+    public void loadModel(String importId,\n+                          Consumer<RuntimeModel> modelLoaded,\n+                          Command emptyModel,\n+                          BiConsumer<Object, Throwable> error) {\n+        runtimeModelServiceCaller.call((Optional<RuntimeModel> runtimeModelOp) -> handleResponse(modelLoaded, emptyModel, runtimeModelOp),", "originalCommit": "39bf4dacb2f9bd1761c011b4e800f2a47b5892bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "chunk": "diff --git a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java\nindex 341fb5e2f..75211b6e7 100644\n--- a/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java\n+++ b/dashbuilder/dashbuilder-runtime/src/main/java/org/dashbuilder/client/RuntimeClientLoader.java\n\n@@ -27,15 +27,19 @@ import com.google.gwt.user.client.Window;\n import org.dashbuilder.client.navigation.NavigationManager;\n import org.dashbuilder.client.perspective.generator.RuntimePerspectiveGenerator;\n import org.dashbuilder.client.plugins.RuntimePerspectivePluginManager;\n+import org.dashbuilder.client.resources.i18n.AppConstants;\n import org.dashbuilder.shared.model.RuntimeModel;\n import org.dashbuilder.shared.model.RuntimeServiceResponse;\n import org.dashbuilder.shared.service.RuntimeModelService;\n import org.jboss.errai.common.client.api.Caller;\n+import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n import org.uberfire.mvp.Command;\n \n @ApplicationScoped\n public class RuntimeClientLoader {\n \n+    private static AppConstants i18n = AppConstants.INSTANCE;\n+\n     public static final String IMPORT_ID_PARAM = \"import\";\n \n     private Caller<RuntimeModelService> runtimeModelServiceCaller;\n"}}, {"oid": "e99c24c8bc4e95137cf410f860124ecbc106c0f0", "url": "https://github.com/kiegroup/appformer/commit/e99c24c8bc4e95137cf410f860124ecbc106c0f0", "message": "review response and small improvements", "committedDate": "2020-07-13T22:22:38Z", "type": "forcePushed"}, {"oid": "a724b77f23e0b0eb2ea273856e6a6e8cf440a44c", "url": "https://github.com/kiegroup/appformer/commit/a724b77f23e0b0eb2ea273856e6a6e8cf440a44c", "message": "Changing model import behaviour", "committedDate": "2020-07-27T17:32:36Z", "type": "forcePushed"}, {"oid": "272fa36f49151b086e7686875f76219e1874b1bb", "url": "https://github.com/kiegroup/appformer/commit/272fa36f49151b086e7686875f76219e1874b1bb", "message": "AF-2550: Avoid dataset collision when using multi mode", "committedDate": "2020-07-29T15:59:56Z", "type": "commit"}, {"oid": "d4d1810f69b8a858472daecb31703a6f88b12e55", "url": "https://github.com/kiegroup/appformer/commit/d4d1810f69b8a858472daecb31703a6f88b12e55", "message": "AF-2549: Support for multi dashboards mode", "committedDate": "2020-07-29T15:59:56Z", "type": "commit"}, {"oid": "78e9cad44d87cdc49842cb620069835f10e22378", "url": "https://github.com/kiegroup/appformer/commit/78e9cad44d87cdc49842cb620069835f10e22378", "message": "AF-2551: List available dashboards in multi mode", "committedDate": "2020-07-29T15:59:56Z", "type": "commit"}, {"oid": "86b4f9d51ab336d69d43a1c6d86b136468053377", "url": "https://github.com/kiegroup/appformer/commit/86b4f9d51ab336d69d43a1c6d86b136468053377", "message": "Increasing test coverage", "committedDate": "2020-07-29T15:59:56Z", "type": "commit"}, {"oid": "82e8163dd5cc6cfd0108b467cec02126ff197a9e", "url": "https://github.com/kiegroup/appformer/commit/82e8163dd5cc6cfd0108b467cec02126ff197a9e", "message": "review response and small improvements", "committedDate": "2020-07-29T16:01:14Z", "type": "commit"}, {"oid": "2043b12bcbf6db7288140811c3564f25850e17dc", "url": "https://github.com/kiegroup/appformer/commit/2043b12bcbf6db7288140811c3564f25850e17dc", "message": "Improvements", "committedDate": "2020-07-29T16:01:22Z", "type": "commit"}, {"oid": "c7f9a15f0a3f3ad209ca3713fe00431e6fafb654", "url": "https://github.com/kiegroup/appformer/commit/c7f9a15f0a3f3ad209ca3713fe00431e6fafb654", "message": "Changing model import behaviour", "committedDate": "2020-07-29T16:01:22Z", "type": "commit"}, {"oid": "80925a8f130f0b8e034a55223b20b8073ac553c4", "url": "https://github.com/kiegroup/appformer/commit/80925a8f130f0b8e034a55223b20b8073ac553c4", "message": "fix: dataset partition and redirect in single mode", "committedDate": "2020-07-29T16:01:22Z", "type": "commit"}, {"oid": "d56c5ddff95630d582c2cf64dd3c15ad33a008b5", "url": "https://github.com/kiegroup/appformer/commit/d56c5ddff95630d582c2cf64dd3c15ad33a008b5", "message": "Removing unused import", "committedDate": "2020-07-29T16:01:22Z", "type": "commit"}, {"oid": "d56c5ddff95630d582c2cf64dd3c15ad33a008b5", "url": "https://github.com/kiegroup/appformer/commit/d56c5ddff95630d582c2cf64dd3c15ad33a008b5", "message": "Removing unused import", "committedDate": "2020-07-29T16:01:22Z", "type": "forcePushed"}]}