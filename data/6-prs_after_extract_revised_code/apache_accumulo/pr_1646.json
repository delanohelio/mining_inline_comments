{"pr_number": 1646, "pr_title": "fixes #1644: minor compaction retry", "pr_createdAt": "2020-06-30T18:35:24Z", "pr_url": "https://github.com/apache/accumulo/pull/1646", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxNjIzNQ==", "url": "https://github.com/apache/accumulo/pull/1646#discussion_r447916235", "bodyText": "We typically try to either log an error or throw, not both.  Instead of halting in MinorCompactor, we may want halt here in Tablet where we catch Exception or Error.  That code currently does not catch Throwable.", "author": "milleruntime", "createdAt": "2020-06-30T19:06:12Z", "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/MinorCompactor.java", "diffHunk": "@@ -148,6 +149,13 @@ public CompactionStats call() {\n           reportedProblem = true;\n         } catch (CompactionCanceledException e) {\n           throw new IllegalStateException(e);\n+        } catch (Throwable t) {\n+          // This is an unexpected situation which is critical. If we cannot minor compact\n+          // then this tablet will eventually become unusable if we are still ingesting data.\n+          log.error(\"MinC failed ({}).  Aborting.\", t.getMessage(), t);\n+          // TODO: Should we simply unload this tablet instead?\n+          Halt.halt(\"Unexpected MinC failure: \" + t.getMessage(), 2);\n+          throw t;", "originalCommit": "2770957370cf4276e2e2930fb1921a5cd14d6e3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkzNzg0MQ==", "url": "https://github.com/apache/accumulo/pull/1646#discussion_r447937841", "bodyText": "Good call.  I will move the halt logic.  The question still remains whether halting is the appropriate action here.  I could try unloading the tablet instead.....", "author": "ivakegg", "createdAt": "2020-06-30T19:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxNjIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MDA0Ng==", "url": "https://github.com/apache/accumulo/pull/1646#discussion_r447940046", "bodyText": "Looking closer that might not work because of the IllegalStateException thrown when the minor compaction is cancelled....", "author": "ivakegg", "createdAt": "2020-06-30T19:51:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxNjIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMzEzMQ==", "url": "https://github.com/apache/accumulo/pull/1646#discussion_r448403131", "bodyText": "Following the stack further up, we are already catching Throwable here in MinorCompactionTask.  So if we decide to do anything to the tablet, I think that would be the best place since that method is already operating on the tablet object.  The finally in that try will set the minorCompactionState so one option would be to add another state to the enum in Tablet to indicate failed state.  I don't know what all this state is used for but it may be less complicated than unloading the Tablet and less problematic than halting the tserver.", "author": "milleruntime", "createdAt": "2020-07-01T14:28:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxNjIzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9f32d087e1bc6ace1baf36766d42b37338cde916", "chunk": "diff --git a/server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/MinorCompactor.java b/server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/MinorCompactor.java\nindex 889164d12b..c7d040fbcc 100644\n--- a/server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/MinorCompactor.java\n+++ b/server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/MinorCompactor.java\n\n@@ -149,13 +148,6 @@ public class MinorCompactor extends Compactor {\n           reportedProblem = true;\n         } catch (CompactionCanceledException e) {\n           throw new IllegalStateException(e);\n-        } catch (Throwable t) {\n-          // This is an unexpected situation which is critical. If we cannot minor compact\n-          // then this tablet will eventually become unusable if we are still ingesting data.\n-          log.error(\"MinC failed ({}).  Aborting.\", t.getMessage(), t);\n-          // TODO: Should we simply unload this tablet instead?\n-          Halt.halt(\"Unexpected MinC failure: \" + t.getMessage(), 2);\n-          throw t;\n         }\n \n         Random random = new Random();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4MzM5Mg==", "url": "https://github.com/apache/accumulo/pull/1646#discussion_r447983392", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Throwable t) {\n          \n          \n            \n                    } catch (Error t) {\n          \n      \n    \n    \n  \n\nCatching throwable will mask checked exceptions in future code changes.  For example if the checked exceptions on a method called here are changed, and those checked exceptions should be handled.. then catching Throwable would hide the need to handle those.", "author": "keith-turner", "createdAt": "2020-06-30T21:15:04Z", "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/MinorCompactor.java", "diffHunk": "@@ -148,6 +149,13 @@ public CompactionStats call() {\n           reportedProblem = true;\n         } catch (CompactionCanceledException e) {\n           throw new IllegalStateException(e);\n+        } catch (Throwable t) {", "originalCommit": "2770957370cf4276e2e2930fb1921a5cd14d6e3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMzI3MQ==", "url": "https://github.com/apache/accumulo/pull/1646#discussion_r448313271", "bodyText": "Throwable was intentional, but reducing it to an Error would be fine I guess.  My take was if a \"checked\" exception is thrown down the road that is not actually caught, then the system will end up in the same defunct state.", "author": "ivakegg", "createdAt": "2020-07-01T11:58:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4MzM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQzMjAxNg==", "url": "https://github.com/apache/accumulo/pull/1646#discussion_r448432016", "bodyText": "I was just thinking if this code catches Error and and a checked exception is added elsewhere then this code will not compile the developer will have to decided what to do.", "author": "keith-turner", "createdAt": "2020-07-01T15:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4MzM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ2ODU4Nw==", "url": "https://github.com/apache/accumulo/pull/1646#discussion_r448468587", "bodyText": "Now I am thinking that a Halt just does not feel right, and I fear that given the appropriate circumstances could result in a cascade of tserver deaths.  I am reworking this to retry failed minor compactions in the thread that triggers minor compactions.", "author": "ivakegg", "createdAt": "2020-07-01T16:08:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4MzM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ2OTg1MQ==", "url": "https://github.com/apache/accumulo/pull/1646#discussion_r448469851", "bodyText": "@keith-turner @milleruntime Please let me know what you think about this approach: compactions that do not successfully completed get marked as failed, and then the minor compaction initiator thread will pick those up and rerun them.  Thoughts?  I committed what I think will do this but I need to create some tests.  I also changed this to a draft pull request until we can solidify what is the best way to handle this.  It could be that all of these changes go away and I simply catch the NoClassDefFoundError and call it a day.", "author": "ivakegg", "createdAt": "2020-07-01T16:10:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4MzM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ5OTg4NQ==", "url": "https://github.com/apache/accumulo/pull/1646#discussion_r448499885", "bodyText": "Now I am thinking that a Halt just does not feel right, and I fear that given the appropriate circumstances could result in a cascade of tserver deaths.\n\nThat could happen.  Part of the problem is that some errors are benign and others are likely an indication of a catastrophe.  Maybe configuration is the best option, could have three configuration items.\n\nConfigurable list of errors to retry on.\nConfigurable list of errors to halt on.\nAction to take for errors that fall in neither list : hang, retry, halt.\n\nThis would allow when a new error is encountered like in #1644 that the error class could just be added to config for retry.\n\nIt could be that all of these changes go away and I simply catch the NoClassDefFoundError and call it a day.\n\nMaybe a follow on issue would be best.  I feel like this is a wider issue, because any thread could encounter an error and having a single mechanism for handling unexpected errors in server processes seems useful.\nI am also wondering if emitting metrics for errors would be useful.  If the cardinality is deemed low enough, could emit metrics for each error class name.  Then in the metrics system could see when a tserver has an out of memory error.  This would be a follow on issue if it seems like something that might be useful.", "author": "keith-turner", "createdAt": "2020-07-01T17:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4MzM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3MzU4OA==", "url": "https://github.com/apache/accumulo/pull/1646#discussion_r448573588", "bodyText": "Maybe a follow on issue would be best. I feel like this is a wider issue, because any thread could encounter an error and having a single mechanism for handling unexpected errors in server processes seems useful.\n\nI agree.  I think since its clear that we need to retry flushes on the NoClassDefFoundError that should be fixed here, with anything further being follow on work.", "author": "milleruntime", "createdAt": "2020-07-01T19:32:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4MzM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4MDY4Mw==", "url": "https://github.com/apache/accumulo/pull/1646#discussion_r448580683", "bodyText": "Thank you for your observations.  I will take out all of the retry stuff and simply handle the condition that this ticket warrants.  A more general and generic way of handling critical thread failures is needed if we want.  This one was kind of weird given the TabletMemory holds onto the memory being compacted at the same time a new memory block is used ongoing mutations so there are multiple states to handle at the same time.", "author": "ivakegg", "createdAt": "2020-07-01T19:47:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4MzM5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9f32d087e1bc6ace1baf36766d42b37338cde916", "chunk": "diff --git a/server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/MinorCompactor.java b/server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/MinorCompactor.java\nindex 889164d12b..c7d040fbcc 100644\n--- a/server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/MinorCompactor.java\n+++ b/server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/MinorCompactor.java\n\n@@ -149,13 +148,6 @@ public class MinorCompactor extends Compactor {\n           reportedProblem = true;\n         } catch (CompactionCanceledException e) {\n           throw new IllegalStateException(e);\n-        } catch (Throwable t) {\n-          // This is an unexpected situation which is critical. If we cannot minor compact\n-          // then this tablet will eventually become unusable if we are still ingesting data.\n-          log.error(\"MinC failed ({}).  Aborting.\", t.getMessage(), t);\n-          // TODO: Should we simply unload this tablet instead?\n-          Halt.halt(\"Unexpected MinC failure: \" + t.getMessage(), 2);\n-          throw t;\n         }\n \n         Random random = new Random();\n"}}, {"oid": "9f32d087e1bc6ace1baf36766d42b37338cde916", "url": "https://github.com/apache/accumulo/commit/9f32d087e1bc6ace1baf36766d42b37338cde916", "message": "fixes #1644: minor compaction retry\n* Updated the minor compaction to gracefully handle temporary VFS class loader issues while minor compacting", "committedDate": "2020-07-01T19:51:17Z", "type": "commit"}, {"oid": "9f32d087e1bc6ace1baf36766d42b37338cde916", "url": "https://github.com/apache/accumulo/commit/9f32d087e1bc6ace1baf36766d42b37338cde916", "message": "fixes #1644: minor compaction retry\n* Updated the minor compaction to gracefully handle temporary VFS class loader issues while minor compacting", "committedDate": "2020-07-01T19:51:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzNDUxNg==", "url": "https://github.com/apache/accumulo/pull/1646#discussion_r448634516", "bodyText": "This has nothing to do with your change.  I was puzzled what the diff between this catch block and the prev one was looking at the code.  AFAICT the only diff is that one passes the exception to the log.warn and the other does not.", "author": "keith-turner", "createdAt": "2020-07-01T21:49:51Z", "path": "server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/MinorCompactor.java", "diffHunk": "@@ -138,7 +138,7 @@ public CompactionStats call() {\n           ProblemReports.getInstance(tabletServer).report(new ProblemReport(\n               getExtent().getTableId(), ProblemType.FILE_WRITE, outputFileName, e));\n           reportedProblem = true;\n-        } catch (RuntimeException e) {\n+        } catch (RuntimeException | NoClassDefFoundError e) {", "originalCommit": "9f32d087e1bc6ace1baf36766d42b37338cde916", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyMjc2Mg==", "url": "https://github.com/apache/accumulo/pull/1646#discussion_r450822762", "bodyText": "That is curious and perhaps not the cleanest.  In the case of a NoClassDefFoundError I think I would want to see the exception in case the issue is more dire than a temporary VFS issue.", "author": "ivakegg", "createdAt": "2020-07-07T12:22:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzNDUxNg=="}], "type": "inlineReview", "revised_code": null}]}