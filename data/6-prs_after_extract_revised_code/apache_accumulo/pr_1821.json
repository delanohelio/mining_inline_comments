{"pr_number": 1821, "pr_title": "Create listtablets shell command. Closes #1317", "pr_createdAt": "2020-12-03T21:42:34Z", "pr_url": "https://github.com/apache/accumulo/pull/1821", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5NzM3Mg==", "url": "https://github.com/apache/accumulo/pull/1821#discussion_r537797372", "bodyText": "This pattern of populating currentServers inside the other method, checkServer, after looping over all can be improved with something like:\n  var children = context.getZooCache().getChildren(path);\n  var liveTservers = children.map(TabletMetadata::checkServer).filter(Optional::isPresent).collect(Collectors.toSet());\n  log(liveTservers);\n  return liveTservers;\nThis requires checkServer to be modified to return either Optional.of(instance) or Optional.empty(), but I think it's more readable.", "author": "ctubbsii", "createdAt": "2020-12-07T20:08:27Z", "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletMetadata.java", "diffHunk": "@@ -435,4 +445,34 @@ static TabletMetadata create(String id, String prevEndRow, String endRow) {\n     te.fetchedCols = EnumSet.of(ColumnType.PREV_ROW);\n     return te;\n   }\n+\n+  public static synchronized Set<TServerInstance> getLiveTServers(ClientContext context) {\n+    final Set<TServerInstance> currentServers = new HashSet<>();\n+\n+    final String path = context.getZooKeeperRoot() + Constants.ZTSERVERS;\n+\n+    HashSet<String> all = new HashSet<>(context.getZooCache().getChildren(path));\n+\n+    for (String zPath : all) {\n+      checkServer(context, currentServers, path, zPath);\n+    }", "originalCommit": "93f69b57af04ac53f21fcf5147bb876da7b7665b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3NjE3MA==", "url": "https://github.com/apache/accumulo/pull/1821#discussion_r542476170", "bodyText": "I disagree.  To me what you have is longer and less readable.  I will rename all to children though.", "author": "milleruntime", "createdAt": "2020-12-14T15:31:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5NzM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc0NDc5OQ==", "url": "https://github.com/apache/accumulo/pull/1821#discussion_r542744799", "bodyText": "The main point I find difficult to read is the pass by reference of the data structure to a different method that is responsible for updating the data structure, conditionally. That kind of pattern can be hard to follow.\nSo, instead of:\n  methodToUpdateDataStructure(x1, x2, x3, dataStructure)\nYou can do:\n  var obj = shouldAddToDataStructure(x1, x2, x3);\n  if (obj != null)\n    dataStructure.add(obj);\nSo, if the part of my suggestion that was less readable to you was the stream stuff, here's a non-stream version:\n    var currentServers = new HashSet<TServerInstance>();\n    for (var child : context.getZooCache().getChildren(context.getZooKeeperRoot() + Constants.ZTSERVERS)) {\n      var instance = checkServer(child);\n      if (instance != null)\n        currentServers.add(instance);\n    }\nI just thought the stream version was better, but honestly, anything is better than the pass-by-reference mutable data structure pattern, IMO.\nIf you prefer the current implementation, that's fine too. I don't feel very strongly about it. It was just something I noticed and thought could be improved.", "author": "ctubbsii", "createdAt": "2020-12-14T20:26:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5NzM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc2MDkxNQ==", "url": "https://github.com/apache/accumulo/pull/1821#discussion_r542760915", "bodyText": "I agree that mutating a data structure passed as a param can be deceptive.  For me personally, I typically find streams to be less readable.  I was just using what was there to start with since some of the code used in the locking I don't fully understand.  I do like your non-stream suggestion, I will use that.", "author": "milleruntime", "createdAt": "2020-12-14T20:42:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5NzM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3MDQwMg==", "url": "https://github.com/apache/accumulo/pull/1821#discussion_r543570402", "bodyText": "@ctubbsii I think I came up with a nice combo of ideas in ba8fb27", "author": "milleruntime", "createdAt": "2020-12-15T18:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5NzM3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4c34866cddd7be7a3181fd457a65a4c8112c45fa", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletMetadata.java b/core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletMetadata.java\nindex 1d851e1aa1..1286fce3e6 100644\n--- a/core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletMetadata.java\n+++ b/core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletMetadata.java\n\n@@ -446,23 +447,30 @@ public class TabletMetadata {\n     return te;\n   }\n \n+  /**\n+   * Get the tservers that are live from ZK. Live servers will have a valid ZooLock. This method was\n+   * pulled from org.apache.accumulo.server.master.LiveTServerSet\n+   */\n   public static synchronized Set<TServerInstance> getLiveTServers(ClientContext context) {\n-    final Set<TServerInstance> currentServers = new HashSet<>();\n+    final Set<TServerInstance> liveServers = new HashSet<>();\n \n     final String path = context.getZooKeeperRoot() + Constants.ZTSERVERS;\n \n-    HashSet<String> all = new HashSet<>(context.getZooCache().getChildren(path));\n-\n-    for (String zPath : all) {\n-      checkServer(context, currentServers, path, zPath);\n+    for (String child : context.getZooCache().getChildren(path)) {\n+      checkServer(context, path, child).ifPresent(liveServers::add);\n     }\n-    log.trace(\"Found {} live tservers at ZK path: {}\", currentServers.size(), path);\n+    log.trace(\"Found {} live tservers at ZK path: {}\", liveServers.size(), path);\n \n-    return currentServers;\n+    return liveServers;\n   }\n \n-  private static void checkServer(ClientContext context, Set<TServerInstance> currentServers,\n-      String path, String zPath) {\n+  /**\n+   * Check for tserver ZooLock at the ZK location. Return Optional containing TServerInstance if a\n+   * valid Zoolock exists.\n+   */\n+  private static Optional<TServerInstance> checkServer(ClientContext context, String path,\n+      String zPath) {\n+    Optional<TServerInstance> server = Optional.empty();\n     final String lockPath = path + \"/\" + zPath;\n     ZooCache.ZcStat stat = new ZooCache.ZcStat();\n     byte[] lockData = ZooLock.getLockData(context.getZooCache(), lockPath, stat);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwMTAyNA==", "url": "https://github.com/apache/accumulo/pull/1821#discussion_r537801024", "bodyText": "I feel like we have some sort of ConfigurableMacIT that is our normal way of doing this. Will that work here instead of this callback?", "author": "ctubbsii", "createdAt": "2020-12-07T20:14:23Z", "path": "test/src/main/java/org/apache/accumulo/test/functional/TabletMetadataIT.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.test.functional;\n+\n+import static org.apache.accumulo.fate.util.UtilWaitThread.sleepUninterruptibly;\n+import static org.apache.accumulo.minicluster.ServerType.TABLET_SERVER;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.accumulo.core.client.Accumulo;\n+import org.apache.accumulo.core.client.AccumuloClient;\n+import org.apache.accumulo.core.clientImpl.ClientContext;\n+import org.apache.accumulo.core.metadata.TServerInstance;\n+import org.apache.accumulo.core.metadata.schema.TabletMetadata;\n+import org.apache.accumulo.harness.MiniClusterConfigurationCallback;\n+import org.apache.accumulo.harness.SharedMiniClusterBase;\n+import org.apache.accumulo.miniclusterImpl.MiniAccumuloConfigImpl;\n+import org.apache.hadoop.conf.Configuration;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Tests features of the Ample TabletMetadata class that can't be tested in TabletMetadataTest\n+ */\n+public class TabletMetadataIT extends SharedMiniClusterBase {\n+  private static final Logger log = LoggerFactory.getLogger(TabletMetadataIT.class);\n+  private static final int NUM_TSERVERS = 4;\n+\n+  @BeforeClass\n+  public static void setup() throws Exception {\n+    SharedMiniClusterBase.startMiniClusterWithConfig(new Callback());\n+  }\n+\n+  @AfterClass\n+  public static void teardown() {\n+    SharedMiniClusterBase.stopMiniCluster();\n+  }\n+\n+  @Override\n+  protected int defaultTimeoutSeconds() {\n+    return 120;\n+  }\n+\n+  private static class Callback implements MiniClusterConfigurationCallback {\n+    @Override\n+    public void configureMiniCluster(MiniAccumuloConfigImpl cfg, Configuration conf) {\n+      cfg.setNumTservers(NUM_TSERVERS);\n+    }\n+  }", "originalCommit": "93f69b57af04ac53f21fcf5147bb876da7b7665b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjcwOTIwNQ==", "url": "https://github.com/apache/accumulo/pull/1821#discussion_r542709205", "bodyText": "I don't know... despite having figured it out multiple times before, I still never know which IT to use... SharedMiniClusterBase, ConfigurableMacBase or AccumuloClusterHarness.  I just no not to use AccumuloITBase if you want a MiniCluster.", "author": "milleruntime", "createdAt": "2020-12-14T19:53:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwMTAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc2MjkwOQ==", "url": "https://github.com/apache/accumulo/pull/1821#discussion_r542762909", "bodyText": "I always have to look at existing classes to see what they are doing, and then I look at the type-hierarchy just to be sure. I think ConfigurableMacBase is appropriate here.", "author": "ctubbsii", "createdAt": "2020-12-14T20:44:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwMTAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3MTE5MA==", "url": "https://github.com/apache/accumulo/pull/1821#discussion_r543571190", "bodyText": "This made me think there are some ITs that could save on some code and use ConfigurableMacBase as well.  I will do that as a follow on.", "author": "milleruntime", "createdAt": "2020-12-15T18:09:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwMTAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU2MjEzNA==", "url": "https://github.com/apache/accumulo/pull/1821#discussion_r551562134", "bodyText": "So in another branch, I modified BulkNewIT to use ConfigurableMacBase (it is currently using SharedMiniClusterBase) and the test went from being around 30 seconds long to over 4 minutes.  I am not sure of the drastic difference between the two base classes but it seemed odd to me.", "author": "milleruntime", "createdAt": "2021-01-04T20:52:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwMTAyNA=="}], "type": "inlineReview", "revised_code": {"commit": "4c34866cddd7be7a3181fd457a65a4c8112c45fa", "chunk": "diff --git a/test/src/main/java/org/apache/accumulo/test/functional/TabletMetadataIT.java b/test/src/main/java/org/apache/accumulo/test/functional/TabletMetadataIT.java\nindex fef2c3c0d2..479492fb96 100644\n--- a/test/src/main/java/org/apache/accumulo/test/functional/TabletMetadataIT.java\n+++ b/test/src/main/java/org/apache/accumulo/test/functional/TabletMetadataIT.java\n\n@@ -30,12 +30,8 @@ import org.apache.accumulo.core.client.AccumuloClient;\n import org.apache.accumulo.core.clientImpl.ClientContext;\n import org.apache.accumulo.core.metadata.TServerInstance;\n import org.apache.accumulo.core.metadata.schema.TabletMetadata;\n-import org.apache.accumulo.harness.MiniClusterConfigurationCallback;\n-import org.apache.accumulo.harness.SharedMiniClusterBase;\n import org.apache.accumulo.miniclusterImpl.MiniAccumuloConfigImpl;\n import org.apache.hadoop.conf.Configuration;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n"}}, {"oid": "f7dcec9964eb70bd69357a6cae91fe02c334d26d", "url": "https://github.com/apache/accumulo/commit/f7dcec9964eb70bd69357a6cae91fe02c334d26d", "message": "Fix Test", "committedDate": "2020-12-15T16:05:00Z", "type": "forcePushed"}, {"oid": "fe21059ad1d76475d226cfcda71a4fff41f4cad2", "url": "https://github.com/apache/accumulo/commit/fe21059ad1d76475d226cfcda71a4fff41f4cad2", "message": "Create listtablets shell command. Closes #1317\n\n* New command for debugging tablets called listtablets\n* Added getLiveTServers() to TabletMetadata for generating a list of\ntservers that currently have a lock in ZK, similar to master.\n* The list of live tservers is passed to TabletMetadata in order to get\nthe current state of a tablet\n* Command will print one line for every tablet in a table\n* Created TabletMetadataIT for testing getLiveTServers()\n\nCo-authored-by: EdColeman <dev1@etcoleman.com>", "committedDate": "2021-01-04T19:45:42Z", "type": "commit"}, {"oid": "fd67a6bae391bd3cf25a0baac213f19cc07337b5", "url": "https://github.com/apache/accumulo/commit/fd67a6bae391bd3cf25a0baac213f19cc07337b5", "message": "Fix Test", "committedDate": "2021-01-04T19:45:42Z", "type": "commit"}, {"oid": "4c34866cddd7be7a3181fd457a65a4c8112c45fa", "url": "https://github.com/apache/accumulo/commit/4c34866cddd7be7a3181fd457a65a4c8112c45fa", "message": "Improvements to IT and TabletMetadata method", "committedDate": "2021-01-04T19:45:43Z", "type": "commit"}, {"oid": "4c34866cddd7be7a3181fd457a65a4c8112c45fa", "url": "https://github.com/apache/accumulo/commit/4c34866cddd7be7a3181fd457a65a4c8112c45fa", "message": "Improvements to IT and TabletMetadata method", "committedDate": "2021-01-04T19:45:43Z", "type": "forcePushed"}]}