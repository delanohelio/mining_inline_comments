{"pr_number": 1471, "pr_title": "Create TabletFile for use in TabletMetadata. Closes #1396", "pr_createdAt": "2020-01-09T18:09:15Z", "pr_url": "https://github.com/apache/accumulo/pull/1471", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM5MjM1Mw==", "url": "https://github.com/apache/accumulo/pull/1471#discussion_r365392353", "bodyText": "Not complete sure, but I think unless a <p> this will not show up as its own paragraph in the rendered javadoc.", "author": "keith-turner", "createdAt": "2020-01-10T19:22:49Z", "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletFile.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.metadata.schema;\n+\n+import java.util.Objects;\n+\n+import org.apache.accumulo.core.Constants;\n+import org.apache.accumulo.core.data.TableId;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.Text;\n+\n+/**\n+ * Object representing a tablet file entry in the metadata table. Keeps a string of the exact entry\n+ * of what is in the metadata table for the column qualifier of the\n+ * {@link org.apache.accumulo.core.metadata.schema.MetadataSchema.TabletsSection.DataFileColumnFamily}\n+ *\n+ * As of 2.1, Tablet file paths should now be only absolute URIs with the removal of relative paths", "originalCommit": "78eebbf6dad187348bfcaf71241daf91e0237cd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4Mjk5MQ==", "url": "https://github.com/apache/accumulo/pull/1471#discussion_r365482991", "bodyText": "True.", "author": "ctubbsii", "createdAt": "2020-01-11T00:45:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM5MjM1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b0952d924ddad50b637721f561e5b1e3f7e04068", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletFile.java b/core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletFile.java\nindex 9f7fc02795..2b3638adea 100644\n--- a/core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletFile.java\n+++ b/core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletFile.java\n\n@@ -25,11 +25,13 @@ import org.apache.accumulo.core.data.TableId;\n import org.apache.hadoop.fs.Path;\n import org.apache.hadoop.io.Text;\n \n+import com.google.common.base.Preconditions;\n+\n /**\n  * Object representing a tablet file entry in the metadata table. Keeps a string of the exact entry\n  * of what is in the metadata table for the column qualifier of the\n  * {@link org.apache.accumulo.core.metadata.schema.MetadataSchema.TabletsSection.DataFileColumnFamily}\n- *\n+ * <p>\n  * As of 2.1, Tablet file paths should now be only absolute URIs with the removal of relative paths\n  * in Upgrader9to10.upgradeRelativePaths()\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM5NjYxOA==", "url": "https://github.com/apache/accumulo/pull/1471#discussion_r365396618", "bodyText": "Could do the following which avoid calling TabletFileUtil.getVolumeFromFullPath.   This method converts a path to a string internally and then back to a path.  The following code uses the exisitng path object.\n  Path tablePath = Objects.requireNonNull(tableIdPath.getParent(), \"Table\" + errorMsg);\n  Preconditions.checkArgument(tablePath.getName().equals(Constants.HDFS_TABLES_DIR));\n  Path volumePath = Objects.requireNonNull(tablePath.getParent());\nWhen profiling in the past I have seen the Hadoop Path object show up.  So if its easy to avoid creating one, I try to do that.  This code would be used pretty frequently.", "author": "keith-turner", "createdAt": "2020-01-10T19:33:09Z", "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletFile.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.metadata.schema;\n+\n+import java.util.Objects;\n+\n+import org.apache.accumulo.core.Constants;\n+import org.apache.accumulo.core.data.TableId;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.Text;\n+\n+/**\n+ * Object representing a tablet file entry in the metadata table. Keeps a string of the exact entry\n+ * of what is in the metadata table for the column qualifier of the\n+ * {@link org.apache.accumulo.core.metadata.schema.MetadataSchema.TabletsSection.DataFileColumnFamily}\n+ *\n+ * As of 2.1, Tablet file paths should now be only absolute URIs with the removal of relative paths\n+ * in Upgrader9to10.upgradeRelativePaths()\n+ */\n+public class TabletFile implements Comparable<TabletFile> {\n+  // parts of an absolute URI, like \"hdfs://1.2.3.4/accumulo/tables/2a/t-0003/C0004.rf\"\n+  private final String volume; // hdfs://1.2.3.4/accumulo\n+  private final TableId tableId; // 2a\n+  private final String tabletDir; // t-0003\n+  private final String fileName; // C0004.rf\n+  private final String metadataEntry;\n+  private final String normalizedPath; // 2a/t-0003/C0004.rf\n+\n+  public TabletFile(String metadataEntry) {\n+    this.metadataEntry = Objects.requireNonNull(metadataEntry);\n+    String errorMsg = \" is missing from tablet file metadata entry: \" + metadataEntry;\n+\n+    Path metaPath = new Path(metadataEntry);\n+\n+    // use Path object to step backwards from the filename through all the parts\n+    this.fileName = metaPath.getName();\n+    MetadataSchema.TabletsSection.ServerColumnFamily.validateDirCol(fileName);\n+\n+    Path tabletDirPath = Objects.requireNonNull(metaPath.getParent(), \"Tablet dir\" + errorMsg);\n+    this.tabletDir = tabletDirPath.getName();\n+    MetadataSchema.TabletsSection.ServerColumnFamily.validateDirCol(tabletDir);\n+\n+    Path tableIdPath = Objects.requireNonNull(tabletDirPath.getParent(), \"Table ID\" + errorMsg);\n+    this.tableId = TableId.of(tableIdPath.getName());\n+    MetadataSchema.TabletsSection.ServerColumnFamily.validateDirCol(tableId.canonical());\n+\n+    Path volumePath = Objects.requireNonNull(", "originalCommit": "78eebbf6dad187348bfcaf71241daf91e0237cd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1NDQ5NQ==", "url": "https://github.com/apache/accumulo/pull/1471#discussion_r365954495", "bodyText": "I like this a lot better.  I can then drop TabletFileUtil, since this was the last thing it was doing.", "author": "milleruntime", "createdAt": "2020-01-13T18:20:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM5NjYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "b0952d924ddad50b637721f561e5b1e3f7e04068", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletFile.java b/core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletFile.java\nindex 9f7fc02795..2b3638adea 100644\n--- a/core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletFile.java\n+++ b/core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletFile.java\n\n@@ -25,11 +25,13 @@ import org.apache.accumulo.core.data.TableId;\n import org.apache.hadoop.fs.Path;\n import org.apache.hadoop.io.Text;\n \n+import com.google.common.base.Preconditions;\n+\n /**\n  * Object representing a tablet file entry in the metadata table. Keeps a string of the exact entry\n  * of what is in the metadata table for the column qualifier of the\n  * {@link org.apache.accumulo.core.metadata.schema.MetadataSchema.TabletsSection.DataFileColumnFamily}\n- *\n+ * <p>\n  * As of 2.1, Tablet file paths should now be only absolute URIs with the removal of relative paths\n  * in Upgrader9to10.upgradeRelativePaths()\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM5ODIyMA==", "url": "https://github.com/apache/accumulo/pull/1471#discussion_r365398220", "bodyText": "Do you know if Hadoop's path object normalizes?", "author": "keith-turner", "createdAt": "2020-01-10T19:36:33Z", "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletFile.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.metadata.schema;\n+\n+import java.util.Objects;\n+\n+import org.apache.accumulo.core.Constants;\n+import org.apache.accumulo.core.data.TableId;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.Text;\n+\n+/**\n+ * Object representing a tablet file entry in the metadata table. Keeps a string of the exact entry\n+ * of what is in the metadata table for the column qualifier of the\n+ * {@link org.apache.accumulo.core.metadata.schema.MetadataSchema.TabletsSection.DataFileColumnFamily}\n+ *\n+ * As of 2.1, Tablet file paths should now be only absolute URIs with the removal of relative paths\n+ * in Upgrader9to10.upgradeRelativePaths()\n+ */\n+public class TabletFile implements Comparable<TabletFile> {\n+  // parts of an absolute URI, like \"hdfs://1.2.3.4/accumulo/tables/2a/t-0003/C0004.rf\"\n+  private final String volume; // hdfs://1.2.3.4/accumulo\n+  private final TableId tableId; // 2a\n+  private final String tabletDir; // t-0003\n+  private final String fileName; // C0004.rf\n+  private final String metadataEntry;\n+  private final String normalizedPath; // 2a/t-0003/C0004.rf\n+\n+  public TabletFile(String metadataEntry) {\n+    this.metadataEntry = Objects.requireNonNull(metadataEntry);\n+    String errorMsg = \" is missing from tablet file metadata entry: \" + metadataEntry;\n+\n+    Path metaPath = new Path(metadataEntry);\n+\n+    // use Path object to step backwards from the filename through all the parts\n+    this.fileName = metaPath.getName();\n+    MetadataSchema.TabletsSection.ServerColumnFamily.validateDirCol(fileName);\n+\n+    Path tabletDirPath = Objects.requireNonNull(metaPath.getParent(), \"Tablet dir\" + errorMsg);\n+    this.tabletDir = tabletDirPath.getName();\n+    MetadataSchema.TabletsSection.ServerColumnFamily.validateDirCol(tabletDir);\n+\n+    Path tableIdPath = Objects.requireNonNull(tabletDirPath.getParent(), \"Table ID\" + errorMsg);\n+    this.tableId = TableId.of(tableIdPath.getName());\n+    MetadataSchema.TabletsSection.ServerColumnFamily.validateDirCol(tableId.canonical());\n+\n+    Path volumePath = Objects.requireNonNull(\n+        TabletFileUtil.getVolumeFromFullPath(metaPath, \"tables\"), \"Volume\" + errorMsg);\n+    this.volume = volumePath.toString();\n+\n+    this.normalizedPath = volume + Constants.HDFS_TABLES_DIR + \"/\" + tableId.canonical() + \"/\"", "originalCommit": "78eebbf6dad187348bfcaf71241daf91e0237cd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQxMzg3Ng==", "url": "https://github.com/apache/accumulo/pull/1471#discussion_r365413876", "bodyText": "It does, which I tested with my previous recent change to Upgrader9to10Test.", "author": "milleruntime", "createdAt": "2020-01-10T20:18:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM5ODIyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4MzI0NQ==", "url": "https://github.com/apache/accumulo/pull/1471#discussion_r365483245", "bodyText": "I can attest to that. I had the same question on an earlier PR, and Mike and I tested all sorts of combinations together as a sanity check to be sure that it does... at least with the minimum Hadoop version we're specifying in our pom.xml.", "author": "ctubbsii", "createdAt": "2020-01-11T00:47:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM5ODIyMA=="}], "type": "inlineReview", "revised_code": {"commit": "b0952d924ddad50b637721f561e5b1e3f7e04068", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletFile.java b/core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletFile.java\nindex 9f7fc02795..2b3638adea 100644\n--- a/core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletFile.java\n+++ b/core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletFile.java\n\n@@ -25,11 +25,13 @@ import org.apache.accumulo.core.data.TableId;\n import org.apache.hadoop.fs.Path;\n import org.apache.hadoop.io.Text;\n \n+import com.google.common.base.Preconditions;\n+\n /**\n  * Object representing a tablet file entry in the metadata table. Keeps a string of the exact entry\n  * of what is in the metadata table for the column qualifier of the\n  * {@link org.apache.accumulo.core.metadata.schema.MetadataSchema.TabletsSection.DataFileColumnFamily}\n- *\n+ * <p>\n  * As of 2.1, Tablet file paths should now be only absolute URIs with the removal of relative paths\n  * in Upgrader9to10.upgradeRelativePaths()\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM5OTI4NA==", "url": "https://github.com/apache/accumulo/pull/1471#discussion_r365399284", "bodyText": "Would be nice to also verify normalization.", "author": "keith-turner", "createdAt": "2020-01-10T19:39:15Z", "path": "core/src/test/java/org/apache/accumulo/core/metadata/schema/TabletFileTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.metadata.schema;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import org.apache.accumulo.core.data.TableId;\n+import org.junit.Test;\n+\n+public class TabletFileTest {\n+\n+  private void test(String metadataEntry, TableId tableId, String tabletDir, String fileName) {\n+    TabletFile tabletFile = new TabletFile(metadataEntry);\n+\n+    assertEquals(metadataEntry, tabletFile.getMetadataEntry());\n+    assertEquals(tableId, tabletFile.getTableId());\n+    assertEquals(tabletDir, tabletFile.getTabletDir());\n+    assertEquals(fileName, tabletFile.getFileName());\n+", "originalCommit": "78eebbf6dad187348bfcaf71241daf91e0237cd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQxNDI2Mg==", "url": "https://github.com/apache/accumulo/pull/1471#discussion_r365414262", "bodyText": "I will add more tests with your ideas.  I thought I had a normalize test but I was thinking of the recent one I added for the upgrade code here.", "author": "milleruntime", "createdAt": "2020-01-10T20:19:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM5OTI4NA=="}], "type": "inlineReview", "revised_code": {"commit": "b0952d924ddad50b637721f561e5b1e3f7e04068", "chunk": "diff --git a/core/src/test/java/org/apache/accumulo/core/metadata/schema/TabletFileTest.java b/core/src/test/java/org/apache/accumulo/core/metadata/schema/TabletFileTest.java\nindex 07e1ca054b..02b1f983a3 100644\n--- a/core/src/test/java/org/apache/accumulo/core/metadata/schema/TabletFileTest.java\n+++ b/core/src/test/java/org/apache/accumulo/core/metadata/schema/TabletFileTest.java\n\n@@ -26,53 +26,79 @@ import org.junit.Test;\n \n public class TabletFileTest {\n \n-  private void test(String metadataEntry, TableId tableId, String tabletDir, String fileName) {\n+  private void test(String metadataEntry, String volume, String tableId, String tabletDir,\n+      String fileName) {\n     TabletFile tabletFile = new TabletFile(metadataEntry);\n \n+    assertEquals(volume, tabletFile.getVolume());\n     assertEquals(metadataEntry, tabletFile.getMetadataEntry());\n-    assertEquals(tableId, tabletFile.getTableId());\n+    assertEquals(TableId.of(tableId), tabletFile.getTableId());\n     assertEquals(tabletDir, tabletFile.getTabletDir());\n     assertEquals(fileName, tabletFile.getFileName());\n-\n   }\n \n   @Test\n   public void testValidPaths() {\n-    test(\"hdfs://localhost:8020/accumulo/tables/2a/default_tablet/F0000070.rf\", TableId.of(\"2a\"),\n-        \"default_tablet\", \"F0000070.rf\");\n-    test(\"hdfs://nn1:9000/accumulo/tables/5a/t-0005/C0009.rf\", TableId.of(\"5a\"), \"t-0005\",\n-        \"C0009.rf\");\n+    test(\"hdfs://localhost:8020/accumulo/tables/2a/default_tablet/F0000070.rf\",\n+        \"hdfs://localhost:8020/accumulo\", \"2a\", \"default_tablet\", \"F0000070.rf\");\n+    test(\"hdfs://nn1:9000/accumulo/tables/5a/t-0005/C0009.rf\", \"hdfs://nn1:9000/accumulo\", \"5a\",\n+        \"t-0005\", \"C0009.rf\");\n+    test(\n+        \"file:/home/dude/workspace/accumulo/test/target/mini-tests/org.apache.accumulo.test.VolumeIT_test/volumes/v1/tables/1/t-0000003/F0000006.rf\",\n+        \"file:/home/dude/workspace/accumulo/test/target/mini-tests/org.apache.accumulo.test.VolumeIT_test/volumes/v1\",\n+        \"1\", \"t-0000003\", \"F0000006.rf\");\n   }\n \n   @Test\n   public void testBadPaths() {\n     try {\n-      test(\"C0004.rf\", TableId.of(\"2a\"), \"t-0003\", \"C0004.rf\");\n+      test(\"C0004.rf\", \"\", \"2a\", \"t-0003\", \"C0004.rf\");\n       fail(\"Failed to throw error on bad path\");\n     } catch (NullPointerException e) {}\n-\n     // 2a< srv:dir\n     try {\n-      test(\"dir\", TableId.of(\"2a\"), \"\", \"\");\n+      test(\"dir\", \"\", \"2a\", \"\", \"\");\n       fail(\"Failed to throw error on bad path\");\n     } catch (NullPointerException e) {}\n+    try {\n+      test(\"hdfs://localhost:8020/accumulo/tablets/2a/default_tablet/F0000070.rf\",\n+          \"hdfs://localhost:8020/accumulo\", \"2a\", \"default_tablet\", \"F0000070.rf\");\n+      fail(\"Failed to throw error on bad path\");\n+    } catch (IllegalArgumentException e) {}\n+    try {\n+      test(\"hdfs://localhost:8020/accumulo/2a/default_tablet/F0000070.rf\",\n+          \" hdfs://localhost:8020/accumulo\", \"2a\", \"default_tablet\", \" F0000070.rf\");\n+    } catch (IllegalArgumentException e) {}\n+    try {\n+      test(\"/accumulo/tables/2a/default_tablet/F0000070.rf\", \"\", \"2a\", \"default_tablet\",\n+          \"F0000070.rf\");\n+    } catch (IllegalArgumentException e) {}\n+    try {\n+      test(\"hdfs://localhost:8020/accumulo/tables/2a/F0000070.rf\", \"hdfs://localhost:8020/accumulo\",\n+          \"2a\", \"\", \"F0000070.rf\");\n+    } catch (IllegalArgumentException e) {}\n+    try {\n+      test(\"hdfs://localhost:8020/accumulo/tables/F0000070.rf\", \"hdfs://localhost:8020/accumulo\",\n+          null, \"\", \"F0000070.rf\");\n+    } catch (IllegalArgumentException e) {}\n   }\n \n+  private final String id = \"2a\";\n+  private final String dir = \"t-0003\";\n+  private final String filename = \"C0004.rf\";\n+\n   @Test\n-  // metadataEntry = \"hdfs://1.2.3.4/accumulo/tables/2a/t-0003/C0004.rf\"\n   public void testFullPathWithVolume() {\n     String volume = \"hdfs://1.2.3.4/accumulo\";\n-    String id = \"2a\";\n-    String dir = \"t-0003\";\n-    String filename = \"C0004.rf\";\n     String metadataEntry = volume + \"/tables/\" + id + \"/\" + dir + \"/\" + filename;\n+    test(metadataEntry, volume, id, dir, filename);\n+  }\n \n-    TabletFile tabletFile = new TabletFile(metadataEntry);\n-\n-    assertEquals(volume, tabletFile.getVolume());\n-    assertEquals(id, tabletFile.getTableId().canonical());\n-    assertEquals(dir, tabletFile.getTabletDir());\n-    assertEquals(filename, tabletFile.getFileName());\n+  @Test\n+  public void testNormalizePath() {\n+    String uglyVolume = \"hdfs://nn.somewhere.com:86753/accumulo/blah/.././/bad/bad2/../.././/////\";\n+    String metadataEntry = uglyVolume + \"/tables/\" + id + \"/\" + dir + \"/\" + filename;\n+    test(metadataEntry, \"hdfs://nn.somewhere.com:86753/accumulo\", id, dir, filename);\n   }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQwMDg4Ng==", "url": "https://github.com/apache/accumulo/pull/1471#discussion_r365400886", "bodyText": "The following are some additional bad paths that would be nice to check.\nhdfs://localhost:8020/accumulo/tablets/2a/default_tablet/F0000070.rf\nhdfs://localhost:8020/accumulo/2a/default_tablet/F0000070.rf\n/accumulo/tables/2a/default_tablet/F0000070.rf\nhdfs://localhost:8020/accumulo/tables/2a/F0000070.rf\nhdfs://localhost:8020/accumulo/tables/F0000070.rf", "author": "keith-turner", "createdAt": "2020-01-10T19:43:22Z", "path": "core/src/test/java/org/apache/accumulo/core/metadata/schema/TabletFileTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.metadata.schema;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import org.apache.accumulo.core.data.TableId;\n+import org.junit.Test;\n+\n+public class TabletFileTest {\n+\n+  private void test(String metadataEntry, TableId tableId, String tabletDir, String fileName) {\n+    TabletFile tabletFile = new TabletFile(metadataEntry);\n+\n+    assertEquals(metadataEntry, tabletFile.getMetadataEntry());\n+    assertEquals(tableId, tabletFile.getTableId());\n+    assertEquals(tabletDir, tabletFile.getTabletDir());\n+    assertEquals(fileName, tabletFile.getFileName());\n+\n+  }\n+\n+  @Test\n+  public void testValidPaths() {\n+    test(\"hdfs://localhost:8020/accumulo/tables/2a/default_tablet/F0000070.rf\", TableId.of(\"2a\"),\n+        \"default_tablet\", \"F0000070.rf\");\n+    test(\"hdfs://nn1:9000/accumulo/tables/5a/t-0005/C0009.rf\", TableId.of(\"5a\"), \"t-0005\",\n+        \"C0009.rf\");\n+  }\n+\n+  @Test\n+  public void testBadPaths() {", "originalCommit": "78eebbf6dad187348bfcaf71241daf91e0237cd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAxMTU4Mw==", "url": "https://github.com/apache/accumulo/pull/1471#discussion_r366011583", "bodyText": "I just tested these and noticed we need more validation on the volume.  Since we are traversing backwards up from the filename, anything before \"tables\" will be a valid volume.  Any ideas?  The best I can come up with is what I've seen... valid if path.contains(\":\")", "author": "milleruntime", "createdAt": "2020-01-13T20:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQwMDg4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA1MDUyOQ==", "url": "https://github.com/apache/accumulo/pull/1471#discussion_r366050529", "bodyText": "Maybe ensure that volumePath.toUri().getScheme() is not null.", "author": "keith-turner", "createdAt": "2020-01-13T21:57:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQwMDg4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5MjY5OQ==", "url": "https://github.com/apache/accumulo/pull/1471#discussion_r366392699", "bodyText": "That works great thanks!", "author": "milleruntime", "createdAt": "2020-01-14T15:09:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQwMDg4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b0952d924ddad50b637721f561e5b1e3f7e04068", "chunk": "diff --git a/core/src/test/java/org/apache/accumulo/core/metadata/schema/TabletFileTest.java b/core/src/test/java/org/apache/accumulo/core/metadata/schema/TabletFileTest.java\nindex 07e1ca054b..02b1f983a3 100644\n--- a/core/src/test/java/org/apache/accumulo/core/metadata/schema/TabletFileTest.java\n+++ b/core/src/test/java/org/apache/accumulo/core/metadata/schema/TabletFileTest.java\n\n@@ -26,53 +26,79 @@ import org.junit.Test;\n \n public class TabletFileTest {\n \n-  private void test(String metadataEntry, TableId tableId, String tabletDir, String fileName) {\n+  private void test(String metadataEntry, String volume, String tableId, String tabletDir,\n+      String fileName) {\n     TabletFile tabletFile = new TabletFile(metadataEntry);\n \n+    assertEquals(volume, tabletFile.getVolume());\n     assertEquals(metadataEntry, tabletFile.getMetadataEntry());\n-    assertEquals(tableId, tabletFile.getTableId());\n+    assertEquals(TableId.of(tableId), tabletFile.getTableId());\n     assertEquals(tabletDir, tabletFile.getTabletDir());\n     assertEquals(fileName, tabletFile.getFileName());\n-\n   }\n \n   @Test\n   public void testValidPaths() {\n-    test(\"hdfs://localhost:8020/accumulo/tables/2a/default_tablet/F0000070.rf\", TableId.of(\"2a\"),\n-        \"default_tablet\", \"F0000070.rf\");\n-    test(\"hdfs://nn1:9000/accumulo/tables/5a/t-0005/C0009.rf\", TableId.of(\"5a\"), \"t-0005\",\n-        \"C0009.rf\");\n+    test(\"hdfs://localhost:8020/accumulo/tables/2a/default_tablet/F0000070.rf\",\n+        \"hdfs://localhost:8020/accumulo\", \"2a\", \"default_tablet\", \"F0000070.rf\");\n+    test(\"hdfs://nn1:9000/accumulo/tables/5a/t-0005/C0009.rf\", \"hdfs://nn1:9000/accumulo\", \"5a\",\n+        \"t-0005\", \"C0009.rf\");\n+    test(\n+        \"file:/home/dude/workspace/accumulo/test/target/mini-tests/org.apache.accumulo.test.VolumeIT_test/volumes/v1/tables/1/t-0000003/F0000006.rf\",\n+        \"file:/home/dude/workspace/accumulo/test/target/mini-tests/org.apache.accumulo.test.VolumeIT_test/volumes/v1\",\n+        \"1\", \"t-0000003\", \"F0000006.rf\");\n   }\n \n   @Test\n   public void testBadPaths() {\n     try {\n-      test(\"C0004.rf\", TableId.of(\"2a\"), \"t-0003\", \"C0004.rf\");\n+      test(\"C0004.rf\", \"\", \"2a\", \"t-0003\", \"C0004.rf\");\n       fail(\"Failed to throw error on bad path\");\n     } catch (NullPointerException e) {}\n-\n     // 2a< srv:dir\n     try {\n-      test(\"dir\", TableId.of(\"2a\"), \"\", \"\");\n+      test(\"dir\", \"\", \"2a\", \"\", \"\");\n       fail(\"Failed to throw error on bad path\");\n     } catch (NullPointerException e) {}\n+    try {\n+      test(\"hdfs://localhost:8020/accumulo/tablets/2a/default_tablet/F0000070.rf\",\n+          \"hdfs://localhost:8020/accumulo\", \"2a\", \"default_tablet\", \"F0000070.rf\");\n+      fail(\"Failed to throw error on bad path\");\n+    } catch (IllegalArgumentException e) {}\n+    try {\n+      test(\"hdfs://localhost:8020/accumulo/2a/default_tablet/F0000070.rf\",\n+          \" hdfs://localhost:8020/accumulo\", \"2a\", \"default_tablet\", \" F0000070.rf\");\n+    } catch (IllegalArgumentException e) {}\n+    try {\n+      test(\"/accumulo/tables/2a/default_tablet/F0000070.rf\", \"\", \"2a\", \"default_tablet\",\n+          \"F0000070.rf\");\n+    } catch (IllegalArgumentException e) {}\n+    try {\n+      test(\"hdfs://localhost:8020/accumulo/tables/2a/F0000070.rf\", \"hdfs://localhost:8020/accumulo\",\n+          \"2a\", \"\", \"F0000070.rf\");\n+    } catch (IllegalArgumentException e) {}\n+    try {\n+      test(\"hdfs://localhost:8020/accumulo/tables/F0000070.rf\", \"hdfs://localhost:8020/accumulo\",\n+          null, \"\", \"F0000070.rf\");\n+    } catch (IllegalArgumentException e) {}\n   }\n \n+  private final String id = \"2a\";\n+  private final String dir = \"t-0003\";\n+  private final String filename = \"C0004.rf\";\n+\n   @Test\n-  // metadataEntry = \"hdfs://1.2.3.4/accumulo/tables/2a/t-0003/C0004.rf\"\n   public void testFullPathWithVolume() {\n     String volume = \"hdfs://1.2.3.4/accumulo\";\n-    String id = \"2a\";\n-    String dir = \"t-0003\";\n-    String filename = \"C0004.rf\";\n     String metadataEntry = volume + \"/tables/\" + id + \"/\" + dir + \"/\" + filename;\n+    test(metadataEntry, volume, id, dir, filename);\n+  }\n \n-    TabletFile tabletFile = new TabletFile(metadataEntry);\n-\n-    assertEquals(volume, tabletFile.getVolume());\n-    assertEquals(id, tabletFile.getTableId().canonical());\n-    assertEquals(dir, tabletFile.getTabletDir());\n-    assertEquals(filename, tabletFile.getFileName());\n+  @Test\n+  public void testNormalizePath() {\n+    String uglyVolume = \"hdfs://nn.somewhere.com:86753/accumulo/blah/.././/bad/bad2/../.././/////\";\n+    String metadataEntry = uglyVolume + \"/tables/\" + id + \"/\" + dir + \"/\" + filename;\n+    test(metadataEntry, \"hdfs://nn.somewhere.com:86753/accumulo\", id, dir, filename);\n   }\n \n }\n"}}, {"oid": "9b46d2fed3f8bb2ba2d5097f2404a343fc27ebf1", "url": "https://github.com/apache/accumulo/commit/9b46d2fed3f8bb2ba2d5097f2404a343fc27ebf1", "message": "Created TabletFile for use in TabletMetadata\n\n* Created new TabletFile object as a strong type to replace where\nstrings are used to reference metadata tablet file paths\n* Drop parts of code dealing with relative paths\n* TabletData only uses TabletFile to create a FileRef for now, follow on\nwork can be done to utilize TabletFile in place of FileRef\n* Update tests to use absolute paths\n* Add new Translator for TabletFile", "committedDate": "2020-01-14T18:35:40Z", "type": "commit"}, {"oid": "b0952d924ddad50b637721f561e5b1e3f7e04068", "url": "https://github.com/apache/accumulo/commit/b0952d924ddad50b637721f561e5b1e3f7e04068", "message": "Fixes to volume and updates to test", "committedDate": "2020-01-14T18:35:40Z", "type": "commit"}, {"oid": "f51d1cb8ddec323fafac5b8787a6f9c269b04b1c", "url": "https://github.com/apache/accumulo/commit/f51d1cb8ddec323fafac5b8787a6f9c269b04b1c", "message": "Fix for rebase", "committedDate": "2020-01-14T19:42:47Z", "type": "commit"}, {"oid": "f51d1cb8ddec323fafac5b8787a6f9c269b04b1c", "url": "https://github.com/apache/accumulo/commit/f51d1cb8ddec323fafac5b8787a6f9c269b04b1c", "message": "Fix for rebase", "committedDate": "2020-01-14T19:42:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzODUzMA==", "url": "https://github.com/apache/accumulo/pull/1471#discussion_r366538530", "bodyText": "There is a lot of string concatenation (which causes object allocation) for error messages that will usually never be seen in this method.", "author": "keith-turner", "createdAt": "2020-01-14T19:47:16Z", "path": "core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletFile.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.metadata.schema;\n+\n+import java.util.Objects;\n+\n+import org.apache.accumulo.core.Constants;\n+import org.apache.accumulo.core.data.TableId;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.io.Text;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * Object representing a tablet file entry in the metadata table. Keeps a string of the exact entry\n+ * of what is in the metadata table for the column qualifier of the\n+ * {@link org.apache.accumulo.core.metadata.schema.MetadataSchema.TabletsSection.DataFileColumnFamily}\n+ * <p>\n+ * As of 2.1, Tablet file paths should now be only absolute URIs with the removal of relative paths\n+ * in Upgrader9to10.upgradeRelativePaths()\n+ */\n+public class TabletFile implements Comparable<TabletFile> {\n+  // parts of an absolute URI, like \"hdfs://1.2.3.4/accumulo/tables/2a/t-0003/C0004.rf\"\n+  private final String volume; // hdfs://1.2.3.4/accumulo\n+  private final TableId tableId; // 2a\n+  private final String tabletDir; // t-0003\n+  private final String fileName; // C0004.rf\n+  private final String metadataEntry;\n+  private final Path metaPath;\n+  private final String normalizedPath;\n+\n+  public TabletFile(String metadataEntry) {\n+    this.metadataEntry = Objects.requireNonNull(metadataEntry);\n+    String errorMsg = \" is missing/invalid from tablet file metadata entry: \" + metadataEntry;\n+\n+    this.metaPath = new Path(metadataEntry);\n+\n+    // use Path object to step backwards from the filename through all the parts\n+    this.fileName = metaPath.getName();\n+    MetadataSchema.TabletsSection.ServerColumnFamily.validateDirCol(fileName);\n+\n+    Path tabletDirPath = Objects.requireNonNull(metaPath.getParent(), \"Tablet dir\" + errorMsg);", "originalCommit": "f51d1cb8ddec323fafac5b8787a6f9c269b04b1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0OTc0Nw==", "url": "https://github.com/apache/accumulo/pull/1471#discussion_r366549747", "bodyText": "Good point.  I think I'd rather make one generic error message that includes the metadataEntry than trying to describe the part of the string which had an error.", "author": "milleruntime", "createdAt": "2020-01-14T20:12:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzODUzMA=="}], "type": "inlineReview", "revised_code": {"commit": "ed186a3270bbdbf738af8df82d797c128ff3fa90", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletFile.java b/core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletFile.java\nindex 2b3638adea..36667d4d0b 100644\n--- a/core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletFile.java\n+++ b/core/src/main/java/org/apache/accumulo/core/metadata/schema/TabletFile.java\n\n@@ -47,7 +47,7 @@ public class TabletFile implements Comparable<TabletFile> {\n \n   public TabletFile(String metadataEntry) {\n     this.metadataEntry = Objects.requireNonNull(metadataEntry);\n-    String errorMsg = \" is missing/invalid from tablet file metadata entry: \" + metadataEntry;\n+    String errorMsg = \"Missing or invalid part of tablet file metadata entry: \" + metadataEntry;\n \n     this.metaPath = new Path(metadataEntry);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0MjIxNw==", "url": "https://github.com/apache/accumulo/pull/1471#discussion_r366542217", "bodyText": "Would also be nice to verify that TabletFile.equals and TabletFile.hashCode work as expected for normalized paths.", "author": "keith-turner", "createdAt": "2020-01-14T19:55:30Z", "path": "core/src/test/java/org/apache/accumulo/core/metadata/schema/TabletFileTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.core.metadata.schema;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import org.apache.accumulo.core.data.TableId;\n+import org.junit.Test;\n+\n+public class TabletFileTest {\n+\n+  private void test(String metadataEntry, String volume, String tableId, String tabletDir,\n+      String fileName) {\n+    TabletFile tabletFile = new TabletFile(metadataEntry);\n+\n+    assertEquals(volume, tabletFile.getVolume());\n+    assertEquals(metadataEntry, tabletFile.getMetadataEntry());\n+    assertEquals(TableId.of(tableId), tabletFile.getTableId());\n+    assertEquals(tabletDir, tabletFile.getTabletDir());\n+    assertEquals(fileName, tabletFile.getFileName());\n+  }\n+\n+  @Test\n+  public void testValidPaths() {\n+    test(\"hdfs://localhost:8020/accumulo/tables/2a/default_tablet/F0000070.rf\",\n+        \"hdfs://localhost:8020/accumulo\", \"2a\", \"default_tablet\", \"F0000070.rf\");\n+    test(\"hdfs://nn1:9000/accumulo/tables/5a/t-0005/C0009.rf\", \"hdfs://nn1:9000/accumulo\", \"5a\",\n+        \"t-0005\", \"C0009.rf\");\n+    test(\n+        \"file:/home/dude/workspace/accumulo/test/target/mini-tests/org.apache.accumulo.test.VolumeIT_test/volumes/v1/tables/1/t-0000003/F0000006.rf\",\n+        \"file:/home/dude/workspace/accumulo/test/target/mini-tests/org.apache.accumulo.test.VolumeIT_test/volumes/v1\",\n+        \"1\", \"t-0000003\", \"F0000006.rf\");\n+  }\n+\n+  @Test\n+  public void testBadPaths() {\n+    try {\n+      test(\"C0004.rf\", \"\", \"2a\", \"t-0003\", \"C0004.rf\");\n+      fail(\"Failed to throw error on bad path\");\n+    } catch (NullPointerException e) {}\n+    // 2a< srv:dir\n+    try {\n+      test(\"dir\", \"\", \"2a\", \"\", \"\");\n+      fail(\"Failed to throw error on bad path\");\n+    } catch (NullPointerException e) {}\n+    try {\n+      test(\"hdfs://localhost:8020/accumulo/tablets/2a/default_tablet/F0000070.rf\",\n+          \"hdfs://localhost:8020/accumulo\", \"2a\", \"default_tablet\", \"F0000070.rf\");\n+      fail(\"Failed to throw error on bad path\");\n+    } catch (IllegalArgumentException e) {}\n+    try {\n+      test(\"hdfs://localhost:8020/accumulo/2a/default_tablet/F0000070.rf\",\n+          \" hdfs://localhost:8020/accumulo\", \"2a\", \"default_tablet\", \" F0000070.rf\");\n+    } catch (IllegalArgumentException e) {}\n+    try {\n+      test(\"/accumulo/tables/2a/default_tablet/F0000070.rf\", \"\", \"2a\", \"default_tablet\",\n+          \"F0000070.rf\");\n+    } catch (IllegalArgumentException e) {}\n+    try {\n+      test(\"hdfs://localhost:8020/accumulo/tables/2a/F0000070.rf\", \"hdfs://localhost:8020/accumulo\",\n+          \"2a\", \"\", \"F0000070.rf\");\n+    } catch (IllegalArgumentException e) {}\n+    try {\n+      test(\"hdfs://localhost:8020/accumulo/tables/F0000070.rf\", \"hdfs://localhost:8020/accumulo\",\n+          null, \"\", \"F0000070.rf\");\n+    } catch (IllegalArgumentException e) {}\n+  }\n+\n+  private final String id = \"2a\";\n+  private final String dir = \"t-0003\";\n+  private final String filename = \"C0004.rf\";\n+\n+  @Test\n+  public void testFullPathWithVolume() {\n+    String volume = \"hdfs://1.2.3.4/accumulo\";\n+    String metadataEntry = volume + \"/tables/\" + id + \"/\" + dir + \"/\" + filename;\n+    test(metadataEntry, volume, id, dir, filename);\n+  }\n+\n+  @Test\n+  public void testNormalizePath() {\n+    String uglyVolume = \"hdfs://nn.somewhere.com:86753/accumulo/blah/.././/bad/bad2/../.././/////\";\n+    String metadataEntry = uglyVolume + \"/tables/\" + id + \"/\" + dir + \"/\" + filename;\n+    test(metadataEntry, \"hdfs://nn.somewhere.com:86753/accumulo\", id, dir, filename);", "originalCommit": "f51d1cb8ddec323fafac5b8787a6f9c269b04b1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed186a3270bbdbf738af8df82d797c128ff3fa90", "chunk": "diff --git a/core/src/test/java/org/apache/accumulo/core/metadata/schema/TabletFileTest.java b/core/src/test/java/org/apache/accumulo/core/metadata/schema/TabletFileTest.java\nindex 02b1f983a3..5bf13d4b82 100644\n--- a/core/src/test/java/org/apache/accumulo/core/metadata/schema/TabletFileTest.java\n+++ b/core/src/test/java/org/apache/accumulo/core/metadata/schema/TabletFileTest.java\n\n@@ -26,7 +26,7 @@ import org.junit.Test;\n \n public class TabletFileTest {\n \n-  private void test(String metadataEntry, String volume, String tableId, String tabletDir,\n+  private TabletFile test(String metadataEntry, String volume, String tableId, String tabletDir,\n       String fileName) {\n     TabletFile tabletFile = new TabletFile(metadataEntry);\n \n"}}, {"oid": "ed186a3270bbdbf738af8df82d797c128ff3fa90", "url": "https://github.com/apache/accumulo/commit/ed186a3270bbdbf738af8df82d797c128ff3fa90", "message": "More fixes to TabletFile and test", "committedDate": "2020-01-14T20:55:25Z", "type": "commit"}]}