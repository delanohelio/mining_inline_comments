{"pr_number": 1564, "pr_title": "Use single map method where possible.", "pr_createdAt": "2020-03-16T20:26:41Z", "pr_url": "https://github.com/apache/accumulo/pull/1564", "timeline": [{"oid": "08d07e1ce8f300a45c04c6c873cbaa221ea0ac34", "url": "https://github.com/apache/accumulo/commit/08d07e1ce8f300a45c04c6c873cbaa221ea0ac34", "message": "Use single map method where possible.\n\nReplace common usage patterns of java.util.Map with Java 8 methods such\nas computeIfAbsent(), putIfAbsent(), etc.", "committedDate": "2020-03-16T20:17:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwMzM3Mw==", "url": "https://github.com/apache/accumulo/pull/1564#discussion_r393403373", "bodyText": "If there aren't any checked exceptions, you can probably do e.getSecurityErrorCodes().forEach(...) instead of a loop over the entry set.", "author": "ctubbsii", "createdAt": "2020-03-17T01:57:25Z", "path": "core/src/main/java/org/apache/accumulo/core/client/mapred/AccumuloOutputFormat.java", "diffHunk": "@@ -552,13 +550,9 @@ public void close(Reporter reporter) throws IOException {\n       } catch (MutationsRejectedException e) {\n         if (!e.getSecurityErrorCodes().isEmpty()) {\n           HashMap<String,Set<SecurityErrorCode>> tables = new HashMap<>();\n-          for (Entry<TabletId,Set<SecurityErrorCode>> ke : e.getSecurityErrorCodes().entrySet()) {\n+          for (var ke : e.getSecurityErrorCodes().entrySet()) {", "originalCommit": "08d07e1ce8f300a45c04c6c873cbaa221ea0ac34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ba24c1d0dbd1574759109e9c94dcb55397dd4c9", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/client/mapred/AccumuloOutputFormat.java b/core/src/main/java/org/apache/accumulo/core/client/mapred/AccumuloOutputFormat.java\nindex 8434e0ebd2..738e6245e8 100644\n--- a/core/src/main/java/org/apache/accumulo/core/client/mapred/AccumuloOutputFormat.java\n+++ b/core/src/main/java/org/apache/accumulo/core/client/mapred/AccumuloOutputFormat.java\n\n@@ -549,13 +549,11 @@ public class AccumuloOutputFormat implements OutputFormat<Text,Mutation> {\n         mtbw.close();\n       } catch (MutationsRejectedException e) {\n         if (!e.getSecurityErrorCodes().isEmpty()) {\n-          HashMap<String,Set<SecurityErrorCode>> tables = new HashMap<>();\n-          for (var ke : e.getSecurityErrorCodes().entrySet()) {\n-            String tableId = ke.getKey().getTableId().toString();\n-            Set<SecurityErrorCode> secCodes = tables.computeIfAbsent(tableId, k -> new HashSet<>());\n-            secCodes.addAll(ke.getValue());\n-          }\n-\n+          var tables = new HashMap<String,Set<SecurityErrorCode>>();\n+          e.getSecurityErrorCodes().forEach((tabletId, secSet) -> {\n+            var tableId = tabletId.getTableId().toString();\n+            tables.computeIfAbsent(tableId, p -> new HashSet<>()).addAll(secSet);\n+          });\n           log.error(\"Not authorized to write to tables : \" + tables);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwNDQyMw==", "url": "https://github.com/apache/accumulo/pull/1564#discussion_r393404423", "bodyText": "One of the great things about .computeIfAbsent() is that you don't need to assign it to a variable... you could just immediately use it on the next line:\ntables.computeIfAbsent(tableId, k -> new HashSet<>()).addAll(ke.getValue());", "author": "ctubbsii", "createdAt": "2020-03-17T02:02:00Z", "path": "core/src/main/java/org/apache/accumulo/core/client/mapred/AccumuloOutputFormat.java", "diffHunk": "@@ -552,13 +550,9 @@ public void close(Reporter reporter) throws IOException {\n       } catch (MutationsRejectedException e) {\n         if (!e.getSecurityErrorCodes().isEmpty()) {\n           HashMap<String,Set<SecurityErrorCode>> tables = new HashMap<>();\n-          for (Entry<TabletId,Set<SecurityErrorCode>> ke : e.getSecurityErrorCodes().entrySet()) {\n+          for (var ke : e.getSecurityErrorCodes().entrySet()) {\n             String tableId = ke.getKey().getTableId().toString();\n-            Set<SecurityErrorCode> secCodes = tables.get(tableId);\n-            if (secCodes == null) {\n-              secCodes = new HashSet<>();\n-              tables.put(tableId, secCodes);\n-            }\n+            Set<SecurityErrorCode> secCodes = tables.computeIfAbsent(tableId, k -> new HashSet<>());", "originalCommit": "08d07e1ce8f300a45c04c6c873cbaa221ea0ac34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ba24c1d0dbd1574759109e9c94dcb55397dd4c9", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/client/mapred/AccumuloOutputFormat.java b/core/src/main/java/org/apache/accumulo/core/client/mapred/AccumuloOutputFormat.java\nindex 8434e0ebd2..738e6245e8 100644\n--- a/core/src/main/java/org/apache/accumulo/core/client/mapred/AccumuloOutputFormat.java\n+++ b/core/src/main/java/org/apache/accumulo/core/client/mapred/AccumuloOutputFormat.java\n\n@@ -549,13 +549,11 @@ public class AccumuloOutputFormat implements OutputFormat<Text,Mutation> {\n         mtbw.close();\n       } catch (MutationsRejectedException e) {\n         if (!e.getSecurityErrorCodes().isEmpty()) {\n-          HashMap<String,Set<SecurityErrorCode>> tables = new HashMap<>();\n-          for (var ke : e.getSecurityErrorCodes().entrySet()) {\n-            String tableId = ke.getKey().getTableId().toString();\n-            Set<SecurityErrorCode> secCodes = tables.computeIfAbsent(tableId, k -> new HashSet<>());\n-            secCodes.addAll(ke.getValue());\n-          }\n-\n+          var tables = new HashMap<String,Set<SecurityErrorCode>>();\n+          e.getSecurityErrorCodes().forEach((tabletId, secSet) -> {\n+            var tableId = tabletId.getTableId().toString();\n+            tables.computeIfAbsent(tableId, p -> new HashSet<>()).addAll(secSet);\n+          });\n           log.error(\"Not authorized to write to tables : \" + tables);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwNTY0Nw==", "url": "https://github.com/apache/accumulo/pull/1564#discussion_r393405647", "bodyText": "These look like they can simplify to:\nbinnedRanges.computeIfAbsent(location, k -> new HashMap<>())\n  .computeIfAbsent(ke, k -> new ArrayList<>())\n  .add(range);", "author": "ctubbsii", "createdAt": "2020-03-17T02:07:15Z", "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/TabletLocatorImpl.java", "diffHunk": "@@ -730,17 +730,10 @@ private void processInvalidated(ClientContext context, LockCheckerSession lcSess\n \n   protected static void addRange(Map<String,Map<KeyExtent,List<Range>>> binnedRanges,\n       String location, KeyExtent ke, Range range) {\n-    Map<KeyExtent,List<Range>> tablets = binnedRanges.get(location);\n-    if (tablets == null) {\n-      tablets = new HashMap<>();\n-      binnedRanges.put(location, tablets);\n-    }\n+    Map<KeyExtent,List<Range>> tablets =\n+        binnedRanges.computeIfAbsent(location, k -> new HashMap<>());\n \n-    List<Range> tabletsRanges = tablets.get(ke);\n-    if (tabletsRanges == null) {\n-      tabletsRanges = new ArrayList<>();\n-      tablets.put(ke, tabletsRanges);\n-    }\n+    List<Range> tabletsRanges = tablets.computeIfAbsent(ke, k -> new ArrayList<>());", "originalCommit": "08d07e1ce8f300a45c04c6c873cbaa221ea0ac34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ba24c1d0dbd1574759109e9c94dcb55397dd4c9", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/clientImpl/TabletLocatorImpl.java b/core/src/main/java/org/apache/accumulo/core/clientImpl/TabletLocatorImpl.java\nindex d9bedbce2d..06d85182af 100644\n--- a/core/src/main/java/org/apache/accumulo/core/clientImpl/TabletLocatorImpl.java\n+++ b/core/src/main/java/org/apache/accumulo/core/clientImpl/TabletLocatorImpl.java\n\n@@ -730,12 +730,8 @@ public class TabletLocatorImpl extends TabletLocator {\n \n   protected static void addRange(Map<String,Map<KeyExtent,List<Range>>> binnedRanges,\n       String location, KeyExtent ke, Range range) {\n-    Map<KeyExtent,List<Range>> tablets =\n-        binnedRanges.computeIfAbsent(location, k -> new HashMap<>());\n-\n-    List<Range> tabletsRanges = tablets.computeIfAbsent(ke, k -> new ArrayList<>());\n-\n-    tabletsRanges.add(range);\n+    binnedRanges.computeIfAbsent(location, k -> new HashMap<>())\n+        .computeIfAbsent(ke, k -> new ArrayList<>()).add(range);\n   }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwNjQyNA==", "url": "https://github.com/apache/accumulo/pull/1564#discussion_r393406424", "bodyText": "This seems unrelated. If having trouble with the formatter, could just remove that comment at the end of the line, or put it above the log statement.", "author": "ctubbsii", "createdAt": "2020-03-17T02:10:27Z", "path": "test/src/main/java/org/apache/accumulo/test/functional/ManyWriteAheadLogsIT.java", "diffHunk": "@@ -213,7 +213,8 @@ private void addOpenWals(ServerContext c, Set<String> allWalsSeen) throws Except\n           allWalsSeen.add(entry.getKey());\n           foundWal = true;\n         } else {\n-          log.debug(\"The WalState for {} is {}\", entry.getKey(), entry.getValue()); // CLOSED or UNREFERENCED\n+          log.debug(\"The WalState for {} is {}\", entry.getKey(), entry.getValue()); // CLOSED or\n+                                                                                    // UNREFERENCED", "originalCommit": "08d07e1ce8f300a45c04c6c873cbaa221ea0ac34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzNjk2Mg==", "url": "https://github.com/apache/accumulo/pull/1564#discussion_r393436962", "bodyText": "Disregard this one. I fixed the formatting in the master branch.", "author": "ctubbsii", "createdAt": "2020-03-17T04:18:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwNjQyNA=="}], "type": "inlineReview", "revised_code": {"commit": "637448ac5196d57bc34a38c7ccce3db14a466038", "chunk": "diff --git a/test/src/main/java/org/apache/accumulo/test/functional/ManyWriteAheadLogsIT.java b/test/src/main/java/org/apache/accumulo/test/functional/ManyWriteAheadLogsIT.java\nindex dd5a048153..a1e6411118 100644\n--- a/test/src/main/java/org/apache/accumulo/test/functional/ManyWriteAheadLogsIT.java\n+++ b/test/src/main/java/org/apache/accumulo/test/functional/ManyWriteAheadLogsIT.java\n\n@@ -213,8 +213,8 @@ public class ManyWriteAheadLogsIT extends AccumuloClusterHarness {\n           allWalsSeen.add(entry.getKey());\n           foundWal = true;\n         } else {\n-          log.debug(\"The WalState for {} is {}\", entry.getKey(), entry.getValue()); // CLOSED or\n-                                                                                    // UNREFERENCED\n+          // log CLOSED or UNREFERENCED to help debug this test\n+          log.debug(\"The WalState for {} is {}\", entry.getKey(), entry.getValue());\n         }\n       }\n \n"}}, {"oid": "637448ac5196d57bc34a38c7ccce3db14a466038", "url": "https://github.com/apache/accumulo/commit/637448ac5196d57bc34a38c7ccce3db14a466038", "message": "Merge branch 'master' into map-methods", "committedDate": "2020-03-17T04:19:34Z", "type": "commit"}, {"oid": "1ba24c1d0dbd1574759109e9c94dcb55397dd4c9", "url": "https://github.com/apache/accumulo/commit/1ba24c1d0dbd1574759109e9c94dcb55397dd4c9", "message": "Use single map method where possible.\n\nAdded additional refactoring to the various Map methods. Namely chaining\ncommands where appropriate.", "committedDate": "2020-03-17T18:58:09Z", "type": "commit"}, {"oid": "6304177aa32208dfde7729a11b8bca53c62886ed", "url": "https://github.com/apache/accumulo/commit/6304177aa32208dfde7729a11b8bca53c62886ed", "message": "Merge branch 'map-methods' of github.com:jmark99/accumulo into map-methods", "committedDate": "2020-03-17T19:00:24Z", "type": "commit"}]}