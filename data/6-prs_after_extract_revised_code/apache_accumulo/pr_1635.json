{"pr_number": 1635, "pr_title": "Create bulkRename method in VolumeManager", "pr_createdAt": "2020-06-19T13:56:00Z", "pr_url": "https://github.com/apache/accumulo/pull/1635", "timeline": [{"oid": "456bce85074d4bfe6666cb737a6aecc37f9a2eb1", "url": "https://github.com/apache/accumulo/commit/456bce85074d4bfe6666cb737a6aecc37f9a2eb1", "message": "Create bulkRename method in VolumeManager\n\n* Refactor fate code in BulkImportMove and MoveExportedFiles to call the\nnew method for handling renames of lots of files", "committedDate": "2020-06-19T13:50:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NDI1NA==", "url": "https://github.com/apache/accumulo/pull/1635#discussion_r443064254", "bodyText": "should this throw an exception?", "author": "keith-turner", "createdAt": "2020-06-19T22:22:20Z", "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "diffHunk": "@@ -289,6 +294,38 @@ public boolean rename(Path path, Path newPath) throws IOException {\n     return source.rename(path, newPath);\n   }\n \n+  @Override\n+  public List<Future<Boolean>> bulkRename(Map<Path,Path> oldToNewPathMap,\n+      SimpleThreadPool workerPool, String transactionId) throws InterruptedException {\n+    List<Future<Boolean>> results = new ArrayList<>();\n+    oldToNewPathMap.forEach((oldPath, newPath) -> results.add(workerPool.submit(() -> {\n+      boolean success;\n+      try {\n+        success = rename(oldPath, newPath);\n+      } catch (IOException e) {\n+        // The rename could have failed because this is the second time its running (failures\n+        // could cause this to run multiple times).\n+        if (!exists(newPath) || exists(oldPath)) {\n+          throw e;\n+        }\n+        log.debug(\n+            \"Ignoring rename exception for {} because destination already exists. orig: {} new: {}\",\n+            transactionId, oldPath, newPath, e);\n+        success = true;\n+      }\n+      if (!success) {\n+        log.error(\"Rename operation {} returned false. orig: {} new: {}\", transactionId, oldPath,", "originalCommit": "456bce85074d4bfe6666cb737a6aecc37f9a2eb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2NTYxNA==", "url": "https://github.com/apache/accumulo/pull/1635#discussion_r447065614", "bodyText": "My plan was to preserve current behavior of both methods.  Making this throw an exception would change the behavior where one file failing to rename fails the whole operation.", "author": "milleruntime", "createdAt": "2020-06-29T15:38:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NDI1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3MjYzMg==", "url": "https://github.com/apache/accumulo/pull/1635#discussion_r447772632", "bodyText": "The code that handles the futures deals with execution exceptions and false returns.  Could possibly make this simpler and not return anything Future<Void> and only deal with execution exceptions.", "author": "keith-turner", "createdAt": "2020-06-30T15:26:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NDI1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwMDk2Mw==", "url": "https://github.com/apache/accumulo/pull/1635#discussion_r447900963", "bodyText": "This does seem to simplify things some.  You still suggesting we throw an error here when !success?", "author": "milleruntime", "createdAt": "2020-06-30T18:40:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NDI1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5MjM1OQ==", "url": "https://github.com/apache/accumulo/pull/1635#discussion_r447992359", "bodyText": "I took a quick look at the code calling bulk rename and I think it always fails if any of the futures fail.   I was wondering if it would make sense to move the future handling inside bulk rename and just have bulkRename throw an IOE if any future fails.  As long as this can still result in good error messages to users, I think may simplify the code calling bulk rename alot.\n\nThis does seem to simplify things some. You still suggesting we throw an error here when !success?\n\nMoving the handling of futures into the same method makes this less of an issue because there is only one place to get it right (if a boolean and exception need to be checked).", "author": "keith-turner", "createdAt": "2020-06-30T21:33:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NDI1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEyMzE5Mg==", "url": "https://github.com/apache/accumulo/pull/1635#discussion_r449123192", "bodyText": "This did seem to clean up the handling in the FATE methods.  Checkout my latest, I think this is ready to go now.", "author": "milleruntime", "createdAt": "2020-07-02T16:08:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NDI1NA=="}], "type": "inlineReview", "revised_code": {"commit": "9b258447471ac196b27734d626e15ab29cedd6e7", "chunk": "diff --git a/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java b/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java\nindex ceaed532b6..616097367f 100644\n--- a/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java\n+++ b/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java\n\n@@ -295,9 +295,10 @@ public class VolumeManagerImpl implements VolumeManager {\n   }\n \n   @Override\n-  public List<Future<Boolean>> bulkRename(Map<Path,Path> oldToNewPathMap,\n-      SimpleThreadPool workerPool, String transactionId) throws InterruptedException {\n+  public List<Future<Boolean>> bulkRename(Map<Path,Path> oldToNewPathMap, int poolSize,\n+      String poolName, String transactionId) throws InterruptedException {\n     List<Future<Boolean>> results = new ArrayList<>();\n+    SimpleThreadPool workerPool = new SimpleThreadPool(poolSize, poolName);\n     oldToNewPathMap.forEach((oldPath, newPath) -> results.add(workerPool.submit(() -> {\n       boolean success;\n       try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NTAzNg==", "url": "https://github.com/apache/accumulo/pull/1635#discussion_r443065036", "bodyText": "A lambda within a lambda. I was looking for a way to add a third inner lambda, but did not see an opportunity.", "author": "keith-turner", "createdAt": "2020-06-19T22:25:41Z", "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "diffHunk": "@@ -289,6 +294,38 @@ public boolean rename(Path path, Path newPath) throws IOException {\n     return source.rename(path, newPath);\n   }\n \n+  @Override\n+  public List<Future<Boolean>> bulkRename(Map<Path,Path> oldToNewPathMap,\n+      SimpleThreadPool workerPool, String transactionId) throws InterruptedException {\n+    List<Future<Boolean>> results = new ArrayList<>();\n+    oldToNewPathMap.forEach((oldPath, newPath) -> results.add(workerPool.submit(() -> {", "originalCommit": "456bce85074d4bfe6666cb737a6aecc37f9a2eb1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9b258447471ac196b27734d626e15ab29cedd6e7", "chunk": "diff --git a/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java b/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java\nindex ceaed532b6..616097367f 100644\n--- a/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java\n+++ b/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java\n\n@@ -295,9 +295,10 @@ public class VolumeManagerImpl implements VolumeManager {\n   }\n \n   @Override\n-  public List<Future<Boolean>> bulkRename(Map<Path,Path> oldToNewPathMap,\n-      SimpleThreadPool workerPool, String transactionId) throws InterruptedException {\n+  public List<Future<Boolean>> bulkRename(Map<Path,Path> oldToNewPathMap, int poolSize,\n+      String poolName, String transactionId) throws InterruptedException {\n     List<Future<Boolean>> results = new ArrayList<>();\n+    SimpleThreadPool workerPool = new SimpleThreadPool(poolSize, poolName);\n     oldToNewPathMap.forEach((oldPath, newPath) -> results.add(workerPool.submit(() -> {\n       boolean success;\n       try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NjUwNQ==", "url": "https://github.com/apache/accumulo/pull/1635#discussion_r443066505", "bodyText": "If this method is going to shutdown the pool, I think it would be better if it created the pool also.  This method could accept a number of threads and operation name instead of a thread pool and use those to create the pool.", "author": "keith-turner", "createdAt": "2020-06-19T22:32:46Z", "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "diffHunk": "@@ -289,6 +294,38 @@ public boolean rename(Path path, Path newPath) throws IOException {\n     return source.rename(path, newPath);\n   }\n \n+  @Override\n+  public List<Future<Boolean>> bulkRename(Map<Path,Path> oldToNewPathMap,\n+      SimpleThreadPool workerPool, String transactionId) throws InterruptedException {\n+    List<Future<Boolean>> results = new ArrayList<>();\n+    oldToNewPathMap.forEach((oldPath, newPath) -> results.add(workerPool.submit(() -> {\n+      boolean success;\n+      try {\n+        success = rename(oldPath, newPath);\n+      } catch (IOException e) {\n+        // The rename could have failed because this is the second time its running (failures\n+        // could cause this to run multiple times).\n+        if (!exists(newPath) || exists(oldPath)) {\n+          throw e;\n+        }\n+        log.debug(\n+            \"Ignoring rename exception for {} because destination already exists. orig: {} new: {}\",\n+            transactionId, oldPath, newPath, e);\n+        success = true;\n+      }\n+      if (!success) {\n+        log.error(\"Rename operation {} returned false. orig: {} new: {}\", transactionId, oldPath,\n+            newPath);\n+      } else if (log.isTraceEnabled()) {\n+        log.trace(\"{} moved {} to {}\", transactionId, oldPath, newPath);\n+      }\n+      return success;\n+    })));\n+    workerPool.shutdown();", "originalCommit": "456bce85074d4bfe6666cb737a6aecc37f9a2eb1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1OTQxMw==", "url": "https://github.com/apache/accumulo/pull/1635#discussion_r447059413", "bodyText": "That makes more sense to isolate the pool.  I will make that change.", "author": "milleruntime", "createdAt": "2020-06-29T15:29:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NjUwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9b258447471ac196b27734d626e15ab29cedd6e7", "chunk": "diff --git a/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java b/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java\nindex ceaed532b6..616097367f 100644\n--- a/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java\n+++ b/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java\n\n@@ -295,9 +295,10 @@ public class VolumeManagerImpl implements VolumeManager {\n   }\n \n   @Override\n-  public List<Future<Boolean>> bulkRename(Map<Path,Path> oldToNewPathMap,\n-      SimpleThreadPool workerPool, String transactionId) throws InterruptedException {\n+  public List<Future<Boolean>> bulkRename(Map<Path,Path> oldToNewPathMap, int poolSize,\n+      String poolName, String transactionId) throws InterruptedException {\n     List<Future<Boolean>> results = new ArrayList<>();\n+    SimpleThreadPool workerPool = new SimpleThreadPool(poolSize, poolName);\n     oldToNewPathMap.forEach((oldPath, newPath) -> results.add(workerPool.submit(() -> {\n       boolean success;\n       try {\n"}}, {"oid": "9b258447471ac196b27734d626e15ab29cedd6e7", "url": "https://github.com/apache/accumulo/commit/9b258447471ac196b27734d626e15ab29cedd6e7", "message": "Create thread pool in method", "committedDate": "2020-06-29T18:06:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3MzE0Mg==", "url": "https://github.com/apache/accumulo/pull/1635#discussion_r447773142", "bodyText": "I wonder if this check should also be done in the case where rename returns false.", "author": "keith-turner", "createdAt": "2020-06-30T15:26:52Z", "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "diffHunk": "@@ -289,6 +294,39 @@ public boolean rename(Path path, Path newPath) throws IOException {\n     return source.rename(path, newPath);\n   }\n \n+  @Override\n+  public List<Future<Boolean>> bulkRename(Map<Path,Path> oldToNewPathMap, int poolSize,\n+      String poolName, String transactionId) throws InterruptedException {\n+    List<Future<Boolean>> results = new ArrayList<>();\n+    SimpleThreadPool workerPool = new SimpleThreadPool(poolSize, poolName);\n+    oldToNewPathMap.forEach((oldPath, newPath) -> results.add(workerPool.submit(() -> {\n+      boolean success;\n+      try {\n+        success = rename(oldPath, newPath);\n+      } catch (IOException e) {\n+        // The rename could have failed because this is the second time its running (failures\n+        // could cause this to run multiple times).\n+        if (!exists(newPath) || exists(oldPath)) {", "originalCommit": "9b258447471ac196b27734d626e15ab29cedd6e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4NTk1MA==", "url": "https://github.com/apache/accumulo/pull/1635#discussion_r447885950", "bodyText": "In that case would we throw a new IOException?", "author": "milleruntime", "createdAt": "2020-06-30T18:14:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3MzE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4Mjk4Ng==", "url": "https://github.com/apache/accumulo/pull/1635#discussion_r449082986", "bodyText": "I decided since we are already logging an error per file when rename returns false, we should not also throw a new error, failing the transation.  It seems like this is just to rethrow any errors we may care about.", "author": "milleruntime", "createdAt": "2020-07-02T15:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3MzE0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "f5399cc4ccd03400d9ec9e0a3cb05f299c3f65e4", "chunk": "diff --git a/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java b/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java\nindex 616097367f..5a36365777 100644\n--- a/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java\n+++ b/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java\n\n@@ -295,9 +296,9 @@ public class VolumeManagerImpl implements VolumeManager {\n   }\n \n   @Override\n-  public List<Future<Boolean>> bulkRename(Map<Path,Path> oldToNewPathMap, int poolSize,\n-      String poolName, String transactionId) throws InterruptedException {\n-    List<Future<Boolean>> results = new ArrayList<>();\n+  public void bulkRename(Map<Path,Path> oldToNewPathMap, int poolSize, String poolName,\n+      String transactionId) throws IOException {\n+    List<Future<Void>> results = new ArrayList<>();\n     SimpleThreadPool workerPool = new SimpleThreadPool(poolSize, poolName);\n     oldToNewPathMap.forEach((oldPath, newPath) -> results.add(workerPool.submit(() -> {\n       boolean success;\n"}}, {"oid": "f5399cc4ccd03400d9ec9e0a3cb05f299c3f65e4", "url": "https://github.com/apache/accumulo/commit/f5399cc4ccd03400d9ec9e0a3cb05f299c3f65e4", "message": "Move handling of futures into VolumeManagerImpl method", "committedDate": "2020-07-02T15:31:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIxMjAxMw==", "url": "https://github.com/apache/accumulo/pull/1635#discussion_r449212013", "bodyText": "Seems like this should do the following.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (!success) {\n          \n          \n            \n                    log.error(\"Rename operation {} returned false. orig: {} new: {}\", transactionId, oldPath,\n          \n          \n            \n                        newPath);\n          \n          \n            \n                  } else if (log.isTraceEnabled()) {\n          \n          \n            \n                  if (!success && (!exists(newPath) || exists(oldPath))) {\n          \n          \n            \n                      throw new IOException(\"Rename operation \"+transactionId+\" returned false. orig: \"+oldPath+\" new: \"+newPath);\n          \n          \n            \n                  } else if (log.isTraceEnabled()) {", "author": "keith-turner", "createdAt": "2020-07-02T18:58:55Z", "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java", "diffHunk": "@@ -289,6 +295,45 @@ public boolean rename(Path path, Path newPath) throws IOException {\n     return source.rename(path, newPath);\n   }\n \n+  @Override\n+  public void bulkRename(Map<Path,Path> oldToNewPathMap, int poolSize, String poolName,\n+      String transactionId) throws IOException {\n+    List<Future<Void>> results = new ArrayList<>();\n+    SimpleThreadPool workerPool = new SimpleThreadPool(poolSize, poolName);\n+    oldToNewPathMap.forEach((oldPath, newPath) -> results.add(workerPool.submit(() -> {\n+      boolean success;\n+      try {\n+        success = rename(oldPath, newPath);\n+      } catch (IOException e) {\n+        // The rename could have failed because this is the second time its running (failures\n+        // could cause this to run multiple times).\n+        if (!exists(newPath) || exists(oldPath)) {\n+          throw e;\n+        }\n+        log.debug(\n+            \"Ignoring rename exception for {} because destination already exists. orig: {} new: {}\",\n+            transactionId, oldPath, newPath, e);\n+        success = true;\n+      }\n+      if (!success) {\n+        log.error(\"Rename operation {} returned false. orig: {} new: {}\", transactionId, oldPath,\n+            newPath);\n+      } else if (log.isTraceEnabled()) {", "originalCommit": "f5399cc4ccd03400d9ec9e0a3cb05f299c3f65e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d66514d5e31062ed185ef5eb70913cbb3f382e55", "chunk": "diff --git a/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java b/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java\nindex 5a36365777..e6f35b19a1 100644\n--- a/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java\n+++ b/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java\n\n@@ -315,9 +315,8 @@ public class VolumeManagerImpl implements VolumeManager {\n             transactionId, oldPath, newPath, e);\n         success = true;\n       }\n-      if (!success) {\n-        log.error(\"Rename operation {} returned false. orig: {} new: {}\", transactionId, oldPath,\n-            newPath);\n+      if (!success && (!exists(newPath) || exists(oldPath))) {\n+          throw new IOException(\"Rename operation \"+transactionId+\" returned false. orig: \"+oldPath+\" new: \"+newPath);\n       } else if (log.isTraceEnabled()) {\n         log.trace(\"{} moved {} to {}\", transactionId, oldPath, newPath);\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIxMjkxNg==", "url": "https://github.com/apache/accumulo/pull/1635#discussion_r449212916", "bodyText": "could add something to the docs about this operation being idempotent, safe to call again after previous partial run of bulkRename", "author": "keith-turner", "createdAt": "2020-07-02T19:00:51Z", "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManager.java", "diffHunk": "@@ -149,6 +150,11 @@ FSDataOutputStream createSyncable(Path logPath, int buffersize, short replicatio\n   // volumes\n   boolean rename(Path path, Path newPath) throws IOException;\n \n+  // rename lots of files at once in a thread pool\n+  // returns once all the threads have completed", "originalCommit": "f5399cc4ccd03400d9ec9e0a3cb05f299c3f65e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "355b0e94cc8d5bfa3bfe49f1563ec5b2da3eb681", "chunk": "diff --git a/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManager.java b/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManager.java\nindex 46207f3466..2c315cf3c7 100644\n--- a/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManager.java\n+++ b/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManager.java\n\n@@ -150,8 +150,11 @@ public interface VolumeManager extends AutoCloseable {\n   // volumes\n   boolean rename(Path path, Path newPath) throws IOException;\n \n-  // rename lots of files at once in a thread pool\n-  // returns once all the threads have completed\n+  /**\n+   * Rename lots of files at once in a thread pool and return once all the threads have completed.\n+   * This operation should be idempotent to allow calling multiple times in the case of a partial\n+   * completion.\n+   */\n   void bulkRename(Map<Path,Path> oldToNewPathMap, int poolSize, String poolName,\n       String transactionId) throws IOException;\n \n"}}, {"oid": "d66514d5e31062ed185ef5eb70913cbb3f382e55", "url": "https://github.com/apache/accumulo/commit/d66514d5e31062ed185ef5eb70913cbb3f382e55", "message": "Update server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java\n\nCo-authored-by: Keith Turner <kturner@apache.org>", "committedDate": "2020-07-02T19:14:31Z", "type": "commit"}, {"oid": "355b0e94cc8d5bfa3bfe49f1563ec5b2da3eb681", "url": "https://github.com/apache/accumulo/commit/355b0e94cc8d5bfa3bfe49f1563ec5b2da3eb681", "message": "Cleanup", "committedDate": "2020-07-02T19:23:45Z", "type": "commit"}]}