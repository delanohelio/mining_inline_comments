{"pr_number": 1798, "pr_title": "Hash upgrade", "pr_createdAt": "2020-11-20T14:20:12Z", "pr_url": "https://github.com/apache/accumulo/pull/1798", "timeline": [{"oid": "f8ba221424f54688a20a72d5c7856920b3a0d555", "url": "https://github.com/apache/accumulo/commit/f8ba221424f54688a20a72d5c7856920b3a0d555", "message": "Upgrade PW_HASH_ALGORITHM\n\nThe use of less robust hashes would prevent a system deploying Accumulo\nfrom meeting FIPS requirements so by updating it we avoid forcing\ndownstream users seeking FIPS certification from getting an exception.", "committedDate": "2020-11-17T17:52:25Z", "type": "commit"}, {"oid": "603d1933d250c77bdd5987dcbcf89b0c2514b4b9", "url": "https://github.com/apache/accumulo/commit/603d1933d250c77bdd5987dcbcf89b0c2514b4b9", "message": "Ability to update password hash\n\nSwitch to crypt(3) hashing when storing user passwords in zk\nExtending authentication to recognize users with outdated hash and\nupdate them on successful authentication", "committedDate": "2020-11-20T14:13:45Z", "type": "commit"}, {"oid": "ebed3839c09ab1cbab087e719a4d414f8008fbd5", "url": "https://github.com/apache/accumulo/commit/ebed3839c09ab1cbab087e719a4d414f8008fbd5", "message": "Hash upgrade\n\nadd missing return", "committedDate": "2020-11-20T14:23:32Z", "type": "commit"}, {"oid": "8f7c48d1fe5be07512fec8f0b7313fa505586a0e", "url": "https://github.com/apache/accumulo/commit/8f7c48d1fe5be07512fec8f0b7313fa505586a0e", "message": "Hash upgrade\n\nfix formatting", "committedDate": "2020-11-20T15:12:59Z", "type": "commit"}, {"oid": "d71c162ad1e9e684e7c59ba5b734fef9b6455513", "url": "https://github.com/apache/accumulo/commit/d71c162ad1e9e684e7c59ba5b734fef9b6455513", "message": "Hash upgrade\n\nfix checkstyle\nfix unsafe comparison of hash", "committedDate": "2020-11-20T16:05:19Z", "type": "commit"}, {"oid": "4c8fedce90487c40ec4b740bc98dc181177cc71f", "url": "https://github.com/apache/accumulo/commit/4c8fedce90487c40ec4b740bc98dc181177cc71f", "message": "Hash upgrade\n\nanother checkstyle fix", "committedDate": "2020-11-20T17:41:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NjY1NA==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528696654", "bodyText": "since we aren't including any details about which user(s) are impacted, I'd rather we not get a WARN for each user. could we move this to after we finish iterating with a summary of how many users?\nIf an operator needed to move towards eliminating these warn messages, how would they get the list of users that need to authenticate to the system?", "author": "busbey", "createdAt": "2020-11-23T13:19:02Z", "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -52,6 +52,23 @@ public void initialize(ServerContext context) {\n     this.context = context;\n     zooCache = new ZooCache(context.getZooReaderWriter(), null);\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n+    checkOutdatedHashes();\n+  }\n+\n+  private void checkOutdatedHashes() {\n+    try {\n+      listUsers().forEach(user -> {\n+        String zpath = ZKUserPath + \"/\" + user;\n+        byte[] zkData = zooCache.get(zpath);\n+        if (ZKSecurityTool.isOutdatedPass(zkData)) {\n+          log.warn(\"Found user(s) with outdated password hash. These will be re-hashed\"\n+              + \" on successful authentication.\");", "originalCommit": "4c8fedce90487c40ec4b740bc98dc181177cc71f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1MjA0MQ==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528852041", "bodyText": "One option is to provide the user name during these warnings. Another is to provide single warning, rather than one per user, and then provide some other mechanism to list outdated entries.", "author": "ctubbsii", "createdAt": "2020-11-23T16:52:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NjY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2ODIxMw==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528868213", "bodyText": "I'm never sure exactly how much detail is too much when it comes to logging security features. I can add an affected user count.\nI'm not sure the operator has to or should do anything, the update is automatic. But with their current tools they could replicate what the code does and could go through the users zNode checking hash lengths. Alternately I could list the affected user principals in the warning but that feels unsafe. Do you have something in mind?", "author": "BukrosSzabolcs", "createdAt": "2020-11-23T17:16:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NjY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkwMzUxOA==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528903518", "bodyText": "The list of users in the server logs is okay. However, I just realized... this method is only ever called when we're starting from an empty user database (on initialize... or re-initialize), so there shouldn't be any matching the old hashes anyway at the point this code is run. Or did I miss something?\nI do think maybe it would be worth the master server checking to see if any users are using the old hashing, and listing them in the server logs on startup, as an upgrade warning. In future, we can turn that into an upgrade blocker (so we can eventually drop the code that supports reading the old hashes).", "author": "ctubbsii", "createdAt": "2020-11-23T18:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NjY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyNjM5Mw==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529726393", "bodyText": "Added the check to master startup through SecurityOperation.", "author": "BukrosSzabolcs", "createdAt": "2020-11-24T16:50:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NjY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxNTg5OQ==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529815899", "bodyText": "@BukrosSzabolcs Feel free to mark the conversation as \"Resolved\" if you've taken steps to address the comments. It cleans up the interface and makes it easier for subsequent reviews. \ud83d\ude3a", "author": "ctubbsii", "createdAt": "2020-11-24T19:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NjY1NA=="}], "type": "inlineReview", "revised_code": {"commit": "b10b77a3de8a942374de90caafbbf52ce07dd0a1", "chunk": "diff --git a/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java b/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java\nindex 79198f77a0..314dc202f4 100644\n--- a/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java\n+++ b/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java\n\n@@ -52,23 +54,33 @@ public final class ZKAuthenticator implements Authenticator {\n     this.context = context;\n     zooCache = new ZooCache(context.getZooReaderWriter(), null);\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n-    checkOutdatedHashes();\n   }\n \n-  private void checkOutdatedHashes() {\n+  /**\n+   * Checks stored users and logs a warning containing the ones with outdated hashes.\n+   */\n+  public boolean hasOutdatedHashes() {\n+    List<String> outdatedUsers = new LinkedList<String>();\n     try {\n       listUsers().forEach(user -> {\n         String zpath = ZKUserPath + \"/\" + user;\n         byte[] zkData = zooCache.get(zpath);\n         if (ZKSecurityTool.isOutdatedPass(zkData)) {\n-          log.warn(\"Found user(s) with outdated password hash. These will be re-hashed\"\n-              + \" on successful authentication.\");\n-          return;\n+          outdatedUsers.add(user);\n         }\n       });\n     } catch (NullPointerException e) {\n-      // initializeSecurity was not called yet, there could be no outdated passwords stored\n+      log.debug(\n+          \"initializeSecurity was not called yet, there could be no outdated passwords stored\");\n     }\n+    if (!outdatedUsers.isEmpty()) {\n+      log.warn(\n+          \"Found {} user(s) with outdated password hash. These will be re-hashed\"\n+              + \" on successful authentication. The user(s) : {}\",\n+          outdatedUsers.size(), String.join(\", \", outdatedUsers));\n+      return true;\n+    }\n+    return false;\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NzAyMA==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528697020", "bodyText": "log a DEBUG message with these details.", "author": "busbey", "createdAt": "2020-11-23T13:19:34Z", "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -52,6 +52,23 @@ public void initialize(ServerContext context) {\n     this.context = context;\n     zooCache = new ZooCache(context.getZooReaderWriter(), null);\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n+    checkOutdatedHashes();\n+  }\n+\n+  private void checkOutdatedHashes() {\n+    try {\n+      listUsers().forEach(user -> {\n+        String zpath = ZKUserPath + \"/\" + user;\n+        byte[] zkData = zooCache.get(zpath);\n+        if (ZKSecurityTool.isOutdatedPass(zkData)) {\n+          log.warn(\"Found user(s) with outdated password hash. These will be re-hashed\"\n+              + \" on successful authentication.\");\n+          return;\n+        }\n+      });\n+    } catch (NullPointerException e) {\n+      // initializeSecurity was not called yet, there could be no outdated passwords stored", "originalCommit": "4c8fedce90487c40ec4b740bc98dc181177cc71f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1MjYwMw==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528852603", "bodyText": "Could also avoid this by checking if the zk node exists first.", "author": "ctubbsii", "createdAt": "2020-11-23T16:53:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NzAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg3NTcwNQ==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528875705", "bodyText": "The zknode missing should be a corner case so I would prefer to keep the try/catch. I'll add a debug log message.", "author": "BukrosSzabolcs", "createdAt": "2020-11-23T17:27:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NzAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkyMTAzNw==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528921037", "bodyText": "It looks like initialize itself is already an edge case... see my comment at #1798 (comment)", "author": "ctubbsii", "createdAt": "2020-11-23T18:45:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NzAyMA=="}], "type": "inlineReview", "revised_code": {"commit": "b10b77a3de8a942374de90caafbbf52ce07dd0a1", "chunk": "diff --git a/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java b/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java\nindex 79198f77a0..314dc202f4 100644\n--- a/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java\n+++ b/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java\n\n@@ -52,23 +54,33 @@ public final class ZKAuthenticator implements Authenticator {\n     this.context = context;\n     zooCache = new ZooCache(context.getZooReaderWriter(), null);\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n-    checkOutdatedHashes();\n   }\n \n-  private void checkOutdatedHashes() {\n+  /**\n+   * Checks stored users and logs a warning containing the ones with outdated hashes.\n+   */\n+  public boolean hasOutdatedHashes() {\n+    List<String> outdatedUsers = new LinkedList<String>();\n     try {\n       listUsers().forEach(user -> {\n         String zpath = ZKUserPath + \"/\" + user;\n         byte[] zkData = zooCache.get(zpath);\n         if (ZKSecurityTool.isOutdatedPass(zkData)) {\n-          log.warn(\"Found user(s) with outdated password hash. These will be re-hashed\"\n-              + \" on successful authentication.\");\n-          return;\n+          outdatedUsers.add(user);\n         }\n       });\n     } catch (NullPointerException e) {\n-      // initializeSecurity was not called yet, there could be no outdated passwords stored\n+      log.debug(\n+          \"initializeSecurity was not called yet, there could be no outdated passwords stored\");\n     }\n+    if (!outdatedUsers.isEmpty()) {\n+      log.warn(\n+          \"Found {} user(s) with outdated password hash. These will be re-hashed\"\n+              + \" on successful authentication. The user(s) : {}\",\n+          outdatedUsers.size(), String.join(\", \", outdatedUsers));\n+      return true;\n+    }\n+    return false;\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5Nzg2NQ==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528697865", "bodyText": "could we log a WARN message that this method has been used? that way it would show up in operator logs should we mistakenly use it in a non-test context.", "author": "busbey", "createdAt": "2020-11-23T13:20:54Z", "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -116,6 +133,31 @@ public void createUser(String principal, AuthenticationToken token)\n     }\n   }\n \n+  /**\n+   * Creates user with outdated password hash for testing\n+   *\n+   * @deprecated since 2.1.0, only present for testing DO NOT USE!\n+   */", "originalCommit": "4c8fedce90487c40ec4b740bc98dc181177cc71f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg4Mzg3OQ==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528883879", "bodyText": "Why do you feel a warning is necessary? It's not a widely used method and the original name was re-used for the new functionality. But if we would add a safeguard I would prefer to throw an AccumuloSecurityException at the end of the method. We can catch it in test context and would be harder to miss for a dev than a log msg. What do you think?", "author": "BukrosSzabolcs", "createdAt": "2020-11-23T17:41:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5Nzg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM2NzgwMQ==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r530367801", "bodyText": "yeah that sounds great.", "author": "busbey", "createdAt": "2020-11-25T13:19:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5Nzg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3MzM0Ng==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r530373346", "bodyText": "Just realized the only reason for this method was that the IT tests required it, but with reworking those to unit tests this is no longer used. So I'll just remove this.", "author": "BukrosSzabolcs", "createdAt": "2020-11-25T13:28:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5Nzg2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1ccfe8fd1348ee1a6f661369e57d4836efe29046", "chunk": "diff --git a/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java b/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java\nindex 79198f77a0..c2477865cd 100644\n--- a/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java\n+++ b/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java\n\n@@ -133,31 +145,6 @@ public final class ZKAuthenticator implements Authenticator {\n     }\n   }\n \n-  /**\n-   * Creates user with outdated password hash for testing\n-   *\n-   * @deprecated since 2.1.0, only present for testing DO NOT USE!\n-   */\n-  public void createOutdatedUser(String principal, AuthenticationToken token)\n-      throws AccumuloSecurityException {\n-    try {\n-      if (!(token instanceof PasswordToken))\n-        throw new AccumuloSecurityException(principal, SecurityErrorCode.INVALID_TOKEN);\n-      PasswordToken pt = (PasswordToken) token;\n-      constructUser(principal, ZKSecurityTool.createOutdatedPass(pt.getPassword()));\n-    } catch (KeeperException e) {\n-      if (e.code().equals(KeeperException.Code.NODEEXISTS))\n-        throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_EXISTS, e);\n-      throw new AccumuloSecurityException(principal, SecurityErrorCode.CONNECTION_ERROR, e);\n-    } catch (InterruptedException e) {\n-      log.error(\"{}\", e.getMessage(), e);\n-      throw new RuntimeException(e);\n-    } catch (AccumuloException e) {\n-      log.error(\"{}\", e.getMessage(), e);\n-      throw new AccumuloSecurityException(principal, SecurityErrorCode.DEFAULT_SECURITY_ERROR, e);\n-    }\n-  }\n-\n   @Override\n   public void dropUser(String user) throws AccumuloSecurityException {\n     try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5OTgyMw==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528699823", "bodyText": "if we fail to update the password for some reason (like a transient zk write failure), at this point shouldn't we still return that they correctly authenticated?", "author": "busbey", "createdAt": "2020-11-23T13:24:11Z", "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -180,18 +222,43 @@ public boolean authenticateUser(String principal, AuthenticationToken token)\n     if (!(token instanceof PasswordToken))\n       throw new AccumuloSecurityException(principal, SecurityErrorCode.INVALID_TOKEN);\n     PasswordToken pt = (PasswordToken) token;\n-    byte[] pass;\n+    byte[] zkData;\n     String zpath = ZKUserPath + \"/\" + principal;\n-    pass = zooCache.get(zpath);\n-    boolean result = ZKSecurityTool.checkPass(pt.getPassword(), pass);\n+    zkData = zooCache.get(zpath);\n+    boolean result = authenticateUser(principal, pt, zkData);\n     if (!result) {\n       zooCache.clear(zpath);\n-      pass = zooCache.get(zpath);\n-      result = ZKSecurityTool.checkPass(pt.getPassword(), pass);\n+      zkData = zooCache.get(zpath);\n+      result = authenticateUser(principal, pt, zkData);\n     }\n     return result;\n   }\n \n+  private boolean authenticateUser(String principal, PasswordToken pt, byte[] zkData) {\n+    if (zkData == null) {\n+      return false;\n+    }\n+\n+    // if the hash does not match the outdated format use Crypt to verify it\n+    if (!ZKSecurityTool.isOutdatedPass(zkData)) {\n+      return ZKSecurityTool.checkCryptPass(pt.getPassword(), zkData);\n+    }\n+\n+    if (!ZKSecurityTool.checkPass(pt.getPassword(), zkData)) {\n+      // if password does not match we are done\n+      return false;\n+    }\n+\n+    // if the password is correct we have to update the stored hash with new algorithm\n+    try {\n+      changePassword(principal, pt);\n+      return true;\n+    } catch (AccumuloSecurityException e) {\n+      log.error(\"Failed to update hashed user password for user: {}\", principal, e);\n+    }\n+    return false;", "originalCommit": "4c8fedce90487c40ec4b740bc98dc181177cc71f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5NTM0MQ==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528895341", "bodyText": "My reasoning was that we are trying to re-hash the password if possible and on failure we are triggering retry and it should not consistently fail. I guess the question is how aggressively are we trying to re-hash. It would be fine for me either way. Please let me know if you would prefer it changed.", "author": "BukrosSzabolcs", "createdAt": "2020-11-23T17:59:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5OTgyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3Mzk0MQ==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r530373941", "bodyText": "I think this comes down to wether we want to fail open or closed for updating to a more secure hash. I personally prefer failing open in this case -- essentially if there's a problem writing to ZK we did not consider here then the system will keep working as before the upgrade but with a persistent log message an operator could use to go fix things.\nI could see at least one argument for failing closed: a person or system not being able to talk to Accumulo will be a very loud noise that will ensure whatever is preventing us from storing things more securely gets handled. Presuming secure hashing of password data is an important system requirement in a particular Accumulo deployment that is a good thing.\nDoes anyone else feel strongly?", "author": "busbey", "createdAt": "2020-11-25T13:29:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5OTgyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUzNzMzNw==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r530537337", "bodyText": "I don't feel very strongly about it. However, I do lean towards forcing the upgrade and rejecting if it can't be completed (for the reasons @busbey mentioned, as well as because I want to eventually ensure we can drop the code that supports reading the old hashes on some future upgrade).\nI think it's very unlikely we're going to fail here if we've already authenticated, unless ZK is having issues (in which case, we'll probably see other errors in the system). So, it may be moot. Either way would probably be fine.", "author": "ctubbsii", "createdAt": "2020-11-25T17:25:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5OTgyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg3NDc1MQ==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r532874751", "bodyText": "okay, sounds good. @BukrosSzabolcs I think you're fine to leave this as-is.", "author": "busbey", "createdAt": "2020-11-30T20:12:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5OTgyMw=="}], "type": "inlineReview", "revised_code": {"commit": "456d1557395d2441854e042e7dcd4194be28fa4c", "chunk": "diff --git a/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java b/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java\nindex 79198f77a0..46033e79df 100644\n--- a/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java\n+++ b/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java\n\n@@ -244,7 +231,9 @@ public final class ZKAuthenticator implements Authenticator {\n       return ZKSecurityTool.checkCryptPass(pt.getPassword(), zkData);\n     }\n \n-    if (!ZKSecurityTool.checkPass(pt.getPassword(), zkData)) {\n+    @SuppressWarnings(\"deprecation\")\n+    boolean oldFormatValidates = ZKSecurityTool.checkPass(pt.getPassword(), zkData);\n+    if (!oldFormatValidates) {\n       // if password does not match we are done\n       return false;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMTU5Mw==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528701593", "bodyText": "add a comment about why a new Charset instead of relying on StandardCharsets.UTF_8", "author": "busbey", "createdAt": "2020-11-23T13:26:59Z", "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "diffHunk": "@@ -47,6 +49,7 @@\n class ZKSecurityTool {\n   private static final Logger log = LoggerFactory.getLogger(ZKSecurityTool.class);\n   private static final int SALT_LENGTH = 8;\n+  private static final Charset CRYPT_CHARSET = Charset.forName(\"UTF-8\");", "originalCommit": "4c8fedce90487c40ec4b740bc98dc181177cc71f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5ODE5MQ==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528898191", "bodyText": "Switching to StandardCharsets.UTF_8", "author": "BukrosSzabolcs", "createdAt": "2020-11-23T18:04:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMTU5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b10b77a3de8a942374de90caafbbf52ce07dd0a1", "chunk": "diff --git a/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java b/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java\nindex f3f9a16965..c5966f572a 100644\n--- a/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java\n+++ b/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java\n\n@@ -49,7 +51,7 @@ import org.slf4j.LoggerFactory;\n class ZKSecurityTool {\n   private static final Logger log = LoggerFactory.getLogger(ZKSecurityTool.class);\n   private static final int SALT_LENGTH = 8;\n-  private static final Charset CRYPT_CHARSET = Charset.forName(\"UTF-8\");\n+  private static final Charset CRYPT_CHARSET = UTF_8;\n \n   // Generates a byte array salt of length SALT_LENGTH\n   private static byte[] generateSalt() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMzYzNw==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528703637", "bodyText": "just to make sure I understand the reasoning here, the removal of this check is because ZKSecurityTool is package private and all current calls ensure zkData isn't null?\nif that's correct please add javadocs that say zkData can't be null. an alternative is to leave the check in place and rely on the jit to optimize it away.", "author": "busbey", "createdAt": "2020-11-23T13:30:25Z", "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "diffHunk": "@@ -56,16 +59,26 @@\n     return salt;\n   }\n \n+  // only present for testing DO NOT USE!\n+  @Deprecated(since = \"2.1.0\")\n+  static byte[] createOutdatedPass(byte[] password) throws AccumuloException {\n+    byte[] salt = generateSalt();\n+    try {\n+      return convertPass(password, salt);\n+    } catch (NoSuchAlgorithmException e) {\n+      log.error(\"Count not create hashed password\", e);\n+      throw new AccumuloException(\"Count not create hashed password\", e);\n+    }\n+  }\n+\n   private static byte[] hash(byte[] raw) throws NoSuchAlgorithmException {\n-    MessageDigest md = MessageDigest.getInstance(Constants.PW_HASH_ALGORITHM);\n+    MessageDigest md = MessageDigest.getInstance(Constants.PW_HASH_ALGORITHM_OUTDATED);\n     md.update(raw);\n     return md.digest();\n   }\n \n+  @Deprecated(since = \"2.1.0\")\n   public static boolean checkPass(byte[] password, byte[] zkData) {\n-    if (zkData == null)\n-      return false;\n-", "originalCommit": "4c8fedce90487c40ec4b740bc98dc181177cc71f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkwNDYwNg==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528904606", "bodyText": "I re-added the check to be on the safe side, but and made it package private as I should have done already.", "author": "BukrosSzabolcs", "createdAt": "2020-11-23T18:16:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwMzYzNw=="}], "type": "inlineReview", "revised_code": {"commit": "b10b77a3de8a942374de90caafbbf52ce07dd0a1", "chunk": "diff --git a/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java b/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java\nindex f3f9a16965..c5966f572a 100644\n--- a/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java\n+++ b/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java\n\n@@ -78,7 +80,10 @@ class ZKSecurityTool {\n   }\n \n   @Deprecated(since = \"2.1.0\")\n-  public static boolean checkPass(byte[] password, byte[] zkData) {\n+  static boolean checkPass(byte[] password, byte[] zkData) {\n+    if (zkData == null)\n+      return false;\n+\n     byte[] salt = new byte[SALT_LENGTH];\n     System.arraycopy(zkData, 0, salt, 0, SALT_LENGTH);\n     byte[] passwordToCheck;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwNDQ3Mg==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528704472", "bodyText": "We still need this constant updated because we rely on it for hashing the system credentials? won't that prevent a rolling upgrade?\nCould we have system credentials fall back to SHA-256 with a warning? or require a configurable flag to switch it?", "author": "busbey", "createdAt": "2020-11-23T13:31:49Z", "path": "core/src/main/java/org/apache/accumulo/core/Constants.java", "diffHunk": "@@ -99,7 +99,8 @@\n   public static final long SCANNER_DEFAULT_READAHEAD_THRESHOLD = 3L;\n \n   // Security configuration\n-  public static final String PW_HASH_ALGORITHM = \"SHA-256\";\n+  public static final String PW_HASH_ALGORITHM = \"SHA-512\";", "originalCommit": "4c8fedce90487c40ec4b740bc98dc181177cc71f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwNjkyOQ==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528706929", "bodyText": "changing this is also going to change some non-security uses, e.g. we optionally use it to obscure values printed from rfile metrics gathering. We'll need to enumerate these and release note the change in behavior. (or we could make something like a NON_CRYPTO_USE_HASH_ALGORITHM that we keep as SHA-256)", "author": "busbey", "createdAt": "2020-11-23T13:35:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwNDQ3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkwOTY5Mg==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528909692", "bodyText": "You are right. I'll make the system credentials hash customizable while defaulting to 256,  and renaming this as suggested to reflect it's for unsecure use.", "author": "BukrosSzabolcs", "createdAt": "2020-11-23T18:25:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwNDQ3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b10b77a3de8a942374de90caafbbf52ce07dd0a1", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/Constants.java b/core/src/main/java/org/apache/accumulo/core/Constants.java\nindex f30f7fdfd1..c6acdc80b2 100644\n--- a/core/src/main/java/org/apache/accumulo/core/Constants.java\n+++ b/core/src/main/java/org/apache/accumulo/core/Constants.java\n\n@@ -99,7 +99,7 @@ public class Constants {\n   public static final long SCANNER_DEFAULT_READAHEAD_THRESHOLD = 3L;\n \n   // Security configuration\n-  public static final String PW_HASH_ALGORITHM = \"SHA-512\";\n+  public static final String NON_CRYPTO_USE_HASH_ALGORITHM = \"SHA-256\";\n   public static final String PW_HASH_ALGORITHM_OUTDATED = \"SHA-256\";\n \n   public static final int MAX_DATA_TO_PRINT = 64;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1ODYwNw==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528858607", "bodyText": "What's the advantage of using MessageDigest.isEqual, vs. comparing as Strings or comparing as the UTF-8 byte-array?", "author": "ctubbsii", "createdAt": "2020-11-23T17:01:45Z", "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "diffHunk": "@@ -99,6 +102,24 @@ public static boolean checkPass(byte[] password, byte[] zkData) {\n     return saltedHash; // contains salt+hash(password+salt)\n   }\n \n+  public static byte[] createPass(byte[] password) throws AccumuloException {\n+    // we rely on default algorithm and hash length (SHA-512 and 8 byte)\n+    String cryptHash = Crypt.crypt(password);\n+    return cryptHash.getBytes(CRYPT_CHARSET);\n+  }\n+\n+  public static boolean checkCryptPass(byte[] password, byte[] zkData) {\n+    String zkDataString = new String(zkData, CRYPT_CHARSET);\n+    String cryptHash;\n+    try {\n+      cryptHash = Crypt.crypt(password, zkDataString);\n+    } catch (IllegalArgumentException e) {\n+      log.error(\"Unrecognized hash format\", e);\n+      return false;\n+    }\n+    return MessageDigest.isEqual(zkData, cryptHash.getBytes(CRYPT_CHARSET));", "originalCommit": "4c8fedce90487c40ec4b740bc98dc181177cc71f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkwMDMyMw==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528900323", "bodyText": "String comparisons is not secure against timing attacks, MessageDigest.isEqual is.", "author": "BukrosSzabolcs", "createdAt": "2020-11-23T18:08:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1ODYwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0MTkwOQ==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529841909", "bodyText": "Okay. Fair enough.", "author": "ctubbsii", "createdAt": "2020-11-24T19:57:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1ODYwNw=="}], "type": "inlineReview", "revised_code": {"commit": "1ccfe8fd1348ee1a6f661369e57d4836efe29046", "chunk": "diff --git a/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java b/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java\nindex f3f9a16965..7daa7b3e85 100644\n--- a/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java\n+++ b/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java\n\n@@ -105,11 +108,11 @@ class ZKSecurityTool {\n   public static byte[] createPass(byte[] password) throws AccumuloException {\n     // we rely on default algorithm and hash length (SHA-512 and 8 byte)\n     String cryptHash = Crypt.crypt(password);\n-    return cryptHash.getBytes(CRYPT_CHARSET);\n+    return cryptHash.getBytes(UTF_8);\n   }\n \n   public static boolean checkCryptPass(byte[] password, byte[] zkData) {\n-    String zkDataString = new String(zkData, CRYPT_CHARSET);\n+    String zkDataString = new String(zkData, UTF_8);\n     String cryptHash;\n     try {\n       cryptHash = Crypt.crypt(password, zkDataString);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1OTUwNg==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528859506", "bodyText": "You can simplify this JUnit test by just throwing this out of the method. JUnit will show the details of the exception in its logs.", "author": "ctubbsii", "createdAt": "2020-11-23T17:03:10Z", "path": "server/base/src/test/java/org/apache/accumulo/server/security/handler/ZKAuthenticatorTest.java", "diffHunk": "@@ -88,14 +90,40 @@ public void testTableConversion() {\n \n   @Test\n   public void testEncryption() {\n+    byte[] rawPass = \"myPassword\".getBytes(Charset.forName(\"UTF-8\"));\n+    byte[] storedBytes;\n+    try {\n+      storedBytes = ZKSecurityTool.createPass(rawPass.clone());\n+      assertTrue(ZKSecurityTool.checkCryptPass(rawPass.clone(), storedBytes));\n+    } catch (AccumuloException e) {\n+      log.error(\"{}\", e.getMessage(), e);\n+      fail();\n+    }", "originalCommit": "4c8fedce90487c40ec4b740bc98dc181177cc71f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkwNjgyNQ==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528906825", "bodyText": "Thank you for the suggestion!", "author": "BukrosSzabolcs", "createdAt": "2020-11-23T18:20:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg1OTUwNg=="}], "type": "inlineReview", "revised_code": {"commit": "b10b77a3de8a942374de90caafbbf52ce07dd0a1", "chunk": "diff --git a/server/base/src/test/java/org/apache/accumulo/server/security/handler/ZKAuthenticatorTest.java b/server/base/src/test/java/org/apache/accumulo/server/security/handler/ZKAuthenticatorTest.java\nindex 84e682bb7b..3897e6af55 100644\n--- a/server/base/src/test/java/org/apache/accumulo/server/security/handler/ZKAuthenticatorTest.java\n+++ b/server/base/src/test/java/org/apache/accumulo/server/security/handler/ZKAuthenticatorTest.java\n\n@@ -89,41 +100,98 @@ public class ZKAuthenticatorTest {\n   }\n \n   @Test\n-  public void testEncryption() {\n-    byte[] rawPass = \"myPassword\".getBytes(Charset.forName(\"UTF-8\"));\n+  public void testEncryption() throws AccumuloException {\n+    byte[] rawPass = \"myPassword\".getBytes(UTF_8);\n     byte[] storedBytes;\n-    try {\n-      storedBytes = ZKSecurityTool.createPass(rawPass.clone());\n-      assertTrue(ZKSecurityTool.checkCryptPass(rawPass.clone(), storedBytes));\n-    } catch (AccumuloException e) {\n-      log.error(\"{}\", e.getMessage(), e);\n-      fail();\n-    }\n+\n+    storedBytes = ZKSecurityTool.createPass(rawPass.clone());\n+    assertTrue(ZKSecurityTool.checkCryptPass(rawPass.clone(), storedBytes));\n   }\n \n   @Test\n-  public void testOutdatedEncryption() {\n+  public void testOutdatedEncryption() throws AccumuloException {\n     byte[] rawPass = \"myPassword\".getBytes();\n     byte[] storedBytes;\n-    try {\n-      storedBytes = ZKSecurityTool.createOutdatedPass(rawPass);\n-      assertTrue(ZKSecurityTool.checkPass(rawPass, storedBytes));\n-    } catch (AccumuloException e) {\n-      log.error(\"{}\", e.getMessage(), e);\n-      fail();\n-    }\n+\n+    storedBytes = ZKSecurityTool.createOutdatedPass(rawPass);\n+    assertTrue(ZKSecurityTool.checkPass(rawPass, storedBytes));\n   }\n \n   @Test\n-  public void testEncryptionDifference() {\n+  public void testEncryptionDifference() throws AccumuloException {\n     byte[] rawPass = \"myPassword\".getBytes();\n     byte[] storedBytes;\n-    try {\n-      storedBytes = ZKSecurityTool.createOutdatedPass(rawPass);\n-      assertFalse(ZKSecurityTool.checkCryptPass(rawPass, storedBytes));\n-    } catch (AccumuloException e) {\n-      log.error(\"{}\", e.getMessage(), e);\n-      fail();\n-    }\n+\n+    storedBytes = ZKSecurityTool.createOutdatedPass(rawPass);\n+    assertFalse(ZKSecurityTool.checkCryptPass(rawPass, storedBytes));\n+  }\n+\n+  @Test\n+  public void testUserAuthentication() throws Exception {\n+    // testing the usecase when trying to authenticate with the new hash type\n+    String principal = \"myTestUser\";\n+    byte[] rawPass = \"myPassword\".getBytes(UTF_8);\n+    // creating hash with up to date algorithm\n+    byte[] newHash = ZKSecurityTool.createPass(rawPass.clone());\n+\n+    // mocking zk interaction\n+    ServerContext context = createMock(ServerContext.class);\n+    ZooReaderWriter zr = createMock(ZooReaderWriter.class);\n+    expect(context.getZooReaderWriter()).andReturn(zr).anyTimes();\n+    expect(context.getInstanceID()).andReturn(\"example\").once();\n+    ZooKeeper zk = createMock(ZooKeeper.class);\n+    expect(zk.getChildren(EasyMock.anyObject(), EasyMock.anyObject()))\n+        .andReturn(Arrays.asList(principal)).anyTimes();\n+    expect(zk.exists(EasyMock.matches(\"/accumulo/example/users/\" + principal),\n+        EasyMock.anyObject(Watcher.class))).andReturn(new Stat()).anyTimes();\n+    expect(zr.getZooKeeper()).andReturn(zk).anyTimes();\n+    expect(zk.getData(EasyMock.matches(\"/accumulo/example/users/\" + principal),\n+        EasyMock.anyObject(), EasyMock.anyObject())).andReturn(newHash).once();\n+    replay(context, zr, zk);\n+\n+    // creating authenticator\n+    ZKAuthenticator auth = new ZKAuthenticator();\n+    auth.initialize(context);\n+\n+    PasswordToken token = new PasswordToken(rawPass.clone());\n+    // verifying that if the new type of hash is stored in zk authentication works as expected\n+    assertTrue(auth.authenticateUser(principal, token));\n+    verify(context, zr, zk);\n+  }\n+\n+  @Test\n+  public void testUserAuthenticationUpdate() throws Exception {\n+    // testing the usecase when trying to authenticate with the outdated hash type\n+    String principal = \"myTestUser\";\n+    byte[] rawPass = \"myPassword\".getBytes(UTF_8);\n+    // creating hash with outdated algorithm\n+    byte[] outdatedHash = ZKSecurityTool.createOutdatedPass(rawPass);\n+\n+    // mocking zk interaction\n+    ServerContext context = createMock(ServerContext.class);\n+    ZooReaderWriter zr = createMock(ZooReaderWriter.class);\n+    expect(context.getZooReaderWriter()).andReturn(zr).anyTimes();\n+    expect(context.getInstanceID()).andReturn(\"example\").once();\n+    ZooKeeper zk = createMock(ZooKeeper.class);\n+    expect(zk.getChildren(EasyMock.anyObject(), EasyMock.anyObject()))\n+        .andReturn(Arrays.asList(principal)).anyTimes();\n+    expect(zk.exists(EasyMock.matches(\"/accumulo/example/users/\" + principal),\n+        EasyMock.anyObject(Watcher.class))).andReturn(new Stat()).anyTimes();\n+    expect(zr.getZooKeeper()).andReturn(zk).anyTimes();\n+    expect(zk.getData(EasyMock.matches(\"/accumulo/example/users/\" + principal),\n+        EasyMock.anyObject(), EasyMock.anyObject())).andReturn(outdatedHash).once();\n+    // expecting that the new hash is pushed to zk\n+    expect(zr.putPrivatePersistentData(EasyMock.matches(\"/accumulo/example/users/\" + principal),\n+        EasyMock.anyObject(), EasyMock.anyObject())).andReturn(true).once();\n+    replay(context, zr, zk);\n+\n+    // creating authenticator\n+    ZKAuthenticator auth = new ZKAuthenticator();\n+    auth.initialize(context);\n+\n+    PasswordToken token = new PasswordToken(rawPass.clone());\n+    // verifying that if the outdated type of hash is stored in zk authentication works as expected\n+    assertTrue(auth.authenticateUser(principal, token));\n+    verify(context, zr, zk);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2MDg1OA==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r528860858", "bodyText": "If we can avoid running a full ZK instance using Mini, I think we should. I think ZKAuthenticator can be tested fully using unit tests with mocking, without a need to start up an instance of a cluster.", "author": "ctubbsii", "createdAt": "2020-11-23T17:05:14Z", "path": "test/src/main/java/org/apache/accumulo/test/ZKAuthenticatorIT.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.accumulo.test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.nio.charset.Charset;\n+\n+import org.apache.accumulo.core.client.security.tokens.PasswordToken;\n+import org.apache.accumulo.harness.AccumuloClusterHarness;\n+import org.apache.accumulo.server.security.handler.ZKAuthenticator;\n+import org.junit.Test;\n+\n+public class ZKAuthenticatorIT extends AccumuloClusterHarness {", "originalCommit": "4c8fedce90487c40ec4b740bc98dc181177cc71f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0MjYzNg==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529742636", "bodyText": "It can. I'm rewriting it.", "author": "BukrosSzabolcs", "createdAt": "2020-11-24T17:13:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg2MDg1OA=="}], "type": "inlineReview", "revised_code": {"commit": "b10b77a3de8a942374de90caafbbf52ce07dd0a1", "chunk": "diff --git a/test/src/main/java/org/apache/accumulo/test/ZKAuthenticatorIT.java b/test/src/main/java/org/apache/accumulo/test/ZKAuthenticatorIT.java\ndeleted file mode 100644\nindex 6ef6c8211e..0000000000\n--- a/test/src/main/java/org/apache/accumulo/test/ZKAuthenticatorIT.java\n+++ /dev/null\n\n@@ -1,65 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.accumulo.test;\n-\n-import static org.junit.Assert.assertTrue;\n-\n-import java.nio.charset.Charset;\n-\n-import org.apache.accumulo.core.client.security.tokens.PasswordToken;\n-import org.apache.accumulo.harness.AccumuloClusterHarness;\n-import org.apache.accumulo.server.security.handler.ZKAuthenticator;\n-import org.junit.Test;\n-\n-public class ZKAuthenticatorIT extends AccumuloClusterHarness {\n-\n-  @Test\n-  public void testUserAuthentication() throws Exception {\n-    byte[] rawPass = \"myPassword\".getBytes(Charset.forName(\"UTF-8\"));\n-    String principal = \"myTestUser\";\n-\n-    PasswordToken token = null;\n-    if (!saslEnabled()) {\n-      token = new PasswordToken(rawPass.clone());\n-    }\n-\n-    ZKAuthenticator auth = new ZKAuthenticator();\n-    auth.initialize(cluster.getServerContext());\n-\n-    auth.createUser(principal, token);\n-    assertTrue(auth.authenticateUser(principal, token));\n-  }\n-\n-  @Test\n-  public void testUserAuthenticationUpdate() throws Exception {\n-    byte[] rawPass = \"myPassword\".getBytes(Charset.forName(\"UTF-8\"));\n-    String principal = \"myTestUser\";\n-\n-    PasswordToken token = null;\n-    if (!saslEnabled()) {\n-      token = new PasswordToken(rawPass.clone());\n-    }\n-\n-    ZKAuthenticator auth = new ZKAuthenticator();\n-    auth.initialize(cluster.getServerContext());\n-\n-    auth.createOutdatedUser(principal, token);\n-    assertTrue(auth.authenticateUser(principal, token));\n-  }\n-}\n"}}, {"oid": "b10b77a3de8a942374de90caafbbf52ce07dd0a1", "url": "https://github.com/apache/accumulo/commit/b10b77a3de8a942374de90caafbbf52ce07dd0a1", "message": "Hash upgrade\n\nMoving outdated hash check to Master startup\nMaking hash used in SystemToken configurable\nReworking ZKAuthenticatorIT into unit tests\nother small changes", "committedDate": "2020-11-24T18:14:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNjQ4Mg==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529826482", "bodyText": "Since system credentials are not serialized anywhere, but we do want them to be a strong hash, I think it might be best to make use of crypt(3) here also, so we're using the default best hash available in the commons-codec library.\nWe can use a fixed salt for this. We could make the salt configurable or based on instance.secret, but there's no additional security added by doing so, since instance.secret is configurable and is already included in the message digest. So, a fixed salt would suffice here. If you're not interested in pursuing this, here, it can be done as a follow-on issue. Just let me know if that's the case, so I can create a new issue for it.\nAs you've identified, the one benefit to making it configurable and preserving the current one is to support rolling restart. However, we don't support rolling restarts very well already, and certainly not across major or minor releases, and we've likely already broken compatibility of that sort during 2.1's development (or will, if we upgrade Thrift). Also, I think having a strong has for the system user is important enough to break that, even if it did otherwise work. So, I'm inclined to favor not making it configurable.", "author": "ctubbsii", "createdAt": "2020-11-24T19:29:38Z", "path": "server/base/src/main/java/org/apache/accumulo/server/security/SystemCredentials.java", "diffHunk": "@@ -103,7 +102,8 @@ private static SystemToken get(String instanceID, SiteConfiguration siteConfig)\n       byte[] confChecksum;\n       MessageDigest md;\n       try {\n-        md = MessageDigest.getInstance(Constants.PW_HASH_ALGORITHM);\n+        String hashAlgorithm = siteConfig.get(Property.SYSTEM_TOKEN_HASH_TYPE);\n+        md = MessageDigest.getInstance(hashAlgorithm);", "originalCommit": "b10b77a3de8a942374de90caafbbf52ce07dd0a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0Mzk4Mw==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r530243983", "bodyText": "I would prefer to leave this as it is for now and create a separate issue for the follow up changes and related discussion.", "author": "BukrosSzabolcs", "createdAt": "2020-11-25T09:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNjQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUzOTkzOA==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r530539938", "bodyText": "No problem. I created #1810 to deal with it as a follow-on issue.", "author": "ctubbsii", "createdAt": "2020-11-25T17:30:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNjQ4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1ccfe8fd1348ee1a6f661369e57d4836efe29046", "chunk": "diff --git a/server/base/src/main/java/org/apache/accumulo/server/security/SystemCredentials.java b/server/base/src/main/java/org/apache/accumulo/server/security/SystemCredentials.java\nindex 8ac604d6c8..fbfc12e07a 100644\n--- a/server/base/src/main/java/org/apache/accumulo/server/security/SystemCredentials.java\n+++ b/server/base/src/main/java/org/apache/accumulo/server/security/SystemCredentials.java\n\n@@ -102,7 +102,7 @@ public final class SystemCredentials extends Credentials {\n       byte[] confChecksum;\n       MessageDigest md;\n       try {\n-        String hashAlgorithm = siteConfig.get(Property.SYSTEM_TOKEN_HASH_TYPE);\n+        String hashAlgorithm = siteConfig.get(Property.INSTANCE_SYSTEM_TOKEN_HASH_TYPE);\n         md = MessageDigest.getInstance(hashAlgorithm);\n       } catch (NoSuchAlgorithmException e) {\n         throw new RuntimeException(\"Failed to compute configuration checksum\", e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNzk4OA==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529827988", "bodyText": "If it makes more readable code in the callers (fewer negations), you could also flip the return values, and call this method areHashesCurrent() or similar.", "author": "ctubbsii", "createdAt": "2020-11-24T19:32:12Z", "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java", "diffHunk": "@@ -54,6 +56,33 @@ public void initialize(ServerContext context) {\n     ZKUserPath = Constants.ZROOT + \"/\" + context.getInstanceID() + \"/users\";\n   }\n \n+  /**\n+   * Checks stored users and logs a warning containing the ones with outdated hashes.\n+   */\n+  public boolean hasOutdatedHashes() {", "originalCommit": "b10b77a3de8a942374de90caafbbf52ce07dd0a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0NjE2NQ==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r530246165", "bodyText": "I considered that too, but kept it like this because we are checking for the outdated format, and while not being outdated technically means it's the current one, the name still feels misleading.", "author": "BukrosSzabolcs", "createdAt": "2020-11-25T09:59:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNzk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "456d1557395d2441854e042e7dcd4194be28fa4c", "chunk": "diff --git a/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java b/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java\nindex 314dc202f4..46033e79df 100644\n--- a/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java\n+++ b/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKAuthenticator.java\n\n@@ -60,7 +60,7 @@ public final class ZKAuthenticator implements Authenticator {\n    * Checks stored users and logs a warning containing the ones with outdated hashes.\n    */\n   public boolean hasOutdatedHashes() {\n-    List<String> outdatedUsers = new LinkedList<String>();\n+    List<String> outdatedUsers = new LinkedList<>();\n     try {\n       listUsers().forEach(user -> {\n         String zpath = ZKUserPath + \"/\" + user;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyODU5NA==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529828594", "bodyText": "Could inline this constant, to avoid the extra CRYPT_CHARSET variable and corresponding Charset import.", "author": "ctubbsii", "createdAt": "2020-11-24T19:33:20Z", "path": "server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java", "diffHunk": "@@ -47,6 +51,7 @@\n class ZKSecurityTool {\n   private static final Logger log = LoggerFactory.getLogger(ZKSecurityTool.class);\n   private static final int SALT_LENGTH = 8;\n+  private static final Charset CRYPT_CHARSET = UTF_8;", "originalCommit": "b10b77a3de8a942374de90caafbbf52ce07dd0a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0OTcwMQ==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r530249701", "bodyText": "Sure, thanks for pointing it out.", "author": "BukrosSzabolcs", "createdAt": "2020-11-25T10:04:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyODU5NA=="}], "type": "inlineReview", "revised_code": {"commit": "1ccfe8fd1348ee1a6f661369e57d4836efe29046", "chunk": "diff --git a/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java b/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java\nindex c5966f572a..7daa7b3e85 100644\n--- a/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java\n+++ b/server/base/src/main/java/org/apache/accumulo/server/security/handler/ZKSecurityTool.java\n\n@@ -51,7 +50,6 @@ import org.slf4j.LoggerFactory;\n class ZKSecurityTool {\n   private static final Logger log = LoggerFactory.getLogger(ZKSecurityTool.class);\n   private static final int SALT_LENGTH = 8;\n-  private static final Charset CRYPT_CHARSET = UTF_8;\n \n   // Generates a byte array salt of length SALT_LENGTH\n   private static byte[] generateSalt() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0NzcxNA==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529847714", "bodyText": "See my other comment about not making this configurable. However, since it is configurable, it must be the same across all servers, or they won't be able to talk to each other. In general, that would mean making this an instance.* property. However, since the way we enforce these is through the same-ness of the system credentials, if this is different across the cluster, then they won't be able to talk to each other anyway. The other property prefix we use for system-wide properties that can be different are general.*.", "author": "ctubbsii", "createdAt": "2020-11-24T20:08:26Z", "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -83,6 +83,14 @@\n   RPC_SASL_QOP(\"rpc.sasl.qop\", \"auth\", PropertyType.STRING,\n       \"The quality of protection to be used with SASL. Valid values are 'auth', 'auth-int',\"\n           + \" and 'auth-conf'\"),\n+  /**\n+   * @since 2.1.0\n+   */\n+  SYSTEM_TOKEN_HASH_TYPE(\"system.token.hash.type\", Constants.PW_HASH_ALGORITHM_OUTDATED,", "originalCommit": "b10b77a3de8a942374de90caafbbf52ce07dd0a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3NjE2Ng==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r530376166", "bodyText": "I personally think instance seems an appropriate prefix, so it would be instance.system.token.hash.type.", "author": "busbey", "createdAt": "2020-11-25T13:32:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0NzcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM5NjEzNw==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r530396137", "bodyText": "Thank you for the suggestions. Adding the instance.* prefix.", "author": "BukrosSzabolcs", "createdAt": "2020-11-25T14:03:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0NzcxNA=="}], "type": "inlineReview", "revised_code": {"commit": "1ccfe8fd1348ee1a6f661369e57d4836efe29046", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/conf/Property.java b/core/src/main/java/org/apache/accumulo/core/conf/Property.java\nindex 098dfca993..c0db8876a5 100644\n--- a/core/src/main/java/org/apache/accumulo/core/conf/Property.java\n+++ b/core/src/main/java/org/apache/accumulo/core/conf/Property.java\n\n@@ -86,8 +86,8 @@ public enum Property {\n   /**\n    * @since 2.1.0\n    */\n-  SYSTEM_TOKEN_HASH_TYPE(\"system.token.hash.type\", Constants.PW_HASH_ALGORITHM_OUTDATED,\n-      PropertyType.STRING,\n+  INSTANCE_SYSTEM_TOKEN_HASH_TYPE(\"instance.system.token.hash.type\",\n+      Constants.PW_HASH_ALGORITHM_OUTDATED, PropertyType.STRING,\n       \"Hash algorithm used for creating SystemTokens.\"\n           + \" It is recommended to use SHA-512, but the default is SHA-256 to not break rolling\"\n           + \" restart on update.\"),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg1MDQ2Mw==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529850463", "bodyText": "Since this use of the digest is specific to this specific metric utility's serialization, we can probably just use a local constant, rather than one in Constants.java (which I'd personally like to phase out over time).", "author": "ctubbsii", "createdAt": "2020-11-24T20:14:04Z", "path": "core/src/main/java/org/apache/accumulo/core/file/rfile/VisMetricsGatherer.java", "diffHunk": "@@ -136,12 +136,12 @@ public void printMetrics(boolean hash, String metricWord, PrintStream out) {\n         if (hash) {\n           String encodedKey = \"\";\n           try {\n-            byte[] encodedBytes = MessageDigest.getInstance(Constants.PW_HASH_ALGORITHM)\n+            byte[] encodedBytes = MessageDigest.getInstance(Constants.NON_CRYPTO_USE_HASH_ALGORITHM)", "originalCommit": "b10b77a3de8a942374de90caafbbf52ce07dd0a1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ccfe8fd1348ee1a6f661369e57d4836efe29046", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/file/rfile/VisMetricsGatherer.java b/core/src/main/java/org/apache/accumulo/core/file/rfile/VisMetricsGatherer.java\nindex 835d5a16c6..53a7e0ecb8 100644\n--- a/core/src/main/java/org/apache/accumulo/core/file/rfile/VisMetricsGatherer.java\n+++ b/core/src/main/java/org/apache/accumulo/core/file/rfile/VisMetricsGatherer.java\n\n@@ -136,12 +136,12 @@ public class VisMetricsGatherer\n         if (hash) {\n           String encodedKey = \"\";\n           try {\n-            byte[] encodedBytes = MessageDigest.getInstance(Constants.NON_CRYPTO_USE_HASH_ALGORITHM)\n+            byte[] encodedBytes = MessageDigest.getInstance(KEY_HASH_ALGORITHM)\n                 .digest(entry.getKey().getBytes(UTF_8));\n             encodedKey = new String(encodedBytes, UTF_8);\n           } catch (NoSuchAlgorithmException e) {\n-            out.println(\"Failed to convert key to \" + Constants.NON_CRYPTO_USE_HASH_ALGORITHM\n-                + \" hash: \" + e.getMessage());\n+            out.println(\n+                \"Failed to convert key to \" + KEY_HASH_ALGORITHM + \" hash: \" + e.getMessage());\n           }\n           out.printf(\"%-20s\", encodedKey.substring(0, 8));\n         } else\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg1OTM2NA==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r529859364", "bodyText": "It looks like we have this exact same algorithm for creating obscured tablet identifiers implemented in at least two places. Creating a new issue (#1805) to address that separately.", "author": "ctubbsii", "createdAt": "2020-11-24T20:30:35Z", "path": "shell/src/main/java/org/apache/accumulo/shell/commands/GetSplitsCommand.java", "diffHunk": "@@ -113,7 +113,7 @@ private static String encode(final boolean encode, final Text text) {\n   private static String obscuredTabletName(final KeyExtent extent) {\n     MessageDigest digester;\n     try {\n-      digester = MessageDigest.getInstance(Constants.PW_HASH_ALGORITHM);\n+      digester = MessageDigest.getInstance(Constants.NON_CRYPTO_USE_HASH_ALGORITHM);", "originalCommit": "b10b77a3de8a942374de90caafbbf52ce07dd0a1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "1ccfe8fd1348ee1a6f661369e57d4836efe29046", "url": "https://github.com/apache/accumulo/commit/1ccfe8fd1348ee1a6f661369e57d4836efe29046", "message": "Hash upgrade\n\nremove unused method\nrename security cred hash property\nuse inline charset constans\nseparate VisMetricsGatherer hashing from general solution", "committedDate": "2020-11-25T15:20:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1MzY3NQ==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r533653675", "bodyText": "This is an odd one.  I am not sure what we are using the HASH to encrypt here.  If it is just to prevent leaking data then I think it would be OK to use the NON_CRYPTO_USE_HASH_ALGORITHM", "author": "milleruntime", "createdAt": "2020-12-01T19:05:58Z", "path": "core/src/main/java/org/apache/accumulo/core/file/rfile/VisMetricsGatherer.java", "diffHunk": "@@ -47,6 +46,7 @@\n  */\n public class VisMetricsGatherer\n     implements MetricsGatherer<Map<String,ArrayList<VisibilityMetric>>> {\n+  static final String KEY_HASH_ALGORITHM = \"SHA-256\";", "originalCommit": "1ccfe8fd1348ee1a6f661369e57d4836efe29046", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY4NjY4OQ==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r533686689", "bodyText": "This is an odd one. I am not sure what we are using the HASH to encrypt here. If it is just to prevent leaking data then I think it would be OK to use the NON_CRYPTO_USE_HASH_ALGORITHM\n\n@milleruntime I think this was moved here at my request to keep serialization-related constants local to the serialization code, rather than to rely on some global constant, which could have a multitude of uses. I think it's fine here.", "author": "ctubbsii", "createdAt": "2020-12-01T20:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1MzY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcwMDY0NQ==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r533700645", "bodyText": "I don't think this is serializing anything.  I thought this method was only used by the rfile-info command. The only use i can find of printMetircs() is here: \n  \n    \n      accumulo/core/src/main/java/org/apache/accumulo/core/file/rfile/PrintInfo.java\n    \n    \n         Line 291\n      in\n      6a74b46\n    \n    \n    \n    \n\n        \n          \n           vmg.printMetrics(opts.hash, \"Visibility\", System.out);", "author": "milleruntime", "createdAt": "2020-12-01T20:28:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1MzY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcwOTcxOQ==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r533709719", "bodyText": "By serialization, I simply mean the serial form that we use for this particular display format.", "author": "ctubbsii", "createdAt": "2020-12-01T20:44:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1MzY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxMTU0OQ==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r533711549", "bodyText": "That constant can be left inside this class, because it's not being used as some sort of overall crypto strategy that necessitates it be aligned with how the other constant is being used... it's just an arbitrary choice for this particular visibility metric output format (or \"serialization algorithm\") and relates to nothing else. So, it can/should be a local constant held closer to the rest of that metric serialization algorithm. That's all I mean.", "author": "ctubbsii", "createdAt": "2020-12-01T20:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1MzY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczMzUzNQ==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r533733535", "bodyText": "Ah I see.  It makes me wonder why are we even bother hashing it at all for display purposes.  Why not just print gobbledygook or just don't print it.", "author": "milleruntime", "createdAt": "2020-12-01T21:29:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1MzY3NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczODM5Mg==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r533738392", "bodyText": "I am wondering if this is the best place to validate all user creds.  On one hand, it may be better to do this for some situations every time Master starts up but on the other, it may be sufficient and more efficient to only check once on upgrade.", "author": "milleruntime", "createdAt": "2020-12-01T21:39:21Z", "path": "server/manager/src/main/java/org/apache/accumulo/master/Master.java", "diffHunk": "@@ -1178,6 +1178,9 @@ boolean canSuspendTablets() {\n       log.info(\"All metrics modules registered\");\n     }\n \n+    // checking stored user hashes if any of them uses an outdated algorithm\n+    security.validateStoredUserCreditentials();", "originalCommit": "1ccfe8fd1348ee1a6f661369e57d4836efe29046", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0MTE4Mw==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r533741183", "bodyText": "I was wondering that, too, but I kind of want users to be annoyed by it more than once, so that they actually log users in to upgrade the hashes. I was also thinking maybe the other route, and nagging logging once every few days or once a week on a running system. Once at master startup is probably a good compromise for now, though. We can get more aggressive in future releases, before eventually forcing it at upgrade.", "author": "ctubbsii", "createdAt": "2020-12-01T21:44:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczODM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc0MjU5OA==", "url": "https://github.com/apache/accumulo/pull/1798#discussion_r533742598", "bodyText": "Good point.  And we can easily move the check somewhere else in later versions.", "author": "milleruntime", "createdAt": "2020-12-01T21:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczODM5Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "789fc0ff35d1023a404a411e5771fd76164d9681", "url": "https://github.com/apache/accumulo/commit/789fc0ff35d1023a404a411e5771fd76164d9681", "message": "Merge branch 'main' into hash-upgrade", "committedDate": "2020-12-08T14:17:53Z", "type": "commit"}, {"oid": "456d1557395d2441854e042e7dcd4194be28fa4c", "url": "https://github.com/apache/accumulo/commit/456d1557395d2441854e042e7dcd4194be28fa4c", "message": "Resolve compiler warnings", "committedDate": "2020-12-08T14:18:30Z", "type": "commit"}, {"oid": "d426a4fd636ef63c43a84b8ff5d29e0517e35a5e", "url": "https://github.com/apache/accumulo/commit/d426a4fd636ef63c43a84b8ff5d29e0517e35a5e", "message": "Add debug statement before attempting upgrade", "committedDate": "2020-12-08T19:35:45Z", "type": "commit"}]}