{"pr_number": 1579, "pr_title": "Closes #1576: Update importTable with directory list as Set<String>", "pr_createdAt": "2020-04-07T01:48:15Z", "pr_url": "https://github.com/apache/accumulo/pull/1579", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ5NTY1Ng==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404495656", "bodyText": "This is public API and cannot change without a deprecation cycle.\nA new API is needed, which should co-exist with this one, until this one is removed.\nI didn't look at the rest of this PR, since this is a blocker right away.", "author": "ctubbsii", "createdAt": "2020-04-07T02:12:36Z", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -176,11 +176,11 @@ void create(String tableName, NewTableConfiguration ntc)\n    *\n    * @param tableName\n    *          Name of a table to create and import into.\n-   * @param importDir\n-   *          Directory that contains the files copied by distcp from exportTable\n+   * @param importDirs\n+   *          A set of directories containing the files copied by distcp from exportTable\n    * @since 1.5.0\n    */\n-  void importTable(String tableName, String importDir)\n+  void importTable(String tableName, Set<String> importDirs)", "originalCommit": "87601f2f93dbd8d1fe510f5c5aa7528ea4e7e58d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3MDc1OA==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404870758", "bodyText": "I took a crack at this in 7f241a7 - let me know if this is sufficient.", "author": "drewfarris", "createdAt": "2020-04-07T14:50:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ5NTY1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "aedf445cfaa5bf1484d88b2477c87e181bfd34fa", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java b/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java\nindex 471a461319..02b3422313 100644\n--- a/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java\n+++ b/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java\n\n@@ -171,6 +171,21 @@ public interface TableOperations {\n   void create(String tableName, NewTableConfiguration ntc)\n       throws AccumuloSecurityException, AccumuloException, TableExistsException;\n \n+  /**\n+   * Imports a table exported via exportTable and copied via hadoop distcp.\n+   *\n+   * @param tableName\n+   *          Name of a table to create and import into.\n+   * @param importDir\n+   *          A directory containing the files copied by distcp from exportTable\n+   * @since 1.5.0\n+   *\n+   */\n+  default void importTable(String tableName, String importDir)\n+      throws TableExistsException, AccumuloException, AccumuloSecurityException {\n+    importTable(tableName, Set.of(importDir));\n+  }\n+\n   /**\n    * Imports a table exported via exportTable and copied via hadoop distcp.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkxNTIwMw==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404915203", "bodyText": "Maybe the existing API should maintain its current behavior and only support a single dir. This avoids any surprises for existing code.  If someone wants to use the new functionality, they need to use the new API.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                importTable(tableName, Set.of(importDir.split(\",\")));\n          \n          \n            \n                importTable(tableName, Set.of(importDir));", "author": "keith-turner", "createdAt": "2020-04-07T15:46:41Z", "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java", "diffHunk": "@@ -1544,22 +1544,29 @@ public static Path findExportFile(ClientContext context, List<String> importDirs\n   @Override\n   public void importTable(String tableName, String importDir)\n       throws TableExistsException, AccumuloException, AccumuloSecurityException {\n+    importTable(tableName, Set.of(importDir.split(\",\")));", "originalCommit": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNDk4Ng==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404934986", "bodyText": "\ud83d\udc4d I had the same thought.", "author": "ctubbsii", "createdAt": "2020-04-07T16:13:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkxNTIwMw=="}], "type": "inlineReview", "revised_code": {"commit": "aedf445cfaa5bf1484d88b2477c87e181bfd34fa", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java b/core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java\nindex 91eb124c9b..ca2f57afeb 100644\n--- a/core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java\n+++ b/core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java\n\n@@ -1541,12 +1541,6 @@ public class TableOperationsImpl extends TableOperationsHelper {\n     return props;\n   }\n \n-  @Override\n-  public void importTable(String tableName, String importDir)\n-      throws TableExistsException, AccumuloException, AccumuloSecurityException {\n-    importTable(tableName, Set.of(importDir.split(\",\")));\n-  }\n-\n   @Override\n   public void importTable(String tableName, Set<String> importDirs)\n       throws TableExistsException, AccumuloException, AccumuloSecurityException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNjYzNA==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404926634", "bodyText": "This does not have to be deprecated because a new method was added.  Also, do you want the method to be removed in the future?  Starting with Java 9, two parameters were added to the deprecated annotation since and forRemoval.  The default for forRemoval is false.  If deprecating, it may also be good explicitly set these.  Not sure if my syntax is correct below, I have not used these yet.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Deprecated\n          \n          \n            \n              @Deprecated(since=\"2.1.0\",forRemoval=false)\n          \n      \n    \n    \n  \n\nPersonally, I don't think the method needs to be deprecated.", "author": "keith-turner", "createdAt": "2020-04-07T16:01:29Z", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -176,11 +176,27 @@ void create(String tableName, NewTableConfiguration ntc)\n    *\n    * @param tableName\n    *          Name of a table to create and import into.\n-   * @param importDir\n-   *          Directory that contains the files copied by distcp from exportTable\n+   * @param importDirs\n+   *          A comma-delimited list of directories containing the files copied by distcp from\n+   *          exportTable\n    * @since 1.5.0\n+   *\n+   * @deprecated since 2.1.0 use {@link #importTable(String, Set)} instead.\n+   */\n+  @Deprecated", "originalCommit": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNTYxMA==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404935610", "bodyText": "I don't care whether it is deprecated or not, but would prefer the original method keep the behavior from before #1060 ; I think it's fine if not.", "author": "ctubbsii", "createdAt": "2020-04-07T16:13:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNjYzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5MDM3OA==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404990378", "bodyText": "This does not have to be deprecated because a new method was added.\n\nHmm, I don't understand why adding a new method eliminates the need for deprecation. The idea here would be to remove the original importTable(String, String) at some point when it is safe to do so.\nThanks for mentioning the Java 9 parameters. As such, I suspect the right annotation would be:\n@Deprecated(since=\"2.1.0\",forRemoval=true)", "author": "drewfarris", "createdAt": "2020-04-07T17:34:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNjYzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwODQ1OQ==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405008459", "bodyText": "Hmm, I don't understand why adding a new method eliminates the need for deprecation.\n\nThe deprecation has nothing to do with the addition of the new method. It pertains to the removal of the old method.\n\nThe idea here would be to remove the original importTable(String, String) at some point when it is safe to do so.\n\nIf you think it's better to remove the old method, that's fine and it should be deprecated. It's just not a requirement to remove it.\n\n@Deprecated(since=\"2.1.0\",forRemoval=true)\n\nIf it is going to be deprecated, I agree it should be marked this way. I don't think we ever want to deprecate something and still retain it forever. The reason we deprecate stuff is so we can purge it (eventually). I wish forRemoval=true were default when they added this, because that's how I've always interpreted @Deprecated, but I recognize others may interpret it differently.", "author": "ctubbsii", "createdAt": "2020-04-07T18:03:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNjYzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0NzkwMA==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405047900", "bodyText": "Hmm, I don't understand why adding a new method eliminates the need for deprecation.\n\nI was just thinking that adding the new method does not necessitate deprecating the existing one.  The existing method is not broken in any way, it still satisfies its original functionality for anyone who invested the time to write code against it in the past.", "author": "keith-turner", "createdAt": "2020-04-07T19:09:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNjYzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2MzUwNg==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405063506", "bodyText": "I was just thinking that adding the new method does not necessitate deprecating the existing one. The existing method is not broken in any way, it still satisfies its original functionality for anyone who invested the time to write code against it in the past.\n\nI'm happy to go either way. I suppose I'm in favor of keeping the number of public api methods to a minimum, but I don't feel strongly about leaving the existing method around if that's a better fit for the project.", "author": "drewfarris", "createdAt": "2020-04-07T19:37:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNjYzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4OTQ0Nw==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405089447", "bodyText": "I suppose I'm in favor of keeping the number of public api methods to a minimum\n\nThat is a good goal, not sure whats best in the big scheme of things.   In my experience removing methods is most painful for indirect users of Accumulo (like someone using Accumulo via something like Rya).  Can get into a situation where you can not use the latest version of Accumulo w/o patching and rebuilding Rya.\nCould minimize clutter in the Accumulo source using a default method in the interface for the existing method (that calls the new method) and have it nowhere else.", "author": "keith-turner", "createdAt": "2020-04-07T20:24:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNjYzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1OTM4Mw==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405559383", "bodyText": "That is a good goal, not sure whats best in the big scheme of things.\n\nOk, thanks for explaining your perspective. The makes a great deal of sense. Based on this, I'm going to avoid deprecating the original method. It looks like theres precedent for default implementations in the TableOperations interface, so I'll proceed in that way.", "author": "drewfarris", "createdAt": "2020-04-08T14:16:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNjYzNA=="}], "type": "inlineReview", "revised_code": {"commit": "aedf445cfaa5bf1484d88b2477c87e181bfd34fa", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java b/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java\nindex a08e76743a..02b3422313 100644\n--- a/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java\n+++ b/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java\n\n@@ -176,16 +176,15 @@ public interface TableOperations {\n    *\n    * @param tableName\n    *          Name of a table to create and import into.\n-   * @param importDirs\n-   *          A comma-delimited list of directories containing the files copied by distcp from\n-   *          exportTable\n+   * @param importDir\n+   *          A directory containing the files copied by distcp from exportTable\n    * @since 1.5.0\n    *\n-   * @deprecated since 2.1.0 use {@link #importTable(String, Set)} instead.\n    */\n-  @Deprecated\n-  void importTable(String tableName, String importDirs)\n-      throws TableExistsException, AccumuloException, AccumuloSecurityException;\n+  default void importTable(String tableName, String importDir)\n+      throws TableExistsException, AccumuloException, AccumuloSecurityException {\n+    importTable(tableName, Set.of(importDir));\n+  }\n \n   /**\n    * Imports a table exported via exportTable and copied via hadoop distcp.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzODA4NQ==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404938085", "bodyText": "This isn't used.", "author": "ctubbsii", "createdAt": "2020-04-07T16:17:18Z", "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java", "diffHunk": "@@ -1544,22 +1544,29 @@ public static Path findExportFile(ClientContext context, List<String> importDirs\n   @Override\n   public void importTable(String tableName, String importDir)\n       throws TableExistsException, AccumuloException, AccumuloSecurityException {\n+    importTable(tableName, Set.of(importDir.split(\",\")));\n+  }\n+\n+  @Override\n+  public void importTable(String tableName, Set<String> importDirs)\n+      throws TableExistsException, AccumuloException, AccumuloSecurityException {\n     checkArgument(tableName != null, \"tableName is null\");\n-    checkArgument(importDir != null, \"importDir is null\");\n+    checkArgument(importDirs != null, \"importDir is null\");\n     checkArgument(tableName.length() <= MAX_TABLE_NAME_LEN,\n         \"Table name is longer than \" + MAX_TABLE_NAME_LEN + \" characters\");\n \n-    List<String> importDirs = new ArrayList<>();\n-    for (String dir : importDir.split(\",\")) {\n-      try {\n-        importDirs.add(checkPath(dir, \"Table\", \"\").toString());\n-      } catch (IOException e) {\n-        throw new AccumuloException(e);\n+    Set<String> checkedImportDirs = new HashSet<String>();\n+    try {\n+      for (String s : importDirs) {\n+        checkedImportDirs.add(checkPath(s, \"Table\", \"\").toString());\n       }\n+    } catch (IOException e) {\n+      throw new AccumuloException(e);\n     }\n+    String normedImportDir = StringUtils.join(checkedImportDirs, \",\");", "originalCommit": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aedf445cfaa5bf1484d88b2477c87e181bfd34fa", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java b/core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java\nindex 91eb124c9b..ca2f57afeb 100644\n--- a/core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java\n+++ b/core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java\n\n@@ -1541,12 +1541,6 @@ public class TableOperationsImpl extends TableOperationsHelper {\n     return props;\n   }\n \n-  @Override\n-  public void importTable(String tableName, String importDir)\n-      throws TableExistsException, AccumuloException, AccumuloSecurityException {\n-    importTable(tableName, Set.of(importDir.split(\",\")));\n-  }\n-\n   @Override\n   public void importTable(String tableName, Set<String> importDirs)\n       throws TableExistsException, AccumuloException, AccumuloSecurityException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzOTU2Mw==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404939563", "bodyText": "Since the variable was renamed, there are other places below that need to be changed from importDirs to checkedImportDirs as well.", "author": "ctubbsii", "createdAt": "2020-04-07T16:19:26Z", "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java", "diffHunk": "@@ -1544,22 +1544,29 @@ public static Path findExportFile(ClientContext context, List<String> importDirs\n   @Override\n   public void importTable(String tableName, String importDir)\n       throws TableExistsException, AccumuloException, AccumuloSecurityException {\n+    importTable(tableName, Set.of(importDir.split(\",\")));\n+  }\n+\n+  @Override\n+  public void importTable(String tableName, Set<String> importDirs)\n+      throws TableExistsException, AccumuloException, AccumuloSecurityException {\n     checkArgument(tableName != null, \"tableName is null\");\n-    checkArgument(importDir != null, \"importDir is null\");\n+    checkArgument(importDirs != null, \"importDir is null\");\n     checkArgument(tableName.length() <= MAX_TABLE_NAME_LEN,\n         \"Table name is longer than \" + MAX_TABLE_NAME_LEN + \" characters\");\n \n-    List<String> importDirs = new ArrayList<>();\n-    for (String dir : importDir.split(\",\")) {\n-      try {\n-        importDirs.add(checkPath(dir, \"Table\", \"\").toString());\n-      } catch (IOException e) {\n-        throw new AccumuloException(e);\n+    Set<String> checkedImportDirs = new HashSet<String>();\n+    try {\n+      for (String s : importDirs) {\n+        checkedImportDirs.add(checkPath(s, \"Table\", \"\").toString());\n       }\n+    } catch (IOException e) {\n+      throw new AccumuloException(e);\n     }\n+    String normedImportDir = StringUtils.join(checkedImportDirs, \",\");\n \n     try {\n-      Path exportFilePath = findExportFile(context, importDirs);\n+      Path exportFilePath = findExportFile(context, checkedImportDirs);", "originalCommit": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aedf445cfaa5bf1484d88b2477c87e181bfd34fa", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java b/core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java\nindex 91eb124c9b..ca2f57afeb 100644\n--- a/core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java\n+++ b/core/src/main/java/org/apache/accumulo/core/clientImpl/TableOperationsImpl.java\n\n@@ -1541,12 +1541,6 @@ public class TableOperationsImpl extends TableOperationsHelper {\n     return props;\n   }\n \n-  @Override\n-  public void importTable(String tableName, String importDir)\n-      throws TableExistsException, AccumuloException, AccumuloSecurityException {\n-    importTable(tableName, Set.of(importDir.split(\",\")));\n-  }\n-\n   @Override\n   public void importTable(String tableName, Set<String> importDirs)\n       throws TableExistsException, AccumuloException, AccumuloSecurityException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NTMxOQ==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404945319", "bodyText": "Since the Fate serialization has changed, it will be very important that there are no outstanding import table fate operations outstanding before upgrading. I suspect this is unlikely for most people, but may be something to call out in the release notes.", "author": "ctubbsii", "createdAt": "2020-04-07T16:27:19Z", "path": "server/master/src/main/java/org/apache/accumulo/master/tableOps/tableImport/ImportTable.java", "diffHunk": "@@ -53,16 +54,17 @@\n public class ImportTable extends MasterRepo {\n   private static final Logger log = LoggerFactory.getLogger(ImportTable.class);\n \n-  private static final long serialVersionUID = 1L;\n+  private static final long serialVersionUID = 2L;", "originalCommit": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc3NTUxMg==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405775512", "bodyText": "I think we check before upgrade if there are any outstanding FATE ops and if so upgrade will not proceed.  So usually do not need to worry about FATE persistence across versions.", "author": "keith-turner", "createdAt": "2020-04-08T19:54:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NTMxOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0ODUzNw==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404948537", "bodyText": "Since the exportDir is set in the constructor, can we now make the field final?", "author": "ctubbsii", "createdAt": "2020-04-07T16:31:42Z", "path": "server/master/src/main/java/org/apache/accumulo/master/tableOps/tableImport/ImportedTableInfo.java", "diffHunk": "@@ -38,6 +38,10 @@\n   static class DirectoryMapping implements Serializable {\n     private static final long serialVersionUID = 1L;\n \n+    public DirectoryMapping(String exportDir) {\n+      this.exportDir = exportDir;", "originalCommit": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aedf445cfaa5bf1484d88b2477c87e181bfd34fa", "chunk": "diff --git a/server/master/src/main/java/org/apache/accumulo/master/tableOps/tableImport/ImportedTableInfo.java b/server/master/src/main/java/org/apache/accumulo/master/tableOps/tableImport/ImportedTableInfo.java\nindex 0badca756d..4f34c33293 100644\n--- a/server/master/src/main/java/org/apache/accumulo/master/tableOps/tableImport/ImportedTableInfo.java\n+++ b/server/master/src/main/java/org/apache/accumulo/master/tableOps/tableImport/ImportedTableInfo.java\n\n@@ -42,7 +42,7 @@ class ImportedTableInfo implements Serializable {\n       this.exportDir = exportDir;\n     }\n \n-    public String exportDir;\n+    public final String exportDir;\n     public String importDir;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1MTMwNg==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404951306", "bodyText": "If you define this set earlier, you wouldn't need to manually concatenate them for the log message, because you could just rely on Set.toString().", "author": "ctubbsii", "createdAt": "2020-04-07T16:35:50Z", "path": "test/src/main/java/org/apache/accumulo/test/ImportExportIT.java", "diffHunk": "@@ -151,7 +151,8 @@ public void testExportImportThenScan() throws Exception {\n       log.info(\"Import dir B: {}\", Arrays.toString(fs.listStatus(importDirB)));\n \n       // Import the exported data into a new table\n-      client.tableOperations().importTable(destTable, importDirDlm);\n+      client.tableOperations().importTable(destTable,\n+          Set.of(importDirA.toString(), importDirB.toString()));", "originalCommit": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aedf445cfaa5bf1484d88b2477c87e181bfd34fa", "chunk": "diff --git a/test/src/main/java/org/apache/accumulo/test/ImportExportIT.java b/test/src/main/java/org/apache/accumulo/test/ImportExportIT.java\nindex 83e6638274..1cb6060636 100644\n--- a/test/src/main/java/org/apache/accumulo/test/ImportExportIT.java\n+++ b/test/src/main/java/org/apache/accumulo/test/ImportExportIT.java\n\n@@ -151,8 +153,7 @@ public class ImportExportIT extends AccumuloClusterHarness {\n       log.info(\"Import dir B: {}\", Arrays.toString(fs.listStatus(importDirB)));\n \n       // Import the exported data into a new table\n-      client.tableOperations().importTable(destTable,\n-          Set.of(importDirA.toString(), importDirB.toString()));\n+      client.tableOperations().importTable(destTable, importDirs);\n \n       // Get the table ID for the table that the importtable command created\n       final String tableId = client.tableOperations().tableIdMap().get(destTable);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1MjUxMQ==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404952511", "bodyText": "Set.of(X) is shorter than Collections.singleton(X).", "author": "ctubbsii", "createdAt": "2020-04-07T16:37:39Z", "path": "test/src/main/java/org/apache/accumulo/test/NamespacesIT.java", "diffHunk": "@@ -980,8 +980,8 @@ public void verifyTableOperationsExceptions() throws Exception {\n         () -> ops.clone(\"a\", tableName, true, Collections.emptyMap(), Collections.emptySet()));\n     ops.offline(\"a\", true);\n     ops.exportTable(\"a\", System.getProperty(\"user.dir\") + \"/target\");\n-    assertAccumuloExceptionNoNamespace(\n-        () -> ops.importTable(tableName, System.getProperty(\"user.dir\") + \"/target\"));\n+    assertAccumuloExceptionNoNamespace(() -> ops.importTable(tableName,\n+        Collections.singleton(System.getProperty(\"user.dir\") + \"/target\")));", "originalCommit": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aedf445cfaa5bf1484d88b2477c87e181bfd34fa", "chunk": "diff --git a/test/src/main/java/org/apache/accumulo/test/NamespacesIT.java b/test/src/main/java/org/apache/accumulo/test/NamespacesIT.java\nindex cbaa8ef262..4a5eda193c 100644\n--- a/test/src/main/java/org/apache/accumulo/test/NamespacesIT.java\n+++ b/test/src/main/java/org/apache/accumulo/test/NamespacesIT.java\n\n@@ -980,8 +981,8 @@ public class NamespacesIT extends SharedMiniClusterBase {\n         () -> ops.clone(\"a\", tableName, true, Collections.emptyMap(), Collections.emptySet()));\n     ops.offline(\"a\", true);\n     ops.exportTable(\"a\", System.getProperty(\"user.dir\") + \"/target\");\n-    assertAccumuloExceptionNoNamespace(() -> ops.importTable(tableName,\n-        Collections.singleton(System.getProperty(\"user.dir\") + \"/target\")));\n+    assertAccumuloExceptionNoNamespace(\n+        () -> ops.importTable(tableName, Set.of(System.getProperty(\"user.dir\") + \"/target\")));\n \n     // table operations that should throw an AccumuloException caused by a TableNotFoundException\n     // caused by a NamespaceNotFoundException\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3NjQwNQ==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r404976405", "bodyText": "@ctubbsii @keith-turner - Predicate.not was added in Java 11 and I expected the build to fail when I used it, but it didn't. What runtimes are we supporting for 2.1.x?", "author": "drewfarris", "createdAt": "2020-04-07T17:13:00Z", "path": "server/master/src/main/java/org/apache/accumulo/master/tableOps/tableImport/ImportTable.java", "diffHunk": "@@ -19,13 +19,14 @@\n package org.apache.accumulo.master.tableOps.tableImport;\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.function.Predicate.not;", "originalCommit": "7f241a70c3be2d0d5c5b4159684fc5d6646bdcc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwOTc2NQ==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405009765", "bodyText": "2.1 is targeting Java 11.", "author": "ctubbsii", "createdAt": "2020-04-07T18:05:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3NjQwNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyOTQ5Ng==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405129496", "bodyText": "This javadoc is no longer true.", "author": "ctubbsii", "createdAt": "2020-04-07T21:39:33Z", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -176,11 +176,27 @@ void create(String tableName, NewTableConfiguration ntc)\n    *\n    * @param tableName\n    *          Name of a table to create and import into.\n-   * @param importDir\n-   *          Directory that contains the files copied by distcp from exportTable\n+   * @param importDirs\n+   *          A comma-delimited list of directories containing the files copied by distcp from\n+   *          exportTable", "originalCommit": "4537bfe340dde0e3bed5d6aec9249ce331be6ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aedf445cfaa5bf1484d88b2477c87e181bfd34fa", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java b/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java\nindex b3bd70e7b4..02b3422313 100644\n--- a/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java\n+++ b/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java\n\n@@ -176,16 +176,15 @@ public interface TableOperations {\n    *\n    * @param tableName\n    *          Name of a table to create and import into.\n-   * @param importDirs\n-   *          A comma-delimited list of directories containing the files copied by distcp from\n-   *          exportTable\n+   * @param importDir\n+   *          A directory containing the files copied by distcp from exportTable\n    * @since 1.5.0\n    *\n-   * @deprecated since 2.1.0 use {@link #importTable(String, Set)} instead.\n    */\n-  @Deprecated(since = \"2.1.0\", forRemoval = true)\n-  void importTable(String tableName, String importDirs)\n-      throws TableExistsException, AccumuloException, AccumuloSecurityException;\n+  default void importTable(String tableName, String importDir)\n+      throws TableExistsException, AccumuloException, AccumuloSecurityException {\n+    importTable(tableName, Set.of(importDir));\n+  }\n \n   /**\n    * Imports a table exported via exportTable and copied via hadoop distcp.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyOTc2OQ==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405129769", "bodyText": "I think this should be singular \"importDir\" now (or whatever it was called before the changes in #1060 )", "author": "ctubbsii", "createdAt": "2020-04-07T21:40:05Z", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -176,11 +176,27 @@ void create(String tableName, NewTableConfiguration ntc)\n    *\n    * @param tableName\n    *          Name of a table to create and import into.\n-   * @param importDir\n-   *          Directory that contains the files copied by distcp from exportTable\n+   * @param importDirs\n+   *          A comma-delimited list of directories containing the files copied by distcp from\n+   *          exportTable\n    * @since 1.5.0\n+   *\n+   * @deprecated since 2.1.0 use {@link #importTable(String, Set)} instead.\n+   */\n+  @Deprecated(since = \"2.1.0\", forRemoval = true)\n+  void importTable(String tableName, String importDirs)", "originalCommit": "4537bfe340dde0e3bed5d6aec9249ce331be6ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aedf445cfaa5bf1484d88b2477c87e181bfd34fa", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java b/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java\nindex b3bd70e7b4..02b3422313 100644\n--- a/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java\n+++ b/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java\n\n@@ -176,16 +176,15 @@ public interface TableOperations {\n    *\n    * @param tableName\n    *          Name of a table to create and import into.\n-   * @param importDirs\n-   *          A comma-delimited list of directories containing the files copied by distcp from\n-   *          exportTable\n+   * @param importDir\n+   *          A directory containing the files copied by distcp from exportTable\n    * @since 1.5.0\n    *\n-   * @deprecated since 2.1.0 use {@link #importTable(String, Set)} instead.\n    */\n-  @Deprecated(since = \"2.1.0\", forRemoval = true)\n-  void importTable(String tableName, String importDirs)\n-      throws TableExistsException, AccumuloException, AccumuloSecurityException;\n+  default void importTable(String tableName, String importDir)\n+      throws TableExistsException, AccumuloException, AccumuloSecurityException {\n+    importTable(tableName, Set.of(importDir));\n+  }\n \n   /**\n    * Imports a table exported via exportTable and copied via hadoop distcp.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5MTQ5Ng==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405591496", "bodyText": "If you're using a default method in the interface, the corresponding methods can be deleted from the implementing classes. I would check all subclasses and remove any that aren't needed.", "author": "ctubbsii", "createdAt": "2020-04-08T14:59:56Z", "path": "core/src/test/java/org/apache/accumulo/core/clientImpl/TableOperationsHelperTest.java", "diffHunk": "@@ -199,6 +199,9 @@ public void clearLocatorCache(String tableName) {}\n     @Override\n     public void importTable(String tableName, String exportDir) {}", "originalCommit": "756acaab4a41f15a68e9d2dbdbbe8c610d129905", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aedf445cfaa5bf1484d88b2477c87e181bfd34fa", "chunk": "diff --git a/core/src/test/java/org/apache/accumulo/core/clientImpl/TableOperationsHelperTest.java b/core/src/test/java/org/apache/accumulo/core/clientImpl/TableOperationsHelperTest.java\nindex dc811f0408..9e553f544e 100644\n--- a/core/src/test/java/org/apache/accumulo/core/clientImpl/TableOperationsHelperTest.java\n+++ b/core/src/test/java/org/apache/accumulo/core/clientImpl/TableOperationsHelperTest.java\n\n@@ -196,9 +196,6 @@ public class TableOperationsHelperTest {\n       return null;\n     }\n \n-    @Override\n-    public void importTable(String tableName, String exportDir) {}\n-\n     @Override\n     public void importTable(String tableName, Set<String> exportDir) {}\n \n"}}, {"oid": "aedf445cfaa5bf1484d88b2477c87e181bfd34fa", "url": "https://github.com/apache/accumulo/commit/aedf445cfaa5bf1484d88b2477c87e181bfd34fa", "message": "Closes #1576: Add importTable with directory list as Set<String> (#1579)", "committedDate": "2020-04-08T18:22:45Z", "type": "commit"}, {"oid": "aedf445cfaa5bf1484d88b2477c87e181bfd34fa", "url": "https://github.com/apache/accumulo/commit/aedf445cfaa5bf1484d88b2477c87e181bfd34fa", "message": "Closes #1576: Add importTable with directory list as Set<String> (#1579)", "committedDate": "2020-04-08T18:22:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc3NDM5OQ==", "url": "https://github.com/apache/accumulo/pull/1579#discussion_r405774399", "bodyText": "Is there anything that would be worth mentioning about the metadata zip file and multiple dirs here?", "author": "keith-turner", "createdAt": "2020-04-08T19:52:12Z", "path": "core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java", "diffHunk": "@@ -177,10 +177,25 @@ void create(String tableName, NewTableConfiguration ntc)\n    * @param tableName\n    *          Name of a table to create and import into.\n    * @param importDir\n-   *          Directory that contains the files copied by distcp from exportTable\n+   *          A directory containing the files copied by distcp from exportTable\n    * @since 1.5.0\n+   *\n+   */\n+  default void importTable(String tableName, String importDir)\n+      throws TableExistsException, AccumuloException, AccumuloSecurityException {\n+    importTable(tableName, Set.of(importDir));\n+  }\n+\n+  /**\n+   * Imports a table exported via exportTable and copied via hadoop distcp.\n+   *\n+   * @param tableName\n+   *          Name of a table to create and import into.\n+   * @param importDirs\n+   *          A set of directories containing the files copied by distcp from exportTable", "originalCommit": "aedf445cfaa5bf1484d88b2477c87e181bfd34fa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}