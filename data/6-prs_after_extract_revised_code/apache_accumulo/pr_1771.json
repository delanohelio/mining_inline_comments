{"pr_number": 1771, "pr_title": "Add tablename option to shell insert command.", "pr_createdAt": "2020-11-06T18:25:43Z", "pr_url": "https://github.com/apache/accumulo/pull/1771", "timeline": [{"oid": "3721c43e63e53116676d96bc0d891a6acba3d013", "url": "https://github.com/apache/accumulo/commit/3721c43e63e53116676d96bc0d891a6acba3d013", "message": "Add tablename option to shell insert command.\n\nThis change adds the --tablename option to the insert command when\ninside the shell or when using the accumulo command with 'accumulo shell\n-e <task>'. The option is not required, but if used it allows data to be\ninserted into a table in situations where the shell is not within a\ntable context or when in a table context to insert data into another\ntable.\n\nAlthough I would not expect this option to be utilized very often, I\nfound myself in need of it when working with the various accumulo\nexamples in the accumulo-examples repo. I had many situations where I\nwished to insert some test data from a bash shell using the 'accumulo\nshell -e insert r f q v' form but this would fail due to there being no\ntable context for the insertion. This update allows data inserts from a\ncommand line using the 'accumulo shell' format.\n\nAlso, there is no shortened form of the option to minimize confusion\nwith the -ts option.", "committedDate": "2020-11-06T17:58:02Z", "type": "commit"}, {"oid": "9eaf446003a743bc1ebf99b95025a25e219dcb0a", "url": "https://github.com/apache/accumulo/commit/9eaf446003a743bc1ebf99b95025a25e219dcb0a", "message": "Add tablename option to shell insert command.\n\nFormmatting changes applied via maven plugin.", "committedDate": "2020-11-06T18:50:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4OTUxMg==", "url": "https://github.com/apache/accumulo/pull/1771#discussion_r518989512", "bodyText": "This command should use the table specified, but it should not update the table state for the entire shell. All you need to do is set a local variable to either the specified table, or default to the current shell state's table, and use that local variable in the line below that creates the batch writer.", "author": "ctubbsii", "createdAt": "2020-11-06T20:30:04Z", "path": "shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java", "diffHunk": "@@ -63,81 +64,96 @@ protected long getTimeout(final CommandLine cl) {\n   public int execute(final String fullCommand, final CommandLine cl, final Shell shellState)\n       throws AccumuloException, AccumuloSecurityException, TableNotFoundException, IOException,\n       ConstraintViolationException {\n-    shellState.checkTableState();\n \n-    final Mutation m = new Mutation(new Text(cl.getArgs()[0].getBytes(Shell.CHARSET)));\n-    final Text colf = new Text(cl.getArgs()[1].getBytes(Shell.CHARSET));\n-    final Text colq = new Text(cl.getArgs()[2].getBytes(Shell.CHARSET));\n-    final Value val = new Value(cl.getArgs()[3].getBytes(Shell.CHARSET));\n-\n-    if (cl.hasOption(insertOptAuths.getOpt())) {\n-      final ColumnVisibility le = new ColumnVisibility(cl.getOptionValue(insertOptAuths.getOpt()));\n-      Shell.log.debug(\"Authorization label will be set to: {}\", le);\n-\n-      if (cl.hasOption(timestampOpt.getOpt()))\n-        m.put(colf, colq, le, Long.parseLong(cl.getOptionValue(timestampOpt.getOpt())), val);\n-      else\n-        m.put(colf, colq, le, val);\n-    } else if (cl.hasOption(timestampOpt.getOpt()))\n-      m.put(colf, colq, Long.parseLong(cl.getOptionValue(timestampOpt.getOpt())), val);\n-    else\n-      m.put(colf, colq, val);\n-\n-    final BatchWriterConfig cfg =\n-        new BatchWriterConfig().setMaxMemory(Math.max(m.estimatedMemoryUsed(), 1024))\n-            .setMaxWriteThreads(1).setTimeout(getTimeout(cl), TimeUnit.MILLISECONDS);\n-    if (cl.hasOption(durabilityOption.getOpt())) {\n-      String userDurability = cl.getOptionValue(durabilityOption.getOpt());\n-      switch (userDurability) {\n-        case \"sync\":\n-          cfg.setDurability(Durability.SYNC);\n-          break;\n-        case \"flush\":\n-          cfg.setDurability(Durability.FLUSH);\n-          break;\n-        case \"none\":\n-          cfg.setDurability(Durability.NONE);\n-          break;\n-        case \"log\":\n-          cfg.setDurability(Durability.NONE);\n-          break;\n-        default:\n-          throw new IllegalArgumentException(\"Unknown durability: \" + userDurability);\n-      }\n-    }\n-    final BatchWriter bw =\n-        shellState.getAccumuloClient().createBatchWriter(shellState.getTableName(), cfg);\n-    bw.addMutation(m);\n+    String initialTable = null;\n     try {\n-      bw.close();\n-    } catch (MutationsRejectedException e) {\n-      final ArrayList<String> lines = new ArrayList<>();\n-      if (!e.getSecurityErrorCodes().isEmpty()) {\n-        lines.add(\"\\tAuthorization Failures:\");\n+      if (cl.hasOption(tableNameOption.getOpt())) {\n+        initialTable = shellState.getTableName();\n+        shellState.setTableName(cl.getOptionValue(tableNameOption.getOpt()));", "originalCommit": "9eaf446003a743bc1ebf99b95025a25e219dcb0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzMTgzNQ==", "url": "https://github.com/apache/accumulo/pull/1771#discussion_r519931835", "bodyText": "Thanks for pointing that out @ctubbsii. I've updated the code to use a temp variable and left the shellstate as is.", "author": "jmark99", "createdAt": "2020-11-09T16:11:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4OTUxMg=="}], "type": "inlineReview", "revised_code": {"commit": "f867c74b182b330b6ee4eb4566268250ff566c50", "chunk": "diff --git a/shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java b/shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java\nindex 66bd74bbfb..5feb18eea0 100644\n--- a/shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java\n+++ b/shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java\n\n@@ -65,95 +65,88 @@ public class InsertCommand extends Command {\n       throws AccumuloException, AccumuloSecurityException, TableNotFoundException, IOException,\n       ConstraintViolationException {\n \n-    String initialTable = null;\n-    try {\n-      if (cl.hasOption(tableNameOption.getOpt())) {\n-        initialTable = shellState.getTableName();\n-        shellState.setTableName(cl.getOptionValue(tableNameOption.getOpt()));\n-      }\n+    String tablename = null;\n+    if (cl.hasOption(tableNameOption.getOpt())) {\n+      // no need to checkTableState if tablename option is supplied\n+      tablename = cl.getOptionValue(tableNameOption.getOpt());\n+    } else {\n+      tablename = shellState.getTableName();\n+      // Verify currently in a context with tablename\n       shellState.checkTableState();\n+    }\n \n-      final Mutation m = new Mutation(new Text(cl.getArgs()[0].getBytes(Shell.CHARSET)));\n-      final Text colf = new Text(cl.getArgs()[1].getBytes(Shell.CHARSET));\n-      final Text colq = new Text(cl.getArgs()[2].getBytes(Shell.CHARSET));\n-      final Value val = new Value(cl.getArgs()[3].getBytes(Shell.CHARSET));\n-\n-      if (cl.hasOption(insertOptAuths.getOpt())) {\n-        final ColumnVisibility le =\n-            new ColumnVisibility(cl.getOptionValue(insertOptAuths.getOpt()));\n-        Shell.log.debug(\"Authorization label will be set to: {}\", le);\n-\n-        if (cl.hasOption(timestampOpt.getOpt()))\n-          m.put(colf, colq, le, Long.parseLong(cl.getOptionValue(timestampOpt.getOpt())), val);\n-        else\n-          m.put(colf, colq, le, val);\n-      } else if (cl.hasOption(timestampOpt.getOpt()))\n-        m.put(colf, colq, Long.parseLong(cl.getOptionValue(timestampOpt.getOpt())), val);\n+    final Mutation m = new Mutation(new Text(cl.getArgs()[0].getBytes(Shell.CHARSET)));\n+    final Text colf = new Text(cl.getArgs()[1].getBytes(Shell.CHARSET));\n+    final Text colq = new Text(cl.getArgs()[2].getBytes(Shell.CHARSET));\n+    final Value val = new Value(cl.getArgs()[3].getBytes(Shell.CHARSET));\n+\n+    if (cl.hasOption(insertOptAuths.getOpt())) {\n+      final ColumnVisibility le = new ColumnVisibility(cl.getOptionValue(insertOptAuths.getOpt()));\n+      Shell.log.debug(\"Authorization label will be set to: {}\", le);\n+\n+      if (cl.hasOption(timestampOpt.getOpt()))\n+        m.put(colf, colq, le, Long.parseLong(cl.getOptionValue(timestampOpt.getOpt())), val);\n       else\n-        m.put(colf, colq, val);\n-\n-      final BatchWriterConfig cfg =\n-          new BatchWriterConfig().setMaxMemory(Math.max(m.estimatedMemoryUsed(), 1024))\n-              .setMaxWriteThreads(1).setTimeout(getTimeout(cl), TimeUnit.MILLISECONDS);\n-      if (cl.hasOption(durabilityOption.getOpt())) {\n-        String userDurability = cl.getOptionValue(durabilityOption.getOpt());\n-        switch (userDurability) {\n-          case \"sync\":\n-            cfg.setDurability(Durability.SYNC);\n-            break;\n-          case \"flush\":\n-            cfg.setDurability(Durability.FLUSH);\n-            break;\n-          case \"none\":\n-            cfg.setDurability(Durability.NONE);\n-            break;\n-          case \"log\":\n-            cfg.setDurability(Durability.NONE);\n-            break;\n-          default:\n-            throw new IllegalArgumentException(\"Unknown durability: \" + userDurability);\n-        }\n+        m.put(colf, colq, le, val);\n+    } else if (cl.hasOption(timestampOpt.getOpt()))\n+      m.put(colf, colq, Long.parseLong(cl.getOptionValue(timestampOpt.getOpt())), val);\n+    else\n+      m.put(colf, colq, val);\n+\n+    final BatchWriterConfig cfg =\n+        new BatchWriterConfig().setMaxMemory(Math.max(m.estimatedMemoryUsed(), 1024))\n+            .setMaxWriteThreads(1).setTimeout(getTimeout(cl), TimeUnit.MILLISECONDS);\n+    if (cl.hasOption(durabilityOption.getOpt())) {\n+      String userDurability = cl.getOptionValue(durabilityOption.getOpt());\n+      switch (userDurability) {\n+        case \"sync\":\n+          cfg.setDurability(Durability.SYNC);\n+          break;\n+        case \"flush\":\n+          cfg.setDurability(Durability.FLUSH);\n+          break;\n+        case \"none\":\n+          cfg.setDurability(Durability.NONE);\n+          break;\n+        case \"log\":\n+          cfg.setDurability(Durability.NONE);\n+          break;\n+        default:\n+          throw new IllegalArgumentException(\"Unknown durability: \" + userDurability);\n+      }\n+    }\n+    final BatchWriter bw = shellState.getAccumuloClient().createBatchWriter(tablename, cfg);\n+    bw.addMutation(m);\n+    try {\n+      bw.close();\n+    } catch (MutationsRejectedException e) {\n+      final ArrayList<String> lines = new ArrayList<>();\n+      if (!e.getSecurityErrorCodes().isEmpty()) {\n+        lines.add(\"\\tAuthorization Failures:\");\n+      }\n+      for (Entry<TabletId,Set<SecurityErrorCode>> entry : e.getSecurityErrorCodes().entrySet()) {\n+        lines.add(\"\\t\\t\" + entry);\n       }\n-      final BatchWriter bw =\n-          shellState.getAccumuloClient().createBatchWriter(shellState.getTableName(), cfg);\n-      bw.addMutation(m);\n-      try {\n-        bw.close();\n-      } catch (MutationsRejectedException e) {\n-        final ArrayList<String> lines = new ArrayList<>();\n-        if (!e.getSecurityErrorCodes().isEmpty()) {\n-          lines.add(\"\\tAuthorization Failures:\");\n-        }\n-        for (Entry<TabletId,Set<SecurityErrorCode>> entry : e.getSecurityErrorCodes().entrySet()) {\n-          lines.add(\"\\t\\t\" + entry);\n-        }\n-        if (!e.getConstraintViolationSummaries().isEmpty()) {\n-          lines.add(\"\\tConstraint Failures:\");\n-        }\n-        for (ConstraintViolationSummary cvs : e.getConstraintViolationSummaries()) {\n-          lines.add(\"\\t\\t\" + cvs);\n-        }\n-\n-        if (lines.isEmpty() || e.getUnknownExceptions() > 0) {\n-          // must always print something\n-          lines.add(\" \" + e.getClass().getName() + \" : \" + e.getMessage());\n-          if (e.getCause() != null)\n-            lines.add(\"   Caused by : \" + e.getCause().getClass().getName() + \" : \"\n-                + e.getCause().getMessage());\n-        }\n-\n-        shellState.printLines(lines.iterator(), false);\n-\n-        return 1;\n+      if (!e.getConstraintViolationSummaries().isEmpty()) {\n+        lines.add(\"\\tConstraint Failures:\");\n+      }\n+      for (ConstraintViolationSummary cvs : e.getConstraintViolationSummaries()) {\n+        lines.add(\"\\t\\t\" + cvs);\n       }\n-      return 0;\n \n-    } finally {\n-      // reset table context to initial table name\n-      if (cl.hasOption(tableNameOption.getOpt())) {\n-        shellState.setTableName(initialTable);\n+      if (lines.isEmpty() || e.getUnknownExceptions() > 0) {\n+        // must always print something\n+        lines.add(\" \" + e.getClass().getName() + \" : \" + e.getMessage());\n+        if (e.getCause() != null)\n+          lines.add(\"   Caused by : \" + e.getCause().getClass().getName() + \" : \"\n+              + e.getCause().getMessage());\n       }\n+\n+      shellState.printLines(lines.iterator(), false);\n+\n+      return 1;\n     }\n+    return 0;\n   }\n \n   @Override\n"}}, {"oid": "f867c74b182b330b6ee4eb4566268250ff566c50", "url": "https://github.com/apache/accumulo/commit/f867c74b182b330b6ee4eb4566268250ff566c50", "message": "Add tablename option to shell insert command.\n\nSimplified task based upon suggestion from @ctubbsii.", "committedDate": "2020-11-09T16:09:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEwOTg1NA==", "url": "https://github.com/apache/accumulo/pull/1771#discussion_r520109854", "bodyText": "What's the reason for not supporting -t short name?", "author": "ctubbsii", "createdAt": "2020-11-09T20:47:19Z", "path": "shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java", "diffHunk": "@@ -171,6 +180,11 @@ public Options getOptions() {\n         \"durability to use for insert, should be one of \\\"none\\\" \\\"log\\\" \\\"flush\\\" or \\\"sync\\\"\");\n     o.addOption(durabilityOption);\n \n+    tableNameOption =\n+        new Option(\"\", \"tablename\", true, \"name of table in which data is being inserted\");\n+    tableNameOption.setArgName(\"tablename\");\n+    o.addOption(tableNameOption);\n+", "originalCommit": "f867c74b182b330b6ee4eb4566268250ff566c50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDExNTM5NA==", "url": "https://github.com/apache/accumulo/pull/1771#discussion_r520115394", "bodyText": "I chose not to use the short form to minimize any confusion with the timestamp parameter (-ts). There is also a timeout parameter that does not off a shortened name. If you think it would be nice to include one, I have no problem adding one. Could always use '-n' for 'name' perhaps. Let me know your thoughts.", "author": "jmark99", "createdAt": "2020-11-09T20:57:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEwOTg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI2MjgyNA==", "url": "https://github.com/apache/accumulo/pull/1771#discussion_r520262824", "bodyText": "If there's not already a -t, I don't think it's a problem. I don't think there's any concern over conflicting with -ts. In fact, most commands use the standard OptUtil.tableOpt. See  https://github.com/apache/accumulo/blob/main/shell/src/main/java/org/apache/accumulo/shell/commands/ScanCommand.java#L93 and https://github.com/apache/accumulo/blob/main/shell/src/main/java/org/apache/accumulo/shell/commands/ScanCommand.java#L395.\nI would recommend doing the same here, if there's no existing -t.", "author": "ctubbsii", "createdAt": "2020-11-10T03:26:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEwOTg1NA=="}], "type": "inlineReview", "revised_code": {"commit": "52d2254f0e0d181bb0fd7f1d2714718d793a83b9", "chunk": "diff --git a/shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java b/shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java\nindex 5feb18eea0..db92d49dad 100644\n--- a/shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java\n+++ b/shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java\n\n@@ -180,10 +171,7 @@ public class InsertCommand extends Command {\n         \"durability to use for insert, should be one of \\\"none\\\" \\\"log\\\" \\\"flush\\\" or \\\"sync\\\"\");\n     o.addOption(durabilityOption);\n \n-    tableNameOption =\n-        new Option(\"\", \"tablename\", true, \"name of table in which data is being inserted\");\n-    tableNameOption.setArgName(\"tablename\");\n-    o.addOption(tableNameOption);\n+    o.addOption(OptUtil.tableOpt(\"table in which data is to be inserted\"));\n \n     return o;\n   }\n"}}, {"oid": "52d2254f0e0d181bb0fd7f1d2714718d793a83b9", "url": "https://github.com/apache/accumulo/commit/52d2254f0e0d181bb0fd7f1d2714718d793a83b9", "message": "Add tablename option to shell insert command.\n\nModified the tablename parameter for 'insert' to use the shortened '-t'\nand the longer '--table' options.", "committedDate": "2020-11-10T16:06:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5Mzg3OQ==", "url": "https://github.com/apache/accumulo/pull/1771#discussion_r520693879", "bodyText": "Minor grammatical nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                o.addOption(OptUtil.tableOpt(\"table in which data is to be inserted\"));\n          \n          \n            \n                o.addOption(OptUtil.tableOpt(\"table into which data will be inserted\"));", "author": "ctubbsii", "createdAt": "2020-11-10T16:23:04Z", "path": "shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java", "diffHunk": "@@ -171,6 +171,8 @@ public Options getOptions() {\n         \"durability to use for insert, should be one of \\\"none\\\" \\\"log\\\" \\\"flush\\\" or \\\"sync\\\"\");\n     o.addOption(durabilityOption);\n \n+    o.addOption(OptUtil.tableOpt(\"table in which data is to be inserted\"));", "originalCommit": "52d2254f0e0d181bb0fd7f1d2714718d793a83b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5ODQ3Ng==", "url": "https://github.com/apache/accumulo/pull/1771#discussion_r520698476", "bodyText": "No problem. Didn't quite sound right to me, but I was blanking on how to re-word it.", "author": "jmark99", "createdAt": "2020-11-10T16:29:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5Mzg3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b773d80c67a3bfdfe0214a37e5e81b7dc741c3c7", "chunk": "diff --git a/shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java b/shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java\nindex db92d49dad..283387ff91 100644\n--- a/shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java\n+++ b/shell/src/main/java/org/apache/accumulo/shell/commands/InsertCommand.java\n\n@@ -171,7 +171,7 @@ public class InsertCommand extends Command {\n         \"durability to use for insert, should be one of \\\"none\\\" \\\"log\\\" \\\"flush\\\" or \\\"sync\\\"\");\n     o.addOption(durabilityOption);\n \n-    o.addOption(OptUtil.tableOpt(\"table in which data is to be inserted\"));\n+    o.addOption(OptUtil.tableOpt(\"table into which data will be inserted\"));\n \n     return o;\n   }\n"}}, {"oid": "b773d80c67a3bfdfe0214a37e5e81b7dc741c3c7", "url": "https://github.com/apache/accumulo/commit/b773d80c67a3bfdfe0214a37e5e81b7dc741c3c7", "message": "Add tablename option to shell insert command.\n\nChanged wording of -t/--table parameter usage message.", "committedDate": "2020-11-10T16:27:31Z", "type": "commit"}]}