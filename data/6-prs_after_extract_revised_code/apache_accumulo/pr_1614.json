{"pr_number": 1614, "pr_title": "Create max tablets property in new bulk import", "pr_createdAt": "2020-05-19T18:54:44Z", "pr_url": "https://github.com/apache/accumulo/pull/1614", "timeline": [{"oid": "ab92f60d0687aa9e3be8b0637240c088739b71fa", "url": "https://github.com/apache/accumulo/commit/ab92f60d0687aa9e3be8b0637240c088739b71fa", "message": "Add max tablets property to new bulk import\n\n* Creates the master.bulk.max.tablets property to allow restricting the\nnumber of tablets in a single bulk import", "committedDate": "2020-05-19T18:53:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNTU0MQ==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r428035541", "bodyText": "Maybe just a style comment - but I don't think this needs to be in a finally block.  If exception is not thrown, it will fail - otherwise catch (and ignore the exception) and then just continue.", "author": "EdColeman", "createdAt": "2020-05-20T14:00:11Z", "path": "test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java", "diffHunk": "@@ -183,6 +184,23 @@ public void testSingleTabletSingleFileOffline() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testMaxTablets() throws Exception {\n+    String maxTablets = \"0\";\n+    try (AccumuloClient client = Accumulo.newClient().from(getClientProps()).build()) {\n+      maxTablets = client.instanceOperations().getSystemConfiguration()\n+          .get(Property.MASTER_BULK_MAX_TABLETS.getKey());\n+      client.instanceOperations().setProperty(Property.MASTER_BULK_MAX_TABLETS.getKey(), \"1\");\n+      testBulkFile(false, false);\n+      fail(\"Expected IllegalArgumentException for \" + Property.MASTER_BULK_MAX_TABLETS);\n+    } catch (IllegalArgumentException e) {} finally {\n+      try (AccumuloClient client = Accumulo.newClient().from(getClientProps()).build()) {", "originalCommit": "ab92f60d0687aa9e3be8b0637240c088739b71fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1NDg3Mg==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r428054872", "bodyText": "I was thinking of the situation where an exception other than IllegalArgumentException is thrown, the property won't be changed back.  Typically this doesn't matter, but I was under the impression we are still striving towards getting the ITs to work as a standalone cluster (even if its still currently fails).", "author": "milleruntime", "createdAt": "2020-05-20T14:24:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNTU0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "2d7f5049dd0c35b9bea9099d68264018a69ffc16", "chunk": "diff --git a/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java b/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java\nindex 18f42d65bf..af5569f2db 100644\n--- a/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java\n+++ b/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java\n\n@@ -186,18 +186,26 @@ public class BulkNewIT extends SharedMiniClusterBase {\n \n   @Test\n   public void testMaxTablets() throws Exception {\n-    String maxTablets = \"0\";\n+    // test max tablets hit while inspecting bulk files\n     try (AccumuloClient client = Accumulo.newClient().from(getClientProps()).build()) {\n-      maxTablets = client.instanceOperations().getSystemConfiguration()\n-          .get(Property.MASTER_BULK_MAX_TABLETS.getKey());\n-      client.instanceOperations().setProperty(Property.MASTER_BULK_MAX_TABLETS.getKey(), \"1\");\n+      tableName = \"testMaxTablets_table1\";\n+      NewTableConfiguration newTableConf = new NewTableConfiguration();\n+      // set logical time type so we can set time on bulk import\n+      Map<String,String> props = new HashMap<>();\n+      props.put(Property.TABLE_BULK_MAX_TABLETS.getKey(), \"1\");\n+      newTableConf.setProperties(props);\n+      client.tableOperations().create(tableName, newTableConf);\n       testBulkFile(false, false);\n-      fail(\"Expected IllegalArgumentException for \" + Property.MASTER_BULK_MAX_TABLETS);\n-    } catch (IllegalArgumentException e) {} finally {\n-      try (AccumuloClient client = Accumulo.newClient().from(getClientProps()).build()) {\n-        client.instanceOperations().setProperty(Property.MASTER_BULK_MAX_TABLETS.getKey(),\n-            maxTablets);\n-      }\n+      fail(\"Expected IllegalArgumentException for \" + Property.TABLE_BULK_MAX_TABLETS);\n+    } catch (IllegalArgumentException e) {\n+      // expected\n+    }\n+    // test max tablets hit using load plan\n+    try {\n+      testBulkFile(false, true);\n+      fail(\"Expected IllegalArgumentException for \" + Property.TABLE_BULK_MAX_TABLETS);\n+    } catch (IllegalArgumentException e) {\n+      // expected\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1ODgwMg==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r428058802", "bodyText": "This check is different than the one in #1560, which ensured a single file did not go to too many tablets.  This is checking that all files do not go to too many tablets.", "author": "keith-turner", "createdAt": "2020-05-20T14:29:04Z", "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java", "diffHunk": "@@ -149,6 +150,11 @@ public void load()\n       if (mappings.isEmpty())\n         throw new IllegalArgumentException(\"Attempted to import zero files from \" + srcPath);\n \n+      long tabletMaxSize = conf.getCount(Property.MASTER_BULK_MAX_TABLETS);\n+      if (tabletMaxSize > 0 && mappings.keySet().size() > tabletMaxSize)", "originalCommit": "ab92f60d0687aa9e3be8b0637240c088739b71fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2MjgxNw==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r428062817", "bodyText": "Yes that is correct.  I am not sure which is better but based on the original description in #1559, I took it as we want to prevent files from mapping to too many tablets.", "author": "milleruntime", "createdAt": "2020-05-20T14:34:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1ODgwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2NjI0Nw==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r428066247", "bodyText": "I guess the danger with this check is stopping ingest due to false positives?  Like if I have 100 tablets and 10 files going to all tablets could be normal. I would rather stop 1 file going to all 100 then 10 going to all 100.", "author": "milleruntime", "createdAt": "2020-05-20T14:38:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1ODgwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwNDYxOQ==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r428104619", "bodyText": "I just looked at #1559 and saw the following sentence.  I would be in favor of preventing a single file from going to too many tablets.  If someone has a large number of tablets and each file is going to a few tablets, they are probably ok with that like you said.\n\nIt would be nice if we could establish a threshold in the bulk import process to abort when encountering a rfile that maps to more than a specified number of extents.", "author": "keith-turner", "createdAt": "2020-05-20T15:28:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1ODgwMg=="}], "type": "inlineReview", "revised_code": {"commit": "2d7f5049dd0c35b9bea9099d68264018a69ffc16", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java b/core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java\nindex dc007706f3..afcd37e1e1 100644\n--- a/core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java\n+++ b/core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java\n\n@@ -142,19 +150,14 @@ public class BulkImport implements ImportDestinationArguments, ImportMappingOpti\n     boolean shouldRetry = true;\n     while (shouldRetry) {\n       if (plan == null) {\n-        mappings = computeMappingFromFiles(fs, tableId, srcPath);\n+        mappings = computeMappingFromFiles(fs, tableId, srcPath, maxTablets);\n       } else {\n-        mappings = computeMappingFromPlan(fs, tableId, srcPath);\n+        mappings = computeMappingFromPlan(fs, tableId, srcPath, maxTablets);\n       }\n \n       if (mappings.isEmpty())\n         throw new IllegalArgumentException(\"Attempted to import zero files from \" + srcPath);\n \n-      long tabletMaxSize = conf.getCount(Property.MASTER_BULK_MAX_TABLETS);\n-      if (tabletMaxSize > 0 && mappings.keySet().size() > tabletMaxSize)\n-        throw new IllegalArgumentException(\"Attempted to import to \" + mappings.keySet().size()\n-            + \" tablets. Max tablets allowed set to \" + tabletMaxSize);\n-\n       BulkSerialize.writeLoadMapping(mappings, srcPath.toString(), fs::create);\n \n       List<ByteBuffer> args = Arrays.asList(ByteBuffer.wrap(tableId.canonical().getBytes(UTF_8)),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2NTIzNw==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r428065237", "bodyText": "I am not completely sure, but these two lines may not work as expected sometimes.  What I think may be able to happen is that the property is set on tserver A by the first line and then the second line reads props from tserver B.  If server B does not clear zoocache, then it could return a stale copy w/o the prop set on the first line.  I am not sure if the client side code to get props forces a prop cache clear.", "author": "keith-turner", "createdAt": "2020-05-20T14:37:27Z", "path": "test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java", "diffHunk": "@@ -183,6 +184,23 @@ public void testSingleTabletSingleFileOffline() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testMaxTablets() throws Exception {\n+    String maxTablets = \"0\";\n+    try (AccumuloClient client = Accumulo.newClient().from(getClientProps()).build()) {\n+      maxTablets = client.instanceOperations().getSystemConfiguration()\n+          .get(Property.MASTER_BULK_MAX_TABLETS.getKey());\n+      client.instanceOperations().setProperty(Property.MASTER_BULK_MAX_TABLETS.getKey(), \"1\");", "originalCommit": "ab92f60d0687aa9e3be8b0637240c088739b71fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2NTg3NA==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r428065874", "bodyText": "If it were a table prop, then table could be created with the prop and would not need to clear in finally.", "author": "keith-turner", "createdAt": "2020-05-20T14:38:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2NTIzNw=="}], "type": "inlineReview", "revised_code": {"commit": "2d7f5049dd0c35b9bea9099d68264018a69ffc16", "chunk": "diff --git a/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java b/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java\nindex 18f42d65bf..af5569f2db 100644\n--- a/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java\n+++ b/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java\n\n@@ -186,18 +186,26 @@ public class BulkNewIT extends SharedMiniClusterBase {\n \n   @Test\n   public void testMaxTablets() throws Exception {\n-    String maxTablets = \"0\";\n+    // test max tablets hit while inspecting bulk files\n     try (AccumuloClient client = Accumulo.newClient().from(getClientProps()).build()) {\n-      maxTablets = client.instanceOperations().getSystemConfiguration()\n-          .get(Property.MASTER_BULK_MAX_TABLETS.getKey());\n-      client.instanceOperations().setProperty(Property.MASTER_BULK_MAX_TABLETS.getKey(), \"1\");\n+      tableName = \"testMaxTablets_table1\";\n+      NewTableConfiguration newTableConf = new NewTableConfiguration();\n+      // set logical time type so we can set time on bulk import\n+      Map<String,String> props = new HashMap<>();\n+      props.put(Property.TABLE_BULK_MAX_TABLETS.getKey(), \"1\");\n+      newTableConf.setProperties(props);\n+      client.tableOperations().create(tableName, newTableConf);\n       testBulkFile(false, false);\n-      fail(\"Expected IllegalArgumentException for \" + Property.MASTER_BULK_MAX_TABLETS);\n-    } catch (IllegalArgumentException e) {} finally {\n-      try (AccumuloClient client = Accumulo.newClient().from(getClientProps()).build()) {\n-        client.instanceOperations().setProperty(Property.MASTER_BULK_MAX_TABLETS.getKey(),\n-            maxTablets);\n-      }\n+      fail(\"Expected IllegalArgumentException for \" + Property.TABLE_BULK_MAX_TABLETS);\n+    } catch (IllegalArgumentException e) {\n+      // expected\n+    }\n+    // test max tablets hit using load plan\n+    try {\n+      testBulkFile(false, true);\n+      fail(\"Expected IllegalArgumentException for \" + Property.TABLE_BULK_MAX_TABLETS);\n+    } catch (IllegalArgumentException e) {\n+      // expected\n     }\n   }\n \n"}}, {"oid": "2d7f5049dd0c35b9bea9099d68264018a69ffc16", "url": "https://github.com/apache/accumulo/commit/2d7f5049dd0c35b9bea9099d68264018a69ffc16", "message": "Changed to table property and moved check into both computeMapping methods\n\n* Cleaned up future exception so it just sends IllegalArgument back to client\n* Also fixed spelling of a method name", "committedDate": "2020-05-21T18:40:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg1MDAzNw==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r428850037", "bodyText": "I couldn't find a cleaner way to get a single table property from the client side...", "author": "milleruntime", "createdAt": "2020-05-21T18:57:26Z", "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java", "diffHunk": "@@ -133,6 +134,14 @@ public void load()\n \n     SortedMap<KeyExtent,Bulk.Files> mappings;\n     TableOperationsImpl tableOps = new TableOperationsImpl(context);\n+\n+    int maxTablets = 0;\n+    for (var prop : tableOps.getProperties(tableName)) {\n+      if (prop.getKey().equals(Property.TABLE_BULK_MAX_TABLETS.getKey())) {\n+        maxTablets = Integer.parseInt(prop.getValue());\n+        break;\n+      }\n+    }", "originalCommit": "2d7f5049dd0c35b9bea9099d68264018a69ffc16", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg1MTcwNg==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r428851706", "bodyText": "I thought it was cleaner for the user to just drop the ExecutionException coming out of the future since that is just implementation specific.", "author": "milleruntime", "createdAt": "2020-05-21T19:00:34Z", "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java", "diffHunk": "@@ -576,7 +587,12 @@ private Text toText(byte[] row) {\n         Thread.currentThread().interrupt();\n         throw new RuntimeException(e);\n       } catch (ExecutionException e) {\n-        throw new RuntimeException(e);\n+        // clean up exception for user\n+        Throwable t = e.getCause();\n+        if (t instanceof IllegalArgumentException) {\n+          throw (IllegalArgumentException) t;\n+        } else\n+          throw new RuntimeException(t);", "originalCommit": "2d7f5049dd0c35b9bea9099d68264018a69ffc16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMzY2Nw==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r428933667", "bodyText": "This could lead to a loss of information for someone debugging.  Like they see a stack trace from a background thread in Accumulo, but they don't know anything about the calling code in the foreground thread.", "author": "keith-turner", "createdAt": "2020-05-21T21:45:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg1MTcwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNTI1MQ==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r428935251", "bodyText": "I am not sure if the ExecutionException provides valuable information, but definitely want to wrap the IllegalArgumentException.  I would err on the side of caution with omiting the excution exception in that even if does not currently provide anything useful, it may in future versions of Java.", "author": "keith-turner", "createdAt": "2020-05-21T21:49:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg1MTcwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNTg2NQ==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r429215865", "bodyText": "Good point.  Better to error on the side of too much information.", "author": "milleruntime", "createdAt": "2020-05-22T12:25:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg1MTcwNg=="}], "type": "inlineReview", "revised_code": {"commit": "3951d98aeffc20fa4318d14d03ef3f0c8be56876", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java b/core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java\nindex afcd37e1e1..f61b691249 100644\n--- a/core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java\n+++ b/core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java\n\n@@ -587,12 +587,7 @@ public class BulkImport implements ImportDestinationArguments, ImportMappingOpti\n         Thread.currentThread().interrupt();\n         throw new RuntimeException(e);\n       } catch (ExecutionException e) {\n-        // clean up exception for user\n-        Throwable t = e.getCause();\n-        if (t instanceof IllegalArgumentException) {\n-          throw (IllegalArgumentException) t;\n-        } else\n-          throw new RuntimeException(t);\n+        throw new RuntimeException(e);\n       }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMjk3NQ==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r428932975", "bodyText": "I would wrap e so that stack traces are not lost and anyone getting the exceptions can trace the full code path from their code to the background thread.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Throwable t = e.getCause();\n          \n          \n            \n                    if (t instanceof IllegalArgumentException) {\n          \n          \n            \n                      throw (IllegalArgumentException) t;\n          \n          \n            \n                    } else\n          \n          \n            \n                      throw new RuntimeException(t);\n          \n          \n            \n                  }\n          \n          \n            \n                    Throwable t = e.getCause();\n          \n          \n            \n                    if (t instanceof IllegalArgumentException) {\n          \n          \n            \n                      throw new IllegalArgumentException(e);\n          \n          \n            \n                    } else\n          \n          \n            \n                      throw new RuntimeException(e);\n          \n          \n            \n                  }", "author": "keith-turner", "createdAt": "2020-05-21T21:43:46Z", "path": "core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java", "diffHunk": "@@ -576,7 +587,12 @@ private Text toText(byte[] row) {\n         Thread.currentThread().interrupt();\n         throw new RuntimeException(e);\n       } catch (ExecutionException e) {\n-        throw new RuntimeException(e);\n+        // clean up exception for user\n+        Throwable t = e.getCause();\n+        if (t instanceof IllegalArgumentException) {\n+          throw (IllegalArgumentException) t;\n+        } else\n+          throw new RuntimeException(t);\n       }", "originalCommit": "2d7f5049dd0c35b9bea9099d68264018a69ffc16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNzIzMw==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r429217233", "bodyText": "I am not sure this is better than just the Runtime.  I think this will wrap an IllegalArgument around the whole stack, which already has an IllegalArgument at the bottom.  I will play around.", "author": "milleruntime", "createdAt": "2020-05-22T12:29:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMjk3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1OTEwMQ==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r431159101", "bodyText": "See my other comment.  You OK with me keeping the exception handling as-is?", "author": "milleruntime", "createdAt": "2020-05-27T14:06:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMjk3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk1NTgwOA==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r431955808", "bodyText": "Sorry for the delay @milleruntime.  This fell off my radar.", "author": "keith-turner", "createdAt": "2020-05-28T16:11:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMjk3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3951d98aeffc20fa4318d14d03ef3f0c8be56876", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java b/core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java\nindex afcd37e1e1..f61b691249 100644\n--- a/core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java\n+++ b/core/src/main/java/org/apache/accumulo/core/clientImpl/bulk/BulkImport.java\n\n@@ -587,12 +587,7 @@ public class BulkImport implements ImportDestinationArguments, ImportMappingOpti\n         Thread.currentThread().interrupt();\n         throw new RuntimeException(e);\n       } catch (ExecutionException e) {\n-        // clean up exception for user\n-        Throwable t = e.getCause();\n-        if (t instanceof IllegalArgumentException) {\n-          throw (IllegalArgumentException) t;\n-        } else\n-          throw new RuntimeException(t);\n+        throw new RuntimeException(e);\n       }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzODc5NQ==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r428938795", "bodyText": "I recently learned about this new feature in Junit.  It also returns the expected exception if you want to check the message.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try {\n          \n          \n            \n                  testBulkFile(false, true);\n          \n          \n            \n                  fail(\"Expected IllegalArgumentException for \" + Property.TABLE_BULK_MAX_TABLETS);\n          \n          \n            \n                } catch (IllegalArgumentException e) {\n          \n          \n            \n                  // expected\n          \n          \n            \n                }\n          \n          \n            \n               Assert.assertThrows(IllegalArgumentException.class, () -> testBulkFile(false, true));", "author": "keith-turner", "createdAt": "2020-05-21T21:58:08Z", "path": "test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java", "diffHunk": "@@ -186,18 +186,26 @@ public void testSingleTabletSingleFileOffline() throws Exception {\n \n   @Test\n   public void testMaxTablets() throws Exception {\n-    String maxTablets = \"0\";\n+    // test max tablets hit while inspecting bulk files\n     try (AccumuloClient client = Accumulo.newClient().from(getClientProps()).build()) {\n-      maxTablets = client.instanceOperations().getSystemConfiguration()\n-          .get(Property.MASTER_BULK_MAX_TABLETS.getKey());\n-      client.instanceOperations().setProperty(Property.MASTER_BULK_MAX_TABLETS.getKey(), \"1\");\n+      tableName = \"testMaxTablets_table1\";\n+      NewTableConfiguration newTableConf = new NewTableConfiguration();\n+      // set logical time type so we can set time on bulk import\n+      Map<String,String> props = new HashMap<>();\n+      props.put(Property.TABLE_BULK_MAX_TABLETS.getKey(), \"1\");\n+      newTableConf.setProperties(props);\n+      client.tableOperations().create(tableName, newTableConf);\n       testBulkFile(false, false);\n-      fail(\"Expected IllegalArgumentException for \" + Property.MASTER_BULK_MAX_TABLETS);\n-    } catch (IllegalArgumentException e) {} finally {\n-      try (AccumuloClient client = Accumulo.newClient().from(getClientProps()).build()) {\n-        client.instanceOperations().setProperty(Property.MASTER_BULK_MAX_TABLETS.getKey(),\n-            maxTablets);\n-      }\n+      fail(\"Expected IllegalArgumentException for \" + Property.TABLE_BULK_MAX_TABLETS);\n+    } catch (IllegalArgumentException e) {\n+      // expected\n+    }\n+    // test max tablets hit using load plan\n+    try {\n+      testBulkFile(false, true);\n+      fail(\"Expected IllegalArgumentException for \" + Property.TABLE_BULK_MAX_TABLETS);\n+    } catch (IllegalArgumentException e) {\n+      // expected\n     }", "originalCommit": "2d7f5049dd0c35b9bea9099d68264018a69ffc16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNTk2Mg==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r429215962", "bodyText": "Cool thanks.  I am not sure what happened but Github isn't letting me apply your suggestion.  I will just change it manually.", "author": "milleruntime", "createdAt": "2020-05-22T12:25:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzODc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NTY3OA==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r429355678", "bodyText": "I settled with keeping the exception handling the way it is now.  I was able to clean up the IT using assertThrows and just checked the causes manually.  I think this is as clean as it is going to get until we move to Junit5.  I did find this library which I thought was interesting: https://assertj.github.io/doc/", "author": "milleruntime", "createdAt": "2020-05-22T16:55:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzODc5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3951d98aeffc20fa4318d14d03ef3f0c8be56876", "chunk": "diff --git a/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java b/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java\nindex af5569f2db..b8e4fd2e21 100644\n--- a/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java\n+++ b/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java\n\n@@ -186,7 +188,6 @@ public class BulkNewIT extends SharedMiniClusterBase {\n \n   @Test\n   public void testMaxTablets() throws Exception {\n-    // test max tablets hit while inspecting bulk files\n     try (AccumuloClient client = Accumulo.newClient().from(getClientProps()).build()) {\n       tableName = \"testMaxTablets_table1\";\n       NewTableConfiguration newTableConf = new NewTableConfiguration();\n"}}, {"oid": "3951d98aeffc20fa4318d14d03ef3f0c8be56876", "url": "https://github.com/apache/accumulo/commit/3951d98aeffc20fa4318d14d03ef3f0c8be56876", "message": "Revert exception handling change and clean up BulkNewIT", "committedDate": "2020-05-22T16:51:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk0ODYwMA==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r431948600", "bodyText": "Could mention that this property is only enforced when using the new bulk import API.", "author": "keith-turner", "createdAt": "2020-05-28T15:59:51Z", "path": "core/src/main/java/org/apache/accumulo/core/conf/Property.java", "diffHunk": "@@ -715,6 +715,8 @@\n           + \" perform specialized parsing of the key. \"),\n   TABLE_BLOOM_HASHTYPE(\"table.bloom.hash.type\", \"murmur\", PropertyType.STRING,\n       \"The bloom filter hash type\"),\n+  TABLE_BULK_MAX_TABLETS(\"table.bulk.max.tablets\", \"0\", PropertyType.COUNT,\n+      \"The maximum number of tablets allowed for one bulk import file. Value of 0 is Unlimited\"),", "originalCommit": "3951d98aeffc20fa4318d14d03ef3f0c8be56876", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6319d9e408350cd15570eb9a93de613e5d4e730e", "chunk": "diff --git a/core/src/main/java/org/apache/accumulo/core/conf/Property.java b/core/src/main/java/org/apache/accumulo/core/conf/Property.java\nindex cb010b5ecf..494541c442 100644\n--- a/core/src/main/java/org/apache/accumulo/core/conf/Property.java\n+++ b/core/src/main/java/org/apache/accumulo/core/conf/Property.java\n\n@@ -716,7 +716,8 @@ public enum Property {\n   TABLE_BLOOM_HASHTYPE(\"table.bloom.hash.type\", \"murmur\", PropertyType.STRING,\n       \"The bloom filter hash type\"),\n   TABLE_BULK_MAX_TABLETS(\"table.bulk.max.tablets\", \"0\", PropertyType.COUNT,\n-      \"The maximum number of tablets allowed for one bulk import file. Value of 0 is Unlimited\"),\n+      \"The maximum number of tablets allowed for one bulk import file. Value of 0 is Unlimited. \"\n+          + \"This property is only enforced in the new bulk import API\"),\n   TABLE_DURABILITY(\"table.durability\", \"sync\", PropertyType.DURABILITY,\n       \"The durability used to write to the write-ahead log. Legal values are:\"\n           + \" none, which skips the write-ahead log; log, which sends the data to the\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk1MDk4Mw==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r431950983", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Map<String,String> props = new HashMap<>();\n          \n          \n            \n                  props.put(Property.TABLE_BULK_MAX_TABLETS.getKey(), \"1\");\n          \n          \n            \n                 var props = Map.of(Property.TABLE_BULK_MAX_TABLETS.getKey(), \"1\");", "author": "keith-turner", "createdAt": "2020-05-28T16:03:20Z", "path": "test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java", "diffHunk": "@@ -183,6 +186,29 @@ public void testSingleTabletSingleFileOffline() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testMaxTablets() throws Exception {\n+    try (AccumuloClient client = Accumulo.newClient().from(getClientProps()).build()) {\n+      tableName = \"testMaxTablets_table1\";\n+      NewTableConfiguration newTableConf = new NewTableConfiguration();\n+      // set logical time type so we can set time on bulk import\n+      Map<String,String> props = new HashMap<>();\n+      props.put(Property.TABLE_BULK_MAX_TABLETS.getKey(), \"1\");", "originalCommit": "3951d98aeffc20fa4318d14d03ef3f0c8be56876", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f71a2d1ba175dbb74a8f9e26151b778c270eaa2c", "chunk": "diff --git a/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java b/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java\nindex b8e4fd2e21..a660117c7e 100644\n--- a/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java\n+++ b/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java\n\n@@ -192,8 +192,7 @@ public class BulkNewIT extends SharedMiniClusterBase {\n       tableName = \"testMaxTablets_table1\";\n       NewTableConfiguration newTableConf = new NewTableConfiguration();\n       // set logical time type so we can set time on bulk import\n-      Map<String,String> props = new HashMap<>();\n-      props.put(Property.TABLE_BULK_MAX_TABLETS.getKey(), \"1\");\n+     var props = Map.of(Property.TABLE_BULK_MAX_TABLETS.getKey(), \"1\");\n       newTableConf.setProperties(props);\n       client.tableOperations().create(tableName, newTableConf);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk1MzUxMg==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r431953512", "bodyText": "Not sure if this is possible, but it would be really nice to confirm that exception message contains the offending file name.  Whenever someone runs into this error message, knowing which file caused the problem will be extremely helpful to them.\nIf the test does not do this, I would also recommend creating multiple files.  One that exceeds the limit and few that do not.  Want to ensure in this case the troublesome file is listed in the message.", "author": "keith-turner", "createdAt": "2020-05-28T16:07:24Z", "path": "test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java", "diffHunk": "@@ -183,6 +186,29 @@ public void testSingleTabletSingleFileOffline() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void testMaxTablets() throws Exception {\n+    try (AccumuloClient client = Accumulo.newClient().from(getClientProps()).build()) {\n+      tableName = \"testMaxTablets_table1\";\n+      NewTableConfiguration newTableConf = new NewTableConfiguration();\n+      // set logical time type so we can set time on bulk import\n+      Map<String,String> props = new HashMap<>();\n+      props.put(Property.TABLE_BULK_MAX_TABLETS.getKey(), \"1\");\n+      newTableConf.setProperties(props);\n+      client.tableOperations().create(tableName, newTableConf);\n+\n+      // test max tablets hit while inspecting bulk files\n+      var thrown = assertThrows(RuntimeException.class, () -> testBulkFile(false, false));\n+      var c = thrown.getCause();\n+      assertTrue(\"Wrong exception: \" + c, c instanceof ExecutionException);\n+      assertTrue(\"Wrong exception: \" + c.getCause(),\n+          c.getCause() instanceof IllegalArgumentException);\n+", "originalCommit": "3951d98aeffc20fa4318d14d03ef3f0c8be56876", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM2NDQ3Mw==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r433364473", "bodyText": "I have been looking at BulkNewIT to see how we could test this scenario and I think there is an issue with the test data.  This line doesn't make sense to me and seems wrong: https://github.com/milleruntime/accumulo/blob/f71a2d1ba175dbb74a8f9e26151b778c270eaa2c/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java#L315\nThis also made me wonder about exclusivity when creating the load plan.  We don't mention whether the start and end rows are inclusive/exclusive on the load API here.  I was wondering this myself and eventually found it mentioned in the RangeType enum but think it should also be mentioned on the loadFileTo methods, with the startRow and endRow parameters.", "author": "milleruntime", "createdAt": "2020-06-01T16:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk1MzUxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ2MTg4NQ==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r433461885", "bodyText": "I looked at BulkNewIT line 315,  I think what is going is that the file with a hash of h3 overlaps two tablets.  It overlaps a tablet with an end row of 1333 and another tablet with an end row of 1666.  So that file is added as expected for those two tablets.", "author": "keith-turner", "createdAt": "2020-06-01T20:09:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk1MzUxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ2MzgyNQ==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r433463825", "bodyText": "but think it should also be mentioned on the loadFileTo methods, with the startRow and endRow parameters.\n\nFor the loadFileTo method, its javadoc could say that how the startRow and endRow are interpreted depends on the RangeType (with a javadoc link to RangeType).", "author": "keith-turner", "createdAt": "2020-06-01T20:13:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk1MzUxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3NDE1Nw==", "url": "https://github.com/apache/accumulo/pull/1614#discussion_r434774157", "bodyText": "Opened up #1619 so we don't forget", "author": "milleruntime", "createdAt": "2020-06-03T18:35:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk1MzUxMg=="}], "type": "inlineReview", "revised_code": {"commit": "f71a2d1ba175dbb74a8f9e26151b778c270eaa2c", "chunk": "diff --git a/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java b/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java\nindex b8e4fd2e21..a660117c7e 100644\n--- a/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java\n+++ b/test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java\n\n@@ -192,8 +192,7 @@ public class BulkNewIT extends SharedMiniClusterBase {\n       tableName = \"testMaxTablets_table1\";\n       NewTableConfiguration newTableConf = new NewTableConfiguration();\n       // set logical time type so we can set time on bulk import\n-      Map<String,String> props = new HashMap<>();\n-      props.put(Property.TABLE_BULK_MAX_TABLETS.getKey(), \"1\");\n+     var props = Map.of(Property.TABLE_BULK_MAX_TABLETS.getKey(), \"1\");\n       newTableConf.setProperties(props);\n       client.tableOperations().create(tableName, newTableConf);\n \n"}}, {"oid": "f71a2d1ba175dbb74a8f9e26151b778c270eaa2c", "url": "https://github.com/apache/accumulo/commit/f71a2d1ba175dbb74a8f9e26151b778c270eaa2c", "message": "Update test/src/main/java/org/apache/accumulo/test/functional/BulkNewIT.java\n\nCo-authored-by: Keith Turner <kturner@apache.org>", "committedDate": "2020-06-01T12:51:37Z", "type": "commit"}, {"oid": "3ff589ac91ac668b433e78fdb3f6a735d5da7091", "url": "https://github.com/apache/accumulo/commit/3ff589ac91ac668b433e78fdb3f6a735d5da7091", "message": "Added new data for max tablet test", "committedDate": "2020-06-02T15:41:46Z", "type": "commit"}, {"oid": "13ad1b33bc3e92669db8a523e1e3a87025326d7a", "url": "https://github.com/apache/accumulo/commit/13ad1b33bc3e92669db8a523e1e3a87025326d7a", "message": "Add server side check for max tablets\n\n* Update PrepBulkImport to use LoadMappingIterator and check overlapping\ntablet counts against table.bulk.max.tablets\n* Update PrepBulkImportTest to use a LoadMappingIterator object\n\nCo-authored-by: Keith Turner <kturner@apache.org>", "committedDate": "2020-06-04T19:09:11Z", "type": "commit"}, {"oid": "6319d9e408350cd15570eb9a93de613e5d4e730e", "url": "https://github.com/apache/accumulo/commit/6319d9e408350cd15570eb9a93de613e5d4e730e", "message": "Update max tablets propety comment", "committedDate": "2020-06-04T19:21:37Z", "type": "commit"}]}