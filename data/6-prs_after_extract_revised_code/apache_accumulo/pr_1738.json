{"pr_number": 1738, "pr_title": "VolumeManager and Volume internals cleanup", "pr_createdAt": "2020-10-15T15:22:19Z", "pr_url": "https://github.com/apache/accumulo/pull/1738", "timeline": [{"oid": "8f56442220df5bb45f16a3d28adb3dc061be5881", "url": "https://github.com/apache/accumulo/commit/8f56442220df5bb45f16a3d28adb3dc061be5881", "message": "VolumeManager and Volume internals cleanup\n\n* VolumeManager\n  * remove getDefaultVolume, which was only used to create a temporary\n    directory for creating tables with split points, and to resolve\n    relative paths\n  * replace \"default volume\" concept with the first available volume\n    (this is what it was effectively doing anyway... but now it's\n    implemented more cleanly)\n  * simplified much of the volume management code in the CreateTable\n    FaTE operation classes, where creation of temporary files for\n    storing splits on a pre-split table was being handled\n  * rename getFileSystem methods throughout that return VolumeManager to\n    getVolumeManager, and stop passing it as an extra parameter if it is\n    already available via a ServerContext object\n* Volume\n  * Remove unneeded overloaded Volume.prefixChild(Path)\n  * Rename Volume.isValidPath(Path) to Volume.containsPath(Path) to\n    improve readability\n  * Update javadoc for containsPath to describe what it means for a Path\n    to be contained\n  * Update VolumeImplTest to verify behavior of containsPath\n* VolumeImpl\n  * Make protected fields private\n  * Rename conf to hadoopConf to clarify which config it is\n  * normalize base path by stripping out trailing slashes\n  * rename helper method equivalentPaths(Path) to isAncestorPathOf(Path)\n    for readability in containsPath(Path) implementation\n  * add more strict argument checking for prefixChild(String)\n  * fix bug in isAncestorPathOf(Path) that incorrectly concluded /a/path\n    is an ancestor of /a/pa (/a is an ancestor, but /a/pa is not)\n* VolumeImplTest\n  * check normalization by testing with trailing slashes\n  * add more test cases for isAncestorPathOf, including checking for\n    \"breakout\" path terms, like \"..\"\n  * add test cases for prefixChild and containsPath\n* Tablet\n  * Fix bug in Tablet that wasn't using the Path's FileSystem when\n    deleting a file, but instead was using an arbitrary FileSystem", "committedDate": "2020-10-15T15:15:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0NDIyOA==", "url": "https://github.com/apache/accumulo/pull/1738#discussion_r505644228", "bodyText": "It looks like you are just clarifying what should be in the string parameter and did not change the behavior correct?", "author": "milleruntime", "createdAt": "2020-10-15T15:38:54Z", "path": "core/src/main/java/org/apache/accumulo/core/volume/Volume.java", "diffHunk": "@@ -38,26 +38,25 @@\n   String getBasePath();\n \n   /**\n-   * Convert the given Path into a Path that is relative to the base path for this Volume\n+   * Convert the given child path into a Path that is relative to the base path for this Volume. The\n+   * supplied path should not include any scheme (such as <code>file:</code> or <code>hdfs:</code>),\n+   * and should not contain any relative path \"breakout\" patterns, such as <code>../</code>. If the\n+   * path begins with a single slash, it will be preserved while prefixing this volume. If it does\n+   * not begin with a single slash, one will be inserted.", "originalCommit": "8f56442220df5bb45f16a3d28adb3dc061be5881", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1NDc2NA==", "url": "https://github.com/apache/accumulo/pull/1738#discussion_r505654764", "bodyText": "The only behavior change is the stricter checking of params. Previously, it wouldn't work right... if you passed in a param that had a leading slash, it would not prefix it correctly.", "author": "ctubbsii", "createdAt": "2020-10-15T15:53:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0NDIyOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0NzcxNg==", "url": "https://github.com/apache/accumulo/pull/1738#discussion_r505647716", "bodyText": "Nice, this is much more clear.", "author": "milleruntime", "createdAt": "2020-10-15T15:43:43Z", "path": "server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManager.java", "diffHunk": "@@ -179,12 +179,14 @@ void bulkRename(Map<Path,Path> oldToNewPathMap, int poolSize, String poolName,\n   boolean canSyncAndFlush(Path path);\n \n   /**\n-   * Fetch the default Volume\n+   * Fetch the first configured instance Volume\n    */\n-  Volume getDefaultVolume();\n+  default Volume getFirst() {\n+    return getVolumes().iterator().next();\n+  }", "originalCommit": "8f56442220df5bb45f16a3d28adb3dc061be5881", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1MjAxNg==", "url": "https://github.com/apache/accumulo/pull/1738#discussion_r505652016", "bodyText": "Any idea why this temp file was created? Sounds like it was created to help with failover somewhere.", "author": "milleruntime", "createdAt": "2020-10-15T15:49:48Z", "path": "server/manager/src/main/java/org/apache/accumulo/master/FateServiceHandler.java", "diffHunk": "@@ -779,65 +781,37 @@ private String validateNewNamespaceArgument(ByteBuffer namespaceArg, TableOperat\n   /**\n    * Create a file on the file system to hold the splits to be created at table creation.\n    */\n-  private String writeSplitsToFile(final long opid, final List<ByteBuffer> arguments,\n+  private void writeSplitsToFile(Path splitsPath, final List<ByteBuffer> arguments,\n       final int splitCount, final int splitOffset) throws IOException {\n-    String opidStr = String.format(\"%016x\", opid);\n-    String splitsPath = getSplitPath(\"/tmp/splits-\" + opidStr);\n-    removeAndCreateTempFile(splitsPath);\n-    try (FSDataOutputStream stream = master.getOutputStream(splitsPath)) {\n-      writeSplitsToFileSystem(stream, arguments, splitCount, splitOffset);\n+    FileSystem fs = splitsPath.getFileSystem(master.getContext().getHadoopConf());\n+    try (FSDataOutputStream stream = fs.create(splitsPath)) {\n+      // base64 encode because splits can contain binary\n+      for (int i = splitOffset; i < splitCount + splitOffset; i++) {\n+        byte[] splitBytes = ByteBufferUtil.toBytes(arguments.get(i));\n+        String encodedSplit = Base64.getEncoder().encodeToString(splitBytes);\n+        stream.writeBytes(encodedSplit + '\\n');\n+      }\n     } catch (IOException e) {\n-      log.error(\"Error in FateServiceHandler while writing splits for opid: \" + opidStr + \": \"\n-          + e.getMessage());\n+      log.error(\"Error in FateServiceHandler while writing splits to {}: {}\", splitsPath,\n+          e.getMessage());\n       throw e;\n     }\n-    return splitsPath;\n-  }\n-\n-  /**\n-   * Always check for and delete the splits file if it exists to prevent issues in case of server\n-   * failure and/or FateServiceHandler retries.\n-   */\n-  private void removeAndCreateTempFile(String path) throws IOException {", "originalCommit": "8f56442220df5bb45f16a3d28adb3dc061be5881", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1NTg4NA==", "url": "https://github.com/apache/accumulo/pull/1738#discussion_r505655884", "bodyText": "This was part of the CreateTable FaTE operation if you created a pre-split table. It would delete the file so it could get recreated. I inline'd this and changed it to create a directory in mkTempDir instead.", "author": "ctubbsii", "createdAt": "2020-10-15T15:55:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1MjAxNg=="}], "type": "inlineReview", "revised_code": {"commit": "bd1c1f7262a9cc74b729077f4c090243d1fd9208", "chunk": "diff --git a/server/manager/src/main/java/org/apache/accumulo/master/FateServiceHandler.java b/server/manager/src/main/java/org/apache/accumulo/master/FateServiceHandler.java\nindex f83da4b233..7f0bdac4d0 100644\n--- a/server/manager/src/main/java/org/apache/accumulo/master/FateServiceHandler.java\n+++ b/server/manager/src/main/java/org/apache/accumulo/master/FateServiceHandler.java\n\n@@ -789,7 +790,7 @@ class FateServiceHandler implements FateService.Iface {\n       for (int i = splitOffset; i < splitCount + splitOffset; i++) {\n         byte[] splitBytes = ByteBufferUtil.toBytes(arguments.get(i));\n         String encodedSplit = Base64.getEncoder().encodeToString(splitBytes);\n-        stream.writeBytes(encodedSplit + '\\n');\n+        stream.write((encodedSplit + '\\n').getBytes(UTF_8));\n       }\n     } catch (IOException e) {\n       log.error(\"Error in FateServiceHandler while writing splits to {}: {}\", splitsPath,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1MzMwMw==", "url": "https://github.com/apache/accumulo/pull/1738#discussion_r505653303", "bodyText": "Looks like the comments are outdated now that you changed the parameters.", "author": "milleruntime", "createdAt": "2020-10-15T15:51:37Z", "path": "server/manager/src/main/java/org/apache/accumulo/master/tableOps/Utils.java", "diffHunk": "@@ -198,19 +197,21 @@ public static void checkNamespaceDoesNotExist(ServerContext context, String name\n    * Given an input stream and a flag indicating if the file info is base64 encoded or not, retrieve\n    * the data from a file on the file system. It is assumed that the file is textual and not binary\n    * data.\n+   *", "originalCommit": "8f56442220df5bb45f16a3d28adb3dc061be5881", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1NjM1MA==", "url": "https://github.com/apache/accumulo/pull/1738#discussion_r505656350", "bodyText": "Oh, probably. I can check.", "author": "ctubbsii", "createdAt": "2020-10-15T15:55:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1MzMwMw=="}], "type": "inlineReview", "revised_code": {"commit": "bd1c1f7262a9cc74b729077f4c090243d1fd9208", "chunk": "diff --git a/server/manager/src/main/java/org/apache/accumulo/master/tableOps/Utils.java b/server/manager/src/main/java/org/apache/accumulo/master/tableOps/Utils.java\nindex 360d8b34ad..227f837383 100644\n--- a/server/manager/src/main/java/org/apache/accumulo/master/tableOps/Utils.java\n+++ b/server/manager/src/main/java/org/apache/accumulo/master/tableOps/Utils.java\n\n@@ -194,12 +194,12 @@ public class Utils {\n   }\n \n   /**\n-   * Given an input stream and a flag indicating if the file info is base64 encoded or not, retrieve\n-   * the data from a file on the file system. It is assumed that the file is textual and not binary\n-   * data.\n+   * Given a fully-qualified Path and a flag indicating if the file info is base64 encoded or not,\n+   * retrieve the data from a file on the file system. It is assumed that the file is textual and\n+   * not binary data.\n    *\n    * @param path\n-   *          the fully qualified path\n+   *          the fully-qualified path\n    */\n   public static SortedSet<Text> getSortedSetFromFile(Master master, Path path, boolean encoded)\n       throws IOException {\n"}}, {"oid": "bd1c1f7262a9cc74b729077f4c090243d1fd9208", "url": "https://github.com/apache/accumulo/commit/bd1c1f7262a9cc74b729077f4c090243d1fd9208", "message": "Update from code review\n\n* Update instance.volumes property description\n* Ensure split files get written and read using UTF-8\n* Fix javadoc for Utils.getSortedSetFromFile", "committedDate": "2020-10-15T18:02:06Z", "type": "commit"}, {"oid": "12440636b8305a169108efd646883f07e3f29dfe", "url": "https://github.com/apache/accumulo/commit/12440636b8305a169108efd646883f07e3f29dfe", "message": "Merge branch 'main' into fix-default-volume", "committedDate": "2020-10-20T19:09:17Z", "type": "commit"}, {"oid": "d4b66ef757fec862c5895af50c1721139a0117c1", "url": "https://github.com/apache/accumulo/commit/d4b66ef757fec862c5895af50c1721139a0117c1", "message": "Fix test breakages\n\n* Fix `VolumeImpl.toString()`\n* Improve exception message for prefixChild to include volume name\n* Improve test cases for VolumeImplTest, separating out the different\n  failure cases to validate the exception messages", "committedDate": "2020-10-20T20:58:35Z", "type": "commit"}]}