{"pr_number": 1545, "pr_title": "Remove miniDFS from HalfDeadTServerIT", "pr_createdAt": "2020-03-04T20:19:33Z", "pr_url": "https://github.com/apache/accumulo/pull/1545", "timeline": [{"oid": "123ace44564b3c2aeb2dc7a8ebb26a24da8e3960", "url": "https://github.com/apache/accumulo/commit/123ace44564b3c2aeb2dc7a8ebb26a24da8e3960", "message": "Remove miniDFS from HalfDeadTServerIT\n\nRemove use of miniDFS from IT, because sometimes miniDFS is slow to\nstart up, and it causes the IT to time out. It is not needed for the\ntest, since the test case works fine on LocalFileSystem-based DFS.\n\nUse java.util.scanner to clean up boilerplate BufferedReader stuffs.\n\nSuppress some spammy ZK logs in IT log4j2 config.\n\nAdd prefix to DumpOutput class in HalfDeadTServerIT to help troubleshoot\nthe IT in future.", "committedDate": "2020-03-04T20:14:32Z", "type": "commit"}, {"oid": "62bdc2691fc255947cc9d3ad03ee0aa02fb29d5b", "url": "https://github.com/apache/accumulo/commit/62bdc2691fc255947cc9d3ad03ee0aa02fb29d5b", "message": "Build fake_disk_failure.so only once\n\nBuild shared library for fake_disk_failure.so only once, before the\nclass.\n\nUse ProcessBuilder to connect the IO when building the shared library,\nso any errors from the compiler are shown on the IT's console capture.\n\nRemove compilation warning about unused variable in fake_disk_failure.c", "committedDate": "2020-03-04T22:39:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMTQ3Mg==", "url": "https://github.com/apache/accumulo/pull/1545#discussion_r388231472", "bodyText": "If the \"so\" exists, do you even need to rec-compile? I guess you run the risk of it being corrupt or an incorrect so, but a clean should remove this as well.", "author": "phrocker", "createdAt": "2020-03-05T11:20:25Z", "path": "test/src/main/java/org/apache/accumulo/test/functional/HalfDeadTServerIT.java", "diffHunk": "@@ -63,7 +66,29 @@ protected int defaultTimeoutSeconds() {\n     return 4 * 60;\n   }\n \n-  class DumpOutput extends Daemon {\n+  private static final AtomicBoolean sharedLibBuilt = new AtomicBoolean(false);\n+\n+  @SuppressFBWarnings(value = \"COMMAND_INJECTION\",\n+      justification = \"command executed is not from user input\")\n+  @BeforeClass\n+  public static void buildSharedLib() throws IOException, InterruptedException {\n+    String root = System.getProperty(\"user.dir\");\n+    String source = root + \"/src/test/c/fake_disk_failure.c\";\n+    String lib = root + \"/target/fake_disk_failure.so\";", "originalCommit": "62bdc2691fc255947cc9d3ad03ee0aa02fb29d5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM1MjkwNg==", "url": "https://github.com/apache/accumulo/pull/1545#discussion_r388352906", "bodyText": "Perhaps not, but that's a bit out of scope of what I was trying to optimize here. I was actually thinking about creating a proper Makefile and building the shared lib with exec-maven-plugin rather than doing it with a direct call to gcc in the test. But again, I felt it was a bit out of scope.", "author": "ctubbsii", "createdAt": "2020-03-05T15:06:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMTQ3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "010acc789f917cbb9d7b93fc888eb9b7ce523d80", "chunk": "diff --git a/test/src/main/java/org/apache/accumulo/test/functional/HalfDeadTServerIT.java b/test/src/main/java/org/apache/accumulo/test/functional/HalfDeadTServerIT.java\nindex 63c6eab4ed..28ec5fa99d 100644\n--- a/test/src/main/java/org/apache/accumulo/test/functional/HalfDeadTServerIT.java\n+++ b/test/src/main/java/org/apache/accumulo/test/functional/HalfDeadTServerIT.java\n\n@@ -84,36 +101,39 @@ public class HalfDeadTServerIT extends ConfigurableMacBase {\n       cmd = new String[] {\"gcc\", \"-D_GNU_SOURCE\", \"-Wall\", \"-fPIC\", source, \"-shared\", \"-o\", lib,\n           \"-ldl\"};\n     }\n+    // inherit IO to link see the command's output on the current console\n     Process gcc = new ProcessBuilder(cmd).inheritIO().start();\n+    // wait for and record whether the compilation of the native library succeeded\n     sharedLibBuilt.set(gcc.waitFor() == 0);\n   }\n \n+  // a simple class to capture a launched process' output (and repeat it back)\n   private static class DumpOutput extends Daemon {\n \n-    private final Scanner scanner;\n-    private final StringBuilder output;\n+    private final Scanner lineScanner;\n+    private final StringBuilder capturedOutput;\n     private final PrintStream printer;\n     private final String printerName;\n \n-    DumpOutput(InputStream is, PrintStream out) {\n-      scanner = new Scanner(is);\n-      output = new StringBuilder();\n+    DumpOutput(InputStream is, PrintStream out, String name) {\n+      lineScanner = new Scanner(is);\n+      capturedOutput = new StringBuilder();\n       printer = out;\n-      printerName = out == System.out ? \"stdout\" : out == System.err ? \"stderr\" : out.toString();\n+      printerName = name;\n     }\n \n     @Override\n     public void run() {\n-      while (scanner.hasNextLine()) {\n-        String line = scanner.nextLine();\n-        output.append(line);\n-        output.append(\"\\n\");\n+      while (lineScanner.hasNextLine()) {\n+        String line = lineScanner.nextLine();\n+        capturedOutput.append(line);\n+        capturedOutput.append(\"\\n\");\n         printer.printf(\"%s(%s):%s%n\", getClass().getSimpleName(), printerName, line);\n       }\n     }\n \n     public String getCaptured() {\n-      return output.toString();\n+      return capturedOutput.toString();\n     }\n   }\n \n"}}, {"oid": "010acc789f917cbb9d7b93fc888eb9b7ce523d80", "url": "https://github.com/apache/accumulo/commit/010acc789f917cbb9d7b93fc888eb9b7ce523d80", "message": "Add comments for HalfDeadTServerIT\n\nAdd comments and make some variables a bit more explicit.", "committedDate": "2020-03-05T15:52:58Z", "type": "commit"}]}