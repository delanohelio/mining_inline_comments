{"pr_number": 1320, "pr_title": "Fix issue with cast exception from sql_variant", "pr_createdAt": "2020-04-28T16:57:21Z", "pr_url": "https://github.com/microsoft/mssql-jdbc/pull/1320", "timeline": [{"oid": "b295f7f24de7e228b8bf53890044ef1c8789d975", "url": "https://github.com/microsoft/mssql-jdbc/commit/b295f7f24de7e228b8bf53890044ef1c8789d975", "message": "Fix issue 1302", "committedDate": "2020-04-27T17:15:07Z", "type": "commit"}, {"oid": "87fb2c4d7aff182f111ed3becc167f2d7ffbb4c7", "url": "https://github.com/microsoft/mssql-jdbc/commit/87fb2c4d7aff182f111ed3becc167f2d7ffbb4c7", "message": "revert", "committedDate": "2020-04-27T17:48:22Z", "type": "commit"}, {"oid": "df9fff7b3b35466547d9d4220b82b1d66acafdd8", "url": "https://github.com/microsoft/mssql-jdbc/commit/df9fff7b3b35466547d9d4220b82b1d66acafdd8", "message": "1302 fix", "committedDate": "2020-04-28T16:44:56Z", "type": "commit"}, {"oid": "545ecb8500654940e3d8991bf26aa44eeff816b7", "url": "https://github.com/microsoft/mssql-jdbc/commit/545ecb8500654940e3d8991bf26aa44eeff816b7", "message": "test adjustments / no longer returning string", "committedDate": "2020-04-28T22:20:36Z", "type": "commit"}, {"oid": "1c806d1de919e51fe2a2f9f23dd9ff303329fe56", "url": "https://github.com/microsoft/mssql-jdbc/commit/1c806d1de919e51fe2a2f9f23dd9ff303329fe56", "message": "more changes", "committedDate": "2020-04-28T22:55:36Z", "type": "commit"}, {"oid": "b5e88ce353fd00842333d0b21237383e1d128751", "url": "https://github.com/microsoft/mssql-jdbc/commit/b5e88ce353fd00842333d0b21237383e1d128751", "message": "add test", "committedDate": "2020-04-28T23:04:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc2ODI3Nw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1320#discussion_r421768277", "bodyText": "ResultSet in try block.", "author": "ulvii", "createdAt": "2020-05-07T20:17:45Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLVariantResultSetTest.java", "diffHunk": "@@ -1061,6 +1061,16 @@ public void testTimeClassAsSqlVariant() throws SQLException {\n             assertEquals(object.getClass(), java.sql.Time.class);;\n         }\n     }\n+    \n+    @Test\n+    public void testCastThenGetNumeric() throws SQLException {\n+        try (Connection con = getConnection(); Statement stmt = con.createStatement();) {\n+            SQLServerResultSet rs = (SQLServerResultSet) stmt.executeQuery(\"select cast(123 as sql_variant) as c1\");", "originalCommit": "b5e88ce353fd00842333d0b21237383e1d128751", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "778400076a9331f7b0498790ba17b14d5b5f4bdc", "chunk": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLVariantResultSetTest.java b/src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLVariantResultSetTest.java\nindex 5ac94789..6f554fea 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLVariantResultSetTest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLVariantResultSetTest.java\n\n@@ -1064,11 +1064,18 @@ public class SQLVariantResultSetTest extends AbstractTest {\n     \n     @Test\n     public void testCastThenGetNumeric() throws SQLException {\n-        try (Connection con = getConnection(); Statement stmt = con.createStatement();) {\n-            SQLServerResultSet rs = (SQLServerResultSet) stmt.executeQuery(\"select cast(123 as sql_variant) as c1\");\n+        try (Connection con = getConnection(); Statement stmt = con.createStatement();\n+                SQLServerResultSet rs = (SQLServerResultSet) stmt\n+                        .executeQuery(\"select cast(123 as sql_variant) as c1\");) {\n+\n             rs.next();\n-            long longValue = rs.getLong(\"c1\");\n-            assertEquals(longValue, 123L);\n+            assertEquals(true, rs.getBoolean(\"c1\")); // select int as boolean inside sql_variant\n+            assertEquals(123, rs.getShort(\"c1\")); // select int as short inside sql_variant\n+            assertEquals(123L, rs.getInt(\"c1\")); // select int as int inside sql_variant\n+            assertEquals(123f, rs.getFloat(\"c1\")); // select int as float inside sql_variant\n+            assertEquals(123L, rs.getLong(\"c1\")); // select int as long inside sql_variant\n+            assertEquals(123d, rs.getDouble(\"c1\")); // select int as double inside sql_variant\n+            assertEquals(new BigDecimal(123), rs.getBigDecimal(\"c1\")); // select int as bigdecimal (money) inside sql_variant\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc2ODM5Mw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1320#discussion_r421768393", "bodyText": "Expected value first.", "author": "ulvii", "createdAt": "2020-05-07T20:17:59Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLVariantResultSetTest.java", "diffHunk": "@@ -1061,6 +1061,16 @@ public void testTimeClassAsSqlVariant() throws SQLException {\n             assertEquals(object.getClass(), java.sql.Time.class);;\n         }\n     }\n+    \n+    @Test\n+    public void testCastThenGetNumeric() throws SQLException {\n+        try (Connection con = getConnection(); Statement stmt = con.createStatement();) {\n+            SQLServerResultSet rs = (SQLServerResultSet) stmt.executeQuery(\"select cast(123 as sql_variant) as c1\");\n+            rs.next();\n+            long longValue = rs.getLong(\"c1\");\n+            assertEquals(longValue, 123L);", "originalCommit": "b5e88ce353fd00842333d0b21237383e1d128751", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "778400076a9331f7b0498790ba17b14d5b5f4bdc", "chunk": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLVariantResultSetTest.java b/src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLVariantResultSetTest.java\nindex 5ac94789..6f554fea 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLVariantResultSetTest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLVariantResultSetTest.java\n\n@@ -1064,11 +1064,18 @@ public class SQLVariantResultSetTest extends AbstractTest {\n     \n     @Test\n     public void testCastThenGetNumeric() throws SQLException {\n-        try (Connection con = getConnection(); Statement stmt = con.createStatement();) {\n-            SQLServerResultSet rs = (SQLServerResultSet) stmt.executeQuery(\"select cast(123 as sql_variant) as c1\");\n+        try (Connection con = getConnection(); Statement stmt = con.createStatement();\n+                SQLServerResultSet rs = (SQLServerResultSet) stmt\n+                        .executeQuery(\"select cast(123 as sql_variant) as c1\");) {\n+\n             rs.next();\n-            long longValue = rs.getLong(\"c1\");\n-            assertEquals(longValue, 123L);\n+            assertEquals(true, rs.getBoolean(\"c1\")); // select int as boolean inside sql_variant\n+            assertEquals(123, rs.getShort(\"c1\")); // select int as short inside sql_variant\n+            assertEquals(123L, rs.getInt(\"c1\")); // select int as int inside sql_variant\n+            assertEquals(123f, rs.getFloat(\"c1\")); // select int as float inside sql_variant\n+            assertEquals(123L, rs.getLong(\"c1\")); // select int as long inside sql_variant\n+            assertEquals(123d, rs.getDouble(\"c1\")); // select int as double inside sql_variant\n+            assertEquals(new BigDecimal(123), rs.getBigDecimal(\"c1\")); // select int as bigdecimal (money) inside sql_variant\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc3NjE5MA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1320#discussion_r421776190", "bodyText": "Please add test cases for rest of the datatypes this PR applies to.", "author": "ulvii", "createdAt": "2020-05-07T20:32:59Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLVariantResultSetTest.java", "diffHunk": "@@ -1061,6 +1061,16 @@ public void testTimeClassAsSqlVariant() throws SQLException {\n             assertEquals(object.getClass(), java.sql.Time.class);;\n         }\n     }\n+    \n+    @Test\n+    public void testCastThenGetNumeric() throws SQLException {", "originalCommit": "b5e88ce353fd00842333d0b21237383e1d128751", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM1NDA5NA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1320#discussion_r422354094", "bodyText": "Done (applies to other comments too)", "author": "peterbae", "createdAt": "2020-05-08T20:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc3NjE5MA=="}], "type": "inlineReview", "revised_code": {"commit": "778400076a9331f7b0498790ba17b14d5b5f4bdc", "chunk": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLVariantResultSetTest.java b/src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLVariantResultSetTest.java\nindex 5ac94789..6f554fea 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLVariantResultSetTest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/datatypes/SQLVariantResultSetTest.java\n\n@@ -1064,11 +1064,18 @@ public class SQLVariantResultSetTest extends AbstractTest {\n     \n     @Test\n     public void testCastThenGetNumeric() throws SQLException {\n-        try (Connection con = getConnection(); Statement stmt = con.createStatement();) {\n-            SQLServerResultSet rs = (SQLServerResultSet) stmt.executeQuery(\"select cast(123 as sql_variant) as c1\");\n+        try (Connection con = getConnection(); Statement stmt = con.createStatement();\n+                SQLServerResultSet rs = (SQLServerResultSet) stmt\n+                        .executeQuery(\"select cast(123 as sql_variant) as c1\");) {\n+\n             rs.next();\n-            long longValue = rs.getLong(\"c1\");\n-            assertEquals(longValue, 123L);\n+            assertEquals(true, rs.getBoolean(\"c1\")); // select int as boolean inside sql_variant\n+            assertEquals(123, rs.getShort(\"c1\")); // select int as short inside sql_variant\n+            assertEquals(123L, rs.getInt(\"c1\")); // select int as int inside sql_variant\n+            assertEquals(123f, rs.getFloat(\"c1\")); // select int as float inside sql_variant\n+            assertEquals(123L, rs.getLong(\"c1\")); // select int as long inside sql_variant\n+            assertEquals(123d, rs.getDouble(\"c1\")); // select int as double inside sql_variant\n+            assertEquals(new BigDecimal(123), rs.getBigDecimal(\"c1\")); // select int as bigdecimal (money) inside sql_variant\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxMTc2Ng==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1320#discussion_r421811766", "bodyText": "can you add a comment here on why these 2 values?", "author": "lilgreenbird", "createdAt": "2020-05-07T21:42:41Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/DDC.java", "diffHunk": "@@ -72,6 +72,17 @@ static final Object convertIntegerToObject(int intValue, int valueLength, JDBCTy\n                 return (float) intValue;\n             case BINARY:\n                 return convertIntToBytes(intValue, valueLength);\n+            case SQL_VARIANT:\n+                // return short or bit if the underlying datatype of sql_variant is tinyint, smallint or bit\n+                // otherwise, return integer\n+                // Longer datatypes such as double and float are handled by convertLongToObject instead.\n+                if (valueLength == 1) {\n+                    return 0 != intValue;\n+                } else if (valueLength == 3 || valueLength == 4) {", "originalCommit": "b5e88ce353fd00842333d0b21237383e1d128751", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzNTQwMg==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1320#discussion_r421835402", "bodyText": "I do have a comment, on line 76", "author": "peterbae", "createdAt": "2020-05-07T22:41:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxMTc2Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "778400076a9331f7b0498790ba17b14d5b5f4bdc", "url": "https://github.com/microsoft/mssql-jdbc/commit/778400076a9331f7b0498790ba17b14d5b5f4bdc", "message": "update tests", "committedDate": "2020-05-08T20:20:52Z", "type": "commit"}, {"oid": "da113804eea22739c907ec7199b19f41f697ecee", "url": "https://github.com/microsoft/mssql-jdbc/commit/da113804eea22739c907ec7199b19f41f697ecee", "message": "remove unreachable code", "committedDate": "2020-05-08T23:45:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE4OTYyMw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1320#discussion_r423189623", "bodyText": "1 == valueLength, same in line 81", "author": "lilgreenbird", "createdAt": "2020-05-11T17:08:44Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/DDC.java", "diffHunk": "@@ -72,6 +72,17 @@ static final Object convertIntegerToObject(int intValue, int valueLength, JDBCTy\n                 return (float) intValue;\n             case BINARY:\n                 return convertIntToBytes(intValue, valueLength);\n+            case SQL_VARIANT:\n+                // return short or bit if the underlying datatype of sql_variant is tinyint, smallint or bit\n+                // otherwise, return integer\n+                // Longer datatypes such as double and float are handled by convertLongToObject instead.\n+                if (valueLength == 1) {", "originalCommit": "da113804eea22739c907ec7199b19f41f697ecee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwMDk1NA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1320#discussion_r423200954", "bodyText": "I don't think this is necessary", "author": "peterbae", "createdAt": "2020-05-11T17:27:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE4OTYyMw=="}], "type": "inlineReview", "revised_code": null}]}