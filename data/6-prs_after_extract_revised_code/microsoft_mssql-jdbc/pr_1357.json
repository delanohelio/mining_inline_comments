{"pr_number": 1357, "pr_title": "Feature | Introduced support for Azure SQL DNS Caching", "pr_createdAt": "2020-06-11T23:53:17Z", "pr_url": "https://github.com/microsoft/mssql-jdbc/pull/1357", "timeline": [{"oid": "6d4f0fc6621345f1fbfe3e6b0858edb88ea46f07", "url": "https://github.com/microsoft/mssql-jdbc/commit/6d4f0fc6621345f1fbfe3e6b0858edb88ea46f07", "message": "Feature | initial commit for DNS cache", "committedDate": "2020-04-23T00:44:25Z", "type": "commit"}, {"oid": "827ffb13ea3c07a11f1e64b157c9f77b32d62094", "url": "https://github.com/microsoft/mssql-jdbc/commit/827ffb13ea3c07a11f1e64b157c9f77b32d62094", "message": "Handle the case when server doesnt support DNS cache", "committedDate": "2020-05-06T01:20:44Z", "type": "commit"}, {"oid": "99ca5f68c4bfbead4fc638f371d79c27424bc651", "url": "https://github.com/microsoft/mssql-jdbc/commit/99ca5f68c4bfbead4fc638f371d79c27424bc651", "message": "Merge remote-tracking branch 'upstream/dev' into DNSCache", "committedDate": "2020-05-06T01:40:33Z", "type": "commit"}, {"oid": "e6430fe05b73917fac3280d85921f90e77289116", "url": "https://github.com/microsoft/mssql-jdbc/commit/e6430fe05b73917fac3280d85921f90e77289116", "message": "Fixed issue with removing DNS entry", "committedDate": "2020-05-06T02:05:41Z", "type": "commit"}, {"oid": "7129088cc66fc8c8e360874dc03678d9a3528350", "url": "https://github.com/microsoft/mssql-jdbc/commit/7129088cc66fc8c8e360874dc03678d9a3528350", "message": "Fix | Use ternary if", "committedDate": "2020-05-06T22:31:23Z", "type": "commit"}, {"oid": "f36fa50b94d528668f5eb4cc9ebd4e89f480c603", "url": "https://github.com/microsoft/mssql-jdbc/commit/f36fa50b94d528668f5eb4cc9ebd4e89f480c603", "message": "Update from dev", "committedDate": "2020-06-11T23:51:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2ODk1Mg==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1357#discussion_r443768952", "bodyText": "I know it was like this originally, but we might as well add brackets to this if statement as well.", "author": "peterbae", "createdAt": "2020-06-22T19:09:24Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "diffHunk": "@@ -2665,12 +2681,13 @@ private void connectHelper(ServerPortPlaceHolder serverInfo, int timeOutSliceInM\n \n         // if the timeout is infinite slices are infinite too.\n         tdsChannel = new TDSChannel(this);\n+        InetSocketAddress inetSocketAddress;\n         if (0 == timeOutFullInSeconds)", "originalCommit": "f36fa50b94d528668f5eb4cc9ebd4e89f480c603", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "70a4ca11c55e28149dd7d5c9d26f88d2b40dcef1", "chunk": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex dc850561..c2791fcd 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n\n@@ -2681,13 +2681,9 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n \n         // if the timeout is infinite slices are infinite too.\n         tdsChannel = new TDSChannel(this);\n-        InetSocketAddress inetSocketAddress;\n-        if (0 == timeOutFullInSeconds)\n-            inetSocketAddress = tdsChannel.open(serverInfo.getServerName(), serverInfo.getPortNumber(), 0, useParallel,\n-                    useTnir, isTnirFirstAttempt, timeOutsliceInMillisForFullTimeout);\n-        else\n-            inetSocketAddress = tdsChannel.open(serverInfo.getServerName(), serverInfo.getPortNumber(),\n-                    timeOutSliceInMillis, useParallel, useTnir, isTnirFirstAttempt, timeOutsliceInMillisForFullTimeout);\n+        InetSocketAddress inetSocketAddress = tdsChannel.open(serverInfo.getServerName(), serverInfo.getPortNumber(),\n+                (0 == timeOutFullInSeconds) ? 0 : timeOutSliceInMillis, useParallel, useTnir, isTnirFirstAttempt,\n+                timeOutsliceInMillisForFullTimeout);\n \n         setState(State.Connected);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg1MzQ5Mw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1357#discussion_r443853493", "bodyText": "Can you add brackets around the boolean expression just for readability.\naddr = (null != cacheEntry) ? cacheEntry : addr;", "author": "rene-ye", "createdAt": "2020-06-22T22:09:33Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "diffHunk": "@@ -2645,6 +2650,14 @@ private Socket getDefaultSocket(String hostName, int portNumber, int timeoutInMi\n         // cannot be resolved, but that InetSocketAddress(host, port) does not - it sets\n         // the returned InetSocketAddress as unresolved.\n         InetSocketAddress addr = new InetSocketAddress(hostName, portNumber);\n+        if (addr.isUnresolved()) {\n+            if (logger.isLoggable(Level.FINER)) {\n+                logger.finer(this.toString() + \"Failed to resolve host name: \" + hostName\n+                        + \". Using IP address from DNS cache.\");\n+            }\n+            InetSocketAddress cacheEntry = SQLServerConnection.getDNSEntry(hostName);\n+            addr = null != cacheEntry ? cacheEntry : addr;", "originalCommit": "f36fa50b94d528668f5eb4cc9ebd4e89f480c603", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "70a4ca11c55e28149dd7d5c9d26f88d2b40dcef1", "chunk": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java b/src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java\nindex a75061e7..e5e32d65 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java\n\n@@ -2656,7 +2656,7 @@ final class SocketFinder {\n                         + \". Using IP address from DNS cache.\");\n             }\n             InetSocketAddress cacheEntry = SQLServerConnection.getDNSEntry(hostName);\n-            addr = null != cacheEntry ? cacheEntry : addr;\n+            addr = (null != cacheEntry) ? cacheEntry : addr;\n         }\n         return getConnectedSocket(addr, timeoutInMilliSeconds);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg1NjY1MA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1357#discussion_r443856650", "bodyText": "I know this might be a readability issue, but it's possible to format well and change this to a ternary since it's an if condition attempting to assign a variable.\nInetSocketAddress inetSocketAddress = (0 == timeOutFullInSeconds) ? tdsChannel.open(serverInfo.getServerName(), serverInfo.getPortNumber(), 0, useParallel,useTnir, isTnirFirstAttempt, timeOutsliceInMillisForFullTimeout);\n                                                                  : tdsChannel.open(serverInfo.getServerName(), serverInfo.getPortNumber(), timeOutSliceInMillis, useParallel, useTnir, isTnirFirstAttempt, timeOutsliceInMillisForFullTimeout);\n\nMight be even better to use an if statement to determine the effective timeout since it's the only parameter changed.\nint effectiveTimeoutValue = (0 == timeOutFullInSeconds) ? 0 : timeOutSliceInMillis;\nInetSocketAddress inetSocketAddress = tdsChannel.open(serverInfo.getServerName(), serverInfo.getPortNumber(), effectiveTimeoutValue, useParallel,useTnir, isTnirFirstAttempt, timeOutsliceInMillisForFullTimeout);", "author": "rene-ye", "createdAt": "2020-06-22T22:18:06Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "diffHunk": "@@ -2665,12 +2681,13 @@ private void connectHelper(ServerPortPlaceHolder serverInfo, int timeOutSliceInM\n \n         // if the timeout is infinite slices are infinite too.\n         tdsChannel = new TDSChannel(this);\n+        InetSocketAddress inetSocketAddress;\n         if (0 == timeOutFullInSeconds)\n-            tdsChannel.open(serverInfo.getServerName(), serverInfo.getPortNumber(), 0, useParallel, useTnir,\n-                    isTnirFirstAttempt, timeOutsliceInMillisForFullTimeout);\n-        else\n-            tdsChannel.open(serverInfo.getServerName(), serverInfo.getPortNumber(), timeOutSliceInMillis, useParallel,\n+            inetSocketAddress = tdsChannel.open(serverInfo.getServerName(), serverInfo.getPortNumber(), 0, useParallel,\n                     useTnir, isTnirFirstAttempt, timeOutsliceInMillisForFullTimeout);\n+        else\n+            inetSocketAddress = tdsChannel.open(serverInfo.getServerName(), serverInfo.getPortNumber(),\n+                    timeOutSliceInMillis, useParallel, useTnir, isTnirFirstAttempt, timeOutsliceInMillisForFullTimeout);", "originalCommit": "f36fa50b94d528668f5eb4cc9ebd4e89f480c603", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkxNjEyOQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1357#discussion_r443916129", "bodyText": "hmm I think more clear if we just do this since that's the only thing that changed:\ninetSocketAddress = tdsChannel.open(serverInfo.getServerName(), serverInfo.getPortNumber(), (0 == timeOutFillInSeconds) ? 0 : timeOutSliceInMillis,  useParallel, useTnir, isTnirFirstAttempt, timeOutsliceInMillisForFullTimeout);", "author": "lilgreenbird", "createdAt": "2020-06-23T01:50:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg1NjY1MA=="}], "type": "inlineReview", "revised_code": {"commit": "70a4ca11c55e28149dd7d5c9d26f88d2b40dcef1", "chunk": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex dc850561..c2791fcd 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n\n@@ -2681,13 +2681,9 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n \n         // if the timeout is infinite slices are infinite too.\n         tdsChannel = new TDSChannel(this);\n-        InetSocketAddress inetSocketAddress;\n-        if (0 == timeOutFullInSeconds)\n-            inetSocketAddress = tdsChannel.open(serverInfo.getServerName(), serverInfo.getPortNumber(), 0, useParallel,\n-                    useTnir, isTnirFirstAttempt, timeOutsliceInMillisForFullTimeout);\n-        else\n-            inetSocketAddress = tdsChannel.open(serverInfo.getServerName(), serverInfo.getPortNumber(),\n-                    timeOutSliceInMillis, useParallel, useTnir, isTnirFirstAttempt, timeOutsliceInMillisForFullTimeout);\n+        InetSocketAddress inetSocketAddress = tdsChannel.open(serverInfo.getServerName(), serverInfo.getPortNumber(),\n+                (0 == timeOutFullInSeconds) ? 0 : timeOutSliceInMillis, useParallel, useTnir, isTnirFirstAttempt,\n+                timeOutsliceInMillisForFullTimeout);\n \n         setState(State.Connected);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg1ODQzOA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1357#discussion_r443858438", "bodyText": "Same readability suggestion as above for boolean expression in ternary.", "author": "rene-ye", "createdAt": "2020-06-22T22:23:17Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "diffHunk": "@@ -685,6 +687,13 @@ boolean getServerSupportsDataClassification() {\n         return serverSupportsDataClassification;\n     }\n \n+    private boolean serverSupportsDNSCaching = false;\n+    private static ConcurrentHashMap<String, InetSocketAddress> dnsCache = null;\n+\n+    static InetSocketAddress getDNSEntry(String key) {\n+        return null != dnsCache ? dnsCache.get(key) : null;", "originalCommit": "f36fa50b94d528668f5eb4cc9ebd4e89f480c603", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "70a4ca11c55e28149dd7d5c9d26f88d2b40dcef1", "chunk": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\nindex dc850561..c2791fcd 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java\n\n@@ -691,7 +691,7 @@ public class SQLServerConnection implements ISQLServerConnection, java.io.Serial\n     private static ConcurrentHashMap<String, InetSocketAddress> dnsCache = null;\n \n     static InetSocketAddress getDNSEntry(String key) {\n-        return null != dnsCache ? dnsCache.get(key) : null;\n+        return (null != dnsCache) ? dnsCache.get(key) : null;\n     }\n \n     // Boolean that indicates whether LOB objects created by this connection should be loaded into memory\n"}}, {"oid": "70a4ca11c55e28149dd7d5c9d26f88d2b40dcef1", "url": "https://github.com/microsoft/mssql-jdbc/commit/70a4ca11c55e28149dd7d5c9d26f88d2b40dcef1", "message": "Applied review comments", "committedDate": "2020-06-23T21:55:18Z", "type": "commit"}, {"oid": "66df9ed6a9c80c3c001f9d24aaee2c6e3a4264c3", "url": "https://github.com/microsoft/mssql-jdbc/commit/66df9ed6a9c80c3c001f9d24aaee2c6e3a4264c3", "message": "Resolve conflicts", "committedDate": "2020-06-24T18:01:58Z", "type": "commit"}]}