{"pr_number": 1251, "pr_title": "Fix bracket escaping in Util.parseUrl()", "pr_createdAt": "2020-02-04T18:27:09Z", "pr_url": "https://github.com/microsoft/mssql-jdbc/pull/1251", "timeline": [{"oid": "1b4c7b60b0ca790368988903dd7e79211e88eb30", "url": "https://github.com/microsoft/mssql-jdbc/commit/1b4c7b60b0ca790368988903dd7e79211e88eb30", "message": "github 1188", "committedDate": "2020-02-04T18:24:48Z", "type": "commit"}, {"oid": "5b1fc02b3f7f222edaedfbc6e550635242294536", "url": "https://github.com/microsoft/mssql-jdbc/commit/5b1fc02b3f7f222edaedfbc6e550635242294536", "message": "remove unnecessary method", "committedDate": "2020-02-04T18:26:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0MDkwOA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1251#discussion_r379140908", "bodyText": "just nit-picking...instead of so many ident levels why not just &&?", "author": "lilgreenbird", "createdAt": "2020-02-13T21:55:24Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/Util.java", "diffHunk": "@@ -416,29 +416,42 @@ else if (ch == ':')\n                     break;\n                 }\n                 case inEscapedValueStart: {\n-                    if (ch == '}') {\n-                        // no trimming use the value as it is.\n-                        name = SQLServerDriver.getNormalizedPropertyName(name, logger);\n-                        if (null != name) {\n-                            if (logger.isLoggable(Level.FINE)) {\n-                                if (!name.equals(SQLServerDriverStringProperty.USER.toString())\n-                                        && !name.equals(SQLServerDriverStringProperty.PASSWORD.toString()))\n-                                    logger.fine(\"Property:\" + name + \" Value:\" + value);\n-                            }\n-                            p.put(name, value);\n-                        }\n-\n-                        name = \"\";\n-                        value = \"\";\n-                        // to eat the spaces until the ; potentially we could do without the state but\n-                        // it would not be clean\n-                        state = inEscapedValueEnd;\n-                    } else {\n+                    // check for escaped }.\n+                    // when we see a }, first check to see if this is before the end of the string to avoid index out of range exception\n+                    // then check if the character immediately after is also a }.\n+                    // if it is, then we have a }}, which is not the closing of the escaped state.\n+                    if (ch == '}' && i + 1 <= tmpUrl.trim().length() && tmpUrl.charAt(i + 1) == '}') {\n                         builder = new StringBuilder();\n                         builder.append(value);\n                         builder.append(ch);\n                         value = builder.toString();\n+                        i++; // escaped }} into a }, so increment the counter once more\n                         // same state\n+                    } else {\n+                        if (ch == '}') {\n+                            // no trimming use the value as it is.\n+                            name = SQLServerDriver.getNormalizedPropertyName(name, logger);\n+                            if (null != name) {\n+                                if (logger.isLoggable(Level.FINE)) {\n+                                    if (!name.equals(SQLServerDriverStringProperty.USER.toString())", "originalCommit": "5b1fc02b3f7f222edaedfbc6e550635242294536", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2NjI2NQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1251#discussion_r379166265", "bodyText": "I think this code looks fine. Each layer of if statement has a purpose to it, and it's easy to read.", "author": "peterbae", "createdAt": "2020-02-13T22:57:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0MDkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "8b7a9a5bb9950d9937b2fe8f5f95eea830cee9a9", "chunk": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/Util.java b/src/main/java/com/microsoft/sqlserver/jdbc/Util.java\nindex 377461b1..d30e21ce 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/Util.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/Util.java\n\n@@ -416,11 +416,12 @@ final class Util {\n                     break;\n                 }\n                 case inEscapedValueStart: {\n-                    // check for escaped }.\n-                    // when we see a }, first check to see if this is before the end of the string to avoid index out of range exception\n-                    // then check if the character immediately after is also a }.\n-                    // if it is, then we have a }}, which is not the closing of the escaped state.\n-                    if (ch == '}' && i + 1 <= tmpUrl.trim().length() && tmpUrl.charAt(i + 1) == '}') {\n+                    /* check for escaped }.\n+                    * when we see a }, first check to see if this is before the end of the string to avoid index out of range exception\n+                    * then check if the character immediately after is also a }.\n+                    * if it is, then we have a }}, which is not the closing of the escaped state.\n+                    */\n+                    if (ch == '}' && i + 1 <= tmpUrl.length() && tmpUrl.charAt(i + 1) == '}') {\n                         builder = new StringBuilder();\n                         builder.append(value);\n                         builder.append(ch);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYyOTAyMg==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1251#discussion_r381629022", "bodyText": "Use multi line comments here.", "author": "ulvii", "createdAt": "2020-02-20T00:40:50Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/Util.java", "diffHunk": "@@ -416,29 +416,42 @@ else if (ch == ':')\n                     break;\n                 }\n                 case inEscapedValueStart: {\n-                    if (ch == '}') {\n-                        // no trimming use the value as it is.\n-                        name = SQLServerDriver.getNormalizedPropertyName(name, logger);\n-                        if (null != name) {\n-                            if (logger.isLoggable(Level.FINE)) {\n-                                if (!name.equals(SQLServerDriverStringProperty.USER.toString())\n-                                        && !name.equals(SQLServerDriverStringProperty.PASSWORD.toString()))\n-                                    logger.fine(\"Property:\" + name + \" Value:\" + value);\n-                            }\n-                            p.put(name, value);\n-                        }\n-\n-                        name = \"\";\n-                        value = \"\";\n-                        // to eat the spaces until the ; potentially we could do without the state but\n-                        // it would not be clean\n-                        state = inEscapedValueEnd;\n-                    } else {\n+                    // check for escaped }.", "originalCommit": "5b1fc02b3f7f222edaedfbc6e550635242294536", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8b7a9a5bb9950d9937b2fe8f5f95eea830cee9a9", "chunk": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/Util.java b/src/main/java/com/microsoft/sqlserver/jdbc/Util.java\nindex 377461b1..d30e21ce 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/Util.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/Util.java\n\n@@ -416,11 +416,12 @@ final class Util {\n                     break;\n                 }\n                 case inEscapedValueStart: {\n-                    // check for escaped }.\n-                    // when we see a }, first check to see if this is before the end of the string to avoid index out of range exception\n-                    // then check if the character immediately after is also a }.\n-                    // if it is, then we have a }}, which is not the closing of the escaped state.\n-                    if (ch == '}' && i + 1 <= tmpUrl.trim().length() && tmpUrl.charAt(i + 1) == '}') {\n+                    /* check for escaped }.\n+                    * when we see a }, first check to see if this is before the end of the string to avoid index out of range exception\n+                    * then check if the character immediately after is also a }.\n+                    * if it is, then we have a }}, which is not the closing of the escaped state.\n+                    */\n+                    if (ch == '}' && i + 1 <= tmpUrl.length() && tmpUrl.charAt(i + 1) == '}') {\n                         builder = new StringBuilder();\n                         builder.append(value);\n                         builder.append(ch);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYzMTI2Ng==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1251#discussion_r381631266", "bodyText": "trim() should be removed here, preceding white spaces in connection string would make i smaller than tmpUrl.trim().length().", "author": "ulvii", "createdAt": "2020-02-20T00:48:27Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/Util.java", "diffHunk": "@@ -416,29 +416,42 @@ else if (ch == ':')\n                     break;\n                 }\n                 case inEscapedValueStart: {\n-                    if (ch == '}') {\n-                        // no trimming use the value as it is.\n-                        name = SQLServerDriver.getNormalizedPropertyName(name, logger);\n-                        if (null != name) {\n-                            if (logger.isLoggable(Level.FINE)) {\n-                                if (!name.equals(SQLServerDriverStringProperty.USER.toString())\n-                                        && !name.equals(SQLServerDriverStringProperty.PASSWORD.toString()))\n-                                    logger.fine(\"Property:\" + name + \" Value:\" + value);\n-                            }\n-                            p.put(name, value);\n-                        }\n-\n-                        name = \"\";\n-                        value = \"\";\n-                        // to eat the spaces until the ; potentially we could do without the state but\n-                        // it would not be clean\n-                        state = inEscapedValueEnd;\n-                    } else {\n+                    // check for escaped }.\n+                    // when we see a }, first check to see if this is before the end of the string to avoid index out of range exception\n+                    // then check if the character immediately after is also a }.\n+                    // if it is, then we have a }}, which is not the closing of the escaped state.\n+                    if (ch == '}' && i + 1 <= tmpUrl.trim().length() && tmpUrl.charAt(i + 1) == '}') {", "originalCommit": "5b1fc02b3f7f222edaedfbc6e550635242294536", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8b7a9a5bb9950d9937b2fe8f5f95eea830cee9a9", "chunk": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/Util.java b/src/main/java/com/microsoft/sqlserver/jdbc/Util.java\nindex 377461b1..d30e21ce 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/Util.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/Util.java\n\n@@ -416,11 +416,12 @@ final class Util {\n                     break;\n                 }\n                 case inEscapedValueStart: {\n-                    // check for escaped }.\n-                    // when we see a }, first check to see if this is before the end of the string to avoid index out of range exception\n-                    // then check if the character immediately after is also a }.\n-                    // if it is, then we have a }}, which is not the closing of the escaped state.\n-                    if (ch == '}' && i + 1 <= tmpUrl.trim().length() && tmpUrl.charAt(i + 1) == '}') {\n+                    /* check for escaped }.\n+                    * when we see a }, first check to see if this is before the end of the string to avoid index out of range exception\n+                    * then check if the character immediately after is also a }.\n+                    * if it is, then we have a }}, which is not the closing of the escaped state.\n+                    */\n+                    if (ch == '}' && i + 1 <= tmpUrl.length() && tmpUrl.charAt(i + 1) == '}') {\n                         builder = new StringBuilder();\n                         builder.append(value);\n                         builder.append(ch);\n"}}, {"oid": "f2fb4cd30e37dfac8da6a34b270d5e0738d59434", "url": "https://github.com/microsoft/mssql-jdbc/commit/f2fb4cd30e37dfac8da6a34b270d5e0738d59434", "message": "Merge branch 'dev' of https://github.com/Microsoft/mssql-jdbc into github-1188", "committedDate": "2020-03-21T02:59:05Z", "type": "commit"}, {"oid": "8b7a9a5bb9950d9937b2fe8f5f95eea830cee9a9", "url": "https://github.com/microsoft/mssql-jdbc/commit/8b7a9a5bb9950d9937b2fe8f5f95eea830cee9a9", "message": "change", "committedDate": "2020-03-22T20:49:26Z", "type": "commit"}, {"oid": "8b34749545a1da75d32d9eafaa360e5403d21c35", "url": "https://github.com/microsoft/mssql-jdbc/commit/8b34749545a1da75d32d9eafaa360e5403d21c35", "message": "changes", "committedDate": "2020-03-23T05:00:47Z", "type": "commit"}, {"oid": "7ca6b2b09f634a0d045017b84c8a388e3de05bfd", "url": "https://github.com/microsoft/mssql-jdbc/commit/7ca6b2b09f634a0d045017b84c8a388e3de05bfd", "message": "more tests", "committedDate": "2020-03-23T05:06:09Z", "type": "commit"}]}