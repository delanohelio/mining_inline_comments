{"pr_number": 1312, "pr_title": "Added an option to escape delimiters in CSV files when using bulk copy", "pr_createdAt": "2020-04-14T06:07:58Z", "pr_url": "https://github.com/microsoft/mssql-jdbc/pull/1312", "timeline": [{"oid": "584287fff9a49da7a4103a099412862dbe64947a", "url": "https://github.com/microsoft/mssql-jdbc/commit/584287fff9a49da7a4103a099412862dbe64947a", "message": "Initial commit", "committedDate": "2020-04-13T19:38:05Z", "type": "commit"}, {"oid": "d429a0a886eb5fbd898b43bef96824469797bc8b", "url": "https://github.com/microsoft/mssql-jdbc/commit/d429a0a886eb5fbd898b43bef96824469797bc8b", "message": "Add javadoc", "committedDate": "2020-04-14T06:05:14Z", "type": "commit"}, {"oid": "3a72af27e86d4c05f9d6c21f1da8933405cfe132", "url": "https://github.com/microsoft/mssql-jdbc/commit/3a72af27e86d4c05f9d6c21f1da8933405cfe132", "message": "Fix | Cleanup the PR", "committedDate": "2020-05-09T01:25:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5NzAxMw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r428897013", "bodyText": "I think we should rename this to getEscapeColumnDelimitersCSV, for the setter/getter convention.", "author": "peterbae", "createdAt": "2020-05-21T20:30:31Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -516,4 +523,58 @@ public boolean next() throws SQLServerException {\n         }\n         return (null != currentLine);\n     }\n+\n+    /**\n+     * Returns whether the rules to escape delimiters are used.\n+     *\n+     * @return true if the rules are used, false otherwise.\n+     */\n+    public boolean isEscapeColumnDelimitersCSV() {", "originalCommit": "3a72af27e86d4c05f9d6c21f1da8933405cfe132", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1MDI3MQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429350271", "bodyText": "I named it this way mainly to keep it consistent with SQLServerBulkCopyOptions and SQLServerBulkRecord.", "author": "ulvii", "createdAt": "2020-05-22T16:45:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5NzAxMw=="}], "type": "inlineReview", "revised_code": {"commit": "a6cd852b79bca2d6a8c1dad8c6aa7fb0123847c5", "chunk": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java\nindex 8f86942c..1d304246 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java\n\n@@ -538,7 +537,7 @@ public class SQLServerBulkCSVFileRecord extends SQLServerBulkRecord implements j\n      * double quotes. If fields are not enclosed with double quotes, then double quotes may not appear inside the\n      * fields. Fields containing double quotes, and delimiters should be enclosed in double quotes. If double-quotes are\n      * used to enclose fields, then a double-quote appearing inside a field must be escaped by preceding it with another\n-     * double quote.\n+     * double quote. Spaces are considered part of a field. Spaces before and after enclosing double quotes are ignored.\n      *\n      * @param escapeDelimiters\n      *        true if the rules above to be used.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwNTUyNw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r428905527", "bodyText": "My formatter shows that this line needs to be formatted. Can you try re-formatting this file?", "author": "peterbae", "createdAt": "2020-05-21T20:47:45Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/bulkCopy/BulkCopyCSVTest.java", "diffHunk": "@@ -118,6 +134,51 @@ public void testCSVFromURL() throws SQLException {\n         }\n     }\n \n+    @Test\n+    @DisplayName(\"Test setEscapeColumnDelimitersCSV\")\n+    public void testEscapeColumnDelimitersCSV() throws SQLException, FileNotFoundException, IOException {\n+        String tableName = AbstractSQLGenerator.escapeIdentifier(RandomUtil.getIdentifier(\"BulkEscape\"));\n+        String fileName = filePath + inputFileDelimiterEscape;\n+        /*\n+         * The list below is the copy of inputFileDelimiterEscape with quotes removed.\n+         */\n+        String[][] expectedEscaped = new String[5][4];\n+        expectedEscaped[0] = new String[] {\"test\", \" test\\\"\", \"no,split\", \" testNoQuote\"};\n+        expectedEscaped[1] = new String[] {null, null, null, null};\n+        expectedEscaped[2] = new String[] {\"\\\"\", \"test\\\"test\", \"test,\\\"  test\", null};\n+        expectedEscaped[3] = new String[] {\"testNoQuote  \", \" testSpaceAround \", \" testSpaceInside \",\n+                \"  testSpaceQuote\\\" \"};\n+        expectedEscaped[4] = new String[] {null, null, null, \" testSpaceInside \"};\n+\n+        try (Connection con = getConnection(); Statement stmt = con.createStatement();\n+                SQLServerBulkCopy bulkCopy = new SQLServerBulkCopy(con);\n+                SQLServerBulkCSVFileRecord fileRecord = new SQLServerBulkCSVFileRecord(fileName, encoding, delimiter,\n+                        false)) {\n+            bulkCopy.setDestinationTableName(tableName);\n+            fileRecord.setEscapeColumnDelimitersCSV(true);\n+            fileRecord.addColumnMetadata(1, null, java.sql.Types.INTEGER, 0, 0);\n+            fileRecord.addColumnMetadata(2, null, java.sql.Types.VARCHAR, 50, 0);\n+            fileRecord.addColumnMetadata(3, null, java.sql.Types.VARCHAR, 50, 0);\n+            fileRecord.addColumnMetadata(4, null, java.sql.Types.VARCHAR, 50, 0);\n+            fileRecord.addColumnMetadata(5, null, java.sql.Types.VARCHAR, 50, 0);\n+            stmt.executeUpdate(", "originalCommit": "3a72af27e86d4c05f9d6c21f1da8933405cfe132", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NDIyOA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429364228", "bodyText": "You are right.", "author": "ulvii", "createdAt": "2020-05-22T17:15:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwNTUyNw=="}], "type": "inlineReview", "revised_code": {"commit": "a6cd852b79bca2d6a8c1dad8c6aa7fb0123847c5", "chunk": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/bulkCopy/BulkCopyCSVTest.java b/src/test/java/com/microsoft/sqlserver/jdbc/bulkCopy/BulkCopyCSVTest.java\nindex d08dfc25..c7628e3d 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/bulkCopy/BulkCopyCSVTest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/bulkCopy/BulkCopyCSVTest.java\n\n@@ -134,21 +134,33 @@ public class BulkCopyCSVTest extends AbstractTest {\n         }\n     }\n \n+    /**\n+     * A test to validate that the driver parses CSV file according to RFC4180 when setEscapeColumnDelimitersCSV is set\n+     * to true.\n+     *\n+     * @throws Exception\n+     */\n     @Test\n     @DisplayName(\"Test setEscapeColumnDelimitersCSV\")\n-    public void testEscapeColumnDelimitersCSV() throws SQLException, FileNotFoundException, IOException {\n+    public void testEscapeColumnDelimitersCSV() throws Exception {\n         String tableName = AbstractSQLGenerator.escapeIdentifier(RandomUtil.getIdentifier(\"BulkEscape\"));\n         String fileName = filePath + inputFileDelimiterEscape;\n         /*\n          * The list below is the copy of inputFileDelimiterEscape with quotes removed.\n          */\n-        String[][] expectedEscaped = new String[5][4];\n+        String[][] expectedEscaped = new String[11][4];\n         expectedEscaped[0] = new String[] {\"test\", \" test\\\"\", \"no,split\", \" testNoQuote\"};\n         expectedEscaped[1] = new String[] {null, null, null, null};\n         expectedEscaped[2] = new String[] {\"\\\"\", \"test\\\"test\", \"test,\\\"  test\", null};\n         expectedEscaped[3] = new String[] {\"testNoQuote  \", \" testSpaceAround \", \" testSpaceInside \",\n                 \"  testSpaceQuote\\\" \"};\n         expectedEscaped[4] = new String[] {null, null, null, \" testSpaceInside \"};\n+        expectedEscaped[5] = new String[] {\"1997\", \"Ford\", \"E350\", \"E63\"};\n+        expectedEscaped[6] = new String[] {\"1997\", \"Ford\", \"E350\", \"E63\"};\n+        expectedEscaped[7] = new String[] {\"1997\", \"Ford\", \"E350\", \"Super, luxurious truck\"};\n+        expectedEscaped[8] = new String[] {\"1997\", \"Ford\", \"E350\", \"Super, \\\"luxurious\\\" truck\"};\n+        expectedEscaped[9] = new String[] {\"1997\", \"Ford\", \"E350\", \"E63\"};\n+        expectedEscaped[10] = new String[] {\"1997\", \"Ford\", \"E350\", \" Super luxurious truck \"};\n \n         try (Connection con = getConnection(); Statement stmt = con.createStatement();\n                 SQLServerBulkCopy bulkCopy = new SQLServerBulkCopy(con);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1NzU2NA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429057564", "bodyText": "Can we add a comment here that explains this regex briefly?", "author": "peterbae", "createdAt": "2020-05-22T06:01:57Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -49,6 +49,10 @@\n      */\n     private final String delimiter;\n \n+    private boolean escapeDelimiters;\n+\n+    private static final String escapeSplitPattern = \"(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\";", "originalCommit": "3a72af27e86d4c05f9d6c21f1da8933405cfe132", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ1MDkwOA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429450908", "bodyText": "Sure.", "author": "ulvii", "createdAt": "2020-05-22T21:05:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1NzU2NA=="}], "type": "inlineReview", "revised_code": {"commit": "a6cd852b79bca2d6a8c1dad8c6aa7fb0123847c5", "chunk": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java\nindex 8f86942c..1d304246 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java\n\n@@ -51,6 +51,7 @@ public class SQLServerBulkCSVFileRecord extends SQLServerBulkRecord implements j\n \n     private boolean escapeDelimiters;\n \n+    // Regex to ignore delimiter when the field is enclosed in quotes.\n     private static final String escapeSplitPattern = \"(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\";\n \n     /*\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1ODg3OQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429058879", "bodyText": "[not a big deal, and only if you're changing this file anyway]\nthis and line 254-256 is only a single line comment", "author": "lilgreenbird", "createdAt": "2020-05-22T06:07:03Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -229,21 +236,24 @@ public void close() throws SQLServerException {\n         if (null == currentLine)\n             return null;\n         else {\n-            // Binary data may be corrupted\n-            // The limit in split() function should be a negative value,\n-            // otherwise trailing empty strings are discarded.\n-            // Empty string is returned if there is no value.\n-            String[] data = currentLine.split(delimiter, -1);\n-\n-            // Cannot go directly from String[] to Object[] and expect it to act\n-            // as an array.\n+            /*\n+             * Binary data may be corrupted The limit in split() function should be a negative value, otherwise trailing\n+             * empty strings are discarded. Empty string is returned if there is no value.\n+             */\n+            String[] data = (escapeDelimiters && currentLine.contains(\"\\\"\"))\n+                                                                             ? escapeQuotesRFC4180(currentLine.split(\n+                                                                                     delimiter + escapeSplitPattern))\n+                                                                             : currentLine.split(delimiter, -1);\n+            /*\n+             * Cannot go directly from String[] to Object[] and expect it to act as an array.", "originalCommit": "3a72af27e86d4c05f9d6c21f1da8933405cfe132", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6cd852b79bca2d6a8c1dad8c6aa7fb0123847c5", "chunk": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java\nindex 8f86942c..1d304246 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java\n\n@@ -244,16 +245,14 @@ public class SQLServerBulkCSVFileRecord extends SQLServerBulkRecord implements j\n                                                                              ? escapeQuotesRFC4180(currentLine.split(\n                                                                                      delimiter + escapeSplitPattern))\n                                                                              : currentLine.split(delimiter, -1);\n-            /*\n-             * Cannot go directly from String[] to Object[] and expect it to act as an array.\n-             */\n+\n+            // Cannot go directly from String[] to Object[] and expect it to act as an array.\n+\n             Object[] dataRow = new Object[data.length];\n \n             for (Entry<Integer, ColumnMetadata> pair : columnMetadata.entrySet()) {\n                 ColumnMetadata cm = pair.getValue();\n-                /*\n-                 * Reading a column not available in csv positionInFile > number of columns retrieved after split\n-                 */\n+                // Reading a column not available in csv positionInFile > number of columns retrieved after split\n                 if (data.length < pair.getKey() - 1) {\n                     MessageFormat form = new MessageFormat(SQLServerException.getErrString(\"R_invalidColumn\"));\n                     Object[] msgArgs = {pair.getKey()};\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1OTA4MQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429059081", "bodyText": "We should keep the limit argument (-1) to the currentLine.split method to preserve the spacing at the end.", "author": "peterbae", "createdAt": "2020-05-22T06:07:48Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -189,15 +193,18 @@ private void initFileReader(InputStreamReader sr, String encoding, String demlim\n         if (firstLineIsColumnNames) {\n             currentLine = fileReader.readLine();\n             if (null != currentLine) {\n-                columnNames = currentLine.split(delimiter, -1);\n+                columnNames = (escapeDelimiters && currentLine.contains(\"\\\"\"))", "originalCommit": "3a72af27e86d4c05f9d6c21f1da8933405cfe132", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ1MzM5Mg==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429453392", "bodyText": "Since we're going to ignore spaces outside double quotes, this code can stay as it is.", "author": "peterbae", "createdAt": "2020-05-22T21:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1OTA4MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1OTMyOQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429059329", "bodyText": "This line and line 255 should be single line comments", "author": "peterbae", "createdAt": "2020-05-22T06:08:47Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -229,21 +236,24 @@ public void close() throws SQLServerException {\n         if (null == currentLine)\n             return null;\n         else {\n-            // Binary data may be corrupted\n-            // The limit in split() function should be a negative value,\n-            // otherwise trailing empty strings are discarded.\n-            // Empty string is returned if there is no value.\n-            String[] data = currentLine.split(delimiter, -1);\n-\n-            // Cannot go directly from String[] to Object[] and expect it to act\n-            // as an array.\n+            /*\n+             * Binary data may be corrupted The limit in split() function should be a negative value, otherwise trailing\n+             * empty strings are discarded. Empty string is returned if there is no value.\n+             */\n+            String[] data = (escapeDelimiters && currentLine.contains(\"\\\"\"))\n+                                                                             ? escapeQuotesRFC4180(currentLine.split(\n+                                                                                     delimiter + escapeSplitPattern))\n+                                                                             : currentLine.split(delimiter, -1);\n+            /*\n+             * Cannot go directly from String[] to Object[] and expect it to act as an array.", "originalCommit": "3a72af27e86d4c05f9d6c21f1da8933405cfe132", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6cd852b79bca2d6a8c1dad8c6aa7fb0123847c5", "chunk": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java\nindex 8f86942c..1d304246 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java\n\n@@ -244,16 +245,14 @@ public class SQLServerBulkCSVFileRecord extends SQLServerBulkRecord implements j\n                                                                              ? escapeQuotesRFC4180(currentLine.split(\n                                                                                      delimiter + escapeSplitPattern))\n                                                                              : currentLine.split(delimiter, -1);\n-            /*\n-             * Cannot go directly from String[] to Object[] and expect it to act as an array.\n-             */\n+\n+            // Cannot go directly from String[] to Object[] and expect it to act as an array.\n+\n             Object[] dataRow = new Object[data.length];\n \n             for (Entry<Integer, ColumnMetadata> pair : columnMetadata.entrySet()) {\n                 ColumnMetadata cm = pair.getValue();\n-                /*\n-                 * Reading a column not available in csv positionInFile > number of columns retrieved after split\n-                 */\n+                // Reading a column not available in csv positionInFile > number of columns retrieved after split\n                 if (data.length < pair.getKey() - 1) {\n                     MessageFormat form = new MessageFormat(SQLServerException.getErrString(\"R_invalidColumn\"));\n                     Object[] msgArgs = {pair.getKey()};\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1OTg2NA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429059864", "bodyText": "test needs description block", "author": "lilgreenbird", "createdAt": "2020-05-22T06:10:51Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/bulkCopy/BulkCopyCSVTest.java", "diffHunk": "@@ -118,6 +134,51 @@ public void testCSVFromURL() throws SQLException {\n         }\n     }\n \n+    @Test", "originalCommit": "3a72af27e86d4c05f9d6c21f1da8933405cfe132", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6cd852b79bca2d6a8c1dad8c6aa7fb0123847c5", "chunk": "diff --git a/src/test/java/com/microsoft/sqlserver/jdbc/bulkCopy/BulkCopyCSVTest.java b/src/test/java/com/microsoft/sqlserver/jdbc/bulkCopy/BulkCopyCSVTest.java\nindex d08dfc25..c7628e3d 100644\n--- a/src/test/java/com/microsoft/sqlserver/jdbc/bulkCopy/BulkCopyCSVTest.java\n+++ b/src/test/java/com/microsoft/sqlserver/jdbc/bulkCopy/BulkCopyCSVTest.java\n\n@@ -134,21 +134,33 @@ public class BulkCopyCSVTest extends AbstractTest {\n         }\n     }\n \n+    /**\n+     * A test to validate that the driver parses CSV file according to RFC4180 when setEscapeColumnDelimitersCSV is set\n+     * to true.\n+     *\n+     * @throws Exception\n+     */\n     @Test\n     @DisplayName(\"Test setEscapeColumnDelimitersCSV\")\n-    public void testEscapeColumnDelimitersCSV() throws SQLException, FileNotFoundException, IOException {\n+    public void testEscapeColumnDelimitersCSV() throws Exception {\n         String tableName = AbstractSQLGenerator.escapeIdentifier(RandomUtil.getIdentifier(\"BulkEscape\"));\n         String fileName = filePath + inputFileDelimiterEscape;\n         /*\n          * The list below is the copy of inputFileDelimiterEscape with quotes removed.\n          */\n-        String[][] expectedEscaped = new String[5][4];\n+        String[][] expectedEscaped = new String[11][4];\n         expectedEscaped[0] = new String[] {\"test\", \" test\\\"\", \"no,split\", \" testNoQuote\"};\n         expectedEscaped[1] = new String[] {null, null, null, null};\n         expectedEscaped[2] = new String[] {\"\\\"\", \"test\\\"test\", \"test,\\\"  test\", null};\n         expectedEscaped[3] = new String[] {\"testNoQuote  \", \" testSpaceAround \", \" testSpaceInside \",\n                 \"  testSpaceQuote\\\" \"};\n         expectedEscaped[4] = new String[] {null, null, null, \" testSpaceInside \"};\n+        expectedEscaped[5] = new String[] {\"1997\", \"Ford\", \"E350\", \"E63\"};\n+        expectedEscaped[6] = new String[] {\"1997\", \"Ford\", \"E350\", \"E63\"};\n+        expectedEscaped[7] = new String[] {\"1997\", \"Ford\", \"E350\", \"Super, luxurious truck\"};\n+        expectedEscaped[8] = new String[] {\"1997\", \"Ford\", \"E350\", \"Super, \\\"luxurious\\\" truck\"};\n+        expectedEscaped[9] = new String[] {\"1997\", \"Ford\", \"E350\", \"E63\"};\n+        expectedEscaped[10] = new String[] {\"1997\", \"Ford\", \"E350\", \" Super luxurious truck \"};\n \n         try (Connection con = getConnection(); Statement stmt = con.createStatement();\n                 SQLServerBulkCopy bulkCopy = new SQLServerBulkCopy(con);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2ODYwNA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429068604", "bodyText": "I think we should add an else statement to this if, to handle the case where the CSV data is corrupted and has a double quote that has not been escaped. Throw an error stating that the data is corrupt, perhaps?", "author": "peterbae", "createdAt": "2020-05-22T06:38:24Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -516,4 +523,58 @@ public boolean next() throws SQLServerException {\n         }\n         return (null != currentLine);\n     }\n+\n+    /**\n+     * Returns whether the rules to escape delimiters are used.\n+     *\n+     * @return true if the rules are used, false otherwise.\n+     */\n+    public boolean isEscapeColumnDelimitersCSV() {\n+        return escapeDelimiters;\n+    }\n+\n+    /**\n+     * When set to true, the following rules will be used to parse CSV files: Each field may or may not be enclosed in\n+     * double quotes. If fields are not enclosed with double quotes, then double quotes may not appear inside the\n+     * fields. Fields containing double quotes, and delimiters should be enclosed in double quotes. If double-quotes are\n+     * used to enclose fields, then a double-quote appearing inside a field must be escaped by preceding it with another\n+     * double quote.\n+     *\n+     * @param escapeDelimiters\n+     *        true if the rules above to be used.\n+     */\n+    public void setEscapeColumnDelimitersCSV(boolean escapeDelimiters) {\n+        this.escapeDelimiters = escapeDelimiters;\n+    }\n+\n+    private static String[] escapeQuotesRFC4180(String[] tokens) {\n+        if (null == tokens) {\n+            return tokens;\n+        }\n+        for (int i = 0; i < tokens.length; i++) {\n+            boolean escaped = false;\n+            int j = 0;\n+            StringBuilder sb = new StringBuilder();\n+            if (tokens[i].contains(\"\\\"\")) {\n+                tokens[i] = tokens[i].trim();\n+            }\n+            while (j < tokens[i].length()) {\n+                if ('\"' == tokens[i].charAt(j)) {\n+                    if (!escaped) {\n+                        escaped = true;\n+                    } else {\n+                        if ((j < tokens[i].length() - 1) && '\"' == tokens[i].charAt(j + 1)) {", "originalCommit": "3a72af27e86d4c05f9d6c21f1da8933405cfe132", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ1MzgxOA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429453818", "bodyText": "Let me know if you'd like to leave the code as it is here as well, we can make the call as to how we're going to handle invalid cases. I think being lenient and letting un-closed double quotes in (the code is removing the un-closed double quote) works for me.", "author": "peterbae", "createdAt": "2020-05-22T21:14:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2ODYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3NTQ3MQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429475471", "bodyText": "That's a good catch. I will modify to throw an exception when there are odd number of quotes.", "author": "ulvii", "createdAt": "2020-05-22T22:12:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2ODYwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3NTg0Mg==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r430075842", "bodyText": "not a bit deal...but typically these kind of errors give an error like \"Unclosed quotation mark after the character string 'blah'\"", "author": "lilgreenbird", "createdAt": "2020-05-25T21:13:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2ODYwNA=="}], "type": "inlineReview", "revised_code": {"commit": "a6cd852b79bca2d6a8c1dad8c6aa7fb0123847c5", "chunk": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java\nindex 8f86942c..1d304246 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java\n\n@@ -538,7 +537,7 @@ public class SQLServerBulkCSVFileRecord extends SQLServerBulkRecord implements j\n      * double quotes. If fields are not enclosed with double quotes, then double quotes may not appear inside the\n      * fields. Fields containing double quotes, and delimiters should be enclosed in double quotes. If double-quotes are\n      * used to enclose fields, then a double-quote appearing inside a field must be escaped by preceding it with another\n-     * double quote.\n+     * double quote. Spaces are considered part of a field. Spaces before and after enclosing double quotes are ignored.\n      *\n      * @param escapeDelimiters\n      *        true if the rules above to be used.\n"}}, {"oid": "a6cd852b79bca2d6a8c1dad8c6aa7fb0123847c5", "url": "https://github.com/microsoft/mssql-jdbc/commit/a6cd852b79bca2d6a8c1dad8c6aa7fb0123847c5", "message": "Applied review comments and add more test scenarios", "committedDate": "2020-05-22T22:34:26Z", "type": "commit"}, {"oid": "9269f445dfb8f946d39d9ffcfeacd0734308ef90", "url": "https://github.com/microsoft/mssql-jdbc/commit/9269f445dfb8f946d39d9ffcfeacd0734308ef90", "message": "Change delimiter to @", "committedDate": "2020-05-22T22:41:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyMzcwNA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r429723704", "bodyText": "This lambda expression would slow down the parsing of data by scanning through every character. The if statement on line 569 already implicitly does this check, where adding an else statement to\nif ((j < tokens[i].length() - 1) && '\"' == tokens[i].charAt(j + 1)) {\nthis if statement would guarantee that the corrupt String would be caught.", "author": "peterbae", "createdAt": "2020-05-25T04:10:19Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java", "diffHunk": "@@ -516,4 +522,62 @@ public boolean next() throws SQLServerException {\n         }\n         return (null != currentLine);\n     }\n+\n+    /**\n+     * Returns whether the rules to escape delimiters are used.\n+     *\n+     * @return true if the rules are used, false otherwise.\n+     */\n+    public boolean isEscapeColumnDelimitersCSV() {\n+        return escapeDelimiters;\n+    }\n+\n+    /**\n+     * When set to true, the following rules will be used to parse CSV files: Each field may or may not be enclosed in\n+     * double quotes. If fields are not enclosed with double quotes, then double quotes may not appear inside the\n+     * fields. Fields containing double quotes, and delimiters should be enclosed in double quotes. If double-quotes are\n+     * used to enclose fields, then a double-quote appearing inside a field must be escaped by preceding it with another\n+     * double quote. Spaces are considered part of a field. Spaces before and after enclosing double quotes are ignored.\n+     *\n+     * @param escapeDelimiters\n+     *        true if the rules above to be used.\n+     */\n+    public void setEscapeColumnDelimitersCSV(boolean escapeDelimiters) {\n+        this.escapeDelimiters = escapeDelimiters;\n+    }\n+\n+    private static String[] escapeQuotesRFC4180(String[] tokens) throws SQLServerException {\n+        if (null == tokens) {\n+            return tokens;\n+        }\n+        for (int i = 0; i < tokens.length; i++) {\n+            boolean escaped = false;\n+            int j = 0;\n+            StringBuilder sb = new StringBuilder();\n+            long quoteCount = tokens[i].chars().filter(ch -> ch == '\"').count();", "originalCommit": "9269f445dfb8f946d39d9ffcfeacd0734308ef90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAwNjkwNA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r430006904", "bodyText": "Actually, adding an else statement wouldn't catch all the cases; if the String starts with a double quote but doesn't end in one, or if the String starts with a double quote but ends with an escaped double quote would not fail in the else statement. If we want to make it easy, we can just increment a counter to count the number of double quotes as we go along in the while loop, instead of counting it here.", "author": "peterbae", "createdAt": "2020-05-25T16:14:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyMzcwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5NDk2Mw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r430094963", "bodyText": "I improved the error handling a bit, but kept the quoteCount part as it is. filter() has the same time complexity as contains() and I need to use one of them to tell if the driver is parsing a double quote enclosed field. I looked into counting double quotes in the while loop, but it becomes significantly challenging to ignore the whitespaces after the last quote. I think it is okay to keep filter() because the time complexity still remains O(n).", "author": "ulvii", "createdAt": "2020-05-25T23:19:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyMzcwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE1MzIwNA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1312#discussion_r430153204", "bodyText": "Thanks, that sounds good to me.", "author": "peterbae", "createdAt": "2020-05-26T04:46:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyMzcwNA=="}], "type": "inlineReview", "revised_code": {"commit": "3170f5d255267554dbe08507d68964755972a812", "chunk": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java\nindex 1d304246..02be0e09 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerBulkCSVFileRecord.java\n\n@@ -555,12 +555,13 @@ public class SQLServerBulkCSVFileRecord extends SQLServerBulkRecord implements j\n             int j = 0;\n             StringBuilder sb = new StringBuilder();\n             long quoteCount = tokens[i].chars().filter(ch -> ch == '\"').count();\n-            if (0 != quoteCount % 2) {\n-                throw new SQLServerException(SQLServerException.getErrString(\"R_InvalidCSVOddQuotes\"), null, 0, null);\n-            }\n             if (quoteCount > 0) {\n                 tokens[i] = tokens[i].trim();\n             }\n+            if (0 != quoteCount % 2 || (quoteCount > 0\n+                    && ('\"' != tokens[i].charAt(0) || '\"' != tokens[i].charAt(tokens[i].length() - 1)))) {\n+                throw new SQLServerException(SQLServerException.getErrString(\"R_InvalidCSVQuotes\"), null, 0, null);\n+            }\n             while (j < tokens[i].length()) {\n                 if ('\"' == tokens[i].charAt(j)) {\n                     if (!escaped) {\n"}}, {"oid": "3170f5d255267554dbe08507d68964755972a812", "url": "https://github.com/microsoft/mssql-jdbc/commit/3170f5d255267554dbe08507d68964755972a812", "message": "Improve error handling", "committedDate": "2020-05-25T23:12:59Z", "type": "commit"}]}