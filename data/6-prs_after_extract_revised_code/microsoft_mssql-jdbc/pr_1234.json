{"pr_number": 1234, "pr_title": "Release | Fixed issued reported by SonarQube ", "pr_createdAt": "2020-01-20T23:30:58Z", "pr_url": "https://github.com/microsoft/mssql-jdbc/pull/1234", "timeline": [{"oid": "5c276216fc04725c69b637163c6f3e7252f65015", "url": "https://github.com/microsoft/mssql-jdbc/commit/5c276216fc04725c69b637163c6f3e7252f65015", "message": "SonarQube fixes", "committedDate": "2020-01-20T23:27:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc1ODY5Ng==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1234#discussion_r368758696", "bodyText": "shouldn't this be !\"\".equals(sql)?", "author": "peterbae", "createdAt": "2020-01-20T23:38:12Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "diffHunk": "@@ -6202,7 +6202,7 @@ void writeRPCReaderUnicode(String sName, Reader re, long reLength, boolean bOut,\n \n     void sendEnclavePackage(String sql, ArrayList<byte[]> enclaveCEKs) throws SQLServerException {\n         if (null != con && con.isAEv2()) {\n-            if (null != sql && \"\" != sql && null != enclaveCEKs && 0 < enclaveCEKs.size() && con.enclaveEstablished()) {\n+            if (null != sql && \"\".equals(sql) && null != enclaveCEKs && 0 < enclaveCEKs.size() && con.enclaveEstablished()) {", "originalCommit": "5c276216fc04725c69b637163c6f3e7252f65015", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "427911c408873f5c6d67c940e12a00232502c60b", "chunk": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java b/src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java\nindex e8fc0bea..be164da5 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java\n\n@@ -6202,7 +6202,7 @@ final class TDSWriter {\n \n     void sendEnclavePackage(String sql, ArrayList<byte[]> enclaveCEKs) throws SQLServerException {\n         if (null != con && con.isAEv2()) {\n-            if (null != sql && \"\".equals(sql) && null != enclaveCEKs && 0 < enclaveCEKs.size() && con.enclaveEstablished()) {\n+            if (null != sql && !\"\".equals(sql) && null != enclaveCEKs && 0 < enclaveCEKs.size() && con.enclaveEstablished()) {\n                 byte[] b = con.generateEnclavePackage(sql, enclaveCEKs);\n                 if (null != b && 0 != b.length) {\n                     this.writeShort((short) b.length);\n"}}, {"oid": "427911c408873f5c6d67c940e12a00232502c60b", "url": "https://github.com/microsoft/mssql-jdbc/commit/427911c408873f5c6d67c940e12a00232502c60b", "message": "Fix resource leak in AE", "committedDate": "2020-01-21T17:28:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0Mzg5MA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1234#discussion_r369843890", "bodyText": "!connection.enclaveEstablished() is removed, is that intentional?", "author": "ulvii", "createdAt": "2020-01-22T22:37:39Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerVSMEnclaveProvider.java", "diffHunk": "@@ -139,33 +140,27 @@ private VSMAttestationResponse validateAttestationResponse(VSMAttestationRespons\n             String preparedTypeDefinitions, Parameter[] params,\n             ArrayList<String> parameterNames) throws SQLServerException {\n         ArrayList<byte[]> enclaveRequestedCEKs = new ArrayList<>();\n-        ResultSet rs = null;\n         try (PreparedStatement stmt = connection.prepareStatement(connection.enclaveEstablished() ? SDPE1 : SDPE2)) {\n-            if (connection.enclaveEstablished()) {\n-                rs = executeSDPEv1(stmt, userSql, preparedTypeDefinitions);\n-            } else {\n-                rs = executeSDPEv2(stmt, userSql, preparedTypeDefinitions, vsmParams);\n-            }\n-            if (null == rs) {\n-                // No results. Meaning no parameter.\n-                // Should never happen.\n-                return enclaveRequestedCEKs;\n-            }\n-            processSDPEv1(userSql, preparedTypeDefinitions, params, parameterNames, connection, stmt, rs,\n-                    enclaveRequestedCEKs);\n-            // Process the third resultset.\n-            if (connection.isAEv2() && stmt.getMoreResults()) {\n-                rs = (SQLServerResultSet) stmt.getResultSet();\n-                while (rs.next()) {\n-                    hgsResponse = new VSMAttestationResponse(rs.getBytes(1));\n-                    // This validates and establishes the enclave session if valid\n-                    if (!connection.enclaveEstablished()) {\n-                        hgsResponse = validateAttestationResponse(hgsResponse);\n+            try (ResultSet rs = connection.enclaveEstablished() ? executeSDPEv1(stmt, userSql,\n+                    preparedTypeDefinitions) : executeSDPEv2(stmt, userSql, preparedTypeDefinitions, vsmParams)) {\n+                if (null == rs) {\n+                    // No results. Meaning no parameter.\n+                    // Should never happen.\n+                    return enclaveRequestedCEKs;\n+                }\n+                processSDPEv1(userSql, preparedTypeDefinitions, params, parameterNames, connection, stmt, rs,\n+                        enclaveRequestedCEKs);\n+                // Process the third resultset.\n+                if (connection.isAEv2() && stmt.getMoreResults()) {\n+                    try (ResultSet hgsRs = (SQLServerResultSet) stmt.getResultSet()) {\n+                        if (hgsRs.next()) {\n+                            hgsResponse = new VSMAttestationResponse(hgsRs.getBytes(1));\n+                            // This validates and establishes the enclave session if valid\n+                            validateAttestationResponse();", "originalCommit": "427911c408873f5c6d67c940e12a00232502c60b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MTAyMg==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1234#discussion_r369871022", "bodyText": "Intentional.", "author": "rene-ye", "createdAt": "2020-01-23T00:00:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0Mzg5MA=="}], "type": "inlineReview", "revised_code": {"commit": "698df7dcb446df9d0630302353cd870ad54fa293", "chunk": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerVSMEnclaveProvider.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerVSMEnclaveProvider.java\nindex d1f082a9..18e5ec78 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerVSMEnclaveProvider.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerVSMEnclaveProvider.java\n\n@@ -157,6 +157,9 @@ public class SQLServerVSMEnclaveProvider implements ISQLServerEnclaveProvider {\n                             hgsResponse = new VSMAttestationResponse(hgsRs.getBytes(1));\n                             // This validates and establishes the enclave session if valid\n                             validateAttestationResponse();\n+                        } else {\n+                            SQLServerException.makeFromDriverError(null, this,\n+                                    SQLServerException.getErrString(\"R_UnableRetrieveParameterMetadata\"), \"0\", false);\n                         }\n                     }\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0Mzg5OA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1234#discussion_r369843898", "bodyText": "looks funny, use isEmpty instead?", "author": "lilgreenbird", "createdAt": "2020-01-22T22:37:40Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java", "diffHunk": "@@ -6202,7 +6202,7 @@ void writeRPCReaderUnicode(String sName, Reader re, long reLength, boolean bOut,\n \n     void sendEnclavePackage(String sql, ArrayList<byte[]> enclaveCEKs) throws SQLServerException {\n         if (null != con && con.isAEv2()) {\n-            if (null != sql && \"\" != sql && null != enclaveCEKs && 0 < enclaveCEKs.size() && con.enclaveEstablished()) {\n+            if (null != sql && !\"\".equals(sql) && null != enclaveCEKs && 0 < enclaveCEKs.size() && con.enclaveEstablished()) {", "originalCommit": "427911c408873f5c6d67c940e12a00232502c60b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d69c79d592f811d987c2ba7c07a88545a8958a49", "chunk": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java b/src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java\nindex be164da5..94e9b07e 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/IOBuffer.java\n\n@@ -6202,7 +6202,7 @@ final class TDSWriter {\n \n     void sendEnclavePackage(String sql, ArrayList<byte[]> enclaveCEKs) throws SQLServerException {\n         if (null != con && con.isAEv2()) {\n-            if (null != sql && !\"\".equals(sql) && null != enclaveCEKs && 0 < enclaveCEKs.size() && con.enclaveEstablished()) {\n+            if (null != sql && !sql.isEmpty() && null != enclaveCEKs && 0 < enclaveCEKs.size() && con.enclaveEstablished()) {\n                 byte[] b = con.generateEnclavePackage(sql, enclaveCEKs);\n                 if (null != b && 0 != b.length) {\n                     this.writeShort((short) b.length);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0NDM0Mw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1234#discussion_r369844343", "bodyText": "same - isEmpty?", "author": "lilgreenbird", "createdAt": "2020-01-22T22:38:49Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerDatabaseMetaData.java", "diffHunk": "@@ -1047,9 +1047,9 @@ private ResultSet executeSPFkeys(String[] procParams) throws SQLException, SQLTi\n                 cstmt.setString(i + 1, procParams[i]);\n             }\n             String currentDB = null;\n-            if (null != procParams[2] && procParams[2] != \"\") {// pktable_qualifier\n+            if (null != procParams[2] && !\"\".equals(procParams[2])) {// pktable_qualifier\n                 currentDB = switchCatalogs(procParams[2]);\n-            } else if (null != procParams[5] && procParams[5] != \"\") {// fktable_qualifier\n+            } else if (null != procParams[5] && !\"\".equals(procParams[5])) {// fktable_qualifier", "originalCommit": "427911c408873f5c6d67c940e12a00232502c60b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d69c79d592f811d987c2ba7c07a88545a8958a49", "chunk": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerDatabaseMetaData.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerDatabaseMetaData.java\nindex bcc18d17..ae98a220 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerDatabaseMetaData.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerDatabaseMetaData.java\n\n@@ -1047,9 +1047,9 @@ public final class SQLServerDatabaseMetaData implements java.sql.DatabaseMetaDat\n                 cstmt.setString(i + 1, procParams[i]);\n             }\n             String currentDB = null;\n-            if (null != procParams[2] && !\"\".equals(procParams[2])) {// pktable_qualifier\n+            if (null != procParams[2] && !procParams[2].isEmpty()) {// pktable_qualifier\n                 currentDB = switchCatalogs(procParams[2]);\n-            } else if (null != procParams[5] && !\"\".equals(procParams[5])) {// fktable_qualifier\n+            } else if (null != procParams[5] && !procParams[5].isEmpty()) {// fktable_qualifier\n                 currentDB = switchCatalogs(procParams[5]);\n             }\n             ResultSet rs = cstmt.executeQuery();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0NTg2Nw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1234#discussion_r369845867", "bodyText": "Is it possible that the resultset is empty here? If it is, should we throw an exception or it is a legit scenario?", "author": "ulvii", "createdAt": "2020-01-22T22:42:31Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerVSMEnclaveProvider.java", "diffHunk": "@@ -139,33 +140,27 @@ private VSMAttestationResponse validateAttestationResponse(VSMAttestationRespons\n             String preparedTypeDefinitions, Parameter[] params,\n             ArrayList<String> parameterNames) throws SQLServerException {\n         ArrayList<byte[]> enclaveRequestedCEKs = new ArrayList<>();\n-        ResultSet rs = null;\n         try (PreparedStatement stmt = connection.prepareStatement(connection.enclaveEstablished() ? SDPE1 : SDPE2)) {\n-            if (connection.enclaveEstablished()) {\n-                rs = executeSDPEv1(stmt, userSql, preparedTypeDefinitions);\n-            } else {\n-                rs = executeSDPEv2(stmt, userSql, preparedTypeDefinitions, vsmParams);\n-            }\n-            if (null == rs) {\n-                // No results. Meaning no parameter.\n-                // Should never happen.\n-                return enclaveRequestedCEKs;\n-            }\n-            processSDPEv1(userSql, preparedTypeDefinitions, params, parameterNames, connection, stmt, rs,\n-                    enclaveRequestedCEKs);\n-            // Process the third resultset.\n-            if (connection.isAEv2() && stmt.getMoreResults()) {\n-                rs = (SQLServerResultSet) stmt.getResultSet();\n-                while (rs.next()) {\n-                    hgsResponse = new VSMAttestationResponse(rs.getBytes(1));\n-                    // This validates and establishes the enclave session if valid\n-                    if (!connection.enclaveEstablished()) {\n-                        hgsResponse = validateAttestationResponse(hgsResponse);\n+            try (ResultSet rs = connection.enclaveEstablished() ? executeSDPEv1(stmt, userSql,\n+                    preparedTypeDefinitions) : executeSDPEv2(stmt, userSql, preparedTypeDefinitions, vsmParams)) {\n+                if (null == rs) {\n+                    // No results. Meaning no parameter.\n+                    // Should never happen.\n+                    return enclaveRequestedCEKs;\n+                }\n+                processSDPEv1(userSql, preparedTypeDefinitions, params, parameterNames, connection, stmt, rs,\n+                        enclaveRequestedCEKs);\n+                // Process the third resultset.\n+                if (connection.isAEv2() && stmt.getMoreResults()) {\n+                    try (ResultSet hgsRs = (SQLServerResultSet) stmt.getResultSet()) {\n+                        if (hgsRs.next()) {", "originalCommit": "427911c408873f5c6d67c940e12a00232502c60b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MDk3NA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1234#discussion_r369870974", "bodyText": "It shouldn't happen but something can go wrong, we can throw an exception.", "author": "rene-ye", "createdAt": "2020-01-23T00:00:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0NTg2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "698df7dcb446df9d0630302353cd870ad54fa293", "chunk": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerVSMEnclaveProvider.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerVSMEnclaveProvider.java\nindex d1f082a9..18e5ec78 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerVSMEnclaveProvider.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerVSMEnclaveProvider.java\n\n@@ -157,6 +157,9 @@ public class SQLServerVSMEnclaveProvider implements ISQLServerEnclaveProvider {\n                             hgsResponse = new VSMAttestationResponse(hgsRs.getBytes(1));\n                             // This validates and establishes the enclave session if valid\n                             validateAttestationResponse();\n+                        } else {\n+                            SQLServerException.makeFromDriverError(null, this,\n+                                    SQLServerException.getErrString(\"R_UnableRetrieveParameterMetadata\"), \"0\", false);\n                         }\n                     }\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0NjI5Mw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1234#discussion_r369846293", "bodyText": "The questions for VSM provider applies here too.", "author": "ulvii", "createdAt": "2020-01-22T22:43:38Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerAASEnclaveProvider.java", "diffHunk": "@@ -102,47 +102,42 @@ public EnclaveSession getEnclaveSession() {\n         return enclaveSession;\n     }\n \n-    private AASAttestationResponse validateAttestationResponse(AASAttestationResponse ar) throws SQLServerException {\n-        try {\n-            ar.validateToken(attestationURL, aasParams.getNonce());\n-            ar.validateDHPublicKey(aasParams.getNonce());\n-        } catch (GeneralSecurityException e) {\n-            SQLServerException.makeFromDriverError(null, this, e.getLocalizedMessage(), \"0\", false);\n+    private void validateAttestationResponse() throws SQLServerException {\n+        if (null != hgsResponse) {\n+            try {\n+                hgsResponse.validateToken(attestationURL, aasParams.getNonce());\n+                hgsResponse.validateDHPublicKey(aasParams.getNonce());\n+            } catch (GeneralSecurityException e) {\n+                SQLServerException.makeFromDriverError(null, this, e.getLocalizedMessage(), \"0\", false);\n+            }\n         }\n-        return ar;\n     }\n \n     private ArrayList<byte[]> describeParameterEncryption(SQLServerConnection connection, String userSql,\n             String preparedTypeDefinitions, Parameter[] params,\n             ArrayList<String> parameterNames) throws SQLServerException {\n         ArrayList<byte[]> enclaveRequestedCEKs = new ArrayList<>();\n-        ResultSet rs = null;\n         try (PreparedStatement stmt = connection.prepareStatement(connection.enclaveEstablished() ? SDPE1 : SDPE2)) {\n-            if (connection.enclaveEstablished()) {\n-                rs = executeSDPEv1(stmt, userSql, preparedTypeDefinitions);\n-            } else {\n-                rs = executeSDPEv2(stmt, userSql, preparedTypeDefinitions, aasParams);\n-            }\n-            if (null == rs) {\n-                // No results. Meaning no parameter.\n-                // Should never happen.\n-                return enclaveRequestedCEKs;\n-            }\n-            processSDPEv1(userSql, preparedTypeDefinitions, params, parameterNames, connection, stmt, rs,\n-                    enclaveRequestedCEKs);\n-            // Process the third resultset.\n-            if (connection.isAEv2() && stmt.getMoreResults()) {\n-                rs = (SQLServerResultSet) stmt.getResultSet();\n-                while (rs.next()) {\n-                    hgsResponse = new AASAttestationResponse(rs.getBytes(1));\n-                    // This validates and establishes the enclave session if valid\n-                    if (!connection.enclaveEstablished()) {\n-                        hgsResponse = validateAttestationResponse(hgsResponse);\n+            try (ResultSet rs = connection.enclaveEstablished() ? executeSDPEv1(stmt, userSql,\n+                    preparedTypeDefinitions) : executeSDPEv2(stmt, userSql, preparedTypeDefinitions, aasParams)) {\n+                if (null == rs) {\n+                    // No results. Meaning no parameter.\n+                    // Should never happen.\n+                    return enclaveRequestedCEKs;\n+                }\n+                processSDPEv1(userSql, preparedTypeDefinitions, params, parameterNames, connection, stmt, rs,\n+                        enclaveRequestedCEKs);\n+                // Process the third resultset.\n+                if (connection.isAEv2() && stmt.getMoreResults()) {\n+                    try (ResultSet hgsRs = (SQLServerResultSet) stmt.getResultSet()) {\n+                        if (hgsRs.next()) {\n+                            hgsResponse = new AASAttestationResponse(hgsRs.getBytes(1));\n+                            // This validates and establishes the enclave session if valid\n+                            validateAttestationResponse();", "originalCommit": "427911c408873f5c6d67c940e12a00232502c60b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg3MTUzNw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1234#discussion_r369871537", "bodyText": "Intentional.", "author": "rene-ye", "createdAt": "2020-01-23T00:02:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0NjI5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "698df7dcb446df9d0630302353cd870ad54fa293", "chunk": "diff --git a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerAASEnclaveProvider.java b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerAASEnclaveProvider.java\nindex 8c677a62..e5984696 100644\n--- a/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerAASEnclaveProvider.java\n+++ b/src/main/java/com/microsoft/sqlserver/jdbc/SQLServerAASEnclaveProvider.java\n\n@@ -134,6 +134,9 @@ public class SQLServerAASEnclaveProvider implements ISQLServerEnclaveProvider {\n                             hgsResponse = new AASAttestationResponse(hgsRs.getBytes(1));\n                             // This validates and establishes the enclave session if valid\n                             validateAttestationResponse();\n+                        } else {\n+                            SQLServerException.makeFromDriverError(null, this,\n+                                    SQLServerException.getErrString(\"R_UnableRetrieveParameterMetadata\"), \"0\", false);\n                         }\n                     }\n                 }\n"}}, {"oid": "d69c79d592f811d987c2ba7c07a88545a8958a49", "url": "https://github.com/microsoft/mssql-jdbc/commit/d69c79d592f811d987c2ba7c07a88545a8958a49", "message": "Addressing comments", "committedDate": "2020-01-23T00:03:00Z", "type": "commit"}, {"oid": "698df7dcb446df9d0630302353cd870ad54fa293", "url": "https://github.com/microsoft/mssql-jdbc/commit/698df7dcb446df9d0630302353cd870ad54fa293", "message": "throw exception if 3rd resultset is empty", "committedDate": "2020-01-23T00:05:34Z", "type": "commit"}]}