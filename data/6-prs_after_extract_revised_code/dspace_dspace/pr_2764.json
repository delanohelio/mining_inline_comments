{"pr_number": 2764, "pr_title": "CC License support", "pr_createdAt": "2020-05-20T11:12:01Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2764", "timeline": [{"oid": "6e0396e6ad33cedbe81adddf0e146887abaea4d9", "url": "https://github.com/DSpace/DSpace/commit/6e0396e6ad33cedbe81adddf0e146887abaea4d9", "message": "70213: Initial findAll endpoint & backend", "committedDate": "2020-04-08T13:14:18Z", "type": "commit"}, {"oid": "18c8efd95106f02ec12fe6edc9fb2abaf3735a0e", "url": "https://github.com/DSpace/DSpace/commit/18c8efd95106f02ec12fe6edc9fb2abaf3735a0e", "message": "70332: Implement feedback", "committedDate": "2020-04-09T12:26:39Z", "type": "commit"}, {"oid": "f51a12d0106281d32885e1006d91f0c48110de05", "url": "https://github.com/DSpace/DSpace/commit/f51a12d0106281d32885e1006d91f0c48110de05", "message": "70334: CC license (REST): Initial fineOne endpoint", "committedDate": "2020-04-10T08:27:32Z", "type": "commit"}, {"oid": "794ee9fb9fc723c787709a35ba172ce522ca133c", "url": "https://github.com/DSpace/DSpace/commit/794ee9fb9fc723c787709a35ba172ce522ca133c", "message": "70337: Search CC License", "committedDate": "2020-04-14T13:59:21Z", "type": "commit"}, {"oid": "b30f9d9338b9008e47442bf43e28f9313d58bdaa", "url": "https://github.com/DSpace/DSpace/commit/b30f9d9338b9008e47442bf43e28f9313d58bdaa", "message": "70403: CC license (REST): New submission section", "committedDate": "2020-04-16T14:51:02Z", "type": "commit"}, {"oid": "5800bef325d38876b383fad6941a273e38069c4c", "url": "https://github.com/DSpace/DSpace/commit/5800bef325d38876b383fad6941a273e38069c4c", "message": "70403: Add javadocs, undo line adjustments, LicenseMetadataValue changes", "committedDate": "2020-04-17T11:13:40Z", "type": "commit"}, {"oid": "0920de7b21e7f5ccb6d88ae2128e6b533e0910bd", "url": "https://github.com/DSpace/DSpace/commit/0920de7b21e7f5ccb6d88ae2128e6b533e0910bd", "message": "70404: CC license (REST): Patch submission (Add)", "committedDate": "2020-04-20T10:57:49Z", "type": "commit"}, {"oid": "09c0f62561795f3fefd22cac929d1cc9e6036f21", "url": "https://github.com/DSpace/DSpace/commit/09c0f62561795f3fefd22cac929d1cc9e6036f21", "message": "70505: Patch submission (Add): Bugfixing & tests", "committedDate": "2020-04-22T12:39:53Z", "type": "commit"}, {"oid": "a27b64c88f98732b3c4db7b62567ef6078f82ba5", "url": "https://github.com/DSpace/DSpace/commit/a27b64c88f98732b3c4db7b62567ef6078f82ba5", "message": "70506: CC license (REST): Patch submission (Remove)", "committedDate": "2020-04-22T16:00:43Z", "type": "commit"}, {"oid": "36264cca50439249f97b7a3ebbdc3459f8c07f8a", "url": "https://github.com/DSpace/DSpace/commit/36264cca50439249f97b7a3ebbdc3459f8c07f8a", "message": "Submission CreativeCommons license rest evaluator plugin addition so that it plays nicely with the access restrictions", "committedDate": "2020-04-23T12:57:54Z", "type": "commit"}, {"oid": "b271ae662130405aa7b24c5a0cb6dbcec25aba68", "url": "https://github.com/DSpace/DSpace/commit/b271ae662130405aa7b24c5a0cb6dbcec25aba68", "message": "70338: Cleanup CC license code", "committedDate": "2020-04-28T15:17:48Z", "type": "commit"}, {"oid": "8e0b22ad6ca165a16fc608f8d424c66d2b69100d", "url": "https://github.com/DSpace/DSpace/commit/8e0b22ad6ca165a16fc608f8d424c66d2b69100d", "message": "70415: jurisdiction", "committedDate": "2020-04-29T09:17:17Z", "type": "commit"}, {"oid": "b5bbc72eceb1fcf3b323007dfb57affe32109524", "url": "https://github.com/DSpace/DSpace/commit/b5bbc72eceb1fcf3b323007dfb57affe32109524", "message": "70815: Angular feedback", "committedDate": "2020-05-08T10:57:07Z", "type": "commit"}, {"oid": "bfa83b75993edd7d428c6e5d25aa49586b754394", "url": "https://github.com/DSpace/DSpace/commit/bfa83b75993edd7d428c6e5d25aa49586b754394", "message": "Disabling the CC License step in the default configuration", "committedDate": "2020-05-20T11:09:33Z", "type": "commit"}, {"oid": "ffce2e4299595055ba4d0d5e8b0d9e7719c02de8", "url": "https://github.com/DSpace/DSpace/commit/ffce2e4299595055ba4d0d5e8b0d9e7719c02de8", "message": "70815: Angular feedback - add self link", "committedDate": "2020-05-27T11:25:56Z", "type": "commit"}, {"oid": "df01297539dd6dd0d8e81dacb96eb25b75c58a74", "url": "https://github.com/DSpace/DSpace/commit/df01297539dd6dd0d8e81dacb96eb25b75c58a74", "message": "Submission CC license: Adding overrides & removing unused class", "committedDate": "2020-05-27T15:11:52Z", "type": "commit"}, {"oid": "1c921d316f2ebb925127b9e73bf6b0ce553826db", "url": "https://github.com/DSpace/DSpace/commit/1c921d316f2ebb925127b9e73bf6b0ce553826db", "message": "Merge remote-tracking branch 'upstream/master' into w2p-70213_CC-license", "committedDate": "2020-05-28T15:02:49Z", "type": "commit"}, {"oid": "614ad3d054e09046112caec89fd6bb68b3ffacee", "url": "https://github.com/DSpace/DSpace/commit/614ad3d054e09046112caec89fd6bb68b3ffacee", "message": "71199: Fix PR issues", "committedDate": "2020-05-29T09:51:26Z", "type": "commit"}, {"oid": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7", "url": "https://github.com/DSpace/DSpace/commit/72ac35025054b6f2ea4da4ca15c7e877ba4506c7", "message": "Remove unused import", "committedDate": "2020-05-29T11:19:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwODQwMA==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r432608400", "bodyText": "I think we may want to require authorization here. It's not possible to submit an Item in DSpace without first authenticating, so this likely should be @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")  (Also this would avoid a DSpace site being used to \"spam\" the CC License API if someone used this endpoint unauthenticated.)\nAlso, looking at this more closely, as this is a /search endpoint, I think we can move it to the SubmissionCCLicenseRestRepository class in a method annotated with @SearchRestMethod", "author": "tdonohue", "createdAt": "2020-05-29T16:46:16Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/SubmissionCCLicenseSearchController.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.ServletRequest;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.converter.ConverterService;\n+import org.dspace.app.rest.exception.DSpaceBadRequestException;\n+import org.dspace.app.rest.model.SubmissionCCLicenseRest;\n+import org.dspace.app.rest.model.SubmissionCCLicenseUrlRest;\n+import org.dspace.app.rest.model.hateoas.SubmissionCCLicenseUrlResource;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.license.service.CreativeCommonsService;\n+import org.dspace.services.RequestService;\n+import org.dspace.utils.DSpace;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * This controller is responsible for searching the CC License URI\n+ */\n+@RestController\n+@RequestMapping(\"/api/\" + SubmissionCCLicenseRest.CATEGORY + \"/\" + SubmissionCCLicenseRest.PLURAL + \"/search\" +\n+        \"/rightsByQuestions\")\n+@PreAuthorize(\"permitAll()\")", "originalCommit": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNjczNA==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r437406734", "bodyText": "@tdonohue You are correct that this one can move to a RestRepository. However there a couple of options. The method in this controller returns a SubmissionCCLicenseUrlRest while the SubmissionCCLicenseRestRepository supports SubmissionCCLicenseRest  objects. So our options are the following:\n\nMove to SubmissionCCLicenseRestRepository but then we break the mold that each repository supports a single rest object (didn't find a repo that supports multiple)\nCreate a new SubmissionCCLicenseUrlRestRepository just to support the search method, the findOne & findAll() would throw not implemented exceptions. Downside here is that we have a lot more code than we have in the controller\nWe leave it in the separate controller\n\nPlease let us know which option you prefer.", "author": "KevinVdV", "createdAt": "2020-06-09T13:14:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwODQwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxOTAzOA==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r439019038", "bodyText": "@KevinVdV .  This should be in a separate repository SubmissionCCLicenseUrlRestRepository.  You are correct, we shouldn't ever have one Repository return different objects/resources.\nIt's also worth noting, this Controller is incorrectly designed as-is for another reason you just pointed out. The Controller is wrongly using the /api/configuration/submissioncclicense resource path to represent a different resource.  So, in REST, a resource path should always represent the same type of object, and I'm now realizing from your comments that we have this incorrect behavior:\n\n/api/config/submissioncclicense root path represents a SubmissionCCLicenseResource object\nHowever, we're wrongly setting up the subpath /api/config/submissioncclicense/search/rightsByQuestions to represent a different, similar object called SubmissionCCLicenseUrlResource.\n\nSince these are different resources, they must be using different paths.  That means our Contract needs updating to have two related paths:\n\n/api/config/submissioncclicense - which already exists\n/api/config/submissioncclicenseurl/search/rightsByQuestions (or some similar path) which returns a URL resource when searching via questions. This would require updating this new contract PR: DSpace/RestContract#129\n\nIt'd be important to document in the Contract how these two types of resources are used together. It looks like the expectation here is to use /submissioncclicense to get a list of license options, then pass one license ID (with optional answers) to /submissioncclicenseurl to get the final URI.  If that's accurate, we should document that in the REST Contract to describe how clients are expected to interact with these endpoints.\n(As a sidenote, if there's a way to instead refactor the code into a single resource, then we can keep all the paths as-is.  The only design flaw here is that we have one resource path that seems to represent/respond with two different resources, depending on the usage.  A single path in our REST API should only ever respond with one resource type, as noted in the README examples/section on HTTP verbs/responses)", "author": "tdonohue", "createdAt": "2020-06-11T19:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwODQwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxNzc4MA==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r439517780", "bodyText": "@KevinVdV : Minor update.  I was just remembering we have an /api/submission path in our REST API.  So, since those /api/config names are getting really long, we could think about moving these to:\n\n/api/config/submissioncclicense -> rename /api/submission/cclicense\n/api/config/submissioncclicenseurl -> rename /api/submission/cclicenseurl\n\nThis isn't required out of this PR if you disagree / have concerns.  But, I wanted to note it here in case you agree these paths make more sense & are easier.   I do realize we have some submission configs under /api/config so this is fine as-is if you prefer it.  I was just realizing these two new endpoints are a little less about simply reading configuration, and more about looking up a CC license, so they could be moved to /api/submission instead.", "author": "tdonohue", "createdAt": "2020-06-12T16:19:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwODQwMA=="}], "type": "inlineReview", "revised_code": {"commit": "099caaf86f2c0f7eb3d6f9402a75021549fb5f82", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/SubmissionCCLicenseSearchController.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/SubmissionCCLicenseSearchController.java\nindex 17116884c..76ed1021d 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/SubmissionCCLicenseSearchController.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/SubmissionCCLicenseSearchController.java\n\n@@ -34,7 +34,7 @@ import org.springframework.web.bind.annotation.RestController;\n @RestController\n @RequestMapping(\"/api/\" + SubmissionCCLicenseRest.CATEGORY + \"/\" + SubmissionCCLicenseRest.PLURAL + \"/search\" +\n         \"/rightsByQuestions\")\n-@PreAuthorize(\"permitAll()\")\n+@PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n public class SubmissionCCLicenseSearchController {\n \n     @Autowired\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwOTc0OQ==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r432609749", "bodyText": "Shouldn't we be checking here to validate that at least one answer is provided in this request (and throw an error if no answers are provided)?  Is it possible to send a request with zero answers?\nI'd just like to avoid, as much as possible, sending invalid requests to the CC License API, as that could result in DSpace sites getting blocked if this REST endpoint is somehow able to be misused.", "author": "tdonohue", "createdAt": "2020-05-29T16:48:41Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/SubmissionCCLicenseSearchController.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.ServletRequest;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.converter.ConverterService;\n+import org.dspace.app.rest.exception.DSpaceBadRequestException;\n+import org.dspace.app.rest.model.SubmissionCCLicenseRest;\n+import org.dspace.app.rest.model.SubmissionCCLicenseUrlRest;\n+import org.dspace.app.rest.model.hateoas.SubmissionCCLicenseUrlResource;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.license.service.CreativeCommonsService;\n+import org.dspace.services.RequestService;\n+import org.dspace.utils.DSpace;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * This controller is responsible for searching the CC License URI\n+ */\n+@RestController\n+@RequestMapping(\"/api/\" + SubmissionCCLicenseRest.CATEGORY + \"/\" + SubmissionCCLicenseRest.PLURAL + \"/search\" +\n+        \"/rightsByQuestions\")\n+@PreAuthorize(\"permitAll()\")\n+public class SubmissionCCLicenseSearchController {\n+\n+    @Autowired\n+    protected Utils utils;\n+\n+    @Autowired\n+    protected CreativeCommonsService creativeCommonsService;\n+\n+    @Autowired\n+    protected ConverterService converter;\n+\n+    protected RequestService requestService = new DSpace().getRequestService();\n+\n+    /**\n+     * Retrieves the CC License URI based on the license ID and answers in the field questions, provided as parameters\n+     * to this request\n+     *\n+     * @return the CC License URI as a SubmissionCCLicenseUrlResource\n+     */\n+    @RequestMapping(method = RequestMethod.GET)\n+    public SubmissionCCLicenseUrlResource findByRightsByQuestions() {\n+        ServletRequest servletRequest = requestService.getCurrentRequest()\n+                                                      .getServletRequest();\n+        Map<String, String[]> requestParameterMap = servletRequest\n+                .getParameterMap();\n+        Map<String, String> parameterMap = new HashMap<>();\n+        String licenseId = servletRequest.getParameter(\"license\");\n+        if (StringUtils.isBlank(licenseId)) {\n+            throw new DSpaceBadRequestException(\n+                    \"A \\\"license\\\" parameter needs to be provided.\");\n+        }\n+        for (String parameter : requestParameterMap.keySet()) {\n+            if (StringUtils.startsWith(parameter, \"answer_\")) {", "originalCommit": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA1MTI1Nw==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r435051257", "bodyText": "It is possible to send a request without any answers, when you deploy the code locally set the license to \"zero\" for example & leave out all the answers. It will return a valid url response.", "author": "KevinVdV", "createdAt": "2020-06-04T07:35:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwOTc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3ODIzNQ==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r438178235", "bodyText": "@KevinVdV Thank you for your comment it is helpful to have a response without any answers.", "author": "crosenbeck", "createdAt": "2020-06-10T14:42:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwOTc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3NzE1MA==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r438977150", "bodyText": "I think this can be resolved by simply adding an inline comment above the for loop that says something like:\n// loop through parameters to find answer parameters, adding them to the parameterMap.  Zero or more answers may exist, as some CC licenses do not require answers", "author": "tdonohue", "createdAt": "2020-06-11T18:06:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwOTc0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "099caaf86f2c0f7eb3d6f9402a75021549fb5f82", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/SubmissionCCLicenseSearchController.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/SubmissionCCLicenseSearchController.java\nindex 17116884c..76ed1021d 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/SubmissionCCLicenseSearchController.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/SubmissionCCLicenseSearchController.java\n\n@@ -34,7 +34,7 @@ import org.springframework.web.bind.annotation.RestController;\n @RestController\n @RequestMapping(\"/api/\" + SubmissionCCLicenseRest.CATEGORY + \"/\" + SubmissionCCLicenseRest.PLURAL + \"/search\" +\n         \"/rightsByQuestions\")\n-@PreAuthorize(\"permitAll()\")\n+@PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n public class SubmissionCCLicenseSearchController {\n \n     @Autowired\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNDQyNw==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r432614427", "bodyText": "I'm not sure I understand where/how this resource is used. I'm not seeing any examples of a \"submissioncclicenseUrl\" resource in the original Contract at DSpace/RestContract#110  Could we update the contract to describe this or provide examples of this?", "author": "tdonohue", "createdAt": "2020-05-29T16:56:40Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/hateoas/SubmissionCCLicenseUrlResource.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model.hateoas;\n+\n+import org.dspace.app.rest.model.SubmissionCCLicenseUrlRest;\n+import org.dspace.app.rest.model.hateoas.annotations.RelNameDSpaceResource;\n+import org.dspace.app.rest.utils.Utils;\n+\n+/**\n+ * SubmissionCCLicenseUrl HAL Resource. This resource adds the data from the REST object together with embedded objects\n+ * and a set of links if applicable\n+ */\n+@RelNameDSpaceResource(SubmissionCCLicenseUrlRest.NAME)", "originalCommit": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzOTg0MA==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r435039840", "bodyText": "This is used for the following endpoint: https://github.com/DSpace/Rest7Contract/blob/master/submissioncclicenses.md#search-cc-license\nThe response wasn't specified in the contract, but angular needed this one to be rest with a type and a self link. It looks like this:\n{ \"url\": \"http://creativecommons.org/licenses/by-sa/3.0/us/\", \"type\": \"submissioncclicenseUrl\", \"_links\": { \"self\": { \"href\": \"https://dspace7-internal.atmire.com/server/api/config/submissioncclicenses/search/rightsByQuestions?license=standard&answer_commercial=y&answer_derivatives=sa\" } } }\nShould we add this to the rest contract, if so I will create a contract PR.", "author": "KevinVdV", "createdAt": "2020-06-04T07:14:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNDQyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyNTc1NA==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r436125754", "bodyText": "@KevinVdV : Yes, please create a PR to add this to the REST Contract, as we're trying to keep the Contract \"synced\" with the code.", "author": "tdonohue", "createdAt": "2020-06-05T19:38:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNDQyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEzNzAwNA==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r436137004", "bodyText": "Super-picky correction:  in contract-first, what we are trying to do is to keep the code sync.ed with the Contract.  If the code complies with the contract, but doesn't do what we want, the contract is buggy.  We fix the contract.  Now the code is non-compliant, so next we fix the code.  Then (we may hope) the code is compliant and does what we want.", "author": "mwoodiupui", "createdAt": "2020-06-05T19:58:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNDQyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0OTg3Ng==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r437449876", "bodyText": "@tdonohue Contract PR can be found here: DSpace/RestContract#129\n@mwoodiupui It wasn't so much a bug in the contract, rather something that was missing (incomplete) in the contract. I agree overall that the contract should come first, but at times you notice during implementation that something just don't work as it is in the contract & pr's need to be made that include contract changes.", "author": "KevinVdV", "createdAt": "2020-06-09T14:06:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNDQyNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNTEwMg==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r432615102", "bodyText": "Again, I don't think these should be permitAll.  I think we should limit to authenticated users if possible. We don't want to spam the CC API.", "author": "tdonohue", "createdAt": "2020-05-29T16:57:17Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/SubmissionCCLicenseRestRepository.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.util.List;\n+\n+import org.dspace.app.rest.model.SubmissionCCLicenseRest;\n+import org.dspace.core.Context;\n+import org.dspace.license.CCLicense;\n+import org.dspace.license.service.CreativeCommonsService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This is the repository that is responsible to manage CCLicense Rest objects\n+ */\n+@Component(SubmissionCCLicenseRest.CATEGORY + \".\" + SubmissionCCLicenseRest.NAME)\n+public class SubmissionCCLicenseRestRepository extends DSpaceRestRepository<SubmissionCCLicenseRest, String> {\n+\n+    @Autowired\n+    protected CreativeCommonsService creativeCommonsService;\n+\n+    @Override\n+    @PreAuthorize(\"permitAll()\")\n+    public SubmissionCCLicenseRest findOne(final Context context, final String licenseId) {", "originalCommit": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE4NjMwOQ==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r438186309", "bodyText": "I agree with @tdonohue with regards to \"permitAll.\"", "author": "crosenbeck", "createdAt": "2020-06-10T14:53:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNTEwMg=="}], "type": "inlineReview", "revised_code": {"commit": "099caaf86f2c0f7eb3d6f9402a75021549fb5f82", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/SubmissionCCLicenseRestRepository.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/SubmissionCCLicenseRestRepository.java\nindex 6d3cf0323..0dab42f9b 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/SubmissionCCLicenseRestRepository.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/SubmissionCCLicenseRestRepository.java\n\n@@ -30,7 +30,7 @@ public class SubmissionCCLicenseRestRepository extends DSpaceRestRepository<Subm\n     protected CreativeCommonsService creativeCommonsService;\n \n     @Override\n-    @PreAuthorize(\"permitAll()\")\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n     public SubmissionCCLicenseRest findOne(final Context context, final String licenseId) {\n         CCLicense ccLicense = creativeCommonsService.findOne(licenseId);\n         if (ccLicense == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNTMwNw==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r432615307", "bodyText": "Same here, should require authentication.", "author": "tdonohue", "createdAt": "2020-05-29T16:57:30Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/SubmissionCCLicenseRestRepository.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.util.List;\n+\n+import org.dspace.app.rest.model.SubmissionCCLicenseRest;\n+import org.dspace.core.Context;\n+import org.dspace.license.CCLicense;\n+import org.dspace.license.service.CreativeCommonsService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This is the repository that is responsible to manage CCLicense Rest objects\n+ */\n+@Component(SubmissionCCLicenseRest.CATEGORY + \".\" + SubmissionCCLicenseRest.NAME)\n+public class SubmissionCCLicenseRestRepository extends DSpaceRestRepository<SubmissionCCLicenseRest, String> {\n+\n+    @Autowired\n+    protected CreativeCommonsService creativeCommonsService;\n+\n+    @Override\n+    @PreAuthorize(\"permitAll()\")\n+    public SubmissionCCLicenseRest findOne(final Context context, final String licenseId) {\n+        CCLicense ccLicense = creativeCommonsService.findOne(licenseId);\n+        if (ccLicense == null) {\n+            throw new ResourceNotFoundException(\"No CC license could be found for ID: \" + licenseId );\n+        }\n+        return converter.toRest(ccLicense, utils.obtainProjection());\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"permitAll()\")\n+    public Page<SubmissionCCLicenseRest> findAll(final Context context, final Pageable pageable) {", "originalCommit": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE4ODEzNQ==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r438188135", "bodyText": "I agree with @tdonohue there should be required authentication here.", "author": "crosenbeck", "createdAt": "2020-06-10T14:55:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNTMwNw=="}], "type": "inlineReview", "revised_code": {"commit": "099caaf86f2c0f7eb3d6f9402a75021549fb5f82", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/SubmissionCCLicenseRestRepository.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/SubmissionCCLicenseRestRepository.java\nindex 6d3cf0323..0dab42f9b 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/SubmissionCCLicenseRestRepository.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/SubmissionCCLicenseRestRepository.java\n\n@@ -30,7 +30,7 @@ public class SubmissionCCLicenseRestRepository extends DSpaceRestRepository<Subm\n     protected CreativeCommonsService creativeCommonsService;\n \n     @Override\n-    @PreAuthorize(\"permitAll()\")\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n     public SubmissionCCLicenseRest findOne(final Context context, final String licenseId) {\n         CCLicense ccLicense = creativeCommonsService.findOne(licenseId);\n         if (ccLicense == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMDI3OQ==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r432620279", "bodyText": "Could we add a second test here to verify what happens if you attempt to Remove a non-existing license?", "author": "tdonohue", "createdAt": "2020-05-29T17:05:30Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CCLicenseRemovePatchOperationIT.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.matchers.JsonPathMatchers.hasJsonPath;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.WorkspaceItemBuilder;\n+import org.dspace.app.rest.model.patch.AddOperation;\n+import org.dspace.app.rest.model.patch.Operation;\n+import org.dspace.app.rest.model.patch.RemoveOperation;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.WorkspaceItem;\n+import org.junit.Test;\n+\n+/**\n+ * Class to test the methods from the CCLicenseRemovePatchOperation\n+ * Since the CC Licenses are obtained from the CC License API, a mock service has been implemented\n+ * This mock service will return a fixed set of CC Licenses using a similar structure to the ones obtained from the\n+ * CC License API.\n+ * Refer to {@link org.dspace.license.MockCCLicenseConnectorServiceImpl} for more information\n+ */\n+public class CCLicenseRemovePatchOperationIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Test\n+    public void patchRemoveSubmissionCCLicense() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = CommunityBuilder.createCommunity(context)\n+                                              .withName(\"Community\")\n+                                              .build();\n+\n+        Collection collection = CollectionBuilder.createCollection(context, community)\n+                                                 .withName(\"Collection\")\n+                                                 .build();\n+\n+        WorkspaceItem workspaceItem = WorkspaceItemBuilder.createWorkspaceItem(context, collection)\n+                                                          .withTitle(\"Workspace Item\")\n+                                                          .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        // First add a license and verify it is added\n+        List<Operation> ops = new ArrayList<Operation>();\n+        AddOperation addOperation = new AddOperation(\"/sections/cclicense/uri\",\n+                                                     \"http://creativecommons.org/licenses/by-nc-sa/4.0/\");\n+\n+        ops.add(addOperation);\n+        String patchBody = getPatchContent(ops);\n+\n+\n+        getClient(adminToken).perform(patch(\"/api/submission/workspaceitems/\" + workspaceItem.getID())\n+                                              .content(patchBody)\n+                                              .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                             .andExpect(status().isOk())\n+                             .andExpect(jsonPath(\"$.sections.cclicense\", allOf(\n+                                     hasJsonPath(\"$.uri\", is(\"http://creativecommons.org/licenses/by-nc-sa/4.0/\")),\n+                                     hasJsonPath(\"$.rights\",\n+                                                 is(\"Attribution-NonCommercial-ShareAlike 4.0 International\")),\n+                                     hasJsonPath(\"$.file.name\", is(\"license_rdf\"))\n+                             )));\n+\n+\n+        // Remove the license again and verify it is removed\n+\n+        List<Operation> removeOps = new ArrayList<Operation>();\n+        RemoveOperation removeOperation = new RemoveOperation(\"/sections/cclicense/uri\");\n+\n+        removeOps.add(removeOperation);\n+        String removePatch = getPatchContent(removeOps);\n+\n+\n+        getClient(adminToken).perform(patch(\"/api/submission/workspaceitems/\" + workspaceItem.getID())\n+                                              .content(removePatch)\n+                                              .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                             .andExpect(status().isOk())\n+                             .andExpect(jsonPath(\"$.sections\", not(hasJsonPath(\"cclicense\"))));", "originalCommit": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "099caaf86f2c0f7eb3d6f9402a75021549fb5f82", "chunk": "diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CCLicenseRemovePatchOperationIT.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/CCLicenseRemovePatchOperationIT.java\nindex afee0aa88..40828a766 100644\n--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CCLicenseRemovePatchOperationIT.java\n+++ b/dspace-server-webapp/src/test/java/org/dspace/app/rest/CCLicenseRemovePatchOperationIT.java\n\n@@ -59,7 +59,7 @@ public class CCLicenseRemovePatchOperationIT extends AbstractControllerIntegrati\n \n         context.restoreAuthSystemState();\n \n-        String adminToken = getAuthToken(admin.getEmail(), password);\n+        String epersonToken = getAuthToken(eperson.getEmail(), password);\n \n         // First add a license and verify it is added\n         List<Operation> ops = new ArrayList<Operation>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMTkxMw==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r432621913", "bodyText": "As noted above, I think we should likely require authentication on these endpoints.  So, we should enhance all the tests in this file to check that the endpoints return errors if unauthenticated.", "author": "tdonohue", "createdAt": "2020-05-29T17:07:37Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/SubmissionCCLicenseRestRepositoryIT.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.dspace.app.rest.matcher.SubmissionCCLicenseMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.hamcrest.Matchers;\n+import org.junit.Test;\n+\n+/**\n+ * Class to the methods from the SubmissionCCLicenseRestRepository\n+ * Since the CC Licenses are obtained from the CC License API, a mock service has been implemented\n+ * This mock service will return a fixed set of CC Licenses using a similar structure to the ones obtained from the\n+ * CC License API.\n+ * Refer to {@link org.dspace.license.MockCCLicenseConnectorServiceImpl} for more information\n+ */\n+public class SubmissionCCLicenseRestRepositoryIT extends AbstractControllerIntegrationTest {\n+\n+\n+    /**\n+     * Test the findAll method form the SubmissionCCLicenseRestRepository\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void findAllTest() throws Exception {", "originalCommit": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "099caaf86f2c0f7eb3d6f9402a75021549fb5f82", "chunk": "diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/SubmissionCCLicenseRestRepositoryIT.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/SubmissionCCLicenseRestRepositoryIT.java\nindex 5fa22470f..9267cef6c 100644\n--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/SubmissionCCLicenseRestRepositoryIT.java\n+++ b/dspace-server-webapp/src/test/java/org/dspace/app/rest/SubmissionCCLicenseRestRepositoryIT.java\n\n@@ -34,8 +34,9 @@ public class SubmissionCCLicenseRestRepositoryIT extends AbstractControllerInteg\n      */\n     @Test\n     public void findAllTest() throws Exception {\n+        String epersonToken = getAuthToken(eperson.getEmail(), password);\n \n-        getClient().perform(get(\"/api/config/submissioncclicenses\"))\n+        getClient(epersonToken).perform(get(\"/api/config/submissioncclicenses\"))\n                    .andExpect(status().isOk())\n                    .andExpect(content().contentType(contentType))\n                    .andExpect(jsonPath(\"$._embedded.submissioncclicenses\", Matchers.containsInAnyOrder(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMzMwMA==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r432623300", "bodyText": "Above I had asked about whether we need to validate at least one answer is provided.  Could we better describe this use case where we can search licenses without giving any answers?  Is this to lookup the types of answers allowed?  If so, we should enhance this test to check the response includes info on the types of answers alllowed.", "author": "tdonohue", "createdAt": "2020-05-29T17:09:44Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/SubmissionCCLicenseSearchControllerIT.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.junit.Test;\n+\n+/**\n+ * Class to the methods from the SubmissionCCLicenseSearchController\n+ * Since the CC Licenses and the corresponding URIs are obtained from the CC License API, a mock service has been\n+ * implemented.\n+ * This mock service will return a fixed set of CC Licenses using a similar structure to the ones obtained from the\n+ * CC License API.\n+ * Refer to {@link org.dspace.license.MockCCLicenseConnectorServiceImpl} for more information\n+ */\n+public class SubmissionCCLicenseSearchControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Test\n+    public void searchRightsByQuestionsTest() throws Exception {\n+        getClient().perform(get(\n+                \"/api/config/submissioncclicenses/search/rightsByQuestions?license=license2&answer_license2-field0\" +\n+                        \"=license2-field0-enum1\"))\n+                   .andExpect(status().isOk())\n+                   .andExpect(jsonPath(\"$.url\", is(\"mock-license-uri\")))\n+                   .andExpect(jsonPath(\"$.type\", is(\"submissioncclicenseUrl\")))\n+                   .andExpect(jsonPath(\"$._links.self.href\",\n+                                       is(\"http://localhost/api/config/submissioncclicenses/search/rightsByQuestions\" +\n+                                                  \"?license=license2\" +\n+                                                  \"&answer_license2-field0=license2-field0-enum1\")));\n+    }\n+\n+    @Test\n+    public void searchRightsByQuestionsTestLicenseWithoutFields() throws Exception {\n+        getClient().perform(get(\"/api/config/submissioncclicenses/search/rightsByQuestions?license=license3\"))\n+                   .andExpect(status().isOk())", "originalCommit": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA1MjAzNA==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r435052034", "bodyText": "Not sure I fully understand the comment here, there are use cases where no answers are needed (as far as I know there is only a single license type that requires answers). What specific tests would you like us to add ?", "author": "KevinVdV", "createdAt": "2020-06-04T07:37:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMzMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyODU0Nw==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r436128547", "bodyText": "@KevinVdV : What was unclear to me in reviewing this code was exactly what you said above: \"there are use cases where no answers are needed\".  So, I didn't realize that was a supported use case (as even the name \"/search/rightsByQuestions\" implied to me that there's always a question and an answer).\nRather than worrying about any code changes here, could we simply document that use case in our code as an inline comment?  That could just be stating what you said above in the main code...that some licenses actually don't require answers (and you could even link to one or two from the CC API if they are easily available)", "author": "tdonohue", "createdAt": "2020-06-05T19:45:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMzMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3Nzk0NQ==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r438977945", "bodyText": "This can be resolved by adding the inline comment I suggested to findByRightsByQuestions() to clarify that some licenses do not require answer fields.", "author": "tdonohue", "createdAt": "2020-06-11T18:08:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMzMwMA=="}], "type": "inlineReview", "revised_code": {"commit": "099caaf86f2c0f7eb3d6f9402a75021549fb5f82", "chunk": "diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/SubmissionCCLicenseSearchControllerIT.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/SubmissionCCLicenseSearchControllerIT.java\nindex 30734c8ca..8a93e18a8 100644\n--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/SubmissionCCLicenseSearchControllerIT.java\n+++ b/dspace-server-webapp/src/test/java/org/dspace/app/rest/SubmissionCCLicenseSearchControllerIT.java\n\n@@ -29,7 +29,9 @@ public class SubmissionCCLicenseSearchControllerIT extends AbstractControllerInt\n \n     @Test\n     public void searchRightsByQuestionsTest() throws Exception {\n-        getClient().perform(get(\n+        String epersonToken = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(epersonToken).perform(get(\n                 \"/api/config/submissioncclicenses/search/rightsByQuestions?license=license2&answer_license2-field0\" +\n                         \"=license2-field0-enum1\"))\n                    .andExpect(status().isOk())\n"}}, {"oid": "ad316f0d5eadd972a7e66dceb59fbf86c417aaa1", "url": "https://github.com/DSpace/DSpace/commit/ad316f0d5eadd972a7e66dceb59fbf86c417aaa1", "message": "Merge remote-tracking branch 'upstream/master' into w2p-70213_CC-license", "committedDate": "2020-06-04T12:36:45Z", "type": "commit"}, {"oid": "099caaf86f2c0f7eb3d6f9402a75021549fb5f82", "url": "https://github.com/DSpace/DSpace/commit/099caaf86f2c0f7eb3d6f9402a75021549fb5f82", "message": "71266: Community feedback #1", "committedDate": "2020-06-04T14:38:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MzkwMA==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r438973900", "bodyText": "This test doesn't seem to be correct. It is named \"patchRemoveSubmissionCCLicenseNonExisting()\", but it seems like when it removes a non-existing license it responds with a 200 OK?  Shouldn't this return an error response (as it's not valid to remove a license that doesn't exist).", "author": "tdonohue", "createdAt": "2020-06-11T18:01:02Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CCLicenseRemovePatchOperationIT.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.matchers.JsonPathMatchers.hasJsonPath;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.WorkspaceItemBuilder;\n+import org.dspace.app.rest.model.patch.AddOperation;\n+import org.dspace.app.rest.model.patch.Operation;\n+import org.dspace.app.rest.model.patch.RemoveOperation;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.WorkspaceItem;\n+import org.junit.Test;\n+\n+/**\n+ * Class to test the methods from the CCLicenseRemovePatchOperation\n+ * Since the CC Licenses are obtained from the CC License API, a mock service has been implemented\n+ * This mock service will return a fixed set of CC Licenses using a similar structure to the ones obtained from the\n+ * CC License API.\n+ * Refer to {@link org.dspace.license.MockCCLicenseConnectorServiceImpl} for more information\n+ */\n+public class CCLicenseRemovePatchOperationIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Test\n+    public void patchRemoveSubmissionCCLicense() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = CommunityBuilder.createCommunity(context)\n+                                              .withName(\"Community\")\n+                                              .build();\n+\n+        Collection collection = CollectionBuilder.createCollection(context, community)\n+                                                 .withName(\"Collection\")\n+                                                 .build();\n+\n+        WorkspaceItem workspaceItem = WorkspaceItemBuilder.createWorkspaceItem(context, collection)\n+                                                          .withTitle(\"Workspace Item\")\n+                                                          .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String epersonToken = getAuthToken(eperson.getEmail(), password);\n+\n+        // First add a license and verify it is added\n+        List<Operation> ops = new ArrayList<Operation>();\n+        AddOperation addOperation = new AddOperation(\"/sections/cclicense/uri\",\n+                                                     \"http://creativecommons.org/licenses/by-nc-sa/4.0/\");\n+\n+        ops.add(addOperation);\n+        String patchBody = getPatchContent(ops);\n+\n+\n+        getClient(epersonToken).perform(patch(\"/api/submission/workspaceitems/\" + workspaceItem.getID())\n+                                              .content(patchBody)\n+                                              .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                             .andExpect(status().isOk())\n+                             .andExpect(jsonPath(\"$.sections.cclicense\", allOf(\n+                                     hasJsonPath(\"$.uri\", is(\"http://creativecommons.org/licenses/by-nc-sa/4.0/\")),\n+                                     hasJsonPath(\"$.rights\",\n+                                                 is(\"Attribution-NonCommercial-ShareAlike 4.0 International\")),\n+                                     hasJsonPath(\"$.file.name\", is(\"license_rdf\"))\n+                             )));\n+\n+\n+        // Remove the license again and verify it is removed\n+\n+        List<Operation> removeOps = new ArrayList<Operation>();\n+        RemoveOperation removeOperation = new RemoveOperation(\"/sections/cclicense/uri\");\n+\n+        removeOps.add(removeOperation);\n+        String removePatch = getPatchContent(removeOps);\n+\n+\n+        getClient(epersonToken).perform(patch(\"/api/submission/workspaceitems/\" + workspaceItem.getID())\n+                                              .content(removePatch)\n+                                              .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                             .andExpect(status().isOk())\n+                             .andExpect(jsonPath(\"$.sections\", not(hasJsonPath(\"cclicense\"))));\n+    }\n+\n+\n+    @Test\n+    public void patchRemoveSubmissionCCLicenseNonExisting() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = CommunityBuilder.createCommunity(context)\n+                                              .withName(\"Community\")\n+                                              .build();\n+\n+        Collection collection = CollectionBuilder.createCollection(context, community)\n+                                                 .withName(\"Collection\")\n+                                                 .build();\n+\n+        WorkspaceItem workspaceItem = WorkspaceItemBuilder.createWorkspaceItem(context, collection)\n+                                                          .withTitle(\"Workspace Item\")\n+                                                          .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String epersonToken = getAuthToken(eperson.getEmail(), password);\n+\n+\n+        List<Operation> removeOps = new ArrayList<Operation>();\n+        RemoveOperation removeOperation = new RemoveOperation(\"/sections/cclicense/uri\");\n+\n+        removeOps.add(removeOperation);\n+        String removePatch = getPatchContent(removeOps);\n+\n+\n+        getClient(epersonToken).perform(patch(\"/api/submission/workspaceitems/\" + workspaceItem.getID())\n+                                                .content(removePatch)\n+                                                .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                               .andExpect(status().isOk())", "originalCommit": "099caaf86f2c0f7eb3d6f9402a75021549fb5f82", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "08abaf8b039a5c9a152ae296b1e1961a2af6d983", "chunk": "diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CCLicenseRemovePatchOperationIT.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/CCLicenseRemovePatchOperationIT.java\nindex 40828a766..3b05621f0 100644\n--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CCLicenseRemovePatchOperationIT.java\n+++ b/dspace-server-webapp/src/test/java/org/dspace/app/rest/CCLicenseRemovePatchOperationIT.java\n\n@@ -130,7 +130,6 @@ public class CCLicenseRemovePatchOperationIT extends AbstractControllerIntegrati\n         getClient(epersonToken).perform(patch(\"/api/submission/workspaceitems/\" + workspaceItem.getID())\n                                                 .content(removePatch)\n                                                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n-                               .andExpect(status().isOk())\n-                               .andExpect(jsonPath(\"$.sections\", not(hasJsonPath(\"cclicense\"))));\n+                               .andExpect(status().isInternalServerError());\n     }\n }\n"}}, {"oid": "08abaf8b039a5c9a152ae296b1e1961a2af6d983", "url": "https://github.com/DSpace/DSpace/commit/08abaf8b039a5c9a152ae296b1e1961a2af6d983", "message": "71440: Implement feedback", "committedDate": "2020-06-19T12:05:14Z", "type": "commit"}, {"oid": "95110d2b5a202aadba7395e2f598be7bbceb82db", "url": "https://github.com/DSpace/DSpace/commit/95110d2b5a202aadba7395e2f598be7bbceb82db", "message": "[Task 71440] changed the ModelObject for SubmissionCCLicenseUrlRest from String to SubmissionCCLicenseUrl", "committedDate": "2020-06-23T12:23:50Z", "type": "commit"}, {"oid": "3f9a690f5fbb86ba728b39bf9117eed8aa160121", "url": "https://github.com/DSpace/DSpace/commit/3f9a690f5fbb86ba728b39bf9117eed8aa160121", "message": "Merge remote-tracking branch 'dspace/master' into w2p-70213_CC-license", "committedDate": "2020-06-23T12:23:59Z", "type": "commit"}, {"oid": "9f9fe26549fc8d0dd17059b4f6d84bff6451badf", "url": "https://github.com/DSpace/DSpace/commit/9f9fe26549fc8d0dd17059b4f6d84bff6451badf", "message": "[Task 71440] fixed checkstyle and added preAuthorize to the SubmissionCCLicenseUrlRepository", "committedDate": "2020-06-23T13:09:45Z", "type": "commit"}, {"oid": "2b6f19f6beb1f54b727b1a3d83c69b7179a55972", "url": "https://github.com/DSpace/DSpace/commit/2b6f19f6beb1f54b727b1a3d83c69b7179a55972", "message": "[Task 71440] added javadocs to SubmissionCCLicenseUrl", "committedDate": "2020-06-24T09:14:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0NzY2MA==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r445047660", "bodyText": "You may want to check with @artlowel , but because this endpoint only supports a search method it may not be easily \"discoverable\" to Angular.  See this bug https://jira.lyrasis.org/browse/DS-4495 which was resolved in #2766.\nHowever, this is easily fixed, if we need to make the search path discoverable.  You'd just want to update this class to implements InitializingBean and add an afterPropertiesSet() that looks similar to this: https://github.com/DSpace/DSpace/blob/master/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ClaimedTaskRestRepository.java#L200-L205\nEssentially, the goal here is to provide a secondary link directly to the /search subpath, so that the HAL Browser knows of it & also so the Angular UI can easily find it / be aware of it.", "author": "tdonohue", "createdAt": "2020-06-24T17:13:34Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/SubmissionCCLicenseUrlRepository.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.ServletRequest;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.converter.ConverterService;\n+import org.dspace.app.rest.exception.DSpaceBadRequestException;\n+import org.dspace.app.rest.exception.RepositoryMethodNotImplementedException;\n+import org.dspace.app.rest.model.SubmissionCCLicenseUrlRest;\n+import org.dspace.app.rest.model.wrapper.SubmissionCCLicenseUrl;\n+import org.dspace.app.rest.repository.DSpaceRestRepository;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.core.Context;\n+import org.dspace.license.service.CreativeCommonsService;\n+import org.dspace.services.RequestService;\n+import org.dspace.utils.DSpace;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This Repository is responsible for handling the CC License URIs.\n+ * It only supports a search method", "originalCommit": "2b6f19f6beb1f54b727b1a3d83c69b7179a55972", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ5NDU0NQ==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r445494545", "bodyText": "@tdonohue Followed this up with @artlowel & he confirmed your theory, I added a commit to resolve the issue. The endpoint now shows up in the HAL browser.", "author": "KevinVdV", "createdAt": "2020-06-25T11:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0NzY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1MTE3Mg==", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r445651172", "bodyText": "@KevinVdV : Thanks! that looks good now.  I'll merge it immediately", "author": "tdonohue", "createdAt": "2020-06-25T15:36:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0NzY2MA=="}], "type": "inlineReview", "revised_code": {"commit": "8ca6064c88af564865e837aaf40970aaa4048a77", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/SubmissionCCLicenseUrlRepository.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/SubmissionCCLicenseUrlRepository.java\nindex 26703f320..cbfbd347b 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/SubmissionCCLicenseUrlRepository.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/SubmissionCCLicenseUrlRepository.java\n\n@@ -7,6 +7,7 @@\n  */\n package org.dspace.app.rest;\n \n+import java.util.Arrays;\n import java.util.HashMap;\n import java.util.Map;\n import javax.servlet.ServletRequest;\n"}}, {"oid": "8ca6064c88af564865e837aaf40970aaa4048a77", "url": "https://github.com/DSpace/DSpace/commit/8ca6064c88af564865e837aaf40970aaa4048a77", "message": "[CC License] Adding search link to HAL output", "committedDate": "2020-06-25T08:16:46Z", "type": "commit"}, {"oid": "8cadd105468132611f42c23f94b813ad1b22e90c", "url": "https://github.com/DSpace/DSpace/commit/8cadd105468132611f42c23f94b813ad1b22e90c", "message": "[CC License] Fixing checkstyle issues", "committedDate": "2020-06-25T08:56:20Z", "type": "commit"}]}