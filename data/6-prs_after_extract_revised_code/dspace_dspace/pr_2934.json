{"pr_number": 2934, "pr_title": "Scripts and processes - Script output", "pr_createdAt": "2020-08-20T11:52:16Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2934", "timeline": [{"oid": "26935f9d2353967780dc328c2f4dca84be37aa07", "url": "https://github.com/DSpace/DSpace/commit/26935f9d2353967780dc328c2f4dca84be37aa07", "message": "intermittent commit", "committedDate": "2020-08-14T08:15:06Z", "type": "commit"}, {"oid": "fd22cfe7dac4ffedafe7e1d5daf043db035755c5", "url": "https://github.com/DSpace/DSpace/commit/fd22cfe7dac4ffedafe7e1d5daf043db035755c5", "message": "managed context", "committedDate": "2020-08-14T08:58:30Z", "type": "commit"}, {"oid": "eb79a859e086180d971b6162b158308059dd2a02", "url": "https://github.com/DSpace/DSpace/commit/eb79a859e086180d971b6162b158308059dd2a02", "message": "[Task 72494] added Context.Mode.MANAGED to all contexts in the RestDSpaceRunnableHandler", "committedDate": "2020-08-14T09:11:38Z", "type": "commit"}, {"oid": "df06b330fd6d7128ab850bbfa29456c7f07e34ff", "url": "https://github.com/DSpace/DSpace/commit/df06b330fd6d7128ab850bbfa29456c7f07e34ff", "message": "72494: Scripts and processes: Export script output", "committedDate": "2020-08-14T11:54:10Z", "type": "commit"}, {"oid": "7c8270f1c3b8149c5802b20f410c57b53c2f2f39", "url": "https://github.com/DSpace/DSpace/commit/7c8270f1c3b8149c5802b20f410c57b53c2f2f39", "message": "Revert \"[Task 72494] added Context.Mode.MANAGED to all contexts in the RestDSpaceRunnableHandler\"\n\nThis reverts commit eb79a859e086180d971b6162b158308059dd2a02.", "committedDate": "2020-08-18T13:46:55Z", "type": "commit"}, {"oid": "f995007511aef5f60af9bbe455619d10d5098875", "url": "https://github.com/DSpace/DSpace/commit/f995007511aef5f60af9bbe455619d10d5098875", "message": "Revert \"managed context\"\n\nThis reverts commit fd22cfe7dac4ffedafe7e1d5daf043db035755c5.", "committedDate": "2020-08-18T13:51:56Z", "type": "commit"}, {"oid": "3f4015e291722881bba1c70812b466fd688a8cf9", "url": "https://github.com/DSpace/DSpace/commit/3f4015e291722881bba1c70812b466fd688a8cf9", "message": "72494: Scripts and processes: Export script output", "committedDate": "2020-08-18T13:53:36Z", "type": "commit"}, {"oid": "1947b48a4bafaed8581508437934cf7f56a50d48", "url": "https://github.com/DSpace/DSpace/commit/1947b48a4bafaed8581508437934cf7f56a50d48", "message": "Fixing checkstyle warnings", "committedDate": "2020-08-19T07:09:26Z", "type": "commit"}, {"oid": "d32c32e4ab025cd2a767c7e31c1a8d840cff91f4", "url": "https://github.com/DSpace/DSpace/commit/d32c32e4ab025cd2a767c7e31c1a8d840cff91f4", "message": "Additional checkstyle fixes + part of LGTM fix", "committedDate": "2020-08-21T08:34:59Z", "type": "commit"}, {"oid": "80d64e73ec810239b71c1809ddc7444c5dbf9c81", "url": "https://github.com/DSpace/DSpace/commit/80d64e73ec810239b71c1809ddc7444c5dbf9c81", "message": "72494: Fix issue with task executor being used in tests", "committedDate": "2020-08-28T11:07:26Z", "type": "commit"}, {"oid": "959109a6a1f29bb372ee61acc82370ecadfa629b", "url": "https://github.com/DSpace/DSpace/commit/959109a6a1f29bb372ee61acc82370ecadfa629b", "message": "Merge remote-tracking branch 'upstream/main' into w2p-72494_Export-script-output", "committedDate": "2020-08-28T15:03:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwNDQwNw==", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481404407", "bodyText": "Is this System.out really needed?  It seems like something we should remove as it's not used in tests.", "author": "tdonohue", "createdAt": "2020-09-01T20:14:25Z", "path": "dspace-api/src/test/java/org/dspace/eperson/GroupTest.java", "diffHunk": "@@ -171,7 +171,7 @@ public void findByName() throws SQLException {\n     public void findAll() throws SQLException {\n         List<Group> groups = groupService.findAll(context, null);\n         assertThat(\"findAll 1\", groups, notNullValue());\n-        System.out.println(\"TEST GROUP OUTPUT \" + groups);\n+        System.out.println(\"TEST GROUP OUTPUT_TYPE \" + groups);", "originalCommit": "959109a6a1f29bb372ee61acc82370ecadfa629b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f537eadcc3909dc730d200bf6aa4903901e5a6c9", "chunk": "diff --git a/dspace-api/src/test/java/org/dspace/eperson/GroupTest.java b/dspace-api/src/test/java/org/dspace/eperson/GroupTest.java\nindex a54fac864..7fc3563ba 100644\n--- a/dspace-api/src/test/java/org/dspace/eperson/GroupTest.java\n+++ b/dspace-api/src/test/java/org/dspace/eperson/GroupTest.java\n\n@@ -171,7 +171,6 @@ public class GroupTest extends AbstractUnitTest {\n     public void findAll() throws SQLException {\n         List<Group> groups = groupService.findAll(context, null);\n         assertThat(\"findAll 1\", groups, notNullValue());\n-        System.out.println(\"TEST GROUP OUTPUT_TYPE \" + groups);\n         assertTrue(\"findAll 2\", 0 < groups.size());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwNDc4Ng==", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481404786", "bodyText": "Please add JavaDocs at the top of this new Class to describe it", "author": "tdonohue", "createdAt": "2020-09-01T20:15:05Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessOutputLinkRepository.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.BitstreamRest;\n+import org.dspace.app.rest.model.ProcessRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Bitstream;\n+import org.dspace.core.Context;\n+import org.dspace.scripts.Process;\n+import org.dspace.scripts.service.ProcessService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+@Component(ProcessRest.CATEGORY + \".\" + ProcessRest.NAME + \".\" + ProcessRest.OUTPUT)\n+public class ProcessOutputLinkRepository extends AbstractDSpaceRestRepository implements LinkRestRepository {", "originalCommit": "959109a6a1f29bb372ee61acc82370ecadfa629b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f537eadcc3909dc730d200bf6aa4903901e5a6c9", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessOutputLinkRepository.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessOutputLinkRepository.java\nindex 6880157a4..f9f665d14 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessOutputLinkRepository.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessOutputLinkRepository.java\n\n@@ -25,6 +25,10 @@ import org.springframework.data.domain.Pageable;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n \n+/**\n+ * This linkRepository will deal with calls to the /output endpoint of a given Process.\n+ * It'll retrieve the output for the given Process and return this as a {@link BitstreamRest} object\n+ */\n @Component(ProcessRest.CATEGORY + \".\" + ProcessRest.NAME + \".\" + ProcessRest.OUTPUT)\n public class ProcessOutputLinkRepository extends AbstractDSpaceRestRepository implements LinkRestRepository {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwNTI0Nw==", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481405247", "bodyText": "The above JavaDocs are somehow double-commented (and misaligned).  You can remove all the // on each line to line them back up.", "author": "tdonohue", "createdAt": "2020-09-01T20:15:48Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessOutputLinkRepository.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.BitstreamRest;\n+import org.dspace.app.rest.model.ProcessRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Bitstream;\n+import org.dspace.core.Context;\n+import org.dspace.scripts.Process;\n+import org.dspace.scripts.service.ProcessService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+@Component(ProcessRest.CATEGORY + \".\" + ProcessRest.NAME + \".\" + ProcessRest.OUTPUT)\n+public class ProcessOutputLinkRepository extends AbstractDSpaceRestRepository implements LinkRestRepository {\n+\n+    @Autowired\n+    private ProcessService processService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    //    /**\n+//     * This method will retrieve the list of {@link ProcessLog} objects from the {@link Process} as defined through\n+//     the\n+//     * given ID in the rest call and it'll wrap this in a {@link ProcessOutputRest} object to return these\n+//     * @param request           The current request\n+//     * @param processId         The given processId for the {@link Process}\n+//     * @param optionalPageable  Pageable if applicable\n+//     * @param projection        The current projection\n+//     * @return                  The {@link ProcessOutputRest} containing the list of all {@link ProcessLog} for the\n+//     *                          given {@link Process}\n+//     * @throws SQLException         If something goes wrong\n+//     * @throws AuthorizeException   If something goes wrong\n+//     */", "originalCommit": "959109a6a1f29bb372ee61acc82370ecadfa629b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f537eadcc3909dc730d200bf6aa4903901e5a6c9", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessOutputLinkRepository.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessOutputLinkRepository.java\nindex 6880157a4..f9f665d14 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessOutputLinkRepository.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessOutputLinkRepository.java\n\n@@ -25,6 +25,10 @@ import org.springframework.data.domain.Pageable;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n \n+/**\n+ * This linkRepository will deal with calls to the /output endpoint of a given Process.\n+ * It'll retrieve the output for the given Process and return this as a {@link BitstreamRest} object\n+ */\n @Component(ProcessRest.CATEGORY + \".\" + ProcessRest.NAME + \".\" + ProcessRest.OUTPUT)\n public class ProcessOutputLinkRepository extends AbstractDSpaceRestRepository implements LinkRestRepository {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwNjAxOA==", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481406018", "bodyText": "New methods both need JavaDocs added", "author": "tdonohue", "createdAt": "2020-09-01T20:17:17Z", "path": "dspace-api/src/main/java/org/dspace/scripts/service/ProcessService.java", "diffHunk": "@@ -189,4 +190,7 @@ public void appendFile(Context context, Process process, InputStream is, String\n      */\n     public List<String> getFileTypesForProcessBitstreams(Context context, Process process);\n \n+    void appendLog(int processId, String scriptName, String output, ProcessLogLevel processLogLevel) throws IOException;\n+    void createLogBitstream(Context context, Process process)\n+             throws IOException, SQLException, AuthorizeException;", "originalCommit": "959109a6a1f29bb372ee61acc82370ecadfa629b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f537eadcc3909dc730d200bf6aa4903901e5a6c9", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/scripts/service/ProcessService.java b/dspace-api/src/main/java/org/dspace/scripts/service/ProcessService.java\nindex 45509a99c..add523c5d 100644\n--- a/dspace-api/src/main/java/org/dspace/scripts/service/ProcessService.java\n+++ b/dspace-api/src/main/java/org/dspace/scripts/service/ProcessService.java\n\n@@ -190,7 +190,24 @@ public interface ProcessService {\n      */\n     public List<String> getFileTypesForProcessBitstreams(Context context, Process process);\n \n+    /**\n+     * This method will append the given output to the {@link Process} its logs\n+     * @param processId     The ID of the {@link Process} to append the log for\n+     * @param scriptName    The name of the Script that Process runs\n+     * @param output        The output to append\n+     * @param processLogLevel   The loglevel of the output\n+     * @throws IOException  If something goes wrong\n+     */\n     void appendLog(int processId, String scriptName, String output, ProcessLogLevel processLogLevel) throws IOException;\n+\n+    /**\n+     * This method will create a {@link Bitstream} containing the logs for the given {@link Process}\n+     * @param context       The relevant DSpace context\n+     * @param process       The {@link Process} for which we're making the {@link Bitstream}\n+     * @throws IOException  If something goes wrong\n+     * @throws SQLException If something goes wrong\n+     * @throws AuthorizeException   If something goes wrong\n+     */\n     void createLogBitstream(Context context, Process process)\n              throws IOException, SQLException, AuthorizeException;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwNjM1Ng==", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481406356", "bodyText": "Missing an @Override", "author": "tdonohue", "createdAt": "2020-09-01T20:17:59Z", "path": "dspace-api/src/main/java/org/dspace/scripts/ProcessServiceImpl.java", "diffHunk": "@@ -245,4 +255,45 @@ public int countTotal(Context context) throws SQLException {\n         return new ArrayList<>(fileTypesSet);\n     }\n \n+    @Override\n+    public void appendLog(int processId, String scriptName, String output, ProcessLogLevel processLogLevel)\n+            throws IOException {\n+        File tmpDir = FileUtils.getTempDirectory();\n+        File tempFile = new File(tmpDir, scriptName + processId + \".log\");\n+        FileWriter out = new FileWriter(tempFile, true);\n+        try {\n+            try (BufferedWriter writer = new BufferedWriter(out)) {\n+                writer.append(formatLogLine(processId, scriptName, output, processLogLevel));\n+                writer.newLine();\n+            }\n+        } finally {\n+            out.close();\n+        }\n+    }\n+\n+    public void createLogBitstream(Context context, Process process)", "originalCommit": "959109a6a1f29bb372ee61acc82370ecadfa629b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f537eadcc3909dc730d200bf6aa4903901e5a6c9", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/scripts/ProcessServiceImpl.java b/dspace-api/src/main/java/org/dspace/scripts/ProcessServiceImpl.java\nindex 3df318203..2f588abb5 100644\n--- a/dspace-api/src/main/java/org/dspace/scripts/ProcessServiceImpl.java\n+++ b/dspace-api/src/main/java/org/dspace/scripts/ProcessServiceImpl.java\n\n@@ -271,6 +271,7 @@ public class ProcessServiceImpl implements ProcessService {\n         }\n     }\n \n+    @Override\n     public void createLogBitstream(Context context, Process process)\n             throws IOException, SQLException, AuthorizeException {\n         File tmpDir = FileUtils.getTempDirectory();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwODEzMg==", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481408132", "bodyText": "This method accidentally removed the finally clause.  It should be added back in to ensure that the Context is aborted whenever an error occurs.", "author": "tdonohue", "createdAt": "2020-09-01T20:21:26Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/scripts/handler/impl/RestDSpaceRunnableHandler.java", "diffHunk": "@@ -96,14 +103,18 @@ public void handleCompletion() {\n         try {\n             Process process = processService.find(context, processId);\n             processService.complete(context, process);\n-            context.complete();\n             logInfo(\"The script has completed\");\n+\n+            addLogBitstreamToProcess(context);\n+\n+            context.complete();\n         } catch (SQLException e) {\n             log.error(\"RestDSpaceRunnableHandler with process: \" + processId + \" could not be completed\", e);\n-        } finally {\n-            if (context.isValid()) {\n-                context.abort();\n-            }\n+        } catch (IOException | AuthorizeException e) {\n+            log.error(\"RestDSpaceRunnableHandler with process: \" + processId + \" could not be completed due to an \" +\n+                              \"error with the logging bitstream\", e);\n+        } catch (Exception e) {\n+            log.error(e.getMessage(), e);", "originalCommit": "959109a6a1f29bb372ee61acc82370ecadfa629b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f537eadcc3909dc730d200bf6aa4903901e5a6c9", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/scripts/handler/impl/RestDSpaceRunnableHandler.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/scripts/handler/impl/RestDSpaceRunnableHandler.java\nindex 7c927e75a..8f5651374 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/scripts/handler/impl/RestDSpaceRunnableHandler.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/scripts/handler/impl/RestDSpaceRunnableHandler.java\n\n@@ -115,6 +115,10 @@ public class RestDSpaceRunnableHandler implements DSpaceRunnableHandler {\n                               \"error with the logging bitstream\", e);\n         } catch (Exception e) {\n             log.error(e.getMessage(), e);\n+        } finally {\n+            if (context.isValid()) {\n+                context.abort();\n+            }\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwOTA4NQ==", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481409085", "bodyText": "Why is this entire test commented out?", "author": "tdonohue", "createdAt": "2020-09-01T20:23:18Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ProcessRestRepositoryIT.java", "diffHunk": "@@ -322,6 +322,50 @@ public void getProcessFilesTypesRandomProcessId() throws Exception {\n \n     }\n \n+//    @Test\n+//    public void getProcessOutput() throws Exception {", "originalCommit": "959109a6a1f29bb372ee61acc82370ecadfa629b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f537eadcc3909dc730d200bf6aa4903901e5a6c9", "chunk": "diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/ProcessRestRepositoryIT.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/ProcessRestRepositoryIT.java\nindex 18368152b..9f4ec570b 100644\n--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/ProcessRestRepositoryIT.java\n+++ b/dspace-server-webapp/src/test/java/org/dspace/app/rest/ProcessRestRepositoryIT.java\n\n@@ -322,49 +323,29 @@ public class ProcessRestRepositoryIT extends AbstractControllerIntegrationTest {\n \n     }\n \n-//    @Test\n-//    public void getProcessOutput() throws Exception {\n-//        try (InputStream is = IOUtils.toInputStream(\"Test File For Process\", CharEncoding.UTF_8)) {\n-//            processService.appendLog(process.getID(), process.getName(), \"testlog\", ProcessLogLevel.INFO);\n-//        }\n-//\n-//        List<String> fileTypesToCheck = new LinkedList<>();\n-//        fileTypesToCheck.add(\"inputfile\");\n-//\n-//        String token = getAuthToken(admin.getEmail(), password);\n-//\n-//        getClient(token).perform(get(\"/api/system/processes/\" + process.getID() + \"/output\"))\n-//                        .andExpect(status().isOk())\n-//                        .andExpect(jsonPath(\"$.logs\", containsInAnyOrder(\"testlog\")))\n-//                        .andExpect(jsonPath(\"$.type\", is(\"processOutput\")));\n-//\n-//\n-//    }\n-//    @Test\n-//    public void getProcessOutput() throws Exception {\n-//        String token = getAuthToken(admin.getEmail(), password);\n-//\n-//        Process process = ProcessBuilder.createProcess(context, admin, \"mock-script\", new LinkedList<>()).build();\n-//\n-//        getClient(token).perform(get(\"/api/system/processes/\" + process.getID()))\n-//                        .andExpect(status().isOk())\n-//                        .andExpect(jsonPath(\"$\", Matchers.is(\n-//                                ProcessMatcher.matchProcess(process.getName(), String.valueOf(process.getEPerson()\n-//                                .getID()),  process.getID(), new LinkedList<>(), ProcessStatus.SCHEDULED)))\n-//                        );\n-//\n-//        List<String> fileTypesToCheck = new LinkedList<>();\n-//        fileTypesToCheck.add(\"inputfile\");\n-//\n-//        String token = getAuthToken(admin.getEmail(), password);\n-//\n-//        getClient(token).perform(get(\"/api/system/processes/\" + process.getID() + \"/output\"))\n-//                        .andExpect(status().isOk())\n-//                        .andExpect(jsonPath(\"$.logs\", containsInAnyOrder(\"testlog\")))\n-//                        .andExpect(jsonPath(\"$.type\", is(\"processOutput\")));\n-//\n-//\n-//    }\n+    @Test\n+    public void getProcessOutput() throws Exception {\n+        try (InputStream is = IOUtils.toInputStream(\"Test File For Process\", CharEncoding.UTF_8)) {\n+            processService.appendLog(process.getID(), process.getName(), \"testlog\", ProcessLogLevel.INFO);\n+        }\n+        processService.createLogBitstream(context, process);\n+        List<String> fileTypesToCheck = new LinkedList<>();\n+        fileTypesToCheck.add(\"inputfile\");\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/\" + process.getID() + \"/output\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$.name\",\n+                                            is(process.getName() + process.getID() + \".log\")))\n+                        .andExpect(jsonPath(\"$.type\", is(\"bitstream\")))\n+                        .andExpect(jsonPath(\"$.metadata['dc.title'][0].value\",\n+                                            is(process.getName() + process.getID() + \".log\")))\n+                        .andExpect(jsonPath(\"$.metadata['dspace.process.filetype'][0].value\",\n+                                            is(\"script_output\")));\n+\n+\n+    }\n \n     @After\n     @Override\n"}}, {"oid": "f537eadcc3909dc730d200bf6aa4903901e5a6c9", "url": "https://github.com/DSpace/DSpace/commit/f537eadcc3909dc730d200bf6aa4903901e5a6c9", "message": "[Task 73019] applied feedback to the export script output", "committedDate": "2020-09-08T07:13:57Z", "type": "commit"}, {"oid": "7484e476949734446503f101eace33ddda802eab", "url": "https://github.com/DSpace/DSpace/commit/7484e476949734446503f101eace33ddda802eab", "message": "Merge remote-tracking branch 'dspace/main' into w2p-72494_Export-script-output", "committedDate": "2020-09-08T07:29:52Z", "type": "commit"}]}