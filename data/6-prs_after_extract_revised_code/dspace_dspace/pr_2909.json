{"pr_number": 2909, "pr_title": "Support multiple dsoType values in discovery", "pr_createdAt": "2020-07-29T09:44:57Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2909", "timeline": [{"oid": "88e1ecc0a98f0da3f25527d6aa8ecb0f3851cc53", "url": "https://github.com/DSpace/DSpace/commit/88e1ecc0a98f0da3f25527d6aa8ecb0f3851cc53", "message": "taskid 71899 Support multiple dsoType values", "committedDate": "2020-07-29T08:24:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcxNTE1NA==", "url": "https://github.com/DSpace/DSpace/pull/2909#discussion_r463715154", "bodyText": "Could you please add Javadocs to this new method?", "author": "tdonohue", "createdAt": "2020-07-31T16:39:53Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/DiscoverQueryBuilder.java", "diffHunk": "@@ -71,8 +75,19 @@ public DiscoverQuery buildQuery(Context context, IndexableObject scope,\n                                     String dsoType, Pageable page)\n         throws DSpaceBadRequestException {\n \n+        List<String> dsoTypes = dsoType != null ? singletonList(dsoType) : emptyList();\n+\n+        return buildQuery(context, scope, discoveryConfiguration, query, searchFilters, dsoTypes, page);\n+    }\n+\n+    public DiscoverQuery buildQuery(Context context, IndexableObject scope,", "originalCommit": "88e1ecc0a98f0da3f25527d6aa8ecb0f3851cc53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94394d8e593d3d2b65daf6464f2ad0b5e30cc510", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/DiscoverQueryBuilder.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/DiscoverQueryBuilder.java\nindex 3f718b338..3afbdfb8a 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/DiscoverQueryBuilder.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/DiscoverQueryBuilder.java\n\n@@ -69,6 +69,17 @@ public class DiscoverQueryBuilder implements InitializingBean {\n         pageSizeLimit = configurationService.getIntProperty(\"rest.search.max.results\", 100);\n     }\n \n+    /**\n+     * Build a discovery query\n+     *\n+     * @param context                   the DSpace context\n+     * @param scope                     the scope for this discovery query\n+     * @param discoveryConfiguration    the discovery configuration for this discovery query\n+     * @param query                     the query string for this discovery query\n+     * @param searchFilters             the search filters for this discovery query\n+     * @param dsoType                   only include search results with this type\n+     * @param page                      the pageable for this discovery query\n+     */\n     public DiscoverQuery buildQuery(Context context, IndexableObject scope,\n                                     DiscoveryConfiguration discoveryConfiguration,\n                                     String query, List<SearchFilter> searchFilters,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcxNTI5Mg==", "url": "https://github.com/DSpace/DSpace/pull/2909#discussion_r463715292", "bodyText": "Again, please add Javadocs to this new method.", "author": "tdonohue", "createdAt": "2020-07-31T16:40:09Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/DiscoverQueryBuilder.java", "diffHunk": "@@ -104,8 +119,20 @@ public DiscoverQuery buildFacetQuery(Context context, IndexableObject scope,\n                                          String dsoType, Pageable page, String facetName)\n         throws DSpaceBadRequestException {\n \n+        List<String> dsoTypes = dsoType != null ? singletonList(dsoType) : emptyList();\n+\n+        return buildFacetQuery(\n+                context, scope, discoveryConfiguration, prefix, query, searchFilters, dsoTypes, page, facetName);\n+    }\n+\n+    public DiscoverQuery buildFacetQuery(Context context, IndexableObject scope,", "originalCommit": "88e1ecc0a98f0da3f25527d6aa8ecb0f3851cc53", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94394d8e593d3d2b65daf6464f2ad0b5e30cc510", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/DiscoverQueryBuilder.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/DiscoverQueryBuilder.java\nindex 3f718b338..3afbdfb8a 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/DiscoverQueryBuilder.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/DiscoverQueryBuilder.java\n\n@@ -113,6 +135,19 @@ public class DiscoverQueryBuilder implements InitializingBean {\n         }\n     }\n \n+    /**\n+     * Create a discovery facet query.\n+     *\n+     * @param context                   the DSpace context\n+     * @param scope                     the scope for this discovery query\n+     * @param discoveryConfiguration    the discovery configuration for this discovery query\n+     * @param prefix                    limit the facets results to those starting with the given prefix.\n+     * @param query                     the query string for this discovery query\n+     * @param searchFilters             the search filters for this discovery query\n+     * @param dsoType                   only include search results with this type\n+     * @param page                      the pageable for this discovery query\n+     * @param facetName                 the facet field\n+     */\n     public DiscoverQuery buildFacetQuery(Context context, IndexableObject scope,\n                                          DiscoveryConfiguration discoveryConfiguration,\n                                          String prefix, String query, List<SearchFilter> searchFilters,\n"}}, {"oid": "94394d8e593d3d2b65daf6464f2ad0b5e30cc510", "url": "https://github.com/DSpace/DSpace/commit/94394d8e593d3d2b65daf6464f2ad0b5e30cc510", "message": "taskid 71899 Support multiple dsoType values - add typedocs", "committedDate": "2020-08-05T10:25:05Z", "type": "commit"}]}