{"pr_number": 2782, "pr_title": "DSpace (Solr) Statistics - Usage Reports", "pr_createdAt": "2020-06-18T12:56:37Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2782", "timeline": [{"oid": "83cdb824a8f4ec1833091795210401fcb1486c8c", "url": "https://github.com/DSpace/DSpace/commit/83cdb824a8f4ec1833091795210401fcb1486c8c", "message": "71424: Label always on UsageReportPoint for UI &\nTests fixed by adding null check on targetId in EvaluatorPlugins", "committedDate": "2020-06-25T16:12:26Z", "type": "forcePushed"}, {"oid": "161fb9b518ed317372254a33edb956293baeb454", "url": "https://github.com/DSpace/DSpace/commit/161fb9b518ed317372254a33edb956293baeb454", "message": "71214: Usage Reports WIP:\n - TotalVisits, TopCountries & TopCities done\n - TotalVisitsPerMonth Wip\n - TODO: TotalDownloads & IT", "committedDate": "2020-08-07T08:30:21Z", "type": "commit"}, {"oid": "d603ddf40770a2e8f73196cca5f55dc0b8d88d0c", "url": "https://github.com/DSpace/DSpace/commit/d603ddf40770a2e8f73196cca5f55dc0b8d88d0c", "message": "71214: - Usage Reports TotalVisitPerMonth fixed (facet works with range not date any more)\n- settable facetMinCount to get month points with no views\n- TotalDownloads added", "committedDate": "2020-08-07T08:30:21Z", "type": "commit"}, {"oid": "619d4de3ad6789cd1da6f64335826b74a1722647", "url": "https://github.com/DSpace/DSpace/commit/619d4de3ad6789cd1da6f64335826b74a1722647", "message": "71214: Test Fix & Usage Reports First set of Tests (TotalVisits & TotalVisitsPerMonth)", "committedDate": "2020-08-07T08:30:21Z", "type": "commit"}, {"oid": "16df8f38f901544a2be686f0ffbff65a0d2f1fb9", "url": "https://github.com/DSpace/DSpace/commit/16df8f38f901544a2be686f0ffbff65a0d2f1fb9", "message": "71214: checkstyle & Tests for TotalDownloads usage report", "committedDate": "2020-08-07T08:30:21Z", "type": "commit"}, {"oid": "2b0a3664cafba6187d3dad0a9a53a718e479f4bc", "url": "https://github.com/DSpace/DSpace/commit/2b0a3664cafba6187d3dad0a9a53a718e479f4bc", "message": "71214: checkstyle & javadoc", "committedDate": "2020-08-07T08:30:21Z", "type": "commit"}, {"oid": "1bf46bca898a0dcacf18c9b77d2eb825f3a466bd", "url": "https://github.com/DSpace/DSpace/commit/1bf46bca898a0dcacf18c9b77d2eb825f3a466bd", "message": "71214: TopCities & TopCountries usage report tests", "committedDate": "2020-08-07T08:30:54Z", "type": "commit"}, {"oid": "e2d2681816127aa55d961a3f0a11d35caa3b8274", "url": "https://github.com/DSpace/DSpace/commit/e2d2681816127aa55d961a3f0a11d35caa3b8274", "message": "71214: Usage reports authorization + tests (need read access on dso)", "committedDate": "2020-08-07T08:30:54Z", "type": "commit"}, {"oid": "6c68d58c90346e82f294987a7d3b9efdc955de87", "url": "https://github.com/DSpace/DSpace/commit/6c68d58c90346e82f294987a7d3b9efdc955de87", "message": "71214: Search Usage reports endpoint & global site usage report &\nexception changes, todo: search usage report endpoint tests", "committedDate": "2020-08-07T08:30:54Z", "type": "commit"}, {"oid": "af16704b89308c0b117b4b1f6dfe02adf41078e3", "url": "https://github.com/DSpace/DSpace/commit/af16704b89308c0b117b4b1f6dfe02adf41078e3", "message": "71214: Usage report search tests & Config for non-sharded stat solr", "committedDate": "2020-08-07T08:30:54Z", "type": "commit"}, {"oid": "9c16b743f8fce8c86e5d844083ed73d7bbea66bb", "url": "https://github.com/DSpace/DSpace/commit/9c16b743f8fce8c86e5d844083ed73d7bbea66bb", "message": "71214: checkstyle", "committedDate": "2020-08-07T08:30:54Z", "type": "commit"}, {"oid": "f66064f02313281738a3f94c2f0481fb72fee37c", "url": "https://github.com/DSpace/DSpace/commit/f66064f02313281738a3f94c2f0481fb72fee37c", "message": "71424: endpoint methods moved to StatisticsRestRepository", "committedDate": "2020-08-07T08:30:54Z", "type": "commit"}, {"oid": "9694858018cc55bc13e12675bacfcc94466d1f3d", "url": "https://github.com/DSpace/DSpace/commit/9694858018cc55bc13e12675bacfcc94466d1f3d", "message": "71424: permission check back to EvaluatorPlugin, exception message fix", "committedDate": "2020-08-07T08:30:54Z", "type": "commit"}, {"oid": "5c7541a28335d6526c12f2f2af975fef9ac2327c", "url": "https://github.com/DSpace/DSpace/commit/5c7541a28335d6526c12f2f2af975fef9ac2327c", "message": "71214: self link for /statistics/usagereport endpoint", "committedDate": "2020-08-07T08:30:54Z", "type": "commit"}, {"oid": "485800a79e08e88de311b6d572ad9b5723f1e167", "url": "https://github.com/DSpace/DSpace/commit/485800a79e08e88de311b6d572ad9b5723f1e167", "message": "71424: Label always on UsageReportPoint for UI &\nTests fixed by adding null check on targetId in EvaluatorPlugins", "committedDate": "2020-08-07T08:30:54Z", "type": "commit"}, {"oid": "94e3d3df6804b28b1e66a598ff8c43f521119996", "url": "https://github.com/DSpace/DSpace/commit/94e3d3df6804b28b1e66a598ff8c43f521119996", "message": "Null checks for inconsistent stat data points", "committedDate": "2020-08-07T08:30:54Z", "type": "commit"}, {"oid": "fbba2302b66c76c02acfd52a2af5c410690ce163", "url": "https://github.com/DSpace/DSpace/commit/fbba2302b66c76c02acfd52a2af5c410690ce163", "message": "Null check for dso handle", "committedDate": "2020-08-07T08:30:54Z", "type": "commit"}, {"oid": "f0644f5b6b302c4abe9632fefdc83dd94b81c8a7", "url": "https://github.com/DSpace/DSpace/commit/f0644f5b6b302c4abe9632fefdc83dd94b81c8a7", "message": "Id fix most popular items site wide", "committedDate": "2020-08-07T08:30:54Z", "type": "commit"}, {"oid": "24534f943e06a1309a1c36f0a07fb81a3951a12c", "url": "https://github.com/DSpace/DSpace/commit/24534f943e06a1309a1c36f0a07fb81a3951a12c", "message": "Builders moved fixes", "committedDate": "2020-08-07T10:36:12Z", "type": "commit"}, {"oid": "24534f943e06a1309a1c36f0a07fb81a3951a12c", "url": "https://github.com/DSpace/DSpace/commit/24534f943e06a1309a1c36f0a07fb81a3951a12c", "message": "Builders moved fixes", "committedDate": "2020-08-07T10:36:12Z", "type": "forcePushed"}, {"oid": "c88b6ef2e7c28a924d85fa3d04cce769baaebb3c", "url": "https://github.com/DSpace/DSpace/commit/c88b6ef2e7c28a924d85fa3d04cce769baaebb3c", "message": "72788: explicit solr.commit allowed config added for Statistics tests", "committedDate": "2020-08-31T14:30:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5MjkxNg==", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r482992916", "bodyText": "I'm not sure I understand why we turned this into a variable. It looks like it's now always zero (0) in this PR.  I'm not against making this a variable you need to pass in, but I don't understand the reasoning, as it seems like a lot of code refactoring to turn a 1 into a 0.  Could you explain why you've gone with this approach?\nI'm probably missing something, but it'd be nice to understand why sometimes this might need to be 0 and why sometimes it might need to be 1.  We also may want to describe that a bit more in the JavaDocs for facetMinCount, so that it's clear what 0 or 1 mean here.", "author": "tdonohue", "createdAt": "2020-09-03T13:50:28Z", "path": "dspace-api/src/main/java/org/dspace/statistics/SolrLoggerServiceImpl.java", "diffHunk": "@@ -985,28 +996,29 @@ protected String getDateView(String name, String type, Context context) {\n     @Override\n     public QueryResponse query(String query, String filterQuery,\n                                String facetField, int rows, int max, String dateType, String dateStart,\n-                               String dateEnd, List<String> facetQueries, String sort, boolean ascending)\n+                               String dateEnd, List<String> facetQueries, String sort, boolean ascending,\n+                               int facetMinCount)\n         throws SolrServerException, IOException {\n         if (solr == null) {\n             return null;\n         }\n \n         // System.out.println(\"QUERY\");\n         SolrQuery solrQuery = new SolrQuery().setRows(rows).setQuery(query)\n-                                             .setFacetMinCount(1);\n+                                             .setFacetMinCount(facetMinCount);", "originalCommit": "c88b6ef2e7c28a924d85fa3d04cce769baaebb3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYwMTA5Nw==", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r483601097", "bodyText": "@tdonohue facetMinCount needed to be able to set to 0:\n\nTo be able to get the months which have no views as point => need to set facetMinCount to 0 for just that query (here:https://github.com/atmire/DSpace/blob/w2p-71214_Usage-reports/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/UsageReportService.java#L223), which required the change in SolrLoggerServiceImpl to make facetMinCount a method parameter, but this did propagate into adding this method parameter into a lot of other place that use SolrLoggerServiceImpl. \u2028So now points with views=0 also get returned (for TotalVisits I could manually create a point with view = 0, but this was needed just for TotalVisitsPerMonth, not for the Cities/Countries, otherwise there would be long list of points with views=0 that have a view in another item, so for those facetMinCount=1 was still needed\nNote: if you want for the TotalDownloads on an item have a point for each of its bitstream (no just those with views > 0), then the point creation just has to be changed to check totalVisits on each bitstream because if you use facetMinCount=0 there then every bitstream ever retrieved will be in points list", "author": "MarieVerdonck", "createdAt": "2020-09-04T13:02:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5MjkxNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5NTQxMA==", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r482995410", "bodyText": "Needs JavaDocs as it's unclear what a valid \"type\" is for this class.  All others of these UsageReportPointRest class seem to have a constant type.", "author": "tdonohue", "createdAt": "2020-09-03T13:53:48Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportPointDsoTotalVisitsRest.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model;\n+\n+/**\n+ * This class serves as a REST representation of a TotalVisit data Point of a DSO's {@link UsageReportRest} from the\n+ * DSpace statistics\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/06/2020\n+ */\n+public class UsageReportPointDsoTotalVisitsRest extends UsageReportPointRest {\n+\n+    private String type;\n+\n+    @Override\n+    public String getType() {\n+        return this.type;\n+    }\n+\n+    public void setType(String type) {", "originalCommit": "c88b6ef2e7c28a924d85fa3d04cce769baaebb3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYwMDQ2Nw==", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r483600467", "bodyText": "Done", "author": "MarieVerdonck", "createdAt": "2020-09-04T13:01:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5NTQxMA=="}], "type": "inlineReview", "revised_code": {"commit": "88fbb77aa5b5aef90b71b7c97766647bb0d44dbe", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportPointDsoTotalVisitsRest.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportPointDsoTotalVisitsRest.java\nindex 1fc5cf365..fd8d33478 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportPointDsoTotalVisitsRest.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportPointDsoTotalVisitsRest.java\n\n@@ -15,6 +15,9 @@ package org.dspace.app.rest.model;\n  */\n public class UsageReportPointDsoTotalVisitsRest extends UsageReportPointRest {\n \n+    /**\n+     * Type of dso a UsageReport is being requested of (e.g. item, bitstream, ...)\n+     */\n     private String type;\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5NTk2Nw==", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r482995967", "bodyText": "Please add JavaDocs to all these public methods...that way they will be inherited (via @Override) to all extending classes.", "author": "tdonohue", "createdAt": "2020-09-03T13:54:32Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportPointRest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.dspace.app.rest.StatisticsRestController;\n+\n+/**\n+ * This class serves as a REST representation of a Point of a {@link UsageReportRest} from the DSpace statistics\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/06/2020\n+ */\n+public class UsageReportPointRest extends BaseObjectRest<String> {\n+    public static final String NAME = \"point\";\n+    public static final String CATEGORY = RestModel.STATISTICS;\n+    protected String id;\n+    protected String label;\n+    private Map<String, Integer> values;\n+\n+    public String getCategory() {", "originalCommit": "c88b6ef2e7c28a924d85fa3d04cce769baaebb3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYwMTM1Mw==", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r483601353", "bodyText": "Done", "author": "MarieVerdonck", "createdAt": "2020-09-04T13:02:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5NTk2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "88fbb77aa5b5aef90b71b7c97766647bb0d44dbe", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportPointRest.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportPointRest.java\nindex 176fd63a6..c357378a6 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportPointRest.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportPointRest.java\n\n@@ -24,30 +24,69 @@ public class UsageReportPointRest extends BaseObjectRest<String> {\n     protected String label;\n     private Map<String, Integer> values;\n \n+    /**\n+     * Returns the category of this Rest object, {@link #CATEGORY}\n+     *\n+     * @return The category of this Rest object, {@link #CATEGORY}\n+     */\n+    @Override\n     public String getCategory() {\n         return CATEGORY;\n     }\n \n+    /**\n+     * Return controller class responsible for this Rest object\n+     *\n+     * @return Controller class responsible for this Rest object\n+     */\n+    @Override\n     public Class getController() {\n         return StatisticsRestController.class;\n     }\n \n+    /**\n+     * Returns the type of this {@link UsageReportPointRest} object\n+     *\n+     * @return Type of this {@link UsageReportPointRest} object\n+     */\n+    @Override\n     public String getType() {\n         return NAME;\n     }\n \n+    /**\n+     * Returns the values of this {@link UsageReportPointRest} object, containing the amount of views\n+     *\n+     * @return The values of this {@link UsageReportPointRest} object, containing the amount of views\n+     */\n     public Map<String, Integer> getValues() {\n         return values;\n     }\n \n+    /**\n+     * Returns the id of this {@link UsageReportPointRest} object, of the form: type of UsageReport_dso uuid\n+     *\n+     * @return The id of this {@link UsageReportPointRest} object, of the form: type of UsageReport_dso uuid\n+     */\n     public String getId() {\n         return id;\n     }\n \n+    /**\n+     * Set the id of this {@link UsageReportPointRest} object, of the form: type of UsageReport_dso uuid\n+     *\n+     * @param id The id of this {@link UsageReportPointRest} object, of the form: type of UsageReport_dso uuid\n+     */\n     public void setId(String id) {\n         this.id = id;\n     }\n \n+    /**\n+     * Add a value pair to this {@link UsageReportPointRest} object's values\n+     *\n+     * @param key   Key of new value pair\n+     * @param value Value of new value pair\n+     */\n     public void addValue(String key, Integer value) {\n         if (values == null) {\n             values = new HashMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5NzE3NQ==", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r482997175", "bodyText": "Same here, JavaDocs on all the public methods would help distinguish this from UsageReportPointRest, as the two classes look very similar at a glance.", "author": "tdonohue", "createdAt": "2020-09-03T13:56:05Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportRest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.dspace.app.rest.StatisticsRestController;\n+\n+/**\n+ * This class serves as a REST representation of a Usage Report from the DSpace statistics\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/06/2020\n+ */\n+public class UsageReportRest extends BaseObjectRest<String> {\n+    public static final String NAME = \"usagereport\";\n+    public static final String CATEGORY = RestModel.STATISTICS;\n+\n+    @JsonProperty(value = \"report-type\")\n+    private String reportType;\n+    private List<UsageReportPointRest> points;\n+\n+    public String getCategory() {", "originalCommit": "c88b6ef2e7c28a924d85fa3d04cce769baaebb3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYwMTQyOA==", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r483601428", "bodyText": "Done", "author": "MarieVerdonck", "createdAt": "2020-09-04T13:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5NzE3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "88fbb77aa5b5aef90b71b7c97766647bb0d44dbe", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportRest.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportRest.java\nindex 3310835d4..1a8fa2398 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportRest.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportRest.java\n\n@@ -26,26 +26,69 @@ public class UsageReportRest extends BaseObjectRest<String> {\n     private String reportType;\n     private List<UsageReportPointRest> points;\n \n+    /**\n+     * Returns the category of this Rest object, {@link #CATEGORY}\n+     *\n+     * @return The category of this Rest object, {@link #CATEGORY}\n+     */\n+    @Override\n     public String getCategory() {\n         return CATEGORY;\n     }\n \n+    /**\n+     * Return controller class responsible for this Rest object\n+     *\n+     * @return Controller class responsible for this Rest object\n+     */\n+    @Override\n     public Class getController() {\n         return StatisticsRestController.class;\n     }\n \n+    /**\n+     * Returns the type of this {@link UsageReportRest} object\n+     *\n+     * @return Type of this {@link UsageReportRest} object\n+     */\n+    @Override\n     public String getType() {\n         return NAME;\n     }\n \n+    /**\n+     * Returns the report type of this UsageReport, options listed in\n+     * {@link org.dspace.app.rest.utils.UsageReportUtils}, e.g.\n+     * {@link org.dspace.app.rest.utils.UsageReportUtils#TOTAL_VISITS_REPORT_ID}\n+     *\n+     * @return The report type of this UsageReport, options listed in\n+     * {@link org.dspace.app.rest.utils.UsageReportUtils}, e.g.\n+     * {@link org.dspace.app.rest.utils.UsageReportUtils#TOTAL_VISITS_REPORT_ID}\n+     */\n     public String getReportType() {\n         return reportType;\n     }\n \n+    /**\n+     * Sets the report type of this UsageReport, options listed in\n+     * {@link org.dspace.app.rest.utils.UsageReportUtils}, e.g.\n+     * {@link org.dspace.app.rest.utils.UsageReportUtils#TOTAL_VISITS_REPORT_ID}\n+     *\n+     * @param reportType The report type of this UsageReport, options listed in\n+     *                   {@link org.dspace.app.rest.utils.UsageReportUtils}, e.g.\n+     *                   {@link org.dspace.app.rest.utils.UsageReportUtils#TOTAL_VISITS_REPORT_ID}\n+     */\n     public void setReportType(String reportType) {\n         this.reportType = reportType;\n     }\n \n+    /**\n+     * Returns the list of {@link UsageReportPointRest} objects attached to this {@link UsageReportRest} object, or\n+     * empty list if none\n+     *\n+     * @return The list of {@link UsageReportPointRest} objects attached to this {@link UsageReportRest} object, or\n+     * empty list if none\n+     */\n     public List<UsageReportPointRest> getPoints() {\n         if (points == null) {\n             points = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwMDgwNg==", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r483000806", "bodyText": "This looks odd. Why does it need to extend AbstractDSpaceRestRepository when this isn't a RestRepository class?  It's also odd that this service is placed under the org.dspace.app.rest.repository package (where no other Services exist)\nI'm open to other ideas, but I wonder if this should be renamed UsageReportUtils and put under the org.dspace.app.rest.utils package with other similar utility classes?", "author": "tdonohue", "createdAt": "2020-09-03T14:00:38Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/UsageReportService.java", "diffHunk": "@@ -0,0 +1,359 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.dspace.app.rest.exception.DSpaceBadRequestException;\n+import org.dspace.app.rest.model.UsageReportPointCityRest;\n+import org.dspace.app.rest.model.UsageReportPointCountryRest;\n+import org.dspace.app.rest.model.UsageReportPointDateRest;\n+import org.dspace.app.rest.model.UsageReportPointDsoTotalVisitsRest;\n+import org.dspace.app.rest.model.UsageReportRest;\n+import org.dspace.app.rest.utils.DSpaceObjectUtils;\n+import org.dspace.content.Bitstream;\n+import org.dspace.content.DSpaceObject;\n+import org.dspace.content.Item;\n+import org.dspace.content.Site;\n+import org.dspace.core.Constants;\n+import org.dspace.core.Context;\n+import org.dspace.handle.service.HandleService;\n+import org.dspace.statistics.Dataset;\n+import org.dspace.statistics.content.DatasetDSpaceObjectGenerator;\n+import org.dspace.statistics.content.DatasetTimeGenerator;\n+import org.dspace.statistics.content.DatasetTypeGenerator;\n+import org.dspace.statistics.content.StatisticsDataVisits;\n+import org.dspace.statistics.content.StatisticsListing;\n+import org.dspace.statistics.content.StatisticsTable;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This is the Service dealing with the {@link UsageReportRest} logic\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/06/2020\n+ */\n+@Component\n+public class UsageReportService extends AbstractDSpaceRestRepository {", "originalCommit": "c88b6ef2e7c28a924d85fa3d04cce769baaebb3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYwMTc2Ng==", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r483601766", "bodyText": "This was left over from before the endpoint methods to retrieve the actual usage reports were moved to StatisticsRestRepository, moved to util and removed extends", "author": "MarieVerdonck", "createdAt": "2020-09-04T13:03:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwMDgwNg=="}], "type": "inlineReview", "revised_code": {"commit": "88fbb77aa5b5aef90b71b7c97766647bb0d44dbe", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/UsageReportService.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/UsageReportUtils.java\nsimilarity index 99%\nrename from dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/UsageReportService.java\nrename to dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/UsageReportUtils.java\nindex 27a84c6a4..11d9dd141 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/UsageReportService.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/UsageReportUtils.java\n\n@@ -5,7 +5,7 @@\n  *\n  * http://www.dspace.org/license/\n  */\n-package org.dspace.app.rest.repository;\n+package org.dspace.app.rest.utils;\n \n import java.io.IOException;\n import java.sql.SQLException;\n"}}, {"oid": "88fbb77aa5b5aef90b71b7c97766647bb0d44dbe", "url": "https://github.com/DSpace/DSpace/commit/88fbb77aa5b5aef90b71b7c97766647bb0d44dbe", "message": "72788: Feedback processed: Javadoc, moved service > util, config comment", "committedDate": "2020-09-04T10:26:18Z", "type": "commit"}, {"oid": "64cf386b2597d9fc98a169d99c9d0a1d2b81637d", "url": "https://github.com/DSpace/DSpace/commit/64cf386b2597d9fc98a169d99c9d0a1d2b81637d", "message": "72788: Feedback processed: Removed unneeded extends", "committedDate": "2020-09-04T10:29:38Z", "type": "commit"}, {"oid": "65da1216fdb0733347a16693263b8f22daa07624", "url": "https://github.com/DSpace/DSpace/commit/65da1216fdb0733347a16693263b8f22daa07624", "message": "Valid DSO UUID check", "committedDate": "2020-09-04T11:58:32Z", "type": "commit"}, {"oid": "346ff69bcd777a28880f5db999f55dcec074844e", "url": "https://github.com/DSpace/DSpace/commit/346ff69bcd777a28880f5db999f55dcec074844e", "message": "73025: Fix self link", "committedDate": "2020-09-07T08:58:37Z", "type": "commit"}]}