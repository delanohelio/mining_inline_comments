{"pr_number": 3005, "pr_title": "Features endpoint: Edit Collection Permissions", "pr_createdAt": "2020-10-15T06:53:44Z", "pr_url": "https://github.com/DSpace/DSpace/pull/3005", "timeline": [{"oid": "4fb4c129a9506906e4c62f64ac6b091285834210", "url": "https://github.com/DSpace/DSpace/commit/4fb4c129a9506906e4c62f64ac6b091285834210", "message": "73167: Edit Collection Permissions in REST Feature Implementation", "committedDate": "2020-09-28T11:55:53Z", "type": "commit"}, {"oid": "367ce35b4a32125d069b608b4ca7a0093ea21d71", "url": "https://github.com/DSpace/DSpace/commit/367ce35b4a32125d069b608b4ca7a0093ea21d71", "message": "73173: Edit Collection Permissions in REST Feature Implementation", "committedDate": "2020-10-01T16:54:03Z", "type": "commit"}, {"oid": "3e8eb3b3ec94c34fa3a5d6a058e6fdee6eecfe33", "url": "https://github.com/DSpace/DSpace/commit/3e8eb3b3ec94c34fa3a5d6a058e6fdee6eecfe33", "message": "73168: Edit Collection Permissions in REST Feature Integration Tests", "committedDate": "2020-10-05T11:52:59Z", "type": "commit"}, {"oid": "45fe8eec077038df13a7d6dd395edcc22b4af92a", "url": "https://github.com/DSpace/DSpace/commit/45fe8eec077038df13a7d6dd395edcc22b4af92a", "message": "73168: Edit Collection Permissions in REST Feature Integration Tests - feedback", "committedDate": "2020-10-09T14:58:38Z", "type": "commit"}, {"oid": "6295540e47f196cfc3e5c83e24a6ee5c50cfdd25", "url": "https://github.com/DSpace/DSpace/commit/6295540e47f196cfc3e5c83e24a6ee5c50cfdd25", "message": "Small cleanup", "committedDate": "2020-10-12T08:51:08Z", "type": "commit"}, {"oid": "d1ee2556f300c6db24ab1028c96a385d7a704d0c", "url": "https://github.com/DSpace/DSpace/commit/d1ee2556f300c6db24ab1028c96a385d7a704d0c", "message": "73178: Edit Collection Permissions in REST Feature Integration Tests\n\n- add ManageWorkflowGroupFeature, ManageSubmitterGroupFeature, ManageAdminGroupFeature", "committedDate": "2020-10-12T11:48:23Z", "type": "commit"}, {"oid": "bddd4c4f9ccd5cd6b800dc63ee256d7fb85061be", "url": "https://github.com/DSpace/DSpace/commit/bddd4c4f9ccd5cd6b800dc63ee256d7fb85061be", "message": "73178: Edit Collection Permissions in REST Feature Integration Tests - feedback", "committedDate": "2020-10-14T13:35:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5OTE0Nw==", "url": "https://github.com/DSpace/DSpace/pull/3005#discussion_r512099147", "bodyText": "As I was reviewing this PR, I realized that obviously Admin groups are also supported for Communities (e.g. in DSpace 6.x Communities support an Administrators group).\nEither we should update this PR to ensure this same canManageAdminGroup check supports Communities, or we should do that in a follow-up PR.  This modification will initially result in some test failures, as I see you have ITs which check that canManageAdminGroup currently cannot be used on Communities.", "author": "tdonohue", "createdAt": "2020-10-26T16:32:36Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/authorization/impl/ManageAdminGroupFeature.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.authorization.impl;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.app.rest.authorization.AuthorizationFeature;\n+import org.dspace.app.rest.authorization.AuthorizationFeatureDocumentation;\n+import org.dspace.app.rest.model.BaseObjectRest;\n+import org.dspace.app.rest.model.CollectionRest;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.app.util.AuthorizeUtil;\n+import org.dspace.content.Collection;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * The manage admin group feature. It can be used to verify if a collection admin group can be created, deleted,\n+ * viewed or edited.\n+ *\n+ * Authorization is granted if the current user has ADMIN permissions on the given collection and the configuration\n+ * allows the collection admin to manage admin groups, OR the current user has ADMIN permissions on the given\n+ * collection's owning community and the configuration allows the community admin to manage admin groups.\n+ */\n+@Component\n+@AuthorizationFeatureDocumentation(name = ManageAdminGroupFeature.NAME,\n+    description = \"It can be used to verify if the collection admin group can be created, deleted,\" +\n+        \" viewed or edited.\")\n+public class ManageAdminGroupFeature implements AuthorizationFeature {\n+\n+    public final static String NAME = \"canManageAdminGroup\";\n+\n+    @Autowired\n+    private Utils utils;\n+\n+    @Override\n+    public boolean isAuthorized(Context context, BaseObjectRest object) throws SQLException {\n+        if (object instanceof CollectionRest) {\n+            try {\n+                AuthorizeUtil.authorizeManageAdminGroup(context,\n+                    (Collection)utils.getDSpaceAPIObjectFromRest(context, object));\n+                return true;\n+            } catch (Exception e) {\n+                return false;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public String[] getSupportedTypes() {\n+        return new String[]{\n+            CollectionRest.CATEGORY + \".\" + CollectionRest.NAME", "originalCommit": "bddd4c4f9ccd5cd6b800dc63ee256d7fb85061be", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}