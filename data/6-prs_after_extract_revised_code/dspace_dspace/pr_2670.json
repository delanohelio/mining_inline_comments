{"pr_number": 2670, "pr_title": "DS-4433 Specify embeds", "pr_createdAt": "2020-02-13T14:51:39Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2670", "timeline": [{"oid": "45b45d39aacd64065d2fd61fe48bfa4d650da27f", "url": "https://github.com/DSpace/DSpace/commit/45b45d39aacd64065d2fd61fe48bfa4d650da27f", "message": "DS-4433 Add support to request specific embeds", "committedDate": "2020-02-13T17:03:09Z", "type": "commit"}, {"oid": "45b45d39aacd64065d2fd61fe48bfa4d650da27f", "url": "https://github.com/DSpace/DSpace/commit/45b45d39aacd64065d2fd61fe48bfa4d650da27f", "message": "DS-4433 Add support to request specific embeds", "committedDate": "2020-02-13T17:03:09Z", "type": "forcePushed"}, {"oid": "c6e3758a4042135f2e6d45e11a778ce91e300555", "url": "https://github.com/DSpace/DSpace/commit/c6e3758a4042135f2e6d45e11a778ce91e300555", "message": "Cast to RestAddressableModel", "committedDate": "2020-02-19T13:32:50Z", "type": "commit"}, {"oid": "48c6bcb88bfb31acdf1ddcf59a0fb79dd4807796", "url": "https://github.com/DSpace/DSpace/commit/48c6bcb88bfb31acdf1ddcf59a0fb79dd4807796", "message": "Add previously processed links", "committedDate": "2020-02-20T08:53:32Z", "type": "commit"}, {"oid": "533570538aa66add416107d01950ed8a386caad5", "url": "https://github.com/DSpace/DSpace/commit/533570538aa66add416107d01950ed8a386caad5", "message": "Add docs, Change max embeds", "committedDate": "2020-02-20T08:53:55Z", "type": "commit"}, {"oid": "9534a0b3aaa4ebe4bddb341356e87be30d9e899d", "url": "https://github.com/DSpace/DSpace/commit/9534a0b3aaa4ebe4bddb341356e87be30d9e899d", "message": "Fix imports", "committedDate": "2020-02-20T08:56:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc4NjkzMw==", "url": "https://github.com/DSpace/DSpace/pull/2670#discussion_r382786933", "bodyText": "Silly question, but what are \"rels\"?  Can we enhance the JavaDocs here a bit...it's unclear what constitutes a valid \"rel\". For example, how do we know what \"rels\" are valid to pass in?\nThat question is a bit \"tongue in cheek\", as I'm assuming that by \"rels\" you mean relationships, which are actually named _links in HAL format.  But, it'd be good to spell that out, or even consider renaming this EmbedLinksProjection (since any link is valid to pass to embed, I presume).  The rename here is optional, but I the the Javadocs do need improving here.", "author": "tdonohue", "createdAt": "2020-02-21T20:19:31Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/projection/EmbedRelsProjection.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.projection;\n+\n+import java.util.Set;\n+\n+import org.dspace.app.rest.model.LinkRest;\n+import org.dspace.app.rest.model.hateoas.HALResource;\n+\n+/**\n+ * Projection that allows a given set of rels to be embedded.", "originalCommit": "45b45d39aacd64065d2fd61fe48bfa4d650da27f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkxNDM1OA==", "url": "https://github.com/DSpace/DSpace/pull/2670#discussion_r382914358", "bodyText": "\"Rels\" is common shorthand for \"link relation types\" as defined by RFC8288. The Spring HATEOAS folks call them that a lot (see the javadocs for \"Link\"), as do a few other places in DSpace code and in the wild (see the wikipedia page for \"Link relation\")...so I got used to doing the same.\nIt doesn't hurt to be explicit here, though, particularly in class-level javadocs.\n\nhow do we know what \"rels\" are valid to pass in?\n\nThat info is expressed in a few places in code, but if you're consuming the REST api, your best bet for the official list should be the rest contract. The javadocs could stand to make reference to that, too.", "author": "cwilper", "createdAt": "2020-02-22T13:56:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc4NjkzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMzU5OA==", "url": "https://github.com/DSpace/DSpace/pull/2670#discussion_r387903598", "bodyText": "I'd rather we get a bit more specific in these JavaDocs, either via an example, a link to REST Contract or more explanation. I worry that assuming \"rels\" is a commonly understood term to all developers is a big assumption here.", "author": "tdonohue", "createdAt": "2020-03-04T20:02:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc4NjkzMw=="}], "type": "inlineReview", "revised_code": {"commit": "ba76270beaed2b85dd78baa315fb11286c665c24", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/projection/EmbedRelsProjection.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/projection/EmbedRelsProjection.java\nindex bce5923ff..2cc236769 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/projection/EmbedRelsProjection.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/projection/EmbedRelsProjection.java\n\n@@ -10,7 +10,9 @@ package org.dspace.app.rest.projection;\n import java.util.Set;\n \n import org.dspace.app.rest.model.LinkRest;\n+import org.dspace.app.rest.model.RestAddressableModel;\n import org.dspace.app.rest.model.hateoas.HALResource;\n+import org.springframework.hateoas.Link;\n \n /**\n  * Projection that allows a given set of rels to be embedded.\n"}}, {"oid": "ba76270beaed2b85dd78baa315fb11286c665c24", "url": "https://github.com/DSpace/DSpace/commit/ba76270beaed2b85dd78baa315fb11286c665c24", "message": "Merge remote-tracking branch 'origin/DS-4433_Specify-embeds-Continued-2' into w2p-69133_refactoring-and-its-specific-embeds", "committedDate": "2020-02-28T14:35:08Z", "type": "commit"}, {"oid": "af5abeb524fdecd8f57f3561e8e797a47de44191", "url": "https://github.com/DSpace/DSpace/commit/af5abeb524fdecd8f57f3561e8e797a47de44191", "message": "Merge remote-tracking branch 'origin/w2p-68607_add-link-to-parent-community' into w2p-69133_refactoring-and-its-specific-embeds", "committedDate": "2020-02-28T14:36:03Z", "type": "commit"}, {"oid": "e659c199d86491ff23bf57c067d42b5b5d343310", "url": "https://github.com/DSpace/DSpace/commit/e659c199d86491ff23bf57c067d42b5b5d343310", "message": "[Task 69133] added tests for Projections level and specific embed; applied small refactors to beans", "committedDate": "2020-03-02T10:06:14Z", "type": "commit"}, {"oid": "39c792caf0ca2238e48b3002086e5a9637f27f25", "url": "https://github.com/DSpace/DSpace/commit/39c792caf0ca2238e48b3002086e5a9637f27f25", "message": "[Task 69270] applied the feedback with regards to the projections.xml, spring-dspace-core-services.xml and test comments", "committedDate": "2020-03-03T10:27:11Z", "type": "commit"}, {"oid": "fe664b3f6c673b82b91ac2f2b27f7d45343620fc", "url": "https://github.com/DSpace/DSpace/commit/fe664b3f6c673b82b91ac2f2b27f7d45343620fc", "message": "Example of different implementation for specificLevelEmbed", "committedDate": "2020-03-03T12:06:07Z", "type": "commit"}, {"oid": "20fa413ad8da2f8b00cb28318785d8474c582a2b", "url": "https://github.com/DSpace/DSpace/commit/20fa413ad8da2f8b00cb28318785d8474c582a2b", "message": "[Task 69284] fully refactored the SpecificLevelProjection and tests", "committedDate": "2020-03-04T11:01:06Z", "type": "commit"}, {"oid": "3c01cc2a80e6e6ecc5a4f168956e86509ec27acd", "url": "https://github.com/DSpace/DSpace/commit/3c01cc2a80e6e6ecc5a4f168956e86509ec27acd", "message": "Merge pull request #17 from atmire/w2p-69133_refactoring-and-its-specific-embeds-refactor\n\nW2p 69133 refactoring and its specific embeds refactor", "committedDate": "2020-03-04T12:06:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3Mjk1NA==", "url": "https://github.com/DSpace/DSpace/pull/2670#discussion_r387872954", "bodyText": "Please add JavaDocs to the new toResource method here, especially describing how it differs from the other toResource", "author": "tdonohue", "createdAt": "2020-03-04T19:06:32Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/ConverterService.java", "diffHunk": "@@ -155,9 +156,12 @@\n      * @throws ClassCastException if the resource type is not compatible with the inferred return type.\n      */\n     public <T extends HALResource> T toResource(RestModel restObject) {\n+        return toResource(restObject, new Link[] {});\n+    }\n+    public <T extends HALResource> T toResource(RestModel restObject, Link... oldLinks) {", "originalCommit": "3c01cc2a80e6e6ecc5a4f168956e86509ec27acd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0577e732289ac79a54b4d5588a796f548b9164e", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/ConverterService.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/ConverterService.java\nindex 52b1d4ac3..295634599 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/ConverterService.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/ConverterService.java\n\n@@ -158,6 +158,24 @@ public class ConverterService {\n     public <T extends HALResource> T toResource(RestModel restObject) {\n         return toResource(restObject, new Link[] {});\n     }\n+\n+    /**\n+     * Converts the given rest object to a {@link HALResource} object.\n+     * <p>\n+     * If the rest object is a {@link RestAddressableModel}, the projection returned by\n+     * {@link RestAddressableModel#getProjection()} will be used to determine which optional\n+     * embeds and links will be added, and {@link Projection#transformResource(HALResource)}\n+     * will be automatically called before returning the final, fully converted resource.\n+     * </p><p>\n+     * In all cases, the {@link HalLinkService} will be used immediately after the resource is constructed,\n+     * to ensure all {@link HalLinkFactory}s have had a chance to add links as needed.\n+     * </p>\n+     *\n+     * @param restObject the input rest object.\n+     * @param oldLinks  The old links fo the Resource Object\n+     * @param <T> the return type, a subclass of {@link HALResource}.\n+     * @return the fully converted resource, with all automatic links and embeds applied.\n+     */\n     public <T extends HALResource> T toResource(RestModel restObject, Link... oldLinks) {\n         T halResource = getResource(restObject);\n         if (restObject instanceof RestAddressableModel) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwNTA2MQ==", "url": "https://github.com/DSpace/DSpace/pull/2670#discussion_r387905061", "bodyText": "This class looks to be unrelated to this PR.  But, I see it's already on master.  Could you rebase this PR to make it easier to review the new changes?", "author": "tdonohue", "createdAt": "2020-03-04T20:05:32Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunityParentCommunityLinkRepository.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.CommunityRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.content.Community;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * LinkRepository for the ParentCommunity object for a Community\n+ */\n+@Component(CommunityRest.CATEGORY + \".\" + CommunityRest.NAME + \".\" + CommunityRest.PARENT_COMMUNITY)\n+public class CommunityParentCommunityLinkRepository extends AbstractDSpaceRestRepository", "originalCommit": "3c01cc2a80e6e6ecc5a4f168956e86509ec27acd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwNzAzMw==", "url": "https://github.com/DSpace/DSpace/pull/2670#discussion_r387907033", "bodyText": "This new configuration does not appear to be added to a *.cfg file in this PR.  We should add it along with comments describing it.\nIt should probably be added to the existing rest.cfg file, and renamed rest.projections.full.max.  (NOTE: this same config is also used in SpecificLevelProjection)", "author": "tdonohue", "createdAt": "2020-03-04T20:09:31Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/projection/FullProjection.java", "diffHunk": "@@ -18,14 +21,17 @@\n public class FullProjection extends AbstractProjection {\n \n     public final static String NAME = \"full\";\n+    private final int maxEmbed = DSpaceServicesFactory.getInstance().getConfigurationService()\n+            .getIntProperty(\"projections.full.max\", 2);", "originalCommit": "3c01cc2a80e6e6ecc5a4f168956e86509ec27acd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0577e732289ac79a54b4d5588a796f548b9164e", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/projection/FullProjection.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/projection/FullProjection.java\nindex 3ede98b5c..99719c8ac 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/projection/FullProjection.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/projection/FullProjection.java\n\n@@ -22,7 +22,7 @@ public class FullProjection extends AbstractProjection {\n \n     public final static String NAME = \"full\";\n     private final int maxEmbed = DSpaceServicesFactory.getInstance().getConfigurationService()\n-            .getIntProperty(\"projections.full.max\", 2);\n+            .getIntProperty(\"rest.projections.full.max\", 2);\n \n     public String getName() {\n         return NAME;\n"}}, {"oid": "e0577e732289ac79a54b4d5588a796f548b9164e", "url": "https://github.com/DSpace/DSpace/commit/e0577e732289ac79a54b4d5588a796f548b9164e", "message": "[Task 69343] applied the feedback with regards to the specific embed functionality", "committedDate": "2020-03-06T10:16:59Z", "type": "commit"}, {"oid": "ef386fb5cb66d49e3ab7d0acbbf23bc050ceb56a", "url": "https://github.com/DSpace/DSpace/commit/ef386fb5cb66d49e3ab7d0acbbf23bc050ceb56a", "message": "[Task 69343] added comments to the properties in rest.cfg", "committedDate": "2020-03-06T13:30:27Z", "type": "commit"}]}