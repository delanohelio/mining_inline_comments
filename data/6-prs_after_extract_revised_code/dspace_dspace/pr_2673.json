{"pr_number": 2673, "pr_title": "[DS-3532] Breadcrumbs in header", "pr_createdAt": "2020-02-14T10:17:28Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2673", "timeline": [{"oid": "0faeaabdefa9f157e4072466fc8ba4dc0c7f47ec", "url": "https://github.com/DSpace/DSpace/commit/0faeaabdefa9f157e4072466fc8ba4dc0c7f47ec", "message": "[Task 68607] added links to the parentCommunity for collections and communities on their respective endpoints", "committedDate": "2020-02-07T14:38:25Z", "type": "commit"}, {"oid": "ea509448a99bfa69d90c0a48b5b3a1893394713b", "url": "https://github.com/DSpace/DSpace/commit/ea509448a99bfa69d90c0a48b5b3a1893394713b", "message": "[Task 68608] test setup for parent community IT", "committedDate": "2020-02-10T13:32:16Z", "type": "commit"}, {"oid": "fa07bc27d02a362dec813f229642796deca6ccf3", "url": "https://github.com/DSpace/DSpace/commit/fa07bc27d02a362dec813f229642796deca6ccf3", "message": "Merge branch 'DS-3533_Projections-Continued' into w2p-68607_add-link-to-parent-community", "committedDate": "2020-02-11T11:44:37Z", "type": "commit"}, {"oid": "2241b591f7cec8a7c7702c925238889d60f4fe6e", "url": "https://github.com/DSpace/DSpace/commit/2241b591f7cec8a7c7702c925238889d60f4fe6e", "message": "[Task 68608] added ITs for the parent communities and owning collections", "committedDate": "2020-02-11T15:10:42Z", "type": "commit"}, {"oid": "fc1744c3223be02aec94483ffce73cd924b49354", "url": "https://github.com/DSpace/DSpace/commit/fc1744c3223be02aec94483ffce73cd924b49354", "message": "Merge branch 'DS-3533_Projections-Continued' into w2p-68607_add-link-to-parent-community", "committedDate": "2020-02-13T14:42:28Z", "type": "commit"}, {"oid": "61400e1145c7d188402adc5e2231edb867156859", "url": "https://github.com/DSpace/DSpace/commit/61400e1145c7d188402adc5e2231edb867156859", "message": "Added parentCommunity to test matchers for collections and communities", "committedDate": "2020-02-13T15:17:22Z", "type": "commit"}, {"oid": "6447176f02a43210dd8f5044c18cd398c76c15a6", "url": "https://github.com/DSpace/DSpace/commit/6447176f02a43210dd8f5044c18cd398c76c15a6", "message": "Fixed headers and checkstyle for parentCommunity link functionality", "committedDate": "2020-02-14T08:27:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2MTE2NA==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r381561164", "bodyText": "Please add JavaDocs", "author": "tdonohue", "createdAt": "2020-02-19T21:41:31Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionParentCommunityLinkRepository.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.CollectionRest;\n+import org.dspace.app.rest.model.CommunityRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+@Component(CollectionRest.CATEGORY + \".\" + CollectionRest.NAME + \".\" + CollectionRest.PARENT_COMMUNITY)\n+public class CollectionParentCommunityLinkRepository extends AbstractDSpaceRestRepository", "originalCommit": "6447176f02a43210dd8f5044c18cd398c76c15a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d79deb6e1ed9409c8a77a3b390489e335a957dbd", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionParentCommunityLinkRepository.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionParentCommunityLinkRepository.java\nindex 9827c30f6..a7ab6ff01 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionParentCommunityLinkRepository.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionParentCommunityLinkRepository.java\n\n@@ -24,6 +24,9 @@ import org.springframework.data.domain.Pageable;\n import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n import org.springframework.stereotype.Component;\n \n+/**\n+ * LinkRepository for the ParentCommunity object for a Collection\n+ */\n @Component(CollectionRest.CATEGORY + \".\" + CollectionRest.NAME + \".\" + CollectionRest.PARENT_COMMUNITY)\n public class CollectionParentCommunityLinkRepository extends AbstractDSpaceRestRepository\n     implements LinkRestRepository {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2MTM4NA==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r381561384", "bodyText": "Same here, JavaDocs for this method please", "author": "tdonohue", "createdAt": "2020-02-19T21:42:00Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionParentCommunityLinkRepository.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.CollectionRest;\n+import org.dspace.app.rest.model.CommunityRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+@Component(CollectionRest.CATEGORY + \".\" + CollectionRest.NAME + \".\" + CollectionRest.PARENT_COMMUNITY)\n+public class CollectionParentCommunityLinkRepository extends AbstractDSpaceRestRepository\n+    implements LinkRestRepository {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    public CommunityRest getParentCommunity(@Nullable HttpServletRequest httpServletRequest,", "originalCommit": "6447176f02a43210dd8f5044c18cd398c76c15a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d79deb6e1ed9409c8a77a3b390489e335a957dbd", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionParentCommunityLinkRepository.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionParentCommunityLinkRepository.java\nindex 9827c30f6..a7ab6ff01 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionParentCommunityLinkRepository.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionParentCommunityLinkRepository.java\n\n@@ -24,6 +24,9 @@ import org.springframework.data.domain.Pageable;\n import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n import org.springframework.stereotype.Component;\n \n+/**\n+ * LinkRepository for the ParentCommunity object for a Collection\n+ */\n @Component(CollectionRest.CATEGORY + \".\" + CollectionRest.NAME + \".\" + CollectionRest.PARENT_COMMUNITY)\n public class CollectionParentCommunityLinkRepository extends AbstractDSpaceRestRepository\n     implements LinkRestRepository {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2MjMwNw==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r381562307", "bodyText": "Again, Javadocs needed for this Class and for the getParentCommunity method below.", "author": "tdonohue", "createdAt": "2020-02-19T21:43:50Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunityParentCommunityLinkRepository.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.CommunityRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.content.Community;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+@Component(CommunityRest.CATEGORY + \".\" + CommunityRest.NAME + \".\" + CommunityRest.PARENT_COMMUNITY)\n+public class CommunityParentCommunityLinkRepository extends AbstractDSpaceRestRepository", "originalCommit": "6447176f02a43210dd8f5044c18cd398c76c15a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d79deb6e1ed9409c8a77a3b390489e335a957dbd", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunityParentCommunityLinkRepository.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunityParentCommunityLinkRepository.java\nindex 088968af3..def2c4a7d 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunityParentCommunityLinkRepository.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunityParentCommunityLinkRepository.java\n\n@@ -22,6 +22,9 @@ import org.springframework.data.domain.Pageable;\n import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n import org.springframework.stereotype.Component;\n \n+/**\n+ * LinkRepository for the ParentCommunity object for a Community\n+ */\n @Component(CommunityRest.CATEGORY + \".\" + CommunityRest.NAME + \".\" + CommunityRest.PARENT_COMMUNITY)\n public class CommunityParentCommunityLinkRepository extends AbstractDSpaceRestRepository\n     implements LinkRestRepository {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA4OTg4Nw==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r382089887", "bodyText": "why are we parsing the json instead than use the existing Matcher? this also apply to all the other tests", "author": "abollini", "createdAt": "2020-02-20T15:53:03Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.junit.Assert.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    Community communityA;\n+    Community communityB;\n+    Community communityAA;\n+    Community communityAB;\n+\n+    Collection col1;\n+    Collection col2;\n+    Collection col3;\n+\n+    Item itemX;\n+    Item itemY;\n+    Item itemZ;\n+\n+\n+    @Before\n+    public void setup() throws SQLException, AuthorizeException {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and one collection.\n+        communityA = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityA\")\n+                                     .build();\n+        communityB = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityB\")\n+                                     .build();\n+        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community\")\n+                                      .build();\n+        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community Two\")\n+                                      .build();\n+        col1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n+        col2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n+        col3 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n+        communityService.addCollection(context, communityAB, col2);\n+\n+\n+        itemX = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        itemY = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+        collectionService.addItem(context, col2, itemY);\n+        itemZ = ItemBuilder.createItem(context, col2)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void itemXOwningCollectionTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token).perform(get(\"/api/core/items/\" + itemX.getID() + \"/owningCollection\"))\n+                                              .andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String collectionUuidString = String.valueOf(map.get(\"uuid\"));\n+        String collectionName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/collections/\" + col1.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCollectionName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(collectionName, equalTo(actualCollectionName));", "originalCommit": "6447176f02a43210dd8f5044c18cd398c76c15a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2MjQzNg==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r382262436", "bodyText": "Good point, yes there is a org.dspace.app.rest.matcher.CollectionMatcher which can be used to compare JSON results against a known set of values.  There's some good examples in the CollectionRestRepositoryIT.\nIn fact, all the tests in this IT should likely be updated to use either CollectionMatcher or CommunityMatcher.  (and those two matchers could be updated with new comparison methods as needed).  I had completely overlooked that in this PR.", "author": "tdonohue", "createdAt": "2020-02-20T21:16:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA4OTg4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIwNTM1NA==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r385205354", "bodyText": "this has been addressed", "author": "abollini", "createdAt": "2020-02-27T16:03:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA4OTg4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c1d7edafbe88f46e23f088bdc01538a1f3fc5f37", "chunk": "diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java\nindex c17da708d..b2dac6f08 100644\n--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java\n+++ b/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java\n\n@@ -7,19 +7,19 @@\n  */\n package org.dspace.app.rest;\n \n-import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.CoreMatchers.not;\n-import static org.junit.Assert.assertThat;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n import java.sql.SQLException;\n-import java.util.Map;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n import org.dspace.app.rest.builder.CollectionBuilder;\n import org.dspace.app.rest.builder.CommunityBuilder;\n import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.matcher.CollectionMatcher;\n+import org.dspace.app.rest.matcher.CommunityMatcher;\n import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n import org.dspace.authorize.AuthorizeException;\n import org.dspace.content.Collection;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwODQxMQ==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r382108411", "bodyText": "I don't see any value in adding a more test for AB as this is the same test data category than AA", "author": "abollini", "createdAt": "2020-02-20T16:22:06Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.junit.Assert.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    Community communityA;\n+    Community communityB;\n+    Community communityAA;\n+    Community communityAB;\n+\n+    Collection col1;\n+    Collection col2;\n+    Collection col3;\n+\n+    Item itemX;\n+    Item itemY;\n+    Item itemZ;\n+\n+\n+    @Before\n+    public void setup() throws SQLException, AuthorizeException {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and one collection.\n+        communityA = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityA\")\n+                                     .build();\n+        communityB = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityB\")\n+                                     .build();\n+        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community\")\n+                                      .build();\n+        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community Two\")\n+                                      .build();\n+        col1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n+        col2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n+        col3 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n+        communityService.addCollection(context, communityAB, col2);\n+\n+\n+        itemX = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        itemY = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+        collectionService.addItem(context, col2, itemY);\n+        itemZ = ItemBuilder.createItem(context, col2)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void itemXOwningCollectionTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token).perform(get(\"/api/core/items/\" + itemX.getID() + \"/owningCollection\"))\n+                                              .andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String collectionUuidString = String.valueOf(map.get(\"uuid\"));\n+        String collectionName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/collections/\" + col1.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCollectionName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(collectionName, equalTo(actualCollectionName));\n+        assertThat(collectionUuidString, equalTo(String.valueOf(col1.getID())));\n+        assertThat(collectionUuidString, not(String.valueOf(col2.getID())));\n+\n+    }\n+\n+    @Test\n+    public void itemYOwningCollectionTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token).perform(get(\"/api/core/items/\" + itemY.getID() + \"/owningCollection\"))\n+                                              .andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String collectionUuidString = String.valueOf(map.get(\"uuid\"));\n+        String collectionName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/collections/\" + col1.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCollectionName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(collectionName, equalTo(actualCollectionName));\n+        assertThat(collectionUuidString, equalTo(String.valueOf(col1.getID())));\n+        assertThat(collectionUuidString, not(String.valueOf(col2.getID())));\n+\n+    }\n+\n+    @Test\n+    public void itemZOwningCollectionTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token).perform(get(\"/api/core/items/\" + itemZ.getID() + \"/owningCollection\"))\n+                                              .andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String collectionUuidString = String.valueOf(map.get(\"uuid\"));\n+        String collectionName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/collections/\" + col2.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCollectionName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(collectionName, equalTo(actualCollectionName));\n+        assertThat(collectionUuidString, equalTo(String.valueOf(col2.getID())));\n+        assertThat(collectionUuidString, not(String.valueOf(col1.getID())));\n+\n+    }\n+\n+    @Test\n+    public void col1ParentCommunityTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token)\n+            .perform(get(\"/api/core/collections/\" + col1.getID() + \"/parentCommunity\")).andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String communityUuidString = String.valueOf(map.get(\"uuid\"));\n+        String communityName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/communities/\" + communityAA.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCommunityName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(communityName, equalTo(actualCommunityName));\n+        assertThat(communityUuidString, equalTo(String.valueOf(communityAA.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityA.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityAB.getID())));\n+\n+    }\n+\n+    @Test\n+    public void col2ParentCommunityTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token)\n+            .perform(get(\"/api/core/collections/\" + col2.getID() + \"/parentCommunity\")).andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String communityUuidString = String.valueOf(map.get(\"uuid\"));\n+        String communityName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/communities/\" + communityAA.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCommunityName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(communityName, equalTo(actualCommunityName));\n+        assertThat(communityUuidString, equalTo(String.valueOf(communityAA.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityA.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityAB.getID())));\n+\n+    }\n+\n+    @Test\n+    public void col3ParentCommunityTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token)\n+            .perform(get(\"/api/core/collections/\" + col3.getID() + \"/parentCommunity\")).andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String communityUuidString = String.valueOf(map.get(\"uuid\"));\n+        String communityName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/communities/\" + communityAB.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCommunityName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(communityName, equalTo(actualCommunityName));\n+        assertThat(communityUuidString, equalTo(String.valueOf(communityAB.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityA.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityAA.getID())));\n+\n+    }\n+\n+    @Test\n+    public void comAAParentCommunityTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token)\n+            .perform(get(\"/api/core/communities/\" + communityAA.getID() + \"/parentCommunity\")).andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String communityUuidString = String.valueOf(map.get(\"uuid\"));\n+        String communityName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/communities/\" + communityA.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCommunityName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(communityName, equalTo(actualCommunityName));\n+        assertThat(communityUuidString, equalTo(String.valueOf(communityA.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityB.getID())));\n+\n+    }\n+\n+\n+    @Test\n+    public void comABParentCommunityTest() throws Exception {", "originalCommit": "6447176f02a43210dd8f5044c18cd398c76c15a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c1d7edafbe88f46e23f088bdc01538a1f3fc5f37", "chunk": "diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java\nindex c17da708d..b2dac6f08 100644\n--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java\n+++ b/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java\n\n@@ -7,19 +7,19 @@\n  */\n package org.dspace.app.rest;\n \n-import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.CoreMatchers.not;\n-import static org.junit.Assert.assertThat;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n import java.sql.SQLException;\n-import java.util.Map;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n import org.dspace.app.rest.builder.CollectionBuilder;\n import org.dspace.app.rest.builder.CommunityBuilder;\n import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.matcher.CollectionMatcher;\n+import org.dspace.app.rest.matcher.CommunityMatcher;\n import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n import org.dspace.authorize.AuthorizeException;\n import org.dspace.content.Collection;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMDI2NQ==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r382110265", "bodyText": "we can avoid to retrieve this value from the REST, the findOne endpoint has already test in the specific IT class. Doing it again here will only slow our test", "author": "abollini", "createdAt": "2020-02-20T16:25:03Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.junit.Assert.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    Community communityA;\n+    Community communityB;\n+    Community communityAA;\n+    Community communityAB;\n+\n+    Collection col1;\n+    Collection col2;\n+    Collection col3;\n+\n+    Item itemX;\n+    Item itemY;\n+    Item itemZ;\n+\n+\n+    @Before\n+    public void setup() throws SQLException, AuthorizeException {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and one collection.\n+        communityA = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityA\")\n+                                     .build();\n+        communityB = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityB\")\n+                                     .build();\n+        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community\")\n+                                      .build();\n+        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community Two\")\n+                                      .build();\n+        col1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n+        col2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n+        col3 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n+        communityService.addCollection(context, communityAB, col2);\n+\n+\n+        itemX = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        itemY = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+        collectionService.addItem(context, col2, itemY);\n+        itemZ = ItemBuilder.createItem(context, col2)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void itemXOwningCollectionTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token).perform(get(\"/api/core/items/\" + itemX.getID() + \"/owningCollection\"))\n+                                              .andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String collectionUuidString = String.valueOf(map.get(\"uuid\"));\n+        String collectionName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/collections/\" + col1.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCollectionName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(collectionName, equalTo(actualCollectionName));\n+        assertThat(collectionUuidString, equalTo(String.valueOf(col1.getID())));\n+        assertThat(collectionUuidString, not(String.valueOf(col2.getID())));\n+\n+    }\n+\n+    @Test\n+    public void itemYOwningCollectionTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token).perform(get(\"/api/core/items/\" + itemY.getID() + \"/owningCollection\"))\n+                                              .andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String collectionUuidString = String.valueOf(map.get(\"uuid\"));\n+        String collectionName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/collections/\" + col1.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCollectionName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(collectionName, equalTo(actualCollectionName));\n+        assertThat(collectionUuidString, equalTo(String.valueOf(col1.getID())));\n+        assertThat(collectionUuidString, not(String.valueOf(col2.getID())));\n+\n+    }\n+\n+    @Test\n+    public void itemZOwningCollectionTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token).perform(get(\"/api/core/items/\" + itemZ.getID() + \"/owningCollection\"))\n+                                              .andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String collectionUuidString = String.valueOf(map.get(\"uuid\"));\n+        String collectionName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/collections/\" + col2.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCollectionName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(collectionName, equalTo(actualCollectionName));\n+        assertThat(collectionUuidString, equalTo(String.valueOf(col2.getID())));\n+        assertThat(collectionUuidString, not(String.valueOf(col1.getID())));\n+\n+    }\n+\n+    @Test\n+    public void col1ParentCommunityTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token)\n+            .perform(get(\"/api/core/collections/\" + col1.getID() + \"/parentCommunity\")).andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String communityUuidString = String.valueOf(map.get(\"uuid\"));\n+        String communityName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/communities/\" + communityAA.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCommunityName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(communityName, equalTo(actualCommunityName));\n+        assertThat(communityUuidString, equalTo(String.valueOf(communityAA.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityA.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityAB.getID())));\n+\n+    }\n+\n+    @Test\n+    public void col2ParentCommunityTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token)\n+            .perform(get(\"/api/core/collections/\" + col2.getID() + \"/parentCommunity\")).andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String communityUuidString = String.valueOf(map.get(\"uuid\"));\n+        String communityName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/communities/\" + communityAA.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCommunityName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(communityName, equalTo(actualCommunityName));\n+        assertThat(communityUuidString, equalTo(String.valueOf(communityAA.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityA.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityAB.getID())));\n+\n+    }\n+\n+    @Test\n+    public void col3ParentCommunityTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token)\n+            .perform(get(\"/api/core/collections/\" + col3.getID() + \"/parentCommunity\")).andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String communityUuidString = String.valueOf(map.get(\"uuid\"));\n+        String communityName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/communities/\" + communityAB.getID())).andReturn();", "originalCommit": "6447176f02a43210dd8f5044c18cd398c76c15a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c1d7edafbe88f46e23f088bdc01538a1f3fc5f37", "chunk": "diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java\nindex c17da708d..b2dac6f08 100644\n--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java\n+++ b/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java\n\n@@ -7,19 +7,19 @@\n  */\n package org.dspace.app.rest;\n \n-import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.CoreMatchers.not;\n-import static org.junit.Assert.assertThat;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n import java.sql.SQLException;\n-import java.util.Map;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n import org.dspace.app.rest.builder.CollectionBuilder;\n import org.dspace.app.rest.builder.CommunityBuilder;\n import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.matcher.CollectionMatcher;\n+import org.dspace.app.rest.matcher.CommunityMatcher;\n import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n import org.dspace.authorize.AuthorizeException;\n import org.dspace.content.Collection;\n"}}, {"oid": "d79deb6e1ed9409c8a77a3b390489e335a957dbd", "url": "https://github.com/DSpace/DSpace/commit/d79deb6e1ed9409c8a77a3b390489e335a957dbd", "message": "[DS-3532] added javadoc to the linkRestRepositories for ParentCommunity Linking", "committedDate": "2020-02-21T07:58:38Z", "type": "commit"}, {"oid": "c1d7edafbe88f46e23f088bdc01538a1f3fc5f37", "url": "https://github.com/DSpace/DSpace/commit/c1d7edafbe88f46e23f088bdc01538a1f3fc5f37", "message": "[Task 68945] processed feedback on breadcrumbs ITs", "committedDate": "2020-02-25T10:18:08Z", "type": "commit"}, {"oid": "b9636221917c2c47c8cd38642e42878ee6e9ef93", "url": "https://github.com/DSpace/DSpace/commit/b9636221917c2c47c8cd38642e42878ee6e9ef93", "message": "Merge remote-tracking branch 'dspace/master' into w2p-68607_add-link-to-parent-community", "committedDate": "2020-02-25T10:19:25Z", "type": "commit"}, {"oid": "06f5199ec7e5bd36b84349e2ac22ad286356c613", "url": "https://github.com/DSpace/DSpace/commit/06f5199ec7e5bd36b84349e2ac22ad286356c613", "message": "Re-adding javadoc to the CollectionParentCommunityLinkRepository", "committedDate": "2020-02-25T10:38:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxODE4Nw==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r383918187", "bodyText": "we should find a better name for this IT class as it also include test related to items. Should be TraverseCommunityCollectionItemParent ? mabye a sentence as javadoc explaining that could be also useful", "author": "abollini", "createdAt": "2020-02-25T14:38:28Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.matcher.CollectionMatcher;\n+import org.dspace.app.rest.matcher.CommunityMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {", "originalCommit": "06f5199ec7e5bd36b84349e2ac22ad286356c613", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "abf82a3f465464a7b52a9dc107406351709464c5", "chunk": "diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java\ndeleted file mode 100644\nindex b2dac6f08..000000000\n--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java\n+++ /dev/null\n\n@@ -1,218 +0,0 @@\n-/**\n- * The contents of this file are subject to the license and copyright\n- * detailed in the LICENSE and NOTICE files at the root of the source\n- * tree and available online at\n- *\n- * http://www.dspace.org/license/\n- */\n-package org.dspace.app.rest;\n-\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.hamcrest.CoreMatchers.not;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n-\n-import java.sql.SQLException;\n-\n-import org.dspace.app.rest.builder.CollectionBuilder;\n-import org.dspace.app.rest.builder.CommunityBuilder;\n-import org.dspace.app.rest.builder.ItemBuilder;\n-import org.dspace.app.rest.matcher.CollectionMatcher;\n-import org.dspace.app.rest.matcher.CommunityMatcher;\n-import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n-import org.dspace.authorize.AuthorizeException;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.Item;\n-import org.dspace.content.service.CollectionService;\n-import org.dspace.content.service.CommunityService;\n-import org.hamcrest.Matchers;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n-\n-    @Autowired\n-    private CollectionService collectionService;\n-\n-    @Autowired\n-    private CommunityService communityService;\n-\n-    Community communityA;\n-    Community communityB;\n-    Community communityAA;\n-    Community communityAB;\n-\n-    Collection col1;\n-    Collection col2;\n-    Collection col3;\n-\n-    Item itemX;\n-    Item itemY;\n-    Item itemZ;\n-\n-\n-    @Before\n-    public void setup() throws SQLException, AuthorizeException {\n-        //We turn off the authorization system in order to create the structure as defined below\n-        context.turnOffAuthorisationSystem();\n-        //** GIVEN **\n-        //1. A community-collection structure with one parent community with sub-community and one collection.\n-        communityA = CommunityBuilder.createCommunity(context)\n-                                     .withName(\"Parent CommunityA\")\n-                                     .build();\n-        communityB = CommunityBuilder.createCommunity(context)\n-                                     .withName(\"Parent CommunityB\")\n-                                     .build();\n-        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n-                                      .withName(\"Sub Community\")\n-                                      .build();\n-        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n-                                      .withName(\"Sub Community Two\")\n-                                      .build();\n-        col1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n-        col2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n-        col3 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n-        communityService.addCollection(context, communityAB, col2);\n-\n-\n-        itemX = ItemBuilder.createItem(context, col1)\n-                           .withTitle(\"Public item 1\")\n-                           .withIssueDate(\"2017-10-17\")\n-                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n-                           .withSubject(\"ExtraEntry\")\n-                           .build();\n-\n-        itemY = ItemBuilder.createItem(context, col1)\n-                           .withTitle(\"Public item 1\")\n-                           .withIssueDate(\"2017-10-17\")\n-                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n-                           .withSubject(\"ExtraEntry\")\n-                           .build();\n-        collectionService.addItem(context, col2, itemY);\n-        itemZ = ItemBuilder.createItem(context, col2)\n-                           .withTitle(\"Public item 1\")\n-                           .withIssueDate(\"2017-10-17\")\n-                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n-                           .withSubject(\"ExtraEntry\")\n-                           .build();\n-\n-        context.restoreAuthSystemState();\n-    }\n-\n-    @Test\n-    public void itemXOwningCollectionTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/items/\" + itemX.getID() + \"/owningCollection\"))\n-                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n-                                                                                           col1.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", Matchers\n-                            .not(is(CollectionMatcher\n-                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void itemYOwningCollectionTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/items/\" + itemY.getID() + \"/owningCollection\"))\n-                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n-                                                                                           col1.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", Matchers\n-                            .not(is(CollectionMatcher\n-                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n-    }\n-\n-    @Test\n-    public void itemZOwningCollectionTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/items/\" + itemZ.getID() + \"/owningCollection\"))\n-                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col2.getName(), col2.getID(),\n-                                                                                           col2.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", Matchers\n-                            .not(is(CollectionMatcher\n-                                        .matchCollectionEntry(col1.getName(), col1.getID(), col1.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void col1ParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/collections/\" + col1.getID() + \"/parentCommunity\"))\n-                        .andExpect(jsonPath(\"$\", is(CommunityMatcher\n-                                                        .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n-                                                                             communityAA.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityA.getName(),\n-                                                                                             communityA.getID(),\n-                                                                                             communityA.getHandle())))))\n-                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityAB.getName(),\n-                                                                                             communityAB.getID(),\n-                                                                                             communityAB\n-                                                                                                 .getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void col2ParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token)\n-            .perform(get(\"/api/core/collections/\" + col2.getID() + \"/parentCommunity\"))\n-            .andExpect(jsonPath(\"$\", is(CommunityMatcher.matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n-                                                                             communityAA.getHandle()))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityA.getName(), communityA.getID(),\n-                                                                     communityA.getHandle())))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityAB.getName(), communityAB.getID(),\n-                                                                     communityAB.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void col3ParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token)\n-            .perform(get(\"/api/core/collections/\" + col3.getID() + \"/parentCommunity\"))\n-            .andExpect(jsonPath(\"$\", is(CommunityMatcher.matchCommunityEntry(communityAB.getName(), communityAB.getID(),\n-                                                                             communityAB.getHandle()))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityA.getName(), communityA.getID(),\n-                                                                     communityA.getHandle())))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n-                                                                     communityAA.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void comAAParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token)\n-            .perform(get(\"/api/core/communities/\" + communityAA.getID() + \"/parentCommunity\"))\n-            .andExpect(jsonPath(\"$\", Matchers\n-                .is(CommunityMatcher.matchCommunityEntry(communityA.getID(), communityA.getHandle()))))\n-            .andExpect(jsonPath(\"$\", Matchers\n-                .not(Matchers.is(CommunityMatcher.matchCommunityEntry(communityB.getID(), communityB.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void comAParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/communities/\" + communityA.getID() + \"/parentCommunity\"))\n-                        .andExpect(status().isNoContent());\n-\n-\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxOTY4OQ==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r383919689", "bodyText": "can we use the same name convention used for the community to make easier follow the hierarchy? colAA1, colAA2, colAB1", "author": "abollini", "createdAt": "2020-02-25T14:40:52Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.matcher.CollectionMatcher;\n+import org.dspace.app.rest.matcher.CommunityMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    Community communityA;\n+    Community communityB;\n+    Community communityAA;\n+    Community communityAB;\n+\n+    Collection col1;", "originalCommit": "06f5199ec7e5bd36b84349e2ac22ad286356c613", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "abf82a3f465464a7b52a9dc107406351709464c5", "chunk": "diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java\ndeleted file mode 100644\nindex b2dac6f08..000000000\n--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java\n+++ /dev/null\n\n@@ -1,218 +0,0 @@\n-/**\n- * The contents of this file are subject to the license and copyright\n- * detailed in the LICENSE and NOTICE files at the root of the source\n- * tree and available online at\n- *\n- * http://www.dspace.org/license/\n- */\n-package org.dspace.app.rest;\n-\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.hamcrest.CoreMatchers.not;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n-\n-import java.sql.SQLException;\n-\n-import org.dspace.app.rest.builder.CollectionBuilder;\n-import org.dspace.app.rest.builder.CommunityBuilder;\n-import org.dspace.app.rest.builder.ItemBuilder;\n-import org.dspace.app.rest.matcher.CollectionMatcher;\n-import org.dspace.app.rest.matcher.CommunityMatcher;\n-import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n-import org.dspace.authorize.AuthorizeException;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.Item;\n-import org.dspace.content.service.CollectionService;\n-import org.dspace.content.service.CommunityService;\n-import org.hamcrest.Matchers;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n-\n-    @Autowired\n-    private CollectionService collectionService;\n-\n-    @Autowired\n-    private CommunityService communityService;\n-\n-    Community communityA;\n-    Community communityB;\n-    Community communityAA;\n-    Community communityAB;\n-\n-    Collection col1;\n-    Collection col2;\n-    Collection col3;\n-\n-    Item itemX;\n-    Item itemY;\n-    Item itemZ;\n-\n-\n-    @Before\n-    public void setup() throws SQLException, AuthorizeException {\n-        //We turn off the authorization system in order to create the structure as defined below\n-        context.turnOffAuthorisationSystem();\n-        //** GIVEN **\n-        //1. A community-collection structure with one parent community with sub-community and one collection.\n-        communityA = CommunityBuilder.createCommunity(context)\n-                                     .withName(\"Parent CommunityA\")\n-                                     .build();\n-        communityB = CommunityBuilder.createCommunity(context)\n-                                     .withName(\"Parent CommunityB\")\n-                                     .build();\n-        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n-                                      .withName(\"Sub Community\")\n-                                      .build();\n-        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n-                                      .withName(\"Sub Community Two\")\n-                                      .build();\n-        col1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n-        col2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n-        col3 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n-        communityService.addCollection(context, communityAB, col2);\n-\n-\n-        itemX = ItemBuilder.createItem(context, col1)\n-                           .withTitle(\"Public item 1\")\n-                           .withIssueDate(\"2017-10-17\")\n-                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n-                           .withSubject(\"ExtraEntry\")\n-                           .build();\n-\n-        itemY = ItemBuilder.createItem(context, col1)\n-                           .withTitle(\"Public item 1\")\n-                           .withIssueDate(\"2017-10-17\")\n-                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n-                           .withSubject(\"ExtraEntry\")\n-                           .build();\n-        collectionService.addItem(context, col2, itemY);\n-        itemZ = ItemBuilder.createItem(context, col2)\n-                           .withTitle(\"Public item 1\")\n-                           .withIssueDate(\"2017-10-17\")\n-                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n-                           .withSubject(\"ExtraEntry\")\n-                           .build();\n-\n-        context.restoreAuthSystemState();\n-    }\n-\n-    @Test\n-    public void itemXOwningCollectionTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/items/\" + itemX.getID() + \"/owningCollection\"))\n-                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n-                                                                                           col1.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", Matchers\n-                            .not(is(CollectionMatcher\n-                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void itemYOwningCollectionTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/items/\" + itemY.getID() + \"/owningCollection\"))\n-                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n-                                                                                           col1.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", Matchers\n-                            .not(is(CollectionMatcher\n-                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n-    }\n-\n-    @Test\n-    public void itemZOwningCollectionTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/items/\" + itemZ.getID() + \"/owningCollection\"))\n-                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col2.getName(), col2.getID(),\n-                                                                                           col2.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", Matchers\n-                            .not(is(CollectionMatcher\n-                                        .matchCollectionEntry(col1.getName(), col1.getID(), col1.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void col1ParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/collections/\" + col1.getID() + \"/parentCommunity\"))\n-                        .andExpect(jsonPath(\"$\", is(CommunityMatcher\n-                                                        .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n-                                                                             communityAA.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityA.getName(),\n-                                                                                             communityA.getID(),\n-                                                                                             communityA.getHandle())))))\n-                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityAB.getName(),\n-                                                                                             communityAB.getID(),\n-                                                                                             communityAB\n-                                                                                                 .getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void col2ParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token)\n-            .perform(get(\"/api/core/collections/\" + col2.getID() + \"/parentCommunity\"))\n-            .andExpect(jsonPath(\"$\", is(CommunityMatcher.matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n-                                                                             communityAA.getHandle()))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityA.getName(), communityA.getID(),\n-                                                                     communityA.getHandle())))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityAB.getName(), communityAB.getID(),\n-                                                                     communityAB.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void col3ParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token)\n-            .perform(get(\"/api/core/collections/\" + col3.getID() + \"/parentCommunity\"))\n-            .andExpect(jsonPath(\"$\", is(CommunityMatcher.matchCommunityEntry(communityAB.getName(), communityAB.getID(),\n-                                                                             communityAB.getHandle()))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityA.getName(), communityA.getID(),\n-                                                                     communityA.getHandle())))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n-                                                                     communityAA.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void comAAParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token)\n-            .perform(get(\"/api/core/communities/\" + communityAA.getID() + \"/parentCommunity\"))\n-            .andExpect(jsonPath(\"$\", Matchers\n-                .is(CommunityMatcher.matchCommunityEntry(communityA.getID(), communityA.getHandle()))))\n-            .andExpect(jsonPath(\"$\", Matchers\n-                .not(Matchers.is(CommunityMatcher.matchCommunityEntry(communityB.getID(), communityB.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void comAParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/communities/\" + communityA.getID() + \"/parentCommunity\"))\n-                        .andExpect(status().isNoContent());\n-\n-\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyMDQxNQ==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r383920415", "bodyText": "as above, maybe itemAA, itemAAmappedInAB, itemAB", "author": "abollini", "createdAt": "2020-02-25T14:41:58Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.matcher.CollectionMatcher;\n+import org.dspace.app.rest.matcher.CommunityMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    Community communityA;\n+    Community communityB;\n+    Community communityAA;\n+    Community communityAB;\n+\n+    Collection col1;\n+    Collection col2;\n+    Collection col3;\n+\n+    Item itemX;", "originalCommit": "06f5199ec7e5bd36b84349e2ac22ad286356c613", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "abf82a3f465464a7b52a9dc107406351709464c5", "chunk": "diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java\ndeleted file mode 100644\nindex b2dac6f08..000000000\n--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java\n+++ /dev/null\n\n@@ -1,218 +0,0 @@\n-/**\n- * The contents of this file are subject to the license and copyright\n- * detailed in the LICENSE and NOTICE files at the root of the source\n- * tree and available online at\n- *\n- * http://www.dspace.org/license/\n- */\n-package org.dspace.app.rest;\n-\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.hamcrest.CoreMatchers.not;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n-\n-import java.sql.SQLException;\n-\n-import org.dspace.app.rest.builder.CollectionBuilder;\n-import org.dspace.app.rest.builder.CommunityBuilder;\n-import org.dspace.app.rest.builder.ItemBuilder;\n-import org.dspace.app.rest.matcher.CollectionMatcher;\n-import org.dspace.app.rest.matcher.CommunityMatcher;\n-import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n-import org.dspace.authorize.AuthorizeException;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.Item;\n-import org.dspace.content.service.CollectionService;\n-import org.dspace.content.service.CommunityService;\n-import org.hamcrest.Matchers;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n-\n-    @Autowired\n-    private CollectionService collectionService;\n-\n-    @Autowired\n-    private CommunityService communityService;\n-\n-    Community communityA;\n-    Community communityB;\n-    Community communityAA;\n-    Community communityAB;\n-\n-    Collection col1;\n-    Collection col2;\n-    Collection col3;\n-\n-    Item itemX;\n-    Item itemY;\n-    Item itemZ;\n-\n-\n-    @Before\n-    public void setup() throws SQLException, AuthorizeException {\n-        //We turn off the authorization system in order to create the structure as defined below\n-        context.turnOffAuthorisationSystem();\n-        //** GIVEN **\n-        //1. A community-collection structure with one parent community with sub-community and one collection.\n-        communityA = CommunityBuilder.createCommunity(context)\n-                                     .withName(\"Parent CommunityA\")\n-                                     .build();\n-        communityB = CommunityBuilder.createCommunity(context)\n-                                     .withName(\"Parent CommunityB\")\n-                                     .build();\n-        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n-                                      .withName(\"Sub Community\")\n-                                      .build();\n-        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n-                                      .withName(\"Sub Community Two\")\n-                                      .build();\n-        col1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n-        col2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n-        col3 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n-        communityService.addCollection(context, communityAB, col2);\n-\n-\n-        itemX = ItemBuilder.createItem(context, col1)\n-                           .withTitle(\"Public item 1\")\n-                           .withIssueDate(\"2017-10-17\")\n-                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n-                           .withSubject(\"ExtraEntry\")\n-                           .build();\n-\n-        itemY = ItemBuilder.createItem(context, col1)\n-                           .withTitle(\"Public item 1\")\n-                           .withIssueDate(\"2017-10-17\")\n-                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n-                           .withSubject(\"ExtraEntry\")\n-                           .build();\n-        collectionService.addItem(context, col2, itemY);\n-        itemZ = ItemBuilder.createItem(context, col2)\n-                           .withTitle(\"Public item 1\")\n-                           .withIssueDate(\"2017-10-17\")\n-                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n-                           .withSubject(\"ExtraEntry\")\n-                           .build();\n-\n-        context.restoreAuthSystemState();\n-    }\n-\n-    @Test\n-    public void itemXOwningCollectionTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/items/\" + itemX.getID() + \"/owningCollection\"))\n-                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n-                                                                                           col1.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", Matchers\n-                            .not(is(CollectionMatcher\n-                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void itemYOwningCollectionTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/items/\" + itemY.getID() + \"/owningCollection\"))\n-                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n-                                                                                           col1.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", Matchers\n-                            .not(is(CollectionMatcher\n-                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n-    }\n-\n-    @Test\n-    public void itemZOwningCollectionTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/items/\" + itemZ.getID() + \"/owningCollection\"))\n-                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col2.getName(), col2.getID(),\n-                                                                                           col2.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", Matchers\n-                            .not(is(CollectionMatcher\n-                                        .matchCollectionEntry(col1.getName(), col1.getID(), col1.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void col1ParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/collections/\" + col1.getID() + \"/parentCommunity\"))\n-                        .andExpect(jsonPath(\"$\", is(CommunityMatcher\n-                                                        .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n-                                                                             communityAA.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityA.getName(),\n-                                                                                             communityA.getID(),\n-                                                                                             communityA.getHandle())))))\n-                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityAB.getName(),\n-                                                                                             communityAB.getID(),\n-                                                                                             communityAB\n-                                                                                                 .getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void col2ParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token)\n-            .perform(get(\"/api/core/collections/\" + col2.getID() + \"/parentCommunity\"))\n-            .andExpect(jsonPath(\"$\", is(CommunityMatcher.matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n-                                                                             communityAA.getHandle()))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityA.getName(), communityA.getID(),\n-                                                                     communityA.getHandle())))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityAB.getName(), communityAB.getID(),\n-                                                                     communityAB.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void col3ParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token)\n-            .perform(get(\"/api/core/collections/\" + col3.getID() + \"/parentCommunity\"))\n-            .andExpect(jsonPath(\"$\", is(CommunityMatcher.matchCommunityEntry(communityAB.getName(), communityAB.getID(),\n-                                                                             communityAB.getHandle()))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityA.getName(), communityA.getID(),\n-                                                                     communityA.getHandle())))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n-                                                                     communityAA.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void comAAParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token)\n-            .perform(get(\"/api/core/communities/\" + communityAA.getID() + \"/parentCommunity\"))\n-            .andExpect(jsonPath(\"$\", Matchers\n-                .is(CommunityMatcher.matchCommunityEntry(communityA.getID(), communityA.getHandle()))))\n-            .andExpect(jsonPath(\"$\", Matchers\n-                .not(Matchers.is(CommunityMatcher.matchCommunityEntry(communityB.getID(), communityB.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void comAParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/communities/\" + communityA.getID() + \"/parentCommunity\"))\n-                        .andExpect(status().isNoContent());\n-\n-\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyMTE1Nw==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r383921157", "bodyText": "my suggestion is to remove this test as it is functionally equivalent to col1ParentCommunityTest", "author": "abollini", "createdAt": "2020-02-25T14:43:06Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.matcher.CollectionMatcher;\n+import org.dspace.app.rest.matcher.CommunityMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    Community communityA;\n+    Community communityB;\n+    Community communityAA;\n+    Community communityAB;\n+\n+    Collection col1;\n+    Collection col2;\n+    Collection col3;\n+\n+    Item itemX;\n+    Item itemY;\n+    Item itemZ;\n+\n+\n+    @Before\n+    public void setup() throws SQLException, AuthorizeException {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and one collection.\n+        communityA = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityA\")\n+                                     .build();\n+        communityB = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityB\")\n+                                     .build();\n+        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community\")\n+                                      .build();\n+        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community Two\")\n+                                      .build();\n+        col1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n+        col2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n+        col3 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n+        communityService.addCollection(context, communityAB, col2);\n+\n+\n+        itemX = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        itemY = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+        collectionService.addItem(context, col2, itemY);\n+        itemZ = ItemBuilder.createItem(context, col2)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void itemXOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemX.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n+                                                                                           col1.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void itemYOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemY.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n+                                                                                           col1.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n+    }\n+\n+    @Test\n+    public void itemZOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemZ.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col2.getName(), col2.getID(),\n+                                                                                           col2.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(col1.getName(), col1.getID(), col1.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void col1ParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + col1.getID() + \"/parentCommunity\"))\n+                        .andExpect(jsonPath(\"$\", is(CommunityMatcher\n+                                                        .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n+                                                                             communityAA.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityA.getName(),\n+                                                                                             communityA.getID(),\n+                                                                                             communityA.getHandle())))))\n+                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityAB.getName(),\n+                                                                                             communityAB.getID(),\n+                                                                                             communityAB\n+                                                                                                 .getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void col2ParentCommunityTest() throws Exception {", "originalCommit": "06f5199ec7e5bd36b84349e2ac22ad286356c613", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "abf82a3f465464a7b52a9dc107406351709464c5", "chunk": "diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java\ndeleted file mode 100644\nindex b2dac6f08..000000000\n--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java\n+++ /dev/null\n\n@@ -1,218 +0,0 @@\n-/**\n- * The contents of this file are subject to the license and copyright\n- * detailed in the LICENSE and NOTICE files at the root of the source\n- * tree and available online at\n- *\n- * http://www.dspace.org/license/\n- */\n-package org.dspace.app.rest;\n-\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.hamcrest.CoreMatchers.not;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n-\n-import java.sql.SQLException;\n-\n-import org.dspace.app.rest.builder.CollectionBuilder;\n-import org.dspace.app.rest.builder.CommunityBuilder;\n-import org.dspace.app.rest.builder.ItemBuilder;\n-import org.dspace.app.rest.matcher.CollectionMatcher;\n-import org.dspace.app.rest.matcher.CommunityMatcher;\n-import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n-import org.dspace.authorize.AuthorizeException;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.Item;\n-import org.dspace.content.service.CollectionService;\n-import org.dspace.content.service.CommunityService;\n-import org.hamcrest.Matchers;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n-\n-    @Autowired\n-    private CollectionService collectionService;\n-\n-    @Autowired\n-    private CommunityService communityService;\n-\n-    Community communityA;\n-    Community communityB;\n-    Community communityAA;\n-    Community communityAB;\n-\n-    Collection col1;\n-    Collection col2;\n-    Collection col3;\n-\n-    Item itemX;\n-    Item itemY;\n-    Item itemZ;\n-\n-\n-    @Before\n-    public void setup() throws SQLException, AuthorizeException {\n-        //We turn off the authorization system in order to create the structure as defined below\n-        context.turnOffAuthorisationSystem();\n-        //** GIVEN **\n-        //1. A community-collection structure with one parent community with sub-community and one collection.\n-        communityA = CommunityBuilder.createCommunity(context)\n-                                     .withName(\"Parent CommunityA\")\n-                                     .build();\n-        communityB = CommunityBuilder.createCommunity(context)\n-                                     .withName(\"Parent CommunityB\")\n-                                     .build();\n-        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n-                                      .withName(\"Sub Community\")\n-                                      .build();\n-        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n-                                      .withName(\"Sub Community Two\")\n-                                      .build();\n-        col1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n-        col2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n-        col3 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n-        communityService.addCollection(context, communityAB, col2);\n-\n-\n-        itemX = ItemBuilder.createItem(context, col1)\n-                           .withTitle(\"Public item 1\")\n-                           .withIssueDate(\"2017-10-17\")\n-                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n-                           .withSubject(\"ExtraEntry\")\n-                           .build();\n-\n-        itemY = ItemBuilder.createItem(context, col1)\n-                           .withTitle(\"Public item 1\")\n-                           .withIssueDate(\"2017-10-17\")\n-                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n-                           .withSubject(\"ExtraEntry\")\n-                           .build();\n-        collectionService.addItem(context, col2, itemY);\n-        itemZ = ItemBuilder.createItem(context, col2)\n-                           .withTitle(\"Public item 1\")\n-                           .withIssueDate(\"2017-10-17\")\n-                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n-                           .withSubject(\"ExtraEntry\")\n-                           .build();\n-\n-        context.restoreAuthSystemState();\n-    }\n-\n-    @Test\n-    public void itemXOwningCollectionTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/items/\" + itemX.getID() + \"/owningCollection\"))\n-                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n-                                                                                           col1.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", Matchers\n-                            .not(is(CollectionMatcher\n-                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void itemYOwningCollectionTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/items/\" + itemY.getID() + \"/owningCollection\"))\n-                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n-                                                                                           col1.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", Matchers\n-                            .not(is(CollectionMatcher\n-                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n-    }\n-\n-    @Test\n-    public void itemZOwningCollectionTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/items/\" + itemZ.getID() + \"/owningCollection\"))\n-                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col2.getName(), col2.getID(),\n-                                                                                           col2.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", Matchers\n-                            .not(is(CollectionMatcher\n-                                        .matchCollectionEntry(col1.getName(), col1.getID(), col1.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void col1ParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/collections/\" + col1.getID() + \"/parentCommunity\"))\n-                        .andExpect(jsonPath(\"$\", is(CommunityMatcher\n-                                                        .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n-                                                                             communityAA.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityA.getName(),\n-                                                                                             communityA.getID(),\n-                                                                                             communityA.getHandle())))))\n-                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityAB.getName(),\n-                                                                                             communityAB.getID(),\n-                                                                                             communityAB\n-                                                                                                 .getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void col2ParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token)\n-            .perform(get(\"/api/core/collections/\" + col2.getID() + \"/parentCommunity\"))\n-            .andExpect(jsonPath(\"$\", is(CommunityMatcher.matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n-                                                                             communityAA.getHandle()))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityA.getName(), communityA.getID(),\n-                                                                     communityA.getHandle())))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityAB.getName(), communityAB.getID(),\n-                                                                     communityAB.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void col3ParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token)\n-            .perform(get(\"/api/core/collections/\" + col3.getID() + \"/parentCommunity\"))\n-            .andExpect(jsonPath(\"$\", is(CommunityMatcher.matchCommunityEntry(communityAB.getName(), communityAB.getID(),\n-                                                                             communityAB.getHandle()))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityA.getName(), communityA.getID(),\n-                                                                     communityA.getHandle())))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n-                                                                     communityAA.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void comAAParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token)\n-            .perform(get(\"/api/core/communities/\" + communityAA.getID() + \"/parentCommunity\"))\n-            .andExpect(jsonPath(\"$\", Matchers\n-                .is(CommunityMatcher.matchCommunityEntry(communityA.getID(), communityA.getHandle()))))\n-            .andExpect(jsonPath(\"$\", Matchers\n-                .not(Matchers.is(CommunityMatcher.matchCommunityEntry(communityB.getID(), communityB.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void comAParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/communities/\" + communityA.getID() + \"/parentCommunity\"))\n-                        .andExpect(status().isNoContent());\n-\n-\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyMTM3Nw==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r383921377", "bodyText": "my suggestion is to remove this test as it is functionally equivalent to col1ParentCommunityTest", "author": "abollini", "createdAt": "2020-02-25T14:43:26Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.matcher.CollectionMatcher;\n+import org.dspace.app.rest.matcher.CommunityMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    Community communityA;\n+    Community communityB;\n+    Community communityAA;\n+    Community communityAB;\n+\n+    Collection col1;\n+    Collection col2;\n+    Collection col3;\n+\n+    Item itemX;\n+    Item itemY;\n+    Item itemZ;\n+\n+\n+    @Before\n+    public void setup() throws SQLException, AuthorizeException {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and one collection.\n+        communityA = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityA\")\n+                                     .build();\n+        communityB = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityB\")\n+                                     .build();\n+        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community\")\n+                                      .build();\n+        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community Two\")\n+                                      .build();\n+        col1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n+        col2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n+        col3 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n+        communityService.addCollection(context, communityAB, col2);\n+\n+\n+        itemX = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        itemY = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+        collectionService.addItem(context, col2, itemY);\n+        itemZ = ItemBuilder.createItem(context, col2)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void itemXOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemX.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n+                                                                                           col1.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void itemYOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemY.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n+                                                                                           col1.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n+    }\n+\n+    @Test\n+    public void itemZOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemZ.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col2.getName(), col2.getID(),\n+                                                                                           col2.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(col1.getName(), col1.getID(), col1.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void col1ParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + col1.getID() + \"/parentCommunity\"))\n+                        .andExpect(jsonPath(\"$\", is(CommunityMatcher\n+                                                        .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n+                                                                             communityAA.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityA.getName(),\n+                                                                                             communityA.getID(),\n+                                                                                             communityA.getHandle())))))\n+                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityAB.getName(),\n+                                                                                             communityAB.getID(),\n+                                                                                             communityAB\n+                                                                                                 .getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void col2ParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token)\n+            .perform(get(\"/api/core/collections/\" + col2.getID() + \"/parentCommunity\"))\n+            .andExpect(jsonPath(\"$\", is(CommunityMatcher.matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n+                                                                             communityAA.getHandle()))))\n+            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n+                                                .matchCommunityEntry(communityA.getName(), communityA.getID(),\n+                                                                     communityA.getHandle())))))\n+            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n+                                                .matchCommunityEntry(communityAB.getName(), communityAB.getID(),\n+                                                                     communityAB.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void col3ParentCommunityTest() throws Exception {", "originalCommit": "06f5199ec7e5bd36b84349e2ac22ad286356c613", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "abf82a3f465464a7b52a9dc107406351709464c5", "chunk": "diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java\ndeleted file mode 100644\nindex b2dac6f08..000000000\n--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java\n+++ /dev/null\n\n@@ -1,218 +0,0 @@\n-/**\n- * The contents of this file are subject to the license and copyright\n- * detailed in the LICENSE and NOTICE files at the root of the source\n- * tree and available online at\n- *\n- * http://www.dspace.org/license/\n- */\n-package org.dspace.app.rest;\n-\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.hamcrest.CoreMatchers.not;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n-\n-import java.sql.SQLException;\n-\n-import org.dspace.app.rest.builder.CollectionBuilder;\n-import org.dspace.app.rest.builder.CommunityBuilder;\n-import org.dspace.app.rest.builder.ItemBuilder;\n-import org.dspace.app.rest.matcher.CollectionMatcher;\n-import org.dspace.app.rest.matcher.CommunityMatcher;\n-import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n-import org.dspace.authorize.AuthorizeException;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.Item;\n-import org.dspace.content.service.CollectionService;\n-import org.dspace.content.service.CommunityService;\n-import org.hamcrest.Matchers;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n-\n-    @Autowired\n-    private CollectionService collectionService;\n-\n-    @Autowired\n-    private CommunityService communityService;\n-\n-    Community communityA;\n-    Community communityB;\n-    Community communityAA;\n-    Community communityAB;\n-\n-    Collection col1;\n-    Collection col2;\n-    Collection col3;\n-\n-    Item itemX;\n-    Item itemY;\n-    Item itemZ;\n-\n-\n-    @Before\n-    public void setup() throws SQLException, AuthorizeException {\n-        //We turn off the authorization system in order to create the structure as defined below\n-        context.turnOffAuthorisationSystem();\n-        //** GIVEN **\n-        //1. A community-collection structure with one parent community with sub-community and one collection.\n-        communityA = CommunityBuilder.createCommunity(context)\n-                                     .withName(\"Parent CommunityA\")\n-                                     .build();\n-        communityB = CommunityBuilder.createCommunity(context)\n-                                     .withName(\"Parent CommunityB\")\n-                                     .build();\n-        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n-                                      .withName(\"Sub Community\")\n-                                      .build();\n-        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n-                                      .withName(\"Sub Community Two\")\n-                                      .build();\n-        col1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n-        col2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n-        col3 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n-        communityService.addCollection(context, communityAB, col2);\n-\n-\n-        itemX = ItemBuilder.createItem(context, col1)\n-                           .withTitle(\"Public item 1\")\n-                           .withIssueDate(\"2017-10-17\")\n-                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n-                           .withSubject(\"ExtraEntry\")\n-                           .build();\n-\n-        itemY = ItemBuilder.createItem(context, col1)\n-                           .withTitle(\"Public item 1\")\n-                           .withIssueDate(\"2017-10-17\")\n-                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n-                           .withSubject(\"ExtraEntry\")\n-                           .build();\n-        collectionService.addItem(context, col2, itemY);\n-        itemZ = ItemBuilder.createItem(context, col2)\n-                           .withTitle(\"Public item 1\")\n-                           .withIssueDate(\"2017-10-17\")\n-                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n-                           .withSubject(\"ExtraEntry\")\n-                           .build();\n-\n-        context.restoreAuthSystemState();\n-    }\n-\n-    @Test\n-    public void itemXOwningCollectionTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/items/\" + itemX.getID() + \"/owningCollection\"))\n-                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n-                                                                                           col1.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", Matchers\n-                            .not(is(CollectionMatcher\n-                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void itemYOwningCollectionTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/items/\" + itemY.getID() + \"/owningCollection\"))\n-                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n-                                                                                           col1.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", Matchers\n-                            .not(is(CollectionMatcher\n-                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n-    }\n-\n-    @Test\n-    public void itemZOwningCollectionTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/items/\" + itemZ.getID() + \"/owningCollection\"))\n-                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col2.getName(), col2.getID(),\n-                                                                                           col2.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", Matchers\n-                            .not(is(CollectionMatcher\n-                                        .matchCollectionEntry(col1.getName(), col1.getID(), col1.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void col1ParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/collections/\" + col1.getID() + \"/parentCommunity\"))\n-                        .andExpect(jsonPath(\"$\", is(CommunityMatcher\n-                                                        .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n-                                                                             communityAA.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityA.getName(),\n-                                                                                             communityA.getID(),\n-                                                                                             communityA.getHandle())))))\n-                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityAB.getName(),\n-                                                                                             communityAB.getID(),\n-                                                                                             communityAB\n-                                                                                                 .getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void col2ParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token)\n-            .perform(get(\"/api/core/collections/\" + col2.getID() + \"/parentCommunity\"))\n-            .andExpect(jsonPath(\"$\", is(CommunityMatcher.matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n-                                                                             communityAA.getHandle()))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityA.getName(), communityA.getID(),\n-                                                                     communityA.getHandle())))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityAB.getName(), communityAB.getID(),\n-                                                                     communityAB.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void col3ParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token)\n-            .perform(get(\"/api/core/collections/\" + col3.getID() + \"/parentCommunity\"))\n-            .andExpect(jsonPath(\"$\", is(CommunityMatcher.matchCommunityEntry(communityAB.getName(), communityAB.getID(),\n-                                                                             communityAB.getHandle()))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityA.getName(), communityA.getID(),\n-                                                                     communityA.getHandle())))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n-                                                                     communityAA.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void comAAParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token)\n-            .perform(get(\"/api/core/communities/\" + communityAA.getID() + \"/parentCommunity\"))\n-            .andExpect(jsonPath(\"$\", Matchers\n-                .is(CommunityMatcher.matchCommunityEntry(communityA.getID(), communityA.getHandle()))))\n-            .andExpect(jsonPath(\"$\", Matchers\n-                .not(Matchers.is(CommunityMatcher.matchCommunityEntry(communityB.getID(), communityB.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void comAParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/communities/\" + communityA.getID() + \"/parentCommunity\"))\n-                        .andExpect(status().isNoContent());\n-\n-\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyMzU1Nw==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r383923557", "bodyText": "we need all the test related to the security and wrong scenarios.\nThe specified item, collection, community\n\ndon't exist, don't make sense (i.e. it is not an uuid) -> (404)\nare not visibile (401, 403)\nthe starting object is visible but the parent is not visible (401, 403)", "author": "abollini", "createdAt": "2020-02-25T14:46:37Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.matcher.CollectionMatcher;\n+import org.dspace.app.rest.matcher.CommunityMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    Community communityA;\n+    Community communityB;\n+    Community communityAA;\n+    Community communityAB;\n+\n+    Collection col1;\n+    Collection col2;\n+    Collection col3;\n+\n+    Item itemX;\n+    Item itemY;\n+    Item itemZ;\n+\n+\n+    @Before\n+    public void setup() throws SQLException, AuthorizeException {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and one collection.\n+        communityA = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityA\")\n+                                     .build();\n+        communityB = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityB\")\n+                                     .build();\n+        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community\")\n+                                      .build();\n+        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community Two\")\n+                                      .build();\n+        col1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n+        col2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n+        col3 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n+        communityService.addCollection(context, communityAB, col2);\n+\n+\n+        itemX = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        itemY = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+        collectionService.addItem(context, col2, itemY);\n+        itemZ = ItemBuilder.createItem(context, col2)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void itemXOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemX.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n+                                                                                           col1.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void itemYOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemY.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n+                                                                                           col1.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n+    }\n+\n+    @Test\n+    public void itemZOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemZ.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col2.getName(), col2.getID(),\n+                                                                                           col2.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(col1.getName(), col1.getID(), col1.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void col1ParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + col1.getID() + \"/parentCommunity\"))\n+                        .andExpect(jsonPath(\"$\", is(CommunityMatcher\n+                                                        .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n+                                                                             communityAA.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityA.getName(),\n+                                                                                             communityA.getID(),\n+                                                                                             communityA.getHandle())))))\n+                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityAB.getName(),\n+                                                                                             communityAB.getID(),\n+                                                                                             communityAB\n+                                                                                                 .getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void col2ParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token)\n+            .perform(get(\"/api/core/collections/\" + col2.getID() + \"/parentCommunity\"))\n+            .andExpect(jsonPath(\"$\", is(CommunityMatcher.matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n+                                                                             communityAA.getHandle()))))\n+            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n+                                                .matchCommunityEntry(communityA.getName(), communityA.getID(),\n+                                                                     communityA.getHandle())))))\n+            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n+                                                .matchCommunityEntry(communityAB.getName(), communityAB.getID(),\n+                                                                     communityAB.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void col3ParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token)\n+            .perform(get(\"/api/core/collections/\" + col3.getID() + \"/parentCommunity\"))\n+            .andExpect(jsonPath(\"$\", is(CommunityMatcher.matchCommunityEntry(communityAB.getName(), communityAB.getID(),\n+                                                                             communityAB.getHandle()))))\n+            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n+                                                .matchCommunityEntry(communityA.getName(), communityA.getID(),\n+                                                                     communityA.getHandle())))))\n+            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n+                                                .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n+                                                                     communityAA.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void comAAParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token)\n+            .perform(get(\"/api/core/communities/\" + communityAA.getID() + \"/parentCommunity\"))\n+            .andExpect(jsonPath(\"$\", Matchers\n+                .is(CommunityMatcher.matchCommunityEntry(communityA.getID(), communityA.getHandle()))))\n+            .andExpect(jsonPath(\"$\", Matchers\n+                .not(Matchers.is(CommunityMatcher.matchCommunityEntry(communityB.getID(), communityB.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void comAParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/communities/\" + communityA.getID() + \"/parentCommunity\"))\n+                        .andExpect(status().isNoContent());\n+\n+\n+    }\n+", "originalCommit": "06f5199ec7e5bd36b84349e2ac22ad286356c613", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzNzk5OQ==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r383937999", "bodyText": "@abollini : I'm not sure the 404 test is needed, as we already have corresponding 404 tests in ITs for Communities, Collections & Items. How can a 404 test here add anything different?\nI do agree that the other two types of tests would be worth adding, though we could consider doing so as a separate security ticket (as you noted), provided that we create a ticket in JIRA.", "author": "tdonohue", "createdAt": "2020-02-25T15:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyMzU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0MTA0OQ==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r383941049", "bodyText": "obvious test are useful for the future because they look obvious now that we know the implementation but if we go trough a refactoring the implementation could be completely different and break something that we expect to just work. So I always recommend to make black box test, indeed we should follow a TDD approach that would imply that.\nAnyway, I'm not completely sure that it will return 404 right now, maybe we can get a NPE o ClassCastException so a 500 see https://github.com/DSpace/DSpace/pull/2673/files#diff-59c10eaa99f8fbc2322484a9bacff5afR51 (again I'm just guessing but it is wrong to look to the communityservice to get the answer, we need to have test to proof it)", "author": "abollini", "createdAt": "2020-02-25T15:12:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyMzU1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxMTQ2Ng==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r385211466", "bodyText": "it has been addressed", "author": "abollini", "createdAt": "2020-02-27T16:12:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyMzU1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "abf82a3f465464a7b52a9dc107406351709464c5", "chunk": "diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java\ndeleted file mode 100644\nindex b2dac6f08..000000000\n--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java\n+++ /dev/null\n\n@@ -1,218 +0,0 @@\n-/**\n- * The contents of this file are subject to the license and copyright\n- * detailed in the LICENSE and NOTICE files at the root of the source\n- * tree and available online at\n- *\n- * http://www.dspace.org/license/\n- */\n-package org.dspace.app.rest;\n-\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.hamcrest.CoreMatchers.not;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n-\n-import java.sql.SQLException;\n-\n-import org.dspace.app.rest.builder.CollectionBuilder;\n-import org.dspace.app.rest.builder.CommunityBuilder;\n-import org.dspace.app.rest.builder.ItemBuilder;\n-import org.dspace.app.rest.matcher.CollectionMatcher;\n-import org.dspace.app.rest.matcher.CommunityMatcher;\n-import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n-import org.dspace.authorize.AuthorizeException;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.Item;\n-import org.dspace.content.service.CollectionService;\n-import org.dspace.content.service.CommunityService;\n-import org.hamcrest.Matchers;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n-\n-    @Autowired\n-    private CollectionService collectionService;\n-\n-    @Autowired\n-    private CommunityService communityService;\n-\n-    Community communityA;\n-    Community communityB;\n-    Community communityAA;\n-    Community communityAB;\n-\n-    Collection col1;\n-    Collection col2;\n-    Collection col3;\n-\n-    Item itemX;\n-    Item itemY;\n-    Item itemZ;\n-\n-\n-    @Before\n-    public void setup() throws SQLException, AuthorizeException {\n-        //We turn off the authorization system in order to create the structure as defined below\n-        context.turnOffAuthorisationSystem();\n-        //** GIVEN **\n-        //1. A community-collection structure with one parent community with sub-community and one collection.\n-        communityA = CommunityBuilder.createCommunity(context)\n-                                     .withName(\"Parent CommunityA\")\n-                                     .build();\n-        communityB = CommunityBuilder.createCommunity(context)\n-                                     .withName(\"Parent CommunityB\")\n-                                     .build();\n-        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n-                                      .withName(\"Sub Community\")\n-                                      .build();\n-        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n-                                      .withName(\"Sub Community Two\")\n-                                      .build();\n-        col1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n-        col2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n-        col3 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n-        communityService.addCollection(context, communityAB, col2);\n-\n-\n-        itemX = ItemBuilder.createItem(context, col1)\n-                           .withTitle(\"Public item 1\")\n-                           .withIssueDate(\"2017-10-17\")\n-                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n-                           .withSubject(\"ExtraEntry\")\n-                           .build();\n-\n-        itemY = ItemBuilder.createItem(context, col1)\n-                           .withTitle(\"Public item 1\")\n-                           .withIssueDate(\"2017-10-17\")\n-                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n-                           .withSubject(\"ExtraEntry\")\n-                           .build();\n-        collectionService.addItem(context, col2, itemY);\n-        itemZ = ItemBuilder.createItem(context, col2)\n-                           .withTitle(\"Public item 1\")\n-                           .withIssueDate(\"2017-10-17\")\n-                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n-                           .withSubject(\"ExtraEntry\")\n-                           .build();\n-\n-        context.restoreAuthSystemState();\n-    }\n-\n-    @Test\n-    public void itemXOwningCollectionTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/items/\" + itemX.getID() + \"/owningCollection\"))\n-                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n-                                                                                           col1.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", Matchers\n-                            .not(is(CollectionMatcher\n-                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void itemYOwningCollectionTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/items/\" + itemY.getID() + \"/owningCollection\"))\n-                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n-                                                                                           col1.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", Matchers\n-                            .not(is(CollectionMatcher\n-                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n-    }\n-\n-    @Test\n-    public void itemZOwningCollectionTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/items/\" + itemZ.getID() + \"/owningCollection\"))\n-                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col2.getName(), col2.getID(),\n-                                                                                           col2.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", Matchers\n-                            .not(is(CollectionMatcher\n-                                        .matchCollectionEntry(col1.getName(), col1.getID(), col1.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void col1ParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/collections/\" + col1.getID() + \"/parentCommunity\"))\n-                        .andExpect(jsonPath(\"$\", is(CommunityMatcher\n-                                                        .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n-                                                                             communityAA.getHandle()))))\n-                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityA.getName(),\n-                                                                                             communityA.getID(),\n-                                                                                             communityA.getHandle())))))\n-                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityAB.getName(),\n-                                                                                             communityAB.getID(),\n-                                                                                             communityAB\n-                                                                                                 .getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void col2ParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token)\n-            .perform(get(\"/api/core/collections/\" + col2.getID() + \"/parentCommunity\"))\n-            .andExpect(jsonPath(\"$\", is(CommunityMatcher.matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n-                                                                             communityAA.getHandle()))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityA.getName(), communityA.getID(),\n-                                                                     communityA.getHandle())))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityAB.getName(), communityAB.getID(),\n-                                                                     communityAB.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void col3ParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token)\n-            .perform(get(\"/api/core/collections/\" + col3.getID() + \"/parentCommunity\"))\n-            .andExpect(jsonPath(\"$\", is(CommunityMatcher.matchCommunityEntry(communityAB.getName(), communityAB.getID(),\n-                                                                             communityAB.getHandle()))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityA.getName(), communityA.getID(),\n-                                                                     communityA.getHandle())))))\n-            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n-                                                .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n-                                                                     communityAA.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void comAAParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token)\n-            .perform(get(\"/api/core/communities/\" + communityAA.getID() + \"/parentCommunity\"))\n-            .andExpect(jsonPath(\"$\", Matchers\n-                .is(CommunityMatcher.matchCommunityEntry(communityA.getID(), communityA.getHandle()))))\n-            .andExpect(jsonPath(\"$\", Matchers\n-                .not(Matchers.is(CommunityMatcher.matchCommunityEntry(communityB.getID(), communityB.getHandle())))));\n-\n-    }\n-\n-    @Test\n-    public void comAParentCommunityTest() throws Exception {\n-\n-        String token = getAuthToken(admin.getEmail(), password);\n-        getClient(token).perform(get(\"/api/core/communities/\" + communityA.getID() + \"/parentCommunity\"))\n-                        .andExpect(status().isNoContent());\n-\n-\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyNTQ5Ng==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r383925496", "bodyText": "please don't reduce the scope of the matcher as this would have the effect to reduce the usefulness of the existing tests. Instead, if a new match method that exclude embedded is required overload the method", "author": "abollini", "createdAt": "2020-02-25T14:49:33Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/matcher/CollectionMatcher.java", "diffHunk": "@@ -31,8 +31,7 @@ private CollectionMatcher() {\n     public static Matcher<? super Object> matchCollectionEntry(String name, UUID uuid, String handle, Bitstream logo) {\n         return allOf(\n                 matchProperties(name, uuid, handle),\n-                matchLinks(uuid),\n-                matchLogo(logo)\n+                matchLinks(uuid)", "originalCommit": "06f5199ec7e5bd36b84349e2ac22ad286356c613", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0MTkwNA==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r385241904", "bodyText": "@abollini : This was resolved in a different manner.  A new matchCollectionEntryFullProjection() method was added, and all existing tests that depend on embeds (full projection) were updated to use that new method.", "author": "tdonohue", "createdAt": "2020-02-27T16:59:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyNTQ5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "abf82a3f465464a7b52a9dc107406351709464c5", "chunk": "diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/matcher/CollectionMatcher.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/matcher/CollectionMatcher.java\nindex 0551a38c0..77c8247ae 100644\n--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/matcher/CollectionMatcher.java\n+++ b/dspace-server-webapp/src/test/java/org/dspace/app/rest/matcher/CollectionMatcher.java\n\n@@ -35,6 +35,21 @@ public class CollectionMatcher {\n         );\n     }\n \n+    public static Matcher<? super Object> matchCollectionEntryFullProjection(String name, UUID uuid, String handle) {\n+        return matchCollectionEntryFullProjection(name, uuid, handle, null);\n+\n+    }\n+\n+    public static Matcher<? super Object> matchCollectionEntryFullProjection(String name, UUID uuid, String handle,\n+                                                                             Bitstream logo) {\n+        return allOf(\n+            matchProperties(name, uuid, handle),\n+            matchLinks(uuid),\n+            matchLogo(logo),\n+            matchFullEmbeds()\n+        );\n+    }\n+\n     public static Matcher<? super Object> matchProperties(String name, UUID uuid, String handle) {\n         return allOf(\n                 hasJsonPath(\"$.uuid\", is(uuid.toString())),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyNTc3OQ==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r383925779", "bodyText": "again better overload the method than reduce the checks", "author": "abollini", "createdAt": "2020-02-25T14:49:58Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/matcher/CommunityMatcher.java", "diffHunk": "@@ -31,8 +31,6 @@ private CommunityMatcher() { }\n                 hasJsonPath(\"$.uuid\", is(uuid.toString())),\n                 hasJsonPath(\"$.handle\", is(handle)),\n                 hasJsonPath(\"$.type\", is(\"community\")),", "originalCommit": "06f5199ec7e5bd36b84349e2ac22ad286356c613", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0MjE2Mg==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r385242162", "bodyText": "@abollini : This was resolved in a different manner.  A new matchCommunityEntryFullProjection() method was added, and all existing tests that depend on embeds (full projection) were updated to use that new method.", "author": "tdonohue", "createdAt": "2020-02-27T16:59:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyNTc3OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyNTg5OQ==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r383925899", "bodyText": "again better overload the method than reduce the checks", "author": "abollini", "createdAt": "2020-02-25T14:50:09Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/matcher/CommunityMatcher.java", "diffHunk": "@@ -55,8 +53,6 @@ private CommunityMatcher() { }\n     public static Matcher<? super Object> matchCommunityEntry(String name, UUID uuid, String handle) {\n         return allOf(\n             matchProperties(name, uuid, handle),\n-            hasJsonPath(\"$._embedded.collections\", Matchers.not(Matchers.empty())),", "originalCommit": "06f5199ec7e5bd36b84349e2ac22ad286356c613", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0MjU4NA==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r385242584", "bodyText": "@abollini : This was resolved in a different manner. A new matchCommunityEntryFullProjection() method was added, and all existing tests that depend on embeds (full projection) were updated to use that new method.", "author": "tdonohue", "createdAt": "2020-02-27T17:00:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyNTg5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "abf82a3f465464a7b52a9dc107406351709464c5", "chunk": "diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/matcher/CommunityMatcher.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/matcher/CommunityMatcher.java\nindex aca91807f..9a6bf242e 100644\n--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/matcher/CommunityMatcher.java\n+++ b/dspace-server-webapp/src/test/java/org/dspace/app/rest/matcher/CommunityMatcher.java\n\n@@ -57,6 +57,15 @@ public class CommunityMatcher {\n         );\n     }\n \n+    public static Matcher<? super Object> matchCommunityEntryFullProjection(String name, UUID uuid, String handle) {\n+        return allOf(\n+            matchProperties(name, uuid, handle),\n+            hasJsonPath(\"$._embedded.collections\", Matchers.not(Matchers.empty())),\n+            hasJsonPath(\"$._embedded.logo\", Matchers.not(Matchers.empty())),\n+            matchLinks(uuid)\n+        );\n+    }\n+\n     public static Matcher<? super Object> matchProperties(String name, UUID uuid, String handle) {\n         return allOf(\n             hasJsonPath(\"$.uuid\", is(uuid.toString())),\n"}}, {"oid": "abf82a3f465464a7b52a9dc107406351709464c5", "url": "https://github.com/DSpace/DSpace/commit/abf82a3f465464a7b52a9dc107406351709464c5", "message": "[Task 69130] applied feedback to the breadcrumbs functionality", "committedDate": "2020-02-27T14:01:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxMDc2OQ==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r385210769", "bodyText": "we need a bug issue for that", "author": "abollini", "createdAt": "2020-02-27T16:11:54Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionItemParentIT.java", "diffHunk": "@@ -0,0 +1,374 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.matcher.CollectionMatcher;\n+import org.dspace.app.rest.matcher.CommunityMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CommunityCollectionItemParentIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    Community communityA;\n+    Community communityB;\n+    Community communityAA;\n+    Community communityAB;\n+\n+    Collection colAA1;\n+    Collection colAA2;\n+    Collection colAB1;\n+\n+    Item itemAA1;\n+    Item itemAA1MappedInAA2;\n+    Item itemAA2;\n+\n+\n+    @Before\n+    public void setup() throws SQLException, AuthorizeException {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and one collection.\n+        communityA = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityA\")\n+                                     .build();\n+        communityB = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityB\")\n+                                     .build();\n+        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community\")\n+                                      .build();\n+        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community Two\")\n+                                      .build();\n+        colAA1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n+        colAA2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n+        colAB1 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n+        communityService.addCollection(context, communityAB, colAA2);\n+\n+\n+        itemAA1 = ItemBuilder.createItem(context, colAA1)\n+                             .withTitle(\"Public item 1\")\n+                             .withIssueDate(\"2017-10-17\")\n+                             .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        itemAA1MappedInAA2 = ItemBuilder.createItem(context, colAA1)\n+                                        .withTitle(\"Public item 1\")\n+                                        .withIssueDate(\"2017-10-17\")\n+                                        .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                                        .withSubject(\"ExtraEntry\")\n+                                        .build();\n+        collectionService.addItem(context, colAA2, itemAA1MappedInAA2);\n+        itemAA2 = ItemBuilder.createItem(context, colAA2)\n+                             .withTitle(\"Public item 1\")\n+                             .withIssueDate(\"2017-10-17\")\n+                             .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void itemXOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemAA1.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(colAA1.getName(),\n+                                                                                           colAA1.getID(),\n+                                                                                           colAA1.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(colAA2.getName(), colAA2.getID(), colAA2.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void itemYOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemAA1MappedInAA2.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(colAA1.getName(),\n+                                                                                           colAA1.getID(),\n+                                                                                           colAA1.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(colAA2.getName(), colAA2.getID(), colAA2.getHandle())))));\n+    }\n+\n+    @Test\n+    public void itemZOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemAA2.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(colAA2.getName(),\n+                                                                                           colAA2.getID(),\n+                                                                                           colAA2.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(colAA1.getName(), colAA1.getID(), colAA1.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void col1ParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + colAA1.getID() + \"/parentCommunity\"))\n+                        .andExpect(jsonPath(\"$\", is(CommunityMatcher\n+                                                        .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n+                                                                             communityAA.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityA.getName(),\n+                                                                                             communityA.getID(),\n+                                                                                             communityA.getHandle())))))\n+                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityAB.getName(),\n+                                                                                             communityAB.getID(),\n+                                                                                             communityAB\n+                                                                                                 .getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void comAAParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token)\n+            .perform(get(\"/api/core/communities/\" + communityAA.getID() + \"/parentCommunity\"))\n+            .andExpect(jsonPath(\"$\", Matchers\n+                .is(CommunityMatcher.matchCommunityEntry(communityA.getID(), communityA.getHandle()))))\n+            .andExpect(jsonPath(\"$\", Matchers\n+                .not(Matchers.is(CommunityMatcher.matchCommunityEntry(communityB.getID(), communityB.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void comAParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/communities/\" + communityA.getID() + \"/parentCommunity\"))\n+                        .andExpect(status().isNoContent());\n+\n+\n+    }\n+\n+    @Test\n+    public void parentCommunityWrongUUIDTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/communities/\" + UUID.randomUUID() + \"/parentCommunity\"))\n+                        .andExpect(status().isNotFound());\n+\n+\n+    }\n+\n+    @Test\n+    public void parentCommunityPrivateCommunityUnAuthorizedTest() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        authorizeService.removeAllPolicies(context, communityAA);\n+        context.restoreAuthSystemState();\n+        getClient().perform(get(\"/api/core/communities/\" + communityAA.getID() + \"/parentCommunity\"))\n+            .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    //Enable this test when this security level has been supported\n+    @Ignore\n+    @Test\n+    public void parentCommunityPrivateParentCommunityUnAuthorizedTest() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        authorizeService.removeAllPolicies(context, communityA);\n+        context.restoreAuthSystemState();\n+        getClient().perform(get(\"/api/core/communities/\" + communityAA.getID() + \"/parentCommunity\"))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void parentCommunityPrivateCommunityForbiddenTest() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        authorizeService.removeAllPolicies(context, communityAA);\n+        context.restoreAuthSystemState();\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/communities/\" + communityAA.getID() + \"/parentCommunity\"))\n+                   .andExpect(status().isForbidden());\n+\n+    }\n+\n+    //Enable this test when this security level has been supported\n+    @Ignore\n+    @Test\n+    public void parentCommunityPrivateParentCommunityForbiddenTest() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        authorizeService.removeAllPolicies(context, communityA);\n+        context.restoreAuthSystemState();\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/communities/\" + communityAA.getID() + \"/parentCommunity\"))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void parentCommunityForCollectionWrongUUIDTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/parentCommunity\"))\n+                        .andExpect(status().isNotFound());\n+\n+\n+    }\n+\n+    @Test\n+    public void parentCommunityForCollectionPrivateCollectionUnAuthorizedTest() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        authorizeService.removeAllPolicies(context, colAA1);\n+        context.restoreAuthSystemState();\n+        getClient().perform(get(\"/api/core/collections/\" + colAA1.getID() + \"/parentCommunity\"))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    //Enable this test when this security level has been supported", "originalCommit": "abf82a3f465464a7b52a9dc107406351709464c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NTQ2Nw==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r385265467", "bodyText": "https://jira.lyrasis.org/browse/DS-4444", "author": "benbosman", "createdAt": "2020-02-27T17:38:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxMDc2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2a54bfab4015afe1b3075eaff692dbb0c4facc3b", "chunk": "diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionItemParentIT.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionItemParentIT.java\nindex a631d7ef6..d85cf34d6 100644\n--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionItemParentIT.java\n+++ b/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionItemParentIT.java\n\n@@ -109,7 +109,7 @@ public class CommunityCollectionItemParentIT extends AbstractControllerIntegrati\n     }\n \n     @Test\n-    public void itemXOwningCollectionTest() throws Exception {\n+    public void itemAA1OwningCollectionTest() throws Exception {\n \n         String token = getAuthToken(admin.getEmail(), password);\n         getClient(token).perform(get(\"/api/core/items/\" + itemAA1.getID() + \"/owningCollection\"))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxMjI5MA==", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r385212290", "bodyText": "can you rename the test methods according to the refactored name of the items variable?", "author": "abollini", "createdAt": "2020-02-27T16:14:11Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionItemParentIT.java", "diffHunk": "@@ -0,0 +1,374 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.matcher.CollectionMatcher;\n+import org.dspace.app.rest.matcher.CommunityMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CommunityCollectionItemParentIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    Community communityA;\n+    Community communityB;\n+    Community communityAA;\n+    Community communityAB;\n+\n+    Collection colAA1;\n+    Collection colAA2;\n+    Collection colAB1;\n+\n+    Item itemAA1;\n+    Item itemAA1MappedInAA2;\n+    Item itemAA2;\n+\n+\n+    @Before\n+    public void setup() throws SQLException, AuthorizeException {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and one collection.\n+        communityA = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityA\")\n+                                     .build();\n+        communityB = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityB\")\n+                                     .build();\n+        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community\")\n+                                      .build();\n+        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community Two\")\n+                                      .build();\n+        colAA1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n+        colAA2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n+        colAB1 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n+        communityService.addCollection(context, communityAB, colAA2);\n+\n+\n+        itemAA1 = ItemBuilder.createItem(context, colAA1)\n+                             .withTitle(\"Public item 1\")\n+                             .withIssueDate(\"2017-10-17\")\n+                             .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        itemAA1MappedInAA2 = ItemBuilder.createItem(context, colAA1)\n+                                        .withTitle(\"Public item 1\")\n+                                        .withIssueDate(\"2017-10-17\")\n+                                        .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                                        .withSubject(\"ExtraEntry\")\n+                                        .build();\n+        collectionService.addItem(context, colAA2, itemAA1MappedInAA2);\n+        itemAA2 = ItemBuilder.createItem(context, colAA2)\n+                             .withTitle(\"Public item 1\")\n+                             .withIssueDate(\"2017-10-17\")\n+                             .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void itemXOwningCollectionTest() throws Exception {", "originalCommit": "abf82a3f465464a7b52a9dc107406351709464c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a54bfab4015afe1b3075eaff692dbb0c4facc3b", "chunk": "diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionItemParentIT.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionItemParentIT.java\nindex a631d7ef6..d85cf34d6 100644\n--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionItemParentIT.java\n+++ b/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionItemParentIT.java\n\n@@ -109,7 +109,7 @@ public class CommunityCollectionItemParentIT extends AbstractControllerIntegrati\n     }\n \n     @Test\n-    public void itemXOwningCollectionTest() throws Exception {\n+    public void itemAA1OwningCollectionTest() throws Exception {\n \n         String token = getAuthToken(admin.getEmail(), password);\n         getClient(token).perform(get(\"/api/core/items/\" + itemAA1.getID() + \"/owningCollection\"))\n"}}, {"oid": "2a54bfab4015afe1b3075eaff692dbb0c4facc3b", "url": "https://github.com/DSpace/DSpace/commit/2a54bfab4015afe1b3075eaff692dbb0c4facc3b", "message": "[Task 69156] applied feedback to the breadcrumbs tests", "committedDate": "2020-02-28T13:34:32Z", "type": "commit"}, {"oid": "ccf8aa905c4551485f660bdfa149c75f57e6984a", "url": "https://github.com/DSpace/DSpace/commit/ccf8aa905c4551485f660bdfa149c75f57e6984a", "message": "Merge remote-tracking branch 'dspace/master' into w2p-68607_add-link-to-parent-community\n\nConflicts:\n\tdspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "committedDate": "2020-02-28T14:12:04Z", "type": "commit"}]}