{"pr_number": 2766, "pr_title": "DS-4495 Restricted endpoints are sometimes the only HAL link path to public endpoints", "pr_createdAt": "2020-05-21T13:33:36Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2766", "timeline": [{"oid": "6f5d6625b498f7b1071e8ce4c2ebf55c51e696a8", "url": "https://github.com/DSpace/DSpace/commit/6f5d6625b498f7b1071e8ce4c2ebf55c51e696a8", "message": "added the class that has responsible to add to the root endpoint the links to standard nested endpoint, plus IT", "committedDate": "2020-05-21T11:12:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5ODk2Ng==", "url": "https://github.com/DSpace/DSpace/pull/2766#discussion_r428698966", "bodyText": "I'm assuming there's no way to do this in the RestRepository classes themselves?   The code here looks reasonable, but it just seems slightly odd to me that we have to do this in a separate class instead of finding a way to register these endpoints in the class that creates them (for example, registering this endpoint from within the ResourcePolicyRestRespository which creates/generates this /search subpath).\nThat said, if this is the easiest route, I'm OK with this. We'll just need to remember to modify this class whenever a new nested link needs to be visible at the root level.", "author": "tdonohue", "createdAt": "2020-05-21T14:48:05Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/link/RootDiscoverableNestedLinks.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.link;\n+\n+import java.util.Arrays;\n+\n+import org.dspace.app.rest.DiscoverableEndpointsService;\n+import org.dspace.app.rest.model.AuthorizationRest;\n+import org.dspace.app.rest.model.ClaimedTaskRest;\n+import org.dspace.app.rest.model.EPersonRest;\n+import org.dspace.app.rest.model.PoolTaskRest;\n+import org.dspace.app.rest.model.ResourcePolicyRest;\n+import org.dspace.app.rest.repository.AuthorityRestRepository;\n+import org.dspace.app.rest.repository.ClaimedTaskRestRepository;\n+import org.dspace.app.rest.repository.EPersonRestRepository;\n+import org.dspace.app.rest.repository.PoolTaskRestRepository;\n+import org.dspace.app.rest.repository.ResourcePolicyRestRepository;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.hateoas.Link;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This class is responsible to add to the root endpoint the links to standard nested endpoint\n+ * that are not discoverable due to limitation to access some resource collection endpoint via GET.\n+ * If a custom endpoint should require to add extra links to the root is recommended to register\n+ * them directly from the Repository class implementation or the custom controller.\n+ * \n+ * @author Mykhaylo Boychuk (mykhaylo.boychuk at 4science)\n+ */\n+@Component\n+public class RootDiscoverableNestedLinks implements InitializingBean {\n+\n+    @Autowired\n+    DiscoverableEndpointsService discoverableEndpointsService;\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        discoverableEndpointsService\n+            .register(ResourcePolicyRestRepository.class , Arrays.asList(new Link(\"/api/\"\n+                    + ResourcePolicyRest.CATEGORY + \"/\" + ResourcePolicyRest.NAME + \"/search\",\n+                                                          ResourcePolicyRest.NAME + \"-search\")));", "originalCommit": "6f5d6625b498f7b1071e8ce4c2ebf55c51e696a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "746fa4fd27a704cc44827ee457bf0a80f1087857", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/link/RootDiscoverableNestedLinks.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/link/RootDiscoverableNestedLinks.java\ndeleted file mode 100644\nindex 00a43b9db..000000000\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/link/RootDiscoverableNestedLinks.java\n+++ /dev/null\n\n@@ -1,70 +0,0 @@\n-/**\n- * The contents of this file are subject to the license and copyright\n- * detailed in the LICENSE and NOTICE files at the root of the source\n- * tree and available online at\n- *\n- * http://www.dspace.org/license/\n- */\n-package org.dspace.app.rest.link;\n-\n-import java.util.Arrays;\n-\n-import org.dspace.app.rest.DiscoverableEndpointsService;\n-import org.dspace.app.rest.model.AuthorizationRest;\n-import org.dspace.app.rest.model.ClaimedTaskRest;\n-import org.dspace.app.rest.model.EPersonRest;\n-import org.dspace.app.rest.model.PoolTaskRest;\n-import org.dspace.app.rest.model.ResourcePolicyRest;\n-import org.dspace.app.rest.repository.AuthorityRestRepository;\n-import org.dspace.app.rest.repository.ClaimedTaskRestRepository;\n-import org.dspace.app.rest.repository.EPersonRestRepository;\n-import org.dspace.app.rest.repository.PoolTaskRestRepository;\n-import org.dspace.app.rest.repository.ResourcePolicyRestRepository;\n-import org.springframework.beans.factory.InitializingBean;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.hateoas.Link;\n-import org.springframework.stereotype.Component;\n-\n-/**\n- * This class is responsible to add to the root endpoint the links to standard nested endpoint\n- * that are not discoverable due to limitation to access some resource collection endpoint via GET.\n- * If a custom endpoint should require to add extra links to the root is recommended to register\n- * them directly from the Repository class implementation or the custom controller.\n- * \n- * @author Mykhaylo Boychuk (mykhaylo.boychuk at 4science)\n- */\n-@Component\n-public class RootDiscoverableNestedLinks implements InitializingBean {\n-\n-    @Autowired\n-    DiscoverableEndpointsService discoverableEndpointsService;\n-\n-    @Override\n-    public void afterPropertiesSet() throws Exception {\n-        discoverableEndpointsService\n-            .register(ResourcePolicyRestRepository.class , Arrays.asList(new Link(\"/api/\"\n-                    + ResourcePolicyRest.CATEGORY + \"/\" + ResourcePolicyRest.NAME + \"/search\",\n-                                                          ResourcePolicyRest.NAME + \"-search\")));\n-\n-        discoverableEndpointsService\n-            .register(AuthorityRestRepository.class , Arrays.asList(new Link(\"/api/\"\n-                    + AuthorizationRest.CATEGORY  + \"/\" + AuthorizationRest.NAME + \"/search\",\n-                                                          AuthorizationRest.NAME  + \"-search\")));\n-\n-        discoverableEndpointsService\n-            .register(ClaimedTaskRestRepository.class , Arrays.asList(new Link(\"/api/\"\n-                    + ClaimedTaskRest.CATEGORY + \"/\" + ClaimedTaskRest.NAME + \"/search\",\n-                                                       ClaimedTaskRest.NAME + \"-search\")));\n-\n-        discoverableEndpointsService\n-            .register(PoolTaskRestRepository.class , Arrays.asList(new Link(\"/api/\"\n-                    + PoolTaskRest.CATEGORY + \"/\" + PoolTaskRest.NAME + \"/search\",\n-                                                    PoolTaskRest.NAME + \"-search\")));\n-\n-        discoverableEndpointsService\n-            .register(EPersonRestRepository.class , Arrays.asList(new Link(\"/api/\"\n-                    + EPersonRest.CATEGORY + \"/registrations\", EPersonRest.NAME + \"-registration\")));\n-\n-    }\n-\n-}\n"}}, {"oid": "746fa4fd27a704cc44827ee457bf0a80f1087857", "url": "https://github.com/DSpace/DSpace/commit/746fa4fd27a704cc44827ee457bf0a80f1087857", "message": "splitted links in their owner repository", "committedDate": "2020-06-03T19:41:21Z", "type": "commit"}]}