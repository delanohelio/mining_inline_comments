{"pr_number": 2957, "pr_title": "Address many deprecation warnings", "pr_createdAt": "2020-09-09T21:03:28Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2957", "timeline": [{"oid": "95d0a2bf57e02f544698d6bfbed52c28d2c5fa07", "url": "https://github.com/DSpace/DSpace/commit/95d0a2bf57e02f544698d6bfbed52c28d2c5fa07", "message": "Remove long-deprecated ConfigurationManager.", "committedDate": "2020-11-17T18:30:00Z", "type": "commit"}, {"oid": "7395c5be8ff769b9cce2f5b66e06886c7eb624f2", "url": "https://github.com/DSpace/DSpace/commit/7395c5be8ff769b9cce2f5b66e06886c7eb624f2", "message": "Replace deprecated Spring @Required with @Autowired(required=true)", "committedDate": "2020-11-17T18:46:06Z", "type": "commit"}, {"oid": "34de00b47a8b011d40a67ab42b70f6f84823da17", "url": "https://github.com/DSpace/DSpace/commit/34de00b47a8b011d40a67ab42b70f6f84823da17", "message": "Replace deprecated Commons Collections MultivalueMap.", "committedDate": "2020-11-17T18:46:10Z", "type": "commit"}, {"oid": "00d9364f87581bac585a4fb0c5a81c3823bb7cde", "url": "https://github.com/DSpace/DSpace/commit/00d9364f87581bac585a4fb0c5a81c3823bb7cde", "message": "Replace deprecated Commons CLI PosixParser and OptionBuilder.", "committedDate": "2020-11-17T18:46:10Z", "type": "commit"}, {"oid": "230cca287e659d44c371cdb8467d21145294aacf", "url": "https://github.com/DSpace/DSpace/commit/230cca287e659d44c371cdb8467d21145294aacf", "message": "Replace deprecated Xerces XML serializer with one from org.w3c.dom.", "committedDate": "2020-11-17T18:46:10Z", "type": "commit"}, {"oid": "8ee14c3abcc8f2eb1c54377be457dd037e8b8271", "url": "https://github.com/DSpace/DSpace/commit/8ee14c3abcc8f2eb1c54377be457dd037e8b8271", "message": "Replace deprecated lang3.CharEncoding with nio.StandardCharsets.", "committedDate": "2020-11-17T18:46:10Z", "type": "commit"}, {"oid": "7ab6aed27637d44259407ebab87bdc8a287b684d", "url": "https://github.com/DSpace/DSpace/commit/7ab6aed27637d44259407ebab87bdc8a287b684d", "message": "Remove deprecated getMetadata(Context, String) from CommunityService, CollectionService.", "committedDate": "2020-11-17T18:46:10Z", "type": "commit"}, {"oid": "47d32b72cd0ac8b5fed19ab78fb556c0f384bf76", "url": "https://github.com/DSpace/DSpace/commit/47d32b72cd0ac8b5fed19ab78fb556c0f384bf76", "message": "Better fix for configuration issue in c463b632dd24e0c017d88b36b2b6fa0f13d95fb1\n\nOther code now depends on the 'id' of the curation script configuration bean,\nso it can't be renamed.  Instead, remove the bean post processing code that\npokes 'dspace.cfg' properties into a bean which are prefixed with the bean's\n'id', since nobody can remember why we do that and it causes subtle magical\nproblems.  It may be for Guice, which is no longer an option for DSpace.", "committedDate": "2020-11-17T18:53:27Z", "type": "commit"}, {"oid": "079bdb0e0db6f0f659ee792789ea38f43505e4ef", "url": "https://github.com/DSpace/DSpace/commit/079bdb0e0db6f0f659ee792789ea38f43505e4ef", "message": "I missed a lot of deprecated PosixParser and OptionBuilder in the clutter of warnings (see?).", "committedDate": "2020-11-17T18:53:49Z", "type": "commit"}, {"oid": "a5c1b780f6717cc95b3955bdaa4d4f1e16877a73", "url": "https://github.com/DSpace/DSpace/commit/a5c1b780f6717cc95b3955bdaa4d4f1e16877a73", "message": "Missed one more PosixParser.", "committedDate": "2020-11-17T18:53:49Z", "type": "commit"}, {"oid": "ff0247442377e24dbec08e14fb201a2da8bbc31d", "url": "https://github.com/DSpace/DSpace/commit/ff0247442377e24dbec08e14fb201a2da8bbc31d", "message": "Fix broken test by catching an unexpected exception.\n\nThere must be an unchecked exception bubbling up through SolrServiceImpl#search.  Catching Exception (as before this PR) fixes the test failure.", "committedDate": "2020-11-17T18:53:49Z", "type": "commit"}, {"oid": "d5d3b55457385cf4820a420d8065ea2376545fdd", "url": "https://github.com/DSpace/DSpace/commit/d5d3b55457385cf4820a420d8065ea2376545fdd", "message": "Replace deprecated constructors of boxed primitive types. [#2956]", "committedDate": "2020-11-17T18:53:49Z", "type": "commit"}, {"oid": "0ade9e9978a1041aac62154048b18593fbb132c2", "url": "https://github.com/DSpace/DSpace/commit/0ade9e9978a1041aac62154048b18593fbb132c2", "message": "Replace deprecated Class.newInstance(). [#2956]", "committedDate": "2020-11-17T18:53:49Z", "type": "commit"}, {"oid": "259bd4bcdde04841c11ccc3c99ac6a80f9fc1162", "url": "https://github.com/DSpace/DSpace/commit/259bd4bcdde04841c11ccc3c99ac6a80f9fc1162", "message": "Fix anything that is documented @deprecated but not annotated @Deprecated. [#2956]", "committedDate": "2020-11-17T18:53:49Z", "type": "commit"}, {"oid": "22dcbf548122af7a30d671229c8233decc9c8584", "url": "https://github.com/DSpace/DSpace/commit/22dcbf548122af7a30d671229c8233decc9c8584", "message": "Replace various deprecated PDFBox methods. [#2956]", "committedDate": "2020-11-17T18:53:49Z", "type": "commit"}, {"oid": "5838cfd9c7719209bca18e4441b9b3abe78da7f1", "url": "https://github.com/DSpace/DSpace/commit/5838cfd9c7719209bca18e4441b9b3abe78da7f1", "message": "Remove long-deprecated un-localized methods from LocationUtils. [#2956]", "committedDate": "2020-11-17T18:53:49Z", "type": "commit"}, {"oid": "e08341faedaca2a5c9e0aa78b4699441bbdc5e40", "url": "https://github.com/DSpace/DSpace/commit/e08341faedaca2a5c9e0aa78b4699441bbdc5e40", "message": "Fix LGTM alert:  pointless boxing.", "committedDate": "2020-11-17T18:53:49Z", "type": "commit"}, {"oid": "f8221f54ced729f7d68068c61b5e6442fd8642bf", "url": "https://github.com/DSpace/DSpace/commit/f8221f54ced729f7d68068c61b5e6442fd8642bf", "message": "I missed one LocationUtils call.", "committedDate": "2020-11-17T18:53:49Z", "type": "commit"}, {"oid": "65690892281998171b8e0bddf5ac285143c34de7", "url": "https://github.com/DSpace/DSpace/commit/65690892281998171b8e0bddf5ac285143c34de7", "message": "Remove deprecated setMetadata of CommunityService, CollectionService #2956\n\nThis introduces a new class:  a holder for metadata field names.", "committedDate": "2020-11-17T18:53:49Z", "type": "commit"}, {"oid": "7f53ab6bef38dfa0df4ab2e225069ce9d8c07053", "url": "https://github.com/DSpace/DSpace/commit/7f53ab6bef38dfa0df4ab2e225069ce9d8c07053", "message": "Found a few more deprecated PosixParser, GnuParser, OptionBuilder. #2956", "committedDate": "2020-11-17T20:05:51Z", "type": "commit"}, {"oid": "d77f6eef25d6bacf4092cc5ecef5adb45e43b4aa", "url": "https://github.com/DSpace/DSpace/commit/d77f6eef25d6bacf4092cc5ecef5adb45e43b4aa", "message": "Replace deprecated org.apache.http.impl.client.DefaultHttpClient [#2956]", "committedDate": "2020-11-17T20:05:55Z", "type": "commit"}, {"oid": "3e7ac5d935b6fb7a3fa4ca9aac7368948921a709", "url": "https://github.com/DSpace/DSpace/commit/3e7ac5d935b6fb7a3fa4ca9aac7368948921a709", "message": "Replace miscellaneous rarely-used deprecateds. [#2956]", "committedDate": "2020-11-17T20:05:55Z", "type": "commit"}, {"oid": "e94911ba1909771baa9d700c4e5f591906014269", "url": "https://github.com/DSpace/DSpace/commit/e94911ba1909771baa9d700c4e5f591906014269", "message": "Replace deprecated setMetadata() that uses removed field names. #2956\n\nOnce upon a time, DSOs had dedicated fields for some metadata.  These were\nmoved into the Metadatavalue table long ago, but there were still methods\nwhich used the old field names instead of proper MetadataField triplets.", "committedDate": "2020-11-17T20:37:53Z", "type": "commit"}, {"oid": "e94911ba1909771baa9d700c4e5f591906014269", "url": "https://github.com/DSpace/DSpace/commit/e94911ba1909771baa9d700c4e5f591906014269", "message": "Replace deprecated setMetadata() that uses removed field names. #2956\n\nOnce upon a time, DSOs had dedicated fields for some metadata.  These were\nmoved into the Metadatavalue table long ago, but there were still methods\nwhich used the old field names instead of proper MetadataField triplets.", "committedDate": "2020-11-17T20:37:53Z", "type": "forcePushed"}, {"oid": "4afc33daeffc19d25181646bc1a289d382f64882", "url": "https://github.com/DSpace/DSpace/commit/4afc33daeffc19d25181646bc1a289d382f64882", "message": "Satisfy checkstyle.", "committedDate": "2020-11-17T21:22:33Z", "type": "commit"}, {"oid": "6d0c57fa3eebe65c231f79a1b3639a4043801cf5", "url": "https://github.com/DSpace/DSpace/commit/6d0c57fa3eebe65c231f79a1b3639a4043801cf5", "message": "Replace deprecated icu4j Normalizer with Normalizer2. #2956", "committedDate": "2020-11-17T22:03:28Z", "type": "commit"}, {"oid": "7d64bb6f7181f40b952d942383ad50156392f318", "url": "https://github.com/DSpace/DSpace/commit/7d64bb6f7181f40b952d942383ad50156392f318", "message": "Replace Class.getInstance(). #2956", "committedDate": "2020-11-18T18:39:50Z", "type": "commit"}, {"oid": "87cfac01d4715405e3a77145b0633b81b13cb55a", "url": "https://github.com/DSpace/DSpace/commit/87cfac01d4715405e3a77145b0633b81b13cb55a", "message": "Replace deprecated JUnit and Mockito statics. #2956", "committedDate": "2020-11-18T21:12:41Z", "type": "commit"}, {"oid": "96742fe558f3de24634603a15e00f332d7c393a0", "url": "https://github.com/DSpace/DSpace/commit/96742fe558f3de24634603a15e00f332d7c393a0", "message": "Satisfy Checkstyle.  Small tidy-ups.  #2956", "committedDate": "2020-11-18T23:02:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxMDAwMg==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r528910002", "bodyText": "I'm not a fun of \"complex\" initialization outside of a constructor... but it is also a class that probably should be removed / deprecated. I'm not sure that this feature still work at all", "author": "abollini", "createdAt": "2020-11-23T18:25:43Z", "path": "dspace-api/src/main/java/org/dspace/app/statistics/HTMLReport.java", "diffHunk": "@@ -59,7 +60,9 @@\n     /**\n      * the output file to which to write aggregation data\n      */\n-    private String output = ConfigurationManager.getProperty(\"dspace.dir\") +\n+    ConfigurationService configurationService\n+            = DSpaceServicesFactory.getInstance().getConfigurationService();", "originalCommit": "96742fe558f3de24634603a15e00f332d7c393a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczNTUzMQ==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r529735531", "bodyText": "I've moved the initialization inside the formerly empty constructor.\nI believe that this feature is due to be removed anyway after 7.0, so it is probably not worth the effort to figure out what could be removed now.", "author": "mwoodiupui", "createdAt": "2020-11-24T17:02:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxMDAwMg=="}], "type": "inlineReview", "revised_code": {"commit": "ea15ca58feea44e0ebefea7e8dbd2889f4ae2324", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/app/statistics/HTMLReport.java b/dspace-api/src/main/java/org/dspace/app/statistics/HTMLReport.java\nindex 368f3dea5..3d76ecaec 100644\n--- a/dspace-api/src/main/java/org/dspace/app/statistics/HTMLReport.java\n+++ b/dspace-api/src/main/java/org/dspace/app/statistics/HTMLReport.java\n\n@@ -60,18 +60,23 @@ public class HTMLReport implements Report {\n     /**\n      * the output file to which to write aggregation data\n      */\n-    ConfigurationService configurationService\n-            = DSpaceServicesFactory.getInstance().getConfigurationService();\n-    private String output = configurationService.getProperty(\"dspace.dir\") +\n-        File.separator + \"log\" + File.separator + \"report\";\n+    private String output;\n \n     /**\n-     * constructor for HTML reporting\n+     * Output file path is set to {@code ${dspace.dir}/log/report}.\n      */\n     public HTMLReport() {\n-        // empty constructor\n+        ConfigurationService configurationService\n+                = DSpaceServicesFactory.getInstance().getConfigurationService();\n+        output = configurationService.getProperty(\"dspace.dir\")\n+                + File.separator + \"log\" + File.separator + \"report\";\n     }\n \n+    /**\n+     * Set a non-default output file path.\n+     *\n+     * @param newOutput new path to the report.\n+     */\n     public void setOutput(String newOutput) {\n         if (newOutput != null) {\n             output = newOutput;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxMjkxOA==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r528912918", "bodyText": "the check log.isDebugEnabled() should be moved inside the logConfiguration method", "author": "abollini", "createdAt": "2020-11-23T18:30:56Z", "path": "dspace-api/src/main/java/org/dspace/app/util/GoogleMetadata.java", "diffHunk": "@@ -180,9 +186,7 @@\n             }\n         }\n \n-        if (log.isDebugEnabled()) {\n-            logConfiguration();\n-        }\n+        logConfiguration();", "originalCommit": "96742fe558f3de24634603a15e00f332d7c393a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczNDA5Nw==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r529734097", "bodyText": "Normally I would not use #isDebugEnabled but, since the code is iterating over a HashMap and logging its content, the added efficiency is probably worthwhile.", "author": "mwoodiupui", "createdAt": "2020-11-24T17:00:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxMjkxOA=="}], "type": "inlineReview", "revised_code": {"commit": "ea15ca58feea44e0ebefea7e8dbd2889f4ae2324", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/app/util/GoogleMetadata.java b/dspace-api/src/main/java/org/dspace/app/util/GoogleMetadata.java\nindex 20262fefd..0021f2670 100644\n--- a/dspace-api/src/main/java/org/dspace/app/util/GoogleMetadata.java\n+++ b/dspace-api/src/main/java/org/dspace/app/util/GoogleMetadata.java\n\n@@ -193,6 +193,10 @@ public class GoogleMetadata {\n      * Dump Metadata field mapping to log\n      */\n     public static void logConfiguration() {\n+        if (!log.isDebugEnabled()) {\n+            return;\n+        }\n+\n         log.debug(\"Google Metadata Configuration Mapping:\");\n \n         for (String name : googleScholarSettings.keySet()) {\n"}}, {"oid": "51f9e78fd245536742ecd8a9f9a34cad8d4bff94", "url": "https://github.com/DSpace/DSpace/commit/51f9e78fd245536742ecd8a9f9a34cad8d4bff94", "message": "Merge remote-tracking branch 'upstream/main' into #2956", "committedDate": "2020-11-24T16:56:18Z", "type": "commit"}, {"oid": "ea15ca58feea44e0ebefea7e8dbd2889f4ae2324", "url": "https://github.com/DSpace/DSpace/commit/ea15ca58feea44e0ebefea7e8dbd2889f4ae2324", "message": "Address review comments.  #2956", "committedDate": "2020-11-24T16:58:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzNjk5NQ==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r528936995", "bodyText": "Instead of looping through all properties, this can just use configurationService.getPropertyKeys(\"swordv2-server.simpledc.\") to find all properties starting with that prefix.  See https://github.com/DSpace/DSpace/blob/main/dspace-services/src/main/java/org/dspace/servicemanager/config/DSpaceConfigurationService.java#L135", "author": "tdonohue", "createdAt": "2020-11-23T19:14:32Z", "path": "dspace-swordv2/src/main/java/org/dspace/sword2/AbstractSimpleDC.java", "diffHunk": "@@ -27,16 +28,18 @@\n     protected ItemService itemService = ContentServiceFactory.getInstance()\n                                                              .getItemService();\n \n+    protected ConfigurationService configurationService\n+            = DSpaceServicesFactory.getInstance().getConfigurationService();\n+\n     protected void loadMetadataMaps() {\n         if (this.dcMap == null) {\n             // we should load our DC map from configuration\n             this.dcMap = new HashMap<>();\n-            Properties props = ConfigurationManager\n-                .getProperties(\"swordv2-server\");\n+            Properties props = configurationService.getProperties();\n             for (Object key : props.keySet()) {\n                 String keyString = (String) key;\n-                if (keyString.startsWith(\"simpledc.\")) {\n-                    String k = keyString.substring(\"simpledc.\".length());\n+                if (keyString.startsWith(\"swordv2-server.simpledc.\")) {", "originalCommit": "96742fe558f3de24634603a15e00f332d7c393a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzNTkxMQ==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r532935911", "bodyText": "Agreed.", "author": "mwoodiupui", "createdAt": "2020-11-30T22:09:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzNjk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8a38b7d51cf2c77ab5aa760ce4fbe52afc4e0299", "chunk": "diff --git a/dspace-swordv2/src/main/java/org/dspace/sword2/AbstractSimpleDC.java b/dspace-swordv2/src/main/java/org/dspace/sword2/AbstractSimpleDC.java\nindex 185751cef..cb645d3ca 100644\n--- a/dspace-swordv2/src/main/java/org/dspace/sword2/AbstractSimpleDC.java\n+++ b/dspace-swordv2/src/main/java/org/dspace/sword2/AbstractSimpleDC.java\n\n@@ -21,6 +21,10 @@ import org.dspace.services.ConfigurationService;\n import org.dspace.services.factory.DSpaceServicesFactory;\n \n public class AbstractSimpleDC {\n+    private static final String DC_PREFIX = \"swordv2-server.simpledc\";\n+\n+    private static final String ATOM_PREFIX = \"swordv2-server.atom\";\n+\n     protected HashMap<String, String> dcMap = null;\n \n     protected HashMap<String, String> atomMap = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzNzM3MQ==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r528937371", "bodyText": "Same here...can use getPropertyKeys([prefix]) instead of looping through every configuration.", "author": "tdonohue", "createdAt": "2020-11-23T19:15:10Z", "path": "dspace-swordv2/src/main/java/org/dspace/sword2/AbstractSimpleDC.java", "diffHunk": "@@ -45,12 +48,11 @@ protected void loadMetadataMaps() {\n \n         if (this.atomMap == null) {\n             this.atomMap = new HashMap<>();\n-            Properties props = ConfigurationManager\n-                .getProperties(\"swordv2-server\");\n+            Properties props = configurationService.getProperties();\n             for (Object key : props.keySet()) {\n                 String keyString = (String) key;\n-                if (keyString.startsWith(\"atom.\")) {\n-                    String k = keyString.substring(\"atom.\".length());\n+                if (keyString.startsWith(\"swordv2-server.atom.\")) {", "originalCommit": "96742fe558f3de24634603a15e00f332d7c393a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzNTk5NA==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r532935994", "bodyText": "Agreed.", "author": "mwoodiupui", "createdAt": "2020-11-30T22:09:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzNzM3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8a38b7d51cf2c77ab5aa760ce4fbe52afc4e0299", "chunk": "diff --git a/dspace-swordv2/src/main/java/org/dspace/sword2/AbstractSimpleDC.java b/dspace-swordv2/src/main/java/org/dspace/sword2/AbstractSimpleDC.java\nindex 185751cef..cb645d3ca 100644\n--- a/dspace-swordv2/src/main/java/org/dspace/sword2/AbstractSimpleDC.java\n+++ b/dspace-swordv2/src/main/java/org/dspace/sword2/AbstractSimpleDC.java\n\n@@ -35,27 +39,21 @@ public class AbstractSimpleDC {\n         if (this.dcMap == null) {\n             // we should load our DC map from configuration\n             this.dcMap = new HashMap<>();\n-            Properties props = configurationService.getProperties();\n-            for (Object key : props.keySet()) {\n-                String keyString = (String) key;\n-                if (keyString.startsWith(\"swordv2-server.simpledc.\")) {\n-                    String k = keyString.substring(\"swordv2-server.simpledc.\".length());\n-                    String v = (String) props.get(key);\n-                    this.dcMap.put(k, v);\n-                }\n+            List<String> keys = configurationService.getPropertyKeys(DC_PREFIX);\n+            for (String key : keys) {\n+                String k = key.substring(DC_PREFIX.length() + 1);\n+                String v = configurationService.getProperty(key);\n+                this.dcMap.put(k, v);\n             }\n         }\n \n         if (this.atomMap == null) {\n             this.atomMap = new HashMap<>();\n-            Properties props = configurationService.getProperties();\n-            for (Object key : props.keySet()) {\n-                String keyString = (String) key;\n-                if (keyString.startsWith(\"swordv2-server.atom.\")) {\n-                    String k = keyString.substring(\"swordv2-server.atom.\".length());\n-                    String v = (String) props.get(key);\n-                    this.atomMap.put(k, v);\n-                }\n+            List<String> keys = configurationService.getPropertyKeys(ATOM_PREFIX);\n+            for (String key : keys) {\n+                String k = key.substring(ATOM_PREFIX.length() + 1);\n+                String v = configurationService.getProperty(key);\n+                this.atomMap.put(k, v);\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MTUxNw==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r532851517", "bodyText": "I think this could be refactored to be configurationService.getPropertyKeys(authPrefix) in order to find every key that starts with authPrefix.", "author": "tdonohue", "createdAt": "2020-11-30T19:39:27Z", "path": "dspace-api/src/main/java/org/dspace/content/authority/MetadataAuthorityServiceImpl.java", "diffHunk": "@@ -81,13 +84,12 @@ protected MetadataAuthorityServiceImpl() {\n     public void init() {\n \n         if (isAuthorityRequired == null) {\n-            isAuthorityRequired = new HashMap<String, Boolean>();\n-            Enumeration pn = ConfigurationManager.propertyNames();\n+            isAuthorityRequired = new HashMap<>();\n+            List<String> pn = configurationService.getPropertyKeys();", "originalCommit": "ea15ca58feea44e0ebefea7e8dbd2889f4ae2324", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzNTcwNA==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r532935704", "bodyText": "Agreed.", "author": "mwoodiupui", "createdAt": "2020-11-30T22:09:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MTUxNw=="}], "type": "inlineReview", "revised_code": {"commit": "8a38b7d51cf2c77ab5aa760ce4fbe52afc4e0299", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/content/authority/MetadataAuthorityServiceImpl.java b/dspace-api/src/main/java/org/dspace/content/authority/MetadataAuthorityServiceImpl.java\nindex c6a97e92f..932d0d2c4 100644\n--- a/dspace-api/src/main/java/org/dspace/content/authority/MetadataAuthorityServiceImpl.java\n+++ b/dspace-api/src/main/java/org/dspace/content/authority/MetadataAuthorityServiceImpl.java\n\n@@ -85,52 +87,49 @@ public class MetadataAuthorityServiceImpl implements MetadataAuthorityService {\n \n         if (isAuthorityRequired == null) {\n             isAuthorityRequired = new HashMap<>();\n-            List<String> pn = configurationService.getPropertyKeys();\n-            final String authPrefix = \"authority.controlled.\";\n+            List<String> keys = configurationService.getPropertyKeys(AUTH_PREFIX);\n             Context context = new Context();\n             try {\n-                for (String key : pn) {\n-                    if (key.startsWith(authPrefix)) {\n-                        // field is expected to be \"schema.element.qualifier\"\n-                        String field = key.substring(authPrefix.length());\n-                        int dot = field.indexOf('.');\n-                        if (dot < 0) {\n-                            log.warn(\n-                                \"Skipping invalid MetadataAuthority configuration property: \" + key + \": does not \" +\n-                                    \"have schema.element.qualifier\");\n-                            continue;\n-                        }\n-                        String schema = field.substring(0, dot);\n-                        String element = field.substring(dot + 1);\n-                        String qualifier = null;\n-                        dot = element.indexOf('.');\n-                        if (dot >= 0) {\n-                            qualifier = element.substring(dot + 1);\n-                            element = element.substring(0, dot);\n-                        }\n-\n-\n-                        MetadataField metadataField = metadataFieldService\n-                            .findByElement(context, schema, element, qualifier);\n-                        if (metadataField == null) {\n-                            throw new IllegalStateException(\n-                                \"Error while configuring authority control, metadata field: \" + field + \" could not \" +\n-                                    \"be found\");\n-                        }\n-                        boolean ctl = configurationService.getBooleanProperty(key, true);\n-                        boolean req = configurationService.getBooleanProperty(\"authority.required.\" + field, false);\n-                        controlled.put(metadataField.toString(), ctl);\n-                        isAuthorityRequired.put(metadataField.toString(), req);\n-\n-                        // get minConfidence level for this field if any\n-                        int mci = readConfidence(\"authority.minconfidence.\" + field);\n-                        if (mci >= Choices.CF_UNSET) {\n-                            minConfidence.put(metadataField.toString(), mci);\n-                        }\n-                        log.debug(\n-                            \"Authority Control: For schema=\" + schema + \", elt=\" + element + \", qual=\" + qualifier +\n-                                \", controlled=\" + ctl + \", required=\" + req);\n+                for (String key : keys) {\n+                    // field is expected to be \"schema.element.qualifier\"\n+                    String field = key.substring(AUTH_PREFIX.length() + 1);\n+                    int dot = field.indexOf('.');\n+                    if (dot < 0) {\n+                        log.warn(\n+                            \"Skipping invalid MetadataAuthority configuration property: {}:\"\n+                                + \" does not have schema.element.qualifier\", key);\n+                        continue;\n+                    }\n+                    String schema = field.substring(0, dot);\n+                    String element = field.substring(dot + 1);\n+                    String qualifier = null;\n+                    dot = element.indexOf('.');\n+                    if (dot >= 0) {\n+                        qualifier = element.substring(dot + 1);\n+                        element = element.substring(0, dot);\n+                    }\n+\n+\n+                    MetadataField metadataField = metadataFieldService\n+                        .findByElement(context, schema, element, qualifier);\n+                    if (metadataField == null) {\n+                        throw new IllegalStateException(\n+                            \"Error while configuring authority control, metadata field: \" + field + \" could not \" +\n+                                \"be found\");\n+                    }\n+                    boolean ctl = configurationService.getBooleanProperty(key, true);\n+                    boolean req = configurationService.getBooleanProperty(\"authority.required.\" + field, false);\n+                    controlled.put(metadataField.toString(), ctl);\n+                    isAuthorityRequired.put(metadataField.toString(), req);\n+\n+                    // get minConfidence level for this field if any\n+                    int mci = readConfidence(\"authority.minconfidence.\" + field);\n+                    if (mci >= Choices.CF_UNSET) {\n+                        minConfidence.put(metadataField.toString(), mci);\n                     }\n+                    log.debug(\n+                        \"Authority Control: For schema=\" + schema + \", elt=\" + element + \", qual=\" + qualifier +\n+                            \", controlled=\" + ctl + \", required=\" + req);\n                 }\n             } catch (SQLException e) {\n                 log.error(\"Error reading authority config\", e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MzMzMg==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r532853332", "bodyText": "Again, this looks like it could be replaced by configurationService.getPropertyKeys(CONFIG_PREFIX); and simplify the for loop after it", "author": "tdonohue", "createdAt": "2020-11-30T19:42:30Z", "path": "dspace-api/src/main/java/org/dspace/content/crosswalk/MODSDisseminationCrosswalk.java", "diffHunk": "@@ -107,10 +110,9 @@\n     private static String aliases[] = null;\n \n     static {\n-        List<String> aliasList = new ArrayList<String>();\n-        Enumeration<String> pe = (Enumeration<String>) ConfigurationManager.propertyNames();\n-        while (pe.hasMoreElements()) {\n-            String key = pe.nextElement();\n+        List<String> aliasList = new ArrayList<>();\n+        List<String> pe = configurationService.getPropertyKeys();", "originalCommit": "ea15ca58feea44e0ebefea7e8dbd2889f4ae2324", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzNTc1Ng==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r532935756", "bodyText": "Agreed.", "author": "mwoodiupui", "createdAt": "2020-11-30T22:09:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MzMzMg=="}], "type": "inlineReview", "revised_code": {"commit": "8a38b7d51cf2c77ab5aa760ce4fbe52afc4e0299", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/content/crosswalk/MODSDisseminationCrosswalk.java b/dspace-api/src/main/java/org/dspace/content/crosswalk/MODSDisseminationCrosswalk.java\nindex 1cace56f7..182fcebe2 100644\n--- a/dspace-api/src/main/java/org/dspace/content/crosswalk/MODSDisseminationCrosswalk.java\n+++ b/dspace-api/src/main/java/org/dspace/content/crosswalk/MODSDisseminationCrosswalk.java\n\n@@ -111,11 +111,9 @@ public class MODSDisseminationCrosswalk extends SelfNamedPlugin\n \n     static {\n         List<String> aliasList = new ArrayList<>();\n-        List<String> pe = configurationService.getPropertyKeys();\n-        for (String key : pe) {\n-            if (key.startsWith(CONFIG_PREFIX)) {\n-                aliasList.add(key.substring(CONFIG_PREFIX.length()));\n-            }\n+        List<String> keys = configurationService.getPropertyKeys(CONFIG_PREFIX);\n+        for (String key : keys) {\n+            aliasList.add(key.substring(CONFIG_PREFIX.length()));\n         }\n         aliases = (String[]) aliasList.toArray(new String[aliasList.size()]);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1NDI4MA==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r532854280", "bodyText": "Again, looks like this could be configurationService.getPropertyKeys(propname); to simplify the for loop", "author": "tdonohue", "createdAt": "2020-11-30T19:44:04Z", "path": "dspace-api/src/main/java/org/dspace/content/crosswalk/QDCCrosswalk.java", "diffHunk": "@@ -137,11 +141,10 @@\n     private static String aliases[] = null;\n \n     static {\n-        List<String> aliasList = new ArrayList<String>();\n-        Enumeration<String> pe = (Enumeration<String>) ConfigurationManager.propertyNames();\n+        List<String> aliasList = new ArrayList<>();\n+        List<String> configKeys = configurationService.getPropertyKeys();", "originalCommit": "ea15ca58feea44e0ebefea7e8dbd2889f4ae2324", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzNTU3Ng==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r532935576", "bodyText": "Agreed.", "author": "mwoodiupui", "createdAt": "2020-11-30T22:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1NDI4MA=="}], "type": "inlineReview", "revised_code": {"commit": "8a38b7d51cf2c77ab5aa760ce4fbe52afc4e0299", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/content/crosswalk/QDCCrosswalk.java b/dspace-api/src/main/java/org/dspace/content/crosswalk/QDCCrosswalk.java\nindex 22ef80e3b..e579a0deb 100644\n--- a/dspace-api/src/main/java/org/dspace/content/crosswalk/QDCCrosswalk.java\n+++ b/dspace-api/src/main/java/org/dspace/content/crosswalk/QDCCrosswalk.java\n\n@@ -142,12 +142,10 @@ public class QDCCrosswalk extends SelfNamedPlugin\n \n     static {\n         List<String> aliasList = new ArrayList<>();\n-        List<String> configKeys = configurationService.getPropertyKeys();\n         String propname = CONFIG_PREFIX + \".properties.\";\n+        List<String> configKeys = configurationService.getPropertyKeys(propname);\n         for (String key : configKeys) {\n-            if (key.startsWith(propname)) {\n-                aliasList.add(key.substring(propname.length()));\n-            }\n+            aliasList.add(key.substring(propname.length()));\n         }\n         aliases = (String[]) aliasList.toArray(new String[aliasList.size()]);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1NDUyNg==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r532854526", "bodyText": "same here.. configurationService.getPropertyKeys(propname);", "author": "tdonohue", "createdAt": "2020-11-30T19:44:30Z", "path": "dspace-api/src/main/java/org/dspace/content/crosswalk/QDCCrosswalk.java", "diffHunk": "@@ -218,32 +221,31 @@ private void init()\n         }\n \n         // grovel DSpace configuration for namespaces\n-        List<Namespace> nsList = new ArrayList<Namespace>();\n-        Enumeration<String> pe = (Enumeration<String>) ConfigurationManager.propertyNames();\n+        List<Namespace> nsList = new ArrayList<>();\n+        List<String> configKeys = configurationService.getPropertyKeys();", "originalCommit": "ea15ca58feea44e0ebefea7e8dbd2889f4ae2324", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzNTQ3MQ==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r532935471", "bodyText": "Agreed.", "author": "mwoodiupui", "createdAt": "2020-11-30T22:08:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1NDUyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU4OTAzNg==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r533589036", "bodyText": "@mwoodiupui : Looks like you overlooked this one on accident.  Should be configurationService.getPropertyKeys(propname)", "author": "tdonohue", "createdAt": "2020-12-01T17:24:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1NDUyNg=="}], "type": "inlineReview", "revised_code": {"commit": "33907082e28f83b7e5b1df65ffd03d6348bc152b", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/content/crosswalk/QDCCrosswalk.java b/dspace-api/src/main/java/org/dspace/content/crosswalk/QDCCrosswalk.java\nindex 22ef80e3b..f648a87a0 100644\n--- a/dspace-api/src/main/java/org/dspace/content/crosswalk/QDCCrosswalk.java\n+++ b/dspace-api/src/main/java/org/dspace/content/crosswalk/QDCCrosswalk.java\n\n@@ -215,20 +213,18 @@ public class QDCCrosswalk extends SelfNamedPlugin\n \n         myName = getPluginInstanceName();\n         if (myName == null) {\n-            throw new CrosswalkInternalException(\"Cannot determine plugin name, \" +\n+            throw new CrosswalkInternalException(\"Cannot determine plugin name. \" +\n                                                      \"You must use PluginService to instantiate QDCCrosswalk so the \" +\n                                                      \"instance knows its name.\");\n         }\n \n         // grovel DSpace configuration for namespaces\n         List<Namespace> nsList = new ArrayList<>();\n-        List<String> configKeys = configurationService.getPropertyKeys();\n         String propname = CONFIG_PREFIX + \".namespace.\" + myName + \".\";\n+        List<String> configKeys = configurationService.getPropertyKeys(propname);\n         for (String key : configKeys) {\n-            if (key.startsWith(propname)) {\n-                nsList.add(Namespace.getNamespace(key.substring(propname.length()),\n-                                                  configurationService.getProperty(key)));\n-            }\n+            nsList.add(Namespace.getNamespace(key.substring(propname.length()),\n+                                                configurationService.getProperty(key)));\n         }\n         nsList.add(Namespace.XML_NAMESPACE);\n         namespaces = (Namespace[]) nsList.toArray(new Namespace[nsList.size()]);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1NjExMw==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r532856113", "bodyText": "Again, could use configurationService.getPropertyKeys(prefix);", "author": "tdonohue", "createdAt": "2020-11-30T19:47:02Z", "path": "dspace-api/src/main/java/org/dspace/content/crosswalk/XSLTCrosswalk.java", "diffHunk": "@@ -117,11 +116,12 @@\n         String suffix = CONFIG_STYLESHEET;\n \n         List<String> aliasList = new ArrayList<>();\n-        Enumeration<String> pe = (Enumeration<String>) ConfigurationManager.propertyNames();\n+        ConfigurationService configurationService\n+                = DSpaceServicesFactory.getInstance().getConfigurationService();\n+        List<String> configKeys = configurationService.getPropertyKeys();", "originalCommit": "ea15ca58feea44e0ebefea7e8dbd2889f4ae2324", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzNTQxMQ==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r532935411", "bodyText": "Agreed.", "author": "mwoodiupui", "createdAt": "2020-11-30T22:08:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1NjExMw=="}], "type": "inlineReview", "revised_code": {"commit": "8a38b7d51cf2c77ab5aa760ce4fbe52afc4e0299", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/content/crosswalk/XSLTCrosswalk.java b/dspace-api/src/main/java/org/dspace/content/crosswalk/XSLTCrosswalk.java\nindex d79ed06ee..1c85fd82c 100644\n--- a/dspace-api/src/main/java/org/dspace/content/crosswalk/XSLTCrosswalk.java\n+++ b/dspace-api/src/main/java/org/dspace/content/crosswalk/XSLTCrosswalk.java\n\n@@ -118,11 +118,11 @@ public abstract class XSLTCrosswalk extends SelfNamedPlugin {\n         List<String> aliasList = new ArrayList<>();\n         ConfigurationService configurationService\n                 = DSpaceServicesFactory.getInstance().getConfigurationService();\n-        List<String> configKeys = configurationService.getPropertyKeys();\n+        List<String> configKeys = configurationService.getPropertyKeys(prefix);\n \n         LOG.debug(\"XSLTCrosswalk: Looking for config prefix = {}\", prefix);\n         for (String key : configKeys) {\n-            if (key.startsWith(prefix) && key.endsWith(suffix)) {\n+            if (key.endsWith(suffix)) {\n                 LOG.debug(\"Getting XSLT plugin name from config line: {}\", key);\n                 aliasList.add(key.substring(prefix.length(), key.length() - suffix.length()));\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1NzIzOQ==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r532857239", "bodyText": "Again, could be configurationService.getPropertyKeys(nsPrefix); & simplify the for loop.", "author": "tdonohue", "createdAt": "2020-11-30T19:48:14Z", "path": "dspace-api/src/main/java/org/dspace/content/crosswalk/XSLTDisseminationCrosswalk.java", "diffHunk": "@@ -146,18 +149,17 @@ private void init()\n         // grovel for namespaces of the form:\n         //  crosswalk.diss.{PLUGIN_NAME}.namespace.{PREFIX} = {URI}\n         String nsPrefix = prefix + \"namespace.\";\n-        Enumeration<String> pe = (Enumeration<String>) ConfigurationManager.propertyNames();\n+        List<String> configKeys = configurationService.getPropertyKeys();", "originalCommit": "ea15ca58feea44e0ebefea7e8dbd2889f4ae2324", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzNTM0MQ==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r532935341", "bodyText": "Agreed.", "author": "mwoodiupui", "createdAt": "2020-11-30T22:08:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1NzIzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "8a38b7d51cf2c77ab5aa760ce4fbe52afc4e0299", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/content/crosswalk/XSLTDisseminationCrosswalk.java b/dspace-api/src/main/java/org/dspace/content/crosswalk/XSLTDisseminationCrosswalk.java\nindex b336f0de9..6c30c1b1a 100644\n--- a/dspace-api/src/main/java/org/dspace/content/crosswalk/XSLTDisseminationCrosswalk.java\n+++ b/dspace-api/src/main/java/org/dspace/content/crosswalk/XSLTDisseminationCrosswalk.java\n\n@@ -149,13 +149,11 @@ public class XSLTDisseminationCrosswalk\n         // grovel for namespaces of the form:\n         //  crosswalk.diss.{PLUGIN_NAME}.namespace.{PREFIX} = {URI}\n         String nsPrefix = prefix + \"namespace.\";\n-        List<String> configKeys = configurationService.getPropertyKeys();\n+        List<String> configKeys = configurationService.getPropertyKeys(nsPrefix);\n         List<Namespace> nsList = new ArrayList<>();\n         for (String key : configKeys) {\n-            if (key.startsWith(nsPrefix)) {\n-                nsList.add(Namespace.getNamespace(key.substring(nsPrefix.length()),\n-                                                  configurationService.getProperty(key)));\n-            }\n+            nsList.add(Namespace.getNamespace(key.substring(nsPrefix.length()),\n+                                              configurationService.getProperty(key)));\n         }\n         namespaces = nsList.toArray(new Namespace[nsList.size()]);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1OTI1OA==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r532859258", "bodyText": "Again could be configurationService.getPropertyKeys(CONFIG_XSD_PREFIX);", "author": "tdonohue", "createdAt": "2020-11-30T19:50:00Z", "path": "dspace-api/src/main/java/org/dspace/content/packager/METSManifest.java", "diffHunk": "@@ -190,21 +193,20 @@ public InputStream getInputStream(Element mdRef)\n     protected static String localSchemas;\n \n     static {\n-        String dspace_dir = ConfigurationManager.getProperty(\"dspace.dir\");\n+        String dspace_dir = configurationService.getProperty(\"dspace.dir\");\n         File xsdPath1 = new File(dspace_dir + \"/config/schemas/\");\n         File xsdPath2 = new File(dspace_dir + \"/config/\");\n \n-        Enumeration<String> pe = (Enumeration<String>) ConfigurationManager.propertyNames();\n-        StringBuffer result = new StringBuffer();\n-        while (pe.hasMoreElements()) {\n+        List<String> configKeys = configurationService.getPropertyKeys();", "originalCommit": "ea15ca58feea44e0ebefea7e8dbd2889f4ae2324", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzNTI5MQ==", "url": "https://github.com/DSpace/DSpace/pull/2957#discussion_r532935291", "bodyText": "Agreed.", "author": "mwoodiupui", "createdAt": "2020-11-30T22:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1OTI1OA=="}], "type": "inlineReview", "revised_code": {"commit": "8a38b7d51cf2c77ab5aa760ce4fbe52afc4e0299", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/content/packager/METSManifest.java b/dspace-api/src/main/java/org/dspace/content/packager/METSManifest.java\nindex 0bebf4bc6..ffdb30480 100644\n--- a/dspace-api/src/main/java/org/dspace/content/packager/METSManifest.java\n+++ b/dspace-api/src/main/java/org/dspace/content/packager/METSManifest.java\n\n@@ -197,7 +197,7 @@ public class METSManifest {\n         File xsdPath1 = new File(dspace_dir + \"/config/schemas/\");\n         File xsdPath2 = new File(dspace_dir + \"/config/\");\n \n-        List<String> configKeys = configurationService.getPropertyKeys();\n+        List<String> configKeys = configurationService.getPropertyKeys(CONFIG_XSD_PREFIX);\n         StringBuilder result = new StringBuilder();\n         for (String key : configKeys) {\n             // config lines have the format:\n"}}, {"oid": "3e16c7ed9e10e93d034de521e8ae3d63e544571f", "url": "https://github.com/DSpace/DSpace/commit/3e16c7ed9e10e93d034de521e8ae3d63e544571f", "message": "Merge remote-tracking branch 'upstream/main' into #2956", "committedDate": "2020-11-30T22:24:48Z", "type": "commit"}, {"oid": "8a38b7d51cf2c77ab5aa760ce4fbe52afc4e0299", "url": "https://github.com/DSpace/DSpace/commit/8a38b7d51cf2c77ab5aa760ce4fbe52afc4e0299", "message": "Address review comments.  #2956", "committedDate": "2020-11-30T22:26:50Z", "type": "commit"}, {"oid": "83bf65a407e23fc8e06a1689c06d07c02925aca8", "url": "https://github.com/DSpace/DSpace/commit/83bf65a407e23fc8e06a1689c06d07c02925aca8", "message": "Satisfy checkstyle.  #2956", "committedDate": "2020-12-01T00:50:13Z", "type": "commit"}, {"oid": "33907082e28f83b7e5b1df65ffd03d6348bc152b", "url": "https://github.com/DSpace/DSpace/commit/33907082e28f83b7e5b1df65ffd03d6348bc152b", "message": "Address one more review comment.  New unit test class to test it.", "committedDate": "2020-12-01T21:19:25Z", "type": "commit"}, {"oid": "bf4f5c5b5dccb9acb5f6a39c5a5b2f55ee58fc85", "url": "https://github.com/DSpace/DSpace/commit/bf4f5c5b5dccb9acb5f6a39c5a5b2f55ee58fc85", "message": "Merge remote-tracking branch 'upstream/main' into #2956", "committedDate": "2020-12-01T21:25:24Z", "type": "commit"}, {"oid": "6c228076190d15ac928e8d1bd1a0efd870551635", "url": "https://github.com/DSpace/DSpace/commit/6c228076190d15ac928e8d1bd1a0efd870551635", "message": "Merge branch 'main' into #2956", "committedDate": "2020-12-02T13:30:47Z", "type": "commit"}]}