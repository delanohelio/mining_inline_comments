{"pr_number": 3098, "pr_title": "Enforce that facet \"filter-operator\" is a valid value", "pr_createdAt": "2020-12-17T14:10:30Z", "pr_url": "https://github.com/DSpace/DSpace/pull/3098", "timeline": [{"oid": "11ad7197300b2883927a6b994a9938500c78e081", "url": "https://github.com/DSpace/DSpace/commit/11ad7197300b2883927a6b994a9938500c78e081", "message": "75361: Enforce that facet \"filter-operator\" is a valid value + IT", "committedDate": "2020-12-17T11:45:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM2MjA2MA==", "url": "https://github.com/DSpace/DSpace/pull/3098#discussion_r557362060", "bodyText": "I suggest to return an UnprocessableEntityException here", "author": "abollini", "createdAt": "2021-01-14T12:32:55Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/parameter/resolver/SearchFilterResolver.java", "diffHunk": "@@ -61,6 +65,19 @@ public Object resolveArgument(final MethodParameter parameter, final ModelAndVie\n         }\n     }\n \n+    private void checkIfValidOperator(String filterOperator) {\n+        if (StringUtils.isNotBlank(filterOperator)) {\n+            if (!ALLOWED_SEARCH_OPERATORS.contains(filterOperator.trim())) {\n+                throw new DSpaceBadRequestException(\n+                    \"The operator can't be \\\"\" + filterOperator + \"\\\", must be the of one of: \" +\n+                    String.join(\", \", ALLOWED_SEARCH_OPERATORS));\n+            }\n+        } else {\n+            throw new DSpaceBadRequestException(", "originalCommit": "11ad7197300b2883927a6b994a9938500c78e081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgwODQyNg==", "url": "https://github.com/DSpace/DSpace/pull/3098#discussion_r564808426", "bodyText": "this comment has been not yet processed", "author": "abollini", "createdAt": "2021-01-26T20:23:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM2MjA2MA=="}], "type": "inlineReview", "revised_code": {"commit": "9ffef90cedf82b922c51d7539e4ef7ead3d27edf", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/parameter/resolver/SearchFilterResolver.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/parameter/resolver/SearchFilterResolver.java\nindex 88900538a..2a449a98f 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/parameter/resolver/SearchFilterResolver.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/parameter/resolver/SearchFilterResolver.java\n\n@@ -68,7 +69,7 @@ public class SearchFilterResolver implements HandlerMethodArgumentResolver {\n     private void checkIfValidOperator(String filterOperator) {\n         if (StringUtils.isNotBlank(filterOperator)) {\n             if (!ALLOWED_SEARCH_OPERATORS.contains(filterOperator.trim())) {\n-                throw new DSpaceBadRequestException(\n+                throw new UnprocessableEntityException(\n                     \"The operator can't be \\\"\" + filterOperator + \"\\\", must be the of one of: \" +\n                     String.join(\", \", ALLOWED_SEARCH_OPERATORS));\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM2MjQ2NQ==", "url": "https://github.com/DSpace/DSpace/pull/3098#discussion_r557362465", "bodyText": "this should be a 422 (please fix also the comment)", "author": "abollini", "createdAt": "2021-01-14T12:33:46Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java", "diffHunk": "@@ -2895,6 +3197,108 @@ public void discoverSearchObjectsWithQueryOperatorNotAuthority() throws Exceptio\n \n     }\n \n+    @Test\n+    public void discoverSearchObjectsWithQueryOperatorNotAuthority() throws Exception {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1).withName(\"Collection 1\").build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1).withName(\"Collection 2\").build();\n+        //2. Three public items that are readable by Anonymous with different subjects\n+        Item publicItem1 = ItemBuilder.createItem(context, col1)\n+                                      .withTitle(\"Test\")\n+                                      .withIssueDate(\"2010-10-17\")\n+                                      .withAuthor(\"Smith, Donald\")\n+                                      .withSubject(\"ExtraEntry\")\n+                                      .build();\n+\n+        Item publicItem2 = ItemBuilder.createItem(context, col2)\n+                                      .withTitle(\"Test 2\")\n+                                      .withIssueDate(\"1990-02-13\")\n+                                      .withAuthor(\"Smith, Maria\").withAuthor(\"Doe, Jane\").withAuthor(\"Testing, Works\")\n+                                      .withSubject(\"TestingForMore\").withSubject(\"ExtraEntry\")\n+                                      .build();\n+\n+        Item publicItem3 = ItemBuilder.createItem(context, col2)\n+                                      .withTitle(\"Public item 2\")\n+                                      .withIssueDate(\"2010-02-13\")\n+                                      .withAuthor(\"Smith, Maria\").withAuthor(\"Doe, Jane\").withAuthor(\"test,test\")\n+                                      .withAuthor(\"test2, test2\").withAuthor(\"Maybe, Maybe\")\n+                                      .withSubject(\"AnotherTest\").withSubject(\"TestingForMore\")\n+                                      .withSubject(\"ExtraEntry\")\n+                                      .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        UUID scope = col2.getID();\n+        //** WHEN **\n+        //An anonymous user browses this endpoint to find the the objects in the system\n+        //With the given search filter\n+        getClient().perform(get(\"/api/discover/search/objects\")\n+            .param(\"f.title\", \"test,notauthority\"))\n+                   //** THEN **\n+                   //The status has to be 200 OK\n+                   .andExpect(status().isOk())\n+                   //The type has to be 'discover'\n+                   .andExpect(jsonPath(\"$.type\", is(\"discover\")))\n+                   //The page object needs to look like this\n+                   .andExpect(jsonPath(\"$._embedded.searchResult.page\", is(\n+                       PageMatcher.pageEntry(0, 20)\n+                                                                          )))\n+                   //The search results have to contain the items that match the searchFilter\n+                   .andExpect(jsonPath(\"$._embedded.searchResult._embedded.objects\", Matchers.hasItem(\n+                       SearchResultMatcher.matchOnItemName(\"item\", \"items\", \"Public item 2\")\n+                                                                                                     )))\n+                   //These facets have to show up in the embedded.facets section as well with the given hasMore property\n+                   // because we don't exceed their default limit for a hasMore true (the default is 10)\n+                   .andExpect(jsonPath(\"$._embedded.facets\", Matchers.containsInAnyOrder(\n+                       FacetEntryMatcher.authorFacet(false),\n+                       FacetEntryMatcher.entityTypeFacet(false),\n+                       FacetEntryMatcher.subjectFacet(false),\n+                       FacetEntryMatcher.dateIssuedFacet(false),\n+                       FacetEntryMatcher.hasContentInOriginalBundleFacet(false)\n+                                                                                        )))\n+                   //There always needs to be a self link available\n+                   .andExpect(jsonPath(\"$._links.self.href\", containsString(\"/api/discover/search/objects\")))\n+        ;\n+\n+    }\n+\n+    @Test\n+    public void discoverSearchObjectsWithMissingQueryOperator() throws Exception {\n+        //** WHEN **\n+        // An anonymous user browses this endpoint to find the the objects in the system\n+        // With the given search filter where there is the filter operator missing in the value (must be of form\n+        // <:filter-value>,<:filter-operator>)\n+        getClient().perform(get(\"/api/discover/search/objects\")\n+            .param(\"f.title\", \"test\"))\n+                   //** THEN **\n+                   //Will result in 404 status because of missing filter operator\n+                   .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void discoverSearchObjectsWithNotValidQueryOperator() throws Exception {\n+        //** WHEN **\n+        // An anonymous user browses this endpoint to find the the objects in the system\n+        // With the given search filter where there is a non-valid filter operator given (must be of form\n+        // <:filter-value>,<:filter-operator> where the filter operator is one of: \u201ccontains\u201d, \u201cnotcontains\u201d, \"equals\"\n+        // \u201cnotequals\u201d, \u201cauthority\u201d, \u201cnotauthority\u201d, \"query\u201d); see enum RestSearchOperator\n+        getClient().perform(get(\"/api/discover/search/objects\")\n+            .param(\"f.title\", \"test,operator\"))\n+                   //** THEN **\n+                   //Will result in 404 status because of non-valid filter operator\n+                   .andExpect(status().isBadRequest());", "originalCommit": "11ad7197300b2883927a6b994a9938500c78e081", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ffef90cedf82b922c51d7539e4ef7ead3d27edf", "chunk": "diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java\nindex d59a3dc59..d8e298b83 100644\n--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java\n+++ b/dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java\n\n@@ -3281,7 +3281,7 @@ public class DiscoveryRestControllerIT extends AbstractControllerIntegrationTest\n         getClient().perform(get(\"/api/discover/search/objects\")\n             .param(\"f.title\", \"test\"))\n                    //** THEN **\n-                   //Will result in 404 status because of missing filter operator\n+                   //Will result in 400 status because of missing filter operator\n                    .andExpect(status().isBadRequest());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM2MjU1Mg==", "url": "https://github.com/DSpace/DSpace/pull/3098#discussion_r557362552", "bodyText": "please update the comment to reflect 400", "author": "abollini", "createdAt": "2021-01-14T12:33:57Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java", "diffHunk": "@@ -2895,6 +3197,108 @@ public void discoverSearchObjectsWithQueryOperatorNotAuthority() throws Exceptio\n \n     }\n \n+    @Test\n+    public void discoverSearchObjectsWithQueryOperatorNotAuthority() throws Exception {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1).withName(\"Collection 1\").build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1).withName(\"Collection 2\").build();\n+        //2. Three public items that are readable by Anonymous with different subjects\n+        Item publicItem1 = ItemBuilder.createItem(context, col1)\n+                                      .withTitle(\"Test\")\n+                                      .withIssueDate(\"2010-10-17\")\n+                                      .withAuthor(\"Smith, Donald\")\n+                                      .withSubject(\"ExtraEntry\")\n+                                      .build();\n+\n+        Item publicItem2 = ItemBuilder.createItem(context, col2)\n+                                      .withTitle(\"Test 2\")\n+                                      .withIssueDate(\"1990-02-13\")\n+                                      .withAuthor(\"Smith, Maria\").withAuthor(\"Doe, Jane\").withAuthor(\"Testing, Works\")\n+                                      .withSubject(\"TestingForMore\").withSubject(\"ExtraEntry\")\n+                                      .build();\n+\n+        Item publicItem3 = ItemBuilder.createItem(context, col2)\n+                                      .withTitle(\"Public item 2\")\n+                                      .withIssueDate(\"2010-02-13\")\n+                                      .withAuthor(\"Smith, Maria\").withAuthor(\"Doe, Jane\").withAuthor(\"test,test\")\n+                                      .withAuthor(\"test2, test2\").withAuthor(\"Maybe, Maybe\")\n+                                      .withSubject(\"AnotherTest\").withSubject(\"TestingForMore\")\n+                                      .withSubject(\"ExtraEntry\")\n+                                      .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        UUID scope = col2.getID();\n+        //** WHEN **\n+        //An anonymous user browses this endpoint to find the the objects in the system\n+        //With the given search filter\n+        getClient().perform(get(\"/api/discover/search/objects\")\n+            .param(\"f.title\", \"test,notauthority\"))\n+                   //** THEN **\n+                   //The status has to be 200 OK\n+                   .andExpect(status().isOk())\n+                   //The type has to be 'discover'\n+                   .andExpect(jsonPath(\"$.type\", is(\"discover\")))\n+                   //The page object needs to look like this\n+                   .andExpect(jsonPath(\"$._embedded.searchResult.page\", is(\n+                       PageMatcher.pageEntry(0, 20)\n+                                                                          )))\n+                   //The search results have to contain the items that match the searchFilter\n+                   .andExpect(jsonPath(\"$._embedded.searchResult._embedded.objects\", Matchers.hasItem(\n+                       SearchResultMatcher.matchOnItemName(\"item\", \"items\", \"Public item 2\")\n+                                                                                                     )))\n+                   //These facets have to show up in the embedded.facets section as well with the given hasMore property\n+                   // because we don't exceed their default limit for a hasMore true (the default is 10)\n+                   .andExpect(jsonPath(\"$._embedded.facets\", Matchers.containsInAnyOrder(\n+                       FacetEntryMatcher.authorFacet(false),\n+                       FacetEntryMatcher.entityTypeFacet(false),\n+                       FacetEntryMatcher.subjectFacet(false),\n+                       FacetEntryMatcher.dateIssuedFacet(false),\n+                       FacetEntryMatcher.hasContentInOriginalBundleFacet(false)\n+                                                                                        )))\n+                   //There always needs to be a self link available\n+                   .andExpect(jsonPath(\"$._links.self.href\", containsString(\"/api/discover/search/objects\")))\n+        ;\n+\n+    }\n+\n+    @Test\n+    public void discoverSearchObjectsWithMissingQueryOperator() throws Exception {\n+        //** WHEN **\n+        // An anonymous user browses this endpoint to find the the objects in the system\n+        // With the given search filter where there is the filter operator missing in the value (must be of form\n+        // <:filter-value>,<:filter-operator>)\n+        getClient().perform(get(\"/api/discover/search/objects\")\n+            .param(\"f.title\", \"test\"))\n+                   //** THEN **\n+                   //Will result in 404 status because of missing filter operator", "originalCommit": "11ad7197300b2883927a6b994a9938500c78e081", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9ffef90cedf82b922c51d7539e4ef7ead3d27edf", "chunk": "diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java\nindex d59a3dc59..d8e298b83 100644\n--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java\n+++ b/dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java\n\n@@ -3281,7 +3281,7 @@ public class DiscoveryRestControllerIT extends AbstractControllerIntegrationTest\n         getClient().perform(get(\"/api/discover/search/objects\")\n             .param(\"f.title\", \"test\"))\n                    //** THEN **\n-                   //Will result in 404 status because of missing filter operator\n+                   //Will result in 400 status because of missing filter operator\n                    .andExpect(status().isBadRequest());\n     }\n \n"}}, {"oid": "9ffef90cedf82b922c51d7539e4ef7ead3d27edf", "url": "https://github.com/DSpace/DSpace/commit/9ffef90cedf82b922c51d7539e4ef7ead3d27edf", "message": "76244: Feedback PR #3093 - Exceptions", "committedDate": "2021-01-20T15:25:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgwODkwNQ==", "url": "https://github.com/DSpace/DSpace/pull/3098#discussion_r564808905", "bodyText": "this should be 422 as well as agreed in the rest contract", "author": "abollini", "createdAt": "2021-01-26T20:24:31Z", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java", "diffHunk": "@@ -2895,6 +3197,108 @@ public void discoverSearchObjectsWithQueryOperatorNotAuthority() throws Exceptio\n \n     }\n \n+    @Test\n+    public void discoverSearchObjectsWithQueryOperatorNotAuthority() throws Exception {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1).withName(\"Collection 1\").build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1).withName(\"Collection 2\").build();\n+        //2. Three public items that are readable by Anonymous with different subjects\n+        Item publicItem1 = ItemBuilder.createItem(context, col1)\n+                                      .withTitle(\"Test\")\n+                                      .withIssueDate(\"2010-10-17\")\n+                                      .withAuthor(\"Smith, Donald\")\n+                                      .withSubject(\"ExtraEntry\")\n+                                      .build();\n+\n+        Item publicItem2 = ItemBuilder.createItem(context, col2)\n+                                      .withTitle(\"Test 2\")\n+                                      .withIssueDate(\"1990-02-13\")\n+                                      .withAuthor(\"Smith, Maria\").withAuthor(\"Doe, Jane\").withAuthor(\"Testing, Works\")\n+                                      .withSubject(\"TestingForMore\").withSubject(\"ExtraEntry\")\n+                                      .build();\n+\n+        Item publicItem3 = ItemBuilder.createItem(context, col2)\n+                                      .withTitle(\"Public item 2\")\n+                                      .withIssueDate(\"2010-02-13\")\n+                                      .withAuthor(\"Smith, Maria\").withAuthor(\"Doe, Jane\").withAuthor(\"test,test\")\n+                                      .withAuthor(\"test2, test2\").withAuthor(\"Maybe, Maybe\")\n+                                      .withSubject(\"AnotherTest\").withSubject(\"TestingForMore\")\n+                                      .withSubject(\"ExtraEntry\")\n+                                      .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        UUID scope = col2.getID();\n+        //** WHEN **\n+        //An anonymous user browses this endpoint to find the the objects in the system\n+        //With the given search filter\n+        getClient().perform(get(\"/api/discover/search/objects\")\n+            .param(\"f.title\", \"test,notauthority\"))\n+                   //** THEN **\n+                   //The status has to be 200 OK\n+                   .andExpect(status().isOk())\n+                   //The type has to be 'discover'\n+                   .andExpect(jsonPath(\"$.type\", is(\"discover\")))\n+                   //The page object needs to look like this\n+                   .andExpect(jsonPath(\"$._embedded.searchResult.page\", is(\n+                       PageMatcher.pageEntry(0, 20)\n+                                                                          )))\n+                   //The search results have to contain the items that match the searchFilter\n+                   .andExpect(jsonPath(\"$._embedded.searchResult._embedded.objects\", Matchers.hasItem(\n+                       SearchResultMatcher.matchOnItemName(\"item\", \"items\", \"Public item 2\")\n+                                                                                                     )))\n+                   //These facets have to show up in the embedded.facets section as well with the given hasMore property\n+                   // because we don't exceed their default limit for a hasMore true (the default is 10)\n+                   .andExpect(jsonPath(\"$._embedded.facets\", Matchers.containsInAnyOrder(\n+                       FacetEntryMatcher.authorFacet(false),\n+                       FacetEntryMatcher.entityTypeFacet(false),\n+                       FacetEntryMatcher.subjectFacet(false),\n+                       FacetEntryMatcher.dateIssuedFacet(false),\n+                       FacetEntryMatcher.hasContentInOriginalBundleFacet(false)\n+                                                                                        )))\n+                   //There always needs to be a self link available\n+                   .andExpect(jsonPath(\"$._links.self.href\", containsString(\"/api/discover/search/objects\")))\n+        ;\n+\n+    }\n+\n+    @Test\n+    public void discoverSearchObjectsWithMissingQueryOperator() throws Exception {\n+        //** WHEN **\n+        // An anonymous user browses this endpoint to find the the objects in the system\n+        // With the given search filter where there is the filter operator missing in the value (must be of form\n+        // <:filter-value>,<:filter-operator>)\n+        getClient().perform(get(\"/api/discover/search/objects\")\n+            .param(\"f.title\", \"test\"))\n+                   //** THEN **\n+                   //Will result in 400 status because of missing filter operator\n+                   .andExpect(status().isBadRequest());", "originalCommit": "9ffef90cedf82b922c51d7539e4ef7ead3d27edf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8fcec01d5df1660d429547e0767146dfd4b3638c", "chunk": "diff --git a/dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java b/dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java\nindex d8e298b83..8b9c63367 100644\n--- a/dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java\n+++ b/dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java\n\n@@ -3281,8 +3281,8 @@ public class DiscoveryRestControllerIT extends AbstractControllerIntegrationTest\n         getClient().perform(get(\"/api/discover/search/objects\")\n             .param(\"f.title\", \"test\"))\n                    //** THEN **\n-                   //Will result in 400 status because of missing filter operator\n-                   .andExpect(status().isBadRequest());\n+                   //Will result in 422 status because of missing filter operator\n+                   .andExpect(status().isUnprocessableEntity());\n     }\n \n     @Test\n"}}, {"oid": "8fcec01d5df1660d429547e0767146dfd4b3638c", "url": "https://github.com/DSpace/DSpace/commit/8fcec01d5df1660d429547e0767146dfd4b3638c", "message": "76244: Feedback PR #3093 - Exceptions to match RestContract", "committedDate": "2021-01-27T10:01:32Z", "type": "commit"}]}