{"pr_number": 2664, "pr_title": "DS-626 : Exchange usage data with IRUS", "pr_createdAt": "2020-02-10T13:07:32Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2664", "timeline": [{"oid": "46a3407642f5aca0535edbfecb6892cde6623b1d", "url": "https://github.com/DSpace/DSpace/commit/46a3407642f5aca0535edbfecb6892cde6623b1d", "message": "67688: Add IRUS patch to DSpace 7", "committedDate": "2020-01-09T12:19:43Z", "type": "commit"}, {"oid": "c6ce9aaf104193df115b20ec51c717856055e1f6", "url": "https://github.com/DSpace/DSpace/commit/c6ce9aaf104193df115b20ec51c717856055e1f6", "message": "67668: Fix to the postgres sql file", "committedDate": "2020-01-09T12:45:47Z", "type": "commit"}, {"oid": "a1009276c30f75d030ee83c4a7fee919280ee8ad", "url": "https://github.com/DSpace/DSpace/commit/a1009276c30f75d030ee83c4a7fee919280ee8ad", "message": "67668: psql fix", "committedDate": "2020-01-09T12:58:31Z", "type": "commit"}, {"oid": "74274ccafc864a33b7e62b939e584b7f3a0b2674", "url": "https://github.com/DSpace/DSpace/commit/74274ccafc864a33b7e62b939e584b7f3a0b2674", "message": "68273: Making types for which IRUS events should be sent configurable", "committedDate": "2020-01-17T12:33:34Z", "type": "commit"}, {"oid": "0ee7ec9bef0c32cd4aedd16b20a0f9098e5e0e38", "url": "https://github.com/DSpace/DSpace/commit/0ee7ec9bef0c32cd4aedd16b20a0f9098e5e0e38", "message": "67668: Refactoring code, adding tests and typedocs", "committedDate": "2020-01-31T11:16:07Z", "type": "commit"}, {"oid": "2365ef521d76feef3e291f472f654c20d71f8341", "url": "https://github.com/DSpace/DSpace/commit/2365ef521d76feef3e291f472f654c20d71f8341", "message": "68214: cleaned up stats.cfg, provided configuration for the COUNTER robots list and disabled the IRUS integration by default", "committedDate": "2020-01-31T16:44:02Z", "type": "commit"}, {"oid": "b473cc1b407c68b4b9a158cf14da065f16cc48b0", "url": "https://github.com/DSpace/DSpace/commit/b473cc1b407c68b4b9a158cf14da065f16cc48b0", "message": "Update to the script service to ensure scripts are reloaded every time", "committedDate": "2020-02-05T09:21:24Z", "type": "commit"}, {"oid": "7a37080c982d587be738c851307cc94a9e1dd057", "url": "https://github.com/DSpace/DSpace/commit/7a37080c982d587be738c851307cc94a9e1dd057", "message": "Fixing RetryOpenUrl and tests due to scriptservice change", "committedDate": "2020-02-05T11:01:17Z", "type": "commit"}, {"oid": "21621ae6d20e531c574c5734c26f76c5c2761dfa", "url": "https://github.com/DSpace/DSpace/commit/21621ae6d20e531c574c5734c26f76c5c2761dfa", "message": "Merge branch 'w2p-67668_Porting-IRUS-patch-to-DSpace-7' of https://github.com/atmire/DSpace into w2p-67668_Porting-IRUS-patch-to-DSpace-7", "committedDate": "2020-02-05T11:01:37Z", "type": "commit"}, {"oid": "c665ecf2c61dfe2905cec1981e35a506ae0e527f", "url": "https://github.com/DSpace/DSpace/commit/c665ecf2c61dfe2905cec1981e35a506ae0e527f", "message": "68716: Implement feedback", "committedDate": "2020-02-10T10:53:40Z", "type": "commit"}, {"oid": "25362cb704a20b5c710f9f08f6912bd60b89ae0f", "url": "https://github.com/DSpace/DSpace/commit/25362cb704a20b5c710f9f08f6912bd60b89ae0f", "message": "68716: fix typo in script class name", "committedDate": "2020-02-10T10:58:12Z", "type": "commit"}, {"oid": "f3003fbf84f3562fd203b588a587e8288069b547", "url": "https://github.com/DSpace/DSpace/commit/f3003fbf84f3562fd203b588a587e8288069b547", "message": "68214: cleaned up stats.cfg", "committedDate": "2020-02-10T12:41:50Z", "type": "commit"}, {"oid": "0615c5dec9e96b6d63ed80f826eade571f72ab67", "url": "https://github.com/DSpace/DSpace/commit/0615c5dec9e96b6d63ed80f826eade571f72ab67", "message": "Merge remote-tracking branch 'upstream/master' into DS-626\n\n# Conflicts:\n#\tdspace/config/spring/api/core-factory-services.xml\n#\tdspace/config/spring/api/core-services.xml\n#\tdspace/src/main/config/build.xml", "committedDate": "2020-02-10T12:44:54Z", "type": "commit"}, {"oid": "7e099a9b29f0ee9cf4e9fe4b918be4163f91d7ff", "url": "https://github.com/DSpace/DSpace/commit/7e099a9b29f0ee9cf4e9fe4b918be4163f91d7ff", "message": "Fix tests for upgraded mockito version", "committedDate": "2020-02-11T12:03:37Z", "type": "commit"}, {"oid": "886d2fe4de2a6e07aff667adcd3fd9cef060b3ab", "url": "https://github.com/DSpace/DSpace/commit/886d2fe4de2a6e07aff667adcd3fd9cef060b3ab", "message": "Merge remote-tracking branch 'upstream/master' into DS-626", "committedDate": "2020-03-11T10:51:23Z", "type": "commit"}, {"oid": "dc42d3e9b4b0c6d95ca33383a27346692c825d7c", "url": "https://github.com/DSpace/DSpace/commit/dc42d3e9b4b0c6d95ca33383a27346692c825d7c", "message": "69609: Process IRUS DSpace 7 PR feedback", "committedDate": "2020-03-12T10:37:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE2NjQ1OQ==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r420166459", "bodyText": "This configuration (dspace.url) no longer exists in DSpace 7.  I suspect it should be the dspace.ui.url here.  But, be aware that the URL you are building in this method will not exist in the new DSpace UI.  However, it likely should be redirected to the new Bitstream URL automatically.", "author": "tdonohue", "createdAt": "2020-05-05T14:45:53Z", "path": "dspace-api/src/main/java/org/dspace/statistics/export/processor/BitstreamEventProcessor.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export.processor;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.sql.SQLException;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.util.Util;\n+import org.dspace.content.Bitstream;\n+import org.dspace.content.Bundle;\n+import org.dspace.content.Item;\n+import org.dspace.core.Context;\n+import org.dspace.statistics.util.SpiderDetector;\n+\n+/**\n+ * Processor that handles Bitstream events from the ExportUsageEventListener\n+ */\n+public class BitstreamEventProcessor extends ExportEventProcessor {\n+\n+    private Item item;\n+    private Bitstream bitstream;\n+\n+    /**\n+     * Creates a new BitstreamEventProcessor that will set the params and obtain the parent item of the bitstream\n+     * @param context\n+     * @param request\n+     * @param bitstream\n+     * @throws SQLException\n+     */\n+    public BitstreamEventProcessor(Context context, HttpServletRequest request, Bitstream bitstream)\n+            throws SQLException {\n+        super(context, request);\n+        this.bitstream = bitstream;\n+        this.item = getItem();\n+    }\n+\n+    /**\n+     * Returns the parent item of the bitsream\n+     * @return parent item of the bitstream\n+     * @throws SQLException\n+     */\n+    private Item getItem() throws SQLException {\n+        if (0 < bitstream.getBundles().size()) {\n+            if (!SpiderDetector.isSpider(request)) {\n+                Bundle bundle = bitstream.getBundles().get(0);\n+                if (bundle.getName() == null || !bundle.getName().equals(\"ORIGINAL\")) {\n+                    return null;\n+                }\n+\n+                if (0 < bundle.getItems().size()) {\n+                    Item item = bundle.getItems().get(0);\n+                    return item;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Process the event\n+     * Check if the item should be processed\n+     * Create the url to be transmitted based on item and bitstream data\n+     * @throws SQLException\n+     * @throws IOException\n+     */\n+    public void processEvent() throws SQLException, IOException {\n+        if (shouldProcessItem(item)) {\n+            String baseParam = getBaseParameters(item);\n+            String fullParam = addObjectSpecificData(baseParam, item, bitstream);\n+            processObject(fullParam);\n+        }\n+    }\n+\n+    /**\n+     * Adds additional item and bitstream data to the url\n+     * @param string to which the additional data needs to be added\n+     * @param item\n+     * @param bitstream\n+     * @return the string with additional data\n+     * @throws UnsupportedEncodingException\n+     */\n+    protected String addObjectSpecificData(final String string, Item item, Bitstream bitstream)\n+            throws UnsupportedEncodingException {\n+        StringBuilder data = new StringBuilder(string);\n+\n+        String bitstreamInfo = getBitstreamInfo(item, bitstream);\n+        data.append(\"&\").append(URLEncoder.encode(\"svc_dat\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(bitstreamInfo, UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"rft_dat\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(BITSTREAM_DOWNLOAD, UTF_8));\n+\n+        return data.toString();\n+    }\n+\n+    /**\n+     * Get Bitstream info used for the url\n+     * @param item\n+     * @param bitstream\n+     * @return bitstream info\n+     */\n+    private String getBitstreamInfo(final Item item, final Bitstream bitstream) {\n+\n+        StringBuilder sb = new StringBuilder(configurationService.getProperty(\"dspace.url\"));", "originalCommit": "dc42d3e9b4b0c6d95ca33383a27346692c825d7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5NDIzMw==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r431194233", "bodyText": "Updated the url to the new one.", "author": "YanaDePauw", "createdAt": "2020-05-27T14:46:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE2NjQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "60c4a0777ff57b9cc634e9eaacfea3937a685708", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/statistics/export/processor/BitstreamEventProcessor.java b/dspace-api/src/main/java/org/dspace/statistics/export/processor/BitstreamEventProcessor.java\nindex b32f1bd6f..e0dafe82c 100644\n--- a/dspace-api/src/main/java/org/dspace/statistics/export/processor/BitstreamEventProcessor.java\n+++ b/dspace-api/src/main/java/org/dspace/statistics/export/processor/BitstreamEventProcessor.java\n\n@@ -30,6 +30,7 @@ public class BitstreamEventProcessor extends ExportEventProcessor {\n \n     /**\n      * Creates a new BitstreamEventProcessor that will set the params and obtain the parent item of the bitstream\n+     *\n      * @param context\n      * @param request\n      * @param bitstream\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE2OTcyMw==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r420169723", "bodyText": "FYI dspace.hostname config no longer exists in our configuration.  It has no replacement as there is no longer a guarantee of a single hostname.  For OAI-PMH urls though, we now use a oai.identifier.prefix configuration, which likely is what you want here. There is also now a Utils.getHostname() method that can be used based on a passed in URL.  See the changes made in PR #2657", "author": "tdonohue", "createdAt": "2020-05-05T14:49:52Z", "path": "dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export.processor;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.apache.commons.codec.CharEncoding;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.log4j.Logger;\n+import org.dspace.content.DCDate;\n+import org.dspace.content.Entity;\n+import org.dspace.content.EntityType;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.EntityService;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.statistics.export.factory.OpenURLTrackerLoggerServiceFactory;\n+import org.dspace.statistics.export.service.OpenUrlService;\n+\n+/**\n+ * Abstract export event processor that contains all shared logic to handle both Items and Bitstreams\n+ * from the ExportUsageEventListener\n+ */\n+public abstract class ExportEventProcessor {\n+\n+    private static Logger log = Logger.getLogger(ExportEventProcessor.class);\n+\n+    /* The metadata field which is to be checked for */\n+    protected String trackerType;\n+\n+    /* A list of entity types that will be processed */\n+    protected List<String> entityTypes;\n+    protected static final String ENTITY_TYPE_DEFAULT = \"Publication\";\n+\n+    /* A list of values the type might have */\n+    protected List<String> trackerValues;\n+\n+    /* The base url of the tracker */\n+    protected String baseUrl;\n+\n+    protected String trackerUrlVersion;\n+\n+    protected static final String ITEM_VIEW = \"Investigation\";\n+    protected static final String BITSTREAM_DOWNLOAD = \"Request\";\n+\n+    protected static ConfigurationService configurationService;\n+\n+    protected static EntityTypeService entityTypeService;\n+    protected static EntityService entityService;\n+\n+    protected static OpenUrlService openUrlService;\n+\n+    protected final static String UTF_8 = CharEncoding.UTF_8;\n+\n+\n+    protected Context context;\n+    protected HttpServletRequest request;\n+    protected ItemService itemService;\n+\n+    /**\n+     * Creates a new ExportEventProcessor based on the params and initializes the services\n+     *\n+     * @param context\n+     * @param request\n+     */\n+    ExportEventProcessor(Context context, HttpServletRequest request) {\n+        this.context = context;\n+        this.request = request;\n+        initServices();\n+    }\n+\n+    /**\n+     * Processes the event\n+     *\n+     * @throws SQLException\n+     * @throws IOException\n+     */\n+    public abstract void processEvent() throws SQLException, IOException;\n+\n+    /**\n+     * Process the url obtained from the object to be transmitted\n+     *\n+     * @param urlParameters\n+     * @throws IOException\n+     * @throws SQLException\n+     */\n+    protected void processObject(String urlParameters) throws IOException, SQLException {\n+\n+        openUrlService.processUrl(context, baseUrl + \"?\" + urlParameters);\n+    }\n+\n+    /**\n+     * Get the base parameters for the url to be transmitted\n+     *\n+     * @param item\n+     * @return the parameter string to be used in the url\n+     * @throws UnsupportedEncodingException\n+     */\n+    protected String getBaseParameters(Item item)\n+            throws UnsupportedEncodingException {\n+\n+        //We have a valid url collect the rest of the data\n+        String clientIP = request.getRemoteAddr();\n+        if (configurationService.getBooleanProperty(\"useProxies\", false) && request\n+                .getHeader(\"X-Forwarded-For\") != null) {\n+            /* This header is a comma delimited list */\n+            for (String xfip : request.getHeader(\"X-Forwarded-For\").split(\",\")) {\n+                /* proxy itself will sometime populate this header with the same value in\n+                    remote address. ordering in spec is vague, we'll just take the last\n+                    not equal to the proxy\n+                */\n+                if (!request.getHeader(\"X-Forwarded-For\").contains(clientIP)) {\n+                    clientIP = xfip.trim();\n+                }\n+            }\n+        }\n+        String clientUA = StringUtils.defaultIfBlank(request.getHeader(\"USER-AGENT\"), \"\");\n+        String referer = StringUtils.defaultIfBlank(request.getHeader(\"referer\"), \"\");\n+\n+        //Start adding our data\n+        StringBuilder data = new StringBuilder();\n+        data.append(URLEncoder.encode(\"url_ver\", UTF_8) + \"=\" + URLEncoder.encode(trackerUrlVersion, UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"req_id\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(clientIP, UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"req_dat\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(clientUA, UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"rft.artnum\", UTF_8)).append(\"=\").\n+                append(URLEncoder.encode(\"oai:\" + configurationService.getProperty(\"dspace.hostname\") + \":\" + item", "originalCommit": "dc42d3e9b4b0c6d95ca33383a27346692c825d7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5NDUwMQ==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r431194501", "bodyText": "Similar to above, the url was changed", "author": "YanaDePauw", "createdAt": "2020-05-27T14:46:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE2OTcyMw=="}], "type": "inlineReview", "revised_code": {"commit": "60c4a0777ff57b9cc634e9eaacfea3937a685708", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java b/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java\nindex 88291268f..e703af787 100644\n--- a/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java\n+++ b/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java\n\n@@ -30,6 +30,7 @@ import org.dspace.content.service.EntityService;\n import org.dspace.content.service.EntityTypeService;\n import org.dspace.content.service.ItemService;\n import org.dspace.core.Context;\n+import org.dspace.core.Utils;\n import org.dspace.services.ConfigurationService;\n import org.dspace.services.factory.DSpaceServicesFactory;\n import org.dspace.statistics.export.factory.OpenURLTrackerLoggerServiceFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3MjA1Mg==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r420172052", "bodyText": "I don't understand the string splitting going on here.  We should add a comment to describe it", "author": "tdonohue", "createdAt": "2020-05-05T14:52:40Z", "path": "dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export.processor;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.apache.commons.codec.CharEncoding;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.log4j.Logger;\n+import org.dspace.content.DCDate;\n+import org.dspace.content.Entity;\n+import org.dspace.content.EntityType;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.EntityService;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.statistics.export.factory.OpenURLTrackerLoggerServiceFactory;\n+import org.dspace.statistics.export.service.OpenUrlService;\n+\n+/**\n+ * Abstract export event processor that contains all shared logic to handle both Items and Bitstreams\n+ * from the ExportUsageEventListener\n+ */\n+public abstract class ExportEventProcessor {\n+\n+    private static Logger log = Logger.getLogger(ExportEventProcessor.class);\n+\n+    /* The metadata field which is to be checked for */\n+    protected String trackerType;\n+\n+    /* A list of entity types that will be processed */\n+    protected List<String> entityTypes;\n+    protected static final String ENTITY_TYPE_DEFAULT = \"Publication\";\n+\n+    /* A list of values the type might have */\n+    protected List<String> trackerValues;\n+\n+    /* The base url of the tracker */\n+    protected String baseUrl;\n+\n+    protected String trackerUrlVersion;\n+\n+    protected static final String ITEM_VIEW = \"Investigation\";\n+    protected static final String BITSTREAM_DOWNLOAD = \"Request\";\n+\n+    protected static ConfigurationService configurationService;\n+\n+    protected static EntityTypeService entityTypeService;\n+    protected static EntityService entityService;\n+\n+    protected static OpenUrlService openUrlService;\n+\n+    protected final static String UTF_8 = CharEncoding.UTF_8;\n+\n+\n+    protected Context context;\n+    protected HttpServletRequest request;\n+    protected ItemService itemService;\n+\n+    /**\n+     * Creates a new ExportEventProcessor based on the params and initializes the services\n+     *\n+     * @param context\n+     * @param request\n+     */\n+    ExportEventProcessor(Context context, HttpServletRequest request) {\n+        this.context = context;\n+        this.request = request;\n+        initServices();\n+    }\n+\n+    /**\n+     * Processes the event\n+     *\n+     * @throws SQLException\n+     * @throws IOException\n+     */\n+    public abstract void processEvent() throws SQLException, IOException;\n+\n+    /**\n+     * Process the url obtained from the object to be transmitted\n+     *\n+     * @param urlParameters\n+     * @throws IOException\n+     * @throws SQLException\n+     */\n+    protected void processObject(String urlParameters) throws IOException, SQLException {\n+\n+        openUrlService.processUrl(context, baseUrl + \"?\" + urlParameters);\n+    }\n+\n+    /**\n+     * Get the base parameters for the url to be transmitted\n+     *\n+     * @param item\n+     * @return the parameter string to be used in the url\n+     * @throws UnsupportedEncodingException\n+     */\n+    protected String getBaseParameters(Item item)\n+            throws UnsupportedEncodingException {\n+\n+        //We have a valid url collect the rest of the data\n+        String clientIP = request.getRemoteAddr();\n+        if (configurationService.getBooleanProperty(\"useProxies\", false) && request\n+                .getHeader(\"X-Forwarded-For\") != null) {\n+            /* This header is a comma delimited list */\n+            for (String xfip : request.getHeader(\"X-Forwarded-For\").split(\",\")) {\n+                /* proxy itself will sometime populate this header with the same value in\n+                    remote address. ordering in spec is vague, we'll just take the last\n+                    not equal to the proxy\n+                */\n+                if (!request.getHeader(\"X-Forwarded-For\").contains(clientIP)) {\n+                    clientIP = xfip.trim();\n+                }\n+            }\n+        }\n+        String clientUA = StringUtils.defaultIfBlank(request.getHeader(\"USER-AGENT\"), \"\");\n+        String referer = StringUtils.defaultIfBlank(request.getHeader(\"referer\"), \"\");\n+\n+        //Start adding our data\n+        StringBuilder data = new StringBuilder();\n+        data.append(URLEncoder.encode(\"url_ver\", UTF_8) + \"=\" + URLEncoder.encode(trackerUrlVersion, UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"req_id\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(clientIP, UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"req_dat\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(clientUA, UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"rft.artnum\", UTF_8)).append(\"=\").\n+                append(URLEncoder.encode(\"oai:\" + configurationService.getProperty(\"dspace.hostname\") + \":\" + item\n+                        .getHandle(), UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"rfr_dat\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(referer, UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"rfr_id\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(configurationService.getProperty(\"dspace.hostname\"), UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"url_tim\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(getCurrentDateString(), UTF_8));\n+\n+        return data.toString();\n+    }\n+\n+    /**\n+     * Get the current date\n+     *\n+     * @return the current date as a string\n+     */\n+    protected String getCurrentDateString() {\n+        return new DCDate(new Date()).toString();\n+    }\n+\n+    /**\n+     * Checks if an item should be processed\n+     *\n+     * @param item to be checked\n+     * @return whether the item should be processed\n+     * @throws SQLException\n+     */\n+    protected boolean shouldProcessItem(Item item) throws SQLException {\n+        if (item == null) {\n+            return false;\n+        }\n+        if (!item.isArchived()) {\n+            return false;\n+        }\n+        if (itemService.canEdit(context, item)) {\n+            return false;\n+        }\n+        if (!shouldProcessItemType(item)) {\n+            return false;\n+        }\n+        if (!shouldProcessEntityType(item)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Checks if the item's entity type should be processed\n+     *\n+     * @param item to be checked\n+     * @return whether the item should be processed\n+     * @throws SQLException\n+     */\n+    protected boolean shouldProcessEntityType(Item item) throws SQLException {\n+        Entity entity = entityService.findByItemId(context, item.getID());\n+        EntityType type = entityService.getType(context, entity);\n+\n+        if (type != null && entityTypes.contains(type.getLabel())) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Checks if the item should be excluded based on the its type\n+     *\n+     * @param item to be checked\n+     * @return whether the item should be processed\n+     */\n+    protected boolean shouldProcessItemType(Item item) {\n+        if (trackerType != null && trackerValues != null) {\n+            List<MetadataValue> types = itemService\n+                    .getMetadata(item, trackerType.split(\"\\\\.\")[0], trackerType.split(\"\\\\.\")[1],\n+                                 trackerType.split(\"\\\\.\").length == 2 ? null : trackerType.split(\"\\\\.\")[2], Item.ANY);", "originalCommit": "dc42d3e9b4b0c6d95ca33383a27346692c825d7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxMjMxMw==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r420212313", "bodyText": "It appears that the value of trackerType will look like some.thing or some.thing.else.  It might be clearer to split it once into a temporary and then just pass the elements of the temporary to #getMetadata.  But it still needs comments.\nThe compiler's dataflow analyzer may understand that it can elide the second, third, and fourth identical split calls and re-use its own temporary, but why not make this explicit and clear?", "author": "mwoodiupui", "createdAt": "2020-05-05T15:46:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3MjA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5NDgwMA==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r431194800", "bodyText": "This should be more clear now in the code", "author": "YanaDePauw", "createdAt": "2020-05-27T14:47:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3MjA1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "60c4a0777ff57b9cc634e9eaacfea3937a685708", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java b/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java\nindex 88291268f..e703af787 100644\n--- a/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java\n+++ b/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java\n\n@@ -30,6 +30,7 @@ import org.dspace.content.service.EntityService;\n import org.dspace.content.service.EntityTypeService;\n import org.dspace.content.service.ItemService;\n import org.dspace.core.Context;\n+import org.dspace.core.Utils;\n import org.dspace.services.ConfigurationService;\n import org.dspace.services.factory.DSpaceServicesFactory;\n import org.dspace.statistics.export.factory.OpenURLTrackerLoggerServiceFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3MjYzMQ==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r420172631", "bodyText": "Again, dspace.url doesn't exist anymore.  This likely should be dspace.ui.url", "author": "tdonohue", "createdAt": "2020-05-05T14:53:25Z", "path": "dspace-api/src/main/java/org/dspace/statistics/export/processor/ItemEventProcessor.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export.processor;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.sql.SQLException;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.content.Item;\n+import org.dspace.core.Context;\n+\n+\n+/**\n+ * Processor that handles Item events from the ExportUsageEventListener\n+ */\n+public class ItemEventProcessor extends ExportEventProcessor {\n+\n+    private Item item;\n+\n+    /**\n+     * Creates a new ItemEventProcessor that will set the params\n+     * @param context\n+     * @param request\n+     * @param item\n+     */\n+    public ItemEventProcessor(Context context, HttpServletRequest request, Item item) {\n+        super(context, request);\n+        this.item = item;\n+    }\n+\n+    /**\n+     * Process the event\n+     * Check if the item should be processed\n+     * Create the url to be transmitted based on item data\n+     * @throws SQLException\n+     * @throws IOException\n+     */\n+    public void processEvent() throws SQLException, IOException {\n+        if (shouldProcessItem(item)) {\n+            String baseParam = getBaseParameters(item);\n+            String fullParam = addObjectSpecificData(baseParam, item);\n+            processObject(fullParam);\n+        }\n+    }\n+\n+    /**\n+     * Adds additional item data to the url\n+     * @param string to which the additional data needs to be added\n+     * @param item\n+     * @return the string with additional data\n+     * @throws UnsupportedEncodingException\n+     */\n+    protected String addObjectSpecificData(final String string, Item item) throws UnsupportedEncodingException {\n+        StringBuilder data = new StringBuilder(string);\n+        String itemInfo = getItemInfo(item);\n+        data.append(\"&\").append(URLEncoder.encode(\"svc_dat\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(itemInfo, UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"rft_dat\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(ITEM_VIEW, UTF_8));\n+        return data.toString();\n+    }\n+\n+    /**\n+     * Get Item info used for the url\n+     * @param item\n+     * @return item info\n+     */\n+    private String getItemInfo(final Item item) {\n+        StringBuilder sb = new StringBuilder(configurationService.getProperty(\"dspace.url\"));", "originalCommit": "dc42d3e9b4b0c6d95ca33383a27346692c825d7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5NDk4OA==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r431194988", "bodyText": "Updated the url", "author": "YanaDePauw", "createdAt": "2020-05-27T14:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3MjYzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "60c4a0777ff57b9cc634e9eaacfea3937a685708", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/statistics/export/processor/ItemEventProcessor.java b/dspace-api/src/main/java/org/dspace/statistics/export/processor/ItemEventProcessor.java\nindex c8b809ab5..4dc493c1f 100644\n--- a/dspace-api/src/main/java/org/dspace/statistics/export/processor/ItemEventProcessor.java\n+++ b/dspace-api/src/main/java/org/dspace/statistics/export/processor/ItemEventProcessor.java\n\n@@ -73,7 +73,7 @@ public class ItemEventProcessor extends ExportEventProcessor {\n      * @return item info\n      */\n     private String getItemInfo(final Item item) {\n-        StringBuilder sb = new StringBuilder(configurationService.getProperty(\"dspace.url\"));\n+        StringBuilder sb = new StringBuilder(configurationService.getProperty(\"dspace.ui.url\"));\n         sb.append(\"/handle/\").append(item.getHandle());\n \n         return sb.toString();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3MzAyNw==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r420173027", "bodyText": "This service doesn't appear to be specific to IRUS.  It's an OpenURL service right?", "author": "tdonohue", "createdAt": "2020-05-05T14:53:55Z", "path": "dspace-api/src/main/java/org/dspace/statistics/export/service/OpenUrlService.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export.service;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+\n+import org.dspace.core.Context;\n+\n+/**\n+ * The Service responsible for processing urls to be send to IRUS", "originalCommit": "dc42d3e9b4b0c6d95ca33383a27346692c825d7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5NTYxNA==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r431195614", "bodyText": "This is correct, removed the reference to IRUS", "author": "YanaDePauw", "createdAt": "2020-05-27T14:48:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3MzAyNw=="}], "type": "inlineReview", "revised_code": {"commit": "60c4a0777ff57b9cc634e9eaacfea3937a685708", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/statistics/export/service/OpenUrlService.java b/dspace-api/src/main/java/org/dspace/statistics/export/service/OpenUrlService.java\nindex 0f8376edb..881cfb62d 100644\n--- a/dspace-api/src/main/java/org/dspace/statistics/export/service/OpenUrlService.java\n+++ b/dspace-api/src/main/java/org/dspace/statistics/export/service/OpenUrlService.java\n\n@@ -13,7 +13,7 @@ import java.sql.SQLException;\n import org.dspace.core.Context;\n \n /**\n- * The Service responsible for processing urls to be send to IRUS\n+ * The Service responsible for processing urls\n  */\n public interface OpenUrlService {\n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4NTIxNw==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r420185217", "bodyText": "Can we just Autowired these services instead of having to init them in a more manual fashion?  This entire method seems like it may not be necessary if we use annotations.", "author": "tdonohue", "createdAt": "2020-05-05T15:09:54Z", "path": "dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export.processor;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.apache.commons.codec.CharEncoding;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.log4j.Logger;\n+import org.dspace.content.DCDate;\n+import org.dspace.content.Entity;\n+import org.dspace.content.EntityType;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.EntityService;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.statistics.export.factory.OpenURLTrackerLoggerServiceFactory;\n+import org.dspace.statistics.export.service.OpenUrlService;\n+\n+/**\n+ * Abstract export event processor that contains all shared logic to handle both Items and Bitstreams\n+ * from the ExportUsageEventListener\n+ */\n+public abstract class ExportEventProcessor {\n+\n+    private static Logger log = Logger.getLogger(ExportEventProcessor.class);\n+\n+    /* The metadata field which is to be checked for */\n+    protected String trackerType;\n+\n+    /* A list of entity types that will be processed */\n+    protected List<String> entityTypes;\n+    protected static final String ENTITY_TYPE_DEFAULT = \"Publication\";\n+\n+    /* A list of values the type might have */\n+    protected List<String> trackerValues;\n+\n+    /* The base url of the tracker */\n+    protected String baseUrl;\n+\n+    protected String trackerUrlVersion;\n+\n+    protected static final String ITEM_VIEW = \"Investigation\";\n+    protected static final String BITSTREAM_DOWNLOAD = \"Request\";\n+\n+    protected static ConfigurationService configurationService;\n+\n+    protected static EntityTypeService entityTypeService;\n+    protected static EntityService entityService;\n+\n+    protected static OpenUrlService openUrlService;\n+\n+    protected final static String UTF_8 = CharEncoding.UTF_8;\n+\n+\n+    protected Context context;\n+    protected HttpServletRequest request;\n+    protected ItemService itemService;\n+\n+    /**\n+     * Creates a new ExportEventProcessor based on the params and initializes the services\n+     *\n+     * @param context\n+     * @param request\n+     */\n+    ExportEventProcessor(Context context, HttpServletRequest request) {\n+        this.context = context;\n+        this.request = request;\n+        initServices();\n+    }\n+\n+    /**\n+     * Processes the event\n+     *\n+     * @throws SQLException\n+     * @throws IOException\n+     */\n+    public abstract void processEvent() throws SQLException, IOException;\n+\n+    /**\n+     * Process the url obtained from the object to be transmitted\n+     *\n+     * @param urlParameters\n+     * @throws IOException\n+     * @throws SQLException\n+     */\n+    protected void processObject(String urlParameters) throws IOException, SQLException {\n+\n+        openUrlService.processUrl(context, baseUrl + \"?\" + urlParameters);\n+    }\n+\n+    /**\n+     * Get the base parameters for the url to be transmitted\n+     *\n+     * @param item\n+     * @return the parameter string to be used in the url\n+     * @throws UnsupportedEncodingException\n+     */\n+    protected String getBaseParameters(Item item)\n+            throws UnsupportedEncodingException {\n+\n+        //We have a valid url collect the rest of the data\n+        String clientIP = request.getRemoteAddr();\n+        if (configurationService.getBooleanProperty(\"useProxies\", false) && request\n+                .getHeader(\"X-Forwarded-For\") != null) {\n+            /* This header is a comma delimited list */\n+            for (String xfip : request.getHeader(\"X-Forwarded-For\").split(\",\")) {\n+                /* proxy itself will sometime populate this header with the same value in\n+                    remote address. ordering in spec is vague, we'll just take the last\n+                    not equal to the proxy\n+                */\n+                if (!request.getHeader(\"X-Forwarded-For\").contains(clientIP)) {\n+                    clientIP = xfip.trim();\n+                }\n+            }\n+        }\n+        String clientUA = StringUtils.defaultIfBlank(request.getHeader(\"USER-AGENT\"), \"\");\n+        String referer = StringUtils.defaultIfBlank(request.getHeader(\"referer\"), \"\");\n+\n+        //Start adding our data\n+        StringBuilder data = new StringBuilder();\n+        data.append(URLEncoder.encode(\"url_ver\", UTF_8) + \"=\" + URLEncoder.encode(trackerUrlVersion, UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"req_id\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(clientIP, UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"req_dat\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(clientUA, UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"rft.artnum\", UTF_8)).append(\"=\").\n+                append(URLEncoder.encode(\"oai:\" + configurationService.getProperty(\"dspace.hostname\") + \":\" + item\n+                        .getHandle(), UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"rfr_dat\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(referer, UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"rfr_id\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(configurationService.getProperty(\"dspace.hostname\"), UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"url_tim\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(getCurrentDateString(), UTF_8));\n+\n+        return data.toString();\n+    }\n+\n+    /**\n+     * Get the current date\n+     *\n+     * @return the current date as a string\n+     */\n+    protected String getCurrentDateString() {\n+        return new DCDate(new Date()).toString();\n+    }\n+\n+    /**\n+     * Checks if an item should be processed\n+     *\n+     * @param item to be checked\n+     * @return whether the item should be processed\n+     * @throws SQLException\n+     */\n+    protected boolean shouldProcessItem(Item item) throws SQLException {\n+        if (item == null) {\n+            return false;\n+        }\n+        if (!item.isArchived()) {\n+            return false;\n+        }\n+        if (itemService.canEdit(context, item)) {\n+            return false;\n+        }\n+        if (!shouldProcessItemType(item)) {\n+            return false;\n+        }\n+        if (!shouldProcessEntityType(item)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Checks if the item's entity type should be processed\n+     *\n+     * @param item to be checked\n+     * @return whether the item should be processed\n+     * @throws SQLException\n+     */\n+    protected boolean shouldProcessEntityType(Item item) throws SQLException {\n+        Entity entity = entityService.findByItemId(context, item.getID());\n+        EntityType type = entityService.getType(context, entity);\n+\n+        if (type != null && entityTypes.contains(type.getLabel())) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Checks if the item should be excluded based on the its type\n+     *\n+     * @param item to be checked\n+     * @return whether the item should be processed\n+     */\n+    protected boolean shouldProcessItemType(Item item) {\n+        if (trackerType != null && trackerValues != null) {\n+            List<MetadataValue> types = itemService\n+                    .getMetadata(item, trackerType.split(\"\\\\.\")[0], trackerType.split(\"\\\\.\")[1],\n+                                 trackerType.split(\"\\\\.\").length == 2 ? null : trackerType.split(\"\\\\.\")[2], Item.ANY);\n+\n+            if (!types.isEmpty()) {\n+                //Find out if we have a type that needs to be excluded\n+                for (MetadataValue type : types) {\n+                    if (trackerValues.contains(type.getValue().toLowerCase())) {\n+                        //We have found no type so process this item\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            } else {\n+                // No types in this item, so not excluded\n+                return true;\n+            }\n+        } else {\n+            // No types to be excluded\n+            return true;\n+        }\n+    }\n+\n+    /**\n+     * Initializes services and params obtained from DSpace config\n+     */\n+    private void initServices() {", "originalCommit": "dc42d3e9b4b0c6d95ca33383a27346692c825d7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5NzAxOA==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r431197018", "bodyText": "Since the processor is not a bean itself, the services could not be autowired. Changed the init to use the factories in declaration.", "author": "YanaDePauw", "createdAt": "2020-05-27T14:49:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4NTIxNw=="}], "type": "inlineReview", "revised_code": {"commit": "60c4a0777ff57b9cc634e9eaacfea3937a685708", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java b/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java\nindex 88291268f..e703af787 100644\n--- a/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java\n+++ b/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java\n\n@@ -30,6 +30,7 @@ import org.dspace.content.service.EntityService;\n import org.dspace.content.service.EntityTypeService;\n import org.dspace.content.service.ItemService;\n import org.dspace.core.Context;\n+import org.dspace.core.Utils;\n import org.dspace.services.ConfigurationService;\n import org.dspace.services.factory.DSpaceServicesFactory;\n import org.dspace.statistics.export.factory.OpenURLTrackerLoggerServiceFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDEyNw==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r420190127", "bodyText": "Just a note: You don't need to mock a config setting. You can just set it using configurationService.setProperty().  Configs reload after every test.", "author": "tdonohue", "createdAt": "2020-05-05T15:16:37Z", "path": "dspace-api/src/test/java/org/dspace/statistics/export/processor/BitstreamEventProcessorTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export.processor;\n+\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.CALLS_REAL_METHODS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.util.UUID;\n+\n+import org.dspace.AbstractDSpaceTest;\n+import org.dspace.content.Bitstream;\n+import org.dspace.content.Item;\n+import org.dspace.services.ConfigurationService;\n+import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+\n+/**\n+ * Test class for the BitstreamEventProcessor\n+ */\n+public class BitstreamEventProcessorTest extends AbstractDSpaceTest {\n+\n+    @Mock\n+    private Item item = mock(Item.class);\n+\n+    @Mock\n+    private Bitstream bitstream = mock(Bitstream.class);\n+\n+    @Mock\n+    private ConfigurationService configurationService = mock(ConfigurationService.class);\n+\n+    @InjectMocks\n+    BitstreamEventProcessor bitstreamEventProcessor = mock(BitstreamEventProcessor.class, CALLS_REAL_METHODS);\n+\n+    @Test\n+    /**\n+     * Test the method that adds data based on the object types\n+     */\n+    public void testAddObectSpecificData() throws UnsupportedEncodingException {\n+        bitstreamEventProcessor.configurationService = configurationService;\n+        when(configurationService.getProperty(any(String.class))).thenReturn(\"demo.dspace.org\");", "originalCommit": "dc42d3e9b4b0c6d95ca33383a27346692c825d7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5ODE5MA==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r431198190", "bodyText": "Removed the mocking of these properties, and set them in the class instead", "author": "YanaDePauw", "createdAt": "2020-05-27T14:51:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDEyNw=="}], "type": "inlineReview", "revised_code": {"commit": "60c4a0777ff57b9cc634e9eaacfea3937a685708", "chunk": "diff --git a/dspace-api/src/test/java/org/dspace/statistics/export/processor/BitstreamEventProcessorTest.java b/dspace-api/src/test/java/org/dspace/statistics/export/processor/BitstreamEventProcessorTest.java\nindex 12a693b3d..ff6f7de5d 100644\n--- a/dspace-api/src/test/java/org/dspace/statistics/export/processor/BitstreamEventProcessorTest.java\n+++ b/dspace-api/src/test/java/org/dspace/statistics/export/processor/BitstreamEventProcessorTest.java\n\n@@ -9,18 +9,21 @@ package org.dspace.statistics.export.processor;\n \n import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.assertThat;\n-import static org.mockito.Matchers.any;\n import static org.mockito.Mockito.CALLS_REAL_METHODS;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n import java.util.UUID;\n \n+import org.apache.commons.codec.CharEncoding;\n import org.dspace.AbstractDSpaceTest;\n import org.dspace.content.Bitstream;\n import org.dspace.content.Item;\n import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDUxNQ==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r420190515", "bodyText": "Same here, no need to mock a configuration. Just set it in each method or have a @Before", "author": "tdonohue", "createdAt": "2020-05-05T15:17:05Z", "path": "dspace-api/src/test/java/org/dspace/statistics/export/processor/BitstreamEventProcessorTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export.processor;\n+\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.CALLS_REAL_METHODS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.util.UUID;\n+\n+import org.dspace.AbstractDSpaceTest;\n+import org.dspace.content.Bitstream;\n+import org.dspace.content.Item;\n+import org.dspace.services.ConfigurationService;\n+import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+\n+/**\n+ * Test class for the BitstreamEventProcessor\n+ */\n+public class BitstreamEventProcessorTest extends AbstractDSpaceTest {\n+\n+    @Mock\n+    private Item item = mock(Item.class);\n+\n+    @Mock\n+    private Bitstream bitstream = mock(Bitstream.class);\n+\n+    @Mock\n+    private ConfigurationService configurationService = mock(ConfigurationService.class);\n+\n+    @InjectMocks\n+    BitstreamEventProcessor bitstreamEventProcessor = mock(BitstreamEventProcessor.class, CALLS_REAL_METHODS);\n+\n+    @Test\n+    /**\n+     * Test the method that adds data based on the object types\n+     */\n+    public void testAddObectSpecificData() throws UnsupportedEncodingException {\n+        bitstreamEventProcessor.configurationService = configurationService;\n+        when(configurationService.getProperty(any(String.class))).thenReturn(\"demo.dspace.org\");\n+\n+        when(item.getHandle()).thenReturn(\"123456789/1\");\n+\n+        String result = bitstreamEventProcessor.addObjectSpecificData(\"existing-string\", item, bitstream);\n+\n+        assertThat(result,\n+                   is(\"existing-string&svc_dat=demo.dspace.org%2Fbitstream%2Fhandle%2F123456789%2F1%2F%3Fsequence%3D0\" +\n+                              \"&rft_dat=Request\"));\n+\n+    }\n+\n+    @Test\n+    /**\n+     * Test the method that adds data based on the object types when no handle can be found for the item\n+     */\n+    public void testAddObectSpecificDataWhenNoHandle() throws UnsupportedEncodingException {\n+        bitstreamEventProcessor.configurationService = configurationService;\n+        when(configurationService.getProperty(any(String.class))).thenReturn(\"demo.dspace.org\");", "originalCommit": "dc42d3e9b4b0c6d95ca33383a27346692c825d7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5ODM5OA==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r431198398", "bodyText": "Same as above", "author": "YanaDePauw", "createdAt": "2020-05-27T14:51:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDUxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "60c4a0777ff57b9cc634e9eaacfea3937a685708", "chunk": "diff --git a/dspace-api/src/test/java/org/dspace/statistics/export/processor/BitstreamEventProcessorTest.java b/dspace-api/src/test/java/org/dspace/statistics/export/processor/BitstreamEventProcessorTest.java\nindex 12a693b3d..ff6f7de5d 100644\n--- a/dspace-api/src/test/java/org/dspace/statistics/export/processor/BitstreamEventProcessorTest.java\n+++ b/dspace-api/src/test/java/org/dspace/statistics/export/processor/BitstreamEventProcessorTest.java\n\n@@ -9,18 +9,21 @@ package org.dspace.statistics.export.processor;\n \n import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.assertThat;\n-import static org.mockito.Matchers.any;\n import static org.mockito.Mockito.CALLS_REAL_METHODS;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n import java.util.UUID;\n \n+import org.apache.commons.codec.CharEncoding;\n import org.dspace.AbstractDSpaceTest;\n import org.dspace.content.Bitstream;\n import org.dspace.content.Item;\n import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDYzMg==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r420190632", "bodyText": "Same as above", "author": "tdonohue", "createdAt": "2020-05-05T15:17:15Z", "path": "dspace-api/src/test/java/org/dspace/statistics/export/processor/BitstreamEventProcessorTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export.processor;\n+\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.CALLS_REAL_METHODS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.util.UUID;\n+\n+import org.dspace.AbstractDSpaceTest;\n+import org.dspace.content.Bitstream;\n+import org.dspace.content.Item;\n+import org.dspace.services.ConfigurationService;\n+import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+\n+/**\n+ * Test class for the BitstreamEventProcessor\n+ */\n+public class BitstreamEventProcessorTest extends AbstractDSpaceTest {\n+\n+    @Mock\n+    private Item item = mock(Item.class);\n+\n+    @Mock\n+    private Bitstream bitstream = mock(Bitstream.class);\n+\n+    @Mock\n+    private ConfigurationService configurationService = mock(ConfigurationService.class);\n+\n+    @InjectMocks\n+    BitstreamEventProcessor bitstreamEventProcessor = mock(BitstreamEventProcessor.class, CALLS_REAL_METHODS);\n+\n+    @Test\n+    /**\n+     * Test the method that adds data based on the object types\n+     */\n+    public void testAddObectSpecificData() throws UnsupportedEncodingException {\n+        bitstreamEventProcessor.configurationService = configurationService;\n+        when(configurationService.getProperty(any(String.class))).thenReturn(\"demo.dspace.org\");\n+\n+        when(item.getHandle()).thenReturn(\"123456789/1\");\n+\n+        String result = bitstreamEventProcessor.addObjectSpecificData(\"existing-string\", item, bitstream);\n+\n+        assertThat(result,\n+                   is(\"existing-string&svc_dat=demo.dspace.org%2Fbitstream%2Fhandle%2F123456789%2F1%2F%3Fsequence%3D0\" +\n+                              \"&rft_dat=Request\"));\n+\n+    }\n+\n+    @Test\n+    /**\n+     * Test the method that adds data based on the object types when no handle can be found for the item\n+     */\n+    public void testAddObectSpecificDataWhenNoHandle() throws UnsupportedEncodingException {\n+        bitstreamEventProcessor.configurationService = configurationService;\n+        when(configurationService.getProperty(any(String.class))).thenReturn(\"demo.dspace.org\");\n+\n+        when(item.getHandle()).thenReturn(null);\n+        when(item.getID()).thenReturn(UUID.fromString(\"d84c8fa8-50e2-4267-98f4-00954ea89c94\"));\n+\n+        String result = bitstreamEventProcessor.addObjectSpecificData(\"existing-string\", item, bitstream);\n+\n+        assertThat(result,\n+                   is(\"existing-string&svc_dat=demo.dspace\" +\n+                              \".org%2Fbitstream%2Fitem%2Fd84c8fa8-50e2-4267-98f4-00954ea89c94%2F%3Fsequence%3D0\" +\n+                              \"&rft_dat=Request\"));\n+\n+    }\n+\n+    @Test\n+    /**\n+     * Test the method that adds data based on the object types when no item is present\n+     */\n+    public void testAddObectSpecificDataWhenNoItem() throws UnsupportedEncodingException {\n+        bitstreamEventProcessor.configurationService = configurationService;\n+        when(configurationService.getProperty(any(String.class))).thenReturn(\"demo.dspace.org\");", "originalCommit": "dc42d3e9b4b0c6d95ca33383a27346692c825d7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5ODUwMg==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r431198502", "bodyText": "Updated this as well", "author": "YanaDePauw", "createdAt": "2020-05-27T14:51:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDYzMg=="}], "type": "inlineReview", "revised_code": {"commit": "60c4a0777ff57b9cc634e9eaacfea3937a685708", "chunk": "diff --git a/dspace-api/src/test/java/org/dspace/statistics/export/processor/BitstreamEventProcessorTest.java b/dspace-api/src/test/java/org/dspace/statistics/export/processor/BitstreamEventProcessorTest.java\nindex 12a693b3d..ff6f7de5d 100644\n--- a/dspace-api/src/test/java/org/dspace/statistics/export/processor/BitstreamEventProcessorTest.java\n+++ b/dspace-api/src/test/java/org/dspace/statistics/export/processor/BitstreamEventProcessorTest.java\n\n@@ -9,18 +9,21 @@ package org.dspace.statistics.export.processor;\n \n import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.assertThat;\n-import static org.mockito.Matchers.any;\n import static org.mockito.Mockito.CALLS_REAL_METHODS;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n import java.util.UUID;\n \n+import org.apache.commons.codec.CharEncoding;\n import org.dspace.AbstractDSpaceTest;\n import org.dspace.content.Bitstream;\n import org.dspace.content.Item;\n import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MTEwOQ==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r420191109", "bodyText": "dspace.hostname is not valid.  Again here, you should not need to mock configurations. Just set them to the values you need.", "author": "tdonohue", "createdAt": "2020-05-05T15:17:56Z", "path": "dspace-api/src/test/java/org/dspace/statistics/export/processor/ExportEventProcessorTest.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export.processor;\n+\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.AbstractDSpaceTest;\n+import org.dspace.content.Entity;\n+import org.dspace.content.EntityType;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.service.EntityService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+/**\n+ * Test for the ExportEventProcessor class\n+ */\n+@RunWith(MockitoJUnitRunner.class)\n+public class ExportEventProcessorTest extends AbstractDSpaceTest {\n+\n+    @Mock\n+    private Context context = mock(Context.class);\n+    @Mock\n+    private HttpServletRequest request = mock(HttpServletRequest.class);\n+    @Mock\n+    private Item item = mock(Item.class);\n+    @Mock\n+    private ConfigurationService configurationService = mock(ConfigurationService.class);\n+    @Mock\n+    private ItemService itemService = mock(ItemService.class);\n+    @Mock\n+    private EntityService entityService = mock(EntityService.class);\n+\n+\n+    @InjectMocks\n+    ExportEventProcessor exportEventProcessor = mock(ExportEventProcessor.class);\n+\n+\n+    @Test\n+    /**\n+     * Test the getBaseParameters method\n+     */\n+    public void testGetBaseParameters() throws UnsupportedEncodingException {\n+        exportEventProcessor.context = context;\n+        exportEventProcessor.request = request;\n+        exportEventProcessor.configurationService = configurationService;\n+        exportEventProcessor.trackerUrlVersion = \"Z39.88-2004\";\n+\n+        when(exportEventProcessor.getCurrentDateString()).thenReturn(\"2020-01-24T13:24:33Z\");\n+\n+        when(request.getRemoteAddr()).thenReturn(\"test-client-ip\");\n+        when(request.getHeader(\"USER-AGENT\")).thenReturn(\"test-user-agent\");\n+        when(request.getHeader(\"referer\")).thenReturn(\"test-referer\");\n+        when(configurationService.getBooleanProperty(\"useProxies\", false)).thenReturn(false);\n+        when(configurationService.getProperty(\"dspace.hostname\")).thenReturn(\"localhost\");", "originalCommit": "dc42d3e9b4b0c6d95ca33383a27346692c825d7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5ODcxNw==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r431198717", "bodyText": "Updated the config parameter", "author": "YanaDePauw", "createdAt": "2020-05-27T14:52:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MTEwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "60c4a0777ff57b9cc634e9eaacfea3937a685708", "chunk": "diff --git a/dspace-api/src/test/java/org/dspace/statistics/export/processor/ExportEventProcessorTest.java b/dspace-api/src/test/java/org/dspace/statistics/export/processor/ExportEventProcessorTest.java\nindex eaebe1bdd..8b5acfa5f 100644\n--- a/dspace-api/src/test/java/org/dspace/statistics/export/processor/ExportEventProcessorTest.java\n+++ b/dspace-api/src/test/java/org/dspace/statistics/export/processor/ExportEventProcessorTest.java\n\n@@ -30,6 +30,8 @@ import org.dspace.content.service.EntityService;\n import org.dspace.content.service.ItemService;\n import org.dspace.core.Context;\n import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.InjectMocks;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MjYyMg==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r420192622", "bodyText": "These services should be all @Autowired and definitely should NOT be static. We tend to avoid static unless it's a constant and these are not.", "author": "tdonohue", "createdAt": "2020-05-05T15:19:59Z", "path": "dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export.processor;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.apache.commons.codec.CharEncoding;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.log4j.Logger;\n+import org.dspace.content.DCDate;\n+import org.dspace.content.Entity;\n+import org.dspace.content.EntityType;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.EntityService;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.statistics.export.factory.OpenURLTrackerLoggerServiceFactory;\n+import org.dspace.statistics.export.service.OpenUrlService;\n+\n+/**\n+ * Abstract export event processor that contains all shared logic to handle both Items and Bitstreams\n+ * from the ExportUsageEventListener\n+ */\n+public abstract class ExportEventProcessor {\n+\n+    private static Logger log = Logger.getLogger(ExportEventProcessor.class);\n+\n+    /* The metadata field which is to be checked for */\n+    protected String trackerType;\n+\n+    /* A list of entity types that will be processed */\n+    protected List<String> entityTypes;\n+    protected static final String ENTITY_TYPE_DEFAULT = \"Publication\";\n+\n+    /* A list of values the type might have */\n+    protected List<String> trackerValues;\n+\n+    /* The base url of the tracker */\n+    protected String baseUrl;\n+\n+    protected String trackerUrlVersion;\n+\n+    protected static final String ITEM_VIEW = \"Investigation\";\n+    protected static final String BITSTREAM_DOWNLOAD = \"Request\";\n+\n+    protected static ConfigurationService configurationService;\n+\n+    protected static EntityTypeService entityTypeService;\n+    protected static EntityService entityService;\n+\n+    protected static OpenUrlService openUrlService;", "originalCommit": "dc42d3e9b4b0c6d95ca33383a27346692c825d7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5OTI2NA==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r431199264", "bodyText": "Removed the static, but as mentioned before due to the class not being a bean, the factories were used to initialise the services", "author": "YanaDePauw", "createdAt": "2020-05-27T14:52:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MjYyMg=="}], "type": "inlineReview", "revised_code": {"commit": "60c4a0777ff57b9cc634e9eaacfea3937a685708", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java b/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java\nindex 88291268f..e703af787 100644\n--- a/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java\n+++ b/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java\n\n@@ -30,6 +30,7 @@ import org.dspace.content.service.EntityService;\n import org.dspace.content.service.EntityTypeService;\n import org.dspace.content.service.ItemService;\n import org.dspace.core.Context;\n+import org.dspace.core.Utils;\n import org.dspace.services.ConfigurationService;\n import org.dspace.services.factory.DSpaceServicesFactory;\n import org.dspace.statistics.export.factory.OpenURLTrackerLoggerServiceFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MzE5OQ==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r420193199", "bodyText": "Again, no need to mock configurations", "author": "tdonohue", "createdAt": "2020-05-05T15:20:42Z", "path": "dspace-api/src/test/java/org/dspace/statistics/export/processor/ItemEventProcessorTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export.processor;\n+\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.CALLS_REAL_METHODS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.UnsupportedEncodingException;\n+\n+import org.dspace.AbstractDSpaceTest;\n+import org.dspace.content.Item;\n+import org.dspace.services.ConfigurationService;\n+import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+\n+/**\n+ * Test class for the ItemEventProcessor\n+ */\n+public class ItemEventProcessorTest extends AbstractDSpaceTest {\n+\n+    @Mock\n+    private Item item = mock(Item.class);\n+    @Mock\n+    private ConfigurationService configurationService = mock(ConfigurationService.class);\n+\n+    @InjectMocks\n+    ItemEventProcessor itemEventProcessor = mock(ItemEventProcessor.class, CALLS_REAL_METHODS);\n+\n+    @Test\n+    /**\n+     * Test the method that adds data based on the object types\n+     */\n+    public void testAddObectSpecificData() throws UnsupportedEncodingException {\n+        itemEventProcessor.configurationService = configurationService;\n+        when(configurationService.getProperty(any(String.class))).thenReturn(\"demo.dspace.org\");", "originalCommit": "dc42d3e9b4b0c6d95ca33383a27346692c825d7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5OTM5MQ==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r431199391", "bodyText": "Updated config", "author": "YanaDePauw", "createdAt": "2020-05-27T14:52:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MzE5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "60c4a0777ff57b9cc634e9eaacfea3937a685708", "chunk": "diff --git a/dspace-api/src/test/java/org/dspace/statistics/export/processor/ItemEventProcessorTest.java b/dspace-api/src/test/java/org/dspace/statistics/export/processor/ItemEventProcessorTest.java\nindex df572de69..c42438d78 100644\n--- a/dspace-api/src/test/java/org/dspace/statistics/export/processor/ItemEventProcessorTest.java\n+++ b/dspace-api/src/test/java/org/dspace/statistics/export/processor/ItemEventProcessorTest.java\n\n@@ -9,16 +9,19 @@ package org.dspace.statistics.export.processor;\n \n import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.assertThat;\n-import static org.mockito.Matchers.any;\n import static org.mockito.Mockito.CALLS_REAL_METHODS;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n \n+import org.apache.commons.codec.CharEncoding;\n import org.dspace.AbstractDSpaceTest;\n import org.dspace.content.Item;\n import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.junit.Before;\n import org.junit.Test;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n"}}, {"oid": "60c4a0777ff57b9cc634e9eaacfea3937a685708", "url": "https://github.com/DSpace/DSpace/commit/60c4a0777ff57b9cc634e9eaacfea3937a685708", "message": "Implement feedback", "committedDate": "2020-05-18T15:50:01Z", "type": "commit"}, {"oid": "9ef1f5f8eb0f0b20c8dd907749d6f83743a84c21", "url": "https://github.com/DSpace/DSpace/commit/9ef1f5f8eb0f0b20c8dd907749d6f83743a84c21", "message": "Update bitstream link", "committedDate": "2020-05-27T14:42:22Z", "type": "commit"}, {"oid": "b1672af5c37881dd4b80acb17f715712e05ca140", "url": "https://github.com/DSpace/DSpace/commit/b1672af5c37881dd4b80acb17f715712e05ca140", "message": "Merge remote-tracking branch 'upstream/main' into DS-626", "committedDate": "2020-07-22T14:35:11Z", "type": "commit"}, {"oid": "e36e477be49c436bc6ef986ec8eaff26036208a3", "url": "https://github.com/DSpace/DSpace/commit/e36e477be49c436bc6ef986ec8eaff26036208a3", "message": "Fixes due to merge", "committedDate": "2020-07-22T14:35:18Z", "type": "commit"}, {"oid": "21e3d65ff52d145c52ea2e47924e0f4b0bf02e65", "url": "https://github.com/DSpace/DSpace/commit/21e3d65ff52d145c52ea2e47924e0f4b0bf02e65", "message": "Merge remote-tracking branch 'upstream/main' into DS-626", "committedDate": "2020-08-06T15:25:07Z", "type": "commit"}, {"oid": "eef3f07b921faae2e70f98baeaddca38874199c8", "url": "https://github.com/DSpace/DSpace/commit/eef3f07b921faae2e70f98baeaddca38874199c8", "message": "Fix LGTM issues", "committedDate": "2020-08-06T16:41:24Z", "type": "commit"}, {"oid": "0e5263e06f8aaf651b0a5555faeb3f97d9ffb63e", "url": "https://github.com/DSpace/DSpace/commit/0e5263e06f8aaf651b0a5555faeb3f97d9ffb63e", "message": "Fix to tests", "committedDate": "2020-08-07T09:16:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE3OTg0MQ==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r467179841", "bodyText": "We should never close/complete/abort a Context which is created from another method.  Please refactor this class to create the Context in this internalRun() method instead of caching a global Context object (see other DSpaceRunnable scripts as examples).\nJust as an FYI.  The reason this is dangerous is that if we are reusing a Context over several methods, it's possible either the Context never gets closed (which leaves open DB connections forever), or possible it gets closed too soon (in which case other methods using the same Context will throw errors).  So, our best practice is to either:\n\nPass the Context object as a param between methods\nOr, get a new Context in each method & close that new Context once the method is done with it.", "author": "tdonohue", "createdAt": "2020-08-07T17:40:31Z", "path": "dspace-api/src/main/java/org/dspace/statistics/export/RetryFailedOpenUrlTracker.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export;\n+\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.core.Context;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.dspace.statistics.export.factory.OpenURLTrackerLoggerServiceFactory;\n+import org.dspace.statistics.export.service.OpenUrlService;\n+import org.dspace.utils.DSpace;\n+\n+/**\n+ * Script to retry the failed url transmissions to IRUS\n+ * This script also has an option to add new failed urls for testing purposes\n+ */\n+public class RetryFailedOpenUrlTracker extends DSpaceRunnable<RetryFailedOpenUrlTrackerScriptConfiguration> {\n+\n+    private Context context = null;\n+    private String lineToAdd = null;\n+    private boolean help = false;\n+    private boolean retryFailed = false;\n+\n+    private OpenUrlService openUrlService;\n+\n+    /**\n+     * Run the script\n+     * When the -a option is used, a new \"failed\" url will be added to the database\n+     *\n+     * @throws Exception\n+     */\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            printHelp();\n+            return;\n+        }\n+        context.turnOffAuthorisationSystem();\n+\n+        if (StringUtils.isNotBlank(lineToAdd)) {\n+            openUrlService.logfailed(context, lineToAdd);\n+            handler.logInfo(\"Created dummy entry in OpenUrlTracker with URL: \" + lineToAdd);\n+        }\n+        if (retryFailed) {\n+            handler.logInfo(\"Reprocessing failed URLs stored in the db\");\n+            openUrlService.reprocessFailedQueue(context);\n+        }\n+        context.restoreAuthSystemState();\n+        try {\n+            context.complete();", "originalCommit": "0e5263e06f8aaf651b0a5555faeb3f97d9ffb63e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1MjU4NA==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r474752584", "bodyText": "Moved the context creation to be inside the internalRun() method", "author": "YanaDePauw", "createdAt": "2020-08-21T14:59:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE3OTg0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7d793ec2d96552fad6588f8cb5f1295c2c0bb7d7", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/statistics/export/RetryFailedOpenUrlTracker.java b/dspace-api/src/main/java/org/dspace/statistics/export/RetryFailedOpenUrlTracker.java\nindex b30da8bd8..6b1bea0de 100644\n--- a/dspace-api/src/main/java/org/dspace/statistics/export/RetryFailedOpenUrlTracker.java\n+++ b/dspace-api/src/main/java/org/dspace/statistics/export/RetryFailedOpenUrlTracker.java\n\n@@ -21,7 +21,6 @@ import org.dspace.utils.DSpace;\n  */\n public class RetryFailedOpenUrlTracker extends DSpaceRunnable<RetryFailedOpenUrlTrackerScriptConfiguration> {\n \n-    private Context context = null;\n     private String lineToAdd = null;\n     private boolean help = false;\n     private boolean retryFailed = false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4MDkyOA==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r467180928", "bodyText": "Tiny thing. This class doesn't seem specific to IRUS.  Is it specific to IRUS?  If so, we should rename it to include IRUS in the name.  If not, then we should correct these comments to make it clear that, while this class can be used for IRUS, it's not specific to IRUS.", "author": "tdonohue", "createdAt": "2020-08-07T17:42:47Z", "path": "dspace-api/src/main/java/org/dspace/statistics/export/ExportUsageEventListener.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export;\n+\n+import java.util.UUID;\n+\n+import org.apache.log4j.Logger;\n+import org.dspace.content.Bitstream;\n+import org.dspace.content.Item;\n+import org.dspace.core.Context;\n+import org.dspace.core.LogManager;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.model.Event;\n+import org.dspace.statistics.export.processor.BitstreamEventProcessor;\n+import org.dspace.statistics.export.processor.ItemEventProcessor;\n+import org.dspace.usage.AbstractUsageEventListener;\n+import org.dspace.usage.UsageEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * Class to receive usage events and send corresponding data to IRUS", "originalCommit": "0e5263e06f8aaf651b0a5555faeb3f97d9ffb63e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1MzA5NQ==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r474753095", "bodyText": "Since this class exports usage events to IRUS, it is specific to IRUS. Updated the name of the class.", "author": "YanaDePauw", "createdAt": "2020-08-21T14:59:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4MDkyOA=="}], "type": "inlineReview", "revised_code": {"commit": "7d793ec2d96552fad6588f8cb5f1295c2c0bb7d7", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/statistics/export/ExportUsageEventListener.java b/dspace-api/src/main/java/org/dspace/statistics/export/IrusExportUsageEventListener.java\nsimilarity index 94%\nrename from dspace-api/src/main/java/org/dspace/statistics/export/ExportUsageEventListener.java\nrename to dspace-api/src/main/java/org/dspace/statistics/export/IrusExportUsageEventListener.java\nindex 2257bcb03..01ce1bede 100644\n--- a/dspace-api/src/main/java/org/dspace/statistics/export/ExportUsageEventListener.java\n+++ b/dspace-api/src/main/java/org/dspace/statistics/export/IrusExportUsageEventListener.java\n\n@@ -25,9 +25,9 @@ import org.springframework.beans.factory.annotation.Autowired;\n /**\n  * Class to receive usage events and send corresponding data to IRUS\n  */\n-public class ExportUsageEventListener extends AbstractUsageEventListener {\n+public class IrusExportUsageEventListener extends AbstractUsageEventListener {\n     /*  Log4j logger*/\n-    private static Logger log = Logger.getLogger(ExportUsageEventListener.class);\n+    private static Logger log = Logger.getLogger(IrusExportUsageEventListener.class);\n \n     @Autowired\n     ConfigurationService configurationService;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4NTQ0Mw==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r467185443", "bodyText": "Does it matter to IRUS that this Bitstream download URL might end up being at a different hostname from the DSpace UI?   This might be perfectly OK for IRUS, but I just wanted to call out the fact that dspace.server.url and dspace.ui.url may be entirely different servers/hosts/origins.  If that has an impact on IRUS, we may want to change this getBitstreamInfo() method to give a valid dspace.ui.url for downloading the Bitstream (which would just redirect to the REST API obviously).\nIf we've verified that IRUS doesn't care about this, then no need to worry about it.  I just wanted to add a comment as I noticed that some URLs we pass to IRUS are using dspace.ui.url (e.g. the Item URLs from ItemEventProcessor), while this one uses dspace.server.url.", "author": "tdonohue", "createdAt": "2020-08-07T17:51:50Z", "path": "dspace-api/src/main/java/org/dspace/statistics/export/processor/BitstreamEventProcessor.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export.processor;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.sql.SQLException;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.content.Bitstream;\n+import org.dspace.content.Bundle;\n+import org.dspace.content.Item;\n+import org.dspace.core.Context;\n+import org.dspace.statistics.util.SpiderDetector;\n+\n+/**\n+ * Processor that handles Bitstream events from the ExportUsageEventListener\n+ */\n+public class BitstreamEventProcessor extends ExportEventProcessor {\n+\n+    private Item item;\n+    private Bitstream bitstream;\n+\n+    /**\n+     * Creates a new BitstreamEventProcessor that will set the params and obtain the parent item of the bitstream\n+     *\n+     * @param context\n+     * @param request\n+     * @param bitstream\n+     * @throws SQLException\n+     */\n+    public BitstreamEventProcessor(Context context, HttpServletRequest request, Bitstream bitstream)\n+            throws SQLException {\n+        super(context, request);\n+        this.bitstream = bitstream;\n+        this.item = getItem();\n+    }\n+\n+    /**\n+     * Returns the parent item of the bitsream\n+     *\n+     * @return parent item of the bitstream\n+     * @throws SQLException\n+     */\n+    private Item getItem() throws SQLException {\n+        if (0 < bitstream.getBundles().size()) {\n+            if (!SpiderDetector.isSpider(request)) {\n+                Bundle bundle = bitstream.getBundles().get(0);\n+                if (bundle.getName() == null || !bundle.getName().equals(\"ORIGINAL\")) {\n+                    return null;\n+                }\n+\n+                if (0 < bundle.getItems().size()) {\n+                    Item item = bundle.getItems().get(0);\n+                    return item;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Process the event\n+     * Check if the item should be processed\n+     * Create the url to be transmitted based on item and bitstream data\n+     *\n+     * @throws SQLException\n+     * @throws IOException\n+     */\n+    public void processEvent() throws SQLException, IOException {\n+        if (shouldProcessItem(item)) {\n+            String baseParam = getBaseParameters(item);\n+            String fullParam = addObjectSpecificData(baseParam, bitstream);\n+            processObject(fullParam);\n+        }\n+    }\n+\n+    /**\n+     * Adds additional item and bitstream data to the url\n+     *\n+     * @param string    to which the additional data needs to be added\n+     * @param bitstream\n+     * @return the string with additional data\n+     * @throws UnsupportedEncodingException\n+     */\n+    protected String addObjectSpecificData(final String string, Bitstream bitstream)\n+            throws UnsupportedEncodingException {\n+        StringBuilder data = new StringBuilder(string);\n+\n+        String bitstreamInfo = getBitstreamInfo(bitstream);\n+        data.append(\"&\").append(URLEncoder.encode(\"svc_dat\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(bitstreamInfo, UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"rft_dat\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(BITSTREAM_DOWNLOAD, UTF_8));\n+\n+        return data.toString();\n+    }\n+\n+    /**\n+     * Get Bitstream info used for the url\n+     *\n+     * @param bitstream\n+     * @return bitstream info\n+     */\n+    private String getBitstreamInfo(final Bitstream bitstream) {\n+\n+        String dspaceRestUrl = configurationService.getProperty(\"dspace.server.url\");", "originalCommit": "0e5263e06f8aaf651b0a5555faeb3f97d9ffb63e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d793ec2d96552fad6588f8cb5f1295c2c0bb7d7", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/statistics/export/processor/BitstreamEventProcessor.java b/dspace-api/src/main/java/org/dspace/statistics/export/processor/BitstreamEventProcessor.java\nindex 78138e815..cff4d5fd2 100644\n--- a/dspace-api/src/main/java/org/dspace/statistics/export/processor/BitstreamEventProcessor.java\n+++ b/dspace-api/src/main/java/org/dspace/statistics/export/processor/BitstreamEventProcessor.java\n\n@@ -17,13 +17,18 @@ import org.dspace.content.Bitstream;\n import org.dspace.content.Bundle;\n import org.dspace.content.Item;\n import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n import org.dspace.statistics.util.SpiderDetector;\n \n /**\n- * Processor that handles Bitstream events from the ExportUsageEventListener\n+ * Processor that handles Bitstream events from the IrusExportUsageEventListener\n  */\n public class BitstreamEventProcessor extends ExportEventProcessor {\n \n+    private ConfigurationService configurationService = DSpaceServicesFactory.getInstance().getConfigurationService();\n+\n+\n     private Item item;\n     private Bitstream bitstream;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4NzYyMw==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r467187623", "bodyText": "NOTE: You don't need to cache all these Configuration properties globally.  Doing that means that a site cannot modify these configurations without having to restart Tomcat.\nUsually, we simply load the configuration when we need it... as that ensures it is read at that point in time from the ConfigurationService, and modifying the value in your local.cfg therefore does NOT require restarting Tomcat.  This is the preferred behavior, so I'd recommend removing this initProperties() entirely, unless you have a real reason for caching these properties in this class\n(Keep in mind, the ConfigurationService already does its own caching to ensure it performs well...so there's no need to cache these settings for better performance.)\nUPDATE: I think if you fix this, your tests will work better. I noticed a lot of your tests are strangely having to pass the ConfigurationService back to the EventProcessor. This should never be necessary if you simply load the Configurations dynamically instead of caching them in the class.", "author": "tdonohue", "createdAt": "2020-08-07T17:56:17Z", "path": "dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export.processor;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.apache.commons.codec.CharEncoding;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.log4j.Logger;\n+import org.dspace.content.DCDate;\n+import org.dspace.content.Entity;\n+import org.dspace.content.EntityType;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.EntityService;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.core.Context;\n+import org.dspace.core.Utils;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.statistics.export.factory.OpenURLTrackerLoggerServiceFactory;\n+import org.dspace.statistics.export.service.OpenUrlService;\n+\n+/**\n+ * Abstract export event processor that contains all shared logic to handle both Items and Bitstreams\n+ * from the ExportUsageEventListener\n+ */\n+public abstract class ExportEventProcessor {\n+\n+    private static Logger log = Logger.getLogger(ExportEventProcessor.class);\n+\n+    /* The metadata field which is to be checked for */\n+    protected String trackerTypeMetadataField;\n+\n+    /* A list of entity types that will be processed */\n+    protected List<String> entityTypes;\n+    protected static final String ENTITY_TYPE_DEFAULT = \"Publication\";\n+\n+    /* A list of values the type might have */\n+    protected List<String> trackerTypeMetadataValues;\n+\n+    /* The base url of the tracker */\n+    protected String baseUrl;\n+\n+    protected String trackerUrlVersion;\n+\n+    protected static final String ITEM_VIEW = \"Investigation\";\n+    protected static final String BITSTREAM_DOWNLOAD = \"Request\";\n+\n+    protected final static String UTF_8 = CharEncoding.UTF_8;\n+\n+    protected ConfigurationService configurationService = DSpaceServicesFactory.getInstance().getConfigurationService();\n+    protected EntityTypeService entityTypeService = ContentServiceFactory.getInstance().getEntityTypeService();\n+    protected EntityService entityService = ContentServiceFactory.getInstance().getEntityService();\n+    protected ItemService itemService = ContentServiceFactory.getInstance().getItemService();\n+    protected OpenUrlService openUrlService = OpenURLTrackerLoggerServiceFactory.getInstance().getOpenUrlService();\n+\n+\n+    protected Context context;\n+    protected HttpServletRequest request;\n+\n+    /**\n+     * Creates a new ExportEventProcessor based on the params and initializes the services\n+     *\n+     * @param context\n+     * @param request\n+     */\n+    ExportEventProcessor(Context context, HttpServletRequest request) {\n+        this.context = context;\n+        this.request = request;\n+        initProperties();\n+    }\n+\n+    /**\n+     * Processes the event\n+     *\n+     * @throws SQLException\n+     * @throws IOException\n+     */\n+    public abstract void processEvent() throws SQLException, IOException;\n+\n+    /**\n+     * Process the url obtained from the object to be transmitted\n+     *\n+     * @param urlParameters\n+     * @throws IOException\n+     * @throws SQLException\n+     */\n+    protected void processObject(String urlParameters) throws IOException, SQLException {\n+\n+        openUrlService.processUrl(context, baseUrl + \"?\" + urlParameters);\n+    }\n+\n+    /**\n+     * Get the base parameters for the url to be transmitted\n+     *\n+     * @param item\n+     * @return the parameter string to be used in the url\n+     * @throws UnsupportedEncodingException\n+     */\n+    protected String getBaseParameters(Item item)\n+            throws UnsupportedEncodingException {\n+\n+        //We have a valid url collect the rest of the data\n+        String clientIP = request.getRemoteAddr();\n+        if (configurationService.getBooleanProperty(\"useProxies\", false) && request\n+                .getHeader(\"X-Forwarded-For\") != null) {\n+            /* This header is a comma delimited list */\n+            for (String xfip : request.getHeader(\"X-Forwarded-For\").split(\",\")) {\n+                /* proxy itself will sometime populate this header with the same value in\n+                    remote address. ordering in spec is vague, we'll just take the last\n+                    not equal to the proxy\n+                */\n+                if (!request.getHeader(\"X-Forwarded-For\").contains(clientIP)) {\n+                    clientIP = xfip.trim();\n+                }\n+            }\n+        }\n+        String clientUA = StringUtils.defaultIfBlank(request.getHeader(\"USER-AGENT\"), \"\");\n+        String referer = StringUtils.defaultIfBlank(request.getHeader(\"referer\"), \"\");\n+\n+        //Start adding our data\n+        StringBuilder data = new StringBuilder();\n+        data.append(URLEncoder.encode(\"url_ver\", UTF_8) + \"=\" + URLEncoder.encode(trackerUrlVersion, UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"req_id\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(clientIP, UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"req_dat\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(clientUA, UTF_8));\n+\n+        String hostName = Utils.getHostName(configurationService.getProperty(\"dspace.ui.url\"));\n+\n+        data.append(\"&\").append(URLEncoder.encode(\"rft.artnum\", UTF_8)).append(\"=\").\n+                append(URLEncoder.encode(\"oai:\" + hostName + \":\" + item\n+                        .getHandle(), UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"rfr_dat\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(referer, UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"rfr_id\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(hostName, UTF_8));\n+        data.append(\"&\").append(URLEncoder.encode(\"url_tim\", UTF_8)).append(\"=\")\n+            .append(URLEncoder.encode(getCurrentDateString(), UTF_8));\n+\n+        return data.toString();\n+    }\n+\n+    /**\n+     * Get the current date\n+     *\n+     * @return the current date as a string\n+     */\n+    protected String getCurrentDateString() {\n+        return new DCDate(new Date()).toString();\n+    }\n+\n+    /**\n+     * Checks if an item should be processed\n+     *\n+     * @param item to be checked\n+     * @return whether the item should be processed\n+     * @throws SQLException\n+     */\n+    protected boolean shouldProcessItem(Item item) throws SQLException {\n+        if (item == null) {\n+            return false;\n+        }\n+        if (!item.isArchived()) {\n+            return false;\n+        }\n+        if (itemService.canEdit(context, item)) {\n+            return false;\n+        }\n+        if (!shouldProcessItemType(item)) {\n+            return false;\n+        }\n+        if (!shouldProcessEntityType(item)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Checks if the item's entity type should be processed\n+     *\n+     * @param item to be checked\n+     * @return whether the item should be processed\n+     * @throws SQLException\n+     */\n+    protected boolean shouldProcessEntityType(Item item) throws SQLException {\n+        Entity entity = entityService.findByItemId(context, item.getID());\n+        EntityType type = entityService.getType(context, entity);\n+\n+        if (type != null && entityTypes.contains(type.getLabel())) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Checks if the item should be excluded based on the its type\n+     *\n+     * @param item to be checked\n+     * @return whether the item should be processed\n+     */\n+    protected boolean shouldProcessItemType(Item item) {\n+        if (trackerTypeMetadataField != null && trackerTypeMetadataValues != null) {\n+\n+            // Contains the schema, element and if present qualifier of the metadataField\n+            String[] metadataFieldSplit = trackerTypeMetadataField.split(\"\\\\.\");\n+\n+            List<MetadataValue> types = itemService\n+                    .getMetadata(item, metadataFieldSplit[0], metadataFieldSplit[1],\n+                                 metadataFieldSplit.length == 2 ? null : metadataFieldSplit[2], Item.ANY);\n+\n+            if (!types.isEmpty()) {\n+                //Find out if we have a type that needs to be excluded\n+                for (MetadataValue type : types) {\n+                    if (trackerTypeMetadataValues.contains(type.getValue().toLowerCase())) {\n+                        //We have found no type so process this item\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            } else {\n+                // No types in this item, so not excluded\n+                return true;\n+            }\n+        } else {\n+            // No types to be excluded\n+            return true;\n+        }\n+    }\n+\n+    /**\n+     * Initializes services and params obtained from DSpace config\n+     */\n+    private void initProperties() {", "originalCommit": "0e5263e06f8aaf651b0a5555faeb3f97d9ffb63e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4MTUxOA==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r467281518", "bodyText": "If you inspect random DSpace classes, you will indeed see configuration properties being loaded at construction or even statically, and kept forever.  That pattern worked well with ConfigurationManager, but it's a poor use of ConfigurationService (one that I'm trying to forget).", "author": "mwoodiupui", "createdAt": "2020-08-07T21:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4NzYyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1NDY2MA==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r474754660", "bodyText": "Updated the config to be loaded where needed.", "author": "YanaDePauw", "createdAt": "2020-08-21T15:01:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4NzYyMw=="}], "type": "inlineReview", "revised_code": {"commit": "7d793ec2d96552fad6588f8cb5f1295c2c0bb7d7", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java b/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java\nindex e703af787..25797697f 100644\n--- a/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java\n+++ b/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java\n\n@@ -27,7 +27,6 @@ import org.dspace.content.Item;\n import org.dspace.content.MetadataValue;\n import org.dspace.content.factory.ContentServiceFactory;\n import org.dspace.content.service.EntityService;\n-import org.dspace.content.service.EntityTypeService;\n import org.dspace.content.service.ItemService;\n import org.dspace.core.Context;\n import org.dspace.core.Utils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4OTc2Nw==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r467189767", "bodyText": "This Connection never seems to be closed? I think we need to close the connection here after getting the responseCode.", "author": "tdonohue", "createdAt": "2020-08-07T18:00:39Z", "path": "dspace-api/src/main/java/org/dspace/statistics/export/service/OpenUrlServiceImpl.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export.service;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.sql.SQLException;\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.log4j.Logger;\n+import org.dspace.core.Context;\n+import org.dspace.statistics.export.OpenURLTracker;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+/**\n+ * Implementation of the OpenUrlService interface\n+ */\n+public class OpenUrlServiceImpl implements OpenUrlService {\n+\n+    private Logger log = Logger.getLogger(OpenUrlService.class);\n+\n+    @Autowired\n+    protected FailedOpenURLTrackerService failedOpenUrlTrackerService;\n+\n+    /**\n+     * Processes the url\n+     * When the contacting the url fails, the url will be logged in a db table\n+     * @param c - the context\n+     * @param urlStr - the url to be processed\n+     * @throws SQLException\n+     */\n+    public void processUrl(Context c, String urlStr) throws SQLException {\n+        log.debug(\"Prepared to send url to tracker URL: \" + urlStr);\n+\n+        try {\n+            int responseCode = getResponseCodeFromUrl(urlStr);\n+            if (responseCode != HttpURLConnection.HTTP_OK) {\n+                logfailed(c, urlStr);\n+            } else if (log.isDebugEnabled()) {\n+                log.debug(\"Successfully posted \" + urlStr + \" on \" + new Date());\n+            }\n+        } catch (Exception e) {\n+            log.error(\"Failed to send url to tracker URL: \" + urlStr);\n+            logfailed(c, urlStr);\n+        }\n+    }\n+\n+    /**\n+     * Returns the response code from accessing the url\n+     * @param urlStr\n+     * @return response code from the url\n+     * @throws IOException\n+     */\n+    protected int getResponseCodeFromUrl(final String urlStr) throws IOException {\n+        URLConnection conn;\n+        URL url = new URL(urlStr);\n+        conn = url.openConnection();\n+\n+        return ((HttpURLConnection) conn).getResponseCode();", "originalCommit": "0e5263e06f8aaf651b0a5555faeb3f97d9ffb63e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1NTQxOA==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r474755418", "bodyText": "The connection is now disconnected after reading the status result", "author": "YanaDePauw", "createdAt": "2020-08-21T15:03:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4OTc2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7d793ec2d96552fad6588f8cb5f1295c2c0bb7d7", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/statistics/export/service/OpenUrlServiceImpl.java b/dspace-api/src/main/java/org/dspace/statistics/export/service/OpenUrlServiceImpl.java\nindex 39d9ec321..8555bb098 100644\n--- a/dspace-api/src/main/java/org/dspace/statistics/export/service/OpenUrlServiceImpl.java\n+++ b/dspace-api/src/main/java/org/dspace/statistics/export/service/OpenUrlServiceImpl.java\n\n@@ -65,7 +65,11 @@ public class OpenUrlServiceImpl implements OpenUrlService {\n         URL url = new URL(urlStr);\n         conn = url.openConnection();\n \n-        return ((HttpURLConnection) conn).getResponseCode();\n+        HttpURLConnection httpURLConnection = (HttpURLConnection) conn;\n+        int responseCode = httpURLConnection.getResponseCode();\n+        httpURLConnection.disconnect();\n+\n+        return responseCode;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5Mjc4NA==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r467192784", "bodyText": "Please update init() to use Builder classes (which have now moved to dspace-api...see #2897.  That will allow you to simplify the destroy() method.", "author": "tdonohue", "createdAt": "2020-08-07T18:07:05Z", "path": "dspace-api/src/test/java/org/dspace/statistics/export/ITExportUsageEventListener.java", "diffHunk": "@@ -0,0 +1,432 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.doCallRealMethod;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.apache.commons.codec.CharEncoding;\n+import org.apache.log4j.Logger;\n+import org.dspace.AbstractIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Bitstream;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.EntityType;\n+import org.dspace.content.Item;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.BitstreamService;\n+import org.dspace.content.service.BundleService;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.InstallItemService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.factory.EPersonServiceFactory;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.statistics.export.factory.OpenURLTrackerLoggerServiceFactory;\n+import org.dspace.statistics.export.service.FailedOpenURLTrackerService;\n+import org.dspace.usage.UsageEvent;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Spy;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+/**\n+ * Test class for the ExportUsageEventListener\n+ */\n+@RunWith(MockitoJUnitRunner.class)\n+public class ITExportUsageEventListener extends AbstractIntegrationTest {\n+\n+    private static Logger log = Logger.getLogger(ITExportUsageEventListener.class);\n+\n+\n+    protected CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();\n+    protected ConfigurationService configurationService = DSpaceServicesFactory.getInstance().getConfigurationService();\n+    protected CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();\n+    protected ItemService itemService = ContentServiceFactory.getInstance().getItemService();\n+    protected InstallItemService installItemService = ContentServiceFactory.getInstance().getInstallItemService();\n+    protected WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n+    protected EPersonService ePersonService = EPersonServiceFactory.getInstance().getEPersonService();\n+    protected GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+    protected BundleService bundleService = ContentServiceFactory.getInstance().getBundleService();\n+    protected BitstreamService bitstreamService = ContentServiceFactory.getInstance().getBitstreamService();\n+    protected EntityTypeService entityTypeService = ContentServiceFactory.getInstance().getEntityTypeService();\n+    protected FailedOpenURLTrackerService failedOpenURLTrackerService =\n+            OpenURLTrackerLoggerServiceFactory.getInstance().getOpenUrlTrackerLoggerService();\n+\n+    protected ArrayList testProcessedUrls = DSpaceServicesFactory.getInstance().getServiceManager()\n+                                                                 .getServiceByName(\"testProcessedUrls\",\n+                                                                                   ArrayList.class);\n+\n+    @Spy\n+    ExportUsageEventListener exportUsageEventListener;\n+\n+    private Item item;\n+    private Item itemNotToBeProcessed;\n+    private Bitstream bitstream;\n+    private Bitstream bitstreamNotToBeProcessed;\n+    private EntityType entityType;\n+    private Community community;\n+    private Collection collection;\n+\n+    private String encodedUrl;\n+    private String encodedUIUrl;\n+\n+\n+    /**\n+     * Initializes the test by setting up all objects needed to create a test item\n+     */\n+    @Before()\n+    public void init() {\n+        super.init();\n+\n+        configurationService.setProperty(\"stats.tracker.enabled\", true);\n+        configurationService.setProperty(\"stats.tracker.type-field\", \"dc.type\");\n+        configurationService.setProperty(\"stats.tracker.type-value\", \"Excluded type\");\n+\n+\n+        context.turnOffAuthorisationSystem();\n+        try {\n+            exportUsageEventListener.configurationService = configurationService;\n+\n+            entityType = entityTypeService.create(context, \"Publication\");\n+            community = communityService.create(null, context);\n+            collection = collectionService.create(context, community);\n+            item = installItemService.installItem(context, workspaceItemService.create(context, collection, false));", "originalCommit": "0e5263e06f8aaf651b0a5555faeb3f97d9ffb63e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1NTk2OA==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r474755968", "bodyText": "Updated the tests to use the Builder classes.", "author": "YanaDePauw", "createdAt": "2020-08-21T15:04:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5Mjc4NA=="}], "type": "inlineReview", "revised_code": {"commit": "7d793ec2d96552fad6588f8cb5f1295c2c0bb7d7", "chunk": "diff --git a/dspace-api/src/test/java/org/dspace/statistics/export/ITExportUsageEventListener.java b/dspace-api/src/test/java/org/dspace/statistics/export/ITIrusExportUsageEventListener.java\nsimilarity index 79%\nrename from dspace-api/src/test/java/org/dspace/statistics/export/ITExportUsageEventListener.java\nrename to dspace-api/src/test/java/org/dspace/statistics/export/ITIrusExportUsageEventListener.java\nindex e5ec49bc8..05344ae9a 100644\n--- a/dspace-api/src/test/java/org/dspace/statistics/export/ITExportUsageEventListener.java\n+++ b/dspace-api/src/test/java/org/dspace/statistics/export/ITIrusExportUsageEventListener.java\n\n@@ -7,10 +7,9 @@\n  */\n package org.dspace.statistics.export;\n \n-import static org.hamcrest.CoreMatchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n import static org.mockito.Matchers.anyString;\n-import static org.mockito.Mockito.doCallRealMethod;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NDY2Mg==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r467194662", "bodyText": "Just a note.  There's an assertEquals() method instead of assertThat(..., is())  There's also an assertTrue() instead of assertThat(... is(true)).  Those alternatives are a bit easier to read.  But, if you'd rather just use assertThat() everywhere, that's OK.", "author": "tdonohue", "createdAt": "2020-08-07T18:10:49Z", "path": "dspace-api/src/test/java/org/dspace/statistics/export/ITRetryFailedOpenUrlTracker.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export;\n+\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertThat;\n+\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.dspace.AbstractIntegrationTest;\n+import org.dspace.app.scripts.handler.impl.TestDSpaceRunnableHandler;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.dspace.scripts.configuration.ScriptConfiguration;\n+import org.dspace.scripts.factory.ScriptServiceFactory;\n+import org.dspace.scripts.service.ScriptService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.statistics.export.factory.OpenURLTrackerLoggerServiceFactory;\n+import org.dspace.statistics.export.service.FailedOpenURLTrackerService;\n+import org.junit.After;\n+import org.junit.Test;\n+\n+/**\n+ * Class to test the RetryFailedOpenUrlTracker\n+ */\n+public class ITRetryFailedOpenUrlTracker extends AbstractIntegrationTest {\n+\n+    private static Logger log = Logger.getLogger(ITRetryFailedOpenUrlTracker.class);\n+\n+\n+    protected FailedOpenURLTrackerService failedOpenURLTrackerService =\n+            OpenURLTrackerLoggerServiceFactory.getInstance().getOpenUrlTrackerLoggerService();\n+\n+    protected ArrayList testProcessedUrls = DSpaceServicesFactory.getInstance().getServiceManager()\n+                                                                 .getServiceByName(\"testProcessedUrls\",\n+                                                                                   ArrayList.class);\n+\n+    private ScriptService scriptService = ScriptServiceFactory.getInstance().getScriptService();\n+\n+\n+    /**\n+     * Clean up the logged entries from the db after each test\n+     */\n+    @After\n+    @Override\n+    public void destroy() {\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            List<OpenURLTracker> all = failedOpenURLTrackerService.findAll(context);\n+            for (OpenURLTracker tracker : all) {\n+                failedOpenURLTrackerService.remove(context, tracker);\n+            }\n+\n+            // Clear the list of processedUrls\n+            testProcessedUrls.clear();\n+\n+        } catch (Exception e) {\n+            log.error(e.getMessage(), e);\n+        } finally {\n+            try {\n+                context.complete();\n+            } catch (SQLException e) {\n+                log.error(e);\n+            }\n+        }\n+        super.destroy();\n+    }\n+\n+    /**\n+     * Test the mode of the script that allows the user to add a failed url to the database\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testAddNewFailedUrl() throws Exception {\n+\n+        TestDSpaceRunnableHandler testDSpaceRunnableHandler = new TestDSpaceRunnableHandler();\n+        ScriptConfiguration retryOpenUrlTrackerConfig = scriptService.getScriptConfiguration(\"retry-tracker\");\n+        DSpaceRunnable retryOpenUrlTracker =\n+                scriptService.createDSpaceRunnableForScriptConfiguration(retryOpenUrlTrackerConfig);\n+        String urlToAdd = \"test-failed-url\";\n+        String[] args = {\"-a\", urlToAdd};\n+\n+        retryOpenUrlTracker.initialize(args, testDSpaceRunnableHandler, eperson);\n+        retryOpenUrlTracker.internalRun();\n+\n+        List<OpenURLTracker> all = failedOpenURLTrackerService.findAll(context);\n+\n+        assertThat(testProcessedUrls.size(), is(0));\n+        assertThat(all.size(), is(1));\n+        assertThat(all.get(0).getUrl(), is(urlToAdd));\n+    }\n+\n+    /**\n+     * Test to check that all logged failed urls are reprocessed succesfully and removed from the db\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testReprocessAllUrls() throws Exception {\n+\n+        TestDSpaceRunnableHandler testDSpaceRunnableHandler = new TestDSpaceRunnableHandler();\n+        ScriptConfiguration retryOpenUrlTrackerConfig = scriptService.getScriptConfiguration(\"retry-tracker\");\n+        DSpaceRunnable retryOpenUrlTracker =\n+                scriptService.createDSpaceRunnableForScriptConfiguration(retryOpenUrlTrackerConfig);\n+        String[] args = {\"-r\"};\n+\n+        OpenURLTracker tracker1 = failedOpenURLTrackerService.create(context);\n+        tracker1.setUrl(\"test-url-1\");\n+        OpenURLTracker tracker2 = failedOpenURLTrackerService.create(context);\n+        tracker2.setUrl(\"test-url-2\");\n+        OpenURLTracker tracker3 = failedOpenURLTrackerService.create(context);\n+        tracker3.setUrl(\"test-url-3\");\n+\n+\n+        retryOpenUrlTracker.initialize(args, testDSpaceRunnableHandler, eperson);\n+        retryOpenUrlTracker.internalRun();\n+\n+        List<OpenURLTracker> all = failedOpenURLTrackerService.findAll(context);\n+\n+        assertThat(testProcessedUrls.size(), is(3));\n+        assertThat(testProcessedUrls.contains(\"test-url-1\"), is(true));\n+        assertThat(testProcessedUrls.contains(\"test-url-2\"), is(true));\n+        assertThat(testProcessedUrls.contains(\"test-url-3\"), is(true));", "originalCommit": "0e5263e06f8aaf651b0a5555faeb3f97d9ffb63e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1NjMzMQ==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r474756331", "bodyText": "I changed the asserts to be more specific and readable.", "author": "YanaDePauw", "createdAt": "2020-08-21T15:04:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NDY2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7d793ec2d96552fad6588f8cb5f1295c2c0bb7d7", "chunk": "diff --git a/dspace-api/src/test/java/org/dspace/statistics/export/ITRetryFailedOpenUrlTracker.java b/dspace-api/src/test/java/org/dspace/statistics/export/ITRetryFailedOpenUrlTracker.java\nindex 27b37aaf7..a445a6540 100644\n--- a/dspace-api/src/test/java/org/dspace/statistics/export/ITRetryFailedOpenUrlTracker.java\n+++ b/dspace-api/src/test/java/org/dspace/statistics/export/ITRetryFailedOpenUrlTracker.java\n\n@@ -7,8 +7,7 @@\n  */\n package org.dspace.statistics.export;\n \n-import static org.hamcrest.core.Is.is;\n-import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertEquals;\n \n import java.sql.SQLException;\n import java.util.ArrayList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NTk4Nw==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r467195987", "bodyText": "This line is unnecessary.  The bitstreamEventProcessor already has access to the ConfigurationService (which is a global service)  You don't need to change it's value.  In fact, this shouldn't be allowed...we should make the configurationService (and all services) private in the EventProcessors.", "author": "tdonohue", "createdAt": "2020-08-07T18:13:45Z", "path": "dspace-api/src/test/java/org/dspace/statistics/export/processor/BitstreamEventProcessorTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export.processor;\n+\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.CALLS_REAL_METHODS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.util.UUID;\n+\n+import org.apache.commons.codec.CharEncoding;\n+import org.dspace.AbstractDSpaceTest;\n+import org.dspace.content.Bitstream;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+\n+/**\n+ * Test class for the BitstreamEventProcessor\n+ */\n+public class BitstreamEventProcessorTest extends AbstractDSpaceTest {\n+\n+    @Mock\n+    private Bitstream bitstream = mock(Bitstream.class);\n+\n+    private ConfigurationService configurationService = DSpaceServicesFactory.getInstance().getConfigurationService();\n+\n+\n+    @InjectMocks\n+    BitstreamEventProcessor bitstreamEventProcessor = mock(BitstreamEventProcessor.class, CALLS_REAL_METHODS);\n+\n+    private String encodedUrl;\n+\n+\n+    @Before\n+    public void setUp() {\n+        configurationService.setProperty(\"stats.tracker.enabled\", true);\n+\n+        String dspaceUrl = configurationService.getProperty(\"dspace.server.url\");\n+        try {\n+            encodedUrl = URLEncoder.encode(dspaceUrl, CharEncoding.UTF_8);\n+        } catch (UnsupportedEncodingException e) {\n+            throw new AssertionError(\"Error occurred in setup()\", e);\n+        }\n+\n+    }\n+\n+    @Test\n+    /**\n+     * Test the method that adds data based on the object types\n+     */\n+    public void testAddObectSpecificData() throws UnsupportedEncodingException {\n+        bitstreamEventProcessor.configurationService = configurationService;", "originalCommit": "0e5263e06f8aaf651b0a5555faeb3f97d9ffb63e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1ODYyMA==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r474758620", "bodyText": "This was necessary originally due the EventProcessor being a mock object where the configuration service did not get initialised.\nDue to the other changes to the Objects and tests, this is no longer an issue.", "author": "YanaDePauw", "createdAt": "2020-08-21T15:08:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NTk4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7d793ec2d96552fad6588f8cb5f1295c2c0bb7d7", "chunk": "diff --git a/dspace-api/src/test/java/org/dspace/statistics/export/processor/BitstreamEventProcessorTest.java b/dspace-api/src/test/java/org/dspace/statistics/export/processor/BitstreamEventProcessorTest.java\nindex 632b56f5f..7e70242b9 100644\n--- a/dspace-api/src/test/java/org/dspace/statistics/export/processor/BitstreamEventProcessorTest.java\n+++ b/dspace-api/src/test/java/org/dspace/statistics/export/processor/BitstreamEventProcessorTest.java\n\n@@ -9,43 +9,43 @@ package org.dspace.statistics.export.processor;\n \n import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.assertThat;\n-import static org.mockito.Mockito.CALLS_REAL_METHODS;\n import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n \n+import java.io.File;\n+import java.io.FileInputStream;\n import java.io.UnsupportedEncodingException;\n import java.net.URLEncoder;\n-import java.util.UUID;\n+import javax.servlet.http.HttpServletRequest;\n \n import org.apache.commons.codec.CharEncoding;\n-import org.dspace.AbstractDSpaceTest;\n+import org.dspace.AbstractIntegrationTestWithDatabase;\n+import org.dspace.builder.BitstreamBuilder;\n+import org.dspace.builder.CollectionBuilder;\n+import org.dspace.builder.CommunityBuilder;\n+import org.dspace.builder.ItemBuilder;\n import org.dspace.content.Bitstream;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n import org.dspace.services.ConfigurationService;\n import org.dspace.services.factory.DSpaceServicesFactory;\n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.InjectMocks;\n-import org.mockito.Mock;\n \n /**\n  * Test class for the BitstreamEventProcessor\n  */\n-public class BitstreamEventProcessorTest extends AbstractDSpaceTest {\n-\n-    @Mock\n-    private Bitstream bitstream = mock(Bitstream.class);\n+public class BitstreamEventProcessorTest extends AbstractIntegrationTestWithDatabase {\n \n     private ConfigurationService configurationService = DSpaceServicesFactory.getInstance().getConfigurationService();\n \n \n-    @InjectMocks\n-    BitstreamEventProcessor bitstreamEventProcessor = mock(BitstreamEventProcessor.class, CALLS_REAL_METHODS);\n-\n     private String encodedUrl;\n \n \n     @Before\n-    public void setUp() {\n+    public void setUp() throws Exception {\n+        super.setUp();\n         configurationService.setProperty(\"stats.tracker.enabled\", true);\n \n         String dspaceUrl = configurationService.getProperty(\"dspace.server.url\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NjQ2Nw==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r467196467", "bodyText": "Again, don't change the services in your Processer. That's not needed.  These lines all must be removed.\nThis same flaw exists in all tests in this class.\nKeep in mind, the Context and Request can be modified via the constructor. So you should use the Constructor here to modify them.", "author": "tdonohue", "createdAt": "2020-08-07T18:14:39Z", "path": "dspace-api/src/test/java/org/dspace/statistics/export/processor/ExportEventProcessorTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export.processor;\n+\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.AbstractDSpaceTest;\n+import org.dspace.content.Entity;\n+import org.dspace.content.EntityType;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.service.EntityService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+/**\n+ * Test for the ExportEventProcessor class\n+ */\n+@RunWith(MockitoJUnitRunner.class)\n+public class ExportEventProcessorTest extends AbstractDSpaceTest {\n+\n+    @Mock\n+    private Context context = mock(Context.class);\n+    @Mock\n+    private HttpServletRequest request = mock(HttpServletRequest.class);\n+    @Mock\n+    private Item item = mock(Item.class);\n+\n+    private ConfigurationService configurationService = DSpaceServicesFactory.getInstance().getConfigurationService();\n+    @Mock\n+    private ItemService itemService = mock(ItemService.class);\n+    @Mock\n+    private EntityService entityService = mock(EntityService.class);\n+\n+\n+    @InjectMocks\n+    ExportEventProcessor exportEventProcessor = mock(ExportEventProcessor.class);\n+\n+    @Before\n+    public void setUp() {\n+        configurationService.setProperty(\"stats.tracker.enabled\", true);\n+    }\n+\n+    @Test\n+    /**\n+     * Test the getBaseParameters method\n+     */\n+    public void testGetBaseParameters() throws UnsupportedEncodingException {\n+        exportEventProcessor.context = context;\n+        exportEventProcessor.request = request;\n+        exportEventProcessor.configurationService = configurationService;", "originalCommit": "0e5263e06f8aaf651b0a5555faeb3f97d9ffb63e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1ODc4NA==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r474758784", "bodyText": "Same as above", "author": "YanaDePauw", "createdAt": "2020-08-21T15:09:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NjQ2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7d793ec2d96552fad6588f8cb5f1295c2c0bb7d7", "chunk": "diff --git a/dspace-api/src/test/java/org/dspace/statistics/export/processor/ExportEventProcessorTest.java b/dspace-api/src/test/java/org/dspace/statistics/export/processor/ExportEventProcessorTest.java\nindex 8b5acfa5f..0a020d609 100644\n--- a/dspace-api/src/test/java/org/dspace/statistics/export/processor/ExportEventProcessorTest.java\n+++ b/dspace-api/src/test/java/org/dspace/statistics/export/processor/ExportEventProcessorTest.java\n\n@@ -7,63 +7,66 @@\n  */\n package org.dspace.statistics.export.processor;\n \n+import static org.hamcrest.CoreMatchers.startsWith;\n import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertThat;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.Mockito.doReturn;\n+import static org.junit.Assert.assertTrue;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.UUID;\n import javax.servlet.http.HttpServletRequest;\n \n-import org.dspace.AbstractDSpaceTest;\n-import org.dspace.content.Entity;\n+import org.apache.commons.codec.CharEncoding;\n+import org.dspace.AbstractIntegrationTestWithDatabase;\n+import org.dspace.builder.CollectionBuilder;\n+import org.dspace.builder.CommunityBuilder;\n+import org.dspace.builder.EntityTypeBuilder;\n+import org.dspace.builder.ItemBuilder;\n+import org.dspace.builder.WorkspaceItemBuilder;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n import org.dspace.content.EntityType;\n import org.dspace.content.Item;\n-import org.dspace.content.MetadataValue;\n-import org.dspace.content.service.EntityService;\n-import org.dspace.content.service.ItemService;\n-import org.dspace.core.Context;\n+import org.dspace.content.WorkspaceItem;\n import org.dspace.services.ConfigurationService;\n import org.dspace.services.factory.DSpaceServicesFactory;\n import org.junit.Before;\n import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.junit.MockitoJUnitRunner;\n \n /**\n  * Test for the ExportEventProcessor class\n  */\n-@RunWith(MockitoJUnitRunner.class)\n-public class ExportEventProcessorTest extends AbstractDSpaceTest {\n+public class ExportEventProcessorTest extends AbstractIntegrationTestWithDatabase {\n \n-    @Mock\n-    private Context context = mock(Context.class);\n     @Mock\n     private HttpServletRequest request = mock(HttpServletRequest.class);\n-    @Mock\n-    private Item item = mock(Item.class);\n \n     private ConfigurationService configurationService = DSpaceServicesFactory.getInstance().getConfigurationService();\n-    @Mock\n-    private ItemService itemService = mock(ItemService.class);\n-    @Mock\n-    private EntityService entityService = mock(EntityService.class);\n-\n \n-    @InjectMocks\n-    ExportEventProcessor exportEventProcessor = mock(ExportEventProcessor.class);\n+    private EntityType publication;\n+    private EntityType otherEntity;\n+    private final String excluded_type = \"Excluded type\";\n \n     @Before\n-    public void setUp() {\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        configurationService.setProperty(\"stats.tracker.urlversion\", \"Z39.88-2004\");\n         configurationService.setProperty(\"stats.tracker.enabled\", true);\n+        configurationService.setProperty(\"stats.tracker.type-field\", \"dc.type\");\n+        configurationService.setProperty(\"stats.tracker.type-value\", \"Excluded type\");\n+\n+        context.turnOffAuthorisationSystem();\n+        publication = EntityTypeBuilder.createEntityTypeBuilder(context, \"Publication\").build();\n+        otherEntity = EntityTypeBuilder.createEntityTypeBuilder(context, \"Other\").build();\n+        context.restoreAuthSystemState();\n+\n+\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NzI4MQ==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r467197281", "bodyText": "This should be set via configurationService.setProperty(\"stats.tracker.urlversion\", \"Z39.88-2004\") instead of modifying the class directly.  That'd make this test better as it ensures the configuration is working properly.", "author": "tdonohue", "createdAt": "2020-08-07T18:16:23Z", "path": "dspace-api/src/test/java/org/dspace/statistics/export/processor/ExportEventProcessorTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export.processor;\n+\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.AbstractDSpaceTest;\n+import org.dspace.content.Entity;\n+import org.dspace.content.EntityType;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.service.EntityService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+/**\n+ * Test for the ExportEventProcessor class\n+ */\n+@RunWith(MockitoJUnitRunner.class)\n+public class ExportEventProcessorTest extends AbstractDSpaceTest {\n+\n+    @Mock\n+    private Context context = mock(Context.class);\n+    @Mock\n+    private HttpServletRequest request = mock(HttpServletRequest.class);\n+    @Mock\n+    private Item item = mock(Item.class);\n+\n+    private ConfigurationService configurationService = DSpaceServicesFactory.getInstance().getConfigurationService();\n+    @Mock\n+    private ItemService itemService = mock(ItemService.class);\n+    @Mock\n+    private EntityService entityService = mock(EntityService.class);\n+\n+\n+    @InjectMocks\n+    ExportEventProcessor exportEventProcessor = mock(ExportEventProcessor.class);\n+\n+    @Before\n+    public void setUp() {\n+        configurationService.setProperty(\"stats.tracker.enabled\", true);\n+    }\n+\n+    @Test\n+    /**\n+     * Test the getBaseParameters method\n+     */\n+    public void testGetBaseParameters() throws UnsupportedEncodingException {\n+        exportEventProcessor.context = context;\n+        exportEventProcessor.request = request;\n+        exportEventProcessor.configurationService = configurationService;\n+        exportEventProcessor.trackerUrlVersion = \"Z39.88-2004\";", "originalCommit": "0e5263e06f8aaf651b0a5555faeb3f97d9ffb63e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc1OTY1Nw==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r474759657", "bodyText": "Set the configuration in the configuration service", "author": "YanaDePauw", "createdAt": "2020-08-21T15:10:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NzI4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7d793ec2d96552fad6588f8cb5f1295c2c0bb7d7", "chunk": "diff --git a/dspace-api/src/test/java/org/dspace/statistics/export/processor/ExportEventProcessorTest.java b/dspace-api/src/test/java/org/dspace/statistics/export/processor/ExportEventProcessorTest.java\nindex 8b5acfa5f..0a020d609 100644\n--- a/dspace-api/src/test/java/org/dspace/statistics/export/processor/ExportEventProcessorTest.java\n+++ b/dspace-api/src/test/java/org/dspace/statistics/export/processor/ExportEventProcessorTest.java\n\n@@ -7,63 +7,66 @@\n  */\n package org.dspace.statistics.export.processor;\n \n+import static org.hamcrest.CoreMatchers.startsWith;\n import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertThat;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.Mockito.doReturn;\n+import static org.junit.Assert.assertTrue;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.UUID;\n import javax.servlet.http.HttpServletRequest;\n \n-import org.dspace.AbstractDSpaceTest;\n-import org.dspace.content.Entity;\n+import org.apache.commons.codec.CharEncoding;\n+import org.dspace.AbstractIntegrationTestWithDatabase;\n+import org.dspace.builder.CollectionBuilder;\n+import org.dspace.builder.CommunityBuilder;\n+import org.dspace.builder.EntityTypeBuilder;\n+import org.dspace.builder.ItemBuilder;\n+import org.dspace.builder.WorkspaceItemBuilder;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n import org.dspace.content.EntityType;\n import org.dspace.content.Item;\n-import org.dspace.content.MetadataValue;\n-import org.dspace.content.service.EntityService;\n-import org.dspace.content.service.ItemService;\n-import org.dspace.core.Context;\n+import org.dspace.content.WorkspaceItem;\n import org.dspace.services.ConfigurationService;\n import org.dspace.services.factory.DSpaceServicesFactory;\n import org.junit.Before;\n import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.junit.MockitoJUnitRunner;\n \n /**\n  * Test for the ExportEventProcessor class\n  */\n-@RunWith(MockitoJUnitRunner.class)\n-public class ExportEventProcessorTest extends AbstractDSpaceTest {\n+public class ExportEventProcessorTest extends AbstractIntegrationTestWithDatabase {\n \n-    @Mock\n-    private Context context = mock(Context.class);\n     @Mock\n     private HttpServletRequest request = mock(HttpServletRequest.class);\n-    @Mock\n-    private Item item = mock(Item.class);\n \n     private ConfigurationService configurationService = DSpaceServicesFactory.getInstance().getConfigurationService();\n-    @Mock\n-    private ItemService itemService = mock(ItemService.class);\n-    @Mock\n-    private EntityService entityService = mock(EntityService.class);\n-\n \n-    @InjectMocks\n-    ExportEventProcessor exportEventProcessor = mock(ExportEventProcessor.class);\n+    private EntityType publication;\n+    private EntityType otherEntity;\n+    private final String excluded_type = \"Excluded type\";\n \n     @Before\n-    public void setUp() {\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        configurationService.setProperty(\"stats.tracker.urlversion\", \"Z39.88-2004\");\n         configurationService.setProperty(\"stats.tracker.enabled\", true);\n+        configurationService.setProperty(\"stats.tracker.type-field\", \"dc.type\");\n+        configurationService.setProperty(\"stats.tracker.type-value\", \"Excluded type\");\n+\n+        context.turnOffAuthorisationSystem();\n+        publication = EntityTypeBuilder.createEntityTypeBuilder(context, \"Publication\").build();\n+        otherEntity = EntityTypeBuilder.createEntityTypeBuilder(context, \"Other\").build();\n+        context.restoreAuthSystemState();\n+\n+\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5Nzk5Ng==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r467197996", "bodyText": "These services should all be private.  You should not allow service sharing between classes, as all of these Services can be reloaded globally where needed.", "author": "tdonohue", "createdAt": "2020-08-07T18:17:55Z", "path": "dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export.processor;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.apache.commons.codec.CharEncoding;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.log4j.Logger;\n+import org.dspace.content.DCDate;\n+import org.dspace.content.Entity;\n+import org.dspace.content.EntityType;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.EntityService;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.core.Context;\n+import org.dspace.core.Utils;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.statistics.export.factory.OpenURLTrackerLoggerServiceFactory;\n+import org.dspace.statistics.export.service.OpenUrlService;\n+\n+/**\n+ * Abstract export event processor that contains all shared logic to handle both Items and Bitstreams\n+ * from the ExportUsageEventListener\n+ */\n+public abstract class ExportEventProcessor {\n+\n+    private static Logger log = Logger.getLogger(ExportEventProcessor.class);\n+\n+    /* The metadata field which is to be checked for */\n+    protected String trackerTypeMetadataField;\n+\n+    /* A list of entity types that will be processed */\n+    protected List<String> entityTypes;\n+    protected static final String ENTITY_TYPE_DEFAULT = \"Publication\";\n+\n+    /* A list of values the type might have */\n+    protected List<String> trackerTypeMetadataValues;\n+\n+    /* The base url of the tracker */\n+    protected String baseUrl;\n+\n+    protected String trackerUrlVersion;\n+\n+    protected static final String ITEM_VIEW = \"Investigation\";\n+    protected static final String BITSTREAM_DOWNLOAD = \"Request\";\n+\n+    protected final static String UTF_8 = CharEncoding.UTF_8;\n+\n+    protected ConfigurationService configurationService = DSpaceServicesFactory.getInstance().getConfigurationService();\n+    protected EntityTypeService entityTypeService = ContentServiceFactory.getInstance().getEntityTypeService();\n+    protected EntityService entityService = ContentServiceFactory.getInstance().getEntityService();\n+    protected ItemService itemService = ContentServiceFactory.getInstance().getItemService();\n+    protected OpenUrlService openUrlService = OpenURLTrackerLoggerServiceFactory.getInstance().getOpenUrlService();", "originalCommit": "0e5263e06f8aaf651b0a5555faeb3f97d9ffb63e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2MDM2NA==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r474760364", "bodyText": "Made the services private. As a consequence I could no longer easily mock them so the tests have been updated to use the real services instead.", "author": "YanaDePauw", "createdAt": "2020-08-21T15:11:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5Nzk5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7d793ec2d96552fad6588f8cb5f1295c2c0bb7d7", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java b/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java\nindex e703af787..25797697f 100644\n--- a/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java\n+++ b/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java\n\n@@ -27,7 +27,6 @@ import org.dspace.content.Item;\n import org.dspace.content.MetadataValue;\n import org.dspace.content.factory.ContentServiceFactory;\n import org.dspace.content.service.EntityService;\n-import org.dspace.content.service.EntityTypeService;\n import org.dspace.content.service.ItemService;\n import org.dspace.core.Context;\n import org.dspace.core.Utils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5OTY5MA==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r467199690", "bodyText": "Again, as noted before, don't do this.  It's not a best practice to change services in other classes, even in tests.", "author": "tdonohue", "createdAt": "2020-08-07T18:21:42Z", "path": "dspace-api/src/test/java/org/dspace/statistics/export/processor/ItemEventProcessorTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export.processor;\n+\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.CALLS_REAL_METHODS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+\n+import org.apache.commons.codec.CharEncoding;\n+import org.dspace.AbstractDSpaceTest;\n+import org.dspace.content.Item;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+\n+/**\n+ * Test class for the ItemEventProcessor\n+ */\n+public class ItemEventProcessorTest extends AbstractDSpaceTest {\n+\n+    @Mock\n+    private Item item = mock(Item.class);\n+\n+    private ConfigurationService configurationService = DSpaceServicesFactory.getInstance().getConfigurationService();\n+\n+    @InjectMocks\n+    ItemEventProcessor itemEventProcessor = mock(ItemEventProcessor.class, CALLS_REAL_METHODS);\n+\n+    private String encodedUrl;\n+\n+    @Before\n+    public void setUp() {\n+        configurationService.setProperty(\"stats.tracker.enabled\", true);\n+\n+        String dspaceUrl = configurationService.getProperty(\"dspace.ui.url\");\n+        try {\n+            encodedUrl = URLEncoder.encode(dspaceUrl, CharEncoding.UTF_8);\n+        } catch (UnsupportedEncodingException e) {\n+            throw new AssertionError(\"Error occurred in setup()\", e);\n+        }\n+    }\n+\n+    @Test\n+    /**\n+     * Test the method that adds data based on the object types\n+     */\n+    public void testAddObectSpecificData() throws UnsupportedEncodingException {\n+        itemEventProcessor.configurationService = configurationService;", "originalCommit": "0e5263e06f8aaf651b0a5555faeb3f97d9ffb63e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2MDUyNA==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r474760524", "bodyText": "Same as above.", "author": "YanaDePauw", "createdAt": "2020-08-21T15:11:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5OTY5MA=="}], "type": "inlineReview", "revised_code": {"commit": "7d793ec2d96552fad6588f8cb5f1295c2c0bb7d7", "chunk": "diff --git a/dspace-api/src/test/java/org/dspace/statistics/export/processor/ItemEventProcessorTest.java b/dspace-api/src/test/java/org/dspace/statistics/export/processor/ItemEventProcessorTest.java\nindex c42438d78..6465aea25 100644\n--- a/dspace-api/src/test/java/org/dspace/statistics/export/processor/ItemEventProcessorTest.java\n+++ b/dspace-api/src/test/java/org/dspace/statistics/export/processor/ItemEventProcessorTest.java\n\n@@ -9,40 +9,36 @@ package org.dspace.statistics.export.processor;\n \n import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.assertThat;\n-import static org.mockito.Mockito.CALLS_REAL_METHODS;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n \n import java.io.UnsupportedEncodingException;\n import java.net.URLEncoder;\n \n import org.apache.commons.codec.CharEncoding;\n-import org.dspace.AbstractDSpaceTest;\n+import org.dspace.AbstractIntegrationTestWithDatabase;\n+import org.dspace.builder.CollectionBuilder;\n+import org.dspace.builder.CommunityBuilder;\n+import org.dspace.builder.ItemBuilder;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n import org.dspace.content.Item;\n import org.dspace.services.ConfigurationService;\n import org.dspace.services.factory.DSpaceServicesFactory;\n import org.junit.Before;\n import org.junit.Test;\n-import org.mockito.InjectMocks;\n-import org.mockito.Mock;\n \n /**\n  * Test class for the ItemEventProcessor\n  */\n-public class ItemEventProcessorTest extends AbstractDSpaceTest {\n+public class ItemEventProcessorTest extends AbstractIntegrationTestWithDatabase {\n \n-    @Mock\n-    private Item item = mock(Item.class);\n \n     private ConfigurationService configurationService = DSpaceServicesFactory.getInstance().getConfigurationService();\n \n-    @InjectMocks\n-    ItemEventProcessor itemEventProcessor = mock(ItemEventProcessor.class, CALLS_REAL_METHODS);\n-\n     private String encodedUrl;\n \n     @Before\n-    public void setUp() {\n+    public void setUp() throws Exception {\n+        super.setUp();\n         configurationService.setProperty(\"stats.tracker.enabled\", true);\n \n         String dspaceUrl = configurationService.getProperty(\"dspace.ui.url\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMDk4MQ==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r467200981", "bodyText": "If possible, these should also be made private so that you are forced to use the Constructor (see below) to change them.  We should not allow changing them after the class has been initialized.", "author": "tdonohue", "createdAt": "2020-08-07T18:24:25Z", "path": "dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java", "diffHunk": "@@ -0,0 +1,288 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics.export.processor;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.apache.commons.codec.CharEncoding;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.log4j.Logger;\n+import org.dspace.content.DCDate;\n+import org.dspace.content.Entity;\n+import org.dspace.content.EntityType;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.EntityService;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.core.Context;\n+import org.dspace.core.Utils;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.statistics.export.factory.OpenURLTrackerLoggerServiceFactory;\n+import org.dspace.statistics.export.service.OpenUrlService;\n+\n+/**\n+ * Abstract export event processor that contains all shared logic to handle both Items and Bitstreams\n+ * from the ExportUsageEventListener\n+ */\n+public abstract class ExportEventProcessor {\n+\n+    private static Logger log = Logger.getLogger(ExportEventProcessor.class);\n+\n+    /* The metadata field which is to be checked for */\n+    protected String trackerTypeMetadataField;\n+\n+    /* A list of entity types that will be processed */\n+    protected List<String> entityTypes;\n+    protected static final String ENTITY_TYPE_DEFAULT = \"Publication\";\n+\n+    /* A list of values the type might have */\n+    protected List<String> trackerTypeMetadataValues;\n+\n+    /* The base url of the tracker */\n+    protected String baseUrl;\n+\n+    protected String trackerUrlVersion;\n+\n+    protected static final String ITEM_VIEW = \"Investigation\";\n+    protected static final String BITSTREAM_DOWNLOAD = \"Request\";\n+\n+    protected final static String UTF_8 = CharEncoding.UTF_8;\n+\n+    protected ConfigurationService configurationService = DSpaceServicesFactory.getInstance().getConfigurationService();\n+    protected EntityTypeService entityTypeService = ContentServiceFactory.getInstance().getEntityTypeService();\n+    protected EntityService entityService = ContentServiceFactory.getInstance().getEntityService();\n+    protected ItemService itemService = ContentServiceFactory.getInstance().getItemService();\n+    protected OpenUrlService openUrlService = OpenURLTrackerLoggerServiceFactory.getInstance().getOpenUrlService();\n+\n+\n+    protected Context context;\n+    protected HttpServletRequest request;", "originalCommit": "0e5263e06f8aaf651b0a5555faeb3f97d9ffb63e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc2MDc4Nw==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r474760787", "bodyText": "Made the variables private", "author": "YanaDePauw", "createdAt": "2020-08-21T15:12:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMDk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMzNDY2Ng==", "url": "https://github.com/DSpace/DSpace/pull/2664#discussion_r482334666", "bodyText": "@YanaDePauw : These variables still appear to be protected and not private as you stated above.", "author": "tdonohue", "createdAt": "2020-09-02T19:25:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMDk4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7d793ec2d96552fad6588f8cb5f1295c2c0bb7d7", "chunk": "diff --git a/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java b/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java\nindex e703af787..25797697f 100644\n--- a/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java\n+++ b/dspace-api/src/main/java/org/dspace/statistics/export/processor/ExportEventProcessor.java\n\n@@ -27,7 +27,6 @@ import org.dspace.content.Item;\n import org.dspace.content.MetadataValue;\n import org.dspace.content.factory.ContentServiceFactory;\n import org.dspace.content.service.EntityService;\n-import org.dspace.content.service.EntityTypeService;\n import org.dspace.content.service.ItemService;\n import org.dspace.core.Context;\n import org.dspace.core.Utils;\n"}}, {"oid": "7d793ec2d96552fad6588f8cb5f1295c2c0bb7d7", "url": "https://github.com/DSpace/DSpace/commit/7d793ec2d96552fad6588f8cb5f1295c2c0bb7d7", "message": "70906: Implement community feedback", "committedDate": "2020-08-20T15:23:56Z", "type": "commit"}, {"oid": "9945ab1bc3c309573f1a55f8d438bb9fe0ad20f3", "url": "https://github.com/DSpace/DSpace/commit/9945ab1bc3c309573f1a55f8d438bb9fe0ad20f3", "message": "70906: Process IRUS DSpace 7 PR feedback", "committedDate": "2020-09-18T09:52:19Z", "type": "commit"}, {"oid": "6f2c34050a125287b9953090ecc1a30573c9bc3b", "url": "https://github.com/DSpace/DSpace/commit/6f2c34050a125287b9953090ecc1a30573c9bc3b", "message": "Merge remote-tracking branch 'upstream/main' into DS-626", "committedDate": "2020-09-18T13:06:16Z", "type": "commit"}]}