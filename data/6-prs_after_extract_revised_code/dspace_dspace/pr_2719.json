{"pr_number": 2719, "pr_title": "REST API should respect \"metadata.hide\" configurations", "pr_createdAt": "2020-03-23T12:54:37Z", "pr_url": "https://github.com/DSpace/DSpace/pull/2719", "timeline": [{"oid": "1b5761f2b9a9eff0b06f6ee571453185a5d7f6ee", "url": "https://github.com/DSpace/DSpace/commit/1b5761f2b9a9eff0b06f6ee571453185a5d7f6ee", "message": "69741: Restrict metadata exposure acccording to hidden metadata configuration", "committedDate": "2020-03-19T12:40:24Z", "type": "commit"}, {"oid": "9a03eb8d6d258f1545eddac2bda0c92a1b1d1767", "url": "https://github.com/DSpace/DSpace/commit/9a03eb8d6d258f1545eddac2bda0c92a1b1d1767", "message": "69944: ITs for metadata.hide", "committedDate": "2020-03-23T09:06:41Z", "type": "commit"}, {"oid": "9df42b3deaf8232742a8a31ded3390af0013dafa", "url": "https://github.com/DSpace/DSpace/commit/9df42b3deaf8232742a8a31ded3390af0013dafa", "message": "Merge remote-tracking branch 'upstream/master' into w2p-69741_Refactoring-Rest-Converters\n\n Conflicts:\n\tdspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java", "committedDate": "2020-03-23T15:10:53Z", "type": "commit"}, {"oid": "3c86e46b813bb1a4643070ffdaa2f75e574c4b6d", "url": "https://github.com/DSpace/DSpace/commit/3c86e46b813bb1a4643070ffdaa2f75e574c4b6d", "message": "Remove test config for metadata hide", "committedDate": "2020-03-31T09:37:26Z", "type": "commit"}, {"oid": "ae4125054e738523693794f8fd6be1fdfc423d9d", "url": "https://github.com/DSpace/DSpace/commit/ae4125054e738523693794f8fd6be1fdfc423d9d", "message": "Merge remote-tracking branch 'upstream/master' into w2p-69741_Refactoring-Rest-Converters\n\n Conflicts:\n\tdspace-server-webapp/src/test/java/org/dspace/app/rest/CollectionRestRepositoryIT.java", "committedDate": "2020-03-31T10:58:23Z", "type": "commit"}, {"oid": "7de0baab8fcb7051745094caebb4cf7ad249139e", "url": "https://github.com/DSpace/DSpace/commit/7de0baab8fcb7051745094caebb4cf7ad249139e", "message": "Fix checkstyle issue", "committedDate": "2020-03-31T10:58:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4MDY1NA==", "url": "https://github.com/DSpace/DSpace/pull/2719#discussion_r402580654", "bodyText": "Really tiny thing, but I prefer that we log more descriptive error messages.  For example, this could be something like:\nlog.error(\"Error filtering metadata based on permissions\", e);", "author": "tdonohue", "createdAt": "2020-04-02T20:08:02Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/DSpaceObjectConverter.java", "diffHunk": "@@ -35,10 +60,53 @@ public R convert(M obj, Projection projection) {\n             resource.setUuid(obj.getID().toString());\n         }\n         resource.setName(obj.getName());\n-        MetadataValueList metadataValues = new MetadataValueList(obj.getMetadata());\n+\n+        MetadataValueList metadataValues = getPermissionFilteredMetadata(getContext(), obj);\n         resource.setMetadata(converter.toRest(metadataValues, projection));\n         return resource;\n     }\n \n     protected abstract R newInstance();\n+\n+\n+    /**\n+     * Retrieves the metadata list filtered according to the hidden metadata configuration\n+     * When the context is null, it will return the metadatalist as for an anonymous user\n+     * @param context   The context\n+     * @param obj       The object of which the filtered metadata will be retrieved\n+     * @return A list of object metadata filtered based on the the hidden metadata configuration\n+     */\n+    public MetadataValueList getPermissionFilteredMetadata(Context context, M obj) {\n+        List<MetadataValue> metadata = obj.getMetadata();\n+        try {\n+            if (context != null && authorizeService.isAdmin(context)) {\n+                return new MetadataValueList(metadata);\n+            }\n+            for (MetadataValue mv : metadata) {\n+                MetadataField metadataField = mv.getMetadataField();\n+                if (metadataExposureService\n+                        .isHidden(context, metadataField.getMetadataSchema().getName(),\n+                                  metadataField.getElement(),\n+                                  metadataField.getQualifier())) {\n+                    metadata.remove(mv);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            log.error(e);", "originalCommit": "7de0baab8fcb7051745094caebb4cf7ad249139e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1NjMyMw==", "url": "https://github.com/DSpace/DSpace/pull/2719#discussion_r406056323", "bodyText": "has been updated", "author": "benbosman", "createdAt": "2020-04-09T08:55:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4MDY1NA=="}], "type": "inlineReview", "revised_code": {"commit": "109be79edd6c63330d826301b43397359462f323", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/DSpaceObjectConverter.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/DSpaceObjectConverter.java\nindex a2fb7605d..33c6e3962 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/DSpaceObjectConverter.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/DSpaceObjectConverter.java\n\n@@ -92,7 +92,7 @@ public abstract class DSpaceObjectConverter<M extends DSpaceObject, R extends or\n                 }\n             }\n         } catch (SQLException e) {\n-            log.error(e);\n+            log.error(\"Error filtering metadata based on permissions\", e);\n         }\n         return new MetadataValueList(metadata);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4MDc3MA==", "url": "https://github.com/DSpace/DSpace/pull/2719#discussion_r402580770", "bodyText": "Similar to above, this could be a more useful error message", "author": "tdonohue", "createdAt": "2020-04-02T20:08:17Z", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/ItemConverter.java", "diffHunk": "@@ -47,13 +51,41 @@ public ItemRest convert(Item obj, Projection projection) {\n         item.setWithdrawn(obj.isWithdrawn());\n         item.setLastModified(obj.getLastModified());\n \n-        List<MetadataValue> fullList = itemService.getMetadata(obj, Item.ANY, Item.ANY, Item.ANY, Item.ANY, true);\n-        MetadataValueList metadataValues = new MetadataValueList(fullList);\n-        item.setMetadata(converter.toRest(metadataValues, projection));\n-\n         return item;\n     }\n \n+    /**\n+     * Retrieves the metadata list filtered according to the hidden metadata configuration\n+     * When the context is null, it will return the metadatalist as for an anonymous user\n+     * Overrides the parent method to include virtual metadata\n+     * @param context The context\n+     * @param obj     The object of which the filtered metadata will be retrieved\n+     * @return A list of object metadata (including virtual metadata) filtered based on the the hidden metadata\n+     * configuration\n+     */\n+    @Override\n+    public MetadataValueList getPermissionFilteredMetadata(Context context, Item obj) {\n+        List<MetadataValue> fullList = itemService.getMetadata(obj, Item.ANY, Item.ANY, Item.ANY, Item.ANY, true);\n+        List<MetadataValue> returnList = new LinkedList<>();\n+        try {\n+            if (context != null && authorizeService.isAdmin(context)) {\n+                return new MetadataValueList(fullList);\n+            }\n+            for (MetadataValue mv : fullList) {\n+                MetadataField metadataField = mv.getMetadataField();\n+                if (!metadataExposureService\n+                        .isHidden(context, metadataField.getMetadataSchema().getName(),\n+                                  metadataField.getElement(),\n+                                  metadataField.getQualifier())) {\n+                    returnList.add(mv);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            log.error(e);", "originalCommit": "7de0baab8fcb7051745094caebb4cf7ad249139e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1NjM4OA==", "url": "https://github.com/DSpace/DSpace/pull/2719#discussion_r406056388", "bodyText": "has been updated", "author": "benbosman", "createdAt": "2020-04-09T08:55:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4MDc3MA=="}], "type": "inlineReview", "revised_code": {"commit": "109be79edd6c63330d826301b43397359462f323", "chunk": "diff --git a/dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/ItemConverter.java b/dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/ItemConverter.java\nindex 5cf0114e5..4c7d93078 100644\n--- a/dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/ItemConverter.java\n+++ b/dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/ItemConverter.java\n\n@@ -81,7 +81,7 @@ public class ItemConverter\n                 }\n             }\n         } catch (SQLException e) {\n-            log.error(e);\n+            log.error(\"Error filtering item metadata based on permissions\", e);\n         }\n         return new MetadataValueList(returnList);\n     }\n"}}, {"oid": "109be79edd6c63330d826301b43397359462f323", "url": "https://github.com/DSpace/DSpace/commit/109be79edd6c63330d826301b43397359462f323", "message": "70236: Update log messages", "committedDate": "2020-04-09T07:38:58Z", "type": "commit"}]}