{"pr_number": 4475, "pr_title": "Add file change detection mechanism", "pr_createdAt": "2020-03-10T02:13:37Z", "pr_url": "https://github.com/apache/skywalking/pull/4475", "timeline": [{"oid": "8ac1e236b6efe36beb08146dd41cb56f74b13f47", "url": "https://github.com/apache/skywalking/commit/8ac1e236b6efe36beb08146dd41cb56f74b13f47", "message": "Add file change detection mechanism", "committedDate": "2020-03-10T02:09:17Z", "type": "commit"}, {"oid": "cf854225c77cdc9b2f6fd95b8559a92c7eaab2c9", "url": "https://github.com/apache/skywalking/commit/cf854225c77cdc9b2f6fd95b8559a92c7eaab2c9", "message": "Merge branch 'master' into vault-support", "committedDate": "2020-03-10T02:15:59Z", "type": "commit"}, {"oid": "aeefcba24a9c5c1142b205925ae4e363e60bad3c", "url": "https://github.com/apache/skywalking/commit/aeefcba24a9c5c1142b205925ae4e363e60bad3c", "message": "Fix format.", "committedDate": "2020-03-10T02:19:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2MjMxNA==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390062314", "bodyText": "We should consider another scenario if the content of file doesn't change the monitor should not notify the related component.\nA possible approach is to compare the binary data of them.", "author": "hanahmily", "createdAt": "2020-03-10T02:28:55Z", "path": "oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.library.util;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * File change monitor is a disk file watcher. It keeps to watch the file `last modified timestamp`, after it changed,", "originalCommit": "aeefcba24a9c5c1142b205925ae4e363e60bad3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2MjYwNQ==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390062605", "bodyText": "We should consider another scenario if the content of file doesn't change the monitor should not notify the related component.\n\nI expect this is the responsibility of notifier implementation. I just don't want to read the file twice.", "author": "wu-sheng", "createdAt": "2020-03-10T02:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2MjMxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MDY3OQ==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390070679", "bodyText": "I prefer to leave it to the monitor since it extracts the input-stream from the target file. And the comparison is a common requirement for all of the notifiers, Do you have some scenario needs to get notification of modification without changing the content? if that exists, it's sane for it.", "author": "hanahmily", "createdAt": "2020-03-10T03:02:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2MjMxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTUzMw==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390071533", "bodyText": "I am not sure whether there is that case, but I prefer to provide an input stream rather than byte[].\nLet's say in this way, if this class compare the changes, then we need extra memory space for the file contents(whole binary), but if we put the content into implementation, there is no extra memory cause, as you already have username/password configuration in provider config.\nI think your idea is only coming from the cert file, as you don't need to read it, right? For ES case, this is a double read or extra memory case.", "author": "wu-sheng", "createdAt": "2020-03-10T03:06:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2MjMxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3Mzg5OQ==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390073899", "bodyText": "Anyway, I could provide a default ContentChangedNotifier implementation, I think that will fit your wants?", "author": "wu-sheng", "createdAt": "2020-03-10T03:16:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2MjMxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NDc2OA==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390074768", "bodyText": "I think your idea is only coming from the cert file, as you don't need to read it, right? For ES case, this is a double read or extra memory case.\n\nNo. For ES and cert file, double read or extra memory is necessary. Because file contents change leads to a total reconnection. For cert file, all incoming gRPC connections should close as ES does. SSL file notifier also loads the binary into heap to compare the content to avoid unnecessary reconnection.\nAnd I think we should provide an abstract class to implement notifier interface, which can do binary comparison. If anyone needs this feature can extend it instead of implementing notifier.", "author": "hanahmily", "createdAt": "2020-03-10T03:19:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2MjMxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NTM0OQ==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390075349", "bodyText": "No. For ES and cert file, double read or extra memory is necessary.\n\nMy point is for ES, we don't need extra memory, the user name and password are there, ContentChangedNotifier implementation doesn't have to hold it again(one in the ES storage config, the other in the watcher). I know your point to be easier for the watcher, but, this has a cost for ES implementation.", "author": "wu-sheng", "createdAt": "2020-03-10T03:22:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2MjMxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3ODA0MA==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390078040", "bodyText": "All right. Finally, we reach an agreement to implement ContentChangedNotifier to provide this feature. Thanks a lot.", "author": "hanahmily", "createdAt": "2020-03-10T03:34:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2MjMxNA=="}], "type": "inlineReview", "revised_code": {"commit": "14cf0b906a49ef37dabfb44d36de38914fc70468", "chunk": "diff --git a/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java b/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java\nindex 3e44d412c6..785132a4ff 100644\n--- a/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java\n+++ b/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java\n\n@@ -18,12 +18,14 @@\n \n package org.apache.skywalking.oap.server.library.util;\n \n+import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledFuture;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NTE2OQ==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390075169", "bodyText": "better place it else where, in case the RAT plugin scans it occasionally", "author": "kezhenxu94", "createdAt": "2020-03-10T03:21:22Z", "path": "oap-server/server-library/library-util/src/test/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitorTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.library.util;\n+\n+import java.io.BufferedInputStream;\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class FileChangeMonitorTest {\n+    private static String FILE_NAME = \"FileChangeMonitorTest.tmp\";", "originalCommit": "aeefcba24a9c5c1142b205925ae4e363e60bad3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3ODYxNg==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390078616", "bodyText": "What is FileSystems.getDefault().newWatchService() for? That doesn't look like a watcher with callback to me. Do I miss anything?", "author": "wu-sheng", "createdAt": "2020-03-10T03:37:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NTE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4MDkzNw==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390080937", "bodyText": "I think I clear the file in the end of test case. Where should I put? It is different in different OS systems, with different access control maybe.", "author": "wu-sheng", "createdAt": "2020-03-10T03:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NTE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4MTk3Mg==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390081972", "bodyText": "Another concern is noticing this\n     * @throws  UnsupportedOperationException\n     *          If this {@code FileSystem} does not support watching file system\n     *          objects for changes and events. This exception is not thrown\n     *          by {@code FileSystems} created by the default provider.\n\nSeems like we need to count on the JRE implementation somehow. I don't know the black magic inside now :)", "author": "wu-sheng", "createdAt": "2020-03-10T03:52:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NTE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4MzgxMA==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390083810", "bodyText": "What is FileSystems.getDefault().newWatchService() for? That doesn't look like a watcher with callback to me. Do I miss anything?\n\nHope the code snippets helps, my concern is that the built-in tool is well optimized and tested, and reduce our maintenance work:\n    public static void main(String[] args) throws IOException, InterruptedException {\n        final WatchService watchService = FileSystems.getDefault().newWatchService();\n        final Path directoryToWatch = Paths.get(\"/tmp/directory-to-watch\");\n        directoryToWatch.register(watchService, StandardWatchEventKinds.ENTRY_MODIFY);\n\n        for (final WatchKey readyKey = watchService.take(); readyKey.isValid(); readyKey.reset()) {\n            for (final WatchEvent<?> event : readyKey.pollEvents()) {\n                assert event.kind().equals(StandardWatchEventKinds.ENTRY_MODIFY);\n                final Path path = (Path) event.context();\n                System.out.println(\"file is modified = \" + directoryToWatch.resolve(path));\n            }\n        }\n    }", "author": "kezhenxu94", "createdAt": "2020-03-10T04:01:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NTE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MjAzMg==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390092032", "bodyText": "My question is, when the exception happens, I never used this API before. Evaluating the real case.", "author": "wu-sheng", "createdAt": "2020-03-10T04:40:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NTE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MzI0Mg==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390093242", "bodyText": "This exception is rarely to see in the JDK classes. They only say this when necessary. I don't what this simple feature crashes.", "author": "wu-sheng", "createdAt": "2020-03-10T04:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NTE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEzNjk4OQ==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390136989", "bodyText": "I agree with @kezhenxu94 . JDK builtin WatchSerivce is a better choice for the file modified notify service.", "author": "dmsolr", "createdAt": "2020-03-10T07:43:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3NTE2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "14cf0b906a49ef37dabfb44d36de38914fc70468", "chunk": "diff --git a/oap-server/server-library/library-util/src/test/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitorTest.java b/oap-server/server-library/library-util/src/test/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitorTest.java\nindex ce4d742515..cff567cf56 100644\n--- a/oap-server/server-library/library-util/src/test/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitorTest.java\n+++ b/oap-server/server-library/library-util/src/test/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitorTest.java\n\n@@ -18,15 +18,15 @@\n \n package org.apache.skywalking.oap.server.library.util;\n \n-import java.io.BufferedInputStream;\n import java.io.BufferedOutputStream;\n import java.io.File;\n import java.io.FileOutputStream;\n import java.io.IOException;\n-import java.io.InputStream;\n+import java.io.UnsupportedEncodingException;\n import java.nio.charset.Charset;\n import org.junit.AfterClass;\n import org.junit.Assert;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n \n public class FileChangeMonitorTest {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4Mzk5Ng==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390083996", "bodyText": "At least, this part should be replaced, and you can provide a so called Callback to the caller", "author": "kezhenxu94", "createdAt": "2020-03-10T04:01:50Z", "path": "oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.library.util;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * File change monitor is a disk file watcher. It keeps to watch the file `last modified timestamp`, after it changed,\n+ * fetch the new content of the file and check with the prev one. If content changed, it will notify the listener.\n+ *\n+ * File Change\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class FileChangeMonitor {\n+    /**\n+     * The backend scheduler to trigger all file monitoring.\n+     */\n+    private static ScheduledFuture<?> FILE_MONITOR_TASK_SCHEDULER;\n+    /**\n+     * The list contains all monitors.\n+     */\n+    private static List<FileChangeMonitor> MONITOR_INSTANCES = new ArrayList<>();\n+\n+    /**\n+     * The absolute path of the monitored file.\n+     */\n+    private final String filePath;\n+    /**\n+     * Trigger notification when file is not there.\n+     */\n+    private final boolean acceptFileNotExisting;\n+    /**\n+     * The period of watching thread checking the file status. Unit is the second.\n+     */\n+    private final long watchingPeriodInSec;\n+    /**\n+     * The notifier when file content changed.\n+     */\n+    private final ContentChangedNotifier notifier;\n+    /**\n+     * The timestamp when last time do status checked.\n+     */\n+    private long lastCheckTimestamp = 0;\n+    /**\n+     * The last modify time of the {@link #filePath}\n+     */\n+    private long lastModifiedTimestamp = 0;\n+\n+    /**\n+     * Start the file monitor for this instance.\n+     */\n+    public synchronized void start() {\n+        if (FILE_MONITOR_TASK_SCHEDULER == null) {\n+            FILE_MONITOR_TASK_SCHEDULER = Executors.newSingleThreadScheduledExecutor()\n+                                                   .scheduleAtFixedRate(\n+                                                       FileChangeMonitor::run, 1, 1,\n+                                                       TimeUnit.SECONDS\n+                                                   );\n+        }\n+\n+        this.checkAndNotify();\n+        MONITOR_INSTANCES.add(this);\n+    }\n+\n+    public synchronized void stop() {\n+        MONITOR_INSTANCES.remove(this);\n+    }\n+\n+    /**\n+     * Check the file status, if changed, send the notification.\n+     */\n+    private void checkAndNotify() {\n+        if (System.currentTimeMillis() - lastCheckTimestamp < watchingPeriodInSec * 1000) {\n+            // Don't reach the period threshold, ignore this check.\n+            return;\n+        }\n+        File targetFile = new File(filePath);\n+        if (!targetFile.exists() && acceptFileNotExisting) {\n+            notifier.fileNotFound();\n+        }\n+        if (targetFile.isFile()) {\n+            long lastModified = targetFile.lastModified();\n+\n+            if (lastModified != lastModifiedTimestamp) {\n+                try (FileInputStream fileInputStream = new FileInputStream(targetFile)) {\n+                    notifier.newFileContent(fileInputStream);\n+                } catch (FileNotFoundException e) {\n+                    log.error(\"The existed file turns to missing, watch file=\" + filePath, e);\n+                } catch (IOException e) {\n+                    log.error(\"Read file failure, watch file=\" + filePath, e);\n+                } finally {\n+                    lastModifiedTimestamp = lastModified;\n+                }\n+            }\n+        }", "originalCommit": "aeefcba24a9c5c1142b205925ae4e363e60bad3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "14cf0b906a49ef37dabfb44d36de38914fc70468", "chunk": "diff --git a/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java b/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java\nindex 3e44d412c6..785132a4ff 100644\n--- a/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java\n+++ b/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java\n\n@@ -18,12 +18,14 @@\n \n package org.apache.skywalking.oap.server.library.util;\n \n+import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledFuture;\n"}}, {"oid": "14cf0b906a49ef37dabfb44d36de38914fc70468", "url": "https://github.com/apache/skywalking/commit/14cf0b906a49ef37dabfb44d36de38914fc70468", "message": "Make file content changed monitor easier.", "committedDate": "2020-03-10T06:00:57Z", "type": "commit"}, {"oid": "f3fe48507316967a6057e08120f27540e1d89019", "url": "https://github.com/apache/skywalking/commit/f3fe48507316967a6057e08120f27540e1d89019", "message": "Add secondary round change and check the result.", "committedDate": "2020-03-10T06:26:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExNzEzMQ==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390117131", "bodyText": "I don't think it's a good design, unless you're perfectly sure that the caller will always use the file content as an InputStream, otherwise, you create the USELESS input stream too eagerly", "author": "kezhenxu94", "createdAt": "2020-03-10T06:34:15Z", "path": "oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.library.util;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * File change monitor is a disk file watcher. It keeps to watch the file `last modified timestamp`, after it changed,\n+ * fetch the new content of the file and check with the prev one. If content changed, it will notify the listener.\n+ *\n+ * File Change\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class FileChangeMonitor {\n+    /**\n+     * The backend scheduler to trigger all file monitoring.\n+     */\n+    private static ScheduledFuture<?> FILE_MONITOR_TASK_SCHEDULER;\n+    /**\n+     * The list contains all monitors.\n+     */\n+    private static List<FileChangeMonitor> MONITOR_INSTANCES = new ArrayList<>();\n+\n+    /**\n+     * The absolute path of the monitored file.\n+     */\n+    private final String filePath;\n+    /**\n+     * Trigger notification when file is not there.\n+     */\n+    private final boolean acceptFileNotExisting;\n+    /**\n+     * The period of watching thread checking the file status. Unit is the second.\n+     */\n+    private final long watchingPeriodInSec;\n+    /**\n+     * The notifier when file content changed.\n+     */\n+    private final FileChangedNotifier notifier;\n+    /**\n+     * The timestamp when last time do status checked.\n+     */\n+    private long lastCheckTimestamp = 0;\n+    /**\n+     * The last modify time of the {@link #filePath}\n+     */\n+    private long lastModifiedTimestamp = 0;\n+\n+    /**\n+     * Start the file monitor for this instance.\n+     */\n+    public synchronized void start() {\n+        if (FILE_MONITOR_TASK_SCHEDULER == null) {\n+            FILE_MONITOR_TASK_SCHEDULER = Executors.newSingleThreadScheduledExecutor()\n+                                                   .scheduleAtFixedRate(\n+                                                       FileChangeMonitor::run, 1, 1,\n+                                                       TimeUnit.SECONDS\n+                                                   );\n+        }\n+\n+        this.checkAndNotify();\n+        MONITOR_INSTANCES.add(this);\n+    }\n+\n+    public synchronized void stop() {\n+        MONITOR_INSTANCES.remove(this);\n+    }\n+\n+    /**\n+     * Check the file status, if changed, send the notification.\n+     */\n+    private void checkAndNotify() {\n+        if (System.currentTimeMillis() - lastCheckTimestamp < watchingPeriodInSec * 1000) {\n+            // Don't reach the period threshold, ignore this check.\n+            return;\n+        }\n+        File targetFile = new File(filePath);\n+        if (!targetFile.exists() && acceptFileNotExisting) {\n+            notifier.fileNotFound();\n+        }\n+        if (targetFile.isFile()) {\n+            long lastModified = targetFile.lastModified();\n+\n+            if (lastModified != lastModifiedTimestamp) {\n+                try (FileInputStream fileInputStream = new FileInputStream(targetFile)) {\n+                    notifier.fileChanged(fileInputStream);\n+                } catch (FileNotFoundException e) {\n+                    log.error(\"The existed file turns to missing, watch file=\" + filePath, e);\n+                } catch (IOException e) {\n+                    log.error(\"Read file failure, watch file=\" + filePath, e);\n+                } finally {\n+                    lastModifiedTimestamp = lastModified;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Check all registered file.\n+     */\n+    private static void run() {\n+        MONITOR_INSTANCES.forEach(monitor -> {\n+            try {\n+                monitor.checkAndNotify();\n+            } catch (Throwable e) {\n+                log.error(\"Error happens during monitoring file=\" + monitor.filePath, e);\n+            }\n+        });\n+    }\n+\n+    /**\n+     * The callback when file changed.\n+     */\n+    public interface FileChangedNotifier {\n+        /**\n+         * Notify the new content by providing the file input stream\n+         *\n+         * @param readableStream points to the new content\n+         * @throws IOException if error happens during reading.\n+         */\n+        void fileChanged(InputStream readableStream) throws IOException;", "originalCommit": "f3fe48507316967a6057e08120f27540e1d89019", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyMzYyMA==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390123620", "bodyText": "What else could they use?", "author": "wu-sheng", "createdAt": "2020-03-10T07:00:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExNzEzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "11623ee9b45368a1fefb93c8c137676d0f189f2d", "chunk": "diff --git a/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java b/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java\ndeleted file mode 100644\nindex 785132a4ff..0000000000\n--- a/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java\n+++ /dev/null\n\n@@ -1,188 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.oap.server.library.util;\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ScheduledFuture;\n-import java.util.concurrent.TimeUnit;\n-import lombok.RequiredArgsConstructor;\n-import lombok.extern.slf4j.Slf4j;\n-\n-/**\n- * File change monitor is a disk file watcher. It keeps to watch the file `last modified timestamp`, after it changed,\n- * fetch the new content of the file and check with the prev one. If content changed, it will notify the listener.\n- *\n- * File Change\n- */\n-@RequiredArgsConstructor\n-@Slf4j\n-public class FileChangeMonitor {\n-    /**\n-     * The backend scheduler to trigger all file monitoring.\n-     */\n-    private static ScheduledFuture<?> FILE_MONITOR_TASK_SCHEDULER;\n-    /**\n-     * The list contains all monitors.\n-     */\n-    private static List<FileChangeMonitor> MONITOR_INSTANCES = new ArrayList<>();\n-\n-    /**\n-     * The absolute path of the monitored file.\n-     */\n-    private final String filePath;\n-    /**\n-     * Trigger notification when file is not there.\n-     */\n-    private final boolean acceptFileNotExisting;\n-    /**\n-     * The period of watching thread checking the file status. Unit is the second.\n-     */\n-    private final long watchingPeriodInSec;\n-    /**\n-     * The notifier when file content changed.\n-     */\n-    private final FileChangedNotifier notifier;\n-    /**\n-     * The timestamp when last time do status checked.\n-     */\n-    private long lastCheckTimestamp = 0;\n-    /**\n-     * The last modify time of the {@link #filePath}\n-     */\n-    private long lastModifiedTimestamp = 0;\n-\n-    /**\n-     * Start the file monitor for this instance.\n-     */\n-    public synchronized void start() {\n-        if (FILE_MONITOR_TASK_SCHEDULER == null) {\n-            FILE_MONITOR_TASK_SCHEDULER = Executors.newSingleThreadScheduledExecutor()\n-                                                   .scheduleAtFixedRate(\n-                                                       FileChangeMonitor::run, 1, 1,\n-                                                       TimeUnit.SECONDS\n-                                                   );\n-        }\n-\n-        this.checkAndNotify();\n-        MONITOR_INSTANCES.add(this);\n-    }\n-\n-    public synchronized void stop() {\n-        MONITOR_INSTANCES.remove(this);\n-    }\n-\n-    /**\n-     * Check the file status, if changed, send the notification.\n-     */\n-    private void checkAndNotify() {\n-        if (System.currentTimeMillis() - lastCheckTimestamp < watchingPeriodInSec * 1000) {\n-            // Don't reach the period threshold, ignore this check.\n-            return;\n-        }\n-        File targetFile = new File(filePath);\n-        if (!targetFile.exists() && acceptFileNotExisting) {\n-            notifier.fileNotFound();\n-        }\n-        if (targetFile.isFile()) {\n-            long lastModified = targetFile.lastModified();\n-\n-            if (lastModified != lastModifiedTimestamp) {\n-                try (FileInputStream fileInputStream = new FileInputStream(targetFile)) {\n-                    notifier.fileChanged(fileInputStream);\n-                } catch (FileNotFoundException e) {\n-                    log.error(\"The existed file turns to missing, watch file=\" + filePath, e);\n-                } catch (IOException e) {\n-                    log.error(\"Read file failure, watch file=\" + filePath, e);\n-                } finally {\n-                    lastModifiedTimestamp = lastModified;\n-                }\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Check all registered file.\n-     */\n-    private static void run() {\n-        MONITOR_INSTANCES.forEach(monitor -> {\n-            try {\n-                monitor.checkAndNotify();\n-            } catch (Throwable e) {\n-                log.error(\"Error happens during monitoring file=\" + monitor.filePath, e);\n-            }\n-        });\n-    }\n-\n-    /**\n-     * The callback when file changed.\n-     */\n-    public interface FileChangedNotifier {\n-        /**\n-         * Notify the new content by providing the file input stream\n-         *\n-         * @param readableStream points to the new content\n-         * @throws IOException if error happens during reading.\n-         */\n-        void fileChanged(InputStream readableStream) throws IOException;\n-\n-        /**\n-         * Notify the event of file not found.\n-         */\n-        void fileNotFound();\n-    }\n-\n-    /**\n-     * An implementation of {@link FileChangedNotifier}, it only triggers the notification with binary content changes,\n-     * rather than simple file modified timestamp changed.\n-     */\n-    public static abstract class ContentChangedNotifier implements FileChangedNotifier {\n-        private byte[] fileContent = null;\n-\n-        @Override\n-        public void fileChanged(final InputStream readableStream) throws IOException {\n-            byte[] b = new byte[1024];\n-            ByteArrayOutputStream os = new ByteArrayOutputStream();\n-            int c;\n-            while ((c = readableStream.read(b)) != -1) {\n-                os.write(b, 0, c);\n-            }\n-            byte[] newContent = os.toByteArray();\n-            if (!Arrays.equals(newContent, fileContent)) {\n-                fileContent = newContent;\n-                this.contentChanged(newContent);\n-            }\n-        }\n-\n-        /**\n-         * Notify when the content are changed.\n-         *\n-         * @param newContent in the file.\n-         */\n-        protected abstract void contentChanged(byte[] newContent);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyMjIyMQ==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390122221", "bodyText": "the synchronized makes no sense, it's locked by the caller, and every caller is different from others", "author": "kezhenxu94", "createdAt": "2020-03-10T06:55:09Z", "path": "oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.library.util;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * File change monitor is a disk file watcher. It keeps to watch the file `last modified timestamp`, after it changed,\n+ * fetch the new content of the file and check with the prev one. If content changed, it will notify the listener.\n+ *\n+ * File Change\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class FileChangeMonitor {\n+    /**\n+     * The backend scheduler to trigger all file monitoring.\n+     */\n+    private static ScheduledFuture<?> FILE_MONITOR_TASK_SCHEDULER;\n+    /**\n+     * The list contains all monitors.\n+     */\n+    private static List<FileChangeMonitor> MONITOR_INSTANCES = new ArrayList<>();\n+\n+    /**\n+     * The absolute path of the monitored file.\n+     */\n+    private final String filePath;\n+    /**\n+     * Trigger notification when file is not there.\n+     */\n+    private final boolean acceptFileNotExisting;\n+    /**\n+     * The period of watching thread checking the file status. Unit is the second.\n+     */\n+    private final long watchingPeriodInSec;\n+    /**\n+     * The notifier when file content changed.\n+     */\n+    private final FileChangedNotifier notifier;\n+    /**\n+     * The timestamp when last time do status checked.\n+     */\n+    private long lastCheckTimestamp = 0;\n+    /**\n+     * The last modify time of the {@link #filePath}\n+     */\n+    private long lastModifiedTimestamp = 0;\n+\n+    /**\n+     * Start the file monitor for this instance.\n+     */\n+    public synchronized void start() {", "originalCommit": "f3fe48507316967a6057e08120f27540e1d89019", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyMzE1Nw==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390123157", "bodyText": "And you may want to prevent the monitor being started more than once", "author": "kezhenxu94", "createdAt": "2020-03-10T06:58:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyMjIyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE0OTIxMA==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390149210", "bodyText": "Will fix.", "author": "wu-sheng", "createdAt": "2020-03-10T08:16:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyMjIyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "11623ee9b45368a1fefb93c8c137676d0f189f2d", "chunk": "diff --git a/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java b/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java\ndeleted file mode 100644\nindex 785132a4ff..0000000000\n--- a/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java\n+++ /dev/null\n\n@@ -1,188 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.oap.server.library.util;\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ScheduledFuture;\n-import java.util.concurrent.TimeUnit;\n-import lombok.RequiredArgsConstructor;\n-import lombok.extern.slf4j.Slf4j;\n-\n-/**\n- * File change monitor is a disk file watcher. It keeps to watch the file `last modified timestamp`, after it changed,\n- * fetch the new content of the file and check with the prev one. If content changed, it will notify the listener.\n- *\n- * File Change\n- */\n-@RequiredArgsConstructor\n-@Slf4j\n-public class FileChangeMonitor {\n-    /**\n-     * The backend scheduler to trigger all file monitoring.\n-     */\n-    private static ScheduledFuture<?> FILE_MONITOR_TASK_SCHEDULER;\n-    /**\n-     * The list contains all monitors.\n-     */\n-    private static List<FileChangeMonitor> MONITOR_INSTANCES = new ArrayList<>();\n-\n-    /**\n-     * The absolute path of the monitored file.\n-     */\n-    private final String filePath;\n-    /**\n-     * Trigger notification when file is not there.\n-     */\n-    private final boolean acceptFileNotExisting;\n-    /**\n-     * The period of watching thread checking the file status. Unit is the second.\n-     */\n-    private final long watchingPeriodInSec;\n-    /**\n-     * The notifier when file content changed.\n-     */\n-    private final FileChangedNotifier notifier;\n-    /**\n-     * The timestamp when last time do status checked.\n-     */\n-    private long lastCheckTimestamp = 0;\n-    /**\n-     * The last modify time of the {@link #filePath}\n-     */\n-    private long lastModifiedTimestamp = 0;\n-\n-    /**\n-     * Start the file monitor for this instance.\n-     */\n-    public synchronized void start() {\n-        if (FILE_MONITOR_TASK_SCHEDULER == null) {\n-            FILE_MONITOR_TASK_SCHEDULER = Executors.newSingleThreadScheduledExecutor()\n-                                                   .scheduleAtFixedRate(\n-                                                       FileChangeMonitor::run, 1, 1,\n-                                                       TimeUnit.SECONDS\n-                                                   );\n-        }\n-\n-        this.checkAndNotify();\n-        MONITOR_INSTANCES.add(this);\n-    }\n-\n-    public synchronized void stop() {\n-        MONITOR_INSTANCES.remove(this);\n-    }\n-\n-    /**\n-     * Check the file status, if changed, send the notification.\n-     */\n-    private void checkAndNotify() {\n-        if (System.currentTimeMillis() - lastCheckTimestamp < watchingPeriodInSec * 1000) {\n-            // Don't reach the period threshold, ignore this check.\n-            return;\n-        }\n-        File targetFile = new File(filePath);\n-        if (!targetFile.exists() && acceptFileNotExisting) {\n-            notifier.fileNotFound();\n-        }\n-        if (targetFile.isFile()) {\n-            long lastModified = targetFile.lastModified();\n-\n-            if (lastModified != lastModifiedTimestamp) {\n-                try (FileInputStream fileInputStream = new FileInputStream(targetFile)) {\n-                    notifier.fileChanged(fileInputStream);\n-                } catch (FileNotFoundException e) {\n-                    log.error(\"The existed file turns to missing, watch file=\" + filePath, e);\n-                } catch (IOException e) {\n-                    log.error(\"Read file failure, watch file=\" + filePath, e);\n-                } finally {\n-                    lastModifiedTimestamp = lastModified;\n-                }\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Check all registered file.\n-     */\n-    private static void run() {\n-        MONITOR_INSTANCES.forEach(monitor -> {\n-            try {\n-                monitor.checkAndNotify();\n-            } catch (Throwable e) {\n-                log.error(\"Error happens during monitoring file=\" + monitor.filePath, e);\n-            }\n-        });\n-    }\n-\n-    /**\n-     * The callback when file changed.\n-     */\n-    public interface FileChangedNotifier {\n-        /**\n-         * Notify the new content by providing the file input stream\n-         *\n-         * @param readableStream points to the new content\n-         * @throws IOException if error happens during reading.\n-         */\n-        void fileChanged(InputStream readableStream) throws IOException;\n-\n-        /**\n-         * Notify the event of file not found.\n-         */\n-        void fileNotFound();\n-    }\n-\n-    /**\n-     * An implementation of {@link FileChangedNotifier}, it only triggers the notification with binary content changes,\n-     * rather than simple file modified timestamp changed.\n-     */\n-    public static abstract class ContentChangedNotifier implements FileChangedNotifier {\n-        private byte[] fileContent = null;\n-\n-        @Override\n-        public void fileChanged(final InputStream readableStream) throws IOException {\n-            byte[] b = new byte[1024];\n-            ByteArrayOutputStream os = new ByteArrayOutputStream();\n-            int c;\n-            while ((c = readableStream.read(b)) != -1) {\n-                os.write(b, 0, c);\n-            }\n-            byte[] newContent = os.toByteArray();\n-            if (!Arrays.equals(newContent, fileContent)) {\n-                fileContent = newContent;\n-                this.contentChanged(newContent);\n-            }\n-        }\n-\n-        /**\n-         * Notify when the content are changed.\n-         *\n-         * @param newContent in the file.\n-         */\n-        protected abstract void contentChanged(byte[] newContent);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyMjI2NQ==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390122265", "bodyText": "same here", "author": "kezhenxu94", "createdAt": "2020-03-10T06:55:21Z", "path": "oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.library.util;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * File change monitor is a disk file watcher. It keeps to watch the file `last modified timestamp`, after it changed,\n+ * fetch the new content of the file and check with the prev one. If content changed, it will notify the listener.\n+ *\n+ * File Change\n+ */\n+@RequiredArgsConstructor\n+@Slf4j\n+public class FileChangeMonitor {\n+    /**\n+     * The backend scheduler to trigger all file monitoring.\n+     */\n+    private static ScheduledFuture<?> FILE_MONITOR_TASK_SCHEDULER;\n+    /**\n+     * The list contains all monitors.\n+     */\n+    private static List<FileChangeMonitor> MONITOR_INSTANCES = new ArrayList<>();\n+\n+    /**\n+     * The absolute path of the monitored file.\n+     */\n+    private final String filePath;\n+    /**\n+     * Trigger notification when file is not there.\n+     */\n+    private final boolean acceptFileNotExisting;\n+    /**\n+     * The period of watching thread checking the file status. Unit is the second.\n+     */\n+    private final long watchingPeriodInSec;\n+    /**\n+     * The notifier when file content changed.\n+     */\n+    private final FileChangedNotifier notifier;\n+    /**\n+     * The timestamp when last time do status checked.\n+     */\n+    private long lastCheckTimestamp = 0;\n+    /**\n+     * The last modify time of the {@link #filePath}\n+     */\n+    private long lastModifiedTimestamp = 0;\n+\n+    /**\n+     * Start the file monitor for this instance.\n+     */\n+    public synchronized void start() {\n+        if (FILE_MONITOR_TASK_SCHEDULER == null) {\n+            FILE_MONITOR_TASK_SCHEDULER = Executors.newSingleThreadScheduledExecutor()\n+                                                   .scheduleAtFixedRate(\n+                                                       FileChangeMonitor::run, 1, 1,\n+                                                       TimeUnit.SECONDS\n+                                                   );\n+        }\n+\n+        this.checkAndNotify();\n+        MONITOR_INSTANCES.add(this);\n+    }\n+\n+    public synchronized void stop() {", "originalCommit": "f3fe48507316967a6057e08120f27540e1d89019", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11623ee9b45368a1fefb93c8c137676d0f189f2d", "chunk": "diff --git a/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java b/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java\ndeleted file mode 100644\nindex 785132a4ff..0000000000\n--- a/oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/FileChangeMonitor.java\n+++ /dev/null\n\n@@ -1,188 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.oap.server.library.util;\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ScheduledFuture;\n-import java.util.concurrent.TimeUnit;\n-import lombok.RequiredArgsConstructor;\n-import lombok.extern.slf4j.Slf4j;\n-\n-/**\n- * File change monitor is a disk file watcher. It keeps to watch the file `last modified timestamp`, after it changed,\n- * fetch the new content of the file and check with the prev one. If content changed, it will notify the listener.\n- *\n- * File Change\n- */\n-@RequiredArgsConstructor\n-@Slf4j\n-public class FileChangeMonitor {\n-    /**\n-     * The backend scheduler to trigger all file monitoring.\n-     */\n-    private static ScheduledFuture<?> FILE_MONITOR_TASK_SCHEDULER;\n-    /**\n-     * The list contains all monitors.\n-     */\n-    private static List<FileChangeMonitor> MONITOR_INSTANCES = new ArrayList<>();\n-\n-    /**\n-     * The absolute path of the monitored file.\n-     */\n-    private final String filePath;\n-    /**\n-     * Trigger notification when file is not there.\n-     */\n-    private final boolean acceptFileNotExisting;\n-    /**\n-     * The period of watching thread checking the file status. Unit is the second.\n-     */\n-    private final long watchingPeriodInSec;\n-    /**\n-     * The notifier when file content changed.\n-     */\n-    private final FileChangedNotifier notifier;\n-    /**\n-     * The timestamp when last time do status checked.\n-     */\n-    private long lastCheckTimestamp = 0;\n-    /**\n-     * The last modify time of the {@link #filePath}\n-     */\n-    private long lastModifiedTimestamp = 0;\n-\n-    /**\n-     * Start the file monitor for this instance.\n-     */\n-    public synchronized void start() {\n-        if (FILE_MONITOR_TASK_SCHEDULER == null) {\n-            FILE_MONITOR_TASK_SCHEDULER = Executors.newSingleThreadScheduledExecutor()\n-                                                   .scheduleAtFixedRate(\n-                                                       FileChangeMonitor::run, 1, 1,\n-                                                       TimeUnit.SECONDS\n-                                                   );\n-        }\n-\n-        this.checkAndNotify();\n-        MONITOR_INSTANCES.add(this);\n-    }\n-\n-    public synchronized void stop() {\n-        MONITOR_INSTANCES.remove(this);\n-    }\n-\n-    /**\n-     * Check the file status, if changed, send the notification.\n-     */\n-    private void checkAndNotify() {\n-        if (System.currentTimeMillis() - lastCheckTimestamp < watchingPeriodInSec * 1000) {\n-            // Don't reach the period threshold, ignore this check.\n-            return;\n-        }\n-        File targetFile = new File(filePath);\n-        if (!targetFile.exists() && acceptFileNotExisting) {\n-            notifier.fileNotFound();\n-        }\n-        if (targetFile.isFile()) {\n-            long lastModified = targetFile.lastModified();\n-\n-            if (lastModified != lastModifiedTimestamp) {\n-                try (FileInputStream fileInputStream = new FileInputStream(targetFile)) {\n-                    notifier.fileChanged(fileInputStream);\n-                } catch (FileNotFoundException e) {\n-                    log.error(\"The existed file turns to missing, watch file=\" + filePath, e);\n-                } catch (IOException e) {\n-                    log.error(\"Read file failure, watch file=\" + filePath, e);\n-                } finally {\n-                    lastModifiedTimestamp = lastModified;\n-                }\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Check all registered file.\n-     */\n-    private static void run() {\n-        MONITOR_INSTANCES.forEach(monitor -> {\n-            try {\n-                monitor.checkAndNotify();\n-            } catch (Throwable e) {\n-                log.error(\"Error happens during monitoring file=\" + monitor.filePath, e);\n-            }\n-        });\n-    }\n-\n-    /**\n-     * The callback when file changed.\n-     */\n-    public interface FileChangedNotifier {\n-        /**\n-         * Notify the new content by providing the file input stream\n-         *\n-         * @param readableStream points to the new content\n-         * @throws IOException if error happens during reading.\n-         */\n-        void fileChanged(InputStream readableStream) throws IOException;\n-\n-        /**\n-         * Notify the event of file not found.\n-         */\n-        void fileNotFound();\n-    }\n-\n-    /**\n-     * An implementation of {@link FileChangedNotifier}, it only triggers the notification with binary content changes,\n-     * rather than simple file modified timestamp changed.\n-     */\n-    public static abstract class ContentChangedNotifier implements FileChangedNotifier {\n-        private byte[] fileContent = null;\n-\n-        @Override\n-        public void fileChanged(final InputStream readableStream) throws IOException {\n-            byte[] b = new byte[1024];\n-            ByteArrayOutputStream os = new ByteArrayOutputStream();\n-            int c;\n-            while ((c = readableStream.read(b)) != -1) {\n-                os.write(b, 0, c);\n-            }\n-            byte[] newContent = os.toByteArray();\n-            if (!Arrays.equals(newContent, fileContent)) {\n-                fileContent = newContent;\n-                this.contentChanged(newContent);\n-            }\n-        }\n-\n-        /**\n-         * Notify when the content are changed.\n-         *\n-         * @param newContent in the file.\n-         */\n-        protected abstract void contentChanged(byte[] newContent);\n-    }\n-}\n"}}, {"oid": "11623ee9b45368a1fefb93c8c137676d0f189f2d", "url": "https://github.com/apache/skywalking/commit/11623ee9b45368a1fefb93c8c137676d0f189f2d", "message": "Update to support multiple files change monitoring.", "committedDate": "2020-03-10T13:21:22Z", "type": "commit"}, {"oid": "4b064ce593d59d82e4c8d4f20091221854f0e7dd", "url": "https://github.com/apache/skywalking/commit/4b064ce593d59d82e4c8d4f20091221854f0e7dd", "message": "Merge branch 'master' into vault-support", "committedDate": "2020-03-10T13:22:16Z", "type": "commit"}, {"oid": "d927c06a3ca3bea8bfc5c2150d1ca5a4d6358b08", "url": "https://github.com/apache/skywalking/commit/d927c06a3ca3bea8bfc5c2150d1ca5a4d6358b08", "message": "Merge branch 'master' into vault-support", "committedDate": "2020-03-10T23:59:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY4MjM2Ng==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390682366", "bodyText": "Why do we need to double-check? To avoid the new added Monitor will re-check at once?\nIMO, we can set the check period as watchingPeriodInSec, because this case is a minority case and only affects the first check.", "author": "dmsolr", "createdAt": "2020-03-11T00:16:13Z", "path": "oap-server/server-library/library-util/src/main/java/org/apache/skywalking/oap/server/library/util/MultipleFilesChangeMonitor.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.library.util;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * MultipleFilesChangeMonitor provides the capability to detect file or multiple files changed. It provide second level\n+ * change detection and feedback mechanism.\n+ *\n+ * Due to memory cost, this monitor mechanism is not suitable for small files and usually being changed on the runtime\n+ * by user manually or 3rd party tool. Typical, these files are config information or authentication files.\n+ */\n+@Slf4j\n+public class MultipleFilesChangeMonitor {\n+    /**\n+     * The backend scheduler to trigger all file monitoring.\n+     */\n+    private static ScheduledFuture<?> FILE_MONITOR_TASK_SCHEDULER;\n+    private static ReentrantLock SCHEDULER_CHANGE_LOCK = new ReentrantLock();\n+    /**\n+     * The list contains all monitors.\n+     */\n+    private static List<MultipleFilesChangeMonitor> MONITOR_INSTANCES = new ArrayList<>();\n+\n+    /**\n+     * The timestamp when last time do status checked.\n+     */\n+    private long lastCheckTimestamp = 0;\n+    /**\n+     * The period of watching thread checking the file status. Unit is the second.\n+     */\n+    private final long watchingPeriodInSec;\n+    private List<WatchedFile> watchedFiles;\n+    private FilesChangedNotifier notifier;\n+\n+    /**\n+     * Create a new monitor for the given files\n+     *\n+     * @param watchingPeriodInSec The check period.\n+     * @param notifier            to accept the file changed notification.\n+     * @param files               to be monitored.\n+     */\n+    public MultipleFilesChangeMonitor(long watchingPeriodInSec,\n+                                      FilesChangedNotifier notifier,\n+                                      String... files) {\n+        watchedFiles = new ArrayList<>();\n+        this.watchingPeriodInSec = watchingPeriodInSec;\n+        this.notifier = notifier;\n+        for (final String file : files) {\n+            WatchedFile monitor = new WatchedFile(file);\n+            watchedFiles.add(monitor);\n+        }\n+    }\n+\n+    /**\n+     * Check file changed status, if so, send the notification.\n+     */\n+    private void checkAndNotify() {\n+        if (System.currentTimeMillis() - lastCheckTimestamp < watchingPeriodInSec * 1000) {\n+            // Don't reach the period threshold, ignore this check.\n+            return;\n+        }", "originalCommit": "d927c06a3ca3bea8bfc5c2150d1ca5a4d6358b08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY4Mjk2Ng==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390682966", "bodyText": "Because the case is, the timer period is certain and shorter than watcher period. We need to make sure the check period follows the user requirements.", "author": "wu-sheng", "createdAt": "2020-03-11T00:18:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY4MjM2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5Mzg3Mg==", "url": "https://github.com/apache/skywalking/pull/4475#discussion_r390693872", "bodyText": "I got it. Monitors own their private schedule, watchingPeriodInSec.", "author": "dmsolr", "createdAt": "2020-03-11T01:02:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY4MjM2Ng=="}], "type": "inlineReview", "revised_code": null}]}