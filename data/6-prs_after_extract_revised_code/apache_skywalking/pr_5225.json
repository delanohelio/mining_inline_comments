{"pr_number": 5225, "pr_title": "Add HBase hbase-client plugin", "pr_createdAt": "2020-08-04T02:58:06Z", "pr_url": "https://github.com/apache/skywalking/pull/5225", "timeline": [{"oid": "d6d6da3312058c4ca6382f811d9ccf5f26117d41", "url": "https://github.com/apache/skywalking/commit/d6d6da3312058c4ca6382f811d9ccf5f26117d41", "message": "add hbase", "committedDate": "2020-08-04T02:52:23Z", "type": "commit"}, {"oid": "28fa9239a5ffcb8314b930774b68057012b71bbc", "url": "https://github.com/apache/skywalking/commit/28fa9239a5ffcb8314b930774b68057012b71bbc", "message": "Merge branch 'master' into zhaoyuguang_00003", "committedDate": "2020-08-04T02:58:15Z", "type": "commit"}, {"oid": "683a4e3d894f0467e6a5c63bd0c87dfc2ad2c120", "url": "https://github.com/apache/skywalking/commit/683a4e3d894f0467e6a5c63bd0c87dfc2ad2c120", "message": "fix version", "committedDate": "2020-08-04T03:08:35Z", "type": "commit"}, {"oid": "017f4fe7c355acf849f657e3dc6d29eb4df49659", "url": "https://github.com/apache/skywalking/commit/017f4fe7c355acf849f657e3dc6d29eb4df49659", "message": "fix style", "committedDate": "2020-08-04T04:05:23Z", "type": "commit"}, {"oid": "cf06f70b0ed3108f8d563bb46f139b79ab6cd768", "url": "https://github.com/apache/skywalking/commit/cf06f70b0ed3108f8d563bb46f139b79ab6cd768", "message": "fix", "committedDate": "2020-08-04T05:12:49Z", "type": "commit"}, {"oid": "604ad7eb81e12e1fd5ccf11ae71bb6a31ab603dd", "url": "https://github.com/apache/skywalking/commit/604ad7eb81e12e1fd5ccf11ae71bb6a31ab603dd", "message": "fix", "committedDate": "2020-08-04T06:53:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg1NDE3Nw==", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r464854177", "bodyText": "Does this method provide a header/metadata injection way? Or does HBase network protocol support that? If so, we should consider that, because as a Java based server, we will have a chance to tracing and monitoring the HBase server in the future.", "author": "wu-sheng", "createdAt": "2020-08-04T07:29:04Z", "path": "apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/define/HTableInstrumentation.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hbase.define;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+import org.apache.skywalking.apm.agent.core.plugin.match.NameMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+public class HTableInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    private static final String ENHANCE_CLASS = \"org.apache.hadoop.hbase.client.HTable\";\n+    private static final String INTERCEPT_CLASS = \"org.apache.skywalking.apm.plugin.hbase.HTableInterceptor\";\n+\n+    @Override\n+    protected ClassMatch enhanceClass() {\n+        return NameMatch.byName(ENHANCE_CLASS);\n+    }\n+\n+    @Override\n+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[]{\n+            new ConstructorInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getConstructorMatcher() {\n+                    return takesArguments(6);\n+                }\n+\n+                @Override\n+                public String getConstructorInterceptor() {\n+                    return INTERCEPT_CLASS;\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+        return new InstanceMethodsInterceptPoint[]{\n+            new InstanceMethodsInterceptPoint() {\n+                @Override\n+                public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                    return named(\"delete\").or(named(\"put\")).or(isPublic().and(named(\"get\")))\n+                            .or(named(\"getScanner\").and(takesArguments(1))\n+                                    .and(takesArgument(0, named(\"org.apache.hadoop.hbase.client.Scan\"))));", "originalCommit": "604ad7eb81e12e1fd5ccf11ae71bb6a31ab603dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2Mzk5OA==", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r464863998", "bodyText": "Let me do some research", "author": "zhaoyuguang", "createdAt": "2020-08-04T07:47:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg1NDE3Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "d1e2c62a97007f9138477943243d34af3f74be96", "url": "https://github.com/apache/skywalking/commit/d1e2c62a97007f9138477943243d34af3f74be96", "message": "fix", "committedDate": "2020-08-04T09:53:41Z", "type": "commit"}, {"oid": "c45a43bcb4ca65cfef8f6bc061516bcdf615294b", "url": "https://github.com/apache/skywalking/commit/c45a43bcb4ca65cfef8f6bc061516bcdf615294b", "message": "fix", "committedDate": "2020-08-04T11:37:01Z", "type": "commit"}, {"oid": "fd02e9b7b657a934ea7c8c639089718e4c08fb77", "url": "https://github.com/apache/skywalking/commit/fd02e9b7b657a934ea7c8c639089718e4c08fb77", "message": "Merge branch 'master' into zhaoyuguang_00003", "committedDate": "2020-08-04T11:48:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA0MzI0Nw==", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465043247", "bodyText": "What is the case not instanceof OperationWithAttributes?", "author": "wu-sheng", "createdAt": "2020-08-04T13:18:26Z", "path": "apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/HTableInterceptor.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hbase;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.client.ClusterConnection;\n+import org.apache.hadoop.hbase.client.HTable;\n+import org.apache.hadoop.hbase.client.OperationWithAttributes;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.util.CollectionUtil;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+public class HTableInterceptor implements InstanceMethodsAroundInterceptor, InstanceConstructorInterceptor {\n+\n+    private static final ILog logger = LogManager.getLogger(HTableInterceptor.class);\n+    private static final String PREFIX_OPERATION_NAME = \"/Htable/\";\n+    private static final String HBASE_DB_TYPE = \"hbase\";\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked, rawtypes\")\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        boolean canTracingServer = false;\n+        List<OperationWithAttributes> operations = null;\n+        OperationWithAttributes operation = null;\n+        if (allArguments != null && allArguments.length > 0) {\n+            if (allArguments[0] instanceof List) {\n+                List list = (List) allArguments[0];\n+                if (!CollectionUtil.isEmpty(list) && list.get(0) instanceof OperationWithAttributes) {\n+                    operations = list;\n+                    canTracingServer = true;\n+                }\n+            } else if (allArguments[0] instanceof OperationWithAttributes) {\n+                operation = (OperationWithAttributes) allArguments[0];\n+                canTracingServer = true;\n+            }\n+        }\n+        AbstractSpan span;\n+        if (canTracingServer) {", "originalCommit": "fd02e9b7b657a934ea7c8c639089718e4c08fb77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1MzY1NA==", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465053654", "bodyText": "I don't know how all versions of Hbase-Client evolve, just in case", "author": "zhaoyuguang", "createdAt": "2020-08-04T13:34:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA0MzI0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3NzY1Mg==", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465077652", "bodyText": "OK, got it:)", "author": "wu-sheng", "createdAt": "2020-08-04T14:08:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA0MzI0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "93b77e62f7b89f055db12af6563c91cfeb962dd6", "chunk": "diff --git a/apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/HTableInterceptor.java b/apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/HTableInterceptor.java\nindex 1b668163c9..901af4d44c 100644\n--- a/apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/HTableInterceptor.java\n+++ b/apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/HTableInterceptor.java\n\n@@ -46,7 +46,7 @@ import java.util.Properties;\n public class HTableInterceptor implements InstanceMethodsAroundInterceptor, InstanceConstructorInterceptor {\n \n     private static final ILog logger = LogManager.getLogger(HTableInterceptor.class);\n-    private static final String PREFIX_OPERATION_NAME = \"/Htable/\";\n+    private static final String PREFIX_OPERATION_NAME = \"/HTable/\";\n     private static final String HBASE_DB_TYPE = \"hbase\";\n \n     @Override\n"}}, {"oid": "d4f4c3667d96678b998373f06918923b1346f74c", "url": "https://github.com/apache/skywalking/commit/d4f4c3667d96678b998373f06918923b1346f74c", "message": "Merge branch 'master' into zhaoyuguang_00003", "committedDate": "2020-08-04T15:27:54Z", "type": "commit"}, {"oid": "93b77e62f7b89f055db12af6563c91cfeb962dd6", "url": "https://github.com/apache/skywalking/commit/93b77e62f7b89f055db12af6563c91cfeb962dd6", "message": "fixed", "committedDate": "2020-08-05T01:42:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNDkzNA==", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465424934", "bodyText": "The agent core has try-catch already. We don't need this in the interceptor.", "author": "wu-sheng", "createdAt": "2020-08-05T01:50:01Z", "path": "apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/HTableInterceptor.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.hbase;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.client.ClusterConnection;\n+import org.apache.hadoop.hbase.client.HTable;\n+import org.apache.hadoop.hbase.client.OperationWithAttributes;\n+import org.apache.skywalking.apm.agent.core.context.CarrierItem;\n+import org.apache.skywalking.apm.agent.core.context.ContextCarrier;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.context.trace.SpanLayer;\n+import org.apache.skywalking.apm.agent.core.logging.api.ILog;\n+import org.apache.skywalking.apm.agent.core.logging.api.LogManager;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.agent.core.util.CollectionUtil;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+public class HTableInterceptor implements InstanceMethodsAroundInterceptor, InstanceConstructorInterceptor {\n+\n+    private static final ILog logger = LogManager.getLogger(HTableInterceptor.class);\n+    private static final String PREFIX_OPERATION_NAME = \"/HTable/\";\n+    private static final String HBASE_DB_TYPE = \"hbase\";\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked, rawtypes\")\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                             MethodInterceptResult result) throws Throwable {\n+        boolean canTracingServer = false;\n+        List<OperationWithAttributes> operations = null;\n+        OperationWithAttributes operation = null;\n+        if (allArguments != null && allArguments.length > 0) {\n+            if (allArguments[0] instanceof List) {\n+                List list = (List) allArguments[0];\n+                if (!CollectionUtil.isEmpty(list) && list.get(0) instanceof OperationWithAttributes) {\n+                    operations = list;\n+                    canTracingServer = true;\n+                }\n+            } else if (allArguments[0] instanceof OperationWithAttributes) {\n+                operation = (OperationWithAttributes) allArguments[0];\n+                canTracingServer = true;\n+            }\n+        }\n+        AbstractSpan span;\n+        if (canTracingServer) {\n+            ContextCarrier contextCarrier = new ContextCarrier();\n+            span = ContextManager.createExitSpan(PREFIX_OPERATION_NAME + method.getName(),\n+                    contextCarrier, (String) objInst.getSkyWalkingDynamicField());\n+            CarrierItem next = contextCarrier.items();\n+            while (next.hasNext()) {\n+                next = next.next();\n+                if (operation != null) {\n+                    operation.setAttribute(next.getHeadKey(), next.getHeadValue().getBytes());\n+                } else {\n+                    for (OperationWithAttributes o : operations) {\n+                        o.setAttribute(next.getHeadKey(), next.getHeadValue().getBytes());\n+                    }\n+                }\n+            }\n+        } else {\n+            span = ContextManager.createExitSpan(PREFIX_OPERATION_NAME + method.getName(),\n+                    (String) objInst.getSkyWalkingDynamicField());\n+        }\n+        span.setComponent(ComponentsDefine.HBASE);\n+        Tags.DB_TYPE.set(span, HBASE_DB_TYPE);\n+        Tags.DB_INSTANCE.set(span, ((HTable) objInst).getName().getNameAsString());\n+        SpanLayer.asDB(span);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n+                              Object ret) throws Throwable {\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments,\n+                                      Class<?>[] argumentsTypes, Throwable t) {\n+        AbstractSpan span = ContextManager.activeSpan();\n+        span.errorOccurred();\n+        span.log(t);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"rawtypes\")\n+    public void onConstruct(EnhancedInstance objInst, Object[] allArguments) {\n+        try {\n+            Configuration connection = ((ClusterConnection) allArguments[1]).getConfiguration();\n+            Field field = connection.getClass().getDeclaredField(\"overlay\");\n+            field.setAccessible(true);\n+            Properties properties = (Properties) field.get(connection);\n+            for (Map.Entry entry : properties.entrySet()) {\n+                if (\"hbase.zookeeper.quorum\".equals(entry.getKey())) {\n+                    objInst.setSkyWalkingDynamicField(entry.getValue().toString());\n+                }\n+            }\n+        } catch (Exception e) {", "originalCommit": "93b77e62f7b89f055db12af6563c91cfeb962dd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNzU1Ng==", "url": "https://github.com/apache/skywalking/pull/5225#discussion_r465427556", "bodyText": "just throw? onConstruct method had no throws", "author": "zhaoyuguang", "createdAt": "2020-08-05T01:59:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyNDkzNA=="}], "type": "inlineReview", "revised_code": {"commit": "d488f2742cf1418a5d866531d55bd826108c46a1", "chunk": "diff --git a/apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/HTableInterceptor.java b/apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/HTableInterceptor.java\nindex 901af4d44c..d83e2072e8 100644\n--- a/apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/HTableInterceptor.java\n+++ b/apm-sniffer/apm-sdk-plugin/hbase-1.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/hbase/HTableInterceptor.java\n\n@@ -45,7 +45,6 @@ import java.util.Properties;\n \n public class HTableInterceptor implements InstanceMethodsAroundInterceptor, InstanceConstructorInterceptor {\n \n-    private static final ILog logger = LogManager.getLogger(HTableInterceptor.class);\n     private static final String PREFIX_OPERATION_NAME = \"/HTable/\";\n     private static final String HBASE_DB_TYPE = \"hbase\";\n \n"}}, {"oid": "c343ada9b42edc0d77a78f337c9c20a1926c472c", "url": "https://github.com/apache/skywalking/commit/c343ada9b42edc0d77a78f337c9c20a1926c472c", "message": "fixed", "committedDate": "2020-08-05T01:58:37Z", "type": "commit"}, {"oid": "d488f2742cf1418a5d866531d55bd826108c46a1", "url": "https://github.com/apache/skywalking/commit/d488f2742cf1418a5d866531d55bd826108c46a1", "message": "fixed", "committedDate": "2020-08-05T02:48:16Z", "type": "commit"}, {"oid": "cd29af488f03b076a51a42cb686319f4a325b9d4", "url": "https://github.com/apache/skywalking/commit/cd29af488f03b076a51a42cb686319f4a325b9d4", "message": "fix", "committedDate": "2020-08-05T03:36:47Z", "type": "commit"}, {"oid": "8a2ffbc726ce082d2e704b1e0edf0fa2427c20e0", "url": "https://github.com/apache/skywalking/commit/8a2ffbc726ce082d2e704b1e0edf0fa2427c20e0", "message": "Merge branch 'master' into zhaoyuguang_00003", "committedDate": "2020-08-05T05:35:25Z", "type": "commit"}, {"oid": "6a2fa99dd069d00526616e28ec652a5862d5b7a9", "url": "https://github.com/apache/skywalking/commit/6a2fa99dd069d00526616e28ec652a5862d5b7a9", "message": "fixed", "committedDate": "2020-08-05T05:37:33Z", "type": "commit"}, {"oid": "cb9a0e9e8aa9a6d4d56f5fd97ea3dfb9b8edfea1", "url": "https://github.com/apache/skywalking/commit/cb9a0e9e8aa9a6d4d56f5fd97ea3dfb9b8edfea1", "message": "Merge branch 'zhaoyuguang_00003' of https://github.com/zhaoyuguang/incubator-skywalking into zhaoyuguang_00003", "committedDate": "2020-08-05T05:37:55Z", "type": "commit"}, {"oid": "ed4751d8f3b8d9daac5017477bf82ea55de02081", "url": "https://github.com/apache/skywalking/commit/ed4751d8f3b8d9daac5017477bf82ea55de02081", "message": "Merge branch 'master' into zhaoyuguang_00003", "committedDate": "2020-08-05T08:14:37Z", "type": "commit"}]}