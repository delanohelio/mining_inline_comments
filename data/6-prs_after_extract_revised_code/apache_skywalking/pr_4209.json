{"pr_number": 4209, "pr_title": "Optimize trace ignore plugin", "pr_createdAt": "2020-01-09T17:59:03Z", "pr_url": "https://github.com/apache/skywalking/pull/4209", "timeline": [{"oid": "08b0d6e804c112ad84f118bc8f2123f68b5f4c70", "url": "https://github.com/apache/skywalking/commit/08b0d6e804c112ad84f118bc8f2123f68b5f4c70", "message": "Optimize trace ignore plugin", "committedDate": "2020-01-09T17:34:23Z", "type": "commit"}, {"oid": "8090291643f190e06c294e6fa90609fdf3f83de5", "url": "https://github.com/apache/skywalking/commit/8090291643f190e06c294e6fa90609fdf3f83de5", "message": "Add license for FastPathMatcher", "committedDate": "2020-01-09T17:53:47Z", "type": "commit"}, {"oid": "3ef7f5e1da1406658a45b1b43049b4f0f9e9a4a4", "url": "https://github.com/apache/skywalking/commit/3ef7f5e1da1406658a45b1b43049b4f0f9e9a4a4", "message": "Merge branch 'master' into trace-ignore", "committedDate": "2020-01-10T03:24:18Z", "type": "commit"}, {"oid": "88dde3c88800d9fda6a8794ff53b33b1a31d1757", "url": "https://github.com/apache/skywalking/commit/88dde3c88800d9fda6a8794ff53b33b1a31d1757", "message": "Boot again after setting config in test", "committedDate": "2020-01-10T04:16:37Z", "type": "commit"}, {"oid": "54f8895cfd7e9377894789a5fb6414a0036199f1", "url": "https://github.com/apache/skywalking/commit/54f8895cfd7e9377894789a5fb6414a0036199f1", "message": "Fix check style", "committedDate": "2020-01-10T07:15:07Z", "type": "commit"}, {"oid": "4df92aed6814842067a7094bbe67f468cf3819b3", "url": "https://github.com/apache/skywalking/commit/4df92aed6814842067a7094bbe67f468cf3819b3", "message": "Merge branch 'master' into trace-ignore", "committedDate": "2020-01-10T11:53:05Z", "type": "commit"}, {"oid": "4d8a07019f8809fed0246d63e135895a46f72b7f", "url": "https://github.com/apache/skywalking/commit/4d8a07019f8809fed0246d63e135895a46f72b7f", "message": "Merge branch 'master' into trace-ignore", "committedDate": "2020-01-11T11:44:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDQ0Nw==", "url": "https://github.com/apache/skywalking/pull/4209#discussion_r365490447", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Got * in pattern, entry the wildcard mode.\n          \n          \n            \n                        // Got * in pattern, enter the wildcard mode.", "author": "kezhenxu94", "createdAt": "2020-01-11T02:03:31Z", "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.trace.ignore.matcher;\n+\n+/**\n+ * @author kanro\n+ */\n+public class FastPathMatcher implements TracePathMatcher {\n+    @Override\n+    public boolean match(String pattern, String path) {\n+        return normalMatch(pattern, 0, path, 0);\n+    }\n+\n+    private boolean normalMatch(String pat, int p, String str, int s) {\n+        while (p < pat.length()) {\n+            char pc = pat.charAt(p);\n+            char sc = safeCharAt(str, s);\n+\n+            // Got * in pattern, entry the wildcard mode.", "originalCommit": "4df92aed6814842067a7094bbe67f468cf3819b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a9f4a7172cfc730947689e9860b22e10f3c47f5", "chunk": "diff --git a/apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java b/apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java\nindex 88072403fb..0d7c206e3c 100644\n--- a/apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java\n+++ b/apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java\n\n@@ -32,28 +32,28 @@ public class FastPathMatcher implements TracePathMatcher {\n             char pc = pat.charAt(p);\n             char sc = safeCharAt(str, s);\n \n-            // Got * in pattern, entry the wildcard mode.\n+            // Got * in pattern, enter the wildcard mode.\n             //            \u2193        \u2193\n             // pattern: a/*      a/*\n             //            \u2193        \u2193\n             // string:  a/bcd    a/\n             if (pc == '*') {\n                 p++;\n-                // Got * in pattern again, entry the multi-wildcard mode.\n+                // Got * in pattern again, enter the multi-wildcard mode.\n                 //             \u2193        \u2193\n                 // pattern: a/**     a/**\n                 //            \u2193        \u2193\n                 // string:  a/bcd    a/\n                 if (safeCharAt(pat, p) == '*') {\n                     p++;\n-                    // Entry the multi-wildcard mode.\n+                    // Enter the multi-wildcard mode.\n                     //              \u2193        \u2193\n                     // pattern: a/**     a/**\n                     //            \u2193        \u2193\n                     // string:  a/bcd    a/\n                     return multiWildcardMatch(pat, p, str, s);\n                 } else {\n-                    // Entry the wildcard mode.\n+                    // Enter the wildcard mode.\n                     //             \u2193\n                     // pattern: a/*\n                     //            \u2193\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDQ2NA==", "url": "https://github.com/apache/skywalking/pull/4209#discussion_r365490464", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // Got * in pattern again, entry the multi-wildcard mode.\n          \n          \n            \n                            // Got * in pattern again, enter the multi-wildcard mode.", "author": "kezhenxu94", "createdAt": "2020-01-11T02:03:47Z", "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.trace.ignore.matcher;\n+\n+/**\n+ * @author kanro\n+ */\n+public class FastPathMatcher implements TracePathMatcher {\n+    @Override\n+    public boolean match(String pattern, String path) {\n+        return normalMatch(pattern, 0, path, 0);\n+    }\n+\n+    private boolean normalMatch(String pat, int p, String str, int s) {\n+        while (p < pat.length()) {\n+            char pc = pat.charAt(p);\n+            char sc = safeCharAt(str, s);\n+\n+            // Got * in pattern, entry the wildcard mode.\n+            //            \u2193        \u2193\n+            // pattern: a/*      a/*\n+            //            \u2193        \u2193\n+            // string:  a/bcd    a/\n+            if (pc == '*') {\n+                p++;\n+                // Got * in pattern again, entry the multi-wildcard mode.", "originalCommit": "4df92aed6814842067a7094bbe67f468cf3819b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a9f4a7172cfc730947689e9860b22e10f3c47f5", "chunk": "diff --git a/apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java b/apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java\nindex 88072403fb..0d7c206e3c 100644\n--- a/apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java\n+++ b/apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java\n\n@@ -32,28 +32,28 @@ public class FastPathMatcher implements TracePathMatcher {\n             char pc = pat.charAt(p);\n             char sc = safeCharAt(str, s);\n \n-            // Got * in pattern, entry the wildcard mode.\n+            // Got * in pattern, enter the wildcard mode.\n             //            \u2193        \u2193\n             // pattern: a/*      a/*\n             //            \u2193        \u2193\n             // string:  a/bcd    a/\n             if (pc == '*') {\n                 p++;\n-                // Got * in pattern again, entry the multi-wildcard mode.\n+                // Got * in pattern again, enter the multi-wildcard mode.\n                 //             \u2193        \u2193\n                 // pattern: a/**     a/**\n                 //            \u2193        \u2193\n                 // string:  a/bcd    a/\n                 if (safeCharAt(pat, p) == '*') {\n                     p++;\n-                    // Entry the multi-wildcard mode.\n+                    // Enter the multi-wildcard mode.\n                     //              \u2193        \u2193\n                     // pattern: a/**     a/**\n                     //            \u2193        \u2193\n                     // string:  a/bcd    a/\n                     return multiWildcardMatch(pat, p, str, s);\n                 } else {\n-                    // Entry the wildcard mode.\n+                    // Enter the wildcard mode.\n                     //             \u2193\n                     // pattern: a/*\n                     //            \u2193\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDQ4OQ==", "url": "https://github.com/apache/skywalking/pull/4209#discussion_r365490489", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                // Entry the multi-wildcard mode.\n          \n          \n            \n                                // Enter the multi-wildcard mode.", "author": "kezhenxu94", "createdAt": "2020-01-11T02:03:59Z", "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.trace.ignore.matcher;\n+\n+/**\n+ * @author kanro\n+ */\n+public class FastPathMatcher implements TracePathMatcher {\n+    @Override\n+    public boolean match(String pattern, String path) {\n+        return normalMatch(pattern, 0, path, 0);\n+    }\n+\n+    private boolean normalMatch(String pat, int p, String str, int s) {\n+        while (p < pat.length()) {\n+            char pc = pat.charAt(p);\n+            char sc = safeCharAt(str, s);\n+\n+            // Got * in pattern, entry the wildcard mode.\n+            //            \u2193        \u2193\n+            // pattern: a/*      a/*\n+            //            \u2193        \u2193\n+            // string:  a/bcd    a/\n+            if (pc == '*') {\n+                p++;\n+                // Got * in pattern again, entry the multi-wildcard mode.\n+                //             \u2193        \u2193\n+                // pattern: a/**     a/**\n+                //            \u2193        \u2193\n+                // string:  a/bcd    a/\n+                if (safeCharAt(pat, p) == '*') {\n+                    p++;\n+                    // Entry the multi-wildcard mode.", "originalCommit": "4df92aed6814842067a7094bbe67f468cf3819b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a9f4a7172cfc730947689e9860b22e10f3c47f5", "chunk": "diff --git a/apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java b/apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java\nindex 88072403fb..0d7c206e3c 100644\n--- a/apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java\n+++ b/apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java\n\n@@ -32,28 +32,28 @@ public class FastPathMatcher implements TracePathMatcher {\n             char pc = pat.charAt(p);\n             char sc = safeCharAt(str, s);\n \n-            // Got * in pattern, entry the wildcard mode.\n+            // Got * in pattern, enter the wildcard mode.\n             //            \u2193        \u2193\n             // pattern: a/*      a/*\n             //            \u2193        \u2193\n             // string:  a/bcd    a/\n             if (pc == '*') {\n                 p++;\n-                // Got * in pattern again, entry the multi-wildcard mode.\n+                // Got * in pattern again, enter the multi-wildcard mode.\n                 //             \u2193        \u2193\n                 // pattern: a/**     a/**\n                 //            \u2193        \u2193\n                 // string:  a/bcd    a/\n                 if (safeCharAt(pat, p) == '*') {\n                     p++;\n-                    // Entry the multi-wildcard mode.\n+                    // Enter the multi-wildcard mode.\n                     //              \u2193        \u2193\n                     // pattern: a/**     a/**\n                     //            \u2193        \u2193\n                     // string:  a/bcd    a/\n                     return multiWildcardMatch(pat, p, str, s);\n                 } else {\n-                    // Entry the wildcard mode.\n+                    // Enter the wildcard mode.\n                     //             \u2193\n                     // pattern: a/*\n                     //            \u2193\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDUwNA==", "url": "https://github.com/apache/skywalking/pull/4209#discussion_r365490504", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                // Entry the wildcard mode.\n          \n          \n            \n                                // Enter the wildcard mode.", "author": "kezhenxu94", "createdAt": "2020-01-11T02:04:09Z", "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.trace.ignore.matcher;\n+\n+/**\n+ * @author kanro\n+ */\n+public class FastPathMatcher implements TracePathMatcher {\n+    @Override\n+    public boolean match(String pattern, String path) {\n+        return normalMatch(pattern, 0, path, 0);\n+    }\n+\n+    private boolean normalMatch(String pat, int p, String str, int s) {\n+        while (p < pat.length()) {\n+            char pc = pat.charAt(p);\n+            char sc = safeCharAt(str, s);\n+\n+            // Got * in pattern, entry the wildcard mode.\n+            //            \u2193        \u2193\n+            // pattern: a/*      a/*\n+            //            \u2193        \u2193\n+            // string:  a/bcd    a/\n+            if (pc == '*') {\n+                p++;\n+                // Got * in pattern again, entry the multi-wildcard mode.\n+                //             \u2193        \u2193\n+                // pattern: a/**     a/**\n+                //            \u2193        \u2193\n+                // string:  a/bcd    a/\n+                if (safeCharAt(pat, p) == '*') {\n+                    p++;\n+                    // Entry the multi-wildcard mode.\n+                    //              \u2193        \u2193\n+                    // pattern: a/**     a/**\n+                    //            \u2193        \u2193\n+                    // string:  a/bcd    a/\n+                    return multiWildcardMatch(pat, p, str, s);\n+                } else {\n+                    // Entry the wildcard mode.", "originalCommit": "4df92aed6814842067a7094bbe67f468cf3819b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a9f4a7172cfc730947689e9860b22e10f3c47f5", "chunk": "diff --git a/apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java b/apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java\nindex 88072403fb..0d7c206e3c 100644\n--- a/apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java\n+++ b/apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java\n\n@@ -32,28 +32,28 @@ public class FastPathMatcher implements TracePathMatcher {\n             char pc = pat.charAt(p);\n             char sc = safeCharAt(str, s);\n \n-            // Got * in pattern, entry the wildcard mode.\n+            // Got * in pattern, enter the wildcard mode.\n             //            \u2193        \u2193\n             // pattern: a/*      a/*\n             //            \u2193        \u2193\n             // string:  a/bcd    a/\n             if (pc == '*') {\n                 p++;\n-                // Got * in pattern again, entry the multi-wildcard mode.\n+                // Got * in pattern again, enter the multi-wildcard mode.\n                 //             \u2193        \u2193\n                 // pattern: a/**     a/**\n                 //            \u2193        \u2193\n                 // string:  a/bcd    a/\n                 if (safeCharAt(pat, p) == '*') {\n                     p++;\n-                    // Entry the multi-wildcard mode.\n+                    // Enter the multi-wildcard mode.\n                     //              \u2193        \u2193\n                     // pattern: a/**     a/**\n                     //            \u2193        \u2193\n                     // string:  a/bcd    a/\n                     return multiWildcardMatch(pat, p, str, s);\n                 } else {\n-                    // Entry the wildcard mode.\n+                    // Enter the wildcard mode.\n                     //             \u2193\n                     // pattern: a/*\n                     //            \u2193\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MDUyMw==", "url": "https://github.com/apache/skywalking/pull/4209#discussion_r365490523", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Try to entry normal mode, if not matched, increasing s and try again.\n          \n          \n            \n                        // Try to enter normal mode, if not matched, increasing s and try again.", "author": "kezhenxu94", "createdAt": "2020-01-11T02:04:31Z", "path": "apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.trace.ignore.matcher;\n+\n+/**\n+ * @author kanro\n+ */\n+public class FastPathMatcher implements TracePathMatcher {\n+    @Override\n+    public boolean match(String pattern, String path) {\n+        return normalMatch(pattern, 0, path, 0);\n+    }\n+\n+    private boolean normalMatch(String pat, int p, String str, int s) {\n+        while (p < pat.length()) {\n+            char pc = pat.charAt(p);\n+            char sc = safeCharAt(str, s);\n+\n+            // Got * in pattern, entry the wildcard mode.\n+            //            \u2193        \u2193\n+            // pattern: a/*      a/*\n+            //            \u2193        \u2193\n+            // string:  a/bcd    a/\n+            if (pc == '*') {\n+                p++;\n+                // Got * in pattern again, entry the multi-wildcard mode.\n+                //             \u2193        \u2193\n+                // pattern: a/**     a/**\n+                //            \u2193        \u2193\n+                // string:  a/bcd    a/\n+                if (safeCharAt(pat, p) == '*') {\n+                    p++;\n+                    // Entry the multi-wildcard mode.\n+                    //              \u2193        \u2193\n+                    // pattern: a/**     a/**\n+                    //            \u2193        \u2193\n+                    // string:  a/bcd    a/\n+                    return multiWildcardMatch(pat, p, str, s);\n+                } else {\n+                    // Entry the wildcard mode.\n+                    //             \u2193\n+                    // pattern: a/*\n+                    //            \u2193\n+                    // string:  a/bcd\n+                    return wildcardMatch(pat, p, str, s);\n+                }\n+            }\n+\n+            // Matching ? for non-'/' char, or matching the same chars.\n+            //            \u2193        \u2193       \u2193\n+            // pattern: a/?/c    a/b/c    a/b\n+            //            \u2193        \u2193       \u2193\n+            // string:  a/b/c    a/b/d    a/d\n+            if ((pc == '?' && sc != 0 && sc != '/') || pc == sc) {\n+                s++;\n+                p++;\n+                continue;\n+            }\n+\n+            // Not matched.\n+            //            \u2193\n+            // pattern: a/b\n+            //            \u2193\n+            // string:  a/c\n+            return false;\n+        }\n+\n+        return s == str.length();\n+    }\n+\n+    private boolean wildcardMatch(String pat, int p, String str, int s) {\n+        char pc = safeCharAt(pat, p);\n+\n+        while (true) {\n+            char sc = safeCharAt(str, s);\n+\n+            if (sc == '/') {\n+                // Both of pattern and string '/' matched, exit wildcard mode.\n+                //             \u2193\n+                // pattern: a/*/\n+                //              \u2193\n+                // string:  a/bc/\n+                if (pc == sc) {\n+                    return normalMatch(pat, p + 1, str, s + 1);\n+                }\n+\n+                // Not matched string in current path part.\n+                //             \u2193        \u2193\n+                // pattern: a/*      a/*d\n+                //              \u2193        \u2193\n+                // string:  a/bc/    a/bc/\n+                return false;\n+            }\n+\n+            // Try to entry normal mode, if not matched, increasing s and try again.", "originalCommit": "4df92aed6814842067a7094bbe67f468cf3819b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a9f4a7172cfc730947689e9860b22e10f3c47f5", "chunk": "diff --git a/apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java b/apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java\nindex 88072403fb..0d7c206e3c 100644\n--- a/apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java\n+++ b/apm-sniffer/optional-plugins/trace-ignore-plugin/src/main/java/org/apache/skywalking/apm/plugin/trace/ignore/matcher/FastPathMatcher.java\n\n@@ -32,28 +32,28 @@ public class FastPathMatcher implements TracePathMatcher {\n             char pc = pat.charAt(p);\n             char sc = safeCharAt(str, s);\n \n-            // Got * in pattern, entry the wildcard mode.\n+            // Got * in pattern, enter the wildcard mode.\n             //            \u2193        \u2193\n             // pattern: a/*      a/*\n             //            \u2193        \u2193\n             // string:  a/bcd    a/\n             if (pc == '*') {\n                 p++;\n-                // Got * in pattern again, entry the multi-wildcard mode.\n+                // Got * in pattern again, enter the multi-wildcard mode.\n                 //             \u2193        \u2193\n                 // pattern: a/**     a/**\n                 //            \u2193        \u2193\n                 // string:  a/bcd    a/\n                 if (safeCharAt(pat, p) == '*') {\n                     p++;\n-                    // Entry the multi-wildcard mode.\n+                    // Enter the multi-wildcard mode.\n                     //              \u2193        \u2193\n                     // pattern: a/**     a/**\n                     //            \u2193        \u2193\n                     // string:  a/bcd    a/\n                     return multiWildcardMatch(pat, p, str, s);\n                 } else {\n-                    // Entry the wildcard mode.\n+                    // Enter the wildcard mode.\n                     //             \u2193\n                     // pattern: a/*\n                     //            \u2193\n"}}, {"oid": "5a9f4a7172cfc730947689e9860b22e10f3c47f5", "url": "https://github.com/apache/skywalking/commit/5a9f4a7172cfc730947689e9860b22e10f3c47f5", "message": "Fix typos", "committedDate": "2020-01-11T15:41:20Z", "type": "commit"}]}