{"pr_number": 6103, "pr_title": "new feature add witness method", "pr_createdAt": "2020-12-30T07:24:05Z", "pr_url": "https://github.com/apache/skywalking/pull/6103", "timeline": [{"oid": "3f24ea2d0d162e867619883cc661beb57fb5ea4d", "url": "https://github.com/apache/skywalking/commit/3f24ea2d0d162e867619883cc661beb57fb5ea4d", "message": "add witness method", "committedDate": "2020-12-30T07:02:49Z", "type": "commit"}, {"oid": "25a3cc19b04270d3cc4a172f4c728139131c22ec", "url": "https://github.com/apache/skywalking/commit/25a3cc19b04270d3cc4a172f4c728139131c22ec", "message": "add change", "committedDate": "2020-12-30T07:22:54Z", "type": "commit"}, {"oid": "c25d532e3b4ec3447626837f11a361b2f068bc9c", "url": "https://github.com/apache/skywalking/commit/c25d532e3b4ec3447626837f11a361b2f068bc9c", "message": "Merge branch 'master' into lbl-new-future-add-witness-method", "committedDate": "2020-12-30T07:28:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk4NDA5OA==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r549984098", "bodyText": "Remove this", "author": "kezhenxu94", "createdAt": "2020-12-30T07:27:07Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.StringJoiner;\n+\n+/**\n+ * @author binglongli217932\n+ * <a href=\"mailto:libinglong9@gmail.com\">libinglong:libinglong9@gmail.com</a>\n+ * @since 2020/12/30\n+ */", "originalCommit": "25a3cc19b04270d3cc4a172f4c728139131c22ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da69664c8bc2b62346b7e0e8f73cb3c2edd0c563", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java\nindex f3482d73a4..f5e83e01fb 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java\n\n@@ -24,9 +24,7 @@ import net.bytebuddy.matcher.ElementMatcher;\n import java.util.StringJoiner;\n \n /**\n- * @author binglongli217932\n- * <a href=\"mailto:libinglong9@gmail.com\">libinglong:libinglong9@gmail.com</a>\n- * @since 2020/12/30\n+ * Witness Method for plugin activation\n  */\n public class WitnessMethod {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk4NjM1MA==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r549986350", "bodyText": "code style\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if(empty){\n          \n          \n            \n                            if (empty) {", "author": "kezhenxu94", "createdAt": "2020-12-30T07:30:18Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java", "diffHunk": "@@ -70,6 +75,25 @@\n                 }\n             }\n         }\n+        List<WitnessMethod> witnessMethods = witnessMethods();\n+        if (!CollectionUtil.isEmpty(witnessMethods)) {\n+            for (WitnessMethod witnessMethod : witnessMethods) {\n+                TypePool.Resolution resolution = WitnessClassFinder.INSTANCE.getResolution(witnessMethod.declaringClassName, classLoader);\n+                if (!resolution.isResolved()) {\n+                    LOGGER.warn(\"enhance class {} by plugin {} is not working. Because declaringClass {} of the witness method is not existed.\", transformClassName, interceptorDefineClassName, witnessMethod.declaringClassName);\n+                    return null;\n+                }\n+                boolean empty = resolution.resolve()\n+                        .getDeclaredMethods()\n+                        .filter(witnessMethod.elementMatcher)\n+                        .isEmpty();\n+                if(empty){", "originalCommit": "c25d532e3b4ec3447626837f11a361b2f068bc9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da69664c8bc2b62346b7e0e8f73cb3c2edd0c563", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\nindex 27830be419..71ed33b3c7 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\n\n@@ -87,7 +87,7 @@ public abstract class AbstractClassEnhancePluginDefine {\n                         .getDeclaredMethods()\n                         .filter(witnessMethod.elementMatcher)\n                         .isEmpty();\n-                if(empty){\n+                if (empty) {\n                     LOGGER.warn(\"enhance class {} by plugin {} is not working. Because the witness method is not existed.\", transformClassName, interceptorDefineClassName, witnessMethod);\n                     return null;\n                 }\n"}}, {"oid": "da69664c8bc2b62346b7e0e8f73cb3c2edd0c563", "url": "https://github.com/apache/skywalking/commit/da69664c8bc2b62346b7e0e8f73cb3c2edd0c563", "message": "change code style, file header, etc.", "committedDate": "2020-12-30T07:37:07Z", "type": "commit"}, {"oid": "1e9d2b438250e1f4465a049706aea943f52ad39f", "url": "https://github.com/apache/skywalking/commit/1e9d2b438250e1f4465a049706aea943f52ad39f", "message": "Merge branch 'lbl-new-future-add-witness-method' of https://github.com/libinglong/skywalking into lbl-new-future-add-witness-method", "committedDate": "2020-12-30T07:39:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk4NzU3Nw==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r549987577", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Collections.emptyList();\n          \n          \n            \n                    return null;\n          \n      \n    \n    \n  \n\nWill be better performance.", "author": "wu-sheng", "createdAt": "2020-12-30T07:31:53Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java", "diffHunk": "@@ -104,6 +128,10 @@\n         return new String[] {};\n     }\n \n+    protected List<WitnessMethod> witnessMethods() {\n+        return Collections.emptyList();", "originalCommit": "c25d532e3b4ec3447626837f11a361b2f068bc9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b78ef127f88e9ab5780065f8bbf81e81c45a40ff", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\nindex 27830be419..c219f35f06 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\n\n@@ -129,7 +129,7 @@ public abstract class AbstractClassEnhancePluginDefine {\n     }\n \n     protected List<WitnessMethod> witnessMethods() {\n-        return Collections.emptyList();\n+        return null;\n     }\n \n     public boolean isBootstrapInstrumentation() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk5MTU3OQ==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r549991579", "bodyText": "Please provide the getElementMatcher() method, don't access the fields of another class.", "author": "wu-sheng", "createdAt": "2020-12-30T07:37:12Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java", "diffHunk": "@@ -70,6 +75,25 @@\n                 }\n             }\n         }\n+        List<WitnessMethod> witnessMethods = witnessMethods();\n+        if (!CollectionUtil.isEmpty(witnessMethods)) {\n+            for (WitnessMethod witnessMethod : witnessMethods) {\n+                TypePool.Resolution resolution = WitnessClassFinder.INSTANCE.getResolution(witnessMethod.declaringClassName, classLoader);\n+                if (!resolution.isResolved()) {\n+                    LOGGER.warn(\"enhance class {} by plugin {} is not working. Because declaringClass {} of the witness method is not existed.\", transformClassName, interceptorDefineClassName, witnessMethod.declaringClassName);\n+                    return null;\n+                }\n+                boolean empty = resolution.resolve()\n+                        .getDeclaredMethods()\n+                        .filter(witnessMethod.elementMatcher)", "originalCommit": "c25d532e3b4ec3447626837f11a361b2f068bc9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e9d2b438250e1f4465a049706aea943f52ad39f", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\nindex 27830be419..71ed33b3c7 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\n\n@@ -87,7 +87,7 @@ public abstract class AbstractClassEnhancePluginDefine {\n                         .getDeclaredMethods()\n                         .filter(witnessMethod.elementMatcher)\n                         .isEmpty();\n-                if(empty){\n+                if (empty) {\n                     LOGGER.warn(\"enhance class {} by plugin {} is not working. Because the witness method is not existed.\", transformClassName, interceptorDefineClassName, witnessMethod);\n                     return null;\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk5MzU3Nw==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r549993577", "bodyText": "getDeclaredMethods doesn't include the inherited methods, right?", "author": "wu-sheng", "createdAt": "2020-12-30T07:39:45Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java", "diffHunk": "@@ -70,6 +75,25 @@\n                 }\n             }\n         }\n+        List<WitnessMethod> witnessMethods = witnessMethods();\n+        if (!CollectionUtil.isEmpty(witnessMethods)) {\n+            for (WitnessMethod witnessMethod : witnessMethods) {\n+                TypePool.Resolution resolution = WitnessClassFinder.INSTANCE.getResolution(witnessMethod.declaringClassName, classLoader);\n+                if (!resolution.isResolved()) {\n+                    LOGGER.warn(\"enhance class {} by plugin {} is not working. Because declaringClass {} of the witness method is not existed.\", transformClassName, interceptorDefineClassName, witnessMethod.declaringClassName);\n+                    return null;\n+                }\n+                boolean empty = resolution.resolve()\n+                        .getDeclaredMethods()", "originalCommit": "c25d532e3b4ec3447626837f11a361b2f068bc9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAwNTAxNw==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550005017", "bodyText": "Right.", "author": "libinglong", "createdAt": "2020-12-30T07:55:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk5MzU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b78ef127f88e9ab5780065f8bbf81e81c45a40ff", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\nindex 27830be419..c219f35f06 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\n\n@@ -87,7 +87,7 @@ public abstract class AbstractClassEnhancePluginDefine {\n                         .getDeclaredMethods()\n                         .filter(witnessMethod.elementMatcher)\n                         .isEmpty();\n-                if(empty){\n+                if (empty) {\n                     LOGGER.warn(\"enhance class {} by plugin {} is not working. Because the witness method is not existed.\", transformClassName, interceptorDefineClassName, witnessMethod);\n                     return null;\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk5NTAzNQ==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r549995035", "bodyText": "This existing logic should move into the WitnessClassFinder from my understanding. And you should add UTs for WitnessClassFinder.", "author": "wu-sheng", "createdAt": "2020-12-30T07:41:32Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java", "diffHunk": "@@ -70,6 +75,25 @@\n                 }\n             }\n         }\n+        List<WitnessMethod> witnessMethods = witnessMethods();", "originalCommit": "c25d532e3b4ec3447626837f11a361b2f068bc9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAxNjEzNA==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550016134", "bodyText": "I think The WitnessClassFinder class name should be changed If the logic is moved.\nWhat's the meaning of UTs here?", "author": "libinglong", "createdAt": "2020-12-30T08:10:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk5NTAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAxNzU4Mw==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550017583", "bodyText": "WitnessClassFinder -> WitnessFinder should be enough.\nUT means Unit Test, to verify the method you added.", "author": "wu-sheng", "createdAt": "2020-12-30T08:12:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk5NTAzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "b78ef127f88e9ab5780065f8bbf81e81c45a40ff", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\nindex 27830be419..c219f35f06 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\n\n@@ -87,7 +87,7 @@ public abstract class AbstractClassEnhancePluginDefine {\n                         .getDeclaredMethods()\n                         .filter(witnessMethod.elementMatcher)\n                         .isEmpty();\n-                if(empty){\n+                if (empty) {\n                     LOGGER.warn(\"enhance class {} by plugin {} is not working. Because the witness method is not existed.\", transformClassName, interceptorDefineClassName, witnessMethod);\n                     return null;\n                 }\n"}}, {"oid": "b78ef127f88e9ab5780065f8bbf81e81c45a40ff", "url": "https://github.com/apache/skywalking/commit/b78ef127f88e9ab5780065f8bbf81e81c45a40ff", "message": "Update apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-12-30T07:49:07Z", "type": "commit"}, {"oid": "859aef3bb5aad74ec262971c3490ed55cf4e5e16", "url": "https://github.com/apache/skywalking/commit/859aef3bb5aad74ec262971c3490ed55cf4e5e16", "message": "Update CHANGES.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-12-30T07:57:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAyNTQ1MA==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550025450", "bodyText": "THREAD_SAFETY_VIOLATION:  Read/Write race. Non-private method WitnessClassFinder.exist(...) indirectly reads without synchronization from container this.poolMap via call to Map.get(...). Potentially races with write in method WitnessClassFinder.getResolution(...).\nReporting because another access to the same memory occurs on a background thread, although this access may not.", "author": "sonatype-lift", "createdAt": "2020-12-30T08:22:32Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessClassFinder.java", "diffHunk": "@@ -36,6 +36,17 @@\n      * @return true, if the given witnessClass exists, through the given classLoader.\n      */\n     public boolean exist(String witnessClass, ClassLoader classLoader) {\n+        return getResolution(witnessClass, classLoader)", "originalCommit": "1e9d2b438250e1f4465a049706aea943f52ad39f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA5MzU1MQ==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550093551", "bodyText": "@Muse-Dev The hashmap modification is already in the double-check and synchronized. I don't think this is an issue.", "author": "wu-sheng", "createdAt": "2020-12-30T09:50:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAyNTQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA5NDAwNg==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550094006", "bodyText": "@TomMD Could you double-check about this?", "author": "wu-sheng", "createdAt": "2020-12-30T09:50:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAyNTQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA5NDcwMw==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550094703", "bodyText": "Do I need to care about code review of muse-dev?\n\n@libinglong I am not sure whether this is an issue. Pinged the muse-dev team. But at least, this is an issue brought by this PR.", "author": "wu-sheng", "createdAt": "2020-12-30T09:51:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAyNTQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIzNDA3MA==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550234070", "bodyText": "@wu-sheng I haven't looked at the actual trace produced by the tool but here are my thoughts - please let me know if they seem off and I can ask the tool for its explanation.\nThe message here is due to the same core issue as you see in the getResolution comment below.  When calling getResolution then without synchronization we execute:\n TypePool typePool = poolMap.get(mappingKey);\n\nAnd that can race with a write to poolMap occurring in another thread.  There might not be a mappingKey inside of poolMap because poolMap could be modified prior to calling get.  If you'd like to be sure the element exists then you'd need the synchronize block to encompass both the get and the containsKey call.\nWe're planning on making traces accessible from the comments with a commands to the bot - this would illuminate the supposed bugs and help developers decide if the trace is feasible and worth changing.  We welcome any thoughts you have about bug explanation and elaboration.", "author": "TomMD", "createdAt": "2020-12-30T15:33:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAyNTQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI0MjU0NA==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550242544", "bodyText": "@TomMD Typical race condition of HashMap should like this, https://stackoverflow.com/questions/7830791/java-hashmap-race-condition.\nI can't find the get conflicts with put. What do I miss?", "author": "wu-sheng", "createdAt": "2020-12-30T15:59:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAyNTQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI2MDM5OQ==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550260399", "bodyText": "Maybe It should not be assumed that the put method for a key has no effect on the get method for another key In concurrent environment as long as the data struct(hashmap) is thread unsafe.", "author": "libinglong", "createdAt": "2020-12-30T16:55:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAyNTQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI3MjgxMg==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550272812", "bodyText": "@wu-sheng I don't believe you miss anything, it's merely a difference of what one considers a race.  If you get from a variable outside of synchronized, and that variable is sometimes used in a synchronized block then you receive this read/write race warning.\nYour read might race with a write because the lock isn't held.  You are probably unconcerned and can quickly dismiss the warning in this case.  The link you posted suggests you are concern is about races regarding the handling of the hashmap itself (i.e. the collision and resize issues in the answer) and it suffices to avoid write/write races.\nI believe in practice read/write races are concerning almost exclusively in multi-variable situations where there are invariants between the variables that are broken within the writers so the readers must ensure they see a consistent state, usually with a lock.", "author": "TomMD", "createdAt": "2020-12-30T17:38:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAyNTQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM2MTgxMQ==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550361811", "bodyText": "@TomMD My understanding is, Java's HashMap is only facing write/write race, but here, it shows me the HashMap#get will need a lock. Is this correct?", "author": "wu-sheng", "createdAt": "2020-12-31T00:12:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAyNTQ1MA=="}], "type": "inlineReview", "revised_code": {"commit": "0efb79509909f1fdbabbc3e91f12dce8dcca2ac8", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessClassFinder.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java\nsimilarity index 73%\nrename from apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessClassFinder.java\nrename to apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java\nindex 0e8807202d..e76418ce4e 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessClassFinder.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java\n\n@@ -46,7 +46,7 @@ public enum WitnessClassFinder {\n      * @param classLoader classLoader for finding the witnessClass\n      * @return TypePool.Resolution\n      */\n-    public TypePool.Resolution getResolution(String witnessClass, ClassLoader classLoader) {\n+    private TypePool.Resolution getResolution(String witnessClass, ClassLoader classLoader) {\n         ClassLoader mappingKey = classLoader == null ? NullClassLoader.INSTANCE : classLoader;\n         if (!poolMap.containsKey(mappingKey)) {\n             synchronized (poolMap) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAyNTQ2Mw==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550025463", "bodyText": "THREAD_SAFETY_VIOLATION:  Read/Write race. Non-private method WitnessClassFinder.getResolution(...) reads without synchronization from container this.poolMap via call to Map.get(...). Potentially races with write in method WitnessClassFinder.getResolution(...).\nReporting because this access may occur on a background thread.", "author": "sonatype-lift", "createdAt": "2020-12-30T08:22:33Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessClassFinder.java", "diffHunk": "@@ -46,9 +57,9 @@ public boolean exist(String witnessClass, ClassLoader classLoader) {\n             }\n         }\n         TypePool typePool = poolMap.get(mappingKey);", "originalCommit": "1e9d2b438250e1f4465a049706aea943f52ad39f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0efb79509909f1fdbabbc3e91f12dce8dcca2ac8", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessClassFinder.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java\nsimilarity index 73%\nrename from apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessClassFinder.java\nrename to apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java\nindex 0e8807202d..e76418ce4e 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessClassFinder.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java\n\n@@ -60,6 +60,21 @@ public enum WitnessClassFinder {\n         return typePool.describe(witnessClass);\n     }\n \n+    /**\n+     * @param classLoader for finding the witness method\n+     * @return true, if the given witness method exists, through the given classLoader.\n+     */\n+    public boolean exist(WitnessMethod witnessMethod, ClassLoader classLoader) {\n+        TypePool.Resolution resolution = WitnessFinder.INSTANCE.getResolution(witnessMethod.getDeclaringClassName(), classLoader);\n+        if (!resolution.isResolved()) {\n+            return false;\n+        }\n+        return !resolution.resolve()\n+                .getDeclaredMethods()\n+                .filter(witnessMethod.getElementMatcher())\n+                .isEmpty();\n+    }\n+\n }\n \n final class NullClassLoader extends ClassLoader {\n"}}, {"oid": "0efb79509909f1fdbabbc3e91f12dce8dcca2ac8", "url": "https://github.com/apache/skywalking/commit/0efb79509909f1fdbabbc3e91f12dce8dcca2ac8", "message": "move the witness logic to WitnessFinder", "committedDate": "2020-12-30T08:27:11Z", "type": "commit"}, {"oid": "768840e0f4c7581f72b7b375886eb8f597907782", "url": "https://github.com/apache/skywalking/commit/768840e0f4c7581f72b7b375886eb8f597907782", "message": "add doc and unit tests", "committedDate": "2020-12-30T08:59:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA3ODAzNQ==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550078035", "bodyText": "Please add more tests also could be as demo about how to set witness methods with parameter type and return value.", "author": "wu-sheng", "createdAt": "2020-12-30T09:30:31Z", "path": "apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/witness/WitnessTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.apache.skywalking.apm.agent.core.plugin.witness;\n+\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.skywalking.apm.agent.core.plugin.WitnessFinder;\n+import org.apache.skywalking.apm.agent.core.plugin.WitnessMethod;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * witness test\n+ */\n+public class WitnessTest {\n+\n+    private String className = \"org.apache.skywalking.apm.agent.core.plugin.witness.WitnessTest\";\n+\n+    @Test\n+    public void testWitnessClass(){\n+        Assert.assertTrue(WitnessFinder.INSTANCE.exist(className, this.getClass().getClassLoader()));\n+    }\n+\n+    @Test\n+    public void testWitnessMethod(){\n+        WitnessMethod witnessMethod = new WitnessMethod(className, ElementMatchers.named(\"testWitnessMethod\"));", "originalCommit": "768840e0f4c7581f72b7b375886eb8f597907782", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46dc42fd0a945622a1e1e57c7ff5defdaea62c47", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/witness/WitnessTest.java b/apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/witness/WitnessTest.java\nindex ce8b7cb724..0b566065f7 100644\n--- a/apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/witness/WitnessTest.java\n+++ b/apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/witness/WitnessTest.java\n\n@@ -1,11 +1,16 @@\n package org.apache.skywalking.apm.agent.core.plugin.witness;\n \n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n import net.bytebuddy.matcher.ElementMatchers;\n import org.apache.skywalking.apm.agent.core.plugin.WitnessFinder;\n import org.apache.skywalking.apm.agent.core.plugin.WitnessMethod;\n import org.junit.Assert;\n import org.junit.Test;\n \n+import java.util.List;\n+import java.util.Map;\n+\n /**\n  * witness test\n  */\n"}}, {"oid": "4991a1b166dd77a807f2c4b91b22801786b209cb", "url": "https://github.com/apache/skywalking/commit/4991a1b166dd77a807f2c4b91b22801786b209cb", "message": "Update docs/en/guides/Java-Plugin-Development-Guide.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-12-30T09:31:24Z", "type": "commit"}, {"oid": "7d931e0d8b8b81d84cab2ae3a3caab3d0e4317f7", "url": "https://github.com/apache/skywalking/commit/7d931e0d8b8b81d84cab2ae3a3caab3d0e4317f7", "message": "Update docs/en/guides/Java-Plugin-Development-Guide.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-12-30T09:31:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA4MjExMw==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550082113", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    TypePool.Resolution resolution = WitnessFinder.INSTANCE.getResolution(witnessMethod.getDeclaringClassName(), classLoader);\n          \n          \n            \n                    TypePool.Resolution resolution = this.getResolution(witnessMethod.getDeclaringClassName(), classLoader);", "author": "wu-sheng", "createdAt": "2020-12-30T09:35:34Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java", "diffHunk": "@@ -46,9 +57,24 @@ public boolean exist(String witnessClass, ClassLoader classLoader) {\n             }\n         }\n         TypePool typePool = poolMap.get(mappingKey);\n-        TypePool.Resolution witnessClassResolution = typePool.describe(witnessClass);\n-        return witnessClassResolution.isResolved();\n+        return typePool.describe(witnessClass);\n+    }\n+\n+    /**\n+     * @param classLoader for finding the witness method\n+     * @return true, if the given witness method exists, through the given classLoader.\n+     */\n+    public boolean exist(WitnessMethod witnessMethod, ClassLoader classLoader) {\n+        TypePool.Resolution resolution = WitnessFinder.INSTANCE.getResolution(witnessMethod.getDeclaringClassName(), classLoader);", "originalCommit": "7d931e0d8b8b81d84cab2ae3a3caab3d0e4317f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "000f6c7106463e0d6696670ad1d82e40d2cb64c3", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java\nindex e76418ce4e..7f8c05ca4a 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java\n\n@@ -65,7 +65,7 @@ public enum WitnessFinder {\n      * @return true, if the given witness method exists, through the given classLoader.\n      */\n     public boolean exist(WitnessMethod witnessMethod, ClassLoader classLoader) {\n-        TypePool.Resolution resolution = WitnessFinder.INSTANCE.getResolution(witnessMethod.getDeclaringClassName(), classLoader);\n+        TypePool.Resolution resolution = this.getResolution(witnessMethod.getDeclaringClassName(), classLoader);\n         if (!resolution.isResolved()) {\n             return false;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA4MjY5OA==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550082698", "bodyText": "Use @Getter.", "author": "wu-sheng", "createdAt": "2020-12-30T09:36:15Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+import java.util.StringJoiner;\n+\n+/**\n+ * Witness Method for plugin activation\n+ */\n+public class WitnessMethod {\n+\n+    /**\n+     * java.lang.reflect.Method#getDeclaringClass()\n+     */\n+    private String declaringClassName;\n+    /**\n+     * mather fo match the witness method\n+     */\n+    private final ElementMatcher<? super MethodDescription.InDefinedShape> elementMatcher;\n+\n+    public WitnessMethod(String declaringClassName, ElementMatcher<? super MethodDescription.InDefinedShape> elementMatcher) {\n+        this.declaringClassName = declaringClassName;\n+        this.elementMatcher = elementMatcher;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new StringJoiner(\", \", WitnessMethod.class.getSimpleName() + \"[\", \"]\")\n+                .add(\"declaringClassName='\" + declaringClassName + \"'\")\n+                .add(\"elementMatcher=\" + elementMatcher)\n+                .toString();\n+    }\n+\n+    public String getDeclaringClassName() {\n+        return declaringClassName;\n+    }\n+\n+    public ElementMatcher<? super MethodDescription.InDefinedShape> getElementMatcher() {\n+        return elementMatcher;\n+    }", "originalCommit": "7d931e0d8b8b81d84cab2ae3a3caab3d0e4317f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46dc42fd0a945622a1e1e57c7ff5defdaea62c47", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java\nindex 9c808b391c..a7196ccfc8 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java\n\n@@ -18,23 +18,26 @@\n \n package org.apache.skywalking.apm.agent.core.plugin;\n \n+import lombok.Getter;\n+import lombok.ToString;\n import net.bytebuddy.description.method.MethodDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n \n-import java.util.StringJoiner;\n-\n /**\n  * Witness Method for plugin activation\n  */\n+@ToString\n public class WitnessMethod {\n \n     /**\n      * java.lang.reflect.Method#getDeclaringClass()\n      */\n-    private String declaringClassName;\n+    @Getter\n+    private final String declaringClassName;\n     /**\n      * mather fo match the witness method\n      */\n+    @Getter\n     private final ElementMatcher<? super MethodDescription.InDefinedShape> elementMatcher;\n \n     public WitnessMethod(String declaringClassName, ElementMatcher<? super MethodDescription.InDefinedShape> elementMatcher) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA4NDg5Mg==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550084892", "bodyText": "We could move WitnessFinder.INSTANCE as a local variable.", "author": "wu-sheng", "createdAt": "2020-12-30T09:39:02Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java", "diffHunk": "@@ -64,12 +67,21 @@\n         String[] witnessClasses = witnessClasses();\n         if (witnessClasses != null) {\n             for (String witnessClass : witnessClasses) {\n-                if (!WitnessClassFinder.INSTANCE.exist(witnessClass, classLoader)) {\n+                if (!WitnessFinder.INSTANCE.exist(witnessClass, classLoader)) {", "originalCommit": "7d931e0d8b8b81d84cab2ae3a3caab3d0e4317f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46dc42fd0a945622a1e1e57c7ff5defdaea62c47", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\nindex f12d6a093e..7778181296 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\n\n@@ -67,7 +67,7 @@ public abstract class AbstractClassEnhancePluginDefine {\n         String[] witnessClasses = witnessClasses();\n         if (witnessClasses != null) {\n             for (String witnessClass : witnessClasses) {\n-                if (!WitnessFinder.INSTANCE.exist(witnessClass, classLoader)) {\n+                if (!WitnessFinder.exist(witnessClass, classLoader)) {\n                     LOGGER.warn(\"enhance class {} by plugin {} is not working. Because witness class {} is not existed.\", transformClassName, interceptorDefineClassName, witnessClass);\n                     return null;\n                 }\n"}}, {"oid": "000f6c7106463e0d6696670ad1d82e40d2cb64c3", "url": "https://github.com/apache/skywalking/commit/000f6c7106463e0d6696670ad1d82e40d2cb64c3", "message": "Update apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-12-30T09:42:41Z", "type": "commit"}, {"oid": "46dc42fd0a945622a1e1e57c7ff5defdaea62c47", "url": "https://github.com/apache/skywalking/commit/46dc42fd0a945622a1e1e57c7ff5defdaea62c47", "message": "WitnessFinder code optimization, Witness test", "committedDate": "2020-12-30T10:43:01Z", "type": "commit"}, {"oid": "ccbba8a00d6ac153a44738e7bdf34514eabe2555", "url": "https://github.com/apache/skywalking/commit/ccbba8a00d6ac153a44738e7bdf34514eabe2555", "message": "add file header", "committedDate": "2020-12-30T10:56:35Z", "type": "commit"}, {"oid": "bb812b97fd7370647a59703e9dc359f73489749e", "url": "https://github.com/apache/skywalking/commit/bb812b97fd7370647a59703e9dc359f73489749e", "message": "update the plugin develop doc", "committedDate": "2020-12-30T11:06:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI0MDE5NQ==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550240195", "bodyText": "\ufffdPlease keep the previous version too. (name match only). It is better to have 2 test cases.", "author": "wu-sheng", "createdAt": "2020-12-30T15:52:16Z", "path": "apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/witness/WitnessTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.apache.skywalking.apm.agent.core.plugin.witness;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.skywalking.apm.agent.core.plugin.WitnessFinder;\n+import org.apache.skywalking.apm.agent.core.plugin.WitnessMethod;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * witness test\n+ */\n+public class WitnessTest {\n+\n+    private String className = \"org.apache.skywalking.apm.agent.core.plugin.witness.WitnessTest\";\n+\n+    @Test\n+    public void testWitnessClass() {\n+        Assert.assertTrue(WitnessFinder.exist(className, this.getClass().getClassLoader()));\n+    }\n+\n+    @Test\n+    public void testWitnessMethod() {", "originalCommit": "bb812b97fd7370647a59703e9dc359f73489749e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c90e3f3507721081c206d3ad2157083c5f05d0b6", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/witness/WitnessTest.java b/apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/witness/WitnessTest.java\nindex 7b07a66444..abfabaf3e2 100644\n--- a/apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/witness/WitnessTest.java\n+++ b/apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/witness/WitnessTest.java\n\n@@ -1,3 +1,21 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n package org.apache.skywalking.apm.agent.core.plugin.witness;\n \n import net.bytebuddy.description.method.MethodDescription;\n"}}, {"oid": "c90e3f3507721081c206d3ad2157083c5f05d0b6", "url": "https://github.com/apache/skywalking/commit/c90e3f3507721081c206d3ad2157083c5f05d0b6", "message": "Update WitnessTest.java", "committedDate": "2020-12-30T15:54:55Z", "type": "commit"}, {"oid": "c6f7c8e0a637f75d7e9f54f14b9b070736baf5de", "url": "https://github.com/apache/skywalking/commit/c6f7c8e0a637f75d7e9f54f14b9b070736baf5de", "message": "Merge branch 'master' into lbl-new-future-add-witness-method", "committedDate": "2020-12-30T23:47:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM2MjAxNg==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550362016", "bodyText": "This comment seems strange. Please fix.", "author": "wu-sheng", "createdAt": "2020-12-31T00:14:12Z", "path": "apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/witness/WitnessTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin.witness;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.skywalking.apm.agent.core.plugin.WitnessFinder;\n+import org.apache.skywalking.apm.agent.core.plugin.WitnessMethod;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * witness test\n+ */", "originalCommit": "c6f7c8e0a637f75d7e9f54f14b9b070736baf5de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffb9961a22353081e4ad271cb1c8d21512575ae7", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/witness/WitnessTest.java b/apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/witness/WitnessTest.java\nindex abfabaf3e2..c66c699c1f 100644\n--- a/apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/witness/WitnessTest.java\n+++ b/apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/witness/WitnessTest.java\n\n@@ -30,7 +30,7 @@ import java.util.List;\n import java.util.Map;\n \n /**\n- * witness test\n+ * unit test for WitnessFinder\n  */\n public class WitnessTest {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM2MjA2Mg==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550362062", "bodyText": "What does this comment means?", "author": "wu-sheng", "createdAt": "2020-12-31T00:14:34Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin;\n+\n+import lombok.Getter;\n+import lombok.ToString;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+/**\n+ * Witness Method for plugin activation\n+ */\n+@ToString\n+public class WitnessMethod {\n+\n+    /**\n+     * java.lang.reflect.Method#getDeclaringClass()", "originalCommit": "c6f7c8e0a637f75d7e9f54f14b9b070736baf5de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM4MjA2Nw==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550382067", "bodyText": "I have changed this comment.", "author": "libinglong", "createdAt": "2020-12-31T02:50:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM2MjA2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ffb9961a22353081e4ad271cb1c8d21512575ae7", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java\nindex a7196ccfc8..59af37c7ec 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java\n\n@@ -30,7 +30,7 @@ import net.bytebuddy.matcher.ElementMatcher;\n public class WitnessMethod {\n \n     /**\n-     * java.lang.reflect.Method#getDeclaringClass()\n+     * the class or interface name where the witness method is declared.\n      */\n     @Getter\n     private final String declaringClassName;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM2MjI4OA==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550362288", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * ClassLoader}, which helps to find the class define existed or not.\n          \n          \n            \n             * ClassLoader}, which helps to find the class declaration existed or not.", "author": "wu-sheng", "createdAt": "2020-12-31T00:15:54Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.pool.TypePool;\n+\n+/**\n+ * The <code>WitnessFinder</code> represents a pool of {@link TypePool}s, each {@link TypePool} matches a {@link\n+ * ClassLoader}, which helps to find the class define existed or not.", "originalCommit": "c6f7c8e0a637f75d7e9f54f14b9b070736baf5de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a59b9b4d7da144999a78557592fa22728b000101", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java\nindex 96c7cb10cd..9cdef4b757 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java\n\n@@ -24,7 +24,7 @@ import net.bytebuddy.pool.TypePool;\n \n /**\n  * The <code>WitnessFinder</code> represents a pool of {@link TypePool}s, each {@link TypePool} matches a {@link\n- * ClassLoader}, which helps to find the class define existed or not.\n+ * ClassLoader}, which helps to find the class declaration existed or not.\n  */\n public enum WitnessFinder {\n     INSTANCE;\n"}}, {"oid": "ffb9961a22353081e4ad271cb1c8d21512575ae7", "url": "https://github.com/apache/skywalking/commit/ffb9961a22353081e4ad271cb1c8d21512575ae7", "message": "add test method, update some javadoc", "committedDate": "2020-12-31T02:38:11Z", "type": "commit"}, {"oid": "a59b9b4d7da144999a78557592fa22728b000101", "url": "https://github.com/apache/skywalking/commit/a59b9b4d7da144999a78557592fa22728b000101", "message": "Update apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-12-31T02:39:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxMjAwNQ==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550412005", "bodyText": "Using WitnessTest#getClass should be better?", "author": "wu-sheng", "createdAt": "2020-12-31T06:54:29Z", "path": "apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/witness/WitnessTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin.witness;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import org.apache.skywalking.apm.agent.core.plugin.WitnessFinder;\n+import org.apache.skywalking.apm.agent.core.plugin.WitnessMethod;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * unit test for WitnessFinder\n+ */\n+public class WitnessTest {\n+\n+    private String className = \"org.apache.skywalking.apm.agent.core.plugin.witness.WitnessTest\";", "originalCommit": "a59b9b4d7da144999a78557592fa22728b000101", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxNDMzMw==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550414333", "bodyText": "I am not sure If I can use WitnessTest.class.\nI think the witness class should not be loaded before the app start.", "author": "libinglong", "createdAt": "2020-12-31T07:09:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxMjAwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxNDYzNg==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550414636", "bodyText": "I am not asking you to change the mechanism. My point is this test class. This field doesn't need to be a hard coded string. You could use getClass.getName to instead of, right?", "author": "wu-sheng", "createdAt": "2020-12-31T07:11:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxMjAwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxODM2Mg==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550418362", "bodyText": "Yes,you are right.\nBut it's good for the unit test, not good as demo for users.We should find a banlance.", "author": "libinglong", "createdAt": "2020-12-31T07:34:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxMjAwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxOTY3Mw==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550419673", "bodyText": "Good point, let's keep this unchanged.", "author": "wu-sheng", "createdAt": "2020-12-31T07:42:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxMjAwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "dea019cf76533bead1bf8440c6283bc21627e280", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/witness/WitnessTest.java b/apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/witness/WitnessTest.java\nindex c66c699c1f..6a5a751e77 100644\n--- a/apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/witness/WitnessTest.java\n+++ b/apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/plugin/witness/WitnessTest.java\n\n@@ -34,11 +34,13 @@ import java.util.Map;\n  */\n public class WitnessTest {\n \n-    private String className = \"org.apache.skywalking.apm.agent.core.plugin.witness.WitnessTest\";\n+    private final String className = \"org.apache.skywalking.apm.agent.core.plugin.witness.WitnessTest\";\n+\n+    private final WitnessFinder finder = WitnessFinder.INSTANCE;\n \n     @Test\n     public void testWitnessClass() {\n-        Assert.assertTrue(WitnessFinder.exist(className, this.getClass().getClassLoader()));\n+        Assert.assertTrue(finder.exist(className, this.getClass().getClassLoader()));\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxMjE1Ng==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550412156", "bodyText": "I was not saying change this to static method. My meaning is you could get `var = WitnessFinder.INSTANCE before all loops.", "author": "wu-sheng", "createdAt": "2020-12-31T06:55:32Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java", "diffHunk": "@@ -64,12 +67,21 @@\n         String[] witnessClasses = witnessClasses();\n         if (witnessClasses != null) {\n             for (String witnessClass : witnessClasses) {\n-                if (!WitnessClassFinder.INSTANCE.exist(witnessClass, classLoader)) {\n+                if (!WitnessFinder.exist(witnessClass, classLoader)) {", "originalCommit": "a59b9b4d7da144999a78557592fa22728b000101", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dea019cf76533bead1bf8440c6283bc21627e280", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\nindex 7778181296..88c980cf75 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/AbstractClassEnhancePluginDefine.java\n\n@@ -60,14 +60,14 @@ public abstract class AbstractClassEnhancePluginDefine {\n         }\n \n         LOGGER.debug(\"prepare to enhance class {} by {}.\", transformClassName, interceptorDefineClassName);\n-\n+        WitnessFinder finder = WitnessFinder.INSTANCE;\n         /**\n          * find witness classes for enhance class\n          */\n         String[] witnessClasses = witnessClasses();\n         if (witnessClasses != null) {\n             for (String witnessClass : witnessClasses) {\n-                if (!WitnessFinder.exist(witnessClass, classLoader)) {\n+                if (!finder.exist(witnessClass, classLoader)) {\n                     LOGGER.warn(\"enhance class {} by plugin {} is not working. Because witness class {} is not existed.\", transformClassName, interceptorDefineClassName, witnessClass);\n                     return null;\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxMjIxMA==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550412210", "bodyText": "Don't expose static method, including all methods below.", "author": "wu-sheng", "createdAt": "2020-12-31T06:55:56Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.pool.TypePool;\n+\n+/**\n+ * The <code>WitnessFinder</code> represents a pool of {@link TypePool}s, each {@link TypePool} matches a {@link\n+ * ClassLoader}, which helps to find the class declaration existed or not.\n+ */\n+public enum WitnessFinder {\n+    INSTANCE;\n+\n+    private final Map<ClassLoader, TypePool> poolMap = new HashMap<ClassLoader, TypePool>();\n+\n+    /**\n+     * @param classLoader for finding the witnessClass\n+     * @return true, if the given witnessClass exists, through the given classLoader.\n+     */\n+    public static boolean exist(String witnessClass, ClassLoader classLoader) {", "originalCommit": "a59b9b4d7da144999a78557592fa22728b000101", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dea019cf76533bead1bf8440c6283bc21627e280", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java\nindex 9cdef4b757..dc046e98f4 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java\n\n@@ -24,7 +24,7 @@ import net.bytebuddy.pool.TypePool;\n \n /**\n  * The <code>WitnessFinder</code> represents a pool of {@link TypePool}s, each {@link TypePool} matches a {@link\n- * ClassLoader}, which helps to find the class declaration existed or not.\n+ * ClassLoader}, which helps to find the class define existed or not.\n  */\n public enum WitnessFinder {\n     INSTANCE;\n"}}, {"oid": "dea019cf76533bead1bf8440c6283bc21627e280", "url": "https://github.com/apache/skywalking/commit/dea019cf76533bead1bf8440c6283bc21627e280", "message": "WitnessFinder remote the static", "committedDate": "2020-12-31T07:46:15Z", "type": "commit"}, {"oid": "63767486291e20c0f58f08a84dc5663afa2ff9a5", "url": "https://github.com/apache/skywalking/commit/63767486291e20c0f58f08a84dc5663afa2ff9a5", "message": "Merge branch 'lbl-new-future-add-witness-method' of https://github.com/libinglong/skywalking into lbl-new-future-add-witness-method", "committedDate": "2020-12-31T07:46:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMjY4OQ==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550422689", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * mather fo match the witness method\n          \n          \n            \n                 * matcher to match the witness method\n          \n      \n    \n    \n  \n\ntypos", "author": "wu-sheng", "createdAt": "2020-12-31T07:59:31Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin;\n+\n+import lombok.Getter;\n+import lombok.ToString;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+/**\n+ * Witness Method for plugin activation\n+ */\n+@ToString\n+public class WitnessMethod {\n+\n+    /**\n+     * the class or interface name where the witness method is declared.\n+     */\n+    @Getter\n+    private final String declaringClassName;\n+    /**\n+     * mather fo match the witness method", "originalCommit": "63767486291e20c0f58f08a84dc5663afa2ff9a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a47cf666bde7eb756694a00e899883221be424d", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java\nindex 59af37c7ec..5949a4ef95 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java\n\n@@ -35,7 +35,7 @@ public class WitnessMethod {\n     @Getter\n     private final String declaringClassName;\n     /**\n-     * mather fo match the witness method\n+     * matcher to match the witness method\n      */\n     @Getter\n     private final ElementMatcher<? super MethodDescription.InDefinedShape> elementMatcher;\n"}}, {"oid": "2a47cf666bde7eb756694a00e899883221be424d", "url": "https://github.com/apache/skywalking/commit/2a47cf666bde7eb756694a00e899883221be424d", "message": "Update apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-12-31T08:01:01Z", "type": "commit"}, {"oid": "ef6ce8dd92339efd50ac316a54ee9729ca8652c3", "url": "https://github.com/apache/skywalking/commit/ef6ce8dd92339efd50ac316a54ee9729ca8652c3", "message": "Update docs/en/guides/Java-Plugin-Development-Guide.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-12-31T08:01:19Z", "type": "commit"}, {"oid": "371dc035fb080ffe3c8b34a2e02fbb6f5f30d1de", "url": "https://github.com/apache/skywalking/commit/371dc035fb080ffe3c8b34a2e02fbb6f5f30d1de", "message": "Update docs/en/guides/Java-Plugin-Development-Guide.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-12-31T08:01:45Z", "type": "commit"}, {"oid": "de7ab47db3181d9f99b2829e270e9cdf58e878c6", "url": "https://github.com/apache/skywalking/commit/de7ab47db3181d9f99b2829e270e9cdf58e878c6", "message": "Update docs/en/guides/Java-Plugin-Development-Guide.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-12-31T08:02:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyNzgzNg==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550427836", "bodyText": "INSTANCE is not necessary, I think. Or use this.", "author": "wu-sheng", "createdAt": "2020-12-31T08:28:51Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.pool.TypePool;\n+\n+/**\n+ * The <code>WitnessFinder</code> represents a pool of {@link TypePool}s, each {@link TypePool} matches a {@link\n+ * ClassLoader}, which helps to find the class declaration existed or not.\n+ */\n+public enum WitnessFinder {\n+    INSTANCE;\n+\n+    private final Map<ClassLoader, TypePool> poolMap = new HashMap<ClassLoader, TypePool>();\n+\n+    /**\n+     * @param classLoader for finding the witnessClass\n+     * @return true, if the given witnessClass exists, through the given classLoader.\n+     */\n+    public boolean exist(String witnessClass, ClassLoader classLoader) {\n+        return getResolution(witnessClass, classLoader)\n+                .isResolved();\n+    }\n+\n+    /**\n+     * get TypePool.Resolution of the witness class\n+     * @param witnessClass class name\n+     * @param classLoader classLoader for finding the witnessClass\n+     * @return TypePool.Resolution\n+     */\n+    private TypePool.Resolution getResolution(String witnessClass, ClassLoader classLoader) {\n+        ClassLoader mappingKey = classLoader == null ? NullClassLoader.INSTANCE : classLoader;\n+        if (!INSTANCE.poolMap.containsKey(mappingKey)) {", "originalCommit": "de7ab47db3181d9f99b2829e270e9cdf58e878c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5fd287e3c8c1f06fc2235f3058876e57337c23bd", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java\nindex 8e589b7cd4..9f0b4d1368 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessFinder.java\n\n@@ -18,9 +18,10 @@\n \n package org.apache.skywalking.apm.agent.core.plugin;\n \n+import net.bytebuddy.pool.TypePool;\n+\n import java.util.HashMap;\n import java.util.Map;\n-import net.bytebuddy.pool.TypePool;\n \n /**\n  * The <code>WitnessFinder</code> represents a pool of {@link TypePool}s, each {@link TypePool} matches a {@link\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyODA1MQ==", "url": "https://github.com/apache/skywalking/pull/6103#discussion_r550428051", "bodyText": "Use @RequiredArgsConstructor annotation.", "author": "wu-sheng", "createdAt": "2020-12-31T08:30:00Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.plugin;\n+\n+import lombok.Getter;\n+import lombok.ToString;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+/**\n+ * Witness Method for plugin activation\n+ */\n+@ToString\n+public class WitnessMethod {\n+\n+    /**\n+     * the class or interface name where the witness method is declared.\n+     */\n+    @Getter\n+    private final String declaringClassName;\n+    /**\n+     * matcher to match the witness method\n+     */\n+    @Getter\n+    private final ElementMatcher<? super MethodDescription.InDefinedShape> elementMatcher;\n+\n+    public WitnessMethod(String declaringClassName, ElementMatcher<? super MethodDescription.InDefinedShape> elementMatcher) {\n+        this.declaringClassName = declaringClassName;\n+        this.elementMatcher = elementMatcher;\n+    }", "originalCommit": "de7ab47db3181d9f99b2829e270e9cdf58e878c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5fd287e3c8c1f06fc2235f3058876e57337c23bd", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java\nindex 5949a4ef95..7000e58663 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/plugin/WitnessMethod.java\n\n@@ -19,6 +19,7 @@\n package org.apache.skywalking.apm.agent.core.plugin;\n \n import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n import lombok.ToString;\n import net.bytebuddy.description.method.MethodDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n"}}, {"oid": "5fd287e3c8c1f06fc2235f3058876e57337c23bd", "url": "https://github.com/apache/skywalking/commit/5fd287e3c8c1f06fc2235f3058876e57337c23bd", "message": "Code optimization", "committedDate": "2020-12-31T10:53:24Z", "type": "commit"}, {"oid": "a21cde144b15acd8d888fce3de2b62cd45b03d75", "url": "https://github.com/apache/skywalking/commit/a21cde144b15acd8d888fce3de2b62cd45b03d75", "message": "Merge branch 'lbl-new-future-add-witness-method' of https://github.com/libinglong/skywalking into lbl-new-future-add-witness-method", "committedDate": "2020-12-31T10:54:04Z", "type": "commit"}, {"oid": "e08ca716bfb3bac8d28ea33c8992d30fe2cf88f7", "url": "https://github.com/apache/skywalking/commit/e08ca716bfb3bac8d28ea33c8992d30fe2cf88f7", "message": "merge and resolve conflict", "committedDate": "2021-01-07T11:19:58Z", "type": "commit"}, {"oid": "7c8865b2fbd9b9014afa5ba00adc2b8dd516de86", "url": "https://github.com/apache/skywalking/commit/7c8865b2fbd9b9014afa5ba00adc2b8dd516de86", "message": "Merge branch 'master' into lbl-new-future-add-witness-method", "committedDate": "2021-01-07T16:28:08Z", "type": "commit"}]}