{"pr_number": 5202, "pr_title": "Query all of labels once selected labels condition is absent.", "pr_createdAt": "2020-07-29T14:46:18Z", "pr_url": "https://github.com/apache/skywalking/pull/5202", "timeline": [{"oid": "e35868394e1d2caee27051e1a629115f6c808734", "url": "https://github.com/apache/skywalking/commit/e35868394e1d2caee27051e1a629115f6c808734", "message": "Query all of labels once selected labels condition is absent.", "committedDate": "2020-07-29T14:42:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2Mzk4NQ==", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r462363985", "bodyText": "Others are HashMap, this is LinkedHashMap. Why?", "author": "wu-sheng", "createdAt": "2020-07-29T14:55:33Z", "path": "oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricsQueryEsDAO.java", "diffHunk": "@@ -138,42 +139,12 @@ public MetricsValues readMetricsValues(final MetricsCondition condition,\n         });\n \n         SearchResponse response = getClient().ids(condition.getName(), ids.toArray(new String[0]));\n-        Map<String, Map<String, Object>> idMap = toMap(response);\n-\n-        Map<String, MetricsValues> labeledValues = new HashMap<>(labels.size());\n-        labels.forEach(label -> {\n-            MetricsValues labelValue = new MetricsValues();\n-            labelValue.setLabel(label);\n-\n-            labeledValues.put(label, labelValue);\n-        });\n-\n-        final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n-        for (String id : ids) {\n-            if (idMap.containsKey(id)) {\n-                Map<String, Object> source = idMap.get(id);\n-                DataTable multipleValues = new DataTable((String) source.getOrDefault(valueColumnName, \"\"));\n-\n-                labels.forEach(label -> {\n-                    final IntValues values = labeledValues.get(label).getValues();\n-                    Long data = multipleValues.get(label);\n-                    if (data == null) {\n-                        data = (long) defaultValue;\n-                    }\n-                    KVInt kv = new KVInt();\n-                    kv.setId(id);\n-                    kv.setValue(data);\n-                    values.addKVInt(kv);\n-                });\n-            }\n-\n+        Map<String, DataTable> idMap = new LinkedHashMap<>();", "originalCommit": "e35868394e1d2caee27051e1a629115f6c808734", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NzUxOQ==", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466067519", "bodyText": "by mistake.", "author": "hanahmily", "createdAt": "2020-08-05T23:56:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2Mzk4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4MTA1MQ==", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466481051", "bodyText": "done", "author": "hanahmily", "createdAt": "2020-08-06T15:06:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2Mzk4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "cda6e2512c1eddfc5770784825ab989e449e86b1", "chunk": "diff --git a/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricsQueryEsDAO.java b/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricsQueryEsDAO.java\nindex 5145de58d..9e43af3b0 100644\n--- a/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricsQueryEsDAO.java\n+++ b/oap-server/server-storage-plugin/storage-elasticsearch-plugin/src/main/java/org/apache/skywalking/oap/server/storage/plugin/elasticsearch/query/MetricsQueryEsDAO.java\n\n@@ -139,7 +138,7 @@ public class MetricsQueryEsDAO extends EsDAO implements IMetricsQueryDAO {\n         });\n \n         SearchResponse response = getClient().ids(condition.getName(), ids.toArray(new String[0]));\n-        Map<String, DataTable> idMap = new LinkedHashMap<>();\n+        Map<String, DataTable> idMap = new HashMap<>();\n         SearchHit[] hits = response.getHits().getHits();\n         for (SearchHit hit : hits) {\n             idMap.put(hit.getId(), new DataTable((String) hit.getSourceAsMap().getOrDefault(valueColumnName, \"\")));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzQ2NA==", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r462367464", "bodyText": "I feel like you should just copy the old codes rather than re-implement.", "author": "wu-sheng", "createdAt": "2020-07-29T15:00:05Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "diffHunk": "@@ -76,5 +87,45 @@ public static IntValues sortValues(IntValues origin, List<String> expectedOrder,\n             }\n             return origin;\n         }\n+\n+        /**\n+         * Compose the multiple metric result based on conditions.\n+         */\n+        public static List<MetricsValues> composeLabelValue(final MetricsCondition condition,\n+            final List<String> labels,\n+            final List<String> ids,\n+            final Map<String, DataTable> idMap) {\n+            List<String> allLabels;\n+            if (Objects.isNull(labels) || labels.size() < 1) {\n+                allLabels = idMap.values().stream()\n+                    .flatMap(dataTable -> dataTable.keys().stream())\n+                    .distinct().collect(Collectors.toList());\n+            } else {\n+                allLabels = labels;\n+            }\n+            final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());", "originalCommit": "e35868394e1d2caee27051e1a629115f6c808734", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2ODg0Mw==", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r462368843", "bodyText": "Once you have the allLabels, copying is a safer way. This re-implementation is hard to be reviewed.", "author": "wu-sheng", "createdAt": "2020-07-29T15:01:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2OTUxOA==", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r462369518", "bodyText": "Could you revert them? Is there any block there?", "author": "wu-sheng", "createdAt": "2020-07-29T15:02:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NjYzOQ==", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466066639", "bodyText": "I used to follow copy and past strategy but found it would bring more mess more than what I expect. Unlike Es, H2 and Influxdb don't fetch all data before composing the final result object. That causes I have to tweak the current algorithm unavoidably. Future more, there are too many iterations that bring some performance concerns, I want to optimize it in the new implement.", "author": "hanahmily", "createdAt": "2020-08-05T23:53:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2Njg1Nw==", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466066857", "bodyText": "I agree with that lamda is too hard to review. I'd like to improve it with other code styles.", "author": "hanahmily", "createdAt": "2020-08-05T23:53:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NzMyMw==", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466067323", "bodyText": "And I also add a unit test case to help define the behavior of this function. Please review it to check if it cover the main scope.", "author": "hanahmily", "createdAt": "2020-08-05T23:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4MTUyNw==", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466481527", "bodyText": "Updated, open a new thread for review if necessary.", "author": "hanahmily", "createdAt": "2020-08-06T15:07:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzQ2NA=="}], "type": "inlineReview", "revised_code": {"commit": "cda6e2512c1eddfc5770784825ab989e449e86b1", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java\nindex 803c6bba0..70e106fba 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java\n\n@@ -104,28 +104,37 @@ public interface IMetricsQueryDAO extends DAO {\n                 allLabels = labels;\n             }\n             final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n-            return allLabels.stream()\n-                .flatMap(label -> ids.stream()\n-                    .map(id -> Tuple.of(\n-                        label,\n-                        id,\n-                        Optional.ofNullable(idMap.getOrDefault(id, new DataTable()).get(label)).orElse(0L))))\n-                .collect(groupingBy(t -> t._1, mapping(t -> {\n-                    KVInt kv = new KVInt();\n-                    kv.setId(t._2);\n-                    kv.setValue(t._3);\n-                    return kv;\n-                }, toList())))\n-                .entrySet().stream()\n-                .map(entry -> {\n-                    MetricsValues labelValue = new MetricsValues();\n-                    labelValue.setLabel(entry.getKey());\n-                    IntValues values = new IntValues();\n-                    entry.getValue().forEach(values::addKVInt);\n-                    labelValue.setValues(sortValues(values, ids, defaultValue));\n-                    return labelValue;\n-                })\n+            List<LabeledValue> labeledValues = Sets.newTreeSet(allLabels).stream()\n+                .flatMap(label -> ids.stream().map(id ->\n+                    new LabeledValue(label, id, Optional.ofNullable(\n+                        idMap.getOrDefault(id, new DataTable()).get(label)).orElse((long) defaultValue))))\n                 .collect(toList());\n+            MetricsValues current = new MetricsValues();\n+            List<MetricsValues> result = new ArrayList<>();\n+            for (LabeledValue each : labeledValues) {\n+                if (!Strings.isNullOrEmpty(current.getLabel()) && each.label.equals(current.getLabel())) {\n+                    current.getValues().addKVInt(each.kv);\n+                } else {\n+                    current = new MetricsValues();\n+                    current.setLabel(each.label);\n+                    current.getValues().addKVInt(each.kv);\n+                    result.add(current);\n+                }\n+            }\n+            return result;\n+        }\n+    }\n+\n+    class LabeledValue {\n+        private final String label;\n+        private final KVInt kv;\n+\n+        public LabeledValue(String label, String id, long value) {\n+            this.label = label;\n+            KVInt kv = new KVInt();\n+            kv.setId(id);\n+            kv.setValue(value);\n+            this.kv = kv;\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzU4Ng==", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r462367586", "bodyText": "Why orElse(0L)?", "author": "wu-sheng", "createdAt": "2020-07-29T15:00:15Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "diffHunk": "@@ -76,5 +87,45 @@ public static IntValues sortValues(IntValues origin, List<String> expectedOrder,\n             }\n             return origin;\n         }\n+\n+        /**\n+         * Compose the multiple metric result based on conditions.\n+         */\n+        public static List<MetricsValues> composeLabelValue(final MetricsCondition condition,\n+            final List<String> labels,\n+            final List<String> ids,\n+            final Map<String, DataTable> idMap) {\n+            List<String> allLabels;\n+            if (Objects.isNull(labels) || labels.size() < 1) {\n+                allLabels = idMap.values().stream()\n+                    .flatMap(dataTable -> dataTable.keys().stream())\n+                    .distinct().collect(Collectors.toList());\n+            } else {\n+                allLabels = labels;\n+            }\n+            final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n+            return allLabels.stream()\n+                .flatMap(label -> ids.stream()\n+                    .map(id -> Tuple.of(\n+                        label,\n+                        id,\n+                        Optional.ofNullable(idMap.getOrDefault(id, new DataTable()).get(label)).orElse(0L))))", "originalCommit": "e35868394e1d2caee27051e1a629115f6c808734", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NzQ0MA==", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466067440", "bodyText": "I should be defaultValue.", "author": "hanahmily", "createdAt": "2020-08-05T23:55:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ4MDkzMA==", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466480930", "bodyText": "done", "author": "hanahmily", "createdAt": "2020-08-06T15:06:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NzU4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "cda6e2512c1eddfc5770784825ab989e449e86b1", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java\nindex 803c6bba0..70e106fba 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java\n\n@@ -104,28 +104,37 @@ public interface IMetricsQueryDAO extends DAO {\n                 allLabels = labels;\n             }\n             final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n-            return allLabels.stream()\n-                .flatMap(label -> ids.stream()\n-                    .map(id -> Tuple.of(\n-                        label,\n-                        id,\n-                        Optional.ofNullable(idMap.getOrDefault(id, new DataTable()).get(label)).orElse(0L))))\n-                .collect(groupingBy(t -> t._1, mapping(t -> {\n-                    KVInt kv = new KVInt();\n-                    kv.setId(t._2);\n-                    kv.setValue(t._3);\n-                    return kv;\n-                }, toList())))\n-                .entrySet().stream()\n-                .map(entry -> {\n-                    MetricsValues labelValue = new MetricsValues();\n-                    labelValue.setLabel(entry.getKey());\n-                    IntValues values = new IntValues();\n-                    entry.getValue().forEach(values::addKVInt);\n-                    labelValue.setValues(sortValues(values, ids, defaultValue));\n-                    return labelValue;\n-                })\n+            List<LabeledValue> labeledValues = Sets.newTreeSet(allLabels).stream()\n+                .flatMap(label -> ids.stream().map(id ->\n+                    new LabeledValue(label, id, Optional.ofNullable(\n+                        idMap.getOrDefault(id, new DataTable()).get(label)).orElse((long) defaultValue))))\n                 .collect(toList());\n+            MetricsValues current = new MetricsValues();\n+            List<MetricsValues> result = new ArrayList<>();\n+            for (LabeledValue each : labeledValues) {\n+                if (!Strings.isNullOrEmpty(current.getLabel()) && each.label.equals(current.getLabel())) {\n+                    current.getValues().addKVInt(each.kv);\n+                } else {\n+                    current = new MetricsValues();\n+                    current.setLabel(each.label);\n+                    current.getValues().addKVInt(each.kv);\n+                    result.add(current);\n+                }\n+            }\n+            return result;\n+        }\n+    }\n+\n+    class LabeledValue {\n+        private final String label;\n+        private final KVInt kv;\n+\n+        public LabeledValue(String label, String id, long value) {\n+            this.label = label;\n+            KVInt kv = new KVInt();\n+            kv.setId(id);\n+            kv.setValue(value);\n+            this.kv = kv;\n         }\n     }\n }\n"}}, {"oid": "534cff43f42abd8a067781859880397a0341f78b", "url": "https://github.com/apache/skywalking/commit/534cff43f42abd8a067781859880397a0341f78b", "message": "Merge branch 'master' into query-labeled", "committedDate": "2020-07-30T03:55:59Z", "type": "commit"}, {"oid": "f62b5c27f688ecaeb0b7f538f73c78b63007911c", "url": "https://github.com/apache/skywalking/commit/f62b5c27f688ecaeb0b7f538f73c78b63007911c", "message": "Merge branch 'master' into query-labeled", "committedDate": "2020-08-05T23:29:33Z", "type": "commit"}, {"oid": "cda6e2512c1eddfc5770784825ab989e449e86b1", "url": "https://github.com/apache/skywalking/commit/cda6e2512c1eddfc5770784825ab989e449e86b1", "message": "Polish codes\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-08-06T15:05:07Z", "type": "commit"}, {"oid": "d44116af3d8fb39928a5066289c021e963654fed", "url": "https://github.com/apache/skywalking/commit/d44116af3d8fb39928a5066289c021e963654fed", "message": "Merge branch 'master' into query-labeled", "committedDate": "2020-08-06T15:06:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1MjYyMA==", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466752620", "bodyText": "According this the documents, this #newTreeSet is deprecated\n   * <p><b>Note for Java 7 and later:</b> this method is now unnecessary and should be treated as\n   * deprecated. Instead, use the {@code TreeSet} constructor directly, taking advantage of the new\n   * <a href=\"http://goo.gl/iz2Wi\">\"diamond\" syntax</a>.", "author": "wu-sheng", "createdAt": "2020-08-07T00:18:04Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "diffHunk": "@@ -76,5 +87,54 @@ public static IntValues sortValues(IntValues origin, List<String> expectedOrder,\n             }\n             return origin;\n         }\n+\n+        /**\n+         * Compose the multiple metric result based on conditions.\n+         */\n+        public static List<MetricsValues> composeLabelValue(final MetricsCondition condition,\n+            final List<String> labels,\n+            final List<String> ids,\n+            final Map<String, DataTable> idMap) {\n+            List<String> allLabels;\n+            if (Objects.isNull(labels) || labels.size() < 1) {\n+                allLabels = idMap.values().stream()\n+                    .flatMap(dataTable -> dataTable.keys().stream())\n+                    .distinct().collect(Collectors.toList());\n+            } else {\n+                allLabels = labels;\n+            }\n+            final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n+            List<LabeledValue> labeledValues = Sets.newTreeSet(allLabels).stream()", "originalCommit": "d44116af3d8fb39928a5066289c021e963654fed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ1NDU0Ng==", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r467454546", "bodyText": "done", "author": "hanahmily", "createdAt": "2020-08-08T11:11:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1MjYyMA=="}], "type": "inlineReview", "revised_code": {"commit": "a5564f8ca211aa39301fdb27bc5f2c99cee6abcd", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java\nindex 70e106fba..112a1ea14 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java\n\n@@ -104,15 +103,17 @@ public interface IMetricsQueryDAO extends DAO {\n                 allLabels = labels;\n             }\n             final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n-            List<LabeledValue> labeledValues = Sets.newTreeSet(allLabels).stream()\n+            List<LabeledValue> labeledValues = new TreeSet<>(allLabels).stream()\n                 .flatMap(label -> ids.stream().map(id ->\n-                    new LabeledValue(label, id, Optional.ofNullable(\n-                        idMap.getOrDefault(id, new DataTable()).get(label)).orElse((long) defaultValue))))\n+                    new LabeledValue(\n+                        label,\n+                        id,\n+                        Optional.ofNullable(idMap.getOrDefault(id, new DataTable()).get(label)).orElse((long) defaultValue))))\n                 .collect(toList());\n             MetricsValues current = new MetricsValues();\n             List<MetricsValues> result = new ArrayList<>();\n             for (LabeledValue each : labeledValues) {\n-                if (!Strings.isNullOrEmpty(current.getLabel()) && each.label.equals(current.getLabel())) {\n+                if (Objects.equals(current.getLabel(), each.label)) {\n                     current.getValues().addKVInt(each.kv);\n                 } else {\n                     current = new MetricsValues();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1MzI4Nw==", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466753287", "bodyText": "I think this nested expression should be better formated manually than IDE.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                new LabeledValue(label, id, Optional.ofNullable(\n          \n          \n            \n                                    idMap.getOrDefault(id, new DataTable()).get(label)).orElse((long) defaultValue))))\n          \n          \n            \n                                new LabeledValue(\n          \n          \n            \n                                    label, \n          \n          \n            \n                                    id, \n          \n          \n            \n                                    Optional.ofNullable(idMap.getOrDefault(id, new DataTable()).get(label)).orElse((long) defaultValue)))\n          \n          \n            \n                                )", "author": "wu-sheng", "createdAt": "2020-08-07T00:20:40Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "diffHunk": "@@ -76,5 +87,54 @@ public static IntValues sortValues(IntValues origin, List<String> expectedOrder,\n             }\n             return origin;\n         }\n+\n+        /**\n+         * Compose the multiple metric result based on conditions.\n+         */\n+        public static List<MetricsValues> composeLabelValue(final MetricsCondition condition,\n+            final List<String> labels,\n+            final List<String> ids,\n+            final Map<String, DataTable> idMap) {\n+            List<String> allLabels;\n+            if (Objects.isNull(labels) || labels.size() < 1) {\n+                allLabels = idMap.values().stream()\n+                    .flatMap(dataTable -> dataTable.keys().stream())\n+                    .distinct().collect(Collectors.toList());\n+            } else {\n+                allLabels = labels;\n+            }\n+            final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n+            List<LabeledValue> labeledValues = Sets.newTreeSet(allLabels).stream()\n+                .flatMap(label -> ids.stream().map(id ->\n+                    new LabeledValue(label, id, Optional.ofNullable(\n+                        idMap.getOrDefault(id, new DataTable()).get(label)).orElse((long) defaultValue))))", "originalCommit": "d44116af3d8fb39928a5066289c021e963654fed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ1NDU3NQ==", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r467454575", "bodyText": "done.", "author": "hanahmily", "createdAt": "2020-08-08T11:12:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1MzI4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a5564f8ca211aa39301fdb27bc5f2c99cee6abcd", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java\nindex 70e106fba..112a1ea14 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java\n\n@@ -104,15 +103,17 @@ public interface IMetricsQueryDAO extends DAO {\n                 allLabels = labels;\n             }\n             final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n-            List<LabeledValue> labeledValues = Sets.newTreeSet(allLabels).stream()\n+            List<LabeledValue> labeledValues = new TreeSet<>(allLabels).stream()\n                 .flatMap(label -> ids.stream().map(id ->\n-                    new LabeledValue(label, id, Optional.ofNullable(\n-                        idMap.getOrDefault(id, new DataTable()).get(label)).orElse((long) defaultValue))))\n+                    new LabeledValue(\n+                        label,\n+                        id,\n+                        Optional.ofNullable(idMap.getOrDefault(id, new DataTable()).get(label)).orElse((long) defaultValue))))\n                 .collect(toList());\n             MetricsValues current = new MetricsValues();\n             List<MetricsValues> result = new ArrayList<>();\n             for (LabeledValue each : labeledValues) {\n-                if (!Strings.isNullOrEmpty(current.getLabel()) && each.label.equals(current.getLabel())) {\n+                if (Objects.equals(current.getLabel(), each.label)) {\n                     current.getValues().addKVInt(each.kv);\n                 } else {\n                     current = new MetricsValues();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1MzczOA==", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r466753738", "bodyText": "You are using each.label.equals, then !Strings.isNullOrEmpty(current.getLabel()) isn't required, right?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (!Strings.isNullOrEmpty(current.getLabel()) && each.label.equals(current.getLabel())) {\n          \n          \n            \n                            if (each.label.equals(current.getLabel())) {\n          \n      \n    \n    \n  \n\nOr you need to check each.label != null, from my understanding.", "author": "wu-sheng", "createdAt": "2020-08-07T00:22:13Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java", "diffHunk": "@@ -76,5 +87,54 @@ public static IntValues sortValues(IntValues origin, List<String> expectedOrder,\n             }\n             return origin;\n         }\n+\n+        /**\n+         * Compose the multiple metric result based on conditions.\n+         */\n+        public static List<MetricsValues> composeLabelValue(final MetricsCondition condition,\n+            final List<String> labels,\n+            final List<String> ids,\n+            final Map<String, DataTable> idMap) {\n+            List<String> allLabels;\n+            if (Objects.isNull(labels) || labels.size() < 1) {\n+                allLabels = idMap.values().stream()\n+                    .flatMap(dataTable -> dataTable.keys().stream())\n+                    .distinct().collect(Collectors.toList());\n+            } else {\n+                allLabels = labels;\n+            }\n+            final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n+            List<LabeledValue> labeledValues = Sets.newTreeSet(allLabels).stream()\n+                .flatMap(label -> ids.stream().map(id ->\n+                    new LabeledValue(label, id, Optional.ofNullable(\n+                        idMap.getOrDefault(id, new DataTable()).get(label)).orElse((long) defaultValue))))\n+                .collect(toList());\n+            MetricsValues current = new MetricsValues();\n+            List<MetricsValues> result = new ArrayList<>();\n+            for (LabeledValue each : labeledValues) {\n+                if (!Strings.isNullOrEmpty(current.getLabel()) && each.label.equals(current.getLabel())) {", "originalCommit": "d44116af3d8fb39928a5066289c021e963654fed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ1NDYxMQ==", "url": "https://github.com/apache/skywalking/pull/5202#discussion_r467454611", "bodyText": "Objects.equals is a better choice.", "author": "hanahmily", "createdAt": "2020-08-08T11:12:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1MzczOA=="}], "type": "inlineReview", "revised_code": {"commit": "a5564f8ca211aa39301fdb27bc5f2c99cee6abcd", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java\nindex 70e106fba..112a1ea14 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/storage/query/IMetricsQueryDAO.java\n\n@@ -104,15 +103,17 @@ public interface IMetricsQueryDAO extends DAO {\n                 allLabels = labels;\n             }\n             final int defaultValue = ValueColumnMetadata.INSTANCE.getDefaultValue(condition.getName());\n-            List<LabeledValue> labeledValues = Sets.newTreeSet(allLabels).stream()\n+            List<LabeledValue> labeledValues = new TreeSet<>(allLabels).stream()\n                 .flatMap(label -> ids.stream().map(id ->\n-                    new LabeledValue(label, id, Optional.ofNullable(\n-                        idMap.getOrDefault(id, new DataTable()).get(label)).orElse((long) defaultValue))))\n+                    new LabeledValue(\n+                        label,\n+                        id,\n+                        Optional.ofNullable(idMap.getOrDefault(id, new DataTable()).get(label)).orElse((long) defaultValue))))\n                 .collect(toList());\n             MetricsValues current = new MetricsValues();\n             List<MetricsValues> result = new ArrayList<>();\n             for (LabeledValue each : labeledValues) {\n-                if (!Strings.isNullOrEmpty(current.getLabel()) && each.label.equals(current.getLabel())) {\n+                if (Objects.equals(current.getLabel(), each.label)) {\n                     current.getValues().addKVInt(each.kv);\n                 } else {\n                     current = new MetricsValues();\n"}}, {"oid": "bcd7b997a2f324278b19a77a814a5c7cb7d6ffdd", "url": "https://github.com/apache/skywalking/commit/bcd7b997a2f324278b19a77a814a5c7cb7d6ffdd", "message": "Merge branch 'master' into query-labeled", "committedDate": "2020-08-08T11:02:38Z", "type": "commit"}, {"oid": "a5564f8ca211aa39301fdb27bc5f2c99cee6abcd", "url": "https://github.com/apache/skywalking/commit/a5564f8ca211aa39301fdb27bc5f2c99cee6abcd", "message": "Some nits\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-08-08T11:11:09Z", "type": "commit"}, {"oid": "a5564f8ca211aa39301fdb27bc5f2c99cee6abcd", "url": "https://github.com/apache/skywalking/commit/a5564f8ca211aa39301fdb27bc5f2c99cee6abcd", "message": "Some nits\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>", "committedDate": "2020-08-08T11:11:09Z", "type": "forcePushed"}]}