{"pr_number": 4670, "pr_title": "log4j2 support AsyncAppender print tid", "pr_createdAt": "2020-04-19T05:25:58Z", "pr_url": "https://github.com/apache/skywalking/pull/4670", "timeline": [{"oid": "9d050eb29d3bc60e5dfe2abe9412a861ebe5fd9e", "url": "https://github.com/apache/skywalking/commit/9d050eb29d3bc60e5dfe2abe9412a861ebe5fd9e", "message": "log4j2 support AsyncAppender print tid", "committedDate": "2020-04-19T05:13:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgyMjQ5MA==", "url": "https://github.com/apache/skywalking/pull/4670#discussion_r410822490", "bodyText": "Do these two methods always execute in the app code thread?", "author": "wu-sheng", "createdAt": "2020-04-19T05:37:31Z", "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-log4j-2.x-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/log/log4j/v2/x/async/AsyncAppenderInstrumentation.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.activation.log.log4j.v2.x.async;\n+\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.ConstructorInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.ClassInstanceMethodsEnhancePluginDefine;\n+import org.apache.skywalking.apm.agent.core.plugin.match.ClassMatch;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static org.apache.skywalking.apm.agent.core.plugin.match.NameMatch.byName;\n+\n+public class AsyncAppenderInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {\n+\n+    private static final String INTERCEPT_CLASS = \"org.apache.skywalking.apm.toolkit.activation.log.log4j.v2.x.async.AsyncAppenderMethodInterceptor\";\n+    private static final String ENHANCE_CLASS = \"org.apache.logging.log4j.core.appender.AsyncAppender\";\n+\n+    @Override\n+    public ConstructorInterceptPoint[] getConstructorsInterceptPoints() {\n+        return new ConstructorInterceptPoint[0];\n+    }\n+\n+    @Override\n+    public InstanceMethodsInterceptPoint[] getInstanceMethodsInterceptPoints() {\n+        return new InstanceMethodsInterceptPoint[]{\n+                new InstanceMethodsInterceptPoint() {\n+                    @Override\n+                    public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                        return named(\"transfer\");\n+                    }\n+\n+                    @Override\n+                    public String getMethodsInterceptor() {\n+                        return INTERCEPT_CLASS;\n+                    }\n+\n+                    @Override\n+                    public boolean isOverrideArgs() {\n+                        return false;\n+                    }\n+                },\n+                new InstanceMethodsInterceptPoint() {\n+                    @Override\n+                    public ElementMatcher<MethodDescription> getMethodsMatcher() {\n+                        return named(\"logMessageInCurrentThread\");", "originalCommit": "9d050eb29d3bc60e5dfe2abe9412a861ebe5fd9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgyMzUwMA==", "url": "https://github.com/apache/skywalking/pull/4670#discussion_r410823500", "bodyText": "logMessageInCurrentThread method will be executed when the queue is full, transfer method always execute", "author": "J-Cod3r", "createdAt": "2020-04-19T05:43:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgyMjQ5MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "73b8a3801b0ff6f393af728933804e7284393a1a", "url": "https://github.com/apache/skywalking/commit/73b8a3801b0ff6f393af728933804e7284393a1a", "message": "update doc", "committedDate": "2020-04-19T06:41:54Z", "type": "commit"}, {"oid": "4a6a48a5e3253a13d7771d96eb7d86f31e1b81ed", "url": "https://github.com/apache/skywalking/commit/4a6a48a5e3253a13d7771d96eb7d86f31e1b81ed", "message": "Merge branch 'master' into master", "committedDate": "2020-04-19T13:02:14Z", "type": "commit"}, {"oid": "d52caf972f619032408637a822c2b9d11200f273", "url": "https://github.com/apache/skywalking/commit/d52caf972f619032408637a822c2b9d11200f273", "message": "Merge branch 'master' into master", "committedDate": "2020-04-24T12:00:19Z", "type": "commit"}, {"oid": "fe67213cb62c2b822f1317ee71cd7be03e034c16", "url": "https://github.com/apache/skywalking/commit/fe67213cb62c2b822f1317ee71cd7be03e034c16", "message": "Merge branch 'master' into master", "committedDate": "2020-04-25T01:32:33Z", "type": "commit"}, {"oid": "ccceb5e8ff2ba21dcacaf99f83a2f6f41e62787a", "url": "https://github.com/apache/skywalking/commit/ccceb5e8ff2ba21dcacaf99f83a2f6f41e62787a", "message": "Merge branch 'master' into master", "committedDate": "2020-04-25T08:55:17Z", "type": "commit"}]}