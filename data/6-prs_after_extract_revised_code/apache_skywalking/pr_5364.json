{"pr_number": 5364, "pr_title": "support Slack alarm hooks", "pr_createdAt": "2020-08-21T06:33:27Z", "pr_url": "https://github.com/apache/skywalking/pull/5364", "timeline": [{"oid": "e214a1d887221b268c4b1ae7836ec85160c1eb38", "url": "https://github.com/apache/skywalking/commit/e214a1d887221b268c4b1ae7836ec85160c1eb38", "message": "finish", "committedDate": "2020-08-20T09:27:40Z", "type": "commit"}, {"oid": "a15111c52ce2ed8267f9f549cf4b0d009aa83ad1", "url": "https://github.com/apache/skywalking/commit/a15111c52ce2ed8267f9f549cf4b0d009aa83ad1", "message": "update.", "committedDate": "2020-08-20T09:41:41Z", "type": "commit"}, {"oid": "752da5612329ec5fe2bd21d4a590a02b47a7d8d4", "url": "https://github.com/apache/skywalking/commit/752da5612329ec5fe2bd21d4a590a02b47a7d8d4", "message": "finish", "committedDate": "2020-08-21T06:26:58Z", "type": "commit"}, {"oid": "5da6f1076a683155c7e77846855c84a11d89c4a6", "url": "https://github.com/apache/skywalking/commit/5da6f1076a683155c7e77846855c84a11d89c4a6", "message": "Merge branch 'master' of github.com:apache/skywalking into slack_alarm", "committedDate": "2020-08-21T06:31:31Z", "type": "commit"}, {"oid": "831ff9f00ec8513c4f4faf57f859399f25e16a38", "url": "https://github.com/apache/skywalking/commit/831ff9f00ec8513c4f4faf57f859399f25e16a38", "message": "remove test slack hooks", "committedDate": "2020-08-21T06:36:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0NDQ2Mw==", "url": "https://github.com/apache/skywalking/pull/5364#discussion_r474444463", "bodyText": "slacks.getOrDefault won't produces null", "author": "kezhenxu94", "createdAt": "2020-08-21T06:56:11Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java", "diffHunk": "@@ -104,6 +108,24 @@ public Rules readRules() {\n \n                 rules.setGrpchookSetting(grpcAlarmSetting);\n             }\n+\n+            Map slacks = (Map) yamlData.get(\"slackHooks\");\n+            if (slacks != null) {\n+                SlackSettings slackSettings = new SlackSettings();\n+                Object textTemplate = slacks.getOrDefault(\"textTemplate\", \"\");\n+                if (textTemplate != null) {", "originalCommit": "831ff9f00ec8513c4f4faf57f859399f25e16a38", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55812ba73139792409465caf675f8a4758031cf5", "chunk": "diff --git a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java\nindex bc47b94cdc..9f5f9478c1 100644\n--- a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java\n+++ b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReader.java\n\n@@ -113,9 +113,7 @@ public class RulesReader {\n             if (slacks != null) {\n                 SlackSettings slackSettings = new SlackSettings();\n                 Object textTemplate = slacks.getOrDefault(\"textTemplate\", \"\");\n-                if (textTemplate != null) {\n-                    slackSettings.setTextTemplate((String) textTemplate);\n-                }\n+                slackSettings.setTextTemplate((String) textTemplate);\n \n                 List<String> slackWebhooks = (List<String>) slacks.get(\"webhooks\");\n                 if (slackWebhooks != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0NjYzMQ==", "url": "https://github.com/apache/skywalking/pull/5364#discussion_r474446631", "bodyText": "Don't extract this into a member variable, otherwise, the dynamic configuration mechanism won't work at line 69", "author": "kezhenxu94", "createdAt": "2020-08-21T07:00:28Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/slack/SlackhookCallback.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.slack;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.List;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.StatusLine;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Use SkyWalking alarm slack webhook API call a remote endpoints.\n+ */\n+public class SlackhookCallback implements AlarmCallback {\n+    private static final Logger logger = LoggerFactory.getLogger(SlackhookCallback.class);\n+    private static final int HTTP_CONNECT_TIMEOUT = 1000;\n+    private static final int HTTP_CONNECTION_REQUEST_TIMEOUT = 1000;\n+    private static final int HTTP_SOCKET_TIMEOUT = 10000;\n+    private static final Gson GSON = new Gson();\n+    private AlarmRulesWatcher alarmRulesWatcher;\n+    private RequestConfig requestConfig;\n+    private List<String> webhooks;\n+\n+    public SlackhookCallback(final AlarmRulesWatcher alarmRulesWatcher) {\n+        this.alarmRulesWatcher = alarmRulesWatcher;\n+        this.requestConfig = RequestConfig.custom()\n+                                          .setConnectTimeout(HTTP_CONNECT_TIMEOUT)\n+                                          .setConnectionRequestTimeout(HTTP_CONNECTION_REQUEST_TIMEOUT)\n+                                          .setSocketTimeout(HTTP_SOCKET_TIMEOUT)\n+                                          .build();\n+        this.webhooks = alarmRulesWatcher.getSlackSettings().getWebhooks();", "originalCommit": "831ff9f00ec8513c4f4faf57f859399f25e16a38", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55812ba73139792409465caf675f8a4758031cf5", "chunk": "diff --git a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/slack/SlackhookCallback.java b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/slack/SlackhookCallback.java\nindex bd9beb40df..bff7d39cec 100644\n--- a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/slack/SlackhookCallback.java\n+++ b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/slack/SlackhookCallback.java\n\n@@ -52,7 +52,6 @@ public class SlackhookCallback implements AlarmCallback {\n     private static final Gson GSON = new Gson();\n     private AlarmRulesWatcher alarmRulesWatcher;\n     private RequestConfig requestConfig;\n-    private List<String> webhooks;\n \n     public SlackhookCallback(final AlarmRulesWatcher alarmRulesWatcher) {\n         this.alarmRulesWatcher = alarmRulesWatcher;\n"}}, {"oid": "55812ba73139792409465caf675f8a4758031cf5", "url": "https://github.com/apache/skywalking/commit/55812ba73139792409465caf675f8a4758031cf5", "message": "fix dynamic config issue.", "committedDate": "2020-08-21T12:53:16Z", "type": "commit"}, {"oid": "087d1fc1c208b3de504ebbe9d3d95560921f61e1", "url": "https://github.com/apache/skywalking/commit/087d1fc1c208b3de504ebbe9d3d95560921f61e1", "message": "Merge branch 'master' into slack_alarm", "committedDate": "2020-08-21T12:53:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1NjI2MQ==", "url": "https://github.com/apache/skywalking/pull/5364#discussion_r475056261", "bodyText": "Use lombok to replace this", "author": "wu-sheng", "createdAt": "2020-08-22T06:57:56Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/slack/SlackhookCallback.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.alarm.provider.slack;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import io.netty.handler.codec.http.HttpHeaderValues;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.util.List;\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.StatusLine;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmCallback;\n+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;\n+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Use SkyWalking alarm slack webhook API call a remote endpoints.\n+ */\n+public class SlackhookCallback implements AlarmCallback {\n+    private static final Logger logger = LoggerFactory.getLogger(SlackhookCallback.class);", "originalCommit": "087d1fc1c208b3de504ebbe9d3d95560921f61e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "693e892c66f32727bbf81120896bbb3c09d03b82", "chunk": "diff --git a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/slack/SlackhookCallback.java b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/slack/SlackhookCallback.java\nindex bff7d39cec..f7eb93eae7 100644\n--- a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/slack/SlackhookCallback.java\n+++ b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/slack/SlackhookCallback.java\n\n@@ -25,6 +25,7 @@ import io.netty.handler.codec.http.HttpHeaderValues;\n import java.io.IOException;\n import java.io.UnsupportedEncodingException;\n import java.util.List;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.http.HttpHeaders;\n import org.apache.http.HttpStatus;\n import org.apache.http.StatusLine;\n"}}, {"oid": "693e892c66f32727bbf81120896bbb3c09d03b82", "url": "https://github.com/apache/skywalking/commit/693e892c66f32727bbf81120896bbb3c09d03b82", "message": "update logger", "committedDate": "2020-08-22T07:39:47Z", "type": "commit"}]}