{"pr_number": 5585, "pr_title": "fix timebucket converter issue", "pr_createdAt": "2020-09-29T12:12:30Z", "pr_url": "https://github.com/apache/skywalking/pull/5585", "timeline": [{"oid": "c5bae4fb41790f177e449170f1ca7d6ff94bf40c", "url": "https://github.com/apache/skywalking/commit/c5bae4fb41790f177e449170f1ca7d6ff94bf40c", "message": "fix timebucket converter issue", "committedDate": "2020-09-29T11:50:25Z", "type": "commit"}, {"oid": "e501f202e6f19ef16fc10dd9310e81b1244ff00a", "url": "https://github.com/apache/skywalking/commit/e501f202e6f19ef16fc10dd9310e81b1244ff00a", "message": "fix timebucket converter issue", "committedDate": "2020-09-29T12:11:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3OTgwNQ==", "url": "https://github.com/apache/skywalking/pull/5585#discussion_r496679805", "bodyText": "Do you need these if you already have calendar.setTimeInMillis(0);?", "author": "kezhenxu94", "createdAt": "2020-09-29T12:35:33Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/TimeBucket.java", "diffHunk": "@@ -104,6 +104,10 @@ public static boolean isDayBucket(long timeBucket) {\n     public static long getTimestamp(long timeBucket, DownSampling downsampling) {\n         Calendar calendar = Calendar.getInstance();\n         calendar.setTimeInMillis(0);\n+        calendar.set(Calendar.MILLISECOND, 0);\n+        calendar.set(Calendar.SECOND, 0);\n+        calendar.set(Calendar.MINUTE, 0);\n+        calendar.set(Calendar.HOUR_OF_DAY, 0);", "originalCommit": "e501f202e6f19ef16fc10dd9310e81b1244ff00a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk2ODYzNg==", "url": "https://github.com/apache/skywalking/pull/5585#discussion_r497968636", "bodyText": "Yes, they are required. The time equals zone offset  when calendar.setTimeInMillis(0); was presented. And then, I found some time zone is not a times as hour. But they all is a times as minute. (L107/L108 is optional.)", "author": "dmsolr", "createdAt": "2020-10-01T03:50:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY3OTgwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3c65bb7d88f6ab1a234046adcbf0814bbd15fb31", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/TimeBucket.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/TimeBucket.java\nindex 85e7f35fe6..03037c1d0a 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/TimeBucket.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/TimeBucket.java\n\n@@ -113,12 +113,15 @@ public class TimeBucket {\n             case Second:\n                 calendar.set(Calendar.SECOND, (int) (timeBucket % 100));\n                 timeBucket /= 100;\n+                // Fall through\n             case Minute:\n                 calendar.set(Calendar.MINUTE, (int) (timeBucket % 100));\n                 timeBucket /= 100;\n+                // Fall through\n             case Hour:\n                 calendar.set(Calendar.HOUR_OF_DAY, (int) (timeBucket % 100));\n                 timeBucket /= 100;\n+                // Fall through\n             case Day:\n                 calendar.set(Calendar.DAY_OF_MONTH, (int) (timeBucket % 100));\n                 timeBucket /= 100;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY4MDU3OQ==", "url": "https://github.com/apache/skywalking/pull/5585#discussion_r496680579", "bodyText": "Suggest to add comment about the deliberate \"fall through\" of the switch statement (as well as the ordering), in case future developers consider it as a bug, which is common", "author": "kezhenxu94", "createdAt": "2020-09-29T12:36:47Z", "path": "oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/TimeBucketTest.java", "diffHunk": "@@ -18,63 +18,54 @@\n \n package org.apache.skywalking.oap.server.core.analysis;\n \n-import java.util.concurrent.TimeUnit;\n import org.junit.Assert;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n \n-import static java.util.concurrent.TimeUnit.DAYS;\n-import static java.util.concurrent.TimeUnit.HOURS;\n-import static java.util.concurrent.TimeUnit.MILLISECONDS;\n-import static java.util.concurrent.TimeUnit.MINUTES;\n-import static java.util.concurrent.TimeUnit.SECONDS;\n+import java.util.Calendar;\n+import java.util.TimeZone;\n \n @RunWith(Parameterized.class)\n public class TimeBucketTest {\n     private static final long NOW = System.currentTimeMillis();\n \n     @Parameterized.Parameters\n-    public static Object[][] parameters() {\n-        return new Object[][] {\n-            {\n+    public static Object[] parameters() {\n+        return new Object[]{\n                 DownSampling.Second,\n-                SECONDS,\n-                MILLISECONDS.toSeconds(NOW)\n-            },\n-            {\n                 DownSampling.Minute,\n-                MINUTES,\n-                MILLISECONDS.toMinutes(NOW)\n-            },\n-            {\n                 DownSampling.Hour,\n-                HOURS,\n-                MILLISECONDS.toHours(NOW)\n-            },\n-            {\n-                DownSampling.Day,\n-                DAYS,\n-                MILLISECONDS.toDays(NOW)\n-            }\n+                DownSampling.Day\n         };\n     }\n \n     private DownSampling downSampling;\n-    private TimeUnit unit;\n-    private long time;\n \n-    public TimeBucketTest(DownSampling downSampling, TimeUnit unit, long time) {\n+    public TimeBucketTest(DownSampling downSampling) {\n         this.downSampling = downSampling;\n-        this.unit = unit;\n-        this.time = time;\n     }\n \n     @Test\n     public void testConversion() {\n-        long timestamp = TimeBucket\n-            .getTimestamp(TimeBucket.getTimeBucket(NOW, downSampling));\n-        Assert.assertEquals(timestamp, unit.toMillis(time));\n-    }\n+        long timestamp = TimeBucket.getTimestamp(TimeBucket.getTimeBucket(NOW, downSampling));\n \n+        Calendar instance = Calendar.getInstance(TimeZone.getDefault());\n+        instance.setTimeInMillis(NOW);\n+        switch (downSampling) {\n+            case Day: {\n+                instance.set(Calendar.HOUR_OF_DAY, 0);\n+            }\n+            case Hour: {\n+                instance.set(Calendar.MINUTE, 0);\n+            }\n+            case Minute: {\n+                instance.set(Calendar.SECOND, 0);\n+            }\n+            case Second: {\n+                instance.set(Calendar.MILLISECOND, 0);\n+            }", "originalCommit": "e501f202e6f19ef16fc10dd9310e81b1244ff00a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c65bb7d88f6ab1a234046adcbf0814bbd15fb31", "chunk": "diff --git a/oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/TimeBucketTest.java b/oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/TimeBucketTest.java\nindex 544fdf9d19..2dedb1c101 100644\n--- a/oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/TimeBucketTest.java\n+++ b/oap-server/server-core/src/test/java/org/apache/skywalking/oap/server/core/analysis/TimeBucketTest.java\n\n@@ -55,15 +55,19 @@ public class TimeBucketTest {\n         switch (downSampling) {\n             case Day: {\n                 instance.set(Calendar.HOUR_OF_DAY, 0);\n+                // Fall through\n             }\n             case Hour: {\n                 instance.set(Calendar.MINUTE, 0);\n+                // Fall through\n             }\n             case Minute: {\n                 instance.set(Calendar.SECOND, 0);\n+                // Fall through\n             }\n             case Second: {\n                 instance.set(Calendar.MILLISECOND, 0);\n+                // Fall through\n             }\n         }\n         Assert.assertEquals(instance.getTimeInMillis(), timestamp);\n"}}, {"oid": "d6d0d1307ac2001a2010a03b1281ae341187b2a8", "url": "https://github.com/apache/skywalking/commit/d6d0d1307ac2001a2010a03b1281ae341187b2a8", "message": "Merge branch 'master' into hotfix/timebucket", "committedDate": "2020-09-29T23:34:43Z", "type": "commit"}, {"oid": "3c65bb7d88f6ab1a234046adcbf0814bbd15fb31", "url": "https://github.com/apache/skywalking/commit/3c65bb7d88f6ab1a234046adcbf0814bbd15fb31", "message": "add comment 'fall throgh'", "committedDate": "2020-10-01T03:34:14Z", "type": "commit"}, {"oid": "a63134a0daf33656e858061a62101ac7d1eb1672", "url": "https://github.com/apache/skywalking/commit/a63134a0daf33656e858061a62101ac7d1eb1672", "message": "remove unnecessary set statements", "committedDate": "2020-10-02T03:57:05Z", "type": "commit"}, {"oid": "c4661227e3fe82e3d3f14b8ce9a3614279cc03e2", "url": "https://github.com/apache/skywalking/commit/c4661227e3fe82e3d3f14b8ce9a3614279cc03e2", "message": "Merge branch 'master' into hotfix/timebucket", "committedDate": "2020-10-02T07:57:33Z", "type": "commit"}]}