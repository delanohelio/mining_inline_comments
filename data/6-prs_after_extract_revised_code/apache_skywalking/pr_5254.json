{"pr_number": 5254, "pr_title": "Support spring-kafka", "pr_createdAt": "2020-08-06T12:52:45Z", "pr_url": "https://github.com/apache/skywalking/pull/5254", "timeline": [{"oid": "b440d1a3057750674df5d6e997aa0f2d8e90b84a", "url": "https://github.com/apache/skywalking/commit/b440d1a3057750674df5d6e997aa0f2d8e90b84a", "message": "fix", "committedDate": "2020-08-06T12:51:22Z", "type": "commit"}, {"oid": "73beb07622606eabdc16c3579437e8dd12c09d2b", "url": "https://github.com/apache/skywalking/commit/73beb07622606eabdc16c3579437e8dd12c09d2b", "message": "Merge branch 'master' into zhaoyuguang_0009", "committedDate": "2020-08-06T12:53:17Z", "type": "commit"}, {"oid": "bce1bba59a9eb16d7b4829c527efbab9e6e5eeb7", "url": "https://github.com/apache/skywalking/commit/bce1bba59a9eb16d7b4829c527efbab9e6e5eeb7", "message": "Merge branch 'master' into zhaoyuguang_0009", "committedDate": "2020-08-07T02:49:05Z", "type": "commit"}, {"oid": "67eb9868ae41f9df2ccb703cb121ae6fbb6a80e4", "url": "https://github.com/apache/skywalking/commit/67eb9868ae41f9df2ccb703cb121ae6fbb6a80e4", "message": "fix", "committedDate": "2020-08-07T04:18:22Z", "type": "commit"}, {"oid": "f147272849739e94dcad3f80c07f9cbbc1eee95a", "url": "https://github.com/apache/skywalking/commit/f147272849739e94dcad3f80c07f9cbbc1eee95a", "message": "fix", "committedDate": "2020-08-07T06:58:44Z", "type": "commit"}, {"oid": "741e8a8851fee1a3f706823aca3b750caed7e512", "url": "https://github.com/apache/skywalking/commit/741e8a8851fee1a3f706823aca3b750caed7e512", "message": "Merge branch 'master' into zhaoyuguang_0009", "committedDate": "2020-08-07T07:01:14Z", "type": "commit"}, {"oid": "f51ac5181831c86e22e43f411f884071894a7eef", "url": "https://github.com/apache/skywalking/commit/f51ac5181831c86e22e43f411f884071894a7eef", "message": "fixed", "committedDate": "2020-08-07T07:17:59Z", "type": "commit"}, {"oid": "ceb363472830a6b93983f8f3502d6909b431c874", "url": "https://github.com/apache/skywalking/commit/ceb363472830a6b93983f8f3502d6909b431c874", "message": "Merge branch 'zhaoyuguang_0009' of https://github.com/zhaoyuguang/incubator-skywalking into zhaoyuguang_0009", "committedDate": "2020-08-07T07:19:02Z", "type": "commit"}, {"oid": "a3010c8a549c34f4f23aa776e34067a762c547dd", "url": "https://github.com/apache/skywalking/commit/a3010c8a549c34f4f23aa776e34067a762c547dd", "message": "fix", "committedDate": "2020-08-07T10:32:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk2MTg2NA==", "url": "https://github.com/apache/skywalking/pull/5254#discussion_r466961864", "bodyText": "Is this an asynchronous operation?\nkafkaTemplate.send(topicName, \"key\", \"helloWorld\").get();", "author": "dmsolr", "createdAt": "2020-08-07T10:39:38Z", "path": "test/plugin/scenarios/spring-kafka-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/kafka/controller/CaseController.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package test.org.apache.skywalking.apm.testcase.spring.kafka.controller;\n+\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaProducerFactory;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.listener.AcknowledgingMessageListener;\n+import org.springframework.kafka.listener.ContainerProperties;\n+import org.springframework.kafka.listener.KafkaMessageListenerContainer;\n+import org.springframework.kafka.support.Acknowledgment;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import javax.annotation.PostConstruct;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Controller\n+@RequestMapping(\"/case\")\n+@PropertySource(\"classpath:application.properties\")\n+public class CaseController {\n+\n+    private static final String SUCCESS = \"Success\";\n+\n+    @Value(\"${bootstrap.servers:127.0.0.1:9092}\")\n+    private String bootstrapServers;\n+    private String topicName;\n+    private KafkaTemplate<String, String> kafkaTemplate;\n+\n+    @PostConstruct\n+    private void setUp() {\n+        topicName = \"spring_test\";\n+        setUpProvider();\n+        setUpConsumer();\n+    }\n+\n+    private void setUpProvider() {\n+        Map<String, Object> props = new HashMap<>();\n+        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n+        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n+        kafkaTemplate = new KafkaTemplate<String, String>(new DefaultKafkaProducerFactory<>(props));\n+    }\n+\n+    private void setUpConsumer() {\n+        Map<String, Object> configs = new HashMap<>();\n+        configs.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n+        configs.put(ConsumerConfig.GROUP_ID_CONFIG, \"grop:\" + topicName);\n+        configs.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, false);\n+        Deserializer<String> stringDeserializer = new StringDeserializer();\n+        DefaultKafkaConsumerFactory<String, String> factory = new DefaultKafkaConsumerFactory(configs, stringDeserializer, stringDeserializer);\n+        ContainerProperties props = new ContainerProperties(topicName);\n+        props.setMessageListener(new AcknowledgingMessageListener<String, String>() {\n+            @Override\n+            public void onMessage(ConsumerRecord<String, String> data, Acknowledgment acknowledgment) {\n+                System.out.println(data);\n+                OkHttpClient client = new OkHttpClient.Builder().build();\n+                Request request = new Request.Builder().url(\"http://localhost:8080/spring-kafka-scenario/case/spring-kafka-consumer-ping\").build();\n+                Response response = null;\n+                try {\n+                    response = client.newCall(request).execute();\n+                } catch (IOException e) {\n+                }\n+                response.body().close();\n+                acknowledgment.acknowledge();\n+            }\n+        });\n+        KafkaMessageListenerContainer<String, String> container = new KafkaMessageListenerContainer<>(factory, props);\n+        container.getContainerProperties().setAckMode(ContainerProperties.AckMode.MANUAL_IMMEDIATE);\n+        container.start();\n+    }\n+\n+    @RequestMapping(\"/spring-kafka-case\")\n+    @ResponseBody\n+    public String springKafkaCase() {\n+        kafkaTemplate.send(topicName, \"key\", \"helloWorld\");\n+        return SUCCESS;\n+    }", "originalCommit": "a3010c8a549c34f4f23aa776e34067a762c547dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3NjQ5Nw==", "url": "https://github.com/apache/skywalking/pull/5254#discussion_r466976497", "bodyText": "no  is sync", "author": "zhaoyuguang", "createdAt": "2020-08-07T11:14:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk2MTg2NA=="}], "type": "inlineReview", "revised_code": {"commit": "fad11bebc22838057b5e5919502fe1b019c4d9bd", "chunk": "diff --git a/test/plugin/scenarios/spring-kafka-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/kafka/controller/CaseController.java b/test/plugin/scenarios/spring-kafka-2.2.x-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/kafka/controller/CaseController.java\nsimilarity index 94%\nrename from test/plugin/scenarios/spring-kafka-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/kafka/controller/CaseController.java\nrename to test/plugin/scenarios/spring-kafka-2.2.x-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/kafka/controller/CaseController.java\nindex 053bc9f71b..e5dc9f0860 100644\n--- a/test/plugin/scenarios/spring-kafka-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/kafka/controller/CaseController.java\n+++ b/test/plugin/scenarios/spring-kafka-2.2.x-scenario/src/main/java/test/org/apache/skywalking/apm/testcase/spring/kafka/controller/CaseController.java\n\n@@ -85,7 +85,7 @@ public class CaseController {\n             public void onMessage(ConsumerRecord<String, String> data, Acknowledgment acknowledgment) {\n                 System.out.println(data);\n                 OkHttpClient client = new OkHttpClient.Builder().build();\n-                Request request = new Request.Builder().url(\"http://localhost:8080/spring-kafka-scenario/case/spring-kafka-consumer-ping\").build();\n+                Request request = new Request.Builder().url(\"http://localhost:8080/spring-kafka-2.2.x-scenario/case/spring-kafka-consumer-ping\").build();\n                 Response response = null;\n                 try {\n                     response = client.newCall(request).execute();\n"}}, {"oid": "ec7d5df8460b07cdf4fda8d5872c4d00a2e6b850", "url": "https://github.com/apache/skywalking/commit/ec7d5df8460b07cdf4fda8d5872c4d00a2e6b850", "message": "Merge branch 'master' into zhaoyuguang_0009", "committedDate": "2020-08-08T08:48:24Z", "type": "commit"}, {"oid": "0ded49e3dee5a8eab3f212c5890c6f917daed035", "url": "https://github.com/apache/skywalking/commit/0ded49e3dee5a8eab3f212c5890c6f917daed035", "message": "fix", "committedDate": "2020-08-08T11:17:30Z", "type": "commit"}, {"oid": "c6f2da9c546bc0d2155266d16f4fa62d60b8ab15", "url": "https://github.com/apache/skywalking/commit/c6f2da9c546bc0d2155266d16f4fa62d60b8ab15", "message": "fixed", "committedDate": "2020-08-08T12:37:43Z", "type": "commit"}, {"oid": "a7ceba99b39ee72d32d224f1620e417a2d500772", "url": "https://github.com/apache/skywalking/commit/a7ceba99b39ee72d32d224f1620e417a2d500772", "message": "fixed", "committedDate": "2020-08-08T13:46:16Z", "type": "commit"}, {"oid": "4c54251ef621df6e97482b0ac2b9cce93c2d6931", "url": "https://github.com/apache/skywalking/commit/4c54251ef621df6e97482b0ac2b9cce93c2d6931", "message": "fixed", "committedDate": "2020-08-08T14:47:45Z", "type": "commit"}, {"oid": "43d1f4de43d11c2255a6780909bdaee9205c6b42", "url": "https://github.com/apache/skywalking/commit/43d1f4de43d11c2255a6780909bdaee9205c6b42", "message": "Merge branch 'master' into zhaoyuguang_0009", "committedDate": "2020-08-08T14:49:40Z", "type": "commit"}, {"oid": "fad11bebc22838057b5e5919502fe1b019c4d9bd", "url": "https://github.com/apache/skywalking/commit/fad11bebc22838057b5e5919502fe1b019c4d9bd", "message": "fixed", "committedDate": "2020-08-09T23:20:34Z", "type": "commit"}, {"oid": "03281781434581cda77a02c657374d31fc18b383", "url": "https://github.com/apache/skywalking/commit/03281781434581cda77a02c657374d31fc18b383", "message": "Merge branch 'master' into zhaoyuguang_0009", "committedDate": "2020-08-09T23:21:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY0OTQ5Mg==", "url": "https://github.com/apache/skywalking/pull/5254#discussion_r467649492", "bodyText": "Why change this code style?", "author": "wu-sheng", "createdAt": "2020-08-10T00:38:41Z", "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java", "diffHunk": "@@ -45,8 +45,8 @@ public CallbackAdapterInterceptor(CallbackCache callbackCache) {\n     public void onCompletion(RecordMetadata metadata, Exception exception) {\n         ContextSnapshot snapshot = callbackCache.getSnapshot();\n         AbstractSpan activeSpan = ContextManager.createLocalSpan(\"Kafka/Producer/Callback\");\n-        SpanLayer.asMQ(activeSpan);\n         activeSpan.setComponent(ComponentsDefine.KAFKA_PRODUCER);\n+        activeSpan.setLayer(SpanLayer.MQ);", "originalCommit": "03281781434581cda77a02c657374d31fc18b383", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2NjgzOQ==", "url": "https://github.com/apache/skywalking/pull/5254#discussion_r467666839", "bodyText": "There was a PR addition submitted by someone else the other day, but I had already done it earlier, so in the merge, it was in this style", "author": "zhaoyuguang", "createdAt": "2020-08-10T02:49:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY0OTQ5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc0MTk5Mg==", "url": "https://github.com/apache/skywalking/pull/5254#discussion_r467741992", "bodyText": "My point is, they are nearly the same. Why change it again?", "author": "wu-sheng", "createdAt": "2020-08-10T07:59:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY0OTQ5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc2NzAzMw==", "url": "https://github.com/apache/skywalking/pull/5254#discussion_r467767033", "bodyText": "Np.  fixed", "author": "zhaoyuguang", "createdAt": "2020-08-10T08:50:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY0OTQ5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ca1a026a25e9ddc333881bec87425512d905c415", "chunk": "diff --git a/apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java b/apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java\nindex e8351e359b..df3d4abfd0 100644\n--- a/apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java\n+++ b/apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackAdapterInterceptor.java\n\n@@ -45,8 +45,8 @@ public class CallbackAdapterInterceptor implements Callback {\n     public void onCompletion(RecordMetadata metadata, Exception exception) {\n         ContextSnapshot snapshot = callbackCache.getSnapshot();\n         AbstractSpan activeSpan = ContextManager.createLocalSpan(\"Kafka/Producer/Callback\");\n+        SpanLayer.asMQ(activeSpan);\n         activeSpan.setComponent(ComponentsDefine.KAFKA_PRODUCER);\n-        activeSpan.setLayer(SpanLayer.MQ);\n         if (metadata != null) {\n             Tags.MQ_TOPIC.set(activeSpan, metadata.topic());\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY0OTUwMg==", "url": "https://github.com/apache/skywalking/pull/5254#discussion_r467649502", "bodyText": "Same here.", "author": "wu-sheng", "createdAt": "2020-08-10T00:38:50Z", "path": "apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackInterceptor.java", "diffHunk": "@@ -44,8 +44,8 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n             ContextSnapshot snapshot = getSnapshot(cache);\n             RecordMetadata metadata = (RecordMetadata) allArguments[0];\n             AbstractSpan activeSpan = ContextManager.createLocalSpan(\"Kafka/Producer/Callback\");\n-            SpanLayer.asMQ(activeSpan);\n             activeSpan.setComponent(ComponentsDefine.KAFKA_PRODUCER);\n+            activeSpan.setLayer(SpanLayer.MQ);", "originalCommit": "03281781434581cda77a02c657374d31fc18b383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca1a026a25e9ddc333881bec87425512d905c415", "chunk": "diff --git a/apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackInterceptor.java b/apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackInterceptor.java\nindex 11e0261389..8cba7644f1 100644\n--- a/apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackInterceptor.java\n+++ b/apm-sniffer/apm-sdk-plugin/kafka-plugin/src/main/java/org/apache/skywalking/apm/plugin/kafka/CallbackInterceptor.java\n\n@@ -44,8 +44,8 @@ public class CallbackInterceptor implements InstanceMethodsAroundInterceptor {\n             ContextSnapshot snapshot = getSnapshot(cache);\n             RecordMetadata metadata = (RecordMetadata) allArguments[0];\n             AbstractSpan activeSpan = ContextManager.createLocalSpan(\"Kafka/Producer/Callback\");\n+            SpanLayer.asMQ(activeSpan);\n             activeSpan.setComponent(ComponentsDefine.KAFKA_PRODUCER);\n-            activeSpan.setLayer(SpanLayer.MQ);\n             if (metadata != null) {\n                 // Null if an error occurred during processing of this record\n                 Tags.MQ_TOPIC.set(activeSpan, metadata.topic());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY0OTc3MA==", "url": "https://github.com/apache/skywalking/pull/5254#discussion_r467649770", "bodyText": "Use @setter/@getter to follow the recommended code style.", "author": "wu-sheng", "createdAt": "2020-08-10T00:40:53Z", "path": "apm-sniffer/apm-sdk-plugin/kafka-commons/src/main/java/org/apache/skywalking/apm/plugin/kafka/define/SpringKafkaContext.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.kafka.define;\n+\n+public class SpringKafkaContext {\n+\n+    public SpringKafkaContext() {\n+        needStop = false;\n+    }\n+\n+    private boolean needStop;", "originalCommit": "03281781434581cda77a02c657374d31fc18b383", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcyOTc0MA==", "url": "https://github.com/apache/skywalking/pull/5254#discussion_r467729740", "bodyText": "fixed", "author": "zhaoyuguang", "createdAt": "2020-08-10T07:30:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY0OTc3MA=="}], "type": "inlineReview", "revised_code": {"commit": "6e1eedd0c7d2676a6b488c9fcc79264689bc4c9f", "chunk": "diff --git a/apm-sniffer/apm-sdk-plugin/kafka-commons/src/main/java/org/apache/skywalking/apm/plugin/kafka/define/SpringKafkaContext.java b/apm-sniffer/apm-sdk-plugin/kafka-commons/src/main/java/org/apache/skywalking/apm/plugin/kafka/define/SpringKafkaContext.java\nindex f03290fe6f..e004423c78 100644\n--- a/apm-sniffer/apm-sdk-plugin/kafka-commons/src/main/java/org/apache/skywalking/apm/plugin/kafka/define/SpringKafkaContext.java\n+++ b/apm-sniffer/apm-sdk-plugin/kafka-commons/src/main/java/org/apache/skywalking/apm/plugin/kafka/define/SpringKafkaContext.java\n\n@@ -27,12 +27,11 @@ public class SpringKafkaContext {\n \n     private boolean needStop;\n \n-    public boolean getNeedStop() {\n+    public boolean isNeedStop() {\n         return needStop;\n     }\n \n-    public void setNeedStop(Boolean needStop) {\n+    public void setNeedStop(boolean needStop) {\n         this.needStop = needStop;\n     }\n-\n }\n"}}, {"oid": "6e1eedd0c7d2676a6b488c9fcc79264689bc4c9f", "url": "https://github.com/apache/skywalking/commit/6e1eedd0c7d2676a6b488c9fcc79264689bc4c9f", "message": "fixed", "committedDate": "2020-08-10T07:27:25Z", "type": "commit"}, {"oid": "bc47515ae20a6410fe054da9f4f1d9459dd1c28e", "url": "https://github.com/apache/skywalking/commit/bc47515ae20a6410fe054da9f4f1d9459dd1c28e", "message": "Merge branch 'master' into zhaoyuguang_0009", "committedDate": "2020-08-10T07:30:27Z", "type": "commit"}, {"oid": "d3d2b8ca35be455cffe0179f7ae3e844d20dd98a", "url": "https://github.com/apache/skywalking/commit/d3d2b8ca35be455cffe0179f7ae3e844d20dd98a", "message": "fixed", "committedDate": "2020-08-10T08:11:23Z", "type": "commit"}, {"oid": "c04acfc6550016e3baff143e14ad787f7989e2d0", "url": "https://github.com/apache/skywalking/commit/c04acfc6550016e3baff143e14ad787f7989e2d0", "message": "Merge branch 'zhaoyuguang_0009' of https://github.com/zhaoyuguang/incubator-skywalking into zhaoyuguang_0009", "committedDate": "2020-08-10T08:11:35Z", "type": "commit"}, {"oid": "f79622d899847bd168ef343abd4ea6c9d4acfb1f", "url": "https://github.com/apache/skywalking/commit/f79622d899847bd168ef343abd4ea6c9d4acfb1f", "message": "Update docs/en/FAQ/kafka-plugin.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-08-10T08:19:02Z", "type": "commit"}, {"oid": "ca1a026a25e9ddc333881bec87425512d905c415", "url": "https://github.com/apache/skywalking/commit/ca1a026a25e9ddc333881bec87425512d905c415", "message": "fix", "committedDate": "2020-08-10T08:49:57Z", "type": "commit"}, {"oid": "9cc9436854e9f05d6ba3123a6f839f99ce65becb", "url": "https://github.com/apache/skywalking/commit/9cc9436854e9f05d6ba3123a6f839f99ce65becb", "message": "Merge branch 'zhaoyuguang_0009' of https://github.com/zhaoyuguang/incubator-skywalking into zhaoyuguang_0009", "committedDate": "2020-08-10T08:50:17Z", "type": "commit"}]}