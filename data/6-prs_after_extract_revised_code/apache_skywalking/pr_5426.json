{"pr_number": 5426, "pr_title": "exception-ignore-plugin", "pr_createdAt": "2020-09-01T16:04:33Z", "pr_url": "https://github.com/apache/skywalking/pull/5426", "timeline": [{"oid": "b6b7bbf5cbf8a8167d46168eb0c887528074ebf0", "url": "https://github.com/apache/skywalking/commit/b6b7bbf5cbf8a8167d46168eb0c887528074ebf0", "message": "v4: annotation with  Activation", "committedDate": "2020-09-03T05:53:09Z", "type": "commit"}, {"oid": "b6b7bbf5cbf8a8167d46168eb0c887528074ebf0", "url": "https://github.com/apache/skywalking/commit/b6b7bbf5cbf8a8167d46168eb0c887528074ebf0", "message": "v4: annotation with  Activation", "committedDate": "2020-09-03T05:53:09Z", "type": "forcePushed"}, {"oid": "614887acfc0c778d497b6500d54c87938adbf7e0", "url": "https://github.com/apache/skywalking/commit/614887acfc0c778d497b6500d54c87938adbf7e0", "message": "inject value for annotation", "committedDate": "2020-09-03T07:51:58Z", "type": "commit"}, {"oid": "6e9d49d667b963c4731277841ec9ab002b90deac", "url": "https://github.com/apache/skywalking/commit/6e9d49d667b963c4731277841ec9ab002b90deac", "message": "fix unit test", "committedDate": "2020-09-03T09:02:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzMTk0Mw==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482831943", "bodyText": "Why return directly?", "author": "wu-sheng", "createdAt": "2020-09-03T09:16:50Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class HierarchyMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        Class<? extends Throwable> clazz = e.getClass();\n+        if (ignoredExceptions.contains(clazz)) {\n+            return false;\n+        }\n+        ClassLoader classLoader = clazz.getClassLoader();\n+        StatusCheckService statusTriggerService = ServiceManager.INSTANCE.findService(StatusCheckService.class);\n+        String[] ignoredExceptionNames = statusTriggerService.getIgnoredExceptionNames();\n+        for (final String ignoredExceptionName : ignoredExceptionNames) {\n+            try {\n+                Class<?> parentClazz = Class.forName(ignoredExceptionName, true, classLoader);\n+                if (parentClazz.isAssignableFrom(clazz)) {\n+                    ignoredExceptions.add(clazz);\n+                    return false;\n+                }\n+            } catch (ClassNotFoundException ignore) {\n+                return true;", "originalCommit": "6e9d49d667b963c4731277841ec9ab002b90deac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "244df648cce7449378b74c853215ddd92d1f53ac", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java\nindex 2d78c47fc7..8e02c948ab 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java\n\n@@ -25,6 +25,7 @@ import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n public class HierarchyMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n \n     private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();\n+    private final Set<Class<? extends Throwable>> exceptions = new CopyOnWriteArraySet<>();\n \n     @Override\n     public boolean isError(final Throwable e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzMjQzNw==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482832437", "bodyText": "You don't cache the checked class, so basically, most exceptions have to be checked every time, which is a performance issue.", "author": "wu-sheng", "createdAt": "2020-09-03T09:17:42Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+public class HierarchyMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();", "originalCommit": "6e9d49d667b963c4731277841ec9ab002b90deac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "244df648cce7449378b74c853215ddd92d1f53ac", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java\nindex 2d78c47fc7..8e02c948ab 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java\n\n@@ -25,6 +25,7 @@ import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n public class HierarchyMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n \n     private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();\n+    private final Set<Class<? extends Throwable>> exceptions = new CopyOnWriteArraySet<>();\n \n     @Override\n     public boolean isError(final Throwable e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzNDYyNw==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r482834627", "bodyText": "This could do instanceof EnhancedInstance, should not use reflect.", "author": "wu-sheng", "createdAt": "2020-09-03T09:21:01Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        Class<? extends Throwable> clazz = e.getClass();\n+        if (ignoredExceptions.contains(clazz)) {\n+            return false;\n+        }\n+        try {\n+            String value = (String) clazz.getMethod(\"getSkyWalkingDynamicField\").invoke(e);", "originalCommit": "6e9d49d667b963c4731277841ec9ab002b90deac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "244df648cce7449378b74c853215ddd92d1f53ac", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java\nindex 78ad18605e..031031bf20 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java\n\n@@ -20,10 +20,13 @@ package org.apache.skywalking.apm.agent.core.context.status;\n \n import java.util.Set;\n import java.util.concurrent.CopyOnWriteArraySet;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n \n public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n \n     private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();\n+    private final Set<Class<? extends Throwable>> exceptions = new CopyOnWriteArraySet<>();\n+    private static final String TAG_NAME = AnnotationMatchExceptionCheckStrategy.class.getSimpleName();\n \n     @Override\n     public boolean isError(final Throwable e) {\n"}}, {"oid": "244df648cce7449378b74c853215ddd92d1f53ac", "url": "https://github.com/apache/skywalking/commit/244df648cce7449378b74c853215ddd92d1f53ac", "message": "add cache", "committedDate": "2020-09-03T09:51:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMDE2MA==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483020160", "bodyText": "Don't provide no limitation. That could cause OOM", "author": "wu-sheng", "createdAt": "2020-09-03T14:27:00Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -268,6 +267,19 @@\n         public static String PATTERN = \"%level %timestamp %thread %class : %msg %throwable\";\n     }\n \n+    public static class StatusCheck {\n+        /**\n+         * Ignored exception list, also affect their subclasses.\n+         */\n+        public static String IGNORED_EXCEPTIONS = \"\";\n+\n+        /**\n+         * Agent would do hierarchy check for the exception unless the max_recursive_depth equals to 0.And -1 means no limit.", "originalCommit": "244df648cce7449378b74c853215ddd92d1f53ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMDUzNQ==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483020535", "bodyText": "All negative value should be considered as 0.", "author": "wu-sheng", "createdAt": "2020-09-03T14:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMDE2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3NTMxMQ==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483075311", "bodyText": "ok", "author": "EvanLjp", "createdAt": "2020-09-03T15:41:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMDE2MA=="}], "type": "inlineReview", "revised_code": {"commit": "376d73267bb1dad0d2d0f7a0ec33c87162254a2d", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java\nindex d5dc06616d..fcdbe92eda 100755\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java\n\n@@ -274,8 +274,11 @@ public class Config {\n         public static String IGNORED_EXCEPTIONS = \"\";\n \n         /**\n-         * Agent would do hierarchy check for the exception unless the max_recursive_depth equals to 0.And -1 means no limit.\n-         * Principle of exception check: <br/> If a exception is listed in ignored_exceptions or tagged with @IgnoredException, the exception would be thought as ignore exception.Also affect its subclasses.\n+         * Thx max depth for recursive check exception status. If the number is less than 0, it means no limit. Default\n+         * 0 means all exceptions will be thought as error status. If a exception is listed in\n+         * org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS or tagged with\n+         * org.apache.skywalking.apm.toolkit.trace.IgnoredException, the exception will not be thought as error status,\n+         * also affects its subclasses.\n          */\n         public static Integer MAX_RECURSIVE_DEPTH = 0;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMDk4NQ==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483020985", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Set<Class<? extends Throwable>> exceptions = new CopyOnWriteArraySet<>();\n          \n          \n            \n                private final Set<Class<? extends Throwable>> errorStatusExceptions = new CopyOnWriteArraySet<>();", "author": "wu-sheng", "createdAt": "2020-09-03T14:28:05Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();\n+    private final Set<Class<? extends Throwable>> exceptions = new CopyOnWriteArraySet<>();", "originalCommit": "244df648cce7449378b74c853215ddd92d1f53ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "376d73267bb1dad0d2d0f7a0ec33c87162254a2d", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java\nindex 031031bf20..d7fbf8508a 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java\n\n@@ -22,6 +22,10 @@ import java.util.Set;\n import java.util.concurrent.CopyOnWriteArraySet;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n \n+/**\n+ * The exception tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException will not be thought as error, also\n+ * affects its subclasses.\n+ */\n public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n \n     private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMjE1Ng==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483022156", "bodyText": "@kezhenxu94 @EvanLjp Any of you know the performance difference between CopyOnWriteArraySet and ConcurrentHashMap? This check is highly performance sensitive.", "author": "wu-sheng", "createdAt": "2020-09-03T14:29:39Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();", "originalCommit": "244df648cce7449378b74c853215ddd92d1f53ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3ODkzMg==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483078932", "bodyText": "Read some doc , and replace it  with the  set view of concurrentHashMap to store exception class.", "author": "EvanLjp", "createdAt": "2020-09-03T15:46:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMjE1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "376d73267bb1dad0d2d0f7a0ec33c87162254a2d", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java\nindex 031031bf20..d7fbf8508a 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java\n\n@@ -22,6 +22,10 @@ import java.util.Set;\n import java.util.concurrent.CopyOnWriteArraySet;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n \n+/**\n+ * The exception tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException will not be thought as error, also\n+ * affects its subclasses.\n+ */\n public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n \n     private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyNDA0Nw==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483024047", "bodyText": "Use TAG_NAME.equals... to avoid NPE.", "author": "wu-sheng", "createdAt": "2020-09-03T14:31:57Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+\n+public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n+\n+    private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();\n+    private final Set<Class<? extends Throwable>> exceptions = new CopyOnWriteArraySet<>();\n+    private static final String TAG_NAME = AnnotationMatchExceptionCheckStrategy.class.getSimpleName();\n+\n+    @Override\n+    public boolean isError(final Throwable e) {\n+        Class<? extends Throwable> clazz = e.getClass();\n+        if (ignoredExceptions.contains(clazz)) {\n+            return false;\n+        }\n+        if (exceptions.contains(clazz)) {\n+            return true;\n+        }\n+        if (e instanceof EnhancedInstance && ((EnhancedInstance) e).getSkyWalkingDynamicField().equals(TAG_NAME)) {", "originalCommit": "244df648cce7449378b74c853215ddd92d1f53ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "376d73267bb1dad0d2d0f7a0ec33c87162254a2d", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java\nindex 031031bf20..d7fbf8508a 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java\n\n@@ -22,6 +22,10 @@ import java.util.Set;\n import java.util.concurrent.CopyOnWriteArraySet;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n \n+/**\n+ * The exception tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException will not be thought as error, also\n+ * affects its subclasses.\n+ */\n public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n \n     private final Set<Class<? extends Throwable>> ignoredExceptions = new CopyOnWriteArraySet<>();\n"}}, {"oid": "3873e713fa234b06a463b67440c4e66aee8ceb6d", "url": "https://github.com/apache/skywalking/commit/3873e713fa234b06a463b67440c4e66aee8ceb6d", "message": "refactor plugins", "committedDate": "2020-09-03T14:36:44Z", "type": "commit"}, {"oid": "376d73267bb1dad0d2d0f7a0ec33c87162254a2d", "url": "https://github.com/apache/skywalking/commit/376d73267bb1dad0d2d0f7a0ec33c87162254a2d", "message": "add doc", "committedDate": "2020-09-03T15:25:01Z", "type": "commit"}, {"oid": "b5f109a3977b35574536fa3f549aea9b3bbc61af", "url": "https://github.com/apache/skywalking/commit/b5f109a3977b35574536fa3f549aea9b3bbc61af", "message": "replace with concurrentHashMap set view to store exception class", "committedDate": "2020-09-03T15:38:55Z", "type": "commit"}, {"oid": "17609aef0c56b0d7bfa1616f78f1900a70c85130", "url": "https://github.com/apache/skywalking/commit/17609aef0c56b0d7bfa1616f78f1900a70c85130", "message": "remove no limit", "committedDate": "2020-09-03T15:44:38Z", "type": "commit"}, {"oid": "965f8f7cbfe0aeb916cdaf8f943122ee3381ea46", "url": "https://github.com/apache/skywalking/commit/965f8f7cbfe0aeb916cdaf8f943122ee3381ea46", "message": "add doc", "committedDate": "2020-09-03T17:40:39Z", "type": "commit"}, {"oid": "e76a85fcf36c28817f8f8d8cf823d2dde6d50084", "url": "https://github.com/apache/skywalking/commit/e76a85fcf36c28817f8f8d8cf823d2dde6d50084", "message": "Merge branch 'master' into exception-ignore-plugin", "committedDate": "2020-09-04T00:52:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMyOTcwOA==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483329708", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Ignored exception list, also affect their subclasses.\n          \n          \n            \n                     * Listed exceptions would not be treated as an error. Because in some codes, the exception is being used as a way of controlling business flow.", "author": "wu-sheng", "createdAt": "2020-09-04T01:02:23Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -268,6 +267,21 @@\n         public static String PATTERN = \"%level %timestamp %thread %class : %msg %throwable\";\n     }\n \n+    public static class StatusCheck {\n+        /**\n+         * Ignored exception list, also affect their subclasses.", "originalCommit": "965f8f7cbfe0aeb916cdaf8f943122ee3381ea46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e150044fa51f3640bf62bf446633bafd8ef8681", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java\nindex e28390e244..c1b1019547 100755\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java\n\n@@ -269,17 +269,17 @@ public class Config {\n \n     public static class StatusCheck {\n         /**\n-         * Ignored exception list, also affect their subclasses.\n+         * Listed exceptions would not be treated as an error. Because in some codes, the exception is being used as a\n+         * way of controlling business flow.\n          */\n         public static String IGNORED_EXCEPTIONS = \"\";\n \n         /**\n-         * The max depth for recursive check exception status. Default 0 means all exceptions will be thought of as\n-         * error status. If an exception is listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS\n-         * or tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException, the exception will not be thought of\n-         * as error status, also affects its subclasses.\n+         * The max recursive depth when checking the exception traced by the agent. Typically, we don't recommend\n+         * setting this more than 10, which could cause a performance issue. Negative value and 0 would be ignored,\n+         * which means all exceptions would make the span tagged in error status.\n          */\n-        public static Integer MAX_RECURSIVE_DEPTH = 0;\n+        public static Integer MAX_RECURSIVE_DEPTH = 1;\n     }\n \n     public static class Plugin {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzMDEyNQ==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483330125", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * The max depth for recursive check exception status. Default 0 means all exceptions will be thought of as\n          \n          \n            \n                     * error status. If an exception is listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS\n          \n          \n            \n                     * or tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException, the exception will not be thought of\n          \n          \n            \n                     * as error status, also affects its subclasses.\n          \n          \n            \n                     * The max recursive depth when checking the exception traced by the agent. Typically, we don't recommend setting this more than 10, which could cause a performance issue. Negative value and 0 would be ignored, which means all exceptions would make the span tagged in error status.", "author": "wu-sheng", "createdAt": "2020-09-04T01:04:13Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -268,6 +267,21 @@\n         public static String PATTERN = \"%level %timestamp %thread %class : %msg %throwable\";\n     }\n \n+    public static class StatusCheck {\n+        /**\n+         * Ignored exception list, also affect their subclasses.\n+         */\n+        public static String IGNORED_EXCEPTIONS = \"\";\n+\n+        /**\n+         * The max depth for recursive check exception status. Default 0 means all exceptions will be thought of as\n+         * error status. If an exception is listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS\n+         * or tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException, the exception will not be thought of\n+         * as error status, also affects its subclasses.", "originalCommit": "965f8f7cbfe0aeb916cdaf8f943122ee3381ea46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e150044fa51f3640bf62bf446633bafd8ef8681", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java\nindex e28390e244..c1b1019547 100755\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java\n\n@@ -269,17 +269,17 @@ public class Config {\n \n     public static class StatusCheck {\n         /**\n-         * Ignored exception list, also affect their subclasses.\n+         * Listed exceptions would not be treated as an error. Because in some codes, the exception is being used as a\n+         * way of controlling business flow.\n          */\n         public static String IGNORED_EXCEPTIONS = \"\";\n \n         /**\n-         * The max depth for recursive check exception status. Default 0 means all exceptions will be thought of as\n-         * error status. If an exception is listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS\n-         * or tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException, the exception will not be thought of\n-         * as error status, also affects its subclasses.\n+         * The max recursive depth when checking the exception traced by the agent. Typically, we don't recommend\n+         * setting this more than 10, which could cause a performance issue. Negative value and 0 would be ignored,\n+         * which means all exceptions would make the span tagged in error status.\n          */\n-        public static Integer MAX_RECURSIVE_DEPTH = 0;\n+        public static Integer MAX_RECURSIVE_DEPTH = 1;\n     }\n \n     public static class Plugin {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzMDIwNg==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483330206", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public static Integer MAX_RECURSIVE_DEPTH = 0;\n          \n          \n            \n                    public static Integer MAX_RECURSIVE_DEPTH = 1;", "author": "wu-sheng", "createdAt": "2020-09-04T01:04:32Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -268,6 +267,21 @@\n         public static String PATTERN = \"%level %timestamp %thread %class : %msg %throwable\";\n     }\n \n+    public static class StatusCheck {\n+        /**\n+         * Ignored exception list, also affect their subclasses.\n+         */\n+        public static String IGNORED_EXCEPTIONS = \"\";\n+\n+        /**\n+         * The max depth for recursive check exception status. Default 0 means all exceptions will be thought of as\n+         * error status. If an exception is listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS\n+         * or tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException, the exception will not be thought of\n+         * as error status, also affects its subclasses.\n+         */\n+        public static Integer MAX_RECURSIVE_DEPTH = 0;", "originalCommit": "965f8f7cbfe0aeb916cdaf8f943122ee3381ea46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e150044fa51f3640bf62bf446633bafd8ef8681", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java\nindex e28390e244..c1b1019547 100755\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java\n\n@@ -269,17 +269,17 @@ public class Config {\n \n     public static class StatusCheck {\n         /**\n-         * Ignored exception list, also affect their subclasses.\n+         * Listed exceptions would not be treated as an error. Because in some codes, the exception is being used as a\n+         * way of controlling business flow.\n          */\n         public static String IGNORED_EXCEPTIONS = \"\";\n \n         /**\n-         * The max depth for recursive check exception status. Default 0 means all exceptions will be thought of as\n-         * error status. If an exception is listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS\n-         * or tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException, the exception will not be thought of\n-         * as error status, also affects its subclasses.\n+         * The max recursive depth when checking the exception traced by the agent. Typically, we don't recommend\n+         * setting this more than 10, which could cause a performance issue. Negative value and 0 would be ignored,\n+         * which means all exceptions would make the span tagged in error status.\n          */\n-        public static Integer MAX_RECURSIVE_DEPTH = 0;\n+        public static Integer MAX_RECURSIVE_DEPTH = 1;\n     }\n \n     public static class Plugin {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzMjMzNQ==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483332335", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The exception tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException will not be thought as an error,\n          \n          \n            \n             * The exception annotated with org.apache.skywalking.apm.toolkit.trace.IgnoredException would not set the span in the error status.", "author": "wu-sheng", "createdAt": "2020-09-04T01:13:22Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+\n+/**\n+ * The exception tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException will not be thought as an error,", "originalCommit": "965f8f7cbfe0aeb916cdaf8f943122ee3381ea46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e150044fa51f3640bf62bf446633bafd8ef8681", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java\nindex 284314ed8f..dc5d512902 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/AnnotationMatchExceptionCheckStrategy.java\n\n@@ -23,8 +23,9 @@ import java.util.concurrent.ConcurrentHashMap;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n \n /**\n- * The exception tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException will not be thought as an error,\n- * also affects its subclasses.\n+ * AnnotationMatchExceptionCheckStrategy does an annotation matching check for a traced exception. If it has been\n+ * annotated with org.apache.skywalking.apm.toolkit.trace.IgnoredException, the error status of the span wouldn't be\n+ * changed. Because of the annotation supports integration, the subclasses would be also annotated with it.\n  */\n public class AnnotationMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzMzExNw==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483333117", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The exception listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS will not be\n          \n          \n            \n             * thought as an error, also affects its subclasses.\n          \n          \n            \n             * HierarchyMatchExceptionCheckStrategy does a hierarchy check for a traced exception. If it or its parent has been listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS, the error status of the span wouldn't be changed.", "author": "wu-sheng", "createdAt": "2020-09-04T01:16:31Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n+\n+/**\n+ * The exception listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS will not be\n+ * thought as an error, also affects its subclasses.", "originalCommit": "965f8f7cbfe0aeb916cdaf8f943122ee3381ea46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e150044fa51f3640bf62bf446633bafd8ef8681", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java\nindex c28292311a..d9df145d9d 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/HierarchyMatchExceptionCheckStrategy.java\n\n@@ -23,8 +23,9 @@ import java.util.concurrent.ConcurrentHashMap;\n import org.apache.skywalking.apm.agent.core.boot.ServiceManager;\n \n /**\n- * The exception listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS will not be\n- * thought as an error, also affects its subclasses.\n+ * HierarchyMatchExceptionCheckStrategy does a hierarchy check for a traced exception. If it or its parent has been\n+ * listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS, the error status of the\n+ * span wouldn't be changed.\n  */\n public class HierarchyMatchExceptionCheckStrategy implements ExceptionCheckStrategy {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzMzMxMQ==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483333311", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * All exceptions will be thought of as error status.\n          \n          \n            \n             * All exceptions would make the span tagged as the error status.", "author": "wu-sheng", "createdAt": "2020-09-04T01:17:17Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/OffExceptionCheckStrategy.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+/**\n+ * All exceptions will be thought of as error status.", "originalCommit": "965f8f7cbfe0aeb916cdaf8f943122ee3381ea46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e150044fa51f3640bf62bf446633bafd8ef8681", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/OffExceptionCheckStrategy.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/OffExceptionCheckStrategy.java\nindex 8f86b1f0e8..820ec327c1 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/OffExceptionCheckStrategy.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/OffExceptionCheckStrategy.java\n\n@@ -19,7 +19,7 @@\n package org.apache.skywalking.apm.agent.core.context.status;\n \n /**\n- * All exceptions will be thought of as error status.\n+ *  All exceptions would make the span tagged as the error status.\n  */\n public class OffExceptionCheckStrategy implements ExceptionCheckStrategy {\n     @Override\n"}}, {"oid": "4e150044fa51f3640bf62bf446633bafd8ef8681", "url": "https://github.com/apache/skywalking/commit/4e150044fa51f3640bf62bf446633bafd8ef8681", "message": "update doc", "committedDate": "2020-09-04T09:30:46Z", "type": "commit"}, {"oid": "28ef37bdcf45509ff7da9ce11cfaa5068c982822", "url": "https://github.com/apache/skywalking/commit/28ef37bdcf45509ff7da9ce11cfaa5068c982822", "message": "Merge branch 'exception-ignore-plugin' of https://github.com/EvanLjp/skywalking into exception-ignore-plugin", "committedDate": "2020-09-04T09:31:14Z", "type": "commit"}, {"oid": "f13cf625c380eb74538ca6608aa517bfe0b1fb1e", "url": "https://github.com/apache/skywalking/commit/f13cf625c380eb74538ca6608aa517bfe0b1fb1e", "message": "Merge remote-tracking branch 'upstream/master' into exception-ignore-plugin", "committedDate": "2020-09-04T09:31:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNjUzNw==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483506537", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * When opening the exception status checker in the agent, a traced exception wouldn't be marked as error status which\n          \n          \n            \n             * tagged with this annotation in a span. Besides the annotation supports integration, the subclasses would be also\n          \n          \n            \n             * annotated with it.\n          \n          \n            \n             * After the exception status checker activated in the agent, the span wouldn't be marked as error status if the exception\n          \n          \n            \n             * has this annotation. \n          \n      \n    \n    \n  \n\n\nBesides the annotation supports integration, the subclasses would be also annotated with it.\n\nI think subclass status is determined by the MAX_RECURSIVE_DEPTH, isn't it?", "author": "wu-sheng", "createdAt": "2020-09-04T09:37:18Z", "path": "apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/IgnoredException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.trace;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * When opening the exception status checker in the agent, a traced exception wouldn't be marked as error status which\n+ * tagged with this annotation in a span. Besides the annotation supports integration, the subclasses would be also\n+ * annotated with it.", "originalCommit": "f13cf625c380eb74538ca6608aa517bfe0b1fb1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxMDUxMQ==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483510511", "bodyText": "Yes, 2 ways are all controlled by MAX_RECURSIVE_DEPTH . They are almost equivalent, and both support inheritance.\norg.apache.skywalking.apm.toolkit.trace.IgnoredException\norg.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS", "author": "EvanLjp", "createdAt": "2020-09-04T09:45:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNjUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxMjcxMQ==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483512711", "bodyText": "Then, please correct the comment.", "author": "wu-sheng", "createdAt": "2020-09-04T09:49:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNjUzNw=="}], "type": "inlineReview", "revised_code": {"commit": "34e388b0f97394a7739c1612545f774205944b48", "chunk": "diff --git a/apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/IgnoredException.java b/apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/IgnoredException.java\nindex 39ab06311d..372c250104 100644\n--- a/apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/IgnoredException.java\n+++ b/apm-application-toolkit/apm-toolkit-trace/src/main/java/org/apache/skywalking/apm/toolkit/trace/IgnoredException.java\n\n@@ -25,9 +25,8 @@ import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n \n /**\n- * When opening the exception status checker in the agent, a traced exception wouldn't be marked as error status which\n- * tagged with this annotation in a span. Besides the annotation supports integration, the subclasses would be also\n- * annotated with it.\n+ * After the exception status checker activated in the agent, the span wouldn't be marked as error status if the\n+ * exception has this annotation.\n  */\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNzI4Nw==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483507287", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The <code>StatusCheckService</code> checks the status of a exception traced in a span.\n          \n          \n            \n             * The <code>StatusCheckService</code> determines whether the span should be tagged in error status if an exception captured in the scope.", "author": "wu-sheng", "createdAt": "2020-09-04T09:38:39Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusCheckService.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Arrays;\n+import lombok.Getter;\n+import org.apache.skywalking.apm.agent.core.boot.BootService;\n+import org.apache.skywalking.apm.agent.core.boot.DefaultImplementor;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import static org.apache.skywalking.apm.agent.core.context.status.StatusChecker.HIERARCHY_MATCH;\n+import static org.apache.skywalking.apm.agent.core.context.status.StatusChecker.OFF;\n+\n+/**\n+ * The <code>StatusCheckService</code> checks the status of a exception traced in a span.", "originalCommit": "f13cf625c380eb74538ca6608aa517bfe0b1fb1e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "34e388b0f97394a7739c1612545f774205944b48", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusCheckService.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusCheckService.java\nindex 2a1f180678..ebed2a4eb8 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusCheckService.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusCheckService.java\n\n@@ -29,7 +29,8 @@ import static org.apache.skywalking.apm.agent.core.context.status.StatusChecker.\n import static org.apache.skywalking.apm.agent.core.context.status.StatusChecker.OFF;\n \n /**\n- * The <code>StatusCheckService</code> checks the status of a exception traced in a span.\n+ * The <code>StatusCheckService</code> determines whether the span should be tagged in error status if an exception\n+ * captured in the scope.\n  */\n @DefaultImplementor\n public class StatusCheckService implements BootService {\n"}}, {"oid": "34e388b0f97394a7739c1612545f774205944b48", "url": "https://github.com/apache/skywalking/commit/34e388b0f97394a7739c1612545f774205944b48", "message": "update doc", "committedDate": "2020-09-04T10:16:09Z", "type": "commit"}, {"oid": "59b923dc4e6d304c0f25aa77ddaaff86c4325264", "url": "https://github.com/apache/skywalking/commit/59b923dc4e6d304c0f25aa77ddaaff86c4325264", "message": "Merge branch 'master' into exception-ignore-plugin", "committedDate": "2020-09-04T13:34:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM4OTQzNg==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r483389436", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    while (isError && Objects.nonNull(e) && maxDepth-- != 0) {\n          \n          \n            \n                    while (isError && Objects.nonNull(e) && maxDepth-- > 0) {\n          \n      \n    \n    \n  \n\nin case the user set maxDepth = -1", "author": "kezhenxu94", "createdAt": "2020-09-04T05:08:39Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context.status;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import lombok.AllArgsConstructor;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+\n+@AllArgsConstructor\n+public enum StatusChecker {\n+\n+    /**\n+     * All exceptions will be thought of as error status.\n+     */\n+    OFF(Collections.singletonList(new OffExceptionCheckStrategy())),\n+\n+    /**\n+     * If a exception is listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS or\n+     * tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException, the exception will not be thought as an\n+     * error status, also affects its subclasses.\n+     */\n+    HIERARCHY_MATCH(Arrays.asList(\n+        new HierarchyMatchExceptionCheckStrategy(),\n+        new AnnotationMatchExceptionCheckStrategy()\n+    ));\n+\n+    private final List<ExceptionCheckStrategy> strategies;\n+\n+    public boolean checkStatus(Throwable e) {\n+        int maxDepth = Config.StatusCheck.MAX_RECURSIVE_DEPTH;\n+        boolean isError = true;\n+        while (isError && Objects.nonNull(e) && maxDepth-- != 0) {", "originalCommit": "e76a85fcf36c28817f8f8d8cf823d2dde6d50084", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e150044fa51f3640bf62bf446633bafd8ef8681", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java\nindex 44be9d988c..4d2dddfed5 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java\n\n@@ -29,14 +29,15 @@ import org.apache.skywalking.apm.agent.core.conf.Config;\n public enum StatusChecker {\n \n     /**\n-     * All exceptions will be thought of as error status.\n+     * All exceptions would make the span tagged as the error status.\n      */\n     OFF(Collections.singletonList(new OffExceptionCheckStrategy())),\n \n     /**\n-     * If a exception is listed in org.apache.skywalking.apm.agent.core.conf.Config.StatusCheck#IGNORED_EXCEPTIONS or\n-     * tagged with org.apache.skywalking.apm.toolkit.trace.IgnoredException, the exception will not be thought as an\n-     * error status, also affects its subclasses.\n+     * Hierarchy check the status of the traced exception.\n+     *\n+     * @see HierarchyMatchExceptionCheckStrategy\n+     * @see AnnotationMatchExceptionCheckStrategy\n      */\n     HIERARCHY_MATCH(Arrays.asList(\n         new HierarchyMatchExceptionCheckStrategy(),\n"}}, {"oid": "e8e820e1070cd770e9f2bf81202da19c9ddb432f", "url": "https://github.com/apache/skywalking/commit/e8e820e1070cd770e9f2bf81202da19c9ddb432f", "message": "Update apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/status/StatusChecker.java\n\nCo-authored-by: kezhenxu94 <kezhenxu94@163.com>", "committedDate": "2020-09-04T15:22:53Z", "type": "commit"}, {"oid": "22269d2b26724f2ab0a1107696e4850d8baa2222", "url": "https://github.com/apache/skywalking/commit/22269d2b26724f2ab0a1107696e4850d8baa2222", "message": "add ExceptionCheckContext to store the exceptions that have checked before.", "committedDate": "2020-09-06T10:34:56Z", "type": "commit"}, {"oid": "e0f6c87c3130c8f927ac2d0d18b6b901543b3dea", "url": "https://github.com/apache/skywalking/commit/e0f6c87c3130c8f927ac2d0d18b6b901543b3dea", "message": "add exception-checker-spring-scenario", "committedDate": "2020-09-06T10:49:08Z", "type": "commit"}, {"oid": "603b9625d23bc2d1f95039dc23c47bad6396bc41", "url": "https://github.com/apache/skywalking/commit/603b9625d23bc2d1f95039dc23c47bad6396bc41", "message": "add exception-checker-spring-scenario github workflows", "committedDate": "2020-09-06T10:52:24Z", "type": "commit"}, {"oid": "f4677e85e8d685e6f99506b04466cc15ef538595", "url": "https://github.com/apache/skywalking/commit/f4677e85e8d685e6f99506b04466cc15ef538595", "message": "Merge branch 'exception-ignore-plugin' of https://github.com/EvanLjp/skywalking into exception-ignore-plugin", "committedDate": "2020-09-06T10:53:56Z", "type": "commit"}, {"oid": "ab9e5c9c1f23882282116b2667336b3ceef8464b", "url": "https://github.com/apache/skywalking/commit/ab9e5c9c1f23882282116b2667336b3ceef8464b", "message": "Merge remote-tracking branch 'upstream/master' into exception-ignore-plugin", "committedDate": "2020-09-06T10:54:40Z", "type": "commit"}, {"oid": "3d7c50dd3d488d5708579119c662cea359b8be50", "url": "https://github.com/apache/skywalking/commit/3d7c50dd3d488d5708579119c662cea359b8be50", "message": "fix unit test", "committedDate": "2020-09-06T11:06:40Z", "type": "commit"}, {"oid": "8a17e406cc2f82c5c4f65108942a886d677d63c0", "url": "https://github.com/apache/skywalking/commit/8a17e406cc2f82c5c4f65108942a886d677d63c0", "message": "fix operation name with RequestMapping", "committedDate": "2020-09-06T12:31:02Z", "type": "commit"}, {"oid": "f516ff565f3dbc843ccf9df5f1bf646b1716cab6", "url": "https://github.com/apache/skywalking/commit/f516ff565f3dbc843ccf9df5f1bf646b1716cab6", "message": "add exception-checker-tomcat-scenario", "committedDate": "2020-09-07T04:35:38Z", "type": "commit"}, {"oid": "be25218e98cbd337604f1744a84bb1ebda37c935", "url": "https://github.com/apache/skywalking/commit/be25218e98cbd337604f1744a84bb1ebda37c935", "message": "add exception-checker-tomcat-scenario github workflow", "committedDate": "2020-09-07T04:38:48Z", "type": "commit"}, {"oid": "3691456a92bfbdc7d112c0eaa9e0f136ffcc9acb", "url": "https://github.com/apache/skywalking/commit/3691456a92bfbdc7d112c0eaa9e0f136ffcc9acb", "message": "add exception checker callback", "committedDate": "2020-09-07T05:28:02Z", "type": "commit"}, {"oid": "4a73e659c45ae166aaebc4ab282dcf74f31199f0", "url": "https://github.com/apache/skywalking/commit/4a73e659c45ae166aaebc4ab282dcf74f31199f0", "message": "Merge branch 'master' into exception-ignore-plugin", "committedDate": "2020-09-08T08:46:51Z", "type": "commit"}, {"oid": "85052c7817496c4dafe0b2a64121e843d72028f3", "url": "https://github.com/apache/skywalking/commit/85052c7817496c4dafe0b2a64121e843d72028f3", "message": "Merge remote-tracking branch 'upstream/master' into exception-ignore-plugin", "committedDate": "2020-09-08T09:26:23Z", "type": "commit"}, {"oid": "35c565c9a6f8de8516ac6c7e98010045fcc7c6cc", "url": "https://github.com/apache/skywalking/commit/35c565c9a6f8de8516ac6c7e98010045fcc7c6cc", "message": "Merge branch 'exception-ignore-plugin' of https://github.com/EvanLjp/skywalking into exception-ignore-plugin", "committedDate": "2020-09-08T09:28:09Z", "type": "commit"}, {"oid": "0ee57114228c784184228ddf5ed04f8599bcd4b6", "url": "https://github.com/apache/skywalking/commit/0ee57114228c784184228ddf5ed04f8599bcd4b6", "message": "fix grpc-plugin-test expectedData.yaml", "committedDate": "2020-09-08T14:43:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3OTEwNA==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r484979104", "bodyText": "I think you missed the toolkit document update about how to use this annotation.", "author": "wu-sheng", "createdAt": "2020-09-08T14:47:13Z", "path": "test/plugin/scenarios/exception-checker-spring-scenario/src/main/java/org/apache/skywalking/apm/toolkit/trace/IgnoredException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.trace;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * After the exception status checker activated in the agent, the span wouldn't be marked as error status if the\n+ * exception has this annotation.\n+ */\n+@Target(ElementType.TYPE)\n+@Retention(RetentionPolicy.RUNTIME)\n+@Inherited\n+public @interface IgnoredException {", "originalCommit": "0ee57114228c784184228ddf5ed04f8599bcd4b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk5MzE0Mw==", "url": "https://github.com/apache/skywalking/pull/5426#discussion_r484993143", "bodyText": "thx for your notice will add it later", "author": "EvanLjp", "createdAt": "2020-09-08T15:04:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3OTEwNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "63001c130e01f7cdef752d62e47ea2030056fd9a", "url": "https://github.com/apache/skywalking/commit/63001c130e01f7cdef752d62e47ea2030056fd9a", "message": "Merge branch 'master' into exception-ignore-plugin", "committedDate": "2020-09-08T23:41:05Z", "type": "commit"}, {"oid": "e742fe994a7444886e8fd53c75bb1e274fd6c030", "url": "https://github.com/apache/skywalking/commit/e742fe994a7444886e8fd53c75bb1e274fd6c030", "message": "add doc", "committedDate": "2020-09-09T01:58:43Z", "type": "commit"}, {"oid": "6433644d6ab1b6adfe3ebb6d8060e537b103d7f5", "url": "https://github.com/apache/skywalking/commit/6433644d6ab1b6adfe3ebb6d8060e537b103d7f5", "message": "Merge branch 'exception-ignore-plugin' of https://github.com/EvanLjp/skywalking into exception-ignore-plugin", "committedDate": "2020-09-09T01:59:13Z", "type": "commit"}, {"oid": "3d7c9fbe6df3cd5153d400a26c80cf8dcca03655", "url": "https://github.com/apache/skywalking/commit/3d7c9fbe6df3cd5153d400a26c80cf8dcca03655", "message": "Update README.md", "committedDate": "2020-09-09T05:29:55Z", "type": "commit"}, {"oid": "f238085b5b96afc25cb5dadf6fd1496269b784c0", "url": "https://github.com/apache/skywalking/commit/f238085b5b96afc25cb5dadf6fd1496269b784c0", "message": "Update How-to-tolerate-exceptions.md", "committedDate": "2020-09-09T05:37:48Z", "type": "commit"}, {"oid": "8f2d1c6899f397863f04ed4f7a69993fa6f2e76b", "url": "https://github.com/apache/skywalking/commit/8f2d1c6899f397863f04ed4f7a69993fa6f2e76b", "message": "Merge branch 'master' into exception-ignore-plugin", "committedDate": "2020-09-09T05:38:33Z", "type": "commit"}]}