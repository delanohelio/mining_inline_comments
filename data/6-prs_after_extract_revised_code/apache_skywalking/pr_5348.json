{"pr_number": 5348, "pr_title": "support http header tag", "pr_createdAt": "2020-08-18T09:11:35Z", "pr_url": "https://github.com/apache/skywalking/pull/5348", "timeline": [{"oid": "a60af67296c65f3e6cdc088c0bc611e882d77f67", "url": "https://github.com/apache/skywalking/commit/a60af67296c65f3e6cdc088c0bc611e882d77f67", "message": "support http header tag", "committedDate": "2020-08-18T08:13:04Z", "type": "commit"}, {"oid": "662c6e439599eeb2880ae6b30c03597b60e59480", "url": "https://github.com/apache/skywalking/commit/662c6e439599eeb2880ae6b30c03597b60e59480", "message": "fix bug guava maps not found", "committedDate": "2020-08-18T09:01:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODM2Mg==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472038362", "bodyText": "Use include, rather than exclude.", "author": "wu-sheng", "createdAt": "2020-08-18T09:18:53Z", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "diffHunk": "@@ -35,16 +38,35 @@\n              * request.\n              */\n             public static boolean COLLECT_HTTP_PARAMS = false;\n+\n+            /**\n+             * This config item controls that whether the SpringMVC plugin should collect the headers of the\n+             * request.\n+             */\n+            public static boolean COLLECT_HTTP_HEADERS = false;\n         }\n \n         @PluginConfig(root = SpringMVCPluginConfig.class)\n         public static class Http {\n             /**\n              * When either {@link Plugin.SpringMVC#COLLECT_HTTP_PARAMS} is enabled, how many characters to keep and send\n              * to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is\n-             * added for the sake of performance\n+             * add for the sake of performance\n              */\n             public static int HTTP_PARAMS_LENGTH_THRESHOLD = 1024;\n+\n+            /**\n+             * When either {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, how many characters to keep and send\n+             * to the OAP backend, use negative values to keep and send the complete headers, NB. this config item is\n+             * add for the sake of performance\n+             */\n+            public static int HTTP_HEADERS_LENGTH_THRESHOLD = 2048;\n+\n+            /**\n+             * When either {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, control what header data should not\n+             * collect, this is for security purpose, values must be lowed case\n+             */\n+            public static List<String> EXCLUDE_HTTP_HEADERS = Arrays.asList(\"cookie\");", "originalCommit": "a60af67296c65f3e6cdc088c0bc611e882d77f67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0MDg5Nw==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472040897", "bodyText": "You never know what are in the headers, and default this should be OFF.\nYou also need to update the mvc plugin tests(not just UT), read the last section of plugin dev doc, that is about testing the agent in the real env. Then after this is OFF in default, you need to enhance that case, enable header collection and make tests passed.\nCurrently, as the default ON, the Spring related plugin tests will be failure.", "author": "wu-sheng", "createdAt": "2020-08-18T09:23:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODM2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA2MDkwNQ==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472060905", "bodyText": "ok let me check", "author": "xbkaishui", "createdAt": "2020-08-18T09:57:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODM2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e91b03df3289923879e72fb8f93cbe1e76809b33", "chunk": "diff --git a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java\nindex a571a8a7c2..1667e6dad4 100644\n--- a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java\n+++ b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java\n\n@@ -63,10 +62,10 @@ public class SpringMVCPluginConfig {\n             public static int HTTP_HEADERS_LENGTH_THRESHOLD = 2048;\n \n             /**\n-             * When either {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, control what header data should not\n+             * When either {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, control what header data should be\n              * collect, this is for security purpose, values must be lowed case\n              */\n-            public static List<String> EXCLUDE_HTTP_HEADERS = Arrays.asList(\"cookie\");\n+            public static List<String> INCLUDE_HTTP_HEADERS ;\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzOTEzMA==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472039130", "bodyText": "Basically, I don't we don't need override=true. Do you have case to write headers more than once?", "author": "wu-sheng", "createdAt": "2020-08-18T09:20:11Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/tag/Tags.java", "diffHunk": "@@ -83,6 +83,8 @@ private Tags() {\n         public static final StringTag PARAMS = new StringTag(11, \"http.params\", true);\n \n         public static final StringTag BODY = new StringTag(13, \"http.body\");\n+\n+        public static final StringTag HEADERS = new StringTag(14, \"http.headers\", true);", "originalCommit": "a60af67296c65f3e6cdc088c0bc611e882d77f67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e91b03df3289923879e72fb8f93cbe1e76809b33", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/tag/Tags.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/tag/Tags.java\nindex f2a6402882..e1e34e455e 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/tag/Tags.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/tag/Tags.java\n\n@@ -84,7 +84,7 @@ public final class Tags {\n \n         public static final StringTag BODY = new StringTag(13, \"http.body\");\n \n-        public static final StringTag HEADERS = new StringTag(14, \"http.headers\", true);\n+        public static final StringTag HEADERS = new StringTag(14, \"http.headers\");\n     }\n \n     public static final StringTag LOGIC_ENDPOINT = new StringTag(12, \"x-le\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzOTQ3Ng==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472039476", "bodyText": "This should be in Before and clear in the After.", "author": "wu-sheng", "createdAt": "2020-08-18T09:20:45Z", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RestMappingMethodInterceptorTest.java", "diffHunk": "@@ -300,6 +303,37 @@ public void handleCase() throws Throwable {\n         SpanAssert.assertException(logDataEntities.get(0), RuntimeException.class);\n     }\n \n+    @Test\n+    public void testGetWithRequestHeaderCollected() throws Throwable {\n+        SpringMVCPluginConfig.Plugin.SpringMVC.COLLECT_HTTP_HEADERS = true;", "originalCommit": "a60af67296c65f3e6cdc088c0bc611e882d77f67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e91b03df3289923879e72fb8f93cbe1e76809b33", "chunk": "diff --git a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RestMappingMethodInterceptorTest.java b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RestMappingMethodInterceptorTest.java\nindex 2015b26949..d81f09891f 100644\n--- a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RestMappingMethodInterceptorTest.java\n+++ b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-4.x-plugin/src/test/java/org/apache/skywalking/apm/plugin/spring/mvc/v4/RestMappingMethodInterceptorTest.java\n\n@@ -305,8 +314,6 @@ public class RestMappingMethodInterceptorTest {\n \n     @Test\n     public void testGetWithRequestHeaderCollected() throws Throwable {\n-        SpringMVCPluginConfig.Plugin.SpringMVC.COLLECT_HTTP_HEADERS = true;\n-\n         SpringTestCaseHelper.createCaseHandler(request, response, new SpringTestCaseHelper.CaseHandler() {\n             @Override\n             public void handleCase() throws Throwable {\n"}}, {"oid": "e91b03df3289923879e72fb8f93cbe1e76809b33", "url": "https://github.com/apache/skywalking/commit/e91b03df3289923879e72fb8f93cbe1e76809b33", "message": "change as suggestions", "committedDate": "2020-08-18T09:56:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTUzNg==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472139536", "bodyText": "Why modify this", "author": "kezhenxu94", "createdAt": "2020-08-18T12:28:45Z", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "diffHunk": "@@ -35,16 +37,35 @@\n              * request.\n              */\n             public static boolean COLLECT_HTTP_PARAMS = false;\n+\n+            /**\n+             * This config item controls that whether the SpringMVC plugin should collect the headers of the\n+             * request.\n+             */\n+            public static boolean COLLECT_HTTP_HEADERS = false;\n         }\n \n         @PluginConfig(root = SpringMVCPluginConfig.class)\n         public static class Http {\n             /**\n              * When either {@link Plugin.SpringMVC#COLLECT_HTTP_PARAMS} is enabled, how many characters to keep and send\n              * to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is\n-             * added for the sake of performance\n+             * add for the sake of performance", "originalCommit": "e91b03df3289923879e72fb8f93cbe1e76809b33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NDcxNg==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472254716", "bodyText": "grammer wrong", "author": "xbkaishui", "createdAt": "2020-08-18T14:47:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTUzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3MDg1OA==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472270858", "bodyText": "What do you mean grammer wrong? is added is a correct expression.", "author": "wu-sheng", "createdAt": "2020-08-18T15:09:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTUzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3MjQxNA==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472272414", "bodyText": "I think we should use , was added , or is add,  the grammer check is wrong in IDEA", "author": "xbkaishui", "createdAt": "2020-08-18T15:11:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTUzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3NTAyNQ==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472275025", "bodyText": "soory, my fault will revert this change", "author": "xbkaishui", "createdAt": "2020-08-18T15:15:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTUzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3NTExNQ==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472275115", "bodyText": "I don't think so. The comments don't use past tense, because it describes the codes currently are for. Also, this is the object to be added, so clearly, is added is correct.\nI don't know why the IDE says so, but from my understanding in English, it is not an issue. IDE is not the standard for a speaking language.", "author": "wu-sheng", "createdAt": "2020-08-18T15:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTUzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3Njk1MA==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472276950", "bodyText": "yes you are right", "author": "xbkaishui", "createdAt": "2020-08-18T15:17:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTUzNg=="}], "type": "inlineReview", "revised_code": {"commit": "5334cb5a9ed1a30ab723b18fcd4b6f8b4a3bc7a3", "chunk": "diff --git a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java\nindex 1667e6dad4..b3f931d4b5 100644\n--- a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java\n+++ b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java\n\n@@ -37,12 +37,6 @@ public class SpringMVCPluginConfig {\n              * request.\n              */\n             public static boolean COLLECT_HTTP_PARAMS = false;\n-\n-            /**\n-             * This config item controls that whether the SpringMVC plugin should collect the headers of the\n-             * request.\n-             */\n-            public static boolean COLLECT_HTTP_HEADERS = false;\n         }\n \n         @PluginConfig(root = SpringMVCPluginConfig.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTY5OQ==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472139699", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                         * add for the sake of performance\n          \n          \n            \n                         * added for the sake of performance", "author": "kezhenxu94", "createdAt": "2020-08-18T12:29:04Z", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "diffHunk": "@@ -35,16 +37,35 @@\n              * request.\n              */\n             public static boolean COLLECT_HTTP_PARAMS = false;\n+\n+            /**\n+             * This config item controls that whether the SpringMVC plugin should collect the headers of the\n+             * request.\n+             */\n+            public static boolean COLLECT_HTTP_HEADERS = false;\n         }\n \n         @PluginConfig(root = SpringMVCPluginConfig.class)\n         public static class Http {\n             /**\n              * When either {@link Plugin.SpringMVC#COLLECT_HTTP_PARAMS} is enabled, how many characters to keep and send\n              * to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is\n-             * added for the sake of performance\n+             * add for the sake of performance\n              */\n             public static int HTTP_PARAMS_LENGTH_THRESHOLD = 1024;\n+\n+            /**\n+             * When either {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, how many characters to keep and send\n+             * to the OAP backend, use negative values to keep and send the complete headers, NB. this config item is\n+             * add for the sake of performance", "originalCommit": "e91b03df3289923879e72fb8f93cbe1e76809b33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1NDQ4NQ==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472254485", "bodyText": "fix grammer wrong", "author": "xbkaishui", "createdAt": "2020-08-18T14:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTY5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5334cb5a9ed1a30ab723b18fcd4b6f8b4a3bc7a3", "chunk": "diff --git a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java\nindex 1667e6dad4..b3f931d4b5 100644\n--- a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java\n+++ b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java\n\n@@ -37,12 +37,6 @@ public class SpringMVCPluginConfig {\n              * request.\n              */\n             public static boolean COLLECT_HTTP_PARAMS = false;\n-\n-            /**\n-             * This config item controls that whether the SpringMVC plugin should collect the headers of the\n-             * request.\n-             */\n-            public static boolean COLLECT_HTTP_HEADERS = false;\n         }\n \n         @PluginConfig(root = SpringMVCPluginConfig.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0MDY0MQ==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472140641", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        /**\n          \n          \n            \n                         * When either {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, control what header data should be\n          \n          \n            \n                         * collect, this is for security purpose, values must be lowed case\n          \n          \n            \n                         */\n          \n          \n            \n                        /**\n          \n          \n            \n                         * When {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, it controls what header data should be\n          \n          \n            \n                         * collected, this is for security purpose, values must be lower case\n          \n          \n            \n                         */", "author": "kezhenxu94", "createdAt": "2020-08-18T12:30:38Z", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java", "diffHunk": "@@ -35,16 +37,35 @@\n              * request.\n              */\n             public static boolean COLLECT_HTTP_PARAMS = false;\n+\n+            /**\n+             * This config item controls that whether the SpringMVC plugin should collect the headers of the\n+             * request.\n+             */\n+            public static boolean COLLECT_HTTP_HEADERS = false;\n         }\n \n         @PluginConfig(root = SpringMVCPluginConfig.class)\n         public static class Http {\n             /**\n              * When either {@link Plugin.SpringMVC#COLLECT_HTTP_PARAMS} is enabled, how many characters to keep and send\n              * to the OAP backend, use negative values to keep and send the complete parameters, NB. this config item is\n-             * added for the sake of performance\n+             * add for the sake of performance\n              */\n             public static int HTTP_PARAMS_LENGTH_THRESHOLD = 1024;\n+\n+            /**\n+             * When either {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, how many characters to keep and send\n+             * to the OAP backend, use negative values to keep and send the complete headers, NB. this config item is\n+             * add for the sake of performance\n+             */\n+            public static int HTTP_HEADERS_LENGTH_THRESHOLD = 2048;\n+\n+            /**\n+             * When either {@link Plugin.SpringMVC#COLLECT_HTTP_HEADERS} is enabled, control what header data should be\n+             * collect, this is for security purpose, values must be lowed case\n+             */", "originalCommit": "e91b03df3289923879e72fb8f93cbe1e76809b33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI2NjIxOQ==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472266219", "bodyText": "done", "author": "xbkaishui", "createdAt": "2020-08-18T15:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0MDY0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5334cb5a9ed1a30ab723b18fcd4b6f8b4a3bc7a3", "chunk": "diff --git a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java\nindex 1667e6dad4..b3f931d4b5 100644\n--- a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java\n+++ b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/SpringMVCPluginConfig.java\n\n@@ -37,12 +37,6 @@ public class SpringMVCPluginConfig {\n              * request.\n              */\n             public static boolean COLLECT_HTTP_PARAMS = false;\n-\n-            /**\n-             * This config item controls that whether the SpringMVC plugin should collect the headers of the\n-             * request.\n-             */\n-            public static boolean COLLECT_HTTP_HEADERS = false;\n         }\n \n         @PluginConfig(root = SpringMVCPluginConfig.class)\n"}}, {"oid": "5334cb5a9ed1a30ab723b18fcd4b6f8b4a3bc7a3", "url": "https://github.com/apache/skywalking/commit/5334cb5a9ed1a30ab723b18fcd4b6f8b4a3bc7a3", "message": "change typo as suggestions", "committedDate": "2020-08-18T15:19:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI5NDAxMA==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472294010", "bodyText": "Please use the Array list rather than Map. The map is a heavy data structure, it costs more CPU, memory, and has more chances to trigger GC", "author": "wu-sheng", "createdAt": "2020-08-18T15:41:07Z", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +221,31 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return includeHeaders != null && includeHeaders.size() > 0 ;\n+    }\n+\n+    private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n+        final Enumeration<String> headerNames =  request.getHeaderNames();\n+        if (headerNames == null) {\n+            return;\n+        }\n+        final Map<String, String[]> headersMap = new HashMap<>();", "originalCommit": "5334cb5a9ed1a30ab723b18fcd4b6f8b4a3bc7a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1NTUxNQ==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r472555515", "bodyText": "done", "author": "xbkaishui", "createdAt": "2020-08-18T23:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI5NDAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "cb287996a84689dd31ca0eaf3e40972ac4ad4a32", "chunk": "diff --git a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java\nindex 912065c21e..5ded542a62 100644\n--- a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java\n+++ b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java\n\n@@ -236,7 +236,7 @@ public abstract class AbstractMethodInterceptor implements InstanceMethodsAround\n         Collections.list(headerNames).stream().forEach(headerName -> {\n             Enumeration<String> headerValues = request.getHeaders(headerName);\n             String[] values = Collections.list(headerValues).toArray(new String []{});\n-            if (SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS.contains(headerName.toLowerCase())) {\n+            if (shouldCollectHeader() && SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS.contains(headerName.toLowerCase())) {\n                 headersMap.put(headerName, values);\n             }\n         });\n"}}, {"oid": "cb287996a84689dd31ca0eaf3e40972ac4ad4a32", "url": "https://github.com/apache/skywalking/commit/cb287996a84689dd31ca0eaf3e40972ac4ad4a32", "message": "fix bug null pointer", "committedDate": "2020-08-18T23:33:55Z", "type": "commit"}, {"oid": "83a046b3183ea13492a98b4fbb8b1ee2c2e41f43", "url": "https://github.com/apache/skywalking/commit/83a046b3183ea13492a98b4fbb8b1ee2c2e41f43", "message": "refactor change map to list", "committedDate": "2020-08-18T23:50:44Z", "type": "commit"}, {"oid": "1b07813ea1d305ee97dd07880eef92367f3d823c", "url": "https://github.com/apache/skywalking/commit/1b07813ea1d305ee97dd07880eef92367f3d823c", "message": "enhance spring plugin test and include collect http header test", "committedDate": "2020-08-19T05:14:20Z", "type": "commit"}, {"oid": "5e1449b0f532e75d7e08254b3a9759daba3012eb", "url": "https://github.com/apache/skywalking/commit/5e1449b0f532e75d7e08254b3a9759daba3012eb", "message": "fix bug yaml not validate", "committedDate": "2020-08-19T05:27:44Z", "type": "commit"}, {"oid": "7d11df4fde3b08537542bae0850e94a6a4bdf745", "url": "https://github.com/apache/skywalking/commit/7d11df4fde3b08537542bae0850e94a6a4bdf745", "message": "fix test case error", "committedDate": "2020-08-19T07:25:41Z", "type": "commit"}, {"oid": "e206afd15b3536bf13d9d7e3aa78d187fb90cdcb", "url": "https://github.com/apache/skywalking/commit/e206afd15b3536bf13d9d7e3aa78d187fb90cdcb", "message": "fix test case error", "committedDate": "2020-08-19T13:07:10Z", "type": "commit"}, {"oid": "8cd039069ba03d6559e5451f52f458f61a42683c", "url": "https://github.com/apache/skywalking/commit/8cd039069ba03d6559e5451f52f458f61a42683c", "message": "Merge branch 'master' into 20200818-support-http-headers", "committedDate": "2020-08-19T14:16:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4MDg2NQ==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473080865", "bodyText": "There is CollectionUtil#isEmpty, you should use directly.", "author": "wu-sheng", "createdAt": "2020-08-19T14:38:43Z", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +222,31 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return includeHeaders != null && includeHeaders.size() > 0 ;\n+    }", "originalCommit": "8cd039069ba03d6559e5451f52f458f61a42683c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "81e6633df042ad69b498af0f2f13722e5426275d", "chunk": "diff --git a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java\nindex 2c14209dc1..3d35bbad21 100644\n--- a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java\n+++ b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java\n\n@@ -225,7 +221,7 @@ public abstract class AbstractMethodInterceptor implements InstanceMethodsAround\n \n     private boolean shouldCollectHeader() {\n         List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n-        return includeHeaders != null && includeHeaders.size() > 0 ;\n+        return !CollectionUtil.isEmpty(includeHeaders) ;\n     }\n \n     private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4MTg4NA==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473081884", "bodyText": "SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS not empty should be at the first line of the method, to provide return fast.", "author": "wu-sheng", "createdAt": "2020-08-19T14:40:06Z", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +222,31 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return includeHeaders != null && includeHeaders.size() > 0 ;\n+    }\n+\n+    private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n+        final Enumeration<String> headerNames =  request.getHeaderNames();\n+        if (headerNames == null) {\n+            return;\n+        }\n+        final List<String> headersList = new LinkedList<>();\n+        Collections.list(headerNames).stream().forEach(headerName -> {\n+            Enumeration<String> headerValues = request.getHeaders(headerName);\n+            String headerValue = Collections.list(headerValues).toString();\n+            if (shouldCollectHeader() && SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS.contains(headerName.toLowerCase())) {", "originalCommit": "8cd039069ba03d6559e5451f52f458f61a42683c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "81e6633df042ad69b498af0f2f13722e5426275d", "chunk": "diff --git a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java\nindex 2c14209dc1..3d35bbad21 100644\n--- a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java\n+++ b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java\n\n@@ -225,7 +221,7 @@ public abstract class AbstractMethodInterceptor implements InstanceMethodsAround\n \n     private boolean shouldCollectHeader() {\n         List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n-        return includeHeaders != null && includeHeaders.size() > 0 ;\n+        return !CollectionUtil.isEmpty(includeHeaders) ;\n     }\n \n     private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4MjgwNg==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473082806", "bodyText": "The whole iteration should base on SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS rather than header, because you just config a subset of all headers. An HTTP request usually includes a lot of headers.", "author": "wu-sheng", "createdAt": "2020-08-19T14:41:21Z", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +222,31 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return includeHeaders != null && includeHeaders.size() > 0 ;\n+    }\n+\n+    private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n+        final Enumeration<String> headerNames =  request.getHeaderNames();\n+        if (headerNames == null) {\n+            return;\n+        }\n+        final List<String> headersList = new LinkedList<>();\n+        Collections.list(headerNames).stream().forEach(headerName -> {", "originalCommit": "8cd039069ba03d6559e5451f52f458f61a42683c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4NTY1NA==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473085654", "bodyText": "ok, that's better", "author": "xbkaishui", "createdAt": "2020-08-19T14:45:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4MjgwNg=="}], "type": "inlineReview", "revised_code": {"commit": "81e6633df042ad69b498af0f2f13722e5426275d", "chunk": "diff --git a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java\nindex 2c14209dc1..3d35bbad21 100644\n--- a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java\n+++ b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java\n\n@@ -225,7 +221,7 @@ public abstract class AbstractMethodInterceptor implements InstanceMethodsAround\n \n     private boolean shouldCollectHeader() {\n         List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n-        return includeHeaders != null && includeHeaders.size() > 0 ;\n+        return !CollectionUtil.isEmpty(includeHeaders) ;\n     }\n \n     private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n"}}, {"oid": "81e6633df042ad69b498af0f2f13722e5426275d", "url": "https://github.com/apache/skywalking/commit/81e6633df042ad69b498af0f2f13722e5426275d", "message": "change collect http header logic as suggestion", "committedDate": "2020-08-19T15:04:57Z", "type": "commit"}, {"oid": "2a3524173b5b49b32eea60b58b94df85e5885222", "url": "https://github.com/apache/skywalking/commit/2a3524173b5b49b32eea60b58b94df85e5885222", "message": "fix test case bug", "committedDate": "2020-08-19T15:06:05Z", "type": "commit"}, {"oid": "9daba3e7f9ebfa70a325b4fe7553eb372ac0a740", "url": "https://github.com/apache/skywalking/commit/9daba3e7f9ebfa70a325b4fe7553eb372ac0a740", "message": "Merge branch '20200818-support-http-headers' of https://hub.fastgit.org/xbkaishui/skywalking into 20200818-support-http-headers", "committedDate": "2020-08-19T15:06:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyMzEzMg==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473123132", "bodyText": "Why assign again?", "author": "wu-sheng", "createdAt": "2020-08-19T15:36:53Z", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +218,32 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;", "originalCommit": "9daba3e7f9ebfa70a325b4fe7553eb372ac0a740", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3MTQwMw==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473471403", "bodyText": "done", "author": "xbkaishui", "createdAt": "2020-08-20T00:27:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyMzEzMg=="}], "type": "inlineReview", "revised_code": {"commit": "218b90b787712c621acf3e17df898d01b0007e9d", "chunk": "diff --git a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java\nindex 3d35bbad21..d7817d67db 100644\n--- a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java\n+++ b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java\n\n@@ -219,16 +219,7 @@ public abstract class AbstractMethodInterceptor implements InstanceMethodsAround\n         }\n     }\n \n-    private boolean shouldCollectHeader() {\n-        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n-        return !CollectionUtil.isEmpty(includeHeaders) ;\n-    }\n-\n     private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n-        final Enumeration<String> headerNames =  request.getHeaderNames();\n-        if (headerNames == null) {\n-            return;\n-        }\n         final List<String> headersList = new LinkedList<>();\n         SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS.stream().filter(headerName -> request.getHeaders(headerName) != null).forEach(headerName -> {\n             Enumeration<String> headerValues = request.getHeaders(headerName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzI1MQ==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473127251", "bodyText": "I mean check SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS, because, you were trying to collect header in profiling, which has been removed.\nI think headerNames can't be null, right?", "author": "wu-sheng", "createdAt": "2020-08-19T15:42:56Z", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +218,32 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return !CollectionUtil.isEmpty(includeHeaders) ;\n+    }\n+\n+    private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n+        final Enumeration<String> headerNames =  request.getHeaderNames();\n+        if (headerNames == null) {", "originalCommit": "9daba3e7f9ebfa70a325b4fe7553eb372ac0a740", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2MjgxNA==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473462814", "bodyText": "I have removed the profiling collect header logic, because we can't collect all headers when INCLUDE_HTTP_HEADERS is null", "author": "xbkaishui", "createdAt": "2020-08-20T00:13:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzI1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2ODA3OA==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473468078", "bodyText": "Yes, I know. So I said you were trying to collect header in profiling, which has been removed..\nThis == null checker is pointless. This is the reason I posted a comment here.", "author": "wu-sheng", "createdAt": "2020-08-20T00:21:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzI1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2OTMwMg==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473469302", "bodyText": "got it. will change", "author": "xbkaishui", "createdAt": "2020-08-20T00:23:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzI1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3MTM2MA==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473471360", "bodyText": "done", "author": "xbkaishui", "createdAt": "2020-08-20T00:27:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzI1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "218b90b787712c621acf3e17df898d01b0007e9d", "chunk": "diff --git a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java\nindex 3d35bbad21..d7817d67db 100644\n--- a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java\n+++ b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java\n\n@@ -219,16 +219,7 @@ public abstract class AbstractMethodInterceptor implements InstanceMethodsAround\n         }\n     }\n \n-    private boolean shouldCollectHeader() {\n-        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n-        return !CollectionUtil.isEmpty(includeHeaders) ;\n-    }\n-\n     private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n-        final Enumeration<String> headerNames =  request.getHeaderNames();\n-        if (headerNames == null) {\n-            return;\n-        }\n         final List<String> headersList = new LinkedList<>();\n         SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS.stream().filter(headerName -> request.getHeaders(headerName) != null).forEach(headerName -> {\n             Enumeration<String> headerValues = request.getHeaders(headerName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzkzOQ==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473127939", "bodyText": "SpringMVCPluginConfig.Plugin.Http.HTTP_HEADERS_LENGTH_THRESHOLD > 0, according to the comments, if the value < 0, then collect all, I don't find the codes.", "author": "wu-sheng", "createdAt": "2020-08-19T15:43:53Z", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java", "diffHunk": "@@ -208,4 +218,32 @@ private void collectHttpParam(HttpServletRequest request, AbstractSpan span) {\n             Tags.HTTP.PARAMS.set(span, tagValue);\n         }\n     }\n+\n+    private boolean shouldCollectHeader() {\n+        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n+        return !CollectionUtil.isEmpty(includeHeaders) ;\n+    }\n+\n+    private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n+        final Enumeration<String> headerNames =  request.getHeaderNames();\n+        if (headerNames == null) {\n+            return;\n+        }\n+        final List<String> headersList = new LinkedList<>();\n+        SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS.stream().filter(headerName -> request.getHeaders(headerName) != null).forEach(headerName -> {\n+            Enumeration<String> headerValues = request.getHeaders(headerName);\n+            List<String> valueList = Collections.list(headerValues);\n+            if (!CollectionUtil.isEmpty(valueList)) {\n+                String headerValue = valueList.toString();\n+                headersList.add(headerName + \"=\" + headerValue);\n+            }\n+        });\n+\n+        if (!headersList.isEmpty()) {\n+            String tagValue = headersList.stream().collect(Collectors.joining(\"\\n\"));\n+            tagValue = SpringMVCPluginConfig.Plugin.Http.HTTP_HEADERS_LENGTH_THRESHOLD > 0 ?", "originalCommit": "9daba3e7f9ebfa70a325b4fe7553eb372ac0a740", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ2NDUwMw==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473464503", "bodyText": "sorry, can't got your point, is the logic wrong ?", "author": "xbkaishui", "createdAt": "2020-08-20T00:16:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NDIwOA==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473474208", "bodyText": "According to your comments, use negative values to keep and send the complete headers., where is the logic of that? Please consider to correct the comments or logic :) They should be matched.", "author": "wu-sheng", "createdAt": "2020-08-20T00:31:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NTUzOQ==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473475539", "bodyText": "code logic is\n   tagValue = SpringMVCPluginConfig.Plugin.Http.HTTP_HEADERS_LENGTH_THRESHOLD > 0 ?\n                    StringUtil.cut(tagValue, SpringMVCPluginConfig.Plugin.Http.HTTP_HEADERS_LENGTH_THRESHOLD) : tagValue;\n\nalso changed the comments", "author": "xbkaishui", "createdAt": "2020-08-20T00:33:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3NTc0Mg==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473475742", "bodyText": "please help to check again thanks", "author": "xbkaishui", "createdAt": "2020-08-20T00:33:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ3Njc2Nw==", "url": "https://github.com/apache/skywalking/pull/5348#discussion_r473476767", "bodyText": "My mistake, ignore this.", "author": "wu-sheng", "createdAt": "2020-08-20T00:35:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyNzkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "218b90b787712c621acf3e17df898d01b0007e9d", "chunk": "diff --git a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java\nindex 3d35bbad21..d7817d67db 100644\n--- a/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java\n+++ b/apm-sniffer/apm-sdk-plugin/spring-plugins/mvc-annotation-commons/src/main/java/org/apache/skywalking/apm/plugin/spring/mvc/commons/interceptor/AbstractMethodInterceptor.java\n\n@@ -219,16 +219,7 @@ public abstract class AbstractMethodInterceptor implements InstanceMethodsAround\n         }\n     }\n \n-    private boolean shouldCollectHeader() {\n-        List<String> includeHeaders = SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS;\n-        return !CollectionUtil.isEmpty(includeHeaders) ;\n-    }\n-\n     private void collectHttpHeaders(HttpServletRequest request, AbstractSpan span) {\n-        final Enumeration<String> headerNames =  request.getHeaderNames();\n-        if (headerNames == null) {\n-            return;\n-        }\n         final List<String> headersList = new LinkedList<>();\n         SpringMVCPluginConfig.Plugin.Http.INCLUDE_HTTP_HEADERS.stream().filter(headerName -> request.getHeaders(headerName) != null).forEach(headerName -> {\n             Enumeration<String> headerValues = request.getHeaders(headerName);\n"}}, {"oid": "218b90b787712c621acf3e17df898d01b0007e9d", "url": "https://github.com/apache/skywalking/commit/218b90b787712c621acf3e17df898d01b0007e9d", "message": "remove the check null logic and align the comments", "committedDate": "2020-08-20T00:25:37Z", "type": "commit"}]}