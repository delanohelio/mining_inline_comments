{"pr_number": 5030, "pr_title": "support Graphql Logic endpoint", "pr_createdAt": "2020-07-04T11:06:01Z", "pr_url": "https://github.com/apache/skywalking/pull/5030", "timeline": [{"oid": "ec3328a78c87010def1a0e2f1fd6595496f0b7e5", "url": "https://github.com/apache/skywalking/commit/ec3328a78c87010def1a0e2f1fd6595496f0b7e5", "message": "Merge pull request #1 from apache/master\n\nmerge", "committedDate": "2020-06-29T16:08:46Z", "type": "commit"}, {"oid": "1217cf6e95e5119ac194f90cf6de8f22e5d11972", "url": "https://github.com/apache/skywalking/commit/1217cf6e95e5119ac194f90cf6de8f22e5d11972", "message": "init graphql logic_endpoint", "committedDate": "2020-06-29T16:16:58Z", "type": "commit"}, {"oid": "d932adc77b161a069b6d16abeebc0353cd7b7ebd", "url": "https://github.com/apache/skywalking/commit/d932adc77b161a069b6d16abeebc0353cd7b7ebd", "message": "#4976", "committedDate": "2020-06-30T03:27:49Z", "type": "commit"}, {"oid": "63960e33e91cb22a65c8a33c203133b7ca3842b6", "url": "https://github.com/apache/skywalking/commit/63960e33e91cb22a65c8a33c203133b7ca3842b6", "message": "add testcase #4996", "committedDate": "2020-07-01T02:31:24Z", "type": "commit"}, {"oid": "7ab2d3adf91f6e2a103b4102d32b122d870b7aaa", "url": "https://github.com/apache/skywalking/commit/7ab2d3adf91f6e2a103b4102d32b122d870b7aaa", "message": "add graphql 12", "committedDate": "2020-07-02T15:05:10Z", "type": "commit"}, {"oid": "dc798e47bc37d7b6a3b875720874e021034a4693", "url": "https://github.com/apache/skywalking/commit/dc798e47bc37d7b6a3b875720874e021034a4693", "message": "support graphql 8.0", "committedDate": "2020-07-04T10:53:15Z", "type": "commit"}, {"oid": "fa9a2fc47374fd6dcf2de5d63a1574d5d2570e2e", "url": "https://github.com/apache/skywalking/commit/fa9a2fc47374fd6dcf2de5d63a1574d5d2570e2e", "message": "add doc", "committedDate": "2020-07-04T10:57:05Z", "type": "commit"}, {"oid": "dadffff91a48edbc7a9c10a22882a8c82e21d211", "url": "https://github.com/apache/skywalking/commit/dadffff91a48edbc7a9c10a22882a8c82e21d211", "message": "Merge branch 'master' into logic_endpoint", "committedDate": "2020-07-04T11:07:13Z", "type": "commit"}, {"oid": "60cf903b16bf0251193b59ccc9f31a7dcd82f965", "url": "https://github.com/apache/skywalking/commit/60cf903b16bf0251193b59ccc9f31a7dcd82f965", "message": "fix", "committedDate": "2020-07-04T11:10:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc2Njg3MA==", "url": "https://github.com/apache/skywalking/pull/5030#discussion_r449766870", "bodyText": "How a GraphQL span could not be the first span? Or not an entry span? A little confused.", "author": "wu-sheng", "createdAt": "2020-07-04T11:53:48Z", "path": "apm-sniffer/apm-sdk-plugin/graphql-plugin/graphql-12.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/graphql/v12/GraphqlInterceptor.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.graphql.v12;\n+\n+import graphql.execution.ExecutionPath;\n+import graphql.execution.ExecutionStrategyParameters;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class GraphqlInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        ExecutionStrategyParameters parameters = (ExecutionStrategyParameters) allArguments[1];\n+        if (parameters == null || parameters.getParent().getPath() != ExecutionPath.rootPath()) {\n+            return;\n+        }\n+        objInst.setSkyWalkingDynamicField(System.currentTimeMillis());\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        ExecutionStrategyParameters parameters = (ExecutionStrategyParameters) allArguments[1];\n+        if (parameters == null || parameters.getParent().getPath() != ExecutionPath.rootPath()) {\n+            return ret;\n+        }\n+        String name = parameters.getField().getSingleField().getName();\n+        long latency = System.currentTimeMillis() - (long) objInst.getSkyWalkingDynamicField();\n+        String info = buildLogicEndpointTagInfo(name, latency, null);\n+        AbstractSpan span = ContextManager.firstSpan();\n+        if (span == null || !span.isEntry()) {", "originalCommit": "60cf903b16bf0251193b59ccc9f31a7dcd82f965", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg0NDMyOA==", "url": "https://github.com/apache/skywalking/pull/5030#discussion_r449844328", "bodyText": "i've used a localSpan to represent a Grqphql subquery", "author": "IanCao", "createdAt": "2020-07-05T07:23:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc2Njg3MA=="}], "type": "inlineReview", "revised_code": {"commit": "f0fccf0d54217f99bd025530e3019306894244cd", "chunk": "diff --git a/apm-sniffer/apm-sdk-plugin/graphql-plugin/graphql-12.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/graphql/v12/GraphqlInterceptor.java b/apm-sniffer/apm-sdk-plugin/graphql-plugin/graphql-12.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/graphql/v12/GraphqlInterceptor.java\nindex 32fff17cc3..1533181b5c 100644\n--- a/apm-sniffer/apm-sdk-plugin/graphql-plugin/graphql-12.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/graphql/v12/GraphqlInterceptor.java\n+++ b/apm-sniffer/apm-sdk-plugin/graphql-plugin/graphql-12.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/graphql/v12/GraphqlInterceptor.java\n\n@@ -26,6 +26,7 @@ import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n \n import java.lang.reflect.Method;\n import java.util.HashMap;\n"}}, {"oid": "2b4f7a47b33575548f1f283a9c2ce79513bdcd6b", "url": "https://github.com/apache/skywalking/commit/2b4f7a47b33575548f1f283a9c2ce79513bdcd6b", "message": "add license", "committedDate": "2020-07-04T15:23:42Z", "type": "commit"}, {"oid": "e3e961928ecac5e3dc3f1d7071467e6076128df3", "url": "https://github.com/apache/skywalking/commit/e3e961928ecac5e3dc3f1d7071467e6076128df3", "message": "fix", "committedDate": "2020-07-04T17:13:57Z", "type": "commit"}, {"oid": "e58e8f64a37354bec48cd21f3a04fed54f933650", "url": "https://github.com/apache/skywalking/commit/e58e8f64a37354bec48cd21f3a04fed54f933650", "message": "remove author & comments", "committedDate": "2020-07-05T04:39:36Z", "type": "commit"}, {"oid": "f0fccf0d54217f99bd025530e3019306894244cd", "url": "https://github.com/apache/skywalking/commit/f0fccf0d54217f99bd025530e3019306894244cd", "message": "fix", "committedDate": "2020-07-05T07:09:44Z", "type": "commit"}, {"oid": "a7e4a55c0c35e5a88f496cc8ec96a5c6c7787815", "url": "https://github.com/apache/skywalking/commit/a7e4a55c0c35e5a88f496cc8ec96a5c6c7787815", "message": "fix", "committedDate": "2020-07-05T07:11:35Z", "type": "commit"}, {"oid": "0b111ce2f44d2c600ef54778d775fe510e0c8fae", "url": "https://github.com/apache/skywalking/commit/0b111ce2f44d2c600ef54778d775fe510e0c8fae", "message": "fix", "committedDate": "2020-07-05T07:13:20Z", "type": "commit"}, {"oid": "c6d723876a631b1ee07d5fa523e83bad0be5c1fc", "url": "https://github.com/apache/skywalking/commit/c6d723876a631b1ee07d5fa523e83bad0be5c1fc", "message": "fix", "committedDate": "2020-07-05T10:38:58Z", "type": "commit"}, {"oid": "4b9c8774f0d5302f0c35be12361be76f33f956d0", "url": "https://github.com/apache/skywalking/commit/4b9c8774f0d5302f0c35be12361be76f33f956d0", "message": "Merge branch 'master' into logic_endpoint", "committedDate": "2020-07-05T12:57:11Z", "type": "commit"}, {"oid": "0de7beaed58fef4eeb52327ab50152792ea86b32", "url": "https://github.com/apache/skywalking/commit/0de7beaed58fef4eeb52327ab50152792ea86b32", "message": "Merge branch 'master' into logic_endpoint", "committedDate": "2020-07-05T14:25:14Z", "type": "commit"}, {"oid": "f9945e30474ba1375a6488e4e965fb68b1024395", "url": "https://github.com/apache/skywalking/commit/f9945e30474ba1375a6488e4e965fb68b1024395", "message": "fix", "committedDate": "2020-07-05T14:48:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1NjMxNg==", "url": "https://github.com/apache/skywalking/pull/5030#discussion_r451256316", "bodyText": "The value of x-le should be JSON format, this is obviously not the case by simply calling toString on a Map", "author": "kezhenxu94", "createdAt": "2020-07-08T03:08:21Z", "path": "apm-sniffer/apm-sdk-plugin/graphql-plugin/graphql-9.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/graphql/v9/GraphqlInterceptor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.graphql.v9;\n+\n+import graphql.execution.ExecutionPath;\n+import graphql.execution.ExecutionStrategyParameters;\n+import org.apache.skywalking.apm.agent.core.context.ContextManager;\n+import org.apache.skywalking.apm.agent.core.context.tag.Tags;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.EnhancedInstance;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;\n+import org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.MethodInterceptResult;\n+import org.apache.skywalking.apm.network.trace.component.ComponentsDefine;\n+\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class GraphqlInterceptor implements InstanceMethodsAroundInterceptor {\n+\n+    @Override\n+    public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, MethodInterceptResult result) throws Throwable {\n+        ExecutionStrategyParameters parameters = (ExecutionStrategyParameters) allArguments[1];\n+        if (parameters == null || parameters.getParent().getPath() != ExecutionPath.rootPath()) {\n+            return;\n+        }\n+        AbstractSpan span = ContextManager.createLocalSpan(parameters.getField().get(0).getName());\n+        Tags.LOGIC_ENDPOINT.set(span, buildLogicEndpointSpan());\n+        span.setComponent(ComponentsDefine.GRAPHQL);\n+    }\n+\n+    @Override\n+    public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Object ret) throws Throwable {\n+        ExecutionStrategyParameters parameters = (ExecutionStrategyParameters) allArguments[1];\n+        if (parameters == null || parameters.getParent().getPath() != ExecutionPath.rootPath()) {\n+            return ret;\n+        }\n+        ContextManager.stopSpan();\n+        return ret;\n+    }\n+\n+    @Override\n+    public void handleMethodException(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes, Throwable t) {\n+        ExecutionStrategyParameters parameters = (ExecutionStrategyParameters) allArguments[1];\n+        if (parameters == null || parameters.getParent().getPath() != ExecutionPath.rootPath()) {\n+            return;\n+        }\n+        dealException(t);\n+    }\n+\n+    private void dealException(Throwable throwable) {\n+        AbstractSpan span = ContextManager.activeSpan();\n+        span.errorOccurred();\n+        span.log(throwable);\n+    }\n+\n+    private String buildLogicEndpointSpan() {\n+        Map<String, Object> logicEndpointSpan = new HashMap<>();\n+        logicEndpointSpan.put(\"logic-span\", true);\n+        return logicEndpointSpan.toString();", "originalCommit": "f9945e30474ba1375a6488e4e965fb68b1024395", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}