{"pr_number": 5666, "pr_title": "add transmission latency for MQ case", "pr_createdAt": "2020-10-14T07:36:09Z", "pr_url": "https://github.com/apache/skywalking/pull/5666", "timeline": [{"oid": "6d8fef229031f3ba707c64251d84963249b24a13", "url": "https://github.com/apache/skywalking/commit/6d8fef229031f3ba707c64251d84963249b24a13", "message": "add transmission latency", "committedDate": "2020-10-14T07:34:22Z", "type": "commit"}, {"oid": "cc5ce935285aa5037cc04930e8935835b18010e4", "url": "https://github.com/apache/skywalking/commit/cc5ce935285aa5037cc04930e8935835b18010e4", "message": "add transmission latency", "committedDate": "2020-10-15T06:21:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIxOTUxMQ==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r505219511", "bodyText": "You should not transport the timestamp if it is a 0, otherwise, 0 would provide a super huge false latency for this RPC.", "author": "wu-sheng", "createdAt": "2020-10-15T06:50:08Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -33,13 +36,20 @@\n      */\n     private boolean skipAnalysis;\n \n+    /**\n+     * The sending timestamp of the exit span.\n+     */\n+    @Getter\n+    @Setter\n+    private long sendingTimestamp = 0;\n+\n     /**\n      * Serialize this {@link ExtensionContext} to a {@link String}\n      *\n      * @return the serialization string.\n      */\n     String serialize() {\n-        return skipAnalysis ? \"1\" : \"0\";\n+        return skipAnalysis ? \"1\" : \"0\" + \"-\" + sendingTimestamp;", "originalCommit": "cc5ce935285aa5037cc04930e8935835b18010e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc024b79247e7e0a49c066ece36a8fd3c69ab7b5", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\nindex 32baa1998..9f41f7331 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n\n@@ -31,6 +33,7 @@ import org.apache.skywalking.apm.util.StringUtil;\n  */\n public class ExtensionContext {\n \n+    private static final ILog LOGGER = LogManager.getLogger(ExtensionContext.class);\n     /**\n      * Tracing Mode. If true means represents all spans generated in this context should skip analysis.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIyMTMwMw==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r505221303", "bodyText": "This is optional, you should add if (extensionParts.length > 1) {, then get (1) and parsing. Also, you need if not empty and try/catch to avoid the empty string as it is optional, and illegal character.", "author": "wu-sheng", "createdAt": "2020-10-15T06:51:39Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -54,6 +64,7 @@ void deserialize(String value) {\n         // only try to read it when it exist.\n         if (extensionParts.length > 0) {\n             this.skipAnalysis = Objects.equals(extensionParts[0], \"1\");\n+            this.sendingTimestamp = Long.parseLong(extensionParts[1]);", "originalCommit": "cc5ce935285aa5037cc04930e8935835b18010e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc024b79247e7e0a49c066ece36a8fd3c69ab7b5", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\nindex 32baa1998..9f41f7331 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n\n@@ -64,7 +71,13 @@ public class ExtensionContext {\n         // only try to read it when it exist.\n         if (extensionParts.length > 0) {\n             this.skipAnalysis = Objects.equals(extensionParts[0], \"1\");\n-            this.sendingTimestamp = Long.parseLong(extensionParts[1]);\n+            if (extensionParts.length > 1) {\n+                try {\n+                    this.sendingTimestamp = Long.parseLong(extensionParts[1]);\n+                } catch (NumberFormatException e) {\n+                    LOGGER.error(e, \"the downstream sending timestamp is illegal:[{}]\", extensionParts[1]);\n+                }\n+            }\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIyNTUzMw==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r505225533", "bodyText": "Rename this to parseRPC, as it does more than it used to be.", "author": "wu-sheng", "createdAt": "2020-10-15T06:54:56Z", "path": "oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java", "diffHunk": "@@ -234,6 +234,12 @@ public void parseExit(SpanObject span, SegmentObject segmentObject) {\n \n     private void setPublicAttrs(SourceBuilder sourceBuilder, SpanObject span) {", "originalCommit": "cc5ce935285aa5037cc04930e8935835b18010e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc024b79247e7e0a49c066ece36a8fd3c69ab7b5", "chunk": "diff --git a/oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java b/oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java\nindex 1c9ea6885..90854c744 100644\n--- a/oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java\n+++ b/oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java\n\n@@ -234,12 +234,6 @@ public class MultiScopesAnalysisListener implements EntryAnalysisListener, ExitA\n \n     private void setPublicAttrs(SourceBuilder sourceBuilder, SpanObject span) {\n         long latency = span.getEndTime() - span.getStartTime();\n-        for (final KeyStringValuePair keyStringValuePair : span.getTagsList()) {\n-            if (keyStringValuePair.getKey().equals(SpanTags.TRANSMISSION_LATENCY)) {\n-                latency += Integer.parseInt(keyStringValuePair.getValue());\n-                break;\n-            }\n-        }\n         sourceBuilder.setTimeBucket(TimeBucket.getMinuteTimeBucket(span.getStartTime()));\n         sourceBuilder.setLatency((int) latency);\n         sourceBuilder.setResponseCode(Const.NONE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIyNjg0Nw==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r505226847", "bodyText": "We have a for span in the L240-L248 already, please don't do duplicated iteration.", "author": "wu-sheng", "createdAt": "2020-10-15T06:55:58Z", "path": "oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java", "diffHunk": "@@ -234,6 +234,12 @@ public void parseExit(SpanObject span, SegmentObject segmentObject) {\n \n     private void setPublicAttrs(SourceBuilder sourceBuilder, SpanObject span) {\n         long latency = span.getEndTime() - span.getStartTime();\n+        for (final KeyStringValuePair keyStringValuePair : span.getTagsList()) {\n+            if (keyStringValuePair.getKey().equals(SpanTags.TRANSMISSION_LATENCY)) {\n+                latency += Integer.parseInt(keyStringValuePair.getValue());\n+                break;\n+            }\n+        }", "originalCommit": "cc5ce935285aa5037cc04930e8935835b18010e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIzOTIxMA==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r505239210", "bodyText": "Why rewrite the latency of this? We never said the latency of span/segment/service including the network when we talked about the server-side latency.", "author": "wu-sheng", "createdAt": "2020-10-15T07:06:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIyNjg0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "dc024b79247e7e0a49c066ece36a8fd3c69ab7b5", "chunk": "diff --git a/oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java b/oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java\nindex 1c9ea6885..90854c744 100644\n--- a/oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java\n+++ b/oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/MultiScopesAnalysisListener.java\n\n@@ -234,12 +234,6 @@ public class MultiScopesAnalysisListener implements EntryAnalysisListener, ExitA\n \n     private void setPublicAttrs(SourceBuilder sourceBuilder, SpanObject span) {\n         long latency = span.getEndTime() - span.getStartTime();\n-        for (final KeyStringValuePair keyStringValuePair : span.getTagsList()) {\n-            if (keyStringValuePair.getKey().equals(SpanTags.TRANSMISSION_LATENCY)) {\n-                latency += Integer.parseInt(keyStringValuePair.getValue());\n-                break;\n-            }\n-        }\n         sourceBuilder.setTimeBucket(TimeBucket.getMinuteTimeBucket(span.getStartTime()));\n         sourceBuilder.setLatency((int) latency);\n         sourceBuilder.setResponseCode(Const.NONE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIzMTAxOA==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r505231018", "bodyText": "Should not bespan.getStartTime() - sendingTimestamp. At here, for you, the latency is current time - sending timestamp", "author": "wu-sheng", "createdAt": "2020-10-15T06:59:11Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -78,19 +89,25 @@ void handle(AbstractSpan span) {\n         if (this.skipAnalysis) {\n             span.skipAnalysis();\n         }\n+        if (this.sendingTimestamp != 0) {\n+            Tags.TRANSMISSION_LATENCY.set(span, String.valueOf(span.getStartTime() - sendingTimestamp));\n+        }", "originalCommit": "cc5ce935285aa5037cc04930e8935835b18010e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc024b79247e7e0a49c066ece36a8fd3c69ab7b5", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\nindex 32baa1998..9f41f7331 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n\n@@ -90,7 +103,7 @@ public class ExtensionContext {\n             span.skipAnalysis();\n         }\n         if (this.sendingTimestamp != 0) {\n-            Tags.TRANSMISSION_LATENCY.set(span, String.valueOf(span.getStartTime() - sendingTimestamp));\n+            Tags.TRANSMISSION_LATENCY.set(span, String.valueOf(System.currentTimeMillis() - sendingTimestamp));\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIzNDYwMA==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r505234600", "bodyText": "This should be removed.", "author": "wu-sheng", "createdAt": "2020-10-15T07:01:57Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractSpan.java", "diffHunk": "@@ -124,4 +124,10 @@\n      * Should skip analysis in the backend.\n      */\n     void skipAnalysis();\n+\n+    /**\n+     * Get the start time stamp of this span.\n+     */\n+    long getStartTime();", "originalCommit": "cc5ce935285aa5037cc04930e8935835b18010e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc024b79247e7e0a49c066ece36a8fd3c69ab7b5", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractSpan.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractSpan.java\nindex 595fde7fd..b9213c9c0 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractSpan.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/trace/AbstractSpan.java\n\n@@ -125,9 +125,4 @@ public interface AbstractSpan extends AsyncSpan {\n      */\n     void skipAnalysis();\n \n-    /**\n-     * Get the start time stamp of this span.\n-     */\n-    long getStartTime();\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIzNzQ3OQ==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r505237479", "bodyText": "long -> Long, as it could be NULL if don't exist in the in-wire context.", "author": "wu-sheng", "createdAt": "2020-10-15T07:05:13Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionInjector.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.context;\n+\n+/**\n+ * Inject or read the extension protocol fields,such as {@link ExtensionContext#sendingTimestamp}.\n+ */\n+public class ExtensionInjector {\n+\n+    private final ExtensionContext extensionContext;\n+\n+    ExtensionInjector(final ExtensionContext extensionContext) {\n+        this.extensionContext = extensionContext;\n+    }\n+\n+    public void injectSendingTimestamp() {\n+        extensionContext.setSendingTimestamp(System.currentTimeMillis());\n+    }\n+\n+    public long readSendingTimestamp() {", "originalCommit": "cc5ce935285aa5037cc04930e8935835b18010e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUwMDU1Ng==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r515500556", "bodyText": "This comment is not addressed yet, I mark it as unresolved. @EvanLjp please only mark the conversation as \"resolved\" after you have actually resolved it or have reasons not to resolve, I don't see either.\nBecause sendingTimestamp is Long, returning it from public long readSendingTimestamp() will lead to an auto-unboxing and NullPointerException", "author": "kezhenxu94", "createdAt": "2020-10-31T14:05:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIzNzQ3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5b3952937c25dd9df9b75005e4042a5b116996f9", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionInjector.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionInjector.java\nindex 9b35864023..69ecbc0912 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionInjector.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionInjector.java\n\n@@ -18,6 +18,8 @@\n \n package org.apache.skywalking.apm.agent.core.context;\n \n+import java.util.Optional;\n+\n /**\n  * Inject or read the extension protocol fields,such as {@link ExtensionContext#sendingTimestamp}.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwMTA0Ng==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r505301046", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return skipAnalysis ? \"1\" : \"0\" + \"-\" + sendingTimestamp;\n          \n          \n            \n                    return (skipAnalysis ? \"1\" : \"0\") + \"-\" + sendingTimestamp;", "author": "mrproliu", "createdAt": "2020-10-15T07:59:29Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -33,13 +36,20 @@\n      */\n     private boolean skipAnalysis;\n \n+    /**\n+     * The sending timestamp of the exit span.\n+     */\n+    @Getter\n+    @Setter\n+    private long sendingTimestamp = 0;\n+\n     /**\n      * Serialize this {@link ExtensionContext} to a {@link String}\n      *\n      * @return the serialization string.\n      */\n     String serialize() {\n-        return skipAnalysis ? \"1\" : \"0\";\n+        return skipAnalysis ? \"1\" : \"0\" + \"-\" + sendingTimestamp;", "originalCommit": "cc5ce935285aa5037cc04930e8935835b18010e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc024b79247e7e0a49c066ece36a8fd3c69ab7b5", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\nindex 32baa1998..9f41f7331 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n\n@@ -31,6 +33,7 @@ import org.apache.skywalking.apm.util.StringUtil;\n  */\n public class ExtensionContext {\n \n+    private static final ILog LOGGER = LogManager.getLogger(ExtensionContext.class);\n     /**\n      * Tracing Mode. If true means represents all spans generated in this context should skip analysis.\n      */\n"}}, {"oid": "dc024b79247e7e0a49c066ece36a8fd3c69ab7b5", "url": "https://github.com/apache/skywalking/commit/dc024b79247e7e0a49c066ece36a8fd3c69ab7b5", "message": "add transmission latency", "committedDate": "2020-10-15T09:10:02Z", "type": "commit"}, {"oid": "76637ca396500cca697c2c89878bb5967d8908e5", "url": "https://github.com/apache/skywalking/commit/76637ca396500cca697c2c89878bb5967d8908e5", "message": "add transmission latency", "committedDate": "2020-10-15T09:28:50Z", "type": "commit"}, {"oid": "a491ce138a70b19b4e8543cfb0581837e3352b07", "url": "https://github.com/apache/skywalking/commit/a491ce138a70b19b4e8543cfb0581837e3352b07", "message": "add transmission latency", "committedDate": "2020-10-15T10:29:31Z", "type": "commit"}, {"oid": "4fb6d82210dcd27c112583917f9cc0a6a06bb792", "url": "https://github.com/apache/skywalking/commit/4fb6d82210dcd27c112583917f9cc0a6a06bb792", "message": "Merge branch 'master' into adjustMqTimestamp", "committedDate": "2020-10-16T01:35:39Z", "type": "commit"}, {"oid": "94eb43a079eebaad986d37744622b8db4a34aa38", "url": "https://github.com/apache/skywalking/commit/94eb43a079eebaad986d37744622b8db4a34aa38", "message": "Merge branch 'master' into adjustMqTimestamp", "committedDate": "2020-10-16T04:37:38Z", "type": "commit"}, {"oid": "146b9a31c9047b5b41a6df8e0aca50388d078b68", "url": "https://github.com/apache/skywalking/commit/146b9a31c9047b5b41a6df8e0aca50388d078b68", "message": "fix scenario", "committedDate": "2020-10-16T11:59:38Z", "type": "commit"}, {"oid": "13bd336dd06777085de5f0268894db35a4b2a6d9", "url": "https://github.com/apache/skywalking/commit/13bd336dd06777085de5f0268894db35a4b2a6d9", "message": "Merge remote-tracking branch 'upstream/master' into adjustMqTimestamp", "committedDate": "2020-10-16T12:01:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ0MDIyOA==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r506440228", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The latency of transmission. If there were more than one downstream endpoints, multiple tags will be recorded,\n          \n          \n            \n                 * The latency of transmission. When there are more than one downstream parent/segment-ref(s), multiple tags will be recorded,", "author": "wu-sheng", "createdAt": "2020-10-16T13:47:01Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/tag/Tags.java", "diffHunk": "@@ -77,7 +77,11 @@ private Tags() {\n      */\n     public static final StringTag MQ_TOPIC = new StringTag(9, \"mq.topic\");\n \n-    public static final StringTag TRANSMISSION_LATENCY = new StringTag(15, \"transmission.latency\");\n+    /**\n+     * The latency of transmission. If there were more than one downstream endpoints, multiple tags will be recorded,", "originalCommit": "146b9a31c9047b5b41a6df8e0aca50388d078b68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a421393fad5992f93008f4d0c776ef20679f26c", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/tag/Tags.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/tag/Tags.java\nindex 3e296b499b..291dfae611 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/tag/Tags.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/tag/Tags.java\n\n@@ -78,8 +78,8 @@ public final class Tags {\n     public static final StringTag MQ_TOPIC = new StringTag(9, \"mq.topic\");\n \n     /**\n-     * The latency of transmission. If there were more than one downstream endpoints, multiple tags will be recorded,\n-     * such as a batch consumption in MQ.\n+     * The latency of transmission. When there are more than one downstream parent/segment-ref(s), multiple tags will be\n+     * recorded, such as a batch consumption in MQ.\n      */\n     public static final StringTag TRANSMISSION_LATENCY = new StringTag(15, \"transmission.latency\", false);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2MTA0OA==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r506961048", "bodyText": "Maybe we should always serialize this part even if sendingTimestamp != 0? The extension fields are order-sensitive, we always need a real value or placeholder, otherwise, if the downstream agent plugin don't have this field but have their own extended fields(now for now, though), it will be trouble, WDYT? @wu-sheng", "author": "kezhenxu94", "createdAt": "2020-10-17T16:44:25Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -28,18 +33,30 @@\n  */\n public class ExtensionContext {\n \n+    private static final ILog LOGGER = LogManager.getLogger(ExtensionContext.class);\n     /**\n      * Tracing Mode. If true means represents all spans generated in this context should skip analysis.\n      */\n     private boolean skipAnalysis;\n \n+    /**\n+     * The sending timestamp of the exit span.\n+     */\n+    @Getter\n+    @Setter\n+    private long sendingTimestamp = 0;\n+\n     /**\n      * Serialize this {@link ExtensionContext} to a {@link String}\n      *\n      * @return the serialization string.\n      */\n     String serialize() {\n-        return skipAnalysis ? \"1\" : \"0\";\n+        String res = skipAnalysis ? \"1\" : \"0\";\n+        if (sendingTimestamp != 0) {\n+            res += \"-\" + sendingTimestamp;", "originalCommit": "13bd336dd06777085de5f0268894db35a4b2a6d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2NDgxMg==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r506964812", "bodyText": "Yes, my previous comment is about don't serialize the 0, but - should be included.\nIt seems to be misunderstood.", "author": "wu-sheng", "createdAt": "2020-10-17T17:25:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2MTA0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA0MDgzMA==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507040830", "bodyText": "I have similar concerns about this, so the zero is a placeholder before. WDYT? @wu-sheng", "author": "EvanLjp", "createdAt": "2020-10-18T08:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2MTA0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA0Mzg2OA==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507043868", "bodyText": "I don't like 0, as 0 is a real value, you are going to represent no value. So you could use 0- as timestamp doesn't exist.", "author": "wu-sheng", "createdAt": "2020-10-18T08:35:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2MTA0OA=="}], "type": "inlineReview", "revised_code": {"commit": "2a421393fad5992f93008f4d0c776ef20679f26c", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\nindex 9f41f73310..aff6a252d5 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n\n@@ -52,11 +52,7 @@ public class ExtensionContext {\n      * @return the serialization string.\n      */\n     String serialize() {\n-        String res = skipAnalysis ? \"1\" : \"0\";\n-        if (sendingTimestamp != 0) {\n-            res += \"-\" + sendingTimestamp;\n-        }\n-        return res;\n+        return (skipAnalysis ? \"1\" : \"0\") + \"-\" + sendingTimestamp;\n     }\n \n     /**\n"}}, {"oid": "2a421393fad5992f93008f4d0c776ef20679f26c", "url": "https://github.com/apache/skywalking/commit/2a421393fad5992f93008f4d0c776ef20679f26c", "message": "correlation-inject-span", "committedDate": "2020-10-18T08:36:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA0NDU3OQ==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507044579", "bodyText": "Again, don't use 2.", "author": "wu-sheng", "createdAt": "2020-10-18T08:38:13Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -69,14 +65,12 @@ void deserialize(String value) {\n         final String[] extensionParts = value.split(\"-\");\n         // All parts of the extension header are optional.\n         // only try to read it when it exist.\n-        if (extensionParts.length > 0) {\n+        if (extensionParts.length == 2) {", "originalCommit": "2a421393fad5992f93008f4d0c776ef20679f26c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA0NTQzMg==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507045432", "bodyText": "ok", "author": "EvanLjp", "createdAt": "2020-10-18T08:40:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA0NDU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA3NjQyOQ==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507076429", "bodyText": "Because all parameters are passing rather than optional fields, the length of extensionParts is fixed.\nnow, the passing data maybe \"0-\" or \"0-1602743904804\", length of extensionParts must be 2.\nin the feature, if add another field, the propagate data may be \"0--\" or \"0-xxx-xxx\". And the length of extensionParts must be 3.\nI think logic greater than 0 is redundant", "author": "EvanLjp", "createdAt": "2020-10-18T10:12:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA0NDU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzEzNjg1MA==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507136850", "bodyText": "Don't require must, that is the key. If the new agent propagates 0-xxx-xxx, I hope the older agent still works, that is why I wrote this part as >0, and ask you to do >1.", "author": "wu-sheng", "createdAt": "2020-10-18T12:54:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA0NDU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3MDAxNg==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507170016", "bodyText": "I finally understand the key: the compatibility.", "author": "EvanLjp", "createdAt": "2020-10-18T14:31:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA0NDU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3MDI5NA==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507170294", "bodyText": "Yes, this kind of PR shows me the case is, the extension header may be used more in the future.", "author": "wu-sheng", "createdAt": "2020-10-18T14:33:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzA0NDU3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8dc6c8da3ef5482c58c1a7eab30b94e453c25733", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\nindex aff6a252d5..544168d100 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n\n@@ -62,15 +64,19 @@ public class ExtensionContext {\n         if (StringUtil.isEmpty(value)) {\n             return;\n         }\n-        final String[] extensionParts = value.split(\"-\");\n+        String[] extensionParts = value.replaceAll(\"-\", \"- \").split(\"-\");\n         // All parts of the extension header are optional.\n         // only try to read it when it exist.\n         if (extensionParts.length == 2) {\n-            this.skipAnalysis = Objects.equals(extensionParts[0], \"1\");\n-            try {\n-                this.sendingTimestamp = Long.parseLong(extensionParts[1]);\n-            } catch (NumberFormatException e) {\n-                LOGGER.error(e, \"the downstream sending timestamp is illegal:[{}]\", extensionParts[1]);\n+            String extensionPart = extensionParts[0].trim();\n+            this.skipAnalysis = Objects.equals(extensionPart, \"1\");\n+            extensionPart = extensionParts[1].trim();\n+            if (StringUtil.isNotEmpty(extensionPart)) {\n+                try {\n+                    this.sendingTimestamp = Long.parseLong(extensionPart);\n+                } catch (NumberFormatException e) {\n+                    LOGGER.error(e, \"the downstream sending timestamp is illegal:[{}]\", extensionParts[1]);\n+                }\n             }\n         }\n     }\n"}}, {"oid": "8dc6c8da3ef5482c58c1a7eab30b94e453c25733", "url": "https://github.com/apache/skywalking/commit/8dc6c8da3ef5482c58c1a7eab30b94e453c25733", "message": "correlation-inject-span", "committedDate": "2020-10-18T10:03:45Z", "type": "commit"}, {"oid": "38766c264b8c73a7a3d0f5e3c01aa1f6931eb721", "url": "https://github.com/apache/skywalking/commit/38766c264b8c73a7a3d0f5e3c01aa1f6931eb721", "message": "correlation-inject-span", "committedDate": "2020-10-18T10:17:23Z", "type": "commit"}, {"oid": "9da69fb2b83c0ef002afbcf8fb99d3060d064366", "url": "https://github.com/apache/skywalking/commit/9da69fb2b83c0ef002afbcf8fb99d3060d064366", "message": "correlation-inject-span", "committedDate": "2020-10-18T10:22:52Z", "type": "commit"}, {"oid": "9204880a5eb1b08d7e482f45dbbd83d1f8b9dd48", "url": "https://github.com/apache/skywalking/commit/9204880a5eb1b08d7e482f45dbbd83d1f8b9dd48", "message": "keep compatibility", "committedDate": "2020-10-18T16:35:39Z", "type": "commit"}, {"oid": "269302d35510cb9933217310ba21c9e105940755", "url": "https://github.com/apache/skywalking/commit/269302d35510cb9933217310ba21c9e105940755", "message": "Merge remote-tracking branch 'upstream/master' into adjustMqTimestamp", "committedDate": "2020-10-18T16:37:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMzOTc0NA==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507339744", "bodyText": "Please inject  (whitespace), rather than this strange replaceAll.", "author": "wu-sheng", "createdAt": "2020-10-19T01:52:25Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -49,11 +64,23 @@ void deserialize(String value) {\n         if (StringUtil.isEmpty(value)) {\n             return;\n         }\n-        final String[] extensionParts = value.split(\"-\");\n+        String[] extensionParts = value.replaceAll(\"-\", \"- \").split(\"-\");", "originalCommit": "269302d35510cb9933217310ba21c9e105940755", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM1NjYyOA==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507356628", "bodyText": "I may have misunderstood what you meant, thinking you meant to pass as few characters as possible. fix it later.", "author": "EvanLjp", "createdAt": "2020-10-19T02:11:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMzOTc0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM2NDgzNQ==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507364835", "bodyText": "The size is not a concern, as we have injected a much bigger sw8 header.", "author": "wu-sheng", "createdAt": "2020-10-19T02:21:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMzOTc0NA=="}], "type": "inlineReview", "revised_code": {"commit": "c5bcba15df8e91f7a8d8b4041f41de1886ad148d", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\nindex a73433e4d8..cb035362d2 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n\n@@ -64,7 +73,7 @@ public class ExtensionContext {\n         if (StringUtil.isEmpty(value)) {\n             return;\n         }\n-        String[] extensionParts = value.replaceAll(\"-\", \"- \").split(\"-\");\n+        String[] extensionParts = value.split(SEPARATOR);\n         // All parts of the extension header are optional.\n         // only try to read it when it exist.\n         if (extensionParts.length > 0) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM0MDI4MA==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507340280", "bodyText": "Please use Long to separate real 0 and NULL.", "author": "wu-sheng", "createdAt": "2020-10-19T01:52:58Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -28,18 +33,28 @@\n  */\n public class ExtensionContext {\n \n+    private static final ILog LOGGER = LogManager.getLogger(ExtensionContext.class);\n     /**\n      * Tracing Mode. If true means represents all spans generated in this context should skip analysis.\n      */\n     private boolean skipAnalysis;\n \n+    /**\n+     * The sending timestamp of the exit span.\n+     */\n+    @Getter\n+    @Setter\n+    private long sendingTimestamp;", "originalCommit": "269302d35510cb9933217310ba21c9e105940755", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5bcba15df8e91f7a8d8b4041f41de1886ad148d", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\nindex a73433e4d8..cb035362d2 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n\n@@ -34,6 +34,14 @@ import org.apache.skywalking.apm.util.StringUtil;\n public class ExtensionContext {\n \n     private static final ILog LOGGER = LogManager.getLogger(ExtensionContext.class);\n+    /**\n+     * The extendable fields are split by the space.\n+     */\n+    private static final String SEPARATOR = \" \";\n+    /**\n+     * The default value of extendable fields.\n+     */\n+    private static final String PLACEHOLDER = \"-\";\n     /**\n      * Tracing Mode. If true means represents all spans generated in this context should skip analysis.\n      */\n"}}, {"oid": "c5bcba15df8e91f7a8d8b4041f41de1886ad148d", "url": "https://github.com/apache/skywalking/commit/c5bcba15df8e91f7a8d8b4041f41de1886ad148d", "message": "logic optimization", "committedDate": "2020-10-19T02:28:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM4ODk5Mw==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r507388993", "bodyText": "I think you misunderstand me, I mean no value should be represented by  , the separator should always be -.", "author": "wu-sheng", "createdAt": "2020-10-19T02:59:02Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -49,11 +73,23 @@ void deserialize(String value) {\n         if (StringUtil.isEmpty(value)) {\n             return;\n         }\n-        final String[] extensionParts = value.split(\"-\");\n+        String[] extensionParts = value.split(SEPARATOR);", "originalCommit": "c5bcba15df8e91f7a8d8b4041f41de1886ad148d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "778d99fc9e13ea0e10841762dbe584c6bcbea866", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\nindex cb035362d2..7ce80df968 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n\n@@ -77,13 +77,13 @@ public class ExtensionContext {\n         // All parts of the extension header are optional.\n         // only try to read it when it exist.\n         if (extensionParts.length > 0) {\n-            String extensionPart = extensionParts[0].trim();\n+            String extensionPart = extensionParts[0];\n             this.skipAnalysis = Objects.equals(extensionPart, \"1\");\n         }\n \n         if (extensionParts.length > 1) {\n-            String extensionPart = extensionParts[1].trim();\n-            if (StringUtil.isNotEmpty(extensionPart) && !extensionPart.equals(PLACEHOLDER)) {\n+            String extensionPart = extensionParts[1];\n+            if (StringUtil.isNotBlank(extensionPart)) {\n                 try {\n                     this.sendingTimestamp = Long.parseLong(extensionPart);\n                 } catch (NumberFormatException e) {\n"}}, {"oid": "778d99fc9e13ea0e10841762dbe584c6bcbea866", "url": "https://github.com/apache/skywalking/commit/778d99fc9e13ea0e10841762dbe584c6bcbea866", "message": "make space as default value", "committedDate": "2020-10-22T16:01:27Z", "type": "commit"}, {"oid": "bd6bc0540f7018ad58b308f7a55b575860efa354", "url": "https://github.com/apache/skywalking/commit/bd6bc0540f7018ad58b308f7a55b575860efa354", "message": "Merge remote-tracking branch 'upstream/master' into adjustMqTimestamp", "committedDate": "2020-10-22T16:01:33Z", "type": "commit"}, {"oid": "6967485ead0d1379446e85f625c1dfb1a0542db5", "url": "https://github.com/apache/skywalking/commit/6967485ead0d1379446e85f625c1dfb1a0542db5", "message": "Merge branch 'master' into adjustMqTimestamp", "committedDate": "2020-10-26T08:53:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyODc3Mw==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r514628773", "bodyText": "I think this equal is incorrect, as it is an object for now.", "author": "wu-sheng", "createdAt": "2020-10-29T23:42:18Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -100,11 +142,11 @@ public boolean equals(Object o) {\n         if (o == null || getClass() != o.getClass())\n             return false;\n         ExtensionContext that = (ExtensionContext) o;\n-        return skipAnalysis == that.skipAnalysis;\n+        return skipAnalysis == that.skipAnalysis && sendingTimestamp == that.sendingTimestamp;", "originalCommit": "6967485ead0d1379446e85f625c1dfb1a0542db5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4788b9575209f646f3bbb030c629d9a8f3d6d1e7", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\nindex 7ce80df968..a00d9ef3cf 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n\n@@ -142,7 +142,7 @@ public class ExtensionContext {\n         if (o == null || getClass() != o.getClass())\n             return false;\n         ExtensionContext that = (ExtensionContext) o;\n-        return skipAnalysis == that.skipAnalysis && sendingTimestamp == that.sendingTimestamp;\n+        return skipAnalysis == that.skipAnalysis && sendingTimestamp.equals(that.sendingTimestamp);\n     }\n \n     @Override\n"}}, {"oid": "7849fb96b128e8aa5885fb087abf153156ee6886", "url": "https://github.com/apache/skywalking/commit/7849fb96b128e8aa5885fb087abf153156ee6886", "message": "Merge branch 'master' into adjustMqTimestamp", "committedDate": "2020-10-30T00:45:38Z", "type": "commit"}, {"oid": "de827f7c04ca2b359e8b674c1afa8b86bbfd642e", "url": "https://github.com/apache/skywalking/commit/de827f7c04ca2b359e8b674c1afa8b86bbfd642e", "message": "Merge remote-tracking branch 'upstream/master' into adjustMqTimestamp", "committedDate": "2020-10-31T13:35:29Z", "type": "commit"}, {"oid": "4788b9575209f646f3bbb030c629d9a8f3d6d1e7", "url": "https://github.com/apache/skywalking/commit/4788b9575209f646f3bbb030c629d9a8f3d6d1e7", "message": "fix doc and bug", "committedDate": "2020-10-31T13:37:44Z", "type": "commit"}, {"oid": "3c8f7d5ae5b48449f17c3182512270b20a3256d0", "url": "https://github.com/apache/skywalking/commit/3c8f7d5ae5b48449f17c3182512270b20a3256d0", "message": "optimize some codes", "committedDate": "2020-10-31T13:43:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ5ODkzNg==", "url": "https://github.com/apache/skywalking/pull/5666#discussion_r515498936", "bodyText": "sendingTimestamp may be null?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return skipAnalysis == that.skipAnalysis && sendingTimestamp.equals(that.sendingTimestamp);\n          \n          \n            \n                    return skipAnalysis == that.skipAnalysis && Objects.equals(sendingTimestamp, that.sendingTimestamp);", "author": "kezhenxu94", "createdAt": "2020-10-31T13:47:26Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java", "diffHunk": "@@ -100,11 +143,11 @@ public boolean equals(Object o) {\n         if (o == null || getClass() != o.getClass())\n             return false;\n         ExtensionContext that = (ExtensionContext) o;\n-        return skipAnalysis == that.skipAnalysis;\n+        return skipAnalysis == that.skipAnalysis && sendingTimestamp.equals(that.sendingTimestamp);", "originalCommit": "3c8f7d5ae5b48449f17c3182512270b20a3256d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b26de21f57dc57e4569573c87b4eb27a0b6b7374", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\nindex 716bc8d6b3..fbfee3983a 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n\n@@ -143,7 +143,7 @@ public class ExtensionContext {\n         if (o == null || getClass() != o.getClass())\n             return false;\n         ExtensionContext that = (ExtensionContext) o;\n-        return skipAnalysis == that.skipAnalysis && sendingTimestamp.equals(that.sendingTimestamp);\n+        return skipAnalysis == that.skipAnalysis && Objects.equals(sendingTimestamp, that.sendingTimestamp);\n     }\n \n     @Override\n"}}, {"oid": "b26de21f57dc57e4569573c87b4eb27a0b6b7374", "url": "https://github.com/apache/skywalking/commit/b26de21f57dc57e4569573c87b4eb27a0b6b7374", "message": "Update apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ExtensionContext.java\n\nCo-authored-by: kezhenxu94 <kezhenxu94@163.com>", "committedDate": "2020-10-31T14:00:45Z", "type": "commit"}, {"oid": "6632f3ee9d5d501833399fb011d446f77695f51d", "url": "https://github.com/apache/skywalking/commit/6632f3ee9d5d501833399fb011d446f77695f51d", "message": "Update docs/en/protocols/Skywalking-Cross-Process-Propagation-Headers-Protocol-v3.md", "committedDate": "2020-10-31T14:05:19Z", "type": "commit"}, {"oid": "5b3952937c25dd9df9b75005e4042a5b116996f9", "url": "https://github.com/apache/skywalking/commit/5b3952937c25dd9df9b75005e4042a5b116996f9", "message": "fix bug", "committedDate": "2020-10-31T15:22:31Z", "type": "commit"}, {"oid": "ee4c7d0edabbb56afba19603d6dfa054a7dc4b9e", "url": "https://github.com/apache/skywalking/commit/ee4c7d0edabbb56afba19603d6dfa054a7dc4b9e", "message": "Merge branch 'adjustMqTimestamp' of https://github.com/EvanLjp/skywalking into adjustMqTimestamp", "committedDate": "2020-10-31T15:23:40Z", "type": "commit"}, {"oid": "8511b06bab41114d87b1c7d5bbd3532dc5cc8f7d", "url": "https://github.com/apache/skywalking/commit/8511b06bab41114d87b1c7d5bbd3532dc5cc8f7d", "message": "Merge branch 'master' into adjustMqTimestamp", "committedDate": "2020-10-31T16:01:51Z", "type": "commit"}, {"oid": "325233aff4fd48f4e373e22965fabad39c580a0f", "url": "https://github.com/apache/skywalking/commit/325233aff4fd48f4e373e22965fabad39c580a0f", "message": "Merge branch 'master' into adjustMqTimestamp", "committedDate": "2020-11-01T01:58:45Z", "type": "commit"}]}