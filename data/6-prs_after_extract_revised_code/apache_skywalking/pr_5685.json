{"pr_number": 5685, "pr_title": "Apply tags from Correlation Context key/values to Spans", "pr_createdAt": "2020-10-18T14:44:12Z", "pr_url": "https://github.com/apache/skywalking/pull/5685", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3Mjg3Mg==", "url": "https://github.com/apache/skywalking/pull/5685#discussion_r507172872", "bodyText": "Why do you still try to change this? You have the tracing context, and #extract is in your control already.", "author": "wu-sheng", "createdAt": "2020-10-18T14:54:28Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextManager.java", "diffHunk": "@@ -83,23 +84,23 @@ public static AbstractSpan createEntrySpan(String operationName, ContextCarrier\n         AbstractSpan span;\n         AbstractTracerContext context;\n         operationName = StringUtil.cut(operationName, OPERATION_NAME_THRESHOLD);\n-        if (carrier != null && carrier.isValid()) {\n+        if (Objects.nonNull(carrier) && carrier.isValid()) {\n             SamplingService samplingService = ServiceManager.INSTANCE.findService(SamplingService.class);\n             samplingService.forceSampled();\n             context = getOrCreate(operationName, true);\n-            span = context.createEntrySpan(operationName);\n-            context.extract(carrier);\n         } else {\n             context = getOrCreate(operationName, false);\n-            span = context.createEntrySpan(operationName);\n         }\n-        return span;\n+        span = context.createEntrySpan(operationName);\n+        context.extract(carrier);\n+        return callback(span);", "originalCommit": "a41b714d2b17154ef5a49bdc22921d6d76e05843", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8b5fcff217a9b6ac43296d79b76c2f1352d3928", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextManager.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextManager.java\nindex 786ac5ec58..39190c7845 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextManager.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextManager.java\n\n@@ -84,23 +83,23 @@ public class ContextManager implements BootService {\n         AbstractSpan span;\n         AbstractTracerContext context;\n         operationName = StringUtil.cut(operationName, OPERATION_NAME_THRESHOLD);\n-        if (Objects.nonNull(carrier) && carrier.isValid()) {\n+        if (carrier != null && carrier.isValid()) {\n             SamplingService samplingService = ServiceManager.INSTANCE.findService(SamplingService.class);\n             samplingService.forceSampled();\n             context = getOrCreate(operationName, true);\n+            span = context.createEntrySpan(operationName);\n+            context.extract(carrier);\n         } else {\n             context = getOrCreate(operationName, false);\n+            span = context.createEntrySpan(operationName);\n         }\n-        span = context.createEntrySpan(operationName);\n-        context.extract(carrier);\n-        return callback(span);\n+        return span;\n     }\n \n     public static AbstractSpan createLocalSpan(String operationName) {\n         operationName = StringUtil.cut(operationName, OPERATION_NAME_THRESHOLD);\n         AbstractTracerContext context = getOrCreate(operationName, false);\n-        AbstractSpan span = context.createLocalSpan(operationName);\n-        return callback(span);\n+        return context.createLocalSpan(operationName);\n     }\n \n     public static AbstractSpan createExitSpan(String operationName, ContextCarrier carrier, String remotePeer) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3NzY2NQ==", "url": "https://github.com/apache/skywalking/pull/5685#discussion_r507177665", "bodyText": "NULL_DEREFERENCE:  object returned by context.getTraceSegment() could be null and is dereferenced at line 91.", "author": "sonatype-lift", "createdAt": "2020-10-18T15:37:06Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextManagerExtendService.java", "diffHunk": "@@ -79,4 +84,23 @@ public AbstractTracerContext createTraceContext(String operationName, boolean fo\n     public void statusChanged(final GRPCChannelStatus status) {\n         this.status = status;\n     }\n+\n+    public void extract(ContextCarrier carrier, AbstractTracerContext context) {\n+        if (Objects.nonNull(carrier) && carrier.isValid()) {\n+            TraceSegmentRef ref = new TraceSegmentRef(carrier);\n+            context.getTraceSegment().ref(ref);", "originalCommit": "a41b714d2b17154ef5a49bdc22921d6d76e05843", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8b5fcff217a9b6ac43296d79b76c2f1352d3928", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextManagerExtendService.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextManagerExtendService.java\nindex adcf8724bb..9bbfe7a112 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextManagerExtendService.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextManagerExtendService.java\n\n@@ -84,23 +79,4 @@ public class ContextManagerExtendService implements BootService, GRPCChannelList\n     public void statusChanged(final GRPCChannelStatus status) {\n         this.status = status;\n     }\n-\n-    public void extract(ContextCarrier carrier, AbstractTracerContext context) {\n-        if (Objects.nonNull(carrier) && carrier.isValid()) {\n-            TraceSegmentRef ref = new TraceSegmentRef(carrier);\n-            context.getTraceSegment().ref(ref);\n-            context.getTraceSegment().relatedGlobalTraces(new PropagatedTraceId(carrier.getTraceId()));\n-            AbstractSpan span = context.activeSpan();\n-            if (span instanceof EntrySpan) {\n-                span.ref(ref);\n-            }\n-            context.getCorrelationContext().extract(carrier);\n-            context.getExtensionContext().handle(span);\n-        }\n-    }\n-\n-    public void injectSpan(final AbstractSpan span, final CorrelationContext correlationContext) {\n-\n-    }\n-\n }\n"}}, {"oid": "c8b5fcff217a9b6ac43296d79b76c2f1352d3928", "url": "https://github.com/apache/skywalking/commit/c8b5fcff217a9b6ac43296d79b76c2f1352d3928", "message": "remove injection code", "committedDate": "2020-10-18T16:28:41Z", "type": "commit"}, {"oid": "c8b5fcff217a9b6ac43296d79b76c2f1352d3928", "url": "https://github.com/apache/skywalking/commit/c8b5fcff217a9b6ac43296d79b76c2f1352d3928", "message": "remove injection code", "committedDate": "2020-10-18T16:28:41Z", "type": "forcePushed"}, {"oid": "f580e5b134428c8533b4e6f759e62e8ef0cd99d0", "url": "https://github.com/apache/skywalking/commit/f580e5b134428c8533b4e6f759e62e8ef0cd99d0", "message": "add unit test", "committedDate": "2020-10-18T17:03:43Z", "type": "commit"}, {"oid": "6f716458f7160f75bc35eccbb4ffa2523ec34a4a", "url": "https://github.com/apache/skywalking/commit/6f716458f7160f75bc35eccbb4ffa2523ec34a4a", "message": "remove unnecessary doc", "committedDate": "2020-10-19T02:03:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM0NjEyNQ==", "url": "https://github.com/apache/skywalking/pull/5685#discussion_r507346125", "bodyText": "Should be a part of BeforeTest", "author": "wu-sheng", "createdAt": "2020-10-19T01:59:33Z", "path": "apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/context/CorrelationContextTest.java", "diffHunk": "@@ -121,4 +126,21 @@ public void testDeserialize() {\n         Assert.assertNull(context.get(\"test1\").orElse(null));\n     }\n \n+    @Test\n+    public void testHandle() {\n+        Config.Correlation.INJECTION_TAGS = \"\";", "originalCommit": "f580e5b134428c8533b4e6f759e62e8ef0cd99d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM0NjQwOA==", "url": "https://github.com/apache/skywalking/pull/5685#discussion_r507346408", "bodyText": "Also, should be clear after test.", "author": "wu-sheng", "createdAt": "2020-10-19T01:59:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM0NjEyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "73d698846b7f9fd02305ab10a329fa88d404f7f1", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/context/CorrelationContextTest.java b/apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/context/CorrelationContextTest.java\nindex d309720825..023d63bb5a 100644\n--- a/apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/context/CorrelationContextTest.java\n+++ b/apm-sniffer/apm-agent-core/src/test/java/org/apache/skywalking/apm/agent/core/context/CorrelationContextTest.java\n\n@@ -127,18 +133,22 @@ public class CorrelationContextTest {\n     }\n \n     @Test\n-    public void testHandle() {\n-        Config.Correlation.INJECTION_TAGS = \"\";\n+    public void testHandleWhenAutoTagKeysEmpty() {\n+        Config.Correlation.AUTO_TAG_KEYS = \"\";\n         CorrelationContext context = new CorrelationContext();\n         context.put(\"a\", \"b\");\n         EntrySpan span = mock(EntrySpan.class);\n         context.handle(span);\n         Mockito.verify(span, times(0)).tag(new StringTag(\"a\"), \"b\");\n \n-        Config.Correlation.INJECTION_TAGS = \"a\";\n-        context = new CorrelationContext();\n+    }\n+\n+    @Test\n+    public void testHandleWhenAutoTagKeysNotEmpty() {\n+        Config.Correlation.AUTO_TAG_KEYS = \"a\";\n+        CorrelationContext context = new CorrelationContext();\n         context.put(\"a\", \"b\");\n-        span = mock(EntrySpan.class);\n+        EntrySpan span = mock(EntrySpan.class);\n         context.handle(span);\n         Mockito.verify(span, times(1)).tag(new StringTag(\"a\"), \"b\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM1OTE2MA==", "url": "https://github.com/apache/skywalking/pull/5685#discussion_r507359160", "bodyText": "What are these for?", "author": "wu-sheng", "createdAt": "2020-10-19T02:14:36Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/tag/AbstractTag.java", "diffHunk": "@@ -60,4 +61,21 @@ public int getId() {\n     public boolean isCanOverwrite() {\n         return canOverwrite;\n     }\n+\n+    @Override\n+    public boolean equals(final Object o) {\n+        if (this == o)\n+            return true;\n+        if (!(o instanceof AbstractTag))\n+            return false;\n+        final AbstractTag<?> that = (AbstractTag<?>) o;\n+        return getId() == that.getId() &&\n+            isCanOverwrite() == that.isCanOverwrite() &&\n+            key.equals(that.key);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(getId(), isCanOverwrite(), key);\n+    }", "originalCommit": "6f716458f7160f75bc35eccbb4ffa2523ec34a4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxNDQ0NA==", "url": "https://github.com/apache/skywalking/pull/5685#discussion_r507514444", "bodyText": "For stringTag equals:", "author": "EvanLjp", "createdAt": "2020-10-19T06:59:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM1OTE2MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM2MzE3NA==", "url": "https://github.com/apache/skywalking/pull/5685#discussion_r507363174", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    /**\n          \n          \n            \n                     * Extract tags from the correlation.\n          \n          \n            \n                     */\n          \n          \n            \n                    public static String INJECTION_TAGS = \"\";\n          \n          \n            \n                    /**\n          \n          \n            \n                     * Tag the span by the key/value in the correlation context, when the keys listed here exist.\n          \n          \n            \n                     */\n          \n          \n            \n                    public static String AUTO_TAG_KEYS = \"\";", "author": "wu-sheng", "createdAt": "2020-10-19T02:19:09Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java", "diffHunk": "@@ -310,5 +310,10 @@\n          * Max value length of each element.\n          */\n         public static int VALUE_MAX_LENGTH = 128;\n+\n+        /**\n+         * Extract tags from the correlation.\n+         */\n+        public static String INJECTION_TAGS = \"\";", "originalCommit": "6f716458f7160f75bc35eccbb4ffa2523ec34a4a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73d698846b7f9fd02305ab10a329fa88d404f7f1", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java\nindex 7b40ae95bb..1a23442bed 100755\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/conf/Config.java\n\n@@ -312,8 +312,8 @@ public class Config {\n         public static int VALUE_MAX_LENGTH = 128;\n \n         /**\n-         * Extract tags from the correlation.\n+         * Tag the span by the key/value in the correlation context, when the keys listed here exist.\n          */\n-        public static String INJECTION_TAGS = \"\";\n+        public static String AUTO_TAG_KEYS = \"\";\n     }\n }\n"}}, {"oid": "73d698846b7f9fd02305ab10a329fa88d404f7f1", "url": "https://github.com/apache/skywalking/commit/73d698846b7f9fd02305ab10a329fa88d404f7f1", "message": "logic optimization", "committedDate": "2020-10-19T07:11:40Z", "type": "commit"}, {"oid": "9a2d3f6bc5421cec3ae74be9fbfdff6d51c41616", "url": "https://github.com/apache/skywalking/commit/9a2d3f6bc5421cec3ae74be9fbfdff6d51c41616", "message": "Merge branch 'master' into correlation-inject-spans", "committedDate": "2020-10-20T01:33:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE1NjUxOQ==", "url": "https://github.com/apache/skywalking/pull/5685#discussion_r508156519", "bodyText": "From my understanding, this should be in the static{} block, as it doesn't need to execute every time.", "author": "wu-sheng", "createdAt": "2020-10-20T01:36:23Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CorrelationContext.java", "diffHunk": "@@ -17,26 +17,38 @@\n \n package org.apache.skywalking.apm.agent.core.context;\n \n-import org.apache.skywalking.apm.agent.core.base64.Base64;\n-import org.apache.skywalking.apm.agent.core.conf.Config;\n-import org.apache.skywalking.apm.util.StringUtil;\n-\n+import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n import java.util.stream.Collectors;\n+import org.apache.skywalking.apm.agent.core.base64.Base64;\n+import org.apache.skywalking.apm.agent.core.conf.Config;\n+import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n+import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n+import org.apache.skywalking.apm.util.StringUtil;\n+\n+import static org.apache.skywalking.apm.agent.core.conf.Config.Correlation.AUTO_TAG_KEYS;\n \n /**\n- * Correlation context, use to propagation user custom data.\n- * Working on the protocol and delegate set/get method.\n+ * Correlation context, use to propagation user custom data. Working on the protocol and delegate set/get method.\n  */\n public class CorrelationContext {\n \n     private final Map<String, String> data;\n \n+    private final List<String> autoTagKeys;\n+\n     public CorrelationContext() {\n         this.data = new HashMap<>(Config.Correlation.ELEMENT_MAX_NUMBER);\n+        if (StringUtil.isNotEmpty(AUTO_TAG_KEYS)) {\n+            autoTagKeys = Arrays.asList(AUTO_TAG_KEYS.split(\",\"));\n+        } else {", "originalCommit": "9a2d3f6bc5421cec3ae74be9fbfdff6d51c41616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9483a10114c9a4b660734825df3f865654797a89", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CorrelationContext.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CorrelationContext.java\nindex 01d812df6a..fc247728f8 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CorrelationContext.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CorrelationContext.java\n\n@@ -31,8 +31,6 @@ import org.apache.skywalking.apm.agent.core.context.tag.StringTag;\n import org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan;\n import org.apache.skywalking.apm.util.StringUtil;\n \n-import static org.apache.skywalking.apm.agent.core.conf.Config.Correlation.AUTO_TAG_KEYS;\n-\n /**\n  * Correlation context, use to propagation user custom data. Working on the protocol and delegate set/get method.\n  */\n"}}, {"oid": "9483a10114c9a4b660734825df3f865654797a89", "url": "https://github.com/apache/skywalking/commit/9483a10114c9a4b660734825df3f865654797a89", "message": "add correlation-autotag-scenario && refactor some codes", "committedDate": "2020-10-22T15:07:15Z", "type": "commit"}, {"oid": "afb6a56b76618480278e0c4e9ca1ab6d8bd56837", "url": "https://github.com/apache/skywalking/commit/afb6a56b76618480278e0c4e9ca1ab6d8bd56837", "message": "Merge branch 'correlation-inject-spans' of https://github.com/EvanLjp/skywalking into correlation-inject-spans", "committedDate": "2020-10-22T15:07:44Z", "type": "commit"}, {"oid": "63991431911f3456f0389531dda4e83ad54b5c88", "url": "https://github.com/apache/skywalking/commit/63991431911f3456f0389531dda4e83ad54b5c88", "message": "Merge remote-tracking branch 'upstream/master' into correlation-inject-spans", "committedDate": "2020-10-22T15:10:15Z", "type": "commit"}, {"oid": "85b6a1f434f1764ce88c4b87583ca6f153f6685b", "url": "https://github.com/apache/skywalking/commit/85b6a1f434f1764ce88c4b87583ca6f153f6685b", "message": "fix unit test", "committedDate": "2020-10-23T02:41:46Z", "type": "commit"}, {"oid": "cc6ba87acb7a55ab64aafffd44709155bdca5aeb", "url": "https://github.com/apache/skywalking/commit/cc6ba87acb7a55ab64aafffd44709155bdca5aeb", "message": "fix unit test", "committedDate": "2020-10-23T04:29:16Z", "type": "commit"}, {"oid": "9c47b80baa004a51f8ecfbcbfbec8258bbddf7ad", "url": "https://github.com/apache/skywalking/commit/9c47b80baa004a51f8ecfbcbfbec8258bbddf7ad", "message": "unit test", "committedDate": "2020-10-23T05:44:32Z", "type": "commit"}, {"oid": "bf9574b7002a0d652cce22b196dd80657ce2c26f", "url": "https://github.com/apache/skywalking/commit/bf9574b7002a0d652cce22b196dd80657ce2c26f", "message": "Merge branch 'master' into correlation-inject-spans", "committedDate": "2020-10-29T23:35:21Z", "type": "commit"}, {"oid": "46c3c3a1b4023f9306902306edb0515d5e4372f6", "url": "https://github.com/apache/skywalking/commit/46c3c3a1b4023f9306902306edb0515d5e4372f6", "message": "fix jar conflict", "committedDate": "2020-10-31T14:00:22Z", "type": "commit"}, {"oid": "d3f468539bf7d7578e2a73e413ede9746bbb3074", "url": "https://github.com/apache/skywalking/commit/d3f468539bf7d7578e2a73e413ede9746bbb3074", "message": "Merge remote-tracking branch 'upstream/master' into correlation-inject-spans", "committedDate": "2020-10-31T14:00:25Z", "type": "commit"}, {"oid": "413e6a1a7e93dd7933ae7d0b172532726e7683ef", "url": "https://github.com/apache/skywalking/commit/413e6a1a7e93dd7933ae7d0b172532726e7683ef", "message": "Merge branch 'correlation-inject-spans' of https://github.com/EvanLjp/skywalking into correlation-inject-spans", "committedDate": "2020-10-31T14:02:19Z", "type": "commit"}, {"oid": "f4f214488d9c04a0e3c18d18fcc7b7ee6eb6e126", "url": "https://github.com/apache/skywalking/commit/f4f214488d9c04a0e3c18d18fcc7b7ee6eb6e126", "message": "only scenario test to test correlation auto tag", "committedDate": "2020-10-31T16:21:34Z", "type": "commit"}, {"oid": "e068296a835b22382c72597c260e6bc4468153ff", "url": "https://github.com/apache/skywalking/commit/e068296a835b22382c72597c260e6bc4468153ff", "message": "Merge remote-tracking branch 'upstream/master' into correlation-inject-spans", "committedDate": "2020-10-31T16:22:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5OTU4MQ==", "url": "https://github.com/apache/skywalking/pull/5685#discussion_r510699581", "bodyText": "I think this file should not be checked into the codebase, please set a maven phase to generate it, refer to the existing settings in other modules, apm-network, thrift-plugin tests, etc.", "author": "kezhenxu94", "createdAt": "2020-10-23T07:50:57Z", "path": "test/plugin/scenarios/correlation-autotag-scenario/src/main/java/org/apache/skywalking/apm/testcase/baidu.brpc/interfaces/Echo.java", "diffHunk": "@@ -0,0 +1,1040 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+// Generated by the protocol buffer compiler.  DO NOT EDIT!\n+// source: echo.proto\n+\n+package org.apache.skywalking.apm.testcase.baidu.brpc.interfaces;", "originalCommit": "9c47b80baa004a51f8ecfbcbfbec8258bbddf7ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUxNDUwMg==", "url": "https://github.com/apache/skywalking/pull/5685#discussion_r515514502", "bodyText": "Generated files are seldom checked into the codebase, unless we have to", "author": "kezhenxu94", "createdAt": "2020-10-31T16:38:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5OTU4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "66a7f9f02f27b8d4598db3ce7b9a035b275cab87", "chunk": "diff --git a/test/plugin/scenarios/correlation-autotag-scenario/src/main/java/org/apache/skywalking/apm/testcase/baidu.brpc/interfaces/Echo.java b/test/plugin/scenarios/correlation-autotag-scenario/src/main/java/org/apache/skywalking/apm/testcase/baidu.brpc/interfaces/Echo.java\ndeleted file mode 100644\nindex 74c35e240a..0000000000\n--- a/test/plugin/scenarios/correlation-autotag-scenario/src/main/java/org/apache/skywalking/apm/testcase/baidu.brpc/interfaces/Echo.java\n+++ /dev/null\n\n@@ -1,1040 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-// Generated by the protocol buffer compiler.  DO NOT EDIT!\n-// source: echo.proto\n-\n-package org.apache.skywalking.apm.testcase.baidu.brpc.interfaces;\n-\n-public final class Echo {\n-  private Echo() {}\n-  public static void registerAllExtensions(\n-      com.google.protobuf.ExtensionRegistry registry) {\n-  }\n-  public interface EchoRequestOrBuilder\n-      extends com.google.protobuf.MessageOrBuilder {\n-\n-    // required string message = 1;\n-    /**\n-     * <code>required string message = 1;</code>\n-     */\n-    boolean hasMessage();\n-    /**\n-     * <code>required string message = 1;</code>\n-     */\n-    String getMessage();\n-    /**\n-     * <code>required string message = 1;</code>\n-     */\n-    com.google.protobuf.ByteString\n-        getMessageBytes();\n-  }\n-  /**\n-   * Protobuf type {@code example_for_cpp.EchoRequest}\n-   */\n-  public static final class EchoRequest extends\n-      com.google.protobuf.GeneratedMessage\n-      implements EchoRequestOrBuilder {\n-    // Use EchoRequest.newBuilder() to construct.\n-    private EchoRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {\n-      super(builder);\n-      this.unknownFields = builder.getUnknownFields();\n-    }\n-    private EchoRequest(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }\n-\n-    private static final EchoRequest defaultInstance;\n-    public static EchoRequest getDefaultInstance() {\n-      return defaultInstance;\n-    }\n-\n-    public EchoRequest getDefaultInstanceForType() {\n-      return defaultInstance;\n-    }\n-\n-    private final com.google.protobuf.UnknownFieldSet unknownFields;\n-    @Override\n-    public final com.google.protobuf.UnknownFieldSet\n-        getUnknownFields() {\n-      return this.unknownFields;\n-    }\n-    private EchoRequest(\n-        com.google.protobuf.CodedInputStream input,\n-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-        throws com.google.protobuf.InvalidProtocolBufferException {\n-      initFields();\n-      int mutable_bitField0_ = 0;\n-      com.google.protobuf.UnknownFieldSet.Builder unknownFields =\n-          com.google.protobuf.UnknownFieldSet.newBuilder();\n-      try {\n-        boolean done = false;\n-        while (!done) {\n-          int tag = input.readTag();\n-          switch (tag) {\n-            case 0:\n-              done = true;\n-              break;\n-            default: {\n-              if (!parseUnknownField(input, unknownFields,\n-                                     extensionRegistry, tag)) {\n-                done = true;\n-              }\n-              break;\n-            }\n-            case 10: {\n-              bitField0_ |= 0x00000001;\n-              message_ = input.readBytes();\n-              break;\n-            }\n-          }\n-        }\n-      } catch (com.google.protobuf.InvalidProtocolBufferException e) {\n-        throw e.setUnfinishedMessage(this);\n-      } catch (java.io.IOException e) {\n-        throw new com.google.protobuf.InvalidProtocolBufferException(\n-            e.getMessage()).setUnfinishedMessage(this);\n-      } finally {\n-        this.unknownFields = unknownFields.build();\n-        makeExtensionsImmutable();\n-      }\n-    }\n-    public static final com.google.protobuf.Descriptors.Descriptor\n-        getDescriptor() {\n-      return org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.internal_static_example_for_cpp_EchoRequest_descriptor;\n-    }\n-\n-    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable\n-        internalGetFieldAccessorTable() {\n-      return org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.internal_static_example_for_cpp_EchoRequest_fieldAccessorTable\n-          .ensureFieldAccessorsInitialized(\n-              org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest.class, org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest.Builder.class);\n-    }\n-\n-    public static com.google.protobuf.Parser<EchoRequest> PARSER =\n-        new com.google.protobuf.AbstractParser<EchoRequest>() {\n-      public EchoRequest parsePartialFrom(\n-          com.google.protobuf.CodedInputStream input,\n-          com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-          throws com.google.protobuf.InvalidProtocolBufferException {\n-        return new EchoRequest(input, extensionRegistry);\n-      }\n-    };\n-\n-    @Override\n-    public com.google.protobuf.Parser<EchoRequest> getParserForType() {\n-      return PARSER;\n-    }\n-\n-    private int bitField0_;\n-    // required string message = 1;\n-    public static final int MESSAGE_FIELD_NUMBER = 1;\n-    private Object message_;\n-    /**\n-     * <code>required string message = 1;</code>\n-     */\n-    public boolean hasMessage() {\n-      return ((bitField0_ & 0x00000001) == 0x00000001);\n-    }\n-    /**\n-     * <code>required string message = 1;</code>\n-     */\n-    public String getMessage() {\n-      Object ref = message_;\n-      if (ref instanceof String) {\n-        return (String) ref;\n-      } else {\n-        com.google.protobuf.ByteString bs =\n-            (com.google.protobuf.ByteString) ref;\n-        String s = bs.toStringUtf8();\n-        if (bs.isValidUtf8()) {\n-          message_ = s;\n-        }\n-        return s;\n-      }\n-    }\n-    /**\n-     * <code>required string message = 1;</code>\n-     */\n-    public com.google.protobuf.ByteString\n-        getMessageBytes() {\n-      Object ref = message_;\n-      if (ref instanceof String) {\n-        com.google.protobuf.ByteString b =\n-            com.google.protobuf.ByteString.copyFromUtf8(\n-                (String) ref);\n-        message_ = b;\n-        return b;\n-      } else {\n-        return (com.google.protobuf.ByteString) ref;\n-      }\n-    }\n-\n-    private void initFields() {\n-      message_ = \"\";\n-    }\n-    private byte memoizedIsInitialized = -1;\n-    public final boolean isInitialized() {\n-      byte isInitialized = memoizedIsInitialized;\n-      if (isInitialized != -1) return isInitialized == 1;\n-\n-      if (!hasMessage()) {\n-        memoizedIsInitialized = 0;\n-        return false;\n-      }\n-      memoizedIsInitialized = 1;\n-      return true;\n-    }\n-\n-    public void writeTo(com.google.protobuf.CodedOutputStream output)\n-                        throws java.io.IOException {\n-      getSerializedSize();\n-      if (((bitField0_ & 0x00000001) == 0x00000001)) {\n-        output.writeBytes(1, getMessageBytes());\n-      }\n-      getUnknownFields().writeTo(output);\n-    }\n-\n-    private int memoizedSerializedSize = -1;\n-    public int getSerializedSize() {\n-      int size = memoizedSerializedSize;\n-      if (size != -1) return size;\n-\n-      size = 0;\n-      if (((bitField0_ & 0x00000001) == 0x00000001)) {\n-        size += com.google.protobuf.CodedOutputStream\n-          .computeBytesSize(1, getMessageBytes());\n-      }\n-      size += getUnknownFields().getSerializedSize();\n-      memoizedSerializedSize = size;\n-      return size;\n-    }\n-\n-    private static final long serialVersionUID = 0L;\n-    @Override\n-    protected Object writeReplace()\n-        throws java.io.ObjectStreamException {\n-      return super.writeReplace();\n-    }\n-\n-    public static org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest parseFrom(\n-        com.google.protobuf.ByteString data)\n-        throws com.google.protobuf.InvalidProtocolBufferException {\n-      return PARSER.parseFrom(data);\n-    }\n-    public static org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest parseFrom(\n-        com.google.protobuf.ByteString data,\n-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-        throws com.google.protobuf.InvalidProtocolBufferException {\n-      return PARSER.parseFrom(data, extensionRegistry);\n-    }\n-    public static org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest parseFrom(byte[] data)\n-        throws com.google.protobuf.InvalidProtocolBufferException {\n-      return PARSER.parseFrom(data);\n-    }\n-    public static org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest parseFrom(\n-        byte[] data,\n-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-        throws com.google.protobuf.InvalidProtocolBufferException {\n-      return PARSER.parseFrom(data, extensionRegistry);\n-    }\n-    public static org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest parseFrom(java.io.InputStream input)\n-        throws java.io.IOException {\n-      return PARSER.parseFrom(input);\n-    }\n-    public static org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest parseFrom(\n-        java.io.InputStream input,\n-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-        throws java.io.IOException {\n-      return PARSER.parseFrom(input, extensionRegistry);\n-    }\n-    public static org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest parseDelimitedFrom(java.io.InputStream input)\n-        throws java.io.IOException {\n-      return PARSER.parseDelimitedFrom(input);\n-    }\n-    public static org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest parseDelimitedFrom(\n-        java.io.InputStream input,\n-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-        throws java.io.IOException {\n-      return PARSER.parseDelimitedFrom(input, extensionRegistry);\n-    }\n-    public static org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest parseFrom(\n-        com.google.protobuf.CodedInputStream input)\n-        throws java.io.IOException {\n-      return PARSER.parseFrom(input);\n-    }\n-    public static org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest parseFrom(\n-        com.google.protobuf.CodedInputStream input,\n-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-        throws java.io.IOException {\n-      return PARSER.parseFrom(input, extensionRegistry);\n-    }\n-\n-    public static Builder newBuilder() { return Builder.create(); }\n-    public Builder newBuilderForType() { return newBuilder(); }\n-    public static Builder newBuilder(org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest prototype) {\n-      return newBuilder().mergeFrom(prototype);\n-    }\n-    public Builder toBuilder() { return newBuilder(this); }\n-\n-    @Override\n-    protected Builder newBuilderForType(\n-        com.google.protobuf.GeneratedMessage.BuilderParent parent) {\n-      Builder builder = new Builder(parent);\n-      return builder;\n-    }\n-    /**\n-     * Protobuf type {@code example_for_cpp.EchoRequest}\n-     */\n-    public static final class Builder extends\n-        com.google.protobuf.GeneratedMessage.Builder<Builder>\n-       implements org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequestOrBuilder {\n-      public static final com.google.protobuf.Descriptors.Descriptor\n-          getDescriptor() {\n-        return org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.internal_static_example_for_cpp_EchoRequest_descriptor;\n-      }\n-\n-      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable\n-          internalGetFieldAccessorTable() {\n-        return org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.internal_static_example_for_cpp_EchoRequest_fieldAccessorTable\n-            .ensureFieldAccessorsInitialized(\n-                org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest.class, org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest.Builder.class);\n-      }\n-\n-      // Construct using org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest.newBuilder()\n-      private Builder() {\n-        maybeForceBuilderInitialization();\n-      }\n-\n-      private Builder(\n-          com.google.protobuf.GeneratedMessage.BuilderParent parent) {\n-        super(parent);\n-        maybeForceBuilderInitialization();\n-      }\n-      private void maybeForceBuilderInitialization() {\n-        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {\n-        }\n-      }\n-      private static Builder create() {\n-        return new Builder();\n-      }\n-\n-      public Builder clear() {\n-        super.clear();\n-        message_ = \"\";\n-        bitField0_ = (bitField0_ & ~0x00000001);\n-        return this;\n-      }\n-\n-      public Builder clone() {\n-        return create().mergeFrom(buildPartial());\n-      }\n-\n-      public com.google.protobuf.Descriptors.Descriptor\n-          getDescriptorForType() {\n-        return org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.internal_static_example_for_cpp_EchoRequest_descriptor;\n-      }\n-\n-      public org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest getDefaultInstanceForType() {\n-        return org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest.getDefaultInstance();\n-      }\n-\n-      public org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest build() {\n-        org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest result = buildPartial();\n-        if (!result.isInitialized()) {\n-          throw newUninitializedMessageException(result);\n-        }\n-        return result;\n-      }\n-\n-      public org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest buildPartial() {\n-        org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest result = new org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest(this);\n-        int from_bitField0_ = bitField0_;\n-        int to_bitField0_ = 0;\n-        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {\n-          to_bitField0_ |= 0x00000001;\n-        }\n-        result.message_ = message_;\n-        result.bitField0_ = to_bitField0_;\n-        onBuilt();\n-        return result;\n-      }\n-\n-      public Builder mergeFrom(com.google.protobuf.Message other) {\n-        if (other instanceof org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest) {\n-          return mergeFrom((org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest)other);\n-        } else {\n-          super.mergeFrom(other);\n-          return this;\n-        }\n-      }\n-\n-      public Builder mergeFrom(org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest other) {\n-        if (other == org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest.getDefaultInstance()) return this;\n-        if (other.hasMessage()) {\n-          bitField0_ |= 0x00000001;\n-          message_ = other.message_;\n-          onChanged();\n-        }\n-        this.mergeUnknownFields(other.getUnknownFields());\n-        return this;\n-      }\n-\n-      public final boolean isInitialized() {\n-        if (!hasMessage()) {\n-\n-          return false;\n-        }\n-        return true;\n-      }\n-\n-      public Builder mergeFrom(\n-          com.google.protobuf.CodedInputStream input,\n-          com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-          throws java.io.IOException {\n-        org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest parsedMessage = null;\n-        try {\n-          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);\n-        } catch (com.google.protobuf.InvalidProtocolBufferException e) {\n-          parsedMessage = (org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoRequest) e.getUnfinishedMessage();\n-          throw e;\n-        } finally {\n-          if (parsedMessage != null) {\n-            mergeFrom(parsedMessage);\n-          }\n-        }\n-        return this;\n-      }\n-      private int bitField0_;\n-\n-      // required string message = 1;\n-      private Object message_ = \"\";\n-      /**\n-       * <code>required string message = 1;</code>\n-       */\n-      public boolean hasMessage() {\n-        return ((bitField0_ & 0x00000001) == 0x00000001);\n-      }\n-      /**\n-       * <code>required string message = 1;</code>\n-       */\n-      public String getMessage() {\n-        Object ref = message_;\n-        if (!(ref instanceof String)) {\n-          String s = ((com.google.protobuf.ByteString) ref)\n-              .toStringUtf8();\n-          message_ = s;\n-          return s;\n-        } else {\n-          return (String) ref;\n-        }\n-      }\n-      /**\n-       * <code>required string message = 1;</code>\n-       */\n-      public com.google.protobuf.ByteString\n-          getMessageBytes() {\n-        Object ref = message_;\n-        if (ref instanceof String) {\n-          com.google.protobuf.ByteString b =\n-              com.google.protobuf.ByteString.copyFromUtf8(\n-                  (String) ref);\n-          message_ = b;\n-          return b;\n-        } else {\n-          return (com.google.protobuf.ByteString) ref;\n-        }\n-      }\n-      /**\n-       * <code>required string message = 1;</code>\n-       */\n-      public Builder setMessage(\n-          String value) {\n-        if (value == null) {\n-    throw new NullPointerException();\n-  }\n-  bitField0_ |= 0x00000001;\n-        message_ = value;\n-        onChanged();\n-        return this;\n-      }\n-      /**\n-       * <code>required string message = 1;</code>\n-       */\n-      public Builder clearMessage() {\n-        bitField0_ = (bitField0_ & ~0x00000001);\n-        message_ = getDefaultInstance().getMessage();\n-        onChanged();\n-        return this;\n-      }\n-      /**\n-       * <code>required string message = 1;</code>\n-       */\n-      public Builder setMessageBytes(\n-          com.google.protobuf.ByteString value) {\n-        if (value == null) {\n-    throw new NullPointerException();\n-  }\n-  bitField0_ |= 0x00000001;\n-        message_ = value;\n-        onChanged();\n-        return this;\n-      }\n-\n-      // @@protoc_insertion_point(builder_scope:example_for_cpp.EchoRequest)\n-    }\n-\n-    static {\n-      defaultInstance = new EchoRequest(true);\n-      defaultInstance.initFields();\n-    }\n-\n-    // @@protoc_insertion_point(class_scope:example_for_cpp.EchoRequest)\n-  }\n-\n-  public interface EchoResponseOrBuilder\n-      extends com.google.protobuf.MessageOrBuilder {\n-\n-    // required string message = 1;\n-    /**\n-     * <code>required string message = 1;</code>\n-     */\n-    boolean hasMessage();\n-    /**\n-     * <code>required string message = 1;</code>\n-     */\n-    String getMessage();\n-    /**\n-     * <code>required string message = 1;</code>\n-     */\n-    com.google.protobuf.ByteString\n-        getMessageBytes();\n-  }\n-  /**\n-   * Protobuf type {@code example_for_cpp.EchoResponse}\n-   */\n-  public static final class EchoResponse extends\n-      com.google.protobuf.GeneratedMessage\n-      implements EchoResponseOrBuilder {\n-    // Use EchoResponse.newBuilder() to construct.\n-    private EchoResponse(com.google.protobuf.GeneratedMessage.Builder<?> builder) {\n-      super(builder);\n-      this.unknownFields = builder.getUnknownFields();\n-    }\n-    private EchoResponse(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }\n-\n-    private static final EchoResponse defaultInstance;\n-    public static EchoResponse getDefaultInstance() {\n-      return defaultInstance;\n-    }\n-\n-    public EchoResponse getDefaultInstanceForType() {\n-      return defaultInstance;\n-    }\n-\n-    private final com.google.protobuf.UnknownFieldSet unknownFields;\n-    @Override\n-    public final com.google.protobuf.UnknownFieldSet\n-        getUnknownFields() {\n-      return this.unknownFields;\n-    }\n-    private EchoResponse(\n-        com.google.protobuf.CodedInputStream input,\n-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-        throws com.google.protobuf.InvalidProtocolBufferException {\n-      initFields();\n-      int mutable_bitField0_ = 0;\n-      com.google.protobuf.UnknownFieldSet.Builder unknownFields =\n-          com.google.protobuf.UnknownFieldSet.newBuilder();\n-      try {\n-        boolean done = false;\n-        while (!done) {\n-          int tag = input.readTag();\n-          switch (tag) {\n-            case 0:\n-              done = true;\n-              break;\n-            default: {\n-              if (!parseUnknownField(input, unknownFields,\n-                                     extensionRegistry, tag)) {\n-                done = true;\n-              }\n-              break;\n-            }\n-            case 10: {\n-              bitField0_ |= 0x00000001;\n-              message_ = input.readBytes();\n-              break;\n-            }\n-          }\n-        }\n-      } catch (com.google.protobuf.InvalidProtocolBufferException e) {\n-        throw e.setUnfinishedMessage(this);\n-      } catch (java.io.IOException e) {\n-        throw new com.google.protobuf.InvalidProtocolBufferException(\n-            e.getMessage()).setUnfinishedMessage(this);\n-      } finally {\n-        this.unknownFields = unknownFields.build();\n-        makeExtensionsImmutable();\n-      }\n-    }\n-    public static final com.google.protobuf.Descriptors.Descriptor\n-        getDescriptor() {\n-      return org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.internal_static_example_for_cpp_EchoResponse_descriptor;\n-    }\n-\n-    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable\n-        internalGetFieldAccessorTable() {\n-      return org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.internal_static_example_for_cpp_EchoResponse_fieldAccessorTable\n-          .ensureFieldAccessorsInitialized(\n-              org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse.class, org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse.Builder.class);\n-    }\n-\n-    public static com.google.protobuf.Parser<EchoResponse> PARSER =\n-        new com.google.protobuf.AbstractParser<EchoResponse>() {\n-      public EchoResponse parsePartialFrom(\n-          com.google.protobuf.CodedInputStream input,\n-          com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-          throws com.google.protobuf.InvalidProtocolBufferException {\n-        return new EchoResponse(input, extensionRegistry);\n-      }\n-    };\n-\n-    @Override\n-    public com.google.protobuf.Parser<EchoResponse> getParserForType() {\n-      return PARSER;\n-    }\n-\n-    private int bitField0_;\n-    // required string message = 1;\n-    public static final int MESSAGE_FIELD_NUMBER = 1;\n-    private Object message_;\n-    /**\n-     * <code>required string message = 1;</code>\n-     */\n-    public boolean hasMessage() {\n-      return ((bitField0_ & 0x00000001) == 0x00000001);\n-    }\n-    /**\n-     * <code>required string message = 1;</code>\n-     */\n-    public String getMessage() {\n-      Object ref = message_;\n-      if (ref instanceof String) {\n-        return (String) ref;\n-      } else {\n-        com.google.protobuf.ByteString bs =\n-            (com.google.protobuf.ByteString) ref;\n-        String s = bs.toStringUtf8();\n-        if (bs.isValidUtf8()) {\n-          message_ = s;\n-        }\n-        return s;\n-      }\n-    }\n-    /**\n-     * <code>required string message = 1;</code>\n-     */\n-    public com.google.protobuf.ByteString\n-        getMessageBytes() {\n-      Object ref = message_;\n-      if (ref instanceof String) {\n-        com.google.protobuf.ByteString b =\n-            com.google.protobuf.ByteString.copyFromUtf8(\n-                (String) ref);\n-        message_ = b;\n-        return b;\n-      } else {\n-        return (com.google.protobuf.ByteString) ref;\n-      }\n-    }\n-\n-    private void initFields() {\n-      message_ = \"\";\n-    }\n-    private byte memoizedIsInitialized = -1;\n-    public final boolean isInitialized() {\n-      byte isInitialized = memoizedIsInitialized;\n-      if (isInitialized != -1) return isInitialized == 1;\n-\n-      if (!hasMessage()) {\n-        memoizedIsInitialized = 0;\n-        return false;\n-      }\n-      memoizedIsInitialized = 1;\n-      return true;\n-    }\n-\n-    public void writeTo(com.google.protobuf.CodedOutputStream output)\n-                        throws java.io.IOException {\n-      getSerializedSize();\n-      if (((bitField0_ & 0x00000001) == 0x00000001)) {\n-        output.writeBytes(1, getMessageBytes());\n-      }\n-      getUnknownFields().writeTo(output);\n-    }\n-\n-    private int memoizedSerializedSize = -1;\n-    public int getSerializedSize() {\n-      int size = memoizedSerializedSize;\n-      if (size != -1) return size;\n-\n-      size = 0;\n-      if (((bitField0_ & 0x00000001) == 0x00000001)) {\n-        size += com.google.protobuf.CodedOutputStream\n-          .computeBytesSize(1, getMessageBytes());\n-      }\n-      size += getUnknownFields().getSerializedSize();\n-      memoizedSerializedSize = size;\n-      return size;\n-    }\n-\n-    private static final long serialVersionUID = 0L;\n-    @Override\n-    protected Object writeReplace()\n-        throws java.io.ObjectStreamException {\n-      return super.writeReplace();\n-    }\n-\n-    public static org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse parseFrom(\n-        com.google.protobuf.ByteString data)\n-        throws com.google.protobuf.InvalidProtocolBufferException {\n-      return PARSER.parseFrom(data);\n-    }\n-    public static org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse parseFrom(\n-        com.google.protobuf.ByteString data,\n-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-        throws com.google.protobuf.InvalidProtocolBufferException {\n-      return PARSER.parseFrom(data, extensionRegistry);\n-    }\n-    public static org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse parseFrom(byte[] data)\n-        throws com.google.protobuf.InvalidProtocolBufferException {\n-      return PARSER.parseFrom(data);\n-    }\n-    public static org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse parseFrom(\n-        byte[] data,\n-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-        throws com.google.protobuf.InvalidProtocolBufferException {\n-      return PARSER.parseFrom(data, extensionRegistry);\n-    }\n-    public static org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse parseFrom(java.io.InputStream input)\n-        throws java.io.IOException {\n-      return PARSER.parseFrom(input);\n-    }\n-    public static org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse parseFrom(\n-        java.io.InputStream input,\n-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-        throws java.io.IOException {\n-      return PARSER.parseFrom(input, extensionRegistry);\n-    }\n-    public static org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse parseDelimitedFrom(java.io.InputStream input)\n-        throws java.io.IOException {\n-      return PARSER.parseDelimitedFrom(input);\n-    }\n-    public static org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse parseDelimitedFrom(\n-        java.io.InputStream input,\n-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-        throws java.io.IOException {\n-      return PARSER.parseDelimitedFrom(input, extensionRegistry);\n-    }\n-    public static org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse parseFrom(\n-        com.google.protobuf.CodedInputStream input)\n-        throws java.io.IOException {\n-      return PARSER.parseFrom(input);\n-    }\n-    public static org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse parseFrom(\n-        com.google.protobuf.CodedInputStream input,\n-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-        throws java.io.IOException {\n-      return PARSER.parseFrom(input, extensionRegistry);\n-    }\n-\n-    public static Builder newBuilder() { return Builder.create(); }\n-    public Builder newBuilderForType() { return newBuilder(); }\n-    public static Builder newBuilder(org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse prototype) {\n-      return newBuilder().mergeFrom(prototype);\n-    }\n-    public Builder toBuilder() { return newBuilder(this); }\n-\n-    @Override\n-    protected Builder newBuilderForType(\n-        com.google.protobuf.GeneratedMessage.BuilderParent parent) {\n-      Builder builder = new Builder(parent);\n-      return builder;\n-    }\n-    /**\n-     * Protobuf type {@code example_for_cpp.EchoResponse}\n-     */\n-    public static final class Builder extends\n-        com.google.protobuf.GeneratedMessage.Builder<Builder>\n-       implements org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponseOrBuilder {\n-      public static final com.google.protobuf.Descriptors.Descriptor\n-          getDescriptor() {\n-        return org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.internal_static_example_for_cpp_EchoResponse_descriptor;\n-      }\n-\n-      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable\n-          internalGetFieldAccessorTable() {\n-        return org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.internal_static_example_for_cpp_EchoResponse_fieldAccessorTable\n-            .ensureFieldAccessorsInitialized(\n-                org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse.class, org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse.Builder.class);\n-      }\n-\n-      // Construct using org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse.newBuilder()\n-      private Builder() {\n-        maybeForceBuilderInitialization();\n-      }\n-\n-      private Builder(\n-          com.google.protobuf.GeneratedMessage.BuilderParent parent) {\n-        super(parent);\n-        maybeForceBuilderInitialization();\n-      }\n-      private void maybeForceBuilderInitialization() {\n-        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {\n-        }\n-      }\n-      private static Builder create() {\n-        return new Builder();\n-      }\n-\n-      public Builder clear() {\n-        super.clear();\n-        message_ = \"\";\n-        bitField0_ = (bitField0_ & ~0x00000001);\n-        return this;\n-      }\n-\n-      public Builder clone() {\n-        return create().mergeFrom(buildPartial());\n-      }\n-\n-      public com.google.protobuf.Descriptors.Descriptor\n-          getDescriptorForType() {\n-        return org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.internal_static_example_for_cpp_EchoResponse_descriptor;\n-      }\n-\n-      public org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse getDefaultInstanceForType() {\n-        return org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse.getDefaultInstance();\n-      }\n-\n-      public org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse build() {\n-        org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse result = buildPartial();\n-        if (!result.isInitialized()) {\n-          throw newUninitializedMessageException(result);\n-        }\n-        return result;\n-      }\n-\n-      public org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse buildPartial() {\n-        org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse result = new org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse(this);\n-        int from_bitField0_ = bitField0_;\n-        int to_bitField0_ = 0;\n-        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {\n-          to_bitField0_ |= 0x00000001;\n-        }\n-        result.message_ = message_;\n-        result.bitField0_ = to_bitField0_;\n-        onBuilt();\n-        return result;\n-      }\n-\n-      public Builder mergeFrom(com.google.protobuf.Message other) {\n-        if (other instanceof org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse) {\n-          return mergeFrom((org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse)other);\n-        } else {\n-          super.mergeFrom(other);\n-          return this;\n-        }\n-      }\n-\n-      public Builder mergeFrom(org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse other) {\n-        if (other == org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse.getDefaultInstance()) return this;\n-        if (other.hasMessage()) {\n-          bitField0_ |= 0x00000001;\n-          message_ = other.message_;\n-          onChanged();\n-        }\n-        this.mergeUnknownFields(other.getUnknownFields());\n-        return this;\n-      }\n-\n-      public final boolean isInitialized() {\n-        if (!hasMessage()) {\n-\n-          return false;\n-        }\n-        return true;\n-      }\n-\n-      public Builder mergeFrom(\n-          com.google.protobuf.CodedInputStream input,\n-          com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-          throws java.io.IOException {\n-        org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse parsedMessage = null;\n-        try {\n-          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);\n-        } catch (com.google.protobuf.InvalidProtocolBufferException e) {\n-          parsedMessage = (org.apache.skywalking.apm.testcase.baidu.brpc.interfaces.Echo.EchoResponse) e.getUnfinishedMessage();\n-          throw e;\n-        } finally {\n-          if (parsedMessage != null) {\n-            mergeFrom(parsedMessage);\n-          }\n-        }\n-        return this;\n-      }\n-      private int bitField0_;\n-\n-      // required string message = 1;\n-      private Object message_ = \"\";\n-      /**\n-       * <code>required string message = 1;</code>\n-       */\n-      public boolean hasMessage() {\n-        return ((bitField0_ & 0x00000001) == 0x00000001);\n-      }\n-      /**\n-       * <code>required string message = 1;</code>\n-       */\n-      public String getMessage() {\n-        Object ref = message_;\n-        if (!(ref instanceof String)) {\n-          String s = ((com.google.protobuf.ByteString) ref)\n-              .toStringUtf8();\n-          message_ = s;\n-          return s;\n-        } else {\n-          return (String) ref;\n-        }\n-      }\n-      /**\n-       * <code>required string message = 1;</code>\n-       */\n-      public com.google.protobuf.ByteString\n-          getMessageBytes() {\n-        Object ref = message_;\n-        if (ref instanceof String) {\n-          com.google.protobuf.ByteString b =\n-              com.google.protobuf.ByteString.copyFromUtf8(\n-                  (String) ref);\n-          message_ = b;\n-          return b;\n-        } else {\n-          return (com.google.protobuf.ByteString) ref;\n-        }\n-      }\n-      /**\n-       * <code>required string message = 1;</code>\n-       */\n-      public Builder setMessage(\n-          String value) {\n-        if (value == null) {\n-    throw new NullPointerException();\n-  }\n-  bitField0_ |= 0x00000001;\n-        message_ = value;\n-        onChanged();\n-        return this;\n-      }\n-      /**\n-       * <code>required string message = 1;</code>\n-       */\n-      public Builder clearMessage() {\n-        bitField0_ = (bitField0_ & ~0x00000001);\n-        message_ = getDefaultInstance().getMessage();\n-        onChanged();\n-        return this;\n-      }\n-      /**\n-       * <code>required string message = 1;</code>\n-       */\n-      public Builder setMessageBytes(\n-          com.google.protobuf.ByteString value) {\n-        if (value == null) {\n-    throw new NullPointerException();\n-  }\n-  bitField0_ |= 0x00000001;\n-        message_ = value;\n-        onChanged();\n-        return this;\n-      }\n-\n-      // @@protoc_insertion_point(builder_scope:example_for_cpp.EchoResponse)\n-    }\n-\n-    static {\n-      defaultInstance = new EchoResponse(true);\n-      defaultInstance.initFields();\n-    }\n-\n-    // @@protoc_insertion_point(class_scope:example_for_cpp.EchoResponse)\n-  }\n-\n-  private static com.google.protobuf.Descriptors.Descriptor\n-    internal_static_example_for_cpp_EchoRequest_descriptor;\n-  private static\n-    com.google.protobuf.GeneratedMessage.FieldAccessorTable\n-      internal_static_example_for_cpp_EchoRequest_fieldAccessorTable;\n-  private static com.google.protobuf.Descriptors.Descriptor\n-    internal_static_example_for_cpp_EchoResponse_descriptor;\n-  private static\n-    com.google.protobuf.GeneratedMessage.FieldAccessorTable\n-      internal_static_example_for_cpp_EchoResponse_fieldAccessorTable;\n-\n-  public static com.google.protobuf.Descriptors.FileDescriptor\n-      getDescriptor() {\n-    return descriptor;\n-  }\n-  private static com.google.protobuf.Descriptors.FileDescriptor\n-      descriptor;\n-  static {\n-    String[] descriptorData = {\n-      \"\\n\\necho.proto\\022\\017example_for_cpp\\\"\\036\\n\\013EchoReq\" +\n-      \"uest\\022\\017\\n\\007message\\030\\001 \\002(\\t\\\"\\037\\n\\014EchoResponse\\022\\017\\n\" +\n-      \"\\007message\\030\\001 \\002(\\t2R\\n\\013EchoService\\022C\\n\\004Echo\\022\\034.\" +\n-      \"example_for_cpp.EchoRequest\\032\\035.example_fo\" +\n-      \"r_cpp.EchoResponseB*\\n\\037com.baidu.brpc.exa\" +\n-      \"mple.standardB\\004Echo\\200\\001\\001\"\n-    };\n-    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =\n-      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {\n-        public com.google.protobuf.ExtensionRegistry assignDescriptors(\n-            com.google.protobuf.Descriptors.FileDescriptor root) {\n-          descriptor = root;\n-          internal_static_example_for_cpp_EchoRequest_descriptor =\n-            getDescriptor().getMessageTypes().get(0);\n-          internal_static_example_for_cpp_EchoRequest_fieldAccessorTable = new\n-            com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n-              internal_static_example_for_cpp_EchoRequest_descriptor,\n-              new String[] { \"Message\", });\n-          internal_static_example_for_cpp_EchoResponse_descriptor =\n-            getDescriptor().getMessageTypes().get(1);\n-          internal_static_example_for_cpp_EchoResponse_fieldAccessorTable = new\n-            com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n-              internal_static_example_for_cpp_EchoResponse_descriptor,\n-              new String[] { \"Message\", });\n-          return null;\n-        }\n-      };\n-    com.google.protobuf.Descriptors.FileDescriptor\n-      .internalBuildGeneratedFileFrom(descriptorData,\n-        new com.google.protobuf.Descriptors.FileDescriptor[] {\n-        }, assigner);\n-  }\n-\n-  // @@protoc_insertion_point(outer_class_scope)\n-}\n"}}, {"oid": "66a7f9f02f27b8d4598db3ce7b9a035b275cab87", "url": "https://github.com/apache/skywalking/commit/66a7f9f02f27b8d4598db3ce7b9a035b275cab87", "message": "change scenario test with grpc", "committedDate": "2020-11-01T06:00:59Z", "type": "commit"}, {"oid": "94ccfce533b19bdbfd4c15052b8622b15d16876f", "url": "https://github.com/apache/skywalking/commit/94ccfce533b19bdbfd4c15052b8622b15d16876f", "message": "Merge remote-tracking branch 'upstream/master' into correlation-inject-spans", "committedDate": "2020-11-01T06:20:24Z", "type": "commit"}, {"oid": "a98ec873ead9bef5cce1e90e80dd71821f3f1e6d", "url": "https://github.com/apache/skywalking/commit/a98ec873ead9bef5cce1e90e80dd71821f3f1e6d", "message": "resolve the conflict", "committedDate": "2020-11-01T06:27:48Z", "type": "commit"}, {"oid": "be31e3bc9ad7209696a90794e58430fd0afc2194", "url": "https://github.com/apache/skywalking/commit/be31e3bc9ad7209696a90794e58430fd0afc2194", "message": "add change log", "committedDate": "2020-11-01T06:49:22Z", "type": "commit"}, {"oid": "cf4988093e1c14a325e768d3b2a533e7eb48228a", "url": "https://github.com/apache/skywalking/commit/cf4988093e1c14a325e768d3b2a533e7eb48228a", "message": "Merge branch 'master' into correlation-inject-spans", "committedDate": "2020-11-01T07:29:15Z", "type": "commit"}, {"oid": "9e35423156f5cea195c4be9371402023255d3f30", "url": "https://github.com/apache/skywalking/commit/9e35423156f5cea195c4be9371402023255d3f30", "message": "polish the change log", "committedDate": "2020-11-01T07:32:54Z", "type": "commit"}, {"oid": "65528028f569370fe07519384691bc09735c0f5b", "url": "https://github.com/apache/skywalking/commit/65528028f569370fe07519384691bc09735c0f5b", "message": "Merge branch 'correlation-inject-spans' of https://github.com/EvanLjp/skywalking into correlation-inject-spans", "committedDate": "2020-11-01T07:35:31Z", "type": "commit"}, {"oid": "13ec05b8b5cbc6d603ad09ae4e42348c7ea4fd71", "url": "https://github.com/apache/skywalking/commit/13ec05b8b5cbc6d603ad09ae4e42348c7ea4fd71", "message": "Update test/plugin/scenarios/correlation-autotag-scenario/pom.xml", "committedDate": "2020-11-01T08:46:41Z", "type": "commit"}, {"oid": "afa5d30b90376bc9d7d4a11d02699e195a2a451c", "url": "https://github.com/apache/skywalking/commit/afa5d30b90376bc9d7d4a11d02699e195a2a451c", "message": "change tookit version", "committedDate": "2020-11-01T09:09:11Z", "type": "commit"}, {"oid": "3b8a5f4f5e6a901ca28a5ff55f47c04d6e35598b", "url": "https://github.com/apache/skywalking/commit/3b8a5f4f5e6a901ca28a5ff55f47c04d6e35598b", "message": "Merge branch 'correlation-inject-spans' of https://github.com/EvanLjp/skywalking into correlation-inject-spans", "committedDate": "2020-11-01T09:09:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU5NjMzNw==", "url": "https://github.com/apache/skywalking/pull/5685#discussion_r515596337", "bodyText": "This should be changed to carrier.extractCorrelationTo(span); right? handle should be hidden.", "author": "wu-sheng", "createdAt": "2020-11-01T09:10:01Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/TracingContext.java", "diffHunk": "@@ -189,6 +189,7 @@ public void extract(ContextCarrier carrier) {\n \n         carrier.extractExtensionTo(span);\n         this.correlationContext.extract(carrier);\n+        this.correlationContext.handle(span);", "originalCommit": "13ec05b8b5cbc6d603ad09ae4e42348c7ea4fd71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68bd85844edc9a5c2c8e34fe2a1216eca98cb0f2", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/TracingContext.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/TracingContext.java\nindex d33670411d..73ff7c6f0f 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/TracingContext.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/TracingContext.java\n\n@@ -189,7 +189,6 @@ public class TracingContext implements AbstractTracerContext {\n \n         carrier.extractExtensionTo(span);\n         this.correlationContext.extract(carrier);\n-        this.correlationContext.handle(span);\n         this.extensionContext.extract(carrier);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU5NjcwOA==", "url": "https://github.com/apache/skywalking/pull/5685#discussion_r515596708", "bodyText": "ContextManager#activeSpan could be NPE inside, try #isActive.", "author": "wu-sheng", "createdAt": "2020-11-01T09:14:05Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CorrelationContext.java", "diffHunk": "@@ -70,7 +85,9 @@ public CorrelationContext() {\n         if (data.size() >= Config.Correlation.ELEMENT_MAX_NUMBER) {\n             return Optional.empty();\n         }\n-\n+        if (AUTO_TAG_KEYS.contains(key) && Objects.nonNull(ContextManager.activeSpan())) {", "originalCommit": "13ec05b8b5cbc6d603ad09ae4e42348c7ea4fd71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68bd85844edc9a5c2c8e34fe2a1216eca98cb0f2", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CorrelationContext.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CorrelationContext.java\nindex aa07d3277e..41f4164536 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CorrelationContext.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/CorrelationContext.java\n\n@@ -85,7 +85,7 @@ public class CorrelationContext {\n         if (data.size() >= Config.Correlation.ELEMENT_MAX_NUMBER) {\n             return Optional.empty();\n         }\n-        if (AUTO_TAG_KEYS.contains(key) && Objects.nonNull(ContextManager.activeSpan())) {\n+        if (AUTO_TAG_KEYS.contains(key) && ContextManager.isActive()) {\n             ContextManager.activeSpan().tag(new StringTag(key), value);\n         }\n         // setting\n"}}, {"oid": "68bd85844edc9a5c2c8e34fe2a1216eca98cb0f2", "url": "https://github.com/apache/skywalking/commit/68bd85844edc9a5c2c8e34fe2a1216eca98cb0f2", "message": "polish some codes", "committedDate": "2020-11-01T09:17:19Z", "type": "commit"}, {"oid": "c589f35314bf08a0170619e642452c4450d219e8", "url": "https://github.com/apache/skywalking/commit/c589f35314bf08a0170619e642452c4450d219e8", "message": "Ignore codecov error when reporting because it's harmless", "committedDate": "2020-11-01T10:48:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYxMTgxNA==", "url": "https://github.com/apache/skywalking/pull/5685#discussion_r515611814", "bodyText": "I mean to create a method extractCorrelationTo.", "author": "wu-sheng", "createdAt": "2020-11-01T11:48:47Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextCarrier.java", "diffHunk": "@@ -94,6 +94,7 @@ public ExtensionInjector extensionInjector() {\n      */\n     void extractExtensionTo(AbstractSpan span) {\n         this.extensionContext.handle(span);\n+        this.correlationContext.handle(span);", "originalCommit": "c589f35314bf08a0170619e642452c4450d219e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5762849027ee73b428809c251b0f66ec4dca7552", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextCarrier.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextCarrier.java\nindex 4c9b514d9e..3c185cb73d 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextCarrier.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/context/ContextCarrier.java\n\n@@ -94,6 +94,13 @@ public class ContextCarrier implements Serializable {\n      */\n     void extractExtensionTo(AbstractSpan span) {\n         this.extensionContext.handle(span);\n+\n+    }\n+\n+    /**\n+     * Extract the correlation context to the given span\n+     */\n+    void extractCorrelationTo(AbstractSpan span) {\n         this.correlationContext.handle(span);\n     }\n \n"}}, {"oid": "5762849027ee73b428809c251b0f66ec4dca7552", "url": "https://github.com/apache/skywalking/commit/5762849027ee73b428809c251b0f66ec4dca7552", "message": "polish some codes", "committedDate": "2020-11-01T11:57:26Z", "type": "commit"}, {"oid": "56cf1a7fdce8eae39ccb555d0baf783dc8e2cd09", "url": "https://github.com/apache/skywalking/commit/56cf1a7fdce8eae39ccb555d0baf783dc8e2cd09", "message": "Merge branch 'correlation-inject-spans' of https://github.com/EvanLjp/skywalking into correlation-inject-spans", "committedDate": "2020-11-01T11:58:04Z", "type": "commit"}]}