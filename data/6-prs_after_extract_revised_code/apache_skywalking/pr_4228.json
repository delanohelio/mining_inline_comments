{"pr_number": 4228, "pr_title": "Support Browser protocol at OAP", "pr_createdAt": "2020-01-13T14:01:25Z", "pr_url": "https://github.com/apache/skywalking/pull/4228", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIxMTA5MA==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368211090", "bodyText": "If these are TODOs, why add this?", "author": "wu-sheng", "createdAt": "2020-01-18T06:55:20Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java", "diffHunk": "@@ -82,6 +82,12 @@ public NotifyHandler(AlarmRulesWatcher alarmRulesWatcher) {\n \n             endpointMetaInAlarm.setName(textName);\n             metaInAlarm = endpointMetaInAlarm;\n+        } else if (DefaultScopeDefine.inServicePageCatalog(scope)) {\n+            // TODO handler service page path catalog\n+            return;\n+        } else if (DefaultScopeDefine.inServiceVersionCatalog(scope)) {\n+            // TODO handler service version page path catalog", "originalCommit": "5bf63428ed4080cac8ea728af56468be8bbaf9ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIxNDIwNg==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368214206", "bodyText": "Done.", "author": "arugal", "createdAt": "2020-01-18T08:14:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIxMTA5MA=="}], "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java\nindex e839b78df9..d46fe39793 100644\n--- a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java\n+++ b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java\n\n@@ -40,54 +45,52 @@ public class NotifyHandler implements MetricsNotify {\n         core = new AlarmCore(alarmRulesWatcher);\n     }\n \n-    @Override public void notify(Metrics metrics) {\n-        WithMetadata withMetadata = (WithMetadata)metrics;\n+    @Override\n+    public void notify(Metrics metrics) {\n+        WithMetadata withMetadata = (WithMetadata) metrics;\n         MetricsMetaInfo meta = withMetadata.getMeta();\n         int scope = meta.getScope();\n \n-        if (!DefaultScopeDefine.inServiceCatalog(scope)\n-            && !DefaultScopeDefine.inServiceInstanceCatalog(scope)\n-            && !DefaultScopeDefine.inEndpointCatalog(scope)) {\n+        if (!DefaultScopeDefine.inServiceCatalog(scope) && !DefaultScopeDefine.inServiceInstanceCatalog(\n+            scope) && !DefaultScopeDefine\n+            .inEndpointCatalog(scope)) {\n             return;\n         }\n \n         MetaInAlarm metaInAlarm;\n         if (DefaultScopeDefine.inServiceCatalog(scope)) {\n-            int serviceId = Integer.parseInt(meta.getId());\n-            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n+            final String serviceId = meta.getId();\n+            final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(\n+                serviceId);\n             ServiceMetaInAlarm serviceMetaInAlarm = new ServiceMetaInAlarm();\n             serviceMetaInAlarm.setMetricsName(meta.getMetricsName());\n             serviceMetaInAlarm.setId(serviceId);\n-            serviceMetaInAlarm.setName(serviceInventory.getName());\n+            serviceMetaInAlarm.setName(serviceIDDefinition.getName());\n             metaInAlarm = serviceMetaInAlarm;\n         } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n-            int serviceInstanceId = Integer.parseInt(meta.getId());\n-            ServiceInstanceInventory serviceInstanceInventory = serviceInstanceInventoryCache.get(serviceInstanceId);\n+            final String instanceId = meta.getId();\n+            final IDManager.ServiceInstanceID.InstanceIDDefinition instanceIDDefinition = IDManager.ServiceInstanceID.analysisId(\n+                instanceId);\n+            final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(\n+                instanceIDDefinition.getServiceId());\n             ServiceInstanceMetaInAlarm instanceMetaInAlarm = new ServiceInstanceMetaInAlarm();\n             instanceMetaInAlarm.setMetricsName(meta.getMetricsName());\n-            instanceMetaInAlarm.setId(serviceInstanceId);\n-            instanceMetaInAlarm.setName(serviceInstanceInventory.getName());\n+            instanceMetaInAlarm.setId(instanceId);\n+            instanceMetaInAlarm.setName(instanceIDDefinition.getName() + \" of \" + serviceIDDefinition.getName());\n             metaInAlarm = instanceMetaInAlarm;\n         } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n-            int endpointId = Integer.parseInt(meta.getId());\n-            EndpointInventory endpointInventory = endpointInventoryCache.get(endpointId);\n+            final String endpointId = meta.getId();\n+            final IDManager.EndpointID.EndpointIDDefinition endpointIDDefinition = IDManager.EndpointID.analysisId(\n+                endpointId);\n+            final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(\n+                endpointIDDefinition.getServiceId());\n+\n             EndpointMetaInAlarm endpointMetaInAlarm = new EndpointMetaInAlarm();\n             endpointMetaInAlarm.setMetricsName(meta.getMetricsName());\n-            endpointMetaInAlarm.setId(endpointId);\n-\n-            int serviceId = endpointInventory.getServiceId();\n-            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n-\n-            String textName = endpointInventory.getName() + \" in \" + serviceInventory.getName();\n-\n-            endpointMetaInAlarm.setName(textName);\n+            endpointMetaInAlarm.setId(meta.getId());\n+            endpointMetaInAlarm.setName(\n+                endpointIDDefinition.getEndpointName() + \" in \" + serviceIDDefinition.getName());\n             metaInAlarm = endpointMetaInAlarm;\n-        } else if (DefaultScopeDefine.inServicePageCatalog(scope)) {\n-            // TODO handler service page path catalog\n-            return;\n-        } else if (DefaultScopeDefine.inServiceVersionCatalog(scope)) {\n-            // TODO handler service version page path catalog\n-            return;\n         } else {\n             return;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzMDQ1OQ==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368230459", "bodyText": "Same question about id1", "author": "wu-sheng", "createdAt": "2020-01-18T14:46:24Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmMessageFormatter.java", "diffHunk": "@@ -55,6 +55,9 @@ public AlarmMessageFormatter(String format) {\n                         case \"id\":\n                             valueFroms.add(ValueFrom.ID);\n                             break;\n+                        case \"id1\":\n+                            valueFroms.add(ValueFrom.ID1);", "originalCommit": "7509a1e6fcc7b634823d5d13933b63c340b2a865", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmMessageFormatter.java b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmMessageFormatter.java\nindex 65d2e201e7..1c64549347 100644\n--- a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmMessageFormatter.java\n+++ b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/AlarmMessageFormatter.java\n\n@@ -55,9 +53,6 @@ public class AlarmMessageFormatter {\n                         case \"id\":\n                             valueFroms.add(ValueFrom.ID);\n                             break;\n-                        case \"id1\":\n-                            valueFroms.add(ValueFrom.ID1);\n-                            break;\n                         case \"name\":\n                             valueFroms.add(ValueFrom.NAME);\n                             break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzMDUyMQ==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368230521", "bodyText": "ID1 should not be used in this way. If this is page related alert, then id0=pageId, which is unique, so don't worry about it.", "author": "wu-sheng", "createdAt": "2020-01-18T14:47:39Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java", "diffHunk": "@@ -82,6 +84,38 @@ public NotifyHandler(AlarmRulesWatcher alarmRulesWatcher) {\n \n             endpointMetaInAlarm.setName(textName);\n             metaInAlarm = endpointMetaInAlarm;\n+        } else if (DefaultScopeDefine.inServicePageCatalog(scope)) {\n+            String metricsId = meta.getId();\n+            String[] ids = metricsId.split(Const.ID_SPLIT);\n+            int serviceId = Integer.parseInt(ids[0]);\n+            int pagePathId = Integer.parseInt(ids[1]);", "originalCommit": "7509a1e6fcc7b634823d5d13933b63c340b2a865", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java\nindex 728b443e33..d46fe39793 100644\n--- a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java\n+++ b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java\n\n@@ -42,80 +45,52 @@ public class NotifyHandler implements MetricsNotify {\n         core = new AlarmCore(alarmRulesWatcher);\n     }\n \n-    @Override public void notify(Metrics metrics) {\n-        WithMetadata withMetadata = (WithMetadata)metrics;\n+    @Override\n+    public void notify(Metrics metrics) {\n+        WithMetadata withMetadata = (WithMetadata) metrics;\n         MetricsMetaInfo meta = withMetadata.getMeta();\n         int scope = meta.getScope();\n \n-        if (!DefaultScopeDefine.inServiceCatalog(scope)\n-            && !DefaultScopeDefine.inServiceInstanceCatalog(scope)\n-            && !DefaultScopeDefine.inEndpointCatalog(scope)) {\n+        if (!DefaultScopeDefine.inServiceCatalog(scope) && !DefaultScopeDefine.inServiceInstanceCatalog(\n+            scope) && !DefaultScopeDefine\n+            .inEndpointCatalog(scope)) {\n             return;\n         }\n \n         MetaInAlarm metaInAlarm;\n         if (DefaultScopeDefine.inServiceCatalog(scope)) {\n-            int serviceId = Integer.parseInt(meta.getId());\n-            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n+            final String serviceId = meta.getId();\n+            final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(\n+                serviceId);\n             ServiceMetaInAlarm serviceMetaInAlarm = new ServiceMetaInAlarm();\n             serviceMetaInAlarm.setMetricsName(meta.getMetricsName());\n             serviceMetaInAlarm.setId(serviceId);\n-            serviceMetaInAlarm.setName(serviceInventory.getName());\n+            serviceMetaInAlarm.setName(serviceIDDefinition.getName());\n             metaInAlarm = serviceMetaInAlarm;\n         } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n-            int serviceInstanceId = Integer.parseInt(meta.getId());\n-            ServiceInstanceInventory serviceInstanceInventory = serviceInstanceInventoryCache.get(serviceInstanceId);\n+            final String instanceId = meta.getId();\n+            final IDManager.ServiceInstanceID.InstanceIDDefinition instanceIDDefinition = IDManager.ServiceInstanceID.analysisId(\n+                instanceId);\n+            final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(\n+                instanceIDDefinition.getServiceId());\n             ServiceInstanceMetaInAlarm instanceMetaInAlarm = new ServiceInstanceMetaInAlarm();\n             instanceMetaInAlarm.setMetricsName(meta.getMetricsName());\n-            instanceMetaInAlarm.setId(serviceInstanceId);\n-            instanceMetaInAlarm.setName(serviceInstanceInventory.getName());\n+            instanceMetaInAlarm.setId(instanceId);\n+            instanceMetaInAlarm.setName(instanceIDDefinition.getName() + \" of \" + serviceIDDefinition.getName());\n             metaInAlarm = instanceMetaInAlarm;\n         } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n-            int endpointId = Integer.parseInt(meta.getId());\n-            EndpointInventory endpointInventory = endpointInventoryCache.get(endpointId);\n+            final String endpointId = meta.getId();\n+            final IDManager.EndpointID.EndpointIDDefinition endpointIDDefinition = IDManager.EndpointID.analysisId(\n+                endpointId);\n+            final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(\n+                endpointIDDefinition.getServiceId());\n+\n             EndpointMetaInAlarm endpointMetaInAlarm = new EndpointMetaInAlarm();\n             endpointMetaInAlarm.setMetricsName(meta.getMetricsName());\n-            endpointMetaInAlarm.setId(endpointId);\n-\n-            int serviceId = endpointInventory.getServiceId();\n-            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n-\n-            String textName = endpointInventory.getName() + \" in \" + serviceInventory.getName();\n-\n-            endpointMetaInAlarm.setName(textName);\n+            endpointMetaInAlarm.setId(meta.getId());\n+            endpointMetaInAlarm.setName(\n+                endpointIDDefinition.getEndpointName() + \" in \" + serviceIDDefinition.getName());\n             metaInAlarm = endpointMetaInAlarm;\n-        } else if (DefaultScopeDefine.inServicePageCatalog(scope)) {\n-            String metricsId = meta.getId();\n-            String[] ids = metricsId.split(Const.ID_SPLIT);\n-            int serviceId = Integer.parseInt(ids[0]);\n-            int pagePathId = Integer.parseInt(ids[1]);\n-            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n-            EndpointInventory endpointInventory = endpointInventoryCache.get(pagePathId);\n-\n-            ServicePageMetaInAlarm servicePageMetaInAlarm = new ServicePageMetaInAlarm();\n-            servicePageMetaInAlarm.setMetricsName(meta.getMetricsName());\n-            servicePageMetaInAlarm.setServiceId(serviceId);\n-            servicePageMetaInAlarm.setPagePathId(pagePathId);\n-\n-            String textName = endpointInventory.getName() + \" in \" + serviceInventory.getName();\n-            servicePageMetaInAlarm.setName(textName);\n-            metaInAlarm = servicePageMetaInAlarm;\n-        } else if (DefaultScopeDefine.inServiceVersionCatalog(scope)) {\n-            String metricsId = meta.getId();\n-            String[] ids = metricsId.split(Const.ID_SPLIT);\n-            int serviceVersionId = Integer.parseInt(ids[0]);\n-            int pagePathId = Integer.parseInt(ids[1]);\n-            ServiceInstanceInventory serviceInstanceInventory = serviceInstanceInventoryCache.get(serviceVersionId);\n-            EndpointInventory endpointInventory = endpointInventoryCache.get(pagePathId);\n-\n-            ServiceVersionPageMetaInAlarm versionPageMetaInAlarm = new ServiceVersionPageMetaInAlarm();\n-            versionPageMetaInAlarm.setMetricsName(meta.getMetricsName());\n-            versionPageMetaInAlarm.setServiceVersionId(serviceVersionId);\n-            versionPageMetaInAlarm.setPatePathId(pagePathId);\n-\n-            String textName = endpointInventory.getName() + \" in \" + serviceInstanceInventory.getName();\n-            versionPageMetaInAlarm.setName(textName);\n-            metaInAlarm = versionPageMetaInAlarm;\n         } else {\n             return;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzMDUzMQ==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368230531", "bodyText": "Same issue here about id1", "author": "wu-sheng", "createdAt": "2020-01-18T14:47:58Z", "path": "oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java", "diffHunk": "@@ -82,6 +84,38 @@ public NotifyHandler(AlarmRulesWatcher alarmRulesWatcher) {\n \n             endpointMetaInAlarm.setName(textName);\n             metaInAlarm = endpointMetaInAlarm;\n+        } else if (DefaultScopeDefine.inServicePageCatalog(scope)) {\n+            String metricsId = meta.getId();\n+            String[] ids = metricsId.split(Const.ID_SPLIT);\n+            int serviceId = Integer.parseInt(ids[0]);\n+            int pagePathId = Integer.parseInt(ids[1]);\n+            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n+            EndpointInventory endpointInventory = endpointInventoryCache.get(pagePathId);\n+\n+            ServicePageMetaInAlarm servicePageMetaInAlarm = new ServicePageMetaInAlarm();\n+            servicePageMetaInAlarm.setMetricsName(meta.getMetricsName());\n+            servicePageMetaInAlarm.setServiceId(serviceId);\n+            servicePageMetaInAlarm.setPagePathId(pagePathId);\n+\n+            String textName = endpointInventory.getName() + \" in \" + serviceInventory.getName();\n+            servicePageMetaInAlarm.setName(textName);\n+            metaInAlarm = servicePageMetaInAlarm;\n+        } else if (DefaultScopeDefine.inServiceVersionCatalog(scope)) {\n+            String metricsId = meta.getId();\n+            String[] ids = metricsId.split(Const.ID_SPLIT);\n+            int serviceVersionId = Integer.parseInt(ids[0]);\n+            int pagePathId = Integer.parseInt(ids[1]);", "originalCommit": "7509a1e6fcc7b634823d5d13933b63c340b2a865", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java\nindex 728b443e33..d46fe39793 100644\n--- a/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java\n+++ b/oap-server/server-alarm-plugin/src/main/java/org/apache/skywalking/oap/server/core/alarm/provider/NotifyHandler.java\n\n@@ -42,80 +45,52 @@ public class NotifyHandler implements MetricsNotify {\n         core = new AlarmCore(alarmRulesWatcher);\n     }\n \n-    @Override public void notify(Metrics metrics) {\n-        WithMetadata withMetadata = (WithMetadata)metrics;\n+    @Override\n+    public void notify(Metrics metrics) {\n+        WithMetadata withMetadata = (WithMetadata) metrics;\n         MetricsMetaInfo meta = withMetadata.getMeta();\n         int scope = meta.getScope();\n \n-        if (!DefaultScopeDefine.inServiceCatalog(scope)\n-            && !DefaultScopeDefine.inServiceInstanceCatalog(scope)\n-            && !DefaultScopeDefine.inEndpointCatalog(scope)) {\n+        if (!DefaultScopeDefine.inServiceCatalog(scope) && !DefaultScopeDefine.inServiceInstanceCatalog(\n+            scope) && !DefaultScopeDefine\n+            .inEndpointCatalog(scope)) {\n             return;\n         }\n \n         MetaInAlarm metaInAlarm;\n         if (DefaultScopeDefine.inServiceCatalog(scope)) {\n-            int serviceId = Integer.parseInt(meta.getId());\n-            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n+            final String serviceId = meta.getId();\n+            final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(\n+                serviceId);\n             ServiceMetaInAlarm serviceMetaInAlarm = new ServiceMetaInAlarm();\n             serviceMetaInAlarm.setMetricsName(meta.getMetricsName());\n             serviceMetaInAlarm.setId(serviceId);\n-            serviceMetaInAlarm.setName(serviceInventory.getName());\n+            serviceMetaInAlarm.setName(serviceIDDefinition.getName());\n             metaInAlarm = serviceMetaInAlarm;\n         } else if (DefaultScopeDefine.inServiceInstanceCatalog(scope)) {\n-            int serviceInstanceId = Integer.parseInt(meta.getId());\n-            ServiceInstanceInventory serviceInstanceInventory = serviceInstanceInventoryCache.get(serviceInstanceId);\n+            final String instanceId = meta.getId();\n+            final IDManager.ServiceInstanceID.InstanceIDDefinition instanceIDDefinition = IDManager.ServiceInstanceID.analysisId(\n+                instanceId);\n+            final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(\n+                instanceIDDefinition.getServiceId());\n             ServiceInstanceMetaInAlarm instanceMetaInAlarm = new ServiceInstanceMetaInAlarm();\n             instanceMetaInAlarm.setMetricsName(meta.getMetricsName());\n-            instanceMetaInAlarm.setId(serviceInstanceId);\n-            instanceMetaInAlarm.setName(serviceInstanceInventory.getName());\n+            instanceMetaInAlarm.setId(instanceId);\n+            instanceMetaInAlarm.setName(instanceIDDefinition.getName() + \" of \" + serviceIDDefinition.getName());\n             metaInAlarm = instanceMetaInAlarm;\n         } else if (DefaultScopeDefine.inEndpointCatalog(scope)) {\n-            int endpointId = Integer.parseInt(meta.getId());\n-            EndpointInventory endpointInventory = endpointInventoryCache.get(endpointId);\n+            final String endpointId = meta.getId();\n+            final IDManager.EndpointID.EndpointIDDefinition endpointIDDefinition = IDManager.EndpointID.analysisId(\n+                endpointId);\n+            final IDManager.ServiceID.ServiceIDDefinition serviceIDDefinition = IDManager.ServiceID.analysisId(\n+                endpointIDDefinition.getServiceId());\n+\n             EndpointMetaInAlarm endpointMetaInAlarm = new EndpointMetaInAlarm();\n             endpointMetaInAlarm.setMetricsName(meta.getMetricsName());\n-            endpointMetaInAlarm.setId(endpointId);\n-\n-            int serviceId = endpointInventory.getServiceId();\n-            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n-\n-            String textName = endpointInventory.getName() + \" in \" + serviceInventory.getName();\n-\n-            endpointMetaInAlarm.setName(textName);\n+            endpointMetaInAlarm.setId(meta.getId());\n+            endpointMetaInAlarm.setName(\n+                endpointIDDefinition.getEndpointName() + \" in \" + serviceIDDefinition.getName());\n             metaInAlarm = endpointMetaInAlarm;\n-        } else if (DefaultScopeDefine.inServicePageCatalog(scope)) {\n-            String metricsId = meta.getId();\n-            String[] ids = metricsId.split(Const.ID_SPLIT);\n-            int serviceId = Integer.parseInt(ids[0]);\n-            int pagePathId = Integer.parseInt(ids[1]);\n-            ServiceInventory serviceInventory = serviceInventoryCache.get(serviceId);\n-            EndpointInventory endpointInventory = endpointInventoryCache.get(pagePathId);\n-\n-            ServicePageMetaInAlarm servicePageMetaInAlarm = new ServicePageMetaInAlarm();\n-            servicePageMetaInAlarm.setMetricsName(meta.getMetricsName());\n-            servicePageMetaInAlarm.setServiceId(serviceId);\n-            servicePageMetaInAlarm.setPagePathId(pagePathId);\n-\n-            String textName = endpointInventory.getName() + \" in \" + serviceInventory.getName();\n-            servicePageMetaInAlarm.setName(textName);\n-            metaInAlarm = servicePageMetaInAlarm;\n-        } else if (DefaultScopeDefine.inServiceVersionCatalog(scope)) {\n-            String metricsId = meta.getId();\n-            String[] ids = metricsId.split(Const.ID_SPLIT);\n-            int serviceVersionId = Integer.parseInt(ids[0]);\n-            int pagePathId = Integer.parseInt(ids[1]);\n-            ServiceInstanceInventory serviceInstanceInventory = serviceInstanceInventoryCache.get(serviceVersionId);\n-            EndpointInventory endpointInventory = endpointInventoryCache.get(pagePathId);\n-\n-            ServiceVersionPageMetaInAlarm versionPageMetaInAlarm = new ServiceVersionPageMetaInAlarm();\n-            versionPageMetaInAlarm.setMetricsName(meta.getMetricsName());\n-            versionPageMetaInAlarm.setServiceVersionId(serviceVersionId);\n-            versionPageMetaInAlarm.setPatePathId(pagePathId);\n-\n-            String textName = endpointInventory.getName() + \" in \" + serviceInstanceInventory.getName();\n-            versionPageMetaInAlarm.setName(textName);\n-            metaInAlarm = versionPageMetaInAlarm;\n         } else {\n             return;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzMDU1Nw==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368230557", "bodyText": "SERVICE_ should be renamed to BROWSER_", "author": "wu-sheng", "createdAt": "2020-01-18T14:48:30Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java", "diffHunk": "@@ -71,16 +71,28 @@\n     public static final int PROFILE_TASK_LOG = 27;\n     public static final int PROFILE_TASK_SEGMENT_SNAPSHOT = 28;\n \n+    // browser\n+    public static final int BROWSER_PERF_DATA = 40;\n+    public static final int SERVICE_PERF_DETAIL = 41;\n+    public static final int SERVICE_PAGE_PATH_PERF_DETAIL = 42;\n+    public static final int SERVICE_VERSION_PERF_DETAIL = 43;\n+    public static final int SERVICE_VERSION_PAGE_PATH_PERF_DETAIL = 44;", "originalCommit": "7509a1e6fcc7b634823d5d13933b63c340b2a865", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java\nindex 4687378404..e057b2b756 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java\n\n@@ -70,13 +63,9 @@ public class DefaultScopeDefine {\n     public static final int PROFILE_TASK = 26;\n     public static final int PROFILE_TASK_LOG = 27;\n     public static final int PROFILE_TASK_SEGMENT_SNAPSHOT = 28;\n-\n-    // browser\n-    public static final int BROWSER_PERF_DATA = 40;\n-    public static final int SERVICE_PERF_DETAIL = 41;\n-    public static final int SERVICE_PAGE_PATH_PERF_DETAIL = 42;\n-    public static final int SERVICE_VERSION_PERF_DETAIL = 43;\n-    public static final int SERVICE_VERSION_PAGE_PATH_PERF_DETAIL = 44;\n+    public static final int SERVICE_UPDATE = 29;\n+    public static final int SERVICE_INSTANCE_UPDATE = 30;\n+    public static final int NETWORK_ADDRESS_ALIAS = 31;\n \n     /**\n      * Catalog of scope, the metrics processor could use this to group all generated metrics by oal rt.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzMDU4Mg==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368230582", "bodyText": "Same rename suggestion.", "author": "wu-sheng", "createdAt": "2020-01-18T14:48:47Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java", "diffHunk": "@@ -71,16 +71,28 @@\n     public static final int PROFILE_TASK_LOG = 27;\n     public static final int PROFILE_TASK_SEGMENT_SNAPSHOT = 28;\n \n+    // browser\n+    public static final int BROWSER_PERF_DATA = 40;\n+    public static final int SERVICE_PERF_DETAIL = 41;\n+    public static final int SERVICE_PAGE_PATH_PERF_DETAIL = 42;\n+    public static final int SERVICE_VERSION_PERF_DETAIL = 43;\n+    public static final int SERVICE_VERSION_PAGE_PATH_PERF_DETAIL = 44;\n+\n     /**\n      * Catalog of scope, the metrics processor could use this to group all generated metrics by oal rt.\n      */\n     public static final String SERVICE_CATALOG_NAME = \"SERVICE\";\n     public static final String SERVICE_INSTANCE_CATALOG_NAME = \"SERVICE_INSTANCE\";\n     public static final String ENDPOINT_CATALOG_NAME = \"ENDPOINT\";\n \n+    public static final String SERVICE_PAGE_PATH_CATALOG_NAME = \"SERVICE_PAGE_PATH\";\n+    public static final String SERVICE_VERSION_PAGE_PATH_CATALOG_NAME = \"SERVICE_VERSION_PAGE_PATH\";", "originalCommit": "7509a1e6fcc7b634823d5d13933b63c340b2a865", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java\nindex 4687378404..e057b2b756 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java\n\n@@ -70,13 +63,9 @@ public class DefaultScopeDefine {\n     public static final int PROFILE_TASK = 26;\n     public static final int PROFILE_TASK_LOG = 27;\n     public static final int PROFILE_TASK_SEGMENT_SNAPSHOT = 28;\n-\n-    // browser\n-    public static final int BROWSER_PERF_DATA = 40;\n-    public static final int SERVICE_PERF_DETAIL = 41;\n-    public static final int SERVICE_PAGE_PATH_PERF_DETAIL = 42;\n-    public static final int SERVICE_VERSION_PERF_DETAIL = 43;\n-    public static final int SERVICE_VERSION_PAGE_PATH_PERF_DETAIL = 44;\n+    public static final int SERVICE_UPDATE = 29;\n+    public static final int SERVICE_INSTANCE_UPDATE = 30;\n+    public static final int NETWORK_ADDRESS_ALIAS = 31;\n \n     /**\n      * Catalog of scope, the metrics processor could use this to group all generated metrics by oal rt.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzMDU4NQ==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r368230585", "bodyText": "Same rename suggestion.", "author": "wu-sheng", "createdAt": "2020-01-18T14:48:52Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java", "diffHunk": "@@ -71,16 +71,28 @@\n     public static final int PROFILE_TASK_LOG = 27;\n     public static final int PROFILE_TASK_SEGMENT_SNAPSHOT = 28;\n \n+    // browser\n+    public static final int BROWSER_PERF_DATA = 40;\n+    public static final int SERVICE_PERF_DETAIL = 41;\n+    public static final int SERVICE_PAGE_PATH_PERF_DETAIL = 42;\n+    public static final int SERVICE_VERSION_PERF_DETAIL = 43;\n+    public static final int SERVICE_VERSION_PAGE_PATH_PERF_DETAIL = 44;\n+\n     /**\n      * Catalog of scope, the metrics processor could use this to group all generated metrics by oal rt.\n      */\n     public static final String SERVICE_CATALOG_NAME = \"SERVICE\";\n     public static final String SERVICE_INSTANCE_CATALOG_NAME = \"SERVICE_INSTANCE\";\n     public static final String ENDPOINT_CATALOG_NAME = \"ENDPOINT\";\n \n+    public static final String SERVICE_PAGE_PATH_CATALOG_NAME = \"SERVICE_PAGE_PATH\";\n+    public static final String SERVICE_VERSION_PAGE_PATH_CATALOG_NAME = \"SERVICE_VERSION_PAGE_PATH\";\n+\n     private static final Map<Integer, Boolean> SERVICE_CATALOG = new HashMap<>();\n     private static final Map<Integer, Boolean> SERVICE_INSTANCE_CATALOG = new HashMap<>();\n     private static final Map<Integer, Boolean> ENDPOINT_CATALOG = new HashMap<>();\n+    private static final Map<Integer, Boolean> SERVICE_PAGE_PATH_CATALOG = new HashMap<>();\n+    private static final Map<Integer, Boolean> SERVICE_VERSION_PAGE_PATH_CATALOG = new HashMap<>();", "originalCommit": "7509a1e6fcc7b634823d5d13933b63c340b2a865", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java\nindex 4687378404..e057b2b756 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java\n\n@@ -70,13 +63,9 @@ public class DefaultScopeDefine {\n     public static final int PROFILE_TASK = 26;\n     public static final int PROFILE_TASK_LOG = 27;\n     public static final int PROFILE_TASK_SEGMENT_SNAPSHOT = 28;\n-\n-    // browser\n-    public static final int BROWSER_PERF_DATA = 40;\n-    public static final int SERVICE_PERF_DETAIL = 41;\n-    public static final int SERVICE_PAGE_PATH_PERF_DETAIL = 42;\n-    public static final int SERVICE_VERSION_PERF_DETAIL = 43;\n-    public static final int SERVICE_VERSION_PAGE_PATH_PERF_DETAIL = 44;\n+    public static final int SERVICE_UPDATE = 29;\n+    public static final int SERVICE_INSTANCE_UPDATE = 30;\n+    public static final int NETWORK_ADDRESS_ALIAS = 31;\n \n     /**\n      * Catalog of scope, the metrics processor could use this to group all generated metrics by oal rt.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM1ODc4NA==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r372358784", "bodyText": "Who will provide an external ClassLoader?", "author": "wu-sheng", "createdAt": "2020-01-29T12:39:55Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/oal/rt/OALEngineService.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.oal.rt;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.analysis.StreamAnnotationListener;\n+import org.apache.skywalking.oap.server.core.source.SourceReceiver;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+import org.apache.skywalking.oap.server.library.module.Service;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ *\n+ * @author zhangwei\n+ */\n+@Slf4j\n+public class OALEngineService implements Service {\n+\n+    private final Map<OALEngine.Group, OALEngine> engineMap = new HashMap<>();\n+    private final ModuleManager moduleManager;\n+\n+    public OALEngineService(ModuleManager moduleManager) {\n+        this.moduleManager = moduleManager;\n+    }\n+\n+    public void activate(OALEngine.Group group) throws ModuleStartException {\n+        activate(group, OALEngineService.class.getClassLoader());\n+    }\n+\n+    public void activate(OALEngine.Group group, ClassLoader classLoader) throws ModuleStartException {", "originalCommit": "0804f6151b25fa5a98c645a310f99c1967b9c619", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/oal/rt/OALEngineService.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/oal/rt/OALEngineService.java\ndeleted file mode 100644\nindex 2285e0193c..0000000000\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/oal/rt/OALEngineService.java\n+++ /dev/null\n\n@@ -1,84 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.oap.server.core.oal.rt;\n-\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.skywalking.oap.server.core.CoreModule;\n-import org.apache.skywalking.oap.server.core.analysis.StreamAnnotationListener;\n-import org.apache.skywalking.oap.server.core.source.SourceReceiver;\n-import org.apache.skywalking.oap.server.library.module.ModuleManager;\n-import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n-import org.apache.skywalking.oap.server.library.module.Service;\n-\n-import java.lang.reflect.Constructor;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-/**\n- *\n- * @author zhangwei\n- */\n-@Slf4j\n-public class OALEngineService implements Service {\n-\n-    private final Map<OALEngine.Group, OALEngine> engineMap = new HashMap<>();\n-    private final ModuleManager moduleManager;\n-\n-    public OALEngineService(ModuleManager moduleManager) {\n-        this.moduleManager = moduleManager;\n-    }\n-\n-    public void activate(OALEngine.Group group) throws ModuleStartException {\n-        activate(group, OALEngineService.class.getClassLoader());\n-    }\n-\n-    public void activate(OALEngine.Group group, ClassLoader classLoader) throws ModuleStartException {\n-        // It's only activated once\n-        if (!engineMap.containsKey(group)) {\n-            try {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"activate {} OALEngine\", group.name());\n-                }\n-                OALEngine oalEngine = loadOALEngine(group);\n-                StreamAnnotationListener streamAnnotationListener = new StreamAnnotationListener(moduleManager);\n-                oalEngine.setStreamListener(streamAnnotationListener);\n-                oalEngine.setDispatcherListener(moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class).getDispatcherDetectorListener());\n-\n-                oalEngine.start(classLoader);\n-                oalEngine.notifyAllListeners();\n-\n-                engineMap.put(group, oalEngine);\n-            } catch (Exception e) {\n-                throw new ModuleStartException(e.getMessage(), e);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Load the OAL Engine runtime, because runtime module depends on core, so we have to use class::forname to locate it.\n-     * @param group\n-     * @return\n-     * @throws ReflectiveOperationException\n-     */\n-    private OALEngine loadOALEngine(OALEngine.Group group) throws ReflectiveOperationException {\n-        Class<?> engineRTClass = Class.forName(\"org.apache.skywalking.oal.rt.OALRuntime\");\n-        Constructor<?> engineRTConstructor = engineRTClass.getConstructor(OALEngine.Group.class);\n-        return (OALEngine) engineRTConstructor.newInstance(group);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM1OTYyNw==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r372359627", "bodyText": "This should be mapping to the service instance, right? Then it should be named. BROWSER_APP_SINGLE_VERSION_CATALOG_NAME", "author": "wu-sheng", "createdAt": "2020-01-29T12:41:50Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java", "diffHunk": "@@ -71,16 +71,28 @@\n     public static final int PROFILE_TASK_LOG = 27;\n     public static final int PROFILE_TASK_SEGMENT_SNAPSHOT = 28;\n \n+    // browser\n+    public static final int BROWSER_PERF_DATA = 40;\n+    public static final int BROWSER_PERF_DETAIL = 41;\n+    public static final int BROWSER_PAGE_PATH_PERF_DETAIL = 42;\n+    public static final int BROWSER_SINGLE_VERSION_PERF_DETAIL = 43;\n+    public static final int BROWSER_SINGLE_VERSION_PAGE_PATH_PERF_DETAIL = 44;\n+\n     /**\n      * Catalog of scope, the metrics processor could use this to group all generated metrics by oal rt.\n      */\n     public static final String SERVICE_CATALOG_NAME = \"SERVICE\";\n     public static final String SERVICE_INSTANCE_CATALOG_NAME = \"SERVICE_INSTANCE\";\n     public static final String ENDPOINT_CATALOG_NAME = \"ENDPOINT\";\n \n+    public static final String BROWSER_PAGE_PATH_CATALOG_NAME = \"BROWSER_PAGE_PATH\";\n+    public static final String BROWSER_SINGLE_VERSION_PAGE_PATH_CATALOG_NAME = \"BROWSER_SINGLE_VERSION_PAGE_PATH\";", "originalCommit": "0804f6151b25fa5a98c645a310f99c1967b9c619", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java\nindex 72d8a92dd4..e057b2b756 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java\n\n@@ -70,13 +63,9 @@ public class DefaultScopeDefine {\n     public static final int PROFILE_TASK = 26;\n     public static final int PROFILE_TASK_LOG = 27;\n     public static final int PROFILE_TASK_SEGMENT_SNAPSHOT = 28;\n-\n-    // browser\n-    public static final int BROWSER_PERF_DATA = 40;\n-    public static final int BROWSER_PERF_DETAIL = 41;\n-    public static final int BROWSER_PAGE_PATH_PERF_DETAIL = 42;\n-    public static final int BROWSER_SINGLE_VERSION_PERF_DETAIL = 43;\n-    public static final int BROWSER_SINGLE_VERSION_PAGE_PATH_PERF_DETAIL = 44;\n+    public static final int SERVICE_UPDATE = 29;\n+    public static final int SERVICE_INSTANCE_UPDATE = 30;\n+    public static final int NETWORK_ADDRESS_ALIAS = 31;\n \n     /**\n      * Catalog of scope, the metrics processor could use this to group all generated metrics by oal rt.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2MDI0MQ==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r372360241", "bodyText": "BROWSER_ -> BROWSER_APP_.", "author": "wu-sheng", "createdAt": "2020-01-29T12:43:19Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java", "diffHunk": "@@ -71,16 +71,28 @@\n     public static final int PROFILE_TASK_LOG = 27;\n     public static final int PROFILE_TASK_SEGMENT_SNAPSHOT = 28;\n \n+    // browser\n+    public static final int BROWSER_PERF_DATA = 40;", "originalCommit": "0804f6151b25fa5a98c645a310f99c1967b9c619", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java\nindex 72d8a92dd4..e057b2b756 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/source/DefaultScopeDefine.java\n\n@@ -70,13 +63,9 @@ public class DefaultScopeDefine {\n     public static final int PROFILE_TASK = 26;\n     public static final int PROFILE_TASK_LOG = 27;\n     public static final int PROFILE_TASK_SEGMENT_SNAPSHOT = 28;\n-\n-    // browser\n-    public static final int BROWSER_PERF_DATA = 40;\n-    public static final int BROWSER_PERF_DETAIL = 41;\n-    public static final int BROWSER_PAGE_PATH_PERF_DETAIL = 42;\n-    public static final int BROWSER_SINGLE_VERSION_PERF_DETAIL = 43;\n-    public static final int BROWSER_SINGLE_VERSION_PAGE_PATH_PERF_DETAIL = 44;\n+    public static final int SERVICE_UPDATE = 29;\n+    public static final int SERVICE_INSTANCE_UPDATE = 30;\n+    public static final int NETWORK_ADDRESS_ALIAS = 31;\n \n     /**\n      * Catalog of scope, the metrics processor could use this to group all generated metrics by oal rt.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2MjI0MQ==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r372362241", "bodyText": "Parse -> Parser.", "author": "wu-sheng", "createdAt": "2020-01-29T12:48:02Z", "path": "oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parse/BrowserPerfDataParse.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.recevier.browser.provider.parse;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.apm.network.language.agent.BrowserPerfData;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.analysis.TimeBucket;\n+import org.apache.skywalking.oap.server.core.cache.ServiceInstanceInventoryCache;\n+import org.apache.skywalking.oap.server.library.buffer.BufferData;\n+import org.apache.skywalking.oap.server.library.buffer.DataStreamReader;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.BrowserServiceModuleConfig;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parse.decorator.BrowserErrorLogDecorator;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parse.decorator.BrowserPerfDataCoreInfo;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parse.decorator.BrowserPerfDataDecorator;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parse.listener.BrowserPerfDataListener;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parse.standardization.BrowserPerfDataStandardization;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parse.standardization.BrowserPerfDataStandardizationWorker;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parse.standardization.PagePathIdExchanger;\n+import org.apache.skywalking.oap.server.telemetry.TelemetryModule;\n+import org.apache.skywalking.oap.server.telemetry.api.CounterMetrics;\n+import org.apache.skywalking.oap.server.telemetry.api.MetricsCreator;\n+import org.apache.skywalking.oap.server.telemetry.api.MetricsTag;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@Slf4j\n+public class BrowserPerfDataParse {", "originalCommit": "0804f6151b25fa5a98c645a310f99c1967b9c619", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parse/BrowserPerfDataParse.java b/oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parse/BrowserPerfDataParse.java\ndeleted file mode 100644\nindex 5bdf9f5b90..0000000000\n--- a/oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parse/BrowserPerfDataParse.java\n+++ /dev/null\n\n@@ -1,217 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.oap.server.recevier.browser.provider.parse;\n-\n-import lombok.Setter;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.skywalking.apm.network.language.agent.BrowserPerfData;\n-import org.apache.skywalking.oap.server.core.Const;\n-import org.apache.skywalking.oap.server.core.CoreModule;\n-import org.apache.skywalking.oap.server.core.analysis.TimeBucket;\n-import org.apache.skywalking.oap.server.core.cache.ServiceInstanceInventoryCache;\n-import org.apache.skywalking.oap.server.library.buffer.BufferData;\n-import org.apache.skywalking.oap.server.library.buffer.DataStreamReader;\n-import org.apache.skywalking.oap.server.library.module.ModuleManager;\n-import org.apache.skywalking.oap.server.recevier.browser.provider.BrowserServiceModuleConfig;\n-import org.apache.skywalking.oap.server.recevier.browser.provider.parse.decorator.BrowserErrorLogDecorator;\n-import org.apache.skywalking.oap.server.recevier.browser.provider.parse.decorator.BrowserPerfDataCoreInfo;\n-import org.apache.skywalking.oap.server.recevier.browser.provider.parse.decorator.BrowserPerfDataDecorator;\n-import org.apache.skywalking.oap.server.recevier.browser.provider.parse.listener.BrowserPerfDataListener;\n-import org.apache.skywalking.oap.server.recevier.browser.provider.parse.standardization.BrowserPerfDataStandardization;\n-import org.apache.skywalking.oap.server.recevier.browser.provider.parse.standardization.BrowserPerfDataStandardizationWorker;\n-import org.apache.skywalking.oap.server.recevier.browser.provider.parse.standardization.PagePathIdExchanger;\n-import org.apache.skywalking.oap.server.telemetry.TelemetryModule;\n-import org.apache.skywalking.oap.server.telemetry.api.CounterMetrics;\n-import org.apache.skywalking.oap.server.telemetry.api.MetricsCreator;\n-import org.apache.skywalking.oap.server.telemetry.api.MetricsTag;\n-\n-import java.util.LinkedList;\n-import java.util.List;\n-\n-/**\n- * @author zhangwei\n- */\n-@Slf4j\n-public class BrowserPerfDataParse {\n-\n-    private final ModuleManager moduleManager;\n-    private final BrowserPerfDataParseListenerManager listenerManager;\n-    private final BrowserServiceModuleConfig config;\n-    private final List<BrowserPerfDataListener> browserPerfDataListeners;\n-    private final ServiceInstanceInventoryCache serviceInstanceInventoryCache;\n-    private final BrowserPerfDataCoreInfo browserPerfDataCoreInfo;\n-    @Setter\n-    private BrowserPerfDataStandardizationWorker standardizationWorker;\n-    private volatile static CounterMetrics BROWSER_PERF_BUFFER_FILE_RETRY;\n-    private volatile static CounterMetrics BROWSER_PERF_BUFFER_FILE_OUT;\n-    private volatile static CounterMetrics BROWSER_PERF_PARSE_ERROR;\n-\n-    public BrowserPerfDataParse(ModuleManager moduleManager, BrowserPerfDataParseListenerManager listenerManager, BrowserServiceModuleConfig config) {\n-        this.moduleManager = moduleManager;\n-        this.listenerManager = listenerManager;\n-        this.config = config;\n-        this.browserPerfDataListeners = new LinkedList<>();\n-        this.browserPerfDataCoreInfo = new BrowserPerfDataCoreInfo();\n-\n-        if (BROWSER_PERF_BUFFER_FILE_RETRY == null) {\n-            MetricsCreator metricsCreator = moduleManager.find(TelemetryModule.NAME).provider().getService(MetricsCreator.class);\n-            BROWSER_PERF_BUFFER_FILE_RETRY = metricsCreator.createCounter(\"browser_perf_buffer_file_retry\", \"The number of retry browser perf from the buffer file, but haven't registered successfully.\",\n-                MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n-            BROWSER_PERF_BUFFER_FILE_OUT = metricsCreator.createCounter(\"browser_perf_buffer_file_out\", \"The number of browser perf out of the buffer file\",\n-                MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n-            BROWSER_PERF_PARSE_ERROR = metricsCreator.createCounter(\"browser_perf_parse_error\", \"The number of browser perf parse data\",\n-                MetricsTag.EMPTY_KEY, MetricsTag.EMPTY_VALUE);\n-        }\n-\n-        this.serviceInstanceInventoryCache = moduleManager.find(CoreModule.NAME).provider().getService(ServiceInstanceInventoryCache.class);\n-    }\n-\n-    public boolean parse(BufferData<BrowserPerfData> bufferData, BrowserPerfDataSource source) {\n-        createBrowserPerfListeners();\n-\n-        try {\n-            BrowserPerfData browserPerfData = bufferData.getMessageType();\n-\n-            final int serviceVersionId = browserPerfData.getServiceVersionId();\n-            if (serviceInstanceInventoryCache.get(serviceVersionId) == null) {\n-                log.warn(\"Cannot recognize service version id [{}] from cache, browser perf data will be ignored\", serviceVersionId);\n-                return true; // to mark it \"completed\" thus won't be retried\n-            }\n-\n-            BrowserPerfDataDecorator decorator = new BrowserPerfDataDecorator(browserPerfData);\n-            if (!preBuild(decorator)) {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"This browser perf data id exchange not success, write to buffer file, serviceId:{}, pagePath:{}\",\n-                        decorator.getServiceId(), decorator.getPagePath());\n-                }\n-\n-                if (source.equals(BrowserPerfDataSource.Browser)) {\n-                    writeToBufferFile(decorator);\n-                } else {\n-                    BROWSER_PERF_BUFFER_FILE_RETRY.inc();\n-                }\n-                return false;\n-            } else {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"This browser perf data id exchange success, serviceId: {}, pagePath:{}\",\n-                        decorator.getServiceId(), decorator.getPagePath());\n-                }\n-\n-                notifyListenerToBuild();\n-                return true;\n-            }\n-        } catch (Throwable e) {\n-            BROWSER_PERF_PARSE_ERROR.inc();\n-            log.error(e.getMessage(), e);\n-            return true;\n-        }\n-    }\n-\n-    private boolean preBuild(BrowserPerfDataDecorator decorator) {\n-        if (decorator.getTime() == Const.NONE) {\n-            // Use the server side current time, if the client side not set.\n-            long nowMinute = System.currentTimeMillis();\n-            decorator.setTime(nowMinute);\n-            if (decorator.isError()) {\n-                for (int i = 0; i < decorator.getBrowserErrorLogCount(); i++) {\n-                    BrowserErrorLogDecorator errorLogDecorator = decorator.getBrowserErrorLog(i);\n-                    if (errorLogDecorator.getTime() == Const.NONE) {\n-                        errorLogDecorator.setTime(nowMinute);\n-                    }\n-                }\n-            }\n-        }\n-\n-        boolean exchanged = true;\n-        if (!PagePathIdExchanger.getInstance(moduleManager).exchange(decorator, decorator.getServiceId())) {\n-            exchanged = false;\n-        }\n-\n-        if (exchanged) {\n-            browserPerfDataCoreInfo.setUniqueId(decorator.getUniqueId());\n-            browserPerfDataCoreInfo.setServiceId(decorator.getServiceId());\n-            browserPerfDataCoreInfo.setServiceVersionId(decorator.getServiceVersionId());\n-            browserPerfDataCoreInfo.setPagePathId(decorator.getPagePathId());\n-            browserPerfDataCoreInfo.setPagePath(decorator.getPagePath());\n-            browserPerfDataCoreInfo.setError(decorator.isError());\n-            browserPerfDataCoreInfo.setDataBinary(decorator.toByteArray());\n-            long minuteTimeBucket = TimeBucket.getMinuteTimeBucket(decorator.getTime());\n-            browserPerfDataCoreInfo.setTime(decorator.getTime());\n-            browserPerfDataCoreInfo.setMinuteTimeBucket(minuteTimeBucket);\n-            notifyParseListener(decorator);\n-        }\n-        return exchanged;\n-    }\n-\n-    private void writeToBufferFile(BrowserPerfDataDecorator decorator) {\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"push to segment buffer write worker, serviceId: {}, serviceVersionId: {}\", decorator.getServiceId(), decorator.getServiceVersionId());\n-        }\n-\n-        BrowserPerfDataStandardization standardization = new BrowserPerfDataStandardization();\n-        /**\n-         * {@link BrowserPerfData#getTime()} It may be set by the backend.\n-         */\n-        standardization.setBrowserPerfData(decorator.build());\n-        standardizationWorker.in(standardization);\n-    }\n-\n-    private void notifyListenerToBuild() {\n-        browserPerfDataListeners.forEach(BrowserPerfDataListener::build);\n-    }\n-\n-    private void notifyParseListener(BrowserPerfDataDecorator decorator) {\n-        browserPerfDataListeners.forEach(listener -> listener.parse(decorator, browserPerfDataCoreInfo));\n-    }\n-\n-    private void createBrowserPerfListeners() {\n-        listenerManager.getBrowserPerfListenerFactories().forEach(listenerFactory -> browserPerfDataListeners.add(listenerFactory.create(moduleManager, config)));\n-    }\n-\n-    public static class Producer implements DataStreamReader.CallBack<BrowserPerfData> {\n-\n-        @Setter\n-        private BrowserPerfDataStandardizationWorker standardizationWorker;\n-        private final ModuleManager moduleManager;\n-        private final BrowserPerfDataParseListenerManager listenerManager;\n-        private final BrowserServiceModuleConfig config;\n-\n-        public Producer(ModuleManager moduleManager, BrowserPerfDataParseListenerManager listenerManager, BrowserServiceModuleConfig config) {\n-            this.moduleManager = moduleManager;\n-            this.listenerManager = listenerManager;\n-            this.config = config;\n-        }\n-\n-        public void send(BrowserPerfData perf) {\n-            BrowserPerfDataParse perfParse = new BrowserPerfDataParse(moduleManager, listenerManager, config);\n-            perfParse.setStandardizationWorker(standardizationWorker);\n-            perfParse.parse(new BufferData<>(perf), BrowserPerfDataSource.Browser);\n-        }\n-\n-        @Override\n-        public boolean call(BufferData<BrowserPerfData> bufferData) {\n-            BrowserPerfDataParse perfParse = new BrowserPerfDataParse(moduleManager, listenerManager, config);\n-            boolean parseResult = perfParse.parse(bufferData, BrowserPerfDataSource.Buffer);\n-            if (parseResult) {\n-                BROWSER_PERF_BUFFER_FILE_OUT.inc();\n-            }\n-            return parseResult;\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2MzkzNA==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r372363934", "bodyText": "Naming issue. This should be related to BrowserAppSignleVersion. Not to page path even you could include the path for filter and metrics funcs.", "author": "wu-sheng", "createdAt": "2020-01-29T12:51:50Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserSingleVersionPagePathPerfDetail.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.source;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n+import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n+import org.apache.skywalking.oap.server.core.source.Source;\n+\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_SINGLE_VERSION_PAGE_PATH_CATALOG_NAME;\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_SINGLE_VERSION_PAGE_PATH_PERF_DETAIL;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@ScopeDeclaration(id = BROWSER_SINGLE_VERSION_PAGE_PATH_PERF_DETAIL, name = \"BrowserSingleVersionPagePathPerfDetail\", catalog = BROWSER_SINGLE_VERSION_PAGE_PATH_CATALOG_NAME)\n+@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n+public class BrowserSingleVersionPagePathPerfDetail extends Source {", "originalCommit": "0804f6151b25fa5a98c645a310f99c1967b9c619", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserSingleVersionPagePathPerfDetail.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserSingleVersionPagePathPerfDetail.java\ndeleted file mode 100644\nindex fdb18345e6..0000000000\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserSingleVersionPagePathPerfDetail.java\n+++ /dev/null\n\n@@ -1,59 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.oap.server.core.browser.source;\n-\n-import lombok.Getter;\n-import lombok.Setter;\n-import org.apache.skywalking.oap.server.core.Const;\n-import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n-import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n-import org.apache.skywalking.oap.server.core.source.Source;\n-\n-import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_SINGLE_VERSION_PAGE_PATH_CATALOG_NAME;\n-import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_SINGLE_VERSION_PAGE_PATH_PERF_DETAIL;\n-\n-/**\n- * @author zhangwei\n- */\n-@ScopeDeclaration(id = BROWSER_SINGLE_VERSION_PAGE_PATH_PERF_DETAIL, name = \"BrowserSingleVersionPagePathPerfDetail\", catalog = BROWSER_SINGLE_VERSION_PAGE_PATH_CATALOG_NAME)\n-@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n-public class BrowserSingleVersionPagePathPerfDetail extends Source {\n-    @Override\n-    public int scope() {\n-        return BROWSER_SINGLE_VERSION_PAGE_PATH_PERF_DETAIL;\n-    }\n-\n-    @Override\n-    public String getEntityId() {\n-        return serviceVersionId + Const.ID_SPLIT + id;\n-    }\n-\n-    @Getter @Setter private int id;\n-    @Getter @Setter private String name;\n-    @Getter @Setter @ScopeDefaultColumn.DefinedByField(columnName = \"service_version_id\") private int serviceVersionId;\n-    @Getter @Setter private String serviceVersionName;\n-    @Getter @Setter private boolean status;\n-    @Getter private final int count = 1;\n-    @Getter @Setter private int redirectTime;\n-    @Getter @Setter private int dnsTime;\n-    @Getter @Setter private int reqTime;\n-    @Getter @Setter private int domAnalysisTime;\n-    @Getter @Setter private int domReadyTime;\n-    @Getter @Setter private int blankTime;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2NDIwNA==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r372364204", "bodyText": "Catalog is not right.", "author": "wu-sheng", "createdAt": "2020-01-29T12:52:27Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserSingleVersionPerfDetail.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.source;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n+import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n+import org.apache.skywalking.oap.server.core.source.Source;\n+\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_INSTANCE_CATALOG_NAME;\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_SINGLE_VERSION_PERF_DETAIL;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@ScopeDeclaration(id = BROWSER_SINGLE_VERSION_PERF_DETAIL, name = \"BrowserSingleVersionPerfDetail\", catalog = SERVICE_INSTANCE_CATALOG_NAME)", "originalCommit": "0804f6151b25fa5a98c645a310f99c1967b9c619", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserSingleVersionPerfDetail.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserSingleVersionPerfDetail.java\ndeleted file mode 100644\nindex 508abe4456..0000000000\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserSingleVersionPerfDetail.java\n+++ /dev/null\n\n@@ -1,56 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.oap.server.core.browser.source;\n-\n-import lombok.Getter;\n-import lombok.Setter;\n-import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n-import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n-import org.apache.skywalking.oap.server.core.source.Source;\n-\n-import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_INSTANCE_CATALOG_NAME;\n-import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_SINGLE_VERSION_PERF_DETAIL;\n-\n-/**\n- * @author zhangwei\n- */\n-@ScopeDeclaration(id = BROWSER_SINGLE_VERSION_PERF_DETAIL, name = \"BrowserSingleVersionPerfDetail\", catalog = SERVICE_INSTANCE_CATALOG_NAME)\n-@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n-public class BrowserSingleVersionPerfDetail extends Source {\n-\n-    @Override\n-    public int scope() {\n-        return BROWSER_SINGLE_VERSION_PERF_DETAIL;\n-    }\n-\n-    @Override\n-    public String getEntityId() {\n-        return String.valueOf(id);\n-    }\n-\n-    @Getter @Setter private int id;\n-    @Getter @Setter private String name;\n-    @Getter @Setter private boolean status;\n-    @Getter @Setter private int redirectTime;\n-    @Getter @Setter private int dnsTime;\n-    @Getter @Setter private int reqTime;\n-    @Getter @Setter private int domAnalysisTime;\n-    @Getter @Setter private int domReadyTime;\n-    @Getter @Setter private int blankTime;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2NDcwNA==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r372364704", "bodyText": "BrowserPagePathPerfDetail-> BrowserAppPagePerf", "author": "wu-sheng", "createdAt": "2020-01-29T12:53:29Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserPagePathPerfDetail.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.source;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n+import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n+import org.apache.skywalking.oap.server.core.source.Source;\n+\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_PAGE_PATH_CATALOG_NAME;\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_PAGE_PATH_PERF_DETAIL;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@ScopeDeclaration(id = BROWSER_PAGE_PATH_PERF_DETAIL, name = \"BrowserPagePathPerfDetail\", catalog = BROWSER_PAGE_PATH_CATALOG_NAME)\n+@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n+public class BrowserPagePathPerfDetail extends Source {", "originalCommit": "0804f6151b25fa5a98c645a310f99c1967b9c619", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserPagePathPerfDetail.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserPagePathPerfDetail.java\ndeleted file mode 100644\nindex 4ca5b5dd43..0000000000\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserPagePathPerfDetail.java\n+++ /dev/null\n\n@@ -1,60 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.oap.server.core.browser.source;\n-\n-import lombok.Getter;\n-import lombok.Setter;\n-import org.apache.skywalking.oap.server.core.Const;\n-import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n-import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n-import org.apache.skywalking.oap.server.core.source.Source;\n-\n-import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_PAGE_PATH_CATALOG_NAME;\n-import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_PAGE_PATH_PERF_DETAIL;\n-\n-/**\n- * @author zhangwei\n- */\n-@ScopeDeclaration(id = BROWSER_PAGE_PATH_PERF_DETAIL, name = \"BrowserPagePathPerfDetail\", catalog = BROWSER_PAGE_PATH_CATALOG_NAME)\n-@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n-public class BrowserPagePathPerfDetail extends Source {\n-\n-    @Override\n-    public int scope() {\n-        return BROWSER_PAGE_PATH_PERF_DETAIL;\n-    }\n-\n-    @Override\n-    public String getEntityId() {\n-        return serviceId + Const.ID_SPLIT + id;\n-    }\n-\n-    @Getter @Setter private int id;\n-    @Getter @Setter private String name;\n-    @Getter @Setter @ScopeDefaultColumn.DefinedByField(columnName = \"service_id\") private int serviceId;\n-    @Getter @Setter private String serviceName;\n-    @Getter @Setter private boolean status;\n-    @Getter private final int count = 1;\n-    @Getter @Setter private int redirectTime;\n-    @Getter @Setter private int dnsTime;\n-    @Getter @Setter private int reqTime;\n-    @Getter @Setter private int domAnalysisTime;\n-    @Getter @Setter private int domReadyTime;\n-    @Getter @Setter private int blankTime;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2NTU1Mw==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r372365553", "bodyText": "Browser-> BrowserApp.", "author": "wu-sheng", "createdAt": "2020-01-29T12:55:34Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserPerfData.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.source;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n+import org.apache.skywalking.oap.server.core.source.Source;\n+\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_PERF_DATA;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@ScopeDeclaration(id = BROWSER_PERF_DATA, name = \"BrowserPerfData\")\n+public class BrowserPerfData extends Source {", "originalCommit": "0804f6151b25fa5a98c645a310f99c1967b9c619", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserPerfData.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserPerfData.java\ndeleted file mode 100644\nindex eb5ba716df..0000000000\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserPerfData.java\n+++ /dev/null\n\n@@ -1,52 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.oap.server.core.browser.source;\n-\n-import lombok.Getter;\n-import lombok.Setter;\n-import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n-import org.apache.skywalking.oap.server.core.source.Source;\n-\n-import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_PERF_DATA;\n-\n-/**\n- * @author zhangwei\n- */\n-@ScopeDeclaration(id = BROWSER_PERF_DATA, name = \"BrowserPerfData\")\n-public class BrowserPerfData extends Source {\n-\n-    @Override\n-    public int scope() {\n-        return BROWSER_PERF_DATA;\n-    }\n-\n-    @Override\n-    public String getEntityId() {\n-        return uniqueId;\n-    }\n-\n-    @Getter @Setter private String uniqueId;\n-    @Getter @Setter private int serviceId;\n-    @Getter @Setter private int serviceInstanceId;\n-    @Getter @Setter private int pagePathId;\n-    @Getter @Setter private String pagePath;\n-    @Getter @Setter private long time;\n-    @Getter @Setter private int isError;\n-    @Getter @Setter private byte[] dataBinary;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2ODA3MQ==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r372368071", "bodyText": "Browser -> BrowserApp.", "author": "wu-sheng", "createdAt": "2020-01-29T13:01:03Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserSingleVersionPerfDetail.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.source;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n+import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n+import org.apache.skywalking.oap.server.core.source.Source;\n+\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_INSTANCE_CATALOG_NAME;\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_SINGLE_VERSION_PERF_DETAIL;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@ScopeDeclaration(id = BROWSER_SINGLE_VERSION_PERF_DETAIL, name = \"BrowserSingleVersionPerfDetail\", catalog = SERVICE_INSTANCE_CATALOG_NAME)\n+@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n+public class BrowserSingleVersionPerfDetail extends Source {", "originalCommit": "0804f6151b25fa5a98c645a310f99c1967b9c619", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserSingleVersionPerfDetail.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserSingleVersionPerfDetail.java\ndeleted file mode 100644\nindex 508abe4456..0000000000\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserSingleVersionPerfDetail.java\n+++ /dev/null\n\n@@ -1,56 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.oap.server.core.browser.source;\n-\n-import lombok.Getter;\n-import lombok.Setter;\n-import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n-import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n-import org.apache.skywalking.oap.server.core.source.Source;\n-\n-import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_INSTANCE_CATALOG_NAME;\n-import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_SINGLE_VERSION_PERF_DETAIL;\n-\n-/**\n- * @author zhangwei\n- */\n-@ScopeDeclaration(id = BROWSER_SINGLE_VERSION_PERF_DETAIL, name = \"BrowserSingleVersionPerfDetail\", catalog = SERVICE_INSTANCE_CATALOG_NAME)\n-@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n-public class BrowserSingleVersionPerfDetail extends Source {\n-\n-    @Override\n-    public int scope() {\n-        return BROWSER_SINGLE_VERSION_PERF_DETAIL;\n-    }\n-\n-    @Override\n-    public String getEntityId() {\n-        return String.valueOf(id);\n-    }\n-\n-    @Getter @Setter private int id;\n-    @Getter @Setter private String name;\n-    @Getter @Setter private boolean status;\n-    @Getter @Setter private int redirectTime;\n-    @Getter @Setter private int dnsTime;\n-    @Getter @Setter private int reqTime;\n-    @Getter @Setter private int domAnalysisTime;\n-    @Getter @Setter private int domReadyTime;\n-    @Getter @Setter private int blankTime;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4OTA3OA==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r376389078", "bodyText": "There is already a SourceBuilder, please don't use duplicated name.  Also, the existing one should be renamed to Trace SourceBuilder.", "author": "wu-sheng", "createdAt": "2020-02-07T13:28:53Z", "path": "oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/listener/errorlog/SourceBuilder.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.errorlog;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.browser.source.BrowserAppErrorLog;\n+import org.apache.skywalking.oap.server.core.browser.source.BrowserAppPageErrorLog;\n+import org.apache.skywalking.oap.server.core.browser.source.BrowserErrorCategory;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@Setter\n+@Getter\n+class SourceBuilder {", "originalCommit": "8bb2a9abf02b2c8bf1510f53871298bc0dd4be35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/listener/errorlog/SourceBuilder.java b/oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/listener/errorlog/SourceBuilder.java\ndeleted file mode 100644\nindex db55df993c..0000000000\n--- a/oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/listener/errorlog/SourceBuilder.java\n+++ /dev/null\n\n@@ -1,58 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.errorlog;\n-\n-import lombok.Getter;\n-import lombok.Setter;\n-import org.apache.skywalking.oap.server.core.browser.source.BrowserAppErrorLog;\n-import org.apache.skywalking.oap.server.core.browser.source.BrowserAppPageErrorLog;\n-import org.apache.skywalking.oap.server.core.browser.source.BrowserErrorCategory;\n-\n-/**\n- * @author zhangwei\n- */\n-@Setter\n-@Getter\n-class SourceBuilder {\n-\n-    private int serviceId;\n-    private int serviceVersionId;\n-    private int pagePathId;\n-    private String pagePath;\n-    private long time;\n-    private long minuteTimeBucket;\n-    private BrowserErrorCategory category;\n-\n-    BrowserAppErrorLog toBrowserAppErrorLog() {\n-        BrowserAppErrorLog errorLog = new BrowserAppErrorLog();\n-        errorLog.setId(serviceId);\n-        errorLog.setCategory(category);\n-        errorLog.setTimeBucket(minuteTimeBucket);\n-        return errorLog;\n-    }\n-\n-    BrowserAppPageErrorLog toBrowserAppPageErrorLog() {\n-        BrowserAppPageErrorLog errorLog = new BrowserAppPageErrorLog();\n-        errorLog.setId(pagePathId);\n-        errorLog.setServiceId(serviceId);\n-        errorLog.setTimeBucket(minuteTimeBucket);\n-        errorLog.setCategory(category);\n-        return errorLog;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5MDgxNg==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r376390816", "bodyText": "If uniqueId == null, this seems a NPE?", "author": "wu-sheng", "createdAt": "2020-02-07T13:32:28Z", "path": "oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/listener/record/BrowserErrorLogRecordListener.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.record;\n+\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.browser.source.BrowserErrorLog;\n+import org.apache.skywalking.oap.server.core.source.SourceReceiver;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.BrowserServiceModuleConfig;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.decorator.BrowserErrorLogCoreInfo;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.decorator.BrowserErrorLogDecorator;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.BrowserErrorLogListener;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.BrowserErrorLogListenerFactory;\n+\n+/**\n+ * Process error record.\n+ *\n+ * @author zhangwei\n+ */\n+public class BrowserErrorLogRecordListener implements BrowserErrorLogListener {\n+\n+    private final SourceReceiver sourceReceiver;\n+    private final BrowserErrorLog browserErrorLog;\n+    private BrowserErrorLogRecordSampler sampler;\n+    private SAMPLE_STATUS sampleStatus = SAMPLE_STATUS.UNKNOWN;\n+\n+    private BrowserErrorLogRecordListener(ModuleManager moduleManager, BrowserErrorLogRecordSampler sampler) {\n+        sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n+        browserErrorLog = new BrowserErrorLog();\n+        this.sampler = sampler;\n+    }\n+\n+    @Override\n+    public void build() {\n+        filter(() -> sourceReceiver.receive(browserErrorLog));\n+    }\n+\n+    @Override\n+    public void parse(BrowserErrorLogDecorator decorator, BrowserErrorLogCoreInfo coreInfo) {\n+        filter(coreInfo.getUniqueId(), () -> {\n+            browserErrorLog.setUniqueId(coreInfo.getUniqueId());\n+            browserErrorLog.setServiceId(coreInfo.getServiceId());\n+            browserErrorLog.setServiceVersionId(coreInfo.getServiceVersionId());\n+            browserErrorLog.setPagePathId(coreInfo.getPagePathId());\n+            browserErrorLog.setPagePath(decorator.getPagePath());\n+            browserErrorLog.setTime(decorator.getTime());\n+            browserErrorLog.setTimeBucket(coreInfo.getMinuteTimeBucket());\n+            browserErrorLog.setCategory(coreInfo.getCategory());\n+            browserErrorLog.setDataBinary(decorator.toByteArray());\n+        });\n+    }\n+\n+    private void filter(Runnable runnable) {\n+        filter(null, runnable);\n+    }\n+\n+    private void filter(String uniqueId, Runnable runnable) {\n+        if (sampleStatus.equals(SAMPLE_STATUS.IGNORE)) {\n+            return;\n+        }\n+        if (sampleStatus.equals(SAMPLE_STATUS.UNKNOWN)) {\n+            if (sampler.shouldSample(uniqueId.hashCode())) {", "originalCommit": "8bb2a9abf02b2c8bf1510f53871298bc0dd4be35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/listener/record/BrowserErrorLogRecordListener.java b/oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/listener/record/BrowserErrorLogRecordListener.java\ndeleted file mode 100644\nindex 0562fba758..0000000000\n--- a/oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/listener/record/BrowserErrorLogRecordListener.java\n+++ /dev/null\n\n@@ -1,106 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.record;\n-\n-import org.apache.skywalking.oap.server.core.CoreModule;\n-import org.apache.skywalking.oap.server.core.browser.source.BrowserErrorLog;\n-import org.apache.skywalking.oap.server.core.source.SourceReceiver;\n-import org.apache.skywalking.oap.server.library.module.ModuleManager;\n-import org.apache.skywalking.oap.server.recevier.browser.provider.BrowserServiceModuleConfig;\n-import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.decorator.BrowserErrorLogCoreInfo;\n-import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.decorator.BrowserErrorLogDecorator;\n-import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.BrowserErrorLogListener;\n-import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.BrowserErrorLogListenerFactory;\n-\n-/**\n- * Process error record.\n- *\n- * @author zhangwei\n- */\n-public class BrowserErrorLogRecordListener implements BrowserErrorLogListener {\n-\n-    private final SourceReceiver sourceReceiver;\n-    private final BrowserErrorLog browserErrorLog;\n-    private BrowserErrorLogRecordSampler sampler;\n-    private SAMPLE_STATUS sampleStatus = SAMPLE_STATUS.UNKNOWN;\n-\n-    private BrowserErrorLogRecordListener(ModuleManager moduleManager, BrowserErrorLogRecordSampler sampler) {\n-        sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n-        browserErrorLog = new BrowserErrorLog();\n-        this.sampler = sampler;\n-    }\n-\n-    @Override\n-    public void build() {\n-        filter(() -> sourceReceiver.receive(browserErrorLog));\n-    }\n-\n-    @Override\n-    public void parse(BrowserErrorLogDecorator decorator, BrowserErrorLogCoreInfo coreInfo) {\n-        filter(coreInfo.getUniqueId(), () -> {\n-            browserErrorLog.setUniqueId(coreInfo.getUniqueId());\n-            browserErrorLog.setServiceId(coreInfo.getServiceId());\n-            browserErrorLog.setServiceVersionId(coreInfo.getServiceVersionId());\n-            browserErrorLog.setPagePathId(coreInfo.getPagePathId());\n-            browserErrorLog.setPagePath(decorator.getPagePath());\n-            browserErrorLog.setTime(decorator.getTime());\n-            browserErrorLog.setTimeBucket(coreInfo.getMinuteTimeBucket());\n-            browserErrorLog.setCategory(coreInfo.getCategory());\n-            browserErrorLog.setDataBinary(decorator.toByteArray());\n-        });\n-    }\n-\n-    private void filter(Runnable runnable) {\n-        filter(null, runnable);\n-    }\n-\n-    private void filter(String uniqueId, Runnable runnable) {\n-        if (sampleStatus.equals(SAMPLE_STATUS.IGNORE)) {\n-            return;\n-        }\n-        if (sampleStatus.equals(SAMPLE_STATUS.UNKNOWN)) {\n-            if (sampler.shouldSample(uniqueId.hashCode())) {\n-                sampleStatus = SAMPLE_STATUS.SAMPLED;\n-            } else {\n-                sampleStatus = SAMPLE_STATUS.IGNORE;\n-            }\n-        }\n-        if (sampleStatus.equals(SAMPLE_STATUS.SAMPLED)) {\n-            runnable.run();\n-        }\n-    }\n-\n-    private enum SAMPLE_STATUS {\n-        UNKNOWN, SAMPLED, IGNORE\n-    }\n-\n-    public static class Factory implements BrowserErrorLogListenerFactory {\n-\n-        private final BrowserErrorLogRecordSampler sampler;\n-\n-        public Factory(int segmentSamplingRate) {\n-            this.sampler = new BrowserErrorLogRecordSampler(segmentSamplingRate);\n-        }\n-\n-        @Override\n-        public BrowserErrorLogListener create(ModuleManager moduleManager, BrowserServiceModuleConfig moduleConfig) {\n-            return new BrowserErrorLogRecordListener(moduleManager, sampler);\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5MDk4Nw==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r376390987", "bodyText": "Why have this? Related to the following NPE question.", "author": "wu-sheng", "createdAt": "2020-02-07T13:32:55Z", "path": "oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/listener/record/BrowserErrorLogRecordListener.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.record;\n+\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.browser.source.BrowserErrorLog;\n+import org.apache.skywalking.oap.server.core.source.SourceReceiver;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.BrowserServiceModuleConfig;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.decorator.BrowserErrorLogCoreInfo;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.decorator.BrowserErrorLogDecorator;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.BrowserErrorLogListener;\n+import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.BrowserErrorLogListenerFactory;\n+\n+/**\n+ * Process error record.\n+ *\n+ * @author zhangwei\n+ */\n+public class BrowserErrorLogRecordListener implements BrowserErrorLogListener {\n+\n+    private final SourceReceiver sourceReceiver;\n+    private final BrowserErrorLog browserErrorLog;\n+    private BrowserErrorLogRecordSampler sampler;\n+    private SAMPLE_STATUS sampleStatus = SAMPLE_STATUS.UNKNOWN;\n+\n+    private BrowserErrorLogRecordListener(ModuleManager moduleManager, BrowserErrorLogRecordSampler sampler) {\n+        sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n+        browserErrorLog = new BrowserErrorLog();\n+        this.sampler = sampler;\n+    }\n+\n+    @Override\n+    public void build() {\n+        filter(() -> sourceReceiver.receive(browserErrorLog));\n+    }\n+\n+    @Override\n+    public void parse(BrowserErrorLogDecorator decorator, BrowserErrorLogCoreInfo coreInfo) {\n+        filter(coreInfo.getUniqueId(), () -> {\n+            browserErrorLog.setUniqueId(coreInfo.getUniqueId());\n+            browserErrorLog.setServiceId(coreInfo.getServiceId());\n+            browserErrorLog.setServiceVersionId(coreInfo.getServiceVersionId());\n+            browserErrorLog.setPagePathId(coreInfo.getPagePathId());\n+            browserErrorLog.setPagePath(decorator.getPagePath());\n+            browserErrorLog.setTime(decorator.getTime());\n+            browserErrorLog.setTimeBucket(coreInfo.getMinuteTimeBucket());\n+            browserErrorLog.setCategory(coreInfo.getCategory());\n+            browserErrorLog.setDataBinary(decorator.toByteArray());\n+        });\n+    }\n+\n+    private void filter(Runnable runnable) {\n+        filter(null, runnable);", "originalCommit": "8bb2a9abf02b2c8bf1510f53871298bc0dd4be35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/listener/record/BrowserErrorLogRecordListener.java b/oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/listener/record/BrowserErrorLogRecordListener.java\ndeleted file mode 100644\nindex 0562fba758..0000000000\n--- a/oap-server/server-receiver-plugin/skywalking-browser-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/recevier/browser/provider/parser/errorlog/listener/record/BrowserErrorLogRecordListener.java\n+++ /dev/null\n\n@@ -1,106 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.record;\n-\n-import org.apache.skywalking.oap.server.core.CoreModule;\n-import org.apache.skywalking.oap.server.core.browser.source.BrowserErrorLog;\n-import org.apache.skywalking.oap.server.core.source.SourceReceiver;\n-import org.apache.skywalking.oap.server.library.module.ModuleManager;\n-import org.apache.skywalking.oap.server.recevier.browser.provider.BrowserServiceModuleConfig;\n-import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.decorator.BrowserErrorLogCoreInfo;\n-import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.decorator.BrowserErrorLogDecorator;\n-import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.BrowserErrorLogListener;\n-import org.apache.skywalking.oap.server.recevier.browser.provider.parser.errorlog.listener.BrowserErrorLogListenerFactory;\n-\n-/**\n- * Process error record.\n- *\n- * @author zhangwei\n- */\n-public class BrowserErrorLogRecordListener implements BrowserErrorLogListener {\n-\n-    private final SourceReceiver sourceReceiver;\n-    private final BrowserErrorLog browserErrorLog;\n-    private BrowserErrorLogRecordSampler sampler;\n-    private SAMPLE_STATUS sampleStatus = SAMPLE_STATUS.UNKNOWN;\n-\n-    private BrowserErrorLogRecordListener(ModuleManager moduleManager, BrowserErrorLogRecordSampler sampler) {\n-        sourceReceiver = moduleManager.find(CoreModule.NAME).provider().getService(SourceReceiver.class);\n-        browserErrorLog = new BrowserErrorLog();\n-        this.sampler = sampler;\n-    }\n-\n-    @Override\n-    public void build() {\n-        filter(() -> sourceReceiver.receive(browserErrorLog));\n-    }\n-\n-    @Override\n-    public void parse(BrowserErrorLogDecorator decorator, BrowserErrorLogCoreInfo coreInfo) {\n-        filter(coreInfo.getUniqueId(), () -> {\n-            browserErrorLog.setUniqueId(coreInfo.getUniqueId());\n-            browserErrorLog.setServiceId(coreInfo.getServiceId());\n-            browserErrorLog.setServiceVersionId(coreInfo.getServiceVersionId());\n-            browserErrorLog.setPagePathId(coreInfo.getPagePathId());\n-            browserErrorLog.setPagePath(decorator.getPagePath());\n-            browserErrorLog.setTime(decorator.getTime());\n-            browserErrorLog.setTimeBucket(coreInfo.getMinuteTimeBucket());\n-            browserErrorLog.setCategory(coreInfo.getCategory());\n-            browserErrorLog.setDataBinary(decorator.toByteArray());\n-        });\n-    }\n-\n-    private void filter(Runnable runnable) {\n-        filter(null, runnable);\n-    }\n-\n-    private void filter(String uniqueId, Runnable runnable) {\n-        if (sampleStatus.equals(SAMPLE_STATUS.IGNORE)) {\n-            return;\n-        }\n-        if (sampleStatus.equals(SAMPLE_STATUS.UNKNOWN)) {\n-            if (sampler.shouldSample(uniqueId.hashCode())) {\n-                sampleStatus = SAMPLE_STATUS.SAMPLED;\n-            } else {\n-                sampleStatus = SAMPLE_STATUS.IGNORE;\n-            }\n-        }\n-        if (sampleStatus.equals(SAMPLE_STATUS.SAMPLED)) {\n-            runnable.run();\n-        }\n-    }\n-\n-    private enum SAMPLE_STATUS {\n-        UNKNOWN, SAMPLED, IGNORE\n-    }\n-\n-    public static class Factory implements BrowserErrorLogListenerFactory {\n-\n-        private final BrowserErrorLogRecordSampler sampler;\n-\n-        public Factory(int segmentSamplingRate) {\n-            this.sampler = new BrowserErrorLogRecordSampler(segmentSamplingRate);\n-        }\n-\n-        @Override\n-        public BrowserErrorLogListener create(ModuleManager moduleManager, BrowserServiceModuleConfig moduleConfig) {\n-            return new BrowserErrorLogRecordListener(moduleManager, sampler);\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5NDcxMQ==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r376394711", "bodyText": "This is error traffic, not error log. You should rename to *ErrorTraffic", "author": "wu-sheng", "createdAt": "2020-02-07T13:41:12Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppErrorLog.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.source;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n+import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n+import org.apache.skywalking.oap.server.core.source.Source;\n+\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_APP_ERROR_LOG;\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_CATALOG_NAME;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@ScopeDeclaration(id = BROWSER_APP_ERROR_LOG, name = \"BrowserAppErrorLog\", catalog = SERVICE_CATALOG_NAME)\n+@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n+public class BrowserAppErrorLog extends Source {", "originalCommit": "8bb2a9abf02b2c8bf1510f53871298bc0dd4be35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppErrorLog.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppErrorLog.java\ndeleted file mode 100644\nindex d49c94127d..0000000000\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppErrorLog.java\n+++ /dev/null\n\n@@ -1,50 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.oap.server.core.browser.source;\n-\n-import lombok.Getter;\n-import lombok.Setter;\n-import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n-import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n-import org.apache.skywalking.oap.server.core.source.Source;\n-\n-import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_APP_ERROR_LOG;\n-import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_CATALOG_NAME;\n-\n-/**\n- * @author zhangwei\n- */\n-@ScopeDeclaration(id = BROWSER_APP_ERROR_LOG, name = \"BrowserAppErrorLog\", catalog = SERVICE_CATALOG_NAME)\n-@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n-public class BrowserAppErrorLog extends Source {\n-\n-    @Override\n-    public int scope() {\n-        return BROWSER_APP_ERROR_LOG;\n-    }\n-\n-    @Override\n-    public String getEntityId() {\n-        return String.valueOf(id);\n-    }\n-\n-    @Getter @Setter private int id;\n-    @Getter private final int count = 1;\n-    @Getter @Setter private BrowserErrorCategory category;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5NDg3NQ==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r376394875", "bodyText": "Log -> Traffic too.", "author": "wu-sheng", "createdAt": "2020-02-07T13:41:30Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPageErrorLog.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.source;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n+import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n+import org.apache.skywalking.oap.server.core.source.Source;\n+\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_APP_PAGE_ERROR_LOG;\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.ENDPOINT_CATALOG_NAME;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@ScopeDeclaration(id = BROWSER_APP_PAGE_ERROR_LOG, name = \"BrowserAppPageErrorLog\", catalog = ENDPOINT_CATALOG_NAME)\n+@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n+public class BrowserAppPageErrorLog extends Source {", "originalCommit": "8bb2a9abf02b2c8bf1510f53871298bc0dd4be35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPageErrorLog.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPageErrorLog.java\ndeleted file mode 100644\nindex 6aa154a5ac..0000000000\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPageErrorLog.java\n+++ /dev/null\n\n@@ -1,52 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.oap.server.core.browser.source;\n-\n-import lombok.Getter;\n-import lombok.Setter;\n-import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n-import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n-import org.apache.skywalking.oap.server.core.source.Source;\n-\n-import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_APP_PAGE_ERROR_LOG;\n-import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.ENDPOINT_CATALOG_NAME;\n-\n-/**\n- * @author zhangwei\n- */\n-@ScopeDeclaration(id = BROWSER_APP_PAGE_ERROR_LOG, name = \"BrowserAppPageErrorLog\", catalog = ENDPOINT_CATALOG_NAME)\n-@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n-public class BrowserAppPageErrorLog extends Source {\n-\n-    @Override\n-    public int scope() {\n-        return BROWSER_APP_PAGE_ERROR_LOG;\n-    }\n-\n-    @Override\n-    public String getEntityId() {\n-        return String.valueOf(id);\n-    }\n-\n-\n-    @Getter @Setter private int id;\n-    @Getter @Setter private int serviceId;\n-    @Getter private final int count = 1;\n-    @Getter @Setter private BrowserErrorCategory category;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5NTE4OQ==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r376395189", "bodyText": "Log collect service is a streaming process mode, you should support that, so this count could be > 1.", "author": "wu-sheng", "createdAt": "2020-02-07T13:42:18Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppErrorLog.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.source;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n+import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n+import org.apache.skywalking.oap.server.core.source.Source;\n+\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_APP_ERROR_LOG;\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_CATALOG_NAME;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@ScopeDeclaration(id = BROWSER_APP_ERROR_LOG, name = \"BrowserAppErrorLog\", catalog = SERVICE_CATALOG_NAME)\n+@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n+public class BrowserAppErrorLog extends Source {\n+\n+    @Override\n+    public int scope() {\n+        return BROWSER_APP_ERROR_LOG;\n+    }\n+\n+    @Override\n+    public String getEntityId() {\n+        return String.valueOf(id);\n+    }\n+\n+    @Getter @Setter private int id;\n+    @Getter private final int count = 1;", "originalCommit": "8bb2a9abf02b2c8bf1510f53871298bc0dd4be35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ3MTA0MA==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r377471040", "bodyText": "Because the client calls the uncertainty of onCompleted, leave it as it is.", "author": "arugal", "createdAt": "2020-02-11T07:12:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5NTE4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppErrorLog.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppErrorLog.java\ndeleted file mode 100644\nindex d49c94127d..0000000000\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppErrorLog.java\n+++ /dev/null\n\n@@ -1,50 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.oap.server.core.browser.source;\n-\n-import lombok.Getter;\n-import lombok.Setter;\n-import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n-import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n-import org.apache.skywalking.oap.server.core.source.Source;\n-\n-import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_APP_ERROR_LOG;\n-import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.SERVICE_CATALOG_NAME;\n-\n-/**\n- * @author zhangwei\n- */\n-@ScopeDeclaration(id = BROWSER_APP_ERROR_LOG, name = \"BrowserAppErrorLog\", catalog = SERVICE_CATALOG_NAME)\n-@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n-public class BrowserAppErrorLog extends Source {\n-\n-    @Override\n-    public int scope() {\n-        return BROWSER_APP_ERROR_LOG;\n-    }\n-\n-    @Override\n-    public String getEntityId() {\n-        return String.valueOf(id);\n-    }\n-\n-    @Getter @Setter private int id;\n-    @Getter private final int count = 1;\n-    @Getter @Setter private BrowserErrorCategory category;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5NTM3MA==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r376395370", "bodyText": "Same as above, could be > 1", "author": "wu-sheng", "createdAt": "2020-02-07T13:42:38Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPageErrorLog.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.core.browser.source;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n+import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n+import org.apache.skywalking.oap.server.core.source.Source;\n+\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_APP_PAGE_ERROR_LOG;\n+import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.ENDPOINT_CATALOG_NAME;\n+\n+/**\n+ * @author zhangwei\n+ */\n+@ScopeDeclaration(id = BROWSER_APP_PAGE_ERROR_LOG, name = \"BrowserAppPageErrorLog\", catalog = ENDPOINT_CATALOG_NAME)\n+@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n+public class BrowserAppPageErrorLog extends Source {\n+\n+    @Override\n+    public int scope() {\n+        return BROWSER_APP_PAGE_ERROR_LOG;\n+    }\n+\n+    @Override\n+    public String getEntityId() {\n+        return String.valueOf(id);\n+    }\n+\n+\n+    @Getter @Setter private int id;\n+    @Getter @Setter private int serviceId;\n+    @Getter private final int count = 1;", "originalCommit": "8bb2a9abf02b2c8bf1510f53871298bc0dd4be35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPageErrorLog.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPageErrorLog.java\ndeleted file mode 100644\nindex 6aa154a5ac..0000000000\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/browser/source/BrowserAppPageErrorLog.java\n+++ /dev/null\n\n@@ -1,52 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.oap.server.core.browser.source;\n-\n-import lombok.Getter;\n-import lombok.Setter;\n-import org.apache.skywalking.oap.server.core.source.ScopeDeclaration;\n-import org.apache.skywalking.oap.server.core.source.ScopeDefaultColumn;\n-import org.apache.skywalking.oap.server.core.source.Source;\n-\n-import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.BROWSER_APP_PAGE_ERROR_LOG;\n-import static org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.ENDPOINT_CATALOG_NAME;\n-\n-/**\n- * @author zhangwei\n- */\n-@ScopeDeclaration(id = BROWSER_APP_PAGE_ERROR_LOG, name = \"BrowserAppPageErrorLog\", catalog = ENDPOINT_CATALOG_NAME)\n-@ScopeDefaultColumn.VirtualColumnDefinition(fieldName = \"entityId\", columnName = \"entity_id\", isID = true, type = String.class)\n-public class BrowserAppPageErrorLog extends Source {\n-\n-    @Override\n-    public int scope() {\n-        return BROWSER_APP_PAGE_ERROR_LOG;\n-    }\n-\n-    @Override\n-    public String getEntityId() {\n-        return String.valueOf(id);\n-    }\n-\n-\n-    @Getter @Setter private int id;\n-    @Getter @Setter private int serviceId;\n-    @Getter private final int count = 1;\n-    @Getter @Setter private BrowserErrorCategory category;\n-}\n"}}, {"oid": "a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "url": "https://github.com/apache/skywalking/commit/a2966d8f8fecdde2fe5b4ad1c008abf3c564b3ae", "message": "commit", "committedDate": "2020-05-06T12:11:19Z", "type": "commit"}, {"oid": "fd9ed3dde9b5e24e270a9e1fe4101953424afeaf", "url": "https://github.com/apache/skywalking/commit/fd9ed3dde9b5e24e270a9e1fe4101953424afeaf", "message": "Merge branch 'master' into browser-receiver", "committedDate": "2020-07-21T10:49:18Z", "type": "commit"}, {"oid": "15b2094c18d51f4a9611cfd85960f9a6dad14683", "url": "https://github.com/apache/skywalking/commit/15b2094c18d51f4a9611cfd85960f9a6dad14683", "message": "sync change", "committedDate": "2020-08-01T09:16:01Z", "type": "commit"}, {"oid": "a157f2e85bfbbc732ec383bd866fbf503777a772", "url": "https://github.com/apache/skywalking/commit/a157f2e85bfbbc732ec383bd866fbf503777a772", "message": "Merge branch 'master' into browser-receiver\n\n# Conflicts:\n#\toap-server/server-bootstrap/pom.xml\n#\toap-server/server-receiver-plugin/pom.xml", "committedDate": "2020-08-01T09:36:36Z", "type": "commit"}, {"oid": "895e7fb18fc9270eb2a023ee2e73a334977dcdcd", "url": "https://github.com/apache/skywalking/commit/895e7fb18fc9270eb2a023ee2e73a334977dcdcd", "message": "sync change", "committedDate": "2020-08-02T14:59:30Z", "type": "commit"}, {"oid": "895e7fb18fc9270eb2a023ee2e73a334977dcdcd", "url": "https://github.com/apache/skywalking/commit/895e7fb18fc9270eb2a023ee2e73a334977dcdcd", "message": "sync change", "committedDate": "2020-08-02T14:59:30Z", "type": "forcePushed"}, {"oid": "0b65880ecae60e7730282d646a487d8ba69b129a", "url": "https://github.com/apache/skywalking/commit/0b65880ecae60e7730282d646a487d8ba69b129a", "message": "Merge branch 'master' into browser-receiver", "committedDate": "2020-08-03T01:29:30Z", "type": "commit"}, {"oid": "47128149a69df27a34e2c525e7a91ebda27ce39f", "url": "https://github.com/apache/skywalking/commit/47128149a69df27a34e2c525e7a91ebda27ce39f", "message": "Merge branch 'master' into browser-receiver", "committedDate": "2020-08-03T04:42:55Z", "type": "commit"}, {"oid": "6a1aabb1d33aaf783fbab1b715e716f38c997472", "url": "https://github.com/apache/skywalking/commit/6a1aabb1d33aaf783fbab1b715e716f38c997472", "message": "fix NodeType valueOf bug", "committedDate": "2020-08-04T05:30:22Z", "type": "commit"}, {"oid": "d0c0844e2bbb1cd244090c2c0e5c4fdf0a5ea4db", "url": "https://github.com/apache/skywalking/commit/d0c0844e2bbb1cd244090c2c0e5c4fdf0a5ea4db", "message": "fix getAllBrowserServices bug of influxdb", "committedDate": "2020-08-04T08:59:12Z", "type": "commit"}, {"oid": "91e92ab52ec04a423c9b1b209fa10d68d041a42f", "url": "https://github.com/apache/skywalking/commit/91e92ab52ec04a423c9b1b209fa10d68d041a42f", "message": "Merge branch 'master' into browser-receiver", "committedDate": "2020-08-09T05:51:18Z", "type": "commit"}, {"oid": "be1561e71e38c72095234f280430751f7ddc72aa", "url": "https://github.com/apache/skywalking/commit/be1561e71e38c72095234f280430751f7ddc72aa", "message": "add some documentation and comments", "committedDate": "2020-08-09T10:08:04Z", "type": "commit"}, {"oid": "803d1d4a80d66cd4b10a90e57e9e994641624791", "url": "https://github.com/apache/skywalking/commit/803d1d4a80d66cd4b10a90e57e9e994641624791", "message": "Merge branch 'master' into browser-receiver", "committedDate": "2020-08-09T10:18:28Z", "type": "commit"}, {"oid": "d409441ed3592d41be8a1e799bf4ba27b613e5e4", "url": "https://github.com/apache/skywalking/commit/d409441ed3592d41be8a1e799bf4ba27b613e5e4", "message": "Merge branch 'master' into browser-receiver", "committedDate": "2020-08-10T13:18:29Z", "type": "commit"}, {"oid": "0aa7581d7f72b1a610ad36fc3284bdcdb77dd12b", "url": "https://github.com/apache/skywalking/commit/0aa7581d7f72b1a610ad36fc3284bdcdb77dd12b", "message": "add more performance metrics", "committedDate": "2020-08-10T14:59:18Z", "type": "commit"}, {"oid": "a6828bc6af390c4c1cb72ec7c7b3f288110b14a4", "url": "https://github.com/apache/skywalking/commit/a6828bc6af390c4c1cb72ec7c7b3f288110b14a4", "message": "Merge branch 'master' into browser-receiver", "committedDate": "2020-08-11T11:07:19Z", "type": "commit"}, {"oid": "cbd999995f1964d15f7f676961f68aab33b5e9b0", "url": "https://github.com/apache/skywalking/commit/cbd999995f1964d15f7f676961f68aab33b5e9b0", "message": "fix checkstyle", "committedDate": "2020-08-11T11:56:13Z", "type": "commit"}, {"oid": "9d2bc16e70ae9209e38ec521a7d619a7dd768d09", "url": "https://github.com/apache/skywalking/commit/9d2bc16e70ae9209e38ec521a7d619a7dd768d09", "message": "Merge remote-tracking branch 'origin/browser-receiver' into browser-receiver", "committedDate": "2020-08-11T11:56:44Z", "type": "commit"}, {"oid": "f872906d50fbe1f0c92afe42cae5339e40447d9a", "url": "https://github.com/apache/skywalking/commit/f872906d50fbe1f0c92afe42cae5339e40447d9a", "message": "rollback code", "committedDate": "2020-08-11T12:06:04Z", "type": "commit"}, {"oid": "f872906d50fbe1f0c92afe42cae5339e40447d9a", "url": "https://github.com/apache/skywalking/commit/f872906d50fbe1f0c92afe42cae5339e40447d9a", "message": "rollback code", "committedDate": "2020-08-11T12:06:04Z", "type": "forcePushed"}, {"oid": "fcc3ad8e371a93650356e97177f6591554e67cd5", "url": "https://github.com/apache/skywalking/commit/fcc3ad8e371a93650356e97177f6591554e67cd5", "message": "rollback code", "committedDate": "2020-08-11T15:02:21Z", "type": "commit"}, {"oid": "83d6044e0402c4152a53b406640d79321d0d0b88", "url": "https://github.com/apache/skywalking/commit/83d6044e0402c4152a53b406640d79321d0d0b88", "message": "Merge branch 'master' into browser-receiver", "committedDate": "2020-08-12T01:26:46Z", "type": "commit"}, {"oid": "932555c92e3c4d9ee3c579ea3c003f65cc294d09", "url": "https://github.com/apache/skywalking/commit/932555c92e3c4d9ee3c579ea3c003f65cc294d09", "message": "Merge branch 'master' into browser-receiver", "committedDate": "2020-08-14T02:14:42Z", "type": "commit"}, {"oid": "be0c61264ab9885bbef6fdd9d1f7c1a831942672", "url": "https://github.com/apache/skywalking/commit/be0c61264ab9885bbef6fdd9d1f7c1a831942672", "message": "implementation browser log query", "committedDate": "2020-08-18T02:15:36Z", "type": "commit"}, {"oid": "d6e21f95756cc0c35c8c777891c7d7d984ba7008", "url": "https://github.com/apache/skywalking/commit/d6e21f95756cc0c35c8c777891c7d7d984ba7008", "message": "sync submodule", "committedDate": "2020-08-18T02:16:54Z", "type": "commit"}, {"oid": "8e5ecf597fc8d7cee6bfbf526545c90955fc6a64", "url": "https://github.com/apache/skywalking/commit/8e5ecf597fc8d7cee6bfbf526545c90955fc6a64", "message": "Merge remote-tracking branch 'origin/browser-receiver' into browser-receiver", "committedDate": "2020-08-18T02:17:15Z", "type": "commit"}, {"oid": "c42bb6608f45b42bb8faa0b08d3a50b3082b80ed", "url": "https://github.com/apache/skywalking/commit/c42bb6608f45b42bb8faa0b08d3a50b3082b80ed", "message": "Merge branch 'master' into browser-receiver", "committedDate": "2020-08-18T04:25:58Z", "type": "commit"}, {"oid": "7db326b648077d54f5dbd0b9e3481ca9e9c3ccf5", "url": "https://github.com/apache/skywalking/commit/7db326b648077d54f5dbd0b9e3481ca9e9c3ccf5", "message": "Merge branch 'master' into browser-receiver", "committedDate": "2020-08-18T07:59:00Z", "type": "commit"}, {"oid": "ec5bc1775a600ce6c56e383dafbfc0bac67d2db6", "url": "https://github.com/apache/skywalking/commit/ec5bc1775a600ce6c56e383dafbfc0bac67d2db6", "message": "implementation browser log query", "committedDate": "2020-08-18T08:27:38Z", "type": "commit"}, {"oid": "bd6da21cfc76272990fab9c4d9a3082aaf483f95", "url": "https://github.com/apache/skywalking/commit/bd6da21cfc76272990fab9c4d9a3082aaf483f95", "message": "Merge branch 'master' into browser-receiver", "committedDate": "2020-08-19T05:12:25Z", "type": "commit"}, {"oid": "a9936b4b16eb0a29d1148596f35a3c775bbbe2cd", "url": "https://github.com/apache/skywalking/commit/a9936b4b16eb0a29d1148596f35a3c775bbbe2cd", "message": "Merge remote-tracking branch 'origin/browser-receiver' into browser-receiver", "committedDate": "2020-08-19T05:17:42Z", "type": "commit"}, {"oid": "ebc14f5810eda77c6bf94e7aba6f8728db386337", "url": "https://github.com/apache/skywalking/commit/ebc14f5810eda77c6bf94e7aba6f8728db386337", "message": "implementation browser log query", "committedDate": "2020-08-19T05:41:06Z", "type": "commit"}, {"oid": "ac599811b3dab1781b8bc028535da03a374e29b5", "url": "https://github.com/apache/skywalking/commit/ac599811b3dab1781b8bc028535da03a374e29b5", "message": "fix NPE", "committedDate": "2020-08-19T09:17:33Z", "type": "commit"}, {"oid": "86a1d823f505b12e17bc47afd7ff17052f0a0b60", "url": "https://github.com/apache/skywalking/commit/86a1d823f505b12e17bc47afd7ff17052f0a0b60", "message": "support richPercent function", "committedDate": "2020-08-19T14:17:06Z", "type": "commit"}, {"oid": "dd798253b26056253c6f61757aa6d13ff79b63a4", "url": "https://github.com/apache/skywalking/commit/dd798253b26056253c6f61757aa6d13ff79b63a4", "message": "Merge branch 'master' into browser-receiver", "committedDate": "2020-08-19T14:18:57Z", "type": "commit"}, {"oid": "9dd46d0a360145f8be5f3cfcec52ccbb0380bf08", "url": "https://github.com/apache/skywalking/commit/9dd46d0a360145f8be5f3cfcec52ccbb0380bf08", "message": "Update docs/en/protocols/README.md\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-08-19T14:19:48Z", "type": "commit"}, {"oid": "ca2b715eaf8b3ed4e473354a0b96f37275528da8", "url": "https://github.com/apache/skywalking/commit/ca2b715eaf8b3ed4e473354a0b96f37275528da8", "message": "del unused code", "committedDate": "2020-08-19T14:23:15Z", "type": "commit"}, {"oid": "89a4c5e44ca8cad78c6a2888867c52dc8034e95f", "url": "https://github.com/apache/skywalking/commit/89a4c5e44ca8cad78c6a2888867c52dc8034e95f", "message": "Merge remote-tracking branch 'origin/browser-receiver' into browser-receiver", "committedDate": "2020-08-19T14:23:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgyOTczMA==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r473829730", "bodyText": "This should be rate, numerator and denominator", "author": "wu-sheng", "createdAt": "2020-08-20T09:49:55Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/RichPercentMetrics.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.oap.server.core.analysis.metrics;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Entrance;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Expression;\n+import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.MetricsFunction;\n+import org.apache.skywalking.oap.server.core.query.sql.Function;\n+import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n+\n+@MetricsFunction(functionName = \"richPercent\")\n+public abstract class RichPercentMetrics extends Metrics implements IntValueHolder {", "originalCommit": "89a4c5e44ca8cad78c6a2888867c52dc8034e95f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyNTQ2MA==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r474425460", "bodyText": "done", "author": "arugal", "createdAt": "2020-08-21T06:01:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgyOTczMA=="}], "type": "inlineReview", "revised_code": {"commit": "01466da7513f5626235ebd58e65dd165327b0d07", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/RichPercentMetrics.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/RateMetrics.java\nsimilarity index 70%\nrename from oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/RichPercentMetrics.java\nrename to oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/RateMetrics.java\nindex 92e64b3918..d4cedb6921 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/RichPercentMetrics.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/metrics/RateMetrics.java\n\n@@ -25,43 +25,44 @@ import org.apache.skywalking.oap.server.core.analysis.metrics.annotation.Metrics\n import org.apache.skywalking.oap.server.core.query.sql.Function;\n import org.apache.skywalking.oap.server.core.storage.annotation.Column;\n \n-@MetricsFunction(functionName = \"richPercent\")\n-public abstract class RichPercentMetrics extends Metrics implements IntValueHolder {\n-    protected static final String TOTAL = \"total\";\n-    protected static final String MATCH = \"match\";\n+@MetricsFunction(functionName = \"rate\")\n+public abstract class RateMetrics extends Metrics implements IntValueHolder {\n+    protected static final String DENOMINATOR = \"denominator\";\n+    protected static final String NUMERATOR = \"numerator\";\n     protected static final String PERCENTAGE = \"percentage\";\n \n     @Getter\n     @Setter\n-    @Column(columnName = TOTAL)\n-    private long total;\n+    @Column(columnName = DENOMINATOR)\n+    private long denominator;\n     @Getter\n     @Setter\n     @Column(columnName = PERCENTAGE, dataType = Column.ValueDataType.COMMON_VALUE, function = Function.Avg)\n     private int percentage;\n     @Getter\n     @Setter\n-    @Column(columnName = MATCH)\n-    private long match;\n+    @Column(columnName = NUMERATOR)\n+    private long numerator;\n \n     @Entrance\n-    public final void combine(@Expression boolean isTotal, @Expression boolean isMatch) {\n-        if (isMatch) {\n-            match++;\n-        } else if (isTotal) {\n-            total++;\n+    public final void combine(@Expression boolean isNumerator, @Expression boolean isDenominator) {\n+        if (isNumerator) {\n+            numerator++;\n+        }\n+        if (isDenominator) {\n+            denominator++;\n         }\n     }\n \n     @Override\n     public final void combine(Metrics metrics) {\n-        total += ((RichPercentMetrics) metrics).total;\n-        match += ((RichPercentMetrics) metrics).match;\n+        denominator += ((RateMetrics) metrics).denominator;\n+        numerator += ((RateMetrics) metrics).numerator;\n     }\n \n     @Override\n     public void calculate() {\n-        percentage = (int) (match * 10000 / total);\n+        percentage = (int) (numerator * 10000 / denominator);\n     }\n \n     @Override\n"}}, {"oid": "01466da7513f5626235ebd58e65dd165327b0d07", "url": "https://github.com/apache/skywalking/commit/01466da7513f5626235ebd58e65dd165327b0d07", "message": "rename rete function", "committedDate": "2020-08-21T05:59:59Z", "type": "commit"}, {"oid": "1dd6b6f50dd439e7001b68d0e3721a9cfa8c1a5e", "url": "https://github.com/apache/skywalking/commit/1dd6b6f50dd439e7001b68d0e3721a9cfa8c1a5e", "message": "Merge branch 'master' into browser-receiver", "committedDate": "2020-08-21T06:00:54Z", "type": "commit"}, {"oid": "52646f49af1272b4afb114a3629063dc7b1c90cd", "url": "https://github.com/apache/skywalking/commit/52646f49af1272b4afb114a3629063dc7b1c90cd", "message": "fix ci", "committedDate": "2020-08-21T08:39:49Z", "type": "commit"}, {"oid": "1af7b37595ba325ee03b9fa887527e7892babb0e", "url": "https://github.com/apache/skywalking/commit/1af7b37595ba325ee03b9fa887527e7892babb0e", "message": "Merge remote-tracking branch 'origin/browser-receiver' into browser-receiver", "committedDate": "2020-08-21T08:42:04Z", "type": "commit"}, {"oid": "4227f52a565fe27d8ff840952396ce70c35a6b5b", "url": "https://github.com/apache/skywalking/commit/4227f52a565fe27d8ff840952396ce70c35a6b5b", "message": "Merge branch 'master' into browser-receiver", "committedDate": "2020-08-21T14:01:14Z", "type": "commit"}, {"oid": "e33ec0643332f54d064f3d068e8ea9593857471d", "url": "https://github.com/apache/skywalking/commit/e33ec0643332f54d064f3d068e8ea9593857471d", "message": "Merge branch 'master' into browser-receiver", "committedDate": "2020-08-22T13:02:56Z", "type": "commit"}, {"oid": "094ad2432f952aa821b1af2424d2345e64d2ea49", "url": "https://github.com/apache/skywalking/commit/094ad2432f952aa821b1af2424d2345e64d2ea49", "message": "reduce metrics", "committedDate": "2020-08-24T14:00:09Z", "type": "commit"}, {"oid": "e21559aa41e3ccd20838b76ecdf154720a1df724", "url": "https://github.com/apache/skywalking/commit/e21559aa41e3ccd20838b76ecdf154720a1df724", "message": "Merge remote-tracking branch 'origin/browser-receiver' into browser-receiver", "committedDate": "2020-08-24T14:06:45Z", "type": "commit"}, {"oid": "7b1c9fc35f12d842b59265ddfb085ff42ae96c26", "url": "https://github.com/apache/skywalking/commit/7b1c9fc35f12d842b59265ddfb085ff42ae96c26", "message": "Merge branch 'master' into browser-receiver", "committedDate": "2020-08-24T14:10:42Z", "type": "commit"}, {"oid": "852f93ab8198df289365a1ef9fb6c436cc5f0024", "url": "https://github.com/apache/skywalking/commit/852f93ab8198df289365a1ef9fb6c436cc5f0024", "message": "Merge branch 'master' into browser-receiver", "committedDate": "2020-08-24T14:13:00Z", "type": "commit"}, {"oid": "36ef91723e5f95079eaa643cbd15f047a706a031", "url": "https://github.com/apache/skywalking/commit/36ef91723e5f95079eaa643cbd15f047a706a031", "message": "add browser_app_page_fmp_percentile", "committedDate": "2020-08-25T01:40:12Z", "type": "commit"}, {"oid": "51ced14359c7f6164e8596264209136c89d5a7f4", "url": "https://github.com/apache/skywalking/commit/51ced14359c7f6164e8596264209136c89d5a7f4", "message": "Merge remote-tracking branch 'origin/browser-receiver' into browser-receiver", "committedDate": "2020-08-25T01:40:38Z", "type": "commit"}, {"oid": "645508ffd6784602e609b69cdee5516cb3361b80", "url": "https://github.com/apache/skywalking/commit/645508ffd6784602e609b69cdee5516cb3361b80", "message": "reduce", "committedDate": "2020-08-26T08:55:02Z", "type": "commit"}, {"oid": "a88411278902f60ccc27b5dd5aaccacf7378d002", "url": "https://github.com/apache/skywalking/commit/a88411278902f60ccc27b5dd5aaccacf7378d002", "message": "Merge branch 'master' into browser-receiver\n\n# Conflicts:\n#\toap-server/oal-grammar/src/main/antlr4/org/apache/skywalking/oal/rt/grammar/OALLexer.g4\n#\toap-server/oal-rt/src/test/java/org/apache/skywalking/oal/rt/parser/ScriptParserTest.java", "committedDate": "2020-08-27T02:01:32Z", "type": "commit"}, {"oid": "5f4aaaa5ce40e5e974fd0be56102c5cc489335e0", "url": "https://github.com/apache/skywalking/commit/5f4aaaa5ce40e5e974fd0be56102c5cc489335e0", "message": "Update README.md\n\n@arugal The browser agent is not for tracing.", "committedDate": "2020-08-27T02:37:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI4MjA1NA==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r478282054", "bodyText": "Why many classes have this empty line?", "author": "wu-sheng", "createdAt": "2020-08-27T09:27:24Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/BrowserErrorLog.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.oap.server.core.query.type;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+@Setter\n+@Getter\n+public class BrowserErrorLog {\n+", "originalCommit": "5f4aaaa5ce40e5e974fd0be56102c5cc489335e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73f7a18249855630a2e98619ee9d37f3186e795a", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/BrowserErrorLog.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/BrowserErrorLog.java\nindex 994558b0c5..5e73536742 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/BrowserErrorLog.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/type/BrowserErrorLog.java\n\n@@ -23,7 +23,6 @@ import lombok.Setter;\n @Setter\n @Getter\n public class BrowserErrorLog {\n-\n     private String service;\n     private String serviceVersion;\n     private Long time;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI4Mjc2Ng==", "url": "https://github.com/apache/skywalking/pull/4228#discussion_r478282766", "bodyText": "Same here. Could you recheck the codes and local format?", "author": "wu-sheng", "createdAt": "2020-08-27T09:28:38Z", "path": "oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/BrowserLogQuery.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.oap.query.graphql.resolver;\n+\n+import com.coxautodev.graphql.tools.GraphQLQueryResolver;\n+import java.io.IOException;\n+import java.util.Optional;\n+import lombok.RequiredArgsConstructor;\n+import org.apache.skywalking.oap.server.core.CoreModule;\n+import org.apache.skywalking.oap.server.core.query.BrowserLogQueryService;\n+import org.apache.skywalking.oap.server.core.query.input.BrowserErrorLogQueryCondition;\n+import org.apache.skywalking.oap.server.core.query.type.BrowserErrorLogs;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+\n+import static java.util.Objects.nonNull;\n+\n+@RequiredArgsConstructor\n+public class BrowserLogQuery implements GraphQLQueryResolver {\n+", "originalCommit": "5f4aaaa5ce40e5e974fd0be56102c5cc489335e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3d095e37cbeb1f5180859e47e64050c30904260", "chunk": "diff --git a/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/BrowserLogQuery.java b/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/BrowserLogQuery.java\nindex 34e5cf4158..3298f12f97 100644\n--- a/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/BrowserLogQuery.java\n+++ b/oap-server/server-query-plugin/query-graphql-plugin/src/main/java/org/apache/skywalking/oap/query/graphql/resolver/BrowserLogQuery.java\n\n@@ -31,7 +31,6 @@ import static java.util.Objects.nonNull;\n \n @RequiredArgsConstructor\n public class BrowserLogQuery implements GraphQLQueryResolver {\n-\n     private final ModuleManager moduleManager;\n     private BrowserLogQueryService queryService;\n \n"}}, {"oid": "a3d095e37cbeb1f5180859e47e64050c30904260", "url": "https://github.com/apache/skywalking/commit/a3d095e37cbeb1f5180859e47e64050c30904260", "message": "comments", "committedDate": "2020-08-31T01:36:37Z", "type": "commit"}, {"oid": "b4848aaa55d95b31ce8f7547f05da942535afcfe", "url": "https://github.com/apache/skywalking/commit/b4848aaa55d95b31ce8f7547f05da942535afcfe", "message": "Merge remote-tracking branch 'origin/browser-receiver' into browser-receiver", "committedDate": "2020-08-31T01:36:53Z", "type": "commit"}, {"oid": "ca2ce1ab5ca60a5dc17c1d0294cc55720fe00d9f", "url": "https://github.com/apache/skywalking/commit/ca2ce1ab5ca60a5dc17c1d0294cc55720fe00d9f", "message": "Merge branch 'master' into browser-receiver", "committedDate": "2020-08-31T01:37:11Z", "type": "commit"}, {"oid": "73f7a18249855630a2e98619ee9d37f3186e795a", "url": "https://github.com/apache/skywalking/commit/73f7a18249855630a2e98619ee9d37f3186e795a", "message": "comments", "committedDate": "2020-08-31T01:57:34Z", "type": "commit"}, {"oid": "1fd159f208e600a0f34819fd1f9545f042c97bfa", "url": "https://github.com/apache/skywalking/commit/1fd159f208e600a0f34819fd1f9545f042c97bfa", "message": "Merge remote-tracking branch 'origin/browser-receiver' into browser-receiver", "committedDate": "2020-08-31T01:57:47Z", "type": "commit"}]}