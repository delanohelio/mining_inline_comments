{"pr_number": 4972, "pr_title": "Provide server-side meter", "pr_createdAt": "2020-06-25T15:26:52Z", "pr_url": "https://github.com/apache/skywalking/pull/4972", "timeline": [{"oid": "91b388bcd95cfa2e9e923e19bc801c3535cc440f", "url": "https://github.com/apache/skywalking/commit/91b388bcd95cfa2e9e923e19bc801c3535cc440f", "message": "Provide meter receiver", "committedDate": "2020-06-25T15:09:43Z", "type": "commit"}, {"oid": "e0fad4103524b4e4390d11d89f264adf6e867350", "url": "https://github.com/apache/skywalking/commit/e0fad4103524b4e4390d11d89f264adf6e867350", "message": "Change the groovy plugin declare path", "committedDate": "2020-06-25T15:15:54Z", "type": "commit"}, {"oid": "4b0d7a9db798aeae7b9daefff1b671bfbd268fc9", "url": "https://github.com/apache/skywalking/commit/4b0d7a9db798aeae7b9daefff1b671bfbd268fc9", "message": "Adding exception catch, encase throw exception to break the gRPC process.", "committedDate": "2020-06-25T15:20:22Z", "type": "commit"}, {"oid": "273bc3cc221b16d50ccc3adbf9415ffae3ac7fae", "url": "https://github.com/apache/skywalking/commit/273bc3cc221b16d50ccc3adbf9415ffae3ac7fae", "message": "Resolve e2e test", "committedDate": "2020-06-26T04:39:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3Nzg3Mw==", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r446477873", "bodyText": "Code style is not right.", "author": "wu-sheng", "createdAt": "2020-06-27T03:21:15Z", "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/config/MeterConfigs.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.meter.provider.config;\n+\n+import lombok.Data;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+import org.apache.skywalking.oap.server.library.util.ResourceUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class MeterConfigs {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MeterConfigs.class);", "originalCommit": "273bc3cc221b16d50ccc3adbf9415ffae3ac7fae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e019cec0d148e436f13d3380ceb16daf0ed6ecee", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/config/MeterConfigs.java b/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/config/MeterConfigs.java\nindex c14059ef2f..c474d61925 100644\n--- a/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/config/MeterConfigs.java\n+++ b/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/config/MeterConfigs.java\n\n@@ -35,9 +35,15 @@ import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n \n+/**\n+ * Meter config loader.\n+ */\n public class MeterConfigs {\n     private static final Logger LOGGER = LoggerFactory.getLogger(MeterConfigs.class);\n \n+    /**\n+     * Load all configs from path\n+     */\n     public static List<MeterConfig> loadConfig(String path) throws ModuleStartException {\n         File[] configs;\n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3Nzg4Mg==", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r446477882", "bodyText": "Comments?", "author": "wu-sheng", "createdAt": "2020-06-27T03:21:26Z", "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/config/MeterConfigs.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.meter.provider.config;\n+\n+import lombok.Data;\n+import org.apache.skywalking.oap.server.library.module.ModuleStartException;\n+import org.apache.skywalking.oap.server.library.util.ResourceUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class MeterConfigs {", "originalCommit": "273bc3cc221b16d50ccc3adbf9415ffae3ac7fae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e019cec0d148e436f13d3380ceb16daf0ed6ecee", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/config/MeterConfigs.java b/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/config/MeterConfigs.java\nindex c14059ef2f..c474d61925 100644\n--- a/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/config/MeterConfigs.java\n+++ b/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/config/MeterConfigs.java\n\n@@ -35,9 +35,15 @@ import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n \n+/**\n+ * Meter config loader.\n+ */\n public class MeterConfigs {\n     private static final Logger LOGGER = LoggerFactory.getLogger(MeterConfigs.class);\n \n+    /**\n+     * Load all configs from path\n+     */\n     public static List<MeterConfig> loadConfig(String path) throws ModuleStartException {\n         File[] configs;\n         try {\n"}}, {"oid": "e019cec0d148e436f13d3380ceb16daf0ed6ecee", "url": "https://github.com/apache/skywalking/commit/e019cec0d148e436f13d3380ceb16daf0ed6ecee", "message": "Change issues\nSupport e2e meter test", "committedDate": "2020-07-11T11:46:45Z", "type": "commit"}, {"oid": "fbdcf3319e1465a308b9b9fac8713d75fac3684d", "url": "https://github.com/apache/skywalking/commit/fbdcf3319e1465a308b9b9fac8713d75fac3684d", "message": "Merge branch 'master' into server-side-meter", "committedDate": "2020-07-11T11:53:07Z", "type": "commit"}, {"oid": "28e00d7e21c08b7d2c7c2a8d2f88a66ef4849569", "url": "https://github.com/apache/skywalking/commit/28e00d7e21c08b7d2c7c2a8d2f88a66ef4849569", "message": "Change the logger format", "committedDate": "2020-07-11T11:57:10Z", "type": "commit"}, {"oid": "1f7be4530e0d31243c1aba4a165b3dd43d5f3476", "url": "https://github.com/apache/skywalking/commit/1f7be4530e0d31243c1aba4a165b3dd43d5f3476", "message": "Adding apache snapshot repository declare", "committedDate": "2020-07-11T12:18:10Z", "type": "commit"}, {"oid": "c4db9aae1a4602889d89b98896f7a4b0f4069e3d", "url": "https://github.com/apache/skywalking/commit/c4db9aae1a4602889d89b98896f7a4b0f4069e3d", "message": "Fix UT", "committedDate": "2020-07-11T13:33:06Z", "type": "commit"}, {"oid": "6e9eb2e41c8a77c5fbb58f0d9727b0ac4d49e440", "url": "https://github.com/apache/skywalking/commit/6e9eb2e41c8a77c5fbb58f0d9727b0ac4d49e440", "message": "Fix UT", "committedDate": "2020-07-11T15:23:36Z", "type": "commit"}, {"oid": "03738d693e517049db002ab0b78bd18252b36324", "url": "https://github.com/apache/skywalking/commit/03738d693e517049db002ab0b78bd18252b36324", "message": "1. Resolve issue\n2. Add UI init templates", "committedDate": "2020-07-19T01:52:20Z", "type": "commit"}, {"oid": "9a62e8481da376e7ab42921f6f0f92f2fe4c1d16", "url": "https://github.com/apache/skywalking/commit/9a62e8481da376e7ab42921f6f0f92f2fe4c1d16", "message": "Merge branch 'master' into server-side-meter", "committedDate": "2020-07-19T01:55:36Z", "type": "commit"}, {"oid": "96a18f2bf694c5104a1785a03dc3ac16de99eab4", "url": "https://github.com/apache/skywalking/commit/96a18f2bf694c5104a1785a03dc3ac16de99eab4", "message": "Fix E2E validate meter names", "committedDate": "2020-07-19T03:40:14Z", "type": "commit"}, {"oid": "d548d5a02b79e13df77e7d142a6d461a24288d11", "url": "https://github.com/apache/skywalking/commit/d548d5a02b79e13df77e7d142a6d461a24288d11", "message": "Merge branch 'master' into server-side-meter", "committedDate": "2020-07-20T00:10:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk3NDI0Nw==", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r456974247", "bodyText": "All loggers, please use @Slf4j", "author": "wu-sheng", "createdAt": "2020-07-20T00:15:47Z", "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/MeterBuilder.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.meter.provider.process;\n+\n+import groovy.lang.GroovyShell;\n+import org.apache.skywalking.oap.server.core.analysis.TimeBucket;\n+import org.apache.skywalking.oap.server.core.analysis.meter.MeterEntity;\n+import org.apache.skywalking.oap.server.core.analysis.meter.MeterSystem;\n+import org.apache.skywalking.oap.server.core.analysis.meter.function.AcceptableValue;\n+import org.apache.skywalking.oap.server.core.analysis.meter.function.AvgHistogramPercentileFunction;\n+import org.apache.skywalking.oap.server.core.analysis.meter.function.BucketedValues;\n+import org.apache.skywalking.oap.server.receiver.meter.provider.config.MeterConfig;\n+import org.apache.skywalking.oap.server.receiver.meter.provider.config.Scope;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.StringJoiner;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Help to build meter into Meter System.\n+ */\n+public class MeterBuilder {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MeterBuilder.class);", "originalCommit": "d548d5a02b79e13df77e7d142a6d461a24288d11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef524894bd36ca7e84df2a7e5a38a0be9b580490", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/MeterBuilder.java b/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/MeterBuilder.java\nindex 27f6bb6b1b..5df5e54848 100644\n--- a/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/MeterBuilder.java\n+++ b/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/MeterBuilder.java\n\n@@ -19,6 +19,7 @@\n package org.apache.skywalking.oap.server.receiver.meter.provider.process;\n \n import groovy.lang.GroovyShell;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.skywalking.oap.server.core.analysis.TimeBucket;\n import org.apache.skywalking.oap.server.core.analysis.meter.MeterEntity;\n import org.apache.skywalking.oap.server.core.analysis.meter.MeterSystem;\n"}}, {"oid": "33eae03a63ce659c91b1592798204e7ce52358ee", "url": "https://github.com/apache/skywalking/commit/33eae03a63ce659c91b1592798204e7ce52358ee", "message": "1. Fix document\n2. Remove e2e must using mysql", "committedDate": "2020-07-20T12:57:52Z", "type": "commit"}, {"oid": "7d862a973fb4c52aa1308a43a1ccfe73fac421fe", "url": "https://github.com/apache/skywalking/commit/7d862a973fb4c52aa1308a43a1ccfe73fac421fe", "message": "Merge branch 'master' into server-side-meter", "committedDate": "2020-07-20T13:09:33Z", "type": "commit"}, {"oid": "ef524894bd36ca7e84df2a7e5a38a0be9b580490", "url": "https://github.com/apache/skywalking/commit/ef524894bd36ca7e84df2a7e5a38a0be9b580490", "message": "Fix issues", "committedDate": "2020-07-20T13:20:39Z", "type": "commit"}, {"oid": "7b023be1fe8bb79fcad9d04c9f33a58268c04d27", "url": "https://github.com/apache/skywalking/commit/7b023be1fe8bb79fcad9d04c9f33a58268c04d27", "message": "Fix e2e expose", "committedDate": "2020-07-21T05:31:05Z", "type": "commit"}, {"oid": "ccbb79402ee7a92bc2440edbd5f4a5323c3d6836", "url": "https://github.com/apache/skywalking/commit/ccbb79402ee7a92bc2440edbd5f4a5323c3d6836", "message": "Merge branch 'master' into server-side-meter", "committedDate": "2020-07-21T06:35:44Z", "type": "commit"}, {"oid": "c6efd480e9ee978986adf1b99e935efd97af4ce4", "url": "https://github.com/apache/skywalking/commit/c6efd480e9ee978986adf1b99e935efd97af4ce4", "message": "Merge branch 'master' into server-side-meter", "committedDate": "2020-07-21T12:56:53Z", "type": "commit"}, {"oid": "c28e50d44c651e9e2ee4642fcff8ec1ff00fcb5a", "url": "https://github.com/apache/skywalking/commit/c28e50d44c651e9e2ee4642fcff8ec1ff00fcb5a", "message": "Merge branch 'master' into server-side-meter", "committedDate": "2020-07-22T14:15:23Z", "type": "commit"}, {"oid": "3bda9027c3334f19555e7815867bcaeff2776f11", "url": "https://github.com/apache/skywalking/commit/3bda9027c3334f19555e7815867bcaeff2776f11", "message": "Add sleuth setup document", "committedDate": "2020-07-23T12:56:03Z", "type": "commit"}, {"oid": "33f40f3e838bb2726c341dacb4356e9eb2d15289", "url": "https://github.com/apache/skywalking/commit/33f40f3e838bb2726c341dacb4356e9eb2d15289", "message": "Merge branch 'master' into server-side-meter", "committedDate": "2020-07-23T12:56:31Z", "type": "commit"}, {"oid": "9784374f05f93cf3baf4804e1b283052c36465e0", "url": "https://github.com/apache/skywalking/commit/9784374f05f93cf3baf4804e1b283052c36465e0", "message": "Update screenshot", "committedDate": "2020-07-23T13:35:48Z", "type": "commit"}, {"oid": "5eb22c92b8b5647d0df165f7ff32a09fb9860d56", "url": "https://github.com/apache/skywalking/commit/5eb22c92b8b5647d0df165f7ff32a09fb9860d56", "message": "Merge branch 'master' into server-side-meter", "committedDate": "2020-07-23T13:52:22Z", "type": "commit"}, {"oid": "04889ca489987648af81eb1ed167e0fafc8ec2b1", "url": "https://github.com/apache/skywalking/commit/04889ca489987648af81eb1ed167e0fafc8ec2b1", "message": "Merge branch 'master' into server-side-meter", "committedDate": "2020-07-25T08:25:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3OTU4OQ==", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r460379589", "bodyText": "Suggestion: make all the methods in this interface default and throws new UnsupportedOperationException(), so that the subclasses can only override the methods they need, and don't need to override all the methods that they don't need.", "author": "kezhenxu94", "createdAt": "2020-07-25T08:03:26Z", "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/MeterEvalOperation.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.meter.provider.process;\n+\n+/**\n+ * Meter support calculate operation\n+ */\n+public interface MeterEvalOperation<FROM extends EvalData> {", "originalCommit": "5eb22c92b8b5647d0df165f7ff32a09fb9860d56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM5Mzc3MA==", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r460393770", "bodyText": "Thanks for simply the code.", "author": "mrproliu", "createdAt": "2020-07-25T11:03:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3OTU4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a50bdc19da9bce3ac9441c68ddcaa0f5c95f5e76", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/MeterEvalOperation.java b/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/MeterEvalOperation.java\nindex 820089f391..f5b82faf0e 100644\n--- a/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/MeterEvalOperation.java\n+++ b/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/MeterEvalOperation.java\n\n@@ -26,61 +26,85 @@ public interface MeterEvalOperation<FROM extends EvalData> {\n     /**\n      * Add value to meter\n      */\n-    EvalData add(double value);\n+    default EvalData add(double value) {\n+        throw new UnsupportedOperationException();\n+    }\n \n     /**\n      * Add from eval data\n      */\n-    EvalData add(FROM data);\n+    default EvalData add(FROM data) {\n+        throw new UnsupportedOperationException();\n+    }\n \n     /**\n      * Minus from value\n      */\n-    EvalData minus(double value);\n+    default EvalData minus(double value) {\n+        throw new UnsupportedOperationException();\n+    }\n \n     /**\n      * Subtract from eval data\n      */\n-    EvalData minus(FROM data);\n+    default EvalData minus(FROM data) {\n+        throw new UnsupportedOperationException();\n+    }\n \n     /**\n      * Multiply by value\n      */\n-    EvalData multiply(double value);\n+    default EvalData multiply(double value) {\n+        throw new UnsupportedOperationException();\n+    }\n \n     /**\n      * Multiply from eval data\n      */\n-    EvalData multiply(FROM data);\n+    default EvalData multiply(FROM data) {\n+        throw new UnsupportedOperationException();\n+    }\n \n     /**\n      * Divide from value\n      */\n-    EvalData divide(double value);\n+    default EvalData divide(double value) {\n+        throw new UnsupportedOperationException();\n+    }\n \n     /**\n      * Mean from eval data\n      */\n-    EvalData divide(FROM data);\n+    default EvalData divide(FROM data) {\n+        throw new UnsupportedOperationException();\n+    }\n \n     /**\n      * Scale the meter value.\n      */\n-    EvalData scale(Integer value);\n+    default EvalData scale(Integer value) {\n+        throw new UnsupportedOperationException();\n+    }\n \n     /**\n      * IRate value from time range\n      */\n-    EvalData irate(String range);\n+    default EvalData irate(String range) {\n+        throw new UnsupportedOperationException();\n+    }\n \n     /**\n      * Rate value from time range\n      */\n-    EvalData rate(String range);\n+    default EvalData rate(String range) {\n+        throw new UnsupportedOperationException();\n+    }\n \n     /**\n      * Get increase value from time range\n      */\n-    EvalData increase(String range);\n+    default EvalData increase(String range) {\n+        throw new UnsupportedOperationException();\n+    }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3OTk5OQ==", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r460379999", "bodyText": "From the exception message Only support multiply from single value, the condition should be if (!(data instanceof EvalSingleData)) so that it also applies when data instanceof EvalMultipleData or data instanceof other future subclass of EvalData", "author": "kezhenxu94", "createdAt": "2020-07-25T08:08:32Z", "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/EvalSingleData.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.meter.provider.process;\n+\n+import lombok.Data;\n+import org.apache.skywalking.apm.network.language.agent.v3.Label;\n+import org.apache.skywalking.apm.network.language.agent.v3.MeterSingleValue;\n+\n+import java.math.BigDecimal;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Support counter, gauge\n+ */\n+@Data\n+public class EvalSingleData extends EvalData<EvalData> {\n+\n+    private double value;\n+\n+    public static EvalSingleData build(MeterSingleValue value, MeterProcessor processor) {\n+        final EvalSingleData singleEvalData = new EvalSingleData();\n+        singleEvalData.name = value.getName();\n+        singleEvalData.labels = value.getLabelsList().stream()\n+            .collect(Collectors.toMap(Label::getName, Label::getValue));\n+        singleEvalData.processor = processor;\n+        singleEvalData.value = value.getValue();\n+        return singleEvalData;\n+    }\n+\n+    @Override\n+    public EvalData multiply(double value) {\n+        return copyTo(EvalSingleData.class, instance -> instance.value = this.value * value);\n+    }\n+\n+    @Override\n+    public EvalData multiply(EvalData data) {\n+        if (data instanceof EvalHistogramData) {\n+            throw new IllegalArgumentException(\"Only support multiply from single value\");\n+        }", "originalCommit": "5eb22c92b8b5647d0df165f7ff32a09fb9860d56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM5MzcwNQ==", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r460393705", "bodyText": "Thanks, that's a good suggest.", "author": "mrproliu", "createdAt": "2020-07-25T11:02:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3OTk5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a50bdc19da9bce3ac9441c68ddcaa0f5c95f5e76", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/EvalSingleData.java b/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/EvalSingleData.java\nindex 3865ff32b8..5cca9b7c80 100644\n--- a/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/EvalSingleData.java\n+++ b/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/EvalSingleData.java\n\n@@ -50,7 +50,7 @@ public class EvalSingleData extends EvalData<EvalData> {\n \n     @Override\n     public EvalData multiply(EvalData data) {\n-        if (data instanceof EvalHistogramData) {\n+        if (!(data instanceof EvalSingleData)) {\n             throw new IllegalArgumentException(\"Only support multiply from single value\");\n         }\n         return copyTo(EvalSingleData.class, instance -> instance.value = this.value * ((EvalSingleData) data).value);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM4MDU4MQ==", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r460380581", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            double rateVal = (sum - i._2) / ((now - i._1) / 1000);\n          \n          \n            \n                            double rateVal = (sum - i._2) / ((now - i._1) / 1000.0);", "author": "kezhenxu94", "createdAt": "2020-07-25T08:15:40Z", "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/Window.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.meter.provider.process;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+import io.vavr.Function2;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n+import lombok.EqualsAndHashCode;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Agent base window. Using on counter function, such as rate, irate, increase.\n+ */\n+public class Window {\n+\n+    private static Map<String, Window> INSTANCE_WINDOW = new ConcurrentHashMap<>();\n+    private final Map<ID, Queue<Tuple2<Long, Double>>> windows = Maps.newHashMap();\n+\n+    private Window() {\n+    }\n+\n+    public static Window getWindow(String service, String serviceInstance) {\n+        return INSTANCE_WINDOW.computeIfAbsent(service + \"_\" + serviceInstance, k -> new Window());\n+    }\n+\n+    public Function2<CalculateType, String, Double> get(EvalSingleData data) {\n+        ID id = new ID(data.getName(), ImmutableMap.copyOf(data.getLabels()));\n+        return (calculateType, range) -> operateCounter(id, data.getValue(), calculateType, range);\n+    }\n+\n+    public Function2<CalculateType, String, Double> get(EvalHistogramData data, double bucket) {\n+        ID id = new ID(data.getName(), ImmutableMap.<String, String>builder()\n+            .putAll(data.getLabels()).put(\"_bucket\", String.valueOf(bucket)).build());\n+        return (calculateType, range) -> operateCounter(id, (double) data.getBuckets().get(bucket), calculateType, range);\n+    }\n+\n+    private Double operateCounter(ID id, Double sum, CalculateType calculateType, String range) {\n+        long now = System.currentTimeMillis();\n+        switch (calculateType) {\n+            case INCREASE:\n+                Tuple2<Long, Double> i = increase(sum, id, Duration.parse(range).toMillis());\n+                return sum - i._2;\n+            case RATE:\n+                i = increase(sum, id, Duration.parse(range).toMillis());\n+                double rateVal = (sum - i._2) / ((now - i._1) / 1000);", "originalCommit": "5eb22c92b8b5647d0df165f7ff32a09fb9860d56", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a50bdc19da9bce3ac9441c68ddcaa0f5c95f5e76", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/Window.java b/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/Window.java\nindex 4c3b983709..035b28c61c 100644\n--- a/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/Window.java\n+++ b/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/Window.java\n\n@@ -68,11 +68,11 @@ public class Window {\n                 return sum - i._2;\n             case RATE:\n                 i = increase(sum, id, Duration.parse(range).toMillis());\n-                double rateVal = (sum - i._2) / ((now - i._1) / 1000);\n+                double rateVal = (sum - i._2) / ((now - i._1) / 1000.0);\n                 return Objects.equals(rateVal, Double.NaN) ? 0d : rateVal;\n             case IRATE:\n                 i = increase(sum, id, 0);\n-                double iRateVal = (sum - i._2) / ((now - i._1) / 1000);\n+                double iRateVal = (sum - i._2) / ((now - i._1) / 1000.0);\n                 return Objects.equals(iRateVal, Double.NaN) ? 0d : iRateVal;\n             default:\n                 return sum;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM4MDU5MA==", "url": "https://github.com/apache/skywalking/pull/4972#discussion_r460380590", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            double iRateVal = (sum - i._2) / ((now - i._1) / 1000);\n          \n          \n            \n                            double iRateVal = (sum - i._2) / ((now - i._1) / 1000.0);", "author": "kezhenxu94", "createdAt": "2020-07-25T08:15:54Z", "path": "oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/Window.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.meter.provider.process;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+import io.vavr.Function2;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n+import lombok.EqualsAndHashCode;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Agent base window. Using on counter function, such as rate, irate, increase.\n+ */\n+public class Window {\n+\n+    private static Map<String, Window> INSTANCE_WINDOW = new ConcurrentHashMap<>();\n+    private final Map<ID, Queue<Tuple2<Long, Double>>> windows = Maps.newHashMap();\n+\n+    private Window() {\n+    }\n+\n+    public static Window getWindow(String service, String serviceInstance) {\n+        return INSTANCE_WINDOW.computeIfAbsent(service + \"_\" + serviceInstance, k -> new Window());\n+    }\n+\n+    public Function2<CalculateType, String, Double> get(EvalSingleData data) {\n+        ID id = new ID(data.getName(), ImmutableMap.copyOf(data.getLabels()));\n+        return (calculateType, range) -> operateCounter(id, data.getValue(), calculateType, range);\n+    }\n+\n+    public Function2<CalculateType, String, Double> get(EvalHistogramData data, double bucket) {\n+        ID id = new ID(data.getName(), ImmutableMap.<String, String>builder()\n+            .putAll(data.getLabels()).put(\"_bucket\", String.valueOf(bucket)).build());\n+        return (calculateType, range) -> operateCounter(id, (double) data.getBuckets().get(bucket), calculateType, range);\n+    }\n+\n+    private Double operateCounter(ID id, Double sum, CalculateType calculateType, String range) {\n+        long now = System.currentTimeMillis();\n+        switch (calculateType) {\n+            case INCREASE:\n+                Tuple2<Long, Double> i = increase(sum, id, Duration.parse(range).toMillis());\n+                return sum - i._2;\n+            case RATE:\n+                i = increase(sum, id, Duration.parse(range).toMillis());\n+                double rateVal = (sum - i._2) / ((now - i._1) / 1000);\n+                return Objects.equals(rateVal, Double.NaN) ? 0d : rateVal;\n+            case IRATE:\n+                i = increase(sum, id, 0);\n+                double iRateVal = (sum - i._2) / ((now - i._1) / 1000);", "originalCommit": "5eb22c92b8b5647d0df165f7ff32a09fb9860d56", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a50bdc19da9bce3ac9441c68ddcaa0f5c95f5e76", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/Window.java b/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/Window.java\nindex 4c3b983709..035b28c61c 100644\n--- a/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/Window.java\n+++ b/oap-server/server-receiver-plugin/skywalking-meter-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/meter/provider/process/Window.java\n\n@@ -68,11 +68,11 @@ public class Window {\n                 return sum - i._2;\n             case RATE:\n                 i = increase(sum, id, Duration.parse(range).toMillis());\n-                double rateVal = (sum - i._2) / ((now - i._1) / 1000);\n+                double rateVal = (sum - i._2) / ((now - i._1) / 1000.0);\n                 return Objects.equals(rateVal, Double.NaN) ? 0d : rateVal;\n             case IRATE:\n                 i = increase(sum, id, 0);\n-                double iRateVal = (sum - i._2) / ((now - i._1) / 1000);\n+                double iRateVal = (sum - i._2) / ((now - i._1) / 1000.0);\n                 return Objects.equals(iRateVal, Double.NaN) ? 0d : iRateVal;\n             default:\n                 return sum;\n"}}, {"oid": "a50bdc19da9bce3ac9441c68ddcaa0f5c95f5e76", "url": "https://github.com/apache/skywalking/commit/a50bdc19da9bce3ac9441c68ddcaa0f5c95f5e76", "message": "1. Fix e2e, e2e\n2. Change Spring Sleuth dashboard UI config", "committedDate": "2020-07-25T11:01:51Z", "type": "commit"}, {"oid": "22d10e01ad38728c1171a57aa698d7a494724047", "url": "https://github.com/apache/skywalking/commit/22d10e01ad38728c1171a57aa698d7a494724047", "message": "Merge branch 'master' into server-side-meter", "committedDate": "2020-07-25T11:04:15Z", "type": "commit"}, {"oid": "883c4c2dc2e449600f78a6d19ae9c50779221d8d", "url": "https://github.com/apache/skywalking/commit/883c4c2dc2e449600f78a6d19ae9c50779221d8d", "message": "Add unimplemented subclass of MeterEvalOperation UT", "committedDate": "2020-07-25T12:16:00Z", "type": "commit"}, {"oid": "a36b28c1ab70c249c9d533bc11d0dfd0b5ebe106", "url": "https://github.com/apache/skywalking/commit/a36b28c1ab70c249c9d533bc11d0dfd0b5ebe106", "message": "Fix missing Licence", "committedDate": "2020-07-25T12:16:36Z", "type": "commit"}]}