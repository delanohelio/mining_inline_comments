{"pr_number": 4745, "pr_title": "Support multiple ways to analyze segments in rest", "pr_createdAt": "2020-05-05T15:35:02Z", "pr_url": "https://github.com/apache/skywalking/pull/4745", "timeline": [{"oid": "7ce0bb9f75da4fcba7a5654cc3555552737ac534", "url": "https://github.com/apache/skywalking/commit/7ce0bb9f75da4fcba7a5654cc3555552737ac534", "message": "support multiple segments analyze", "committedDate": "2020-05-05T09:10:35Z", "type": "commit"}, {"oid": "d496793812b2e5d1bd78536446a78070f49888d1", "url": "https://github.com/apache/skywalking/commit/d496793812b2e5d1bd78536446a78070f49888d1", "message": "Support multiple ways to analyze segment data", "committedDate": "2020-05-05T15:25:44Z", "type": "commit"}, {"oid": "6cae6b57b7505bc68b893af8930d4e8bf696e7d4", "url": "https://github.com/apache/skywalking/commit/6cae6b57b7505bc68b893af8930d4e8bf696e7d4", "message": "Merge branch 'master' into rest-segment-parse-multi-lines", "committedDate": "2020-05-05T15:35:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxMDYwMg==", "url": "https://github.com/apache/skywalking/pull/4745#discussion_r420210602", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return \"/v3/segmentList\";\n          \n          \n            \n                    return \"/v3/segments.json\";", "author": "kezhenxu94", "createdAt": "2020-05-05T15:44:13Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportListJsonServletHandler.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider.handler.v8.rest;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import org.apache.skywalking.apm.network.language.agent.v3.SegmentObject;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.util.ProtoBufJsonUtils;\n+import org.apache.skywalking.oap.server.receiver.trace.provider.TraceServiceModuleConfig;\n+import org.apache.skywalking.oap.server.receiver.trace.provider.parser.SegmentParserListenerManager;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Parsing segments from list json\n+ */\n+public class TraceSegmentReportListJsonServletHandler extends TraceSegmentReportBaseServletHandler {\n+\n+    private final Gson gson = new Gson();\n+\n+    public TraceSegmentReportListJsonServletHandler(ModuleManager moduleManager, SegmentParserListenerManager listenerManager, TraceServiceModuleConfig config) {\n+        super(moduleManager, listenerManager, config);\n+    }\n+\n+    @Override\n+    protected List<SegmentObject> parseSegments(HttpServletRequest request) throws IOException {\n+        BufferedReader reader = request.getReader();\n+        String line;\n+        StringBuilder stringBuilder = new StringBuilder();\n+        while ((line = reader.readLine()) != null) {\n+            stringBuilder.append(line);\n+        }\n+\n+        final JsonArray array = gson.fromJson(stringBuilder.toString(), JsonArray.class);\n+        if (array.size() == 0) {\n+            return Collections.emptyList();\n+        }\n+\n+        final ArrayList<SegmentObject> segments = new ArrayList<>(array.size());\n+        for (JsonElement element : array) {\n+            SegmentObject.Builder upstreamSegmentBuilder = SegmentObject.newBuilder();\n+            ProtoBufJsonUtils.fromJSON(element.toString(), upstreamSegmentBuilder);\n+            segments.add(upstreamSegmentBuilder.build());\n+        }\n+        return segments;\n+    }\n+\n+    @Override\n+    public String pathSpec() {\n+        return \"/v3/segmentList\";", "originalCommit": "6cae6b57b7505bc68b893af8930d4e8bf696e7d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "807361f55357e2edc5d4e8dff912dd8e18cd6e49", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportListJsonServletHandler.java b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportListServletHandler.java\nsimilarity index 90%\nrename from oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportListJsonServletHandler.java\nrename to oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportListServletHandler.java\nindex 6d762aca92..64374d5993 100644\n--- a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportListJsonServletHandler.java\n+++ b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportListServletHandler.java\n\n@@ -37,11 +37,11 @@ import java.util.List;\n /**\n  * Parsing segments from list json\n  */\n-public class TraceSegmentReportListJsonServletHandler extends TraceSegmentReportBaseServletHandler {\n+public class TraceSegmentReportListServletHandler extends TraceSegmentReportBaseServletHandler {\n \n     private final Gson gson = new Gson();\n \n-    public TraceSegmentReportListJsonServletHandler(ModuleManager moduleManager, SegmentParserListenerManager listenerManager, TraceServiceModuleConfig config) {\n+    public TraceSegmentReportListServletHandler(ModuleManager moduleManager, SegmentParserListenerManager listenerManager, TraceServiceModuleConfig config) {\n         super(moduleManager, listenerManager, config);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxMDgwMw==", "url": "https://github.com/apache/skywalking/pull/4745#discussion_r420210803", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return \"/v3/segments\";\n          \n          \n            \n                    return \"/v3/segments.jsonl\";", "author": "kezhenxu94", "createdAt": "2020-05-05T15:44:30Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportMultipleLineServletHandler.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider.handler.v8.rest;\n+\n+import org.apache.skywalking.apm.network.language.agent.v3.SegmentObject;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.library.util.ProtoBufJsonUtils;\n+import org.apache.skywalking.oap.server.receiver.trace.provider.TraceServiceModuleConfig;\n+import org.apache.skywalking.oap.server.receiver.trace.provider.parser.SegmentParserListenerManager;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Parsing segments from multiple lines\n+ */\n+public class TraceSegmentReportMultipleLineServletHandler extends TraceSegmentReportBaseServletHandler {\n+\n+    public TraceSegmentReportMultipleLineServletHandler(ModuleManager moduleManager, SegmentParserListenerManager listenerManager, TraceServiceModuleConfig config) {\n+        super(moduleManager, listenerManager, config);\n+    }\n+\n+    @Override\n+    protected List<SegmentObject> parseSegments(HttpServletRequest req) throws IOException {\n+        final List<SegmentObject> segments = new ArrayList<>();\n+        BufferedReader reader = req.getReader();\n+        String line;\n+        while ((line = reader.readLine()) != null) {\n+            SegmentObject.Builder upstreamSegmentBuilder = SegmentObject.newBuilder();\n+            ProtoBufJsonUtils.fromJSON(line, upstreamSegmentBuilder);\n+            segments.add(upstreamSegmentBuilder.build());\n+        }\n+\n+        return segments;\n+    }\n+\n+    @Override\n+    public String pathSpec() {\n+        return \"/v3/segments\";", "originalCommit": "6cae6b57b7505bc68b893af8930d4e8bf696e7d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3NzI0Ng==", "url": "https://github.com/apache/skywalking/pull/4745#discussion_r420477246", "bodyText": "@kezhenxu94 This will break the e2e, LUA agent, and test tool.", "author": "wu-sheng", "createdAt": "2020-05-06T00:01:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxMDgwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3ODM4Nw==", "url": "https://github.com/apache/skywalking/pull/4745#discussion_r420478387", "bodyText": "If we really hope to break the endpoint, consider using /segment and /segments, which could represent better. But before the change, need to update the test tool and LUA agent, then back to this PR.", "author": "wu-sheng", "createdAt": "2020-05-06T00:05:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxMDgwMw=="}], "type": "inlineReview", "revised_code": {"commit": "807361f55357e2edc5d4e8dff912dd8e18cd6e49", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportMultipleLineServletHandler.java b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportMultipleLineServletHandler.java\ndeleted file mode 100644\nindex aa4bfd721d..0000000000\n--- a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportMultipleLineServletHandler.java\n+++ /dev/null\n\n@@ -1,60 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.oap.server.receiver.trace.provider.handler.v8.rest;\n-\n-import org.apache.skywalking.apm.network.language.agent.v3.SegmentObject;\n-import org.apache.skywalking.oap.server.library.module.ModuleManager;\n-import org.apache.skywalking.oap.server.library.util.ProtoBufJsonUtils;\n-import org.apache.skywalking.oap.server.receiver.trace.provider.TraceServiceModuleConfig;\n-import org.apache.skywalking.oap.server.receiver.trace.provider.parser.SegmentParserListenerManager;\n-\n-import javax.servlet.http.HttpServletRequest;\n-import java.io.BufferedReader;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-/**\n- * Parsing segments from multiple lines\n- */\n-public class TraceSegmentReportMultipleLineServletHandler extends TraceSegmentReportBaseServletHandler {\n-\n-    public TraceSegmentReportMultipleLineServletHandler(ModuleManager moduleManager, SegmentParserListenerManager listenerManager, TraceServiceModuleConfig config) {\n-        super(moduleManager, listenerManager, config);\n-    }\n-\n-    @Override\n-    protected List<SegmentObject> parseSegments(HttpServletRequest req) throws IOException {\n-        final List<SegmentObject> segments = new ArrayList<>();\n-        BufferedReader reader = req.getReader();\n-        String line;\n-        while ((line = reader.readLine()) != null) {\n-            SegmentObject.Builder upstreamSegmentBuilder = SegmentObject.newBuilder();\n-            ProtoBufJsonUtils.fromJSON(line, upstreamSegmentBuilder);\n-            segments.add(upstreamSegmentBuilder.build());\n-        }\n-\n-        return segments;\n-    }\n-\n-    @Override\n-    public String pathSpec() {\n-        return \"/v3/segments\";\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3NzYzMw==", "url": "https://github.com/apache/skywalking/pull/4745#discussion_r420477633", "bodyText": "I don't think this is a good example. This is not an official format in JSON.", "author": "wu-sheng", "createdAt": "2020-05-06T00:03:00Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportServletHandlerTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider.handler.v8.rest;\n+\n+import org.apache.skywalking.apm.network.language.agent.v3.SegmentObject;\n+import org.apache.skywalking.oap.server.library.module.ModuleManager;\n+import org.apache.skywalking.oap.server.telemetry.TelemetryModule;\n+import org.apache.skywalking.oap.server.telemetry.api.MetricsCreator;\n+import org.apache.skywalking.oap.server.telemetry.none.MetricsCreatorNoop;\n+import org.apache.skywalking.oap.server.telemetry.none.NoneTelemetryProvider;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.internal.util.reflection.Whitebox;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.List;\n+\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(PowerMockRunner.class)\n+@PowerMockIgnore({\"javax.management.*\"})\n+public class TraceSegmentReportServletHandlerTest {\n+\n+    @Mock\n+    private HttpServletRequest request;\n+    @Mock\n+    private ModuleManager moduleManager;\n+    @Mock\n+    private NoneTelemetryProvider telemetryProvider;\n+\n+    @Before\n+    public void init() throws IOException {\n+        TelemetryModule telemetryModule = Mockito.spy(TelemetryModule.class);\n+        Whitebox.setInternalState(telemetryModule, \"loadedProvider\", telemetryProvider);\n+        Mockito.when(moduleManager.find(TelemetryModule.NAME)).thenReturn(telemetryModule);\n+\n+        Mockito.when(telemetryProvider.getService(MetricsCreator.class))\n+            .thenReturn(new MetricsCreatorNoop());\n+    }\n+\n+    @Test\n+    public void testSingle() throws IOException {\n+        String singleJson = \"{\" +\n+            \"   \\\"traceId\\\":\\\"c480c738-b628-490d-ace7-69f7030d77cb\\\",\" +\n+            \"   \\\"spans\\\":[\" +\n+            \"       {\\\"operationName\\\":\\\"\\\\/ingress\\\"}\" +\n+            \"   ]\" +\n+            \"}\";\n+\n+        final TraceSegmentReportSingleServletHandler singleServletHandler =\n+            new TraceSegmentReportSingleServletHandler(moduleManager, null, null);\n+\n+        when(request.getReader()).thenReturn(new BufferedReader(new StringReader(singleJson)));\n+        final List<SegmentObject> segmentObjects = singleServletHandler.parseSegments(request);\n+        Assert.assertEquals(segmentObjects.size(), 1);\n+    }\n+\n+    @Test\n+    public void testMultipleLine() throws IOException {\n+        String multipleLineJson = \"{\" +", "originalCommit": "6cae6b57b7505bc68b893af8930d4e8bf696e7d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3NzcyOA==", "url": "https://github.com/apache/skywalking/pull/4745#discussion_r420477728", "bodyText": "And isn't better than the official JSON list way.", "author": "wu-sheng", "createdAt": "2020-05-06T00:03:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3NzYzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDA5MA==", "url": "https://github.com/apache/skywalking/pull/4745#discussion_r420504090", "bodyText": "It adapts to the current LUA agent. Should I need to fix the LUA first? let the LUA agent using the JSON object or JSON list.", "author": "mrproliu", "createdAt": "2020-05-06T01:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3NzYzMw=="}], "type": "inlineReview", "revised_code": {"commit": "807361f55357e2edc5d4e8dff912dd8e18cd6e49", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportServletHandlerTest.java b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportServletHandlerTest.java\nindex c72610942c..15498415cc 100644\n--- a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportServletHandlerTest.java\n+++ b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/handler/v8/rest/TraceSegmentReportServletHandlerTest.java\n\n@@ -80,28 +80,6 @@ public class TraceSegmentReportServletHandlerTest {\n         Assert.assertEquals(segmentObjects.size(), 1);\n     }\n \n-    @Test\n-    public void testMultipleLine() throws IOException {\n-        String multipleLineJson = \"{\" +\n-            \"   \\\"traceId\\\":\\\"c480c738-b628-490d-ace7-69f7030d77cb\\\",\" +\n-            \"   \\\"spans\\\":[\" +\n-            \"       {\\\"operationName\\\":\\\"\\\\/ingress\\\"}\" +\n-            \"   ]\" +\n-            \"}\\r\\n\" +\n-            \"{\" +\n-            \"   \\\"traceId\\\":\\\"e9673310-cf3a-467e-8f47-eaec26b57f76\\\",\" +\n-            \"   \\\"spans\\\":[\" +\n-            \"       {\\\"operationName\\\":\\\"\\\\/ingress\\\"}\" +\n-            \"]}\";\n-\n-        final TraceSegmentReportMultipleLineServletHandler singleServletHandler =\n-            new TraceSegmentReportMultipleLineServletHandler(moduleManager, null, null);\n-\n-        when(request.getReader()).thenReturn(new BufferedReader(new StringReader(multipleLineJson)));\n-        final List<SegmentObject> segmentObjects = singleServletHandler.parseSegments(request);\n-        Assert.assertEquals(segmentObjects.size(), 2);\n-    }\n-\n     @Test\n     public void testListJson() throws IOException {\n         String listJson = \"[{\" +\n"}}, {"oid": "807361f55357e2edc5d4e8dff912dd8e18cd6e49", "url": "https://github.com/apache/skywalking/commit/807361f55357e2edc5d4e8dff912dd8e18cd6e49", "message": "Change to support single or list of the segment data, add the document", "committedDate": "2020-05-06T05:24:50Z", "type": "commit"}, {"oid": "ec15f33eead6619119b194f2672071df0d43b241", "url": "https://github.com/apache/skywalking/commit/ec15f33eead6619119b194f2672071df0d43b241", "message": "fix document and change the lua agent commit id", "committedDate": "2020-05-08T04:58:38Z", "type": "commit"}, {"oid": "dc9ddb40e818a63b684a4755047fbb6f85c7960c", "url": "https://github.com/apache/skywalking/commit/dc9ddb40e818a63b684a4755047fbb6f85c7960c", "message": "Merge branch 'master' into rest-segment-parse-multi-lines", "committedDate": "2020-05-08T05:09:42Z", "type": "commit"}, {"oid": "02a9a67d12289214325a6eef8659fc68adfa5a60", "url": "https://github.com/apache/skywalking/commit/02a9a67d12289214325a6eef8659fc68adfa5a60", "message": "Merge branch 'master' into rest-segment-parse-multi-lines", "committedDate": "2020-05-08T13:23:04Z", "type": "commit"}]}