{"pr_number": 5136, "pr_title": "Separate config initialization in the plugin out of core level Config.", "pr_createdAt": "2020-07-20T12:45:43Z", "pr_url": "https://github.com/apache/skywalking/pull/5136", "timeline": [{"oid": "ca7d57adedb3c5f8dc0cbf0a5fcbc0bc67b6c3ee", "url": "https://github.com/apache/skywalking/commit/ca7d57adedb3c5f8dc0cbf0a5fcbc0bc67b6c3ee", "message": "Separate config initialization in the plugin out of core level Config.", "committedDate": "2020-07-20T12:39:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM2MzY1Nw==", "url": "https://github.com/apache/skywalking/pull/5136#discussion_r457363657", "bodyText": "I didn't see any particular usage of this method, all implementations of this interface return the class itself, just to get the implemented class, I think this method is no needed actually", "author": "kezhenxu94", "createdAt": "2020-07-20T13:04:50Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/boot/ConfigInitializationService.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.boot;\n+\n+/**\n+ * ConfigInitializationService provides the config class which should host all parameters originally from agent setup.\n+ * {@link org.apache.skywalking.apm.agent.core.conf.Config} provides the core level config, all plugins could implement\n+ * this interface to have the same capability about initializing config from agent.config, system properties and system\n+ * environment variables.\n+ */\n+public interface ConfigInitializationService {\n+    /**\n+     * @return Config to host parameters, all static fields set based on the config variable name.\n+     */\n+    Class config();", "originalCommit": "ca7d57adedb3c5f8dc0cbf0a5fcbc0bc67b6c3ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM2NjM2OA==", "url": "https://github.com/apache/skywalking/pull/5136#discussion_r457366368", "bodyText": "I just want to follow the SPI mode, because the developer actually could not return this class type.", "author": "wu-sheng", "createdAt": "2020-07-20T13:08:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM2MzY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM2ODgzMw==", "url": "https://github.com/apache/skywalking/pull/5136#discussion_r457368833", "bodyText": "I just want to follow the SPI mode, because the developer actually could not return this class type.\n\nThis is nothing todo with SPI IMO, and the developer doesn't need to return the type, we just get the actual class in the service loader, see my another comment inline", "author": "kezhenxu94", "createdAt": "2020-07-20T13:11:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM2MzY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3MzgwMw==", "url": "https://github.com/apache/skywalking/pull/5136#discussion_r457373803", "bodyText": "I have read that. I mean, this Config class is loaded through SPI.", "author": "wu-sheng", "createdAt": "2020-07-20T13:18:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM2MzY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyMTM4NQ==", "url": "https://github.com/apache/skywalking/pull/5136#discussion_r457421385", "bodyText": "I think the new initialization mode fits your preference more. Anyway, the old way is wrong in the tech perspective.", "author": "wu-sheng", "createdAt": "2020-07-20T14:10:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM2MzY1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f5d13666401c0ec7273d434df0bdc93024cb2886", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/boot/ConfigInitializationService.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/boot/PluginConfig.java\nsimilarity index 87%\nrename from apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/boot/ConfigInitializationService.java\nrename to apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/boot/PluginConfig.java\nindex 243c601b3..eb0387c94 100644\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/boot/ConfigInitializationService.java\n+++ b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/boot/PluginConfig.java\n\n@@ -24,9 +24,5 @@ package org.apache.skywalking.apm.agent.core.boot;\n  * this interface to have the same capability about initializing config from agent.config, system properties and system\n  * environment variables.\n  */\n-public interface ConfigInitializationService {\n-    /**\n-     * @return Config to host parameters, all static fields set based on the config variable name.\n-     */\n-    Class config();\n+public interface PluginConfig {\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM2MzkxMQ==", "url": "https://github.com/apache/skywalking/pull/5136#discussion_r457363911", "bodyText": "Here is what I mean\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        SnifferConfigInitializer.initializeConfig(configInitializationService.config());\n          \n          \n            \n                        SnifferConfigInitializer.initializeConfig(configInitializationService.getClass());", "author": "kezhenxu94", "createdAt": "2020-07-20T13:05:11Z", "path": "apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/boot/PluginConfigInitializer.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.agent.core.boot;\n+\n+import java.util.ServiceLoader;\n+import org.apache.skywalking.apm.agent.core.conf.SnifferConfigInitializer;\n+import org.apache.skywalking.apm.agent.core.plugin.loader.AgentClassLoader;\n+\n+/**\n+ * PluginConfigInitializer loads Config(s) in all existing plugins, and initialize them through current agent settings.\n+ */\n+public class PluginConfigInitializer {\n+    public void initConfigurationsOfAllPlugins() {\n+        final ServiceLoader<ConfigInitializationService> configServiceLoader = ServiceLoader.load(\n+            ConfigInitializationService.class, AgentClassLoader.getDefault());\n+        configServiceLoader.forEach(configInitializationService -> {\n+            SnifferConfigInitializer.initializeConfig(configInitializationService.config());", "originalCommit": "ca7d57adedb3c5f8dc0cbf0a5fcbc0bc67b6c3ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5d13666401c0ec7273d434df0bdc93024cb2886", "chunk": "diff --git a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/boot/PluginConfigInitializer.java b/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/boot/PluginConfigInitializer.java\ndeleted file mode 100644\nindex 32b4f4346..000000000\n--- a/apm-sniffer/apm-agent-core/src/main/java/org/apache/skywalking/apm/agent/core/boot/PluginConfigInitializer.java\n+++ /dev/null\n\n@@ -1,36 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n- */\n-\n-package org.apache.skywalking.apm.agent.core.boot;\n-\n-import java.util.ServiceLoader;\n-import org.apache.skywalking.apm.agent.core.conf.SnifferConfigInitializer;\n-import org.apache.skywalking.apm.agent.core.plugin.loader.AgentClassLoader;\n-\n-/**\n- * PluginConfigInitializer loads Config(s) in all existing plugins, and initialize them through current agent settings.\n- */\n-public class PluginConfigInitializer {\n-    public void initConfigurationsOfAllPlugins() {\n-        final ServiceLoader<ConfigInitializationService> configServiceLoader = ServiceLoader.load(\n-            ConfigInitializationService.class, AgentClassLoader.getDefault());\n-        configServiceLoader.forEach(configInitializationService -> {\n-            SnifferConfigInitializer.initializeConfig(configInitializationService.config());\n-        });\n-    }\n-}\n"}}, {"oid": "f5d13666401c0ec7273d434df0bdc93024cb2886", "url": "https://github.com/apache/skywalking/commit/f5d13666401c0ec7273d434df0bdc93024cb2886", "message": "Try to use SkyWalking ClassLoader to initialize the Config class.", "committedDate": "2020-07-20T13:48:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0NzE1NQ==", "url": "https://github.com/apache/skywalking/pull/5136#discussion_r457447155", "bodyText": "Is it intentionally named with a Service suffix? Seems very different from others", "author": "kezhenxu94", "createdAt": "2020-07-20T14:38:00Z", "path": "apm-sniffer/optional-plugins/customize-enhance-plugin/src/main/java/org/apache/skywalking/apm/plugin/customize/conf/PluginConfigService.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.plugin.customize.conf;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.skywalking.apm.agent.core.boot.PluginConfig;\n+\n+public class PluginConfigService implements PluginConfig {", "originalCommit": "f5d13666401c0ec7273d434df0bdc93024cb2886", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d7c990268307660be70c94f0db7efd960f935b9e", "chunk": "diff --git a/apm-sniffer/optional-plugins/customize-enhance-plugin/src/main/java/org/apache/skywalking/apm/plugin/customize/conf/PluginConfigService.java b/apm-sniffer/optional-plugins/customize-enhance-plugin/src/main/java/org/apache/skywalking/apm/plugin/customize/conf/CustomizePluginConfig.java\nsimilarity index 96%\nrename from apm-sniffer/optional-plugins/customize-enhance-plugin/src/main/java/org/apache/skywalking/apm/plugin/customize/conf/PluginConfigService.java\nrename to apm-sniffer/optional-plugins/customize-enhance-plugin/src/main/java/org/apache/skywalking/apm/plugin/customize/conf/CustomizePluginConfig.java\nindex 0738e3094..6d3891c80 100644\n--- a/apm-sniffer/optional-plugins/customize-enhance-plugin/src/main/java/org/apache/skywalking/apm/plugin/customize/conf/PluginConfigService.java\n+++ b/apm-sniffer/optional-plugins/customize-enhance-plugin/src/main/java/org/apache/skywalking/apm/plugin/customize/conf/CustomizePluginConfig.java\n\n@@ -22,7 +22,7 @@ import java.util.HashMap;\n import java.util.Map;\n import org.apache.skywalking.apm.agent.core.boot.PluginConfig;\n \n-public class PluginConfigService implements PluginConfig {\n+public class CustomizePluginConfig implements PluginConfig {\n     public static class Plugin {\n         public static class Customize {\n             /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0NzQ3OQ==", "url": "https://github.com/apache/skywalking/pull/5136#discussion_r457447479", "bodyText": "And this one", "author": "kezhenxu94", "createdAt": "2020-07-20T14:38:24Z", "path": "apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/ToolkitPluginConfigService.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.apm.toolkit.activation;\n+\n+import org.apache.skywalking.apm.agent.core.boot.PluginConfig;\n+\n+public class ToolkitPluginConfigService implements PluginConfig {", "originalCommit": "f5d13666401c0ec7273d434df0bdc93024cb2886", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d7c990268307660be70c94f0db7efd960f935b9e", "chunk": "diff --git a/apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/ToolkitPluginConfigService.java b/apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/ToolkitPluginConfig.java\nsimilarity index 95%\nrename from apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/ToolkitPluginConfigService.java\nrename to apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/ToolkitPluginConfig.java\nindex fe987f485..101f68a88 100644\n--- a/apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/ToolkitPluginConfigService.java\n+++ b/apm-sniffer/apm-toolkit-activation/apm-toolkit-trace-activation/src/main/java/org/apache/skywalking/apm/toolkit/activation/ToolkitPluginConfig.java\n\n@@ -20,7 +20,7 @@ package org.apache.skywalking.apm.toolkit.activation;\n \n import org.apache.skywalking.apm.agent.core.boot.PluginConfig;\n \n-public class ToolkitPluginConfigService implements PluginConfig {\n+public class ToolkitPluginConfig implements PluginConfig {\n     public static class Plugin {\n         public static class Toolkit {\n             /**\n"}}, {"oid": "d7c990268307660be70c94f0db7efd960f935b9e", "url": "https://github.com/apache/skywalking/commit/d7c990268307660be70c94f0db7efd960f935b9e", "message": "Fix 2 naming issues.", "committedDate": "2020-07-20T14:53:43Z", "type": "commit"}, {"oid": "d9af8f3665ce8323d5a3e3fc58535b0a5a9ae490", "url": "https://github.com/apache/skywalking/commit/d9af8f3665ce8323d5a3e3fc58535b0a5a9ae490", "message": "Fix config initialization bug.", "committedDate": "2020-07-21T00:47:36Z", "type": "commit"}, {"oid": "3b87cf2fd6f061c5151239ebdcf96d880f9b12b6", "url": "https://github.com/apache/skywalking/commit/3b87cf2fd6f061c5151239ebdcf96d880f9b12b6", "message": "Fix Custom Plugin in separate config initialization in the plugin out of core level Config. (#5141)", "committedDate": "2020-07-21T08:21:16Z", "type": "commit"}, {"oid": "57e06e853c76258f8592112ce3194fb5a5e422a7", "url": "https://github.com/apache/skywalking/commit/57e06e853c76258f8592112ce3194fb5a5e422a7", "message": "Merge branch 'master' into configInit", "committedDate": "2020-07-21T08:48:12Z", "type": "commit"}]}