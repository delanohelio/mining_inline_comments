{"pr_number": 4454, "pr_title": "Ignore no upstream real address agent", "pr_createdAt": "2020-03-06T14:42:26Z", "pr_url": "https://github.com/apache/skywalking/pull/4454", "timeline": [{"oid": "5a4d999330210f35c57b72cb3dc8b5e31cece311", "url": "https://github.com/apache/skywalking/commit/5a4d999330210f35c57b72cb3dc8b5e31cece311", "message": "ignore no upstream real address agent", "committedDate": "2020-03-06T14:37:47Z", "type": "commit"}, {"oid": "05e78e69eff3f99870e84dd9239cd6217652a931", "url": "https://github.com/apache/skywalking/commit/05e78e69eff3f99870e84dd9239cd6217652a931", "message": "Merge branch 'master' into ignore_language", "committedDate": "2020-03-06T14:42:38Z", "type": "commit"}, {"oid": "751f198f6719f2fe29c79dd51681b74804503c72", "url": "https://github.com/apache/skywalking/commit/751f198f6719f2fe29c79dd51681b74804503c72", "message": "fix bug", "committedDate": "2020-03-06T15:44:06Z", "type": "commit"}, {"oid": "557c95a20d4ffb8ed43ed6b0f8f2c1b478574b5f", "url": "https://github.com/apache/skywalking/commit/557c95a20d4ffb8ed43ed6b0f8f2c1b478574b5f", "message": "Merge branch 'master' into ignore_language", "committedDate": "2020-03-06T15:45:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk5NjcwNQ==", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r388996705", "bodyText": "Consider using \"fast return\", instead of so many nested blocks", "author": "kezhenxu94", "createdAt": "2020-03-06T16:14:49Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ServiceInstanceInventoryCache.java", "diffHunk": "@@ -119,4 +127,22 @@ public int getServiceInstanceId(int serviceId, int addressId) {\n         }\n         return serviceInstanceId;\n     }\n+\n+    public String getServiceInstanceLanguage(int serviceInstanceId) {\n+        String language = languageCache.getIfPresent(serviceInstanceId);\n+        if (isNull(language)) {\n+            ServiceInstanceInventory inventory = get(serviceInstanceId);\n+            if (nonNull(inventory)) {\n+                JsonObject properties = inventory.getProperties();\n+                for (String key : properties.keySet()) {\n+                    if (key.equals(ServiceInstanceInventory.PropertyUtil.LANGUAGE)) {\n+                        language = properties.get(key).getAsString().toLowerCase();\n+                        languageCache.put(serviceInstanceId, language);\n+                        return language;\n+                    }\n+                }\n+            }\n+        }\n+        return Const.EMPTY_STRING;\n+    }", "originalCommit": "557c95a20d4ffb8ed43ed6b0f8f2c1b478574b5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMTIzNQ==", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389221235", "bodyText": "Done, thanks for your review \ud83d\ude06", "author": "arugal", "createdAt": "2020-03-07T02:52:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk5NjcwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "76b71a6b1092c2b0123aed1b0e6f9462ecf06e2f", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ServiceInstanceInventoryCache.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ServiceInstanceInventoryCache.java\nindex 6e2ad4211..e711439d8 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ServiceInstanceInventoryCache.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ServiceInstanceInventoryCache.java\n\n@@ -132,14 +132,15 @@ public class ServiceInstanceInventoryCache implements Service {\n         String language = languageCache.getIfPresent(serviceInstanceId);\n         if (isNull(language)) {\n             ServiceInstanceInventory inventory = get(serviceInstanceId);\n-            if (nonNull(inventory)) {\n-                JsonObject properties = inventory.getProperties();\n-                for (String key : properties.keySet()) {\n-                    if (key.equals(ServiceInstanceInventory.PropertyUtil.LANGUAGE)) {\n-                        language = properties.get(key).getAsString().toLowerCase();\n-                        languageCache.put(serviceInstanceId, language);\n-                        return language;\n-                    }\n+            if (isNull(inventory)) {\n+                return Const.EMPTY_STRING;\n+            }\n+            JsonObject properties = inventory.getProperties();\n+            for (String key : properties.keySet()) {\n+                if (key.equals(ServiceInstanceInventory.PropertyUtil.LANGUAGE)) {\n+                    language = properties.get(key).getAsString();\n+                    languageCache.put(serviceInstanceId, language);\n+                    return language;\n                 }\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk5ODY2NA==", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r388998664", "bodyText": "Gateway?", "author": "kezhenxu94", "createdAt": "2020-03-06T16:18:30Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/NoUpstreamRealAddressAgentConfig.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.apm.util.StringUtil;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.library.util.ResourceUtils;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.FileNotFoundException;\n+import java.io.Reader;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class NoUpstreamRealAddressAgentConfig extends ConfigChangeWatcher {\n+\n+    private final AtomicReference<String> settingsString;\n+    private volatile Languages ignoreByLanguage = Languages.EMPTY;\n+\n+    public NoUpstreamRealAddressAgentConfig(TraceModuleProvider provider) {\n+        super(TraceModule.NAME, provider, \"noUpstreamRealAddressAgent\");\n+        this.settingsString = new AtomicReference<>(Const.EMPTY_STRING);\n+        final Languages defaultLanguages = parseLanguageFromFile(\"no_upstream_real_address_agent.yml\");\n+        log.info(\"Default configured no upstream real address agent: {}\", defaultLanguages);\n+        onLanguageUpdated(defaultLanguages);\n+    }\n+\n+    private void activeSetting(String config) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Updating using new static config: {}\", config);\n+        }\n+        this.settingsString.set(config);\n+        onLanguageUpdated(parseGatewayFromYml(config));\n+    }\n+\n+    @Override\n+    public void notify(ConfigChangeEvent value) {\n+        if (EventType.DELETE.equals(value.getEventType())) {\n+            activeSetting(\"\");\n+        } else {\n+            activeSetting(value.getNewValue());\n+        }\n+    }\n+\n+    @Override\n+    public String value() {\n+        return settingsString.get();\n+    }\n+\n+    private void onLanguageUpdated(final Languages languages) {\n+        log.info(\"Updating no upstream real address agent with:{}\", languages);\n+        languages.languages = languages.getLanguages().stream().map(String::toLowerCase).collect(Collectors.toSet());\n+        ignoreByLanguage = languages;\n+    }\n+\n+    public boolean ignoreLanguage(final String language) {\n+        if (StringUtil.isEmpty(language)) {\n+            return false;\n+        }\n+        final boolean isIgnored = ignoreByLanguage.getLanguages().contains(language);\n+        if (log.isDebugEnabled() && isIgnored) {\n+            log.debug(\"Language [{}] is ignored\", language);\n+        }\n+        return isIgnored;\n+    }\n+\n+    private Languages parseLanguageFromFile(final String file) {\n+        try {\n+            final Reader reader = ResourceUtils.read(file);\n+            return new Yaml().loadAs(reader, Languages.class);\n+        } catch (FileNotFoundException e) {\n+            log.error(\"Cannot load languages from: {}\", file, e);\n+        }\n+        return Languages.EMPTY;\n+    }\n+\n+    private Languages parseGatewayFromYml(final String ymlContent) {", "originalCommit": "557c95a20d4ffb8ed43ed6b0f8f2c1b478574b5f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76b71a6b1092c2b0123aed1b0e6f9462ecf06e2f", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/NoUpstreamRealAddressAgentConfig.java b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/NoUpstreamRealAddressAgentConfig.java\ndeleted file mode 100644\nindex 2dbd72808..000000000\n--- a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/NoUpstreamRealAddressAgentConfig.java\n+++ /dev/null\n\n@@ -1,119 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.skywalking.oap.server.receiver.trace.provider;\n-\n-import lombok.Getter;\n-import lombok.Setter;\n-import lombok.ToString;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.skywalking.apm.util.StringUtil;\n-import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n-import org.apache.skywalking.oap.server.core.Const;\n-import org.apache.skywalking.oap.server.library.util.ResourceUtils;\n-import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n-import org.yaml.snakeyaml.Yaml;\n-\n-import java.io.FileNotFoundException;\n-import java.io.Reader;\n-import java.util.Collections;\n-import java.util.Set;\n-import java.util.concurrent.atomic.AtomicReference;\n-import java.util.stream.Collectors;\n-\n-@Slf4j\n-public class NoUpstreamRealAddressAgentConfig extends ConfigChangeWatcher {\n-\n-    private final AtomicReference<String> settingsString;\n-    private volatile Languages ignoreByLanguage = Languages.EMPTY;\n-\n-    public NoUpstreamRealAddressAgentConfig(TraceModuleProvider provider) {\n-        super(TraceModule.NAME, provider, \"noUpstreamRealAddressAgent\");\n-        this.settingsString = new AtomicReference<>(Const.EMPTY_STRING);\n-        final Languages defaultLanguages = parseLanguageFromFile(\"no_upstream_real_address_agent.yml\");\n-        log.info(\"Default configured no upstream real address agent: {}\", defaultLanguages);\n-        onLanguageUpdated(defaultLanguages);\n-    }\n-\n-    private void activeSetting(String config) {\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Updating using new static config: {}\", config);\n-        }\n-        this.settingsString.set(config);\n-        onLanguageUpdated(parseGatewayFromYml(config));\n-    }\n-\n-    @Override\n-    public void notify(ConfigChangeEvent value) {\n-        if (EventType.DELETE.equals(value.getEventType())) {\n-            activeSetting(\"\");\n-        } else {\n-            activeSetting(value.getNewValue());\n-        }\n-    }\n-\n-    @Override\n-    public String value() {\n-        return settingsString.get();\n-    }\n-\n-    private void onLanguageUpdated(final Languages languages) {\n-        log.info(\"Updating no upstream real address agent with:{}\", languages);\n-        languages.languages = languages.getLanguages().stream().map(String::toLowerCase).collect(Collectors.toSet());\n-        ignoreByLanguage = languages;\n-    }\n-\n-    public boolean ignoreLanguage(final String language) {\n-        if (StringUtil.isEmpty(language)) {\n-            return false;\n-        }\n-        final boolean isIgnored = ignoreByLanguage.getLanguages().contains(language);\n-        if (log.isDebugEnabled() && isIgnored) {\n-            log.debug(\"Language [{}] is ignored\", language);\n-        }\n-        return isIgnored;\n-    }\n-\n-    private Languages parseLanguageFromFile(final String file) {\n-        try {\n-            final Reader reader = ResourceUtils.read(file);\n-            return new Yaml().loadAs(reader, Languages.class);\n-        } catch (FileNotFoundException e) {\n-            log.error(\"Cannot load languages from: {}\", file, e);\n-        }\n-        return Languages.EMPTY;\n-    }\n-\n-    private Languages parseGatewayFromYml(final String ymlContent) {\n-        try {\n-            return new Yaml().loadAs(ymlContent, Languages.class);\n-        } catch (Exception e) {\n-            log.error(\"Failed to parse yml content as languages: \\n{}\", ymlContent, e);\n-        }\n-        return Languages.EMPTY;\n-    }\n-\n-    @ToString\n-    public static class Languages {\n-\n-        static final Languages EMPTY = new Languages();\n-\n-        @Setter\n-        @Getter\n-        private Set<String> languages = Collections.emptySet();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NjI3MQ==", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389196271", "bodyText": "We support list here, take a look at downsampling config. And you should put LUA as the default element.", "author": "wu-sheng", "createdAt": "2020-03-06T23:46:41Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java", "diffHunk": "@@ -54,6 +54,9 @@\n     @Setter\n     @Getter\n     private UninstrumentedGatewaysConfig uninstrumentedGatewaysConfig;\n+    @Setter\n+    @Getter\n+    private NoUpstreamRealAddressAgentConfig noUpstreamRealAddressAgentConfig;", "originalCommit": "557c95a20d4ffb8ed43ed6b0f8f2c1b478574b5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMzU5MA==", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389223590", "bodyText": "done", "author": "arugal", "createdAt": "2020-03-07T03:29:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NjI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "76b71a6b1092c2b0123aed1b0e6f9462ecf06e2f", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java\nindex 27abb921e..e8ab18873 100755\n--- a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java\n+++ b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java\n\n@@ -54,9 +63,6 @@ public class TraceServiceModuleConfig extends ModuleConfig {\n     @Setter\n     @Getter\n     private UninstrumentedGatewaysConfig uninstrumentedGatewaysConfig;\n-    @Setter\n-    @Getter\n-    private NoUpstreamRealAddressAgentConfig noUpstreamRealAddressAgentConfig;\n     /**\n      * Analysis trace status.\n      * <p>\n"}}, {"oid": "76b71a6b1092c2b0123aed1b0e6f9462ecf06e2f", "url": "https://github.com/apache/skywalking/commit/76b71a6b1092c2b0123aed1b0e6f9462ecf06e2f", "message": "follow review", "committedDate": "2020-03-07T02:41:09Z", "type": "commit"}, {"oid": "b684f4f1188d904873ebfe7034fa2aac2f173d1b", "url": "https://github.com/apache/skywalking/commit/b684f4f1188d904873ebfe7034fa2aac2f173d1b", "message": "Merge remote-tracking branch 'origin/ignore_language' into ignore_language", "committedDate": "2020-03-07T02:41:46Z", "type": "commit"}, {"oid": "02afd9837121d19e7e917b03d1b714d073ead503", "url": "https://github.com/apache/skywalking/commit/02afd9837121d19e7e917b03d1b714d073ead503", "message": "fix checkstyle", "committedDate": "2020-03-07T02:49:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMDg4OA==", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389220888", "bodyText": "This should be initialized to include LUA. As a native agent, we know, LUA agent can't support in this value.", "author": "wu-sheng", "createdAt": "2020-03-07T02:48:17Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java", "diffHunk": "@@ -41,7 +44,13 @@\n     @Setter\n     @Getter\n     private int sampleRate = 10000;\n-\n+    /**\n+     * Some of the agent can not have the upstream real network address, such as https://github.com/apache/skywalking-nginx-lua.\n+     * service instance mapping and service instance client side relation are ignored.\n+     */\n+    @Setter\n+    @Getter\n+    private List<String> noUpstreamRealAddressAgents = Collections.emptyList();", "originalCommit": "b684f4f1188d904873ebfe7034fa2aac2f173d1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMzU4Ng==", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389223586", "bodyText": "done", "author": "arugal", "createdAt": "2020-03-07T03:29:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMDg4OA=="}], "type": "inlineReview", "revised_code": {"commit": "9b22575fc7667271a1568f456ed7a27b855c6db1", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java\nindex e8ab18873..e3f37aa20 100755\n--- a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java\n+++ b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java\n\n@@ -48,9 +48,8 @@ public class TraceServiceModuleConfig extends ModuleConfig {\n      * Some of the agent can not have the upstream real network address, such as https://github.com/apache/skywalking-nginx-lua.\n      * service instance mapping and service instance client side relation are ignored.\n      */\n-    @Setter\n     @Getter\n-    private List<String> noUpstreamRealAddressAgents = Collections.emptyList();\n+    private final List<String> noUpstreamRealAddressAgents = Collections.singletonList(\"Lua\");\n     /**\n      * The threshold used to check the slow database access. Unit, millisecond.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMDk2OQ==", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389220969", "bodyText": "I think we don't need log for this.", "author": "wu-sheng", "createdAt": "2020-03-07T02:49:30Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/endpoint/MultiScopesSpanListener.java", "diffHunk": "@@ -306,7 +309,17 @@ public void build() {\n \n             exitSourceBuilder.setTimeBucket(minuteTimeBucket);\n             sourceReceiver.receive(exitSourceBuilder.toServiceRelation());\n-            sourceReceiver.receive(exitSourceBuilder.toServiceInstanceRelation());\n+            String sourceLanguage = instanceInventoryCache.getServiceInstanceLanguage(exitSourceBuilder.getSourceServiceInstanceId());\n+            if (config.getNoUpstreamRealAddressAgents().contains(sourceLanguage)) {\n+                /*\n+                 * Some of the agent can not have the upstream real network address, such as https://github.com/apache/skywalking-nginx-lua.\n+                 */\n+                if (log.isDebugEnabled()) {", "originalCommit": "b684f4f1188d904873ebfe7034fa2aac2f173d1b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9b22575fc7667271a1568f456ed7a27b855c6db1", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/endpoint/MultiScopesSpanListener.java b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/endpoint/MultiScopesSpanListener.java\nindex 05981aca8..68f9deb54 100755\n--- a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/endpoint/MultiScopesSpanListener.java\n+++ b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/endpoint/MultiScopesSpanListener.java\n\n@@ -309,15 +309,12 @@ public class MultiScopesSpanListener implements EntrySpanListener, ExitSpanListe\n \n             exitSourceBuilder.setTimeBucket(minuteTimeBucket);\n             sourceReceiver.receive(exitSourceBuilder.toServiceRelation());\n+\n+            /*\n+             * Some of the agent can not have the upstream real network address, such as https://github.com/apache/skywalking-nginx-lua.\n+             */\n             String sourceLanguage = instanceInventoryCache.getServiceInstanceLanguage(exitSourceBuilder.getSourceServiceInstanceId());\n-            if (config.getNoUpstreamRealAddressAgents().contains(sourceLanguage)) {\n-                /*\n-                 * Some of the agent can not have the upstream real network address, such as https://github.com/apache/skywalking-nginx-lua.\n-                 */\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"{} can not have the upstream real network address, ignore client side relation. service instance id:{}\", sourceLanguage, exitSourceBuilder.getSourceServiceInstanceId());\n-                }\n-            } else {\n+            if (!config.getNoUpstreamRealAddressAgents().contains(sourceLanguage)) {\n                 sourceReceiver.receive(exitSourceBuilder.toServiceInstanceRelation());\n             }\n             if (RequestType.DATABASE.equals(exitSourceBuilder.getType())) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMDk4MQ==", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389220981", "bodyText": "We don't need the log too.", "author": "wu-sheng", "createdAt": "2020-03-07T02:49:42Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/service/ServiceInstanceMappingSpanListener.java", "diffHunk": "@@ -79,6 +81,17 @@ public void parseEntry(SpanDecorator spanDecorator, SegmentCoreInfo segmentCoreI\n         if (!spanDecorator.getSpanLayer().equals(SpanLayer.MQ)) {\n             if (spanDecorator.getRefsCount() > 0) {\n                 for (int i = 0; i < spanDecorator.getRefsCount(); i++) {\n+                    ReferenceDecorator referenceDecorator = spanDecorator.getRefs(i);\n+                    String parentLanguage = serviceInstanceInventoryCache.getServiceInstanceLanguage(referenceDecorator.getParentServiceInstanceId());\n+                    if (config.getNoUpstreamRealAddressAgents().contains(parentLanguage)) {\n+                        /*\n+                         * Some of the agent can not have the upstream real network address, such as https://github.com/apache/skywalking-nginx-lua.\n+                         */\n+                        if (log.isDebugEnabled()) {", "originalCommit": "b684f4f1188d904873ebfe7034fa2aac2f173d1b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9b22575fc7667271a1568f456ed7a27b855c6db1", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/service/ServiceInstanceMappingSpanListener.java b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/service/ServiceInstanceMappingSpanListener.java\nindex 55cb5a1e4..63c586162 100644\n--- a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/service/ServiceInstanceMappingSpanListener.java\n+++ b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/service/ServiceInstanceMappingSpanListener.java\n\n@@ -87,9 +87,6 @@ public class ServiceInstanceMappingSpanListener implements EntrySpanListener {\n                         /*\n                          * Some of the agent can not have the upstream real network address, such as https://github.com/apache/skywalking-nginx-lua.\n                          */\n-                        if (log.isDebugEnabled()) {\n-                            log.debug(\"{} can not have the upstream real network address, ignore mapping. service instance id:{}\", parentLanguage, referenceDecorator.getParentServiceInstanceId());\n-                        }\n                         continue;\n                     }\n                     int networkAddressId = spanDecorator.getRefs(i).getNetworkAddressId();\n"}}, {"oid": "9b22575fc7667271a1568f456ed7a27b855c6db1", "url": "https://github.com/apache/skywalking/commit/9b22575fc7667271a1568f456ed7a27b855c6db1", "message": "follow review", "committedDate": "2020-03-07T03:05:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMjcyNw==", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389222727", "bodyText": "I think comparing to this implementation, I would say, adding a no-@column field in the ServiceInstanceInventory to cache the status should be better in performance and understanding.\nAnd you should avoid check the language repeatedly if this instance hasn't language properties. Such as in the new implementation, you should separate the value from null and Const#UNKNOWN.", "author": "wu-sheng", "createdAt": "2020-03-07T03:15:38Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ServiceInstanceInventoryCache.java", "diffHunk": "@@ -119,4 +125,24 @@ public int getServiceInstanceId(int serviceId, int addressId) {\n         }\n         return serviceInstanceId;\n     }\n+\n+    public String getServiceInstanceLanguage(int serviceInstanceId) {\n+        String language = languageCache.getIfPresent(serviceInstanceId);", "originalCommit": "9b22575fc7667271a1568f456ed7a27b855c6db1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMzU5Ng==", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389223596", "bodyText": "done", "author": "arugal", "createdAt": "2020-03-07T03:29:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyMjcyNw=="}], "type": "inlineReview", "revised_code": {"commit": "12140316a646f1174aaad7772b63c56e228bfbe7", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ServiceInstanceInventoryCache.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ServiceInstanceInventoryCache.java\nindex 8668855ec..63d5807e0 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ServiceInstanceInventoryCache.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/cache/ServiceInstanceInventoryCache.java\n\n@@ -127,22 +122,23 @@ public class ServiceInstanceInventoryCache implements Service {\n     }\n \n     public String getServiceInstanceLanguage(int serviceInstanceId) {\n-        String language = languageCache.getIfPresent(serviceInstanceId);\n-        if (nonNull(language)) {\n-            return language;\n-        }\n         ServiceInstanceInventory inventory = get(serviceInstanceId);\n         if (isNull(inventory)) {\n             return Const.EMPTY_STRING;\n         }\n+        String language = inventory.getLanguage();\n+        if (nonNull(language)) {\n+            return language;\n+        }\n         JsonObject properties = inventory.getProperties();\n         for (String key : properties.keySet()) {\n             if (key.equals(ServiceInstanceInventory.PropertyUtil.LANGUAGE)) {\n                 language = properties.get(key).getAsString();\n-                languageCache.put(serviceInstanceId, language);\n+                inventory.setLanguage(language);\n                 return language;\n             }\n         }\n-        return Const.EMPTY_STRING;\n+        inventory.setLanguage(Const.UNKNOWN);\n+        return Const.UNKNOWN;\n     }\n }\n"}}, {"oid": "12140316a646f1174aaad7772b63c56e228bfbe7", "url": "https://github.com/apache/skywalking/commit/12140316a646f1174aaad7772b63c56e228bfbe7", "message": "follow review", "committedDate": "2020-03-07T03:28:32Z", "type": "commit"}, {"oid": "836f664e50e508636a635d7931fd01318ee84bde", "url": "https://github.com/apache/skywalking/commit/836f664e50e508636a635d7931fd01318ee84bde", "message": "follow review", "committedDate": "2020-03-07T03:44:53Z", "type": "commit"}, {"oid": "b12f465d2d5f75ffe6da2cef4ac2d28975126922", "url": "https://github.com/apache/skywalking/commit/b12f465d2d5f75ffe6da2cef4ac2d28975126922", "message": "follow review", "committedDate": "2020-03-07T03:48:57Z", "type": "commit"}, {"oid": "04a5693c20e9f9eef7791c0d474e9f1159cba923", "url": "https://github.com/apache/skywalking/commit/04a5693c20e9f9eef7791c0d474e9f1159cba923", "message": "follow review", "committedDate": "2020-03-07T03:53:27Z", "type": "commit"}, {"oid": "62c71dac38aa70e10770fc6d09e7c108998f9037", "url": "https://github.com/apache/skywalking/commit/62c71dac38aa70e10770fc6d09e7c108998f9037", "message": "fix language trans", "committedDate": "2020-03-07T06:03:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMjk1MQ==", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389232951", "bodyText": "I didn't notice this should be lower case. How about to use toLowerCase in the switch?", "author": "wu-sheng", "createdAt": "2020-03-07T06:31:59Z", "path": "oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/LanguageTrans.java", "diffHunk": "@@ -33,6 +33,10 @@ public Language value(String language) {\n                 return Language.PYTHON;\n             case \"ruby\":\n                 return Language.RUBY;\n+            case \"go\":\n+                return Language.GO;\n+            case \"Lua\":", "originalCommit": "62c71dac38aa70e10770fc6d09e7c108998f9037", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMzQ4Ng==", "url": "https://github.com/apache/skywalking/pull/4454#discussion_r389233486", "bodyText": "done.", "author": "arugal", "createdAt": "2020-03-07T06:44:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMjk1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc2d8687c7172ee0e85dd997ba6351f9a081ed20", "chunk": "diff --git a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/LanguageTrans.java b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/LanguageTrans.java\nindex f2d4de375..17f4ba67e 100644\n--- a/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/LanguageTrans.java\n+++ b/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/query/entity/LanguageTrans.java\n\n@@ -35,7 +35,7 @@ public enum LanguageTrans {\n                 return Language.RUBY;\n             case \"go\":\n                 return Language.GO;\n-            case \"Lua\":\n+            case \"lua\":\n                 return Language.LUA;\n             default:\n                 return Language.UNKNOWN;\n"}}, {"oid": "fc2d8687c7172ee0e85dd997ba6351f9a081ed20", "url": "https://github.com/apache/skywalking/commit/fc2d8687c7172ee0e85dd997ba6351f9a081ed20", "message": "lower case", "committedDate": "2020-03-07T06:43:36Z", "type": "commit"}]}