{"pr_number": 5658, "pr_title": "resttemplate plugin concurrency scenario data mistake problem  fix", "pr_createdAt": "2020-10-13T13:37:47Z", "pr_url": "https://github.com/apache/skywalking/pull/5658", "timeline": [{"oid": "69c8b0afba196310eadf106bca58198b339fa8be", "url": "https://github.com/apache/skywalking/commit/69c8b0afba196310eadf106bca58198b339fa8be", "message": "resttemplate plugin concurrency scenario data mistake problem  fix", "committedDate": "2020-10-13T13:07:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2NDg2MA==", "url": "https://github.com/apache/skywalking/pull/5658#discussion_r503964860", "bodyText": "Please put this in the finally and try{} the whole afterMethod in case it leaks.", "author": "wu-sheng", "createdAt": "2020-10-13T13:46:02Z", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java", "diffHunk": "@@ -44,29 +45,30 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         String remotePeer = requestURL.getHost() + \":\" + (requestURL.getPort() > 0 ? requestURL.getPort() : \"https\".equalsIgnoreCase(requestURL\n             .getScheme()) ? 443 : 80);\n \n-        String formatURIPath = requestURL.getPath();\n-        AbstractSpan span = ContextManager.createExitSpan(formatURIPath, contextCarrier, remotePeer);\n+        String uri = requestURL.getPath();\n+        AbstractSpan span = ContextManager.createExitSpan(uri, contextCarrier, remotePeer);\n \n         span.setComponent(ComponentsDefine.SPRING_REST_TEMPLATE);\n         Tags.URL.set(span, requestURL.getScheme() + \"://\" + requestURL.getHost() + \":\" + requestURL.getPort() + requestURL\n             .getPath());\n         Tags.HTTP.METHOD.set(span, httpMethod.toString());\n         SpanLayer.asHttp(span);\n-        Object[] cacheValues = new Object[3];\n-        cacheValues[0] = formatURIPath;\n-        cacheValues[1] = contextCarrier;\n-        objInst.setSkyWalkingDynamicField(cacheValues);\n+        RestTemplateRuntimeContextHelper.addUri(uri);\n+        RestTemplateRuntimeContextHelper.addContextCarrier(contextCarrier);\n     }\n \n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n-        Object[] cacheValues = (Object[]) objInst.getSkyWalkingDynamicField();\n-        cacheValues[2] = ContextManager.capture();\n+        ContextSnapshot contextSnapshot = ContextManager.capture();\n         if (ret != null) {\n-            String uri = (String) cacheValues[0];\n-            ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, (ContextSnapshot) cacheValues[2]));\n+            String uri = RestTemplateRuntimeContextHelper.getUri();\n+            ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, contextSnapshot));\n         }\n+\n+        RestTemplateRuntimeContextHelper.cleanUri();\n+        RestTemplateRuntimeContextHelper.cleanContextCarrier();", "originalCommit": "69c8b0afba196310eadf106bca58198b339fa8be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3MzUzNw==", "url": "https://github.com/apache/skywalking/pull/5658#discussion_r503973537", "bodyText": "got it", "author": "thanq", "createdAt": "2020-10-13T13:56:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2NDg2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4OTI3Mw==", "url": "https://github.com/apache/skywalking/pull/5658#discussion_r503989273", "bodyText": "done", "author": "thanq", "createdAt": "2020-10-13T14:16:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2NDg2MA=="}], "type": "inlineReview", "revised_code": {"commit": "70ceeb354b02f5ec303ed47aa613e9a735022933", "chunk": "diff --git a/apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java b/apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java\nindex b8d82a4608..66a8ee4680 100644\n--- a/apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java\n+++ b/apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java\n\n@@ -60,16 +65,19 @@ public class RestExecuteInterceptor implements InstanceMethodsAroundInterceptor\n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n-        ContextSnapshot contextSnapshot = ContextManager.capture();\n-        if (ret != null) {\n-            String uri = RestTemplateRuntimeContextHelper.getUri();\n-            ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, contextSnapshot));\n+        try {\n+            ContextSnapshot contextSnapshot = ContextManager.capture();\n+            if (ret != null) {\n+                String uri = RestTemplateRuntimeContextHelper.getUri();\n+                ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, contextSnapshot));\n+            }\n+        } catch (Throwable e){\n+            LOGGER.warn(\"resttemplate plugin has error: \", e);\n+        } finally {\n+            ContextManager.stopSpan();\n+            RestTemplateRuntimeContextHelper.cleanUri();\n+            RestTemplateRuntimeContextHelper.cleanContextCarrier();\n         }\n-\n-        RestTemplateRuntimeContextHelper.cleanUri();\n-        RestTemplateRuntimeContextHelper.cleanContextCarrier();\n-\n-        ContextManager.stopSpan();\n         return ret;\n     }\n \n"}}, {"oid": "70ceeb354b02f5ec303ed47aa613e9a735022933", "url": "https://github.com/apache/skywalking/commit/70ceeb354b02f5ec303ed47aa613e9a735022933", "message": " put this in the finally and try{} the whole afterMethod in case it leaks", "committedDate": "2020-10-13T14:10:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwNTc4Mw==", "url": "https://github.com/apache/skywalking/pull/5658#discussion_r504005783", "bodyText": "Don't use catch, just try/finally, please.", "author": "wu-sheng", "createdAt": "2020-10-13T14:36:58Z", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java", "diffHunk": "@@ -44,30 +50,34 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         String remotePeer = requestURL.getHost() + \":\" + (requestURL.getPort() > 0 ? requestURL.getPort() : \"https\".equalsIgnoreCase(requestURL\n             .getScheme()) ? 443 : 80);\n \n-        String formatURIPath = requestURL.getPath();\n-        AbstractSpan span = ContextManager.createExitSpan(formatURIPath, contextCarrier, remotePeer);\n+        String uri = requestURL.getPath();\n+        AbstractSpan span = ContextManager.createExitSpan(uri, contextCarrier, remotePeer);\n \n         span.setComponent(ComponentsDefine.SPRING_REST_TEMPLATE);\n         Tags.URL.set(span, requestURL.getScheme() + \"://\" + requestURL.getHost() + \":\" + requestURL.getPort() + requestURL\n             .getPath());\n         Tags.HTTP.METHOD.set(span, httpMethod.toString());\n         SpanLayer.asHttp(span);\n-        Object[] cacheValues = new Object[3];\n-        cacheValues[0] = formatURIPath;\n-        cacheValues[1] = contextCarrier;\n-        objInst.setSkyWalkingDynamicField(cacheValues);\n+        RestTemplateRuntimeContextHelper.addUri(uri);\n+        RestTemplateRuntimeContextHelper.addContextCarrier(contextCarrier);\n     }\n \n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n-        Object[] cacheValues = (Object[]) objInst.getSkyWalkingDynamicField();\n-        cacheValues[2] = ContextManager.capture();\n-        if (ret != null) {\n-            String uri = (String) cacheValues[0];\n-            ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, (ContextSnapshot) cacheValues[2]));\n+        try {\n+            ContextSnapshot contextSnapshot = ContextManager.capture();\n+            if (ret != null) {\n+                String uri = RestTemplateRuntimeContextHelper.getUri();\n+                ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, contextSnapshot));\n+            }\n+        } catch (Throwable e){\n+            LOGGER.warn(\"resttemplate plugin has error: \", e);", "originalCommit": "70ceeb354b02f5ec303ed47aa613e9a735022933", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db5df8c165d1e133ca0ca195975fb67b4ff7684f", "chunk": "diff --git a/apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java b/apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java\nindex 66a8ee4680..62e89fc7b7 100644\n--- a/apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java\n+++ b/apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java\n\n@@ -69,12 +65,12 @@ public class RestExecuteInterceptor implements InstanceMethodsAroundInterceptor\n             ContextSnapshot contextSnapshot = ContextManager.capture();\n             if (ret != null) {\n                 String uri = RestTemplateRuntimeContextHelper.getUri();\n-                ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, contextSnapshot));\n+                ((EnhancedInstance) ret).setSkyWalkingDynamicField(\n+                    new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, contextSnapshot)\n+                );\n             }\n-        } catch (Throwable e){\n-            LOGGER.warn(\"resttemplate plugin has error: \", e);\n-        } finally {\n             ContextManager.stopSpan();\n+        } finally {\n             RestTemplateRuntimeContextHelper.cleanUri();\n             RestTemplateRuntimeContextHelper.cleanContextCarrier();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwNjU4Mw==", "url": "https://github.com/apache/skywalking/pull/5658#discussion_r504006583", "bodyText": "Move this into the try. Because this could have NPE.", "author": "wu-sheng", "createdAt": "2020-10-13T14:37:58Z", "path": "apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java", "diffHunk": "@@ -44,30 +50,34 @@ public void beforeMethod(EnhancedInstance objInst, Method method, Object[] allAr\n         String remotePeer = requestURL.getHost() + \":\" + (requestURL.getPort() > 0 ? requestURL.getPort() : \"https\".equalsIgnoreCase(requestURL\n             .getScheme()) ? 443 : 80);\n \n-        String formatURIPath = requestURL.getPath();\n-        AbstractSpan span = ContextManager.createExitSpan(formatURIPath, contextCarrier, remotePeer);\n+        String uri = requestURL.getPath();\n+        AbstractSpan span = ContextManager.createExitSpan(uri, contextCarrier, remotePeer);\n \n         span.setComponent(ComponentsDefine.SPRING_REST_TEMPLATE);\n         Tags.URL.set(span, requestURL.getScheme() + \"://\" + requestURL.getHost() + \":\" + requestURL.getPort() + requestURL\n             .getPath());\n         Tags.HTTP.METHOD.set(span, httpMethod.toString());\n         SpanLayer.asHttp(span);\n-        Object[] cacheValues = new Object[3];\n-        cacheValues[0] = formatURIPath;\n-        cacheValues[1] = contextCarrier;\n-        objInst.setSkyWalkingDynamicField(cacheValues);\n+        RestTemplateRuntimeContextHelper.addUri(uri);\n+        RestTemplateRuntimeContextHelper.addContextCarrier(contextCarrier);\n     }\n \n     @Override\n     public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allArguments, Class<?>[] argumentsTypes,\n         Object ret) throws Throwable {\n-        Object[] cacheValues = (Object[]) objInst.getSkyWalkingDynamicField();\n-        cacheValues[2] = ContextManager.capture();\n-        if (ret != null) {\n-            String uri = (String) cacheValues[0];\n-            ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, (ContextSnapshot) cacheValues[2]));\n+        try {\n+            ContextSnapshot contextSnapshot = ContextManager.capture();\n+            if (ret != null) {\n+                String uri = RestTemplateRuntimeContextHelper.getUri();\n+                ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, contextSnapshot));\n+            }\n+        } catch (Throwable e){\n+            LOGGER.warn(\"resttemplate plugin has error: \", e);\n+        } finally {\n+            ContextManager.stopSpan();", "originalCommit": "70ceeb354b02f5ec303ed47aa613e9a735022933", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQzMzAyOQ==", "url": "https://github.com/apache/skywalking/pull/5658#discussion_r504433029", "bodyText": "done", "author": "thanq", "createdAt": "2020-10-14T06:33:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwNjU4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "db5df8c165d1e133ca0ca195975fb67b4ff7684f", "chunk": "diff --git a/apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java b/apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java\nindex 66a8ee4680..62e89fc7b7 100644\n--- a/apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java\n+++ b/apm-sniffer/apm-sdk-plugin/spring-plugins/resttemplate-4.x-plugin/src/main/java/org/apache/skywalking/apm/plugin/spring/resttemplate/async/RestExecuteInterceptor.java\n\n@@ -69,12 +65,12 @@ public class RestExecuteInterceptor implements InstanceMethodsAroundInterceptor\n             ContextSnapshot contextSnapshot = ContextManager.capture();\n             if (ret != null) {\n                 String uri = RestTemplateRuntimeContextHelper.getUri();\n-                ((EnhancedInstance) ret).setSkyWalkingDynamicField(new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, contextSnapshot));\n+                ((EnhancedInstance) ret).setSkyWalkingDynamicField(\n+                    new EnhanceCacheObjects(uri, ComponentsDefine.SPRING_REST_TEMPLATE, SpanLayer.HTTP, contextSnapshot)\n+                );\n             }\n-        } catch (Throwable e){\n-            LOGGER.warn(\"resttemplate plugin has error: \", e);\n-        } finally {\n             ContextManager.stopSpan();\n+        } finally {\n             RestTemplateRuntimeContextHelper.cleanUri();\n             RestTemplateRuntimeContextHelper.cleanContextCarrier();\n         }\n"}}, {"oid": "db5df8c165d1e133ca0ca195975fb67b4ff7684f", "url": "https://github.com/apache/skywalking/commit/db5df8c165d1e133ca0ca195975fb67b4ff7684f", "message": "move stopSpan method in try code block to avoid NPE, and solve code style problem", "committedDate": "2020-10-14T06:21:26Z", "type": "commit"}, {"oid": "a439e752d36781755129e3ce44fb2350b056e258", "url": "https://github.com/apache/skywalking/commit/a439e752d36781755129e3ce44fb2350b056e258", "message": "Merge branch 'master' into feature/resttemplate_plugin_concurrency_scenario_data_mistake_fix", "committedDate": "2020-10-14T15:53:36Z", "type": "commit"}, {"oid": "f0e416a0ef77e96cb27560e31103841bceee5398", "url": "https://github.com/apache/skywalking/commit/f0e416a0ef77e96cb27560e31103841bceee5398", "message": "Merge branch 'master' into feature/resttemplate_plugin_concurrency_scenario_data_mistake_fix", "committedDate": "2020-10-15T02:30:25Z", "type": "commit"}]}