{"pr_number": 4987, "pr_title": "support sampleRate as Dynamic Configuration (#4968)", "pr_createdAt": "2020-06-29T12:07:35Z", "pr_url": "https://github.com/apache/skywalking/pull/4987", "timeline": [{"oid": "eccd75ae85ba966320fd10c4eea5d572e6ed7d1b", "url": "https://github.com/apache/skywalking/commit/eccd75ae85ba966320fd10c4eea5d572e6ed7d1b", "message": "support sampleRate as Dynamic Configuration (#4968)", "committedDate": "2020-06-29T12:05:03Z", "type": "commit"}, {"oid": "ce7fce2825d41f286247fbca901328b4e8ad86e1", "url": "https://github.com/apache/skywalking/commit/ce7fce2825d41f286247fbca901328b4e8ad86e1", "message": "Merge branch 'master' into master", "committedDate": "2020-06-29T12:35:03Z", "type": "commit"}, {"oid": "b6b48e4c40c8bde75f3626cfe5fae26060446605", "url": "https://github.com/apache/skywalking/commit/b6b48e4c40c8bde75f3626cfe5fae26060446605", "message": "add ASF License", "committedDate": "2020-06-29T16:08:20Z", "type": "commit"}, {"oid": "8135eeb14c97fc509058cc2e6d1a453708c9019c", "url": "https://github.com/apache/skywalking/commit/8135eeb14c97fc509058cc2e6d1a453708c9019c", "message": "add empty line", "committedDate": "2020-06-29T16:10:28Z", "type": "commit"}, {"oid": "8fb00957dccd64874d0d9aff573cf6da27be4981", "url": "https://github.com/apache/skywalking/commit/8fb00957dccd64874d0d9aff573cf6da27be4981", "message": "Merge branch 'master' into master", "committedDate": "2020-06-29T16:12:27Z", "type": "commit"}, {"oid": "fc776b9a1e118771fc52c21369e42073cfaaf5b7", "url": "https://github.com/apache/skywalking/commit/fc776b9a1e118771fc52c21369e42073cfaaf5b7", "message": "Merge branch 'master' into master", "committedDate": "2020-06-30T01:00:34Z", "type": "commit"}, {"oid": "db74d53b781fcf9dbdca064e110d018699436b64", "url": "https://github.com/apache/skywalking/commit/db74d53b781fcf9dbdca064e110d018699436b64", "message": "modify code format", "committedDate": "2020-07-01T11:25:33Z", "type": "commit"}, {"oid": "13f65dcbfa2f5074bfa8d6659f5625244eed9a56", "url": "https://github.com/apache/skywalking/commit/13f65dcbfa2f5074bfa8d6659f5625244eed9a56", "message": "modify code format", "committedDate": "2020-07-01T15:11:24Z", "type": "commit"}, {"oid": "8e16dd90a70e6924021ddc7b9af567271ba71f59", "url": "https://github.com/apache/skywalking/commit/8e16dd90a70e6924021ddc7b9af567271ba71f59", "message": "Merge branch 'master' into master", "committedDate": "2020-07-01T15:28:37Z", "type": "commit"}, {"oid": "2eff334209cd26f44c6e60dfaf36232b69989a43", "url": "https://github.com/apache/skywalking/commit/2eff334209cd26f44c6e60dfaf36232b69989a43", "message": "Merge branch 'master' of https://github.com/killGC/skywalking", "committedDate": "2020-07-01T23:17:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3NjY5MQ==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r448676691", "bodyText": "What is the expected sampling rate if the delete happens?", "author": "wu-sheng", "createdAt": "2020-07-02T00:02:49Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+@Slf4j\n+public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n+    private  AtomicReference<String> settingsString;\n+    private  AtomicReference<Integer> sampleRate;\n+\n+    public TraceSampleRateWatcher(String config, TraceModuleProvider provider) {\n+        super(TraceModule.NAME, provider, \"sampleRate\");\n+        settingsString = new AtomicReference<>(Const.EMPTY_STRING);\n+        sampleRate = new AtomicReference<>();\n+\n+        activeSetting(config);\n+    }\n+\n+    private void activeSetting(String config) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Updating using new static config: {}\", config);\n+        }\n+        settingsString.set(config);\n+        try {\n+            sampleRate.set(Integer.parseInt(config));\n+        } catch (NumberFormatException ex) {\n+            log.error(\"Cannot load sampleRate from: {}\", config, ex);\n+        }\n+    }\n+\n+    @Override\n+    public void notify(ConfigChangeEvent value) {\n+        if (EventType.DELETE.equals(value.getEventType())) {\n+            activeSetting(\"\");", "originalCommit": "2eff334209cd26f44c6e60dfaf36232b69989a43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0OTM3MQ==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449049371", "bodyText": "change back to property sampleRate of class TraceServiceModuleConfig", "author": "killGC", "createdAt": "2020-07-02T14:37:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3NjY5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6f38daf176e4e1de372d49db1247509f4f8cd9ce", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java\nindex e4d5e724e..0226a1ba9 100644\n--- a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java\n+++ b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java\n\n@@ -20,29 +20,24 @@ package org.apache.skywalking.oap.server.receiver.trace.provider;\n \n import lombok.extern.slf4j.Slf4j;\n import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n-import org.apache.skywalking.oap.server.core.Const;\n import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n \n import java.util.concurrent.atomic.AtomicReference;\n \n @Slf4j\n public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n-    private  AtomicReference<String> settingsString;\n     private  AtomicReference<Integer> sampleRate;\n \n-    public TraceSampleRateWatcher(String config, TraceModuleProvider provider) {\n+    public TraceSampleRateWatcher(TraceModuleProvider provider) {\n         super(TraceModule.NAME, provider, \"sampleRate\");\n-        settingsString = new AtomicReference<>(Const.EMPTY_STRING);\n         sampleRate = new AtomicReference<>();\n-\n-        activeSetting(config);\n+        sampleRate.set(getDefaultValue());\n     }\n \n     private void activeSetting(String config) {\n         if (log.isDebugEnabled()) {\n             log.debug(\"Updating using new static config: {}\", config);\n         }\n-        settingsString.set(config);\n         try {\n             sampleRate.set(Integer.parseInt(config));\n         } catch (NumberFormatException ex) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3OTQ0NQ==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r448679445", "bodyText": "I think should not change to String here, please move this into the TraceSampleRateWatcher.", "author": "wu-sheng", "createdAt": "2020-07-02T00:13:25Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceModuleProvider.java", "diffHunk": "@@ -75,8 +77,11 @@ public void prepare() throws ServiceNotProvidedException {\n \n         uninstrumentedGatewaysConfig = new UninstrumentedGatewaysConfig(this);\n \n+        traceSampleRateWatcher = new TraceSampleRateWatcher(String.valueOf(moduleConfig.getSampleRate()), this);", "originalCommit": "2eff334209cd26f44c6e60dfaf36232b69989a43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1MTMwMA==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449051300", "bodyText": "ok", "author": "killGC", "createdAt": "2020-07-02T14:40:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3OTQ0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6f38daf176e4e1de372d49db1247509f4f8cd9ce", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceModuleProvider.java b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceModuleProvider.java\nindex 0fbfb16cb..071f0a5ae 100755\n--- a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceModuleProvider.java\n+++ b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceModuleProvider.java\n\n@@ -77,7 +77,7 @@ public class TraceModuleProvider extends ModuleProvider {\n \n         uninstrumentedGatewaysConfig = new UninstrumentedGatewaysConfig(this);\n \n-        traceSampleRateWatcher = new TraceSampleRateWatcher(String.valueOf(moduleConfig.getSampleRate()), this);\n+        traceSampleRateWatcher = new TraceSampleRateWatcher(this);\n \n         moduleConfig.setDbLatencyThresholdsAndWatcher(thresholds);\n         moduleConfig.setUninstrumentedGatewaysConfig(uninstrumentedGatewaysConfig);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3OTU0OQ==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r448679549", "bodyText": "I think you don't need settingsString", "author": "wu-sheng", "createdAt": "2020-07-02T00:13:48Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.core.Const;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+@Slf4j\n+public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n+    private  AtomicReference<String> settingsString;", "originalCommit": "2eff334209cd26f44c6e60dfaf36232b69989a43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0NzA4NQ==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449047085", "bodyText": "i think so too", "author": "killGC", "createdAt": "2020-07-02T14:34:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3OTU0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2MTE5NA==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449061194", "bodyText": "every time execute \"./mvnw -DskipTests clean package\" command so long,What's the best way to improve or whether or not have some way only execute changed module", "author": "killGC", "createdAt": "2020-07-02T14:54:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3OTU0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2Mjk5OA==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449062998", "bodyText": "", "author": "killGC", "createdAt": "2020-07-02T14:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3OTU0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6f38daf176e4e1de372d49db1247509f4f8cd9ce", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java\nindex e4d5e724e..0226a1ba9 100644\n--- a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java\n+++ b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java\n\n@@ -20,29 +20,24 @@ package org.apache.skywalking.oap.server.receiver.trace.provider;\n \n import lombok.extern.slf4j.Slf4j;\n import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n-import org.apache.skywalking.oap.server.core.Const;\n import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n \n import java.util.concurrent.atomic.AtomicReference;\n \n @Slf4j\n public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n-    private  AtomicReference<String> settingsString;\n     private  AtomicReference<Integer> sampleRate;\n \n-    public TraceSampleRateWatcher(String config, TraceModuleProvider provider) {\n+    public TraceSampleRateWatcher(TraceModuleProvider provider) {\n         super(TraceModule.NAME, provider, \"sampleRate\");\n-        settingsString = new AtomicReference<>(Const.EMPTY_STRING);\n         sampleRate = new AtomicReference<>();\n-\n-        activeSetting(config);\n+        sampleRate.set(getDefaultValue());\n     }\n \n     private void activeSetting(String config) {\n         if (log.isDebugEnabled()) {\n             log.debug(\"Updating using new static config: {}\", config);\n         }\n-        settingsString.set(config);\n         try {\n             sampleRate.set(Integer.parseInt(config));\n         } catch (NumberFormatException ex) {\n"}}, {"oid": "82364c3039dda591534269ecf6a3d0144c063d6f", "url": "https://github.com/apache/skywalking/commit/82364c3039dda591534269ecf6a3d0144c063d6f", "message": "Merge branch 'master' into master", "committedDate": "2020-07-02T01:27:32Z", "type": "commit"}, {"oid": "6299d5f11397d5fcf498764f2310bcb2d812d3c1", "url": "https://github.com/apache/skywalking/commit/6299d5f11397d5fcf498764f2310bcb2d812d3c1", "message": "Merge branch 'master' into master", "committedDate": "2020-07-02T14:37:52Z", "type": "commit"}, {"oid": "6f38daf176e4e1de372d49db1247509f4f8cd9ce", "url": "https://github.com/apache/skywalking/commit/6f38daf176e4e1de372d49db1247509f4f8cd9ce", "message": "fix problem from review code", "committedDate": "2020-07-02T15:15:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3OTE0Mg==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449079142", "bodyText": "Please set up a UT for this. Test this watcher could be driven correctly.", "author": "wu-sheng", "createdAt": "2020-07-02T15:21:29Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+@Slf4j\n+public class TraceSampleRateWatcher extends ConfigChangeWatcher {", "originalCommit": "6f38daf176e4e1de372d49db1247509f4f8cd9ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEwMjYxMA==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449102610", "bodyText": "ok", "author": "killGC", "createdAt": "2020-07-02T15:43:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3OTE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwNjIyMg==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449606222", "bodyText": "@killGC Could you finish the UT codes ASAP, I have to wait that before merging.", "author": "wu-sheng", "createdAt": "2020-07-03T14:18:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3OTE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwODgxNQ==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449608815", "bodyText": "i'm not familiar with UT at here,i need spend some time to study,", "author": "killGC", "createdAt": "2020-07-03T14:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3OTE0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "989a9f792f47f6d7b83b0a6bd53c3ebb716c49b1", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java\nindex 0226a1ba9..05797e0de 100644\n--- a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java\n+++ b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java\n\n@@ -59,11 +59,11 @@ public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n         return String.valueOf(sampleRate.get());\n     }\n \n-    public int getDefaultValue() {\n+    private int getDefaultValue() {\n         return ((TraceModuleProvider) this.getProvider()).getModuleConfig().getSampleRate();\n     }\n \n     public int getSampleRate() {\n-        return sampleRate.get() == null ? getDefaultValue() : sampleRate.get();\n+        return sampleRate.get();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3OTQ5OA==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449079498", "bodyText": "Why public?", "author": "wu-sheng", "createdAt": "2020-07-02T15:22:00Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+@Slf4j\n+public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n+    private  AtomicReference<Integer> sampleRate;\n+\n+    public TraceSampleRateWatcher(TraceModuleProvider provider) {\n+        super(TraceModule.NAME, provider, \"sampleRate\");\n+        sampleRate = new AtomicReference<>();\n+        sampleRate.set(getDefaultValue());\n+    }\n+\n+    private void activeSetting(String config) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Updating using new static config: {}\", config);\n+        }\n+        try {\n+            sampleRate.set(Integer.parseInt(config));\n+        } catch (NumberFormatException ex) {\n+            log.error(\"Cannot load sampleRate from: {}\", config, ex);\n+        }\n+    }\n+\n+    @Override\n+    public void notify(ConfigChangeEvent value) {\n+        if (EventType.DELETE.equals(value.getEventType())) {\n+            activeSetting(String.valueOf(getDefaultValue()));\n+        } else {\n+            activeSetting(value.getNewValue());\n+        }\n+    }\n+\n+    @Override\n+    public String value() {\n+        return String.valueOf(sampleRate.get());\n+    }\n+\n+    public int getDefaultValue() {", "originalCommit": "6f38daf176e4e1de372d49db1247509f4f8cd9ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEwMjI1Mg==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449102252", "bodyText": "i see\uff0csorry for  the problem", "author": "killGC", "createdAt": "2020-07-02T15:42:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3OTQ5OA=="}], "type": "inlineReview", "revised_code": {"commit": "989a9f792f47f6d7b83b0a6bd53c3ebb716c49b1", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java\nindex 0226a1ba9..05797e0de 100644\n--- a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java\n+++ b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java\n\n@@ -59,11 +59,11 @@ public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n         return String.valueOf(sampleRate.get());\n     }\n \n-    public int getDefaultValue() {\n+    private int getDefaultValue() {\n         return ((TraceModuleProvider) this.getProvider()).getModuleConfig().getSampleRate();\n     }\n \n     public int getSampleRate() {\n-        return sampleRate.get() == null ? getDefaultValue() : sampleRate.get();\n+        return sampleRate.get();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4MDIzMw==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449080233", "bodyText": "I think you should use sampleRate.get() only. Why sampleRate.get() == null? In which case?", "author": "wu-sheng", "createdAt": "2020-07-02T15:23:08Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+@Slf4j\n+public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n+    private  AtomicReference<Integer> sampleRate;\n+\n+    public TraceSampleRateWatcher(TraceModuleProvider provider) {\n+        super(TraceModule.NAME, provider, \"sampleRate\");\n+        sampleRate = new AtomicReference<>();\n+        sampleRate.set(getDefaultValue());\n+    }\n+\n+    private void activeSetting(String config) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Updating using new static config: {}\", config);\n+        }\n+        try {\n+            sampleRate.set(Integer.parseInt(config));\n+        } catch (NumberFormatException ex) {\n+            log.error(\"Cannot load sampleRate from: {}\", config, ex);\n+        }\n+    }\n+\n+    @Override\n+    public void notify(ConfigChangeEvent value) {\n+        if (EventType.DELETE.equals(value.getEventType())) {\n+            activeSetting(String.valueOf(getDefaultValue()));\n+        } else {\n+            activeSetting(value.getNewValue());\n+        }\n+    }\n+\n+    @Override\n+    public String value() {\n+        return String.valueOf(sampleRate.get());\n+    }\n+\n+    public int getDefaultValue() {\n+        return ((TraceModuleProvider) this.getProvider()).getModuleConfig().getSampleRate();\n+    }\n+\n+    public int getSampleRate() {\n+        return sampleRate.get() == null ? getDefaultValue() : sampleRate.get();", "originalCommit": "6f38daf176e4e1de372d49db1247509f4f8cd9ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEwMDk0Ng==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449100946", "bodyText": "great\uff0cthank you for help", "author": "killGC", "createdAt": "2020-07-02T15:41:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA4MDIzMw=="}], "type": "inlineReview", "revised_code": {"commit": "989a9f792f47f6d7b83b0a6bd53c3ebb716c49b1", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java\nindex 0226a1ba9..05797e0de 100644\n--- a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java\n+++ b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java\n\n@@ -59,11 +59,11 @@ public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n         return String.valueOf(sampleRate.get());\n     }\n \n-    public int getDefaultValue() {\n+    private int getDefaultValue() {\n         return ((TraceModuleProvider) this.getProvider()).getModuleConfig().getSampleRate();\n     }\n \n     public int getSampleRate() {\n-        return sampleRate.get() == null ? getDefaultValue() : sampleRate.get();\n+        return sampleRate.get();\n     }\n }\n"}}, {"oid": "989a9f792f47f6d7b83b0a6bd53c3ebb716c49b1", "url": "https://github.com/apache/skywalking/commit/989a9f792f47f6d7b83b0a6bd53c3ebb716c49b1", "message": "fix problem from review code", "committedDate": "2020-07-02T15:44:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMyODI0Mw==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449328243", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private  AtomicReference<Integer> sampleRate;\n          \n          \n            \n                private AtomicReference<Integer> sampleRate;", "author": "wu-sheng", "createdAt": "2020-07-03T01:02:43Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.receiver.trace.module.TraceModule;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+@Slf4j\n+public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n+    private  AtomicReference<Integer> sampleRate;", "originalCommit": "989a9f792f47f6d7b83b0a6bd53c3ebb716c49b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5eb783b20d0bb07fd09f67011cdc00f119221aa", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java\nindex 05797e0de..c199650a3 100644\n--- a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java\n+++ b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java\n\n@@ -26,7 +26,7 @@ import java.util.concurrent.atomic.AtomicReference;\n \n @Slf4j\n public class TraceSampleRateWatcher extends ConfigChangeWatcher {\n-    private  AtomicReference<Integer> sampleRate;\n+    private AtomicReference<Integer> sampleRate;\n \n     public TraceSampleRateWatcher(TraceModuleProvider provider) {\n         super(TraceModule.NAME, provider, \"sampleRate\");\n"}}, {"oid": "c5eb783b20d0bb07fd09f67011cdc00f119221aa", "url": "https://github.com/apache/skywalking/commit/c5eb783b20d0bb07fd09f67011cdc00f119221aa", "message": "Update oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcher.java\n\nCo-authored-by: \u5434\u665f Wu Sheng <wu.sheng@foxmail.com>", "committedDate": "2020-07-03T05:12:49Z", "type": "commit"}, {"oid": "08780a32b7333b6d3188de4f9ff0163e447d14f2", "url": "https://github.com/apache/skywalking/commit/08780a32b7333b6d3188de4f9ff0163e447d14f2", "message": "Merge branch 'master' into master", "committedDate": "2020-07-03T05:14:12Z", "type": "commit"}, {"oid": "2a667e88abd4498db37b73f1595454e543f96610", "url": "https://github.com/apache/skywalking/commit/2a667e88abd4498db37b73f1595454e543f96610", "message": "Merge branch 'master' into master", "committedDate": "2020-07-03T09:46:19Z", "type": "commit"}, {"oid": "d67606fd1ba3c01bfadfb7c056d38868aa8a5a28", "url": "https://github.com/apache/skywalking/commit/d67606fd1ba3c01bfadfb7c056d38868aa8a5a28", "message": "add UT", "committedDate": "2020-07-03T15:35:24Z", "type": "commit"}, {"oid": "0e27583546b40907cc29e6e527cbe50a48b3681b", "url": "https://github.com/apache/skywalking/commit/0e27583546b40907cc29e6e527cbe50a48b3681b", "message": "fix code format", "committedDate": "2020-07-03T16:04:27Z", "type": "commit"}, {"oid": "15ee1dd78c446c81f17bf3b4e21e68631e0fb3a4", "url": "https://github.com/apache/skywalking/commit/15ee1dd78c446c81f17bf3b4e21e68631e0fb3a4", "message": "fix code format", "committedDate": "2020-07-04T05:13:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc1NDYwMA==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449754600", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void TestInit() {\n          \n          \n            \n                public void testInit() {", "author": "wu-sheng", "createdAt": "2020-07-04T08:58:01Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcherTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigTable;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigWatcherRegister;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class TraceSampleRateWatcherTest {\n+    private TraceModuleProvider traceModuleProvider;\n+\n+    @Before\n+    public void init() {\n+        traceModuleProvider = new TraceModuleProvider();\n+    }\n+\n+    @Test\n+    public void TestInit() {", "originalCommit": "15ee1dd78c446c81f17bf3b4e21e68631e0fb3a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dca8cb06c65af404bbae5e280183e35cdfcb4956", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcherTest.java b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcherTest.java\nindex 3b6287b55..5e621a8b7 100644\n--- a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcherTest.java\n+++ b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcherTest.java\n\n@@ -43,7 +43,7 @@ public class TraceSampleRateWatcherTest {\n     }\n \n     @Test\n-    public void TestInit() {\n+    public void testInit() {\n         TraceSampleRateWatcher traceSampleRateWatcher = new TraceSampleRateWatcher(traceModuleProvider);\n         Assert.assertEquals(traceSampleRateWatcher.getSampleRate(), 10000);\n         Assert.assertEquals(traceSampleRateWatcher.value(), \"10000\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc1NDYwNg==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449754606", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void TestNotify() {\n          \n          \n            \n                public void testNotify() {", "author": "wu-sheng", "createdAt": "2020-07-04T08:58:09Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcherTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.skywalking.oap.server.receiver.trace.provider;\n+\n+import org.apache.skywalking.oap.server.configuration.api.ConfigChangeWatcher;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigTable;\n+import org.apache.skywalking.oap.server.configuration.api.ConfigWatcherRegister;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class TraceSampleRateWatcherTest {\n+    private TraceModuleProvider traceModuleProvider;\n+\n+    @Before\n+    public void init() {\n+        traceModuleProvider = new TraceModuleProvider();\n+    }\n+\n+    @Test\n+    public void TestInit() {\n+        TraceSampleRateWatcher traceSampleRateWatcher = new TraceSampleRateWatcher(traceModuleProvider);\n+        Assert.assertEquals(traceSampleRateWatcher.getSampleRate(), 10000);\n+        Assert.assertEquals(traceSampleRateWatcher.value(), \"10000\");\n+    }\n+\n+    @Test(timeout = 20000)\n+    public void testDynamicUpdate() throws InterruptedException {\n+        ConfigWatcherRegister register = new MockConfigWatcherRegister(3);\n+\n+        TraceSampleRateWatcher watcher = new TraceSampleRateWatcher(traceModuleProvider);\n+        register.registerConfigChangeWatcher(watcher);\n+        register.start();\n+\n+        while (watcher.getSampleRate() == 10000) {\n+            Thread.sleep(2000);\n+        }\n+        assertThat(watcher.getSampleRate(), is(9000));\n+        assertThat(traceModuleProvider.getModuleConfig().getSampleRate(), is(10000));\n+    }\n+\n+    @Test\n+    public void TestNotify() {", "originalCommit": "15ee1dd78c446c81f17bf3b4e21e68631e0fb3a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc1NDYyNQ==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449754625", "bodyText": "FYI @kezhenxu94 Could you check why the method name format didn't check this?", "author": "wu-sheng", "createdAt": "2020-07-04T08:58:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc1NDYwNg=="}], "type": "inlineReview", "revised_code": {"commit": "dca8cb06c65af404bbae5e280183e35cdfcb4956", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcherTest.java b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcherTest.java\nindex 3b6287b55..5e621a8b7 100644\n--- a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcherTest.java\n+++ b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/test/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceSampleRateWatcherTest.java\n\n@@ -43,7 +43,7 @@ public class TraceSampleRateWatcherTest {\n     }\n \n     @Test\n-    public void TestInit() {\n+    public void testInit() {\n         TraceSampleRateWatcher traceSampleRateWatcher = new TraceSampleRateWatcher(traceModuleProvider);\n         Assert.assertEquals(traceSampleRateWatcher.getSampleRate(), 10000);\n         Assert.assertEquals(traceSampleRateWatcher.value(), \"10000\");\n"}}, {"oid": "dca8cb06c65af404bbae5e280183e35cdfcb4956", "url": "https://github.com/apache/skywalking/commit/dca8cb06c65af404bbae5e280183e35cdfcb4956", "message": "fix code format", "committedDate": "2020-07-04T10:22:12Z", "type": "commit"}, {"oid": "6601b02dcc93ee9644eed59aad8b05b683067304", "url": "https://github.com/apache/skywalking/commit/6601b02dcc93ee9644eed59aad8b05b683067304", "message": "Merge branch 'master' into master", "committedDate": "2020-07-06T00:39:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2MTA1Mw==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r449961053", "bodyText": "As TraceServiceModuleConfig#sampleRate could be changed across thread, recommend to add volatile\n\nprivate volatile int sampleRate = 10000;\n\nJust for avoiding unexpected behaviour.", "author": "wu-sheng", "createdAt": "2020-07-06T02:58:29Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java", "diffHunk": "@@ -18,18 +18,20 @@\n \n package org.apache.skywalking.oap.server.receiver.trace.provider.parser.listener;\n \n+import org.apache.skywalking.oap.server.receiver.trace.provider.TraceServiceModuleConfig;\n+\n /**\n  * The sampler makes the sampling mechanism works at backend side. Sample result: [0,sampleRate) sampled, (sampleRate,~)\n  * ignored\n  */\n public class TraceSegmentSampler {\n-    private int sampleRate = 10000;\n+    private TraceServiceModuleConfig config;", "originalCommit": "6601b02dcc93ee9644eed59aad8b05b683067304", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5Nzc2MQ==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450197761", "bodyText": "@killGC Could you finish this? then it is ready to merge.", "author": "wu-sheng", "createdAt": "2020-07-06T12:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2MTA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIzNjE0OQ==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450236149", "bodyText": "yes,i have finished", "author": "killGC", "createdAt": "2020-07-06T13:53:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2MTA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIzODk5Mg==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450238992", "bodyText": "public class TraceSegmentSampler {\nprivate volatile TraceServiceModuleConfig config;\ni modify like this,or\npublic class TraceSampleRateWatcher extends ConfigChangeWatcher {\nprivate volatile AtomicReference sampleRate;", "author": "killGC", "createdAt": "2020-07-06T13:57:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk2MTA1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "aad7d93d99b48f742cca73e02643d74ce5219d4e", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java\nindex 7f6928da7..40f2041be 100644\n--- a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java\n+++ b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java\n\n@@ -25,7 +25,7 @@ import org.apache.skywalking.oap.server.receiver.trace.provider.TraceServiceModu\n  * ignored\n  */\n public class TraceSegmentSampler {\n-    private TraceServiceModuleConfig config;\n+    private volatile TraceServiceModuleConfig config;\n \n     public TraceSegmentSampler(TraceServiceModuleConfig config) {\n         this.config = config;\n"}}, {"oid": "8f4955cbeb4b94d6666733b04af11e0ec59b3ddc", "url": "https://github.com/apache/skywalking/commit/8f4955cbeb4b94d6666733b04af11e0ec59b3ddc", "message": "Merge branch 'master' into master", "committedDate": "2020-07-06T09:03:31Z", "type": "commit"}, {"oid": "070f92d82f9cd45268cf89b4942cfdf3394abaf4", "url": "https://github.com/apache/skywalking/commit/070f92d82f9cd45268cf89b4942cfdf3394abaf4", "message": "Merge branch 'master' into master", "committedDate": "2020-07-06T12:55:32Z", "type": "commit"}, {"oid": "aad7d93d99b48f742cca73e02643d74ce5219d4e", "url": "https://github.com/apache/skywalking/commit/aad7d93d99b48f742cca73e02643d74ce5219d4e", "message": "fix from code review", "committedDate": "2020-07-06T13:49:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI1MTI0MA==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450251240", "bodyText": "This change is not right. Please read my review more carefully.", "author": "wu-sheng", "createdAt": "2020-07-06T14:15:46Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java", "diffHunk": "@@ -25,7 +25,7 @@\n  * ignored\n  */\n public class TraceSegmentSampler {\n-    private TraceServiceModuleConfig config;\n+    private volatile TraceServiceModuleConfig config;", "originalCommit": "aad7d93d99b48f742cca73e02643d74ce5219d4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NDMxMA==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450264310", "bodyText": "Dynamic configuration will not modify TraceServiceModuleConfig#sampleRate\uff0cbut modify TraceSampleRateWatcher#sampleRate", "author": "killGC", "createdAt": "2020-07-06T14:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI1MTI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NzE0Mw==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450267143", "bodyText": "No one will change this reference, @killGC", "author": "wu-sheng", "createdAt": "2020-07-06T14:38:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI1MTI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI3MjkwMg==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450272902", "bodyText": "okay\uff0cbut this reference #traceSampleRateWatcher#sampleRate will change\uff0cto get newest sampleRate's value by this reference\uff0cno need for this reference add volatile\uff1f", "author": "killGC", "createdAt": "2020-07-06T14:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI1MTI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI4MDYwNA==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450280604", "bodyText": "You are always using the same config#getTraceSampleRateWatcher  reference, right? As the config is never changed, you don't need this. volatile could cause more CPU, please use it if necessary.", "author": "wu-sheng", "createdAt": "2020-07-06T14:57:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI1MTI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI4Mzk1Nw==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450283957", "bodyText": "okay,i see", "author": "killGC", "createdAt": "2020-07-06T15:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI1MTI0MA=="}], "type": "inlineReview", "revised_code": {"commit": "fcc6d04de3067b767d8d11b7d1002c73e159495f", "chunk": "diff --git a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java\nindex 40f2041be..0ad582169 100644\n--- a/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java\n+++ b/oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/parser/listener/TraceSegmentSampler.java\n\n@@ -18,20 +18,20 @@\n \n package org.apache.skywalking.oap.server.receiver.trace.provider.parser.listener;\n \n-import org.apache.skywalking.oap.server.receiver.trace.provider.TraceServiceModuleConfig;\n+import org.apache.skywalking.oap.server.receiver.trace.provider.TraceSampleRateWatcher;\n \n /**\n  * The sampler makes the sampling mechanism works at backend side. Sample result: [0,sampleRate) sampled, (sampleRate,~)\n  * ignored\n  */\n public class TraceSegmentSampler {\n-    private volatile TraceServiceModuleConfig config;\n+    private TraceSampleRateWatcher traceSampleRateWatcher;\n \n-    public TraceSegmentSampler(TraceServiceModuleConfig config) {\n-        this.config = config;\n+    public TraceSegmentSampler(TraceSampleRateWatcher traceSampleRateWatcher) {\n+        this.traceSampleRateWatcher = traceSampleRateWatcher;\n     }\n \n     public boolean shouldSample(String segmentId) {\n-        return segmentId.hashCode() % 10000 < config.getTraceSampleRateWatcher().getSampleRate();\n+        return segmentId.hashCode() % 10000 < traceSampleRateWatcher.getSampleRate();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2Nzg5MA==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450267890", "bodyText": "Why config has reference to watcher? This is strange. Watcher should be a part of TraceSegmentSampler", "author": "wu-sheng", "createdAt": "2020-07-06T14:39:10Z", "path": "oap-server/server-receiver-plugin/skywalking-trace-receiver-plugin/src/main/java/org/apache/skywalking/oap/server/receiver/trace/provider/TraceServiceModuleConfig.java", "diffHunk": "@@ -51,6 +51,9 @@\n     @Setter\n     @Getter\n     private UninstrumentedGatewaysConfig uninstrumentedGatewaysConfig;\n+    @Setter\n+    @Getter\n+    private TraceSampleRateWatcher traceSampleRateWatcher;", "originalCommit": "aad7d93d99b48f742cca73e02643d74ce5219d4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2OTAxNA==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450269014", "bodyText": "Config should only be changed through the initialization stage. Nothing more.", "author": "wu-sheng", "createdAt": "2020-07-06T14:40:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2Nzg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI3OTY1OA==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450279658", "bodyText": "i understand this mean this config have which watchers will modify this config\u2018s properties\uff1ffor example,same with uninstrumentedGatewaysConfig be added before", "author": "killGC", "createdAt": "2020-07-06T14:55:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2Nzg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI4NDA3Nw==", "url": "https://github.com/apache/skywalking/pull/4987#discussion_r450284077", "bodyText": "OK, ignore this. Continue on others.", "author": "wu-sheng", "createdAt": "2020-07-06T15:02:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2Nzg5MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "fcc6d04de3067b767d8d11b7d1002c73e159495f", "url": "https://github.com/apache/skywalking/commit/fcc6d04de3067b767d8d11b7d1002c73e159495f", "message": "fix from code review", "committedDate": "2020-07-06T14:59:20Z", "type": "commit"}, {"oid": "08d686aa7c948fb3298d45549dfb213361afb691", "url": "https://github.com/apache/skywalking/commit/08d686aa7c948fb3298d45549dfb213361afb691", "message": "Merge branch 'master' into master", "committedDate": "2020-07-06T23:52:47Z", "type": "commit"}]}