{"pr_number": 3764, "pr_title": "Indexing improvements", "pr_createdAt": "2020-02-07T02:25:26Z", "pr_url": "https://github.com/bndtools/bnd/pull/3764", "timeline": [{"oid": "fbb6b7843bfcf81ef726896df39ceb4503d5172d", "url": "https://github.com/bndtools/bnd/commit/fbb6b7843bfcf81ef726896df39ceb4503d5172d", "message": "bndlib: Optimizations for methods escaping characters in strings\n\nSigned-off-by: BJ Hargrave <bj@bjhargrave.com>", "committedDate": "2020-02-06T15:57:29Z", "type": "commit"}, {"oid": "56eeaa15916d760ebffe438a6efa2f446a04506e", "url": "https://github.com/bndtools/bnd/commit/56eeaa15916d760ebffe438a6efa2f446a04506e", "message": "capreq: Improvements to capability and requirement impls\n\nSigned-off-by: BJ Hargrave <bj@bjhargrave.com>", "committedDate": "2020-02-07T03:08:05Z", "type": "commit"}, {"oid": "a63fa862a8dd0b9d531929ce0223b724e5a81b00", "url": "https://github.com/bndtools/bnd/commit/a63fa862a8dd0b9d531929ce0223b724e5a81b00", "message": "version: Handle empty String qualifier\n\nSigned-off-by: BJ Hargrave <bj@bjhargrave.com>", "committedDate": "2020-02-07T03:08:06Z", "type": "commit"}, {"oid": "0ea735c1c0e72cadcf29b5c71812a3268783daa4", "url": "https://github.com/bndtools/bnd/commit/0ea735c1c0e72cadcf29b5c71812a3268783daa4", "message": "indexing: Improve indexing code\n\nWe now also collect attributes from BSN into identity cap and collect\ndirectives and attributes from BSN into bundle and host caps.\n\nRecent OSGi EG meetings pointed out we were failing to include these\ndirectives and attributes in the generated index.\n\nThere also changes which should hopefully improve indexing performance.\n\nSigned-off-by: BJ Hargrave <bj@bjhargrave.com>", "committedDate": "2020-02-07T03:08:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI4ODY5Ng==", "url": "https://github.com/bndtools/bnd/pull/3764#discussion_r376288696", "bodyText": "Why did you change the return type?", "author": "pkriens", "createdAt": "2020-02-07T09:21:25Z", "path": "biz.aQute.bndlib/src/aQute/bnd/header/Attrs.java", "diffHunk": "@@ -312,12 +316,12 @@ public String put(String key, String value) {\n \t\t\t\t\t\t}\n \t\t\t\t\t\tbreak;\n \t\t\t\t}\n-\t\t\t\treturn map.put(attribute, value);\n+\t\t\t\treturn attribute;\n \t\t\t}\n \t\t}\n \t\t// default String type\n \t\ttypes.remove(key);\n-\t\treturn map.put(key, value);", "originalCommit": "0ea735c1c0e72cadcf29b5c71812a3268783daa4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM3NDk5NQ==", "url": "https://github.com/bndtools/bnd/pull/3764#discussion_r376374995", "bodyText": "I split the method in two. One part handles computing the type and modifying the type map and the other part modifies the map map.", "author": "bjhargrave", "createdAt": "2020-02-07T12:53:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI4ODY5Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI5MjM2Mw==", "url": "https://github.com/bndtools/bnd/pull/3764#discussion_r376292363", "bodyText": "If you're going to uglify the code all over the place, should you not at least move this into a central method? Repeating this low level checks all over the place is error prone.", "author": "pkriens", "createdAt": "2020-02-07T09:29:05Z", "path": "biz.aQute.bndlib/src/aQute/bnd/print/JarPrinter.java", "diffHunk": "@@ -286,25 +286,27 @@ public JarPrinter doManifest(Manifest manifest) {\n \t\treturn this;\n \t}\n \n-\tprivate final char nibble(int i) {\n+\tprivate static char nibble(int i) {\n \t\treturn \"0123456789ABCDEF\".charAt(i & 0xF);\n \t}\n \n-\tprivate final String escapeUnicode(String s) {\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tfor (int i = 0; i < s.length(); i++) {\n-\t\t\tchar c = s.charAt(i);\n+\tprivate static String escapeUnicode(String value) {\n+\t\tfinal int len = value.length();\n+\t\tStringBuilder sb = new StringBuilder(len);\n+\t\tfor (int i = 0; i < len; i++) {\n+\t\t\tchar c = value.charAt(i);\n \t\t\tif (c >= ' ' && c <= '~' && c != '\\\\')\n \t\t\t\tsb.append(c);\n \t\t\telse {\n-\t\t\t\tsb.append(\"\\\\u\");\n-\t\t\t\tsb.append(nibble(c >> 12));\n-\t\t\t\tsb.append(nibble(c >> 8));\n-\t\t\t\tsb.append(nibble(c >> 4));\n-\t\t\t\tsb.append(nibble(c));\n+\t\t\t\tsb.append('\\\\')\n+\t\t\t\t\t.append('u')\n+\t\t\t\t\t.append(nibble(c >> 12))\n+\t\t\t\t\t.append(nibble(c >> 8))\n+\t\t\t\t\t.append(nibble(c >> 4))\n+\t\t\t\t\t.append(nibble(c));\n \t\t\t}\n \t\t}\n-\t\treturn sb.toString();", "originalCommit": "0ea735c1c0e72cadcf29b5c71812a3268783daa4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}