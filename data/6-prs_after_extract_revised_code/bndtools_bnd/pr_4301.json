{"pr_number": 4301, "pr_title": "Refactoring Maven Repository", "pr_createdAt": "2020-09-08T13:29:53Z", "pr_url": "https://github.com/bndtools/bnd/pull/4301", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk5NDkyOA==", "url": "https://github.com/bndtools/bnd/pull/4301#discussion_r484994928", "bodyText": "Since you use onResolve, serializer is the same as result which means the refresh action will not happen before sync(serializer) returns. That is, onResolve is not chained. Just making sure this is your intention.", "author": "bjhargrave", "createdAt": "2020-09-08T15:06:48Z", "path": "biz.aQute.repository/src/aQute/bnd/repository/maven/provider/IndexFile.java", "diffHunk": "@@ -366,14 +375,31 @@ private boolean isMulti(String name) {\n \t\treturn result;\n \t}\n \n+\t/**\n+\t * This method actually runs NOT in the background, it syncs\n+\t *\n+\t * @param refreshAction to call after it has finished\n+\t * @return\n+\t * @throws Exception\n+\t */\n \tboolean refresh(Runnable refreshAction) throws Exception {\n+\t\tPromise<Boolean> result;\n \t\tif (indexFile.lastModified() != lastModified && last + 10000 < System.currentTimeMillis()) {\n \t\t\tlast = System.currentTimeMillis();\n-\t\t\tPromise<Boolean> serializer = serialize(this::load).onResolve(refreshAction);\n-\t\t\tsync(serializer);\n-\t\t\treturn true;\n+\t\t\tresult = serialize(this::load);\n+\t\t} else {\n+\t\t\tSet<Archive> snapshots = archives.keySet()\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(Archive::isSnapshot)\n+\t\t\t\t.collect(Collectors.toSet());\n+\t\t\tif (!snapshots.isEmpty()) {\n+\t\t\t\tresult = serialize(() -> update(snapshots));\n+\t\t\t} else\n+\t\t\t\treturn false;\n \t\t}\n-\t\treturn false;\n+\t\tPromise<Boolean> serializer = result.onResolve(refreshAction);", "originalCommit": "67e15d05e1e4be5c495fa898bfe70e43954a77e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ4NDM1OQ==", "url": "https://github.com/bndtools/bnd/pull/4301#discussion_r485484359", "bodyText": "The promise was already serialized so this is ok. I've removed the serializer variable to make this more clear.", "author": "pkriens", "createdAt": "2020-09-09T09:48:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk5NDkyOA=="}], "type": "inlineReview", "revised_code": {"commit": "cd2e82edd1ed231ef71ef5e3046567493668bdae", "chunk": "diff --git a/biz.aQute.repository/src/aQute/bnd/repository/maven/provider/IndexFile.java b/biz.aQute.repository/src/aQute/bnd/repository/maven/provider/IndexFile.java\nindex f7b89446e..277d2d9d3 100644\n--- a/biz.aQute.repository/src/aQute/bnd/repository/maven/provider/IndexFile.java\n+++ b/biz.aQute.repository/src/aQute/bnd/repository/maven/provider/IndexFile.java\n\n@@ -375,31 +366,14 @@ class IndexFile {\n \t\treturn result;\n \t}\n \n-\t/**\n-\t * This method actually runs NOT in the background, it syncs\n-\t *\n-\t * @param refreshAction to call after it has finished\n-\t * @return\n-\t * @throws Exception\n-\t */\n \tboolean refresh(Runnable refreshAction) throws Exception {\n-\t\tPromise<Boolean> result;\n \t\tif (indexFile.lastModified() != lastModified && last + 10000 < System.currentTimeMillis()) {\n \t\t\tlast = System.currentTimeMillis();\n-\t\t\tresult = serialize(this::load);\n-\t\t} else {\n-\t\t\tSet<Archive> snapshots = archives.keySet()\n-\t\t\t\t.stream()\n-\t\t\t\t.filter(Archive::isSnapshot)\n-\t\t\t\t.collect(Collectors.toSet());\n-\t\t\tif (!snapshots.isEmpty()) {\n-\t\t\t\tresult = serialize(() -> update(snapshots));\n-\t\t\t} else\n-\t\t\t\treturn false;\n+\t\t\tPromise<Boolean> serializer = serialize(this::load).onResolve(refreshAction);\n+\t\t\tsync(serializer);\n+\t\t\treturn true;\n \t\t}\n-\t\tPromise<Boolean> serializer = result.onResolve(refreshAction);\n-\t\tsync(serializer);\n-\t\treturn true;\n+\t\treturn false;\n \t}\n \n \tprivate Set<Archive> read(File file) throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk5NTQwMA==", "url": "https://github.com/bndtools/bnd/pull/4301#discussion_r484995400", "bodyText": "You may wish to use the new Sets.of method to create an immutable set of the extensions?", "author": "bjhargrave", "createdAt": "2020-09-08T15:07:30Z", "path": "biz.aQute.repository/src/aQute/bnd/repository/maven/provider/IndexFile.java", "diffHunk": "@@ -64,7 +68,11 @@\n  * results without having to wait for the operation to be done.\n  */\n class IndexFile {\n-\tprivate final static Logger\t\t\t\t\tlogger\t\t= LoggerFactory.getLogger(IndexFile.class);\n+\tprivate static final String[]\t\t\t\tZIP_EXTENSIONS\t= new String[] {", "originalCommit": "67e15d05e1e4be5c495fa898bfe70e43954a77e7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd2e82edd1ed231ef71ef5e3046567493668bdae", "chunk": "diff --git a/biz.aQute.repository/src/aQute/bnd/repository/maven/provider/IndexFile.java b/biz.aQute.repository/src/aQute/bnd/repository/maven/provider/IndexFile.java\nindex f7b89446e..277d2d9d3 100644\n--- a/biz.aQute.repository/src/aQute/bnd/repository/maven/provider/IndexFile.java\n+++ b/biz.aQute.repository/src/aQute/bnd/repository/maven/provider/IndexFile.java\n\n@@ -68,11 +64,7 @@ import aQute.service.reporter.Reporter;\n  * results without having to wait for the operation to be done.\n  */\n class IndexFile {\n-\tprivate static final String[]\t\t\t\tZIP_EXTENSIONS\t= new String[] {\n-\t\t\"jar\", \"zip\", \"par\", \"war\", \"ear\", \"esa\"\n-\t};\n-\n-\tprivate final static Logger\t\t\t\t\tlogger\t\t\t= LoggerFactory.getLogger(IndexFile.class);\n+\tprivate final static Logger\t\t\t\t\tlogger\t\t= LoggerFactory.getLogger(IndexFile.class);\n \n \tfinal File\t\t\t\t\t\t\t\t\tindexFile;\n \tfinal IMavenRepo\t\t\t\t\t\t\trepo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAwMDQ2Mw==", "url": "https://github.com/bndtools/bnd/pull/4301#discussion_r485000463", "bodyText": "Is this just something left over from your debugging? Seems like it should not be part of the PR.", "author": "bjhargrave", "createdAt": "2020-09-08T15:15:00Z", "path": "biz.aQute.repository/test/aQute/bnd/repository/maven/provider/MavenBndRepoTest.java", "diffHunk": "@@ -81,6 +81,7 @@\n \n \t@BeforeEach\n \tpublic void setUp(TestInfo testInfo) throws Exception {\n+\t\tSystem.setProperty(\"org.slf4j.simpleLogger.defaultLogLevel\", \"DEBUG\");", "originalCommit": "67e15d05e1e4be5c495fa898bfe70e43954a77e7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd2e82edd1ed231ef71ef5e3046567493668bdae", "chunk": "diff --git a/biz.aQute.repository/test/aQute/bnd/repository/maven/provider/MavenBndRepoTest.java b/biz.aQute.repository/test/aQute/bnd/repository/maven/provider/MavenBndRepoTest.java\nindex 6b25da4d9..729f87b90 100644\n--- a/biz.aQute.repository/test/aQute/bnd/repository/maven/provider/MavenBndRepoTest.java\n+++ b/biz.aQute.repository/test/aQute/bnd/repository/maven/provider/MavenBndRepoTest.java\n\n@@ -81,7 +81,6 @@ public class MavenBndRepoTest {\n \n \t@BeforeEach\n \tpublic void setUp(TestInfo testInfo) throws Exception {\n-\t\tSystem.setProperty(\"org.slf4j.simpleLogger.defaultLogLevel\", \"DEBUG\");\n \t\tString name = testInfo.getTestMethod()\n \t\t\t.get()\n \t\t\t.getName();\n"}}, {"oid": "cd2e82edd1ed231ef71ef5e3046567493668bdae", "url": "https://github.com/bndtools/bnd/commit/cd2e82edd1ed231ef71ef5e3046567493668bdae", "message": "[maven] Started over with the refresh\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-09-09T09:50:36Z", "type": "commit"}, {"oid": "57c84291eb2d7b24960798510b4d4617b27a524e", "url": "https://github.com/bndtools/bnd/commit/57c84291eb2d7b24960798510b4d4617b27a524e", "message": "[maven] Refactored MavenRepository\n\nThe design of the MavenBndRepository is layered. A MavenBndRepository uses an IMavenRepository to access the repositories. This IMavenRepository is constructed from a _local_ repository (.m2) and a set of _backing_ repositories. The purpose of the backing repositories is to abstract the source. Either a file repository or remote repository.\n\nFor unknown reasons, the backing repositories  implemented the metadata handling, making them unnecessarily complex. This wasn't a big deal because they implementations inherited from a base class. \n\nHowever, trying to properly handle the caching  problems of snapshots, it became too hairy. Although this looks like an easy problem, it interacts with the metadata caching & archive stale time & http client caching in mysterious ways. I.e. too much caching was going on.\n\nI therefore moved the metadata methods to the MavenRepository implementation, actually simplifying things considerably. All caching is now in the MavenRepository class. I also moved some of the validation methods to the MavenRepository as well, simplifying the callers. I also unrolled the promises in the MavenRemoteRepository fetch method. This is a private method and was called locally once where there was a wait on the promise. The use of promises made it impossible to single step and verify while using more threads. So this has now become a simple method instead of promise acrobatics.\n\nIn the end the cache handling of snapshots is now a lot clearer. \n\nA MavenBndRepository reads the index and then fetches all files at startup or when there is an addition. Since the init must be done before the first use of the repository, it can assume there is a file present. I.e. the MavenBndRepository 'get' method never fetched content, the content was already there.\n\nWhen the MavenBndRepository get method is called, it will 'find' the archive in the index. The archive is now checked to be stale via the IMavenRepo. The time for snapshots is an hour and a release a week. (We could make it infinite.) If the file is stale, an update is scheduled.\n\n\nWhen refresh is called it clears the metadata cache map and starts an update of all current snapshot archives.\n\nFor each updated archive, it is read from the IMavenRepo.\nOptimizations in the IndexFile have been removed.\n\nIf the archive is a snapshot, it is first  necessary to read the Revision Metadata to find the remote path since each snapshot release creates a new path. A refresh  will remove this metadata, which forces a read for snapshots. Releases cannot be refreshed.\n\nThe MavenRemoteRepository will use the rewritten fetch method\nto get this file from the Http Client. This used\nto another stale time during which there was no check of the\nremote status. This has been changed. The fetch \nmethod will now _always_ check the remote. However,\nit will use the etag to check if there was a refresh so\nno download will actually take place if the file is still the same.\n\nThis results in either an updated or unmodified file.\nIn both cases we parse the file and create a new \nRevisionMetadata.\n\nThe snapshot is then resolved against the new metadata. \n\nThis results in a potentially new remote path. We'll\nuse the fetch method to get this file and then parse it.\n\nThis change will result that snapshots can be refreshed.\nHowever, snapshots are also fetched at startup now.\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-09-09T09:50:36Z", "type": "commit"}, {"oid": "040f9257e2c17cefa224b68af4349cdacd194875", "url": "https://github.com/bndtools/bnd/commit/040f9257e2c17cefa224b68af4349cdacd194875", "message": "After review of https://github.com/bndtools/bnd/pull/4301\n\n- Moved ZIP extensions to ZipUtil & used the suggested Sets.of\n- Removed SLF4J property setting\n- Made promise use clearer\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-09-09T09:50:36Z", "type": "commit"}, {"oid": "040f9257e2c17cefa224b68af4349cdacd194875", "url": "https://github.com/bndtools/bnd/commit/040f9257e2c17cefa224b68af4349cdacd194875", "message": "After review of https://github.com/bndtools/bnd/pull/4301\n\n- Moved ZIP extensions to ZipUtil & used the suggested Sets.of\n- Removed SLF4J property setting\n- Made promise use clearer\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-09-09T09:50:36Z", "type": "forcePushed"}]}