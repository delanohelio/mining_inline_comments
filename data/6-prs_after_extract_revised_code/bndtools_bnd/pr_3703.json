{"pr_number": 3703, "pr_title": "Pkriens/jareditor", "pr_createdAt": "2020-01-03T18:34:33Z", "pr_url": "https://github.com/bndtools/bnd/pull/3703", "timeline": [{"oid": "f1b56e9e335f0da3d2c88ba6f41fe3e1a67bad65", "url": "https://github.com/bndtools/bnd/commit/f1b56e9e335f0da3d2c88ba6f41fe3e1a67bad65", "message": "[lib] \n\n- Format function for Multimap\n- Hex function for printing file in hex\n- IO copy with limit\n- Strings print SI magnitude prefix\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-01-03T17:51:48Z", "type": "commit"}, {"oid": "6ca41d5e8bb02cae06a752994637f7832f6c9a2f", "url": "https://github.com/bndtools/bnd/commit/6ca41d5e8bb02cae06a752994637f7832f6c9a2f", "message": "[result] Some convenience functions \n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-01-03T17:55:15Z", "type": "commit"}, {"oid": "c37d0bd4f49d8a5717313cb4551aba53b7899e28", "url": "https://github.com/bndtools/bnd/commit/c37d0bd4f49d8a5717313cb4551aba53b7899e28", "message": "[jar] Read time from ZipEntry when reading from stream\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-01-03T17:55:43Z", "type": "commit"}, {"oid": "f0b5711fd48a602be01e0d97c5844d15d1693f82", "url": "https://github.com/bndtools/bnd/commit/f0b5711fd48a602be01e0d97c5844d15d1693f82", "message": "[print] Move print function to bndlib\n\nPrinting of a JAR is done in several places. This moves the printing to bndlib\nso it can be used anywhere.\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-01-03T17:57:17Z", "type": "commit"}, {"oid": "73fae3ca5bc99f5a5f243c901470b4f7c78540ab", "url": "https://github.com/bndtools/bnd/commit/73fae3ca5bc99f5a5f243c901470b4f7c78540ab", "message": "[jareditor] Rewrite of the JAR editor\n\nAfter changing the printout to the use\nthe bndlib JARPrinter, I found more and\nmore inconveniences in the JAR Editor.\n\nThis editor is basically a rewrite, it adds the following functions:\n\n- Automatic binary/text detection\n- Select text/binary\n- Limited read can be switched off\n- Drag files from the JAR into Eclipse or filesystem\n- Open an editor in eclipse on a JAR Entry\n  this works also for embedded jars\n  recursively. Editors are closed if the\n  parent is closed.\n- Show size & modified\n\n\nThis rewrite is much smaller and hopefully cleaner. It uses an Eclipse File system\nto map the JAR to an IFolder. Since there is no convenient place to root this folder, an arbitrary Java project is picked. A Java project because then the\ndecompiler works when you double click\na class file. These temporary IFolder objects are carefully deleted and are invisible.\n\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-01-03T18:03:02Z", "type": "commit"}, {"oid": "d66362b777ae66d1a80e2441d4f71ccb89234be7", "url": "https://github.com/bndtools/bnd/commit/d66362b777ae66d1a80e2441d4f71ccb89234be7", "message": "[launchpad] Silly bug in launchpad\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-01-03T18:03:16Z", "type": "commit"}, {"oid": "85f825e26d7fdcf3722059d33640d2d36d16ca9f", "url": "https://github.com/bndtools/bnd/commit/85f825e26d7fdcf3722059d33640d2d36d16ca9f", "message": "[bndtools.core] Enable assertions for the bndtools.core bndrun file for macOS\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-01-03T18:03:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg1NDcyMQ==", "url": "https://github.com/bndtools/bnd/pull/3703#discussion_r363854721", "bodyText": "This just makes a String and then discards it. Is that what you meant? I assume you want to print the String here?", "author": "bjhargrave", "createdAt": "2020-01-07T17:12:16Z", "path": "biz.aQute.bnd/src/aQute/bnd/main/RepoCommand.java", "diffHunk": "@@ -541,7 +541,7 @@ public void _diff(diffOptions options) throws UnsupportedEncodingException, IOEx\n \t\t\t\t\t.put(map)\n \t\t\t\t\t.flush();\n \t\t\telse if (!options.diff())\n-\t\t\t\tbnd.printMultiMap(map);\n+\t\t\t\tMultiMap.format(map);", "originalCommit": "85f825e26d7fdcf3722059d33640d2d36d16ca9f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84d5d02916a2f7633b79e12fb3623a167ce15323", "chunk": "diff --git a/biz.aQute.bnd/src/aQute/bnd/main/RepoCommand.java b/biz.aQute.bnd/src/aQute/bnd/main/RepoCommand.java\nindex 9f1eb03f2..d87113b5b 100644\n--- a/biz.aQute.bnd/src/aQute/bnd/main/RepoCommand.java\n+++ b/biz.aQute.bnd/src/aQute/bnd/main/RepoCommand.java\n\n@@ -541,7 +541,7 @@ public class RepoCommand {\n \t\t\t\t\t.put(map)\n \t\t\t\t\t.flush();\n \t\t\telse if (!options.diff())\n-\t\t\t\tMultiMap.format(map);\n+\t\t\t\tbnd.out.println(MultiMap.format(map));\n \t\t\telse\n \t\t\t\tDiffCommand.show(pw, diff, 0, !options.full());\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg1NzQwMQ==", "url": "https://github.com/bndtools/bnd/pull/3703#discussion_r363857401", "bodyText": "I would call this something like accept rather than then. then implies some chaining in a monadic style. This is really about consuming the Result and accept is the Java method name for consumers.", "author": "bjhargrave", "createdAt": "2020-01-07T17:18:33Z", "path": "biz.aQute.bndlib/src/aQute/bnd/service/result/Result.java", "diffHunk": "@@ -225,4 +234,12 @@\n \t */\n \tResult<V, E> recover(FunctionWithException<? super E, ? extends V> recover);\n \n+\t/**\n+\t * Terminal function that processes the result or the error\n+\t *\n+\t * @param ok the consumer called when ok\n+\t * @param err the consumer called when not ok\n+\t */\n+\tvoid then(ConsumerWithException<? super V> ok, ConsumerWithException<? super E> err);", "originalCommit": "85f825e26d7fdcf3722059d33640d2d36d16ca9f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84d5d02916a2f7633b79e12fb3623a167ce15323", "chunk": "diff --git a/biz.aQute.bndlib/src/aQute/bnd/service/result/Result.java b/biz.aQute.bndlib/src/aQute/bnd/service/result/Result.java\nindex 43fec7a47..c49fc196a 100644\n--- a/biz.aQute.bndlib/src/aQute/bnd/service/result/Result.java\n+++ b/biz.aQute.bndlib/src/aQute/bnd/service/result/Result.java\n\n@@ -240,6 +240,6 @@ public interface Result<V, E> {\n \t * @param ok the consumer called when ok\n \t * @param err the consumer called when not ok\n \t */\n-\tvoid then(ConsumerWithException<? super V> ok, ConsumerWithException<? super E> err);\n+\tvoid accept(ConsumerWithException<? super V> ok, ConsumerWithException<? super E> err);\n \n }\n"}}, {"oid": "84d5d02916a2f7633b79e12fb3623a167ce15323", "url": "https://github.com/bndtools/bnd/commit/84d5d02916a2f7633b79e12fb3623a167ce15323", "message": "[fixes] \n- Fixed output repo command\n- Changed 'then' to 'accept'\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-01-09T18:14:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkzODMxOA==", "url": "https://github.com/bndtools/bnd/pull/3703#discussion_r364938318", "bodyText": "Should this be long time = ZipUtil.getModifiedTime(entry)? We seem to prefer that in other places to ZipEntry.getTime().", "author": "bjhargrave", "createdAt": "2020-01-09T20:11:04Z", "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/Jar.java", "diffHunk": "@@ -294,7 +294,10 @@ private Jar buildFromInputStream(InputStream in, long lastModified) throws IOExc\n \t\t\t\tint size = (int) entry.getSize();\n \t\t\t\ttry (ByteBufferOutputStream bbos = new ByteBufferOutputStream((size == -1) ? BUFFER_SIZE : size + 1)) {\n \t\t\t\t\tbbos.write(jin);\n-\t\t\t\t\tputResource(entry.getName(), new EmbeddedResource(bbos.toByteBuffer(), lastModified), true);\n+\t\t\t\t\tlong time = entry.getTime();", "originalCommit": "84d5d02916a2f7633b79e12fb3623a167ce15323", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkzODk2MQ==", "url": "https://github.com/bndtools/bnd/pull/3703#discussion_r364938961", "bodyText": "This seems to defeat the purpose of the method since it now always returns s.", "author": "bjhargrave", "createdAt": "2020-01-09T20:12:40Z", "path": "aQute.libg/src/aQute/lib/strings/Strings.java", "diffHunk": "@@ -345,7 +345,7 @@ public static String ensureSuffix(String s, String suffix) {\n \t\tif (s.endsWith(suffix))\n \t\t\treturn s;\n \n-\t\treturn s + suffix;\n+\t\treturn s;", "originalCommit": "84d5d02916a2f7633b79e12fb3623a167ce15323", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkzOTk4Mw==", "url": "https://github.com/bndtools/bnd/pull/3703#discussion_r364939983", "bodyText": "We already have LimitedInputStream for this purpose. So we don't need this method which duplicates the behavior. Just do\nIO.copy(new LimitedInputStream(in, limit), out);", "author": "bjhargrave", "createdAt": "2020-01-09T20:15:25Z", "path": "aQute.libg/src/aQute/lib/io/IO.java", "diffHunk": "@@ -186,6 +187,19 @@ public static OutputStream copy(InputStream in, OutputStream out) throws IOExcep\n \t\t}\n \t}\n \n+\tpublic static OutputStream copy(InputStream in, OutputStream out, int limit) throws IOException {", "originalCommit": "84d5d02916a2f7633b79e12fb3623a167ce15323", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk0MTc3OQ==", "url": "https://github.com/bndtools/bnd/pull/3703#discussion_r364941779", "bodyText": "Shouldn't this be AutoCloseable?", "author": "bjhargrave", "createdAt": "2020-01-09T20:19:54Z", "path": "aQute.libg/src/aQute/lib/io/IO.java", "diffHunk": "@@ -1157,6 +1171,40 @@ public static PrintWriter writer(OutputStream out, Charset encoding) {\n \t\treturn new PrintWriter(new OutputStreamWriter(out, encoding));\n \t}\n \n+\tstatic class AppendableWriterAdapter extends Writer {\n+\n+\t\tprivate Appendable appendable;\n+\n+\t\tpublic AppendableWriterAdapter(Appendable appendable) {\n+\t\t\tthis.appendable = appendable;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void write(char[] cbuf, int off, int len) throws IOException {\n+\t\t\tappendable.append(String.valueOf(cbuf), off, len);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void flush() throws IOException {\n+\t\t\tif (appendable instanceof Flushable) {\n+\t\t\t\t((Flushable) appendable).flush();\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void close() throws IOException {\n+\t\t\tflush();\n+\t\t\tif (appendable instanceof Closeable) {", "originalCommit": "84d5d02916a2f7633b79e12fb3623a167ce15323", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk0MzIyNA==", "url": "https://github.com/bndtools/bnd/pull/3703#discussion_r364943224", "bodyText": "Maybe appendable.append(String.valueOf(cbuf, off, len));? That is, pass off and len to String.valueOf.", "author": "bjhargrave", "createdAt": "2020-01-09T20:23:33Z", "path": "aQute.libg/src/aQute/lib/io/IO.java", "diffHunk": "@@ -1157,6 +1171,40 @@ public static PrintWriter writer(OutputStream out, Charset encoding) {\n \t\treturn new PrintWriter(new OutputStreamWriter(out, encoding));\n \t}\n \n+\tstatic class AppendableWriterAdapter extends Writer {\n+\n+\t\tprivate Appendable appendable;\n+\n+\t\tpublic AppendableWriterAdapter(Appendable appendable) {\n+\t\t\tthis.appendable = appendable;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void write(char[] cbuf, int off, int len) throws IOException {\n+\t\t\tappendable.append(String.valueOf(cbuf), off, len);", "originalCommit": "84d5d02916a2f7633b79e12fb3623a167ce15323", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk0MzI4NA==", "url": "https://github.com/bndtools/bnd/pull/3703#discussion_r364943284", "bodyText": "Make final.", "author": "bjhargrave", "createdAt": "2020-01-09T20:23:43Z", "path": "aQute.libg/src/aQute/lib/io/IO.java", "diffHunk": "@@ -1157,6 +1171,40 @@ public static PrintWriter writer(OutputStream out, Charset encoding) {\n \t\treturn new PrintWriter(new OutputStreamWriter(out, encoding));\n \t}\n \n+\tstatic class AppendableWriterAdapter extends Writer {\n+\n+\t\tprivate Appendable appendable;", "originalCommit": "84d5d02916a2f7633b79e12fb3623a167ce15323", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk0NDExNw==", "url": "https://github.com/bndtools/bnd/pull/3703#discussion_r364944117", "bodyText": "Need to add requireNonNull(ok); for consistent behavior regardless of whether the Result is Ok or Err.", "author": "bjhargrave", "createdAt": "2020-01-09T20:25:51Z", "path": "biz.aQute.bndlib/src/aQute/bnd/service/result/Err.java", "diffHunk": "@@ -165,8 +165,18 @@ public V orElseGet(Supplier<? extends V> orElseSupplier) {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void accept(ConsumerWithException<? super V> ok, ConsumerWithException<? super E> err) {", "originalCommit": "84d5d02916a2f7633b79e12fb3623a167ce15323", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk0NDIwMw==", "url": "https://github.com/bndtools/bnd/pull/3703#discussion_r364944203", "bodyText": "Need to add requireNonNull(err); for consistent behavior regardless of whether the Result is Ok or Err.", "author": "bjhargrave", "createdAt": "2020-01-09T20:26:02Z", "path": "biz.aQute.bndlib/src/aQute/bnd/service/result/Ok.java", "diffHunk": "@@ -170,4 +170,13 @@ public V orElseGet(Supplier<? extends V> orElseSupplier) {\n \tpublic String toString() {\n \t\treturn String.format(\"Ok(%s)\", value);\n \t}\n+\n+\t@Override\n+\tpublic void accept(ConsumerWithException<? super V> ok, ConsumerWithException<? super E> err) {", "originalCommit": "84d5d02916a2f7633b79e12fb3623a167ce15323", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}