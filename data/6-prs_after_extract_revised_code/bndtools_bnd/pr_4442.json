{"pr_number": 4442, "pr_title": "[build] Workspace per version defaults", "pr_createdAt": "2020-12-08T11:21:03Z", "pr_url": "https://github.com/bndtools/bnd/pull/4442", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMyOTAyOQ==", "url": "https://github.com/bndtools/bnd/pull/4442#discussion_r538329029", "bodyText": "Does this mean we also need properties files for each micro release since version can equals \"5.2.1\"? This adds complexity to fix releases.", "author": "bjhargrave", "createdAt": "2020-12-08T12:48:45Z", "path": "biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java", "diffHunk": "@@ -292,24 +292,52 @@ public Workspace(File workspaceDir) throws Exception {\n \t}\n \n \tpublic Workspace(File workspaceDir, String bndDir) throws Exception {\n-\t\tsuper(getDefaults());\n+\t\tsuper(new Processor(getDefaults()));\n \t\tthis.maven = new Maven(Processor.getExecutor(), this);\n \t\tthis.layout = WorkspaceLayout.BND;\n \t\tworkspaceDir = workspaceDir.getAbsoluteFile();\n \t\tsetBase(workspaceDir); // setBase before call to setFileSystem\n \t\taddBasicPlugin(new LoggingProgressPlugin());\n \t\tsetFileSystem(workspaceDir, bndDir);\n+\n+\t\t// we must process version defaults after the\n+\t\t// normal properties are read\n+\n+\t\tfixupVersionDefaults(this.getParent()\n+\t\t\t.getProperties());\n+\n \t\tprojects = new ProjectTracker(this);\n \t}\n \n \tprivate Workspace(WorkspaceLayout layout) throws Exception {\n-\t\tsuper(getDefaults());\n+\t\tsuper(new Processor(getDefaults()));\n \t\tthis.maven = new Maven(Processor.getExecutor(), this);\n \t\tthis.layout = layout;\n \t\tsetBuildDir(IO.getFile(BND_DEFAULT_WS, CNFDIR));\n+\t\t// we must process version defaults after the\n+\t\t// normal properties are read\n+\n+\t\tfixupVersionDefaults(this.getParent()\n+\t\t\t.getProperties());\n \t\tprojects = new ProjectTracker(this);\n \t}\n \n+\tprivate void fixupVersionDefaults(Properties props) throws IOException {\n+\t\tVersion current = About.CURRENT.getWithoutQualifier();\n+\t\tString version = Strings.trim(getProperty(Constants.VERSIONDEFAULTS, current.toString()));", "originalCommit": "4a184db4055c946c234e33992a9c847e9cfbe3d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM2Mzc2MA==", "url": "https://github.com/bndtools/bnd/pull/4442#discussion_r538363760", "bodyText": "I looked at how you handle the version in About and you do not use micro releases so far. I agree with that since micro releases should be bug fixes and not change public API. The defaults are public API since people can depend on it. So we can fix a bug in the defaults but we should not make any modification anyone can depend on. I.e. no new defaults.", "author": "pkriens", "createdAt": "2020-12-08T13:24:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMyOTAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM5NjM1MA==", "url": "https://github.com/bndtools/bnd/pull/4442#discussion_r538396350", "bodyText": "You would need to look in a micro release tag to see that we set Current to a micro version. So that would need to be handled here.\n34d22ae#diff-2989e02189b9389c9d08724df134efb45be4d59982b8e0954759aa61e239dacdR54", "author": "bjhargrave", "createdAt": "2020-12-08T13:54:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMyOTAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQwMTk1Mg==", "url": "https://github.com/bndtools/bnd/pull/4442#discussion_r538401952", "bodyText": "I had looked in About and they had no micro but I now realize this happens in the release branch :-)\nI fix this.", "author": "pkriens", "createdAt": "2020-12-08T13:58:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMyOTAyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "75e961ff962e817519a98b4851f5ca3d1320297a", "chunk": "diff --git a/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java b/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java\nindex e244e706f..d780788f1 100644\n--- a/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java\n+++ b/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java\n\n@@ -323,13 +323,14 @@ public class Workspace extends Processor {\n \t}\n \n \tprivate void fixupVersionDefaults(Properties props) throws IOException {\n-\t\tVersion current = About.CURRENT.getWithoutQualifier();\n-\t\tString version = Strings.trim(getProperty(Constants.VERSIONDEFAULTS, current.toString()));\n+\t\tVersion actual = new Version(About.CURRENT.getMajor(), About.CURRENT.getMinor(), 0);\n+\n+\t\tString version = Strings.trim(getProperty(Constants.VERSIONDEFAULTS, actual.toString()));\n \t\tURL url = Workspace.class.getResource(version + \".bnd\");\n \t\tif (url == null) {\n \t\t\terror(\"%s = %s, this is not a valid released bnd version. Using current version %s\",\n-\t\t\t\tConstants.VERSIONDEFAULTS, version, current);\n-\t\t\turl = Workspace.class.getResource(current + \".bnd\");\n+\t\t\t\tConstants.VERSIONDEFAULTS, version, actual);\n+\t\t\turl = Workspace.class.getResource(actual + \".bnd\");\n \t\t\tassert url != null : \"We must have a specific defaults resource\";\n \t\t}\n \t\ttry (InputStream in = url.openStream()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzMDA3NQ==", "url": "https://github.com/bndtools/bnd/pull/4442#discussion_r538330075", "bodyText": "Do you need to handle -include or ${.} processing? Or are these files just simple properties files even though they have .bnd extensions?", "author": "bjhargrave", "createdAt": "2020-12-08T12:49:50Z", "path": "biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java", "diffHunk": "@@ -292,24 +292,52 @@ public Workspace(File workspaceDir) throws Exception {\n \t}\n \n \tpublic Workspace(File workspaceDir, String bndDir) throws Exception {\n-\t\tsuper(getDefaults());\n+\t\tsuper(new Processor(getDefaults()));\n \t\tthis.maven = new Maven(Processor.getExecutor(), this);\n \t\tthis.layout = WorkspaceLayout.BND;\n \t\tworkspaceDir = workspaceDir.getAbsoluteFile();\n \t\tsetBase(workspaceDir); // setBase before call to setFileSystem\n \t\taddBasicPlugin(new LoggingProgressPlugin());\n \t\tsetFileSystem(workspaceDir, bndDir);\n+\n+\t\t// we must process version defaults after the\n+\t\t// normal properties are read\n+\n+\t\tfixupVersionDefaults(this.getParent()\n+\t\t\t.getProperties());\n+\n \t\tprojects = new ProjectTracker(this);\n \t}\n \n \tprivate Workspace(WorkspaceLayout layout) throws Exception {\n-\t\tsuper(getDefaults());\n+\t\tsuper(new Processor(getDefaults()));\n \t\tthis.maven = new Maven(Processor.getExecutor(), this);\n \t\tthis.layout = layout;\n \t\tsetBuildDir(IO.getFile(BND_DEFAULT_WS, CNFDIR));\n+\t\t// we must process version defaults after the\n+\t\t// normal properties are read\n+\n+\t\tfixupVersionDefaults(this.getParent()\n+\t\t\t.getProperties());\n \t\tprojects = new ProjectTracker(this);\n \t}\n \n+\tprivate void fixupVersionDefaults(Properties props) throws IOException {\n+\t\tVersion current = About.CURRENT.getWithoutQualifier();\n+\t\tString version = Strings.trim(getProperty(Constants.VERSIONDEFAULTS, current.toString()));\n+\t\tURL url = Workspace.class.getResource(version + \".bnd\");\n+\t\tif (url == null) {\n+\t\t\terror(\"%s = %s, this is not a valid released bnd version. Using current version %s\",\n+\t\t\t\tConstants.VERSIONDEFAULTS, version, current);\n+\t\t\turl = Workspace.class.getResource(current + \".bnd\");\n+\t\t\tassert url != null : \"We must have a specific defaults resource\";\n+\t\t}\n+\t\ttry (InputStream in = url.openStream()) {\n+\t\t\tprops.load(in);", "originalCommit": "4a184db4055c946c234e33992a9c847e9cfbe3d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM2NDY0Mg==", "url": "https://github.com/bndtools/bnd/pull/4442#discussion_r538364642", "bodyText": "There is no 'current' file since they are in the resources. We could name them properties to indicate that some instructions do not work.", "author": "pkriens", "createdAt": "2020-12-08T13:24:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzMDA3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "75e961ff962e817519a98b4851f5ca3d1320297a", "chunk": "diff --git a/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java b/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java\nindex e244e706f..d780788f1 100644\n--- a/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java\n+++ b/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java\n\n@@ -323,13 +323,14 @@ public class Workspace extends Processor {\n \t}\n \n \tprivate void fixupVersionDefaults(Properties props) throws IOException {\n-\t\tVersion current = About.CURRENT.getWithoutQualifier();\n-\t\tString version = Strings.trim(getProperty(Constants.VERSIONDEFAULTS, current.toString()));\n+\t\tVersion actual = new Version(About.CURRENT.getMajor(), About.CURRENT.getMinor(), 0);\n+\n+\t\tString version = Strings.trim(getProperty(Constants.VERSIONDEFAULTS, actual.toString()));\n \t\tURL url = Workspace.class.getResource(version + \".bnd\");\n \t\tif (url == null) {\n \t\t\terror(\"%s = %s, this is not a valid released bnd version. Using current version %s\",\n-\t\t\t\tConstants.VERSIONDEFAULTS, version, current);\n-\t\t\turl = Workspace.class.getResource(current + \".bnd\");\n+\t\t\t\tConstants.VERSIONDEFAULTS, version, actual);\n+\t\t\turl = Workspace.class.getResource(actual + \".bnd\");\n \t\t\tassert url != null : \"We must have a specific defaults resource\";\n \t\t}\n \t\ttry (InputStream in = url.openStream()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzMzYyMQ==", "url": "https://github.com/bndtools/bnd/pull/4442#discussion_r538333621", "bodyText": "Doesn't this then override any properties set in the cnf?", "author": "bjhargrave", "createdAt": "2020-12-08T12:53:31Z", "path": "biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java", "diffHunk": "@@ -292,24 +292,52 @@ public Workspace(File workspaceDir) throws Exception {\n \t}\n \n \tpublic Workspace(File workspaceDir, String bndDir) throws Exception {\n-\t\tsuper(getDefaults());\n+\t\tsuper(new Processor(getDefaults()));\n \t\tthis.maven = new Maven(Processor.getExecutor(), this);\n \t\tthis.layout = WorkspaceLayout.BND;\n \t\tworkspaceDir = workspaceDir.getAbsoluteFile();\n \t\tsetBase(workspaceDir); // setBase before call to setFileSystem\n \t\taddBasicPlugin(new LoggingProgressPlugin());\n \t\tsetFileSystem(workspaceDir, bndDir);\n+\n+\t\t// we must process version defaults after the\n+\t\t// normal properties are read\n+\n+\t\tfixupVersionDefaults(this.getParent()\n+\t\t\t.getProperties());\n+\n \t\tprojects = new ProjectTracker(this);\n \t}\n \n \tprivate Workspace(WorkspaceLayout layout) throws Exception {\n-\t\tsuper(getDefaults());\n+\t\tsuper(new Processor(getDefaults()));\n \t\tthis.maven = new Maven(Processor.getExecutor(), this);\n \t\tthis.layout = layout;\n \t\tsetBuildDir(IO.getFile(BND_DEFAULT_WS, CNFDIR));\n+\t\t// we must process version defaults after the\n+\t\t// normal properties are read", "originalCommit": "4a184db4055c946c234e33992a9c847e9cfbe3d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM2Nzk0Ng==", "url": "https://github.com/bndtools/bnd/pull/4442#discussion_r538367946", "bodyText": "Nope. I am using an intermediate processor.\n       defaults <- version defaults <- workspace <- project\n                             ^^^\n\nThe version defaults is a new intermediate. Only this processor is changed. If you set a property in the workspace, it will be found before the version defaults and/or overall defaults.\nWe cannot change the overall defaults since this would interfere with different workspaces that would pick different version defaults.", "author": "pkriens", "createdAt": "2020-12-08T13:28:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzMzYyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "75e961ff962e817519a98b4851f5ca3d1320297a", "chunk": "diff --git a/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java b/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java\nindex e244e706f..d780788f1 100644\n--- a/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java\n+++ b/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java\n\n@@ -323,13 +323,14 @@ public class Workspace extends Processor {\n \t}\n \n \tprivate void fixupVersionDefaults(Properties props) throws IOException {\n-\t\tVersion current = About.CURRENT.getWithoutQualifier();\n-\t\tString version = Strings.trim(getProperty(Constants.VERSIONDEFAULTS, current.toString()));\n+\t\tVersion actual = new Version(About.CURRENT.getMajor(), About.CURRENT.getMinor(), 0);\n+\n+\t\tString version = Strings.trim(getProperty(Constants.VERSIONDEFAULTS, actual.toString()));\n \t\tURL url = Workspace.class.getResource(version + \".bnd\");\n \t\tif (url == null) {\n \t\t\terror(\"%s = %s, this is not a valid released bnd version. Using current version %s\",\n-\t\t\t\tConstants.VERSIONDEFAULTS, version, current);\n-\t\t\turl = Workspace.class.getResource(current + \".bnd\");\n+\t\t\t\tConstants.VERSIONDEFAULTS, version, actual);\n+\t\t\turl = Workspace.class.getResource(actual + \".bnd\");\n \t\t\tassert url != null : \"We must have a specific defaults resource\";\n \t\t}\n \t\ttry (InputStream in = url.openStream()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzMzgzOQ==", "url": "https://github.com/bndtools/bnd/pull/4442#discussion_r538333839", "bodyText": "Doesn't this then override any properties set in the cnf? I guess some tests would have shown this?", "author": "bjhargrave", "createdAt": "2020-12-08T12:53:44Z", "path": "biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java", "diffHunk": "@@ -292,24 +292,52 @@ public Workspace(File workspaceDir) throws Exception {\n \t}\n \n \tpublic Workspace(File workspaceDir, String bndDir) throws Exception {\n-\t\tsuper(getDefaults());\n+\t\tsuper(new Processor(getDefaults()));\n \t\tthis.maven = new Maven(Processor.getExecutor(), this);\n \t\tthis.layout = WorkspaceLayout.BND;\n \t\tworkspaceDir = workspaceDir.getAbsoluteFile();\n \t\tsetBase(workspaceDir); // setBase before call to setFileSystem\n \t\taddBasicPlugin(new LoggingProgressPlugin());\n \t\tsetFileSystem(workspaceDir, bndDir);\n+\n+\t\t// we must process version defaults after the\n+\t\t// normal properties are read", "originalCommit": "4a184db4055c946c234e33992a9c847e9cfbe3d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM2OTI2OA==", "url": "https://github.com/bndtools/bnd/pull/4442#discussion_r538369268", "bodyText": "Again, there is a new intermediate processor between the workspace & the old defaults. So inheritance works as it always did. The version defaults have their own Processor/Properties", "author": "pkriens", "createdAt": "2020-12-08T13:29:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzMzgzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "75e961ff962e817519a98b4851f5ca3d1320297a", "chunk": "diff --git a/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java b/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java\nindex e244e706f..d780788f1 100644\n--- a/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java\n+++ b/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java\n\n@@ -323,13 +323,14 @@ public class Workspace extends Processor {\n \t}\n \n \tprivate void fixupVersionDefaults(Properties props) throws IOException {\n-\t\tVersion current = About.CURRENT.getWithoutQualifier();\n-\t\tString version = Strings.trim(getProperty(Constants.VERSIONDEFAULTS, current.toString()));\n+\t\tVersion actual = new Version(About.CURRENT.getMajor(), About.CURRENT.getMinor(), 0);\n+\n+\t\tString version = Strings.trim(getProperty(Constants.VERSIONDEFAULTS, actual.toString()));\n \t\tURL url = Workspace.class.getResource(version + \".bnd\");\n \t\tif (url == null) {\n \t\t\terror(\"%s = %s, this is not a valid released bnd version. Using current version %s\",\n-\t\t\t\tConstants.VERSIONDEFAULTS, version, current);\n-\t\t\turl = Workspace.class.getResource(current + \".bnd\");\n+\t\t\t\tConstants.VERSIONDEFAULTS, version, actual);\n+\t\t\turl = Workspace.class.getResource(actual + \".bnd\");\n \t\t\tassert url != null : \"We must have a specific defaults resource\";\n \t\t}\n \t\ttry (InputStream in = url.openStream()) {\n"}}, {"oid": "75e961ff962e817519a98b4851f5ca3d1320297a", "url": "https://github.com/bndtools/bnd/commit/75e961ff962e817519a98b4851f5ca3d1320297a", "message": "[build] Workspace per version defaults\n\nThis patch provides the defaults for the properties\nfor a workspace. These defaults are version specific\nand the user can set a `-versiondefaults <v>` \ninstruction to select a specific version. This\nallows a user to upgrade to a new workspace but\nkeep the old defaults.\n\nThe idea is that new features are written to be\ndisabled by default. Preferably, this should\ndone with a scope model if application. That is,\nlike for example `contract *` . These instructions\nare _scoped_. By setting an appropriate default\nyou can enable these instructions.\n\nBy default, a workspace will read in the defaults\nof the current version. We maintain already \na current version in About. However, with the\n`-versiondefaults` instruction the user can pick\nan earlier version of defaults.\n\nThe idea is that we continue to add features but\nstrictly write them disabled. The version defaults\ncan then selectively enable them so that the majority\nof our users get the benefits. \n\nThe version default file will (5.3.0.bnd) will have\nthe full set of defaults and will therefore encompass\nthe previous version's defaults.\n\nHowever, an organization that upgrades their bnd,\nwill be able to remain at an older version feature\nwise.\n\nThis was mainly driven because an older workspace\nthat I had was upgraded. After the upgrade, the \nartifacts failed in the field because the maven\ndependencies were automatically added to the pom. Similar\nproblems happened with the new Java import and I \nthink I once messed up with the EE requirements based\non the Java class levels.\n\nThe prime advantages I see are:\n\n- A more consistent feature model (disable in code, \n  enable by version defaults)\n- Concise documentation of the presence of new features in \n  the version default file. This can guide users to\n  override the defaults in their workspace file.\n- A user choice to revert back to an older feature\n  set while being able to take advantage of bug fixes\n\nThis code should work as is in the Gradle workspace\nbuild. The gradle native plugin & maven need to \nsee how they get their current defaults. Since the\ndefaults were already maintained this way, I expect\nthat this requires no change but I know little about\nthese uses of bndlib.\n\n- Made versions ignore micro updates\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-12-08T18:30:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg2NjQ1OQ==", "url": "https://github.com/bndtools/bnd/pull/4442#discussion_r538866459", "bodyText": "The change in this constructor does not do anything useful since there is no user-managed cnf folder in which they can set -versiondefaults to some meaningful value. This includes things using standalone workspace (bndruns, maven, gradle). They can only control a bndrun file which is read after the version defaults are already set in the standalone workspace. So this proposal only works for Bnd workspace projects but it does not work for their bndruns using -standalone.", "author": "bjhargrave", "createdAt": "2020-12-08T22:48:53Z", "path": "biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java", "diffHunk": "@@ -292,24 +292,53 @@ public Workspace(File workspaceDir) throws Exception {\n \t}\n \n \tpublic Workspace(File workspaceDir, String bndDir) throws Exception {\n-\t\tsuper(getDefaults());\n+\t\tsuper(new Processor(getDefaults()));\n \t\tthis.maven = new Maven(Processor.getExecutor(), this);\n \t\tthis.layout = WorkspaceLayout.BND;\n \t\tworkspaceDir = workspaceDir.getAbsoluteFile();\n \t\tsetBase(workspaceDir); // setBase before call to setFileSystem\n \t\taddBasicPlugin(new LoggingProgressPlugin());\n \t\tsetFileSystem(workspaceDir, bndDir);\n+\n+\t\t// we must process version defaults after the\n+\t\t// normal properties are read\n+\n+\t\tfixupVersionDefaults(this.getParent()\n+\t\t\t.getProperties());\n+\n \t\tprojects = new ProjectTracker(this);\n \t}\n \n \tprivate Workspace(WorkspaceLayout layout) throws Exception {\n-\t\tsuper(getDefaults());\n+\t\tsuper(new Processor(getDefaults()));", "originalCommit": "75e961ff962e817519a98b4851f5ca3d1320297a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE5NzE4MQ==", "url": "https://github.com/bndtools/bnd/pull/4442#discussion_r539197181", "bodyText": "You are right, this need to be handled in the createStandaloneWorkspace() method after the properties are read. I've added this and some test cases for bnd, default, and standalone workspaces.\nSince these are the  only way you can create a workspace I assume maven and gradle are covered?", "author": "pkriens", "createdAt": "2020-12-09T10:41:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg2NjQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "52c9c2af5308ecdea72e52f84d49d0c7a65d3a32", "chunk": "diff --git a/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java b/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java\nindex d780788f1..e96d555b7 100644\n--- a/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java\n+++ b/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java\n\n@@ -287,10 +287,29 @@ public class Workspace extends Processor {\n \t\t}\n \t}\n \n+\t/**\n+\t * Create a workspace on the given directory, assuming that it contains a\n+\t * cnf directory. See {@link #Workspace(File, String)}\n+\t *\n+\t * @param workspaceDir the worksapce directory\n+\t */\n \tpublic Workspace(File workspaceDir) throws Exception {\n \t\tthis(workspaceDir, CNFDIR);\n \t}\n \n+\t/**\n+\t * Create a workspace with the given directory and the bnd directory,\n+\t * normally cnf. (Though there are some use cases where this is in another\n+\t * place.) This will create a {@link WorkspaceLayout#BND} layout set the\n+\t * base to the workspaceDir, and read the properties in the `build.bnd` file\n+\t * in the bndDir sub directory.\n+\t * <p>\n+\t * This will read the version specific defaults after the properties are\n+\t * read from build.bnd in an _intermediate_ processor.\n+\t *\n+\t * @param workspaceDir the workspace directory\n+\t * @param bndDir the bnd directory with build.bnd\n+\t */\n \tpublic Workspace(File workspaceDir, String bndDir) throws Exception {\n \t\tsuper(new Processor(getDefaults()));\n \t\tthis.maven = new Maven(Processor.getExecutor(), this);\n"}}, {"oid": "52c9c2af5308ecdea72e52f84d49d0c7a65d3a32", "url": "https://github.com/bndtools/bnd/commit/52c9c2af5308ecdea72e52f84d49d0c7a65d3a32", "message": "[build] Workspace per version defaults\n\nThis patch provides the defaults for the properties\nfor a workspace. These defaults are version specific\nand the user can set a `-versiondefaults <v>` \ninstruction to select a specific version. This\nallows a user to upgrade to a new workspace but\nkeep the old defaults.\n\nThe idea is that new features are written to be\ndisabled by default. Preferably, this should\ndone with a scope model if application. That is,\nlike for example `contract *` . These instructions\nare _scoped_. By setting an appropriate default\nyou can enable these instructions.\n\nBy default, a workspace will read in the defaults\nof the current version. We maintain already \na current version in About. However, with the\n`-versiondefaults` instruction the user can pick\nan earlier version of defaults.\n\nThe idea is that we continue to add features but\nstrictly write them disabled. The version defaults\ncan then selectively enable them so that the majority\nof our users get the benefits. \n\nThe version default file will (5.3.0.bnd) will have\nthe full set of defaults and will therefore encompass\nthe previous version's defaults.\n\nHowever, an organization that upgrades their bnd,\nwill be able to remain at an older version feature\nwise.\n\nThis was mainly driven because an older workspace\nthat I had was upgraded. After the upgrade, the \nartifacts failed in the field because the maven\ndependencies were automatically added to the pom. Similar\nproblems happened with the new Java import and I \nthink I once messed up with the EE requirements based\non the Java class levels.\n\nThe prime advantages I see are:\n\n- A more consistent feature model (disable in code, \n  enable by version defaults)\n- Concise documentation of the presence of new features in \n  the version default file. This can guide users to\n  override the defaults in their workspace file.\n- A user choice to revert back to an older feature\n  set while being able to take advantage of bug fixes\n\nThis code should work as is in the Gradle workspace\nbuild. The gradle native plugin & maven need to \nsee how they get their current defaults. Since the\ndefaults were already maintained this way, I expect\nthat this requires no change but I know little about\nthese uses of bndlib.\n\n- Made versions ignore micro updates\n- added test cases & set version defaults for standalone \nand default case\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2020-12-09T10:42:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM3NDA5OQ==", "url": "https://github.com/bndtools/bnd/pull/4442#discussion_r539374099", "bodyText": "Not sure why this needs to be in a finally since if the method throws an exception, the created workspace object is not visible to the caller who just gets thrown the exception.  I think you just need to call fixup before you return the workspace object.", "author": "bjhargrave", "createdAt": "2020-12-09T14:55:23Z", "path": "biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java", "diffHunk": "@@ -1207,43 +1263,46 @@ public static Workspace createStandaloneWorkspace(Processor run, URI base) throw\n \n \t\tAtomicBoolean copyAll = new AtomicBoolean(false);\n \t\tAtomicInteger counter = new AtomicInteger();\n-\t\tParameters standalone = new Parameters(run.getProperty(STANDALONE), ws);\n-\t\tstandalone.stream()\n-\t\t\t.filterKey(locationStr -> {\n-\t\t\t\tif (\"true\".equalsIgnoreCase(locationStr)) {\n-\t\t\t\t\tcopyAll.set(true);\n-\t\t\t\t\treturn false;\n-\t\t\t\t}\n-\t\t\t\treturn true;\n-\t\t\t})\n-\t\t\t.map(asBiFunction((locationStr, attrs) -> {\n-\t\t\t\tString index = String.format(\"%02d\", counter.incrementAndGet());\n-\t\t\t\tString name = attrs.get(\"name\");\n-\t\t\t\tif (name == null) {\n-\t\t\t\t\tname = \"repo\".concat(index);\n-\t\t\t\t}\n-\t\t\t\tURI resolvedLocation = URIUtil.resolve(base, locationStr);\n-\t\t\t\ttry (Formatter f = new Formatter(Locale.US)) {\n-\t\t\t\t\tf.format(STANDALONE_REPO_CLASS + \"; name='%s'; locations='%s'\", name, resolvedLocation);\n-\t\t\t\t\tattrs.stream()\n-\t\t\t\t\t\t.filterKey(k -> !k.equals(\"name\"))\n-\t\t\t\t\t\t.forEachOrdered((k, v) -> f.format(\"; %s='%s'\", k, v));\n-\t\t\t\t\treturn MapStream.entry(PLUGIN_STANDALONE.concat(index), f.toString());\n-\t\t\t\t}\n-\t\t\t}))\n-\t\t\t.forEachOrdered(ws::setProperty);\n-\n-\t\tMapStream<String, Object> runProperties = MapStream.of(run.getProperties())\n-\t\t\t.mapKey(String.class::cast);\n-\t\tif (!copyAll.get()) {\n-\t\t\trunProperties = runProperties\n-\t\t\t\t.filterKey(k -> k.equals(Constants.PLUGIN) || k.startsWith(Constants.PLUGIN + \".\"));\n-\t\t}\n-\t\tProperties wsProperties = ws.getProperties();\n-\t\trunProperties.filterKey(k -> !k.startsWith(PLUGIN_STANDALONE))\n-\t\t\t.forEachOrdered(wsProperties::put);\n+\t\ttry {\n+\t\t\tParameters standalone = new Parameters(run.getProperty(STANDALONE), ws);\n+\t\t\tstandalone.stream()\n+\t\t\t\t.filterKey(locationStr -> {\n+\t\t\t\t\tif (\"true\".equalsIgnoreCase(locationStr)) {\n+\t\t\t\t\t\tcopyAll.set(true);\n+\t\t\t\t\t\treturn false;\n+\t\t\t\t\t}\n+\t\t\t\t\treturn true;\n+\t\t\t\t})\n+\t\t\t\t.map(asBiFunction((locationStr, attrs) -> {\n+\t\t\t\t\tString index = String.format(\"%02d\", counter.incrementAndGet());\n+\t\t\t\t\tString name = attrs.get(\"name\");\n+\t\t\t\t\tif (name == null) {\n+\t\t\t\t\t\tname = \"repo\".concat(index);\n+\t\t\t\t\t}\n+\t\t\t\t\tURI resolvedLocation = URIUtil.resolve(base, locationStr);\n+\t\t\t\t\ttry (Formatter f = new Formatter(Locale.US)) {\n+\t\t\t\t\t\tf.format(STANDALONE_REPO_CLASS + \"; name='%s'; locations='%s'\", name, resolvedLocation);\n+\t\t\t\t\t\tattrs.stream()\n+\t\t\t\t\t\t\t.filterKey(k -> !k.equals(\"name\"))\n+\t\t\t\t\t\t\t.forEachOrdered((k, v) -> f.format(\"; %s='%s'\", k, v));\n+\t\t\t\t\t\treturn MapStream.entry(PLUGIN_STANDALONE.concat(index), f.toString());\n+\t\t\t\t\t}\n+\t\t\t\t}))\n+\t\t\t\t.forEachOrdered(ws::setProperty);\n+\t\t\tMapStream<String, Object> runProperties = MapStream.of(run.getProperties())\n+\t\t\t\t.mapKey(String.class::cast);\n+\t\t\tif (!copyAll.get()) {\n+\t\t\t\trunProperties = runProperties\n+\t\t\t\t\t.filterKey(k -> k.equals(Constants.PLUGIN) || k.startsWith(Constants.PLUGIN + \".\"));\n+\t\t\t}\n+\t\t\tProperties wsProperties = ws.getProperties();\n+\t\t\trunProperties.filterKey(k -> !k.startsWith(PLUGIN_STANDALONE))\n+\t\t\t\t.forEachOrdered(wsProperties::put);\n \n-\t\treturn ws;\n+\t\t\treturn ws;\n+\t\t} finally {\n+\t\t\tws.fixupVersionDefaults();", "originalCommit": "52c9c2af5308ecdea72e52f84d49d0c7a65d3a32", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc4148e838544d4112d11c19dd945e7c500ddc1d", "chunk": "diff --git a/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java b/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java\nindex e96d555b7..58b87a102 100644\n--- a/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java\n+++ b/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java\n\n@@ -1263,46 +1269,44 @@ public class Workspace extends Processor {\n \n \t\tAtomicBoolean copyAll = new AtomicBoolean(false);\n \t\tAtomicInteger counter = new AtomicInteger();\n-\t\ttry {\n-\t\t\tParameters standalone = new Parameters(run.getProperty(STANDALONE), ws);\n-\t\t\tstandalone.stream()\n-\t\t\t\t.filterKey(locationStr -> {\n-\t\t\t\t\tif (\"true\".equalsIgnoreCase(locationStr)) {\n-\t\t\t\t\t\tcopyAll.set(true);\n-\t\t\t\t\t\treturn false;\n-\t\t\t\t\t}\n-\t\t\t\t\treturn true;\n-\t\t\t\t})\n-\t\t\t\t.map(asBiFunction((locationStr, attrs) -> {\n-\t\t\t\t\tString index = String.format(\"%02d\", counter.incrementAndGet());\n-\t\t\t\t\tString name = attrs.get(\"name\");\n-\t\t\t\t\tif (name == null) {\n-\t\t\t\t\t\tname = \"repo\".concat(index);\n-\t\t\t\t\t}\n-\t\t\t\t\tURI resolvedLocation = URIUtil.resolve(base, locationStr);\n-\t\t\t\t\ttry (Formatter f = new Formatter(Locale.US)) {\n-\t\t\t\t\t\tf.format(STANDALONE_REPO_CLASS + \"; name='%s'; locations='%s'\", name, resolvedLocation);\n-\t\t\t\t\t\tattrs.stream()\n-\t\t\t\t\t\t\t.filterKey(k -> !k.equals(\"name\"))\n-\t\t\t\t\t\t\t.forEachOrdered((k, v) -> f.format(\"; %s='%s'\", k, v));\n-\t\t\t\t\t\treturn MapStream.entry(PLUGIN_STANDALONE.concat(index), f.toString());\n-\t\t\t\t\t}\n-\t\t\t\t}))\n-\t\t\t\t.forEachOrdered(ws::setProperty);\n-\t\t\tMapStream<String, Object> runProperties = MapStream.of(run.getProperties())\n-\t\t\t\t.mapKey(String.class::cast);\n-\t\t\tif (!copyAll.get()) {\n-\t\t\t\trunProperties = runProperties\n-\t\t\t\t\t.filterKey(k -> k.equals(Constants.PLUGIN) || k.startsWith(Constants.PLUGIN + \".\"));\n-\t\t\t}\n-\t\t\tProperties wsProperties = ws.getProperties();\n-\t\t\trunProperties.filterKey(k -> !k.startsWith(PLUGIN_STANDALONE))\n-\t\t\t\t.forEachOrdered(wsProperties::put);\n \n-\t\t\treturn ws;\n-\t\t} finally {\n-\t\t\tws.fixupVersionDefaults();\n+\t\tParameters standalone = new Parameters(run.getProperty(STANDALONE), ws);\n+\t\tstandalone.stream()\n+\t\t\t.filterKey(locationStr -> {\n+\t\t\t\tif (\"true\".equalsIgnoreCase(locationStr)) {\n+\t\t\t\t\tcopyAll.set(true);\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\t\t\t\treturn true;\n+\t\t\t})\n+\t\t\t.map(asBiFunction((locationStr, attrs) -> {\n+\t\t\t\tString index = String.format(\"%02d\", counter.incrementAndGet());\n+\t\t\t\tString name = attrs.get(\"name\");\n+\t\t\t\tif (name == null) {\n+\t\t\t\t\tname = \"repo\".concat(index);\n+\t\t\t\t}\n+\t\t\t\tURI resolvedLocation = URIUtil.resolve(base, locationStr);\n+\t\t\t\ttry (Formatter f = new Formatter(Locale.US)) {\n+\t\t\t\t\tf.format(STANDALONE_REPO_CLASS + \"; name='%s'; locations='%s'\", name, resolvedLocation);\n+\t\t\t\t\tattrs.stream()\n+\t\t\t\t\t\t.filterKey(k -> !k.equals(\"name\"))\n+\t\t\t\t\t\t.forEachOrdered((k, v) -> f.format(\"; %s='%s'\", k, v));\n+\t\t\t\t\treturn MapStream.entry(PLUGIN_STANDALONE.concat(index), f.toString());\n+\t\t\t\t}\n+\t\t\t}))\n+\t\t\t.forEachOrdered(ws::setProperty);\n+\t\tMapStream<String, Object> runProperties = MapStream.of(run.getProperties())\n+\t\t\t.mapKey(String.class::cast);\n+\t\tif (!copyAll.get()) {\n+\t\t\trunProperties = runProperties\n+\t\t\t\t.filterKey(k -> k.equals(Constants.PLUGIN) || k.startsWith(Constants.PLUGIN + \".\"));\n \t\t}\n+\t\tProperties wsProperties = ws.getProperties();\n+\t\trunProperties.filterKey(k -> !k.startsWith(PLUGIN_STANDALONE))\n+\t\t\t.forEachOrdered(wsProperties::put);\n+\n+\t\tws.fixupVersionDefaults();\n+\t\treturn ws;\n \t}\n \n \tpublic boolean isDefaultWorkspace() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM3NTMxNw==", "url": "https://github.com/bndtools/bnd/pull/4442#discussion_r539375317", "bodyText": "but will not fix them up", "author": "bjhargrave", "createdAt": "2020-12-09T14:56:43Z", "path": "biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java", "diffHunk": "@@ -287,29 +287,85 @@ public static Workspace getWorkspace(File workspaceDir, String bndDir) throws Ex\n \t\t}\n \t}\n \n+\t/**\n+\t * Create a workspace on the given directory, assuming that it contains a\n+\t * cnf directory. See {@link #Workspace(File, String)}\n+\t *\n+\t * @param workspaceDir the worksapce directory\n+\t */\n \tpublic Workspace(File workspaceDir) throws Exception {\n \t\tthis(workspaceDir, CNFDIR);\n \t}\n \n+\t/**\n+\t * Create a workspace with the given directory and the bnd directory,\n+\t * normally cnf. (Though there are some use cases where this is in another\n+\t * place.) This will create a {@link WorkspaceLayout#BND} layout set the\n+\t * base to the workspaceDir, and read the properties in the `build.bnd` file\n+\t * in the bndDir sub directory.\n+\t * <p>\n+\t * This will read the version specific defaults after the properties are\n+\t * read from build.bnd in an _intermediate_ processor.\n+\t *\n+\t * @param workspaceDir the workspace directory\n+\t * @param bndDir the bnd directory with build.bnd\n+\t */\n \tpublic Workspace(File workspaceDir, String bndDir) throws Exception {\n-\t\tsuper(getDefaults());\n+\t\tsuper(new Processor(getDefaults()));\n \t\tthis.maven = new Maven(Processor.getExecutor(), this);\n \t\tthis.layout = WorkspaceLayout.BND;\n \t\tworkspaceDir = workspaceDir.getAbsoluteFile();\n \t\tsetBase(workspaceDir); // setBase before call to setFileSystem\n \t\taddBasicPlugin(new LoggingProgressPlugin());\n \t\tsetFileSystem(workspaceDir, bndDir);\n+\n+\t\t// we must process version defaults after the\n+\t\t// normal properties are read\n+\n+\t\tfixupVersionDefaults();\n+\n \t\tprojects = new ProjectTracker(this);\n \t}\n \n+\t/*\n+\t * This constructor will create an intermediate parent processor to hold the\n+\t * version defaults but will fix them up. This must be done by the caller", "originalCommit": "52c9c2af5308ecdea72e52f84d49d0c7a65d3a32", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb7185b8822cb1fcbb64275abec64de0c13127c0", "chunk": "diff --git a/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java b/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java\nindex e96d555b7..1cdf203e2 100644\n--- a/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java\n+++ b/biz.aQute.bndlib/src/aQute/bnd/build/Workspace.java\n\n@@ -329,8 +331,8 @@ public class Workspace extends Processor {\n \n \t/*\n \t * This constructor will create an intermediate parent processor to hold the\n-\t * version defaults but will fix them up. This must be done by the caller\n-\t * after the user properties are set.\n+\t * version defaults but will _not_ fix them up. This must be done by the\n+\t * caller after the user properties are set.\n \t * @param layout the layout to use\n \t */\n \tprivate Workspace(WorkspaceLayout layout) throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM3NzM5OQ==", "url": "https://github.com/bndtools/bnd/pull/4442#discussion_r539377399", "bodyText": "Did you mean to use OSGi Version rather  than Bnd's Version?", "author": "bjhargrave", "createdAt": "2020-12-09T14:59:08Z", "path": "biz.aQute.bndlib.tests/test/test/WorkspaceTest.java", "diffHunk": "@@ -17,10 +17,14 @@\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TestName;\n+import org.osgi.framework.Version;", "originalCommit": "52c9c2af5308ecdea72e52f84d49d0c7a65d3a32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzAxNjAwNg==", "url": "https://github.com/bndtools/bnd/pull/4442#discussion_r593016006", "bodyText": "doesn't matter in this case since it is used to make sure the format is used, so the OSGi one is then better", "author": "pkriens", "createdAt": "2021-03-12T09:08:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM3NzM5OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "2408eebef2bb6ebff8b250b38dc968db883d0fa6", "url": "https://github.com/bndtools/bnd/commit/2408eebef2bb6ebff8b250b38dc968db883d0fa6", "message": "[build] Workspace per version defaults\n\nThis patch provides the defaults for the properties\nfor a workspace. These defaults are version specific\nand the user can set a `-versiondefaults <v>` \ninstruction to select a specific version. This\nallows a user to upgrade to a new workspace but\nkeep the old defaults.\n\nThe idea is that new features are written to be\ndisabled by default. Preferably, this should\ndone with a scope model if application. That is,\nlike for example `contract *` . These instructions\nare _scoped_. By setting an appropriate default\nyou can enable these instructions.\n\nBy default, a workspace will read in the defaults\nof the current version. We maintain already \na current version in About. However, with the\n`-versiondefaults` instruction the user can pick\nan earlier version of defaults.\n\nThe idea is that we continue to add features but\nstrictly write them disabled. The version defaults\ncan then selectively enable them so that the majority\nof our users get the benefits. \n\nThe version default file will (5.3.0.bnd) will have\nthe full set of defaults and will therefore encompass\nthe previous version's defaults.\n\nHowever, an organization that upgrades their bnd,\nwill be able to remain at an older version feature\nwise.\n\nThis was mainly driven because an older workspace\nthat I had was upgraded. After the upgrade, the \nartifacts failed in the field because the maven\ndependencies were automatically added to the pom. Similar\nproblems happened with the new Java import and I \nthink I once messed up with the EE requirements based\non the Java class levels.\n\nThe prime advantages I see are:\n\n- A more consistent feature model (disable in code, \n  enable by version defaults)\n- Concise documentation of the presence of new features in \n  the version default file. This can guide users to\n  override the defaults in their workspace file.\n- A user choice to revert back to an older feature\n  set while being able to take advantage of bug fixes\n\nThis code should work as is in the Gradle workspace\nbuild. The gradle native plugin & maven need to \nsee how they get their current defaults. Since the\ndefaults were already maintained this way, I expect\nthat this requires no change but I know little about\nthese uses of bndlib.\n\n- Made versions ignore micro updates\n- added test cases & set version defaults for standalone \nand default case\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2021-03-12T09:09:06Z", "type": "commit"}, {"oid": "eb7185b8822cb1fcbb64275abec64de0c13127c0", "url": "https://github.com/bndtools/bnd/commit/eb7185b8822cb1fcbb64275abec64de0c13127c0", "message": "no good deed of commenting goes unpunished :-)\n\n---\n Signed-off-by: Peter Kriens <Peter.Kriens@aqute.biz>\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2021-03-12T09:09:06Z", "type": "forcePushed"}, {"oid": "fc4148e838544d4112d11c19dd945e7c500ddc1d", "url": "https://github.com/bndtools/bnd/commit/fc4148e838544d4112d11c19dd945e7c500ddc1d", "message": "[versiondefaults] Version defaults\n\n\u2013 Fixed up comment\n\u2013 Comsetic stuff\n\u2013 Moved to 5.4\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2021-03-12T09:59:12Z", "type": "commit"}, {"oid": "fc4148e838544d4112d11c19dd945e7c500ddc1d", "url": "https://github.com/bndtools/bnd/commit/fc4148e838544d4112d11c19dd945e7c500ddc1d", "message": "[versiondefaults] Version defaults\n\n\u2013 Fixed up comment\n\u2013 Comsetic stuff\n\u2013 Moved to 5.4\n\n\nSigned-off-by: Peter Kriens <Peter.Kriens@aqute.biz>", "committedDate": "2021-03-12T09:59:12Z", "type": "forcePushed"}]}