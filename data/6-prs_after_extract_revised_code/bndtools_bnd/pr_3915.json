{"pr_number": 3915, "pr_title": "created non-s versions of snapshot and release url properties", "pr_createdAt": "2020-04-15T08:51:20Z", "pr_url": "https://github.com/bndtools/bnd/pull/3915", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5Mjc1Mw==", "url": "https://github.com/bndtools/bnd/pull/3915#discussion_r408692753", "bodyText": "Why?", "author": "pkriens", "createdAt": "2020-04-15T09:06:46Z", "path": "biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java", "diffHunk": "@@ -57,11 +59,11 @@\n  */\n @BndPlugin(name = \"BndPomRepository\")\n public class BndPomRepository extends BaseRepository\n-\timplements Plugin, RegistryPlugin, RepositoryPlugin, Refreshable, Actionable, Closeable {\n+\timplements Plugin, RegistryPlugin, RepositoryPlugin, Refreshable, Actionable, Closeable, Prepare {\n \tprivate static final String\tMAVEN_REPO_LOCAL\t= System.getProperty(\"maven.repo.local\", \"~/.m2/repository\");\n \tprivate static final int\tDEFAULT_POLL_TIME\t= 300;\n \n-\tprivate boolean\t\t\t\tinited;\n+\tprivate Boolean\t\t\t\tinited\t\t\t\t= false;", "originalCommit": "6f996d0dbddcdb520f5357c17afa57799e5fc50c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxMzcyOA==", "url": "https://github.com/bndtools/bnd/pull/3915#discussion_r408713728", "bodyText": "I used the init to sync on  at one point and just forgot to switch it back.", "author": "juergen-albert", "createdAt": "2020-04-15T09:41:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5Mjc1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "00b2438ca5dd63487ed2dd5a19892cdabc00c7ee", "chunk": "diff --git a/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java b/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\nindex 2e9a64539..ce7d298de 100644\n--- a/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\n+++ b/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\n\n@@ -63,7 +65,8 @@ public class BndPomRepository extends BaseRepository\n \tprivate static final String\tMAVEN_REPO_LOCAL\t= System.getProperty(\"maven.repo.local\", \"~/.m2/repository\");\n \tprivate static final int\tDEFAULT_POLL_TIME\t= 300;\n \n-\tprivate Boolean\t\t\t\tinited\t\t\t\t= false;\n+\tprivate Promise<Boolean>\tinitialized;\n+\n \tprivate PomConfiguration\tconfiguration;\n \tprivate Registry\t\t\tregistry;\n \tprivate String\t\t\t\tname;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5MzQxMA==", "url": "https://github.com/bndtools/bnd/pull/3915#discussion_r408693410", "bodyText": "prepare does not need to be synchronized, it is only called once after all plugins have been created and injected", "author": "pkriens", "createdAt": "2020-04-15T09:07:52Z", "path": "biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java", "diffHunk": "@@ -75,43 +77,71 @@\n \tprivate String\t\t\t\tqueryUrl;\n \tprivate ScheduledFuture<?>\tpomPoller;\n \n-\tpublic synchronized void init() {\n-\t\ttry {\n-\t\t\tif (inited)\n-\t\t\t\treturn;\n-\t\t\tinited = true;\n-\n-\t\t\tWorkspace workspace = registry.getPlugin(Workspace.class);\n-\t\t\tHttpClient client = registry.getPlugin(HttpClient.class);\n-\t\t\tlocalRepo = IO.getFile(configuration.local(MAVEN_REPO_LOCAL));\n-\t\t\tFile location = workspace.getFile(getLocation());\n-\n-\t\t\tList<MavenBackingRepository> release = MavenBackingRepository.create(configuration.releaseUrls(), reporter,\n-\t\t\t\tlocalRepo, client);\n-\t\t\tList<MavenBackingRepository> snapshot = MavenBackingRepository.create(configuration.snapshotUrls(),\n-\t\t\t\treporter, localRepo, client);\n-\n-\t\t\tMavenRepository repository = new MavenRepository(localRepo, name, release, snapshot, client.promiseFactory()\n-\t\t\t\t.executor(), reporter);\n-\n-\t\t\tboolean transitive = configuration.transitive(true);\n-\n-\t\t\tif (pomFiles != null) {\n-\t\t\t\trepoImpl = new PomRepository(repository, client, location, transitive).uris(pomFiles);\n-\t\t\t} else if (revisions != null) {\n-\t\t\t\trepoImpl = new PomRepository(repository, client, location, transitive).revisions(revisions);\n-\t\t\t} else if (query != null) {\n-\t\t\t\trepoImpl = new SearchRepository(repository, location, query, queryUrl, workspace, client, transitive);\n-\t\t\t} else {\n-\t\t\t\trepository.close();\n-\t\t\t\tthrow new IllegalStateException(\"We have neither a pom, revision, or query set!\");\n-\t\t\t}\n-\t\t\tbridge = new BridgeRepository(repoImpl);\n+\tprivate String\t\t\t\tstatus;\n \n-\t\t\tstartPoll();\n-\t\t} catch (Exception e) {\n-\t\t\treporter.exception(e, \"Init for BndPomRepository failed %s\", configuration);\n-\t\t\tthrow Exceptions.duck(e);\n+\t@SuppressWarnings(\"deprecation\")\n+\t@Override\n+\tpublic void prepare() throws Exception {\n+\t\tsynchronized (this) {", "originalCommit": "6f996d0dbddcdb520f5357c17afa57799e5fc50c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxMjg3Mg==", "url": "https://github.com/bndtools/bnd/pull/3915#discussion_r408712872", "bodyText": "The old init method has been synchronized and the setProperties sets the the initialized marker in a syncronized block. I wasn't sure if this would be necessary, but I thought that their might be a reason, I could not see, so I decided to keep the sync approach. I will throw this out.", "author": "juergen-albert", "createdAt": "2020-04-15T09:40:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5MzQxMA=="}], "type": "inlineReview", "revised_code": {"commit": "00b2438ca5dd63487ed2dd5a19892cdabc00c7ee", "chunk": "diff --git a/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java b/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\nindex 2e9a64539..ce7d298de 100644\n--- a/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\n+++ b/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\n\n@@ -79,69 +82,112 @@ public class BndPomRepository extends BaseRepository\n \n \tprivate String\t\t\t\tstatus;\n \n+\tprivate PromiseFactory\t\tpromiseFactory\t\t= new PromiseFactory(Executors.newSingleThreadExecutor());\n+\n+\t@SuppressWarnings(\"deprecation\")\n+\tprivate boolean init() {\n+\t\ttry {\n+\t\t\tif (initialized == null) {\n+\t\t\t\tprepare();\n+\t\t\t}\n+\t\t\treturn initialized.getValue();\n+\t\t} catch (Exception e) {\n+\t\t\tExceptions.duck(e);\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n \t@SuppressWarnings(\"deprecation\")\n \t@Override\n \tpublic void prepare() throws Exception {\n-\t\tsynchronized (this) {\n+\t\tif (configuration.name() == null) {\n+\t\t\tstatus(\"Must get a name\");\n+\t\t}\n \n-\t\t\ttry {\n-\t\t\t\tif (inited)\n-\t\t\t\t\treturn;\n-\t\t\t\tinited = true;\n-\n-\t\t\t\tWorkspace workspace = registry.getPlugin(Workspace.class);\n-\t\t\t\tHttpClient client = registry.getPlugin(HttpClient.class);\n-\t\t\t\tlocalRepo = IO.getFile(configuration.local(MAVEN_REPO_LOCAL));\n-\t\t\t\tFile location = workspace.getFile(getLocation());\n-\n-\t\t\t\tif (configuration.snapshotUrl() != null && configuration.snapshotUrls() != null) {\n-\t\t\t\t\tstatus(\"snapshotUrl and snapshotUrls property is set. Please only use snapshotUrl.\");\n-\t\t\t\t}\n-\n-\t\t\t\tif (configuration.releaseUrl() != null && configuration.releaseUrls() != null) {\n-\t\t\t\t\tstatus(\"releaseUrl and releaseUrls property is set. Please only use releaseUrl.\");\n-\t\t\t\t}\n-\n-\t\t\t\tif (!isOk()) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\n-\t\t\t\tString releaseUrl = configuration.releaseUrl() != null ? configuration.releaseUrl()\n-\t\t\t\t\t: configuration.releaseUrls();\n-\t\t\t\tString snapshotUrl = configuration.snapshotUrl() != null ? configuration.snapshotUrl()\n-\t\t\t\t\t: configuration.snapshotUrls();\n-\n-\t\t\t\tList<MavenBackingRepository> release = MavenBackingRepository.create(releaseUrl, reporter, localRepo,\n-\t\t\t\t\tclient);\n-\t\t\t\tList<MavenBackingRepository> snapshot = MavenBackingRepository.create(snapshotUrl, reporter, localRepo,\n-\t\t\t\t\tclient);\n-\n-\t\t\t\tMavenRepository repository = new MavenRepository(localRepo, name, release, snapshot,\n-\t\t\t\t\tclient.promiseFactory()\n-\t\t\t\t\t\t.executor(),\n-\t\t\t\t\treporter);\n-\n-\t\t\t\tboolean transitive = configuration.transitive(true);\n-\n-\t\t\t\tif (pomFiles != null) {\n-\t\t\t\t\trepoImpl = new PomRepository(repository, client, location, transitive).uris(pomFiles);\n-\t\t\t\t} else if (revisions != null) {\n-\t\t\t\t\trepoImpl = new PomRepository(repository, client, location, transitive).revisions(revisions);\n-\t\t\t\t} else if (query != null) {\n-\t\t\t\t\trepoImpl = new SearchRepository(repository, location, query, queryUrl, workspace, client,\n-\t\t\t\t\t\ttransitive);\n-\t\t\t\t} else {\n-\t\t\t\t\trepository.close();\n-\t\t\t\t\tstatus(\"We have neither a pom, revision, or query set!\");\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tbridge = new BridgeRepository(repoImpl);\n-\n-\t\t\t\tstartPoll();\n-\t\t\t} catch (Exception e) {\n-\t\t\t\treporter.exception(e, \"Init for BndPomRepository failed %s\", configuration);\n-\t\t\t\tstatus(Exceptions.causes(e));\n+\t\tthis.name = configuration.name();\n+\n+\t\tif (configuration.snapshotUrl() != null && configuration.snapshotUrls() != null) {\n+\t\t\tstatus(\"snapshotUrl and snapshotUrls property is set. Please only use snapshotUrl.\");\n+\t\t}\n+\n+\t\tif (configuration.releaseUrl() != null && configuration.releaseUrls() != null) {\n+\t\t\tstatus(\"releaseUrl and releaseUrls property is set. Please only use releaseUrl.\");\n+\t\t}\n+\n+\t\tif (configuration.pom() != null) {\n+\t\t\tpomFiles = Strings.split(configuration.pom())\n+\t\t\t\t.stream()\n+\t\t\t\t.map(part -> {\n+\t\t\t\t\tFile f = IO.getFile(part);\n+\t\t\t\t\treturn f.isFile() ? f.toURI() : URI.create(part);\n+\t\t\t\t})\n+\t\t\t\t.collect(toList());\n+\t\t\tif (pomFiles.isEmpty()) {\n+\t\t\t\tstatus(\"Pom is neither a file nor a revision \" + configuration.pom());\n+\t\t\t}\n+\t\t} else if (configuration.revision() != null) {\n+\t\t\trevisions = Strings.split(configuration.revision())\n+\t\t\t\t.stream()\n+\t\t\t\t.map(Revision::valueOf)\n+\t\t\t\t.filter(Objects::nonNull)\n+\t\t\t\t.collect(toList());\n+\t\t\tif (revisions.isEmpty()) {\n+\t\t\t\tstatus(\"Revision is neither a file nor a revision \" + configuration.revision());\n \t\t\t}\n+\t\t} else if (configuration.query() != null) {\n+\t\t\tthis.query = configuration.query();\n+\t\t\tthis.queryUrl = configuration.queryUrl(\"http://search.maven.org/solrsearch/select\");\n+\t\t} else {\n+\t\t\tstatus(\"Neither pom, revision nor query property are set\");\n+\t\t}\n+\n+\t\tinitialized = promiseFactory.submit(this::internalInitialize);\n+\t}\n+\n+\t@SuppressWarnings(\"deprecation\")\n+\tprivate boolean internalInitialize() {\n+\t\tif (!isOk()) {\n+\t\t\treturn false;\n+\t\t}\n+\t\ttry {\n+\t\t\tWorkspace workspace = registry.getPlugin(Workspace.class);\n+\t\t\tHttpClient client = registry.getPlugin(HttpClient.class);\n+\t\t\tlocalRepo = IO.getFile(configuration.local(MAVEN_REPO_LOCAL));\n+\t\t\tFile location = workspace.getFile(getLocation());\n+\n+\t\t\tString releaseUrl = configuration.releaseUrl() != null ? configuration.releaseUrl()\n+\t\t\t\t: configuration.releaseUrls();\n+\t\t\tString snapshotUrl = configuration.snapshotUrl() != null ? configuration.snapshotUrl()\n+\t\t\t\t: configuration.snapshotUrls();\n+\n+\t\t\tList<MavenBackingRepository> release = MavenBackingRepository.create(releaseUrl, reporter, localRepo,\n+\t\t\t\tclient);\n+\t\t\tList<MavenBackingRepository> snapshot = MavenBackingRepository.create(snapshotUrl, reporter, localRepo,\n+\t\t\t\tclient);\n+\n+\t\t\tMavenRepository repository = new MavenRepository(localRepo, name, release, snapshot, client.promiseFactory()\n+\t\t\t\t.executor(), reporter);\n+\n+\t\t\tboolean transitive = configuration.transitive(true);\n+\n+\t\t\tif (pomFiles != null) {\n+\t\t\t\trepoImpl = new PomRepository(repository, client, location, transitive).uris(pomFiles);\n+\t\t\t} else if (revisions != null) {\n+\t\t\t\trepoImpl = new PomRepository(repository, client, location, transitive).revisions(revisions);\n+\t\t\t} else if (query != null) {\n+\t\t\t\trepoImpl = new SearchRepository(repository, location, query, queryUrl, workspace, client, transitive);\n+\t\t\t} else {\n+\t\t\t\trepository.close();\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tbridge = new BridgeRepository(repoImpl);\n+\n+\t\t\tstartPoll();\n+\t\t\treturn true;\n+\t\t} catch (Exception e) {\n+\t\t\treporter.exception(e, \"Init for BndPomRepository failed %s\", configuration);\n+\t\t\tstatus(Exceptions.causes(e));\n+\t\t\treturn false;\n \t\t}\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5Mzg3OA==", "url": "https://github.com/bndtools/bnd/pull/3915#discussion_r408693878", "bodyText": "don't use prepare. Refresh is about the pom file but not about the settings. If setting sin the bnd file change, a new plugin is created", "author": "pkriens", "createdAt": "2020-04-15T09:08:39Z", "path": "biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java", "diffHunk": "@@ -151,7 +181,10 @@ private void poll() throws Exception {\n \n \t@Override\n \tpublic boolean refresh() throws Exception {\n-\t\tinit();\n+\t\tprepare();", "originalCommit": "6f996d0dbddcdb520f5357c17afa57799e5fc50c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00b2438ca5dd63487ed2dd5a19892cdabc00c7ee", "chunk": "diff --git a/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java b/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\nindex 2e9a64539..ce7d298de 100644\n--- a/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\n+++ b/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\n\n@@ -181,8 +227,7 @@ public class BndPomRepository extends BaseRepository\n \n \t@Override\n \tpublic boolean refresh() throws Exception {\n-\t\tprepare();\n-\t\tif (!isOk()) {\n+\t\tif (!init()) {\n \t\t\treturn false;\n \t\t}\n \t\trepoImpl.refresh();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NDM2MA==", "url": "https://github.com/bndtools/bnd/pull/3915#discussion_r408694360", "bodyText": "don't need to do this. setProperties is only called once", "author": "pkriens", "createdAt": "2020-04-15T09:09:29Z", "path": "biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java", "diffHunk": "@@ -166,49 +199,56 @@ public boolean refresh() throws Exception {\n \n \t@Override\n \tpublic void setProperties(Map<String, String> map) throws Exception {\n-\n-\t\tconfiguration = Converter.cnv(PomConfiguration.class, map);\n-\n-\t\tif (configuration.name() == null)\n-\t\t\tthrow new IllegalArgumentException(\"Must get a name\");\n-\n-\t\tthis.name = configuration.name();\n-\n-\t\tif (configuration.pom() != null) {\n-\t\t\tpomFiles = Strings.split(configuration.pom())\n-\t\t\t\t.stream()\n-\t\t\t\t.map(part -> {\n-\t\t\t\t\tFile f = IO.getFile(part);\n-\t\t\t\t\treturn f.isFile() ? f.toURI() : URI.create(part);\n-\t\t\t\t})\n-\t\t\t\t.collect(toList());\n-\t\t\tif (pomFiles.isEmpty()) {\n-\t\t\t\tthrow new IllegalArgumentException(\"Pom is neither a file nor a revision \" + configuration.pom());\n-\t\t\t}\n-\t\t} else if (configuration.revision() != null) {\n-\t\t\trevisions = Strings.split(configuration.revision())\n-\t\t\t\t.stream()\n-\t\t\t\t.map(Revision::valueOf)\n-\t\t\t\t.filter(Objects::nonNull)\n-\t\t\t\t.collect(toList());\n-\t\t\tif (revisions.isEmpty()) {\n-\t\t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\"Revision is neither a file nor a revision \" + configuration.revision());\n-\t\t\t}\n-\t\t} else if (configuration.query() != null) {\n-\t\t\tthis.query = configuration.query();\n-\t\t\tthis.queryUrl = configuration.queryUrl(\"http://search.maven.org/solrsearch/select\");\n-\t\t} else {\n-\t\t\tthrow new IllegalArgumentException(\"Neither pom, revision nor query property are set\");\n-\t\t}\n \t\tsynchronized (this) {\n+\t\t\tconfiguration = Converter.cnv(PomConfiguration.class, map);\n+\n+\t\t\tif (configuration.name() == null)\n+\t\t\t\tthrow new IllegalArgumentException(\"Must get a name\");\n+\n+\t\t\tthis.name = configuration.name();\n+\n+\t\t\tif (configuration.pom() != null) {\n+\t\t\t\tpomFiles = Strings.split(configuration.pom())\n+\t\t\t\t\t.stream()\n+\t\t\t\t\t.map(part -> {\n+\t\t\t\t\t\tFile f = IO.getFile(part);\n+\t\t\t\t\t\treturn f.isFile() ? f.toURI() : URI.create(part);\n+\t\t\t\t\t})\n+\t\t\t\t\t.collect(toList());\n+\t\t\t\tif (pomFiles.isEmpty()) {\n+\t\t\t\t\tstatus(\"Pom is neither a file nor a revision \" + configuration.pom());\n+\t\t\t\t}\n+\t\t\t} else if (configuration.revision() != null) {\n+\t\t\t\trevisions = Strings.split(configuration.revision())\n+\t\t\t\t\t.stream()\n+\t\t\t\t\t.map(Revision::valueOf)\n+\t\t\t\t\t.filter(Objects::nonNull)\n+\t\t\t\t\t.collect(toList());\n+\t\t\t\tif (revisions.isEmpty()) {\n+\t\t\t\t\tstatus(\"Revision is neither a file nor a revision \" + configuration.revision());\n+\t\t\t\t}\n+\t\t\t} else if (configuration.query() != null) {\n+\t\t\t\tthis.query = configuration.query();\n+\t\t\t\tthis.queryUrl = configuration.queryUrl(\"http://search.maven.org/solrsearch/select\");\n+\t\t\t} else {\n+\t\t\t\tstatus(\"Neither pom, revision nor query property are set\");\n+\t\t\t}\n \t\t\tinited = false;", "originalCommit": "6f996d0dbddcdb520f5357c17afa57799e5fc50c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxNDU0MQ==", "url": "https://github.com/bndtools/bnd/pull/3915#discussion_r408714541", "bodyText": "you mean the inited = false here?", "author": "juergen-albert", "createdAt": "2020-04-15T09:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NDM2MA=="}], "type": "inlineReview", "revised_code": {"commit": "00b2438ca5dd63487ed2dd5a19892cdabc00c7ee", "chunk": "diff --git a/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java b/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\nindex 2e9a64539..ce7d298de 100644\n--- a/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\n+++ b/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\n\n@@ -199,49 +244,13 @@ public class BndPomRepository extends BaseRepository\n \n \t@Override\n \tpublic void setProperties(Map<String, String> map) throws Exception {\n-\t\tsynchronized (this) {\n-\t\t\tconfiguration = Converter.cnv(PomConfiguration.class, map);\n-\n-\t\t\tif (configuration.name() == null)\n-\t\t\t\tthrow new IllegalArgumentException(\"Must get a name\");\n-\n-\t\t\tthis.name = configuration.name();\n-\n-\t\t\tif (configuration.pom() != null) {\n-\t\t\t\tpomFiles = Strings.split(configuration.pom())\n-\t\t\t\t\t.stream()\n-\t\t\t\t\t.map(part -> {\n-\t\t\t\t\t\tFile f = IO.getFile(part);\n-\t\t\t\t\t\treturn f.isFile() ? f.toURI() : URI.create(part);\n-\t\t\t\t\t})\n-\t\t\t\t\t.collect(toList());\n-\t\t\t\tif (pomFiles.isEmpty()) {\n-\t\t\t\t\tstatus(\"Pom is neither a file nor a revision \" + configuration.pom());\n-\t\t\t\t}\n-\t\t\t} else if (configuration.revision() != null) {\n-\t\t\t\trevisions = Strings.split(configuration.revision())\n-\t\t\t\t\t.stream()\n-\t\t\t\t\t.map(Revision::valueOf)\n-\t\t\t\t\t.filter(Objects::nonNull)\n-\t\t\t\t\t.collect(toList());\n-\t\t\t\tif (revisions.isEmpty()) {\n-\t\t\t\t\tstatus(\"Revision is neither a file nor a revision \" + configuration.revision());\n-\t\t\t\t}\n-\t\t\t} else if (configuration.query() != null) {\n-\t\t\t\tthis.query = configuration.query();\n-\t\t\t\tthis.queryUrl = configuration.queryUrl(\"http://search.maven.org/solrsearch/select\");\n-\t\t\t} else {\n-\t\t\t\tstatus(\"Neither pom, revision nor query property are set\");\n-\t\t\t}\n-\t\t\tinited = false;\n-\t\t}\n+\t\tconfiguration = Converter.cnv(PomConfiguration.class, map);\n \t}\n \n \t@Override\n \tpublic Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {\n \t\ttry {\n-\t\t\tprepare();\n-\t\t\tif (!isOk()) {\n+\t\t\tif (!init()) {\n \t\t\t\treturn Collections.emptyMap();\n \t\t\t}\n \t\t} catch (RuntimeException re) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NDgyOQ==", "url": "https://github.com/bndtools/bnd/pull/3915#discussion_r408694829", "bodyText": "don't use prepare. You can have an init() but prepare should catch all errors & is only called once.", "author": "pkriens", "createdAt": "2020-04-15T09:10:16Z", "path": "biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java", "diffHunk": "@@ -230,7 +270,10 @@ public PutResult put(InputStream stream, PutOptions options) throws Exception {\n \t@Override\n \tpublic File get(String bsn, Version version, Map<String, String> properties, DownloadListener... listeners)\n \t\tthrows Exception {\n-\t\tinit();\n+\t\tprepare();", "originalCommit": "6f996d0dbddcdb520f5357c17afa57799e5fc50c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxNjgyNQ==", "url": "https://github.com/bndtools/bnd/pull/3915#discussion_r408716825", "bodyText": "Hmm... If I have a prepare that simply checks the config and sets a status if something is off, I would need to check the isOk() in the init because it would most likely throw an Exception. The I would need to check everywhere the isOk() as well (as I already do), to avoid Exceptions e.g. in BndTools. Would this be right?", "author": "juergen-albert", "createdAt": "2020-04-15T09:47:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NDgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NDUxNw==", "url": "https://github.com/bndtools/bnd/pull/3915#discussion_r408894517", "bodyText": "The prepare method is from the Prepare interface, it has a well defined meaning, so it should not be called as the check method. In prepare() you calculate anything that is related to the properties since they will not change during the life of the instance. Since you do not want to block, ideally you want to do any initialization in a background thread. An init() method could then block until that thread is finished & check isOk().\n prepare() -> process properties, registry, etc. & start init thread\n init()          -> block till init thread is ready, check status", "author": "pkriens", "createdAt": "2020-04-15T14:39:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NDgyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "00b2438ca5dd63487ed2dd5a19892cdabc00c7ee", "chunk": "diff --git a/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java b/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\nindex 2e9a64539..ce7d298de 100644\n--- a/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\n+++ b/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\n\n@@ -270,8 +279,7 @@ public class BndPomRepository extends BaseRepository\n \t@Override\n \tpublic File get(String bsn, Version version, Map<String, String> properties, DownloadListener... listeners)\n \t\tthrows Exception {\n-\t\tprepare();\n-\t\tif (!isOk()) {\n+\t\tif (!init()) {\n \t\t\treturn null;\n \t\t}\n \n"}}, {"oid": "00b2438ca5dd63487ed2dd5a19892cdabc00c7ee", "url": "https://github.com/bndtools/bnd/commit/00b2438ca5dd63487ed2dd5a19892cdabc00c7ee", "message": "created non-s versions of snapshot and release URL properties\n\n* fixes #3872\n* moved from Exceptions status messages in the BndPomRepository\n\nSigned-off-by: Juergen Albert <j.albert@data-in-motion.biz>", "committedDate": "2020-04-20T12:35:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2MDY1OQ==", "url": "https://github.com/bndtools/bnd/pull/3915#discussion_r411360659", "bodyText": "You should get this one from the registry (setRegistry), or Processor.getPromiseFactory()", "author": "pkriens", "createdAt": "2020-04-20T13:05:41Z", "path": "biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java", "diffHunk": "@@ -75,21 +80,90 @@\n \tprivate String\t\t\t\tqueryUrl;\n \tprivate ScheduledFuture<?>\tpomPoller;\n \n-\tpublic synchronized void init() {\n+\tprivate String\t\t\t\tstatus;\n+\n+\tprivate PromiseFactory\t\tpromiseFactory\t\t= new PromiseFactory(Executors.newSingleThreadExecutor());", "originalCommit": "00b2438ca5dd63487ed2dd5a19892cdabc00c7ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2ODQ0Ng==", "url": "https://github.com/bndtools/bnd/pull/3915#discussion_r411368446", "bodyText": "good to know, I will use this factory instead", "author": "juergen-albert", "createdAt": "2020-04-20T13:17:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2MDY1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "fe40e38155d123b263a2bf7a16b48ced8ce0932c", "chunk": "diff --git a/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java b/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\nindex ce7d298de..7dc7b46f7 100644\n--- a/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\n+++ b/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\n\n@@ -82,8 +80,6 @@ public class BndPomRepository extends BaseRepository\n \n \tprivate String\t\t\t\tstatus;\n \n-\tprivate PromiseFactory\t\tpromiseFactory\t\t= new PromiseFactory(Executors.newSingleThreadExecutor());\n-\n \t@SuppressWarnings(\"deprecation\")\n \tprivate boolean init() {\n \t\ttry {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2MTc2Mw==", "url": "https://github.com/bndtools/bnd/pull/3915#discussion_r411361763", "bodyText": "Generally you make sure that this is initialized before you call the method. You can create the promise in prepare() since this is always called before any of the methods that can call init().", "author": "pkriens", "createdAt": "2020-04-20T13:07:28Z", "path": "biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java", "diffHunk": "@@ -75,21 +80,90 @@\n \tprivate String\t\t\t\tqueryUrl;\n \tprivate ScheduledFuture<?>\tpomPoller;\n \n-\tpublic synchronized void init() {\n+\tprivate String\t\t\t\tstatus;\n+\n+\tprivate PromiseFactory\t\tpromiseFactory\t\t= new PromiseFactory(Executors.newSingleThreadExecutor());\n+\n+\t@SuppressWarnings(\"deprecation\")\n+\tprivate boolean init() {\n \t\ttry {\n-\t\t\tif (inited)\n-\t\t\t\treturn;\n-\t\t\tinited = true;\n+\t\t\tif (initialized == null) {", "originalCommit": "00b2438ca5dd63487ed2dd5a19892cdabc00c7ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM3MjIyOA==", "url": "https://github.com/bndtools/bnd/pull/3915#discussion_r411372228", "bodyText": "I already do all this in the prepare method, but a lot of the existing tests didn't work this way. So I decided to do the extra check, so it would still work as it did before. As this is public API, I did not want to make it too hard on other people using it. I reasoned, that this check will not be too expensive and should be tolerable.", "author": "juergen-albert", "createdAt": "2020-04-20T13:22:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2MTc2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM3NzgyOA==", "url": "https://github.com/bndtools/bnd/pull/3915#discussion_r411377828", "bodyText": "yeah, for tests you sometimes have to compromise, ok", "author": "pkriens", "createdAt": "2020-04-20T13:30:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2MTc2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "fe40e38155d123b263a2bf7a16b48ced8ce0932c", "chunk": "diff --git a/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java b/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\nindex ce7d298de..7dc7b46f7 100644\n--- a/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\n+++ b/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\n\n@@ -82,8 +80,6 @@ public class BndPomRepository extends BaseRepository\n \n \tprivate String\t\t\t\tstatus;\n \n-\tprivate PromiseFactory\t\tpromiseFactory\t\t= new PromiseFactory(Executors.newSingleThreadExecutor());\n-\n \t@SuppressWarnings(\"deprecation\")\n \tprivate boolean init() {\n \t\ttry {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2MjI5MQ==", "url": "https://github.com/bndtools/bnd/pull/3915#discussion_r411362291", "bodyText": "you should do all this work in prepare() since it is only done once.", "author": "pkriens", "createdAt": "2020-04-20T13:08:18Z", "path": "biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java", "diffHunk": "@@ -75,21 +80,90 @@\n \tprivate String\t\t\t\tqueryUrl;\n \tprivate ScheduledFuture<?>\tpomPoller;\n \n-\tpublic synchronized void init() {\n+\tprivate String\t\t\t\tstatus;\n+\n+\tprivate PromiseFactory\t\tpromiseFactory\t\t= new PromiseFactory(Executors.newSingleThreadExecutor());\n+\n+\t@SuppressWarnings(\"deprecation\")\n+\tprivate boolean init() {\n \t\ttry {\n-\t\t\tif (inited)\n-\t\t\t\treturn;\n-\t\t\tinited = true;\n+\t\t\tif (initialized == null) {\n+\t\t\t\tprepare();\n+\t\t\t}\n+\t\t\treturn initialized.getValue();\n+\t\t} catch (Exception e) {\n+\t\t\tExceptions.duck(e);\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\t@SuppressWarnings(\"deprecation\")\n+\t@Override\n+\tpublic void prepare() throws Exception {\n+\t\tif (configuration.name() == null) {\n+\t\t\tstatus(\"Must get a name\");\n+\t\t}\n+\n+\t\tthis.name = configuration.name();\n \n+\t\tif (configuration.snapshotUrl() != null && configuration.snapshotUrls() != null) {\n+\t\t\tstatus(\"snapshotUrl and snapshotUrls property is set. Please only use snapshotUrl.\");\n+\t\t}\n+\n+\t\tif (configuration.releaseUrl() != null && configuration.releaseUrls() != null) {\n+\t\t\tstatus(\"releaseUrl and releaseUrls property is set. Please only use releaseUrl.\");\n+\t\t}\n+\n+\t\tif (configuration.pom() != null) {\n+\t\t\tpomFiles = Strings.split(configuration.pom())\n+\t\t\t\t.stream()\n+\t\t\t\t.map(part -> {\n+\t\t\t\t\tFile f = IO.getFile(part);\n+\t\t\t\t\treturn f.isFile() ? f.toURI() : URI.create(part);\n+\t\t\t\t})\n+\t\t\t\t.collect(toList());\n+\t\t\tif (pomFiles.isEmpty()) {\n+\t\t\t\tstatus(\"Pom is neither a file nor a revision \" + configuration.pom());\n+\t\t\t}\n+\t\t} else if (configuration.revision() != null) {\n+\t\t\trevisions = Strings.split(configuration.revision())\n+\t\t\t\t.stream()\n+\t\t\t\t.map(Revision::valueOf)\n+\t\t\t\t.filter(Objects::nonNull)\n+\t\t\t\t.collect(toList());\n+\t\t\tif (revisions.isEmpty()) {\n+\t\t\t\tstatus(\"Revision is neither a file nor a revision \" + configuration.revision());\n+\t\t\t}\n+\t\t} else if (configuration.query() != null) {\n+\t\t\tthis.query = configuration.query();\n+\t\t\tthis.queryUrl = configuration.queryUrl(\"http://search.maven.org/solrsearch/select\");\n+\t\t} else {\n+\t\t\tstatus(\"Neither pom, revision nor query property are set\");\n+\t\t}\n+\n+\t\tinitialized = promiseFactory.submit(this::internalInitialize);\n+\t}\n+\n+\t@SuppressWarnings(\"deprecation\")\n+\tprivate boolean internalInitialize() {\n+\t\tif (!isOk()) {\n+\t\t\treturn false;\n+\t\t}\n+\t\ttry {\n \t\t\tWorkspace workspace = registry.getPlugin(Workspace.class);\n \t\t\tHttpClient client = registry.getPlugin(HttpClient.class);\n \t\t\tlocalRepo = IO.getFile(configuration.local(MAVEN_REPO_LOCAL));\n \t\t\tFile location = workspace.getFile(getLocation());\n \n-\t\t\tList<MavenBackingRepository> release = MavenBackingRepository.create(configuration.releaseUrls(), reporter,\n-\t\t\t\tlocalRepo, client);\n-\t\t\tList<MavenBackingRepository> snapshot = MavenBackingRepository.create(configuration.snapshotUrls(),\n-\t\t\t\treporter, localRepo, client);\n+\t\t\tString releaseUrl = configuration.releaseUrl() != null ? configuration.releaseUrl()", "originalCommit": "00b2438ca5dd63487ed2dd5a19892cdabc00c7ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM3NDM1Mw==", "url": "https://github.com/bndtools/bnd/pull/3915#discussion_r411374353", "bodyText": "I had it in the prepare method in a () -> {} block, but the method became to long, so I thought it might be better to split it. prepare is doing the checks and kicks of the init Promise and the extra method is doing the extra initialization. I can do it in one method, but it looks ugly though.", "author": "juergen-albert", "createdAt": "2020-04-20T13:25:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2MjI5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "fe40e38155d123b263a2bf7a16b48ced8ce0932c", "chunk": "diff --git a/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java b/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\nindex ce7d298de..7dc7b46f7 100644\n--- a/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\n+++ b/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\n\n@@ -82,8 +80,6 @@ public class BndPomRepository extends BaseRepository\n \n \tprivate String\t\t\t\tstatus;\n \n-\tprivate PromiseFactory\t\tpromiseFactory\t\t= new PromiseFactory(Executors.newSingleThreadExecutor());\n-\n \t@SuppressWarnings(\"deprecation\")\n \tprivate boolean init() {\n \t\ttry {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2MzAyMA==", "url": "https://github.com/bndtools/bnd/pull/3915#discussion_r411363020", "bodyText": "if you use duck, no need to do this extra Runtime check", "author": "pkriens", "createdAt": "2020-04-20T13:09:18Z", "path": "biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java", "diffHunk": "@@ -166,49 +244,20 @@ public boolean refresh() throws Exception {\n \n \t@Override\n \tpublic void setProperties(Map<String, String> map) throws Exception {\n-\n \t\tconfiguration = Converter.cnv(PomConfiguration.class, map);\n-\n-\t\tif (configuration.name() == null)\n-\t\t\tthrow new IllegalArgumentException(\"Must get a name\");\n-\n-\t\tthis.name = configuration.name();\n-\n-\t\tif (configuration.pom() != null) {\n-\t\t\tpomFiles = Strings.split(configuration.pom())\n-\t\t\t\t.stream()\n-\t\t\t\t.map(part -> {\n-\t\t\t\t\tFile f = IO.getFile(part);\n-\t\t\t\t\treturn f.isFile() ? f.toURI() : URI.create(part);\n-\t\t\t\t})\n-\t\t\t\t.collect(toList());\n-\t\t\tif (pomFiles.isEmpty()) {\n-\t\t\t\tthrow new IllegalArgumentException(\"Pom is neither a file nor a revision \" + configuration.pom());\n-\t\t\t}\n-\t\t} else if (configuration.revision() != null) {\n-\t\t\trevisions = Strings.split(configuration.revision())\n-\t\t\t\t.stream()\n-\t\t\t\t.map(Revision::valueOf)\n-\t\t\t\t.filter(Objects::nonNull)\n-\t\t\t\t.collect(toList());\n-\t\t\tif (revisions.isEmpty()) {\n-\t\t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\"Revision is neither a file nor a revision \" + configuration.revision());\n-\t\t\t}\n-\t\t} else if (configuration.query() != null) {\n-\t\t\tthis.query = configuration.query();\n-\t\t\tthis.queryUrl = configuration.queryUrl(\"http://search.maven.org/solrsearch/select\");\n-\t\t} else {\n-\t\t\tthrow new IllegalArgumentException(\"Neither pom, revision nor query property are set\");\n-\t\t}\n-\t\tsynchronized (this) {\n-\t\t\tinited = false;\n-\t\t}\n \t}\n \n \t@Override\n \tpublic Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {\n-\t\tinit();\n+\t\ttry {\n+\t\t\tif (!init()) {\n+\t\t\t\treturn Collections.emptyMap();\n+\t\t\t}\n+\t\t} catch (RuntimeException re) {\n+\t\t\tthrow re;", "originalCommit": "00b2438ca5dd63487ed2dd5a19892cdabc00c7ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM3NjI2OQ==", "url": "https://github.com/bndtools/bnd/pull/3915#discussion_r411376269", "bodyText": "Will do", "author": "juergen-albert", "createdAt": "2020-04-20T13:27:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2MzAyMA=="}], "type": "inlineReview", "revised_code": {"commit": "fe40e38155d123b263a2bf7a16b48ced8ce0932c", "chunk": "diff --git a/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java b/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\nindex ce7d298de..7dc7b46f7 100644\n--- a/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\n+++ b/biz.aQute.repository/src/aQute/bnd/repository/maven/pom/provider/BndPomRepository.java\n\n@@ -249,14 +246,8 @@ public class BndPomRepository extends BaseRepository\n \n \t@Override\n \tpublic Map<Requirement, Collection<Capability>> findProviders(Collection<? extends Requirement> requirements) {\n-\t\ttry {\n-\t\t\tif (!init()) {\n-\t\t\t\treturn Collections.emptyMap();\n-\t\t\t}\n-\t\t} catch (RuntimeException re) {\n-\t\t\tthrow re;\n-\t\t} catch (Exception e) {\n-\t\t\tthrow Exceptions.duck(e);\n+\t\tif (!init()) {\n+\t\t\treturn Collections.emptyMap();\n \t\t}\n \t\treturn repoImpl.findProviders(requirements);\n \t}\n"}}, {"oid": "fe40e38155d123b263a2bf7a16b48ced8ce0932c", "url": "https://github.com/bndtools/bnd/commit/fe40e38155d123b263a2bf7a16b48ced8ce0932c", "message": "created non-s versions of snapshot and release URL properties\n\n* fixes #3872\n* moved from Exceptions to status messages in the BndPomRepository\n* fixes #3439\n\nSigned-off-by: Juergen Albert <j.albert@data-in-motion.biz>", "committedDate": "2020-04-20T17:50:09Z", "type": "commit"}, {"oid": "fe40e38155d123b263a2bf7a16b48ced8ce0932c", "url": "https://github.com/bndtools/bnd/commit/fe40e38155d123b263a2bf7a16b48ced8ce0932c", "message": "created non-s versions of snapshot and release URL properties\n\n* fixes #3872\n* moved from Exceptions to status messages in the BndPomRepository\n* fixes #3439\n\nSigned-off-by: Juergen Albert <j.albert@data-in-motion.biz>", "committedDate": "2020-04-20T17:50:09Z", "type": "forcePushed"}]}