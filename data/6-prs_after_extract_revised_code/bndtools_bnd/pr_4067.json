{"pr_number": 4067, "pr_title": "Copy.gavs", "pr_createdAt": "2020-05-18T02:08:07Z", "pr_url": "https://github.com/bndtools/bnd/pull/4067", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5Mjk0OA==", "url": "https://github.com/bndtools/bnd/pull/4067#discussion_r426592948", "bodyText": "Since you only want the values, just do map.values().stream()", "author": "bjhargrave", "createdAt": "2020-05-18T12:36:45Z", "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/repository/BridgeRepository.java", "diffHunk": "@@ -263,6 +289,17 @@ public Resource get(String bsn, Version version) throws Exception {\n \t\treturn resourceInfo.resource;\n \t}\n \n+\tpublic ResourceInfo getInfo(String bsn) throws Exception {\n+\t\tMap<Version, ResourceInfo> map = index.get(bsn);\n+\t\tif (map == null)\n+\t\t\treturn null;\n+\n+\t\treturn MapStream.of(map.entrySet())", "originalCommit": "c99135272d60f9c846cc2e80479c95ab485af632", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0ODg4OA==", "url": "https://github.com/bndtools/bnd/pull/4067#discussion_r426748888", "bodyText": ":|", "author": "rotty3000", "createdAt": "2020-05-18T16:24:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5Mjk0OA=="}], "type": "inlineReview", "revised_code": {"commit": "88453e7ec64bd53cbdfe286bea8bf276e121af25", "chunk": "diff --git a/biz.aQute.bndlib/src/aQute/bnd/osgi/repository/BridgeRepository.java b/biz.aQute.bndlib/src/aQute/bnd/osgi/repository/BridgeRepository.java\nindex 9b4ed9fea..a8db90517 100644\n--- a/biz.aQute.bndlib/src/aQute/bnd/osgi/repository/BridgeRepository.java\n+++ b/biz.aQute.bndlib/src/aQute/bnd/osgi/repository/BridgeRepository.java\n\n@@ -294,8 +293,8 @@ public class BridgeRepository {\n \t\tif (map == null)\n \t\t\treturn null;\n \n-\t\treturn MapStream.of(map.entrySet())\n-\t\t\t.values()\n+\t\treturn map.values()\n+\t\t\t.stream()\n \t\t\t.findFirst()\n \t\t\t.orElse(null);\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5NDY2MQ==", "url": "https://github.com/bndtools/bnd/pull/4067#discussion_r426594661", "bodyText": "Not sure this is wise. Did you check for any places which assume the presence of a bnd.info cap means the artifacts is NOT a bundle? You have changed things from a resource has either a osgi.identity or a bnd.info to where every resource has a bnd.info.", "author": "bjhargrave", "createdAt": "2020-05-18T12:39:47Z", "path": "biz.aQute.repository/src/aQute/bnd/repository/maven/provider/IndexFile.java", "diffHunk": "@@ -324,13 +324,11 @@ private boolean isMulti(String name) {\n \tprivate Map<Archive, Resource> parseSingle(Archive archive, File single) throws Exception {\n \t\tResourceBuilder rb = new ResourceBuilder();\n \t\tboolean hasIdentity = rb.addFile(single, single.toURI());\n-\t\tif (!hasIdentity) {\n-\t\t\tString name = archive.getWithoutVersion();\n-\t\t\tMavenVersion version = archive.revision.version;\n-\n-\t\t\tBridgeRepository.addInformationCapability(rb, name, version.getOSGiVersion(), repo.toString(),\n-\t\t\t\tConstants.NOT_A_BUNDLE_S);\n-\t\t}\n+\t\tString name = archive.getWithoutVersion();\n+\t\tMavenVersion version = archive.revision.version;\n+\t\tBridgeRepository.addInformationCapability(rb, name, version.getOSGiVersion(), repo.toString(),", "originalCommit": "c99135272d60f9c846cc2e80479c95ab485af632", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0OTA3Mw==", "url": "https://github.com/bndtools/bnd/pull/4067#discussion_r426749073", "bodyText": "I did!", "author": "rotty3000", "createdAt": "2020-05-18T16:25:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5NDY2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5e890d0c7c2a7ced4272a8e085a7a4bb3bef674d", "chunk": "diff --git a/biz.aQute.repository/src/aQute/bnd/repository/maven/provider/IndexFile.java b/biz.aQute.repository/src/aQute/bnd/repository/maven/provider/IndexFile.java\nindex b7fcc8a50..978e27353 100644\n--- a/biz.aQute.repository/src/aQute/bnd/repository/maven/provider/IndexFile.java\n+++ b/biz.aQute.repository/src/aQute/bnd/repository/maven/provider/IndexFile.java\n\n@@ -324,11 +324,15 @@ class IndexFile {\n \tprivate Map<Archive, Resource> parseSingle(Archive archive, File single) throws Exception {\n \t\tResourceBuilder rb = new ResourceBuilder();\n \t\tboolean hasIdentity = rb.addFile(single, single.toURI());\n-\t\tString name = archive.getWithoutVersion();\n-\t\tMavenVersion version = archive.revision.version;\n-\t\tBridgeRepository.addInformationCapability(rb, name, version.getOSGiVersion(), repo.toString(),\n-\t\t\t!hasIdentity ? Constants.NOT_A_BUNDLE_S : null,\n-\t\t\tarchive.revision.group, archive.revision.artifact, version.toString(), archive.extension, archive.classifier);\n+\t\tMap<String, Object> attributes = new LinkedHashMap<>();\n+\t\tattributes.put(\"error\", !hasIdentity ? Constants.NOT_A_BUNDLE_S : \"\");\n+\t\tattributes.put(\"from\", repo.toString());\n+\t\tattributes.put(\"version\", archive.revision.version.getOSGiVersion());\n+\t\tattributes.put(\"maven-groupId\", archive.revision.group);\n+\t\tattributes.put(\"maven-artifactId\", archive.revision.artifact);\n+\t\tattributes.put(\"maven-version\", archive.revision.version);\n+\t\tattributes.put(\"maven-classifier\", archive.classifier);\n+\t\tBridgeRepository.addInformationCapability(rb, archive.getWithoutVersion(), attributes);\n \t\tResource resource = rb.build();\n \t\treturn Collections.singletonMap(archive, resource);\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5NTc0OQ==", "url": "https://github.com/bndtools/bnd/pull/4067#discussion_r426595749", "bodyText": "Is this really the formatting properties to use for POMs?", "author": "bjhargrave", "createdAt": "2020-05-18T12:41:35Z", "path": "bndtools.core/src/bndtools/central/Central.java", "diffHunk": "@@ -253,6 +258,14 @@ public static Workspace getWorkspace() throws Exception {\n \t\t\t\t\tws.addBasicPlugin(getEclipseWorkspaceRepository());\n \t\t\t\t\tws.addBasicPlugin(new JobProgress());\n \n+\t\t\t\t\tString tabulationChar = prefsService.getString(\"org.eclipse.jdt.core.prefs\",\n+\t\t\t\t\t\t\"org.eclipse.jdt.core.formatter.tabulation.char\", \"tab\", null);", "originalCommit": "c99135272d60f9c846cc2e80479c95ab485af632", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3OTE4MA==", "url": "https://github.com/bndtools/bnd/pull/4067#discussion_r426879180", "bodyText": "fixed", "author": "rotty3000", "createdAt": "2020-05-18T20:35:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5NTc0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "88453e7ec64bd53cbdfe286bea8bf276e121af25", "chunk": "diff --git a/bndtools.core/src/bndtools/central/Central.java b/bndtools.core/src/bndtools/central/Central.java\nindex 0a3495adb..15fee24cf 100644\n--- a/bndtools.core/src/bndtools/central/Central.java\n+++ b/bndtools.core/src/bndtools/central/Central.java\n\n@@ -258,13 +258,18 @@ public class Central implements IStartupParticipant {\n \t\t\t\t\tws.addBasicPlugin(getEclipseWorkspaceRepository());\n \t\t\t\t\tws.addBasicPlugin(new JobProgress());\n \n-\t\t\t\t\tString tabulationChar = prefsService.getString(\"org.eclipse.jdt.core.prefs\",\n-\t\t\t\t\t\t\"org.eclipse.jdt.core.formatter.tabulation.char\", \"tab\", null);\n-\t\t\t\t\tws.setProperty(\"formatter.tabulation.char\", tabulationChar);\n-\n-\t\t\t\t\tint tabulationSize = prefsService.getInt(\"org.eclipse.jdt.core.prefs\",\n-\t\t\t\t\t\t\"org.eclipse.jdt.core.formatter.tabulation.size\", 4, null);\n-\t\t\t\t\tws.setProperty(\"formatter.tabulation.size\", String.valueOf(tabulationSize));\n+\t\t\t\t\tws.setProperty(\"text.tabulation.tabs\", String.valueOf(\n+\t\t\t\t\t\t!prefsService.getBoolean(\"org.eclipse.ui.editors.prefs\", \"spacesForTabs\", false, null)));\n+\t\t\t\t\tws.setProperty(\"text.tabulation.size\",\n+\t\t\t\t\t\tprefsService.getString(\"org.eclipse.ui.editors.prefs\", \"tabWidth\", \"4\", null));\n+\n+\t\t\t\t\tws.setProperty(\n+\t\t\t\t\t\t\"xml.tabulation.tabs\",\n+\t\t\t\t\t\tString.valueOf(\n+\t\t\t\t\t\t\tprefsService.getString(\"org.eclipse.wst.xml.core.prefs\", \"indentationChar\", \"tab\", null)\n+\t\t\t\t\t\t\t\t.equals(\"tab\")));\n+\t\t\t\t\tws.setProperty(\"xml.tabulation.size\",\n+\t\t\t\t\t\tprefsService.getString(\"org.eclipse.wst.xml.core.prefs\", \"indentationSize\", \"4\", null));\n \n \t\t\t\t\t// Initialize projects in synchronized block\n \t\t\t\t\tws.getBuildOrder();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5NjM1MA==", "url": "https://github.com/bndtools/bnd/pull/4067#discussion_r426596350", "bodyText": "You don't need to say .entrySet(), MapStream.of also takes a map.", "author": "bjhargrave", "createdAt": "2020-05-18T12:42:38Z", "path": "bndtools.m2e/src/bndtools/m2e/MavenDependenciesRepository.java", "diffHunk": "@@ -43,9 +49,21 @@ public String getName() {\n \t\t}\n \n \t\ttry {\n-\t\t\tMavenBndrunContainer mavenBndrunContainer = MavenBndrunContainer.getBndrunContainer(projectFacade, null, true,\n-\t\t\t\ttrue, allScopes, monitor);\n-\t\t\tmavenBndrunContainer.resolve()\n+\t\t\tMavenBndrunContainer mavenBndrunContainer = MavenBndrunContainer.getBndrunContainer(projectFacade, null,\n+\t\t\t\ttrue, true, allScopes, monitor);\n+\t\t\tMapStream.of(mavenBndrunContainer.resolve()\n+\t\t\t\t.entrySet())", "originalCommit": "c99135272d60f9c846cc2e80479c95ab485af632", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3OTIzNg==", "url": "https://github.com/bndtools/bnd/pull/4067#discussion_r426879236", "bodyText": "fixed", "author": "rotty3000", "createdAt": "2020-05-18T20:35:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5NjM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "88453e7ec64bd53cbdfe286bea8bf276e121af25", "chunk": "diff --git a/bndtools.m2e/src/bndtools/m2e/MavenDependenciesRepository.java b/bndtools.m2e/src/bndtools/m2e/MavenDependenciesRepository.java\nindex 919c6ba67..289d8fd02 100644\n--- a/bndtools.m2e/src/bndtools/m2e/MavenDependenciesRepository.java\n+++ b/bndtools.m2e/src/bndtools/m2e/MavenDependenciesRepository.java\n\n@@ -51,48 +51,44 @@ public class MavenDependenciesRepository extends MavenWorkspaceRepository {\n \t\ttry {\n \t\t\tMavenBndrunContainer mavenBndrunContainer = MavenBndrunContainer.getBndrunContainer(projectFacade, null,\n \t\t\t\ttrue, true, allScopes, monitor);\n-\t\t\tMapStream.of(mavenBndrunContainer.resolve()\n-\t\t\t\t.entrySet())\n-\t\t\t\t.mapToObj((f, a) -> new MavenFile(f, a.getArtifact()\n-\t\t\t\t\t.getGroupId(),\n-\t\t\t\t\ta.getArtifact()\n-\t\t\t\t\t\t.getArtifactId(),\n-\t\t\t\t\ta.getArtifact()\n-\t\t\t\t\t\t.getVersion(),\n-\t\t\t\t\t\"jar\", a\n-\t\t\t\t\t\t.getArtifact()\n-\t\t\t\t\t\t.getClassifier(),\n-\t\t\t\t\tgetFrom(\n-\t\t\t\t\t\ta)))\n+\n+\t\t\tmavenBndrunContainer.resolve()\n+\t\t\t\t.values()\n+\t\t\t\t.stream()\n+\t\t\t\t.map(\n+\t\t\t\t\tthis::fromArtifactResult)\n \t\t\t\t.forEach(files::add);\n \n-\t\t\tlogger.debug(\"{}: Collected files {} for project {}\", getName(), files, projectFacade.getProject());\n+\t\t\tlogger.debug(\"{}: Collected artifacts {} for project {}\", getName(), files, projectFacade.getProject());\n \t\t} catch (Exception e) {\n-\t\t\tlogger.error(\"{}: Failed to collect files for project {}\", getName(), projectFacade.getProject(), e);\n+\t\t\tlogger.error(\"{}: Failed to collect artifacts for project {}\", getName(), projectFacade.getProject(), e);\n \t\t}\n \n \t\treturn files;\n \t}\n \n-\tprivate String getFrom(ArtifactResult a) {\n-\t\tArtifactRepository repository = a.getRepository();\n+\tprivate Artifact fromArtifactResult(ArtifactResult ar) {\n+\t\tArtifactRepository repository = ar.getRepository();\n+\t\tString from = \"\";\n \n \t\tif (repository instanceof LocalRepository) {\n \t\t\tLocalRepository localRepository = (LocalRepository) repository;\n \n-\t\t\treturn localRepository.getBasedir()\n+\t\t\tfrom = localRepository\n+\t\t\t\t.getBasedir()\n \t\t\t\t.getAbsolutePath();\n \t\t} else if (repository instanceof RemoteRepository) {\n \t\t\tRemoteRepository remoteRepository = (RemoteRepository) repository;\n \n-\t\t\treturn remoteRepository.getUrl();\n+\t\t\tfrom = remoteRepository.getUrl();\n \t\t} else if (repository instanceof WorkspaceRepository) {\n \t\t\tWorkspaceRepository workspaceRepository = (WorkspaceRepository) repository;\n \n-\t\t\treturn workspaceRepository.getId();\n+\t\t\tfrom = workspaceRepository.getId();\n \t\t}\n \n-\t\treturn \"\";\n+\t\treturn ar.getArtifact()\n+\t\t\t.setProperties(Collections.singletonMap(\"from\", from));\n \t}\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5NzEyNQ==", "url": "https://github.com/bndtools/bnd/pull/4067#discussion_r426597125", "bodyText": "I would not extend File. That is super risky. I am sure it is not meant to be subclassed.", "author": "bjhargrave", "createdAt": "2020-05-18T12:43:58Z", "path": "bndtools.m2e/src/bndtools/m2e/MavenFile.java", "diffHunk": "@@ -0,0 +1,299 @@\n+package bndtools.m2e;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.io.File;\n+import java.io.FileFilter;\n+import java.io.FilenameFilter;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.nio.file.Path;\n+\n+@SuppressWarnings(\"serial\")\n+class MavenFile extends File {", "originalCommit": "c99135272d60f9c846cc2e80479c95ab485af632", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3OTI4Mg==", "url": "https://github.com/bndtools/bnd/pull/4067#discussion_r426879282", "bodyText": "fixed", "author": "rotty3000", "createdAt": "2020-05-18T20:36:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5NzEyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "88453e7ec64bd53cbdfe286bea8bf276e121af25", "chunk": "diff --git a/bndtools.m2e/src/bndtools/m2e/MavenFile.java b/bndtools.m2e/src/bndtools/m2e/MavenFile.java\ndeleted file mode 100644\nindex 0138a67f8..000000000\n--- a/bndtools.m2e/src/bndtools/m2e/MavenFile.java\n+++ /dev/null\n\n@@ -1,299 +0,0 @@\n-package bndtools.m2e;\n-\n-import static java.util.Objects.requireNonNull;\n-\n-import java.io.File;\n-import java.io.FileFilter;\n-import java.io.FilenameFilter;\n-import java.io.IOException;\n-import java.net.MalformedURLException;\n-import java.net.URI;\n-import java.nio.file.Path;\n-\n-@SuppressWarnings(\"serial\")\n-class MavenFile extends File {\n-\n-\tprivate final File delegate;\n-\tprivate final String\tgroupId;\n-\tprivate final String\tartifactId;\n-\tprivate final String\tversion;\n-\tprivate final String\tclassifier;\n-\tprivate final String\textension;\n-\tprivate final String\tfrom;\n-\n-\tpublic MavenFile(File delegate, String groupId, String artifactId, String version, String extension,\n-\t\tString classifier, String from) {\n-\t\tsuper(delegate.getAbsolutePath());\n-\t\tthis.delegate = delegate;\n-\t\tthis.groupId = requireNonNull(groupId);\n-\t\tthis.artifactId = requireNonNull(artifactId);\n-\t\tthis.version = requireNonNull(version);\n-\t\tthis.extension = requireNonNull(extension);\n-\t\tthis.classifier = requireNonNull(classifier);\n-\t\tthis.from = requireNonNull(from);\n-\t}\n-\n-\tpublic String getArtifactId() {\n-\t\treturn artifactId;\n-\t}\n-\n-\tpublic String getClassifier() {\n-\t\treturn classifier;\n-\t}\n-\n-\tpublic String getExtension() {\n-\t\treturn extension;\n-\t}\n-\n-\tpublic String getFrom() {\n-\t\treturn from;\n-\t}\n-\n-\tpublic String getGroupId() {\n-\t\treturn groupId;\n-\t}\n-\n-\tpublic String getVersion() {\n-\t\treturn version;\n-\t}\n-\n-\t@Override\n-\tpublic String getName() {\n-\t\treturn delegate.getName();\n-\t}\n-\n-\t@Override\n-\tpublic String getParent() {\n-\t\treturn delegate.getParent();\n-\t}\n-\n-\t@Override\n-\tpublic File getParentFile() {\n-\t\treturn delegate.getParentFile();\n-\t}\n-\n-\t@Override\n-\tpublic String getPath() {\n-\t\treturn delegate.getPath();\n-\t}\n-\n-\t@Override\n-\tpublic boolean isAbsolute() {\n-\t\treturn delegate.isAbsolute();\n-\t}\n-\n-\t@Override\n-\tpublic String getAbsolutePath() {\n-\t\treturn delegate.getAbsolutePath();\n-\t}\n-\n-\t@Override\n-\tpublic File getAbsoluteFile() {\n-\t\treturn delegate.getAbsoluteFile();\n-\t}\n-\n-\t@Override\n-\tpublic String getCanonicalPath() throws IOException {\n-\t\treturn delegate.getCanonicalPath();\n-\t}\n-\n-\t@Override\n-\tpublic File getCanonicalFile() throws IOException {\n-\t\treturn delegate.getCanonicalFile();\n-\t}\n-\n-\t/**\n-\t * @deprecated\n-\t */\n-\t@Deprecated\n-\t@Override\n-\tpublic java.net.URL toURL() throws MalformedURLException {\n-\t\treturn delegate.toURL();\n-\t}\n-\n-\t@Override\n-\tpublic URI toURI() {\n-\t\treturn delegate.toURI();\n-\t}\n-\n-\t@Override\n-\tpublic boolean canRead() {\n-\t\treturn delegate.canRead();\n-\t}\n-\n-\t@Override\n-\tpublic boolean canWrite() {\n-\t\treturn delegate.canWrite();\n-\t}\n-\n-\t@Override\n-\tpublic boolean exists() {\n-\t\treturn delegate.exists();\n-\t}\n-\n-\t@Override\n-\tpublic boolean isDirectory() {\n-\t\treturn delegate.isDirectory();\n-\t}\n-\n-\t@Override\n-\tpublic boolean isFile() {\n-\t\treturn delegate.isFile();\n-\t}\n-\n-\t@Override\n-\tpublic boolean isHidden() {\n-\t\treturn delegate.isHidden();\n-\t}\n-\n-\t@Override\n-\tpublic long lastModified() {\n-\t\treturn delegate.lastModified();\n-\t}\n-\n-\t@Override\n-\tpublic long length() {\n-\t\treturn delegate.length();\n-\t}\n-\n-\t@Override\n-\tpublic boolean createNewFile() throws IOException {\n-\t\treturn delegate.createNewFile();\n-\t}\n-\n-\t@Override\n-\tpublic boolean delete() {\n-\t\treturn delegate.delete();\n-\t}\n-\n-\t@Override\n-\tpublic void deleteOnExit() {\n-\t\tdelegate.deleteOnExit();\n-\t}\n-\n-\t@Override\n-\tpublic String[] list() {\n-\t\treturn delegate.list();\n-\t}\n-\n-\t@Override\n-\tpublic String[] list(FilenameFilter filter) {\n-\t\treturn delegate.list(filter);\n-\t}\n-\n-\t@Override\n-\tpublic File[] listFiles() {\n-\t\treturn delegate.listFiles();\n-\t}\n-\n-\t@Override\n-\tpublic File[] listFiles(FilenameFilter filter) {\n-\t\treturn delegate.listFiles(filter);\n-\t}\n-\n-\t@Override\n-\tpublic File[] listFiles(FileFilter filter) {\n-\t\treturn delegate.listFiles(filter);\n-\t}\n-\n-\t@Override\n-\tpublic boolean mkdir() {\n-\t\treturn delegate.mkdir();\n-\t}\n-\n-\t@Override\n-\tpublic boolean mkdirs() {\n-\t\treturn delegate.mkdirs();\n-\t}\n-\n-\t@Override\n-\tpublic boolean renameTo(File dest) {\n-\t\treturn delegate.renameTo(dest);\n-\t}\n-\n-\t@Override\n-\tpublic boolean setLastModified(long time) {\n-\t\treturn delegate.setLastModified(time);\n-\t}\n-\n-\t@Override\n-\tpublic boolean setReadOnly() {\n-\t\treturn delegate.setReadOnly();\n-\t}\n-\n-\t@Override\n-\tpublic boolean setWritable(boolean writable, boolean ownerOnly) {\n-\t\treturn delegate.setWritable(writable, ownerOnly);\n-\t}\n-\n-\t@Override\n-\tpublic boolean setWritable(boolean writable) {\n-\t\treturn delegate.setWritable(writable);\n-\t}\n-\n-\t@Override\n-\tpublic boolean setReadable(boolean readable, boolean ownerOnly) {\n-\t\treturn delegate.setReadable(readable, ownerOnly);\n-\t}\n-\n-\t@Override\n-\tpublic boolean setReadable(boolean readable) {\n-\t\treturn delegate.setReadable(readable);\n-\t}\n-\n-\t@Override\n-\tpublic boolean setExecutable(boolean executable, boolean ownerOnly) {\n-\t\treturn delegate.setExecutable(executable, ownerOnly);\n-\t}\n-\n-\t@Override\n-\tpublic boolean setExecutable(boolean executable) {\n-\t\treturn delegate.setExecutable(executable);\n-\t}\n-\n-\t@Override\n-\tpublic boolean canExecute() {\n-\t\treturn delegate.canExecute();\n-\t}\n-\n-\t@Override\n-\tpublic long getTotalSpace() {\n-\t\treturn delegate.getTotalSpace();\n-\t}\n-\n-\t@Override\n-\tpublic long getFreeSpace() {\n-\t\treturn delegate.getFreeSpace();\n-\t}\n-\n-\t@Override\n-\tpublic long getUsableSpace() {\n-\t\treturn delegate.getUsableSpace();\n-\t}\n-\n-\t@Override\n-\tpublic int compareTo(File pathname) {\n-\t\treturn delegate.compareTo(pathname);\n-\t}\n-\n-\t@Override\n-\tpublic boolean equals(Object obj) {\n-\t\treturn delegate.equals(obj);\n-\t}\n-\n-\t@Override\n-\tpublic int hashCode() {\n-\t\treturn delegate.hashCode();\n-\t}\n-\n-\t@Override\n-\tpublic String toString() {\n-\t\treturn delegate.toString();\n-\t}\n-\n-\t@Override\n-\tpublic Path toPath() {\n-\t\treturn delegate.toPath();\n-\t}\n-\n-}\n"}}, {"oid": "88453e7ec64bd53cbdfe286bea8bf276e121af25", "url": "https://github.com/bndtools/bnd/commit/88453e7ec64bd53cbdfe286bea8bf276e121af25", "message": "copy GAVs repository actions\n\nSigned-off-by: Raymond Aug\u00e9 <raymond.auge@liferay.com>", "committedDate": "2020-05-18T20:31:59Z", "type": "forcePushed"}, {"oid": "4d646409769fc1e897cb209f1ceeca9db1ca4902", "url": "https://github.com/bndtools/bnd/commit/4d646409769fc1e897cb209f1ceeca9db1ca4902", "message": "copy GAVs repository actions\n\nSigned-off-by: Raymond Aug\u00e9 <raymond.auge@liferay.com>", "committedDate": "2020-05-18T20:39:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4MzQzOA==", "url": "https://github.com/bndtools/bnd/pull/4067#discussion_r426883438", "bodyText": "In the work I did to get the maven coordinate info into Container, I defined all the maven attr names to start with maven-:\n\n  \n    \n      bnd/biz.aQute.repository/src/aQute/maven/api/Program.java\n    \n    \n        Lines 165 to 166\n      in\n      7a5b449\n    \n    \n    \n    \n\n        \n          \n           attrs.put(\"maven-groupId\", group); \n        \n\n        \n          \n           attrs.put(\"maven-artifactId\", artifact); \n        \n    \n  \n\n\n\n  \n    \n      bnd/biz.aQute.repository/src/aQute/maven/api/Revision.java\n    \n    \n         Line 131\n      in\n      7a5b449\n    \n    \n    \n    \n\n        \n          \n           attrs.put(\"maven-version\", version.toString()); \n        \n    \n  \n\n\n\n  \n    \n      bnd/biz.aQute.repository/src/aQute/maven/api/Archive.java\n    \n    \n        Lines 248 to 249\n      in\n      7a5b449\n    \n    \n    \n    \n\n        \n          \n           attrs.put(\"maven-classifier\", classifier); \n        \n\n        \n          \n           attrs.put(\"maven-extension\", extension); \n        \n    \n  \n\n\nI think we should use the same attr names here. Then is very clear where the names come from.", "author": "bjhargrave", "createdAt": "2020-05-18T20:44:41Z", "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/repository/BridgeRepository.java", "diffHunk": "@@ -327,6 +369,16 @@ public static void addInformationCapability(ResourceBuilder rb, String name, Ver\n \t\t\t\tc.addAttribute(\"error\", error);\n \t\t\tif (version != null)\n \t\t\t\tc.addAttribute(\"version\", version);\n+\t\t\tif (groupId != null)\n+\t\t\t\tc.addAttribute(\"groupId\", groupId);", "originalCommit": "4d646409769fc1e897cb209f1ceeca9db1ca4902", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwMzE2OQ==", "url": "https://github.com/bndtools/bnd/pull/4067#discussion_r427003169", "bodyText": "Will this work via the proxy? Note that InfoCapability is created as a proxy, are you sure there is a mangling for those property names?", "author": "rotty3000", "createdAt": "2020-05-19T03:04:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4MzQzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1MDI4NA==", "url": "https://github.com/bndtools/bnd/pull/4067#discussion_r427250284", "bodyText": "Why not? You are adding attributes to a builder. You can do\nc.addAttributes(map);`", "author": "bjhargrave", "createdAt": "2020-05-19T12:07:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4MzQzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI5MzkwMw==", "url": "https://github.com/bndtools/bnd/pull/4067#discussion_r427293903", "bodyText": "it's not the map usage I'm concerned with, but your recommendation to use maven-* naming. Will our proxy handle those? I guess we could fix that too I suppose...", "author": "rotty3000", "createdAt": "2020-05-19T13:17:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4MzQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "5e890d0c7c2a7ced4272a8e085a7a4bb3bef674d", "chunk": "diff --git a/biz.aQute.bndlib/src/aQute/bnd/osgi/repository/BridgeRepository.java b/biz.aQute.bndlib/src/aQute/bnd/osgi/repository/BridgeRepository.java\nindex a8db90517..1b2379b34 100644\n--- a/biz.aQute.bndlib/src/aQute/bnd/osgi/repository/BridgeRepository.java\n+++ b/biz.aQute.bndlib/src/aQute/bnd/osgi/repository/BridgeRepository.java\n\n@@ -354,31 +354,27 @@ public class BridgeRepository {\n \tpublic static void addInformationCapability(ResourceBuilder rb, String name, Version version, String from,\n \t\tString error) {\n \n-\t\taddInformationCapability(rb, name, version, from, error, null, null, null, null, null);\n+\t\tMap<String, Object> attributes = new LinkedHashMap<>();\n+\n+\t\tif (error != null) {\n+\t\t\tattributes.put(\"error\", error);\n+\t\t}\n+\t\tif (from != null) {\n+\t\t\tattributes.put(\"from\", from);\n+\t\t}\n+\t\tif (version != null) {\n+\t\t\tattributes.put(\"version\", version);\n+\t\t}\n+\n+\t\taddInformationCapability(rb, name, attributes);\n \t}\n \n-\tpublic static void addInformationCapability(ResourceBuilder rb, String name, Version version, String from,\n-\t\tString error, String groupId, String artifactId, String mavenVersion, String extension, String classifier) {\n+\tpublic static void addInformationCapability(ResourceBuilder rb, String name, Map<? extends String, ? extends Object> attributes) {\n \n \t\ttry {\n \t\t\tCapabilityBuilder c = new CapabilityBuilder(BND_INFO);\n \t\t\tc.addAttribute(\"name\", name);\n-\t\t\tif (from != null)\n-\t\t\t\tc.addAttribute(\"from\", from);\n-\t\t\tif (error != null)\n-\t\t\t\tc.addAttribute(\"error\", error);\n-\t\t\tif (version != null)\n-\t\t\t\tc.addAttribute(\"version\", version);\n-\t\t\tif (groupId != null)\n-\t\t\t\tc.addAttribute(\"groupId\", groupId);\n-\t\t\tif (artifactId != null)\n-\t\t\t\tc.addAttribute(\"artifactId\", artifactId);\n-\t\t\tif (mavenVersion != null)\n-\t\t\t\tc.addAttribute(\"mavenVersion\", mavenVersion);\n-\t\t\tif (extension != null)\n-\t\t\t\tc.addAttribute(\"extension\", extension);\n-\t\t\tif (classifier != null)\n-\t\t\t\tc.addAttribute(\"classifier\", classifier);\n+\t\t\tc.addAttributes(attributes);\n \n \t\t\trb.addCapability(c);\n \t\t} catch (Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4NTM3Ng==", "url": "https://github.com/bndtools/bnd/pull/4067#discussion_r426885376", "bodyText": "Instead of adding all these parameters for maven info, consider a map and passing archive.attributes()\n\n  \n    \n      bnd/biz.aQute.repository/src/aQute/maven/api/Archive.java\n    \n    \n         Line 246\n      in\n      7a5b449\n    \n    \n    \n    \n\n        \n          \n           public Map<String, String> attributes() { \n        \n    \n  \n\n\nThen you can just add the map to the cap attributes.", "author": "bjhargrave", "createdAt": "2020-05-18T20:48:51Z", "path": "biz.aQute.bndlib/src/aQute/bnd/osgi/repository/BridgeRepository.java", "diffHunk": "@@ -318,6 +354,12 @@ public static void addInformationCapability(ResourceBuilder rb, String name, Str\n \tpublic static void addInformationCapability(ResourceBuilder rb, String name, Version version, String from,\n \t\tString error) {\n \n+\t\taddInformationCapability(rb, name, version, from, error, null, null, null, null, null);\n+\t}\n+\n+\tpublic static void addInformationCapability(ResourceBuilder rb, String name, Version version, String from,\n+\t\tString error, String groupId, String artifactId, String mavenVersion, String extension, String classifier) {", "originalCommit": "4d646409769fc1e897cb209f1ceeca9db1ca4902", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAwMzI1Ng==", "url": "https://github.com/bndtools/bnd/pull/4067#discussion_r427003256", "bodyText": "same question as above.", "author": "rotty3000", "createdAt": "2020-05-19T03:04:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4NTM3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5e890d0c7c2a7ced4272a8e085a7a4bb3bef674d", "chunk": "diff --git a/biz.aQute.bndlib/src/aQute/bnd/osgi/repository/BridgeRepository.java b/biz.aQute.bndlib/src/aQute/bnd/osgi/repository/BridgeRepository.java\nindex a8db90517..1b2379b34 100644\n--- a/biz.aQute.bndlib/src/aQute/bnd/osgi/repository/BridgeRepository.java\n+++ b/biz.aQute.bndlib/src/aQute/bnd/osgi/repository/BridgeRepository.java\n\n@@ -354,31 +354,27 @@ public class BridgeRepository {\n \tpublic static void addInformationCapability(ResourceBuilder rb, String name, Version version, String from,\n \t\tString error) {\n \n-\t\taddInformationCapability(rb, name, version, from, error, null, null, null, null, null);\n+\t\tMap<String, Object> attributes = new LinkedHashMap<>();\n+\n+\t\tif (error != null) {\n+\t\t\tattributes.put(\"error\", error);\n+\t\t}\n+\t\tif (from != null) {\n+\t\t\tattributes.put(\"from\", from);\n+\t\t}\n+\t\tif (version != null) {\n+\t\t\tattributes.put(\"version\", version);\n+\t\t}\n+\n+\t\taddInformationCapability(rb, name, attributes);\n \t}\n \n-\tpublic static void addInformationCapability(ResourceBuilder rb, String name, Version version, String from,\n-\t\tString error, String groupId, String artifactId, String mavenVersion, String extension, String classifier) {\n+\tpublic static void addInformationCapability(ResourceBuilder rb, String name, Map<? extends String, ? extends Object> attributes) {\n \n \t\ttry {\n \t\t\tCapabilityBuilder c = new CapabilityBuilder(BND_INFO);\n \t\t\tc.addAttribute(\"name\", name);\n-\t\t\tif (from != null)\n-\t\t\t\tc.addAttribute(\"from\", from);\n-\t\t\tif (error != null)\n-\t\t\t\tc.addAttribute(\"error\", error);\n-\t\t\tif (version != null)\n-\t\t\t\tc.addAttribute(\"version\", version);\n-\t\t\tif (groupId != null)\n-\t\t\t\tc.addAttribute(\"groupId\", groupId);\n-\t\t\tif (artifactId != null)\n-\t\t\t\tc.addAttribute(\"artifactId\", artifactId);\n-\t\t\tif (mavenVersion != null)\n-\t\t\t\tc.addAttribute(\"mavenVersion\", mavenVersion);\n-\t\t\tif (extension != null)\n-\t\t\t\tc.addAttribute(\"extension\", extension);\n-\t\t\tif (classifier != null)\n-\t\t\t\tc.addAttribute(\"classifier\", classifier);\n+\t\t\tc.addAttributes(attributes);\n \n \t\t\trb.addCapability(c);\n \t\t} catch (Exception e) {\n"}}, {"oid": "5e890d0c7c2a7ced4272a8e085a7a4bb3bef674d", "url": "https://github.com/bndtools/bnd/commit/5e890d0c7c2a7ced4272a8e085a7a4bb3bef674d", "message": "copy GAVs\n\nSigned-off-by: Raymond Aug\u00e9 <raymond.auge@liferay.com>", "committedDate": "2020-05-19T18:34:23Z", "type": "forcePushed"}, {"oid": "e3bf7cd701f6af6d31602c48c9c3b5201374d8cb", "url": "https://github.com/bndtools/bnd/commit/e3bf7cd701f6af6d31602c48c9c3b5201374d8cb", "message": "copy GAVs\n\nSigned-off-by: Raymond Aug\u00e9 <raymond.auge@liferay.com>", "committedDate": "2020-05-19T18:36:14Z", "type": "forcePushed"}, {"oid": "a26b4796fd42d002c908fa215918235f85863f8f", "url": "https://github.com/bndtools/bnd/commit/a26b4796fd42d002c908fa215918235f85863f8f", "message": "copy GAVs\n\nSigned-off-by: Raymond Aug\u00e9 <raymond.auge@liferay.com>", "committedDate": "2020-05-25T18:56:47Z", "type": "forcePushed"}, {"oid": "1c60947fc8ef56659aa9d1054b0e8c428611b3a1", "url": "https://github.com/bndtools/bnd/commit/1c60947fc8ef56659aa9d1054b0e8c428611b3a1", "message": "index maven metadata in repositories that support it\n\nSigned-off-by: Raymond Aug\u00e9 <raymond.auge@liferay.com>", "committedDate": "2020-05-27T15:33:12Z", "type": "commit"}, {"oid": "b32f1386617d0a1606a393538a300b1ae106f824", "url": "https://github.com/bndtools/bnd/commit/b32f1386617d0a1606a393538a300b1ae106f824", "message": "context sensitive drag and drop GAVs onto existing editors; bnd, bndrun, gradle, maven\n\nalternate syntax are available by pressing the <alt> keep before drag starts\n\nSigned-off-by: Raymond Aug\u00e9 <raymond.auge@liferay.com>", "committedDate": "2020-05-27T15:33:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1MTMyNQ==", "url": "https://github.com/bndtools/bnd/pull/4067#discussion_r431351325", "bodyText": "Perhaps we should modify the BndEditor so that you don't have to do this.  The BndEditor could override the getAdapter method and return the styledText where someone queries for Control.class", "author": "gamerson", "createdAt": "2020-05-27T18:21:13Z", "path": "bndtools.core/src/bndtools/dnd/gav/GAVIPageListener.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package bndtools.dnd.gav;\n+\n+import static org.eclipse.swt.dnd.DND.DROP_COPY;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IAdaptable;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.swt.custom.StyledText;\n+import org.eclipse.swt.dnd.TextTransfer;\n+import org.eclipse.swt.dnd.Transfer;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.ui.IEditorInput;\n+import org.eclipse.ui.IFileEditorInput;\n+import org.eclipse.ui.IPartListener;\n+import org.eclipse.ui.IStorageEditorInput;\n+import org.eclipse.ui.IWorkbenchPart;\n+import org.eclipse.ui.dnd.IDragAndDropService;\n+import org.eclipse.ui.part.EditorPart;\n+\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.editor.BndEditor;\n+\n+public class GAVIPageListener implements IPartListener {\n+\n+\tprivate final Transfer[] transfers = new Transfer[] {\n+\t\tTextTransfer.getInstance()\n+\t};\n+\n+\t@Override\n+\tpublic void partOpened(IWorkbenchPart part) {\n+\t\tIDragAndDropService dndService = part.getSite()\n+\t\t\t.getService(IDragAndDropService.class);\n+\n+\t\tif (dndService == null) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (part instanceof BndEditor) {\n+\t\t\tpart = ((BndEditor) part).getSourcePage();", "originalCommit": "b32f1386617d0a1606a393538a300b1ae106f824", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ1NTM3NA==", "url": "https://github.com/bndtools/bnd/pull/4067#discussion_r431455374", "bodyText": "fixed!", "author": "rotty3000", "createdAt": "2020-05-27T21:33:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1MTMyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "503bb8545687ca7ad581a2003b62724cfb8c5f97", "chunk": "diff --git a/bndtools.core/src/bndtools/dnd/gav/GAVIPageListener.java b/bndtools.core/src/bndtools/dnd/gav/GAVIPageListener.java\nindex fbc5c3818..c2d91699f 100644\n--- a/bndtools.core/src/bndtools/dnd/gav/GAVIPageListener.java\n+++ b/bndtools.core/src/bndtools/dnd/gav/GAVIPageListener.java\n\n@@ -3,7 +3,6 @@ package bndtools.dnd.gav;\n import static org.eclipse.swt.dnd.DND.DROP_COPY;\n \n import org.eclipse.core.runtime.CoreException;\n-import org.eclipse.core.runtime.IAdaptable;\n import org.eclipse.core.runtime.IPath;\n import org.eclipse.swt.custom.StyledText;\n import org.eclipse.swt.dnd.TextTransfer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1MTgyOA==", "url": "https://github.com/bndtools/bnd/pull/4067#discussion_r431351828", "bodyText": "BndEditor would need to add getAdapter support for Control.class for this to properly unmerge the dropTarget.", "author": "gamerson", "createdAt": "2020-05-27T18:22:08Z", "path": "bndtools.core/src/bndtools/dnd/gav/GAVIPageListener.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package bndtools.dnd.gav;\n+\n+import static org.eclipse.swt.dnd.DND.DROP_COPY;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IAdaptable;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.swt.custom.StyledText;\n+import org.eclipse.swt.dnd.TextTransfer;\n+import org.eclipse.swt.dnd.Transfer;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.ui.IEditorInput;\n+import org.eclipse.ui.IFileEditorInput;\n+import org.eclipse.ui.IPartListener;\n+import org.eclipse.ui.IStorageEditorInput;\n+import org.eclipse.ui.IWorkbenchPart;\n+import org.eclipse.ui.dnd.IDragAndDropService;\n+import org.eclipse.ui.part.EditorPart;\n+\n+import aQute.lib.exceptions.Exceptions;\n+import bndtools.editor.BndEditor;\n+\n+public class GAVIPageListener implements IPartListener {\n+\n+\tprivate final Transfer[] transfers = new Transfer[] {\n+\t\tTextTransfer.getInstance()\n+\t};\n+\n+\t@Override\n+\tpublic void partOpened(IWorkbenchPart part) {\n+\t\tIDragAndDropService dndService = part.getSite()\n+\t\t\t.getService(IDragAndDropService.class);\n+\n+\t\tif (dndService == null) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (part instanceof BndEditor) {\n+\t\t\tpart = ((BndEditor) part).getSourcePage();\n+\t\t}\n+\n+\t\tControl control = part.getAdapter(Control.class);\n+\n+\t\tif ((control == null) || !(control instanceof StyledText)) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tIPath file = null;\n+\n+\t\tif (part instanceof EditorPart) {\n+\t\t\tEditorPart editorPart = (EditorPart) part;\n+\n+\t\t\tIEditorInput editorInput = editorPart.getEditorInput();\n+\n+\t\t\tif (editorInput instanceof IFileEditorInput) {\n+\t\t\t\tIFileEditorInput input = (IFileEditorInput) editorInput;\n+\n+\t\t\t\tfile = input.getFile()\n+\t\t\t\t\t.getFullPath();\n+\t\t\t} else if (editorInput instanceof IStorageEditorInput) {\n+\t\t\t\tIStorageEditorInput input = (IStorageEditorInput) editorInput;\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tfile = input.getStorage()\n+\t\t\t\t\t\t.getFullPath();\n+\t\t\t\t} catch (CoreException e) {\n+\t\t\t\t\tthrow Exceptions.duck(e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (file != null) {\n+\t\t\tString fileName = file.lastSegment();\n+\t\t\tString fileExtension = file.getFileExtension();\n+\n+\t\t\tif (\"pom.xml\".equals(fileName)) {\n+\t\t\t\tdndService.addMergedDropTarget(control, DROP_COPY, transfers,\n+\t\t\t\t\tnew MavenDropTargetListener((StyledText) control));\n+\t\t\t} else if (\"gradle\".equalsIgnoreCase(fileExtension)) {\n+\t\t\t\tdndService.addMergedDropTarget(control, DROP_COPY, transfers,\n+\t\t\t\t\tnew GradleDropTargetListener((StyledText) control));\n+\t\t\t} else if (\"bnd\".equalsIgnoreCase(fileExtension) || \"bndrun\".equalsIgnoreCase(fileExtension)) {\n+\t\t\t\tdndService.addMergedDropTarget(control, DROP_COPY, transfers,\n+\t\t\t\t\tnew BndDropTargetListener((StyledText) control));\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void partClosed(IWorkbenchPart part) {\n+\t\tIDragAndDropService dndService = part.getSite()\n+\t\t\t.getService(IDragAndDropService.class);\n+\n+\t\tIAdaptable adapter = part;\n+\n+\t\tControl control = adapter.getAdapter(Control.class);", "originalCommit": "b32f1386617d0a1606a393538a300b1ae106f824", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ1NTQyNQ==", "url": "https://github.com/bndtools/bnd/pull/4067#discussion_r431455425", "bodyText": "fixed!", "author": "rotty3000", "createdAt": "2020-05-27T21:33:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1MTgyOA=="}], "type": "inlineReview", "revised_code": {"commit": "503bb8545687ca7ad581a2003b62724cfb8c5f97", "chunk": "diff --git a/bndtools.core/src/bndtools/dnd/gav/GAVIPageListener.java b/bndtools.core/src/bndtools/dnd/gav/GAVIPageListener.java\nindex fbc5c3818..c2d91699f 100644\n--- a/bndtools.core/src/bndtools/dnd/gav/GAVIPageListener.java\n+++ b/bndtools.core/src/bndtools/dnd/gav/GAVIPageListener.java\n\n@@ -3,7 +3,6 @@ package bndtools.dnd.gav;\n import static org.eclipse.swt.dnd.DND.DROP_COPY;\n \n import org.eclipse.core.runtime.CoreException;\n-import org.eclipse.core.runtime.IAdaptable;\n import org.eclipse.core.runtime.IPath;\n import org.eclipse.swt.custom.StyledText;\n import org.eclipse.swt.dnd.TextTransfer;\n"}}, {"oid": "503bb8545687ca7ad581a2003b62724cfb8c5f97", "url": "https://github.com/bndtools/bnd/commit/503bb8545687ca7ad581a2003b62724cfb8c5f97", "message": "context sensitive drag and drop GAVs onto existing editors; bnd, bndrun, gradle, maven\n\nalternate syntax are available by pressing the <alt> keep before drag starts\n\nSigned-off-by: Raymond Aug\u00e9 <raymond.auge@liferay.com>", "committedDate": "2020-05-27T21:03:58Z", "type": "forcePushed"}, {"oid": "3639102d2d50c4479a9725c158abd0f0f1b4de86", "url": "https://github.com/bndtools/bnd/commit/3639102d2d50c4479a9725c158abd0f0f1b4de86", "message": "context sensitive drag and drop GAVs onto existing editors; bnd, bndrun, gradle, maven\n\nalternate syntax are available by pressing the <alt> keep before drag starts\n\nSigned-off-by: Raymond Aug\u00e9 <raymond.auge@liferay.com>", "committedDate": "2020-05-27T22:31:19Z", "type": "forcePushed"}, {"oid": "3efbbc86612e8bcf495e1fb0c41c7d5c386e07b3", "url": "https://github.com/bndtools/bnd/commit/3efbbc86612e8bcf495e1fb0c41c7d5c386e07b3", "message": "context sensitive drag and drop GAVs onto existing editors; bnd, bndrun, gradle, maven\n\nalternate syntax are available by pressing the <alt> keep before drag starts\n\nSigned-off-by: Raymond Aug\u00e9 <raymond.auge@liferay.com>", "committedDate": "2020-05-27T22:34:55Z", "type": "commit"}, {"oid": "3efbbc86612e8bcf495e1fb0c41c7d5c386e07b3", "url": "https://github.com/bndtools/bnd/commit/3efbbc86612e8bcf495e1fb0c41c7d5c386e07b3", "message": "context sensitive drag and drop GAVs onto existing editors; bnd, bndrun, gradle, maven\n\nalternate syntax are available by pressing the <alt> keep before drag starts\n\nSigned-off-by: Raymond Aug\u00e9 <raymond.auge@liferay.com>", "committedDate": "2020-05-27T22:34:55Z", "type": "forcePushed"}]}