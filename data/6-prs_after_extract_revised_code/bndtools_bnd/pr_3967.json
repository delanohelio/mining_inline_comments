{"pr_number": 3967, "pr_title": "[junit-platform] Handle singleton unresolveds", "pr_createdAt": "2020-04-24T07:21:26Z", "pr_url": "https://github.com/bndtools/bnd/pull/3967", "timeline": [{"oid": "21cbcea86e75c6ddf2f9f26169995c3e16ed2382", "url": "https://github.com/bndtools/bnd/commit/21cbcea86e75c6ddf2f9f26169995c3e16ed2382", "message": "[junit-platform] Handle singleton unresolveds\n\nFixes #3966\n\nSigned-off-by: Fr Jeremy Krieg <fr.jkrieg@greekwelfaresa.org.au>", "committedDate": "2020-04-24T08:03:33Z", "type": "forcePushed"}, {"oid": "65cb4e3b1bae42b34fecb3a0705b0d9f4480b13d", "url": "https://github.com/bndtools/bnd/commit/65cb4e3b1bae42b34fecb3a0705b0d9f4480b13d", "message": "[junit-platform] Handle singleton unresolveds\n\nFixes #3966\n\nSigned-off-by: Fr Jeremy Krieg <fr.jkrieg@greekwelfaresa.org.au>", "committedDate": "2020-04-24T08:27:52Z", "type": "commit"}, {"oid": "65cb4e3b1bae42b34fecb3a0705b0d9f4480b13d", "url": "https://github.com/bndtools/bnd/commit/65cb4e3b1bae42b34fecb3a0705b0d9f4480b13d", "message": "[junit-platform] Handle singleton unresolveds\n\nFixes #3966\n\nSigned-off-by: Fr Jeremy Krieg <fr.jkrieg@greekwelfaresa.org.au>", "committedDate": "2020-04-24T08:27:52Z", "type": "forcePushed"}, {"oid": "95d5cc5895153b950e4257bf0551af97cde7529e", "url": "https://github.com/bndtools/bnd/commit/95d5cc5895153b950e4257bf0551af97cde7529e", "message": "[junit-platform] Fully resolve test classes before handing off\n\nPartially fixes #3882.\n\nSigned-off-by: Fr Jeremy Krieg <fr.jkrieg@greekwelfaresa.org.au>", "committedDate": "2020-04-24T09:17:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ5OTY0OA==", "url": "https://github.com/bndtools/bnd/pull/3967#discussion_r414499648", "bodyText": "Putting NoClassDefFoundError here can hide our own stupidity in other parts of this code :-( Perhaps we should narrow the window for catching NoClassDefFoundError to only the calls to testClass.getDeclaredMethods() and\ttestClass.getDeclaredFields() since I think that is the only source for which we need to worry about it?", "author": "bjhargrave", "createdAt": "2020-04-24T11:22:49Z", "path": "biz.aQute.tester.junit-platform/src/aQute/tester/bundle/engine/discovery/BundleSelectorResolver.java", "diffHunk": "@@ -389,7 +395,8 @@ private void markClassesResolved(Bundle bundle) {\n \t\t\t\t\t\t}\n \t\t\t\t\t\treturn selectMethod(testClass, DiscoverySelectors.selectMethod(testcase));\n \t\t\t\t\t}\n-\t\t\t\t} catch (ClassNotFoundException cnfe) {\n+\t\t\t\t} catch (ClassNotFoundException | NoClassDefFoundError cnfe) {", "originalCommit": "95d5cc5895153b950e4257bf0551af97cde7529e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU2NTg5Mg==", "url": "https://github.com/bndtools/bnd/pull/3967#discussion_r414565892", "bodyText": "Fair point. Note that loadClass() can throw NoClassDefFoundError too if the superclass doesn't resolve; see here:\n\n  \n    \n      bnd/biz.aQute.tester.test/test/aQute/tester/bundle/engine/test/BundleEngineTest.java\n    \n    \n        Lines 1227 to 1244\n      in\n      5693958\n    \n    \n    \n    \n\n        \n          \n           @Test \n        \n\n        \n          \n           @Tag(CUSTOM_LAUNCH) \n        \n\n        \n          \n           public void testClass_withUnsatisifiedSuperclass_raisesAnError() { \n        \n\n        \n          \n           \tbuilder.excludeExport(\"aQute.tester.test.params\"); \n        \n\n        \n          \n           \tstartLaunchpad(); \n        \n\n        \n          \n           \tBundle test = buildTestBundle(JUnit5ParameterizedSubclassTest.class, TestClass.class) \n        \n\n        \n          \n           \t\t.importPackage(\"aQute.tester.test.params;resolution:=optional\") \n        \n\n        \n          \n           \t\t.start(); \n        \n\n        \n          \n            \n        \n\n        \n          \n           \tengineInFramework().execute() \n        \n\n        \n          \n           \t\t.all() \n        \n\n        \n          \n           \t\t.debug(debugStr) \n        \n\n        \n          \n           \t\t.assertThatEvents() \n        \n\n        \n          \n           \t\t.haveExactly(1, \n        \n\n        \n          \n           \t\t\tevent(uniqueIdSubstring(test.getSymbolicName()), testClass(JUnit5ParameterizedSubclassTest.class), \n        \n\n        \n          \n           \t\t\t\tfinishedWithFailure(instanceOf(NoClassDefFoundError.class), \n        \n\n        \n          \n           \t\t\t\t\tmessage(x -> x.matches(\"^(?si).*\" + JUnit5ParameterizedTest.class.getName()))))); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nSo I have included the loadClass() in the scope of the catch for NoClassDefFoundError too.", "author": "kriegfrj", "createdAt": "2020-04-24T13:14:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ5OTY0OA=="}], "type": "inlineReview", "revised_code": {"commit": "5693958978d52d83cf847a649af841cede89cc00", "chunk": "diff --git a/biz.aQute.tester.junit-platform/src/aQute/tester/bundle/engine/discovery/BundleSelectorResolver.java b/biz.aQute.tester.junit-platform/src/aQute/tester/bundle/engine/discovery/BundleSelectorResolver.java\nindex e01ec1f92..6afe712eb 100644\n--- a/biz.aQute.tester.junit-platform/src/aQute/tester/bundle/engine/discovery/BundleSelectorResolver.java\n+++ b/biz.aQute.tester.junit-platform/src/aQute/tester/bundle/engine/discovery/BundleSelectorResolver.java\n\n@@ -379,27 +398,14 @@ public class BundleSelectorResolver {\n \t\t\t.map(testcase -> {\n \t\t\t\tint index = testcase.indexOf('#');\n \t\t\t\tString className = (index < 0) ? testcase : testcase.substring(0, index);\n-\t\t\t\ttry {\n-\t\t\t\t\tClass<?> testClass = host.loadClass(className);\n-\t\t\t\t\t// The following is necessary to attempt to resolve the\n-\t\t\t\t\t// method parameters and force NoClassDefFoundError if they\n-\t\t\t\t\t// can't be resolved; see\n-\t\t\t\t\t// https://github.com/bndtools/bnd/issues/3882\n-\t\t\t\t\ttestClass.getDeclaredMethods();\n-\t\t\t\t\ttestClass.getDeclaredFields();\n-\t\t\t\t\tif (!resolvedClasses.contains(testClass)) {\n-\t\t\t\t\t\tcheckForMixedJUnit34(bd, testClass);\n-\t\t\t\t\t\tif (index < 0) {\n-\t\t\t\t\t\t\tresolvedClasses.add(testClass);\n-\t\t\t\t\t\t\treturn selectClass(testClass);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\treturn selectMethod(testClass, DiscoverySelectors.selectMethod(testcase));\n+\t\t\t\tClass<?> testClass = tryToResolveTestClass(host, className, bd);\n+\t\t\t\tif (testClass != null && !resolvedClasses.contains(testClass)) {\n+\t\t\t\t\tcheckForMixedJUnit34(bd, testClass);\n+\t\t\t\t\tif (index < 0) {\n+\t\t\t\t\t\tresolvedClasses.add(testClass);\n+\t\t\t\t\t\treturn selectClass(testClass);\n \t\t\t\t\t}\n-\t\t\t\t} catch (ClassNotFoundException | NoClassDefFoundError cnfe) {\n-\t\t\t\t\tinfo(() -> \"error: \" + cnfe);\n-\t\t\t\t\tStaticFailureDescriptor unresolvedClassDescriptor = new StaticFailureDescriptor(bd.getUniqueId()\n-\t\t\t\t\t\t.append(\"test\", testcase), testcase, cnfe);\n-\t\t\t\t\tbd.addChild(unresolvedClassDescriptor);\n+\t\t\t\t\treturn selectMethod(testClass, DiscoverySelectors.selectMethod(testcase));\n \t\t\t\t}\n \t\t\t\treturn null;\n \t\t\t})\n"}}, {"oid": "5693958978d52d83cf847a649af841cede89cc00", "url": "https://github.com/bndtools/bnd/commit/5693958978d52d83cf847a649af841cede89cc00", "message": "[junit-platform] Fully resolve test classes before handing off\n\nPartially fixes #3882.\n\nSigned-off-by: Fr Jeremy Krieg <fr.jkrieg@greekwelfaresa.org.au>", "committedDate": "2020-04-24T13:07:44Z", "type": "commit"}, {"oid": "5693958978d52d83cf847a649af841cede89cc00", "url": "https://github.com/bndtools/bnd/commit/5693958978d52d83cf847a649af841cede89cc00", "message": "[junit-platform] Fully resolve test classes before handing off\n\nPartially fixes #3882.\n\nSigned-off-by: Fr Jeremy Krieg <fr.jkrieg@greekwelfaresa.org.au>", "committedDate": "2020-04-24T13:07:44Z", "type": "forcePushed"}]}