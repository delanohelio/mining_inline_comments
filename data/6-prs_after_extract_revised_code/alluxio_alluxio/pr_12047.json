{"pr_number": 12047, "pr_title": "Add Azure Data Lake Gen 1 support for UFS", "pr_createdAt": "2020-08-28T19:09:36Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/12047", "timeline": [{"oid": "4961b3ca66597e47a2adb4f4e29c83b34f59d2a5", "url": "https://github.com/Alluxio/alluxio/commit/4961b3ca66597e47a2adb4f4e29c83b34f59d2a5", "message": "Azure datalake gen1 support", "committedDate": "2020-08-28T02:15:22Z", "type": "commit"}, {"oid": "1289e049f4f06e7b498af192c2e3901d6b85c986", "url": "https://github.com/Alluxio/alluxio/commit/1289e049f4f06e7b498af192c2e3901d6b85c986", "message": "Add file permission override", "committedDate": "2020-08-28T02:22:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5MDA1NA==", "url": "https://github.com/Alluxio/alluxio/pull/12047#discussion_r481390054", "bodyText": "plz remove commented lines if this is not meant to be used", "author": "apc999", "createdAt": "2020-09-01T19:46:15Z", "path": "underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.adl;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.conf.PropertyKey;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.hdfs.HdfsUnderFileSystem;\n+import alluxio.underfs.options.FileLocationOptions;\n+\n+import com.google.common.base.MoreObjects;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * An {@link UnderFileSystem} uses the Microsoft Azure Blob Storage.\n+ */\n+@ThreadSafe\n+public class AdlUnderFileSystem extends HdfsUnderFileSystem {\n+  private static final Logger LOG = LoggerFactory.getLogger(AdlUnderFileSystem.class);\n+\n+  /** Constant for the adl URI scheme. */\n+  public static final String SCHEME_INSECURE = \"adl://\";\n+\n+  /** Constant for the adls URI scheme. */\n+  public static final String SCHEME_SECURE = \"adls://\";\n+\n+  /**\n+   * Prepares the configuration for this Adl as an HDFS configuration.\n+   *\n+   * @param conf the configuration for this UFS\n+   * @return the created configuration\n+   */\n+  //// @TODO: modify this\n+  public static Configuration createConfiguration(UnderFileSystemConfiguration conf) {\n+    Configuration adlConf = HdfsUnderFileSystem.createConfiguration(conf);\n+    for (Map.Entry<String, String> entry : conf.toMap().entrySet()) {\n+      String key = entry.getKey();\n+      String value = entry.getValue();\n+      if (PropertyKey.Template.UNDERFS_AZURE_CLIENT_ID.matches(key)) {\n+        adlConf.set(key, value);\n+      }\n+      if (PropertyKey.Template.UNDERFS_AZURE_CLIENT_SECRET.matches(key)) {\n+        adlConf.set(key, value);\n+      }\n+      if (PropertyKey.Template.UNDERFS_AZURE_REFRESH_URL.matches(key)) {\n+        adlConf.set(key, value);\n+      }\n+    }\n+    adlConf.set(\"fs.adl.oauth2.access.token.provider.type\", \"ClientCredential\");\n+//    adlConf.set(\"fs.adl.account.ruizhbigcacheadlsgen1.oauth2.access.token.provider.type\", \"ClientCredential\");", "originalCommit": "1289e049f4f06e7b498af192c2e3901d6b85c986", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYxMDAwNQ==", "url": "https://github.com/Alluxio/alluxio/pull/12047#discussion_r482610005", "bodyText": "fixed", "author": "bastrik", "createdAt": "2020-09-03T00:08:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5MDA1NA=="}], "type": "inlineReview", "revised_code": {"commit": "bf5517551b0f111c0e7c6e7fcb6a1540bb4d7c94", "chunk": "diff --git a/underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java b/underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java\nindex 11b908064f..234acc4c00 100755\n--- a/underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java\n+++ b/underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java\n\n@@ -22,10 +22,6 @@ import alluxio.underfs.options.FileLocationOptions;\n \n import com.google.common.base.MoreObjects;\n import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.fs.FileStatus;\n-import org.apache.hadoop.fs.FileSystem;\n-import org.apache.hadoop.fs.Path;\n-import org.apache.hadoop.fs.permission.FsPermission;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5MDQ1Mw==", "url": "https://github.com/Alluxio/alluxio/pull/12047#discussion_r481390453", "bodyText": "4-space indentation for wrapped lines.\nsee https://docs.alluxio.io/os/user/stable/en/contributor/Code-Conventions.html#javadoc-style", "author": "apc999", "createdAt": "2020-09-01T19:47:02Z", "path": "underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystemFactory.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.adl;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.UnderFileSystemFactory;\n+\n+import com.google.common.base.Preconditions;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Factory for creating {@link AdlUnderFileSystem}.\n+ */\n+@ThreadSafe\n+public class AdlUnderFileSystemFactory implements UnderFileSystemFactory {\n+\n+  /**\n+   * Constructs a new {@link AdlUnderFileSystemFactory}.\n+   */\n+  public AdlUnderFileSystemFactory() {}\n+\n+  @Override\n+  public UnderFileSystem create(String path, UnderFileSystemConfiguration conf) {\n+    Preconditions.checkArgument(path != null, \"path may not be null\");\n+    return AdlUnderFileSystem.createInstance(new AlluxioURI(path), conf);\n+  }\n+\n+  @Override\n+  public boolean supportsPath(String path) {\n+    return path != null\n+            && (path.startsWith(AdlUnderFileSystem.SCHEME_SECURE)", "originalCommit": "1289e049f4f06e7b498af192c2e3901d6b85c986", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYxMDA5OQ==", "url": "https://github.com/Alluxio/alluxio/pull/12047#discussion_r482610099", "bodyText": "fixed", "author": "bastrik", "createdAt": "2020-09-03T00:08:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5MDQ1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "bf5517551b0f111c0e7c6e7fcb6a1540bb4d7c94", "chunk": "diff --git a/underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystemFactory.java b/underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystemFactory.java\nindex 7911cb383a..e2bd806137 100755\n--- a/underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystemFactory.java\n+++ b/underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystemFactory.java\n\n@@ -40,7 +40,7 @@ public class AdlUnderFileSystemFactory implements UnderFileSystemFactory {\n   @Override\n   public boolean supportsPath(String path) {\n     return path != null\n-            && (path.startsWith(AdlUnderFileSystem.SCHEME_SECURE)\n-            || path.startsWith(AdlUnderFileSystem.SCHEME_INSECURE));\n+      && (path.startsWith(AdlUnderFileSystem.SCHEME_SECURE)\n+      || path.startsWith(AdlUnderFileSystem.SCHEME_INSECURE));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5MDk1OQ==", "url": "https://github.com/Alluxio/alluxio/pull/12047#discussion_r481390959", "bodyText": "indentation", "author": "apc999", "createdAt": "2020-09-01T19:47:59Z", "path": "underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.adl;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.conf.PropertyKey;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.hdfs.HdfsUnderFileSystem;\n+import alluxio.underfs.options.FileLocationOptions;\n+\n+import com.google.common.base.MoreObjects;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * An {@link UnderFileSystem} uses the Microsoft Azure Blob Storage.\n+ */\n+@ThreadSafe\n+public class AdlUnderFileSystem extends HdfsUnderFileSystem {\n+  private static final Logger LOG = LoggerFactory.getLogger(AdlUnderFileSystem.class);\n+\n+  /** Constant for the adl URI scheme. */\n+  public static final String SCHEME_INSECURE = \"adl://\";\n+\n+  /** Constant for the adls URI scheme. */\n+  public static final String SCHEME_SECURE = \"adls://\";\n+\n+  /**\n+   * Prepares the configuration for this Adl as an HDFS configuration.\n+   *\n+   * @param conf the configuration for this UFS\n+   * @return the created configuration\n+   */\n+  //// @TODO: modify this\n+  public static Configuration createConfiguration(UnderFileSystemConfiguration conf) {\n+    Configuration adlConf = HdfsUnderFileSystem.createConfiguration(conf);\n+    for (Map.Entry<String, String> entry : conf.toMap().entrySet()) {\n+      String key = entry.getKey();\n+      String value = entry.getValue();\n+      if (PropertyKey.Template.UNDERFS_AZURE_CLIENT_ID.matches(key)) {\n+        adlConf.set(key, value);\n+      }\n+      if (PropertyKey.Template.UNDERFS_AZURE_CLIENT_SECRET.matches(key)) {\n+        adlConf.set(key, value);\n+      }\n+      if (PropertyKey.Template.UNDERFS_AZURE_REFRESH_URL.matches(key)) {\n+        adlConf.set(key, value);\n+      }\n+    }\n+    adlConf.set(\"fs.adl.oauth2.access.token.provider.type\", \"ClientCredential\");\n+//    adlConf.set(\"fs.adl.account.ruizhbigcacheadlsgen1.oauth2.access.token.provider.type\", \"ClientCredential\");\n+    return adlConf;\n+  }\n+\n+  /**\n+   * Factory method to construct a new Adl {@link UnderFileSystem}.\n+   *\n+   * @param uri the {@link AlluxioURI} for this UFS\n+   * @param conf the configuration for this UFS\n+   * @return a new Adl {@link UnderFileSystem} instance\n+   */\n+  public static AdlUnderFileSystem createInstance(AlluxioURI uri,\n+                                                  UnderFileSystemConfiguration conf) {\n+    Configuration adlConf = createConfiguration(conf);\n+    return new AdlUnderFileSystem(uri, conf, adlConf);\n+  }\n+\n+  /**\n+   * Constructs a new Adl {@link UnderFileSystem}.\n+   *\n+   * @param ufsUri the {@link AlluxioURI} for this UFS\n+   * @param conf the configuration for this UFS\n+   * @param adlConf the configuration for this Adl UFS\n+   */\n+  public AdlUnderFileSystem(AlluxioURI ufsUri, UnderFileSystemConfiguration conf,\n+                            final Configuration adlConf) {\n+    super(ufsUri, conf, adlConf);\n+  }\n+\n+  @Override\n+  public String getUnderFSType() {\n+    return \"adl\";\n+  }\n+\n+  @Override\n+  public long getBlockSizeByte(String path) throws IOException {\n+    // adl is an object store, so use the default block size, like other object stores.\n+    return mUfsConf.getBytes(PropertyKey.USER_BLOCK_SIZE_BYTES_DEFAULT);\n+  }\n+\n+  @Override\n+  public UfsStatus getStatus(String path) throws IOException {\n+    UfsStatus status = super.getStatus(path);\n+    if (status instanceof UfsFileStatus) {\n+      // adl is backed by an object store but always claims its block size to be 512MB.\n+      // reset the block size in UfsFileStatus according to getBlockSizeByte\n+      return new UfsFileStatus(path,\n+              ((UfsFileStatus) status).getContentHash(),", "originalCommit": "1289e049f4f06e7b498af192c2e3901d6b85c986", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYxMDA0OQ==", "url": "https://github.com/Alluxio/alluxio/pull/12047#discussion_r482610049", "bodyText": "fixed", "author": "bastrik", "createdAt": "2020-09-03T00:08:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5MDk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "bf5517551b0f111c0e7c6e7fcb6a1540bb4d7c94", "chunk": "diff --git a/underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java b/underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java\nindex 11b908064f..234acc4c00 100755\n--- a/underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java\n+++ b/underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java\n\n@@ -22,10 +22,6 @@ import alluxio.underfs.options.FileLocationOptions;\n \n import com.google.common.base.MoreObjects;\n import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.fs.FileStatus;\n-import org.apache.hadoop.fs.FileSystem;\n-import org.apache.hadoop.fs.Path;\n-import org.apache.hadoop.fs.permission.FsPermission;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5MTA5NA==", "url": "https://github.com/Alluxio/alluxio/pull/12047#discussion_r481391094", "bodyText": "indentation, https://docs.alluxio.io/os/user/stable/en/contributor/Code-Conventions.html#javadoc-style", "author": "apc999", "createdAt": "2020-09-01T19:48:14Z", "path": "underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.adl;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.conf.PropertyKey;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.hdfs.HdfsUnderFileSystem;\n+import alluxio.underfs.options.FileLocationOptions;\n+\n+import com.google.common.base.MoreObjects;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * An {@link UnderFileSystem} uses the Microsoft Azure Blob Storage.\n+ */\n+@ThreadSafe\n+public class AdlUnderFileSystem extends HdfsUnderFileSystem {\n+  private static final Logger LOG = LoggerFactory.getLogger(AdlUnderFileSystem.class);\n+\n+  /** Constant for the adl URI scheme. */\n+  public static final String SCHEME_INSECURE = \"adl://\";\n+\n+  /** Constant for the adls URI scheme. */\n+  public static final String SCHEME_SECURE = \"adls://\";\n+\n+  /**\n+   * Prepares the configuration for this Adl as an HDFS configuration.\n+   *\n+   * @param conf the configuration for this UFS\n+   * @return the created configuration\n+   */\n+  //// @TODO: modify this\n+  public static Configuration createConfiguration(UnderFileSystemConfiguration conf) {\n+    Configuration adlConf = HdfsUnderFileSystem.createConfiguration(conf);\n+    for (Map.Entry<String, String> entry : conf.toMap().entrySet()) {\n+      String key = entry.getKey();\n+      String value = entry.getValue();\n+      if (PropertyKey.Template.UNDERFS_AZURE_CLIENT_ID.matches(key)) {\n+        adlConf.set(key, value);\n+      }\n+      if (PropertyKey.Template.UNDERFS_AZURE_CLIENT_SECRET.matches(key)) {\n+        adlConf.set(key, value);\n+      }\n+      if (PropertyKey.Template.UNDERFS_AZURE_REFRESH_URL.matches(key)) {\n+        adlConf.set(key, value);\n+      }\n+    }\n+    adlConf.set(\"fs.adl.oauth2.access.token.provider.type\", \"ClientCredential\");\n+//    adlConf.set(\"fs.adl.account.ruizhbigcacheadlsgen1.oauth2.access.token.provider.type\", \"ClientCredential\");\n+    return adlConf;\n+  }\n+\n+  /**\n+   * Factory method to construct a new Adl {@link UnderFileSystem}.\n+   *\n+   * @param uri the {@link AlluxioURI} for this UFS\n+   * @param conf the configuration for this UFS\n+   * @return a new Adl {@link UnderFileSystem} instance\n+   */\n+  public static AdlUnderFileSystem createInstance(AlluxioURI uri,\n+                                                  UnderFileSystemConfiguration conf) {", "originalCommit": "1289e049f4f06e7b498af192c2e3901d6b85c986", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYxMDAyNA==", "url": "https://github.com/Alluxio/alluxio/pull/12047#discussion_r482610024", "bodyText": "fixed", "author": "bastrik", "createdAt": "2020-09-03T00:08:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5MTA5NA=="}], "type": "inlineReview", "revised_code": {"commit": "bf5517551b0f111c0e7c6e7fcb6a1540bb4d7c94", "chunk": "diff --git a/underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java b/underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java\nindex 11b908064f..234acc4c00 100755\n--- a/underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java\n+++ b/underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java\n\n@@ -22,10 +22,6 @@ import alluxio.underfs.options.FileLocationOptions;\n \n import com.google.common.base.MoreObjects;\n import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.fs.FileStatus;\n-import org.apache.hadoop.fs.FileSystem;\n-import org.apache.hadoop.fs.Path;\n-import org.apache.hadoop.fs.permission.FsPermission;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU1MTYyNg==", "url": "https://github.com/Alluxio/alluxio/pull/12047#discussion_r482551626", "bodyText": "is this comment stale?", "author": "madanadit", "createdAt": "2020-09-02T22:37:06Z", "path": "underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.adl;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.conf.PropertyKey;\n+import alluxio.underfs.UfsFileStatus;\n+import alluxio.underfs.UfsStatus;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.hdfs.HdfsUnderFileSystem;\n+import alluxio.underfs.options.FileLocationOptions;\n+\n+import com.google.common.base.MoreObjects;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.permission.FsPermission;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * An {@link UnderFileSystem} uses the Microsoft Azure Blob Storage.", "originalCommit": "1289e049f4f06e7b498af192c2e3901d6b85c986", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwOTkzNQ==", "url": "https://github.com/Alluxio/alluxio/pull/12047#discussion_r482609935", "bodyText": "fixed", "author": "bastrik", "createdAt": "2020-09-03T00:08:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU1MTYyNg=="}], "type": "inlineReview", "revised_code": {"commit": "bf5517551b0f111c0e7c6e7fcb6a1540bb4d7c94", "chunk": "diff --git a/underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java b/underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java\nindex 11b908064f..234acc4c00 100755\n--- a/underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java\n+++ b/underfs/adl/src/main/java/alluxio/underfs/adl/AdlUnderFileSystem.java\n\n@@ -22,10 +22,6 @@ import alluxio.underfs.options.FileLocationOptions;\n \n import com.google.common.base.MoreObjects;\n import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.fs.FileStatus;\n-import org.apache.hadoop.fs.FileSystem;\n-import org.apache.hadoop.fs.Path;\n-import org.apache.hadoop.fs.permission.FsPermission;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"oid": "bf5517551b0f111c0e7c6e7fcb6a1540bb4d7c94", "url": "https://github.com/Alluxio/alluxio/commit/bf5517551b0f111c0e7c6e7fcb6a1540bb4d7c94", "message": "fix style & comments", "committedDate": "2020-09-02T23:25:09Z", "type": "commit"}, {"oid": "f6df32dd33040b42b16b3ee47984fd6d0da1cfd6", "url": "https://github.com/Alluxio/alluxio/commit/f6df32dd33040b42b16b3ee47984fd6d0da1cfd6", "message": "Add markdown", "committedDate": "2020-09-08T18:36:40Z", "type": "commit"}, {"oid": "f6df32dd33040b42b16b3ee47984fd6d0da1cfd6", "url": "https://github.com/Alluxio/alluxio/commit/f6df32dd33040b42b16b3ee47984fd6d0da1cfd6", "message": "Add markdown", "committedDate": "2020-09-08T18:36:40Z", "type": "forcePushed"}]}