{"pr_number": 12649, "pr_title": "Add clearer ratis flush exception logging", "pr_createdAt": "2020-12-15T21:30:50Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/12649", "timeline": [{"oid": "2f4ea64c084ee3147592ed87119b380e4fd025e3", "url": "https://github.com/Alluxio/alluxio/commit/2f4ea64c084ee3147592ed87119b380e4fd025e3", "message": "Add rais logging", "committedDate": "2020-12-14T23:26:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4ODM1MQ==", "url": "https://github.com/Alluxio/alluxio/pull/12649#discussion_r543788351", "bodyText": "(nit) consider using SamplingLogger if the error happens too frequently.", "author": "bf8086", "createdAt": "2020-12-16T00:32:25Z", "path": "core/server/common/src/main/java/alluxio/master/journal/AsyncJournalWriter.java", "diffHunk": "@@ -308,6 +312,10 @@ private void doFlush() {\n           }\n         }\n       } catch (IOException | JournalClosedException exc) {\n+        // Add the error logging here since the actual flush error may be overwritten\n+        // by the future meaningless ratis.protocol.AlreadyClosedException\n+        // use debug level logging because the exception may be annoying in some cases\n+        LOG.debug(\"Failed to flush journal entry\", exc);", "originalCommit": "2f4ea64c084ee3147592ed87119b380e4fd025e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU5NDA2NQ==", "url": "https://github.com/Alluxio/alluxio/pull/12649#discussion_r544594065", "bodyText": "Good advice! I don't know we have that convenient logging way!", "author": "LuQQiu", "createdAt": "2020-12-16T20:16:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4ODM1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "628c223132014441ca93b64348bce77fd9b2a84f", "chunk": "diff --git a/core/server/common/src/main/java/alluxio/master/journal/AsyncJournalWriter.java b/core/server/common/src/main/java/alluxio/master/journal/AsyncJournalWriter.java\nindex e12deeec40..6b89cf8f5e 100644\n--- a/core/server/common/src/main/java/alluxio/master/journal/AsyncJournalWriter.java\n+++ b/core/server/common/src/main/java/alluxio/master/journal/AsyncJournalWriter.java\n\n@@ -314,8 +318,7 @@ public final class AsyncJournalWriter {\n       } catch (IOException | JournalClosedException exc) {\n         // Add the error logging here since the actual flush error may be overwritten\n         // by the future meaningless ratis.protocol.AlreadyClosedException\n-        // use debug level logging because the exception may be annoying in some cases\n-        LOG.debug(\"Failed to flush journal entry\", exc);\n+        SAMPLING_LOG.warn(\"Failed to flush journal entry\", exc);\n         Metrics.JOURNAL_FLUSH_FAILURE.inc();\n         // Release only tickets that have been flushed. Fail the rest.\n         Iterator<FlushTicket> ticketIterator = mTicketSet.iterator();\n"}}, {"oid": "628c223132014441ca93b64348bce77fd9b2a84f", "url": "https://github.com/Alluxio/alluxio/commit/628c223132014441ca93b64348bce77fd9b2a84f", "message": "Change to warn and SamplingLogger", "committedDate": "2020-12-16T20:15:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU5NjA2OQ==", "url": "https://github.com/Alluxio/alluxio/pull/12649#discussion_r544596069", "bodyText": "NIT: the sampling logger works by treating every log template as a separate error. I don't know if this will be useful, but if we use the template SAMPLING_LOG.warn(\"Failed to flush journal entry: \" + exc.getMessage(), exc); , we would get to see the warning log of each cause, once every 30s. This may help if there are potentially different causes of journal flush errors, and we would still not miss any cause.", "author": "gpang", "createdAt": "2020-12-16T20:19:23Z", "path": "core/server/common/src/main/java/alluxio/master/journal/AsyncJournalWriter.java", "diffHunk": "@@ -308,6 +316,9 @@ private void doFlush() {\n           }\n         }\n       } catch (IOException | JournalClosedException exc) {\n+        // Add the error logging here since the actual flush error may be overwritten\n+        // by the future meaningless ratis.protocol.AlreadyClosedException\n+        SAMPLING_LOG.warn(\"Failed to flush journal entry\", exc);", "originalCommit": "628c223132014441ca93b64348bce77fd9b2a84f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYzMTc3OQ==", "url": "https://github.com/Alluxio/alluxio/pull/12649#discussion_r544631779", "bodyText": "Good catch! in the previous way, the different error messages may still be ignored.", "author": "LuQQiu", "createdAt": "2020-12-16T21:21:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU5NjA2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a207f45ee01491e99e45f6c26054544127721168", "chunk": "diff --git a/core/server/common/src/main/java/alluxio/master/journal/AsyncJournalWriter.java b/core/server/common/src/main/java/alluxio/master/journal/AsyncJournalWriter.java\nindex 6b89cf8f5e..d2a9df25a7 100644\n--- a/core/server/common/src/main/java/alluxio/master/journal/AsyncJournalWriter.java\n+++ b/core/server/common/src/main/java/alluxio/master/journal/AsyncJournalWriter.java\n\n@@ -318,7 +318,7 @@ public final class AsyncJournalWriter {\n       } catch (IOException | JournalClosedException exc) {\n         // Add the error logging here since the actual flush error may be overwritten\n         // by the future meaningless ratis.protocol.AlreadyClosedException\n-        SAMPLING_LOG.warn(\"Failed to flush journal entry\", exc);\n+        SAMPLING_LOG.warn(\"Failed to flush journal entry: \" + exc.getMessage(), exc);\n         Metrics.JOURNAL_FLUSH_FAILURE.inc();\n         // Release only tickets that have been flushed. Fail the rest.\n         Iterator<FlushTicket> ticketIterator = mTicketSet.iterator();\n"}}, {"oid": "a207f45ee01491e99e45f6c26054544127721168", "url": "https://github.com/Alluxio/alluxio/commit/a207f45ee01491e99e45f6c26054544127721168", "message": "Make sure different raft logs get printed out", "committedDate": "2020-12-16T21:18:38Z", "type": "commit"}]}