{"pr_number": 11518, "pr_title": "Add profile agent reporting to ClientIOBench", "pr_createdAt": "2020-06-04T07:48:58Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11518", "timeline": [{"oid": "f38041128e3dc01fec76cb2dceec740aa64f06fb", "url": "https://github.com/Alluxio/alluxio/commit/f38041128e3dc01fec76cb2dceec740aa64f06fb", "message": "Resolve conflict", "committedDate": "2020-06-04T08:21:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3ODExNw==", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r435378117", "bodyText": "Since this is common, and may be common to more, can we just put this in BaseParameters?", "author": "gpang", "createdAt": "2020-06-04T16:09:20Z", "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOParameters.java", "diffHunk": "@@ -93,6 +93,11 @@\n           + \"file will be round-robin across these number of workers.\")\n   public int mWriteNumWorkers = 1;\n \n+  @Parameter(names = {\"--profile-agent\"},", "originalCommit": "8d51be0de699f23fdb4629efd747a0861b09c38a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "31a4484e85625eddd39d51235e14bd1eb42716f3", "chunk": "diff --git a/stress/common/src/main/java/alluxio/stress/client/ClientIOParameters.java b/stress/common/src/main/java/alluxio/stress/client/ClientIOParameters.java\nindex 19a639554a..c455ad31c6 100644\n--- a/stress/common/src/main/java/alluxio/stress/client/ClientIOParameters.java\n+++ b/stress/common/src/main/java/alluxio/stress/client/ClientIOParameters.java\n\n@@ -92,12 +94,10 @@ public final class ClientIOParameters extends Parameters {\n       description = \"The number of workers to distribute the files to. The blocks of a written \"\n           + \"file will be round-robin across these number of workers.\")\n   public int mWriteNumWorkers = 1;\n+  \n+  @DynamicParameter(names = \"--conf\",\n+      description = \"Any HDFS client configuration key=value. Can repeat to provide multiple \"\n+          + \"configuration values.\")\n \n-  @Parameter(names = {\"--profile-agent\"},\n-      description = \"The path to the profile agent if one is available. \"\n-          + \"Providing this will enable a more detailed output.\")\n-  public String mProfileAgent = \"\";\n-\n-  @DynamicParameter(names = \"--conf\", description = \"HDFS client configuration. Can be repeated.\")\n   public Map<String, String> mConf = new HashMap<>();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwMjM3NA==", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r435402374", "bodyText": "Can we add this response time graph before the time to first byte graph? You can just move this line up before the for loop, since it will add it to the list first.", "author": "gpang", "createdAt": "2020-06-04T16:47:38Z", "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "diffHunk": "@@ -202,8 +276,21 @@ public ClientIOTaskResult aggregate(Iterable<TaskResult> results) throws Excepti\n               String series = summary.mParameters.getDescription(fieldNames.getSecond());\n               responseTimeGraph.addDataSeries(series, summary.getThroughputData());\n               responseTimeGraph.setErrors(series, summary.collectErrors());\n-            }\n \n+              for (Map.Entry<String, SummaryStatistics> entry :\n+                  getStatisticsPerMethod().entrySet()) {\n+                final String method = entry.getKey();\n+                final LineGraph.Data timeToFirstByte = entry.getValue().computeTimeData();\n+\n+                if (method.equals(\"readChunk\")) {\n+                  LineGraph timeToFirstByteLineGraph =\n+                      new LineGraph(operation + \" - Time To First Byte (ms) \" + method, subTitle,\n+                          \"Percentile\", \"Time To First Byte (ms)\");\n+                  timeToFirstByteLineGraph.addDataSeries(series, timeToFirstByte);\n+                  graphs.add(timeToFirstByteLineGraph);\n+                }\n+              }\n+            }\n             graphs.add(responseTimeGraph);", "originalCommit": "8d51be0de699f23fdb4629efd747a0861b09c38a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0de66b98f45faf9031f848770ef9b27897f8d36", "chunk": "diff --git a/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java b/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\nindex 1f08020a1d..c5eb21c50d 100644\n--- a/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\n+++ b/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\n\n@@ -272,26 +263,21 @@ public final class ClientIOTaskResult implements TaskResult, Summary {\n                         Collections.singletonList(ClientIOParameters.FIELD_READ_RANDOM))),\n                 subTitle, \"# Threads\", \"Throughput (MB/s)\");\n \n+            LineGraph timeToFirstByteGraph = new LineGraph(String\n+                .format(\"%s - %s - Time To First Byte\", operation,\n+                    opSummaries.get(0).mParameters.getDescription(\n+                        Collections.singletonList(ClientIOParameters.FIELD_READ_RANDOM))),\n+                subTitle, \"# Threads\", \"Time To First Byte (Ms)\");\n+\n             for (ClientIOTaskResult summary : opSummaries) {\n               String series = summary.mParameters.getDescription(fieldNames.getSecond());\n               responseTimeGraph.addDataSeries(series, summary.getThroughputData());\n               responseTimeGraph.setErrors(series, summary.collectErrors());\n \n-              for (Map.Entry<String, SummaryStatistics> entry :\n-                  getStatisticsPerMethod().entrySet()) {\n-                final String method = entry.getKey();\n-                final LineGraph.Data timeToFirstByte = entry.getValue().computeTimeData();\n-\n-                if (method.equals(\"readChunk\")) {\n-                  LineGraph timeToFirstByteLineGraph =\n-                      new LineGraph(operation + \" - Time To First Byte (ms) \" + method, subTitle,\n-                          \"Percentile\", \"Time To First Byte (ms)\");\n-                  timeToFirstByteLineGraph.addDataSeries(series, timeToFirstByte);\n-                  graphs.add(timeToFirstByteLineGraph);\n-                }\n-              }\n+              summary.getTimeToFistByteData(series, timeToFirstByteGraph);\n             }\n             graphs.add(responseTimeGraph);\n+            graphs.add(timeToFirstByteGraph);\n           }\n         }\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNTQyNw==", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r435405427", "bodyText": "this may need to catch additional ones like: https://github.com/Alluxio/alluxio/blob/master/stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java#L243", "author": "gpang", "createdAt": "2020-06-04T16:52:34Z", "path": "stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java", "diffHunk": "@@ -164,9 +184,121 @@ public ClientIOTaskResult runLocal() throws Exception {\n     ClientIOTaskResult.ThreadCountResult result = context.getResult();\n     LOG.info(String.format(\"thread count: %d, errors: %d, IO throughput (MB/s): %f\", numThreads,\n         result.getErrors().size(), result.getIOMBps()));\n+\n     return result;\n   }\n \n+  /**\n+   * Read the log file from java agent log file.\n+   *\n+   * @param clientIOTaskResult client io task result\n+   * @return ClientIOTaskResult with java agent info\n+   * @throws IOException\n+   */\n+  @SuppressFBWarnings(value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public synchronized ClientIOTaskResult addAdditionalResult(ClientIOTaskResult clientIOTaskResult)\n+      throws IOException {\n+    Map<String, PartialResultStatistic> methodNameToHistogram = new HashMap<>();\n+\n+    try (final BufferedReader reader = new BufferedReader(new FileReader(AGENT_OUTPUT_PATH))) {\n+      String line;\n+\n+      final ObjectMapper objectMapper = new ObjectMapper();\n+      while ((line = reader.readLine()) != null) {\n+        final Map<String, Object> lineMap;\n+        try {\n+          lineMap = objectMapper.readValue(line, Map.class);\n+        } catch (JsonParseException e) {", "originalCommit": "8d51be0de699f23fdb4629efd747a0861b09c38a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0de66b98f45faf9031f848770ef9b27897f8d36", "chunk": "diff --git a/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java b/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java\nindex 63cef8396e..39d2f1f74c 100644\n--- a/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java\n+++ b/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java\n\n@@ -182,6 +181,7 @@ public class StressClientIOBench extends Benchmark<ClientIOTaskResult> {\n     service.awaitTermination(30, TimeUnit.SECONDS);\n \n     ClientIOTaskResult.ThreadCountResult result = context.getResult();\n+\n     LOG.info(String.format(\"thread count: %d, errors: %d, IO throughput (MB/s): %f\", numThreads,\n         result.getErrors().size(), result.getIOMBps()));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNTc5Mg==", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r435405792", "bodyText": "you may have to do do the special casting like here: https://github.com/Alluxio/alluxio/blob/master/stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java#L250", "author": "gpang", "createdAt": "2020-06-04T16:53:14Z", "path": "stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java", "diffHunk": "@@ -164,9 +184,121 @@ public ClientIOTaskResult runLocal() throws Exception {\n     ClientIOTaskResult.ThreadCountResult result = context.getResult();\n     LOG.info(String.format(\"thread count: %d, errors: %d, IO throughput (MB/s): %f\", numThreads,\n         result.getErrors().size(), result.getIOMBps()));\n+\n     return result;\n   }\n \n+  /**\n+   * Read the log file from java agent log file.\n+   *\n+   * @param clientIOTaskResult client io task result\n+   * @return ClientIOTaskResult with java agent info\n+   * @throws IOException\n+   */\n+  @SuppressFBWarnings(value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public synchronized ClientIOTaskResult addAdditionalResult(ClientIOTaskResult clientIOTaskResult)\n+      throws IOException {\n+    Map<String, PartialResultStatistic> methodNameToHistogram = new HashMap<>();\n+\n+    try (final BufferedReader reader = new BufferedReader(new FileReader(AGENT_OUTPUT_PATH))) {\n+      String line;\n+\n+      final ObjectMapper objectMapper = new ObjectMapper();\n+      while ((line = reader.readLine()) != null) {\n+        final Map<String, Object> lineMap;\n+        try {\n+          lineMap = objectMapper.readValue(line, Map.class);\n+        } catch (JsonParseException e) {\n+          // skip the last line of a not completed file\n+          break;\n+        }\n+\n+        final String type = (String) lineMap.get(\"type\");\n+        final String methodName = (String) lineMap.get(\"methodName\");\n+        final Integer duration = (Integer) lineMap.get(\"duration\");", "originalCommit": "8d51be0de699f23fdb4629efd747a0861b09c38a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0de66b98f45faf9031f848770ef9b27897f8d36", "chunk": "diff --git a/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java b/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java\nindex 63cef8396e..39d2f1f74c 100644\n--- a/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java\n+++ b/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java\n\n@@ -182,6 +181,7 @@ public class StressClientIOBench extends Benchmark<ClientIOTaskResult> {\n     service.awaitTermination(30, TimeUnit.SECONDS);\n \n     ClientIOTaskResult.ThreadCountResult result = context.getResult();\n+\n     LOG.info(String.format(\"thread count: %d, errors: %d, IO throughput (MB/s): %f\", numThreads,\n         result.getErrors().size(), result.getIOMBps()));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNzUxOA==", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r435407518", "bodyText": "This seems to share a lot with : https://github.com/Alluxio/alluxio/blob/master/stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java#L225\nCan we refactor this out to be shared?\n@bradyoo", "author": "gpang", "createdAt": "2020-06-04T16:55:57Z", "path": "stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java", "diffHunk": "@@ -164,9 +184,121 @@ public ClientIOTaskResult runLocal() throws Exception {\n     ClientIOTaskResult.ThreadCountResult result = context.getResult();\n     LOG.info(String.format(\"thread count: %d, errors: %d, IO throughput (MB/s): %f\", numThreads,\n         result.getErrors().size(), result.getIOMBps()));\n+\n     return result;\n   }\n \n+  /**\n+   * Read the log file from java agent log file.\n+   *\n+   * @param clientIOTaskResult client io task result\n+   * @return ClientIOTaskResult with java agent info\n+   * @throws IOException\n+   */\n+  @SuppressFBWarnings(value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public synchronized ClientIOTaskResult addAdditionalResult(ClientIOTaskResult clientIOTaskResult)", "originalCommit": "8d51be0de699f23fdb4629efd747a0861b09c38a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxMDE5Nw==", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r435410197", "bodyText": "I am not sure I can reuse the code since I added the filter to type and method  name in this method.", "author": "HelloHorizon", "createdAt": "2020-06-04T17:00:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNzUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUzMDk5MQ==", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r435530991", "bodyText": "You don't really need to have the filter here because you can filter later in the GraphGenerator in ClientIO.", "author": "bradyoo", "createdAt": "2020-06-04T20:30:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNzUxOA=="}], "type": "inlineReview", "revised_code": {"commit": "e0de66b98f45faf9031f848770ef9b27897f8d36", "chunk": "diff --git a/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java b/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java\nindex 63cef8396e..39d2f1f74c 100644\n--- a/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java\n+++ b/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java\n\n@@ -182,6 +181,7 @@ public class StressClientIOBench extends Benchmark<ClientIOTaskResult> {\n     service.awaitTermination(30, TimeUnit.SECONDS);\n \n     ClientIOTaskResult.ThreadCountResult result = context.getResult();\n+\n     LOG.info(String.format(\"thread count: %d, errors: %d, IO throughput (MB/s): %f\", numThreads,\n         result.getErrors().size(), result.getIOMBps()));\n \n"}}, {"oid": "e0de66b98f45faf9031f848770ef9b27897f8d36", "url": "https://github.com/Alluxio/alluxio/commit/e0de66b98f45faf9031f848770ef9b27897f8d36", "message": "Add HDFS TTFB support", "committedDate": "2020-06-05T07:25:50Z", "type": "forcePushed"}, {"oid": "31a4484e85625eddd39d51235e14bd1eb42716f3", "url": "https://github.com/Alluxio/alluxio/commit/31a4484e85625eddd39d51235e14bd1eb42716f3", "message": "Move profile-agent to baseparameter, add execption and error check", "committedDate": "2020-06-05T08:03:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyODg3MA==", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r436028870", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      series + \", thread \" + entry.getKey(), entry.getValue().computeTimeData());\n          \n          \n            \n                      series + \", thread: \" + entry.getKey(), entry.getValue().computeTimeData());", "author": "gpang", "createdAt": "2020-06-05T16:23:19Z", "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "diffHunk": "@@ -116,6 +174,13 @@ private long computeLastEndMs() {\n     return data;\n   }\n \n+  private void getTimeToFistByteData(String series, LineGraph lineGraph) {\n+    for (Map.Entry<Integer, SummaryStatistics> entry : mTimeToFirstByte.entrySet()) {\n+      lineGraph.addDataSeries(\n+          series + \", thread \" + entry.getKey(), entry.getValue().computeTimeData());", "originalCommit": "90f1abd907e2874bb953dbf0bfbf5227dea756bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f65f773e4a363fa8e9bb74917475525ecd8278a", "chunk": "diff --git a/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java b/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\nindex c5eb21c50d..f6303673a6 100644\n--- a/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\n+++ b/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\n\n@@ -174,13 +190,6 @@ public final class ClientIOTaskResult implements TaskResult, Summary {\n     return data;\n   }\n \n-  private void getTimeToFistByteData(String series, LineGraph lineGraph) {\n-    for (Map.Entry<Integer, SummaryStatistics> entry : mTimeToFirstByte.entrySet()) {\n-      lineGraph.addDataSeries(\n-          series + \", thread \" + entry.getKey(), entry.getValue().computeTimeData());\n-    }\n-  }\n-\n   private List<String> collectErrors() {\n     List<String> errors = new ArrayList<>();\n     for (Map.Entry<Integer, ThreadCountResult> entry : mThreadCountResults.entrySet()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyOTYyMQ==", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r436029621", "bodyText": "why was static removed?", "author": "gpang", "createdAt": "2020-06-05T16:24:52Z", "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "diffHunk": "@@ -161,7 +226,7 @@ public ClientIOTaskResult aggregate(Iterable<TaskResult> results) throws Excepti\n   /**\n    * The graph generator for this summary.\n    */\n-  public static final class GraphGenerator extends alluxio.stress.GraphGenerator {\n+  public final class GraphGenerator extends alluxio.stress.GraphGenerator {", "originalCommit": "90f1abd907e2874bb953dbf0bfbf5227dea756bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzODMwMQ==", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r436238301", "bodyText": "fixed.", "author": "HelloHorizon", "createdAt": "2020-06-06T04:57:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyOTYyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "fb35f8e27ad5cd1ab74689fa0a7291b666578d4a", "chunk": "diff --git a/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java b/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\nindex c5eb21c50d..e585cf8e8e 100644\n--- a/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\n+++ b/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\n\n@@ -226,7 +228,7 @@ public final class ClientIOTaskResult implements TaskResult, Summary {\n   /**\n    * The graph generator for this summary.\n    */\n-  public final class GraphGenerator extends alluxio.stress.GraphGenerator {\n+  public static final class GraphGenerator extends alluxio.stress.GraphGenerator {\n     @Override\n     public List<Graph> generate(List<? extends Summary> results) {\n       List<Graph> graphs = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzMDI0Nw==", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r436030247", "bodyText": "Since this is now in base parameters, this block can be moved to Benchmark, right?", "author": "gpang", "createdAt": "2020-06-05T16:26:01Z", "path": "stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java", "diffHunk": "@@ -84,8 +84,8 @@ public void prepare() throws Exception {\n           \"fixed count must be > 0. fixedCount: \" + mParameters.mFixedCount);\n     }\n \n-    if (!mParameters.mProfileAgent.isEmpty()) {\n-      mBaseParameters.mJavaOpts.add(\"-javaagent:\" + mParameters.mProfileAgent\n+    if (!mBaseParameters.mProfileAgent.isEmpty()) {", "originalCommit": "90f1abd907e2874bb953dbf0bfbf5227dea756bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f65f773e4a363fa8e9bb74917475525ecd8278a", "chunk": "diff --git a/stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java b/stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java\nindex 38b6300366..4924903bad 100644\n--- a/stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java\n+++ b/stress/shell/src/main/java/alluxio/stress/cli/StressMasterBench.java\n\n@@ -84,8 +84,8 @@ public class StressMasterBench extends Benchmark<MasterBenchTaskResult> {\n           \"fixed count must be > 0. fixedCount: \" + mParameters.mFixedCount);\n     }\n \n-    if (!mBaseParameters.mProfileAgent.isEmpty()) {\n-      mBaseParameters.mJavaOpts.add(\"-javaagent:\" + mBaseParameters.mProfileAgent\n+    if (!mParameters.mProfileAgent.isEmpty()) {\n+      mBaseParameters.mJavaOpts.add(\"-javaagent:\" + mParameters.mProfileAgent\n           + \"=\" + AGENT_OUTPUT_PATH);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzMDQyMw==", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r436030423", "bodyText": "Since this is now in base parameters, this block can be moved to Benchmark, right?", "author": "gpang", "createdAt": "2020-06-05T16:26:19Z", "path": "stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java", "diffHunk": "@@ -77,6 +89,10 @@ public void prepare() throws Exception {\n           \"%s is a single-node client IO stress test, so it cannot be run in cluster mode without\"\n               + \" flag '%s 1'.\", this.getClass().getName(), BaseParameters.CLUSTER_LIMIT_FLAG));\n     }\n+    if (!mBaseParameters.mProfileAgent.isEmpty()) {", "originalCommit": "90f1abd907e2874bb953dbf0bfbf5227dea756bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f65f773e4a363fa8e9bb74917475525ecd8278a", "chunk": "diff --git a/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java b/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java\nindex 26fb558d90..63cef8396e 100644\n--- a/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java\n+++ b/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java\n\n@@ -89,8 +88,8 @@ public class StressClientIOBench extends Benchmark<ClientIOTaskResult> {\n           \"%s is a single-node client IO stress test, so it cannot be run in cluster mode without\"\n               + \" flag '%s 1'.\", this.getClass().getName(), BaseParameters.CLUSTER_LIMIT_FLAG));\n     }\n-    if (!mBaseParameters.mProfileAgent.isEmpty()) {\n-      mBaseParameters.mJavaOpts.add(\"-javaagent:\" + mBaseParameters.mProfileAgent\n+    if (!mParameters.mProfileAgent.isEmpty()) {\n+      mBaseParameters.mJavaOpts.add(\"-javaagent:\" + mParameters.mProfileAgent\n           + \"=\" + AGENT_OUTPUT_PATH);\n     }\n     if (FormatUtils.parseSpaceSize(mParameters.mFileSize) < FormatUtils\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzODUyMg==", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r436038522", "bodyText": "Why isn't this class just using a Histogram? That is a useful library to handle all the times.", "author": "gpang", "createdAt": "2020-06-05T16:42:24Z", "path": "stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java", "diffHunk": "@@ -162,11 +182,132 @@ public ClientIOTaskResult runLocal() throws Exception {\n     service.awaitTermination(30, TimeUnit.SECONDS);\n \n     ClientIOTaskResult.ThreadCountResult result = context.getResult();\n+\n     LOG.info(String.format(\"thread count: %d, errors: %d, IO throughput (MB/s): %f\", numThreads,\n         result.getErrors().size(), result.getIOMBps()));\n+\n     return result;\n   }\n \n+  /**\n+   * Read the log file from java agent log file.\n+   *\n+   * @return summary statistics\n+   * @throws IOException\n+   */\n+  @SuppressFBWarnings(value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public synchronized SummaryStatistics addAdditionalResult() throws IOException {\n+    Map<String, PartialResultStatistic> timeToFirstByte = new HashMap<>();\n+\n+    try (final BufferedReader reader = new BufferedReader(new FileReader(AGENT_OUTPUT_PATH))) {\n+      String line;\n+\n+      final ObjectMapper objectMapper = new ObjectMapper();\n+      while ((line = reader.readLine()) != null) {\n+        final Map<String, Object> lineMap;\n+        try {\n+          lineMap = objectMapper.readValue(line, Map.class);\n+        } catch (JsonParseException | MismatchedInputException e) {\n+          // skip the last line of a not completed file\n+          break;\n+        }\n+\n+        final String type = (String) lineMap.get(\"type\");\n+        final String methodName = (String) lineMap.get(\"methodName\");\n+        final Integer duration = (Integer) lineMap.get(\"duration\");\n+\n+        if (type == null || methodName == null || duration == null) {\n+          continue;\n+        }\n+\n+        if ((type.equals(\"AlluxioBlockInStream\") && methodName.equals(\"readChunk\"))\n+            || (type.equals(\"HDFSPacketReceiver\") && methodName.equals(\"doRead\"))) {\n+          if (!timeToFirstByte.containsKey(methodName)) {\n+            timeToFirstByte.put(methodName, new PartialResultStatistic());\n+          }\n+\n+          final PartialResultStatistic statistic = timeToFirstByte.get(methodName);\n+          statistic.mTimeToFirstByteNs.add(duration);\n+          statistic.mNumSuccess += 1;\n+\n+          if (duration > statistic.mMaxTimeToFirstByteNs[0]) {\n+            statistic.mMaxTimeToFirstByteNs[0] = duration;\n+            Arrays.sort(statistic.mMaxTimeToFirstByteNs);\n+          }\n+        }\n+      }\n+    }\n+    if (timeToFirstByte.containsKey(\"readChunk\")) {\n+      Collections.sort(timeToFirstByte.get(\"readChunk\").mTimeToFirstByteNs);\n+      SummaryStatistics stats = new SummaryStatistics(\n+          timeToFirstByte.get(\"readChunk\").mNumSuccess,\n+          computeTimePercentileMS(timeToFirstByte.get(\"readChunk\").mTimeToFirstByteNs),\n+          computeTime99PercentileMS(timeToFirstByte.get(\"readChunk\").mTimeToFirstByteNs),\n+          computeMaxTimeMS(timeToFirstByte.get(\"readChunk\").mMaxTimeToFirstByteNs));\n+      return stats;\n+    } else if (timeToFirstByte.containsKey(\"doRead\")) {\n+      Collections.sort(timeToFirstByte.get(\"doRead\").mTimeToFirstByteNs);\n+      SummaryStatistics stats = new SummaryStatistics(\n+          timeToFirstByte.get(\"doRead\").mNumSuccess,\n+          computeTimePercentileMS(timeToFirstByte.get(\"doRead\").mTimeToFirstByteNs),\n+          computeTime99PercentileMS(timeToFirstByte.get(\"doRead\").mTimeToFirstByteNs),\n+          computeMaxTimeMS(timeToFirstByte.get(\"doRead\").mMaxTimeToFirstByteNs));\n+      return stats;\n+    }\n+    return new SummaryStatistics();\n+  }\n+\n+  private float[] computeTimePercentileMS(ArrayList<Integer> rawTime) {\n+    float[] timePercentileMS = new float[101];\n+    int step = rawTime.size() / 100;\n+\n+    for (int index = 0; index < 101; index++) {\n+      timePercentileMS[index] = (float) rawTime.get(step * index).intValue() / Constants.MS_NANO;\n+    }\n+\n+    return timePercentileMS;\n+  }\n+\n+  private float[] computeTime99PercentileMS(ArrayList<Integer> rawTime) {\n+    int length = rawTime.size() - 1;\n+    float[] timePercentileMS = new float[6];\n+\n+    for (int index = 0; index < 6; index++) {\n+      timePercentileMS[index] = (float) rawTime.get(\n+          (int) (length * (100.0 - 1.0 / Math.pow(10.0, index)) / 100.0))\n+          / Constants.MS_NANO;\n+    }\n+\n+    return timePercentileMS;\n+  }\n+\n+  private float[] computeMaxTimeMS(long[] rawTime) {\n+    int step = rawTime.length;\n+    float[] timePercentileMS = new float[step];\n+\n+    for (int index = 0; index < step; index++) {\n+      timePercentileMS[index] = (float) rawTime[index] / Constants.MS_NANO;\n+    }\n+\n+    return timePercentileMS;\n+  }\n+\n+  /**\n+   * Result statistics of time to first byte measurement.\n+   */\n+  private final class PartialResultStatistic {", "originalCommit": "90f1abd907e2874bb953dbf0bfbf5227dea756bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzODMxOQ==", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r436238319", "bodyText": "Changed to Histogram.", "author": "HelloHorizon", "createdAt": "2020-06-06T04:58:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzODUyMg=="}], "type": "inlineReview", "revised_code": {"commit": "6f65f773e4a363fa8e9bb74917475525ecd8278a", "chunk": "diff --git a/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java b/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java\nindex 26fb558d90..63cef8396e 100644\n--- a/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java\n+++ b/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java\n\n@@ -182,7 +182,6 @@ public class StressClientIOBench extends Benchmark<ClientIOTaskResult> {\n     service.awaitTermination(30, TimeUnit.SECONDS);\n \n     ClientIOTaskResult.ThreadCountResult result = context.getResult();\n-\n     LOG.info(String.format(\"thread count: %d, errors: %d, IO throughput (MB/s): %f\", numThreads,\n         result.getErrors().size(), result.getIOMBps()));\n \n"}}, {"oid": "6f65f773e4a363fa8e9bb74917475525ecd8278a", "url": "https://github.com/Alluxio/alluxio/commit/6f65f773e4a363fa8e9bb74917475525ecd8278a", "message": "Resolve conflict", "committedDate": "2020-06-06T01:03:54Z", "type": "commit"}, {"oid": "023035dc195cb00e4dc3275298e9d6c7b8546416", "url": "https://github.com/Alluxio/alluxio/commit/023035dc195cb00e4dc3275298e9d6c7b8546416", "message": "Change json format and graph generator", "committedDate": "2020-06-06T01:03:54Z", "type": "commit"}, {"oid": "121516cb741b8aac9d6f6496d7974339b445f0c9", "url": "https://github.com/Alluxio/alluxio/commit/121516cb741b8aac9d6f6496d7974339b445f0c9", "message": "Fix style", "committedDate": "2020-06-06T01:03:54Z", "type": "commit"}, {"oid": "ba37f22a737cdf2e90a44eea53a1bc4bd046206f", "url": "https://github.com/Alluxio/alluxio/commit/ba37f22a737cdf2e90a44eea53a1bc4bd046206f", "message": "Add HDFS TTFB support", "committedDate": "2020-06-06T01:03:54Z", "type": "commit"}, {"oid": "21b9ea3cca42905fcc0aaa84bd88f23400dd9eaf", "url": "https://github.com/Alluxio/alluxio/commit/21b9ea3cca42905fcc0aaa84bd88f23400dd9eaf", "message": "Move profile-agent to baseparameter, add execption and error check", "committedDate": "2020-06-06T01:06:15Z", "type": "commit"}, {"oid": "f04fce2072bf55c2e598582374d64637d4637562", "url": "https://github.com/Alluxio/alluxio/commit/f04fce2072bf55c2e598582374d64637d4637562", "message": "fix style", "committedDate": "2020-06-06T01:06:15Z", "type": "commit"}, {"oid": "b9245e58ce1bfe23285ccc78234b4d5c4d46682f", "url": "https://github.com/Alluxio/alluxio/commit/b9245e58ce1bfe23285ccc78234b4d5c4d46682f", "message": "fix baseParameter", "committedDate": "2020-06-06T01:06:15Z", "type": "commit"}, {"oid": "b9245e58ce1bfe23285ccc78234b4d5c4d46682f", "url": "https://github.com/Alluxio/alluxio/commit/b9245e58ce1bfe23285ccc78234b4d5c4d46682f", "message": "fix baseParameter", "committedDate": "2020-06-06T01:06:15Z", "type": "forcePushed"}, {"oid": "fb35f8e27ad5cd1ab74689fa0a7291b666578d4a", "url": "https://github.com/Alluxio/alluxio/commit/fb35f8e27ad5cd1ab74689fa0a7291b666578d4a", "message": "Move profile agent to benchmark, use histogram", "committedDate": "2020-06-06T04:56:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg1ODUzNA==", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r436858534", "bodyText": "I think we should ignore his max response time array (and maybe add a TODO to represent it correctly), or implement it correctly. The original purpose of it was to collect the max response time over time of the test, so if the array had 20 entries, the 1st entry would be the max response time of the first 1/20th of the run, the 2nd entry is the max response time for the 2nd 1/20th of the run, and so on.\nI don't think this is collecting the max this way.", "author": "gpang", "createdAt": "2020-06-08T17:04:11Z", "path": "stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java", "diffHunk": "@@ -162,11 +177,129 @@ public ClientIOTaskResult runLocal() throws Exception {\n     service.awaitTermination(30, TimeUnit.SECONDS);\n \n     ClientIOTaskResult.ThreadCountResult result = context.getResult();\n+\n     LOG.info(String.format(\"thread count: %d, errors: %d, IO throughput (MB/s): %f\", numThreads,\n         result.getErrors().size(), result.getIOMBps()));\n+\n     return result;\n   }\n \n+  /**\n+   * Read the log file from java agent log file.\n+   *\n+   * @return summary statistics\n+   * @throws IOException\n+   */\n+  @SuppressFBWarnings(value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+  public synchronized SummaryStatistics addAdditionalResult()\n+      throws IOException, DataFormatException {\n+    Map<String, PartialResultStatistic> methodDescToHistogram = new HashMap<>();\n+\n+    try (final BufferedReader reader = new BufferedReader(\n+        new FileReader(BaseParameters.AGENT_OUTPUT_PATH))) {\n+      String line;\n+\n+      final ObjectMapper objectMapper = new ObjectMapper();\n+      while ((line = reader.readLine()) != null) {\n+        final Map<String, Object> lineMap;\n+        try {\n+          lineMap = objectMapper.readValue(line, Map.class);\n+        } catch (JsonParseException | MismatchedInputException e) {\n+          // skip the last line of a not completed file\n+          break;\n+        }\n+\n+        final String type = (String) lineMap.get(\"type\");\n+        final String methodName = (String) lineMap.get(\"methodName\");\n+        final Integer duration = (Integer) lineMap.get(\"duration\");\n+\n+        if (type == null || methodName == null || duration == null) {\n+          continue;\n+        }\n+\n+        if ((type.equals(\"AlluxioBlockInStream\") && methodName.equals(\"readChunk\"))\n+            || (type.equals(\"HDFSPacketReceiver\") && methodName.equals(\"doRead\"))) {\n+          if (!methodDescToHistogram.containsKey(methodName)) {\n+            methodDescToHistogram.put(methodName, new PartialResultStatistic());\n+          }\n+\n+          final PartialResultStatistic statistic = methodDescToHistogram.get(methodName);\n+          statistic.mTimeToFirstByteNs.recordValue(duration);\n+          statistic.mNumSuccess += 1;\n+\n+          if (duration > statistic.mMaxTimeToFirstByteNs[0]) {", "originalCommit": "fb35f8e27ad5cd1ab74689fa0a7291b666578d4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkzMDU3Mw==", "url": "https://github.com/Alluxio/alluxio/pull/11518#discussion_r436930573", "bodyText": "I changed to the right implementation of max time to first byte array.", "author": "HelloHorizon", "createdAt": "2020-06-08T19:05:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg1ODUzNA=="}], "type": "inlineReview", "revised_code": {"commit": "a73c3f6ce3f53fb8a78cc3277637aa17d3d68e00", "chunk": "diff --git a/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java b/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java\nindex 7dff0ec307..aae32a71a0 100644\n--- a/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java\n+++ b/stress/shell/src/main/java/alluxio/stress/cli/client/StressClientIOBench.java\n\n@@ -187,11 +190,13 @@ public class StressClientIOBench extends Benchmark<ClientIOTaskResult> {\n   /**\n    * Read the log file from java agent log file.\n    *\n+   * @param startMs start time of certain num of threads\n+   * @param endMs end time of certain num of threads\n    * @return summary statistics\n    * @throws IOException\n    */\n   @SuppressFBWarnings(value = \"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n-  public synchronized SummaryStatistics addAdditionalResult()\n+  public synchronized SummaryStatistics addAdditionalResult(long startMs, long endMs)\n       throws IOException, DataFormatException {\n     Map<String, PartialResultStatistic> methodDescToHistogram = new HashMap<>();\n \n"}}, {"oid": "a73c3f6ce3f53fb8a78cc3277637aa17d3d68e00", "url": "https://github.com/Alluxio/alluxio/commit/a73c3f6ce3f53fb8a78cc3277637aa17d3d68e00", "message": "Fix max time to fisrt byte array", "committedDate": "2020-06-08T19:05:02Z", "type": "commit"}, {"oid": "a691883fedb63a9ad2773287c95ed8ed04b11f12", "url": "https://github.com/Alluxio/alluxio/commit/a691883fedb63a9ad2773287c95ed8ed04b11f12", "message": "Fix delete", "committedDate": "2020-06-08T19:07:17Z", "type": "commit"}]}