{"pr_number": 11114, "pr_title": "Add Client side debug logging", "pr_createdAt": "2020-03-04T00:01:54Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11114", "timeline": [{"oid": "611feee1c8d6dea774b26bcd1547707f6c924ac0", "url": "https://github.com/Alluxio/alluxio/commit/611feee1c8d6dea774b26bcd1547707f6c924ac0", "message": "Add Client side debug logging", "committedDate": "2020-03-03T23:59:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzNzk3Mg==", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388037972", "bodyText": "No args?", "author": "calvinjia", "createdAt": "2020-03-05T01:52:49Z", "path": "core/client/fs/src/main/java/alluxio/client/block/RetryHandlingBlockMasterClient.java", "diffHunk": "@@ -98,14 +102,15 @@ protected void afterConnect() {\n         result.add(GrpcUtils.fromProto(workerInfo));\n       }\n       return result;\n-    });\n+    }, LOG, \"GetWorkerReport\", \"options=%s\", options);\n   }\n \n   @Override\n   public List<WorkerLostStorageInfo> getWorkerLostStorage() throws IOException {\n     return retryRPC(() -> mClient\n         .getWorkerLostStorage(GetWorkerLostStoragePOptions.getDefaultInstance())\n-        .getWorkerLostStorageInfoList());\n+        .getWorkerLostStorageInfoList(),\n+        LOG, \"GetWorkerLostStorage\", \"options=%s\", \"\");", "originalCommit": "dcf73887b04e23534e1c868a16069aa13b2ef18a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NDc4OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388464789", "bodyText": "fixed", "author": "apc999", "createdAt": "2020-03-05T17:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzNzk3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c32b4ec7c03943ce4eb431d69e30ffce075f7f19", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/RetryHandlingBlockMasterClient.java b/core/client/fs/src/main/java/alluxio/client/block/RetryHandlingBlockMasterClient.java\nindex 0672180094..a42456e7ab 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/RetryHandlingBlockMasterClient.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/RetryHandlingBlockMasterClient.java\n\n@@ -110,7 +110,7 @@ public final class RetryHandlingBlockMasterClient extends AbstractMasterClient\n     return retryRPC(() -> mClient\n         .getWorkerLostStorage(GetWorkerLostStoragePOptions.getDefaultInstance())\n         .getWorkerLostStorageInfoList(),\n-        LOG, \"GetWorkerLostStorage\", \"options=%s\", \"\");\n+        LOG, \"GetWorkerLostStorage\", \"\");\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzOTU4OA==", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388039588", "bodyText": "Maybe inline ts2?", "author": "calvinjia", "createdAt": "2020-03-05T01:59:08Z", "path": "core/common/src/main/java/alluxio/AbstractClient.java", "diffHunk": "@@ -335,41 +336,40 @@ public synchronized InetSocketAddress getConfAddress() throws UnavailableExcepti\n     V call() throws StatusRuntimeException;\n   }\n \n-  /**\n-   * Tries to execute an RPC defined as a {@link RpcCallable}.\n-   *\n-   * If a {@link UnavailableException} occurs, a reconnection will be tried through\n-   * {@link #connect()} and the action will be re-executed.\n-   *\n-   * @param rpc the RPC call to be executed\n-   * @param <V> type of return value of the RPC call\n-   * @return the return value of the RPC call\n-   */\n-  protected synchronized <V> V retryRPC(RpcCallable<V> rpc) throws AlluxioStatusException {\n-    return retryRPCInternal(rpc, () -> null);\n-  }\n-\n   /**\n    * Tries to execute an RPC defined as a {@link RpcCallable}. Metrics will be recorded based on\n    * the provided rpc name.\n    *\n    * If a {@link UnavailableException} occurs, a reconnection will be tried through\n    * {@link #connect()} and the action will be re-executed.\n    *\n+   * @param <V> type of return value of the RPC call\n    * @param rpc the RPC call to be executed\n+   * @param logger the logger to use for this call\n    * @param rpcName the human readable name of the RPC call\n-   * @param <V> type of return value of the RPC call\n+   * @param description the format string of the description, used for logging\n+   * @param args the arguments for the description\n    * @return the return value of the RPC call\n+   * @throws AlluxioStatusException\n    */\n-  protected synchronized <V> V retryRPC(RpcCallable<V> rpc, String rpcName)\n-      throws AlluxioStatusException {\n+  protected synchronized <V> V retryRPC(RpcCallable<V> rpc, Logger logger, String rpcName,\n+      String description, Object... args) throws AlluxioStatusException {\n+    String debugDesc = logger.isDebugEnabled() ? String.format(description, args) : null;\n+    long ts1 = System.currentTimeMillis();\n+    logger.debug(\"Enter: {}({})\", rpcName, debugDesc);\n     try (Timer.Context ctx = MetricsSystem.timer(getQualifiedMetricName(rpcName)).time()) {\n-      return retryRPCInternal(rpc, () -> {\n+      V ret = retryRPCInternal(rpc, () -> {\n         MetricsSystem.counter(getQualifiedRetryMetricName(rpcName)).inc();\n         return null;\n       });\n+      long ts2 = System.currentTimeMillis();\n+      logger.debug(\"Exit (OK): {}({}) in {} ms\", rpcName, debugDesc, ts2 - ts1);", "originalCommit": "dcf73887b04e23534e1c868a16069aa13b2ef18a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NjI4Mg==", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388466282", "bodyText": "done", "author": "apc999", "createdAt": "2020-03-05T18:02:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzOTU4OA=="}], "type": "inlineReview", "revised_code": {"commit": "c32b4ec7c03943ce4eb431d69e30ffce075f7f19", "chunk": "diff --git a/core/common/src/main/java/alluxio/AbstractClient.java b/core/common/src/main/java/alluxio/AbstractClient.java\nindex b35cd50bfa..0a8b97b2e4 100644\n--- a/core/common/src/main/java/alluxio/AbstractClient.java\n+++ b/core/common/src/main/java/alluxio/AbstractClient.java\n\n@@ -355,21 +355,21 @@ public abstract class AbstractClient implements Client {\n   protected synchronized <V> V retryRPC(RpcCallable<V> rpc, Logger logger, String rpcName,\n       String description, Object... args) throws AlluxioStatusException {\n     String debugDesc = logger.isDebugEnabled() ? String.format(description, args) : null;\n-    long ts1 = System.currentTimeMillis();\n+    // TODO(binfan): create RPC context so we could get RPC duration from metrics timer directly\n+    long startMs = System.currentTimeMillis();\n     logger.debug(\"Enter: {}({})\", rpcName, debugDesc);\n     try (Timer.Context ctx = MetricsSystem.timer(getQualifiedMetricName(rpcName)).time()) {\n       V ret = retryRPCInternal(rpc, () -> {\n         MetricsSystem.counter(getQualifiedRetryMetricName(rpcName)).inc();\n         return null;\n       });\n-      long ts2 = System.currentTimeMillis();\n-      logger.debug(\"Exit (OK): {}({}) in {} ms\", rpcName, debugDesc, ts2 - ts1);\n+      logger.debug(\"Exit (OK): {}({}) in {} ms\",\n+          rpcName, debugDesc, System.currentTimeMillis() - startMs);\n       return ret;\n     } catch (Exception e) {\n       MetricsSystem.counter(getQualifiedFailureMetricName(rpcName)).inc();\n-      long ts2 = System.currentTimeMillis();\n       logger.debug(\"Exit (ERROR): {}({}) in {} ms: {}\",\n-          rpcName, debugDesc, ts2 - ts1, e.toString());\n+          rpcName, debugDesc, System.currentTimeMillis() - startMs, e.toString());\n       throw e;\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzOTY3OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388039679", "bodyText": "Can rename this to startMs?", "author": "calvinjia", "createdAt": "2020-03-05T01:59:29Z", "path": "core/common/src/main/java/alluxio/AbstractClient.java", "diffHunk": "@@ -335,41 +336,40 @@ public synchronized InetSocketAddress getConfAddress() throws UnavailableExcepti\n     V call() throws StatusRuntimeException;\n   }\n \n-  /**\n-   * Tries to execute an RPC defined as a {@link RpcCallable}.\n-   *\n-   * If a {@link UnavailableException} occurs, a reconnection will be tried through\n-   * {@link #connect()} and the action will be re-executed.\n-   *\n-   * @param rpc the RPC call to be executed\n-   * @param <V> type of return value of the RPC call\n-   * @return the return value of the RPC call\n-   */\n-  protected synchronized <V> V retryRPC(RpcCallable<V> rpc) throws AlluxioStatusException {\n-    return retryRPCInternal(rpc, () -> null);\n-  }\n-\n   /**\n    * Tries to execute an RPC defined as a {@link RpcCallable}. Metrics will be recorded based on\n    * the provided rpc name.\n    *\n    * If a {@link UnavailableException} occurs, a reconnection will be tried through\n    * {@link #connect()} and the action will be re-executed.\n    *\n+   * @param <V> type of return value of the RPC call\n    * @param rpc the RPC call to be executed\n+   * @param logger the logger to use for this call\n    * @param rpcName the human readable name of the RPC call\n-   * @param <V> type of return value of the RPC call\n+   * @param description the format string of the description, used for logging\n+   * @param args the arguments for the description\n    * @return the return value of the RPC call\n+   * @throws AlluxioStatusException\n    */\n-  protected synchronized <V> V retryRPC(RpcCallable<V> rpc, String rpcName)\n-      throws AlluxioStatusException {\n+  protected synchronized <V> V retryRPC(RpcCallable<V> rpc, Logger logger, String rpcName,\n+      String description, Object... args) throws AlluxioStatusException {\n+    String debugDesc = logger.isDebugEnabled() ? String.format(description, args) : null;\n+    long ts1 = System.currentTimeMillis();", "originalCommit": "dcf73887b04e23534e1c868a16069aa13b2ef18a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NjMzOA==", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388466338", "bodyText": "done", "author": "apc999", "createdAt": "2020-03-05T18:02:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzOTY3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c32b4ec7c03943ce4eb431d69e30ffce075f7f19", "chunk": "diff --git a/core/common/src/main/java/alluxio/AbstractClient.java b/core/common/src/main/java/alluxio/AbstractClient.java\nindex b35cd50bfa..0a8b97b2e4 100644\n--- a/core/common/src/main/java/alluxio/AbstractClient.java\n+++ b/core/common/src/main/java/alluxio/AbstractClient.java\n\n@@ -355,21 +355,21 @@ public abstract class AbstractClient implements Client {\n   protected synchronized <V> V retryRPC(RpcCallable<V> rpc, Logger logger, String rpcName,\n       String description, Object... args) throws AlluxioStatusException {\n     String debugDesc = logger.isDebugEnabled() ? String.format(description, args) : null;\n-    long ts1 = System.currentTimeMillis();\n+    // TODO(binfan): create RPC context so we could get RPC duration from metrics timer directly\n+    long startMs = System.currentTimeMillis();\n     logger.debug(\"Enter: {}({})\", rpcName, debugDesc);\n     try (Timer.Context ctx = MetricsSystem.timer(getQualifiedMetricName(rpcName)).time()) {\n       V ret = retryRPCInternal(rpc, () -> {\n         MetricsSystem.counter(getQualifiedRetryMetricName(rpcName)).inc();\n         return null;\n       });\n-      long ts2 = System.currentTimeMillis();\n-      logger.debug(\"Exit (OK): {}({}) in {} ms\", rpcName, debugDesc, ts2 - ts1);\n+      logger.debug(\"Exit (OK): {}({}) in {} ms\",\n+          rpcName, debugDesc, System.currentTimeMillis() - startMs);\n       return ret;\n     } catch (Exception e) {\n       MetricsSystem.counter(getQualifiedFailureMetricName(rpcName)).inc();\n-      long ts2 = System.currentTimeMillis();\n       logger.debug(\"Exit (ERROR): {}({}) in {} ms: {}\",\n-          rpcName, debugDesc, ts2 - ts1, e.toString());\n+          rpcName, debugDesc, System.currentTimeMillis() - startMs, e.toString());\n       throw e;\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzOTc4Ng==", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388039786", "bodyText": "Why did we add synchronization here?", "author": "calvinjia", "createdAt": "2020-03-05T01:59:53Z", "path": "core/common/src/main/java/alluxio/AbstractClient.java", "diffHunk": "@@ -116,14 +119,12 @@ public AbstractClient(ClientContext context, InetSocketAddress address,\n    */\n   protected abstract ServiceType getRemoteServiceType();\n \n-  protected long getRemoteServiceVersion() throws AlluxioStatusException {\n-    return retryRPC(new RpcCallable<Long>() {\n-      public Long call() {\n-        return mVersionService.getServiceVersion(\n+  protected synchronized long getRemoteServiceVersion() throws AlluxioStatusException {", "originalCommit": "dcf73887b04e23534e1c868a16069aa13b2ef18a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2NjY0Mg==", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388466642", "bodyText": "originally to make findbug happy. after adding suppress, I could remove this keyword", "author": "apc999", "createdAt": "2020-03-05T18:02:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAzOTc4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c32b4ec7c03943ce4eb431d69e30ffce075f7f19", "chunk": "diff --git a/core/common/src/main/java/alluxio/AbstractClient.java b/core/common/src/main/java/alluxio/AbstractClient.java\nindex b35cd50bfa..0a8b97b2e4 100644\n--- a/core/common/src/main/java/alluxio/AbstractClient.java\n+++ b/core/common/src/main/java/alluxio/AbstractClient.java\n\n@@ -119,7 +119,7 @@ public abstract class AbstractClient implements Client {\n    */\n   protected abstract ServiceType getRemoteServiceType();\n \n-  protected synchronized long getRemoteServiceVersion() throws AlluxioStatusException {\n+  protected long getRemoteServiceVersion() throws AlluxioStatusException {\n     return retryRPC(() ->\n         mVersionService.getServiceVersion(\n             GetServiceVersionPRequest.newBuilder().setServiceType(getRemoteServiceType()).build())\n"}}, {"oid": "c32b4ec7c03943ce4eb431d69e30ffce075f7f19", "url": "https://github.com/Alluxio/alluxio/commit/c32b4ec7c03943ce4eb431d69e30ffce075f7f19", "message": "Add more logging", "committedDate": "2020-03-05T18:09:38Z", "type": "commit"}, {"oid": "c32b4ec7c03943ce4eb431d69e30ffce075f7f19", "url": "https://github.com/Alluxio/alluxio/commit/c32b4ec7c03943ce4eb431d69e30ffce075f7f19", "message": "Add more logging", "committedDate": "2020-03-05T18:09:38Z", "type": "forcePushed"}, {"oid": "90d46f072089b593deafaaee7e3d75343faa9748", "url": "https://github.com/Alluxio/alluxio/commit/90d46f072089b593deafaaee7e3d75343faa9748", "message": "Enable client-side debug logging using Interface name rather than implementing class", "committedDate": "2020-03-05T18:38:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4OTExMQ==", "url": "https://github.com/Alluxio/alluxio/pull/11114#discussion_r388489111", "bodyText": "make it consistent across different clients", "author": "apc999", "createdAt": "2020-03-05T18:46:03Z", "path": "core/client/fs/src/main/java/alluxio/client/meta/MetaMasterClient.java", "diffHunk": "@@ -11,21 +11,21 @@\n \n package alluxio.client.meta;\n \n+import alluxio.Client;\n import alluxio.grpc.BackupPRequest;\n import alluxio.grpc.MasterInfo;\n import alluxio.grpc.MasterInfoField;\n import alluxio.wire.BackupStatus;\n import alluxio.wire.ConfigCheckReport;\n \n-import java.io.Closeable;\n import java.io.IOException;\n import java.util.Set;\n import java.util.UUID;\n \n /**\n  * Interface for a meta master client.\n  */\n-public interface MetaMasterClient extends Closeable {\n+public interface MetaMasterClient extends Client {", "originalCommit": "90d46f072089b593deafaaee7e3d75343faa9748", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "a46edf8d477916bc67f3a10bf437a7be69651d62", "url": "https://github.com/Alluxio/alluxio/commit/a46edf8d477916bc67f3a10bf437a7be69651d62", "message": "Enable client-side debug logging using Interface name rather than implementing class", "committedDate": "2020-03-05T18:53:12Z", "type": "commit"}, {"oid": "a46edf8d477916bc67f3a10bf437a7be69651d62", "url": "https://github.com/Alluxio/alluxio/commit/a46edf8d477916bc67f3a10bf437a7be69651d62", "message": "Enable client-side debug logging using Interface name rather than implementing class", "committedDate": "2020-03-05T18:53:12Z", "type": "forcePushed"}]}