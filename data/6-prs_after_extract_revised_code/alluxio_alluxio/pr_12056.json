{"pr_number": 12056, "pr_title": "Remove the catalyst dependencies in backup transport", "pr_createdAt": "2020-09-01T04:42:07Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/12056", "timeline": [{"oid": "7e5ea707dae6ccbf614a88fb8dead04f84ebbe47", "url": "https://github.com/Alluxio/alluxio/commit/7e5ea707dae6ccbf614a88fb8dead04f84ebbe47", "message": "Remove catalyst connection, client, server, address, assert", "committedDate": "2020-08-31T20:53:53Z", "type": "commit"}, {"oid": "590a3246c6d2e7ecfa2c5ce57a5d05fe3e864163", "url": "https://github.com/Alluxio/alluxio/commit/590a3246c6d2e7ecfa2c5ce57a5d05fe3e864163", "message": "Remove threadContext", "committedDate": "2020-08-31T22:24:15Z", "type": "commit"}, {"oid": "29296ea7259ca98e5809a0f6c03380d5b9bc7cd8", "url": "https://github.com/Alluxio/alluxio/commit/29296ea7259ca98e5809a0f6c03380d5b9bc7cd8", "message": "Remove listener, listeners", "committedDate": "2020-08-31T23:30:35Z", "type": "commit"}, {"oid": "40c9d824f283148efc2617d12544e6cb64face2e", "url": "https://github.com/Alluxio/alluxio/commit/40c9d824f283148efc2617d12544e6cb64face2e", "message": "add back SerializationException", "committedDate": "2020-09-01T04:41:13Z", "type": "commit"}, {"oid": "85f35a0b51c2bf9c76c1c019b07a61a30171ca47", "url": "https://github.com/Alluxio/alluxio/commit/85f35a0b51c2bf9c76c1c019b07a61a30171ca47", "message": "Fix checkstyle", "committedDate": "2020-09-01T05:52:44Z", "type": "commit"}, {"oid": "7dfe7a2f38ecccb0927ab7221b90a129e192c018", "url": "https://github.com/Alluxio/alluxio/commit/7dfe7a2f38ecccb0927ab7221b90a129e192c018", "message": "SmallFix", "committedDate": "2020-09-01T18:04:49Z", "type": "commit"}, {"oid": "41ebd07b6c4f96155164320d30bcb2159487268c", "url": "https://github.com/Alluxio/alluxio/commit/41ebd07b6c4f96155164320d30bcb2159487268c", "message": "Update code", "committedDate": "2020-09-01T18:51:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4NDE1OQ==", "url": "https://github.com/Alluxio/alluxio/pull/12056#discussion_r481484159", "bodyText": "Is there any Java built-in or guava alternative of this listener we can use?", "author": "bf8086", "createdAt": "2020-09-01T23:19:22Z", "path": "core/server/common/src/main/java/alluxio/master/transport/Listeners.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.transport;\n+\n+import com.google.common.base.Preconditions;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.function.Consumer;\n+\n+/**\n+ * A class to hold all listeners belong to given type T.\n+ *\n+ * @param <T> the listener type\n+ */\n+public class Listeners<T> implements Iterable<Listener<T>> {", "originalCommit": "41ebd07b6c4f96155164320d30bcb2159487268c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY5MDI2OA==", "url": "https://github.com/Alluxio/alluxio/pull/12056#discussion_r481690268", "bodyText": "The current implementation bounds the listeners with a shared thread context. So that all the listeners accept method will be executed by the same executor.", "author": "LuQQiu", "createdAt": "2020-09-02T04:55:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4NDE1OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4NjUwMQ==", "url": "https://github.com/Alluxio/alluxio/pull/12056#discussion_r481486501", "bodyText": "Is this class needed? Will there be any problem running everything without this context?", "author": "bf8086", "createdAt": "2020-09-01T23:26:35Z", "path": "core/server/common/src/main/java/alluxio/master/transport/GrpcMessagingContext.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.transport;\n+\n+import com.google.common.base.Preconditions;\n+import io.atomix.catalyst.serializer.Serializer;\n+import org.apache.http.concurrent.Cancellable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Supplier;\n+\n+/**\n+ * The context for Grpc messaging single thread.\n+ * This context uses a {@link ScheduledExecutorService} to schedule events on the context thread.\n+ */\n+public class GrpcMessagingContext {", "originalCommit": "41ebd07b6c4f96155164320d30bcb2159487268c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY4ODIyMg==", "url": "https://github.com/Alluxio/alluxio/pull/12056#discussion_r481688222", "bodyText": "This class mainly store two things, one executor, and one serializer.\nIn all the places, the current code makes sure that we read the response and write request to the same serializer.\nall the requests are handled by the same executor, all the listeners acceptances are handled by the same executor.\nIt's more for the correctness and reduces the potential race conditions.", "author": "LuQQiu", "createdAt": "2020-09-02T04:53:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4NjUwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI1MTIzMQ==", "url": "https://github.com/Alluxio/alluxio/pull/12056#discussion_r482251231", "bodyText": "I took a deeper look into the code, the backup leader may create more than one bi-di stream (in case need to reconnect?) with the client, but all the streams shared the same context (same executor and serializer).", "author": "LuQQiu", "createdAt": "2020-09-02T17:41:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4NjUwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2Njc5Mw==", "url": "https://github.com/Alluxio/alluxio/pull/12056#discussion_r482266793", "bodyText": "I see. We can leave it as it for now.\nFor serializer we will probably replace it with protobuf built-in serialization. The gRPC also provide some guarantee in message order, so this class may eventually become unnecessary.", "author": "bf8086", "createdAt": "2020-09-02T18:08:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4NjUwMQ=="}], "type": "inlineReview", "revised_code": null}]}