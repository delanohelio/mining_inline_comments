{"pr_number": 10770, "pr_title": "Make FileOutStream an abstract class similar to FileInStream", "pr_createdAt": "2020-01-21T00:54:18Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10770", "timeline": [{"oid": "28fe1425f6314485b9218902c6b0875c2db61efa", "url": "https://github.com/Alluxio/alluxio/commit/28fe1425f6314485b9218902c6b0875c2db61efa", "message": "Make FileOutStream an abstract class similar to FileInStream.", "committedDate": "2020-01-21T00:53:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgzNzg4NA==", "url": "https://github.com/Alluxio/alluxio/pull/10770#discussion_r368837884", "bodyText": "should we keep this annotation @PublicApi?", "author": "apc999", "createdAt": "2020-01-21T07:04:10Z", "path": "core/client/fs/src/main/java/alluxio/client/file/FileOutStream.java", "diffHunk": "@@ -11,312 +11,40 @@\n \n package alluxio.client.file;\n \n-import alluxio.AlluxioURI;\n-import alluxio.Constants;\n-import alluxio.annotation.PublicApi;\n-import alluxio.client.AbstractOutStream;\n-import alluxio.client.AlluxioStorageType;\n-import alluxio.client.UnderStorageType;\n-import alluxio.client.block.AlluxioBlockStore;\n-import alluxio.client.block.policy.options.GetWorkerOptions;\n-import alluxio.client.block.stream.BlockOutStream;\n-import alluxio.client.block.stream.UnderFileSystemFileOutStream;\n-import alluxio.client.file.options.OutStreamOptions;\n-import alluxio.exception.ExceptionMessage;\n-import alluxio.exception.PreconditionMessage;\n-import alluxio.exception.status.UnavailableException;\n-import alluxio.grpc.CompleteFilePOptions;\n-import alluxio.metrics.ClientMetrics;\n-import alluxio.metrics.MetricsSystem;\n-import alluxio.resource.CloseableResource;\n-import alluxio.util.CommonUtils;\n-import alluxio.util.FileSystemOptions;\n-import alluxio.wire.BlockInfo;\n-import alluxio.wire.WorkerNetAddress;\n-\n-import com.codahale.metrics.Counter;\n-import com.google.common.base.Preconditions;\n-import com.google.common.io.Closer;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import alluxio.client.Cancelable;\n \n import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.List;\n+import java.io.OutputStream;\n \n import javax.annotation.concurrent.NotThreadSafe;\n-import javax.annotation.concurrent.ThreadSafe;\n \n /**\n- * Provides a streaming API to write a file. This class wraps the BlockOutStreams for each of the\n- * blocks in the file and abstracts the switching between streams. The backing streams can write to\n- * Alluxio space in the local machine or remote machines. If the {@link UnderStorageType} is\n- * {@link UnderStorageType#SYNC_PERSIST}, another stream will write the data to the under storage\n- * system.\n+ * An abstraction of the output stream API in Alluxio to write data to a file or a block. In\n+ * addition to extending abstract class {@link OutputStream} as the basics, it also keeps counting\n+ * the number of bytes written to the output stream, and extends {@link Cancelable} to abort the\n+ * writes.\n  */\n-@PublicApi", "originalCommit": "28fe1425f6314485b9218902c6b0875c2db61efa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg0Mzg3OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10770#discussion_r368843879", "bodyText": "Good point, updated.", "author": "calvinjia", "createdAt": "2020-01-21T07:26:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgzNzg4NA=="}], "type": "inlineReview", "revised_code": {"commit": "19dc5aa3617d1fb520914c2de5ab2917bbbd674a", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/FileOutStream.java b/core/client/fs/src/main/java/alluxio/client/file/FileOutStream.java\nindex 6eff18af36..4369dacee3 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/FileOutStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/FileOutStream.java\n\n@@ -11,6 +11,7 @@\n \n package alluxio.client.file;\n \n+import alluxio.annotation.PublicApi;\n import alluxio.client.Cancelable;\n \n import java.io.IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgzODEyMQ==", "url": "https://github.com/Alluxio/alluxio/pull/10770#discussion_r368838121", "bodyText": "should we still keep this annotation?", "author": "apc999", "createdAt": "2020-01-21T07:05:15Z", "path": "core/client/fs/src/main/java/alluxio/client/file/AlluxioFileOutStream.java", "diffHunk": "@@ -0,0 +1,321 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.client.file;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.Constants;\n+import alluxio.annotation.PublicApi;\n+import alluxio.client.AlluxioStorageType;\n+import alluxio.client.UnderStorageType;\n+import alluxio.client.block.AlluxioBlockStore;\n+import alluxio.client.block.policy.options.GetWorkerOptions;\n+import alluxio.client.block.stream.BlockOutStream;\n+import alluxio.client.block.stream.UnderFileSystemFileOutStream;\n+import alluxio.client.file.options.OutStreamOptions;\n+import alluxio.exception.ExceptionMessage;\n+import alluxio.exception.PreconditionMessage;\n+import alluxio.exception.status.UnavailableException;\n+import alluxio.grpc.CompleteFilePOptions;\n+import alluxio.metrics.ClientMetrics;\n+import alluxio.metrics.MetricsSystem;\n+import alluxio.resource.CloseableResource;\n+import alluxio.util.CommonUtils;\n+import alluxio.util.FileSystemOptions;\n+import alluxio.wire.BlockInfo;\n+import alluxio.wire.WorkerNetAddress;\n+\n+import com.codahale.metrics.Counter;\n+import com.google.common.base.Preconditions;\n+import com.google.common.io.Closer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Provides a streaming API to write a file. This class wraps the BlockOutStreams for each of the\n+ * blocks in the file and abstracts the switching between streams. The backing streams can write to\n+ * Alluxio space in the local machine or remote machines. If the {@link UnderStorageType} is\n+ * {@link UnderStorageType#SYNC_PERSIST}, another stream will write the data to the under storage\n+ * system.\n+ */\n+@PublicApi", "originalCommit": "28fe1425f6314485b9218902c6b0875c2db61efa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg0MzkzOA==", "url": "https://github.com/Alluxio/alluxio/pull/10770#discussion_r368843938", "bodyText": "Removed, thanks", "author": "calvinjia", "createdAt": "2020-01-21T07:26:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgzODEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "19dc5aa3617d1fb520914c2de5ab2917bbbd674a", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/AlluxioFileOutStream.java b/core/client/fs/src/main/java/alluxio/client/file/AlluxioFileOutStream.java\nindex 39f5329d1e..4ac870aa9e 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/AlluxioFileOutStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/AlluxioFileOutStream.java\n\n@@ -13,7 +13,6 @@ package alluxio.client.file;\n \n import alluxio.AlluxioURI;\n import alluxio.Constants;\n-import alluxio.annotation.PublicApi;\n import alluxio.client.AlluxioStorageType;\n import alluxio.client.UnderStorageType;\n import alluxio.client.block.AlluxioBlockStore;\n"}}, {"oid": "19dc5aa3617d1fb520914c2de5ab2917bbbd674a", "url": "https://github.com/Alluxio/alluxio/commit/19dc5aa3617d1fb520914c2de5ab2917bbbd674a", "message": "Update annotations.", "committedDate": "2020-01-21T07:26:03Z", "type": "commit"}]}