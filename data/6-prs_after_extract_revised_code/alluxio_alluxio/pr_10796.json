{"pr_number": 10796, "pr_title": "Add database information to getDatabase calls", "pr_createdAt": "2020-01-24T07:41:47Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10796", "timeline": [{"oid": "3bd8dc54a913c64ac93fa914fac1dd19829c9a86", "url": "https://github.com/Alluxio/alluxio/commit/3bd8dc54a913c64ac93fa914fac1dd19829c9a86", "message": "Add database information to getDatabase calls.\n\nPreviously, database information are not fetched from the udb and\nhence the database information provided to the connnector is missing\nsome vital information such as owner and location.", "committedDate": "2020-01-24T07:40:10Z", "type": "commit"}, {"oid": "a82bbe003159863043db49e6a8f20c4784ad728e", "url": "https://github.com/Alluxio/alluxio/commit/a82bbe003159863043db49e6a8f20c4784ad728e", "message": "Fix tests", "committedDate": "2020-01-24T07:55:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NDAyMQ==", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370784021", "bodyText": "update comment", "author": "gpang", "createdAt": "2020-01-24T18:43:49Z", "path": "table/server/common/src/main/java/alluxio/table/common/udb/UnderDatabase.java", "diffHunk": "@@ -44,4 +46,9 @@\n    * @return the {@link UdbContext}\n    */\n   UdbContext getUdbContext();\n+\n+  /**\n+   * @return get owner name", "originalCommit": "a82bbe003159863043db49e6a8f20c4784ad728e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5OTI5Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370799293", "bodyText": "done", "author": "yuzhu", "createdAt": "2020-01-24T19:17:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NDAyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "28f65c8b06038659d4de557ae92a287cb230ddc7", "chunk": "diff --git a/table/server/common/src/main/java/alluxio/table/common/udb/UnderDatabase.java b/table/server/common/src/main/java/alluxio/table/common/udb/UnderDatabase.java\nindex e83d981261..0dbd2e075d 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/udb/UnderDatabase.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/udb/UnderDatabase.java\n\n@@ -48,7 +48,7 @@ public interface UnderDatabase {\n   UdbContext getUdbContext();\n \n   /**\n-   * @return get owner name\n+   * @return get database info\n    */\n   DatabaseInfo getDatabaseInfo() throws IOException;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NDY5OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370784699", "bodyText": "Why remove this processing? If we fail to sync the db, we should not have attached the db, right?", "author": "gpang", "createdAt": "2020-01-24T18:45:21Z", "path": "table/server/master/src/main/java/alluxio/master/table/AlluxioCatalog.java", "diffHunk": "@@ -118,17 +118,8 @@ public boolean attachDatabase(JournalContext journalContext, String udbType,\n               .setDbName(dbName)\n               .putAllConfig(map).build()).build());\n \n-      try {\n-        mDBs.get(dbName).sync(journalContext);\n-      } catch (Exception e) {", "originalCommit": "a82bbe003159863043db49e6a8f20c4784ad728e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "28f65c8b06038659d4de557ae92a287cb230ddc7", "chunk": "diff --git a/table/server/master/src/main/java/alluxio/master/table/AlluxioCatalog.java b/table/server/master/src/main/java/alluxio/master/table/AlluxioCatalog.java\nindex 645eb244e3..992033e5f6 100644\n--- a/table/server/master/src/main/java/alluxio/master/table/AlluxioCatalog.java\n+++ b/table/server/master/src/main/java/alluxio/master/table/AlluxioCatalog.java\n\n@@ -118,7 +118,17 @@ public class AlluxioCatalog implements Journaled {\n               .setDbName(dbName)\n               .putAllConfig(map).build()).build());\n \n-      mDBs.get(dbName).sync(journalContext);\n+      try {\n+        mDBs.get(dbName).sync(journalContext);\n+      } catch (Exception e) {\n+        // Failed to connect to and sync the udb.\n+        applyAndJournal(journalContext, Journal.JournalEntry.newBuilder().setDetachDb(\n+            alluxio.proto.journal.Table.DetachDbEntry.newBuilder().setDbName(dbName).build())\n+            .build());\n+        throw new IOException(String\n+            .format(\"Failed to connect underDb for Alluxio db '%s': %s\", dbName,\n+                e.getMessage()), e);\n+      }\n \n       return true;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NTc5OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370785799", "bodyText": "why can't the mDBs.values() also add the DBInfo entries?", "author": "gpang", "createdAt": "2020-01-24T18:47:36Z", "path": "table/server/master/src/main/java/alluxio/master/table/AlluxioCatalog.java", "diffHunk": "@@ -435,11 +434,56 @@ public void remove() {\n     };\n   }\n \n+  private Iterator<Journal.JournalEntry> getDbInfoIterator() {\n+    final Iterator<Map.Entry<String, Database>> it = mDBs.entrySet().iterator();\n+    return new Iterator<Journal.JournalEntry>() {\n+      private Map.Entry<String, Database> mEntry = null;\n+\n+      @Override\n+      public boolean hasNext() {\n+        if (mEntry != null) {\n+          return true;\n+        }\n+        if (it.hasNext()) {\n+          mEntry = it.next();\n+          return true;\n+        }\n+        return false;\n+      }\n+\n+      @Override\n+      public Journal.JournalEntry next() {\n+        if (!hasNext()) {\n+          throw new NoSuchElementException();\n+        }\n+        Database database = mEntry.getValue();\n+        mEntry = null;\n+        DatabaseInfo info = database.getDatabaseInfo();\n+        return Journal.JournalEntry.newBuilder().setUpdateDatabaseInfo(\n+            alluxio.proto.journal.Table.UpdateDatabaseInfoEntry.newBuilder()\n+                .setDbName(database.getName())\n+                .setOwnerName(info.getOwnerName())\n+                .setOwnerType(info.getOwnerType())\n+                .setComment(info.getComment())\n+                .setLocation(info.getLocation())\n+                .putAllParameter(info.getParameters()).build()).build();\n+      }\n+\n+      @Override\n+      public void remove() {\n+        throw new UnsupportedOperationException(\n+            \"GetDbInfoIteratorr#Iterator#remove is not supported.\");\n+      }\n+    };\n+  }\n+\n   @Override\n   public Iterator<Journal.JournalEntry> getJournalEntryIterator() {\n     List<Iterator<Journal.JournalEntry>> componentIters = StreamUtils\n         .map(JournalEntryIterable::getJournalEntryIterator, mDBs.values());", "originalCommit": "a82bbe003159863043db49e6a8f20c4784ad728e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NTI5Mg==", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370795292", "bodyText": "Here we are calling getJournalEntryIterator on every db, mDBs.values is a list of all DB objects.", "author": "yuzhu", "createdAt": "2020-01-24T19:08:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NTc5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMjQ0MQ==", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370802441", "bodyText": "Yes, so when we are returning journal entries for a database (the table entries), can we also return the dbInfo one as well?", "author": "gpang", "createdAt": "2020-01-24T19:24:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NTc5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d7a53f9e8d3b565ada417dab50db01dbf91ddf60", "chunk": "diff --git a/table/server/master/src/main/java/alluxio/master/table/AlluxioCatalog.java b/table/server/master/src/main/java/alluxio/master/table/AlluxioCatalog.java\nindex 645eb244e3..ed5f856031 100644\n--- a/table/server/master/src/main/java/alluxio/master/table/AlluxioCatalog.java\n+++ b/table/server/master/src/main/java/alluxio/master/table/AlluxioCatalog.java\n\n@@ -434,56 +444,12 @@ public class AlluxioCatalog implements Journaled {\n     };\n   }\n \n-  private Iterator<Journal.JournalEntry> getDbInfoIterator() {\n-    final Iterator<Map.Entry<String, Database>> it = mDBs.entrySet().iterator();\n-    return new Iterator<Journal.JournalEntry>() {\n-      private Map.Entry<String, Database> mEntry = null;\n-\n-      @Override\n-      public boolean hasNext() {\n-        if (mEntry != null) {\n-          return true;\n-        }\n-        if (it.hasNext()) {\n-          mEntry = it.next();\n-          return true;\n-        }\n-        return false;\n-      }\n-\n-      @Override\n-      public Journal.JournalEntry next() {\n-        if (!hasNext()) {\n-          throw new NoSuchElementException();\n-        }\n-        Database database = mEntry.getValue();\n-        mEntry = null;\n-        DatabaseInfo info = database.getDatabaseInfo();\n-        return Journal.JournalEntry.newBuilder().setUpdateDatabaseInfo(\n-            alluxio.proto.journal.Table.UpdateDatabaseInfoEntry.newBuilder()\n-                .setDbName(database.getName())\n-                .setOwnerName(info.getOwnerName())\n-                .setOwnerType(info.getOwnerType())\n-                .setComment(info.getComment())\n-                .setLocation(info.getLocation())\n-                .putAllParameter(info.getParameters()).build()).build();\n-      }\n-\n-      @Override\n-      public void remove() {\n-        throw new UnsupportedOperationException(\n-            \"GetDbInfoIteratorr#Iterator#remove is not supported.\");\n-      }\n-    };\n-  }\n-\n   @Override\n   public Iterator<Journal.JournalEntry> getJournalEntryIterator() {\n     List<Iterator<Journal.JournalEntry>> componentIters = StreamUtils\n         .map(JournalEntryIterable::getJournalEntryIterator, mDBs.values());\n \n-    return Iterators.concat(getDbIterator(), getDbInfoIterator(),\n-        Iterators.concat(componentIters.iterator()));\n+    return Iterators.concat(getDbIterator(), Iterators.concat(componentIters.iterator()));\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NjUwOQ==", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370786509", "bodyText": "Is there ever a scenario when the dbInfo is already populated? Can't we just keep it null until it is updated? I think a failed db sync will remove the db. Then, we don't have to pass in null as a parameter.", "author": "gpang", "createdAt": "2020-01-24T18:49:05Z", "path": "table/server/master/src/main/java/alluxio/master/table/Database.java", "diffHunk": "@@ -48,22 +49,21 @@\n   private final UnderDatabase mUdb;\n   private final Map<String, String> mConfig;\n \n-  /**\n-   * Creates an instance of a database.\n-   *\n-   * @param context the catalog context\n-   * @param type the database type\n-   * @param name the database name\n-   * @param udb the udb\n-   */\n+  private DatabaseInfo mDatabaseInfo;\n+\n   private Database(CatalogContext context, String type, String name, UnderDatabase udb,\n-      Map<String, String> configMap) {\n+      Map<String, String> configMap, @Nullable DatabaseInfo dbInfo) {\n     mContext = context;\n     mType = type;\n     mName = name;\n     mTables = new ConcurrentHashMap<>();\n     mUdb = udb;\n     mConfig = configMap;\n+    if (dbInfo == null) {\n+      mDatabaseInfo = new DatabaseInfo();\n+    } else {\n+      mDatabaseInfo = dbInfo;", "originalCommit": "a82bbe003159863043db49e6a8f20c4784ad728e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5OTIwNA==", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370799204", "bodyText": "done", "author": "yuzhu", "createdAt": "2020-01-24T19:17:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NjUwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "28f65c8b06038659d4de557ae92a287cb230ddc7", "chunk": "diff --git a/table/server/master/src/main/java/alluxio/master/table/Database.java b/table/server/master/src/main/java/alluxio/master/table/Database.java\nindex 27f5537a73..626f1ba0ad 100644\n--- a/table/server/master/src/main/java/alluxio/master/table/Database.java\n+++ b/table/server/master/src/main/java/alluxio/master/table/Database.java\n\n@@ -52,18 +51,13 @@ public class Database implements Journaled {\n   private DatabaseInfo mDatabaseInfo;\n \n   private Database(CatalogContext context, String type, String name, UnderDatabase udb,\n-      Map<String, String> configMap, @Nullable DatabaseInfo dbInfo) {\n+      Map<String, String> configMap) {\n     mContext = context;\n     mType = type;\n     mName = name;\n     mTables = new ConcurrentHashMap<>();\n     mUdb = udb;\n     mConfig = configMap;\n-    if (dbInfo == null) {\n-      mDatabaseInfo = new DatabaseInfo();\n-    } else {\n-      mDatabaseInfo = dbInfo;\n-    }\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NzAxOQ==", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370787019", "bodyText": "We can make all of these final?", "author": "gpang", "createdAt": "2020-01-24T18:50:12Z", "path": "table/server/common/src/main/java/alluxio/master/table/DatabaseInfo.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.table;\n+\n+import alluxio.grpc.table.PrincipalType;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * The database information class.\n+ */\n+public class DatabaseInfo {\n+  private String mLocation;", "originalCommit": "a82bbe003159863043db49e6a8f20c4784ad728e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMDI2Ng==", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370800266", "bodyText": "done", "author": "yuzhu", "createdAt": "2020-01-24T19:20:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NzAxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "28f65c8b06038659d4de557ae92a287cb230ddc7", "chunk": "diff --git a/table/server/common/src/main/java/alluxio/master/table/DatabaseInfo.java b/table/server/common/src/main/java/alluxio/master/table/DatabaseInfo.java\nindex 74562cfb60..3231a1378c 100644\n--- a/table/server/common/src/main/java/alluxio/master/table/DatabaseInfo.java\n+++ b/table/server/common/src/main/java/alluxio/master/table/DatabaseInfo.java\n\n@@ -22,11 +22,11 @@ import java.util.Objects;\n  * The database information class.\n  */\n public class DatabaseInfo {\n-  private String mLocation;\n-  private String mOwnerName;\n-  private PrincipalType mOwnerType;\n-  private String mComment;\n-  private Map<String, String> mParameters;\n+  private final String mLocation;\n+  private final String mOwnerName;\n+  private final PrincipalType mOwnerType;\n+  private final String mComment;\n+  private final Map<String, String> mParameters;\n \n   /**\n    * Construct a default databaseinfo class.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NzY3MA==", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370787670", "bodyText": "can the map contain at least 1 mapping?", "author": "gpang", "createdAt": "2020-01-24T18:51:31Z", "path": "table/server/master/src/test/java/alluxio/master/table/TestDatabase.java", "diffHunk": "@@ -29,6 +32,8 @@\n public class TestDatabase implements UnderDatabase {\n   public static final String TEST_UDB_NAME = \"test_udb_name\";\n   public static final String TABLE_NAME_PREFIX = \"test_table_name\";\n+  public static DatabaseInfo sTestDbInfo = new DatabaseInfo(\"test://test\", \"TestOwner\",\n+      PrincipalType.USER, \"comment\", ImmutableMap.of());", "originalCommit": "a82bbe003159863043db49e6a8f20c4784ad728e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5OTEzMw==", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370799133", "bodyText": "done", "author": "yuzhu", "createdAt": "2020-01-24T19:17:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4NzY3MA=="}], "type": "inlineReview", "revised_code": {"commit": "28f65c8b06038659d4de557ae92a287cb230ddc7", "chunk": "diff --git a/table/server/master/src/test/java/alluxio/master/table/TestDatabase.java b/table/server/master/src/test/java/alluxio/master/table/TestDatabase.java\nindex d639108733..7112c086a8 100644\n--- a/table/server/master/src/test/java/alluxio/master/table/TestDatabase.java\n+++ b/table/server/master/src/test/java/alluxio/master/table/TestDatabase.java\n\n@@ -33,7 +33,7 @@ public class TestDatabase implements UnderDatabase {\n   public static final String TEST_UDB_NAME = \"test_udb_name\";\n   public static final String TABLE_NAME_PREFIX = \"test_table_name\";\n   public static DatabaseInfo sTestDbInfo = new DatabaseInfo(\"test://test\", \"TestOwner\",\n-      PrincipalType.USER, \"comment\", ImmutableMap.of());\n+      PrincipalType.USER, \"comment\", ImmutableMap.of(\"testkey\", \"testvalue\"));\n   private static final TestDatabase DATABASE = new TestDatabase();\n \n   private Map<String, UdbTable> mUdbTables;\n"}}, {"oid": "28f65c8b06038659d4de557ae92a287cb230ddc7", "url": "https://github.com/Alluxio/alluxio/commit/28f65c8b06038659d4de557ae92a287cb230ddc7", "message": "address comments", "committedDate": "2020-01-24T19:19:40Z", "type": "commit"}, {"oid": "28f65c8b06038659d4de557ae92a287cb230ddc7", "url": "https://github.com/Alluxio/alluxio/commit/28f65c8b06038659d4de557ae92a287cb230ddc7", "message": "address comments", "committedDate": "2020-01-24T19:19:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwMTc0Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10796#discussion_r370801743", "bodyText": "can we use MoreObjects.toStringHelper(this) like we do elsewhere in the codebase?", "author": "gpang", "createdAt": "2020-01-24T19:23:19Z", "path": "table/server/common/src/main/java/alluxio/master/table/DatabaseInfo.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.table;\n+\n+import alluxio.grpc.table.PrincipalType;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * The database information class.\n+ */\n+public class DatabaseInfo {\n+  private final String mLocation;\n+  private final String mOwnerName;\n+  private final PrincipalType mOwnerType;\n+  private final String mComment;\n+  private final Map<String, String> mParameters;\n+\n+  /**\n+   * Construct a default databaseinfo class.\n+   */\n+  public DatabaseInfo() {\n+    mLocation = \"\";\n+    mOwnerName = \"\";\n+    mOwnerType = PrincipalType.USER;\n+    mComment = \"\";\n+    mParameters = ImmutableMap.of();\n+  }\n+\n+  /**\n+   * Full constructor for database info.\n+   * @param location location\n+   * @param ownerName owner name\n+   * @param ownerType owner type\n+   * @param comment comment\n+   * @param params parameters\n+   */\n+  public DatabaseInfo(String location, String ownerName, PrincipalType ownerType, String comment,\n+      Map<String, String> params) {\n+    mLocation = location;\n+    mOwnerName = ownerName;\n+    mOwnerType = ownerType;\n+    mComment = comment;\n+    mParameters = params;\n+  }\n+\n+  /**\n+   * @return the location\n+   */\n+  public String getLocation() {\n+    return mLocation;\n+  }\n+\n+  /**\n+   * @return the owner name\n+   */\n+  public String getOwnerName() {\n+    return mOwnerName;\n+  }\n+\n+  /**\n+   * @return the owner type\n+   */\n+  public PrincipalType getOwnerType() {\n+    return mOwnerType;\n+  }\n+\n+  /**\n+   * @return the comment\n+   */\n+  public String getComment() {\n+    return mComment;\n+  }\n+\n+  /**\n+   * @return the parameter\n+   */\n+  public Map<String, String> getParameters() {\n+    return mParameters;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    DatabaseInfo that = (DatabaseInfo) o;\n+    return Objects.equals(mLocation, that.mLocation)\n+        && Objects.equals(mOwnerName, that.mOwnerName)\n+        && mOwnerType == that.mOwnerType\n+        && Objects.equals(mComment, that.mComment)\n+        && Objects.equals(mParameters, that.mParameters);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(mLocation, mOwnerName, mOwnerType, mComment, mParameters);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"DatabaseInfo{\"", "originalCommit": "28f65c8b06038659d4de557ae92a287cb230ddc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d7a53f9e8d3b565ada417dab50db01dbf91ddf60", "chunk": "diff --git a/table/server/common/src/main/java/alluxio/master/table/DatabaseInfo.java b/table/server/common/src/main/java/alluxio/master/table/DatabaseInfo.java\nindex 3231a1378c..b4a44bc00a 100644\n--- a/table/server/common/src/main/java/alluxio/master/table/DatabaseInfo.java\n+++ b/table/server/common/src/main/java/alluxio/master/table/DatabaseInfo.java\n\n@@ -13,6 +13,7 @@ package alluxio.master.table;\n \n import alluxio.grpc.table.PrincipalType;\n \n+import com.google.common.base.MoreObjects;\n import com.google.common.collect.ImmutableMap;\n \n import java.util.Map;\n"}}, {"oid": "d7a53f9e8d3b565ada417dab50db01dbf91ddf60", "url": "https://github.com/Alluxio/alluxio/commit/d7a53f9e8d3b565ada417dab50db01dbf91ddf60", "message": "address comment", "committedDate": "2020-01-24T19:55:00Z", "type": "commit"}]}