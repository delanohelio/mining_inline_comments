{"pr_number": 12394, "pr_title": "Improve implementation of DistributedCp and other distributed jobs", "pr_createdAt": "2020-10-26T22:11:05Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/12394", "timeline": [{"oid": "ada580f3f0e91614ae557fa24d6000bce87e6503", "url": "https://github.com/Alluxio/alluxio/commit/ada580f3f0e91614ae557fa24d6000bce87e6503", "message": "Work", "committedDate": "2020-10-23T17:35:58Z", "type": "commit"}, {"oid": "9716691aa1cc97a5ffa837da0ea9a78e4da6efa4", "url": "https://github.com/Alluxio/alluxio/commit/9716691aa1cc97a5ffa837da0ea9a78e4da6efa4", "message": "Merge remote-tracking branch 'upstream/master' into distributed_cp", "committedDate": "2020-10-23T21:49:35Z", "type": "commit"}, {"oid": "364bc1db00d3bbf5b2eb3a533ddec30b3f5f3273", "url": "https://github.com/Alluxio/alluxio/commit/364bc1db00d3bbf5b2eb3a533ddec30b3f5f3273", "message": "work", "committedDate": "2020-10-26T17:53:53Z", "type": "commit"}, {"oid": "7c245c1ac6018f466e83b5ff3bfd3a3ac9c3b72f", "url": "https://github.com/Alluxio/alluxio/commit/7c245c1ac6018f466e83b5ff3bfd3a3ac9c3b72f", "message": "checkstyle", "committedDate": "2020-10-26T22:10:23Z", "type": "commit"}, {"oid": "d7b68afec1395560964951881815a8d612363f74", "url": "https://github.com/Alluxio/alluxio/commit/d7b68afec1395560964951881815a8d612363f74", "message": "License Header", "committedDate": "2020-10-26T22:58:50Z", "type": "commit"}, {"oid": "709640f4bcee564a3c129ea09b846ec4012c1d10", "url": "https://github.com/Alluxio/alluxio/commit/709640f4bcee564a3c129ea09b846ec4012c1d10", "message": "Make sure directories are created properly", "committedDate": "2020-10-27T17:49:17Z", "type": "commit"}, {"oid": "70801cbf70eaf5698877e673d08acd7b0a2284ad", "url": "https://github.com/Alluxio/alluxio/commit/70801cbf70eaf5698877e673d08acd7b0a2284ad", "message": "Remove validation", "committedDate": "2020-10-27T20:24:40Z", "type": "commit"}, {"oid": "5c5f23736eb5472f492a0d8afd16bd7ecda9bc5b", "url": "https://github.com/Alluxio/alluxio/commit/5c5f23736eb5472f492a0d8afd16bd7ecda9bc5b", "message": "remove new line", "committedDate": "2020-10-28T16:50:51Z", "type": "commit"}, {"oid": "df1aaec1765120c9377cd9bf2757d7790ccf1463", "url": "https://github.com/Alluxio/alluxio/commit/df1aaec1765120c9377cd9bf2757d7790ccf1463", "message": "handle folder overwrite better. Delete DistributedMv", "committedDate": "2020-10-28T20:41:55Z", "type": "commit"}, {"oid": "716603bdb488dcf2196093cd5329a4c23934cd44", "url": "https://github.com/Alluxio/alluxio/commit/716603bdb488dcf2196093cd5329a4c23934cd44", "message": "checkstyle and fix some tests", "committedDate": "2020-10-28T22:30:11Z", "type": "commit"}, {"oid": "6d1a54b7b1f8942051d2bd0ce4070ae000e7d670", "url": "https://github.com/Alluxio/alluxio/commit/6d1a54b7b1f8942051d2bd0ce4070ae000e7d670", "message": "Remove some tests and fix non-folder cp behavior", "committedDate": "2020-10-29T00:06:14Z", "type": "commit"}, {"oid": "8c3d7c64a1ae3d9b6cd36b17e557225ad3ce0f8a", "url": "https://github.com/Alluxio/alluxio/commit/8c3d7c64a1ae3d9b6cd36b17e557225ad3ce0f8a", "message": "checkstyle and distributedMv -> distributedCp", "committedDate": "2020-10-29T05:54:32Z", "type": "commit"}, {"oid": "93aace06eace2b7cd568151e3a2643cc88110899", "url": "https://github.com/Alluxio/alluxio/commit/93aace06eace2b7cd568151e3a2643cc88110899", "message": "Add DistributedMv and make implementation into Cp + Delete", "committedDate": "2020-10-29T18:18:35Z", "type": "commit"}, {"oid": "8460fc49f281b1b99cab008f389df48e5c3ad21d", "url": "https://github.com/Alluxio/alluxio/commit/8460fc49f281b1b99cab008f389df48e5c3ad21d", "message": "checkstyle", "committedDate": "2020-10-29T18:35:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM3NDU3Mg==", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r515374572", "bodyText": "Can we add a CLI option for the user to be able to change this setting?", "author": "gpang", "createdAt": "2020-10-30T20:45:12Z", "path": "shell/src/main/java/alluxio/cli/fs/command/AbstractDistributedJobCommand.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli.fs.command;\n+\n+import alluxio.ClientContext;\n+import alluxio.cli.fs.command.job.JobAttempt;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.client.job.JobMasterClient;\n+import alluxio.job.wire.Status;\n+import alluxio.worker.job.JobMasterClientContext;\n+\n+import com.google.common.collect.Lists;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The base class for all the distributed job based {@link alluxio.cli.Command} classes.\n+ * It provides handling for submitting multiple jobs and handling retries of them.\n+ */\n+public abstract class AbstractDistributedJobCommand extends AbstractFileSystemCommand {\n+  private static final int DEFAULT_ACTIVE_JOBS = 1000;\n+\n+  protected List<JobAttempt> mSubmittedJobAttempts;\n+  protected int mActiveJobs;\n+  protected final JobMasterClient mClient;\n+\n+  protected AbstractDistributedJobCommand(FileSystemContext fsContext) {\n+    super(fsContext);\n+    mSubmittedJobAttempts = Lists.newArrayList();\n+    final ClientContext clientContext = mFsContext.getClientContext();\n+    mClient = JobMasterClient.Factory.create(\n+        JobMasterClientContext.newBuilder(clientContext).build());\n+    mActiveJobs = DEFAULT_ACTIVE_JOBS;", "originalCommit": "8460fc49f281b1b99cab008f389df48e5c3ad21d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE0Mzk1MQ==", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r516143951", "bodyText": "This number is large enough and it hasn't actually mattered in distributedLoad case.", "author": "bradyoo", "createdAt": "2020-11-02T17:35:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM3NDU3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c20795c00f9dc77a0356cb6687730a2c1cc47836", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/fs/command/AbstractDistributedJobCommand.java b/shell/src/main/java/alluxio/cli/fs/command/AbstractDistributedJobCommand.java\nindex 562d631065..4de4b5bbae 100644\n--- a/shell/src/main/java/alluxio/cli/fs/command/AbstractDistributedJobCommand.java\n+++ b/shell/src/main/java/alluxio/cli/fs/command/AbstractDistributedJobCommand.java\n\n@@ -16,6 +16,7 @@ import alluxio.cli.fs.command.job.JobAttempt;\n import alluxio.client.file.FileSystemContext;\n import alluxio.client.job.JobMasterClient;\n import alluxio.job.wire.Status;\n+import alluxio.util.CommonUtils;\n import alluxio.worker.job.JobMasterClientContext;\n \n import com.google.common.collect.Lists;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM3OTQyNw==", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r515379427", "bodyText": "Do we need these variables anymore if this class extends AbstractDistributedJobCommand?", "author": "gpang", "createdAt": "2020-10-30T20:56:55Z", "path": "shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java", "diffHunk": "@@ -35,7 +43,11 @@\n  */\n @ThreadSafe\n @PublicApi\n-public final class DistributedCpCommand extends AbstractFileSystemCommand {\n+public class DistributedCpCommand extends AbstractDistributedJobCommand {\n+  private static final int DEFAULT_ACTIVE_JOBS = 1000;\n+\n+  private int mActiveJobs;", "originalCommit": "8460fc49f281b1b99cab008f389df48e5c3ad21d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3232c014507685e93d81ea5025f453e9dfa10c06", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java b/shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java\nindex 47c846d959..03d2e84bab 100644\n--- a/shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java\n+++ b/shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java\n\n@@ -46,7 +46,6 @@ import javax.annotation.concurrent.ThreadSafe;\n public class DistributedCpCommand extends AbstractDistributedJobCommand {\n   private static final int DEFAULT_ACTIVE_JOBS = 1000;\n \n-  private int mActiveJobs;\n   private String mWriteType;\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4MjA1NA==", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r515382054", "bodyText": "If this can throw an exception, should we try to catch it, to let the user know that the copy phase did not complete, so it might be in an inconsistent state?\nIf it is in an inconsistent state, what happens if we run distributedMv again?", "author": "gpang", "createdAt": "2020-10-30T21:03:57Z", "path": "shell/src/main/java/alluxio/cli/fs/command/DistributedMvCommand.java", "diffHunk": "@@ -50,31 +44,22 @@ public String getCommandName() {\n \n   @Override\n   public void validateArgs(CommandLine cl) throws InvalidArgumentException {\n-    CommandUtils.checkNumOfArgsEquals(this, cl, 2);\n+    mCpCommand.validateArgs(cl);\n   }\n \n   @Override\n   public int run(CommandLine cl) throws AlluxioException, IOException {\n+    mCpCommand.run(cl);", "originalCommit": "8460fc49f281b1b99cab008f389df48e5c3ad21d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE0MTk2MA==", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r516141960", "bodyText": "distributedMv fails because overwrite is broken. But at the very least, you can delete the destination directory and then rerun distributedMv", "author": "bradyoo", "createdAt": "2020-11-02T17:32:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4MjA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3NjI3Mg==", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r516276272", "bodyText": "Ok, but when the cp part fails, the user won't know what to do right? Should we catch this error, print out some instructions on what to do, and then re-throw the error, so we can show that they will have to delete the destination dir, and then rerun mv?", "author": "gpang", "createdAt": "2020-11-02T21:53:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4MjA1NA=="}], "type": "inlineReview", "revised_code": {"commit": "849917c1a97116ae1b700cfc130a497ee71c88a2", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/fs/command/DistributedMvCommand.java b/shell/src/main/java/alluxio/cli/fs/command/DistributedMvCommand.java\nindex cb9b1dc79e..6a62646998 100644\n--- a/shell/src/main/java/alluxio/cli/fs/command/DistributedMvCommand.java\n+++ b/shell/src/main/java/alluxio/cli/fs/command/DistributedMvCommand.java\n\n@@ -49,7 +49,13 @@ public class DistributedMvCommand extends AbstractDistributedJobCommand {\n \n   @Override\n   public int run(CommandLine cl) throws AlluxioException, IOException {\n-    mCpCommand.run(cl);\n+    try {\n+      mCpCommand.run(cl);\n+    } catch (AlluxioException | IOException e) {\n+      System.out.println(\"Copy operation portion of Move failed. If the error below is \"\n+          + \"intermittent, you can rerun this by deleting the destination first.\");\n+      throw e;\n+    }\n \n     String[] args = cl.getArgs();\n     AlluxioURI srcPath = new AlluxioURI(args[0]);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4MzcyNQ==", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r515383725", "bodyText": "Is it intentional that this while loop is very tight? Can we add a sleep in here to avoid too much unnecessary cpu?", "author": "gpang", "createdAt": "2020-10-30T21:08:20Z", "path": "shell/src/main/java/alluxio/cli/fs/command/AbstractDistributedJobCommand.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli.fs.command;\n+\n+import alluxio.ClientContext;\n+import alluxio.cli.fs.command.job.JobAttempt;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.client.job.JobMasterClient;\n+import alluxio.job.wire.Status;\n+import alluxio.worker.job.JobMasterClientContext;\n+\n+import com.google.common.collect.Lists;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The base class for all the distributed job based {@link alluxio.cli.Command} classes.\n+ * It provides handling for submitting multiple jobs and handling retries of them.\n+ */\n+public abstract class AbstractDistributedJobCommand extends AbstractFileSystemCommand {\n+  private static final int DEFAULT_ACTIVE_JOBS = 1000;\n+\n+  protected List<JobAttempt> mSubmittedJobAttempts;\n+  protected int mActiveJobs;\n+  protected final JobMasterClient mClient;\n+\n+  protected AbstractDistributedJobCommand(FileSystemContext fsContext) {\n+    super(fsContext);\n+    mSubmittedJobAttempts = Lists.newArrayList();\n+    final ClientContext clientContext = mFsContext.getClientContext();\n+    mClient = JobMasterClient.Factory.create(\n+        JobMasterClientContext.newBuilder(clientContext).build());\n+    mActiveJobs = DEFAULT_ACTIVE_JOBS;\n+  }\n+\n+  protected void drain() {\n+    while (!mSubmittedJobAttempts.isEmpty()) {\n+      waitJob();\n+    }\n+  }\n+\n+  /**\n+   * Waits for at least one job to complete.\n+   */\n+  protected void waitJob() {\n+    AtomicBoolean removed = new AtomicBoolean(false);\n+    while (true) {", "originalCommit": "8460fc49f281b1b99cab008f389df48e5c3ad21d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c20795c00f9dc77a0356cb6687730a2c1cc47836", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/fs/command/AbstractDistributedJobCommand.java b/shell/src/main/java/alluxio/cli/fs/command/AbstractDistributedJobCommand.java\nindex 562d631065..4de4b5bbae 100644\n--- a/shell/src/main/java/alluxio/cli/fs/command/AbstractDistributedJobCommand.java\n+++ b/shell/src/main/java/alluxio/cli/fs/command/AbstractDistributedJobCommand.java\n\n@@ -16,6 +16,7 @@ import alluxio.cli.fs.command.job.JobAttempt;\n import alluxio.client.file.FileSystemContext;\n import alluxio.client.job.JobMasterClient;\n import alluxio.job.wire.Status;\n+import alluxio.util.CommonUtils;\n import alluxio.worker.job.JobMasterClientContext;\n \n import com.google.common.collect.Lists;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4ODI3MQ==", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r515388271", "bodyText": "Did we always print out every file? This could be a huge output, if we are copying a large tree?", "author": "gpang", "createdAt": "2020-10-30T21:20:51Z", "path": "shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java", "diffHunk": "@@ -59,23 +71,85 @@ public int run(CommandLine cl) throws AlluxioException, IOException {\n     String[] args = cl.getArgs();\n     AlluxioURI srcPath = new AlluxioURI(args[0]);\n     AlluxioURI dstPath = new AlluxioURI(args[1]);\n-    Thread thread = CommonUtils.createProgressThread(2L * Constants.SECOND_MS, System.out);\n-    thread.start();\n-    try {\n-      AlluxioConfiguration conf = mFsContext.getPathConf(dstPath);\n-      JobGrpcClientUtils.run(new MigrateConfig(srcPath.getPath(), dstPath.getPath(),\n-          conf.get(PropertyKey.USER_FILE_WRITE_TYPE_DEFAULT), true,\n-          false), 1, mFsContext.getPathConf(dstPath));\n-    } catch (InterruptedException e) {\n-      Thread.currentThread().interrupt();\n-      return -1;\n-    } finally {\n-      thread.interrupt();\n+\n+    if (PathUtils.hasPrefix(dstPath.toString(), srcPath.toString())) {\n+      throw new RuntimeException(ExceptionMessage.MIGRATE_CANNOT_BE_TO_SUBDIRECTORY.getMessage(\n+          srcPath, dstPath));\n     }\n-    System.out.println(\"Copied \" + srcPath + \" to \" + dstPath);\n+\n+    mActiveJobs = DEFAULT_ACTIVE_JOBS;\n+\n+    AlluxioConfiguration conf = mFsContext.getPathConf(dstPath);\n+    mWriteType = conf.get(PropertyKey.USER_FILE_WRITE_TYPE_DEFAULT);\n+\n+    distributedCp(srcPath, dstPath);\n     return 0;\n   }\n \n+  private CopyJobAttempt newJob(String srcPath, String dstPath) {\n+    CopyJobAttempt jobAttempt = new CopyJobAttempt(mClient,\n+        new MigrateConfig(srcPath, dstPath, mWriteType, true, false),\n+        new CountingRetry(3));\n+\n+    jobAttempt.run();\n+\n+    return jobAttempt;\n+  }\n+\n+  private void distributedCp(AlluxioURI srcPath, AlluxioURI dstPath)\n+      throws IOException, AlluxioException {\n+    if (mFileSystem.getStatus(srcPath).isFolder()) {\n+      createFolders(srcPath, dstPath);\n+    }\n+    copy(srcPath, dstPath);\n+    // Wait remaining jobs to complete.\n+    drain();\n+  }\n+\n+  private void createFolders(AlluxioURI srcPath, AlluxioURI dstPath)\n+      throws IOException, AlluxioException {\n+\n+    try {\n+      mFileSystem.createDirectory(dstPath);\n+      System.out.println(\"Created directory at \" + dstPath.getPath());\n+    } catch (FileAlreadyExistsException e) {\n+      if (!mFileSystem.getStatus(dstPath).isFolder()) {\n+        throw e;\n+      }\n+    }\n+\n+    for (URIStatus srcInnerStatus : mFileSystem.listStatus(srcPath)) {\n+      if (srcInnerStatus.isFolder()) {\n+        String dstInnerPath = computeTargetPath(srcInnerStatus.getPath(),\n+            srcPath.getPath(), dstPath.getPath());\n+        createFolders(new AlluxioURI(srcInnerStatus.getPath()), new AlluxioURI(dstInnerPath));\n+      }\n+    }\n+  }\n+\n+  private void copy(AlluxioURI srcPath, AlluxioURI dstPath)\n+      throws IOException, AlluxioException {\n+\n+    for (URIStatus srcInnerStatus : mFileSystem.listStatus(srcPath)) {\n+      String dstInnerPath = computeTargetPath(srcInnerStatus.getPath(),\n+          srcPath.getPath(), dstPath.getPath());\n+      if (srcInnerStatus.isFolder()) {\n+        copy(new AlluxioURI(srcInnerStatus.getPath()), new AlluxioURI(dstInnerPath));\n+      } else {\n+        addJob(srcInnerStatus.getPath(), dstInnerPath);\n+      }\n+    }\n+  }\n+\n+  private void addJob(String srcPath, String dstPath) {\n+    if (mSubmittedJobAttempts.size() >= mActiveJobs) {\n+      // Wait one job to complete.\n+      waitJob();\n+    }\n+    mSubmittedJobAttempts.add(newJob(srcPath, dstPath));\n+    System.out.println(\"Copying \" + srcPath + \" to \" + dstPath);", "originalCommit": "8460fc49f281b1b99cab008f389df48e5c3ad21d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE0MjMzNg==", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r516142336", "bodyText": "We didn't but we did for distributedLoad and that has been popular so choosing that instead.", "author": "bradyoo", "createdAt": "2020-11-02T17:32:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4ODI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "849917c1a97116ae1b700cfc130a497ee71c88a2", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java b/shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java\nindex 47c846d959..138ded8841 100644\n--- a/shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java\n+++ b/shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java\n\n@@ -77,8 +74,6 @@ public class DistributedCpCommand extends AbstractDistributedJobCommand {\n           srcPath, dstPath));\n     }\n \n-    mActiveJobs = DEFAULT_ACTIVE_JOBS;\n-\n     AlluxioConfiguration conf = mFsContext.getPathConf(dstPath);\n     mWriteType = conf.get(PropertyKey.USER_FILE_WRITE_TYPE_DEFAULT);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4OTUyOQ==", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r515389529", "bodyText": "This is not threadsafe so we should add synchronized for this method.\nAlso, maybe rename to waitForCompleteJob?", "author": "gpang", "createdAt": "2020-10-30T21:24:35Z", "path": "shell/src/main/java/alluxio/cli/fs/command/AbstractDistributedJobCommand.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli.fs.command;\n+\n+import alluxio.ClientContext;\n+import alluxio.cli.fs.command.job.JobAttempt;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.client.job.JobMasterClient;\n+import alluxio.job.wire.Status;\n+import alluxio.worker.job.JobMasterClientContext;\n+\n+import com.google.common.collect.Lists;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The base class for all the distributed job based {@link alluxio.cli.Command} classes.\n+ * It provides handling for submitting multiple jobs and handling retries of them.\n+ */\n+public abstract class AbstractDistributedJobCommand extends AbstractFileSystemCommand {\n+  private static final int DEFAULT_ACTIVE_JOBS = 1000;\n+\n+  protected List<JobAttempt> mSubmittedJobAttempts;\n+  protected int mActiveJobs;\n+  protected final JobMasterClient mClient;\n+\n+  protected AbstractDistributedJobCommand(FileSystemContext fsContext) {\n+    super(fsContext);\n+    mSubmittedJobAttempts = Lists.newArrayList();\n+    final ClientContext clientContext = mFsContext.getClientContext();\n+    mClient = JobMasterClient.Factory.create(\n+        JobMasterClientContext.newBuilder(clientContext).build());\n+    mActiveJobs = DEFAULT_ACTIVE_JOBS;\n+  }\n+\n+  protected void drain() {\n+    while (!mSubmittedJobAttempts.isEmpty()) {\n+      waitJob();\n+    }\n+  }\n+\n+  /**\n+   * Waits for at least one job to complete.\n+   */\n+  protected void waitJob() {", "originalCommit": "8460fc49f281b1b99cab008f389df48e5c3ad21d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE0MjcwOQ==", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r516142709", "bodyText": "This is a command. There is nothing threadsafe about anything in any of these series of classes.", "author": "bradyoo", "createdAt": "2020-11-02T17:33:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4OTUyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c20795c00f9dc77a0356cb6687730a2c1cc47836", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/fs/command/AbstractDistributedJobCommand.java b/shell/src/main/java/alluxio/cli/fs/command/AbstractDistributedJobCommand.java\nindex 562d631065..4de4b5bbae 100644\n--- a/shell/src/main/java/alluxio/cli/fs/command/AbstractDistributedJobCommand.java\n+++ b/shell/src/main/java/alluxio/cli/fs/command/AbstractDistributedJobCommand.java\n\n@@ -16,6 +16,7 @@ import alluxio.cli.fs.command.job.JobAttempt;\n import alluxio.client.file.FileSystemContext;\n import alluxio.client.job.JobMasterClient;\n import alluxio.job.wire.Status;\n+import alluxio.util.CommonUtils;\n import alluxio.worker.job.JobMasterClientContext;\n \n import com.google.common.collect.Lists;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5MzA2Mw==", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r515393063", "bodyText": "createFolders does a listing, and copy also does a listing. Can we avoid doing a double recursive listing of the source?", "author": "gpang", "createdAt": "2020-10-30T21:34:58Z", "path": "shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java", "diffHunk": "@@ -59,23 +71,85 @@ public int run(CommandLine cl) throws AlluxioException, IOException {\n     String[] args = cl.getArgs();\n     AlluxioURI srcPath = new AlluxioURI(args[0]);\n     AlluxioURI dstPath = new AlluxioURI(args[1]);\n-    Thread thread = CommonUtils.createProgressThread(2L * Constants.SECOND_MS, System.out);\n-    thread.start();\n-    try {\n-      AlluxioConfiguration conf = mFsContext.getPathConf(dstPath);\n-      JobGrpcClientUtils.run(new MigrateConfig(srcPath.getPath(), dstPath.getPath(),\n-          conf.get(PropertyKey.USER_FILE_WRITE_TYPE_DEFAULT), true,\n-          false), 1, mFsContext.getPathConf(dstPath));\n-    } catch (InterruptedException e) {\n-      Thread.currentThread().interrupt();\n-      return -1;\n-    } finally {\n-      thread.interrupt();\n+\n+    if (PathUtils.hasPrefix(dstPath.toString(), srcPath.toString())) {\n+      throw new RuntimeException(ExceptionMessage.MIGRATE_CANNOT_BE_TO_SUBDIRECTORY.getMessage(\n+          srcPath, dstPath));\n     }\n-    System.out.println(\"Copied \" + srcPath + \" to \" + dstPath);\n+\n+    mActiveJobs = DEFAULT_ACTIVE_JOBS;\n+\n+    AlluxioConfiguration conf = mFsContext.getPathConf(dstPath);\n+    mWriteType = conf.get(PropertyKey.USER_FILE_WRITE_TYPE_DEFAULT);\n+\n+    distributedCp(srcPath, dstPath);\n     return 0;\n   }\n \n+  private CopyJobAttempt newJob(String srcPath, String dstPath) {\n+    CopyJobAttempt jobAttempt = new CopyJobAttempt(mClient,\n+        new MigrateConfig(srcPath, dstPath, mWriteType, true, false),\n+        new CountingRetry(3));\n+\n+    jobAttempt.run();\n+\n+    return jobAttempt;\n+  }\n+\n+  private void distributedCp(AlluxioURI srcPath, AlluxioURI dstPath)\n+      throws IOException, AlluxioException {\n+    if (mFileSystem.getStatus(srcPath).isFolder()) {\n+      createFolders(srcPath, dstPath);\n+    }\n+    copy(srcPath, dstPath);", "originalCommit": "8460fc49f281b1b99cab008f389df48e5c3ad21d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE0MzcwNg==", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r516143706", "bodyText": "I would prefer not because:\n\ncopy is expensive anyways so listStatus is a small cost here.\nMore intuitive log messages.", "author": "bradyoo", "createdAt": "2020-11-02T17:35:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5MzA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI4Mzk5Mw==", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r516283993", "bodyText": "Could you explain why it is more intuitive with 2 listings, and why 1 listing cannot have good messages?\nOne concern is that if a listing is a large tree, it would have to lock that large tree twice. Ideally, we would only have to lock that subtree once.", "author": "gpang", "createdAt": "2020-11-02T22:09:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5MzA2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "849917c1a97116ae1b700cfc130a497ee71c88a2", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java b/shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java\nindex 47c846d959..138ded8841 100644\n--- a/shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java\n+++ b/shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java\n\n@@ -77,8 +74,6 @@ public class DistributedCpCommand extends AbstractDistributedJobCommand {\n           srcPath, dstPath));\n     }\n \n-    mActiveJobs = DEFAULT_ACTIVE_JOBS;\n-\n     AlluxioConfiguration conf = mFsContext.getPathConf(dstPath);\n     mWriteType = conf.get(PropertyKey.USER_FILE_WRITE_TYPE_DEFAULT);\n \n"}}, {"oid": "3232c014507685e93d81ea5025f453e9dfa10c06", "url": "https://github.com/Alluxio/alluxio/commit/3232c014507685e93d81ea5025f453e9dfa10c06", "message": "feedback", "committedDate": "2020-11-02T17:36:12Z", "type": "commit"}, {"oid": "c20795c00f9dc77a0356cb6687730a2c1cc47836", "url": "https://github.com/Alluxio/alluxio/commit/c20795c00f9dc77a0356cb6687730a2c1cc47836", "message": "feedback", "committedDate": "2020-11-02T17:41:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3NTY2Mw==", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r516275663", "bodyText": "Can we just use the abstract class DEFAULT_ACTIVE_JOBS, instead of defining it again here?", "author": "gpang", "createdAt": "2020-11-02T21:51:45Z", "path": "shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java", "diffHunk": "@@ -35,7 +43,10 @@\n  */\n @ThreadSafe\n @PublicApi\n-public final class DistributedCpCommand extends AbstractFileSystemCommand {\n+public class DistributedCpCommand extends AbstractDistributedJobCommand {\n+  private static final int DEFAULT_ACTIVE_JOBS = 1000;", "originalCommit": "c20795c00f9dc77a0356cb6687730a2c1cc47836", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "849917c1a97116ae1b700cfc130a497ee71c88a2", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java b/shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java\nindex 03d2e84bab..138ded8841 100644\n--- a/shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java\n+++ b/shell/src/main/java/alluxio/cli/fs/command/DistributedCpCommand.java\n\n@@ -44,8 +44,6 @@ import javax.annotation.concurrent.ThreadSafe;\n @ThreadSafe\n @PublicApi\n public class DistributedCpCommand extends AbstractDistributedJobCommand {\n-  private static final int DEFAULT_ACTIVE_JOBS = 1000;\n-\n   private String mWriteType;\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI4Mjg0OA==", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r516282848", "bodyText": "Is there a specific reason we need to loop so quickly? For example, if we loop every second, does that slow anything down unnecessarily?", "author": "gpang", "createdAt": "2020-11-02T22:07:18Z", "path": "shell/src/main/java/alluxio/cli/fs/command/AbstractDistributedJobCommand.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.cli.fs.command;\n+\n+import alluxio.ClientContext;\n+import alluxio.cli.fs.command.job.JobAttempt;\n+import alluxio.client.file.FileSystemContext;\n+import alluxio.client.job.JobMasterClient;\n+import alluxio.job.wire.Status;\n+import alluxio.util.CommonUtils;\n+import alluxio.worker.job.JobMasterClientContext;\n+\n+import com.google.common.collect.Lists;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The base class for all the distributed job based {@link alluxio.cli.Command} classes.\n+ * It provides handling for submitting multiple jobs and handling retries of them.\n+ */\n+public abstract class AbstractDistributedJobCommand extends AbstractFileSystemCommand {\n+  private static final int DEFAULT_ACTIVE_JOBS = 1000;\n+\n+  protected List<JobAttempt> mSubmittedJobAttempts;\n+  protected int mActiveJobs;\n+  protected final JobMasterClient mClient;\n+\n+  protected AbstractDistributedJobCommand(FileSystemContext fsContext) {\n+    super(fsContext);\n+    mSubmittedJobAttempts = Lists.newArrayList();\n+    final ClientContext clientContext = mFsContext.getClientContext();\n+    mClient = JobMasterClient.Factory.create(\n+        JobMasterClientContext.newBuilder(clientContext).build());\n+    mActiveJobs = DEFAULT_ACTIVE_JOBS;\n+  }\n+\n+  protected void drain() {\n+    while (!mSubmittedJobAttempts.isEmpty()) {\n+      waitJob();\n+    }\n+  }\n+\n+  /**\n+   * Waits for at least one job to complete.\n+   */\n+  protected void waitJob() {\n+    AtomicBoolean removed = new AtomicBoolean(false);\n+    while (true) {\n+      mSubmittedJobAttempts = mSubmittedJobAttempts.stream().filter((jobAttempt) -> {\n+        Status check = jobAttempt.check();\n+        switch (check) {\n+          case CREATED:\n+          case RUNNING:\n+            return true;\n+          case CANCELED:\n+          case COMPLETED:\n+            removed.set(true);\n+            return false;\n+          case FAILED:\n+            removed.set(true);\n+            return false;\n+          default:\n+            throw new IllegalStateException(String.format(\"Unexpected Status: %s\", check));\n+        }\n+      }).collect(Collectors.toList());\n+      if (removed.get()) {\n+        return;\n+      }\n+      CommonUtils.sleepMs(5);", "originalCommit": "c20795c00f9dc77a0356cb6687730a2c1cc47836", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgwNzg5Mg==", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r516807892", "bodyText": "Second will be quite detrimental to the performance of this when copying lots of small files that were initially held back by a backlog of other jobs.", "author": "bradyoo", "createdAt": "2020-11-03T16:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI4Mjg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg3Nzk4MQ==", "url": "https://github.com/Alluxio/alluxio/pull/12394#discussion_r516877981", "bodyText": "ok, sounds good", "author": "gpang", "createdAt": "2020-11-03T18:38:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI4Mjg0OA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "849917c1a97116ae1b700cfc130a497ee71c88a2", "url": "https://github.com/Alluxio/alluxio/commit/849917c1a97116ae1b700cfc130a497ee71c88a2", "message": "feedback", "committedDate": "2020-11-03T17:03:51Z", "type": "commit"}]}