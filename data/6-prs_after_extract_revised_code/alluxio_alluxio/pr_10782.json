{"pr_number": 10782, "pr_title": "Add metricsMaster.getMetrics() and fix fsadmin report metrics", "pr_createdAt": "2020-01-22T22:46:05Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10782", "timeline": [{"oid": "d1e1febb2c03d15c0ea75f3b514ada61b3879f5e", "url": "https://github.com/Alluxio/alluxio/commit/d1e1febb2c03d15c0ea75f3b514ada61b3879f5e", "message": "Add metricsMaster.getMetrics() and fix fsadmin report metrics", "committedDate": "2020-01-22T22:44:47Z", "type": "commit"}, {"oid": "3d0d561338cc73a1978a5c8bece0c2078bd313e3", "url": "https://github.com/Alluxio/alluxio/commit/3d0d561338cc73a1978a5c8bece0c2078bd313e3", "message": "small fix", "committedDate": "2020-01-23T04:57:56Z", "type": "commit"}, {"oid": "9169b1b8ffad540d8706d2698f78293fd7428c00", "url": "https://github.com/Alluxio/alluxio/commit/9169b1b8ffad540d8706d2698f78293fd7428c00", "message": "Modify metrics docs", "committedDate": "2020-01-23T05:32:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5Nzg1Ng==", "url": "https://github.com/Alluxio/alluxio/pull/10782#discussion_r370397856", "bodyText": "One line?", "author": "calvinjia", "createdAt": "2020-01-23T22:53:15Z", "path": "shell/src/main/java/alluxio/cli/fsadmin/command/ReportCommand.java", "diffHunk": "@@ -149,7 +149,7 @@ public int run(CommandLine cl) throws IOException {\n         break;\n       case METRICS:\n         MetricsCommand metricsCommand = new MetricsCommand(\n-            mMetaClient, mPrintStream);\n+            mMetricsClient, mPrintStream);", "originalCommit": "9169b1b8ffad540d8706d2698f78293fd7428c00", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7090d49c0ef8507f314407f59d8689088ac4d7ad", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/fsadmin/command/ReportCommand.java b/shell/src/main/java/alluxio/cli/fsadmin/command/ReportCommand.java\nindex afc3a611f0..49fd6021e6 100644\n--- a/shell/src/main/java/alluxio/cli/fsadmin/command/ReportCommand.java\n+++ b/shell/src/main/java/alluxio/cli/fsadmin/command/ReportCommand.java\n\n@@ -143,13 +143,11 @@ public final class ReportCommand extends AbstractFsAdminCommand {\n \n     switch (command) {\n       case CAPACITY:\n-        CapacityCommand capacityCommand = new CapacityCommand(\n-            mBlockClient, mPrintStream);\n+        CapacityCommand capacityCommand = new CapacityCommand(mBlockClient, mPrintStream);\n         capacityCommand.run(cl);\n         break;\n       case METRICS:\n-        MetricsCommand metricsCommand = new MetricsCommand(\n-            mMetricsClient, mPrintStream);\n+        MetricsCommand metricsCommand = new MetricsCommand(mMetricsClient, mPrintStream);\n         metricsCommand.run();\n         break;\n       case SUMMARY:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5ODM2Ng==", "url": "https://github.com/Alluxio/alluxio/pull/10782#discussion_r370398366", "bodyText": "There is no easy way to iterate over these? Could we just output the values in the map, that would also avoid the need to expose getMasterMetricName?", "author": "calvinjia", "createdAt": "2020-01-23T22:54:46Z", "path": "shell/src/main/java/alluxio/cli/fsadmin/report/MetricsCommand.java", "diffHunk": "@@ -120,40 +126,68 @@ public int run() throws IOException {\n         + String.format(mInfoFormat, \"Miss\", cacheMissPercentage));\n \n     mPrintStream.println(\"\\nLogical Operations: \");\n-    printMetric(MasterMetrics.DIRECTORIES_CREATED, \"Directories Created\", false);\n-    printMetric(MasterMetrics.FILE_BLOCK_INFOS_GOT, \"File Block Infos Got\", false);\n-    printMetric(MasterMetrics.FILE_INFOS_GOT, \"File Infos Got\", false);\n-    printMetric(MasterMetrics.FILES_COMPLETED, \"Files Completed\", false);\n-    printMetric(MasterMetrics.FILES_CREATED, \"Files Created\", false);\n-    printMetric(MasterMetrics.FILES_FREED, \"Files Freed\", false);\n-    printMetric(MasterMetrics.FILES_PERSISTED, \"Files Persisted\", false);\n-    printMetric(MasterMetrics.NEW_BLOCKS_GOT, \"New Blocks Got\", false);\n-    printMetric(MasterMetrics.PATHS_DELETED, \"Paths Deleted\", false);\n-    printMetric(MasterMetrics.PATHS_MOUNTED, \"Paths Mounted\", false);\n-    printMetric(MasterMetrics.PATHS_RENAMED, \"Paths Renamed\", false);\n-    printMetric(MasterMetrics.PATHS_UNMOUNTED, \"Paths Unmounted\", false);\n+    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.DIRECTORIES_CREATED),", "originalCommit": "9169b1b8ffad540d8706d2698f78293fd7428c00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQxNTg4Ng==", "url": "https://github.com/Alluxio/alluxio/pull/10782#discussion_r370415886", "bodyText": "Previously we want fsadmin report metrics similar to the master web ui metrics page, that's why we add those complicate logic to add nick name to those metrics. I agreed that we can modify to directly output contents in the map and maybe sort the metrics according to prefix (master/cluster/worker)", "author": "LuQQiu", "createdAt": "2020-01-23T23:54:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5ODM2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7090d49c0ef8507f314407f59d8689088ac4d7ad", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/fsadmin/report/MetricsCommand.java b/shell/src/main/java/alluxio/cli/fsadmin/report/MetricsCommand.java\nindex 9e190fa6b5..79bdb4061f 100644\n--- a/shell/src/main/java/alluxio/cli/fsadmin/report/MetricsCommand.java\n+++ b/shell/src/main/java/alluxio/cli/fsadmin/report/MetricsCommand.java\n\n@@ -60,164 +58,30 @@ public class MetricsCommand {\n    * @return 0 on success, 1 otherwise\n    */\n   public int run() throws IOException {\n-    Map<String, MetricValue> metrics = mMetricsMasterClient.getMetrics();\n-    // The returned map is unmodifiable so we make a copy of it\n-    mMetricsMap = new HashMap<>(metrics);\n-\n-    MetricValue bytesReadLocalValue =\n-        mMetricsMap.get(MetricsSystem.getClusterMetricName(ClientMetrics.BYTES_READ_LOCAL));\n-    long bytesReadLocal = bytesReadLocalValue == null ? 0L\n-        : (long) bytesReadLocalValue.getDoubleValue();\n-    MetricValue bytesReadRemoteValue =\n-        mMetricsMap.get(MetricsSystem.getClusterMetricName(WorkerMetrics.BYTES_READ_ALLUXIO));\n-    long bytesReadRemote = bytesReadRemoteValue == null ? 0L\n-        : (long) bytesReadRemoteValue.getDoubleValue();\n-\n-    MetricValue bytesReadUfsValue =\n-        mMetricsMap.get(MetricsSystem.getClusterMetricName(WorkerMetrics.BYTES_READ_UFS_ALL));\n-    long bytesReadUfs = bytesReadUfsValue == null ? 0L : (long) bytesReadUfsValue.getDoubleValue();\n-\n-    mPrintStream.println(\"Total IO: \");\n-    printMetric(MetricsSystem.getClusterMetricName(ClientMetrics.BYTES_READ_LOCAL),\n-        \"Short-circuit Read\", true);\n-    printMetric(MetricsSystem.getClusterMetricName(WorkerMetrics.BYTES_READ_DOMAIN),\n-        \"Short-circuit Read (Domain Socket)\", true);\n-    printMetric(MetricsSystem.getClusterMetricName(WorkerMetrics.BYTES_READ_ALLUXIO),\n-        \"From Remote Instances\", true);\n-    printMetric(MetricsSystem.getClusterMetricName(WorkerMetrics.BYTES_READ_UFS_ALL),\n-        \"Under Filesystem Read\", true);\n-    printMetric(MetricsSystem.getClusterMetricName(WorkerMetrics.BYTES_WRITTEN_ALLUXIO),\n-        \"Alluxio Write\", true);\n-    printMetric(MetricsSystem.getClusterMetricName(WorkerMetrics.BYTES_WRITTEN_DOMAIN),\n-        \"Alluxio Write (Domain Socket)\", true);\n-    printMetric(MetricsSystem.getClusterMetricName(WorkerMetrics.BYTES_WRITTEN_UFS_ALL),\n-        \"Under Filesystem Write\", true);\n-\n-    mPrintStream.println(\"\\nTotal IO Throughput (Last Minute): \");\n-    printMetric(MetricsSystem.getClusterMetricName(ClientMetrics.BYTES_READ_LOCAL_THROUGHPUT),\n-        \"Short-circuit Read\", true);\n-    printMetric(MetricsSystem.getClusterMetricName(WorkerMetrics.BYTES_READ_DOMAIN_THROUGHPUT),\n-        \"Short-circuit Read (Domain Socket)\", true);\n-    printMetric(MetricsSystem.getClusterMetricName(WorkerMetrics.BYTES_READ_ALLUXIO_THROUGHPUT),\n-        \"From Remote Instances\", true);\n-    printMetric(MetricsSystem.getClusterMetricName(WorkerMetrics.BYTES_READ_UFS_THROUGHPUT),\n-        \"Under Filesystem Read\", true);\n-    printMetric(MetricsSystem.getClusterMetricName(WorkerMetrics.BYTES_WRITTEN_ALLUXIO_THROUGHPUT),\n-        \"Alluxio Write\", true);\n-    printMetric(MetricsSystem.getClusterMetricName(WorkerMetrics.BYTES_WRITTEN_DOMAIN_THROUGHPUT),\n-        \"Alluxio Write (Domain Socket)\", true);\n-    printMetric(MetricsSystem.getClusterMetricName(WorkerMetrics.BYTES_WRITTEN_UFS_THROUGHPUT),\n-        \"Under Filesystem Write\", true);\n-\n-    mPrintStream.println(\"\\nCache Hit Rate (Percentage): \");\n-    long bytesReadTotal = bytesReadLocal + bytesReadRemote + bytesReadUfs;\n-    String cacheHitLocalPercentage = String.format(\"%.2f\",\n-        (bytesReadTotal > 0) ? (100D * bytesReadLocal / bytesReadTotal) : 0);\n-    String cacheHitRemotePercentage = String.format(\"%.2f\",\n-        (bytesReadTotal > 0) ? (100D * bytesReadRemote / bytesReadTotal) : 0);\n-    String cacheMissPercentage = String.format(\"%.2f\",\n-        (bytesReadTotal > 0) ? (100D * bytesReadUfs / bytesReadTotal) : 0);\n-\n-    mPrintStream.println(INDENT\n-        + String.format(mInfoFormat, \"Alluxio Local\", cacheHitLocalPercentage));\n-    mPrintStream.println(INDENT\n-        + String.format(mInfoFormat, \"Alluxio Remote\", cacheHitRemotePercentage));\n-    mPrintStream.println(INDENT\n-        + String.format(mInfoFormat, \"Miss\", cacheMissPercentage));\n-\n-    mPrintStream.println(\"\\nLogical Operations: \");\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.DIRECTORIES_CREATED),\n-        \"Directories Created\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.FILE_BLOCK_INFOS_GOT),\n-        \"File Block Infos Got\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.FILE_INFOS_GOT),\n-        \"File Infos Got\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.FILES_COMPLETED),\n-        \"Files Completed\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.FILES_CREATED),\n-        \"Files Created\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.FILES_FREED),\n-        \"Files Freed\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.FILES_PERSISTED),\n-        \"Files Persisted\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.NEW_BLOCKS_GOT),\n-        \"New Blocks Got\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.PATHS_DELETED),\n-        \"Paths Deleted\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.PATHS_MOUNTED),\n-        \"Paths Mounted\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.PATHS_RENAMED),\n-        \"Paths Renamed\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.PATHS_UNMOUNTED),\n-        \"Paths Unmounted\", false);\n-\n-    mPrintStream.println(\"\\nRPC Invocations: \");\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.COMPLETE_FILE_OPS),\n-        \"Complete File Operations\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.CREATE_DIRECTORIES_OPS),\n-        \"Create Directory Operations\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.CREATE_FILES_OPS),\n-        \"Create File Operations\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.DELETE_PATHS_OPS),\n-        \"Delete Path Operations\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.FREE_FILE_OPS),\n-        \"Free File Operations\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.GET_FILE_BLOCK_INFO_OPS),\n-        \"Get File Block Info Operations\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.GET_FILE_INFO_OPS),\n-        \"Get File Info Operations\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.GET_NEW_BLOCK_OPS),\n-        \"Get New Block Operations\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.MOUNT_OPS),\n-        \"Mount Operations\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.RENAME_PATH_OPS),\n-        \"Rename Path Operations\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.SET_ACL_OPS),\n-        \"Set ACL Operations\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.SET_ATTRIBUTE_OPS),\n-        \"Set Attribute Operations\", false);\n-    printMetric(MetricsSystem.getMasterMetricName(MasterMetrics.UNMOUNT_OPS),\n-        \"Unmount Operations\", false);\n-\n-    // TODO(lu) improve printout info to sync with web UI\n-    mPrintStream.println(\"\\nOther Metrics: \");\n-    // Some property names are too long to fit in previous info format\n-    mInfoFormat = \"%s  (Type: %s, Value: %s)\";\n-    for (Map.Entry<String, MetricValue> entry : mMetricsMap.entrySet()) {\n-      String value = entry.getValue().hasStringValue() ? entry.getValue().getStringValue() :\n-          getFormattedDoubleValue(entry.getValue().getDoubleValue());\n-      mPrintStream.println(INDENT + String.format(mInfoFormat,\n-          entry.getKey(), entry.getValue().getMetricType(), value));\n+    mMetricsMap = mMetricsMasterClient.getMetrics();\n+    SortedSet<String> names = new TreeSet<>(mMetricsMap.keySet());\n+    for (String name : names) {\n+      MetricValue metricValue = mMetricsMap.get(name);\n+      String strValue;\n+      if (metricValue.hasStringValue()) {\n+        strValue = metricValue.getStringValue();\n+      } else {\n+        double doubleValue = metricValue.getDoubleValue();\n+        if (name.contains(BYTES_METRIC_IDENTIFIER)) {\n+          // Bytes long can be transformed to human-readable format\n+          strValue = FormatUtils.getSizeFromBytes((long) doubleValue);\n+          if (name.contains(THROUGHPUT_METRIC_IDENTIFIER)) {\n+            // throughput is calculated as one-minute exponentially-weighted moving average rate\n+            strValue = strValue + \"/min\";\n+          }\n+        } else if (DoubleMath.isMathematicalInteger(doubleValue)) {\n+          strValue = DECIMAL_FORMAT.format((long) doubleValue);\n+        } else {\n+          strValue = String.valueOf(doubleValue);\n+        }\n+      }\n+      mPrintStream.printf(INFO_FORMAT, name, metricValue.getMetricType(), strValue);\n     }\n     return 0;\n   }\n-\n-  /**\n-   * Prints the metrics information.\n-   *\n-   * @param metricName the metric name to get a metric value\n-   * @param nickName the metric name to print\n-   * @param valueIsBytes whether the metric value is bytes\n-   */\n-  private void printMetric(String metricName, String nickName, boolean valueIsBytes) {\n-    if (mMetricsMap == null || !mMetricsMap.containsKey(metricName)) {\n-      return;\n-    }\n-    MetricValue value = mMetricsMap.get(metricName);\n-    String formattedValue = value.hasStringValue() ? value.getStringValue()\n-        : valueIsBytes ? FormatUtils.getSizeFromBytes((long) value.getDoubleValue())\n-        : getFormattedDoubleValue(value.getDoubleValue());\n-\n-    mPrintStream.println(INDENT + String.format(mInfoFormat,\n-        nickName == null ? metricName : nickName, formattedValue));\n-    mMetricsMap.remove(metricName);\n-  }\n-\n-  private String getFormattedDoubleValue(double value) {\n-    if (DoubleMath.isMathematicalInteger(value)) {\n-      return DECIMAL_FORMAT.format((long) value);\n-    } else {\n-      return String.valueOf(value);\n-    }\n-  }\n }\n"}}, {"oid": "7090d49c0ef8507f314407f59d8689088ac4d7ad", "url": "https://github.com/Alluxio/alluxio/commit/7090d49c0ef8507f314407f59d8689088ac4d7ad", "message": "Modify fsadmin report metrics to show all metrics", "committedDate": "2020-01-24T19:13:42Z", "type": "commit"}, {"oid": "1490f28655241b11f6a229e610107703e33f97ae", "url": "https://github.com/Alluxio/alluxio/commit/1490f28655241b11f6a229e610107703e33f97ae", "message": "fix test", "committedDate": "2020-01-24T20:56:04Z", "type": "commit"}, {"oid": "f299daef06d2da789ae0484d182e8daf383aefa5", "url": "https://github.com/Alluxio/alluxio/commit/f299daef06d2da789ae0484d182e8daf383aefa5", "message": "small fix", "committedDate": "2020-01-24T21:12:08Z", "type": "commit"}, {"oid": "5ea721602ec2d3355b0a51bf1dade5e9da9919e8", "url": "https://github.com/Alluxio/alluxio/commit/5ea721602ec2d3355b0a51bf1dade5e9da9919e8", "message": "fix MetricsCommandIntegrationTest", "committedDate": "2020-01-24T22:17:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyOTM5Ng==", "url": "https://github.com/Alluxio/alluxio/pull/10782#discussion_r371529396", "bodyText": "is the cast here correct? Or should we make numFiles + 1 a double (applies to all cases in tests)", "author": "calvinjia", "createdAt": "2020-01-27T22:56:53Z", "path": "tests/src/test/java/alluxio/server/ft/journal/TriggeredCheckpointTest.java", "diffHunk": "@@ -107,9 +107,9 @@ private void createFiles(MultiProcessCluster cluster, int numFiles)\n     for (int i = 0; i < numFiles; i++) {\n       fs.createFile(new AlluxioURI(\"/file\" + i)).close();\n     }\n-    MetaMasterClient meta = cluster.getMetaMasterClient();\n-    assertEquals(numFiles + 1,\n-        meta.getMetrics().get(\"Master.\" + MasterMetrics.TOTAL_PATHS).getLongValue());\n+    MetricsMasterClient metricsMasterClient = cluster.getMetricsMasterClient();\n+    assertEquals(numFiles + 1, (long) metricsMasterClient\n+        .getMetrics().get(\"Master.\" + MasterMetrics.TOTAL_PATHS).getDoubleValue());", "originalCommit": "5ea721602ec2d3355b0a51bf1dade5e9da9919e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYyMzExOQ==", "url": "https://github.com/Alluxio/alluxio/pull/10782#discussion_r371623119", "bodyText": "The reason that I make double -> long is that assertEquals(double,double) is deprecated and may have some problems in double comparison.", "author": "LuQQiu", "createdAt": "2020-01-28T06:07:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyOTM5Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyOTk1Nw==", "url": "https://github.com/Alluxio/alluxio/pull/10782#discussion_r371529957", "bodyText": "Do we want to use tabs or something for pretty alignment?", "author": "calvinjia", "createdAt": "2020-01-27T22:58:36Z", "path": "shell/src/main/java/alluxio/cli/fsadmin/report/MetricsCommand.java", "diffHunk": "@@ -11,44 +11,44 @@\n \n package alluxio.cli.fsadmin.report;\n \n-import alluxio.client.meta.MetaMasterClient;\n+import alluxio.client.metrics.MetricsMasterClient;\n import alluxio.grpc.MetricValue;\n-import alluxio.metrics.ClientMetrics;\n-import alluxio.metrics.MasterMetrics;\n-import alluxio.metrics.MetricsSystem;\n-import alluxio.metrics.WorkerMetrics;\n import alluxio.util.FormatUtils;\n \n+import com.google.common.math.DoubleMath;\n+\n import java.io.IOException;\n import java.io.PrintStream;\n import java.text.DecimalFormat;\n import java.text.DecimalFormatSymbols;\n import java.util.Locale;\n import java.util.Map;\n-import java.util.TreeMap;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n \n /**\n  * Prints Alluxio metrics information.\n  */\n public class MetricsCommand {\n+  private static final String BYTES_METRIC_IDENTIFIER = \"Bytes\";\n+  private static final String THROUGHPUT_METRIC_IDENTIFIER = \"Throughput\";\n   private static final DecimalFormat DECIMAL_FORMAT\n       = new DecimalFormat(\"###,###.#####\", new DecimalFormatSymbols(Locale.US));\n-  private static final String INDENT = \"    \";\n+  private static final String INFO_FORMAT = \"%s  (Type: %s, Value: %s)%n\";", "originalCommit": "5ea721602ec2d3355b0a51bf1dade5e9da9919e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYyMzMzMA==", "url": "https://github.com/Alluxio/alluxio/pull/10782#discussion_r371623330", "bodyText": "We have no categories in the new way of printing all the metrics. Previously indent is used for separating category name and its values. So I remove the indent.", "author": "LuQQiu", "createdAt": "2020-01-28T06:08:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyOTk1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f3ca671825fa0c4b1a8b2b8c0cb0c89c491f71c6", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/fsadmin/report/MetricsCommand.java b/shell/src/main/java/alluxio/cli/fsadmin/report/MetricsCommand.java\nindex 79bdb4061f..7b7d696c1e 100644\n--- a/shell/src/main/java/alluxio/cli/fsadmin/report/MetricsCommand.java\n+++ b/shell/src/main/java/alluxio/cli/fsadmin/report/MetricsCommand.java\n\n@@ -13,6 +13,7 @@ package alluxio.cli.fsadmin.report;\n \n import alluxio.client.metrics.MetricsMasterClient;\n import alluxio.grpc.MetricValue;\n+import alluxio.metrics.MetricsSystem;\n import alluxio.util.FormatUtils;\n \n import com.google.common.math.DoubleMath;\n"}}, {"oid": "f3ca671825fa0c4b1a8b2b8c0cb0c89c491f71c6", "url": "https://github.com/Alluxio/alluxio/commit/f3ca671825fa0c4b1a8b2b8c0cb0c89c491f71c6", "message": "Only prints Alluxio metrics", "committedDate": "2020-01-28T06:21:44Z", "type": "commit"}, {"oid": "72bafb6e025348e4523befe63930abcbe7ef26c1", "url": "https://github.com/Alluxio/alluxio/commit/72bafb6e025348e4523befe63930abcbe7ef26c1", "message": "Fix metricsCommandTest", "committedDate": "2020-01-28T06:42:27Z", "type": "commit"}]}