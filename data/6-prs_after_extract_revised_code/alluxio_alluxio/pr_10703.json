{"pr_number": 10703, "pr_title": "Implement page stores", "pr_createdAt": "2020-01-06T22:28:10Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10703", "timeline": [{"oid": "b224400d0ccd7984d6b28955469498405bf41c86", "url": "https://github.com/Alluxio/alluxio/commit/b224400d0ccd7984d6b28955469498405bf41c86", "message": "basic LocalPageStore impl", "committedDate": "2020-01-06T22:28:32Z", "type": "commit"}, {"oid": "b224400d0ccd7984d6b28955469498405bf41c86", "url": "https://github.com/Alluxio/alluxio/commit/b224400d0ccd7984d6b28955469498405bf41c86", "message": "basic LocalPageStore impl", "committedDate": "2020-01-06T22:28:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUyODk2Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10703#discussion_r363528963", "bodyText": "Use IllegalArgumentException?", "author": "apc999", "createdAt": "2020-01-06T23:20:32Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -23,11 +25,35 @@\n public interface PageStore {\n \n   /**\n+   * This enum represents the different page store implementations that can be instantiated.\n+   */\n+  enum StoreType {\n+    /**\n+     * A simple store with pages on the local filesystem\n+     */\n+    LOCAL,\n+    /**\n+     * A store that utilizes RocksDB to store and retrieve pages.\n+     */\n+    ROCKS,\n+  }\n+\n+  /**\n+   * Creates a new {@link PageStore}.\n+   *\n+   * @param type the type of page store to create\n+   * @param dir the root storage directory\n    * @return a PageStore instance\n    */\n-  static PageStore create() {\n-    // return corresponding DataStore impl\n-    return null;\n+  static PageStore create(StoreType type, String dir) {\n+    switch (type) {\n+      case LOCAL:\n+        return new LocalPageStore(dir);\n+      case ROCKS:\n+        throw new RuntimeException(\"rocksdb local store not yet supported\");\n+      default:\n+        throw new RuntimeException(\"Incompatible PageStore \" + type + \" specified\");", "originalCommit": "b224400d0ccd7984d6b28955469498405bf41c86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4Mzg5Nw==", "url": "https://github.com/Alluxio/alluxio/pull/10703#discussion_r363983897", "bodyText": "done", "author": "ZacBlanco", "createdAt": "2020-01-07T22:31:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUyODk2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "232f0121bfb4d671548b597e9153a06fc729e872", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java b/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java\nindex ebde271db7..9d68952b0c 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java\n\n@@ -22,37 +25,23 @@ import java.nio.channels.WritableByteChannel;\n  * A simple abstration on the storage to put, get and delete pages. The implementation of this class\n  * does not need to provide thread-safety.\n  */\n-public interface PageStore {\n-\n-  /**\n-   * This enum represents the different page store implementations that can be instantiated.\n-   */\n-  enum StoreType {\n-    /**\n-     * A simple store with pages on the local filesystem\n-     */\n-    LOCAL,\n-    /**\n-     * A store that utilizes RocksDB to store and retrieve pages.\n-     */\n-    ROCKS,\n-  }\n+public interface PageStore extends AutoCloseable {\n \n   /**\n    * Creates a new {@link PageStore}.\n    *\n-   * @param type the type of page store to create\n-   * @param dir the root storage directory\n+   * @param options the options to instantiate the page store\n    * @return a PageStore instance\n    */\n-  static PageStore create(StoreType type, String dir) {\n-    switch (type) {\n+  static PageStore create(PageStoreOptions options) {\n+    switch (options.getType()) {\n       case LOCAL:\n-        return new LocalPageStore(dir);\n+        return new LocalPageStore(options.toOptions());\n       case ROCKS:\n-        throw new RuntimeException(\"rocksdb local store not yet supported\");\n+        return new RocksPageStore(options.toOptions());\n       default:\n-        throw new RuntimeException(\"Incompatible PageStore \" + type + \" specified\");\n+        throw new IllegalArgumentException(\n+            \"Incompatible PageStore \" + options.getType() + \" specified\");\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUzNTAwMQ==", "url": "https://github.com/Alluxio/alluxio/pull/10703#discussion_r363535001", "bodyText": "is the signature of this factory method bound to specific implementation? e.g., dir only makes sense if the impl is backed by file systems. I would leave the signature of the factory method minimal. You can get the dir argument by configuration inside the factory method.", "author": "apc999", "createdAt": "2020-01-06T23:43:48Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -23,11 +25,35 @@\n public interface PageStore {\n \n   /**\n+   * This enum represents the different page store implementations that can be instantiated.\n+   */\n+  enum StoreType {\n+    /**\n+     * A simple store with pages on the local filesystem\n+     */\n+    LOCAL,\n+    /**\n+     * A store that utilizes RocksDB to store and retrieve pages.\n+     */\n+    ROCKS,\n+  }\n+\n+  /**\n+   * Creates a new {@link PageStore}.\n+   *\n+   * @param type the type of page store to create\n+   * @param dir the root storage directory\n    * @return a PageStore instance\n    */\n-  static PageStore create() {\n-    // return corresponding DataStore impl\n-    return null;\n+  static PageStore create(StoreType type, String dir) {", "originalCommit": "b224400d0ccd7984d6b28955469498405bf41c86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4Mzg2OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10703#discussion_r363983869", "bodyText": "updated the pattern to something different. PTAL", "author": "ZacBlanco", "createdAt": "2020-01-07T22:31:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUzNTAwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "232f0121bfb4d671548b597e9153a06fc729e872", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java b/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java\nindex ebde271db7..9d68952b0c 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java\n\n@@ -22,37 +25,23 @@ import java.nio.channels.WritableByteChannel;\n  * A simple abstration on the storage to put, get and delete pages. The implementation of this class\n  * does not need to provide thread-safety.\n  */\n-public interface PageStore {\n-\n-  /**\n-   * This enum represents the different page store implementations that can be instantiated.\n-   */\n-  enum StoreType {\n-    /**\n-     * A simple store with pages on the local filesystem\n-     */\n-    LOCAL,\n-    /**\n-     * A store that utilizes RocksDB to store and retrieve pages.\n-     */\n-    ROCKS,\n-  }\n+public interface PageStore extends AutoCloseable {\n \n   /**\n    * Creates a new {@link PageStore}.\n    *\n-   * @param type the type of page store to create\n-   * @param dir the root storage directory\n+   * @param options the options to instantiate the page store\n    * @return a PageStore instance\n    */\n-  static PageStore create(StoreType type, String dir) {\n-    switch (type) {\n+  static PageStore create(PageStoreOptions options) {\n+    switch (options.getType()) {\n       case LOCAL:\n-        return new LocalPageStore(dir);\n+        return new LocalPageStore(options.toOptions());\n       case ROCKS:\n-        throw new RuntimeException(\"rocksdb local store not yet supported\");\n+        return new RocksPageStore(options.toOptions());\n       default:\n-        throw new RuntimeException(\"Incompatible PageStore \" + type + \" specified\");\n+        throw new IllegalArgumentException(\n+            \"Incompatible PageStore \" + options.getType() + \" specified\");\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzYxNjM1MQ==", "url": "https://github.com/Alluxio/alluxio/pull/10703#discussion_r363616351", "bodyText": "do we just delete the file not the parent dirs? will a lot of empty dirs be left after running this a while?", "author": "apc999", "createdAt": "2020-01-07T07:12:24Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ *\n+ */\n+\n+package alluxio.client.file.cache.store;\n+\n+import alluxio.Constants;\n+import alluxio.client.file.cache.PageStore;\n+import alluxio.resource.ResourcePool;\n+\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * The {@link LocalPageStore} is an implementation of {@link PageStore} which\n+ * stores all pages in a directory somewhere on the local disk.\n+ */\n+@NotThreadSafe\n+public class LocalPageStore implements PageStore {\n+\n+  private final ResourcePool<ByteBuffer> mBuffers;\n+\n+  private final String mRoot;\n+\n+  /**\n+   * Creates a new instance of {@link LocalPageStore}.\n+   *\n+   * @param rootDir the root directory where pages are stored\n+   */\n+  public LocalPageStore(String rootDir) {\n+    this(rootDir, Constants.MB, 32 * Constants.MB);\n+  }\n+\n+  /**\n+   * Creates a new instance of {@link LocalPageStore}.\n+   *\n+   * @param rootDir the root directory where pages are stored\n+   * @param bufferSize the size in bytes of the internal buffers used to copy data\n+   * @param maxSize the size in bytes that all internal buffers should use\n+   */\n+  public LocalPageStore(String rootDir, int bufferSize, int maxSize) {\n+    mRoot = rootDir;\n+    int numBuffers = maxSize / bufferSize;\n+    mBuffers = new ResourcePool<ByteBuffer>(numBuffers) {\n+      @Override\n+      public void close() {\n+      }\n+\n+      @Override\n+      protected ByteBuffer createNewResource() {\n+        return ByteBuffer.wrap(new byte[bufferSize]);\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public int put(long fileId, long pageIndex, ReadableByteChannel src) throws IOException {\n+    Path p = getFilePath(fileId, pageIndex);\n+    if (!Files.exists(p)) {\n+      Files.createDirectories(p.getParent());\n+      Files.createFile(p);\n+    }\n+    int written = 0;\n+    try (FileOutputStream fos = new FileOutputStream(p.toFile(), false)) {\n+      ByteBuffer b = mBuffers.acquire();\n+      b.clear();\n+      try (FileChannel chan = fos.getChannel()) {\n+        while (src.read(b) > 0) {\n+          b.flip();\n+          written += chan.write(b);\n+          b.clear();\n+        }\n+      } finally {\n+        mBuffers.release(b);\n+      }\n+    }\n+    return written;\n+  }\n+\n+  @Override\n+  public int get(long fileId, long pageIndex, WritableByteChannel dst) throws IOException {\n+    int count = 0;\n+    Path p = getFilePath(fileId, pageIndex);\n+    if (!Files.exists(p)) {\n+      throw new FileNotFoundException(p.toString());\n+    }\n+    try (FileInputStream fis = new FileInputStream(p.toFile())) {\n+      ByteBuffer b = mBuffers.acquire();\n+      b.clear();\n+      try (FileChannel chan = fis.getChannel()) {\n+        while (chan.read(b) > 0) {\n+          b.flip();\n+          count += dst.write(b);\n+          b.clear();\n+        }\n+      } finally {\n+        mBuffers.release(b);\n+      }\n+    }\n+    return count;\n+  }\n+\n+  @Override\n+  public void delete(long fileId, long pageIndex) throws IOException {\n+    Files.delete(getFilePath(fileId, pageIndex));", "originalCommit": "b224400d0ccd7984d6b28955469498405bf41c86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4MzY2OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10703#discussion_r363983669", "bodyText": "updated", "author": "ZacBlanco", "createdAt": "2020-01-07T22:30:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzYxNjM1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "232f0121bfb4d671548b597e9153a06fc729e872", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java b/core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java\nindex 9c88efd8e1..388f28a1b8 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java\n\n@@ -12,10 +12,14 @@\n \n package alluxio.client.file.cache.store;\n \n-import alluxio.Constants;\n import alluxio.client.file.cache.PageStore;\n import alluxio.resource.ResourcePool;\n \n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzYxNjg0NA==", "url": "https://github.com/Alluxio/alluxio/pull/10703#discussion_r363616844", "bodyText": "test delete and other conditions?", "author": "apc999", "createdAt": "2020-01-07T07:14:29Z", "path": "core/client/fs/src/test/java/alluxio/client/file/cache/store/LocalPageStoreTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package alluxio.client.file.cache.store;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import alluxio.client.file.cache.PageStore;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+\n+public class LocalPageStoreTest {", "originalCommit": "b224400d0ccd7984d6b28955469498405bf41c86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4Mzc4Mg==", "url": "https://github.com/Alluxio/alluxio/pull/10703#discussion_r363983782", "bodyText": "I will eventually add more tests in a follow-up PR", "author": "ZacBlanco", "createdAt": "2020-01-07T22:30:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzYxNjg0NA=="}], "type": "inlineReview", "revised_code": {"commit": "232f0121bfb4d671548b597e9153a06fc729e872", "chunk": "diff --git a/core/client/fs/src/test/java/alluxio/client/file/cache/store/LocalPageStoreTest.java b/core/client/fs/src/test/java/alluxio/client/file/cache/store/LocalPageStoreTest.java\nindex e7f3bb58fe..9c4c4f4000 100644\n--- a/core/client/fs/src/test/java/alluxio/client/file/cache/store/LocalPageStoreTest.java\n+++ b/core/client/fs/src/test/java/alluxio/client/file/cache/store/LocalPageStoreTest.java\n\n@@ -1,9 +1,22 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ *\n+ */\n+\n package alluxio.client.file.cache.store;\n \n import static org.junit.Assert.assertEquals;\n \n import alluxio.client.file.cache.PageStore;\n \n+import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n"}}, {"oid": "232f0121bfb4d671548b597e9153a06fc729e872", "url": "https://github.com/Alluxio/alluxio/commit/232f0121bfb4d671548b597e9153a06fc729e872", "message": "add rocks page store", "committedDate": "2020-01-07T22:22:43Z", "type": "commit"}, {"oid": "8285e98f27138f1b038e000ad7af8686d8d9da6c", "url": "https://github.com/Alluxio/alluxio/commit/8285e98f27138f1b038e000ad7af8686d8d9da6c", "message": "Properly throw PageNotFoundException", "committedDate": "2020-01-07T22:27:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA4MzcwNA==", "url": "https://github.com/Alluxio/alluxio/pull/10703#discussion_r364083704", "bodyText": "append path of mRoot in the log msg>?", "author": "apc999", "createdAt": "2020-01-08T06:47:46Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ *\n+ */\n+\n+package alluxio.client.file.cache.store;\n+\n+import alluxio.client.file.cache.PageStore;\n+import alluxio.resource.ResourcePool;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * The {@link LocalPageStore} is an implementation of {@link PageStore} which\n+ * stores all pages in a directory somewhere on the local disk.\n+ */\n+@NotThreadSafe\n+public class LocalPageStore implements PageStore, AutoCloseable {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalPageStore.class);\n+\n+  private final ResourcePool<ByteBuffer> mBuffers;\n+\n+  private final String mRoot;\n+\n+  /**\n+   * Creates a new instance of {@link LocalPageStore}.\n+   *\n+   * @param options options for the local page store\n+   */\n+  public LocalPageStore(LocalPageStoreOptions options) {\n+    mRoot = options.getRootDir();\n+    mBuffers = new ResourcePool<ByteBuffer>(options.getBufferPoolSize()) {\n+      @Override\n+      public void close() {\n+      }\n+\n+      @Override\n+      protected ByteBuffer createNewResource() {\n+        return ByteBuffer.wrap(new byte[options.getBufferSize()]);\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public int put(long fileId, long pageIndex, ReadableByteChannel src) throws IOException {\n+    Path p = getFilePath(fileId, pageIndex);\n+    if (!Files.exists(p)) {\n+      Files.createDirectories(p.getParent());\n+      Files.createFile(p);\n+    }\n+    int written = 0;\n+    try (FileOutputStream fos = new FileOutputStream(p.toFile(), false)) {\n+      ByteBuffer b = mBuffers.acquire();\n+      b.clear();\n+      try (FileChannel chan = fos.getChannel()) {\n+        while (src.read(b) > 0) {\n+          b.flip();\n+          written += chan.write(b);\n+          b.clear();\n+        }\n+      } finally {\n+        mBuffers.release(b);\n+      }\n+    }\n+    return written;\n+  }\n+\n+  @Override\n+  public int get(long fileId, long pageIndex, WritableByteChannel dst)throws IOException,\n+      PageNotFoundException {\n+    int count = 0;\n+    Path p = getFilePath(fileId, pageIndex);\n+    if (!Files.exists(p)) {\n+      throw new PageNotFoundException(p.toString());\n+    }\n+    try (FileInputStream fis = new FileInputStream(p.toFile())) {\n+      ByteBuffer b = mBuffers.acquire();\n+      b.clear();\n+      try (FileChannel chan = fis.getChannel()) {\n+        while (chan.read(b) > 0) {\n+          b.flip();\n+          count += dst.write(b);\n+          b.clear();\n+        }\n+      } finally {\n+        mBuffers.release(b);\n+      }\n+    }\n+    return count;\n+  }\n+\n+  @Override\n+  public void delete(long fileId, long pageIndex) throws IOException, PageNotFoundException {\n+    Path p = getFilePath(fileId, pageIndex);\n+    if (!Files.exists(p)) {\n+      throw new PageNotFoundException(p.toString());\n+    }\n+    Files.delete(p);\n+    if (!Files.newDirectoryStream(p.getParent()).iterator().hasNext()) {\n+      Files.delete(p.getParent());\n+    }\n+  }\n+\n+  private Path getFilePath(long fileId, long pageIndex) {\n+    return Paths.get(mRoot, Long.toString(fileId), Long.toString(pageIndex));\n+  }\n+\n+  @Override\n+  public void close() {\n+    try {\n+      FileUtils.deleteDirectory(new File(mRoot));\n+    } catch (IOException e) {\n+      LOG.warn(\"Failed to clean up local page store directory\", e);", "originalCommit": "8285e98f27138f1b038e000ad7af8686d8d9da6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d1a1f76d1543aa6fee5013a7c3985ffc6da7427", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java b/core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java\nindex 55fa7c7dec..b6a7df3265 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java\n\n@@ -21,16 +21,15 @@ import org.slf4j.LoggerFactory;\n \n import java.io.File;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.nio.channels.FileChannel;\n import java.nio.channels.ReadableByteChannel;\n-import java.nio.channels.WritableByteChannel;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n import javax.annotation.concurrent.NotThreadSafe;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA4NDM2MA==", "url": "https://github.com/Alluxio/alluxio/pull/10703#discussion_r364084360", "bodyText": "AlluxioException is deprecated.  I would not introduce a new AlluxioException. See comments in the signature", "author": "apc999", "createdAt": "2020-01-08T06:51:04Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/PageNotFoundException.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ *\n+ */\n+\n+package alluxio.client.file.cache.store;\n+\n+import alluxio.exception.AlluxioException;\n+\n+import java.nio.channels.WritableByteChannel;\n+\n+/**\n+ * An exception that should be thrown when a page store implementation cannot find a page using\n+ * {@link alluxio.client.file.cache.PageStore#get(long, long, WritableByteChannel)} or\n+ * {@link alluxio.client.file.cache.PageStore#delete(long, long)}.\n+ */\n+public class PageNotFoundException extends AlluxioException {", "originalCommit": "8285e98f27138f1b038e000ad7af8686d8d9da6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d1a1f76d1543aa6fee5013a7c3985ffc6da7427", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/store/PageNotFoundException.java b/core/client/fs/src/main/java/alluxio/client/file/cache/store/PageNotFoundException.java\nindex dc0d8e27bc..3dd8ef5bd8 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/store/PageNotFoundException.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/store/PageNotFoundException.java\n\n@@ -14,11 +14,9 @@ package alluxio.client.file.cache.store;\n \n import alluxio.exception.AlluxioException;\n \n-import java.nio.channels.WritableByteChannel;\n-\n /**\n  * An exception that should be thrown when a page store implementation cannot find a page using\n- * {@link alluxio.client.file.cache.PageStore#get(long, long, WritableByteChannel)} or\n+ * {@link alluxio.client.file.cache.PageStore#get(long, long)} or\n  * {@link alluxio.client.file.cache.PageStore#delete(long, long)}.\n  */\n public class PageNotFoundException extends AlluxioException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA4NjUxMw==", "url": "https://github.com/Alluxio/alluxio/pull/10703#discussion_r364086513", "bodyText": "string concat can be inefficient. consider sth:\nByteBuffer buffer = ByteBuffer.allocate(Long.BYTES);\nbuffer.putLong(x);", "author": "apc999", "createdAt": "2020-01-08T07:01:49Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ *\n+ */\n+\n+package alluxio.client.file.cache.store;\n+\n+import alluxio.client.file.cache.PageStore;\n+import alluxio.resource.ResourcePool;\n+\n+import com.google.common.base.Preconditions;\n+import org.apache.commons.io.FileUtils;\n+import org.rocksdb.Options;\n+import org.rocksdb.RocksDB;\n+import org.rocksdb.RocksDBException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.channels.WritableByteChannel;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A page store implementation which utilizes rocksDB to persist the data.\n+ */\n+@NotThreadSafe\n+public class RocksPageStore implements PageStore, AutoCloseable {\n+  private static final Logger LOG = LoggerFactory.getLogger(RocksPageStore.class);\n+\n+  private final String mRoot;\n+  private final ResourcePool<ByteBuffer> mBuffers;\n+  private final RocksDB mDb;\n+\n+  /**\n+   * Creates a new instance of {@link PageStore} backed by RocksDB.\n+   *\n+   * @param options options for the rocks page store\n+   */\n+  public RocksPageStore(RocksPageStoreOptions options) {\n+    Preconditions.checkArgument(options.getMaxPageSize() > 0);\n+    mRoot = options.getRootDir();\n+    RocksDB.loadLibrary();\n+    try {\n+      Options rocksOptions = new Options();\n+      rocksOptions.setCreateIfMissing(true);\n+      rocksOptions.setWriteBufferSize(options.getWriteBufferSize());\n+      rocksOptions.setCompressionType(options.getCompressionType());\n+      mDb = RocksDB.open(rocksOptions, options.getRootDir());\n+    } catch (RocksDBException e) {\n+      throw new RuntimeException(\"Couldn't open rocksDB database\", e);\n+    }\n+    mBuffers = new ResourcePool<ByteBuffer>(options.getMaxBufferPoolSize()) {\n+      @Override\n+      public void close() {\n+      }\n+\n+      @Override\n+      protected ByteBuffer createNewResource() {\n+        return ByteBuffer.wrap(new byte[options.getMaxPageSize()]);\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public int put(long fileId, long pageIndex, ReadableByteChannel src) throws IOException {\n+    ByteBuffer buf = mBuffers.acquire();\n+    buf.clear();\n+    try {\n+      int bytes = src.read(buf);\n+      buf.flip();\n+      byte[] arr = new byte[buf.remaining()];\n+      buf.get(arr);\n+      mDb.put(getPageKey(fileId, pageIndex), arr);\n+      return bytes;\n+    } catch (RocksDBException e) {\n+      throw new IOException(\"Failed to store page\", e);\n+    } finally {\n+      mBuffers.release(buf);\n+    }\n+  }\n+\n+  @Override\n+  public int get(long fileId, long pageIndex, WritableByteChannel dst) throws IOException,\n+      PageNotFoundException{\n+    try {\n+      byte[] page = mDb.get(getPageKey(fileId, pageIndex));\n+      if (page == null) {\n+        throw new PageNotFoundException(new String(getPageKey(fileId, pageIndex)));\n+      }\n+      return dst.write(ByteBuffer.wrap(page));\n+    } catch (RocksDBException e) {\n+      throw new IOException(\"Failed to retrieve page\", e);\n+    }\n+  }\n+\n+  @Override\n+  public void delete(long fileId, long pageIndex) throws PageNotFoundException {\n+    try {\n+      mDb.delete(getPageKey(fileId, pageIndex));\n+    } catch (RocksDBException e) {\n+      throw new PageNotFoundException(\"Failed to remove page\", e);\n+    }\n+  }\n+\n+  @Override\n+  public void close() {\n+    mDb.close();\n+    try {\n+      FileUtils.deleteDirectory(new File(mRoot));\n+    } catch (IOException e) {\n+      LOG.warn(\"Failed to clean up rocksDB root directory.\");\n+    }\n+  }\n+\n+  private byte[] getPageKey(long fileId, long pageIndex) {\n+    return (\"\" + fileId + \"\" + pageIndex).getBytes();", "originalCommit": "8285e98f27138f1b038e000ad7af8686d8d9da6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d1a1f76d1543aa6fee5013a7c3985ffc6da7427", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java b/core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java\nindex 4b86e24046..df32b4537a 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java\n\n@@ -23,11 +23,13 @@ import org.rocksdb.RocksDBException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.io.ByteArrayInputStream;\n import java.io.File;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n import java.nio.channels.ReadableByteChannel;\n-import java.nio.channels.WritableByteChannel;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n import javax.annotation.concurrent.NotThreadSafe;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA4Nzc3MA==", "url": "https://github.com/Alluxio/alluxio/pull/10703#discussion_r364087770", "bodyText": "nit: previously in this code base, we used to expose a factory method defaults() to create a new instance of options and make the constructor private. just a suggestion as code convention.", "author": "apc999", "createdAt": "2020-01-08T07:06:47Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStoreOptions.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ *\n+ */\n+\n+package alluxio.client.file.cache.store;\n+\n+import alluxio.Constants;\n+\n+/**\n+ * Options used to instantiate the {@link LocalPageStore}.\n+ */\n+public class LocalPageStoreOptions extends PageStoreOptions {\n+  /**\n+   * The root directory where data is stored.\n+   */\n+  private String mRootDir;\n+\n+  /**\n+   * The max number of buffers used to transfer data. Total memory usage will be equivalent to\n+   * {@link #mBufferPoolSize} * {@link #mBufferSize}\n+   */\n+  private int mBufferPoolSize;\n+\n+  /**\n+   * The size of the buffers used to transfer data. It is recommended to set this at or near the\n+   * expected max page size.\n+   */\n+  private int mBufferSize;\n+\n+  /**\n+   * Creates a new instance of {@link LocalPageStoreOptions}.\n+   */\n+  public LocalPageStoreOptions() {", "originalCommit": "8285e98f27138f1b038e000ad7af8686d8d9da6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDA4ODEwOA==", "url": "https://github.com/Alluxio/alluxio/pull/10703#discussion_r364088108", "bodyText": "instead of a new PageNotFoundException, can we reuse NotFoundException in alluxio state exception? We tend to stop introducing specific Alluxio exceptions but standardize on AlluxioStateException", "author": "apc999", "createdAt": "2020-01-08T07:08:31Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -49,16 +64,21 @@ static PageStore create() {\n    * @param dst destination channel to read this new page\n    * @return the number of bytes read\n    * @throws IOException\n+   * @throws PageNotFoundException when the page isn't found in the store\n    */\n-  int get(long fileId, long pageIndex, WritableByteChannel dst) throws IOException;\n+  int get(long fileId, long pageIndex, WritableByteChannel dst) throws IOException,\n+      PageNotFoundException;", "originalCommit": "8285e98f27138f1b038e000ad7af8686d8d9da6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d1a1f76d1543aa6fee5013a7c3985ffc6da7427", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java b/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java\nindex 9d68952b0c..f5833fd4b8 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java\n\n@@ -61,12 +69,11 @@ public interface PageStore extends AutoCloseable {\n    *\n    * @param fileId file indentifier\n    * @param pageIndex index of page within the file\n-   * @param dst destination channel to read this new page\n    * @return the number of bytes read\n    * @throws IOException\n    * @throws PageNotFoundException when the page isn't found in the store\n    */\n-  int get(long fileId, long pageIndex, WritableByteChannel dst) throws IOException,\n+  ReadableByteChannel get(long fileId, long pageIndex) throws IOException,\n       PageNotFoundException;\n \n   /**\n"}}, {"oid": "1d1a1f76d1543aa6fee5013a7c3985ffc6da7427", "url": "https://github.com/Alluxio/alluxio/commit/1d1a1f76d1543aa6fee5013a7c3985ffc6da7427", "message": "Update PageStore APIs", "committedDate": "2020-01-10T17:38:34Z", "type": "commit"}]}