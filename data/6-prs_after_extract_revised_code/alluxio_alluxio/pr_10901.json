{"pr_number": 10901, "pr_title": "Fix iteration for RocksBlockStore", "pr_createdAt": "2020-02-13T00:20:13Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10901", "timeline": [{"oid": "eb143ed94b582217b6e95c7a069b16a230ac9589", "url": "https://github.com/Alluxio/alluxio/commit/eb143ed94b582217b6e95c7a069b16a230ac9589", "message": "Fix Rocks block store iteration", "committedDate": "2020-02-13T00:16:34Z", "type": "commit"}, {"oid": "2b72b1db3ee45f2f47cf6b6a922a47b3482275c9", "url": "https://github.com/Alluxio/alluxio/commit/2b72b1db3ee45f2f47cf6b6a922a47b3482275c9", "message": "Add unit tests", "committedDate": "2020-02-13T00:16:47Z", "type": "commit"}, {"oid": "c10b996008c6d19009c74d3649dec534dbe64e62", "url": "https://github.com/Alluxio/alluxio/commit/c10b996008c6d19009c74d3649dec534dbe64e62", "message": "Add integration tests", "committedDate": "2020-02-13T00:16:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYyODQ4MA==", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378628480", "bodyText": "Can you describe this more, and the implications of a small one and a large one?\nAlso, what is \"size\"? rows? bytes?", "author": "gpang", "createdAt": "2020-02-13T03:01:49Z", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -1516,6 +1516,13 @@ public String toString() {\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.ENFORCE)\n           .setScope(Scope.MASTER)\n           .build();\n+  public static final PropertyKey MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE =\n+      new Builder(Name.MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE)\n+          .setDefaultValue(\"10000\")\n+          .setDescription(\"The read-ahead size for block iterator.\")", "originalCommit": "c10b996008c6d19009c74d3649dec534dbe64e62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2MTU2Mg==", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378661562", "bodyText": "bytes", "author": "ggezer", "createdAt": "2020-02-13T05:45:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYyODQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk1ODc2MA==", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378958760", "bodyText": "I see. Could you update the description to mention bytes, and maybe some of the implications of the size? For example, if we have a billion blocks, is reading 4mb at a time efficient enough? Should this be a larger size?", "author": "gpang", "createdAt": "2020-02-13T16:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYyODQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4MTg0OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378981849", "bodyText": "I guess 4MB suffices, as it'd prefetch about 10K inodes and 100K block-Ids. This should be enough as iterator content are ultimately written back to disk.", "author": "ggezer", "createdAt": "2020-02-13T16:42:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYyODQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "a489623278073bd55311bcbe0b8387fac87d04fc", "chunk": "diff --git a/core/common/src/main/java/alluxio/conf/PropertyKey.java b/core/common/src/main/java/alluxio/conf/PropertyKey.java\nindex 36a8e2137d..dba30267fa 100644\n--- a/core/common/src/main/java/alluxio/conf/PropertyKey.java\n+++ b/core/common/src/main/java/alluxio/conf/PropertyKey.java\n\n@@ -1518,7 +1518,7 @@ public final class PropertyKey implements Comparable<PropertyKey> {\n           .build();\n   public static final PropertyKey MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE =\n       new Builder(Name.MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE)\n-          .setDefaultValue(\"10000\")\n+          .setDefaultValue(\"4MB\")\n           .setDescription(\"The read-ahead size for block iterator.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.ENFORCE)\n           .setScope(Scope.MASTER)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYyOTY3Nw==", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378629677", "bodyText": "below, it uses setPrefixSameAsStart(). We don't need that anymore?", "author": "gpang", "createdAt": "2020-02-13T03:06:52Z", "path": "core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java", "diffHunk": "@@ -67,10 +70,11 @@\n   public RocksBlockStore(String baseDir) {\n     RocksDB.loadLibrary();\n     mDisableWAL = new WriteOptions().setDisableWAL(true);\n+    mIteratorOption = new ReadOptions().setReadaheadSize(\n+        ServerConfiguration.getInt(PropertyKey.MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE));", "originalCommit": "c10b996008c6d19009c74d3649dec534dbe64e62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2MjE0Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378662143", "bodyText": "This one uses RocksIterator.seek() for which this is fine.", "author": "ggezer", "createdAt": "2020-02-13T05:48:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYyOTY3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2a377a9d63b42583467c08e4d92ee6c3f48736d1", "chunk": "diff --git a/core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java b/core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java\nindex 005fc6580a..7b9828e97f 100644\n--- a/core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java\n+++ b/core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java\n\n@@ -71,7 +71,7 @@ public class RocksBlockStore implements BlockStore {\n     RocksDB.loadLibrary();\n     mDisableWAL = new WriteOptions().setDisableWAL(true);\n     mIteratorOption = new ReadOptions().setReadaheadSize(\n-        ServerConfiguration.getInt(PropertyKey.MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE));\n+        ServerConfiguration.getBytes(PropertyKey.MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE));\n     ColumnFamilyOptions cfOpts = new ColumnFamilyOptions()\n         .setMemTableConfig(new HashLinkedListMemTableConfig())\n         .setCompressionType(CompressionType.NO_COMPRESSION);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYyOTczMA==", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378629730", "bodyText": "why is this removed?", "author": "gpang", "createdAt": "2020-02-13T03:07:07Z", "path": "core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java", "diffHunk": "@@ -67,10 +70,11 @@\n   public RocksBlockStore(String baseDir) {\n     RocksDB.loadLibrary();\n     mDisableWAL = new WriteOptions().setDisableWAL(true);\n+    mIteratorOption = new ReadOptions().setReadaheadSize(\n+        ServerConfiguration.getInt(PropertyKey.MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE));\n     ColumnFamilyOptions cfOpts = new ColumnFamilyOptions()\n         .setMemTableConfig(new HashLinkedListMemTableConfig())\n-        .setCompressionType(CompressionType.NO_COMPRESSION)\n-        .useFixedLengthPrefixExtractor(8); // We always search using the initial long key", "originalCommit": "c10b996008c6d19009c74d3649dec534dbe64e62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NjQ0MA==", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378646440", "bodyText": "This will put rocks-db to prefix-seek mode. Please see description for more details.", "author": "ggezer", "createdAt": "2020-02-13T04:32:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYyOTczMA=="}], "type": "inlineReview", "revised_code": {"commit": "2a377a9d63b42583467c08e4d92ee6c3f48736d1", "chunk": "diff --git a/core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java b/core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java\nindex 005fc6580a..7b9828e97f 100644\n--- a/core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java\n+++ b/core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksBlockStore.java\n\n@@ -71,7 +71,7 @@ public class RocksBlockStore implements BlockStore {\n     RocksDB.loadLibrary();\n     mDisableWAL = new WriteOptions().setDisableWAL(true);\n     mIteratorOption = new ReadOptions().setReadaheadSize(\n-        ServerConfiguration.getInt(PropertyKey.MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE));\n+        ServerConfiguration.getBytes(PropertyKey.MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE));\n     ColumnFamilyOptions cfOpts = new ColumnFamilyOptions()\n         .setMemTableConfig(new HashLinkedListMemTableConfig())\n         .setCompressionType(CompressionType.NO_COMPRESSION);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYzMDExMg==", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378630112", "bodyText": "Should we make this larger?", "author": "gpang", "createdAt": "2020-02-13T03:08:54Z", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -1516,6 +1516,13 @@ public String toString() {\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.ENFORCE)\n           .setScope(Scope.MASTER)\n           .build();\n+  public static final PropertyKey MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE =\n+      new Builder(Name.MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE)\n+          .setDefaultValue(\"10000\")", "originalCommit": "c10b996008c6d19009c74d3649dec534dbe64e62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2MTY1MA==", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378661650", "bodyText": "I was under impression that it was count, but turns out it's bytes. Made it 4MB to start with.", "author": "ggezer", "createdAt": "2020-02-13T05:46:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYzMDExMg=="}], "type": "inlineReview", "revised_code": {"commit": "a489623278073bd55311bcbe0b8387fac87d04fc", "chunk": "diff --git a/core/common/src/main/java/alluxio/conf/PropertyKey.java b/core/common/src/main/java/alluxio/conf/PropertyKey.java\nindex 36a8e2137d..dba30267fa 100644\n--- a/core/common/src/main/java/alluxio/conf/PropertyKey.java\n+++ b/core/common/src/main/java/alluxio/conf/PropertyKey.java\n\n@@ -1518,7 +1518,7 @@ public final class PropertyKey implements Comparable<PropertyKey> {\n           .build();\n   public static final PropertyKey MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE =\n       new Builder(Name.MASTER_METASTORE_BLOCK_ITERATOR_READAHEAD_SIZE)\n-          .setDefaultValue(\"10000\")\n+          .setDefaultValue(\"4MB\")\n           .setDescription(\"The read-ahead size for block iterator.\")\n           .setConsistencyCheckLevel(ConsistencyCheckLevel.ENFORCE)\n           .setScope(Scope.MASTER)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYzMDYxNQ==", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378630615", "bodyText": "after the loop, we should check that the iterator is done?", "author": "gpang", "createdAt": "2020-02-13T03:11:12Z", "path": "core/server/master/src/test/java/alluxio/master/metastore/rocks/RocksBlockStoreTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.master.metastore.rocks;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import alluxio.master.metastore.BlockStore;\n+import alluxio.proto.meta.Block;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.util.Iterator;\n+\n+public class RocksBlockStoreTest {\n+  @Rule\n+  public TemporaryFolder mFolder = new TemporaryFolder();\n+\n+  @Test\n+  public void testPutGet() throws Exception {\n+    final int blockCount = 3;\n+    RocksBlockStore blockStore = new RocksBlockStore(mFolder.newFolder().getAbsolutePath());\n+    for (int i = 0; i < blockCount; i++) {\n+      blockStore.putBlock(i, Block.BlockMeta.newBuilder().setLength(i).build());\n+    }\n+\n+    for (int i = 0; i < blockCount; i++) {\n+      assertTrue(blockStore.getBlock(i).isPresent());\n+      assertEquals(i, blockStore.getBlock(i).get().getLength());\n+    }\n+  }\n+\n+  @Test\n+  public void testIterator() throws Exception {\n+    final int blockCount = 3;\n+    RocksBlockStore blockStore = new RocksBlockStore(mFolder.newFolder().getAbsolutePath());\n+    for (int i = 0; i < blockCount; i++) {\n+      blockStore.putBlock(i, Block.BlockMeta.newBuilder().setLength(i).build());\n+    }\n+\n+    Iterator<BlockStore.Block> iter = blockStore.iterator();\n+    for (int i = 0; i < blockCount; i++) {\n+      assertTrue(iter.hasNext());", "originalCommit": "c10b996008c6d19009c74d3649dec534dbe64e62", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9798fc8286f4509fdd1af47211f15a2c3180cb40", "chunk": "diff --git a/core/server/master/src/test/java/alluxio/master/metastore/rocks/RocksBlockStoreTest.java b/core/server/master/src/test/java/alluxio/master/metastore/rocks/RocksBlockStoreTest.java\nindex e499760ba2..88a1aa44d2 100644\n--- a/core/server/master/src/test/java/alluxio/master/metastore/rocks/RocksBlockStoreTest.java\n+++ b/core/server/master/src/test/java/alluxio/master/metastore/rocks/RocksBlockStoreTest.java\n\n@@ -12,6 +12,7 @@\n package alluxio.master.metastore.rocks;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n \n import alluxio.master.metastore.BlockStore;\n"}}, {"oid": "a489623278073bd55311bcbe0b8387fac87d04fc", "url": "https://github.com/Alluxio/alluxio/commit/a489623278073bd55311bcbe0b8387fac87d04fc", "message": "Change read-ahaed prop", "committedDate": "2020-02-13T05:44:28Z", "type": "commit"}, {"oid": "2a377a9d63b42583467c08e4d92ee6c3f48736d1", "url": "https://github.com/Alluxio/alluxio/commit/2a377a9d63b42583467c08e4d92ee6c3f48736d1", "message": "Add rock iterator utility", "committedDate": "2020-02-13T05:45:13Z", "type": "commit"}, {"oid": "428b669f5ef90cff91c28c4313b4cae13af2adda", "url": "https://github.com/Alluxio/alluxio/commit/428b669f5ef90cff91c28c4313b4cae13af2adda", "message": "fix style", "committedDate": "2020-02-13T05:46:38Z", "type": "commit"}, {"oid": "9798fc8286f4509fdd1af47211f15a2c3180cb40", "url": "https://github.com/Alluxio/alluxio/commit/9798fc8286f4509fdd1af47211f15a2c3180cb40", "message": "ut fix", "committedDate": "2020-02-13T05:47:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk1NzY3Mg==", "url": "https://github.com/Alluxio/alluxio/pull/10901#discussion_r378957672", "bodyText": "should this also use the read option like the other iterator?", "author": "gpang", "createdAt": "2020-02-13T16:05:21Z", "path": "core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksInodeStore.java", "diffHunk": "@@ -245,7 +245,8 @@ public boolean hasChildren(InodeDirectoryView inode, ReadOption option) {\n    * @return an iterator over stored inodes\n    */\n   public Iterator<InodeView> iterator() {\n-    return new RocksInodeViewIterator(db().newIterator(mInodesColumn.get()));\n+    return RocksUtils.createIterator(db().newIterator(mInodesColumn.get()),\n+        (iter) -> getMutable(Longs.fromByteArray(iter.key()), ReadOption.defaults()).get());", "originalCommit": "9798fc8286f4509fdd1af47211f15a2c3180cb40", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc28d3cf42a0276b6f2e33b606b26aaf35585b76", "chunk": "diff --git a/core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksInodeStore.java b/core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksInodeStore.java\nindex eb7cb0df3f..106c11eaa3 100644\n--- a/core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksInodeStore.java\n+++ b/core/server/master/src/main/java/alluxio/master/metastore/rocks/RocksInodeStore.java\n\n@@ -245,7 +250,7 @@ public class RocksInodeStore implements InodeStore {\n    * @return an iterator over stored inodes\n    */\n   public Iterator<InodeView> iterator() {\n-    return RocksUtils.createIterator(db().newIterator(mInodesColumn.get()),\n+    return RocksUtils.createIterator(db().newIterator(mInodesColumn.get(), mIteratorOption),\n         (iter) -> getMutable(Longs.fromByteArray(iter.key()), ReadOption.defaults()).get());\n   }\n \n"}}, {"oid": "a0905bf15d6eff3c4269e4f8692d618480950436", "url": "https://github.com/Alluxio/alluxio/commit/a0905bf15d6eff3c4269e4f8692d618480950436", "message": "fix prop", "committedDate": "2020-02-13T16:44:47Z", "type": "commit"}, {"oid": "fc28d3cf42a0276b6f2e33b606b26aaf35585b76", "url": "https://github.com/Alluxio/alluxio/commit/fc28d3cf42a0276b6f2e33b606b26aaf35585b76", "message": "Iterate inode-store with read-ahead", "committedDate": "2020-02-13T16:45:04Z", "type": "commit"}]}