{"pr_number": 11364, "pr_title": "Provide AlluxioJniFuse", "pr_createdAt": "2020-04-28T18:04:34Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11364", "timeline": [{"oid": "c47cd0a59f404f2182e558a5a8a60dc296873520", "url": "https://github.com/Alluxio/alluxio/commit/c47cd0a59f404f2182e558a5a8a60dc296873520", "message": "Add struct\n\nNow we can define jnr style structure, and access field just like jnr-fuse.", "committedDate": "2020-04-28T03:59:07Z", "type": "commit"}, {"oid": "e6f5d7dfb18c6393ef5a3640c08807b40ac56bdd", "url": "https://github.com/Alluxio/alluxio/commit/e6f5d7dfb18c6393ef5a3640c08807b40ac56bdd", "message": "Add AlluxioJniFuse.java & AlluxioJniFuseFileSystem.java\n\nMost codes are copied from former AlluxioFuse.", "committedDate": "2020-04-28T09:22:53Z", "type": "commit"}, {"oid": "8e596005bb9639ebee0bc6761d9c516152126e21", "url": "https://github.com/Alluxio/alluxio/commit/8e596005bb9639ebee0bc6761d9c516152126e21", "message": "Add libjnifuse\n\nNow we can run basic read-only AlluxioFuseFileSystem.\nNOTE: jni cache is not supported.", "committedDate": "2020-04-28T09:26:01Z", "type": "commit"}, {"oid": "625eeec855bd0e1040b5eee98c80f2013ad3ca45", "url": "https://github.com/Alluxio/alluxio/commit/625eeec855bd0e1040b5eee98c80f2013ad3ca45", "message": "Refactor libjnifuse", "committedDate": "2020-04-28T18:01:27Z", "type": "commit"}, {"oid": "633d4945ff4b6af1ac9341e2198ed7a3a272cd21", "url": "https://github.com/Alluxio/alluxio/commit/633d4945ff4b6af1ac9341e2198ed7a3a272cd21", "message": "Fix style and refactor package", "committedDate": "2020-04-29T01:30:30Z", "type": "commit"}, {"oid": "778bc66194618727549f1cb3a7ce817dc4f0cf1f", "url": "https://github.com/Alluxio/alluxio/commit/778bc66194618727549f1cb3a7ce817dc4f0cf1f", "message": "Improve Fuse Makefile", "committedDate": "2020-04-27T07:05:38Z", "type": "forcePushed"}, {"oid": "778bc66194618727549f1cb3a7ce817dc4f0cf1f", "url": "https://github.com/Alluxio/alluxio/commit/778bc66194618727549f1cb3a7ce817dc4f0cf1f", "message": "Improve Fuse Makefile", "committedDate": "2020-04-27T07:05:38Z", "type": "forcePushed"}, {"oid": "884c8e671c0b6ede80972b0018ad418f493cb9b4", "url": "https://github.com/Alluxio/alluxio/commit/884c8e671c0b6ede80972b0018ad418f493cb9b4", "message": "Revert unnecessary formatting", "committedDate": "2020-04-29T04:41:23Z", "type": "commit"}, {"oid": "e425edead51e52d2c929b6c9cf00dd63b04afbca", "url": "https://github.com/Alluxio/alluxio/commit/e425edead51e52d2c929b6c9cf00dd63b04afbca", "message": "Cleanup AlluxioFuse to reduce PR footprint", "committedDate": "2020-04-29T05:42:25Z", "type": "forcePushed"}, {"oid": "68bb678f2befaab21bdb1f4bcebacd754eaf41f3", "url": "https://github.com/Alluxio/alluxio/commit/68bb678f2befaab21bdb1f4bcebacd754eaf41f3", "message": "Cleanup AlluxioFuse to reduce PR footprint", "committedDate": "2020-04-29T06:38:41Z", "type": "forcePushed"}, {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4", "url": "https://github.com/Alluxio/alluxio/commit/07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4", "message": "Cleanup AlluxioFuse to reduce PR footprint", "committedDate": "2020-04-29T06:48:34Z", "type": "commit"}, {"oid": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4", "url": "https://github.com/Alluxio/alluxio/commit/07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4", "message": "Cleanup AlluxioFuse to reduce PR footprint", "committedDate": "2020-04-29T06:48:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5OTc0OA==", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417099748", "bodyText": "Introduce alluxio.jnifuse.FuseException  rather than still referencing jnrfuse", "author": "apc999", "createdAt": "2020-04-29T06:49:33Z", "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuse.java", "diffHunk": "@@ -60,32 +94,29 @@ public static void main(String[] args) {\n       System.exit(1);\n     }\n \n-    final FileSystem tfs = FileSystem.Factory.create(conf);\n-    final AlluxioFuseFileSystem fs = new AlluxioFuseFileSystem(tfs, opts, conf);\n-    final List<String> fuseOpts = opts.getFuseOpts();\n-    // Force direct_io in FUSE: writes and reads bypass the kernel page\n-    // cache and go directly to alluxio. This avoids extra memory copies\n-    // in the write path.\n-    fuseOpts.add(\"-odirect_io\");\n+    try (final FileSystem fs = FileSystem.Factory.create(conf)) {\n+      final AlluxioFuseFileSystem fuseFs = new AlluxioFuseFileSystem(fs, opts, conf);\n+      final List<String> fuseOpts = opts.getFuseOpts();\n+      // Force direct_io in FUSE: writes and reads bypass the kernel page\n+      // cache and go directly to alluxio. This avoids extra memory copies\n+      // in the write path.\n+      // TODO: support kernel_cache (https://github.com/Alluxio/alluxio/issues/10840)\n+      fuseOpts.add(\"-odirect_io\");\n \n-    try {\n-      fs.mount(Paths.get(opts.getMountPoint()), true, opts.isDebug(),\n-          fuseOpts.toArray(new String[0]));\n-      LOG.info(\"Mounted Alluxio: mount point=\\\"{}\\\", opts=\\\"{}\\\"\",\n-          opts.getMountPoint(), fuseOpts.toArray(new String[0]));\n-    } catch (FuseException e) {\n-      LOG.error(\"Failed to mount {}\", opts.getMountPoint(), e);\n-      // only try to umount file system when exception occurred.\n-      // jnr-fuse registers JVM shutdown hook to ensure fs.umount()\n-      // will be executed when this process is exiting.\n-      fs.umount();\n-    } finally {\n       try {\n-        tfs.close();\n-        LOG.info(\"Closed Alluxio file system.\");\n-      } catch (Exception e) {\n-        LOG.error(\"Failed to close Alluxio file system\", e);\n+        fuseFs.mount(Paths.get(opts.getMountPoint()), true, opts.isDebug(),\n+            fuseOpts.toArray(new String[0]));\n+        LOG.info(\"Mounted Alluxio: mount point=\\\"{}\\\", OPTIONS=\\\"{}\\\"\",\n+            opts.getMountPoint(), fuseOpts.toArray(new String[0]));\n+      } catch (FuseException e) {", "originalCommit": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4aed659c5ea46928e4fd3b6a10f4e00d84aea4d", "chunk": "diff --git a/integration/fuse/src/main/java/alluxio/fuse/AlluxioFuse.java b/integration/fuse/src/main/java/alluxio/fuse/AlluxioFuse.java\nindex 6fcaa386fa..04eaab1ded 100644\n--- a/integration/fuse/src/main/java/alluxio/fuse/AlluxioFuse.java\n+++ b/integration/fuse/src/main/java/alluxio/fuse/AlluxioFuse.java\n\n@@ -100,7 +100,7 @@ public final class AlluxioFuse {\n       // Force direct_io in FUSE: writes and reads bypass the kernel page\n       // cache and go directly to alluxio. This avoids extra memory copies\n       // in the write path.\n-      // TODO: support kernel_cache (https://github.com/Alluxio/alluxio/issues/10840)\n+      // TODO(binfan): support kernel_cache (issues#10840)\n       fuseOpts.add(\"-odirect_io\");\n \n       try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEwMTA3Nw==", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417101077", "bodyText": "Why Pinter to long? do we fill anything here?", "author": "apc999", "createdAt": "2020-04-29T06:52:42Z", "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java", "diffHunk": "@@ -641,14 +642,14 @@ private int readInternal(String path, Pointer buf, @size_t long size, @off_t lon\n    * @return 0 on success, a negative value on error\n    */\n   @Override\n-  public int readdir(String path, Pointer buff, FuseFillDir filter,\n-      @off_t long offset, FuseFileInfo fi) {\n+  public int readdir(String path, long buff, FuseFillDir filter, @off_t long offset,", "originalCommit": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2NjE3OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417166179", "bodyText": "long buff point to a native buffer, and it will be used by a Java-to-Native callback filter.", "author": "iluoeli", "createdAt": "2020-04-29T08:58:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEwMTA3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f1b92e10b26218547a7a9c18bea8d167c0637478", "chunk": "diff --git a/integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java b/integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java\nindex dbba61867a..685260634d 100644\n--- a/integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java\n+++ b/integration/fuse/src/main/java/alluxio/fuse/AlluxioFuseFileSystem.java\n\n@@ -642,13 +635,13 @@ public final class AlluxioFuseFileSystem extends FuseStubFS {\n    * @return 0 on success, a negative value on error\n    */\n   @Override\n-  public int readdir(String path, long buff, FuseFillDir filter, @off_t long offset,\n+  public int readdir(String path, long buff, FuseFillDir filter, long offset,\n       FuseFileInfo fi) {\n     return AlluxioFuseUtils.call(LOG, () -> readdirInternal(path, buff, filter, offset, fi),\n         \"readdir\", \"path=%s,buf=%s\", path, buff);\n   }\n \n-  private int readdirInternal(String path, long buff, FuseFillDir filter, @off_t long offset,\n+  private int readdirInternal(String path, long buff, FuseFillDir filter, long offset,\n       FuseFileInfo fi) {\n     final AlluxioURI turi = mPathResolverCache.getUnchecked(path);\n     try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEwMTY2Mg==", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417101662", "bodyText": "hard to tell what this class from the name. can you add javadoc for this class (required for all public classes or style checker will fail)", "author": "apc999", "createdAt": "2020-04-29T06:54:12Z", "path": "integration/fuse/src/main/java/alluxio/jnifuse/FuseFillDir.java", "diffHunk": "@@ -7,27 +7,28 @@\n  * either express or implied, as more fully set forth in the License.\n  *\n  * See the NOTICE file distributed with this work for information regarding copyright ownership.\n- *\n  */\n \n package alluxio.jnifuse;\n \n+import alluxio.jnifuse.struct.FileStat;\n+\n import java.nio.ByteBuffer;\n \n-public class FuseFiller {\n+public class FuseFillDir {", "originalCommit": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2NzA4Ng==", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417167086", "bodyText": "rename FuseFiller to FuseFillDir to keep consisteny with jnr-fuse", "author": "iluoeli", "createdAt": "2020-04-29T09:00:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEwMTY2Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEwMTgwMQ==", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417101801", "bodyText": "javadoc all public method in Alluxio code base", "author": "apc999", "createdAt": "2020-04-29T06:54:31Z", "path": "integration/fuse/src/main/java/alluxio/jnifuse/FuseFillDir.java", "diffHunk": "@@ -7,27 +7,28 @@\n  * either express or implied, as more fully set forth in the License.\n  *\n  * See the NOTICE file distributed with this work for information regarding copyright ownership.\n- *\n  */\n \n package alluxio.jnifuse;\n \n+import alluxio.jnifuse.struct.FileStat;\n+\n import java.nio.ByteBuffer;\n \n-public class FuseFiller {\n+public class FuseFillDir {\n   long address;\n \n-  FuseFiller(long address) {\n+  FuseFillDir(long address) {\n     this.address = address;\n   }\n \n-  public native int doFill(long bufaddr, String name, ByteBuffer stbuf, long off);\n+  public native int fill(long address, long bufaddr, String name, ByteBuffer stbuf, long off);", "originalCommit": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEwMjYzNg==", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417102636", "bodyText": "this class is claimed as abstract but no method is claimed as abstract.\nI would make all api methods abstract.", "author": "apc999", "createdAt": "2020-04-29T06:56:23Z", "path": "integration/fuse/src/main/java/alluxio/jnifuse/FuseStubFS.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.jnifuse;\n+\n+import alluxio.jnifuse.struct.FileStat;\n+import alluxio.jnifuse.struct.FuseContext;\n+import alluxio.jnifuse.struct.FuseFileInfo;\n+import alluxio.jnifuse.struct.Statvfs;\n+import alluxio.util.OSUtils;\n+\n+import org.apache.commons.lang.NotImplementedException;\n+import ru.serce.jnrfuse.ErrorCodes;\n+import ru.serce.jnrfuse.FuseException;\n+import ru.serce.jnrfuse.utils.MountUtils;\n+import ru.serce.jnrfuse.utils.SecurityUtils;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Abstract class for Fuse FS Stub.\n+ */\n+public abstract class FuseStubFS {", "originalCommit": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "956a8fc4c1d9025169db0e93be8d3bed915cc59d", "chunk": "diff --git a/integration/fuse/src/main/java/alluxio/jnifuse/FuseStubFS.java b/integration/fuse/src/main/java/alluxio/jnifuse/FuseStubFS.java\nindex 2531964d1e..aeee13e722 100644\n--- a/integration/fuse/src/main/java/alluxio/jnifuse/FuseStubFS.java\n+++ b/integration/fuse/src/main/java/alluxio/jnifuse/FuseStubFS.java\n\n@@ -36,17 +36,13 @@ import java.util.concurrent.atomic.AtomicBoolean;\n /**\n  * Abstract class for Fuse FS Stub.\n  */\n-public abstract class FuseStubFS {\n+public class FuseStubFS {\n \n   private static final int TIMEOUT = 2000; // ms\n-  private static final String[] osxFuseLibraries = {\"fuse4x\", \"osxfuse\", \"macfuse\", \"fuse\"};\n \n-  private Set<String> notImplementedMethods;\n   protected final LibFuse libFuse;\n-  // protected final FuseOperations fuseOperations;\n   protected final AtomicBoolean mounted = new AtomicBoolean();\n   protected Path mountPoint;\n-  // private volatile Pointer fusePointer;\n \n   public FuseStubFS() {\n     this.libFuse = new LibFuse();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEwNDc1Mw==", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417104753", "bodyText": "For your info, Im cool to leave alluxio.jnifuse.struct to use your current c-like style for readability.", "author": "apc999", "createdAt": "2020-04-29T07:01:14Z", "path": "integration/fuse/src/main/java/alluxio/jnifuse/struct/FileStat.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.jnifuse.struct;\n+\n+import alluxio.util.OSUtils;\n+\n+import java.nio.ByteBuffer;\n+\n+public class FileStat extends Struct {", "originalCommit": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2129ab7d099a5ee207ee86079f3174444ff19b2c", "chunk": "diff --git a/integration/fuse/src/main/java/alluxio/jnifuse/struct/FileStat.java b/integration/fuse/src/main/java/alluxio/jnifuse/struct/FileStat.java\nindex 8018915c2c..e33f00eaed 100644\n--- a/integration/fuse/src/main/java/alluxio/jnifuse/struct/FileStat.java\n+++ b/integration/fuse/src/main/java/alluxio/jnifuse/struct/FileStat.java\n\n@@ -109,4 +109,8 @@ public class FileStat extends Struct {\n   public final SignedLong st_atim;\n   public final SignedLong st_mtim;\n   public final SignedLong st_ctim;\n+\n+  public static FileStat wrap(ByteBuffer buffer) {\n+    return new FileStat(buffer);\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEwNTk5NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417105995", "bodyText": "remove two empty lines (line 24, 25)", "author": "apc999", "createdAt": "2020-04-29T07:04:04Z", "path": "integration/fuse/src/main/java/alluxio/jnifuse/struct/FuseContext.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.jnifuse.struct;\n+\n+import java.nio.ByteBuffer;\n+\n+public class FuseContext extends Struct {\n+\n+  public final Unsigned32 uid = new Unsigned32();\n+  public final Unsigned32 gid = new Unsigned32();\n+\n+  public FuseContext(ByteBuffer buffer) {\n+    super(buffer);\n+  }\n+", "originalCommit": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b297606c3b5a6cb7ed806b691f12129286d0031", "chunk": "diff --git a/integration/fuse/src/main/java/alluxio/jnifuse/struct/FuseContext.java b/integration/fuse/src/main/java/alluxio/jnifuse/struct/FuseContext.java\nindex d8bd7d69ee..65953759b5 100644\n--- a/integration/fuse/src/main/java/alluxio/jnifuse/struct/FuseContext.java\n+++ b/integration/fuse/src/main/java/alluxio/jnifuse/struct/FuseContext.java\n\n@@ -13,6 +13,7 @@ package alluxio.jnifuse.struct;\n \n import java.nio.ByteBuffer;\n \n+// TODO(iluoeli): Add more fields\n public class FuseContext extends Struct {\n \n   public final Unsigned32 uid = new Unsigned32();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExMzYxNA==", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417113614", "bodyText": "depending on the fuse version, can you duoble check this is consistent with https://github.com/libfuse/libfuse/blob/fuse_2_9_bugfix/include/fuse_common.h (if we target fuse 2.9)\nplease include the link to the header file in the javadoc\ninclude in javadoc that this works with only Linux or MacOS (if that is the case)", "author": "apc999", "createdAt": "2020-04-29T07:20:49Z", "path": "integration/fuse/src/main/java/alluxio/jnifuse/struct/FuseFileInfo.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.jnifuse.struct;\n+\n+import java.nio.ByteBuffer;\n+\n+public class FuseFileInfo extends Struct {", "originalCommit": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2129ab7d099a5ee207ee86079f3174444ff19b2c", "chunk": "diff --git a/integration/fuse/src/main/java/alluxio/jnifuse/struct/FuseFileInfo.java b/integration/fuse/src/main/java/alluxio/jnifuse/struct/FuseFileInfo.java\nindex 35afc30c8e..06a8decead 100644\n--- a/integration/fuse/src/main/java/alluxio/jnifuse/struct/FuseFileInfo.java\n+++ b/integration/fuse/src/main/java/alluxio/jnifuse/struct/FuseFileInfo.java\n\n@@ -31,4 +31,8 @@ public class FuseFileInfo extends Struct {\n   public final Padding pad1;\n   public final u_int64_t fh;\n   public final u_int64_t lock_owner;\n+\n+  public static FuseFileInfo wrap(ByteBuffer buffer) {\n+    return new FuseFileInfo(buffer);\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExNDI4OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417114289", "bodyText": "same here, double check the version and include the link to the corresponding header file in javadoc", "author": "apc999", "createdAt": "2020-04-29T07:22:11Z", "path": "integration/fuse/src/main/java/alluxio/jnifuse/struct/Statvfs.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.jnifuse.struct;\n+\n+import java.nio.ByteBuffer;\n+\n+public class Statvfs extends Struct {", "originalCommit": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2129ab7d099a5ee207ee86079f3174444ff19b2c", "chunk": "diff --git a/integration/fuse/src/main/java/alluxio/jnifuse/struct/Statvfs.java b/integration/fuse/src/main/java/alluxio/jnifuse/struct/Statvfs.java\nindex f31bbbcc9f..10245500c2 100644\n--- a/integration/fuse/src/main/java/alluxio/jnifuse/struct/Statvfs.java\n+++ b/integration/fuse/src/main/java/alluxio/jnifuse/struct/Statvfs.java\n\n@@ -57,4 +57,8 @@ public class Statvfs extends Struct {\n   public final UnsignedLong f_flag;\n   public final UnsignedLong f_namemax;\n   // __f_spare\n+\n+  public static Statvfs wrap(ByteBuffer buffer) {\n+    return new Statvfs(buffer);\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExODI3Mw==", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417118273", "bodyText": "NITPICK: unnecessary empty lines (line 23 27 33 35). let's keep the src code concise and compact in general", "author": "apc999", "createdAt": "2020-04-29T07:30:18Z", "path": "integration/fuse/src/test/java/alluxio/jnifuse/struct/FuseFileInfoTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.jnifuse.struct;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import jnr.ffi.Pointer;\n+import jnr.ffi.Runtime;\n+import org.junit.Test;\n+\n+import java.nio.ByteBuffer;\n+\n+public class FuseFileInfoTest {\n+", "originalCommit": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1b92e10b26218547a7a9c18bea8d167c0637478", "chunk": "diff --git a/integration/fuse/src/test/java/alluxio/jnifuse/struct/FuseFileInfoTest.java b/integration/fuse/src/test/java/alluxio/jnifuse/struct/FuseFileInfoTest.java\nindex f8ccd2157d..d40732494b 100644\n--- a/integration/fuse/src/test/java/alluxio/jnifuse/struct/FuseFileInfoTest.java\n+++ b/integration/fuse/src/test/java/alluxio/jnifuse/struct/FuseFileInfoTest.java\n\n@@ -20,17 +20,12 @@ import org.junit.Test;\n import java.nio.ByteBuffer;\n \n public class FuseFileInfoTest {\n-\n   @Test\n   public void offset() {\n     FuseFileInfo jnifi = new FuseFileInfo(ByteBuffer.allocate(256));\n-\n     ru.serce.jnrfuse.struct.FuseFileInfo jnrfi =\n         ru.serce.jnrfuse.struct.FuseFileInfo.of(Pointer.wrap(Runtime.getSystemRuntime(), 0x0));\n-\n     assertEquals(jnrfi.flags.offset(), jnifi.flags.offset());\n     assertEquals(jnrfi.fh.offset(), jnifi.fh.offset());\n-\n   }\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExOTAxOA==", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417119018", "bodyText": "actually a good idea to compare JNI and JNR implementations.\nSo maybe we should not aim to totally remove dependency on JNRFuse but leave it in test scope", "author": "apc999", "createdAt": "2020-04-29T07:31:52Z", "path": "integration/fuse/src/test/java/alluxio/jnifuse/struct/StatvfsTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.jnifuse.struct;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import jnr.ffi.Pointer;\n+import jnr.ffi.Runtime;\n+import org.junit.Test;\n+\n+import java.nio.ByteBuffer;\n+\n+public class StatvfsTest {\n+  @Test\n+  public void offset() {\n+    Statvfs jni = new Statvfs(ByteBuffer.allocate(256));\n+\n+    ru.serce.jnrfuse.struct.Statvfs jnr =\n+        ru.serce.jnrfuse.struct.Statvfs.of(Pointer.wrap(Runtime.getSystemRuntime(), 0x0));\n+\n+    assertEquals(jnr.f_bsize.offset(), jni.f_bsize.offset());", "originalCommit": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1b92e10b26218547a7a9c18bea8d167c0637478", "chunk": "diff --git a/integration/fuse/src/test/java/alluxio/jnifuse/struct/StatvfsTest.java b/integration/fuse/src/test/java/alluxio/jnifuse/struct/StatvfsTest.java\nindex cfcca01404..8ae51d069a 100644\n--- a/integration/fuse/src/test/java/alluxio/jnifuse/struct/StatvfsTest.java\n+++ b/integration/fuse/src/test/java/alluxio/jnifuse/struct/StatvfsTest.java\n\n@@ -23,7 +23,6 @@ public class StatvfsTest {\n   @Test\n   public void offset() {\n     Statvfs jni = new Statvfs(ByteBuffer.allocate(256));\n-\n     ru.serce.jnrfuse.struct.Statvfs jnr =\n         ru.serce.jnrfuse.struct.Statvfs.of(Pointer.wrap(Runtime.getSystemRuntime(), 0x0));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyMDExMA==", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417120110", "bodyText": "this seems not fully implemented for timespec? Now alluxio.fuse.AlluxioFuseFileSystemTest will not compile due to this issue.", "author": "apc999", "createdAt": "2020-04-29T07:34:06Z", "path": "integration/fuse/src/main/java/alluxio/jnifuse/struct/FileStat.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.jnifuse.struct;\n+\n+import alluxio.util.OSUtils;\n+\n+import java.nio.ByteBuffer;\n+\n+public class FileStat extends Struct {\n+  public static final int S_IFIFO = 0010000; // named pipe (fifo)\n+  public static final int S_IFCHR = 0020000; // character special\n+  public static final int S_IFDIR = 0040000; // directory\n+  public static final int S_IFBLK = 0060000; // block special\n+  public static final int S_IFREG = 0100000; // regular\n+  public static final int S_IFLNK = 0120000; // symbolic link\n+  public static final int S_IFSOCK = 0140000; // socket\n+  public static final int S_IFMT = 0170000; // file mask for type checks\n+  public static final int S_ISUID = 0004000; // set user id on execution\n+  public static final int S_ISGID = 0002000; // set group id on execution\n+  public static final int S_ISVTX = 0001000; // save swapped text even after use\n+  public static final int S_IRUSR = 0000400; // read permission, owner\n+  public static final int S_IWUSR = 0000200; // write permission, owner\n+  public static final int S_IXUSR = 0000100; // execute/search permission, owner\n+  public static final int S_IRGRP = 0000040; // read permission, group\n+  public static final int S_IWGRP = 0000020; // write permission, group\n+  public static final int S_IXGRP = 0000010; // execute/search permission, group\n+  public static final int S_IROTH = 0000004; // read permission, other\n+  public static final int S_IWOTH = 0000002; // write permission, other\n+  public static final int S_IXOTH = 0000001; // execute permission, other\n+\n+  public static final int ALL_READ = S_IRUSR | S_IRGRP | S_IROTH;\n+  public static final int ALL_WRITE = S_IWUSR | S_IWGRP | S_IWOTH;\n+  public static final int S_IXUGO = S_IXUSR | S_IXGRP | S_IXOTH;\n+\n+  public static boolean S_ISTYPE(int mode, int mask) {\n+    return (mode & S_IFMT) == mask;\n+  }\n+\n+  public static boolean S_ISDIR(int mode) {\n+    return S_ISTYPE(mode, S_IFDIR);\n+  }\n+\n+  public static boolean S_ISCHR(int mode) {\n+    return S_ISTYPE(mode, S_IFCHR);\n+  }\n+\n+  public static boolean S_ISBLK(int mode) {\n+    return S_ISTYPE(mode, S_IFBLK);\n+  }\n+\n+  public static boolean S_ISREG(int mode) {\n+    return S_ISTYPE(mode, S_IFREG);\n+  }\n+\n+  public static boolean S_ISFIFO(int mode) {\n+    return S_ISTYPE(mode, S_IFIFO);\n+  }\n+\n+  public static boolean S_ISLNK(int mode) {\n+    return S_ISTYPE(mode, S_IFLNK);\n+  }\n+\n+  public FileStat(ByteBuffer buffer) {\n+    super(buffer);\n+    // TODO: support Mac & Windows platform\n+    if (OSUtils.isMacOS()) {\n+      System.exit(-1);\n+    } else if (OSUtils.isWindows()) {\n+      System.exit(-1);\n+    } else {\n+      // Linux platform\n+    }\n+    st_dev = new Unsigned64();\n+    pad1 = null;\n+    st_ino = new Unsigned64();\n+    st_nlink = new Unsigned64();\n+    st_mode = new Unsigned32();\n+    st_uid = new Unsigned32();\n+    st_gid = new Unsigned32();\n+    st_rdev = new Unsigned64();\n+    st_size = new SignedLong();\n+    st_blksize = new SignedLong();\n+    st_blocks = new SignedLong();\n+    st_atim = new SignedLong();", "originalCommit": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2OTY0NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417169645", "bodyText": "I will try to fix it immediatly", "author": "iluoeli", "createdAt": "2020-04-29T09:04:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyMDExMA=="}], "type": "inlineReview", "revised_code": {"commit": "2129ab7d099a5ee207ee86079f3174444ff19b2c", "chunk": "diff --git a/integration/fuse/src/main/java/alluxio/jnifuse/struct/FileStat.java b/integration/fuse/src/main/java/alluxio/jnifuse/struct/FileStat.java\nindex 8018915c2c..e33f00eaed 100644\n--- a/integration/fuse/src/main/java/alluxio/jnifuse/struct/FileStat.java\n+++ b/integration/fuse/src/main/java/alluxio/jnifuse/struct/FileStat.java\n\n@@ -109,4 +109,8 @@ public class FileStat extends Struct {\n   public final SignedLong st_atim;\n   public final SignedLong st_mtim;\n   public final SignedLong st_ctim;\n+\n+  public static FileStat wrap(ByteBuffer buffer) {\n+    return new FileStat(buffer);\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyMjc5MA==", "url": "https://github.com/Alluxio/alluxio/pull/11364#discussion_r417122790", "bodyText": "NOTE, this is some cleanup work I planned to do a long time ago. unrelated to @iluoeli 's change to switch to JNI", "author": "apc999", "createdAt": "2020-04-29T07:39:42Z", "path": "integration/fuse/src/main/java/alluxio/fuse/AlluxioFuse.java", "diffHunk": "@@ -41,15 +43,47 @@\n public final class AlluxioFuse {\n   private static final Logger LOG = LoggerFactory.getLogger(AlluxioFuse.class);\n \n+  private static final Option MOUNT_POINT_OPTION = Option.builder(\"m\")\n+      .hasArg()\n+      .required(true)\n+      .longOpt(\"mount-point\")\n+      .desc(\"Desired local mount point for alluxio-fuse.\")\n+      .build();\n+\n+  private static final Option ALLUXIO_ROOT_OPTION = Option.builder(\"r\")\n+      .hasArg()\n+      .required(true)\n+      .longOpt(\"alluxio-root\")\n+      .desc(\"Path within alluxio that will be used as the root of the FUSE mount \"\n+          + \"(e.g., /users/foo; defaults to /)\")\n+      .build();\n+\n+  private static final Option HELP_OPTION = Option.builder(\"h\")\n+      .required(false)\n+      .desc(\"Print this HELP_OPTION\")\n+      .build();\n+\n+  private static final Option FUSE_MOUNT_OPTION = Option.builder(\"o\")\n+      .valueSeparator(',')\n+      .required(false)\n+      .hasArgs()\n+      .desc(\"FUSE mount options\")\n+      .build();\n+\n+  private static final Options OPTIONS = new Options()\n+      .addOption(MOUNT_POINT_OPTION)\n+      .addOption(ALLUXIO_ROOT_OPTION)\n+      .addOption(HELP_OPTION)\n+      .addOption(FUSE_MOUNT_OPTION);", "originalCommit": "07b4b7230a397e9f54ea43b481ef7ec6a0cb95d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "2129ab7d099a5ee207ee86079f3174444ff19b2c", "url": "https://github.com/Alluxio/alluxio/commit/2129ab7d099a5ee207ee86079f3174444ff19b2c", "message": "Fix AlluxioFuseFileSystemTest\n\nnot actually fixed Timespec error. I just umcommented it", "committedDate": "2020-04-29T10:28:45Z", "type": "commit"}, {"oid": "f39cc3a0c69821bde9bf941f80f80a9255c05f1d", "url": "https://github.com/Alluxio/alluxio/commit/f39cc3a0c69821bde9bf941f80f80a9255c05f1d", "message": "Fix Timespec", "committedDate": "2020-04-29T14:35:23Z", "type": "commit"}, {"oid": "956a8fc4c1d9025169db0e93be8d3bed915cc59d", "url": "https://github.com/Alluxio/alluxio/commit/956a8fc4c1d9025169db0e93be8d3bed915cc59d", "message": "Format c++ code style", "committedDate": "2020-04-29T16:00:04Z", "type": "commit"}, {"oid": "720855e9e227b747e6035463735ab877d4f5c47a", "url": "https://github.com/Alluxio/alluxio/commit/720855e9e227b747e6035463735ab877d4f5c47a", "message": "Replace jnr utils with jni utils", "committedDate": "2020-04-29T16:08:55Z", "type": "commit"}, {"oid": "c4aed659c5ea46928e4fd3b6a10f4e00d84aea4d", "url": "https://github.com/Alluxio/alluxio/commit/c4aed659c5ea46928e4fd3b6a10f4e00d84aea4d", "message": "Fix style", "committedDate": "2020-04-30T08:04:14Z", "type": "commit"}, {"oid": "f1b92e10b26218547a7a9c18bea8d167c0637478", "url": "https://github.com/Alluxio/alluxio/commit/f1b92e10b26218547a7a9c18bea8d167c0637478", "message": "Add jni ErrorCodes", "committedDate": "2020-04-30T09:08:46Z", "type": "commit"}, {"oid": "f26a9c6747a94c437fae7183429d146f0238e7e7", "url": "https://github.com/Alluxio/alluxio/commit/f26a9c6747a94c437fae7183429d146f0238e7e7", "message": "Fix check style", "committedDate": "2020-05-01T03:53:25Z", "type": "commit"}, {"oid": "6b297606c3b5a6cb7ed806b691f12129286d0031", "url": "https://github.com/Alluxio/alluxio/commit/6b297606c3b5a6cb7ed806b691f12129286d0031", "message": "Various cleanup", "committedDate": "2020-05-01T06:55:00Z", "type": "commit"}, {"oid": "ba5bf9c09b604fa0364c381c6209d7396d5b2397", "url": "https://github.com/Alluxio/alluxio/commit/ba5bf9c09b604fa0364c381c6209d7396d5b2397", "message": "Add Operations: unlink, flush, release", "committedDate": "2020-05-01T07:38:23Z", "type": "commit"}, {"oid": "ae76dd8335ec39c7fc63b0c0532d7f6dc6891d17", "url": "https://github.com/Alluxio/alluxio/commit/ae76dd8335ec39c7fc63b0c0532d7f6dc6891d17", "message": "Remove duplicate getContext()", "committedDate": "2020-05-01T07:46:04Z", "type": "commit"}]}