{"pr_number": 10749, "pr_title": "Fix some bugs and add new properties for client-side cache", "pr_createdAt": "2020-01-14T23:51:50Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10749", "timeline": [{"oid": "6b537ceb62c1172eab53735c15e165014338945b", "url": "https://github.com/Alluxio/alluxio/commit/6b537ceb62c1172eab53735c15e165014338945b", "message": "bug fixes and new properties", "committedDate": "2020-01-14T23:49:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzODI2MA==", "url": "https://github.com/Alluxio/alluxio/pull/10749#discussion_r366638260", "bodyText": "mPosition >= mStatus.getLength()?", "author": "apc999", "createdAt": "2020-01-15T00:10:56Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java", "diffHunk": "@@ -100,9 +100,15 @@ public int read(byte[] b) throws IOException {\n \n   @Override\n   public int read(byte[] b, int off, int len) throws IOException {\n+    if (len == 0) {\n+      return 0;\n+    }\n+    if (mPosition == mStatus.getLength()) { // at end of file", "originalCommit": "6b537ceb62c1172eab53735c15e165014338945b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzOTU0Mg==", "url": "https://github.com/Alluxio/alluxio/pull/10749#discussion_r366639542", "bodyText": "how about updating positionedRead https://github.com/Alluxio/alluxio/pull/10749/files#diff-dda4e9db6a53b7319a9d5c19177847bcR173  @calvinjia ?", "author": "apc999", "createdAt": "2020-01-15T00:15:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzODI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1MTE1Mg==", "url": "https://github.com/Alluxio/alluxio/pull/10749#discussion_r366651152", "bodyText": "Good catch, positioned read should be updated as well", "author": "calvinjia", "createdAt": "2020-01-15T01:01:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzODI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1NDY2Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10749#discussion_r366654663", "bodyText": "how can mPosition > mStatus.getLength() be true?", "author": "bf8086", "createdAt": "2020-01-15T01:15:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzODI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1NTA0OA==", "url": "https://github.com/Alluxio/alluxio/pull/10749#discussion_r366655048", "bodyText": "just to be safe and prevent hitting bugs elsewhere", "author": "apc999", "createdAt": "2020-01-15T01:17:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzODI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1ODkzMw==", "url": "https://github.com/Alluxio/alluxio/pull/10749#discussion_r366658933", "bodyText": "Done.", "author": "bf8086", "createdAt": "2020-01-15T01:35:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzODI2MA=="}], "type": "inlineReview", "revised_code": {"commit": "b7dad948e5feda5ea544458694c80d50b6c4db02", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java\nindex 4ba8489804..cf1e73b854 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java\n\n@@ -100,10 +100,12 @@ public class LocalCacheFileInStream extends FileInStream {\n \n   @Override\n   public int read(byte[] b, int off, int len) throws IOException {\n+    Preconditions.checkArgument(len >= 0, \"length should be non-negative\");\n+    Preconditions.checkArgument(off >= 0, \"offset should be non-negative\");\n     if (len == 0) {\n       return 0;\n     }\n-    if (mPosition == mStatus.getLength()) { // at end of file\n+    if (mPosition >= mStatus.getLength()) { // at end of file\n       return -1;\n     }\n     int bytesRead = 0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MTE5Ng==", "url": "https://github.com/Alluxio/alluxio/pull/10749#discussion_r366641196", "bodyText": "please include numbers we are checking here in the error message, or it is hard to tell what's going wrong", "author": "apc999", "createdAt": "2020-01-15T00:21:16Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java", "diffHunk": "@@ -124,14 +130,17 @@ public int read(byte[] b, int off, int len) throws IOException {\n           mPosition += bytesLeftInPage;\n         } else { // cache miss\n           byte[] page = readExternalPage(mPosition);\n-          mCacheManager.put(pageId, page);\n-          System.arraycopy(page, currentPageOffset, b, off + bytesRead, bytesLeftInPage);\n-          bytesRead += bytesLeftInPage;\n-          mPosition += bytesLeftInPage;\n+          if (page.length > 0) {\n+            mCacheManager.put(pageId, page);\n+            System.arraycopy(page, currentPageOffset, b, off + bytesRead, bytesLeftInPage);\n+            bytesRead += bytesLeftInPage;\n+            mPosition += bytesLeftInPage;\n+          }\n         }\n       }\n     }\n-    Preconditions.checkState(bytesRead == len, \"Invalid number of bytes read\");\n+    Preconditions.checkState(bytesRead == len || (bytesRead < len && remaining() == 0),\n+        \"Invalid number of bytes read\");", "originalCommit": "6b537ceb62c1172eab53735c15e165014338945b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1ODkxMQ==", "url": "https://github.com/Alluxio/alluxio/pull/10749#discussion_r366658911", "bodyText": "Done.", "author": "bf8086", "createdAt": "2020-01-15T01:35:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MTE5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b7dad948e5feda5ea544458694c80d50b6c4db02", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java\nindex 4ba8489804..cf1e73b854 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java\n\n@@ -140,7 +142,9 @@ public class LocalCacheFileInStream extends FileInStream {\n       }\n     }\n     Preconditions.checkState(bytesRead == len || (bytesRead < len && remaining() == 0),\n-        \"Invalid number of bytes read\");\n+        \"Invalid number of bytes read - \"\n+            + \"bytes to read = %d, actual bytes read = %d, bytes remains in file %d\",\n+        len, bytesRead, remaining());\n     return bytesRead;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1MjMxNA==", "url": "https://github.com/Alluxio/alluxio/pull/10749#discussion_r366652314", "bodyText": "Since this is simple enough, I would suggest to move the body this function into factory method PageStore.create, inside which we can switch the creation of options based on PropertyKey.USER_CLIENT_CACHE_STORE_TYPE.  Having factory over factory seems just complicated to me and I would optimize for code simplicity.", "author": "apc999", "createdAt": "2020-01-15T01:06:11Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/PageStoreOptions.java", "diffHunk": "@@ -11,11 +11,39 @@\n \n package alluxio.client.file.cache.store;\n \n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n+\n /**\n  * Options used to instantiate a {@link alluxio.client.file.cache.PageStore}.\n  */\n public abstract class PageStoreOptions {\n \n+  /**\n+   * Creates an instance of the {@link PageStoreOptions} based on configurations.\n+   * @param conf the Alluxio configuration\n+   * @return the created page store options\n+   */\n+  public static PageStoreOptions create(AlluxioConfiguration conf) {", "originalCommit": "6b537ceb62c1172eab53735c15e165014338945b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1MjQ2NA==", "url": "https://github.com/Alluxio/alluxio/pull/10749#discussion_r366652464", "bodyText": "do we still want to keep create() then?", "author": "apc999", "createdAt": "2020-01-15T01:06:50Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -52,6 +53,15 @@ static PageStore create() {\n     return create(new LocalPageStoreOptions());\n   }\n \n+  /**\n+   * Creates a new instance of {@link PageStore} based on configuration.\n+   * @param conf configuration\n+   * @return the {@link PageStore}\n+   */\n+  static PageStore create(AlluxioConfiguration conf) {", "originalCommit": "6b537ceb62c1172eab53735c15e165014338945b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1MzAyMw==", "url": "https://github.com/Alluxio/alluxio/pull/10749#discussion_r366653023", "bodyText": "specify a bit more here what is LOCAL and what is ROCKS?", "author": "apc999", "createdAt": "2020-01-15T01:09:02Z", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -3120,6 +3120,19 @@ public String toString() {\n               + \"`alluxio.client.file.cache.LRUCacheEvictor`.\")\n           .setScope(Scope.CLIENT)\n           .build();\n+  public static final PropertyKey USER_CLIENT_CACHE_DIR =\n+      new Builder(Name.USER_CLIENT_CACHE_DIR)\n+          .setDefaultValue(\"/tmp\")\n+          .setDescription(\"The directory where client-side cache is stored.\")\n+          .setScope(Scope.CLIENT)\n+          .build();\n+  public static final PropertyKey USER_CLIENT_CACHE_STORE_TYPE =\n+      new Builder(Name.USER_CLIENT_CACHE_STORE_TYPE)\n+          .setDefaultValue(\"LOCAL\")\n+          .setDescription(\"The type of page store to use for client-side cache. Can be either \"\n+              + \"`LOCAL` or `ROCKS`.\")", "originalCommit": "6b537ceb62c1172eab53735c15e165014338945b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1ODY5Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10749#discussion_r366658693", "bodyText": "Done.", "author": "bf8086", "createdAt": "2020-01-15T01:33:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1MzAyMw=="}], "type": "inlineReview", "revised_code": {"commit": "b7dad948e5feda5ea544458694c80d50b6c4db02", "chunk": "diff --git a/core/common/src/main/java/alluxio/conf/PropertyKey.java b/core/common/src/main/java/alluxio/conf/PropertyKey.java\nindex 05b79825b8..8e7ecdb7ef 100644\n--- a/core/common/src/main/java/alluxio/conf/PropertyKey.java\n+++ b/core/common/src/main/java/alluxio/conf/PropertyKey.java\n\n@@ -3122,7 +3122,7 @@ public final class PropertyKey implements Comparable<PropertyKey> {\n           .build();\n   public static final PropertyKey USER_CLIENT_CACHE_DIR =\n       new Builder(Name.USER_CLIENT_CACHE_DIR)\n-          .setDefaultValue(\"/tmp\")\n+          .setDefaultValue(\"/tmp/alluxio_cache\")\n           .setDescription(\"The directory where client-side cache is stored.\")\n           .setScope(Scope.CLIENT)\n           .build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1Mzc1Ng==", "url": "https://github.com/Alluxio/alluxio/pull/10749#discussion_r366653756", "bodyText": "Add Preconditions.check  on len >= 0 and off >= 0?", "author": "apc999", "createdAt": "2020-01-15T01:12:02Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java", "diffHunk": "@@ -100,9 +100,15 @@ public int read(byte[] b) throws IOException {\n \n   @Override\n   public int read(byte[] b, int off, int len) throws IOException {\n+    if (len == 0) {", "originalCommit": "6b537ceb62c1172eab53735c15e165014338945b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1ODY3NQ==", "url": "https://github.com/Alluxio/alluxio/pull/10749#discussion_r366658675", "bodyText": "Done.", "author": "bf8086", "createdAt": "2020-01-15T01:33:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1Mzc1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b7dad948e5feda5ea544458694c80d50b6c4db02", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java\nindex 4ba8489804..cf1e73b854 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheFileInStream.java\n\n@@ -100,10 +100,12 @@ public class LocalCacheFileInStream extends FileInStream {\n \n   @Override\n   public int read(byte[] b, int off, int len) throws IOException {\n+    Preconditions.checkArgument(len >= 0, \"length should be non-negative\");\n+    Preconditions.checkArgument(off >= 0, \"offset should be non-negative\");\n     if (len == 0) {\n       return 0;\n     }\n-    if (mPosition == mStatus.getLength()) { // at end of file\n+    if (mPosition >= mStatus.getLength()) { // at end of file\n       return -1;\n     }\n     int bytesRead = 0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1NDM4MQ==", "url": "https://github.com/Alluxio/alluxio/pull/10749#discussion_r366654381", "bodyText": "will Math.floorMod handle overflow if pageId.getFileId() + pageId.getPageIndex() is larger than LONG.MAX_VALUE?", "author": "apc999", "createdAt": "2020-01-15T01:14:49Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -103,7 +103,7 @@ public LocalCacheManager(FileSystemContext fsContext) {\n    * @return the corresponding page lock\n    */\n   private ReadWriteLock getPageLock(PageId pageId) {\n-    return mPageLocks[(int) (pageId.getFileId() + pageId.getPageIndex()) % LOCK_SIZE];\n+    return mPageLocks[Math.floorMod((int) (pageId.getFileId() + pageId.getPageIndex()), LOCK_SIZE)];", "originalCommit": "6b537ceb62c1172eab53735c15e165014338945b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1NTQ3Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10749#discussion_r366655473", "bodyText": "We don't need it to handle - if the sum is overflow it will become negative, but the floorMod will always return non-negative when the second argument is positive.", "author": "bf8086", "createdAt": "2020-01-15T01:19:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1NDM4MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1NDY4Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10749#discussion_r366654683", "bodyText": "maybe something like /tmp/alluxio_cache to avoid creating too many dirs under /tmp directly?", "author": "apc999", "createdAt": "2020-01-15T01:16:02Z", "path": "core/common/src/main/java/alluxio/conf/PropertyKey.java", "diffHunk": "@@ -3120,6 +3120,19 @@ public String toString() {\n               + \"`alluxio.client.file.cache.LRUCacheEvictor`.\")\n           .setScope(Scope.CLIENT)\n           .build();\n+  public static final PropertyKey USER_CLIENT_CACHE_DIR =\n+      new Builder(Name.USER_CLIENT_CACHE_DIR)\n+          .setDefaultValue(\"/tmp\")", "originalCommit": "6b537ceb62c1172eab53735c15e165014338945b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1ODU5Nw==", "url": "https://github.com/Alluxio/alluxio/pull/10749#discussion_r366658597", "bodyText": "Done.", "author": "bf8086", "createdAt": "2020-01-15T01:33:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1NDY4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b7dad948e5feda5ea544458694c80d50b6c4db02", "chunk": "diff --git a/core/common/src/main/java/alluxio/conf/PropertyKey.java b/core/common/src/main/java/alluxio/conf/PropertyKey.java\nindex 05b79825b8..8e7ecdb7ef 100644\n--- a/core/common/src/main/java/alluxio/conf/PropertyKey.java\n+++ b/core/common/src/main/java/alluxio/conf/PropertyKey.java\n\n@@ -3122,7 +3122,7 @@ public final class PropertyKey implements Comparable<PropertyKey> {\n           .build();\n   public static final PropertyKey USER_CLIENT_CACHE_DIR =\n       new Builder(Name.USER_CLIENT_CACHE_DIR)\n-          .setDefaultValue(\"/tmp\")\n+          .setDefaultValue(\"/tmp/alluxio_cache\")\n           .setDescription(\"The directory where client-side cache is stored.\")\n           .setScope(Scope.CLIENT)\n           .build();\n"}}, {"oid": "b7dad948e5feda5ea544458694c80d50b6c4db02", "url": "https://github.com/Alluxio/alluxio/commit/b7dad948e5feda5ea544458694c80d50b6c4db02", "message": "address comments", "committedDate": "2020-01-15T01:33:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY1OTc4OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10749#discussion_r366659789", "bodyText": "Good catch", "author": "calvinjia", "createdAt": "2020-01-15T01:39:03Z", "path": "core/client/fs/src/test/java/alluxio/client/file/cache/LocalCacheFileInStreamTest.java", "diffHunk": "@@ -300,7 +325,7 @@ public ReadableByteChannel get(PageId pageId, int pageOffset) {\n       }\n       mPagesServed++;\n       return Channels.newChannel(new ByteArrayInputStream(\n-          Arrays.copyOfRange(mPages.get(pageId), pageOffset, PAGE_SIZE - pageOffset)));\n+          Arrays.copyOfRange(mPages.get(pageId), pageOffset, PAGE_SIZE)));", "originalCommit": "b7dad948e5feda5ea544458694c80d50b6c4db02", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}