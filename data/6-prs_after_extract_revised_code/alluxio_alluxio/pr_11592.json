{"pr_number": 11592, "pr_title": "Add a state-lock call-tracker for detecting interrupt-cycles", "pr_createdAt": "2020-06-18T06:57:53Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11592", "timeline": [{"oid": "01b6ccf901c11047e37cd43e0c1e69ee711a7927", "url": "https://github.com/Alluxio/alluxio/commit/01b6ccf901c11047e37cd43e0c1e69ee711a7927", "message": "Add a state-lock call-tracker for detecting interrupt-cycles", "committedDate": "2020-06-18T06:55:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwOTE1OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442409159", "bodyText": "Can we do this for recursive delete?", "author": "gpang", "createdAt": "2020-06-18T18:05:35Z", "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -2807,6 +2809,7 @@ public void setAcl(AlluxioURI path, SetAclAction action, List<AclEntry> entries,\n       SetAclContext context)\n       throws FileDoesNotExistException, AccessControlException, InvalidPathException, IOException {\n     Metrics.SET_ACL_OPS.inc();\n+    addFileSystemMasterCallTrackers(context);", "originalCommit": "01b6ccf901c11047e37cd43e0c1e69ee711a7927", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyNjE4NA==", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442526184", "bodyText": "done. 818711a", "author": "ggezer", "createdAt": "2020-06-18T22:01:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwOTE1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c32d66048e8d457343475d258a1e2f566d39f154", "chunk": "diff --git a/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java b/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\nindex af70144b5c..6b4424dcc0 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\n\n@@ -2809,7 +2813,6 @@ public final class DefaultFileSystemMaster extends CoreMaster\n       SetAclContext context)\n       throws FileDoesNotExistException, AccessControlException, InvalidPathException, IOException {\n     Metrics.SET_ACL_OPS.inc();\n-    addFileSystemMasterCallTrackers(context);\n     try (RpcContext rpcContext = createRpcContext();\n         FileSystemMasterAuditContext auditContext =\n             createAuditContext(\"setAcl\", path, null, null)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMDgyMw==", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442410823", "bodyText": "We should specify the parameter name:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  mCallTrackers.add(Preconditions.checkNotNull(callTracker));\n          \n          \n            \n                  mCallTrackers.add(Preconditions.checkNotNull(callTracker, \"callTracker\"));", "author": "gpang", "createdAt": "2020-06-18T18:08:35Z", "path": "core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java", "diffHunk": "@@ -23,41 +29,50 @@\n   // Proto message that is being wrapped\n   private T mOptionsBuilder;\n   // Used to track client call status.\n-  private CallTracker mCallTracker;\n+  private List<CallTracker> mCallTrackers;\n \n   /**\n    * Creates an instance with given proto message.\n    *\n    * @param optionsBuilder Internal proto message builder instance\n    */\n   public OperationContext(T optionsBuilder) {\n-    this(optionsBuilder, null);\n     mOptionsBuilder = optionsBuilder;\n-    mCallTracker = CallTracker.DISABLED_TRACKER;\n+    mCallTrackers = new LinkedList<>();\n   }\n \n   /**\n-   * Creates an instance with given proto message.\n-   *\n-   * @param optionsBuilder Internal proto message builder instance\n-   * @param callTracker client call tracker, or {@code null} if no tracking is desired\n+   * @return underlying proto message instance\n    */\n-  public OperationContext(T optionsBuilder, CallTracker callTracker) {\n-    mOptionsBuilder = optionsBuilder;\n-    mCallTracker = callTracker;\n+  public T getOptions() {\n+    return mOptionsBuilder;\n   }\n \n   /**\n-   * @return underlying proto message instance\n+   * Adds a new call-tracker to this context.\n+   *\n+   * @param callTracker the call tracker\n    */\n-  public T getOptions() {\n-    return mOptionsBuilder;\n+  public void addCallTracker(CallTracker callTracker) {\n+    synchronized (mCallTrackers) {\n+      mCallTrackers.add(Preconditions.checkNotNull(callTracker));", "originalCommit": "01b6ccf901c11047e37cd43e0c1e69ee711a7927", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyNjEyNw==", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442526127", "bodyText": "n/a", "author": "ggezer", "createdAt": "2020-06-18T22:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMDgyMw=="}], "type": "inlineReview", "revised_code": {"commit": "c32d66048e8d457343475d258a1e2f566d39f154", "chunk": "diff --git a/core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java b/core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java\nindex 484d0198b8..8498c6d5de 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java\n\n@@ -29,7 +23,7 @@ public class OperationContext<T extends com.google.protobuf.GeneratedMessageV3.B\n   // Proto message that is being wrapped\n   private T mOptionsBuilder;\n   // Used to track client call status.\n-  private List<CallTracker> mCallTrackers;\n+  private CallTracker mCallTracker;\n \n   /**\n    * Creates an instance with given proto message.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMTI0NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442411245", "bodyText": "Why does this throw an Exception, and not just return false?", "author": "gpang", "createdAt": "2020-06-18T18:09:22Z", "path": "core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java", "diffHunk": "@@ -23,41 +29,50 @@\n   // Proto message that is being wrapped\n   private T mOptionsBuilder;\n   // Used to track client call status.\n-  private CallTracker mCallTracker;\n+  private List<CallTracker> mCallTrackers;\n \n   /**\n    * Creates an instance with given proto message.\n    *\n    * @param optionsBuilder Internal proto message builder instance\n    */\n   public OperationContext(T optionsBuilder) {\n-    this(optionsBuilder, null);\n     mOptionsBuilder = optionsBuilder;\n-    mCallTracker = CallTracker.DISABLED_TRACKER;\n+    mCallTrackers = new LinkedList<>();\n   }\n \n   /**\n-   * Creates an instance with given proto message.\n-   *\n-   * @param optionsBuilder Internal proto message builder instance\n-   * @param callTracker client call tracker, or {@code null} if no tracking is desired\n+   * @return underlying proto message instance\n    */\n-  public OperationContext(T optionsBuilder, CallTracker callTracker) {\n-    mOptionsBuilder = optionsBuilder;\n-    mCallTracker = callTracker;\n+  public T getOptions() {\n+    return mOptionsBuilder;\n   }\n \n   /**\n-   * @return underlying proto message instance\n+   * Adds a new call-tracker to this context.\n+   *\n+   * @param callTracker the call tracker\n    */\n-  public T getOptions() {\n-    return mOptionsBuilder;\n+  public void addCallTracker(CallTracker callTracker) {\n+    synchronized (mCallTrackers) {\n+      mCallTrackers.add(Preconditions.checkNotNull(callTracker));\n+    }\n   }\n \n   /**\n    * @return {@code true} if the call is cancelled by the client\n    */\n   public boolean isCancelled() {\n-    return mCallTracker.isCancelled();\n+    synchronized (mCallTrackers) {\n+      if (mCallTrackers.isEmpty()) {\n+        throw new IllegalStateException(\"No tracker registered.\");", "originalCommit": "01b6ccf901c11047e37cd43e0c1e69ee711a7927", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMzIwMw==", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442423203", "bodyText": "explained on another comment.", "author": "ggezer", "createdAt": "2020-06-18T18:31:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMTI0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c32d66048e8d457343475d258a1e2f566d39f154", "chunk": "diff --git a/core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java b/core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java\nindex 484d0198b8..8498c6d5de 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java\n\n@@ -29,7 +23,7 @@ public class OperationContext<T extends com.google.protobuf.GeneratedMessageV3.B\n   // Proto message that is being wrapped\n   private T mOptionsBuilder;\n   // Used to track client call status.\n-  private List<CallTracker> mCallTrackers;\n+  private CallTracker mCallTracker;\n \n   /**\n    * Creates an instance with given proto message.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMzk3OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442413979", "bodyText": "Does this create a new CallTracker each time? Is there a way to have a single instance of the call tracker?", "author": "gpang", "createdAt": "2020-06-18T18:14:33Z", "path": "core/server/common/src/main/java/alluxio/master/StateLockManager.java", "diffHunk": "@@ -217,6 +217,15 @@ public LockResource lockExclusive(StateLockOptions lockOptions)\n     });\n   }\n \n+  /**\n+   * Used to generate a call-tracker that knows when an interrupt cycle is active.\n+   *\n+   * @return the call tracker\n+   */\n+  public CallTracker getInterruptCycleTracker() {\n+    return () -> mInterruptCycleRefCount > 0;", "originalCommit": "01b6ccf901c11047e37cd43e0c1e69ee711a7927", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyNTkxMw==", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442525913", "bodyText": "singleton now.", "author": "ggezer", "createdAt": "2020-06-18T22:00:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMzk3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "bd8b5b1361c4af6763807df04e4810ad5f1daf2e", "chunk": "diff --git a/core/server/common/src/main/java/alluxio/master/StateLockManager.java b/core/server/common/src/main/java/alluxio/master/StateLockManager.java\nindex a77f067119..278bc22440 100644\n--- a/core/server/common/src/main/java/alluxio/master/StateLockManager.java\n+++ b/core/server/common/src/main/java/alluxio/master/StateLockManager.java\n\n@@ -223,7 +224,7 @@ public class StateLockManager {\n    * @return the call tracker\n    */\n   public CallTracker getInterruptCycleTracker() {\n-    return () -> mInterruptCycleRefCount > 0;\n+    return () -> mInterruptCycleRefCount.get() > 0;\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxNDMwOA==", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442414308", "bodyText": "What is preventing us from just adding the tracker to every single context? I thought it is up to the individual rpc to use it or not?", "author": "gpang", "createdAt": "2020-06-18T18:15:08Z", "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -3535,6 +3539,17 @@ public void stopSync(AlluxioURI syncPoint)\n     return mBlockMaster.getWorkerInfoList();\n   }\n \n+  /**\n+   * Used to augment given context with fsm bound call-trackers\n+   * TODO(ggezer): Call this for each call and filter by a new method annotation (@Tracked).\n+   *\n+   * @param context the operation context\n+   */\n+  private void addFileSystemMasterCallTrackers(OperationContext context) {\n+    // Add state-lock interrupt-cycle call-tracker to given context.\n+    context.addCallTracker(mMasterContext.getStateLockManager().getInterruptCycleTracker());", "originalCommit": "01b6ccf901c11047e37cd43e0c1e69ee711a7927", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyMjg5NA==", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442422894", "bodyText": "The reasoning was to track tracked-APIs by explicitly working on them.\nCurrently, if an API decides to use the call-tracker, it must have been explicitly attached otherwise an exception is raised.\nI already have a todo in this method to make it general.", "author": "ggezer", "createdAt": "2020-06-18T18:30:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxNDMwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNzU1Mw==", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442427553", "bodyText": "Since deleteInternal() is used by many, I believe we can't go with fail-if-not-tracked approach anymore. So I might make this method called by all APIs as well.", "author": "ggezer", "createdAt": "2020-06-18T18:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxNDMwOA=="}], "type": "inlineReview", "revised_code": {"commit": "c32d66048e8d457343475d258a1e2f566d39f154", "chunk": "diff --git a/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java b/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\nindex af70144b5c..6b4424dcc0 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java\n\n@@ -3539,17 +3541,6 @@ public final class DefaultFileSystemMaster extends CoreMaster\n     return mBlockMaster.getWorkerInfoList();\n   }\n \n-  /**\n-   * Used to augment given context with fsm bound call-trackers\n-   * TODO(ggezer): Call this for each call and filter by a new method annotation (@Tracked).\n-   *\n-   * @param context the operation context\n-   */\n-  private void addFileSystemMasterCallTrackers(OperationContext context) {\n-    // Add state-lock interrupt-cycle call-tracker to given context.\n-    context.addCallTracker(mMasterContext.getStateLockManager().getInterruptCycleTracker());\n-  }\n-\n   /**\n    * @param fileId file ID\n    * @param jobId persist job ID\n"}}, {"oid": "bd8b5b1361c4af6763807df04e4810ad5f1daf2e", "url": "https://github.com/Alluxio/alluxio/commit/bd8b5b1361c4af6763807df04e4810ad5f1daf2e", "message": "Make ref-count safe to read", "committedDate": "2020-06-18T18:27:45Z", "type": "commit"}, {"oid": "c32d66048e8d457343475d258a1e2f566d39f154", "url": "https://github.com/Alluxio/alluxio/commit/c32d66048e8d457343475d258a1e2f566d39f154", "message": "Reorganize call-tracker around file-system-master", "committedDate": "2020-06-18T21:25:11Z", "type": "commit"}, {"oid": "818711a4ce13989803b58a92507b912695199b17", "url": "https://github.com/Alluxio/alluxio/commit/818711a4ce13989803b58a92507b912695199b17", "message": "Enable call tracking for FSM#remove()", "committedDate": "2020-06-18T21:37:19Z", "type": "commit"}, {"oid": "21813e252928250a799789c24ba7576f6d83c8ed", "url": "https://github.com/Alluxio/alluxio/commit/21813e252928250a799789c24ba7576f6d83c8ed", "message": "Exc message refactor", "committedDate": "2020-06-18T21:59:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzNDg5Mg==", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442534892", "bodyText": "This is allowed to be @Nullable, right? We should handle that case.", "author": "gpang", "createdAt": "2020-06-18T22:26:06Z", "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -4261,6 +4271,11 @@ private void removeBlocks(List<Long> blocks) throws IOException {\n     throw new IOException(\"Failed to remove deleted blocks from block master\", lastThrown);\n   }\n \n+  @Override\n+  public CallTracker composeCallTracker(CallTracker transportTracker) {", "originalCommit": "21813e252928250a799789c24ba7576f6d83c8ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzOTYxNw==", "url": "https://github.com/Alluxio/alluxio/pull/11592#discussion_r442539617", "bodyText": "removed nullable.", "author": "ggezer", "createdAt": "2020-06-18T22:41:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzNDg5Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "0e1d8b0559c07b8055dd765012849d722baf6c5a", "url": "https://github.com/Alluxio/alluxio/commit/0e1d8b0559c07b8055dd765012849d722baf6c5a", "message": "remove nullable", "committedDate": "2020-06-18T22:41:59Z", "type": "commit"}, {"oid": "0e1d8b0559c07b8055dd765012849d722baf6c5a", "url": "https://github.com/Alluxio/alluxio/commit/0e1d8b0559c07b8055dd765012849d722baf6c5a", "message": "remove nullable", "committedDate": "2020-06-18T22:41:59Z", "type": "forcePushed"}]}