{"pr_number": 11151, "pr_title": "Implement async write into local cache", "pr_createdAt": "2020-03-10T07:14:56Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11151", "timeline": [{"oid": "3e4e9d50277ff4ecebd925dbde46edc762ac3846", "url": "https://github.com/Alluxio/alluxio/commit/3e4e9d50277ff4ecebd925dbde46edc762ac3846", "message": "Implement async write into local cache", "committedDate": "2020-03-10T07:13:53Z", "type": "commit"}, {"oid": "f705e263cbb018c9bdfefbc02b8960be5457c99c", "url": "https://github.com/Alluxio/alluxio/commit/f705e263cbb018c9bdfefbc02b8960be5457c99c", "message": "Fix style check", "committedDate": "2020-03-10T22:35:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4Mjk0MQ==", "url": "https://github.com/Alluxio/alluxio/pull/11151#discussion_r391182941", "bodyText": "Since we are using a synchronous queue, should we set core threads to # of async write threads?", "author": "calvinjia", "createdAt": "2020-03-11T18:36:38Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -156,16 +165,22 @@ public static LocalCacheManager create(AlluxioConfiguration conf) throws IOExcep\n    * @param pageStore the page store manages the cache data\n    */\n   @VisibleForTesting\n-  LocalCacheManager(AlluxioConfiguration conf, MetaStore metaStore,\n-      PageStore pageStore, CacheEvictor evictor) {\n+  LocalCacheManager(AlluxioConfiguration conf, MetaStore metaStore, PageStore pageStore,\n+      CacheEvictor evictor) {\n     mMetaStore = metaStore;\n     mPageStore = pageStore;\n     mEvictor = evictor;\n     mPageSize = conf.getBytes(PropertyKey.USER_CLIENT_CACHE_PAGE_SIZE);\n+    mAsyncWrite = conf.getBoolean(PropertyKey.USER_CLIENT_CACHE_ASYNC_WRITE_ENABLED);\n     mCacheSize = pageStore.getCacheSize();\n     for (int i = 0; i < LOCK_SIZE; i++) {\n       mPageLocks[i] = new ReentrantReadWriteLock();\n     }\n+    mPendingRequests = new ConcurrentHashSet<>();\n+    mAsyncCacheExecutor = mAsyncWrite\n+        ? new ThreadPoolExecutor(0, conf.getInt(PropertyKey.USER_CLIENT_CACHE_ASYNC_WRITE_THREADS),", "originalCommit": "f705e263cbb018c9bdfefbc02b8960be5457c99c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4MzAxNw==", "url": "https://github.com/Alluxio/alluxio/pull/11151#discussion_r391283017", "bodyText": "Changed", "author": "apc999", "createdAt": "2020-03-11T21:37:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4Mjk0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "1a8989f2e7ad5ac02164ba34537f98982e051282", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\nindex 1079ed46ab..20f1ad3868 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\n\n@@ -173,14 +173,16 @@ public class LocalCacheManager implements CacheManager {\n     mPageSize = conf.getBytes(PropertyKey.USER_CLIENT_CACHE_PAGE_SIZE);\n     mAsyncWrite = conf.getBoolean(PropertyKey.USER_CLIENT_CACHE_ASYNC_WRITE_ENABLED);\n     mCacheSize = pageStore.getCacheSize();\n-    for (int i = 0; i < LOCK_SIZE; i++) {\n+    for (int i = 0; i < LOCK_SIZE; i ++) {\n       mPageLocks[i] = new ReentrantReadWriteLock();\n     }\n     mPendingRequests = new ConcurrentHashSet<>();\n-    mAsyncCacheExecutor = mAsyncWrite\n-        ? new ThreadPoolExecutor(0, conf.getInt(PropertyKey.USER_CLIENT_CACHE_ASYNC_WRITE_THREADS),\n-            60, TimeUnit.SECONDS, new SynchronousQueue<>())\n-        : null;\n+    mAsyncCacheExecutor =\n+        mAsyncWrite\n+            ? new ThreadPoolExecutor(conf.getInt(PropertyKey.USER_CLIENT_CACHE_ASYNC_WRITE_THREADS),\n+                conf.getInt(PropertyKey.USER_CLIENT_CACHE_ASYNC_WRITE_THREADS), 60,\n+                TimeUnit.SECONDS, new SynchronousQueue<>())\n+            : null;\n     Metrics.registerGauges(mCacheSize, mMetaStore);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4MzQ3NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11151#discussion_r391183475", "bodyText": "Simplify this by logging a succeeded field?", "author": "calvinjia", "createdAt": "2020-03-11T18:37:36Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -209,6 +224,40 @@ private ReadWriteLock getPageLock(PageId pageId) {\n   @Override\n   public boolean put(PageId pageId, byte[] page) {\n     LOG.debug(\"put({},{} bytes) enters\", pageId, page.length);\n+    if (!mAsyncWrite) {\n+      boolean inserted = putInternal(pageId, page);\n+      if (inserted) {\n+        LOG.debug(\"put({},{} bytes) exits\", pageId, page.length);\n+      } else {\n+        LOG.debug(\"put({},{} bytes) fails\", pageId, page.length);\n+      }", "originalCommit": "f705e263cbb018c9bdfefbc02b8960be5457c99c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4MzQ3MA==", "url": "https://github.com/Alluxio/alluxio/pull/11151#discussion_r391283470", "bodyText": "done", "author": "apc999", "createdAt": "2020-03-11T21:38:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4MzQ3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1a8989f2e7ad5ac02164ba34537f98982e051282", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\nindex 1079ed46ab..20f1ad3868 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\n\n@@ -226,11 +228,7 @@ public class LocalCacheManager implements CacheManager {\n     LOG.debug(\"put({},{} bytes) enters\", pageId, page.length);\n     if (!mAsyncWrite) {\n       boolean inserted = putInternal(pageId, page);\n-      if (inserted) {\n-        LOG.debug(\"put({},{} bytes) exits\", pageId, page.length);\n-      } else {\n-        LOG.debug(\"put({},{} bytes) fails\", pageId, page.length);\n-      }\n+      LOG.debug(\"put({},{} bytes) exits: {}\", pageId, page.length, inserted);\n       return inserted;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4NDg4MA==", "url": "https://github.com/Alluxio/alluxio/pull/11151#discussion_r391184880", "bodyText": "Could we add metrics?", "author": "calvinjia", "createdAt": "2020-03-11T18:40:08Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -209,6 +224,40 @@ private ReadWriteLock getPageLock(PageId pageId) {\n   @Override\n   public boolean put(PageId pageId, byte[] page) {\n     LOG.debug(\"put({},{} bytes) enters\", pageId, page.length);\n+    if (!mAsyncWrite) {\n+      boolean inserted = putInternal(pageId, page);\n+      if (inserted) {\n+        LOG.debug(\"put({},{} bytes) exits\", pageId, page.length);\n+      } else {\n+        LOG.debug(\"put({},{} bytes) fails\", pageId, page.length);\n+      }\n+      return inserted;\n+    }\n+\n+    if (!mPendingRequests.add(pageId)) { // already queued\n+      return false;\n+    }\n+    try {\n+      mAsyncCacheExecutor.submit(() -> {\n+        try {\n+          putInternal(pageId, page);\n+        } finally {\n+          mPendingRequests.remove(pageId);\n+        }\n+      });\n+    } catch (RejectedExecutionException e) { // queue is full, skip\n+      // RejectedExecutionException may be thrown in extreme cases when the\n+      // highly concurrent caching workloads. In these cases, return false\n+      mPendingRequests.remove(pageId);\n+      LOG.debug(\"put({},{} bytes) fails due to full queue\", pageId, page.length);", "originalCommit": "f705e263cbb018c9bdfefbc02b8960be5457c99c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4NDI3Mw==", "url": "https://github.com/Alluxio/alluxio/pull/11151#discussion_r391284273", "bodyText": "added", "author": "apc999", "createdAt": "2020-03-11T21:40:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4NDg4MA=="}], "type": "inlineReview", "revised_code": {"commit": "1a8989f2e7ad5ac02164ba34537f98982e051282", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\nindex 1079ed46ab..20f1ad3868 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\n\n@@ -226,11 +228,7 @@ public class LocalCacheManager implements CacheManager {\n     LOG.debug(\"put({},{} bytes) enters\", pageId, page.length);\n     if (!mAsyncWrite) {\n       boolean inserted = putInternal(pageId, page);\n-      if (inserted) {\n-        LOG.debug(\"put({},{} bytes) exits\", pageId, page.length);\n-      } else {\n-        LOG.debug(\"put({},{} bytes) fails\", pageId, page.length);\n-      }\n+      LOG.debug(\"put({},{} bytes) exits: {}\", pageId, page.length, inserted);\n       return inserted;\n     }\n \n"}}, {"oid": "d6394c27fcb56072f02796f9456cf674786258b6", "url": "https://github.com/Alluxio/alluxio/commit/d6394c27fcb56072f02796f9456cf674786258b6", "message": "Fix test", "committedDate": "2020-03-11T21:31:05Z", "type": "commit"}, {"oid": "1a8989f2e7ad5ac02164ba34537f98982e051282", "url": "https://github.com/Alluxio/alluxio/commit/1a8989f2e7ad5ac02164ba34537f98982e051282", "message": "Address comments", "committedDate": "2020-03-11T21:41:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwMTQwOA==", "url": "https://github.com/Alluxio/alluxio/pull/11151#discussion_r391301408", "bodyText": "checkstyle?", "author": "calvinjia", "createdAt": "2020-03-11T22:17:11Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -173,14 +173,16 @@ public static LocalCacheManager create(AlluxioConfiguration conf) throws IOExcep\n     mPageSize = conf.getBytes(PropertyKey.USER_CLIENT_CACHE_PAGE_SIZE);\n     mAsyncWrite = conf.getBoolean(PropertyKey.USER_CLIENT_CACHE_ASYNC_WRITE_ENABLED);\n     mCacheSize = pageStore.getCacheSize();\n-    for (int i = 0; i < LOCK_SIZE; i++) {\n+    for (int i = 0; i < LOCK_SIZE; i ++) {", "originalCommit": "1a8989f2e7ad5ac02164ba34537f98982e051282", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b29e105e6a8d5b96a8a20cc485da10e2ff1ad0c1", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\nindex 20f1ad3868..f5a060aeee 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\n\n@@ -173,7 +173,7 @@ public class LocalCacheManager implements CacheManager {\n     mPageSize = conf.getBytes(PropertyKey.USER_CLIENT_CACHE_PAGE_SIZE);\n     mAsyncWrite = conf.getBoolean(PropertyKey.USER_CLIENT_CACHE_ASYNC_WRITE_ENABLED);\n     mCacheSize = pageStore.getCacheSize();\n-    for (int i = 0; i < LOCK_SIZE; i ++) {\n+    for (int i = 0; i < LOCK_SIZE; i++) {\n       mPageLocks[i] = new ReentrantReadWriteLock();\n     }\n     mPendingRequests = new ConcurrentHashSet<>();\n"}}, {"oid": "b29e105e6a8d5b96a8a20cc485da10e2ff1ad0c1", "url": "https://github.com/Alluxio/alluxio/commit/b29e105e6a8d5b96a8a20cc485da10e2ff1ad0c1", "message": "Update LocalCacheManager.java", "committedDate": "2020-03-11T22:31:08Z", "type": "commit"}, {"oid": "bb2083afe2e84dfba2360bea679ffb1063b6c8a2", "url": "https://github.com/Alluxio/alluxio/commit/bb2083afe2e84dfba2360bea679ffb1063b6c8a2", "message": "Fix integration tests", "committedDate": "2020-03-12T18:31:23Z", "type": "commit"}]}