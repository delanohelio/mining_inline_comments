{"pr_number": 10718, "pr_title": "Change the default coalescing behavior", "pr_createdAt": "2020-01-09T19:17:07Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10718", "timeline": [{"oid": "820ed449c0b85517e3974b66632a5ed248b0d023", "url": "https://github.com/Alluxio/alluxio/commit/820ed449c0b85517e3974b66632a5ed248b0d023", "message": "add a test for default transform jobs", "committedDate": "2020-01-08T22:37:35Z", "type": "commit"}, {"oid": "ff86ca08d4459d8a14d1df89380a3aff3f8c60e8", "url": "https://github.com/Alluxio/alluxio/commit/ff86ca08d4459d8a14d1df89380a3aff3f8c60e8", "message": "Add logic to dynamically compute the number of files we should coalesce", "committedDate": "2020-01-09T19:08:47Z", "type": "commit"}, {"oid": "56611af19bd869a36cb6791fcf3c4cd96ebc8ef4", "url": "https://github.com/Alluxio/alluxio/commit/56611af19bd869a36cb6791fcf3c4cd96ebc8ef4", "message": "checkstyle fix", "committedDate": "2020-01-09T19:15:32Z", "type": "commit"}, {"oid": "136794df1f17e7da23d323adf666a84fc0bc6688", "url": "https://github.com/Alluxio/alluxio/commit/136794df1f17e7da23d323adf666a84fc0bc6688", "message": "fix tests", "committedDate": "2020-01-09T19:37:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI0MTMzNA==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r365241334", "bodyText": "I feel like the file size should also be a config parameter.", "author": "gpang", "createdAt": "2020-01-10T13:48:56Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -78,13 +96,19 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    long sum = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        sum += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int numOfFiles = config.getNumFiles();", "originalCommit": "136794df1f17e7da23d323adf666a84fc0bc6688", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM2MjUyNQ==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r365362525", "bodyText": "I am not sure which file size you are referring to here? the file size can not be determined until we read the result of listStatus right? that's why it can not be a config parameter?", "author": "yuzhu", "createdAt": "2020-01-10T18:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI0MTMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM4MDQxMQ==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r365380411", "bodyText": "What I meant was, when we do something like averageSize < FileUtils.ONE_GB, we should use the file size as a config parameter.", "author": "gpang", "createdAt": "2020-01-10T18:54:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI0MTMzNA=="}], "type": "inlineReview", "revised_code": {"commit": "f388a5363ff8484047468bd698abdd380721662c", "chunk": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 1f6ed8ed8e..d61cbe5116 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n\n@@ -106,7 +105,7 @@ public final class CompactDefinition\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n     int numOfFiles = config.getNumFiles();\n     if (numOfFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n-      numOfFiles = calcNumOfFiles(files.size(), sum / files.size());\n+      numOfFiles = calcNumOfFiles(files.size(), sum / files.size(), config.getFileSize());\n     }\n     int groupSize = Math.max(1, (files.size() + 1) / numOfFiles);\n     // Files to be compacted are grouped into different groups,\n"}}, {"oid": "f388a5363ff8484047468bd698abdd380721662c", "url": "https://github.com/Alluxio/alluxio/commit/f388a5363ff8484047468bd698abdd380721662c", "message": "refactor file size to be an option", "committedDate": "2020-01-14T22:54:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ5NjgyMA==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r367496820", "bodyText": "Rename this to hive.file.size, since this is relevant to the hive write type.", "author": "gpang", "createdAt": "2020-01-16T15:51:50Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "diffHunk": "@@ -27,6 +28,8 @@\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n   private static final String NUM_FILES_OPTION = \"hive.num.files\";\n+  private static final String FILE_SIZE = \"file.size\";", "originalCommit": "f388a5363ff8484047468bd698abdd380721662c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3de293b7cd343755786e6a606f983d8c708a2cc", "chunk": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nindex 0d9f1bee16..485d501f77 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n\n@@ -28,7 +28,7 @@ import java.util.Map;\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n   private static final String NUM_FILES_OPTION = \"hive.num.files\";\n-  private static final String FILE_SIZE = \"file.size\";\n+  private static final String FILE_SIZE = \"hive.file.size\";\n   private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB;\n   private static final int DEFAULT_NUM_FILES = 1;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ5OTc5MQ==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r367499791", "bodyText": "In the future, we should convert this to a map of parameters.", "author": "gpang", "createdAt": "2020-01-16T15:56:15Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "diffHunk": "@@ -73,6 +84,6 @@ public JobConfig generateJobConfig(Layout base, Layout transformed) {\n         TransformActionUtils.generatePartitionInfo(base);\n     return new CompactConfig(basePartitionInfo, base.getLocation().toString(),\n         transformed.getLocation().toString(),\n-        mLayoutType, mNumFiles);\n+        mLayoutType, mNumFiles, mFileSize);", "originalCommit": "f388a5363ff8484047468bd698abdd380721662c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxMjYxMg==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r367512612", "bodyText": "Maybe rename to \"EMPTY_DEFINITION\"?", "author": "gpang", "createdAt": "2020-01-16T16:17:05Z", "path": "table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java", "diffHunk": "@@ -81,6 +81,7 @@\n   private static final String TABLE1 = TestDatabase.getTableName(0);\n   private static final String TABLE2 = TestDatabase.getTableName(1);\n   private static final String TABLE3 = TestDatabase.getTableName(2);\n+  private static final String DEFINITION_DEFAULT = \"\";", "originalCommit": "f388a5363ff8484047468bd698abdd380721662c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3de293b7cd343755786e6a606f983d8c708a2cc", "chunk": "diff --git a/table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java b/table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java\nindex 3118022b36..641882d928 100644\n--- a/table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java\n+++ b/table/server/master/src/test/java/alluxio/master/table/transform/TransformManagerTest.java\n\n@@ -81,7 +81,7 @@ public class TransformManagerTest {\n   private static final String TABLE1 = TestDatabase.getTableName(0);\n   private static final String TABLE2 = TestDatabase.getTableName(1);\n   private static final String TABLE3 = TestDatabase.getTableName(2);\n-  private static final String DEFINITION_DEFAULT = \"\";\n+  private static final String EMPTY_DEFINITION = \"\";\n   private static final String DEFINITION1 = \"write(hive).option(hive.num.files, 1)\";\n   private static final String DEFINITION2 = \"write(hive).option(hive.num.files, 2)\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxMzM2OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r367513369", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void DynamicNumFiles() {\n          \n          \n            \n              public void dynamicNumFiles() {", "author": "gpang", "createdAt": "2020-01-16T16:18:21Z", "path": "table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java", "diffHunk": "@@ -51,10 +51,23 @@ public void negativeNumFiles() {\n   }\n \n   @Test\n-  public void zeroNumFiles() {\n-    mException.expect(IllegalArgumentException.class);\n-    mException.expectMessage(ExceptionMessage.TRANSFORM_WRITE_ACTION_INVALID_NUM_FILES.toString());\n-    TransformAction.Parser.parse(\"write(hive).option(hive.num.files, 0)\");\n+  public void DynamicNumFiles() {", "originalCommit": "f388a5363ff8484047468bd698abdd380721662c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3de293b7cd343755786e6a606f983d8c708a2cc", "chunk": "diff --git a/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java b/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\nindex 2ea4785938..3ef1552c35 100644\n--- a/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\n+++ b/table/server/common/src/test/java/alluxio/table/common/transform/action/WriteActionTest.java\n\n@@ -51,7 +51,7 @@ public class WriteActionTest {\n   }\n \n   @Test\n-  public void DynamicNumFiles() {\n+  public void dynamicNumFiles() {\n     TransformAction action = TransformAction.Parser.parse(\n         \"write(hive).option(hive.num.files, 0).option(file.size, 1024)\");\n     assertEquals(WriteAction.class, action.getClass());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxNTkyMA==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r367515920", "bodyText": "rename to totalFileSize?", "author": "gpang", "createdAt": "2020-01-16T16:22:30Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -78,13 +95,19 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    long sum = 0;", "originalCommit": "f388a5363ff8484047468bd698abdd380721662c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3de293b7cd343755786e6a606f983d8c708a2cc", "chunk": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex d61cbe5116..2954178e8b 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n\n@@ -95,30 +95,39 @@ public final class CompactDefinition\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n-    long sum = 0;\n+    long totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n-        sum += status.getLength();\n+        totalFileSize += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int numOfFiles = config.getNumFiles();\n-    if (numOfFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n-      numOfFiles = calcNumOfFiles(files.size(), sum / files.size(), config.getFileSize());\n+    int numFiles = config.getNumFiles();\n+    if (numFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n+      numFiles = calcNumOfFiles(files.size(), totalFileSize / files.size(), config.getFileSize());\n     }\n-    int groupSize = Math.max(1, (files.size() + 1) / numOfFiles);\n+    long groupMaxSize = totalFileSize / numFiles;\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n     // different tasks are assigned to different workers in a round robin way.\n-    ArrayList<String> group = new ArrayList<>(groupSize);\n+    // We keep adding files to the group, until it exceeds the newFileSize.\n+    ArrayList<String> group = new ArrayList<>();\n     int workerIndex = 0;\n     int outputIndex = 0;\n-    for (int i = 0; i < files.size(); i++) {\n-      URIStatus file = files.get(i);\n-      group.add(inputDir.join(file.getName()).toString());\n-      if (group.size() == groupSize || i == files.size() - 1) {\n+    int groupIndex = 0; // Number of groups already generated\n+    long currentGroupSize = 0;\n+    for (URIStatus file : files) {\n+      // add the file to the group if\n+      // 1. group is empty\n+      // 2. group is the last group\n+      // 3. group size with the new file will not exceed the max group size\n+      if (group.isEmpty() || groupIndex == numFiles - 1\n+          || currentGroupSize + file.getLength() <= groupMaxSize) {\n+        group.add(inputDir.join(file.getName()).toString());\n+        currentGroupSize += file.getLength();\n+      } else {\n         WorkerInfo worker = jobWorkers.get(workerIndex++);\n         if (workerIndex == jobWorkers.size()) {\n           workerIndex = 0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxNzA3OA==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r367517078", "bodyText": "How will this constant group size work when the input file sizes are different? Shouldn't the file size configuration be enforced by considering each input file size?", "author": "gpang", "createdAt": "2020-01-16T16:24:25Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -78,13 +95,19 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    long sum = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        sum += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int numOfFiles = config.getNumFiles();\n+    if (numOfFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n+      numOfFiles = calcNumOfFiles(files.size(), sum / files.size(), config.getFileSize());\n+    }\n+    int groupSize = Math.max(1, (files.size() + 1) / numOfFiles);", "originalCommit": "f388a5363ff8484047468bd698abdd380721662c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3de293b7cd343755786e6a606f983d8c708a2cc", "chunk": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex d61cbe5116..2954178e8b 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n\n@@ -95,30 +95,39 @@ public final class CompactDefinition\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n-    long sum = 0;\n+    long totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n-        sum += status.getLength();\n+        totalFileSize += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int numOfFiles = config.getNumFiles();\n-    if (numOfFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n-      numOfFiles = calcNumOfFiles(files.size(), sum / files.size(), config.getFileSize());\n+    int numFiles = config.getNumFiles();\n+    if (numFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n+      numFiles = calcNumOfFiles(files.size(), totalFileSize / files.size(), config.getFileSize());\n     }\n-    int groupSize = Math.max(1, (files.size() + 1) / numOfFiles);\n+    long groupMaxSize = totalFileSize / numFiles;\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n     // different tasks are assigned to different workers in a round robin way.\n-    ArrayList<String> group = new ArrayList<>(groupSize);\n+    // We keep adding files to the group, until it exceeds the newFileSize.\n+    ArrayList<String> group = new ArrayList<>();\n     int workerIndex = 0;\n     int outputIndex = 0;\n-    for (int i = 0; i < files.size(); i++) {\n-      URIStatus file = files.get(i);\n-      group.add(inputDir.join(file.getName()).toString());\n-      if (group.size() == groupSize || i == files.size() - 1) {\n+    int groupIndex = 0; // Number of groups already generated\n+    long currentGroupSize = 0;\n+    for (URIStatus file : files) {\n+      // add the file to the group if\n+      // 1. group is empty\n+      // 2. group is the last group\n+      // 3. group size with the new file will not exceed the max group size\n+      if (group.isEmpty() || groupIndex == numFiles - 1\n+          || currentGroupSize + file.getLength() <= groupMaxSize) {\n+        group.add(inputDir.join(file.getName()).toString());\n+        currentGroupSize += file.getLength();\n+      } else {\n         WorkerInfo worker = jobWorkers.get(workerIndex++);\n         if (workerIndex == jobWorkers.size()) {\n           workerIndex = 0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUxNzQ0Mg==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r367517442", "bodyText": "rename to numFiles", "author": "gpang", "createdAt": "2020-01-16T16:25:00Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -78,13 +95,19 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    long sum = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        sum += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int numOfFiles = config.getNumFiles();", "originalCommit": "f388a5363ff8484047468bd698abdd380721662c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3de293b7cd343755786e6a606f983d8c708a2cc", "chunk": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex d61cbe5116..2954178e8b 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n\n@@ -95,30 +95,39 @@ public final class CompactDefinition\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n-    long sum = 0;\n+    long totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n-        sum += status.getLength();\n+        totalFileSize += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int numOfFiles = config.getNumFiles();\n-    if (numOfFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n-      numOfFiles = calcNumOfFiles(files.size(), sum / files.size(), config.getFileSize());\n+    int numFiles = config.getNumFiles();\n+    if (numFiles == CompactConfig.DYNAMIC_NUM_OF_FILES) {\n+      numFiles = calcNumOfFiles(files.size(), totalFileSize / files.size(), config.getFileSize());\n     }\n-    int groupSize = Math.max(1, (files.size() + 1) / numOfFiles);\n+    long groupMaxSize = totalFileSize / numFiles;\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n     // different tasks are assigned to different workers in a round robin way.\n-    ArrayList<String> group = new ArrayList<>(groupSize);\n+    // We keep adding files to the group, until it exceeds the newFileSize.\n+    ArrayList<String> group = new ArrayList<>();\n     int workerIndex = 0;\n     int outputIndex = 0;\n-    for (int i = 0; i < files.size(); i++) {\n-      URIStatus file = files.get(i);\n-      group.add(inputDir.join(file.getName()).toString());\n-      if (group.size() == groupSize || i == files.size() - 1) {\n+    int groupIndex = 0; // Number of groups already generated\n+    long currentGroupSize = 0;\n+    for (URIStatus file : files) {\n+      // add the file to the group if\n+      // 1. group is empty\n+      // 2. group is the last group\n+      // 3. group size with the new file will not exceed the max group size\n+      if (group.isEmpty() || groupIndex == numFiles - 1\n+          || currentGroupSize + file.getLength() <= groupMaxSize) {\n+        group.add(inputDir.join(file.getName()).toString());\n+        currentGroupSize += file.getLength();\n+      } else {\n         WorkerInfo worker = jobWorkers.get(workerIndex++);\n         if (workerIndex == jobWorkers.size()) {\n           workerIndex = 0;\n"}}, {"oid": "c3de293b7cd343755786e6a606f983d8c708a2cc", "url": "https://github.com/Alluxio/alluxio/commit/c3de293b7cd343755786e6a606f983d8c708a2cc", "message": "address comments, and change the way we group files", "committedDate": "2020-02-03T23:05:38Z", "type": "commit"}, {"oid": "5a705f516eef76d7773bc8b8407db5dbd7ceb359", "url": "https://github.com/Alluxio/alluxio/commit/5a705f516eef76d7773bc8b8407db5dbd7ceb359", "message": "fix test", "committedDate": "2020-02-03T23:23:57Z", "type": "commit"}, {"oid": "7d668db44ada4781d725accb70e7fb7785e21b61", "url": "https://github.com/Alluxio/alluxio/commit/7d668db44ada4781d725accb70e7fb7785e21b61", "message": "Merge branch 'master' into coalesce", "committedDate": "2020-02-03T23:45:57Z", "type": "commit"}, {"oid": "d97235895308c37613f5e30d19befdd87d363cec", "url": "https://github.com/Alluxio/alluxio/commit/d97235895308c37613f5e30d19befdd87d363cec", "message": "Fix test", "committedDate": "2020-02-04T21:37:14Z", "type": "commit"}, {"oid": "7ed270f52294441dc88985dc7efa63223e37edc7", "url": "https://github.com/Alluxio/alluxio/commit/7ed270f52294441dc88985dc7efa63223e37edc7", "message": "better heuristics for including a file in a particular group.", "committedDate": "2020-02-04T21:50:09Z", "type": "commit"}, {"oid": "9096f1726980e9df0676deed30c403941e53ffa0", "url": "https://github.com/Alluxio/alluxio/commit/9096f1726980e9df0676deed30c403941e53ffa0", "message": "change the parameters and the algorithm to fill bucket to include a minimum bucket size.", "committedDate": "2020-02-05T00:05:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNDQ1Mg==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375014452", "bodyText": "should these be renamed to reflect \"num files max\", and \"file size min\"?", "author": "gpang", "createdAt": "2020-02-05T01:22:08Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "diffHunk": "@@ -27,6 +28,8 @@\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n   private static final String NUM_FILES_OPTION = \"hive.num.files\";", "originalCommit": "9096f1726980e9df0676deed30c403941e53ffa0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38041470ce7b837b8dfed929175869054991f75b", "chunk": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nindex 485d501f77..f75396437e 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n\n@@ -27,10 +27,10 @@ import java.util.Map;\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.num.files\";\n-  private static final String FILE_SIZE = \"hive.file.size\";\n-  private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB;\n-  private static final int DEFAULT_NUM_FILES = 1;\n+  private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";\n+  private static final String FILE_SIZE_OPTION = \"hive.file.minsize\";\n+  private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n+  private static final int DEFAULT_NUM_FILES = 100;\n \n   /**\n    * Layout type, for example \"hive\".\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNDQ4MQ==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375014481", "bodyText": "This should be 2g?", "author": "gpang", "createdAt": "2020-02-05T01:22:18Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "diffHunk": "@@ -27,6 +28,8 @@\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n   private static final String NUM_FILES_OPTION = \"hive.num.files\";\n+  private static final String FILE_SIZE = \"hive.file.size\";\n+  private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB;", "originalCommit": "9096f1726980e9df0676deed30c403941e53ffa0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38041470ce7b837b8dfed929175869054991f75b", "chunk": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nindex 485d501f77..f75396437e 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n\n@@ -27,10 +27,10 @@ import java.util.Map;\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.num.files\";\n-  private static final String FILE_SIZE = \"hive.file.size\";\n-  private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB;\n-  private static final int DEFAULT_NUM_FILES = 1;\n+  private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";\n+  private static final String FILE_SIZE_OPTION = \"hive.file.minsize\";\n+  private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n+  private static final int DEFAULT_NUM_FILES = 100;\n \n   /**\n    * Layout type, for example \"hive\".\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNDY5Ng==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375014696", "bodyText": "should the default be setting max files to 100 and min file size to 2g?", "author": "gpang", "createdAt": "2020-02-05T01:23:07Z", "path": "table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java", "diffHunk": "@@ -54,7 +54,7 @@\n     implements TableMaster, DelegatingJournaled {\n   private static final Logger LOG = LoggerFactory.getLogger(DefaultTableMaster.class);\n   private static final Set<Class<? extends Server>> DEPS = ImmutableSet.of(FileSystemMaster.class);\n-  private static final String DEFAULT_TRANSFORMATION = \"write(hive).option(hive.num.files, 100);\";\n+  public static final String DEFAULT_TRANSFORMATION = \"write(hive).option(hive.num.files, 0)\";", "originalCommit": "9096f1726980e9df0676deed30c403941e53ffa0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38041470ce7b837b8dfed929175869054991f75b", "chunk": "diff --git a/table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java b/table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java\nindex e817bda305..298be9d97f 100644\n--- a/table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java\n+++ b/table/server/master/src/main/java/alluxio/master/table/DefaultTableMaster.java\n\n@@ -54,7 +54,7 @@ public class DefaultTableMaster extends CoreMaster\n     implements TableMaster, DelegatingJournaled {\n   private static final Logger LOG = LoggerFactory.getLogger(DefaultTableMaster.class);\n   private static final Set<Class<? extends Server>> DEPS = ImmutableSet.of(FileSystemMaster.class);\n-  public static final String DEFAULT_TRANSFORMATION = \"write(hive).option(hive.num.files, 0)\";\n+  public static final String DEFAULT_TRANSFORMATION = \"write(hive)\";\n \n   private final AlluxioCatalog mCatalog;\n   private final TransformManager mTransformManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNTA1OA==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375015058", "bodyText": "I think static final variable names have to be all caps?", "author": "gpang", "createdAt": "2020-02-05T01:24:27Z", "path": "job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java", "diffHunk": "@@ -22,17 +22,23 @@\n import alluxio.job.plan.SelectExecutorsTest;\n import alluxio.wire.WorkerInfo;\n \n+import org.apache.commons.io.FileUtils;\n import org.junit.Test;\n import org.mockito.Mockito;\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.PrimitiveIterator;\n+import java.util.Random;\n import java.util.Set;\n+import java.util.stream.LongStream;\n \n public class CompactDefinitionSelectExecutorsTest extends SelectExecutorsTest {\n \n   private static final String INPUT_DIR = \"/input\";\n   private static final String OUTPUT_DIR = \"/output\";\n+  private static final PrimitiveIterator.OfLong sLongStream = (new Random()).longs(FileUtils.ONE_GB * 2, FileUtils.ONE_GB * 10).iterator();", "originalCommit": "9096f1726980e9df0676deed30c403941e53ffa0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38041470ce7b837b8dfed929175869054991f75b", "chunk": "diff --git a/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java b/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java\nindex 6f747d93cc..af67fc6e2b 100644\n--- a/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java\n+++ b/job/server/src/test/java/alluxio/job/plan/transform/CompactDefinitionSelectExecutorsTest.java\n\n@@ -31,14 +31,13 @@ import java.util.List;\n import java.util.PrimitiveIterator;\n import java.util.Random;\n import java.util.Set;\n-import java.util.stream.LongStream;\n \n public class CompactDefinitionSelectExecutorsTest extends SelectExecutorsTest {\n \n   private static final String INPUT_DIR = \"/input\";\n   private static final String OUTPUT_DIR = \"/output\";\n-  private static final PrimitiveIterator.OfLong sLongStream = (new Random()).longs(FileUtils.ONE_GB * 2, FileUtils.ONE_GB * 10).iterator();\n-\n+  private static final PrimitiveIterator.OfLong LONG_STREAM\n+      = (new Random()).longs(FileUtils.ONE_GB * 2, FileUtils.ONE_GB * 10).iterator();\n \n   @Test\n   public void testExecutorsParallel() throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNTY0NA==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375015644", "bodyText": "NIT:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (totalFileSize / config.getMinFileSize() >= maxNumFiles) {\n          \n          \n            \n                if (totalFileSize / groupMinSize > maxNumFiles) {", "author": "gpang", "createdAt": "2020-02-05T01:26:44Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -80,24 +80,43 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    // use double to prevent overflow\n+    double totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        totalFileSize += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int maxNumFiles = config.getMaxNumFiles();\n+    long groupMinSize = config.getMinFileSize();\n+    if (totalFileSize / config.getMinFileSize() >= maxNumFiles) {", "originalCommit": "9096f1726980e9df0676deed30c403941e53ffa0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38041470ce7b837b8dfed929175869054991f75b", "chunk": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 41bdffbdfd..f594056dca 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n\n@@ -91,7 +91,7 @@ public final class CompactDefinition\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n     int maxNumFiles = config.getMaxNumFiles();\n     long groupMinSize = config.getMinFileSize();\n-    if (totalFileSize / config.getMinFileSize() >= maxNumFiles) {\n+    if (totalFileSize / groupMinSize > maxNumFiles) {\n       groupMinSize = Math.round(totalFileSize / maxNumFiles);\n     }\n     // Files to be compacted are grouped into different groups,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxNjM0Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375016343", "bodyText": "can we pre-compute groupMinSize / 2 earlier?", "author": "gpang", "createdAt": "2020-02-05T01:29:39Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -80,24 +80,43 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    // use double to prevent overflow\n+    double totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        totalFileSize += status.getLength();\n       }\n     }\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int maxNumFiles = config.getMaxNumFiles();\n+    long groupMinSize = config.getMinFileSize();\n+    if (totalFileSize / config.getMinFileSize() >= maxNumFiles) {\n+      groupMinSize = Math.round(totalFileSize / maxNumFiles);\n+    }\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n     // different tasks are assigned to different workers in a round robin way.\n-    ArrayList<String> group = new ArrayList<>(groupSize);\n+    // We keep adding files to the group, until adding more files makes it too big.\n+    ArrayList<String> group = new ArrayList<>();\n     int workerIndex = 0;\n     int outputIndex = 0;\n-    for (int i = 0; i < files.size(); i++) {\n-      URIStatus file = files.get(i);\n-      group.add(inputDir.join(file.getName()).toString());\n-      if (group.size() == groupSize || i == files.size() - 1) {\n+    // Number of groups already generated\n+    int groupIndex = 0;\n+    long currentGroupSize = 0;\n+    for (URIStatus file : files) {\n+      // add the file to the group if\n+      // 1. group is empty\n+      // 2. group is the last group\n+      // 3. group size with the new file is closer to the groupMinSize than group size without it\n+      if (group.isEmpty() || groupIndex == maxNumFiles - 1\n+          || (currentGroupSize + file.getLength()) <= groupMinSize / 2", "originalCommit": "9096f1726980e9df0676deed30c403941e53ffa0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38041470ce7b837b8dfed929175869054991f75b", "chunk": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex 41bdffbdfd..f594056dca 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n\n@@ -91,7 +91,7 @@ public final class CompactDefinition\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n     int maxNumFiles = config.getMaxNumFiles();\n     long groupMinSize = config.getMinFileSize();\n-    if (totalFileSize / config.getMinFileSize() >= maxNumFiles) {\n+    if (totalFileSize / groupMinSize > maxNumFiles) {\n       groupMinSize = Math.round(totalFileSize / maxNumFiles);\n     }\n     // Files to be compacted are grouped into different groups,\n"}}, {"oid": "38041470ce7b837b8dfed929175869054991f75b", "url": "https://github.com/Alluxio/alluxio/commit/38041470ce7b837b8dfed929175869054991f75b", "message": "address comment", "committedDate": "2020-02-05T02:05:17Z", "type": "commit"}, {"oid": "da0b50b697b9f477ec6335808eff1c97d047827f", "url": "https://github.com/Alluxio/alluxio/commit/da0b50b697b9f477ec6335808eff1c97d047827f", "message": "fix checkstyle", "committedDate": "2020-02-05T02:36:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzg4Nw==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375033887", "bodyText": "I think our convention has been something like:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";\n          \n          \n            \n              private static final String NUM_FILES_OPTION = \"hive.file.count.max\";", "author": "gpang", "createdAt": "2020-02-05T02:43:41Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "diffHunk": "@@ -26,8 +27,10 @@\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.num.files\";\n-  private static final int DEFAULT_NUM_FILES = 1;\n+  private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";", "originalCommit": "da0b50b697b9f477ec6335808eff1c97d047827f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5cdf3d39ee88beb258301adccecb3fe821640b95", "chunk": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nindex f75396437e..3162f716ff 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n\n@@ -27,8 +27,8 @@ import java.util.Map;\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";\n-  private static final String FILE_SIZE_OPTION = \"hive.file.minsize\";\n+  private static final String NUM_FILES_OPTION = \"hive.file.count.max\";\n+  private static final String FILE_SIZE_OPTION = \"hive.file.size.min\";\n   private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n   private static final int DEFAULT_NUM_FILES = 100;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzMzk3NA==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375033974", "bodyText": "I think our convention is like:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String FILE_SIZE_OPTION = \"hive.file.minsize\";\n          \n          \n            \n              private static final String FILE_SIZE_OPTION = \"hive.file.size.min\";", "author": "gpang", "createdAt": "2020-02-05T02:44:05Z", "path": "table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java", "diffHunk": "@@ -26,8 +27,10 @@\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.num.files\";\n-  private static final int DEFAULT_NUM_FILES = 1;\n+  private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";\n+  private static final String FILE_SIZE_OPTION = \"hive.file.minsize\";", "originalCommit": "da0b50b697b9f477ec6335808eff1c97d047827f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5cdf3d39ee88beb258301adccecb3fe821640b95", "chunk": "diff --git a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\nindex f75396437e..3162f716ff 100644\n--- a/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n+++ b/table/server/common/src/main/java/alluxio/table/common/transform/action/WriteAction.java\n\n@@ -27,8 +27,8 @@ import java.util.Map;\n  */\n public class WriteAction implements TransformAction {\n   private static final String NAME = \"write\";\n-  private static final String NUM_FILES_OPTION = \"hive.file.maxcount\";\n-  private static final String FILE_SIZE_OPTION = \"hive.file.minsize\";\n+  private static final String NUM_FILES_OPTION = \"hive.file.count.max\";\n+  private static final String FILE_SIZE_OPTION = \"hive.file.size.min\";\n   private static final long DEFAULT_FILE_SIZE = FileUtils.ONE_GB * 2;\n   private static final int DEFAULT_NUM_FILES = 100;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAzNDYxMw==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375034613", "bodyText": "I have another higher level question. If there is a file conversion happening, for example, csv to parquet, there will most likely be a reduction in file sizes. This computes the INPUT file sizes, but ideally we should be computing the desired OUTPUT file sizes. Is there a simple way we can perform a heuristic for when we are converting input file types to different output types?", "author": "gpang", "createdAt": "2020-02-05T02:47:04Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -80,24 +80,44 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    // use double to prevent overflow\n+    double totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        totalFileSize += status.getLength();", "originalCommit": "da0b50b697b9f477ec6335808eff1c97d047827f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7cc76317fbf6a673089e488120f22cfcd9e4cb79", "chunk": "diff --git a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\nindex f594056dca..c75783b7c0 100644\n--- a/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java\n\n@@ -88,12 +94,20 @@ public final class CompactDefinition\n         totalFileSize += status.getLength();\n       }\n     }\n+\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n     int maxNumFiles = config.getMaxNumFiles();\n     long groupMinSize = config.getMinFileSize();\n     if (totalFileSize / groupMinSize > maxNumFiles) {\n       groupMinSize = Math.round(totalFileSize / maxNumFiles);\n     }\n+\n+    if (!files.isEmpty()) {\n+      // adjust the group minimum size for source compression ratio\n+      groupMinSize *= COMPRESSION_RATIO.get(\n+          config.getPartitionInfo().getFormat(files.get(0).getName()));\n+    }\n+\n     // Files to be compacted are grouped into different groups,\n     // each group of files are compacted to one file,\n     // one task is to compact one group of files,\n"}}, {"oid": "5cdf3d39ee88beb258301adccecb3fe821640b95", "url": "https://github.com/Alluxio/alluxio/commit/5cdf3d39ee88beb258301adccecb3fe821640b95", "message": "address comments", "committedDate": "2020-02-05T23:45:06Z", "type": "commit"}, {"oid": "7cc76317fbf6a673089e488120f22cfcd9e4cb79", "url": "https://github.com/Alluxio/alluxio/commit/7cc76317fbf6a673089e488120f22cfcd9e4cb79", "message": "account for size difference due to compression between src and dest format", "committedDate": "2020-02-06T00:29:31Z", "type": "commit"}, {"oid": "8bf075178f93490487bc2567fb32ed7babc5ccbc", "url": "https://github.com/Alluxio/alluxio/commit/8bf075178f93490487bc2567fb32ed7babc5ccbc", "message": "fix tests", "committedDate": "2020-02-06T00:47:52Z", "type": "commit"}, {"oid": "f61727d0b3c03e73be50d8473bc9cf91064b015c", "url": "https://github.com/Alluxio/alluxio/commit/f61727d0b3c03e73be50d8473bc9cf91064b015c", "message": "fix test", "committedDate": "2020-02-06T04:37:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyODE3Ng==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375928176", "bodyText": "what happens if the format is unknown? Maybe for unknown formats, it should just default to 1.0 or 1.5 or something.", "author": "gpang", "createdAt": "2020-02-06T16:07:36Z", "path": "job/server/src/main/java/alluxio/job/plan/transform/CompactDefinition.java", "diffHunk": "@@ -80,24 +86,52 @@ private boolean shouldIgnore(URIStatus status) {\n     AlluxioURI outputDir = new AlluxioURI(config.getOutput());\n \n     List<URIStatus> files = Lists.newArrayList();\n+    // use double to prevent overflow\n+    double totalFileSize = 0;\n     for (URIStatus status : context.getFileSystem().listStatus(inputDir)) {\n       if (!shouldIgnore(status)) {\n         files.add(status);\n+        totalFileSize += status.getLength();\n       }\n     }\n+\n     Map<WorkerInfo, ArrayList<CompactTask>> assignments = Maps.newHashMap();\n-    int groupSize = Math.max(1, (files.size() + 1) / config.getNumFiles());\n+    int maxNumFiles = config.getMaxNumFiles();\n+    long groupMinSize = config.getMinFileSize();\n+    if (totalFileSize / groupMinSize > maxNumFiles) {\n+      groupMinSize = Math.round(totalFileSize / maxNumFiles);\n+    }\n+\n+    if (!files.isEmpty() && config.getPartitionInfo() != null) {\n+      // adjust the group minimum size for source compression ratio\n+      groupMinSize *= COMPRESSION_RATIO.get(", "originalCommit": "f61727d0b3c03e73be50d8473bc9cf91064b015c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk0MTkwMg==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375941902", "bodyText": "if the format is unknown, we have bigger problems.. we wouldn't even be able to read the file, right?", "author": "yuzhu", "createdAt": "2020-02-06T16:28:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyODE3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk0MjI3NA==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375942274", "bodyText": "in fact if the format is unknown, we throw an exception right now. which seems like the right thing to do", "author": "yuzhu", "createdAt": "2020-02-06T16:29:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyODE3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk5NTQ4OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10718#discussion_r375995489", "bodyText": "I see. Does the getFormat already handle the cases where the files don't have nice file extensions?", "author": "gpang", "createdAt": "2020-02-06T18:05:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyODE3Ng=="}], "type": "inlineReview", "revised_code": null}]}