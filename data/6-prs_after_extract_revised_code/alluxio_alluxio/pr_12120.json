{"pr_number": 12120, "pr_title": "Avoid printing long proto lines in messages and exception descriptions", "pr_createdAt": "2020-09-21T20:45:40Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/12120", "timeline": [{"oid": "905db3270b76893bc2b2a968e0d284bbd4058a57", "url": "https://github.com/Alluxio/alluxio/commit/905db3270b76893bc2b2a968e0d284bbd4058a57", "message": "Truncate long proto lines", "committedDate": "2020-09-21T20:43:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0OTE5MA==", "url": "https://github.com/Alluxio/alluxio/pull/12120#discussion_r492349190", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      formatErrorMessage(\"Failed to send request %s: stream is already closed or canceled.\",\n          \n          \n            \n                      formatErrorMessage(\"Failed to send request %s: stream is already closed or cancelled.\",\n          \n      \n    \n    \n  \n\nsince we're editing this line", "author": "ZacBlanco", "createdAt": "2020-09-21T21:12:49Z", "path": "core/client/fs/src/main/java/alluxio/client/block/stream/GrpcBlockingStream.java", "diffHunk": "@@ -92,8 +93,9 @@ public GrpcBlockingStream(Function<StreamObserver<ResT>, StreamObserver<ReqT>> r\n    */\n   public void send(ReqT request, long timeoutMs) throws IOException {\n     if (mClosed || mCanceled || mClosedFromRemote) {\n-      throw new CancelledException(formatErrorMessage(\n-          \"Failed to send request %s: stream is already closed or canceled.\", request));\n+      throw new CancelledException(\n+          formatErrorMessage(\"Failed to send request %s: stream is already closed or canceled.\",", "originalCommit": "905db3270b76893bc2b2a968e0d284bbd4058a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4Mzg0NQ==", "url": "https://github.com/Alluxio/alluxio/pull/12120#discussion_r492383845", "bodyText": "I didn't know what the correct spelling was, but this site says both are fine: https://www.grammarly.com/blog/canceled-vs-cancelled/\nI changed it to cancelled because that is what the exception name is also using.", "author": "gpang", "createdAt": "2020-09-21T22:35:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0OTE5MA=="}], "type": "inlineReview", "revised_code": {"commit": "4a1bafaca4ae99dff7045173877dfff27ae966b9", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/GrpcBlockingStream.java b/core/client/fs/src/main/java/alluxio/client/block/stream/GrpcBlockingStream.java\nindex 4ccecec757..3a34f8f633 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/GrpcBlockingStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/GrpcBlockingStream.java\n\n@@ -94,8 +94,8 @@ public class GrpcBlockingStream<ReqT, ResT> {\n   public void send(ReqT request, long timeoutMs) throws IOException {\n     if (mClosed || mCanceled || mClosedFromRemote) {\n       throw new CancelledException(\n-          formatErrorMessage(\"Failed to send request %s: stream is already closed or canceled.\",\n-              LogUtils.truncateMessageLines(request)));\n+          formatErrorMessage(\"Failed to send request %s: stream is already closed or cancelled.\",\n+              LogUtils.truncateMessageLineLength(request)));\n     }\n     try (LockResource lr = new LockResource(mLock)) {\n       while (true) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0OTU1MQ==", "url": "https://github.com/Alluxio/alluxio/pull/12120#discussion_r492349551", "bodyText": "most of the time its because of the large payload that the line is so large...what if instead we did request.toBuilder().setPayload(null) or something like that instead? Really it's just the payload causing the unreadability, right? I think it would be best to strip out the payload instead? I think its bad practice to be dumping that information in a log anyway.", "author": "ZacBlanco", "createdAt": "2020-09-21T21:13:38Z", "path": "core/client/fs/src/main/java/alluxio/client/block/stream/GrpcBlockingStream.java", "diffHunk": "@@ -92,8 +93,9 @@ public GrpcBlockingStream(Function<StreamObserver<ResT>, StreamObserver<ReqT>> r\n    */\n   public void send(ReqT request, long timeoutMs) throws IOException {\n     if (mClosed || mCanceled || mClosedFromRemote) {\n-      throw new CancelledException(formatErrorMessage(\n-          \"Failed to send request %s: stream is already closed or canceled.\", request));\n+      throw new CancelledException(\n+          formatErrorMessage(\"Failed to send request %s: stream is already closed or canceled.\",\n+              LogUtils.truncateMessageLines(request)));", "originalCommit": "905db3270b76893bc2b2a968e0d284bbd4058a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4MDg3MQ==", "url": "https://github.com/Alluxio/alluxio/pull/12120#discussion_r492380871", "bodyText": "Well, the main problem is that we technically cannot assume what type the request is. It can be any type, so we cannot assume it is a proto, or even which proto it is.\nI wanted to avoid adding instanceof calls for various proto types, and so the current mechanism is to just truncate long lines.", "author": "gpang", "createdAt": "2020-09-21T22:26:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0OTU1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxOTQxNA==", "url": "https://github.com/Alluxio/alluxio/pull/12120#discussion_r492419414", "bodyText": "fair enough", "author": "ZacBlanco", "createdAt": "2020-09-22T00:35:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0OTU1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a1bafaca4ae99dff7045173877dfff27ae966b9", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/GrpcBlockingStream.java b/core/client/fs/src/main/java/alluxio/client/block/stream/GrpcBlockingStream.java\nindex 4ccecec757..3a34f8f633 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/GrpcBlockingStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/GrpcBlockingStream.java\n\n@@ -94,8 +94,8 @@ public class GrpcBlockingStream<ReqT, ResT> {\n   public void send(ReqT request, long timeoutMs) throws IOException {\n     if (mClosed || mCanceled || mClosedFromRemote) {\n       throw new CancelledException(\n-          formatErrorMessage(\"Failed to send request %s: stream is already closed or canceled.\",\n-              LogUtils.truncateMessageLines(request)));\n+          formatErrorMessage(\"Failed to send request %s: stream is already closed or cancelled.\",\n+              LogUtils.truncateMessageLineLength(request)));\n     }\n     try (LockResource lr = new LockResource(mLock)) {\n       while (true) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM1MDM4OQ==", "url": "https://github.com/Alluxio/alluxio/pull/12120#discussion_r492350389", "bodyText": "Since LogUtils.truncateMessagelines(request) is always called regardless of debug level, we'll always be serializing the payload and allocating a string. I think that we should do a LOG.isDebugEnabled statement around this message if we intend to keep the log call the same", "author": "ZacBlanco", "createdAt": "2020-09-21T21:15:28Z", "path": "core/client/fs/src/main/java/alluxio/client/block/stream/GrpcBlockingStream.java", "diffHunk": "@@ -126,7 +130,7 @@ public void send(ReqT request, long timeoutMs) throws IOException {\n   public void send(ReqT request) throws IOException {\n     if (mClosed || mCanceled || mClosedFromRemote) {\n       LOG.debug(\"Failed to send request {}: stream is already closed or canceled. ({})\",\n-          request, mDescription);\n+          LogUtils.truncateMessageLines(request), mDescription);", "originalCommit": "905db3270b76893bc2b2a968e0d284bbd4058a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4MTMzMw==", "url": "https://github.com/Alluxio/alluxio/pull/12120#discussion_r492381333", "bodyText": "Done.", "author": "gpang", "createdAt": "2020-09-21T22:28:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM1MDM4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a1bafaca4ae99dff7045173877dfff27ae966b9", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/block/stream/GrpcBlockingStream.java b/core/client/fs/src/main/java/alluxio/client/block/stream/GrpcBlockingStream.java\nindex 4ccecec757..3a34f8f633 100644\n--- a/core/client/fs/src/main/java/alluxio/client/block/stream/GrpcBlockingStream.java\n+++ b/core/client/fs/src/main/java/alluxio/client/block/stream/GrpcBlockingStream.java\n\n@@ -129,8 +129,10 @@ public class GrpcBlockingStream<ReqT, ResT> {\n    */\n   public void send(ReqT request) throws IOException {\n     if (mClosed || mCanceled || mClosedFromRemote) {\n-      LOG.debug(\"Failed to send request {}: stream is already closed or canceled. ({})\",\n-          LogUtils.truncateMessageLines(request), mDescription);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Failed to send request {}: stream is already closed or cancelled. ({})\",\n+            LogUtils.truncateMessageLineLength(request), mDescription);\n+      }\n       return;\n     }\n     try (LockResource lr = new LockResource(mLock)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM1MzE3Mw==", "url": "https://github.com/Alluxio/alluxio/pull/12120#discussion_r492353173", "bodyText": "at first I thought this was the actual number of \"lines\" in the string. i.e. counting the number of \\n characters. Only after reading this code do I realize its the length of the string. Maybe rename to truncateMessageLineLength?\nAdditionally, do you think another method to limit the number of \\n characters useful?", "author": "ZacBlanco", "createdAt": "2020-09-21T21:21:22Z", "path": "core/common/src/main/java/alluxio/util/LogUtils.java", "diffHunk": "@@ -132,4 +136,38 @@ public static void warnWithException(Logger logger, String message, Object ...ar\n       logger.warn(message + \": {}\", args);\n     }\n   }\n+\n+  /**\n+   * Truncates each line of a message to a certain length.\n+   *\n+   * @param message the message to truncate the lines for\n+   * @return the message, with lines truncated to length {@link #MAX_TRUNCATED_LENGTH}\n+   */\n+  public static String truncateMessageLines(Object message) {\n+    return truncateMessageLines(message, MAX_TRUNCATED_LENGTH);\n+  }\n+\n+  /**\n+   * Truncates each line of a message to a certain length.\n+   *\n+   * @param message the message to truncate the lines for\n+   * @param maxLineLength the maximum length of a message line\n+   * @return the message, with lines truncated to the specified length\n+   */\n+  public static String truncateMessageLines(Object message, int maxLineLength) {", "originalCommit": "905db3270b76893bc2b2a968e0d284bbd4058a57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4MjM5OQ==", "url": "https://github.com/Alluxio/alluxio/pull/12120#discussion_r492382399", "bodyText": "I renamed the methods.\nLimiting the number of lines could also be useful. We can add that in a later PR.", "author": "gpang", "createdAt": "2020-09-21T22:31:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM1MzE3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4a1bafaca4ae99dff7045173877dfff27ae966b9", "chunk": "diff --git a/core/common/src/main/java/alluxio/util/LogUtils.java b/core/common/src/main/java/alluxio/util/LogUtils.java\nindex ed83b0eb20..50c7fe640e 100644\n--- a/core/common/src/main/java/alluxio/util/LogUtils.java\n+++ b/core/common/src/main/java/alluxio/util/LogUtils.java\n\n@@ -143,8 +143,8 @@ public final class LogUtils {\n    * @param message the message to truncate the lines for\n    * @return the message, with lines truncated to length {@link #MAX_TRUNCATED_LENGTH}\n    */\n-  public static String truncateMessageLines(Object message) {\n-    return truncateMessageLines(message, MAX_TRUNCATED_LENGTH);\n+  public static String truncateMessageLineLength(Object message) {\n+    return truncateMessageLineLength(message, MAX_TRUNCATED_LENGTH);\n   }\n \n   /**\n"}}, {"oid": "4a1bafaca4ae99dff7045173877dfff27ae966b9", "url": "https://github.com/Alluxio/alluxio/commit/4a1bafaca4ae99dff7045173877dfff27ae966b9", "message": "Update", "committedDate": "2020-09-21T22:35:19Z", "type": "commit"}]}