{"pr_number": 11392, "pr_title": "Move validateEnv command into shell/ module", "pr_createdAt": "2020-05-07T13:09:04Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11392", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MTI1Mg==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r421491252", "bodyText": "This can be a Set as we mostly just put its results into a set", "author": "jiacheliu3", "createdAt": "2020-05-07T13:11:20Z", "path": "core/common/src/main/java/alluxio/cli/CommandUtils.java", "diffHunk": "@@ -120,16 +117,16 @@ public static void checkNumOfArgsNoMoreThan(Command cmd, CommandLine cl, int n)\n    * @return list of the node names, null when file fails to read\n    */\n   @Nullable\n-  public static List<String> readNodeList(String confDir, String fileName) {\n+  public static Set<String> readNodeList(String confDir, String fileName) {\n     List<String> lines;\n     try {\n       lines = Files.readAllLines(Paths.get(confDir, fileName), StandardCharsets.UTF_8);\n     } catch (IOException e) {\n       System.err.format(\"Failed to read file %s/%s. Ignored.\", confDir, fileName);\n-      return new ArrayList<>();\n+      return new HashSet<>();", "originalCommit": "ecc31d566f4658420d69e5910a5f1a09b86e9ea2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4Njc4Mw==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r421986783", "bodyText": "I don't quite understand the logic for this. What happens if two lines are the same? Does that matter? Should we throw an error or warn the user?", "author": "ZacBlanco", "createdAt": "2020-05-08T07:21:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MTI1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5MDYzNQ==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422990635", "bodyText": "Not at all. This method is only used to read conf/masters and conf/workers files. It's fine to put duplicated hostnames there, the duplicates are just ignored. I believe if you chase down the usage of this method the lists all end up being put into sets.", "author": "jiacheliu3", "createdAt": "2020-05-11T12:03:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MTI1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyNjMxOQ==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r423426319", "bodyText": "It would be nice to warn user of duplicates. We do iterate through all non-comment lines in some bash scripts.", "author": "bf8086", "createdAt": "2020-05-12T02:29:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MTI1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1ODA5Ng==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r423458096", "bodyText": "Added printouts to System.out.", "author": "jiacheliu3", "createdAt": "2020-05-12T04:41:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MTI1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8f757810dc2d5a8a852e11b48094ea8fb743b8b2", "chunk": "diff --git a/core/common/src/main/java/alluxio/cli/CommandUtils.java b/core/common/src/main/java/alluxio/cli/CommandUtils.java\nindex 83d488393f..2d3d44d12d 100644\n--- a/core/common/src/main/java/alluxio/cli/CommandUtils.java\n+++ b/core/common/src/main/java/alluxio/cli/CommandUtils.java\n\n@@ -119,10 +126,11 @@ public final class CommandUtils {\n   @Nullable\n   public static Set<String> readNodeList(String confDir, String fileName) {\n     List<String> lines;\n+    String path = Paths.get(confDir, fileName).normalize().toString();\n     try {\n       lines = Files.readAllLines(Paths.get(confDir, fileName), StandardCharsets.UTF_8);\n     } catch (IOException e) {\n-      System.err.format(\"Failed to read file %s/%s. Ignored.\", confDir, fileName);\n+      System.err.format(\"Failed to read file %s/%s. Ignored.%n\", confDir, fileName);\n       return new HashSet<>();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MTYzMA==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r421491630", "bodyText": "migrated from Utils class", "author": "jiacheliu3", "createdAt": "2020-05-07T13:11:53Z", "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "diffHunk": "@@ -810,5 +811,20 @@ private synchronized T firstTime() {\n     return result;\n   }\n \n+  /**\n+   * Validates whether a network address is reachable.\n+   *\n+   * @param hostname host name of the network address\n+   * @param port port of the network address\n+   * @return whether the network address is reachable\n+   */\n+  public static boolean isAddressReachable(String hostname, int port) {\n+    try (Socket socket = new Socket(hostname, port)) {\n+      return true;\n+    } catch (IOException e) {\n+      return false;\n+    }\n+  }\n+", "originalCommit": "ecc31d566f4658420d69e5910a5f1a09b86e9ea2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5MzYyMA==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r421493620", "bodyText": "Migrated from Utils", "author": "jiacheliu3", "createdAt": "2020-05-07T13:14:50Z", "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "diffHunk": "@@ -625,4 +624,44 @@ public static String getSchemeAuthority(AlluxioConfiguration conf) {\n     return Lists.newArrayList(Splitter.on(delimiter).trimResults().omitEmptyStrings()\n         .split(value));\n   }\n+\n+  /**\n+   * Reads a list of nodes from given file name ignoring comments and empty lines.\n+   * Can be used to read conf/workers or conf/masters.\n+   * @param fileName name of a file that contains the list of the nodes\n+   * @return list of the node names, null when file fails to read\n+   */\n+  @Nullable\n+  private static Set<String> readNodeList(String fileName) {\n+    InstancedConfiguration conf = InstancedConfiguration.defaults();\n+    String confDir = conf.get(PropertyKey.CONF_DIR);\n+    return CommandUtils.readNodeList(confDir, fileName);\n+  }\n+\n+  /**\n+   * Gets list of masters in conf directory.\n+   *\n+   * @return master hostnames\n+   */\n+  public static Set<String> getMasterHostnames() {\n+    return readNodeList(MASTERS);\n+  }\n+\n+  /**\n+   * Gets list of workers in conf directory.\n+   *\n+   * @return workers hostnames\n+   */\n+  public static Set<String> getWorkerHostnames() {\n+    return readNodeList(WORKERS);\n+  }\n+\n+  /**\n+   * Gets list of masters/workers in conf directory.\n+   *\n+   * @return server hostnames\n+   */\n+  public static Set<String> getServerHostnames() {", "originalCommit": "ecc31d566f4658420d69e5910a5f1a09b86e9ea2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0395e038507f645b6c1236f3b0011f65ef2f049a", "chunk": "diff --git a/core/common/src/main/java/alluxio/util/ConfigurationUtils.java b/core/common/src/main/java/alluxio/util/ConfigurationUtils.java\nindex ef09e06219..e18e7e8bd9 100644\n--- a/core/common/src/main/java/alluxio/util/ConfigurationUtils.java\n+++ b/core/common/src/main/java/alluxio/util/ConfigurationUtils.java\n\n@@ -632,8 +643,7 @@ public final class ConfigurationUtils {\n    * @return list of the node names, null when file fails to read\n    */\n   @Nullable\n-  private static Set<String> readNodeList(String fileName) {\n-    InstancedConfiguration conf = InstancedConfiguration.defaults();\n+  private static Set<String> readNodeList(String fileName, AlluxioConfiguration conf) {\n     String confDir = conf.get(PropertyKey.CONF_DIR);\n     return CommandUtils.readNodeList(confDir, fileName);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5Mzg0Nw==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r421493847", "bodyText": "Migrated from ExtensionShellUtils", "author": "jiacheliu3", "createdAt": "2020-05-07T13:15:14Z", "path": "core/common/src/main/java/alluxio/util/ShellUtils.java", "diffHunk": "@@ -134,6 +136,54 @@ public static UnixMountInfo parseMountInfo(String line) {\n     return builder.build();\n   }\n \n+  /**\n+   * Checks whether a path is the mounting point of a RAM disk volume.\n+   *\n+   * @param path  a string represents the path to be checked\n+   * @param fsTypes an array of strings represents expected file system type\n+   * @return true if the path is the mounting point of volume with one of the given fsTypes,\n+   *         false otherwise\n+   * @throws IOException if the function fails to get the mount information of the system\n+   */\n+  public static boolean isMountingPoint(String path, String[] fsTypes) throws IOException {\n+    List<UnixMountInfo> infoList = getUnixMountInfo();\n+    for (UnixMountInfo info : infoList) {\n+      Optional<String> mountPoint = info.getMountPoint();\n+      Optional<String> fsType = info.getFsType();\n+      if (mountPoint.isPresent() && mountPoint.get().equals(path) && fsType.isPresent()) {\n+        for (String expectedType : fsTypes) {\n+          if (fsType.get().equalsIgnoreCase(expectedType)) {\n+            return true;\n+          }\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Checks whether an Alluxio service is running.\n+   *\n+   * @param className class name of the Alluxio service\n+   * @return whether the Alluxio service is running\n+   */\n+  public static boolean isAlluxioRunning(String className) {\n+    String[] command = {\"bash\", \"-c\",\n+            \"ps -Aww -o command | grep -i \\\"[j]ava\\\" | grep \" + className};\n+    try {\n+      Process p = Runtime.getRuntime().exec(command);\n+      try (InputStreamReader input = new InputStreamReader(p.getInputStream())) {", "originalCommit": "ecc31d566f4658420d69e5910a5f1a09b86e9ea2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ecbe376315dad1ab3429e2745c06c5a7491f5f0", "chunk": "diff --git a/core/common/src/main/java/alluxio/util/ShellUtils.java b/core/common/src/main/java/alluxio/util/ShellUtils.java\nindex 11cb819179..34976cabc2 100644\n--- a/core/common/src/main/java/alluxio/util/ShellUtils.java\n+++ b/core/common/src/main/java/alluxio/util/ShellUtils.java\n\n@@ -169,7 +169,7 @@ public final class ShellUtils {\n    */\n   public static boolean isAlluxioRunning(String className) {\n     String[] command = {\"bash\", \"-c\",\n-            \"ps -Aww -o command | grep -i \\\"[j]ava\\\" | grep \" + className};\n+        \"ps -Aww -o command | grep -i \\\"[j]ava\\\" | grep \" + className};\n     try {\n       Process p = Runtime.getRuntime().exec(command);\n       try (InputStreamReader input = new InputStreamReader(p.getInputStream())) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5NDI4Nw==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r421494287", "bodyText": "We just need one check that checks all nodes including masters and workers", "author": "jiacheliu3", "createdAt": "2020-05-07T13:15:53Z", "path": "examples/src/main/java/alluxio/cli/ValidateEnv.java", "diffHunk": "@@ -122,12 +123,9 @@\n         new SecureHdfsValidationTask(\"worker\"), WORKER_TASKS);\n \n     // ssh validations\n-    registerTask(\"ssh.masters.reachable\",\n-        \"validate SSH port on masters are reachable\",\n-        new SshValidationTask(\"masters\"), COMMON_TASKS);\n-    registerTask(\"ssh.workers.reachable\",\n-        \"validate SSH port on workers are reachable\",\n-        new SshValidationTask(\"workers\"), COMMON_TASKS);\n+    registerTask(\"ssh.nodes.reachable\",\n+        \"validate SSH port on all Alluxio nodes are reachable\",\n+        new SshValidationTask(), COMMON_TASKS);", "originalCommit": "ecc31d566f4658420d69e5910a5f1a09b86e9ea2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0395e038507f645b6c1236f3b0011f65ef2f049a", "chunk": "diff --git a/examples/src/main/java/alluxio/cli/ValidateEnv.java b/shell/src/main/java/alluxio/cli/ValidateEnv.java\nsimilarity index 94%\nrename from examples/src/main/java/alluxio/cli/ValidateEnv.java\nrename to shell/src/main/java/alluxio/cli/ValidateEnv.java\nindex 167f984879..7b44ceb176 100644\n--- a/examples/src/main/java/alluxio/cli/ValidateEnv.java\n+++ b/shell/src/main/java/alluxio/cli/ValidateEnv.java\n\n@@ -86,59 +87,63 @@ public final class ValidateEnv {\n   private static final List<ValidationTask> MASTER_TASKS = new ArrayList<>();\n   private static final List<ValidationTask> WORKER_TASKS = new ArrayList<>();\n \n+  private static final AlluxioConfiguration CONF;\n+\n   static {\n+    CONF = InstancedConfiguration.defaults();\n+\n     // HDFS configuration validations\n     registerTask(\"ufs.hdfs.config.parity\",\n         \"validate HDFS-related configurations\",\n-        new HdfsValidationTask(), COMMON_TASKS);\n+        new HdfsValidationTask(CONF), COMMON_TASKS);\n \n     // port availability validations\n     registerTask(\"master.rpc.port.available\",\n         \"validate master RPC port is available\",\n-        new PortAvailabilityValidationTask(ServiceType.MASTER_RPC, ALLUXIO_MASTER_CLASS),\n+        new PortAvailabilityValidationTask(ServiceType.MASTER_RPC, ALLUXIO_MASTER_CLASS, CONF),\n         MASTER_TASKS);\n     registerTask(\"master.web.port.available\",\n         \"validate master web port is available\",\n-        new PortAvailabilityValidationTask(ServiceType.MASTER_WEB, ALLUXIO_MASTER_CLASS),\n+        new PortAvailabilityValidationTask(ServiceType.MASTER_WEB, ALLUXIO_MASTER_CLASS, CONF),\n         MASTER_TASKS);\n     registerTask(\"worker.rpc.port.available\",\n         \"validate worker RPC port is available\",\n-        new PortAvailabilityValidationTask(ServiceType.WORKER_RPC, ALLUXIO_WORKER_CLASS),\n+        new PortAvailabilityValidationTask(ServiceType.WORKER_RPC, ALLUXIO_WORKER_CLASS, CONF),\n         WORKER_TASKS);\n     registerTask(\"worker.web.port.available\",\n         \"validate worker web port is available\",\n-        new PortAvailabilityValidationTask(ServiceType.WORKER_WEB, ALLUXIO_WORKER_CLASS),\n+        new PortAvailabilityValidationTask(ServiceType.WORKER_WEB, ALLUXIO_WORKER_CLASS, CONF),\n         WORKER_TASKS);\n     registerTask(\"proxy.web.port.available\",\n         \"validate proxy web port is available\",\n-        new PortAvailabilityValidationTask(ServiceType.PROXY_WEB, ALLUXIO_PROXY_CLASS),\n+        new PortAvailabilityValidationTask(ServiceType.PROXY_WEB, ALLUXIO_PROXY_CLASS, CONF),\n         COMMON_TASKS);\n \n     // security configuration validations\n     registerTask(\"master.ufs.hdfs.security.kerberos\",\n         \"validate kerberos security configurations for masters\",\n-        new SecureHdfsValidationTask(\"master\"), MASTER_TASKS);\n+        new SecureHdfsValidationTask(\"master\", CONF), MASTER_TASKS);\n     registerTask(\"worker.ufs.hdfs.security.kerberos\",\n         \"validate kerberos security configurations for workers\",\n-        new SecureHdfsValidationTask(\"worker\"), WORKER_TASKS);\n+        new SecureHdfsValidationTask(\"worker\", CONF), WORKER_TASKS);\n \n     // ssh validations\n     registerTask(\"ssh.nodes.reachable\",\n         \"validate SSH port on all Alluxio nodes are reachable\",\n-        new SshValidationTask(), COMMON_TASKS);\n+        new SshValidationTask(CONF), COMMON_TASKS);\n \n     // UFS validations\n     registerTask(\"ufs.root.accessible\",\n         \"validate root under file system location is accessible\",\n-        new UfsDirectoryValidationTask(), COMMON_TASKS);\n+        new UfsDirectoryValidationTask(CONF), COMMON_TASKS);\n     registerTask(\"ufs.root.superuser\",\n         \"validate Alluxio has super user privilege on root under file system\",\n-        new UfsSuperUserValidationTask(), COMMON_TASKS);\n+        new UfsSuperUserValidationTask(CONF), COMMON_TASKS);\n \n     // RAM disk validations\n     registerTask(\"worker.ramdisk.mount.privilege\",\n         \"validate user has the correct privilege to mount ramdisk\",\n-        new RamDiskMountPrivilegeValidationTask(), WORKER_TASKS);\n+        new RamDiskMountPrivilegeValidationTask(CONF), WORKER_TASKS);\n \n     // User limit validations\n     registerTask(\"ulimit.nofile\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5NDc5OA==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r421494798", "bodyText": "Doesn't really matter if it's a list or set, we just for loop it.", "author": "jiacheliu3", "createdAt": "2020-05-07T13:16:35Z", "path": "examples/src/main/java/alluxio/cli/ValidateEnv.java", "diffHunk": "@@ -188,7 +186,7 @@ private static ValidationTask registerTask(String name, String description, Vali\n     return task;\n   }\n \n-  private static boolean validateRemote(List<String> nodes, String target, String name,\n+  private static boolean validateRemote(Collection<String> nodes, String target, String name,", "originalCommit": "ecc31d566f4658420d69e5910a5f1a09b86e9ea2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5NjIzOA==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r421496238", "bodyText": "Use ShellUtils instead of a one-time util method", "author": "jiacheliu3", "createdAt": "2020-05-07T13:18:42Z", "path": "examples/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java", "diffHunk": "@@ -104,15 +109,20 @@ private boolean validatePrincipalLogin() {\n     String realm = matchPrincipal.group(\"realm\");\n \n     // Login with principal and keytab\n-    String keytab = ServerConfiguration.get(mKeytabProperty);\n-    int exitVal =\n-        Utils.getResultFromProcess(new String[] {\"kinit\", \"-kt\", keytab, principal}).getExitValue();\n-    if (exitVal != 0) {\n-      System.err.format(\"Kerberos login failed for %s with keytab %s with exit value %d.%n\",\n-          principal, keytab, exitVal);\n-      System.err.format(\"Primary is %s, instance is %s and realm is %s.%n\",\n-          primary, instance, realm);\n-      return false;\n+    String keytab = conf.get(mKeytabProperty);\n+    CommandReturn cr;\n+    String[] command = new String[] {\"kinit\", \"-kt\", keytab, principal};\n+    try {\n+      cr = ShellUtils.execCommandWithOutput(command);", "originalCommit": "ecc31d566f4658420d69e5910a5f1a09b86e9ea2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0395e038507f645b6c1236f3b0011f65ef2f049a", "chunk": "diff --git a/examples/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java b/shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java\nsimilarity index 88%\nrename from examples/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java\nrename to shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java\nindex e08b71a9ab..b77e2ffff0 100644\n--- a/examples/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java\n+++ b/shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java\n\n@@ -109,7 +112,7 @@ public final class SecureHdfsValidationTask extends HdfsValidationTask {\n     String realm = matchPrincipal.group(\"realm\");\n \n     // Login with principal and keytab\n-    String keytab = conf.get(mKeytabProperty);\n+    String keytab = mConf.get(mKeytabProperty);\n     CommandReturn cr;\n     String[] command = new String[] {\"kinit\", \"-kt\", keytab, principal};\n     try {\n"}}, {"oid": "aee43a530a057895912fc78ea7580f31560b26b8", "url": "https://github.com/Alluxio/alluxio/commit/aee43a530a057895912fc78ea7580f31560b26b8", "message": "move validateEnv and refactor utils", "committedDate": "2020-05-08T08:37:57Z", "type": "commit"}, {"oid": "dc93397e29a474caebdf7ed8a66f5a007cc24c4a", "url": "https://github.com/Alluxio/alluxio/commit/dc93397e29a474caebdf7ed8a66f5a007cc24c4a", "message": "checkstyle", "committedDate": "2020-05-08T08:37:57Z", "type": "commit"}, {"oid": "4fc4216078b96a09beba3e21b10875e5519377eb", "url": "https://github.com/Alluxio/alluxio/commit/4fc4216078b96a09beba3e21b10875e5519377eb", "message": "formatting", "committedDate": "2020-05-08T08:37:57Z", "type": "commit"}, {"oid": "3ecbe376315dad1ab3429e2745c06c5a7491f5f0", "url": "https://github.com/Alluxio/alluxio/commit/3ecbe376315dad1ab3429e2745c06c5a7491f5f0", "message": "whitespace", "committedDate": "2020-05-08T08:37:57Z", "type": "commit"}, {"oid": "a5231e68b29aff0f82c82089c9ef323749f688b8", "url": "https://github.com/Alluxio/alluxio/commit/a5231e68b29aff0f82c82089c9ef323749f688b8", "message": "endless styles", "committedDate": "2020-05-08T08:37:57Z", "type": "commit"}, {"oid": "260d10b80bbaaa4e3e3b49ef473a721787244501", "url": "https://github.com/Alluxio/alluxio/commit/260d10b80bbaaa4e3e3b49ef473a721787244501", "message": "bin/alluxio", "committedDate": "2020-05-08T08:37:57Z", "type": "commit"}, {"oid": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4", "url": "https://github.com/Alluxio/alluxio/commit/b3b480c13a3de8617c91e97d0dac22ac1e33f2c4", "message": "move to shell/", "committedDate": "2020-05-08T08:37:57Z", "type": "commit"}, {"oid": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4", "url": "https://github.com/Alluxio/alluxio/commit/b3b480c13a3de8617c91e97d0dac22ac1e33f2c4", "message": "move to shell/", "committedDate": "2020-05-08T08:37:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NzAxNw==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r421987017", "bodyText": "does this make a connection? how do we know if it is reachable from this code?", "author": "ZacBlanco", "createdAt": "2020-05-08T07:22:35Z", "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "diffHunk": "@@ -810,5 +811,20 @@ private synchronized T firstTime() {\n     return result;\n   }\n \n+  /**\n+   * Validates whether a network address is reachable.\n+   *\n+   * @param hostname host name of the network address\n+   * @param port port of the network address\n+   * @return whether the network address is reachable\n+   */\n+  public static boolean isAddressReachable(String hostname, int port) {\n+    try (Socket socket = new Socket(hostname, port)) {\n+      return true;", "originalCommit": "1ba32bf0b23596bf983f4bf38fd5fe9d1597e590", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAwNjc3NA==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r423006774", "bodyText": "AFAIK this makes the connection in constructor and throws an IOException if it fails to do so. See example https://www.geeksforgeeks.org/socket-programming-in-java/", "author": "jiacheliu3", "createdAt": "2020-05-11T12:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NzAxNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MDU1Mw==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422680553", "bodyText": "is this code also copied or freshly-written?", "author": "ZacBlanco", "createdAt": "2020-05-10T18:18:48Z", "path": "core/common/src/main/java/alluxio/util/ShellUtils.java", "diffHunk": "@@ -134,6 +136,54 @@ public static UnixMountInfo parseMountInfo(String line) {\n     return builder.build();\n   }\n \n+  /**\n+   * Checks whether a path is the mounting point of a RAM disk volume.\n+   *\n+   * @param path  a string represents the path to be checked\n+   * @param fsTypes an array of strings represents expected file system type\n+   * @return true if the path is the mounting point of volume with one of the given fsTypes,\n+   *         false otherwise\n+   * @throws IOException if the function fails to get the mount information of the system\n+   */\n+  public static boolean isMountingPoint(String path, String[] fsTypes) throws IOException {\n+    List<UnixMountInfo> infoList = getUnixMountInfo();\n+    for (UnixMountInfo info : infoList) {\n+      Optional<String> mountPoint = info.getMountPoint();\n+      Optional<String> fsType = info.getFsType();\n+      if (mountPoint.isPresent() && mountPoint.get().equals(path) && fsType.isPresent()) {\n+        for (String expectedType : fsTypes) {\n+          if (fsType.get().equalsIgnoreCase(expectedType)) {\n+            return true;\n+          }\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Checks whether an Alluxio service is running.\n+   *\n+   * @param className class name of the Alluxio service\n+   * @return whether the Alluxio service is running\n+   */\n+  public static boolean isAlluxioRunning(String className) {\n+    String[] command = {\"bash\", \"-c\",\n+        \"ps -Aww -o command | grep -i \\\"[j]ava\\\" | grep \" + className};\n+    try {\n+      Process p = Runtime.getRuntime().exec(command);\n+      try (InputStreamReader input = new InputStreamReader(p.getInputStream())) {\n+        if (input.read() >= 0) {\n+          return true;\n+        }\n+      }\n+      return false;\n+    } catch (IOException e) {\n+      System.err.format(\"Unable to check Alluxio status: %s.%n\", e.getMessage());\n+      return false;\n+    }\n+  }\n+", "originalCommit": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5MTM2MA==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422991360", "bodyText": "They are copied from the old Utils.java class, which is removed in this change.", "author": "jiacheliu3", "createdAt": "2020-05-11T12:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MDU1Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MDg2OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422680869", "bodyText": "do we gain anything by combining these two?", "author": "ZacBlanco", "createdAt": "2020-05-10T18:21:52Z", "path": "shell/src/main/java/alluxio/cli/ValidateEnv.java", "diffHunk": "@@ -122,12 +123,9 @@\n         new SecureHdfsValidationTask(\"worker\"), WORKER_TASKS);\n \n     // ssh validations\n-    registerTask(\"ssh.masters.reachable\",\n-        \"validate SSH port on masters are reachable\",\n-        new SshValidationTask(\"masters\"), COMMON_TASKS);\n-    registerTask(\"ssh.workers.reachable\",\n-        \"validate SSH port on workers are reachable\",\n-        new SshValidationTask(\"workers\"), COMMON_TASKS);\n+    registerTask(\"ssh.nodes.reachable\",\n+        \"validate SSH port on all Alluxio nodes are reachable\",\n+        new SshValidationTask(), COMMON_TASKS);", "originalCommit": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5NDAyMQ==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422994021", "bodyText": "To me the gain is we get rid of some hard-coded \"masters\" and \"workers\".", "author": "jiacheliu3", "createdAt": "2020-05-11T12:10:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MDg2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0395e038507f645b6c1236f3b0011f65ef2f049a", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/ValidateEnv.java b/shell/src/main/java/alluxio/cli/ValidateEnv.java\nindex 167f984879..7b44ceb176 100644\n--- a/shell/src/main/java/alluxio/cli/ValidateEnv.java\n+++ b/shell/src/main/java/alluxio/cli/ValidateEnv.java\n\n@@ -86,59 +87,63 @@ public final class ValidateEnv {\n   private static final List<ValidationTask> MASTER_TASKS = new ArrayList<>();\n   private static final List<ValidationTask> WORKER_TASKS = new ArrayList<>();\n \n+  private static final AlluxioConfiguration CONF;\n+\n   static {\n+    CONF = InstancedConfiguration.defaults();\n+\n     // HDFS configuration validations\n     registerTask(\"ufs.hdfs.config.parity\",\n         \"validate HDFS-related configurations\",\n-        new HdfsValidationTask(), COMMON_TASKS);\n+        new HdfsValidationTask(CONF), COMMON_TASKS);\n \n     // port availability validations\n     registerTask(\"master.rpc.port.available\",\n         \"validate master RPC port is available\",\n-        new PortAvailabilityValidationTask(ServiceType.MASTER_RPC, ALLUXIO_MASTER_CLASS),\n+        new PortAvailabilityValidationTask(ServiceType.MASTER_RPC, ALLUXIO_MASTER_CLASS, CONF),\n         MASTER_TASKS);\n     registerTask(\"master.web.port.available\",\n         \"validate master web port is available\",\n-        new PortAvailabilityValidationTask(ServiceType.MASTER_WEB, ALLUXIO_MASTER_CLASS),\n+        new PortAvailabilityValidationTask(ServiceType.MASTER_WEB, ALLUXIO_MASTER_CLASS, CONF),\n         MASTER_TASKS);\n     registerTask(\"worker.rpc.port.available\",\n         \"validate worker RPC port is available\",\n-        new PortAvailabilityValidationTask(ServiceType.WORKER_RPC, ALLUXIO_WORKER_CLASS),\n+        new PortAvailabilityValidationTask(ServiceType.WORKER_RPC, ALLUXIO_WORKER_CLASS, CONF),\n         WORKER_TASKS);\n     registerTask(\"worker.web.port.available\",\n         \"validate worker web port is available\",\n-        new PortAvailabilityValidationTask(ServiceType.WORKER_WEB, ALLUXIO_WORKER_CLASS),\n+        new PortAvailabilityValidationTask(ServiceType.WORKER_WEB, ALLUXIO_WORKER_CLASS, CONF),\n         WORKER_TASKS);\n     registerTask(\"proxy.web.port.available\",\n         \"validate proxy web port is available\",\n-        new PortAvailabilityValidationTask(ServiceType.PROXY_WEB, ALLUXIO_PROXY_CLASS),\n+        new PortAvailabilityValidationTask(ServiceType.PROXY_WEB, ALLUXIO_PROXY_CLASS, CONF),\n         COMMON_TASKS);\n \n     // security configuration validations\n     registerTask(\"master.ufs.hdfs.security.kerberos\",\n         \"validate kerberos security configurations for masters\",\n-        new SecureHdfsValidationTask(\"master\"), MASTER_TASKS);\n+        new SecureHdfsValidationTask(\"master\", CONF), MASTER_TASKS);\n     registerTask(\"worker.ufs.hdfs.security.kerberos\",\n         \"validate kerberos security configurations for workers\",\n-        new SecureHdfsValidationTask(\"worker\"), WORKER_TASKS);\n+        new SecureHdfsValidationTask(\"worker\", CONF), WORKER_TASKS);\n \n     // ssh validations\n     registerTask(\"ssh.nodes.reachable\",\n         \"validate SSH port on all Alluxio nodes are reachable\",\n-        new SshValidationTask(), COMMON_TASKS);\n+        new SshValidationTask(CONF), COMMON_TASKS);\n \n     // UFS validations\n     registerTask(\"ufs.root.accessible\",\n         \"validate root under file system location is accessible\",\n-        new UfsDirectoryValidationTask(), COMMON_TASKS);\n+        new UfsDirectoryValidationTask(CONF), COMMON_TASKS);\n     registerTask(\"ufs.root.superuser\",\n         \"validate Alluxio has super user privilege on root under file system\",\n-        new UfsSuperUserValidationTask(), COMMON_TASKS);\n+        new UfsSuperUserValidationTask(CONF), COMMON_TASKS);\n \n     // RAM disk validations\n     registerTask(\"worker.ramdisk.mount.privilege\",\n         \"validate user has the correct privilege to mount ramdisk\",\n-        new RamDiskMountPrivilegeValidationTask(), WORKER_TASKS);\n+        new RamDiskMountPrivilegeValidationTask(CONF), WORKER_TASKS);\n \n     // User limit validations\n     registerTask(\"ulimit.nofile\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTEyMg==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681122", "bodyText": "InstancedConfiguration.defaults() could be expensive. I recommend creating the configuration object on JVM startup and then passing that into this function.", "author": "ZacBlanco", "createdAt": "2020-05-10T18:24:01Z", "path": "shell/src/main/java/alluxio/cli/validation/HdfsValidationTask.java", "diffHunk": "@@ -58,8 +58,8 @@ public TaskResult validate(Map<String, String> optionsMap) {\n   }\n \n   protected boolean shouldSkip() {\n-    String scheme = new AlluxioURI(ServerConfiguration.get(PropertyKey.MASTER_MOUNT_TABLE_ROOT_UFS))\n-        .getScheme();\n+    String scheme = new AlluxioURI(InstancedConfiguration.defaults()\n+                      .get(PropertyKey.MASTER_MOUNT_TABLE_ROOT_UFS)).getScheme();", "originalCommit": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0395e038507f645b6c1236f3b0011f65ef2f049a", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/validation/HdfsValidationTask.java b/shell/src/main/java/alluxio/cli/validation/HdfsValidationTask.java\nindex cb28c4b01f..b6169a0f39 100644\n--- a/shell/src/main/java/alluxio/cli/validation/HdfsValidationTask.java\n+++ b/shell/src/main/java/alluxio/cli/validation/HdfsValidationTask.java\n\n@@ -58,8 +64,8 @@ public class HdfsValidationTask extends AbstractValidationTask {\n   }\n \n   protected boolean shouldSkip() {\n-    String scheme = new AlluxioURI(InstancedConfiguration.defaults()\n-                      .get(PropertyKey.MASTER_MOUNT_TABLE_ROOT_UFS)).getScheme();\n+    String scheme = new AlluxioURI(mConf.get(PropertyKey.MASTER_MOUNT_TABLE_ROOT_UFS))\n+            .getScheme();\n     if (scheme == null || !scheme.startsWith(\"hdfs\")) {\n       System.out.format(\"Root underFS is not HDFS. Skipping validation for HDFS properties.%n\");\n       return true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTE4MA==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681180", "bodyText": "same here. Create a single AlluxioConfiguration object and pass the references around.\nAlluxioConfiguration should be used rather than InstancedConfiguration because `InstancedConfiguration is not  immutable.", "author": "ZacBlanco", "createdAt": "2020-05-10T18:24:53Z", "path": "shell/src/main/java/alluxio/cli/validation/HdfsValidationTask.java", "diffHunk": "@@ -85,7 +85,7 @@ private boolean validateHdfsSettingParity(Map<String, String> optionsMap) {\n     // If ServerConfiguration does not contain the key, then a {@link RuntimeException} will be\n     // thrown before calling the {@link String#split} method.\n     String[] clientHadoopConfFilePaths =\n-        ServerConfiguration.get(PropertyKey.UNDERFS_HDFS_CONFIGURATION).split(\":\");\n+        InstancedConfiguration.defaults().get(PropertyKey.UNDERFS_HDFS_CONFIGURATION).split(\":\");", "originalCommit": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0395e038507f645b6c1236f3b0011f65ef2f049a", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/validation/HdfsValidationTask.java b/shell/src/main/java/alluxio/cli/validation/HdfsValidationTask.java\nindex cb28c4b01f..b6169a0f39 100644\n--- a/shell/src/main/java/alluxio/cli/validation/HdfsValidationTask.java\n+++ b/shell/src/main/java/alluxio/cli/validation/HdfsValidationTask.java\n\n@@ -85,7 +91,7 @@ public class HdfsValidationTask extends AbstractValidationTask {\n     // If ServerConfiguration does not contain the key, then a {@link RuntimeException} will be\n     // thrown before calling the {@link String#split} method.\n     String[] clientHadoopConfFilePaths =\n-        InstancedConfiguration.defaults().get(PropertyKey.UNDERFS_HDFS_CONFIGURATION).split(\":\");\n+            mConf.get(PropertyKey.UNDERFS_HDFS_CONFIGURATION).split(\":\");\n     String clientCoreSiteFilePath = null;\n     String clientHdfsSiteFilePath = null;\n     for (String path : clientHadoopConfFilePaths) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTQ3MQ==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681471", "bodyText": "same again with configuration", "author": "ZacBlanco", "createdAt": "2020-05-10T18:27:26Z", "path": "shell/src/main/java/alluxio/cli/validation/PortAvailabilityValidationTask.java", "diffHunk": "@@ -39,11 +40,11 @@ public PortAvailabilityValidationTask(ServiceType serviceType, String owner) {\n \n   @Override\n   public TaskResult validate(Map<String, String> optionsMap) {\n-    if (Utils.isAlluxioRunning(mOwner)) {\n+    if (ShellUtils.isAlluxioRunning(mOwner)) {\n       System.out.format(\"%s is already running. Skip validation.%n\", mOwner);\n       return TaskResult.SKIPPED;\n     }\n-    int port = NetworkAddressUtils.getPort(mServiceType, ServerConfiguration.global());\n+    int port = NetworkAddressUtils.getPort(mServiceType, InstancedConfiguration.defaults());", "originalCommit": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0395e038507f645b6c1236f3b0011f65ef2f049a", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/validation/PortAvailabilityValidationTask.java b/shell/src/main/java/alluxio/cli/validation/PortAvailabilityValidationTask.java\nindex 046eed7642..90a646672a 100644\n--- a/shell/src/main/java/alluxio/cli/validation/PortAvailabilityValidationTask.java\n+++ b/shell/src/main/java/alluxio/cli/validation/PortAvailabilityValidationTask.java\n\n@@ -26,16 +26,20 @@ import java.util.Map;\n public final class PortAvailabilityValidationTask extends AbstractValidationTask {\n   private final ServiceType mServiceType;\n   private final String mOwner;\n+  private final AlluxioConfiguration mConf;\n \n   /**\n    * Creates a new instance of {@link PortAvailabilityValidationTask}.\n    *\n    * @param serviceType Alluxio network service whose port will be validated\n    * @param owner Alluxio class name who owns the network service\n+   * @param conf configuration\n    */\n-  public PortAvailabilityValidationTask(ServiceType serviceType, String owner) {\n+  public PortAvailabilityValidationTask(ServiceType serviceType, String owner,\n+                                        AlluxioConfiguration conf) {\n     mServiceType = serviceType;\n     mOwner = owner;\n+    mConf = conf;\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTUwNg==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681506", "bodyText": "same again, you should pass a conf object", "author": "ZacBlanco", "createdAt": "2020-05-10T18:27:40Z", "path": "shell/src/main/java/alluxio/cli/validation/RamDiskMountPrivilegeValidationTask.java", "diffHunk": "@@ -35,8 +36,9 @@ public RamDiskMountPrivilegeValidationTask() {\n   @Override\n   public TaskResult validate(Map<String, String> optionsMap)\n       throws InterruptedException {\n-    String path = ServerConfiguration.get(PropertyKey.WORKER_TIERED_STORE_LEVEL0_DIRS_PATH);\n-    String alias = ServerConfiguration.get(PropertyKey.WORKER_TIERED_STORE_LEVEL0_ALIAS);\n+    InstancedConfiguration conf = InstancedConfiguration.defaults();", "originalCommit": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0395e038507f645b6c1236f3b0011f65ef2f049a", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/validation/RamDiskMountPrivilegeValidationTask.java b/shell/src/main/java/alluxio/cli/validation/RamDiskMountPrivilegeValidationTask.java\nindex 590e0c57e6..cd153ce2ff 100644\n--- a/shell/src/main/java/alluxio/cli/validation/RamDiskMountPrivilegeValidationTask.java\n+++ b/shell/src/main/java/alluxio/cli/validation/RamDiskMountPrivilegeValidationTask.java\n\n@@ -25,20 +25,22 @@ import java.util.Map;\n  * Task for validating whether worker has enough privilege to mount RAM disk.\n  */\n public final class RamDiskMountPrivilegeValidationTask extends AbstractValidationTask {\n+  private final AlluxioConfiguration mConf;\n \n   /**\n    * Creates a new instance of {@link RamDiskMountPrivilegeValidationTask}\n    * for validating mount privilege.\n+   * @param conf configuration\n    */\n-  public RamDiskMountPrivilegeValidationTask() {\n+  public RamDiskMountPrivilegeValidationTask(AlluxioConfiguration conf) {\n+    mConf = conf;\n   }\n \n   @Override\n   public TaskResult validate(Map<String, String> optionsMap)\n       throws InterruptedException {\n-    InstancedConfiguration conf = InstancedConfiguration.defaults();\n-    String path = conf.get(PropertyKey.WORKER_TIERED_STORE_LEVEL0_DIRS_PATH);\n-    String alias = conf.get(PropertyKey.WORKER_TIERED_STORE_LEVEL0_ALIAS);\n+    String path = mConf.get(PropertyKey.WORKER_TIERED_STORE_LEVEL0_DIRS_PATH);\n+    String alias = mConf.get(PropertyKey.WORKER_TIERED_STORE_LEVEL0_ALIAS);\n     if (!alias.equals(\"MEM\")) {\n       System.out.println(\"Top tier storage is not memory, skip validation.\");\n       return TaskResult.SKIPPED;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTUxMQ==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681511", "bodyText": "pass in conf object", "author": "ZacBlanco", "createdAt": "2020-05-10T18:27:48Z", "path": "shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java", "diffHunk": "@@ -80,8 +83,9 @@ protected boolean shouldSkip() {\n       return true;\n     }\n     String principal = null;\n-    if (ServerConfiguration.isSet(mPrincipalProperty)) {\n-      principal = ServerConfiguration.get(mPrincipalProperty);\n+    InstancedConfiguration conf = InstancedConfiguration.defaults();", "originalCommit": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0395e038507f645b6c1236f3b0011f65ef2f049a", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java b/shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java\nindex e08b71a9ab..b77e2ffff0 100644\n--- a/shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java\n+++ b/shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java\n\n@@ -83,9 +88,8 @@ public final class SecureHdfsValidationTask extends HdfsValidationTask {\n       return true;\n     }\n     String principal = null;\n-    InstancedConfiguration conf = InstancedConfiguration.defaults();\n-    if (conf.isSet(mPrincipalProperty)) {\n-      principal = conf.get(mPrincipalProperty);\n+    if (mConf.isSet(mPrincipalProperty)) {\n+      principal = mConf.get(mPrincipalProperty);\n     }\n     if (principal == null || principal.isEmpty()) {\n       System.out.format(\"Skip validation for secure HDFS. %s is not specified.%n\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTUxOA==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681518", "bodyText": "pass in conf object", "author": "ZacBlanco", "createdAt": "2020-05-10T18:27:54Z", "path": "shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java", "diffHunk": "@@ -93,7 +97,8 @@ protected boolean shouldSkip() {\n \n   private boolean validatePrincipalLogin() {\n     // Check whether can login with specified principal and keytab\n-    String principal = ServerConfiguration.get(mPrincipalProperty);\n+    InstancedConfiguration conf = InstancedConfiguration.defaults();", "originalCommit": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0395e038507f645b6c1236f3b0011f65ef2f049a", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java b/shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java\nindex e08b71a9ab..b77e2ffff0 100644\n--- a/shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java\n+++ b/shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java\n\n@@ -97,8 +101,7 @@ public final class SecureHdfsValidationTask extends HdfsValidationTask {\n \n   private boolean validatePrincipalLogin() {\n     // Check whether can login with specified principal and keytab\n-    InstancedConfiguration conf = InstancedConfiguration.defaults();\n-    String principal = conf.get(mPrincipalProperty);\n+    String principal = mConf.get(mPrincipalProperty);\n     Matcher matchPrincipal = PRINCIPAL_PATTERN.matcher(principal);\n     if (!matchPrincipal.matches()) {\n       System.err.format(\"Principal %s is not in the right format.%n\", principal);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTU2Ng==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681566", "bodyText": "pass in conf object", "author": "ZacBlanco", "createdAt": "2020-05-10T18:28:09Z", "path": "core/common/src/main/java/alluxio/util/ConfigurationUtils.java", "diffHunk": "@@ -630,4 +635,44 @@ public static String getSchemeAuthority(AlluxioConfiguration conf) {\n     return Lists.newArrayList(Splitter.on(delimiter).trimResults().omitEmptyStrings()\n         .split(value));\n   }\n+\n+  /**\n+   * Reads a list of nodes from given file name ignoring comments and empty lines.\n+   * Can be used to read conf/workers or conf/masters.\n+   * @param fileName name of a file that contains the list of the nodes\n+   * @return list of the node names, null when file fails to read\n+   */\n+  @Nullable\n+  private static Set<String> readNodeList(String fileName) {\n+    InstancedConfiguration conf = InstancedConfiguration.defaults();", "originalCommit": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0395e038507f645b6c1236f3b0011f65ef2f049a", "chunk": "diff --git a/core/common/src/main/java/alluxio/util/ConfigurationUtils.java b/core/common/src/main/java/alluxio/util/ConfigurationUtils.java\nindex 5ce15a7baa..e18e7e8bd9 100644\n--- a/core/common/src/main/java/alluxio/util/ConfigurationUtils.java\n+++ b/core/common/src/main/java/alluxio/util/ConfigurationUtils.java\n\n@@ -643,8 +643,7 @@ public final class ConfigurationUtils {\n    * @return list of the node names, null when file fails to read\n    */\n   @Nullable\n-  private static Set<String> readNodeList(String fileName) {\n-    InstancedConfiguration conf = InstancedConfiguration.defaults();\n+  private static Set<String> readNodeList(String fileName, AlluxioConfiguration conf) {\n     String confDir = conf.get(PropertyKey.CONF_DIR);\n     return CommandUtils.readNodeList(confDir, fileName);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTU3NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681575", "bodyText": "pass in conf object", "author": "ZacBlanco", "createdAt": "2020-05-10T18:28:19Z", "path": "shell/src/main/java/alluxio/cli/ValidateEnv.java", "diffHunk": "@@ -206,14 +204,14 @@ private static boolean validateRemote(List<String> nodes, String target, String\n   private static boolean validateRemote(String node, String target, String name, CommandLine cmd)\n       throws InterruptedException {\n     System.out.format(\"Validating %s environment on %s...%n\", target, node);\n-    if (!Utils.isAddressReachable(node, 22)) {\n+    if (!CommonUtils.isAddressReachable(node, 22)) {\n       System.err.format(\"Unable to reach ssh port 22 on node %s.%n\", node);\n       return false;\n     }\n \n     // args is not null.\n     String argStr = String.join(\" \", cmd.getArgs());\n-    String homeDir = ServerConfiguration.get(PropertyKey.HOME);\n+    String homeDir = InstancedConfiguration.defaults().get(PropertyKey.HOME);", "originalCommit": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxNTM0NA==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r423015344", "bodyText": "This class is executed via main() so we have to instantiate conf. Saved the InstancedConf in an AlluxioConf in a field of this class.", "author": "jiacheliu3", "createdAt": "2020-05-11T12:50:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTU3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0395e038507f645b6c1236f3b0011f65ef2f049a", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/ValidateEnv.java b/shell/src/main/java/alluxio/cli/ValidateEnv.java\nindex 167f984879..7b44ceb176 100644\n--- a/shell/src/main/java/alluxio/cli/ValidateEnv.java\n+++ b/shell/src/main/java/alluxio/cli/ValidateEnv.java\n\n@@ -211,7 +216,7 @@ public final class ValidateEnv {\n \n     // args is not null.\n     String argStr = String.join(\" \", cmd.getArgs());\n-    String homeDir = InstancedConfiguration.defaults().get(PropertyKey.HOME);\n+    String homeDir = CONF.get(PropertyKey.HOME);\n     String remoteCommand = String.format(\n         \"%s/bin/alluxio validateEnv %s %s %s\",\n         homeDir, target, name == null ? \"\" : name, argStr);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTU4OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681589", "bodyText": "pass in conf object", "author": "ZacBlanco", "createdAt": "2020-05-10T18:28:27Z", "path": "shell/src/main/java/alluxio/cli/validation/ClusterConfConsistencyValidationTask.java", "diffHunk": "@@ -128,7 +129,7 @@ public TaskResult validate(Map<String, String> optionMap) throws InterruptedExce\n   @Nullable\n   private Properties getNodeConf(String node) {\n     try {\n-      String homeDir = ServerConfiguration.get(PropertyKey.HOME);\n+      String homeDir = InstancedConfiguration.defaults().get(PropertyKey.HOME);", "originalCommit": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0395e038507f645b6c1236f3b0011f65ef2f049a", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/validation/ClusterConfConsistencyValidationTask.java b/shell/src/main/java/alluxio/cli/validation/ClusterConfConsistencyValidationTask.java\nindex 30b62c76a9..6f5f548c12 100644\n--- a/shell/src/main/java/alluxio/cli/validation/ClusterConfConsistencyValidationTask.java\n+++ b/shell/src/main/java/alluxio/cli/validation/ClusterConfConsistencyValidationTask.java\n\n@@ -129,7 +139,7 @@ public final class ClusterConfConsistencyValidationTask extends AbstractValidati\n   @Nullable\n   private Properties getNodeConf(String node) {\n     try {\n-      String homeDir = InstancedConfiguration.defaults().get(PropertyKey.HOME);\n+      String homeDir = mConf.get(PropertyKey.HOME);\n       String remoteCommand = String.format(\n           \"%s/bin/alluxio getConf\", homeDir);\n       String localCommand = String.format(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTYxMQ==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681611", "bodyText": "pass in conf object", "author": "ZacBlanco", "createdAt": "2020-05-10T18:28:39Z", "path": "shell/src/main/java/alluxio/cli/validation/StorageSpaceValidationTask.java", "diffHunk": "@@ -39,21 +40,22 @@ public StorageSpaceValidationTask() {\n \n   @Override\n   public TaskResult validate(Map<String, String> optionsMap) {\n-    int numLevel = ServerConfiguration.getInt(PropertyKey.WORKER_TIERED_STORE_LEVELS);\n+    InstancedConfiguration conf = InstancedConfiguration.defaults();", "originalCommit": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0395e038507f645b6c1236f3b0011f65ef2f049a", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/validation/StorageSpaceValidationTask.java b/shell/src/main/java/alluxio/cli/validation/StorageSpaceValidationTask.java\nindex a7431f9368..2d941ec21f 100644\n--- a/shell/src/main/java/alluxio/cli/validation/StorageSpaceValidationTask.java\n+++ b/shell/src/main/java/alluxio/cli/validation/StorageSpaceValidationTask.java\n\n@@ -30,32 +30,34 @@ import java.util.Map;\n  * Task for validating whether worker tiered storage has enough space.\n  */\n public final class StorageSpaceValidationTask extends AbstractValidationTask {\n+  private final AlluxioConfiguration mConf;\n \n   /**\n    * Creates a new instance of {@link StorageSpaceValidationTask}\n    * for validating tiered storage space.\n+   * @param conf configuration\n    */\n-  public StorageSpaceValidationTask() {\n+  public StorageSpaceValidationTask(AlluxioConfiguration conf) {\n+    mConf = conf;\n   }\n \n   @Override\n   public TaskResult validate(Map<String, String> optionsMap) {\n-    InstancedConfiguration conf = InstancedConfiguration.defaults();\n-    int numLevel = conf.getInt(PropertyKey.WORKER_TIERED_STORE_LEVELS);\n+    int numLevel = mConf.getInt(PropertyKey.WORKER_TIERED_STORE_LEVELS);\n     boolean success = true;\n \n     for (int level = 0; level < numLevel; level++) {\n       PropertyKey tierAliasConf =\n           PropertyKey.Template.WORKER_TIERED_STORE_LEVEL_ALIAS.format(level);\n-      String alias = conf.get(tierAliasConf);\n+      String alias = mConf.get(tierAliasConf);\n \n       PropertyKey tierDirPathConf =\n           PropertyKey.Template.WORKER_TIERED_STORE_LEVEL_DIRS_PATH.format(level);\n-      String[] dirPaths = conf.get(tierDirPathConf).split(\",\");\n+      String[] dirPaths = mConf.get(tierDirPathConf).split(\",\");\n \n       PropertyKey tierDirCapacityConf =\n           PropertyKey.Template.WORKER_TIERED_STORE_LEVEL_DIRS_QUOTA.format(level);\n-      String rawDirQuota = conf.get(tierDirCapacityConf);\n+      String rawDirQuota = mConf.get(tierDirCapacityConf);\n       if (rawDirQuota.isEmpty()) {\n         System.err.format(\"Tier %d: Quota cannot be empty.%n\", level);\n         return TaskResult.FAILED;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTY0OA==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681648", "bodyText": "pass in conf object", "author": "ZacBlanco", "createdAt": "2020-05-10T18:29:00Z", "path": "shell/src/main/java/alluxio/cli/validation/UfsDirectoryValidationTask.java", "diffHunk": "@@ -31,8 +31,9 @@\n    * for validating root under file system.\n    */\n   public UfsDirectoryValidationTask() {\n-    mUfs = UnderFileSystem.Factory.createForRoot(ServerConfiguration.global());\n-    mPath = ServerConfiguration.get(PropertyKey.MASTER_MOUNT_TABLE_ROOT_UFS);\n+    InstancedConfiguration conf = InstancedConfiguration.defaults();", "originalCommit": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0395e038507f645b6c1236f3b0011f65ef2f049a", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/validation/UfsDirectoryValidationTask.java b/shell/src/main/java/alluxio/cli/validation/UfsDirectoryValidationTask.java\nindex 82d0f76338..f7144e7134 100644\n--- a/shell/src/main/java/alluxio/cli/validation/UfsDirectoryValidationTask.java\n+++ b/shell/src/main/java/alluxio/cli/validation/UfsDirectoryValidationTask.java\n\n@@ -29,9 +29,10 @@ public final class UfsDirectoryValidationTask extends AbstractValidationTask {\n   /**\n    * Creates a new instance of {@link UfsDirectoryValidationTask}\n    * for validating root under file system.\n+   *\n+   * @param conf configuration\n    */\n-  public UfsDirectoryValidationTask() {\n-    InstancedConfiguration conf = InstancedConfiguration.defaults();\n+  public UfsDirectoryValidationTask(AlluxioConfiguration conf) {\n     mUfs = UnderFileSystem.Factory.createForRoot(conf);\n     mPath = conf.get(PropertyKey.MASTER_MOUNT_TABLE_ROOT_UFS);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTY2NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681665", "bodyText": "pass in conf object", "author": "ZacBlanco", "createdAt": "2020-05-10T18:29:08Z", "path": "shell/src/main/java/alluxio/cli/validation/UfsSuperUserValidationTask.java", "diffHunk": "@@ -34,8 +34,9 @@\n    * for validating root under file system.\n    */\n   public UfsSuperUserValidationTask() {\n-    mUfs = UnderFileSystem.Factory.createForRoot(ServerConfiguration.global());\n-    mPath = ServerConfiguration.get(PropertyKey.MASTER_MOUNT_TABLE_ROOT_UFS);\n+    InstancedConfiguration conf = InstancedConfiguration.defaults();", "originalCommit": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0395e038507f645b6c1236f3b0011f65ef2f049a", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/validation/UfsSuperUserValidationTask.java b/shell/src/main/java/alluxio/cli/validation/UfsSuperUserValidationTask.java\nindex ac7aa2cc6f..8305c514b8 100644\n--- a/shell/src/main/java/alluxio/cli/validation/UfsSuperUserValidationTask.java\n+++ b/shell/src/main/java/alluxio/cli/validation/UfsSuperUserValidationTask.java\n\n@@ -32,9 +32,10 @@ public final class UfsSuperUserValidationTask extends AbstractValidationTask {\n   /**\n    * Creates a new instance of {@link UfsSuperUserValidationTask}\n    * for validating root under file system.\n+   *\n+   * @param conf configuration\n    */\n-  public UfsSuperUserValidationTask() {\n-    InstancedConfiguration conf = InstancedConfiguration.defaults();\n+  public UfsSuperUserValidationTask(AlluxioConfiguration conf) {\n     mUfs = UnderFileSystem.Factory.createForRoot(conf);\n     mPath = conf.get(PropertyKey.MASTER_MOUNT_TABLE_ROOT_UFS);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTg4NA==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422681884", "bodyText": "will this add spaces between the command? or does it print something like {\"arg1\", \"arg2\", ...}", "author": "ZacBlanco", "createdAt": "2020-05-10T18:31:24Z", "path": "shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java", "diffHunk": "@@ -104,15 +109,20 @@ private boolean validatePrincipalLogin() {\n     String realm = matchPrincipal.group(\"realm\");\n \n     // Login with principal and keytab\n-    String keytab = ServerConfiguration.get(mKeytabProperty);\n-    int exitVal =\n-        Utils.getResultFromProcess(new String[] {\"kinit\", \"-kt\", keytab, principal}).getExitValue();\n-    if (exitVal != 0) {\n-      System.err.format(\"Kerberos login failed for %s with keytab %s with exit value %d.%n\",\n-          principal, keytab, exitVal);\n-      System.err.format(\"Primary is %s, instance is %s and realm is %s.%n\",\n-          primary, instance, realm);\n-      return false;\n+    String keytab = conf.get(mKeytabProperty);\n+    CommandReturn cr;\n+    String[] command = new String[] {\"kinit\", \"-kt\", keytab, principal};\n+    try {\n+      cr = ShellUtils.execCommandWithOutput(command);\n+      if (cr.getExitCode() != 0) {\n+        System.err.format(\"Kerberos login failed for %s with keytab %s with exit value %d.%n\",\n+                principal, keytab, cr.getExitCode());\n+        System.err.format(\"Primary is %s, instance is %s and realm is %s.%n\",\n+                primary, instance, realm);\n+        return false;\n+      }\n+    } catch (IOException e) {\n+      System.err.format(\"Failed to execute %s with exception: %s%n\", Arrays.toString(command), e);", "originalCommit": "b3b480c13a3de8617c91e97d0dac22ac1e33f2c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5NTQzMg==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r422995432", "bodyText": "It does the latter.", "author": "jiacheliu3", "createdAt": "2020-05-11T12:13:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY4MTg4NA=="}], "type": "inlineReview", "revised_code": {"commit": "0395e038507f645b6c1236f3b0011f65ef2f049a", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java b/shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java\nindex e08b71a9ab..b77e2ffff0 100644\n--- a/shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java\n+++ b/shell/src/main/java/alluxio/cli/validation/SecureHdfsValidationTask.java\n\n@@ -109,7 +112,7 @@ public final class SecureHdfsValidationTask extends HdfsValidationTask {\n     String realm = matchPrincipal.group(\"realm\");\n \n     // Login with principal and keytab\n-    String keytab = conf.get(mKeytabProperty);\n+    String keytab = mConf.get(mKeytabProperty);\n     CommandReturn cr;\n     String[] command = new String[] {\"kinit\", \"-kt\", keytab, principal};\n     try {\n"}}, {"oid": "0395e038507f645b6c1236f3b0011f65ef2f049a", "url": "https://github.com/Alluxio/alluxio/commit/0395e038507f645b6c1236f3b0011f65ef2f049a", "message": "address comments", "committedDate": "2020-05-11T13:55:01Z", "type": "commit"}, {"oid": "b054a4107412055648202c31a738529a1ea18aed", "url": "https://github.com/Alluxio/alluxio/commit/b054a4107412055648202c31a738529a1ea18aed", "message": "checkstyle", "committedDate": "2020-05-11T14:13:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyNTY0NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r423425645", "bodyText": "(nit) sort import", "author": "bf8086", "createdAt": "2020-05-12T02:26:07Z", "path": "core/common/src/main/java/alluxio/cli/CommandUtils.java", "diffHunk": "@@ -23,10 +23,11 @@\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Paths;\n-import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.HashSet;", "originalCommit": "b054a4107412055648202c31a738529a1ea18aed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f757810dc2d5a8a852e11b48094ea8fb743b8b2", "chunk": "diff --git a/core/common/src/main/java/alluxio/cli/CommandUtils.java b/core/common/src/main/java/alluxio/cli/CommandUtils.java\nindex 15fdf15ba0..2d3d44d12d 100644\n--- a/core/common/src/main/java/alluxio/cli/CommandUtils.java\n+++ b/core/common/src/main/java/alluxio/cli/CommandUtils.java\n\n@@ -17,6 +17,8 @@ import alluxio.util.CommonUtils;\n \n import org.apache.commons.cli.CommandLine;\n import org.reflections.Reflections;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n import java.lang.reflect.Modifier;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyNzczOA==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r423427738", "bodyText": "(nit) sort import", "author": "bf8086", "createdAt": "2020-05-12T02:35:23Z", "path": "shell/src/main/java/alluxio/cli/ValidateEnv.java", "diffHunk": "@@ -11,22 +11,24 @@\n \n package alluxio.cli;\n \n-import alluxio.conf.ServerConfiguration;\n import alluxio.Constants;\n-import alluxio.conf.PropertyKey;\n+import alluxio.cli.validation.ValidationTask;", "originalCommit": "b054a4107412055648202c31a738529a1ea18aed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f757810dc2d5a8a852e11b48094ea8fb743b8b2", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/ValidateEnv.java b/shell/src/main/java/alluxio/cli/ValidateEnv.java\nindex 7b44ceb176..3ddb097635 100644\n--- a/shell/src/main/java/alluxio/cli/ValidateEnv.java\n+++ b/shell/src/main/java/alluxio/cli/ValidateEnv.java\n\n@@ -12,7 +12,6 @@\n package alluxio.cli;\n \n import alluxio.Constants;\n-import alluxio.cli.validation.ValidationTask;\n import alluxio.cli.validation.ClusterConfConsistencyValidationTask;\n import alluxio.cli.validation.HdfsValidationTask;\n import alluxio.cli.validation.PortAvailabilityValidationTask;\n"}}, {"oid": "8f757810dc2d5a8a852e11b48094ea8fb743b8b2", "url": "https://github.com/Alluxio/alluxio/commit/8f757810dc2d5a8a852e11b48094ea8fb743b8b2", "message": "address comment", "committedDate": "2020-05-12T04:40:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwNjUzOQ==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r423906539", "bodyText": "Would add() return true when the set does not contain the element yet?", "author": "bf8086", "createdAt": "2020-05-12T17:24:56Z", "path": "core/common/src/main/java/alluxio/cli/CommandUtils.java", "diffHunk": "@@ -120,22 +124,25 @@ public static void checkNumOfArgsNoMoreThan(Command cmd, CommandLine cl, int n)\n    * @return list of the node names, null when file fails to read\n    */\n   @Nullable\n-  public static List<String> readNodeList(String confDir, String fileName) {\n+  public static Set<String> readNodeList(String confDir, String fileName) {\n     List<String> lines;\n+    String path = Paths.get(confDir, fileName).normalize().toString();\n     try {\n       lines = Files.readAllLines(Paths.get(confDir, fileName), StandardCharsets.UTF_8);\n     } catch (IOException e) {\n-      System.err.format(\"Failed to read file %s/%s. Ignored.\", confDir, fileName);\n-      return new ArrayList<>();\n+      System.err.format(\"Failed to read file %s/%s. Ignored.%n\", confDir, fileName);\n+      return new HashSet<>();\n     }\n \n-    List<String> nodes = new ArrayList<>();\n+    Set<String> nodes = new HashSet<>();\n     for (String line : lines) {\n       String node = line.trim();\n       if (node.startsWith(\"#\") || node.length() == 0) {\n         continue;\n       }\n-      nodes.add(node);\n+      if (nodes.add(node)) {", "originalCommit": "8f757810dc2d5a8a852e11b48094ea8fb743b8b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0OTE2Ng==", "url": "https://github.com/Alluxio/alluxio/pull/11392#discussion_r424149166", "bodyText": "My bad. I meant if(!nodes.add(node)) where nodes.add(node) returns false if it's a duplicate", "author": "jiacheliu3", "createdAt": "2020-05-13T03:13:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwNjUzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "b1b2a96726e854c405967fe6636a2237403b838e", "chunk": "diff --git a/core/common/src/main/java/alluxio/cli/CommandUtils.java b/core/common/src/main/java/alluxio/cli/CommandUtils.java\nindex 2d3d44d12d..aa35764874 100644\n--- a/core/common/src/main/java/alluxio/cli/CommandUtils.java\n+++ b/core/common/src/main/java/alluxio/cli/CommandUtils.java\n\n@@ -140,7 +140,7 @@ public final class CommandUtils {\n       if (node.startsWith(\"#\") || node.length() == 0) {\n         continue;\n       }\n-      if (nodes.add(node)) {\n+      if (!nodes.add(node)) {\n         System.out.format(\"Duplicate node hostname %s found in %s%n\", node, path);\n       }\n     }\n"}}, {"oid": "b1b2a96726e854c405967fe6636a2237403b838e", "url": "https://github.com/Alluxio/alluxio/commit/b1b2a96726e854c405967fe6636a2237403b838e", "message": "correct if condition", "committedDate": "2020-05-13T03:12:00Z", "type": "commit"}]}