{"pr_number": 10953, "pr_title": "Make metastore to track pagestore size", "pr_createdAt": "2020-02-20T01:05:41Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10953", "timeline": [{"oid": "8a0174d9d2c275af22e94e658b5725d4673c260a", "url": "https://github.com/Alluxio/alluxio/commit/8a0174d9d2c275af22e94e658b5725d4673c260a", "message": "Move bytes() and pages() to Metastore", "committedDate": "2020-02-19T07:10:44Z", "type": "commit"}, {"oid": "e807f0eb0ed150bd112f12f0217ea73f55120969", "url": "https://github.com/Alluxio/alluxio/commit/e807f0eb0ed150bd112f12f0217ea73f55120969", "message": "Futher refactor", "committedDate": "2020-02-20T00:51:37Z", "type": "commit"}, {"oid": "1360daf3418a061a0c78a096c07626468c9f6b5c", "url": "https://github.com/Alluxio/alluxio/commit/1360daf3418a061a0c78a096c07626468c9f6b5c", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into lite_lock", "committedDate": "2020-02-20T00:53:54Z", "type": "commit"}, {"oid": "bed3fd8786f49be8431c0337a02e7b0cdacbdb57", "url": "https://github.com/Alluxio/alluxio/commit/bed3fd8786f49be8431c0337a02e7b0cdacbdb57", "message": "Fix style check", "committedDate": "2020-02-20T01:46:52Z", "type": "commit"}, {"oid": "646ed8e739941c2c761eab142e1095aa651c1951", "url": "https://github.com/Alluxio/alluxio/commit/646ed8e739941c2c761eab142e1095aa651c1951", "message": "Fix tests", "committedDate": "2020-02-20T19:36:11Z", "type": "commit"}, {"oid": "04142c48bf5a9fafd80beb45c53864a945d9305c", "url": "https://github.com/Alluxio/alluxio/commit/04142c48bf5a9fafd80beb45c53864a945d9305c", "message": "Update PageStore unit tests", "committedDate": "2020-02-20T20:00:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxODM3Mg==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r382318372", "bodyText": "This comment is not consistent with the calculation (ie. 1000 / 1.2 = 833)", "author": "calvinjia", "createdAt": "2020-02-20T23:34:08Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -50,70 +45,44 @@\n @NotThreadSafe\n public class RocksPageStore implements PageStore {\n   private static final Logger LOG = LoggerFactory.getLogger(RocksPageStore.class);\n-  public static final int KEY_LEN = Long.BYTES * 2;\n   private static final byte[] CONF_KEY = \"CONF\".getBytes();\n+  // TODO(feng): consider making the overhead ratio configurable\n+  // We assume 20% overhead using Rocksdb as a page store, i.e., with 1GB space allocated, we\n+  // expect no more than 800MB logical data stored", "originalCommit": "04142c48bf5a9fafd80beb45c53864a945d9305c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d00996da5ae2f67c0e9185c9291dfbb2d471ecb2", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java b/core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java\nindex a6ba874de2..be7a520fc1 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java\n\n@@ -48,7 +48,7 @@ public class RocksPageStore implements PageStore {\n   private static final byte[] CONF_KEY = \"CONF\".getBytes();\n   // TODO(feng): consider making the overhead ratio configurable\n   // We assume 20% overhead using Rocksdb as a page store, i.e., with 1GB space allocated, we\n-  // expect no more than 800MB logical data stored\n+  // expect no more than 1024MB/(1+20%)=853MB logical data stored\n   private static final double ROCKS_OVERHEAD_RATIO = 0.2;\n \n   private final String mRoot;\n"}}, {"oid": "d00996da5ae2f67c0e9185c9291dfbb2d471ecb2", "url": "https://github.com/Alluxio/alluxio/commit/d00996da5ae2f67c0e9185c9291dfbb2d471ecb2", "message": "Address comments", "committedDate": "2020-02-21T00:28:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0NzA3MA==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r382347070", "bodyText": "We should close the db whenever restore returns false.", "author": "bf8086", "createdAt": "2020-02-21T01:08:43Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -179,25 +146,31 @@ private static PageId getPageIdFromKey(byte[] key) {\n   }\n \n   @Override\n-  public long pages() {\n-    return mSize.get();\n-  }\n-\n-  @Override\n-  public long bytes() {\n-    return mBytes.get();\n-  }\n-\n-  @Override\n-  public Collection<PageInfo> getPages() {\n-    try (RocksIterator iter = mDb.newIterator()) {\n-      return Streams.stream(new PageIterator(iter)).collect(Collectors.toList());\n+  public boolean restore(Predicate<PageInfo> initFunc) {\n+    try {\n+      byte[] confData = mDb.get(CONF_KEY);\n+      Cache.PRocksPageStoreOptions pOptions = mOptions.toProto();\n+      if (confData != null) {\n+        Cache.PRocksPageStoreOptions persistedOptions =\n+            Cache.PRocksPageStoreOptions.parseFrom(confData);\n+        if (!persistedOptions.equals(pOptions)) {\n+          mDb.close();\n+          return false;\n+        }\n+      }\n+      mDb.put(CONF_KEY, pOptions.toByteArray());\n+      try (RocksIterator iter = mDb.newIterator()) {\n+        return Streams.stream(new PageIterator(iter)).allMatch(initFunc::test);\n+      }\n+    } catch (RocksDBException | IOException e) {\n+      LOG.error(\"Failed to restore RocksPageStore:\", e);", "originalCommit": "d00996da5ae2f67c0e9185c9291dfbb2d471ecb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgzNTM5Nw==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r382835397", "bodyText": "done", "author": "apc999", "createdAt": "2020-02-21T22:25:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0NzA3MA=="}], "type": "inlineReview", "revised_code": {"commit": "3d06a4a628bcdf395c0b0cda3397a6a206a909ef", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java b/core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java\nindex be7a520fc1..6fa17595ed 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java\n\n@@ -146,7 +148,7 @@ public class RocksPageStore implements PageStore {\n   }\n \n   @Override\n-  public boolean restore(Predicate<PageInfo> initFunc) {\n+  public Collection<PageInfo> getPages() throws IOException {\n     try {\n       byte[] confData = mDb.get(CONF_KEY);\n       Cache.PRocksPageStoreOptions pOptions = mOptions.toProto();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0Nzk4Nw==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r382347987", "bodyText": "RocksPageStore will be in a bad state after restore then initialize.", "author": "bf8086", "createdAt": "2020-02-21T01:12:47Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -77,24 +77,27 @@\n   public static LocalCacheManager create(AlluxioConfiguration conf) throws IOException {\n     MetaStore metaStore = MetaStore.create();\n     CacheEvictor evictor = CacheEvictor.create(conf);\n-    PageStore pageStore = PageStore.create(conf);\n+    PageStoreOptions options = PageStoreOptions.create(conf);\n+    PageStore pageStore = PageStore.create(options);\n+    boolean restored = false;\n     try {\n-      Collection<PageInfo> pageInfos = pageStore.getPages();\n-      LOG.info(\"Creating LocalCacheManager with {} existing pages\", pageInfos.size());\n-      for (PageInfo pageInfo : pageInfos) {\n-        PageId pageId = pageInfo.getPageId();\n-        metaStore.addPage(pageId, pageInfo);\n-        evictor.updateOnPut(pageId);\n-      }\n-      return new LocalCacheManager(conf, metaStore, pageStore, evictor);\n+      restored = pageStore.restore(pageInfo -> {\n+        if (pageInfo == null) {\n+          return false;\n+        }\n+        metaStore.addPage(pageInfo.getPageId(), pageInfo);\n+        evictor.updateOnPut(pageInfo.getPageId());\n+        return metaStore.bytes() <= pageStore.getCacheSize();\n+      });\n     } catch (Exception e) {\n-      try {\n-        pageStore.close();\n-      } catch (Exception ex) {\n-        e.addSuppressed(ex);\n-      }\n-      throw new IOException(\"failed to create local cache manager\", e);\n+      LOG.error(\"Failed to restore PageStore\", e);\n+    }\n+    if (!restored) {\n+      metaStore.reset();\n+      evictor.reset();\n+      pageStore.initialize(options);", "originalCommit": "d00996da5ae2f67c0e9185c9291dfbb2d471ecb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk4Nzk5Mg==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r382987992", "bodyText": "initialize will remove all files. will it still be a problem?", "author": "apc999", "createdAt": "2020-02-23T09:39:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0Nzk4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwMjIzMQ==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r383602231", "bodyText": "The issue is that initialize is generic and it does not initialize resource specific to an implementation. In RocksDB page store, the mDB will be stale (depends on the restore result) and unusable after the initialize clean up the directory.", "author": "bf8086", "createdAt": "2020-02-25T00:55:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0Nzk4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3d06a4a628bcdf395c0b0cda3397a6a206a909ef", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\nindex ed7888bd45..0797941b71 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\n\n@@ -78,24 +78,16 @@ public class LocalCacheManager implements CacheManager {\n     MetaStore metaStore = MetaStore.create();\n     CacheEvictor evictor = CacheEvictor.create(conf);\n     PageStoreOptions options = PageStoreOptions.create(conf);\n-    PageStore pageStore = PageStore.create(options);\n-    boolean restored = false;\n+    PageStore pageStore = null;\n     try {\n-      restored = pageStore.restore(pageInfo -> {\n-        if (pageInfo == null) {\n-          return false;\n-        }\n-        metaStore.addPage(pageInfo.getPageId(), pageInfo);\n-        evictor.updateOnPut(pageInfo.getPageId());\n-        return metaStore.bytes() <= pageStore.getCacheSize();\n-      });\n+      pageStore = PageStore.create(options, false, metaStore, evictor);\n     } catch (Exception e) {\n       LOG.error(\"Failed to restore PageStore\", e);\n     }\n-    if (!restored) {\n+    if (pageStore == null) {\n       metaStore.reset();\n       evictor.reset();\n-      pageStore.initialize(options);\n+      pageStore = PageStore.create(options);\n     }\n     return new LocalCacheManager(conf, metaStore, pageStore, evictor);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1MDk4Ng==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r382350986", "bodyText": "We need to indicate that this function must be called right after the constructor. The state of the page store is undetermined before this function is called.", "author": "bf8086", "createdAt": "2020-02-21T01:24:40Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -170,27 +136,16 @@ ReadableByteChannel get(PageId pageId, int pageOffset) throws IOException,\n   void delete(PageId pageId, long pageSize) throws IOException, PageNotFoundException;\n \n   /**\n-   * @return the number of pages stored\n-   */\n-  long pages();\n-\n-  /**\n-   * @return the total size of pages stored in bytes\n-   */\n-  long bytes();\n-\n-  /**\n-   * Gets all page ids.\n+   * Restores the page store from a previous run.\n    *\n-   * @return collection of ids representing all pages loaded from disk\n+   * @param initFunc function to apply during restore process\n+   * @return true if successfully restored from previous state\n    * @throws IOException if any error occurs\n    */\n-  Collection<PageInfo> getPages() throws IOException;\n+  boolean restore(Predicate<PageInfo> initFunc) throws IOException;", "originalCommit": "d00996da5ae2f67c0e9185c9291dfbb2d471ecb2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d06a4a628bcdf395c0b0cda3397a6a206a909ef", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java b/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java\nindex e1be90406e..1f13d8c629 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java\n\n@@ -136,13 +179,10 @@ public interface PageStore extends AutoCloseable {\n   void delete(PageId pageId, long pageSize) throws IOException, PageNotFoundException;\n \n   /**\n-   * Restores the page store from a previous run.\n-   *\n-   * @param initFunc function to apply during restore process\n-   * @return true if successfully restored from previous state\n+   * @return the iterator of pages from page store\n    * @throws IOException if any error occurs\n    */\n-  boolean restore(Predicate<PageInfo> initFunc) throws IOException;\n+  Collection<PageInfo> getPages() throws IOException;\n \n   /**\n    * @return an estimated cache size in bytes\n"}}, {"oid": "f3967f23b80efed6c8ca9c38d0da39eb27dbf6c8", "url": "https://github.com/Alluxio/alluxio/commit/f3967f23b80efed6c8ca9c38d0da39eb27dbf6c8", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into lite_lock", "committedDate": "2020-02-21T18:24:53Z", "type": "commit"}, {"oid": "6d55fb204e410e6b94b40a1223a6377ed5ff23f3", "url": "https://github.com/Alluxio/alluxio/commit/6d55fb204e410e6b94b40a1223a6377ed5ff23f3", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into lite_lock", "committedDate": "2020-02-21T22:15:49Z", "type": "commit"}, {"oid": "3d06a4a628bcdf395c0b0cda3397a6a206a909ef", "url": "https://github.com/Alluxio/alluxio/commit/3d06a4a628bcdf395c0b0cda3397a6a206a909ef", "message": "Address comments", "committedDate": "2020-02-23T09:40:08Z", "type": "commit"}, {"oid": "a1aa3cbfb7bb11ef8078cef364307dac53bd1b36", "url": "https://github.com/Alluxio/alluxio/commit/a1aa3cbfb7bb11ef8078cef364307dac53bd1b36", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into lite_lock", "committedDate": "2020-02-25T00:21:53Z", "type": "commit"}, {"oid": "7d686d709daab528419ff1ae7b6b341135c7805a", "url": "https://github.com/Alluxio/alluxio/commit/7d686d709daab528419ff1ae7b6b341135c7805a", "message": "Fix style check", "committedDate": "2020-02-25T00:23:01Z", "type": "commit"}, {"oid": "8d24127fa3bc4a6d093c7eaee2c15164b8b20ab5", "url": "https://github.com/Alluxio/alluxio/commit/8d24127fa3bc4a6d093c7eaee2c15164b8b20ab5", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into lite_lock", "committedDate": "2020-02-25T21:09:07Z", "type": "commit"}, {"oid": "174008918149c697aec68482d8933ba6bc8f7d7b", "url": "https://github.com/Alluxio/alluxio/commit/174008918149c697aec68482d8933ba6bc8f7d7b", "message": "Fix tests", "committedDate": "2020-02-25T21:13:12Z", "type": "commit"}, {"oid": "4400d903e0f15e6181d012bc848dd21da77efd97", "url": "https://github.com/Alluxio/alluxio/commit/4400d903e0f15e6181d012bc848dd21da77efd97", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into lite_lock", "committedDate": "2020-02-25T23:04:08Z", "type": "commit"}, {"oid": "f4e9ff672385cb798dee6b9a16b3fc8d1f35ee41", "url": "https://github.com/Alluxio/alluxio/commit/f4e9ff672385cb798dee6b9a16b3fc8d1f35ee41", "message": "Fix tests", "committedDate": "2020-02-25T23:04:51Z", "type": "commit"}, {"oid": "aea7484e860cafa8dd9919e06929f2b96e2b6f9a", "url": "https://github.com/Alluxio/alluxio/commit/aea7484e860cafa8dd9919e06929f2b96e2b6f9a", "message": "Change getPages to return a stream of PageInfo", "committedDate": "2020-02-26T01:10:17Z", "type": "commit"}, {"oid": "fcc4cfc15c426385b5c5fd894b82596d00fd5693", "url": "https://github.com/Alluxio/alluxio/commit/fcc4cfc15c426385b5c5fd894b82596d00fd5693", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into lite_lock", "committedDate": "2020-02-26T01:35:04Z", "type": "commit"}, {"oid": "dc317747df25508c8ef26f2b701607ca6692540d", "url": "https://github.com/Alluxio/alluxio/commit/dc317747df25508c8ef26f2b701607ca6692540d", "message": "Update javadoc", "committedDate": "2020-02-26T01:44:15Z", "type": "commit"}, {"oid": "61dd38272cacd4ae7ba2b0360159512b0bab63c7", "url": "https://github.com/Alluxio/alluxio/commit/61dd38272cacd4ae7ba2b0360159512b0bab63c7", "message": "More javadoc", "committedDate": "2020-02-26T02:17:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyNDEzMA==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384724130", "bodyText": "What happens when we call close on this stream, is it a no-op?", "author": "calvinjia", "createdAt": "2020-02-26T19:45:55Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -180,25 +147,29 @@ private static PageId getPageIdFromKey(byte[] key) {\n   }\n \n   @Override\n-  public long pages() {\n-    return mSize.get();\n-  }\n-\n-  @Override\n-  public long bytes() {\n-    return mBytes.get();\n-  }\n-\n-  @Override\n-  public Collection<PageInfo> getPages() {\n-    try (RocksIterator iter = mDb.newIterator()) {\n-      return Streams.stream(new PageIterator(iter)).collect(Collectors.toList());\n+  public Stream<PageInfo> getPages() throws IOException {\n+    try {\n+      byte[] confData = mDb.get(CONF_KEY);\n+      Cache.PRocksPageStoreOptions pOptions = mOptions.toProto();\n+      if (confData != null) {\n+        Cache.PRocksPageStoreOptions persistedOptions =\n+            Cache.PRocksPageStoreOptions.parseFrom(confData);\n+        if (!persistedOptions.equals(pOptions)) {\n+          mDb.close();\n+          throw new IOException(\"Inconsistent configuration for RocksPageStore\");\n+        }\n+      }\n+      mDb.put(CONF_KEY, pOptions.toByteArray());\n+      return Streams.stream(new PageIterator(mDb.newIterator()));", "originalCommit": "61dd38272cacd4ae7ba2b0360159512b0bab63c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzOTM2Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384939363", "bodyText": "correct", "author": "apc999", "createdAt": "2020-02-27T06:46:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyNDEzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzMjUwOQ==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r385332509", "bodyText": "fixed by adding closer to Stream.onClose", "author": "apc999", "createdAt": "2020-02-27T19:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyNDEzMA=="}], "type": "inlineReview", "revised_code": {"commit": "f250d0427c1dd2d064c6054c6319cdcf66aeafcd", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java b/core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java\nindex e29462deb4..fde487c227 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java\n\n@@ -147,24 +170,8 @@ public class RocksPageStore implements PageStore {\n   }\n \n   @Override\n-  public Stream<PageInfo> getPages() throws IOException {\n-    try {\n-      byte[] confData = mDb.get(CONF_KEY);\n-      Cache.PRocksPageStoreOptions pOptions = mOptions.toProto();\n-      if (confData != null) {\n-        Cache.PRocksPageStoreOptions persistedOptions =\n-            Cache.PRocksPageStoreOptions.parseFrom(confData);\n-        if (!persistedOptions.equals(pOptions)) {\n-          mDb.close();\n-          throw new IOException(\"Inconsistent configuration for RocksPageStore\");\n-        }\n-      }\n-      mDb.put(CONF_KEY, pOptions.toByteArray());\n-      return Streams.stream(new PageIterator(mDb.newIterator()));\n-    } catch (RocksDBException e) {\n-      mDb.close();\n-      throw new IOException(\"Failed to restore RocksPageStore:\", e);\n-    }\n+  public Stream<PageInfo> getPages() {\n+    return Streams.stream(new PageIterator(mDb.newIterator()));\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4ODcxMg==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384788712", "bodyText": "Do we need to clean up directories even when we try to load the store? For example, when the store type is changed and there are data for previous store type.", "author": "bf8086", "createdAt": "2020-02-26T21:51:31Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -45,51 +43,66 @@\n    *\n    * @param options the options to instantiate the page store\n    * @return a PageStore instance\n-   * @throws IOException if failed to create a page store\n    */\n   static PageStore create(PageStoreOptions options) throws IOException {\n-    LOG.info(\"Create PageStore option={}\", options.toString());\n-    switch (options.getType()) {\n-      case LOCAL:\n-        return new LocalPageStore(options.toOptions());\n-      case ROCKS:\n-        return new RocksPageStore(options.toOptions());\n-      default:\n-        throw new IllegalArgumentException(\n-            \"Incompatible PageStore \" + options.getType() + \" specified\");\n-    }\n+    return create(options, null, null);\n   }\n \n   /**\n-   * Creates a new instance of {@link PageStore} based on configuration.\n+   * Creates a {@link PageStore} by restoring from previous state (when metastore and evictor are\n+   * not null).\n    *\n-   * @param conf configuration\n-   * @return the {@link PageStore}\n+   * @param options the options to instantiate the page store\n+   * @param metaStore meta store\n+   * @param evictor evictor\n+   * @return a PageStore instance\n+   * @throws IOException if I/O error happens\n    */\n-  static PageStore create(AlluxioConfiguration conf) throws IOException {\n-    PageStoreOptions options;\n-    PageStoreType storeType = conf.getEnum(\n-        PropertyKey.USER_CLIENT_CACHE_STORE_TYPE, PageStoreType.class);\n-    switch (storeType) {\n+  static PageStore create(PageStoreOptions options, @Nullable MetaStore metaStore,\n+        @Nullable CacheEvictor evictor) throws IOException {\n+    LOG.info(\"Create PageStore option={}\", options.toString());\n+    if (metaStore == null || evictor == null) {", "originalCommit": "61dd38272cacd4ae7ba2b0360159512b0bab63c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NTI1OA==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384955258", "bodyText": "this is not priority currently but only making the code more complicated.\nI would defer the implementation", "author": "apc999", "createdAt": "2020-02-27T07:38:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4ODcxMg=="}], "type": "inlineReview", "revised_code": {"commit": "f250d0427c1dd2d064c6054c6319cdcf66aeafcd", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java b/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java\nindex 5984c08957..6ffb4b14bf 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java\n\n@@ -39,29 +36,17 @@ public interface PageStore extends AutoCloseable {\n   Logger LOG = LoggerFactory.getLogger(PageStore.class);\n \n   /**\n-   * Creates a new {@link PageStore}.\n-   *\n-   * @param options the options to instantiate the page store\n-   * @return a PageStore instance\n-   */\n-  static PageStore create(PageStoreOptions options) throws IOException {\n-    return create(options, null, null);\n-  }\n-\n-  /**\n-   * Creates a {@link PageStore} by restoring from previous state (when metastore and evictor are\n-   * not null).\n+   * Creates a {@link PageStore}. When init is false, restore from previous state; clean up the\n+   * cache dir otherwise.\n    *\n    * @param options the options to instantiate the page store\n-   * @param metaStore meta store\n-   * @param evictor evictor\n+   * @param init whether to init the cache dir\n    * @return a PageStore instance\n    * @throws IOException if I/O error happens\n    */\n-  static PageStore create(PageStoreOptions options, @Nullable MetaStore metaStore,\n-        @Nullable CacheEvictor evictor) throws IOException {\n+  static PageStore create(PageStoreOptions options, boolean init) throws IOException {\n     LOG.info(\"Create PageStore option={}\", options.toString());\n-    if (metaStore == null || evictor == null) {\n+    if (init) {\n       initialize(options);\n     }\n     final PageStore pageStore;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5NDAyNg==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384794026", "bodyText": "(nit) Given all other stream usages do not require explicit closing, it might be hard for people to remember to close it.", "author": "bf8086", "createdAt": "2020-02-26T22:01:46Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -171,27 +183,16 @@ ReadableByteChannel get(PageId pageId, int pageOffset) throws IOException,\n   void delete(PageId pageId, long pageSize) throws IOException, PageNotFoundException;\n \n   /**\n-   * @return the number of pages stored\n-   */\n-  long pages();\n-\n-  /**\n-   * @return the total size of pages stored in bytes\n-   */\n-  long bytes();\n-\n-  /**\n-   * Gets all page ids.\n+   * Gets a stream of all pages from the page store. This stream needs to be closed as it may", "originalCommit": "61dd38272cacd4ae7ba2b0360159512b0bab63c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NjQ2Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384956463", "bodyText": "perhaps. but we should either use iterator or stream here because we will need to handle ~1 million pages restored, that could take ~GB memory if we use collection. due to this reason, I and @calvinjia  after discussion decided to stick to stream.", "author": "apc999", "createdAt": "2020-02-27T07:41:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5NDAyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5NTkxOQ==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384795919", "bodyText": "(nit) Would it be simpler if we just do it in the previous catch block?", "author": "bf8086", "createdAt": "2020-02-26T22:05:49Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -77,24 +77,19 @@\n   public static LocalCacheManager create(AlluxioConfiguration conf) throws IOException {\n     MetaStore metaStore = MetaStore.create();\n     CacheEvictor evictor = CacheEvictor.create(conf);\n-    PageStore pageStore = PageStore.create(conf);\n+    PageStoreOptions options = PageStoreOptions.create(conf);\n+    PageStore pageStore = null;\n     try {\n-      Collection<PageInfo> pageInfos = pageStore.getPages();\n-      LOG.info(\"Creating LocalCacheManager with {} existing pages\", pageInfos.size());\n-      for (PageInfo pageInfo : pageInfos) {\n-        PageId pageId = pageInfo.getPageId();\n-        metaStore.addPage(pageId, pageInfo);\n-        evictor.updateOnPut(pageId);\n-      }\n-      return new LocalCacheManager(conf, metaStore, pageStore, evictor);\n+      pageStore = PageStore.create(options, metaStore, evictor);\n     } catch (Exception e) {\n-      try {\n-        pageStore.close();\n-      } catch (Exception ex) {\n-        e.addSuppressed(ex);\n-      }\n-      throw new IOException(\"failed to create local cache manager\", e);\n+      LOG.error(\"Failed to restore PageStore\", e);\n+    }\n+    if (pageStore == null) {\n+      metaStore.reset();\n+      evictor.reset();\n+      pageStore = PageStore.create(options);\n     }", "originalCommit": "61dd38272cacd4ae7ba2b0360159512b0bab63c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NDgyNw==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384954827", "bodyText": "i feel that is not very readable", "author": "apc999", "createdAt": "2020-02-27T07:37:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5NTkxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f250d0427c1dd2d064c6054c6319cdcf66aeafcd", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\nindex 0c9b132831..ae93518ea8 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\n\n@@ -70,6 +75,48 @@ public class LocalCacheManager implements CacheManager {\n   @GuardedBy(\"mMetaLock\")\n   private final MetaStore mMetaStore;\n \n+  /**\n+   * Restores a page store a the configured location, updating meta store and evictor.\n+   *\n+   * @param pageStore page store\n+   * @param options page store options\n+   * @param metaStore meta store\n+   * @param evictor evictor\n+   * @return whether the restore succeeds or not\n+   */\n+  private static boolean restore(\n+      PageStore pageStore, PageStoreOptions options, MetaStore metaStore, CacheEvictor evictor) {\n+    LOG.info(\"Restore PageStore with {}\", options);\n+    Path rootDir = Paths.get(options.getRootDir());\n+    if (!Files.exists(rootDir)) {\n+      LOG.error(\"Directory {} does not exist\", rootDir);\n+      return false;\n+    }\n+    try (Stream<PageInfo> stream = pageStore.getPages()) {\n+      Iterator<PageInfo> iterator = stream.iterator();\n+      while (iterator.hasNext()) {\n+        PageInfo pageInfo = iterator.next();\n+        if (pageInfo == null) {\n+          LOG.error(\"Invalid page info\");\n+          return false;\n+        }\n+        metaStore.addPage(pageInfo.getPageId(), pageInfo);\n+        evictor.updateOnPut(pageInfo.getPageId());\n+        if (metaStore.bytes() > pageStore.getCacheSize()) {\n+          LOG.error(\"Loaded pages exceed cache capacity ({} bytes)\",\n+                  pageStore.getCacheSize());\n+          return false;\n+        }\n+      }\n+    } catch (Exception e) {\n+      LOG.error(\"Failed to restore PageStore\", e);\n+      return false;\n+    }\n+    LOG.info(\"Restored PageStore with {} existing pages and {} bytes\",\n+        metaStore.pages(), metaStore.bytes());\n+    return true;\n+  }\n+\n   /**\n    * @param conf the Alluxio configuration\n    * @return an instance of {@link LocalCacheManager}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5NzUwNw==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384797507", "bodyText": "Would it be more clear if we just move the logic before this line to create(options) and just call it first?", "author": "bf8086", "createdAt": "2020-02-26T22:09:21Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java", "diffHunk": "@@ -45,51 +43,66 @@\n    *\n    * @param options the options to instantiate the page store\n    * @return a PageStore instance\n-   * @throws IOException if failed to create a page store\n    */\n   static PageStore create(PageStoreOptions options) throws IOException {\n-    LOG.info(\"Create PageStore option={}\", options.toString());\n-    switch (options.getType()) {\n-      case LOCAL:\n-        return new LocalPageStore(options.toOptions());\n-      case ROCKS:\n-        return new RocksPageStore(options.toOptions());\n-      default:\n-        throw new IllegalArgumentException(\n-            \"Incompatible PageStore \" + options.getType() + \" specified\");\n-    }\n+    return create(options, null, null);\n   }\n \n   /**\n-   * Creates a new instance of {@link PageStore} based on configuration.\n+   * Creates a {@link PageStore} by restoring from previous state (when metastore and evictor are\n+   * not null).\n    *\n-   * @param conf configuration\n-   * @return the {@link PageStore}\n+   * @param options the options to instantiate the page store\n+   * @param metaStore meta store\n+   * @param evictor evictor\n+   * @return a PageStore instance\n+   * @throws IOException if I/O error happens\n    */\n-  static PageStore create(AlluxioConfiguration conf) throws IOException {\n-    PageStoreOptions options;\n-    PageStoreType storeType = conf.getEnum(\n-        PropertyKey.USER_CLIENT_CACHE_STORE_TYPE, PageStoreType.class);\n-    switch (storeType) {\n+  static PageStore create(PageStoreOptions options, @Nullable MetaStore metaStore,\n+        @Nullable CacheEvictor evictor) throws IOException {\n+    LOG.info(\"Create PageStore option={}\", options.toString());\n+    if (metaStore == null || evictor == null) {\n+      initialize(options);\n+    }\n+    final PageStore pageStore;\n+    switch (options.getType()) {\n       case LOCAL:\n-        options = new LocalPageStoreOptions()\n-            .setFileBuckets(conf.getInt(PropertyKey.USER_CLIENT_CACHE_LOCAL_STORE_FILE_BUCKETS));\n+        pageStore = new LocalPageStore(options.toOptions());\n         break;\n       case ROCKS:\n-        options = new RocksPageStoreOptions();\n+        pageStore = new RocksPageStore(options.toOptions());\n         break;\n       default:\n-        throw new IllegalArgumentException(String.format(\"Unrecognized store type %s\",\n-            storeType.name()));\n+        throw new IllegalArgumentException(\n+            \"Incompatible PageStore \" + options.getType() + \" specified\");\n+    }\n+    if (metaStore != null && evictor != null) {", "originalCommit": "61dd38272cacd4ae7ba2b0360159512b0bab63c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NTU2NQ==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384955565", "bodyText": "not sure I understand the comment", "author": "apc999", "createdAt": "2020-02-27T07:39:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5NzUwNw=="}], "type": "inlineReview", "revised_code": {"commit": "f250d0427c1dd2d064c6054c6319cdcf66aeafcd", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java b/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java\nindex 5984c08957..6ffb4b14bf 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/PageStore.java\n\n@@ -39,29 +36,17 @@ public interface PageStore extends AutoCloseable {\n   Logger LOG = LoggerFactory.getLogger(PageStore.class);\n \n   /**\n-   * Creates a new {@link PageStore}.\n-   *\n-   * @param options the options to instantiate the page store\n-   * @return a PageStore instance\n-   */\n-  static PageStore create(PageStoreOptions options) throws IOException {\n-    return create(options, null, null);\n-  }\n-\n-  /**\n-   * Creates a {@link PageStore} by restoring from previous state (when metastore and evictor are\n-   * not null).\n+   * Creates a {@link PageStore}. When init is false, restore from previous state; clean up the\n+   * cache dir otherwise.\n    *\n    * @param options the options to instantiate the page store\n-   * @param metaStore meta store\n-   * @param evictor evictor\n+   * @param init whether to init the cache dir\n    * @return a PageStore instance\n    * @throws IOException if I/O error happens\n    */\n-  static PageStore create(PageStoreOptions options, @Nullable MetaStore metaStore,\n-        @Nullable CacheEvictor evictor) throws IOException {\n+  static PageStore create(PageStoreOptions options, boolean init) throws IOException {\n     LOG.info(\"Create PageStore option={}\", options.toString());\n-    if (metaStore == null || evictor == null) {\n+    if (init) {\n       initialize(options);\n     }\n     final PageStore pageStore;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5OTc3NA==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384799774", "bodyText": "This is a pretty strong side effect from a function that looks like a getter. Shall we either rename this function or make it protected and close the db upon exception from PageStore.create()?", "author": "bf8086", "createdAt": "2020-02-26T22:14:02Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java", "diffHunk": "@@ -180,25 +147,29 @@ private static PageId getPageIdFromKey(byte[] key) {\n   }\n \n   @Override\n-  public long pages() {\n-    return mSize.get();\n-  }\n-\n-  @Override\n-  public long bytes() {\n-    return mBytes.get();\n-  }\n-\n-  @Override\n-  public Collection<PageInfo> getPages() {\n-    try (RocksIterator iter = mDb.newIterator()) {\n-      return Streams.stream(new PageIterator(iter)).collect(Collectors.toList());\n+  public Stream<PageInfo> getPages() throws IOException {\n+    try {\n+      byte[] confData = mDb.get(CONF_KEY);\n+      Cache.PRocksPageStoreOptions pOptions = mOptions.toProto();\n+      if (confData != null) {\n+        Cache.PRocksPageStoreOptions persistedOptions =\n+            Cache.PRocksPageStoreOptions.parseFrom(confData);\n+        if (!persistedOptions.equals(pOptions)) {\n+          mDb.close();", "originalCommit": "61dd38272cacd4ae7ba2b0360159512b0bab63c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzOTE2NQ==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384939165", "bodyText": "make sense. Moved the conf verification part to factory method", "author": "apc999", "createdAt": "2020-02-27T06:46:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5OTc3NA=="}], "type": "inlineReview", "revised_code": {"commit": "f250d0427c1dd2d064c6054c6319cdcf66aeafcd", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java b/core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java\nindex e29462deb4..fde487c227 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/store/RocksPageStore.java\n\n@@ -147,24 +170,8 @@ public class RocksPageStore implements PageStore {\n   }\n \n   @Override\n-  public Stream<PageInfo> getPages() throws IOException {\n-    try {\n-      byte[] confData = mDb.get(CONF_KEY);\n-      Cache.PRocksPageStoreOptions pOptions = mOptions.toProto();\n-      if (confData != null) {\n-        Cache.PRocksPageStoreOptions persistedOptions =\n-            Cache.PRocksPageStoreOptions.parseFrom(confData);\n-        if (!persistedOptions.equals(pOptions)) {\n-          mDb.close();\n-          throw new IOException(\"Inconsistent configuration for RocksPageStore\");\n-        }\n-      }\n-      mDb.put(CONF_KEY, pOptions.toByteArray());\n-      return Streams.stream(new PageIterator(mDb.newIterator()));\n-    } catch (RocksDBException e) {\n-      mDb.close();\n-      throw new IOException(\"Failed to restore RocksPageStore:\", e);\n-    }\n+  public Stream<PageInfo> getPages() {\n+    return Streams.stream(new PageIterator(mDb.newIterator()));\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwNTUxNw==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384805517", "bodyText": "After restoration failed, we will need to clean the store directory before creating a new store.", "author": "bf8086", "createdAt": "2020-02-26T22:26:26Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -77,24 +77,19 @@\n   public static LocalCacheManager create(AlluxioConfiguration conf) throws IOException {\n     MetaStore metaStore = MetaStore.create();\n     CacheEvictor evictor = CacheEvictor.create(conf);\n-    PageStore pageStore = PageStore.create(conf);\n+    PageStoreOptions options = PageStoreOptions.create(conf);\n+    PageStore pageStore = null;\n     try {\n-      Collection<PageInfo> pageInfos = pageStore.getPages();\n-      LOG.info(\"Creating LocalCacheManager with {} existing pages\", pageInfos.size());\n-      for (PageInfo pageInfo : pageInfos) {\n-        PageId pageId = pageInfo.getPageId();\n-        metaStore.addPage(pageId, pageInfo);\n-        evictor.updateOnPut(pageId);\n-      }\n-      return new LocalCacheManager(conf, metaStore, pageStore, evictor);\n+      pageStore = PageStore.create(options, metaStore, evictor);\n     } catch (Exception e) {\n-      try {\n-        pageStore.close();\n-      } catch (Exception ex) {\n-        e.addSuppressed(ex);\n-      }\n-      throw new IOException(\"failed to create local cache manager\", e);\n+      LOG.error(\"Failed to restore PageStore\", e);", "originalCommit": "61dd38272cacd4ae7ba2b0360159512b0bab63c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NDQzNw==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r384954437", "bodyText": "in this case, passing init=true to create PageStore in the following.", "author": "apc999", "createdAt": "2020-02-27T07:36:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwNTUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5ODk3Ng==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r385398976", "bodyText": "The current initialize() function does not seem to clean up the store path of the current store type.", "author": "bf8086", "createdAt": "2020-02-27T22:05:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwNTUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxMzExMw==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r385413113", "bodyText": "fixed", "author": "apc999", "createdAt": "2020-02-27T22:39:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwNTUxNw=="}], "type": "inlineReview", "revised_code": {"commit": "f250d0427c1dd2d064c6054c6319cdcf66aeafcd", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\nindex 0c9b132831..ae93518ea8 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\n\n@@ -70,6 +75,48 @@ public class LocalCacheManager implements CacheManager {\n   @GuardedBy(\"mMetaLock\")\n   private final MetaStore mMetaStore;\n \n+  /**\n+   * Restores a page store a the configured location, updating meta store and evictor.\n+   *\n+   * @param pageStore page store\n+   * @param options page store options\n+   * @param metaStore meta store\n+   * @param evictor evictor\n+   * @return whether the restore succeeds or not\n+   */\n+  private static boolean restore(\n+      PageStore pageStore, PageStoreOptions options, MetaStore metaStore, CacheEvictor evictor) {\n+    LOG.info(\"Restore PageStore with {}\", options);\n+    Path rootDir = Paths.get(options.getRootDir());\n+    if (!Files.exists(rootDir)) {\n+      LOG.error(\"Directory {} does not exist\", rootDir);\n+      return false;\n+    }\n+    try (Stream<PageInfo> stream = pageStore.getPages()) {\n+      Iterator<PageInfo> iterator = stream.iterator();\n+      while (iterator.hasNext()) {\n+        PageInfo pageInfo = iterator.next();\n+        if (pageInfo == null) {\n+          LOG.error(\"Invalid page info\");\n+          return false;\n+        }\n+        metaStore.addPage(pageInfo.getPageId(), pageInfo);\n+        evictor.updateOnPut(pageInfo.getPageId());\n+        if (metaStore.bytes() > pageStore.getCacheSize()) {\n+          LOG.error(\"Loaded pages exceed cache capacity ({} bytes)\",\n+                  pageStore.getCacheSize());\n+          return false;\n+        }\n+      }\n+    } catch (Exception e) {\n+      LOG.error(\"Failed to restore PageStore\", e);\n+      return false;\n+    }\n+    LOG.info(\"Restored PageStore with {} existing pages and {} bytes\",\n+        metaStore.pages(), metaStore.bytes());\n+    return true;\n+  }\n+\n   /**\n    * @param conf the Alluxio configuration\n    * @return an instance of {@link LocalCacheManager}\n"}}, {"oid": "f250d0427c1dd2d064c6054c6319cdcf66aeafcd", "url": "https://github.com/Alluxio/alluxio/commit/f250d0427c1dd2d064c6054c6319cdcf66aeafcd", "message": "Address comments", "committedDate": "2020-02-27T08:17:11Z", "type": "commit"}, {"oid": "b7c8c45be9888f038801c456062cc7e508b03190", "url": "https://github.com/Alluxio/alluxio/commit/b7c8c45be9888f038801c456062cc7e508b03190", "message": "Fix style check", "committedDate": "2020-02-27T18:00:07Z", "type": "commit"}, {"oid": "e52c9f6d208b32118915db84c6fb89094a0f792f", "url": "https://github.com/Alluxio/alluxio/commit/e52c9f6d208b32118915db84c6fb89094a0f792f", "message": "Fix style check", "committedDate": "2020-02-27T18:38:44Z", "type": "commit"}, {"oid": "f775bc0f38372dcfee9f36fc41f88d78f8891df4", "url": "https://github.com/Alluxio/alluxio/commit/f775bc0f38372dcfee9f36fc41f88d78f8891df4", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into lite_lock", "committedDate": "2020-02-27T19:23:23Z", "type": "commit"}, {"oid": "a19fe6d8da9a9f337162430a45c96bf34d9ab791", "url": "https://github.com/Alluxio/alluxio/commit/a19fe6d8da9a9f337162430a45c96bf34d9ab791", "message": "Merge", "committedDate": "2020-02-27T19:28:07Z", "type": "commit"}, {"oid": "ed0612d2c41c3c0423a003dd78da11ac8a36cb5b", "url": "https://github.com/Alluxio/alluxio/commit/ed0612d2c41c3c0423a003dd78da11ac8a36cb5b", "message": "Address comments", "committedDate": "2020-02-27T19:47:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MTcwMQ==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r385381701", "bodyText": "It can be tricky for user to deal with trailing slash if we use the configured path without normalizing it.", "author": "bf8086", "createdAt": "2020-02-27T21:28:41Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java", "diffHunk": "@@ -51,59 +45,24 @@\n   private static final Logger LOG = LoggerFactory.getLogger(LocalPageStore.class);\n \n   private final String mRoot;\n-  private final AtomicLong mSize = new AtomicLong(0);\n-  private final AtomicLong mBytes = new AtomicLong(0);\n   private final long mPageSize;\n+  private final long mCacheSize;\n   private final int mFileBuckets;\n   private final Pattern mPagePattern;\n \n   /**\n    * Creates a new instance of {@link LocalPageStore}.\n    *\n    * @param options options for the local page store\n-   * @throws IOException when fails to create a {@link LocalPageStore}\n    */\n-  public LocalPageStore(LocalPageStoreOptions options) throws IOException {\n+  public LocalPageStore(LocalPageStoreOptions options) {\n     mRoot = options.getRootDir();\n     mPageSize = options.getPageSize();\n+    mCacheSize = options.getCacheSize();\n     mFileBuckets = options.getFileBuckets();\n-    Path rootDir = Paths.get(mRoot);\n     // pattern encoding root_path/page_size(ulong)/bucket(uint)/file_id(str)/page_idx(ulong)/\n     mPagePattern = Pattern.compile(\n-        String.format(\"%s/%d/(\\\\d+)/([^/]+)/(\\\\d+)\", Pattern.quote(rootDir.toString()), mPageSize));\n-    try {\n-      boolean invalidPage = false;\n-\n-      if (Files.exists(rootDir)) {\n-        try (Stream<Path> stream = Files.walk(rootDir)) {\n-          invalidPage = stream\n-              .filter(Files::isRegularFile)\n-              .anyMatch(path -> {\n-                if (getPageId(path) == null) {\n-                  LOG.warn(\"Invalid page path {}\", path);\n-                  return true;\n-                }\n-                try {\n-                  mBytes.getAndAdd(Files.size(path));\n-                } catch (IOException e) {\n-                  LOG.warn(\"Fail to get file size {}\", e.toString());\n-                }\n-                mSize.incrementAndGet();\n-                return false;\n-              });\n-        }\n-      }\n-\n-      if (invalidPage || mBytes.get() > options.getCacheSize()) {\n-        LOG.warn(\"Cannot recover from cached data: {}\",\n-            invalidPage ? \"Invalid page file found\" : \"Cached data size exceeded configured value\");\n-        FileUtils.cleanDirectory(new File(mRoot));\n-        mSize.set(0);\n-        mBytes.set(0);\n-      }\n-    } catch (IOException e) {\n-      throw new IOException(String.format(\"can't initialize page store at %s\", mRoot), e);\n-    }\n+        String.format(\"%s/%d/(\\\\d+)/([^/]+)/(\\\\d+)\", Pattern.quote(mRoot), mPageSize));", "originalCommit": "ed0612d2c41c3c0423a003dd78da11ac8a36cb5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxMTY1MQ==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r385411651", "bodyText": "reverted  and add a javadoc preventing future change", "author": "apc999", "createdAt": "2020-02-27T22:35:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM4MTcwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "dcc06eaa1e16316a18065b8402704f1c9ab766d9", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java b/core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java\nindex b1c83d096e..ddeac64bce 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/store/LocalPageStore.java\n\n@@ -60,9 +60,11 @@ public class LocalPageStore implements PageStore {\n     mPageSize = options.getPageSize();\n     mCacheSize = options.getCacheSize();\n     mFileBuckets = options.getFileBuckets();\n+    // normalize the path to deal with trailing slash\n+    Path rootDir = Paths.get(mRoot);\n     // pattern encoding root_path/page_size(ulong)/bucket(uint)/file_id(str)/page_idx(ulong)/\n     mPagePattern = Pattern.compile(\n-        String.format(\"%s/%d/(\\\\d+)/([^/]+)/(\\\\d+)\", Pattern.quote(mRoot), mPageSize));\n+        String.format(\"%s/%d/(\\\\d+)/([^/]+)/(\\\\d+)\", Pattern.quote(rootDir.toString()), mPageSize));\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5ODIxMA==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r385398210", "bodyText": "Should the previous page store be closed before we create a new one?", "author": "bf8086", "createdAt": "2020-02-27T22:04:14Z", "path": "core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java", "diffHunk": "@@ -71,31 +76,70 @@\n   @GuardedBy(\"mMetaLock\")\n   private final MetaStore mMetaStore;\n \n+  /**\n+   * Restores a page store a the configured location, updating meta store and evictor.\n+   *\n+   * @param pageStore page store\n+   * @param options page store options\n+   * @param metaStore meta store\n+   * @param evictor evictor\n+   * @return whether the restore succeeds or not\n+   */\n+  private static boolean restore(\n+      PageStore pageStore, PageStoreOptions options, MetaStore metaStore, CacheEvictor evictor) {\n+    LOG.info(\"Restore PageStore with {}\", options);\n+    Path rootDir = Paths.get(options.getRootDir());\n+    if (!Files.exists(rootDir)) {\n+      LOG.error(\"Directory {} does not exist\", rootDir);\n+      return false;\n+    }\n+    try (Stream<PageInfo> stream = pageStore.getPages()) {\n+      Iterator<PageInfo> iterator = stream.iterator();\n+      while (iterator.hasNext()) {\n+        PageInfo pageInfo = iterator.next();\n+        if (pageInfo == null) {\n+          LOG.error(\"Invalid page info\");\n+          return false;\n+        }\n+        metaStore.addPage(pageInfo.getPageId(), pageInfo);\n+        evictor.updateOnPut(pageInfo.getPageId());\n+        if (metaStore.bytes() > pageStore.getCacheSize()) {\n+          LOG.error(\"Loaded pages exceed cache capacity ({} bytes)\",\n+                  pageStore.getCacheSize());\n+          return false;\n+        }\n+      }\n+    } catch (Exception e) {\n+      LOG.error(\"Failed to restore PageStore\", e);\n+      return false;\n+    }\n+    LOG.info(\"Restored PageStore with {} existing pages and {} bytes\",\n+        metaStore.pages(), metaStore.bytes());\n+    return true;\n+  }\n+\n   /**\n    * @param conf the Alluxio configuration\n    * @return an instance of {@link LocalCacheManager}\n    */\n   public static LocalCacheManager create(AlluxioConfiguration conf) throws IOException {\n     MetaStore metaStore = MetaStore.create();\n     CacheEvictor evictor = CacheEvictor.create(conf);\n-    PageStore pageStore = PageStore.create(conf);\n+    PageStoreOptions options = PageStoreOptions.create(conf);\n+    PageStore pageStore = null;\n+    boolean restored = false;\n     try {\n-      Collection<PageInfo> pageInfos = pageStore.getPages();\n-      LOG.info(\"Creating LocalCacheManager with {} existing pages\", pageInfos.size());\n-      for (PageInfo pageInfo : pageInfos) {\n-        PageId pageId = pageInfo.getPageId();\n-        metaStore.addPage(pageId, pageInfo);\n-        evictor.updateOnPut(pageId);\n-      }\n-      return new LocalCacheManager(conf, metaStore, pageStore, evictor);\n+      pageStore = PageStore.create(options, false);\n+      restored = restore(pageStore, options, metaStore, evictor);\n     } catch (Exception e) {\n-      try {\n-        pageStore.close();\n-      } catch (Exception ex) {\n-        e.addSuppressed(ex);\n-      }\n-      throw new IOException(\"failed to create local cache manager\", e);\n+      LOG.error(\"Failed to restore PageStore\", e);\n+    }\n+    if (!restored) {\n+      metaStore.reset();\n+      evictor.reset();\n+      pageStore = PageStore.create(options, true);", "originalCommit": "ed0612d2c41c3c0423a003dd78da11ac8a36cb5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxMzgzNQ==", "url": "https://github.com/Alluxio/alluxio/pull/10953#discussion_r385413835", "bodyText": "added", "author": "apc999", "createdAt": "2020-02-27T22:41:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5ODIxMA=="}], "type": "inlineReview", "revised_code": {"commit": "dcc06eaa1e16316a18065b8402704f1c9ab766d9", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\nindex 02aabaf644..2cd4ca7c73 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/cache/LocalCacheManager.java\n\n@@ -135,6 +135,13 @@ public class LocalCacheManager implements CacheManager {\n       LOG.error(\"Failed to restore PageStore\", e);\n     }\n     if (!restored) {\n+      if (pageStore != null) {\n+        try {\n+          pageStore.close();\n+        } catch (Exception e) {\n+          LOG.error(\"Failed to close PageStore\", e);\n+        }\n+      }\n       metaStore.reset();\n       evictor.reset();\n       pageStore = PageStore.create(options, true);\n"}}, {"oid": "dcc06eaa1e16316a18065b8402704f1c9ab766d9", "url": "https://github.com/Alluxio/alluxio/commit/dcc06eaa1e16316a18065b8402704f1c9ab766d9", "message": "Address comments", "committedDate": "2020-02-27T22:42:11Z", "type": "commit"}]}