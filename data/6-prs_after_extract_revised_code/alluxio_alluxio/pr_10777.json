{"pr_number": 10777, "pr_title": "Stop Alluxio processes properly", "pr_createdAt": "2020-01-22T00:44:36Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10777", "timeline": [{"oid": "6e16554dd8acb6fb6f40fd287efcfbe85a641014", "url": "https://github.com/Alluxio/alluxio/commit/6e16554dd8acb6fb6f40fd287efcfbe85a641014", "message": "Stop Alluxio processes properly", "committedDate": "2020-01-22T00:42:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyMjIyNA==", "url": "https://github.com/Alluxio/alluxio/pull/10777#discussion_r369622224", "bodyText": "is the thread rename intentional?", "author": "gpang", "createdAt": "2020-01-22T15:19:02Z", "path": "job/server/src/main/java/alluxio/worker/JobWorker.java", "diffHunk": "@@ -69,8 +68,7 @@\n    * @param ufsManager the ufs manager\n    */\n   JobWorker(FileSystem filesystem, FileSystemContext fsContext, UfsManager ufsManager) {\n-    super(\n-        Executors.newFixedThreadPool(1, ThreadFactoryUtils.build(\"job-worker-heartbeat-%d\", true)));\n+    super(ExecutorServiceFactories.fixedThreadPool(\"job-worker-executor\", 1));", "originalCommit": "6e16554dd8acb6fb6f40fd287efcfbe85a641014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgzNzA3OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10777#discussion_r369837079", "bodyText": "Yes it's actually an worker executor thread. Various heartbeats are running on them.", "author": "ggezer", "createdAt": "2020-01-22T22:21:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyMjIyNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyNDg5Mg==", "url": "https://github.com/Alluxio/alluxio/pull/10777#discussion_r369624892", "bodyText": "is this the heartbeat thread or something else?", "author": "gpang", "createdAt": "2020-01-22T15:23:18Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "diffHunk": "@@ -147,8 +143,7 @@\n   DefaultBlockWorker(BlockMasterClientPool blockMasterClientPool,\n       FileSystemMasterClient fileSystemMasterClient, Sessions sessions, BlockStore blockStore,\n       UfsManager ufsManager) {\n-    super(Executors\n-        .newFixedThreadPool(4, ThreadFactoryUtils.build(\"block-worker-heartbeat-%d\", true)));\n+    super(ExecutorServiceFactories.fixedThreadPool(\"block-worker-executor\", 4));", "originalCommit": "6e16554dd8acb6fb6f40fd287efcfbe85a641014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgzNzQyMA==", "url": "https://github.com/Alluxio/alluxio/pull/10777#discussion_r369837420", "bodyText": "This is worker executor thread-pool. Various heartbeats are running on them.", "author": "ggezer", "createdAt": "2020-01-22T22:22:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyNDg5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "d2175056994f1e2da96c3f2057cec10c883204c2", "chunk": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java b/core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java\nindex 2e882b01c5..fcdd647e69 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java\n\n@@ -143,7 +149,7 @@ public final class DefaultBlockWorker extends AbstractWorker implements BlockWor\n   DefaultBlockWorker(BlockMasterClientPool blockMasterClientPool,\n       FileSystemMasterClient fileSystemMasterClient, Sessions sessions, BlockStore blockStore,\n       UfsManager ufsManager) {\n-    super(ExecutorServiceFactories.fixedThreadPool(\"block-worker-executor\", 4));\n+    super(ExecutorServiceFactories.fixedThreadPool(\"block-worker-executor\", 5));\n     mBlockMasterClientPool = blockMasterClientPool;\n     mBlockMasterClient = mBlockMasterClientPool.acquire();\n     mFileSystemMasterClient = fileSystemMasterClient;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM1NTUwMw==", "url": "https://github.com/Alluxio/alluxio/pull/10777#discussion_r371355503", "bodyText": "is this supposed to be in the if statement too?", "author": "gpang", "createdAt": "2020-01-27T16:47:10Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/AsyncBlockRemover.java", "diffHunk": "@@ -103,9 +106,12 @@ public void run() {\n           mBlockWorker.removeBlock(Sessions.MASTER_COMMAND_SESSION_ID, blockToBeRemoved);\n           LOG.debug(\"Block {} is removed in thread {}.\", blockToBeRemoved, mThreadName);\n         } catch (InterruptedException e) {\n-          Thread.currentThread().interrupt();\n-          LOG.warn(\"{} got interrupted while it was cleaning block {}.\",\n-              mThreadName, blockToBeRemoved);\n+          // Only log warning if interrupted not due to a shutdown.\n+          if (!mShutdown) {\n+            Thread.currentThread().interrupt();", "originalCommit": "6e16554dd8acb6fb6f40fd287efcfbe85a641014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzODc5NA==", "url": "https://github.com/Alluxio/alluxio/pull/10777#discussion_r372038794", "bodyText": "Right. This was incorrect.", "author": "ggezer", "createdAt": "2020-01-28T20:28:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM1NTUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzODg4NA==", "url": "https://github.com/Alluxio/alluxio/pull/10777#discussion_r372038884", "bodyText": "275c3d2", "author": "ggezer", "createdAt": "2020-01-28T20:29:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM1NTUwMw=="}], "type": "inlineReview", "revised_code": {"commit": "275c3d201fb0820e3222cc7e6349f703224b5146", "chunk": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/AsyncBlockRemover.java b/core/server/worker/src/main/java/alluxio/worker/block/AsyncBlockRemover.java\nindex 1055f7603b..e7c631cf16 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/AsyncBlockRemover.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/AsyncBlockRemover.java\n\n@@ -106,12 +106,13 @@ public class AsyncBlockRemover {\n           mBlockWorker.removeBlock(Sessions.MASTER_COMMAND_SESSION_ID, blockToBeRemoved);\n           LOG.debug(\"Block {} is removed in thread {}.\", blockToBeRemoved, mThreadName);\n         } catch (InterruptedException e) {\n+          Thread.currentThread().interrupt();\n           // Only log warning if interrupted not due to a shutdown.\n           if (!mShutdown) {\n-            Thread.currentThread().interrupt();\n             LOG.warn(\"{} got interrupted while it was cleaning block {}.\", mThreadName,\n                 blockToBeRemoved);\n           }\n+          break;\n         } catch (IOException e) {\n           LOG.warn(\"IOException occurred while {} was cleaning block {}, exception is {}.\",\n               mThreadName, blockToBeRemoved, e.getMessage());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNzgwOA==", "url": "https://github.com/Alluxio/alluxio/pull/10777#discussion_r371537808", "bodyText": "Should we have a mechanism for ensuring the shutdown of resources which need to be closed/stopped(ie. Closer)?", "author": "calvinjia", "createdAt": "2020-01-27T23:21:37Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "diffHunk": "@@ -254,40 +251,35 @@ public void start(WorkerNetAddress address) throws IOException {\n    * Stops the block worker. This method should only be called to terminate the worker.\n    */\n   @Override\n-  public void stop() {\n+  public void stop() throws IOException {\n     // Steps to shutdown:\n     // 1. Gracefully shut down the runnables running in the executors.\n-    // 2. Shutdown the executors.\n-    // 3. Shutdown the clients. This needs to happen after the executors is shutdown because\n+    // 2. Shutdown the clients. This needs to happen after the executors is shutdown because\n     //    runnables running in the executors might be using the clients.\n+    // 3. Shutdown base worker. (closes executors.)", "originalCommit": "6e16554dd8acb6fb6f40fd287efcfbe85a641014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzODkyNw==", "url": "https://github.com/Alluxio/alluxio/pull/10777#discussion_r372038927", "bodyText": "41ad003", "author": "ggezer", "createdAt": "2020-01-28T20:29:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNzgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "41ad003489b98ee5d989f77a4d9bc38cb768c45c", "chunk": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java b/core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java\nindex 2e882b01c5..d4eb093ad2 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java\n\n@@ -208,43 +217,40 @@ public final class DefaultBlockWorker extends AbstractWorker implements BlockWor\n     Preconditions.checkNotNull(mAddress, \"mAddress\");\n \n     // Setup BlockMasterSync\n-    mBlockMasterSync = new BlockMasterSync(this, mWorkerId, mAddress, mBlockMasterClient);\n+    mBlockMasterSync = mResourceCloser\n+        .register(new BlockMasterSync(this, mWorkerId, mAddress, mBlockMasterClient));\n+    getExecutorService()\n+        .submit(new HeartbeatThread(HeartbeatContext.WORKER_BLOCK_SYNC, mBlockMasterSync,\n+            (int) ServerConfiguration.getMs(PropertyKey.WORKER_BLOCK_HEARTBEAT_INTERVAL_MS),\n+            ServerConfiguration.global(), ServerUserState.global()));\n \n     // Setup PinListSyncer\n-    mPinListSync = new PinListSync(this, mFileSystemMasterClient);\n+    mPinListSync = mResourceCloser.register(new PinListSync(this, mFileSystemMasterClient));\n+    getExecutorService()\n+        .submit(new HeartbeatThread(HeartbeatContext.WORKER_PIN_LIST_SYNC, mPinListSync,\n+            (int) ServerConfiguration.getMs(PropertyKey.WORKER_BLOCK_HEARTBEAT_INTERVAL_MS),\n+            ServerConfiguration.global(), ServerUserState.global()));\n \n     // Setup session cleaner\n-    mSessionCleaner = new SessionCleaner(mSessions, mBlockStore, mUnderFileSystemBlockStore);\n+    mSessionCleaner = mResourceCloser\n+        .register(new SessionCleaner(mSessions, mBlockStore, mUnderFileSystemBlockStore));\n+    getExecutorService().submit(mSessionCleaner);\n \n     // Setup space reserver\n-    mSpaceReserver = new SpaceReserver(this);\n+    mSpaceReserver = mResourceCloser.register(new SpaceReserver(this));\n     getExecutorService().submit(\n         new HeartbeatThread(HeartbeatContext.WORKER_SPACE_RESERVER, mSpaceReserver,\n             (int) ServerConfiguration.getMs(PropertyKey.WORKER_TIERED_STORE_RESERVER_INTERVAL_MS),\n             ServerConfiguration.global(), ServerUserState.global()));\n \n-    getExecutorService()\n-        .submit(new HeartbeatThread(HeartbeatContext.WORKER_BLOCK_SYNC, mBlockMasterSync,\n-            (int) ServerConfiguration.getMs(PropertyKey.WORKER_BLOCK_HEARTBEAT_INTERVAL_MS),\n-            ServerConfiguration.global(), ServerUserState.global()));\n-\n-    // Start the pinlist syncer to perform the periodical fetching\n-    getExecutorService()\n-        .submit(new HeartbeatThread(HeartbeatContext.WORKER_PIN_LIST_SYNC, mPinListSync,\n-            (int) ServerConfiguration.getMs(PropertyKey.WORKER_BLOCK_HEARTBEAT_INTERVAL_MS),\n-            ServerConfiguration.global(), ServerUserState.global()));\n-\n     // Setup storage checker\n     if (ServerConfiguration.getBoolean(PropertyKey.WORKER_STORAGE_CHECKER_ENABLED)) {\n-      mStorageChecker = new StorageChecker();\n+      mStorageChecker = mResourceCloser.register(new StorageChecker());\n       getExecutorService()\n           .submit(new HeartbeatThread(HeartbeatContext.WORKER_STORAGE_HEALTH, mStorageChecker,\n               (int) ServerConfiguration.getMs(PropertyKey.WORKER_BLOCK_HEARTBEAT_INTERVAL_MS),\n                   ServerConfiguration.global(), ServerUserState.global()));\n     }\n-\n-    // Start the session cleanup checker to perform the periodical checking\n-    getExecutorService().submit(mSessionCleaner);\n   }\n \n   /**\n"}}, {"oid": "41ad003489b98ee5d989f77a4d9bc38cb768c45c", "url": "https://github.com/Alluxio/alluxio/commit/41ad003489b98ee5d989f77a4d9bc38cb768c45c", "message": "Use closer for resource disposal", "committedDate": "2020-01-28T20:23:35Z", "type": "commit"}, {"oid": "275c3d201fb0820e3222cc7e6349f703224b5146", "url": "https://github.com/Alluxio/alluxio/commit/275c3d201fb0820e3222cc7e6349f703224b5146", "message": "Properly exit from async block remoer", "committedDate": "2020-01-28T20:28:41Z", "type": "commit"}, {"oid": "d2175056994f1e2da96c3f2057cec10c883204c2", "url": "https://github.com/Alluxio/alluxio/commit/d2175056994f1e2da96c3f2057cec10c883204c2", "message": "Increase block worker executor thread count", "committedDate": "2020-01-28T21:48:28Z", "type": "commit"}, {"oid": "d39fe982612e81f60ce1ded37915abe42efc134c", "url": "https://github.com/Alluxio/alluxio/commit/d39fe982612e81f60ce1ded37915abe42efc134c", "message": "Register clients to closer", "committedDate": "2020-01-28T23:23:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExODk1Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10777#discussion_r372118953", "bodyText": "mBlockMasterClientPool = mResourceCloser.register?", "author": "calvinjia", "createdAt": "2020-01-28T23:36:02Z", "path": "core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java", "diffHunk": "@@ -147,11 +149,11 @@\n   DefaultBlockWorker(BlockMasterClientPool blockMasterClientPool,\n       FileSystemMasterClient fileSystemMasterClient, Sessions sessions, BlockStore blockStore,\n       UfsManager ufsManager) {\n-    super(Executors\n-        .newFixedThreadPool(4, ThreadFactoryUtils.build(\"block-worker-heartbeat-%d\", true)));\n-    mBlockMasterClientPool = blockMasterClientPool;\n+    super(ExecutorServiceFactories.fixedThreadPool(\"block-worker-executor\", 5));\n+    mResourceCloser = Closer.create();\n+    mResourceCloser.register(mBlockMasterClientPool = blockMasterClientPool);", "originalCommit": "d39fe982612e81f60ce1ded37915abe42efc134c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8156e2f1285aea2ce93a39ec9ce9d71d4495106b", "chunk": "diff --git a/core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java b/core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java\nindex b60dd19085..c751a68e60 100644\n--- a/core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java\n+++ b/core/server/worker/src/main/java/alluxio/worker/block/DefaultBlockWorker.java\n\n@@ -153,7 +150,6 @@ public final class DefaultBlockWorker extends AbstractWorker implements BlockWor\n     mResourceCloser = Closer.create();\n     mResourceCloser.register(mBlockMasterClientPool = blockMasterClientPool);\n     mResourceCloser.register(mFileSystemMasterClient = fileSystemMasterClient);\n-    mBlockMasterClient = mBlockMasterClientPool.acquire();\n     mHeartbeatReporter = new BlockHeartbeatReporter();\n     mMetricsReporter = new BlockMetricsReporter();\n     mSessions = sessions;\n"}}, {"oid": "8156e2f1285aea2ce93a39ec9ce9d71d4495106b", "url": "https://github.com/Alluxio/alluxio/commit/8156e2f1285aea2ce93a39ec9ce9d71d4495106b", "message": "Avoid owning a client in block worker", "committedDate": "2020-01-28T23:50:52Z", "type": "commit"}, {"oid": "7dda2f46a8120b45fe8320aa5eaa60b255797e8e", "url": "https://github.com/Alluxio/alluxio/commit/7dda2f46a8120b45fe8320aa5eaa60b255797e8e", "message": "Fix closer registrations for client pools", "committedDate": "2020-01-28T23:52:14Z", "type": "commit"}]}