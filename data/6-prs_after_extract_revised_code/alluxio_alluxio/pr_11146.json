{"pr_number": 11146, "pr_title": "Add logging when RPC or Fuse calls too long", "pr_createdAt": "2020-03-09T06:39:01Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11146", "timeline": [{"oid": "7d3a14dafb29ed32a78fa47a64a10cb1b88392c6", "url": "https://github.com/Alluxio/alluxio/commit/7d3a14dafb29ed32a78fa47a64a10cb1b88392c6", "message": "Add logging when RPC or Fuse calls too long", "committedDate": "2020-03-09T06:38:14Z", "type": "commit"}, {"oid": "8f3ca5bea1c1d9e6df5f90501260599d9f984010", "url": "https://github.com/Alluxio/alluxio/commit/8f3ca5bea1c1d9e6df5f90501260599d9f984010", "message": "Fix tests", "committedDate": "2020-03-09T18:38:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzMDg1OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11146#discussion_r389930859", "bodyText": "Do we want to prevent double logging when log level = debug?", "author": "LuQQiu", "createdAt": "2020-03-09T20:05:20Z", "path": "core/common/src/main/java/alluxio/AbstractClient.java", "diffHunk": "@@ -363,13 +366,22 @@ public synchronized InetSocketAddress getConfAddress() throws UnavailableExcepti\n         MetricsSystem.counter(getQualifiedRetryMetricName(rpcName)).inc();\n         return null;\n       });\n-      logger.debug(\"Exit (OK): {}({}) in {} ms\",\n-          rpcName, debugDesc, System.currentTimeMillis() - startMs);\n+      long duration = System.currentTimeMillis() - startMs;\n+      logger.debug(\"Exit (OK): {}({}) in {} ms\", rpcName, debugDesc, duration);\n+      if (duration >= mRpcThreshold) {\n+        logger.warn(\"{}({}) returned {} in {} ms\",", "originalCommit": "8f3ca5bea1c1d9e6df5f90501260599d9f984010", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5NDMxOA==", "url": "https://github.com/Alluxio/alluxio/pull/11146#discussion_r390094318", "bodyText": "this way it is easier to grep the info. I'm less concerned about the information redundancy for now", "author": "apc999", "createdAt": "2020-03-10T04:51:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzMDg1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6f2892afa141bf5aba50bc3ad360937f454b1b8b", "chunk": "diff --git a/core/common/src/main/java/alluxio/AbstractClient.java b/core/common/src/main/java/alluxio/AbstractClient.java\nindex 8bc999346f..b306673040 100644\n--- a/core/common/src/main/java/alluxio/AbstractClient.java\n+++ b/core/common/src/main/java/alluxio/AbstractClient.java\n\n@@ -369,8 +369,8 @@ public abstract class AbstractClient implements Client {\n       long duration = System.currentTimeMillis() - startMs;\n       logger.debug(\"Exit (OK): {}({}) in {} ms\", rpcName, debugDesc, duration);\n       if (duration >= mRpcThreshold) {\n-        logger.warn(\"{}({}) returned {} in {} ms\",\n-            rpcName, String.format(description, args), ret, duration);\n+        logger.warn(\"{}({}) returned {} in {} ms (>={} ms)\",\n+            rpcName, String.format(description, args), ret, duration, mRpcThreshold);\n       }\n       return ret;\n     } catch (Exception e) {\n"}}, {"oid": "6f2892afa141bf5aba50bc3ad360937f454b1b8b", "url": "https://github.com/Alluxio/alluxio/commit/6f2892afa141bf5aba50bc3ad360937f454b1b8b", "message": "Fix output", "committedDate": "2020-03-10T01:43:50Z", "type": "commit"}]}