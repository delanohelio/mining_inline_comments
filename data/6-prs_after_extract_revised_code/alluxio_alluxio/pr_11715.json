{"pr_number": 11715, "pr_title": "Fix potential issue caused by unhandled exception of jnifuse", "pr_createdAt": "2020-07-05T07:28:25Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11715", "timeline": [{"oid": "9e93848c98c93a29d19a5eb6e142a5fe21702447", "url": "https://github.com/Alluxio/alluxio/commit/9e93848c98c93a29d19a5eb6e142a5fe21702447", "message": "Fix potential issue caused by unhandled exception of jnifuse", "committedDate": "2020-07-05T07:00:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxODkxNA==", "url": "https://github.com/Alluxio/alluxio/pull/11715#discussion_r450418914", "bodyText": "e.printStackTrace(); prints to stdout, not appropriate for production code.\nUse LOG.error(\"Failed to open {}: \", path, e) here so the stack trace will still be printed.\nwith claiming  private static final Logger LOG = LoggerFactory.getLogger(AbstractFuseFileSystem.class); in the beginning.", "author": "apc999", "createdAt": "2020-07-06T18:55:35Z", "path": "integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java", "diffHunk": "@@ -132,27 +132,49 @@ public void umount() {\n   }\n \n   public int openCallback(String path, ByteBuffer buf) {\n-    FuseFileInfo fi = new FuseFileInfo(buf);\n-    return open(path, fi);\n+    try {\n+      return open(path, FuseFileInfo.wrap(buf));\n+    } catch (Exception e) {\n+      e.printStackTrace();", "originalCommit": "9e93848c98c93a29d19a5eb6e142a5fe21702447", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3abb8f2c79eccc15fa40875b5529f4aa6bfe9ec6", "chunk": "diff --git a/integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java b/integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java\nindex 10a97300ad..2816a0e212 100644\n--- a/integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java\n+++ b/integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java\n\n@@ -135,7 +140,7 @@ public abstract class AbstractFuseFileSystem implements FuseFileSystem {\n     try {\n       return open(path, FuseFileInfo.wrap(buf));\n     } catch (Exception e) {\n-      e.printStackTrace();\n+      LOG.error(\"Failed to open {}: \", path, e);\n       return -ErrorCodes.EIO();\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxOTI1OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11715#discussion_r450419259", "bodyText": "LOG.error(\"Failed to read {}, size {}, offset {}: \", path, size, offset, e)", "author": "apc999", "createdAt": "2020-07-06T18:56:21Z", "path": "integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java", "diffHunk": "@@ -132,27 +132,49 @@ public void umount() {\n   }\n \n   public int openCallback(String path, ByteBuffer buf) {\n-    FuseFileInfo fi = new FuseFileInfo(buf);\n-    return open(path, fi);\n+    try {\n+      return open(path, FuseFileInfo.wrap(buf));\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int readCallback(String path, ByteBuffer buf, long size, long offset, ByteBuffer fibuf) {\n-    FuseFileInfo fi = new FuseFileInfo(fibuf);\n-    return read(path, buf, size, offset, fi);\n+    try {\n+      return read(path, buf, size, offset, FuseFileInfo.wrap(fibuf));\n+    } catch (Exception e) {\n+     e.printStackTrace();", "originalCommit": "9e93848c98c93a29d19a5eb6e142a5fe21702447", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3abb8f2c79eccc15fa40875b5529f4aa6bfe9ec6", "chunk": "diff --git a/integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java b/integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java\nindex 10a97300ad..2816a0e212 100644\n--- a/integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java\n+++ b/integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java\n\n@@ -135,7 +140,7 @@ public abstract class AbstractFuseFileSystem implements FuseFileSystem {\n     try {\n       return open(path, FuseFileInfo.wrap(buf));\n     } catch (Exception e) {\n-      e.printStackTrace();\n+      LOG.error(\"Failed to open {}: \", path, e);\n       return -ErrorCodes.EIO();\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxOTQ0OA==", "url": "https://github.com/Alluxio/alluxio/pull/11715#discussion_r450419448", "bodyText": "LOG.error(\"Failed to getattr {}: \", path, e)", "author": "apc999", "createdAt": "2020-07-06T18:56:41Z", "path": "integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java", "diffHunk": "@@ -132,27 +132,49 @@ public void umount() {\n   }\n \n   public int openCallback(String path, ByteBuffer buf) {\n-    FuseFileInfo fi = new FuseFileInfo(buf);\n-    return open(path, fi);\n+    try {\n+      return open(path, FuseFileInfo.wrap(buf));\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int readCallback(String path, ByteBuffer buf, long size, long offset, ByteBuffer fibuf) {\n-    FuseFileInfo fi = new FuseFileInfo(fibuf);\n-    return read(path, buf, size, offset, fi);\n+    try {\n+      return read(path, buf, size, offset, FuseFileInfo.wrap(fibuf));\n+    } catch (Exception e) {\n+     e.printStackTrace();\n+     return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int getattrCallback(String path, ByteBuffer buf) {\n-    FileStat stat = new FileStat(buf);\n-    return getattr(path, stat);\n+    try {\n+      return getattr(path, FileStat.wrap(buf));\n+    } catch (Exception e) {\n+      e.printStackTrace();", "originalCommit": "9e93848c98c93a29d19a5eb6e142a5fe21702447", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3abb8f2c79eccc15fa40875b5529f4aa6bfe9ec6", "chunk": "diff --git a/integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java b/integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java\nindex 10a97300ad..2816a0e212 100644\n--- a/integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java\n+++ b/integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java\n\n@@ -135,7 +140,7 @@ public abstract class AbstractFuseFileSystem implements FuseFileSystem {\n     try {\n       return open(path, FuseFileInfo.wrap(buf));\n     } catch (Exception e) {\n-      e.printStackTrace();\n+      LOG.error(\"Failed to open {}: \", path, e);\n       return -ErrorCodes.EIO();\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxOTc2Mw==", "url": "https://github.com/Alluxio/alluxio/pull/11715#discussion_r450419763", "bodyText": "LOG.error(\"Failed to readdir {}, offset {}: \", path, offset, e)", "author": "apc999", "createdAt": "2020-07-06T18:57:17Z", "path": "integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java", "diffHunk": "@@ -132,27 +132,49 @@ public void umount() {\n   }\n \n   public int openCallback(String path, ByteBuffer buf) {\n-    FuseFileInfo fi = new FuseFileInfo(buf);\n-    return open(path, fi);\n+    try {\n+      return open(path, FuseFileInfo.wrap(buf));\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int readCallback(String path, ByteBuffer buf, long size, long offset, ByteBuffer fibuf) {\n-    FuseFileInfo fi = new FuseFileInfo(fibuf);\n-    return read(path, buf, size, offset, fi);\n+    try {\n+      return read(path, buf, size, offset, FuseFileInfo.wrap(fibuf));\n+    } catch (Exception e) {\n+     e.printStackTrace();\n+     return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int getattrCallback(String path, ByteBuffer buf) {\n-    FileStat stat = new FileStat(buf);\n-    return getattr(path, stat);\n+    try {\n+      return getattr(path, FileStat.wrap(buf));\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int readdirCallback(String path, long bufaddr, FuseFillDir filter, long offset,\n       ByteBuffer fi) {\n-    return readdir(path, bufaddr, filter, offset, new FuseFileInfo(fi));\n+    try {\n+      return readdir(path, bufaddr, filter, offset, new FuseFileInfo(fi));", "originalCommit": "9e93848c98c93a29d19a5eb6e142a5fe21702447", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3abb8f2c79eccc15fa40875b5529f4aa6bfe9ec6", "chunk": "diff --git a/integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java b/integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java\nindex 10a97300ad..2816a0e212 100644\n--- a/integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java\n+++ b/integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java\n\n@@ -135,7 +140,7 @@ public abstract class AbstractFuseFileSystem implements FuseFileSystem {\n     try {\n       return open(path, FuseFileInfo.wrap(buf));\n     } catch (Exception e) {\n-      e.printStackTrace();\n+      LOG.error(\"Failed to open {}: \", path, e);\n       return -ErrorCodes.EIO();\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMDA2Mg==", "url": "https://github.com/Alluxio/alluxio/pull/11715#discussion_r450420062", "bodyText": "LOG.error(\"Failed to unlink {}: \", path, e)", "author": "apc999", "createdAt": "2020-07-06T18:57:51Z", "path": "integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java", "diffHunk": "@@ -132,27 +132,49 @@ public void umount() {\n   }\n \n   public int openCallback(String path, ByteBuffer buf) {\n-    FuseFileInfo fi = new FuseFileInfo(buf);\n-    return open(path, fi);\n+    try {\n+      return open(path, FuseFileInfo.wrap(buf));\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int readCallback(String path, ByteBuffer buf, long size, long offset, ByteBuffer fibuf) {\n-    FuseFileInfo fi = new FuseFileInfo(fibuf);\n-    return read(path, buf, size, offset, fi);\n+    try {\n+      return read(path, buf, size, offset, FuseFileInfo.wrap(fibuf));\n+    } catch (Exception e) {\n+     e.printStackTrace();\n+     return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int getattrCallback(String path, ByteBuffer buf) {\n-    FileStat stat = new FileStat(buf);\n-    return getattr(path, stat);\n+    try {\n+      return getattr(path, FileStat.wrap(buf));\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int readdirCallback(String path, long bufaddr, FuseFillDir filter, long offset,\n       ByteBuffer fi) {\n-    return readdir(path, bufaddr, filter, offset, new FuseFileInfo(fi));\n+    try {\n+      return readdir(path, bufaddr, filter, offset, new FuseFileInfo(fi));\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      return -ErrorCodes.EIO();\n+    }\n   }\n \n   public int unlinkCallback(String path) {\n-    return unlink(path);\n+    try {\n+      return unlink(path);\n+    } catch (Exception e) {\n+      e.printStackTrace();", "originalCommit": "9e93848c98c93a29d19a5eb6e142a5fe21702447", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMDcwNQ==", "url": "https://github.com/Alluxio/alluxio/pull/11715#discussion_r450420705", "bodyText": "please also add similar try-catch to other callbacks, including flushCallback, releaseCallback and etc even we didn't implement them yet.", "author": "apc999", "createdAt": "2020-07-06T18:59:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMDA2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3abb8f2c79eccc15fa40875b5529f4aa6bfe9ec6", "chunk": "diff --git a/integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java b/integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java\nindex 10a97300ad..2816a0e212 100644\n--- a/integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java\n+++ b/integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java\n\n@@ -135,7 +140,7 @@ public abstract class AbstractFuseFileSystem implements FuseFileSystem {\n     try {\n       return open(path, FuseFileInfo.wrap(buf));\n     } catch (Exception e) {\n-      e.printStackTrace();\n+      LOG.error(\"Failed to open {}: \", path, e);\n       return -ErrorCodes.EIO();\n     }\n   }\n"}}, {"oid": "3abb8f2c79eccc15fa40875b5529f4aa6bfe9ec6", "url": "https://github.com/Alluxio/alluxio/commit/3abb8f2c79eccc15fa40875b5529f4aa6bfe9ec6", "message": "Fix logging of AbstractFuseFileSystem", "committedDate": "2020-07-08T14:01:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY2OTQyNA==", "url": "https://github.com/Alluxio/alluxio/pull/11715#discussion_r451669424", "bodyText": "Something to be careful of is that if you want to log the exception with LOG.error(..., e), it doesn't work with the {} substitution ability. So, that means all of the log lines with exception as the last parameter should look something like:\nLOG.error(String.format(\"... %s\", path), e)\n\nThis way, the log message has all the parameters, and the exception and stack is printed.", "author": "gpang", "createdAt": "2020-07-08T16:22:29Z", "path": "integration/fuse/src/main/java/alluxio/jnifuse/AbstractFuseFileSystem.java", "diffHunk": "@@ -132,70 +137,147 @@ public void umount() {\n   }\n \n   public int openCallback(String path, ByteBuffer buf) {\n-    FuseFileInfo fi = new FuseFileInfo(buf);\n-    return open(path, fi);\n+    try {\n+      return open(path, FuseFileInfo.wrap(buf));\n+    } catch (Exception e) {\n+      LOG.error(\"Failed to open {}: \", path, e);", "originalCommit": "3abb8f2c79eccc15fa40875b5529f4aa6bfe9ec6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0NTI4Nw==", "url": "https://github.com/Alluxio/alluxio/pull/11715#discussion_r452645287", "bodyText": "@gpang it is actually unnecessary to use String.format in log4j,\nas long as you pass a Throwable as the last arg and the full log of exception will be printed .\nWe've been leveraging this undocumented feature for a long time in this codebase. Also check it out at https://stackoverflow.com/a/51781806/3161750", "author": "apc999", "createdAt": "2020-07-10T06:24:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY2OTQyNA=="}], "type": "inlineReview", "revised_code": null}]}