{"pr_number": 11674, "pr_title": "Refactor FSM RPC cancellation support", "pr_createdAt": "2020-06-26T23:40:24Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11674", "timeline": [{"oid": "29037e8f1c850d0a8c8d2fa370b1de2685c71a18", "url": "https://github.com/Alluxio/alluxio/commit/29037e8f1c850d0a8c8d2fa370b1de2685c71a18", "message": "Refactor FSM RPC cancellation support", "committedDate": "2020-06-26T23:37:08Z", "type": "commit"}, {"oid": "247fc2f2e6dda6029a80d4dd9bb82bf4eeecc582", "url": "https://github.com/Alluxio/alluxio/commit/247fc2f2e6dda6029a80d4dd9bb82bf4eeecc582", "message": "Track original calls during sync session", "committedDate": "2020-06-26T23:37:32Z", "type": "commit"}, {"oid": "44a170431ad4e66fba553c6ca682056f7811c997", "url": "https://github.com/Alluxio/alluxio/commit/44a170431ad4e66fba553c6ca682056f7811c997", "message": "Add transport tracker for createFile/createDirectory RPCs", "committedDate": "2020-06-26T23:43:11Z", "type": "commit"}, {"oid": "3b8ef106eb6e3ca6731e904041598695535659a5", "url": "https://github.com/Alluxio/alluxio/commit/3b8ef106eb6e3ca6731e904041598695535659a5", "message": "fix build", "committedDate": "2020-06-27T03:49:45Z", "type": "commit"}, {"oid": "20cc3348ec88f2237cf9606d9e3792f031e1b4b0", "url": "https://github.com/Alluxio/alluxio/commit/20cc3348ec88f2237cf9606d9e3792f031e1b4b0", "message": "fix test", "committedDate": "2020-06-27T05:10:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1MzgwNQ==", "url": "https://github.com/Alluxio/alluxio/pull/11674#discussion_r446453805", "bodyText": "I don't think this needs to be here.\nThe check in the main sync() method should be enough", "author": "ZacBlanco", "createdAt": "2020-06-26T23:46:26Z", "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -632,6 +638,7 @@ private void loadMetadataForPath(LockedInodePath inodePath)\n   private void loadMetadata(LockedInodePath inodePath, LoadMetadataContext context)\n       throws AccessControlException, BlockInfoException, FileAlreadyCompletedException,\n       FileDoesNotExistException, InvalidFileSizeException, InvalidPathException, IOException {\n+    mRpcContext.throwIfCancelled();", "originalCommit": "44a170431ad4e66fba553c6ca682056f7811c997", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5NTU5OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11674#discussion_r446595599", "bodyText": "Wouldn't this ever take a long time to execute?", "author": "ggezer", "createdAt": "2020-06-28T03:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1MzgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc0MDY2Mg==", "url": "https://github.com/Alluxio/alluxio/pull/11674#discussion_r446740662", "bodyText": "loadMetadata only ever executes for a single inode. I think in absolute terms it is not a long amount of time, but relative to other RPCs it could be seen as having a higher cost. I just don't think it's necessary to interrupt the loading process once it has started since it's only for one inode", "author": "ZacBlanco", "createdAt": "2020-06-29T02:31:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1MzgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NDA4Ng==", "url": "https://github.com/Alluxio/alluxio/pull/11674#discussion_r447984086", "bodyText": "Still don't think this is necessary", "author": "ZacBlanco", "createdAt": "2020-06-30T21:16:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1MzgwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9e705645a3467925735fc89140240fb54feaa932", "chunk": "diff --git a/core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java b/core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java\nindex e079909393..110adfd044 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java\n\n@@ -638,7 +637,6 @@ public class InodeSyncStream {\n   private void loadMetadata(LockedInodePath inodePath, LoadMetadataContext context)\n       throws AccessControlException, BlockInfoException, FileAlreadyCompletedException,\n       FileDoesNotExistException, InvalidFileSizeException, InvalidPathException, IOException {\n-    mRpcContext.throwIfCancelled();\n     AlluxioURI path = inodePath.getUri();\n     MountTable.Resolution resolution = mMountTable.resolve(path);\n     AlluxioURI ufsUri = resolution.getUri();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5MzQ1Ng==", "url": "https://github.com/Alluxio/alluxio/pull/11674#discussion_r446493456", "bodyText": "I can't comment on this part. @gpang you probably have more context?", "author": "ZacBlanco", "createdAt": "2020-06-27T06:46:02Z", "path": "core/server/master/src/main/java/alluxio/master/file/DefaultFileSystemMaster.java", "diffHunk": "@@ -440,7 +441,17 @@ public DefaultFileSystemMaster(BlockMaster blockMaster, CoreMasterContext master\n         ? ServerConfiguration.getList(PropertyKey.MASTER_PERSISTENCE_BLACKLIST, \",\")\n         : Collections.emptyList();\n \n-    mStateLockCallTracker = () -> masterContext.getStateLockManager().interruptCycleTicking();\n+    mStateLockCallTracker = new CallTracker() {\n+      @Override\n+      public boolean isCancelled() {\n+        return masterContext.getStateLockManager().interruptCycleTicking();\n+      }\n+\n+      @Override\n+      public Type getType() {\n+        return Type.STATE_LOCK_TRACKER;\n+      }\n+    };", "originalCommit": "20cc3348ec88f2237cf9606d9e3792f031e1b4b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5Mzk4MA==", "url": "https://github.com/Alluxio/alluxio/pull/11674#discussion_r446493980", "bodyText": "this line break isn't necessary?", "author": "ZacBlanco", "createdAt": "2020-06-27T06:52:44Z", "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -204,7 +204,8 @@\n    * @param loadOnly whether to only load new metadata, rather than update existing metadata\n    */\n   public InodeSyncStream(LockingScheme rootPath, DefaultFileSystemMaster fsMaster,\n-      RpcContext rpcContext, DescendantType descendantType, FileSystemMasterCommonPOptions options,\n+      RpcContext rpcContext, DescendantType descendantType,\n+      FileSystemMasterCommonPOptions options,", "originalCommit": "20cc3348ec88f2237cf9606d9e3792f031e1b4b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f9eb65e2384635679b0b9edfbbef5bc3cd772a2", "chunk": "diff --git a/core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java b/core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java\nindex e079909393..c052aaa870 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java\n\n@@ -204,8 +204,7 @@ public class InodeSyncStream {\n    * @param loadOnly whether to only load new metadata, rather than update existing metadata\n    */\n   public InodeSyncStream(LockingScheme rootPath, DefaultFileSystemMaster fsMaster,\n-      RpcContext rpcContext, DescendantType descendantType,\n-      FileSystemMasterCommonPOptions options,\n+      RpcContext rpcContext, DescendantType descendantType, FileSystemMasterCommonPOptions options,\n       @Nullable FileSystemMasterAuditContext auditContext,\n       @Nullable Function<LockedInodePath, Inode> auditContextSrcInodeFunc,\n       @Nullable DefaultFileSystemMaster.PermissionCheckFunction permissionCheckOperation,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5Mzk5OA==", "url": "https://github.com/Alluxio/alluxio/pull/11674#discussion_r446493998", "bodyText": "I don't think anything changed here?", "author": "ZacBlanco", "createdAt": "2020-06-27T06:52:54Z", "path": "core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java", "diffHunk": "@@ -246,8 +247,8 @@ public InodeSyncStream(LockingScheme rootPath, DefaultFileSystemMaster fsMaster,\n   public InodeSyncStream(LockingScheme rootScheme, DefaultFileSystemMaster fsMaster,\n       RpcContext rpcContext, DescendantType descendantType, FileSystemMasterCommonPOptions options,\n       boolean isGetFileInfo, boolean forceSync, boolean loadOnly) {\n-    this(rootScheme, fsMaster, rpcContext, descendantType, options, null, null, null,\n-        isGetFileInfo, forceSync, loadOnly);\n+    this(rootScheme, fsMaster, rpcContext, descendantType, options, null, null, null, isGetFileInfo,\n+        forceSync, loadOnly);", "originalCommit": "20cc3348ec88f2237cf9606d9e3792f031e1b4b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f9eb65e2384635679b0b9edfbbef5bc3cd772a2", "chunk": "diff --git a/core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java b/core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java\nindex e079909393..c052aaa870 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/InodeSyncStream.java\n\n@@ -247,8 +246,8 @@ public class InodeSyncStream {\n   public InodeSyncStream(LockingScheme rootScheme, DefaultFileSystemMaster fsMaster,\n       RpcContext rpcContext, DescendantType descendantType, FileSystemMasterCommonPOptions options,\n       boolean isGetFileInfo, boolean forceSync, boolean loadOnly) {\n-    this(rootScheme, fsMaster, rpcContext, descendantType, options, null, null, null, isGetFileInfo,\n-        forceSync, loadOnly);\n+    this(rootScheme, fsMaster, rpcContext, descendantType, options, null, null, null,\n+        isGetFileInfo, forceSync, loadOnly);\n   }\n   /**\n    * Sync the metadata according the the root path the stream was created with.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5NDYyMg==", "url": "https://github.com/Alluxio/alluxio/pull/11674#discussion_r446494622", "bodyText": "if withTracker returns the generic type of the OperationContext (C in your implementation), then is it necessary to include the cast to CreateDirectoryContext? It just doesn't seem clean.\nedit - I looked into it and figured out the issue. Poor use of generics. Change the class definition of CreatePathContext to remove the need to cast\nold:\npublic abstract class CreatePathContext<T extends GeneratedMessageV3.Builder<?>, K>\n    extends OperationContext<T, CreatePathContext> {\nnew:\npublic abstract class CreatePathContext<T extends GeneratedMessageV3.Builder<?>,\n    K extends OperationContext> extends OperationContext<T, K> {", "author": "ZacBlanco", "createdAt": "2020-06-27T07:00:13Z", "path": "core/server/master/src/main/java/alluxio/master/file/FileSystemMasterClientServiceHandler.java", "diffHunk": "@@ -148,8 +148,8 @@ public void createDirectory(CreateDirectoryPRequest request,\n     CreateDirectoryPOptions options = request.getOptions();\n     RpcUtils.call(LOG, () -> {\n       AlluxioURI pathUri = getAlluxioURI(request.getPath());\n-      mFileSystemMaster.createDirectory(pathUri,\n-          CreateDirectoryContext.create(options.toBuilder()));\n+      mFileSystemMaster.createDirectory(pathUri, (CreateDirectoryContext) CreateDirectoryContext\n+          .create(options.toBuilder()).withTracker(new GrpcCallTracker(responseObserver)));", "originalCommit": "20cc3348ec88f2237cf9606d9e3792f031e1b4b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "edccea3cb3e1672e15e5531516eeaa048e411e1c", "chunk": "diff --git a/core/server/master/src/main/java/alluxio/master/file/FileSystemMasterClientServiceHandler.java b/core/server/master/src/main/java/alluxio/master/file/FileSystemMasterClientServiceHandler.java\nindex be2754f77b..87e61343fe 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/FileSystemMasterClientServiceHandler.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/FileSystemMasterClientServiceHandler.java\n\n@@ -148,8 +148,8 @@ public final class FileSystemMasterClientServiceHandler\n     CreateDirectoryPOptions options = request.getOptions();\n     RpcUtils.call(LOG, () -> {\n       AlluxioURI pathUri = getAlluxioURI(request.getPath());\n-      mFileSystemMaster.createDirectory(pathUri, (CreateDirectoryContext) CreateDirectoryContext\n-          .create(options.toBuilder()).withTracker(new GrpcCallTracker(responseObserver)));\n+      mFileSystemMaster.createDirectory(pathUri, CreateDirectoryContext.create(options.toBuilder())\n+          .withTracker(new GrpcCallTracker(responseObserver)));\n       return CreateDirectoryPResponse.newBuilder().build();\n     }, \"CreateDirectory\", \"request=%s\", responseObserver, request);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5NDY5Ng==", "url": "https://github.com/Alluxio/alluxio/pull/11674#discussion_r446494696", "bodyText": "See other comment.\nChange to the CreatePathContext class def removed the need for the extra cast", "author": "ZacBlanco", "createdAt": "2020-06-27T07:01:15Z", "path": "core/server/master/src/main/java/alluxio/master/file/FileSystemMasterClientServiceHandler.java", "diffHunk": "@@ -159,8 +159,10 @@ public void createFile(CreateFilePRequest request,\n       StreamObserver<CreateFilePResponse> responseObserver) {\n     RpcUtils.call(LOG, () -> {\n       AlluxioURI pathUri = getAlluxioURI(request.getPath());\n-      return CreateFilePResponse.newBuilder().setFileInfo(GrpcUtils.toProto(mFileSystemMaster\n-          .createFile(pathUri, CreateFileContext.create(request.getOptions().toBuilder()))))\n+      return CreateFilePResponse.newBuilder()\n+          .setFileInfo(GrpcUtils.toProto(mFileSystemMaster.createFile(pathUri,\n+              (CreateFileContext) CreateFileContext.create(request.getOptions().toBuilder())", "originalCommit": "20cc3348ec88f2237cf9606d9e3792f031e1b4b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "edccea3cb3e1672e15e5531516eeaa048e411e1c", "chunk": "diff --git a/core/server/master/src/main/java/alluxio/master/file/FileSystemMasterClientServiceHandler.java b/core/server/master/src/main/java/alluxio/master/file/FileSystemMasterClientServiceHandler.java\nindex be2754f77b..87e61343fe 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/FileSystemMasterClientServiceHandler.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/FileSystemMasterClientServiceHandler.java\n\n@@ -161,7 +161,7 @@ public final class FileSystemMasterClientServiceHandler\n       AlluxioURI pathUri = getAlluxioURI(request.getPath());\n       return CreateFilePResponse.newBuilder()\n           .setFileInfo(GrpcUtils.toProto(mFileSystemMaster.createFile(pathUri,\n-              (CreateFileContext) CreateFileContext.create(request.getOptions().toBuilder())\n+              CreateFileContext.create(request.getOptions().toBuilder())\n                   .withTracker(new GrpcCallTracker(responseObserver)))))\n           .build();\n     }, \"CreateFile\", \"request=%s\", responseObserver, request);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5NDgxMw==", "url": "https://github.com/Alluxio/alluxio/pull/11674#discussion_r446494813", "bodyText": "The list of call trackers should always be small, correct? 1 most of the time?\nAre there any cases when we could have more than that?", "author": "ZacBlanco", "createdAt": "2020-06-27T07:03:04Z", "path": "core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java", "diffHunk": "@@ -11,54 +11,89 @@\n \n package alluxio.master.file.contexts;\n \n+import com.google.protobuf.GeneratedMessageV3;\n+\n import javax.annotation.concurrent.NotThreadSafe;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n \n /**\n  * Used as a base class for wrapping context around proto messages.\n  *\n  * @param <T> Proto message type\n+ * @param <C> extended type\n  */\n @NotThreadSafe\n-public class OperationContext<T extends com.google.protobuf.GeneratedMessageV3.Builder<?>> {\n+public class OperationContext<T extends GeneratedMessageV3.Builder, C extends OperationContext> {\n   // Proto message that is being wrapped\n   private T mOptionsBuilder;\n   // Used to track client call status.\n-  private CallTracker mCallTracker;\n+  private List<CallTracker> mCallTrackers;\n \n   /**\n    * Creates an instance with given proto message.\n    *\n    * @param optionsBuilder Internal proto message builder instance\n    */\n   public OperationContext(T optionsBuilder) {\n-    this(optionsBuilder, null);\n     mOptionsBuilder = optionsBuilder;\n-    mCallTracker = CallTracker.NOOP_TRACKER;\n+    mCallTrackers = new LinkedList<>();\n   }\n \n   /**\n-   * Creates an instance with given proto message.\n+   * @return underlying proto message instance\n+   */\n+  public T getOptions() {\n+    return mOptionsBuilder;\n+  }\n+\n+  /**\n+   * Used to transfer trackers of a context to this instance.\n+   * This is required when creating internal contexts.\n    *\n-   * @param optionsBuilder Internal proto message builder instance\n-   * @param callTracker client call tracker, or {@code null} if no tracking is desired\n+   * @param context the source context\n+   * @return the updated instance\n    */\n-  public OperationContext(T optionsBuilder, CallTracker callTracker) {\n-    mOptionsBuilder = optionsBuilder;\n-    mCallTracker = callTracker;\n+  public C withTracker(OperationContext context) {\n+    mCallTrackers = context.mCallTrackers;\n+    return (C) this;\n   }\n \n   /**\n-   * @return underlying proto message instance\n+   * Updates this context with a new tracker.\n+   *\n+   * @param tracker the new call tracker\n+   * @return the updated instance\n    */\n-  public T getOptions() {\n-    return mOptionsBuilder;\n+  public C withTracker(CallTracker tracker) {\n+    mCallTrackers.add(tracker);\n+    return (C) this;\n   }\n \n   /**\n-   * TODO(ggezer): Make the call-tracker infra note the source of cancellation.\n-   * @return {@code true} if the call is cancelled by the client\n+   * @return the list of trackers that have cancelled this operation\n    */\n-  public boolean isCancelled() {\n-    return mCallTracker.isCancelled();\n+  public List<CallTracker> getCancelledTrackers() {\n+    boolean trackerCancelled = false;\n+    for (CallTracker tracker : mCallTrackers) {\n+      if (tracker.isCancelled()) {\n+        trackerCancelled = true;\n+        break;\n+      }\n+    }\n+\n+    if (!trackerCancelled) {\n+      return Collections.emptyList();\n+    }\n+\n+    List<CallTracker> cancelledTrackers = new LinkedList<>();\n+    for (CallTracker tracker : mCallTrackers) {\n+      if (tracker.isCancelled()) {\n+        cancelledTrackers.add(tracker);\n+      }\n+    }\n+\n+    return cancelledTrackers;", "originalCommit": "20cc3348ec88f2237cf9606d9e3792f031e1b4b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5NTQwNQ==", "url": "https://github.com/Alluxio/alluxio/pull/11674#discussion_r446595405", "bodyText": "Every context has a state-lock tracker. Some has an additional transport level tracker (GrpcCallTracker).\nEven for those, it's very unlikely to have more than 1 canceller. However, it's possible so I give out the list here. (We might also wanna add more trackers in the future...)", "author": "ggezer", "createdAt": "2020-06-28T03:36:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5NDgxMw=="}], "type": "inlineReview", "revised_code": {"commit": "08bab3efaec06703a8b1b6f20d0110dd5617f3a5", "chunk": "diff --git a/core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java b/core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java\nindex 7c9d177f56..6bb6f1e241 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java\n\n@@ -48,18 +48,6 @@ public class OperationContext<T extends GeneratedMessageV3.Builder, C extends Op\n     return mOptionsBuilder;\n   }\n \n-  /**\n-   * Used to transfer trackers of a context to this instance.\n-   * This is required when creating internal contexts.\n-   *\n-   * @param context the source context\n-   * @return the updated instance\n-   */\n-  public C withTracker(OperationContext context) {\n-    mCallTrackers = context.mCallTrackers;\n-    return (C) this;\n-  }\n-\n   /**\n    * Updates this context with a new tracker.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5NDg3OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11674#discussion_r446494879", "bodyText": "Would like to see some test coverage on throwing for cancelled trackers.", "author": "ZacBlanco", "createdAt": "2020-06-27T07:03:56Z", "path": "core/server/master/src/test/java/alluxio/master/file/RpcContextTest.java", "diffHunk": "@@ -34,11 +35,12 @@\n public final class RpcContextTest {\n   private BlockDeletionContext mMockBDC = mock(BlockDeletionContext.class);\n   private JournalContext mMockJC = mock(JournalContext.class);\n+  private OperationContext mMockOC = mock(OperationContext.class);\n   private RpcContext mRpcContext;\n \n   @Before\n   public void before() {\n-    mRpcContext = new RpcContext(mMockBDC, mMockJC);\n+    mRpcContext = new RpcContext(mMockBDC, mMockJC, mMockOC);\n   }", "originalCommit": "20cc3348ec88f2237cf9606d9e3792f031e1b4b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5NTU0Nw==", "url": "https://github.com/Alluxio/alluxio/pull/11674#discussion_r446595547", "bodyText": "I can't see a clear way to test cancellation while the rpc is in progress, aka the loop break logic. I'll try adding some validation for the rest.", "author": "ggezer", "createdAt": "2020-06-28T03:39:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5NDg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2NTIxOA==", "url": "https://github.com/Alluxio/alluxio/pull/11674#discussion_r447265218", "bodyText": "I think what I would do is use Mockito's Spy class and wrap in conjunction with some locks to allow for the control of entering/exiting methods. See the UfsStatusCacheTest for an example. I'll paste some code from one of the tests inline here so you can see what I mean.\ncreateUfsDirs(\"dir0/dir1\");\n    ExecutorService executor =\n        new ThreadPoolExecutor(1, 1, 1, TimeUnit.MINUTES, new SynchronousQueue<>());\n    mCache = new UfsStatusCache(executor);\n    mCache = Mockito.spy(mCache);\n    Lock l = new ReentrantLock();\n    l.lock();\n    doAnswer((invocation) -> {\n      try {\n        l.lock();\n        return invocation.callRealMethod();\n      } finally {\n        l.unlock();\n      }\n    }).when(mCache).getChildrenIfAbsent(any(AlluxioURI.class), any(MountTable.class));\n    assertNotNull(mCache.prefetchChildren(new AlluxioURI(\"/dir0\"), mMountTable));\n    assertNull(mCache.prefetchChildren(new AlluxioURI(\"/dir0\"), mMountTable)); // rejected\n    assertNull(mCache.prefetchChildren(new AlluxioURI(\"/dir0\"), mMountTable)); // rejected\n    assertNull(mCache.prefetchChildren(new AlluxioURI(\"/dir0\"), mMountTable)); // rejected\n    assertNull(mCache.prefetchChildren(new AlluxioURI(\"/dir0\"), mMountTable)); // rejected\n    l.unlock();\n    Collection<UfsStatus> statuses =\n        mCache.fetchChildrenIfAbsent(new AlluxioURI(\"/dir0\"), mMountTable, false);\n    assertEquals(1, statuses.size());\n    statuses.forEach(s -> assertEquals(\"dir1\", s.getName()));\nYou can also use the spys to verify that a method was/was not called (throwIfCancelled?)", "author": "ZacBlanco", "createdAt": "2020-06-29T21:29:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5NDg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNjQyMA==", "url": "https://github.com/Alluxio/alluxio/pull/11674#discussion_r450506420", "bodyText": "I went for a simpler UT and think going beyond that will require an integration test with mocking which is not feasible.", "author": "ggezer", "createdAt": "2020-07-06T22:12:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5NDg3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "81e68a6c08d5a1be22633874979e300813214239", "chunk": "diff --git a/core/server/master/src/test/java/alluxio/master/file/RpcContextTest.java b/core/server/master/src/test/java/alluxio/master/file/RpcContextTest.java\nindex 3a0fb57fff..41fab469c6 100644\n--- a/core/server/master/src/test/java/alluxio/master/file/RpcContextTest.java\n+++ b/core/server/master/src/test/java/alluxio/master/file/RpcContextTest.java\n\n@@ -38,6 +43,9 @@ public final class RpcContextTest {\n   private OperationContext mMockOC = mock(OperationContext.class);\n   private RpcContext mRpcContext;\n \n+  @Rule\n+  public ExpectedException mException = ExpectedException.none();\n+\n   @Before\n   public void before() {\n     mRpcContext = new RpcContext(mMockBDC, mMockJC, mMockOC);\n"}}, {"oid": "edccea3cb3e1672e15e5531516eeaa048e411e1c", "url": "https://github.com/Alluxio/alluxio/commit/edccea3cb3e1672e15e5531516eeaa048e411e1c", "message": "Avoid type cast", "committedDate": "2020-06-27T20:33:10Z", "type": "commit"}, {"oid": "8f9eb65e2384635679b0b9edfbbef5bc3cd772a2", "url": "https://github.com/Alluxio/alluxio/commit/8f9eb65e2384635679b0b9edfbbef5bc3cd772a2", "message": "minor fixes", "committedDate": "2020-06-28T03:52:26Z", "type": "commit"}, {"oid": "afdeca93912228d01c818ada4a01e77711c10dce", "url": "https://github.com/Alluxio/alluxio/commit/afdeca93912228d01c818ada4a01e77711c10dce", "message": "fix style", "committedDate": "2020-06-28T04:45:48Z", "type": "commit"}, {"oid": "85725ebcdc9edbf4df2aa0edfef8991f31bb7e05", "url": "https://github.com/Alluxio/alluxio/commit/85725ebcdc9edbf4df2aa0edfef8991f31bb7e05", "message": "Fix unconfirmed-cast bug", "committedDate": "2020-06-28T05:32:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI1NjAzNA==", "url": "https://github.com/Alluxio/alluxio/pull/11674#discussion_r447256034", "bodyText": "I think it is strange to have an API called withTracker but the input parameter is not a tracker but a context? Why can't we just use the other implementation only?", "author": "gpang", "createdAt": "2020-06-29T21:10:22Z", "path": "core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java", "diffHunk": "@@ -11,54 +11,89 @@\n \n package alluxio.master.file.contexts;\n \n+import com.google.protobuf.GeneratedMessageV3;\n+\n import javax.annotation.concurrent.NotThreadSafe;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n \n /**\n  * Used as a base class for wrapping context around proto messages.\n  *\n  * @param <T> Proto message type\n+ * @param <C> extended type\n  */\n @NotThreadSafe\n-public class OperationContext<T extends com.google.protobuf.GeneratedMessageV3.Builder<?>> {\n+public class OperationContext<T extends GeneratedMessageV3.Builder, C extends OperationContext> {\n   // Proto message that is being wrapped\n   private T mOptionsBuilder;\n   // Used to track client call status.\n-  private CallTracker mCallTracker;\n+  private List<CallTracker> mCallTrackers;\n \n   /**\n    * Creates an instance with given proto message.\n    *\n    * @param optionsBuilder Internal proto message builder instance\n    */\n   public OperationContext(T optionsBuilder) {\n-    this(optionsBuilder, null);\n     mOptionsBuilder = optionsBuilder;\n-    mCallTracker = CallTracker.NOOP_TRACKER;\n+    mCallTrackers = new LinkedList<>();\n   }\n \n   /**\n-   * Creates an instance with given proto message.\n+   * @return underlying proto message instance\n+   */\n+  public T getOptions() {\n+    return mOptionsBuilder;\n+  }\n+\n+  /**\n+   * Used to transfer trackers of a context to this instance.\n+   * This is required when creating internal contexts.\n    *\n-   * @param optionsBuilder Internal proto message builder instance\n-   * @param callTracker client call tracker, or {@code null} if no tracking is desired\n+   * @param context the source context\n+   * @return the updated instance\n    */\n-  public OperationContext(T optionsBuilder, CallTracker callTracker) {\n-    mOptionsBuilder = optionsBuilder;\n-    mCallTracker = callTracker;\n+  public C withTracker(OperationContext context) {", "originalCommit": "85725ebcdc9edbf4df2aa0edfef8991f31bb7e05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk1ODkzNQ==", "url": "https://github.com/Alluxio/alluxio/pull/11674#discussion_r447958935", "bodyText": "I still have this question.", "author": "gpang", "createdAt": "2020-06-30T20:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI1NjAzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2Mjg3Mw==", "url": "https://github.com/Alluxio/alluxio/pull/11674#discussion_r447962873", "bodyText": "turned out it was a dead method. removed.", "author": "ggezer", "createdAt": "2020-06-30T20:35:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI1NjAzNA=="}], "type": "inlineReview", "revised_code": {"commit": "08bab3efaec06703a8b1b6f20d0110dd5617f3a5", "chunk": "diff --git a/core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java b/core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java\nindex 7c9d177f56..6bb6f1e241 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java\n\n@@ -48,18 +48,6 @@ public class OperationContext<T extends GeneratedMessageV3.Builder, C extends Op\n     return mOptionsBuilder;\n   }\n \n-  /**\n-   * Used to transfer trackers of a context to this instance.\n-   * This is required when creating internal contexts.\n-   *\n-   * @param context the source context\n-   * @return the updated instance\n-   */\n-  public C withTracker(OperationContext context) {\n-    mCallTrackers = context.mCallTrackers;\n-    return (C) this;\n-  }\n-\n   /**\n    * Updates this context with a new tracker.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2MzM4Nw==", "url": "https://github.com/Alluxio/alluxio/pull/11674#discussion_r447263387", "bodyText": "Is the only reason for this, to have a withTracker() call? It seems inconvenient to add the same class as a template class parameter. Instead, can't we just have a setTracker(), that updates the instance, and we just pass in the instance to the rpc call?", "author": "gpang", "createdAt": "2020-06-29T21:25:35Z", "path": "core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java", "diffHunk": "@@ -11,54 +11,89 @@\n \n package alluxio.master.file.contexts;\n \n+import com.google.protobuf.GeneratedMessageV3;\n+\n import javax.annotation.concurrent.NotThreadSafe;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n \n /**\n  * Used as a base class for wrapping context around proto messages.\n  *\n  * @param <T> Proto message type\n+ * @param <C> extended type", "originalCommit": "85725ebcdc9edbf4df2aa0edfef8991f31bb7e05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI5Nzc5Nw==", "url": "https://github.com/Alluxio/alluxio/pull/11674#discussion_r447297797", "bodyText": "I'm just trying to make service-handler clean by making the API pretty to use.", "author": "ggezer", "createdAt": "2020-06-29T22:35:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI2MzM4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "08bab3efaec06703a8b1b6f20d0110dd5617f3a5", "chunk": "diff --git a/core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java b/core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java\nindex 7c9d177f56..6bb6f1e241 100644\n--- a/core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java\n+++ b/core/server/master/src/main/java/alluxio/master/file/contexts/OperationContext.java\n\n@@ -48,18 +48,6 @@ public class OperationContext<T extends GeneratedMessageV3.Builder, C extends Op\n     return mOptionsBuilder;\n   }\n \n-  /**\n-   * Used to transfer trackers of a context to this instance.\n-   * This is required when creating internal contexts.\n-   *\n-   * @param context the source context\n-   * @return the updated instance\n-   */\n-  public C withTracker(OperationContext context) {\n-    mCallTrackers = context.mCallTrackers;\n-    return (C) this;\n-  }\n-\n   /**\n    * Updates this context with a new tracker.\n    *\n"}}, {"oid": "08bab3efaec06703a8b1b6f20d0110dd5617f3a5", "url": "https://github.com/Alluxio/alluxio/commit/08bab3efaec06703a8b1b6f20d0110dd5617f3a5", "message": "remove dead method", "committedDate": "2020-06-30T20:34:17Z", "type": "commit"}, {"oid": "9e705645a3467925735fc89140240fb54feaa932", "url": "https://github.com/Alluxio/alluxio/commit/9e705645a3467925735fc89140240fb54feaa932", "message": "Don't throw during laodMetadata", "committedDate": "2020-07-06T22:00:29Z", "type": "commit"}, {"oid": "189e4b8641253bafb1c0fc10cfaead84983fb39a", "url": "https://github.com/Alluxio/alluxio/commit/189e4b8641253bafb1c0fc10cfaead84983fb39a", "message": "Add UT for RpcContext", "committedDate": "2020-07-06T22:11:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxMDAyOQ==", "url": "https://github.com/Alluxio/alluxio/pull/11674#discussion_r450510029", "bodyText": "This is a good case for the ExpectedException rule since there aren't any assertions afterwards ;)", "author": "ZacBlanco", "createdAt": "2020-07-06T22:22:28Z", "path": "core/server/master/src/test/java/alluxio/master/file/RpcContextTest.java", "diffHunk": "@@ -105,6 +108,46 @@ public void journalContextThrows() throws Throwable {\n     checkClose(jcException);\n   }\n \n+  @Test\n+  public void testCallTrackers() throws Throwable {\n+    InternalOperationContext opCtx = new InternalOperationContext();\n+    // Add a call tracker that's always cancelled.\n+    opCtx = opCtx.withTracker(new CallTracker() {\n+      @Override\n+      public boolean isCancelled() {\n+        return true;\n+      }\n+\n+      @Override\n+      public Type getType() {\n+        return Type.GRPC_CLIENT_TRACKER;\n+      }\n+    });\n+    // Add a call tracker that's never cancelled.\n+    opCtx = opCtx.withTracker(new CallTracker() {\n+      @Override\n+      public boolean isCancelled() {\n+        return false;\n+      }\n+\n+      @Override\n+      public Type getType() {\n+        return Type.STATE_LOCK_TRACKER;\n+      }\n+    });\n+    // Create RPC context.\n+    RpcContext rpcCtx = new RpcContext(mMockBDC, mMockJC, opCtx);\n+    // Verify the RPC is cancelled due to tracker that's always cancelled.\n+    assertTrue(rpcCtx.isCancelled());\n+    try {\n+      // Verify cancellation throws.\n+      rpcCtx.throwIfCancelled();\n+      fail(\"Call should have been cancelled.\");\n+    } catch (RuntimeException e) {", "originalCommit": "189e4b8641253bafb1c0fc10cfaead84983fb39a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "81e68a6c08d5a1be22633874979e300813214239", "chunk": "diff --git a/core/server/master/src/test/java/alluxio/master/file/RpcContextTest.java b/core/server/master/src/test/java/alluxio/master/file/RpcContextTest.java\nindex 0dd5341f10..41fab469c6 100644\n--- a/core/server/master/src/test/java/alluxio/master/file/RpcContextTest.java\n+++ b/core/server/master/src/test/java/alluxio/master/file/RpcContextTest.java\n\n@@ -139,13 +144,9 @@ public final class RpcContextTest {\n     RpcContext rpcCtx = new RpcContext(mMockBDC, mMockJC, opCtx);\n     // Verify the RPC is cancelled due to tracker that's always cancelled.\n     assertTrue(rpcCtx.isCancelled());\n-    try {\n-      // Verify cancellation throws.\n-      rpcCtx.throwIfCancelled();\n-      fail(\"Call should have been cancelled.\");\n-    } catch (RuntimeException e) {\n-      // expected.\n-    }\n+    // Verify cancellation throws.\n+    mException.expect(RuntimeException.class);\n+    rpcCtx.throwIfCancelled();\n   }\n \n   /*\n"}}, {"oid": "81e68a6c08d5a1be22633874979e300813214239", "url": "https://github.com/Alluxio/alluxio/commit/81e68a6c08d5a1be22633874979e300813214239", "message": "Use expected-exc rule", "committedDate": "2020-07-06T23:48:13Z", "type": "commit"}]}