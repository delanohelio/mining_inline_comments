{"pr_number": 11539, "pr_title": "Add api counts graph for client-io stress test", "pr_createdAt": "2020-06-10T06:40:24Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11539", "timeline": [{"oid": "5ece14d6b45a770ff71a5925dda3cac80b010e67", "url": "https://github.com/Alluxio/alluxio/commit/5ece14d6b45a770ff71a5925dda3cac80b010e67", "message": "Add number of success graph", "committedDate": "2020-06-10T06:26:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwMjIwOQ==", "url": "https://github.com/Alluxio/alluxio/pull/11539#discussion_r438302209", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            subTitle, \"# Threads\", \"Number of Success (MB/s)\");\n          \n          \n            \n                            subTitle, \"# Threads\", \"# API calls\");", "author": "gpang", "createdAt": "2020-06-10T17:45:14Z", "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "diffHunk": "@@ -256,6 +278,12 @@ public ClientIOTaskResult aggregate(Iterable<ClientIOTaskResult> results) throws\n                         Collections.singletonList(ClientIOParameters.FIELD_READ_RANDOM))),\n                 subTitle, \"# Threads\", \"Throughput (MB/s)\");\n \n+            LineGraph numSuccessGraph = new LineGraph(String\n+                .format(\"%s - %s - Number of Successes\", operation,\n+                    opSummaries.get(0).mParameters.getDescription(\n+                        Collections.singletonList(ClientIOParameters.FIELD_READ_RANDOM))),\n+                subTitle, \"# Threads\", \"Number of Success (MB/s)\");", "originalCommit": "5ece14d6b45a770ff71a5925dda3cac80b010e67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49fd51129c5d591f6268104e210b5d4d6d265d9f", "chunk": "diff --git a/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java b/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\nindex f3a0386714..91f5df8401 100644\n--- a/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\n+++ b/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\n\n@@ -279,10 +282,10 @@ public final class ClientIOTaskResult implements TaskResult, Summary {\n                 subTitle, \"# Threads\", \"Throughput (MB/s)\");\n \n             LineGraph numSuccessGraph = new LineGraph(String\n-                .format(\"%s - %s - Number of Successes\", operation,\n+                .format(\"%s - %s - API calls\", operation,\n                     opSummaries.get(0).mParameters.getDescription(\n                         Collections.singletonList(ClientIOParameters.FIELD_READ_RANDOM))),\n-                subTitle, \"# Threads\", \"Number of Success (MB/s)\");\n+                subTitle, \"# Threads\", \"# API calls\");\n \n             LineGraph timeToFirstByteGraph = new LineGraph(String\n                 .format(\"%s - %s - Time To First Byte\", operation,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwMjM0Ng==", "url": "https://github.com/Alluxio/alluxio/pull/11539#discussion_r438302346", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .format(\"%s - %s - Number of Successes\", operation,\n          \n          \n            \n                            .format(\"%s - %s - API Calls\", operation,", "author": "gpang", "createdAt": "2020-06-10T17:45:27Z", "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "diffHunk": "@@ -256,6 +278,12 @@ public ClientIOTaskResult aggregate(Iterable<ClientIOTaskResult> results) throws\n                         Collections.singletonList(ClientIOParameters.FIELD_READ_RANDOM))),\n                 subTitle, \"# Threads\", \"Throughput (MB/s)\");\n \n+            LineGraph numSuccessGraph = new LineGraph(String\n+                .format(\"%s - %s - Number of Successes\", operation,", "originalCommit": "5ece14d6b45a770ff71a5925dda3cac80b010e67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49fd51129c5d591f6268104e210b5d4d6d265d9f", "chunk": "diff --git a/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java b/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\nindex f3a0386714..91f5df8401 100644\n--- a/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\n+++ b/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\n\n@@ -279,10 +282,10 @@ public final class ClientIOTaskResult implements TaskResult, Summary {\n                 subTitle, \"# Threads\", \"Throughput (MB/s)\");\n \n             LineGraph numSuccessGraph = new LineGraph(String\n-                .format(\"%s - %s - Number of Successes\", operation,\n+                .format(\"%s - %s - API calls\", operation,\n                     opSummaries.get(0).mParameters.getDescription(\n                         Collections.singletonList(ClientIOParameters.FIELD_READ_RANDOM))),\n-                subTitle, \"# Threads\", \"Number of Success (MB/s)\");\n+                subTitle, \"# Threads\", \"# API calls\");\n \n             LineGraph timeToFirstByteGraph = new LineGraph(String\n                 .format(\"%s - %s - Time To First Byte\", operation,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNDc0OA==", "url": "https://github.com/Alluxio/alluxio/pull/11539#discussion_r438304748", "bodyText": "Can this just be a Map<Integer, Map<String, SummaryStatistics>>, so it is num_threads -> (method -> stats)?", "author": "gpang", "createdAt": "2020-06-10T17:49:35Z", "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "diffHunk": "@@ -45,7 +45,7 @@\n   private BaseParameters mBaseParameters;\n   private ClientIOParameters mParameters;\n \n-  private Map<Integer, SummaryStatistics> mTimeToFirstByte;\n+  private Map<String, SummaryStatistics> mTimeToFirstByte;", "originalCommit": "5ece14d6b45a770ff71a5925dda3cac80b010e67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM3NzM4NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11539#discussion_r438377385", "bodyText": "Changed.", "author": "HelloHorizon", "createdAt": "2020-06-10T20:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNDc0OA=="}], "type": "inlineReview", "revised_code": {"commit": "49fd51129c5d591f6268104e210b5d4d6d265d9f", "chunk": "diff --git a/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java b/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\nindex f3a0386714..91f5df8401 100644\n--- a/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\n+++ b/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\n\n@@ -45,7 +45,7 @@ public final class ClientIOTaskResult implements TaskResult, Summary {\n   private BaseParameters mBaseParameters;\n   private ClientIOParameters mParameters;\n \n-  private Map<String, SummaryStatistics> mTimeToFirstByte;\n+  private Map<Integer, TimeToFirstByteStatistics> mTimeToFirstByte;\n \n   /**\n    * Creates an instance.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNTIxNQ==", "url": "https://github.com/Alluxio/alluxio/pull/11539#discussion_r438305215", "bodyText": "If the data structure was different, we wouldn't have to manually split strings.", "author": "gpang", "createdAt": "2020-06-10T17:50:22Z", "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "diffHunk": "@@ -172,10 +173,31 @@ private long computeLastEndMs() {\n     return data;\n   }\n \n+  private void getNumSuccessData(String series, LineGraph lineGraph) {\n+    Map<String, LineGraph.Data> data = new HashMap<>();\n+\n+    for (Map.Entry<String, SummaryStatistics>\n+             threadMethodEntry : mTimeToFirstByte.entrySet()) {\n+      String[] threadMethod = threadMethodEntry.getKey().split(\",\", 2);", "originalCommit": "5ece14d6b45a770ff71a5925dda3cac80b010e67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM3NzQ0NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11539#discussion_r438377445", "bodyText": "Changed.", "author": "HelloHorizon", "createdAt": "2020-06-10T20:04:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMwNTIxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "49fd51129c5d591f6268104e210b5d4d6d265d9f", "chunk": "diff --git a/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java b/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\nindex f3a0386714..91f5df8401 100644\n--- a/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\n+++ b/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\n\n@@ -176,14 +176,15 @@ public final class ClientIOTaskResult implements TaskResult, Summary {\n   private void getNumSuccessData(String series, LineGraph lineGraph) {\n     Map<String, LineGraph.Data> data = new HashMap<>();\n \n-    for (Map.Entry<String, SummaryStatistics>\n-             threadMethodEntry : mTimeToFirstByte.entrySet()) {\n-      String[] threadMethod = threadMethodEntry.getKey().split(\",\", 2);\n-      String prefix = series + \", method: \" + threadMethod[1];\n-      LineGraph.Data currentData = data.getOrDefault(prefix, new LineGraph.Data());\n-      currentData.addData(Integer.valueOf(threadMethod[0]),\n-          threadMethodEntry.getValue().mNumSuccess);\n-      data.put(prefix, currentData);\n+    for (Map.Entry<Integer, TimeToFirstByteStatistics>\n+             threadEntry : mTimeToFirstByte.entrySet()) {\n+      for (Map.Entry<String, SummaryStatistics> methodEntry :\n+          threadEntry.getValue().getSummaryStatistics().entrySet()) {\n+        String prefix = series + \", method: \" + methodEntry.getKey();\n+        LineGraph.Data currentData = data.getOrDefault(prefix, new LineGraph.Data());\n+        currentData.addData(threadEntry.getKey(), methodEntry.getValue().mNumSuccess);\n+        data.put(prefix, currentData);\n+      }\n     }\n \n     for (Map.Entry<String, LineGraph.Data> entry : data.entrySet()) {\n"}}, {"oid": "49fd51129c5d591f6268104e210b5d4d6d265d9f", "url": "https://github.com/Alluxio/alluxio/commit/49fd51129c5d591f6268104e210b5d4d6d265d9f", "message": "Change data structure for summary statistics", "committedDate": "2020-06-10T20:03:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5NjU3MA==", "url": "https://github.com/Alluxio/alluxio/pull/11539#discussion_r438396570", "bodyText": "can we just have this take 3 parameters: threads, method, statistics, and then we don't have to create a new class to just store a map?", "author": "gpang", "createdAt": "2020-06-10T20:42:40Z", "path": "stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java", "diffHunk": "@@ -101,23 +101,24 @@ public void setRecordStartMs(long recordStartMs) {\n   /**\n    * @return client IO statistics per method\n    */\n-  public Map<Integer, SummaryStatistics> getTimeToFirstBytePerThread() {\n+  public Map<Integer, TimeToFirstByteStatistics> getTimeToFirstBytePerThread() {\n     return mTimeToFirstByte;\n   }\n \n   /**\n    * @param timeToFirstByte time to first statistics\n    */\n-  public void setTimeToFirstBytePerThread(Map<Integer, SummaryStatistics> timeToFirstByte) {\n+  public void setTimeToFirstBytePerThread(Map<Integer, TimeToFirstByteStatistics> timeToFirstByte) {\n     mTimeToFirstByte = timeToFirstByte;\n   }\n \n   /**\n-   * @param threadCount thread count\n+   * @param numThreads thread count\n    * @param statistics ClientIOTaskResultStatistics\n    */\n-  public void putTimeToFirstBytePerThread(int threadCount, SummaryStatistics statistics) {\n-    mTimeToFirstByte.put(threadCount, statistics);\n+  public void putTimeToFirstBytePerThread(Integer numThreads,", "originalCommit": "49fd51129c5d591f6268104e210b5d4d6d265d9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQwNDAwMg==", "url": "https://github.com/Alluxio/alluxio/pull/11539#discussion_r438404002", "bodyText": "Is there any way for us to output the JSON data without implementing a new class for Map<Integer, Map<String, SummaryStatistics>>?", "author": "HelloHorizon", "createdAt": "2020-06-10T20:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5NjU3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0NjEyNQ==", "url": "https://github.com/Alluxio/alluxio/pull/11539#discussion_r438446125", "bodyText": "Changed.", "author": "HelloHorizon", "createdAt": "2020-06-10T22:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5NjU3MA=="}], "type": "inlineReview", "revised_code": {"commit": "0cffdb20a25cc78a15a8b9dc0cd1fe9424db8427", "chunk": "diff --git a/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java b/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\nindex 91f5df8401..11bc98a7b9 100644\n--- a/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\n+++ b/stress/common/src/main/java/alluxio/stress/client/ClientIOTaskResult.java\n\n@@ -101,14 +102,15 @@ public final class ClientIOTaskResult implements TaskResult, Summary {\n   /**\n    * @return client IO statistics per method\n    */\n-  public Map<Integer, TimeToFirstByteStatistics> getTimeToFirstBytePerThread() {\n+  public Map<Integer, Map<String, SummaryStatistics>> getTimeToFirstBytePerThread() {\n     return mTimeToFirstByte;\n   }\n \n   /**\n    * @param timeToFirstByte time to first statistics\n    */\n-  public void setTimeToFirstBytePerThread(Map<Integer, TimeToFirstByteStatistics> timeToFirstByte) {\n+  public void setTimeToFirstBytePerThread(Map<Integer, Map<String,\n+      SummaryStatistics>> timeToFirstByte) {\n     mTimeToFirstByte = timeToFirstByte;\n   }\n \n"}}, {"oid": "0cffdb20a25cc78a15a8b9dc0cd1fe9424db8427", "url": "https://github.com/Alluxio/alluxio/commit/0cffdb20a25cc78a15a8b9dc0cd1fe9424db8427", "message": "Change to single map map to store summary statistics", "committedDate": "2020-06-10T22:39:33Z", "type": "commit"}, {"oid": "bd72310806bd6941265eae240e76a99269171753", "url": "https://github.com/Alluxio/alluxio/commit/bd72310806bd6941265eae240e76a99269171753", "message": "Remove redudant code", "committedDate": "2020-06-10T22:41:46Z", "type": "commit"}]}