{"pr_number": 11396, "pr_title": "Make Ozone as a under file system of Alluxio", "pr_createdAt": "2020-05-07T15:56:54Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11396", "timeline": [{"oid": "86181fd1b73a82c143b92685cd0bea6dfd9b8d7d", "url": "https://github.com/Alluxio/alluxio/commit/86181fd1b73a82c143b92685cd0bea6dfd9b8d7d", "message": "Ozone as a under file system of Alluxio", "committedDate": "2020-05-07T15:54:44Z", "type": "commit"}, {"oid": "accc57a62eef819e32d26d7ecd45f4f082e42101", "url": "https://github.com/Alluxio/alluxio/commit/accc57a62eef819e32d26d7ecd45f4f082e42101", "message": "Ozone as a under file system of Alluxio. Fix checkstyle.", "committedDate": "2020-05-07T16:10:01Z", "type": "commit"}, {"oid": "995866e4514d3f65547f65b1a3e7dbe60fb9de26", "url": "https://github.com/Alluxio/alluxio/commit/995866e4514d3f65547f65b1a3e7dbe60fb9de26", "message": "Add missing license header", "committedDate": "2020-05-07T17:29:42Z", "type": "commit"}, {"oid": "7856cda81fbe8146aa66f7b3656bc15bc83fe186", "url": "https://github.com/Alluxio/alluxio/commit/7856cda81fbe8146aa66f7b3656bc15bc83fe186", "message": "Fix pom.xml error", "committedDate": "2020-05-07T17:56:44Z", "type": "commit"}, {"oid": "9d1cd003eda7cd3df2ab09972d7f77e31c377b56", "url": "https://github.com/Alluxio/alluxio/commit/9d1cd003eda7cd3df2ab09972d7f77e31c377b56", "message": "Ozone as a under file system of Alluxio. Add missing licence header.", "committedDate": "2020-05-08T01:51:43Z", "type": "commit"}, {"oid": "9d1cd003eda7cd3df2ab09972d7f77e31c377b56", "url": "https://github.com/Alluxio/alluxio/commit/9d1cd003eda7cd3df2ab09972d7f77e31c377b56", "message": "Ozone as a under file system of Alluxio. Add missing licence header.", "committedDate": "2020-05-08T01:51:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5OTU3NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r421899575", "bodyText": "This should be Ozone?", "author": "ZacBlanco", "createdAt": "2020-05-08T02:22:22Z", "path": "underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystemFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.ozone;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.Constants;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.UnderFileSystemFactory;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Throwables;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Factory for creating {@link OzoneUnderFileSystem}.\n+ *\n+ * It caches created {@link OzoneUnderFileSystem}s, using the scheme and authority pair as the key.\n+ */\n+@ThreadSafe\n+public class OzoneUnderFileSystemFactory implements UnderFileSystemFactory {\n+  @Override\n+  public UnderFileSystem create(String path, UnderFileSystemConfiguration conf) {\n+    Preconditions.checkNotNull(path, \"path\");\n+\n+    if (checkOzoneCredentials(conf)) {\n+      try {\n+        return OzoneUnderFileSystem.createInstance(new AlluxioURI(path), conf);\n+      } catch (Exception e) {\n+        throw Throwables.propagate(e);\n+      }\n+    }\n+\n+    String err = \"COS Credentials not available, cannot create COS Under File System.\";", "originalCommit": "9d1cd003eda7cd3df2ab09972d7f77e31c377b56", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "376dc1c9904ba2fd22d475c1db48cb67266991de", "chunk": "diff --git a/underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystemFactory.java b/underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystemFactory.java\ndeleted file mode 100644\nindex 531c3952ad..0000000000\n--- a/underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystemFactory.java\n+++ /dev/null\n\n@@ -1,64 +0,0 @@\n-/*\n- * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n- * (the \"License\"). You may not use this work except in compliance with the License, which is\n- * available at www.apache.org/licenses/LICENSE-2.0\n- *\n- * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n- * either express or implied, as more fully set forth in the License.\n- *\n- * See the NOTICE file distributed with this work for information regarding copyright ownership.\n- */\n-\n-package alluxio.underfs.ozone;\n-\n-import alluxio.AlluxioURI;\n-import alluxio.Constants;\n-import alluxio.underfs.UnderFileSystem;\n-import alluxio.underfs.UnderFileSystemConfiguration;\n-import alluxio.underfs.UnderFileSystemFactory;\n-\n-import com.google.common.base.Preconditions;\n-import com.google.common.base.Throwables;\n-\n-import java.io.IOException;\n-\n-import javax.annotation.concurrent.ThreadSafe;\n-\n-/**\n- * Factory for creating {@link OzoneUnderFileSystem}.\n- *\n- * It caches created {@link OzoneUnderFileSystem}s, using the scheme and authority pair as the key.\n- */\n-@ThreadSafe\n-public class OzoneUnderFileSystemFactory implements UnderFileSystemFactory {\n-  @Override\n-  public UnderFileSystem create(String path, UnderFileSystemConfiguration conf) {\n-    Preconditions.checkNotNull(path, \"path\");\n-\n-    if (checkOzoneCredentials(conf)) {\n-      try {\n-        return OzoneUnderFileSystem.createInstance(new AlluxioURI(path), conf);\n-      } catch (Exception e) {\n-        throw Throwables.propagate(e);\n-      }\n-    }\n-\n-    String err = \"COS Credentials not available, cannot create COS Under File System.\";\n-    throw Throwables.propagate(new IOException(err));\n-  }\n-\n-  @Override\n-  public boolean supportsPath(String path) {\n-    return path != null && path.startsWith(Constants.HEADER_OZONE);\n-  }\n-\n-  /**\n-   * @param conf optional configuration object for the UFS\n-   *\n-   * @return true if both access, secret and endpoint keys are present, false otherwise\n-   */\n-  private boolean checkOzoneCredentials(UnderFileSystemConfiguration conf) {\n-    // TODO(maobaolong): impl check logic while ozone supported\n-    return true;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5OTkwMQ==", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r421899901", "bodyText": "Should this say Ozone or O3FS?", "author": "ZacBlanco", "createdAt": "2020-05-08T02:23:38Z", "path": "underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystem.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.ozone;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.hdfs.HdfsUnderFileSystem;\n+\n+import org.apache.hadoop.conf.Configuration;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * O3FS {@link UnderFileSystem} implementation.\n+ */\n+@ThreadSafe\n+public class OzoneUnderFileSystem extends HdfsUnderFileSystem {\n+\n+  /**\n+   * Factory method to constructs a new HDFS {@link UnderFileSystem} instance.\n+   *\n+   * @param ufsUri the {@link AlluxioURI} for this UFS\n+   * @param conf the configuration for Hadoop\n+   * @return a new HDFS {@link UnderFileSystem} instance\n+   */\n+  public static OzoneUnderFileSystem createInstance(AlluxioURI ufsUri,\n+      UnderFileSystemConfiguration conf) {\n+    Configuration hdfsConf = createConfiguration(conf);\n+    return new OzoneUnderFileSystem(ufsUri, conf, hdfsConf);\n+  }\n+\n+  /**\n+   * Constructs a new HDFS {@link UnderFileSystem}.", "originalCommit": "9d1cd003eda7cd3df2ab09972d7f77e31c377b56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU2NzU0Nw==", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r422567547", "bodyText": "I remove these class.", "author": "maobaolong", "createdAt": "2020-05-10T01:09:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg5OTkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "376dc1c9904ba2fd22d475c1db48cb67266991de", "chunk": "diff --git a/underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystem.java b/underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystem.java\ndeleted file mode 100644\nindex 0a45b44682..0000000000\n--- a/underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystem.java\n+++ /dev/null\n\n@@ -1,58 +0,0 @@\n-/*\n- * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n- * (the \"License\"). You may not use this work except in compliance with the License, which is\n- * available at www.apache.org/licenses/LICENSE-2.0\n- *\n- * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n- * either express or implied, as more fully set forth in the License.\n- *\n- * See the NOTICE file distributed with this work for information regarding copyright ownership.\n- */\n-\n-package alluxio.underfs.ozone;\n-\n-import alluxio.AlluxioURI;\n-import alluxio.underfs.UnderFileSystem;\n-import alluxio.underfs.UnderFileSystemConfiguration;\n-import alluxio.underfs.hdfs.HdfsUnderFileSystem;\n-\n-import org.apache.hadoop.conf.Configuration;\n-\n-import javax.annotation.concurrent.ThreadSafe;\n-\n-/**\n- * O3FS {@link UnderFileSystem} implementation.\n- */\n-@ThreadSafe\n-public class OzoneUnderFileSystem extends HdfsUnderFileSystem {\n-\n-  /**\n-   * Factory method to constructs a new HDFS {@link UnderFileSystem} instance.\n-   *\n-   * @param ufsUri the {@link AlluxioURI} for this UFS\n-   * @param conf the configuration for Hadoop\n-   * @return a new HDFS {@link UnderFileSystem} instance\n-   */\n-  public static OzoneUnderFileSystem createInstance(AlluxioURI ufsUri,\n-      UnderFileSystemConfiguration conf) {\n-    Configuration hdfsConf = createConfiguration(conf);\n-    return new OzoneUnderFileSystem(ufsUri, conf, hdfsConf);\n-  }\n-\n-  /**\n-   * Constructs a new HDFS {@link UnderFileSystem}.\n-   *\n-   * @param ufsUri the {@link AlluxioURI} for this UFS\n-   * @param conf the configuration for this UFS\n-   * @param hdfsConf the configuration for HDFS\n-   */\n-  public OzoneUnderFileSystem(AlluxioURI ufsUri, UnderFileSystemConfiguration conf,\n-      Configuration hdfsConf) {\n-    super(ufsUri, conf, hdfsConf);\n-  }\n-\n-  @Override\n-  public String getUnderFSType() {\n-    return \"o3fs\";\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkwMDIyNA==", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r421900224", "bodyText": "should this say Ozone or O3FS?", "author": "ZacBlanco", "createdAt": "2020-05-08T02:24:46Z", "path": "underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystem.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.ozone;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.hdfs.HdfsUnderFileSystem;\n+\n+import org.apache.hadoop.conf.Configuration;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * O3FS {@link UnderFileSystem} implementation.\n+ */\n+@ThreadSafe\n+public class OzoneUnderFileSystem extends HdfsUnderFileSystem {\n+\n+  /**\n+   * Factory method to constructs a new HDFS {@link UnderFileSystem} instance.\n+   *\n+   * @param ufsUri the {@link AlluxioURI} for this UFS\n+   * @param conf the configuration for Hadoop\n+   * @return a new HDFS {@link UnderFileSystem} instance\n+   */\n+  public static OzoneUnderFileSystem createInstance(AlluxioURI ufsUri,\n+      UnderFileSystemConfiguration conf) {\n+    Configuration hdfsConf = createConfiguration(conf);\n+    return new OzoneUnderFileSystem(ufsUri, conf, hdfsConf);\n+  }\n+\n+  /**\n+   * Constructs a new HDFS {@link UnderFileSystem}.\n+   *\n+   * @param ufsUri the {@link AlluxioURI} for this UFS\n+   * @param conf the configuration for this UFS\n+   * @param hdfsConf the configuration for HDFS", "originalCommit": "9d1cd003eda7cd3df2ab09972d7f77e31c377b56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU2NzUyOA==", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r422567528", "bodyText": "I remove these class.", "author": "maobaolong", "createdAt": "2020-05-10T01:09:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkwMDIyNA=="}], "type": "inlineReview", "revised_code": {"commit": "376dc1c9904ba2fd22d475c1db48cb67266991de", "chunk": "diff --git a/underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystem.java b/underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystem.java\ndeleted file mode 100644\nindex 0a45b44682..0000000000\n--- a/underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystem.java\n+++ /dev/null\n\n@@ -1,58 +0,0 @@\n-/*\n- * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n- * (the \"License\"). You may not use this work except in compliance with the License, which is\n- * available at www.apache.org/licenses/LICENSE-2.0\n- *\n- * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n- * either express or implied, as more fully set forth in the License.\n- *\n- * See the NOTICE file distributed with this work for information regarding copyright ownership.\n- */\n-\n-package alluxio.underfs.ozone;\n-\n-import alluxio.AlluxioURI;\n-import alluxio.underfs.UnderFileSystem;\n-import alluxio.underfs.UnderFileSystemConfiguration;\n-import alluxio.underfs.hdfs.HdfsUnderFileSystem;\n-\n-import org.apache.hadoop.conf.Configuration;\n-\n-import javax.annotation.concurrent.ThreadSafe;\n-\n-/**\n- * O3FS {@link UnderFileSystem} implementation.\n- */\n-@ThreadSafe\n-public class OzoneUnderFileSystem extends HdfsUnderFileSystem {\n-\n-  /**\n-   * Factory method to constructs a new HDFS {@link UnderFileSystem} instance.\n-   *\n-   * @param ufsUri the {@link AlluxioURI} for this UFS\n-   * @param conf the configuration for Hadoop\n-   * @return a new HDFS {@link UnderFileSystem} instance\n-   */\n-  public static OzoneUnderFileSystem createInstance(AlluxioURI ufsUri,\n-      UnderFileSystemConfiguration conf) {\n-    Configuration hdfsConf = createConfiguration(conf);\n-    return new OzoneUnderFileSystem(ufsUri, conf, hdfsConf);\n-  }\n-\n-  /**\n-   * Constructs a new HDFS {@link UnderFileSystem}.\n-   *\n-   * @param ufsUri the {@link AlluxioURI} for this UFS\n-   * @param conf the configuration for this UFS\n-   * @param hdfsConf the configuration for HDFS\n-   */\n-  public OzoneUnderFileSystem(AlluxioURI ufsUri, UnderFileSystemConfiguration conf,\n-      Configuration hdfsConf) {\n-    super(ufsUri, conf, hdfsConf);\n-  }\n-\n-  @Override\n-  public String getUnderFSType() {\n-    return \"o3fs\";\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkwMDM4Nw==", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r421900387", "bodyText": "is there a reason this isn't implemented yet?", "author": "ZacBlanco", "createdAt": "2020-05-08T02:25:18Z", "path": "underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystemFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.ozone;\n+\n+import alluxio.AlluxioURI;\n+import alluxio.Constants;\n+import alluxio.underfs.UnderFileSystem;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+import alluxio.underfs.UnderFileSystemFactory;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Throwables;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Factory for creating {@link OzoneUnderFileSystem}.\n+ *\n+ * It caches created {@link OzoneUnderFileSystem}s, using the scheme and authority pair as the key.\n+ */\n+@ThreadSafe\n+public class OzoneUnderFileSystemFactory implements UnderFileSystemFactory {\n+  @Override\n+  public UnderFileSystem create(String path, UnderFileSystemConfiguration conf) {\n+    Preconditions.checkNotNull(path, \"path\");\n+\n+    if (checkOzoneCredentials(conf)) {\n+      try {\n+        return OzoneUnderFileSystem.createInstance(new AlluxioURI(path), conf);\n+      } catch (Exception e) {\n+        throw Throwables.propagate(e);\n+      }\n+    }\n+\n+    String err = \"COS Credentials not available, cannot create COS Under File System.\";\n+    throw Throwables.propagate(new IOException(err));\n+  }\n+\n+  @Override\n+  public boolean supportsPath(String path) {\n+    return path != null && path.startsWith(Constants.HEADER_OZONE);\n+  }\n+\n+  /**\n+   * @param conf optional configuration object for the UFS\n+   *\n+   * @return true if both access, secret and endpoint keys are present, false otherwise\n+   */\n+  private boolean checkOzoneCredentials(UnderFileSystemConfiguration conf) {\n+    // TODO(maobaolong): impl check logic while ozone supported\n+    return true;\n+  }", "originalCommit": "9d1cd003eda7cd3df2ab09972d7f77e31c377b56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU2NzY1NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r422567655", "bodyText": "I let this class extents HdfsUnderFileSystemFactory, so the only thing i should override is method 'supportsPath'", "author": "maobaolong", "createdAt": "2020-05-10T01:10:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkwMDM4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "376dc1c9904ba2fd22d475c1db48cb67266991de", "chunk": "diff --git a/underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystemFactory.java b/underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystemFactory.java\ndeleted file mode 100644\nindex 531c3952ad..0000000000\n--- a/underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystemFactory.java\n+++ /dev/null\n\n@@ -1,64 +0,0 @@\n-/*\n- * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n- * (the \"License\"). You may not use this work except in compliance with the License, which is\n- * available at www.apache.org/licenses/LICENSE-2.0\n- *\n- * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n- * either express or implied, as more fully set forth in the License.\n- *\n- * See the NOTICE file distributed with this work for information regarding copyright ownership.\n- */\n-\n-package alluxio.underfs.ozone;\n-\n-import alluxio.AlluxioURI;\n-import alluxio.Constants;\n-import alluxio.underfs.UnderFileSystem;\n-import alluxio.underfs.UnderFileSystemConfiguration;\n-import alluxio.underfs.UnderFileSystemFactory;\n-\n-import com.google.common.base.Preconditions;\n-import com.google.common.base.Throwables;\n-\n-import java.io.IOException;\n-\n-import javax.annotation.concurrent.ThreadSafe;\n-\n-/**\n- * Factory for creating {@link OzoneUnderFileSystem}.\n- *\n- * It caches created {@link OzoneUnderFileSystem}s, using the scheme and authority pair as the key.\n- */\n-@ThreadSafe\n-public class OzoneUnderFileSystemFactory implements UnderFileSystemFactory {\n-  @Override\n-  public UnderFileSystem create(String path, UnderFileSystemConfiguration conf) {\n-    Preconditions.checkNotNull(path, \"path\");\n-\n-    if (checkOzoneCredentials(conf)) {\n-      try {\n-        return OzoneUnderFileSystem.createInstance(new AlluxioURI(path), conf);\n-      } catch (Exception e) {\n-        throw Throwables.propagate(e);\n-      }\n-    }\n-\n-    String err = \"COS Credentials not available, cannot create COS Under File System.\";\n-    throw Throwables.propagate(new IOException(err));\n-  }\n-\n-  @Override\n-  public boolean supportsPath(String path) {\n-    return path != null && path.startsWith(Constants.HEADER_OZONE);\n-  }\n-\n-  /**\n-   * @param conf optional configuration object for the UFS\n-   *\n-   * @return true if both access, secret and endpoint keys are present, false otherwise\n-   */\n-  private boolean checkOzoneCredentials(UnderFileSystemConfiguration conf) {\n-    // TODO(maobaolong): impl check logic while ozone supported\n-    return true;\n-  }\n-}\n"}}, {"oid": "376dc1c9904ba2fd22d475c1db48cb67266991de", "url": "https://github.com/Alluxio/alluxio/commit/376dc1c9904ba2fd22d475c1db48cb67266991de", "message": "Using HDFS underfilesystem to impl ozone ufs", "committedDate": "2020-05-08T03:43:37Z", "type": "commit"}, {"oid": "21c49f2ec7ce4547ce87cd0f16e88ad3217d87f6", "url": "https://github.com/Alluxio/alluxio/commit/21c49f2ec7ce4547ce87cd0f16e88ad3217d87f6", "message": "revert the webui changes.", "committedDate": "2020-05-08T03:49:03Z", "type": "commit"}, {"oid": "5c463e6e22c48f64a29203523f335a659c0eae8c", "url": "https://github.com/Alluxio/alluxio/commit/5c463e6e22c48f64a29203523f335a659c0eae8c", "message": "revert the Constants changes.", "committedDate": "2020-05-08T03:50:32Z", "type": "commit"}, {"oid": "c2d9c1b5375a23d6a34f973ce859849a48a495f9", "url": "https://github.com/Alluxio/alluxio/commit/c2d9c1b5375a23d6a34f973ce859849a48a495f9", "message": "revert the Constants changes and address review comments", "committedDate": "2020-05-10T01:04:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY5MTEyMQ==", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r422691121", "bodyText": "Can you update the javadoc to reference OzoneUnderFileSystem instead of HdfsUnderFileSystem?", "author": "ZacBlanco", "createdAt": "2020-05-10T19:49:29Z", "path": "underfs/ozone/src/main/java/alluxio/underfs/ozone/OzoneUnderFileSystemFactory.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * The Alluxio Open Foundation licenses this work under the Apache License, version 2.0\n+ * (the \"License\"). You may not use this work except in compliance with the License, which is\n+ * available at www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied, as more fully set forth in the License.\n+ *\n+ * See the NOTICE file distributed with this work for information regarding copyright ownership.\n+ */\n+\n+package alluxio.underfs.ozone;\n+\n+import alluxio.Constants;\n+import alluxio.underfs.hdfs.HdfsUnderFileSystem;\n+import alluxio.underfs.hdfs.HdfsUnderFileSystemFactory;\n+import alluxio.underfs.UnderFileSystemConfiguration;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * Factory for creating {@link HdfsUnderFileSystem}.\n+ *\n+ * It caches created {@link HdfsUnderFileSystem}s, using the scheme and authority pair as the key.\n+ */\n+@ThreadSafe", "originalCommit": "c2d9c1b5375a23d6a34f973ce859849a48a495f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwMzA3NA==", "url": "https://github.com/Alluxio/alluxio/pull/11396#discussion_r422803074", "bodyText": "@ZacBlanco I have no OzoneUnderFileSystem now, it is removed, i use HdfsUnderFileSystem for access ozone", "author": "maobaolong", "createdAt": "2020-05-11T06:12:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY5MTEyMQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "38cd089269a177b98be2edf02054b9274cef8145", "url": "https://github.com/Alluxio/alluxio/commit/38cd089269a177b98be2edf02054b9274cef8145", "message": "Update underfs/ozone/pom.xml\n\nCo-authored-by: Zac Blanco <zac@alluxio.com>", "committedDate": "2020-05-11T06:08:04Z", "type": "commit"}, {"oid": "56d37eee6f57ba0d974ff2c64da6ce86722c3067", "url": "https://github.com/Alluxio/alluxio/commit/56d37eee6f57ba0d974ff2c64da6ce86722c3067", "message": "Update underfs/ozone/pom.xml\n\nCo-authored-by: Zac Blanco <zac@alluxio.com>", "committedDate": "2020-05-11T06:10:56Z", "type": "commit"}, {"oid": "202b7b6f9d31d08f2045cf9dec43b8432aded8c5", "url": "https://github.com/Alluxio/alluxio/commit/202b7b6f9d31d08f2045cf9dec43b8432aded8c5", "message": "revert the npm files of webui", "committedDate": "2020-05-11T06:16:24Z", "type": "commit"}, {"oid": "9a517d7c009a926a832ea10accb791dae0ad9f86", "url": "https://github.com/Alluxio/alluxio/commit/9a517d7c009a926a832ea10accb791dae0ad9f86", "message": "Merge branch '11390' of https://github.com/maobaolong/alluxio into 11390", "committedDate": "2020-05-11T06:16:53Z", "type": "commit"}]}