{"pr_number": 11580, "pr_title": "Add more traces for state-lock management", "pr_createdAt": "2020-06-17T18:39:22Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11580", "timeline": [{"oid": "1ebafe4a982cd879e57d7346e60c8cb4456405e6", "url": "https://github.com/Alluxio/alluxio/commit/1ebafe4a982cd879e57d7346e60c8cb4456405e6", "message": "Add more traces for state-lock management", "committedDate": "2020-06-17T18:38:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3MTg5Mg==", "url": "https://github.com/Alluxio/alluxio/pull/11580#discussion_r441771892", "bodyText": "do you also want thread name, or just the id? Also, I think for logging you need \"{}\", not \"%d\". \"%d\" I think is for String.format().", "author": "gpang", "createdAt": "2020-06-17T19:06:53Z", "path": "core/server/common/src/main/java/alluxio/master/StateLockManager.java", "diffHunk": "@@ -123,6 +124,9 @@ public void mastersStartedCallback() {\n    * @throws InterruptedException\n    */\n   public LockResource lockShared() throws InterruptedException {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Thread-%d entered lockShared().\", Thread.currentThread().getId());", "originalCommit": "1ebafe4a982cd879e57d7346e60c8cb4456405e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f0c256956050945f97bb161da8a419d7281306d9", "chunk": "diff --git a/core/server/common/src/main/java/alluxio/master/StateLockManager.java b/core/server/common/src/main/java/alluxio/master/StateLockManager.java\nindex 4cdf0bca2d..2f5d2bf169 100644\n--- a/core/server/common/src/main/java/alluxio/master/StateLockManager.java\n+++ b/core/server/common/src/main/java/alluxio/master/StateLockManager.java\n\n@@ -124,9 +127,7 @@ public class StateLockManager {\n    * @throws InterruptedException\n    */\n   public LockResource lockShared() throws InterruptedException {\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Thread-%d entered lockShared().\", Thread.currentThread().getId());\n-    }\n+    LOG.debug(\"Thread-{} entered lockShared().\", ThreadUtils.getCurrentThreadIdentifier());\n     // Do not allow taking shared lock during safe-mode.\n     long exclusiveOnlyRemainingMs = mExclusiveOnlyDeadlineMs - System.currentTimeMillis();\n     if (exclusiveOnlyRemainingMs > 0) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3MjE0MA==", "url": "https://github.com/Alluxio/alluxio/pull/11580#discussion_r441772140", "bodyText": "why is the other one guarded by LOG.isDebugEnabled()?", "author": "gpang", "createdAt": "2020-06-17T19:07:23Z", "path": "core/server/common/src/main/java/alluxio/master/StateLockManager.java", "diffHunk": "@@ -153,11 +157,14 @@ public LockResource lockShared() throws InterruptedException {\n    */\n   public LockResource lockExclusive(StateLockOptions lockOptions)\n       throws TimeoutException, InterruptedException {\n+    LOG.debug(\"Thread-%d entered lockExclusive().\", Thread.currentThread().getId());", "originalCommit": "1ebafe4a982cd879e57d7346e60c8cb4456405e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f0c256956050945f97bb161da8a419d7281306d9", "chunk": "diff --git a/core/server/common/src/main/java/alluxio/master/StateLockManager.java b/core/server/common/src/main/java/alluxio/master/StateLockManager.java\nindex 4cdf0bca2d..2f5d2bf169 100644\n--- a/core/server/common/src/main/java/alluxio/master/StateLockManager.java\n+++ b/core/server/common/src/main/java/alluxio/master/StateLockManager.java\n\n@@ -157,14 +158,15 @@ public class StateLockManager {\n    */\n   public LockResource lockExclusive(StateLockOptions lockOptions)\n       throws TimeoutException, InterruptedException {\n-    LOG.debug(\"Thread-%d entered lockExclusive().\", Thread.currentThread().getId());\n+    LOG.debug(\"Thread-{} entered lockExclusive().\", ThreadUtils.getCurrentThreadIdentifier());\n     // Run the grace cycle.\n     StateLockOptions.GraceMode graceMode = lockOptions.getGraceMode();\n     boolean lockAcquired = false;\n     long deadlineMs = System.currentTimeMillis() + lockOptions.getGraceCycleTimeoutMs();\n     while (System.currentTimeMillis() < deadlineMs) {\n-      LOG.debug(\"Thread-%d entered grace-cycle of try-sleep: %ms-%ms\",\n-          lockOptions.getGraceCycleTryMs(), lockOptions.getGraceCycleSleepMs());\n+      LOG.info(\"Thread-{} entered grace-cycle of try-sleep: {}ms-{}ms for the total of {}ms\",\n+          ThreadUtils.getCurrentThreadIdentifier(), lockOptions.getGraceCycleTryMs(),\n+          lockOptions.getGraceCycleSleepMs(), lockOptions.getGraceCycleTimeoutMs());\n       if (mStateLock.writeLock().tryLock(lockOptions.getGraceCycleTryMs(), TimeUnit.MILLISECONDS)) {\n         lockAcquired = true;\n         break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NDcwMQ==", "url": "https://github.com/Alluxio/alluxio/pull/11580#discussion_r441774701", "bodyText": "I don't think this syntax is correct. It doesn't have enough arguments, and is \"%ms\" correct?", "author": "gpang", "createdAt": "2020-06-17T19:12:16Z", "path": "core/server/common/src/main/java/alluxio/master/StateLockManager.java", "diffHunk": "@@ -153,11 +157,14 @@ public LockResource lockShared() throws InterruptedException {\n    */\n   public LockResource lockExclusive(StateLockOptions lockOptions)\n       throws TimeoutException, InterruptedException {\n+    LOG.debug(\"Thread-%d entered lockExclusive().\", Thread.currentThread().getId());\n     // Run the grace cycle.\n     StateLockOptions.GraceMode graceMode = lockOptions.getGraceMode();\n     boolean lockAcquired = false;\n     long deadlineMs = System.currentTimeMillis() + lockOptions.getGraceCycleTimeoutMs();\n     while (System.currentTimeMillis() < deadlineMs) {\n+      LOG.debug(\"Thread-%d entered grace-cycle of try-sleep: %ms-%ms\",", "originalCommit": "1ebafe4a982cd879e57d7346e60c8cb4456405e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f0c256956050945f97bb161da8a419d7281306d9", "chunk": "diff --git a/core/server/common/src/main/java/alluxio/master/StateLockManager.java b/core/server/common/src/main/java/alluxio/master/StateLockManager.java\nindex 4cdf0bca2d..2f5d2bf169 100644\n--- a/core/server/common/src/main/java/alluxio/master/StateLockManager.java\n+++ b/core/server/common/src/main/java/alluxio/master/StateLockManager.java\n\n@@ -157,14 +158,15 @@ public class StateLockManager {\n    */\n   public LockResource lockExclusive(StateLockOptions lockOptions)\n       throws TimeoutException, InterruptedException {\n-    LOG.debug(\"Thread-%d entered lockExclusive().\", Thread.currentThread().getId());\n+    LOG.debug(\"Thread-{} entered lockExclusive().\", ThreadUtils.getCurrentThreadIdentifier());\n     // Run the grace cycle.\n     StateLockOptions.GraceMode graceMode = lockOptions.getGraceMode();\n     boolean lockAcquired = false;\n     long deadlineMs = System.currentTimeMillis() + lockOptions.getGraceCycleTimeoutMs();\n     while (System.currentTimeMillis() < deadlineMs) {\n-      LOG.debug(\"Thread-%d entered grace-cycle of try-sleep: %ms-%ms\",\n-          lockOptions.getGraceCycleTryMs(), lockOptions.getGraceCycleSleepMs());\n+      LOG.info(\"Thread-{} entered grace-cycle of try-sleep: {}ms-{}ms for the total of {}ms\",\n+          ThreadUtils.getCurrentThreadIdentifier(), lockOptions.getGraceCycleTryMs(),\n+          lockOptions.getGraceCycleSleepMs(), lockOptions.getGraceCycleTimeoutMs());\n       if (mStateLock.writeLock().tryLock(lockOptions.getGraceCycleTryMs(), TimeUnit.MILLISECONDS)) {\n         lockAcquired = true;\n         break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NjI1Mw==", "url": "https://github.com/Alluxio/alluxio/pull/11580#discussion_r441776253", "bodyText": "Could this be useful for INFO level?", "author": "gpang", "createdAt": "2020-06-17T19:15:10Z", "path": "core/server/common/src/main/java/alluxio/master/StateLockManager.java", "diffHunk": "@@ -169,6 +176,7 @@ public LockResource lockExclusive(StateLockOptions lockOptions)\n       }\n     }\n     if (lockAcquired) { // Lock was acquired within grace-cycle.\n+      LOG.debug(\"Thread-%d acquired the lock within grace-cycle.\", Thread.currentThread().getId());", "originalCommit": "1ebafe4a982cd879e57d7346e60c8cb4456405e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4NzAyNA==", "url": "https://github.com/Alluxio/alluxio/pull/11580#discussion_r441887024", "bodyText": "Right. I now made many of them as INFO.", "author": "ggezer", "createdAt": "2020-06-17T23:27:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NjI1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f0c256956050945f97bb161da8a419d7281306d9", "chunk": "diff --git a/core/server/common/src/main/java/alluxio/master/StateLockManager.java b/core/server/common/src/main/java/alluxio/master/StateLockManager.java\nindex 4cdf0bca2d..2f5d2bf169 100644\n--- a/core/server/common/src/main/java/alluxio/master/StateLockManager.java\n+++ b/core/server/common/src/main/java/alluxio/master/StateLockManager.java\n\n@@ -176,7 +178,8 @@ public class StateLockManager {\n       }\n     }\n     if (lockAcquired) { // Lock was acquired within grace-cycle.\n-      LOG.debug(\"Thread-%d acquired the lock within grace-cycle.\", Thread.currentThread().getId());\n+      LOG.info(\"Thread-{} acquired the lock within grace-cycle.\",\n+          ThreadUtils.getCurrentThreadIdentifier());\n       activateInterruptCycle();\n     } else { // Lock couldn't be acquired by grace-cycle.\n       if (graceMode == StateLockOptions.GraceMode.TIMEOUT) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NjQ5OA==", "url": "https://github.com/Alluxio/alluxio/pull/11580#discussion_r441776498", "bodyText": "Could it be useful to log something here at INFO, since we were not able to get the lock?", "author": "gpang", "createdAt": "2020-06-17T19:15:39Z", "path": "core/server/common/src/main/java/alluxio/master/StateLockManager.java", "diffHunk": "@@ -169,6 +176,7 @@ public LockResource lockExclusive(StateLockOptions lockOptions)\n       }\n     }\n     if (lockAcquired) { // Lock was acquired within grace-cycle.\n+      LOG.debug(\"Thread-%d acquired the lock within grace-cycle.\", Thread.currentThread().getId());\n       activateInterruptCycle();\n     } else { // Lock couldn't be acquired by grace-cycle.\n       if (graceMode == StateLockOptions.GraceMode.TIMEOUT) {", "originalCommit": "1ebafe4a982cd879e57d7346e60c8cb4456405e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f0c256956050945f97bb161da8a419d7281306d9", "chunk": "diff --git a/core/server/common/src/main/java/alluxio/master/StateLockManager.java b/core/server/common/src/main/java/alluxio/master/StateLockManager.java\nindex 4cdf0bca2d..2f5d2bf169 100644\n--- a/core/server/common/src/main/java/alluxio/master/StateLockManager.java\n+++ b/core/server/common/src/main/java/alluxio/master/StateLockManager.java\n\n@@ -176,7 +178,8 @@ public class StateLockManager {\n       }\n     }\n     if (lockAcquired) { // Lock was acquired within grace-cycle.\n-      LOG.debug(\"Thread-%d acquired the lock within grace-cycle.\", Thread.currentThread().getId());\n+      LOG.info(\"Thread-{} acquired the lock within grace-cycle.\",\n+          ThreadUtils.getCurrentThreadIdentifier());\n       activateInterruptCycle();\n     } else { // Lock couldn't be acquired by grace-cycle.\n       if (graceMode == StateLockOptions.GraceMode.TIMEOUT) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3ODYwNw==", "url": "https://github.com/Alluxio/alluxio/pull/11580#discussion_r441778607", "bodyText": "this may not be accurate, since the real interrupt happens in the loop below.", "author": "gpang", "createdAt": "2020-06-17T19:19:53Z", "path": "core/server/common/src/main/java/alluxio/master/StateLockManager.java", "diffHunk": "@@ -247,6 +260,9 @@ private void deactivateInterruptCycle() {\n    * Scheduled routine that interrupts waiters/holders of shared lock.\n    */\n   private void waiterInterruptRoutine() {\n+    LOG.debug(\"Interrupt-cycle interrupting %d waiters/holders: {%s}\",\n+        Thread.currentThread().getId(), mSharedWaitersAndHolders.size(), mSharedWaitersAndHolders\n+            .stream().map((th) -> Long.toString(th.getId())).collect(Collectors.joining(\",\")));", "originalCommit": "1ebafe4a982cd879e57d7346e60c8cb4456405e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4OTA4OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11580#discussion_r441889089", "bodyText": "Bumped it down for consistent logging.", "author": "ggezer", "createdAt": "2020-06-17T23:34:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3ODYwNw=="}], "type": "inlineReview", "revised_code": {"commit": "f0c256956050945f97bb161da8a419d7281306d9", "chunk": "diff --git a/core/server/common/src/main/java/alluxio/master/StateLockManager.java b/core/server/common/src/main/java/alluxio/master/StateLockManager.java\nindex 4cdf0bca2d..2f5d2bf169 100644\n--- a/core/server/common/src/main/java/alluxio/master/StateLockManager.java\n+++ b/core/server/common/src/main/java/alluxio/master/StateLockManager.java\n\n@@ -260,11 +264,15 @@ public class StateLockManager {\n    * Scheduled routine that interrupts waiters/holders of shared lock.\n    */\n   private void waiterInterruptRoutine() {\n-    LOG.debug(\"Interrupt-cycle interrupting %d waiters/holders: {%s}\",\n-        Thread.currentThread().getId(), mSharedWaitersAndHolders.size(), mSharedWaitersAndHolders\n-            .stream().map((th) -> Long.toString(th.getId())).collect(Collectors.joining(\",\")));\n+    // Keeping a list of interrupted threads for logging consistently at the end.\n+    List<Thread> interruptedThreads = new ArrayList(mSharedWaitersAndHolders.size());\n+    // Interrupt threads that are registered under shared lock.\n     for (Thread th : mSharedWaitersAndHolders) {\n       th.interrupt();\n+      interruptedThreads.add(th);\n     }\n+    LOG.info(\"Interrupt-cycle interrupted {} waiters/holders: {}\", interruptedThreads.size(),\n+        interruptedThreads.stream().map((th) -> ThreadUtils.getThreadIdentifier(th))\n+            .collect(Collectors.joining(\",\")));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4ODExMA==", "url": "https://github.com/Alluxio/alluxio/pull/11580#discussion_r441888110", "bodyText": "I think that we might want to wrap this in a if (Log.isDebugEnabled()) because grabbing iterating, and joining into a String can be pretty expensive?", "author": "ZacBlanco", "createdAt": "2020-06-17T23:31:06Z", "path": "core/server/common/src/main/java/alluxio/master/StateLockManager.java", "diffHunk": "@@ -247,6 +260,9 @@ private void deactivateInterruptCycle() {\n    * Scheduled routine that interrupts waiters/holders of shared lock.\n    */\n   private void waiterInterruptRoutine() {\n+    LOG.debug(\"Interrupt-cycle interrupting %d waiters/holders: {%s}\",\n+        Thread.currentThread().getId(), mSharedWaitersAndHolders.size(), mSharedWaitersAndHolders\n+            .stream().map((th) -> Long.toString(th.getId())).collect(Collectors.joining(\",\")));", "originalCommit": "1ebafe4a982cd879e57d7346e60c8cb4456405e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4OTI1NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11580#discussion_r441889255", "bodyText": "I made it INFO now. We don't want to miss this trace when it happens.", "author": "ggezer", "createdAt": "2020-06-17T23:35:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4ODExMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5MDA3Mw==", "url": "https://github.com/Alluxio/alluxio/pull/11580#discussion_r441890073", "bodyText": "How often do we expect this method to run?", "author": "ZacBlanco", "createdAt": "2020-06-17T23:37:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4ODExMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5MDM0OA==", "url": "https://github.com/Alluxio/alluxio/pull/11580#discussion_r441890348", "bodyText": "every 30secs by default only if it is activated under certain conditions.", "author": "ggezer", "createdAt": "2020-06-17T23:38:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4ODExMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5MTM2Mg==", "url": "https://github.com/Alluxio/alluxio/pull/11580#discussion_r441891362", "bodyText": "ok, I think it's fine then. I just wanted to make sure it doesn't need to get computed frequently.", "author": "ZacBlanco", "createdAt": "2020-06-17T23:42:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4ODExMA=="}], "type": "inlineReview", "revised_code": {"commit": "f0c256956050945f97bb161da8a419d7281306d9", "chunk": "diff --git a/core/server/common/src/main/java/alluxio/master/StateLockManager.java b/core/server/common/src/main/java/alluxio/master/StateLockManager.java\nindex 4cdf0bca2d..2f5d2bf169 100644\n--- a/core/server/common/src/main/java/alluxio/master/StateLockManager.java\n+++ b/core/server/common/src/main/java/alluxio/master/StateLockManager.java\n\n@@ -260,11 +264,15 @@ public class StateLockManager {\n    * Scheduled routine that interrupts waiters/holders of shared lock.\n    */\n   private void waiterInterruptRoutine() {\n-    LOG.debug(\"Interrupt-cycle interrupting %d waiters/holders: {%s}\",\n-        Thread.currentThread().getId(), mSharedWaitersAndHolders.size(), mSharedWaitersAndHolders\n-            .stream().map((th) -> Long.toString(th.getId())).collect(Collectors.joining(\",\")));\n+    // Keeping a list of interrupted threads for logging consistently at the end.\n+    List<Thread> interruptedThreads = new ArrayList(mSharedWaitersAndHolders.size());\n+    // Interrupt threads that are registered under shared lock.\n     for (Thread th : mSharedWaitersAndHolders) {\n       th.interrupt();\n+      interruptedThreads.add(th);\n     }\n+    LOG.info(\"Interrupt-cycle interrupted {} waiters/holders: {}\", interruptedThreads.size(),\n+        interruptedThreads.stream().map((th) -> ThreadUtils.getThreadIdentifier(th))\n+            .collect(Collectors.joining(\",\")));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4ODIwMQ==", "url": "https://github.com/Alluxio/alluxio/pull/11580#discussion_r441888201", "bodyText": "I think that we might want to wrap this in a if (Log.isDebugEnabled()) because grabbing iterating, and joining into a String can be pretty expensive?", "author": "ZacBlanco", "createdAt": "2020-06-17T23:31:23Z", "path": "core/server/common/src/main/java/alluxio/master/StateLockManager.java", "diffHunk": "@@ -178,6 +186,9 @@ public LockResource lockExclusive(StateLockOptions lockOptions)\n       // Activate the interrupt cycle before entering the lock because it might wait in the queue.\n       activateInterruptCycle();\n       // Force the lock.\n+      LOG.debug(\"Thread-%d forcing the lock with %d waiters/holders: {%s}\",\n+          Thread.currentThread().getId(), mSharedWaitersAndHolders.size(), mSharedWaitersAndHolders\n+              .stream().map((th) -> Long.toString(th.getId())).collect(Collectors.joining(\",\")));", "originalCommit": "1ebafe4a982cd879e57d7346e60c8cb4456405e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4OTM2Nw==", "url": "https://github.com/Alluxio/alluxio/pull/11580#discussion_r441889367", "bodyText": "I made it INFO now. This is OK to be seen imo.", "author": "ggezer", "createdAt": "2020-06-17T23:35:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4ODIwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f0c256956050945f97bb161da8a419d7281306d9", "chunk": "diff --git a/core/server/common/src/main/java/alluxio/master/StateLockManager.java b/core/server/common/src/main/java/alluxio/master/StateLockManager.java\nindex 4cdf0bca2d..2f5d2bf169 100644\n--- a/core/server/common/src/main/java/alluxio/master/StateLockManager.java\n+++ b/core/server/common/src/main/java/alluxio/master/StateLockManager.java\n\n@@ -186,9 +189,10 @@ public class StateLockManager {\n       // Activate the interrupt cycle before entering the lock because it might wait in the queue.\n       activateInterruptCycle();\n       // Force the lock.\n-      LOG.debug(\"Thread-%d forcing the lock with %d waiters/holders: {%s}\",\n-          Thread.currentThread().getId(), mSharedWaitersAndHolders.size(), mSharedWaitersAndHolders\n-              .stream().map((th) -> Long.toString(th.getId())).collect(Collectors.joining(\",\")));\n+      LOG.info(\"Thread-{} forcing the lock with {} waiters/holders: {}\",\n+          ThreadUtils.getCurrentThreadIdentifier(), mSharedWaitersAndHolders.size(),\n+          mSharedWaitersAndHolders.stream().map((th) -> Long.toString(th.getId()))\n+              .collect(Collectors.joining(\",\")));\n       try {\n         if (!mStateLock.writeLock().tryLock(mForcedDurationMs, TimeUnit.MILLISECONDS)) {\n           throw new TimeoutException(ExceptionMessage.STATE_LOCK_TIMED_OUT\n"}}, {"oid": "f0c256956050945f97bb161da8a419d7281306d9", "url": "https://github.com/Alluxio/alluxio/commit/f0c256956050945f97bb161da8a419d7281306d9", "message": "PR feedback", "committedDate": "2020-06-17T23:37:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5MTE5MA==", "url": "https://github.com/Alluxio/alluxio/pull/11580#discussion_r441891190", "bodyText": "I thought format used \"%s\" and \"%d\"?", "author": "gpang", "createdAt": "2020-06-17T23:41:31Z", "path": "core/common/src/main/java/alluxio/util/ThreadUtils.java", "diffHunk": "@@ -77,5 +77,20 @@ public static void shutdownAndAwaitTermination(ExecutorService pool, long timeou\n     }\n   }\n \n+  /**\n+   * @return a string representation of the current thread\n+   */\n+  public static String getCurrentThreadIdentifier() {\n+    return getThreadIdentifier(Thread.currentThread());\n+  }\n+\n+  /**\n+   * @param thread the thread\n+   * @return a string representation of the given thread\n+   */\n+  public static String getThreadIdentifier(Thread thread) {\n+    return String.format(\"{}({})\", thread.getId(), thread.getName());", "originalCommit": "f0c256956050945f97bb161da8a419d7281306d9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd1b4712cf738cfce124ad1dbae5403930b7f792", "chunk": "diff --git a/core/common/src/main/java/alluxio/util/ThreadUtils.java b/core/common/src/main/java/alluxio/util/ThreadUtils.java\nindex e69eb9bfcd..fc81521cc9 100644\n--- a/core/common/src/main/java/alluxio/util/ThreadUtils.java\n+++ b/core/common/src/main/java/alluxio/util/ThreadUtils.java\n\n@@ -89,7 +89,7 @@ public final class ThreadUtils {\n    * @return a string representation of the given thread\n    */\n   public static String getThreadIdentifier(Thread thread) {\n-    return String.format(\"{}({})\", thread.getId(), thread.getName());\n+    return String.format(\"%d(%s)\", thread.getId(), thread.getName());\n   }\n \n   private ThreadUtils() {} // prevent instantiation of utils class\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5MzA5Mw==", "url": "https://github.com/Alluxio/alluxio/pull/11580#discussion_r441893093", "bodyText": "This will print every 10 minutes for 12 hours? Is that too noisy?", "author": "gpang", "createdAt": "2020-06-17T23:48:20Z", "path": "core/server/common/src/main/java/alluxio/master/StateLockManager.java", "diffHunk": "@@ -153,11 +158,15 @@ public LockResource lockShared() throws InterruptedException {\n    */\n   public LockResource lockExclusive(StateLockOptions lockOptions)\n       throws TimeoutException, InterruptedException {\n+    LOG.debug(\"Thread-{} entered lockExclusive().\", ThreadUtils.getCurrentThreadIdentifier());\n     // Run the grace cycle.\n     StateLockOptions.GraceMode graceMode = lockOptions.getGraceMode();\n     boolean lockAcquired = false;\n     long deadlineMs = System.currentTimeMillis() + lockOptions.getGraceCycleTimeoutMs();\n     while (System.currentTimeMillis() < deadlineMs) {\n+      LOG.info(\"Thread-{} entered grace-cycle of try-sleep: {}ms-{}ms for the total of {}ms\",", "originalCommit": "f0c256956050945f97bb161da8a419d7281306d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkwMjIyNg==", "url": "https://github.com/Alluxio/alluxio/pull/11580#discussion_r441902226", "bodyText": "made it one time.", "author": "ggezer", "createdAt": "2020-06-18T00:22:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5MzA5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "cd1b4712cf738cfce124ad1dbae5403930b7f792", "chunk": "diff --git a/core/server/common/src/main/java/alluxio/master/StateLockManager.java b/core/server/common/src/main/java/alluxio/master/StateLockManager.java\nindex 2f5d2bf169..f83125f295 100644\n--- a/core/server/common/src/main/java/alluxio/master/StateLockManager.java\n+++ b/core/server/common/src/main/java/alluxio/master/StateLockManager.java\n\n@@ -161,12 +161,16 @@ public class StateLockManager {\n     LOG.debug(\"Thread-{} entered lockExclusive().\", ThreadUtils.getCurrentThreadIdentifier());\n     // Run the grace cycle.\n     StateLockOptions.GraceMode graceMode = lockOptions.getGraceMode();\n+    boolean graceCycleEntered = false;\n     boolean lockAcquired = false;\n     long deadlineMs = System.currentTimeMillis() + lockOptions.getGraceCycleTimeoutMs();\n     while (System.currentTimeMillis() < deadlineMs) {\n-      LOG.info(\"Thread-{} entered grace-cycle of try-sleep: {}ms-{}ms for the total of {}ms\",\n-          ThreadUtils.getCurrentThreadIdentifier(), lockOptions.getGraceCycleTryMs(),\n-          lockOptions.getGraceCycleSleepMs(), lockOptions.getGraceCycleTimeoutMs());\n+      if (!graceCycleEntered) {\n+        graceCycleEntered = true;\n+        LOG.info(\"Thread-{} entered grace-cycle of try-sleep: {}ms-{}ms for the total of {}ms\",\n+            ThreadUtils.getCurrentThreadIdentifier(), lockOptions.getGraceCycleTryMs(),\n+            lockOptions.getGraceCycleSleepMs(), lockOptions.getGraceCycleTimeoutMs());\n+      }\n       if (mStateLock.writeLock().tryLock(lockOptions.getGraceCycleTryMs(), TimeUnit.MILLISECONDS)) {\n         lockAcquired = true;\n         break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5MzczNA==", "url": "https://github.com/Alluxio/alluxio/pull/11580#discussion_r441893734", "bodyText": "Hrmmm, is this right? I thought TIMEOUT mode would not force the lock by interrupting threads?", "author": "gpang", "createdAt": "2020-06-17T23:50:47Z", "path": "core/server/common/src/main/java/alluxio/master/StateLockManager.java", "diffHunk": "@@ -169,6 +178,8 @@ public LockResource lockExclusive(StateLockOptions lockOptions)\n       }\n     }\n     if (lockAcquired) { // Lock was acquired within grace-cycle.\n+      LOG.info(\"Thread-{} acquired the lock within grace-cycle.\",\n+          ThreadUtils.getCurrentThreadIdentifier());\n       activateInterruptCycle();\n     } else { // Lock couldn't be acquired by grace-cycle.\n       if (graceMode == StateLockOptions.GraceMode.TIMEOUT) {", "originalCommit": "f0c256956050945f97bb161da8a419d7281306d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkwMTE1OQ==", "url": "https://github.com/Alluxio/alluxio/pull/11580#discussion_r441901159", "bodyText": "no we have to interrupt during the lock. not just when forcing the lock.", "author": "ggezer", "createdAt": "2020-06-18T00:18:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5MzczNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkwOTUyMw==", "url": "https://github.com/Alluxio/alluxio/pull/11580#discussion_r441909523", "bodyText": "If the lock is acquired by the grace-cycle, we still need to run the interrupt-cycle for maintaining the heart-beats.\nTIMEOUT and FORCED make sense when the lock was not grabbed by the grace-cycle. In this context FORCED would mean to activate the interrupt-cycle before taking the lock.", "author": "ggezer", "createdAt": "2020-06-18T00:52:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5MzczNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "cd1b4712cf738cfce124ad1dbae5403930b7f792", "url": "https://github.com/Alluxio/alluxio/commit/cd1b4712cf738cfce124ad1dbae5403930b7f792", "message": "PR feedback 2", "committedDate": "2020-06-18T00:20:58Z", "type": "commit"}]}