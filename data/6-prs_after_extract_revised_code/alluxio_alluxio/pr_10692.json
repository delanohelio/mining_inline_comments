{"pr_number": 10692, "pr_title": "Parallelize load definition within a worker", "pr_createdAt": "2020-01-03T00:35:01Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10692", "timeline": [{"oid": "fd79fe28af1415dbae9d7a3fc8111a2503461f95", "url": "https://github.com/Alluxio/alluxio/commit/fd79fe28af1415dbae9d7a3fc8111a2503461f95", "message": "parallelize load definition within a worker", "committedDate": "2020-01-03T00:34:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4Mjk2NA==", "url": "https://github.com/Alluxio/alluxio/pull/10692#discussion_r362682964", "bodyText": "Will this be a problem if list.size is smaller than numLists + 1?", "author": "calvinjia", "createdAt": "2020-01-03T01:03:43Z", "path": "core/common/src/main/java/alluxio/util/CommonUtils.java", "diffHunk": "@@ -717,5 +717,27 @@ private synchronized T firstTime() {\n     };\n   }\n \n+  /**\n+   * Partitions a list into numLists many lists each with around list.size() / numLists elements.\n+   *\n+   * @param list the list to partition\n+   * @param numLists number of lists to return\n+   * @param <T> the object type\n+   * @return partitioned list\n+   */\n+  public static <T> List<List<T>> partition(List<T> list, int numLists) {\n+    ArrayList<List<T>> result = new ArrayList<>(numLists);\n+\n+    for (int i = 0; i < numLists; i++) {\n+      result.add(new ArrayList<>(list.size() / numLists + 1));", "originalCommit": "fd79fe28af1415dbae9d7a3fc8111a2503461f95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgzMzU4Ng==", "url": "https://github.com/Alluxio/alluxio/pull/10692#discussion_r362833586", "bodyText": "divide happens before + 1 so it's guaranteed to be at least 1 (as long as numLists is > 0).\nBut more importantly, new ArrayList<>(0) is fine because it's just initial capacity.", "author": "bradyoo", "createdAt": "2020-01-03T14:46:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4Mjk2NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4MzI5NA==", "url": "https://github.com/Alluxio/alluxio/pull/10692#discussion_r362683294", "bodyText": "Should the replication options be removed?", "author": "calvinjia", "createdAt": "2020-01-03T01:06:29Z", "path": "shell/src/main/java/alluxio/cli/fs/command/DistributedLoadCommand.java", "diffHunk": "@@ -148,11 +138,6 @@ public String getCommandName() {\n     return \"distributedLoad\";\n   }\n \n-  @Override\n-  public Options getOptions() {\n-    return new Options().addOption(REPLICATION_OPTION).addOption(ACTIVE_JOBS_OPTION);", "originalCommit": "fd79fe28af1415dbae9d7a3fc8111a2503461f95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY5ODk2OQ==", "url": "https://github.com/Alluxio/alluxio/pull/10692#discussion_r362698969", "bodyText": "please also update getUsage ()", "author": "apc999", "createdAt": "2020-01-03T03:35:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4MzI5NA=="}], "type": "inlineReview", "revised_code": {"commit": "0e3ba29c0c8a9032b14485a67706595fc1b2c3e7", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/fs/command/DistributedLoadCommand.java b/shell/src/main/java/alluxio/cli/fs/command/DistributedLoadCommand.java\nindex 4cb33e67f9..5bd8032e55 100644\n--- a/shell/src/main/java/alluxio/cli/fs/command/DistributedLoadCommand.java\n+++ b/shell/src/main/java/alluxio/cli/fs/command/DistributedLoadCommand.java\n\n@@ -138,6 +138,11 @@ public final class DistributedLoadCommand extends AbstractFileSystemCommand {\n     return \"distributedLoad\";\n   }\n \n+  @Override\n+  public Options getOptions() {\n+    return new Options().addOption(REPLICATION_OPTION);\n+  }\n+\n   @Override\n   public void validateArgs(CommandLine cl) throws InvalidArgumentException {\n     CommandUtils.checkNumOfArgsEquals(this, cl, 1);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY5OTc5OA==", "url": "https://github.com/Alluxio/alluxio/pull/10692#discussion_r362699798", "bodyText": "nit: I would remove the empty line 57. We try to keep the src code concise and compact", "author": "apc999", "createdAt": "2020-01-03T03:44:18Z", "path": "job/server/src/main/java/alluxio/job/plan/load/LoadDefinition.java", "diffHunk": "@@ -54,6 +55,8 @@\n   private static final Logger LOG = LoggerFactory.getLogger(LoadDefinition.class);\n   private static final int MAX_BUFFER_SIZE = 500 * Constants.MB;\n ", "originalCommit": "fd79fe28af1415dbae9d7a3fc8111a2503461f95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e3ba29c0c8a9032b14485a67706595fc1b2c3e7", "chunk": "diff --git a/job/server/src/main/java/alluxio/job/plan/load/LoadDefinition.java b/job/server/src/main/java/alluxio/job/plan/load/LoadDefinition.java\nindex 6641b140cb..fc87158fbb 100644\n--- a/job/server/src/main/java/alluxio/job/plan/load/LoadDefinition.java\n+++ b/job/server/src/main/java/alluxio/job/plan/load/LoadDefinition.java\n\n@@ -54,7 +54,6 @@ public final class LoadDefinition\n     extends AbstractVoidPlanDefinition<LoadConfig, ArrayList<LoadTask>> {\n   private static final Logger LOG = LoggerFactory.getLogger(LoadDefinition.class);\n   private static final int MAX_BUFFER_SIZE = 500 * Constants.MB;\n-\n   private static final int JOBS_PER_WORKER = 10;\n \n   /**\n"}}, {"oid": "0e3ba29c0c8a9032b14485a67706595fc1b2c3e7", "url": "https://github.com/Alluxio/alluxio/commit/0e3ba29c0c8a9032b14485a67706595fc1b2c3e7", "message": "checkstyle and feedback", "committedDate": "2020-01-03T15:02:10Z", "type": "commit"}, {"oid": "e422a2e7ca9de29305b10c14fea6416168e0302e", "url": "https://github.com/Alluxio/alluxio/commit/e422a2e7ca9de29305b10c14fea6416168e0302e", "message": "fix test", "committedDate": "2020-01-03T18:11:25Z", "type": "commit"}]}