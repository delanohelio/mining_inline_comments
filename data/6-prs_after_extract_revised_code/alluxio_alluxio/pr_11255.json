{"pr_number": 11255, "pr_title": "Keep state lock for duration of journal context", "pr_createdAt": "2020-04-09T23:46:45Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/11255", "timeline": [{"oid": "723c3ada82ba96b72037bdafdf5a32ce6e39d322", "url": "https://github.com/Alluxio/alluxio/commit/723c3ada82ba96b72037bdafdf5a32ce6e39d322", "message": "Hold state lock for duration of journal context", "committedDate": "2020-04-09T23:46:11Z", "type": "commit"}, {"oid": "e7bd1d0215e114fdeeb8086003b546c6c8d5e304", "url": "https://github.com/Alluxio/alluxio/commit/e7bd1d0215e114fdeeb8086003b546c6c8d5e304", "message": "Add tests", "committedDate": "2020-04-10T17:42:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3Njk4NA==", "url": "https://github.com/Alluxio/alluxio/pull/11255#discussion_r406876984", "bodyText": "Can't we leave the Journal interfaces the same but wrap context here with a forwarder context that holds the lock.\nSo Journal implementations wouldn't need to manage the lock.", "author": "ggezer", "createdAt": "2020-04-10T18:09:42Z", "path": "core/server/common/src/main/java/alluxio/master/AbstractMaster.java", "diffHunk": "@@ -133,12 +132,9 @@ protected ExecutorService getExecutorService() {\n \n   @Override\n   public JournalContext createJournalContext() throws UnavailableException {\n-    // All modifications to journaled state must happen inside of a journal context so that we can\n-    // persist the state change. As a mechanism to allow for state pauses, we acquire the state\n-    // change lock before entering any code paths that could modify journaled state.\n-    try (LockResource l = new LockResource(mMasterContext.stateChangeLock())) {\n-      return mJournal.createJournalContext();\n-    }\n+    // Use the state change lock for the journal context, since all modifications to journaled\n+    // state must happen inside of a journal context.\n+    return mJournal.createJournalContext(mMasterContext.stateChangeLock());", "originalCommit": "e7bd1d0215e114fdeeb8086003b546c6c8d5e304", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5ODIwMg==", "url": "https://github.com/Alluxio/alluxio/pull/11255#discussion_r406898202", "bodyText": "I added a new journal context for the state change lock", "author": "gpang", "createdAt": "2020-04-10T19:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3Njk4NA=="}], "type": "inlineReview", "revised_code": {"commit": "4ec63f2e415cff5da59a25519961215198c794c8", "chunk": "diff --git a/core/server/common/src/main/java/alluxio/master/AbstractMaster.java b/core/server/common/src/main/java/alluxio/master/AbstractMaster.java\nindex 05934bdfce..c9adef0883 100644\n--- a/core/server/common/src/main/java/alluxio/master/AbstractMaster.java\n+++ b/core/server/common/src/main/java/alluxio/master/AbstractMaster.java\n\n@@ -134,7 +135,8 @@ public abstract class AbstractMaster implements Master {\n   public JournalContext createJournalContext() throws UnavailableException {\n     // Use the state change lock for the journal context, since all modifications to journaled\n     // state must happen inside of a journal context.\n-    return mJournal.createJournalContext(mMasterContext.stateChangeLock());\n+    return new StateChangeJournalContext(mJournal.createJournalContext(),\n+        mMasterContext.stateChangeLock());\n   }\n \n   @Override\n"}}, {"oid": "4ec63f2e415cff5da59a25519961215198c794c8", "url": "https://github.com/Alluxio/alluxio/commit/4ec63f2e415cff5da59a25519961215198c794c8", "message": "Wrap the journal context", "committedDate": "2020-04-10T18:58:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxODg2NQ==", "url": "https://github.com/Alluxio/alluxio/pull/11255#discussion_r406918865", "bodyText": "why is this synchronized now?", "author": "ggezer", "createdAt": "2020-04-10T20:00:29Z", "path": "core/server/master/src/main/java/alluxio/master/block/DefaultBlockMaster.java", "diffHunk": "@@ -655,11 +655,13 @@ public long getNewContainerId() throws UnavailableException {\n    * @return a {@link JournalEntry} representing the state of the container id generator\n    */\n   private JournalEntry getContainerIdJournalEntry() {\n-    BlockContainerIdGeneratorEntry blockContainerIdGenerator =\n-        BlockContainerIdGeneratorEntry.newBuilder().setNextContainerId(mJournaledNextContainerId)\n-            .build();\n-    return JournalEntry.newBuilder().setBlockContainerIdGenerator(blockContainerIdGenerator)\n-        .build();\n+    synchronized (mBlockContainerIdGenerator) {", "originalCommit": "4ec63f2e415cff5da59a25519961215198c794c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyMjg5MA==", "url": "https://github.com/Alluxio/alluxio/pull/11255#discussion_r406922890", "bodyText": "O, I think this is strictly more correct, since mJournaledNextContainerId is protected by mBlockContainerIdGenerator.", "author": "gpang", "createdAt": "2020-04-10T20:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxODg2NQ=="}], "type": "inlineReview", "revised_code": null}]}