{"pr_number": 10779, "pr_title": "Make metadata caching FileSystem composite", "pr_createdAt": "2020-01-22T08:07:16Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/10779", "timeline": [{"oid": "8e60a39ecc5f22a2e8b0ac7027efe4a62fa779fe", "url": "https://github.com/Alluxio/alluxio/commit/8e60a39ecc5f22a2e8b0ac7027efe4a62fa779fe", "message": "Make metadata caching FileSystem composite", "committedDate": "2020-01-22T08:05:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3MDg3NA==", "url": "https://github.com/Alluxio/alluxio/pull/10779#discussion_r369770874", "bodyText": "@calvinjia , just to make sure, we want to checkUri here, correct?", "author": "apc999", "createdAt": "2020-01-22T19:54:42Z", "path": "core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java", "diffHunk": "@@ -408,6 +404,7 @@ public void setAttribute(AlluxioURI path, SetAttributePOptions options)\n   @Override\n   public void startSync(AlluxioURI path)\n       throws FileDoesNotExistException, IOException, AlluxioException {\n+    FileSystemUtils.checkUri(mFsContext, path);", "originalCommit": "8e60a39ecc5f22a2e8b0ac7027efe4a62fa779fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "70e795faf4652055668932e25efb259b74e05157", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java b/core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java\nindex 17c1893262..a8c970dabd 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/BaseFileSystem.java\n\n@@ -404,7 +417,6 @@ public class BaseFileSystem implements FileSystem {\n   @Override\n   public void startSync(AlluxioURI path)\n       throws FileDoesNotExistException, IOException, AlluxioException {\n-    FileSystemUtils.checkUri(mFsContext, path);\n     rpc(client -> {\n       client.startSync(path);\n       LOG.debug(\"Start syncing for {}\", path.getPath());\n"}}, {"oid": "6c87895912ba937eca2c907b6e7e9a47a397f5d9", "url": "https://github.com/Alluxio/alluxio/commit/6c87895912ba937eca2c907b6e7e9a47a397f5d9", "message": "Fix failing tests", "committedDate": "2020-01-25T01:28:52Z", "type": "commit"}, {"oid": "81de539b00f4e7989687518271824eb9016b70db", "url": "https://github.com/Alluxio/alluxio/commit/81de539b00f4e7989687518271824eb9016b70db", "message": "Fix style check", "committedDate": "2020-01-25T01:43:31Z", "type": "commit"}, {"oid": "491c3244b3888c13f70196e9044fb0018b23b925", "url": "https://github.com/Alluxio/alluxio/commit/491c3244b3888c13f70196e9044fb0018b23b925", "message": "Fix style check", "committedDate": "2020-01-25T05:21:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM1MTgzNg==", "url": "https://github.com/Alluxio/alluxio/pull/10779#discussion_r374351836", "bodyText": "Should this be a delegating file system as well? Although we pass in fs, there are two filesystems being invoked, one that is passed in for calls to MetadataCacheManager and another for most operations (fall back to BaseFileSystem implementation).", "author": "calvinjia", "createdAt": "2020-02-03T21:30:40Z", "path": "core/client/fs/src/main/java/alluxio/client/file/MetadataCachingBaseFileSystem.java", "diffHunk": "@@ -12,128 +12,53 @@\n package alluxio.client.file;\n \n import alluxio.AlluxioURI;\n-import alluxio.conf.AlluxioConfiguration;\n-import alluxio.conf.PropertyKey;\n import alluxio.exception.AlluxioException;\n import alluxio.exception.FileDoesNotExistException;\n-import alluxio.grpc.Bits;\n import alluxio.grpc.GetStatusPOptions;\n import alluxio.grpc.ListStatusPOptions;\n-import alluxio.util.FileSystemOptions;\n-import alluxio.util.ThreadUtils;\n \n-import com.google.common.annotations.VisibleForTesting;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import com.google.common.io.Closer;\n \n import java.io.IOException;\n import java.util.List;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.RejectedExecutionException;\n-import java.util.concurrent.SynchronousQueue;\n-import java.util.concurrent.ThreadPoolExecutor;\n-import java.util.concurrent.TimeUnit;\n-\n-import javax.annotation.concurrent.ThreadSafe;\n \n /**\n  * FileSystem implementation with the capability of caching metadata of paths.\n  */\n-@ThreadSafe\n public class MetadataCachingBaseFileSystem extends BaseFileSystem {\n-  private static final Logger LOG = LoggerFactory.getLogger(BaseFileSystem.class);\n-  private static final int THREAD_KEEPALIVE_SECOND = 60;\n-  private static final int THREAD_TERMINATION_TIMEOUT_MS = 10000;\n-\n-  private final MetadataCache mMetadataCache;\n-  private final ExecutorService mAccessTimeUpdater;\n+  private final MetadataCacheManager mMetadataCacheManager;\n+  private final FileSystemContext mFsContext;\n+  private final Closer mCloser;\n \n   /**\n+   * @param fs delegated file system\n    * @param context the fs context\n    */\n-  public MetadataCachingBaseFileSystem(FileSystemContext context) {\n+  public MetadataCachingBaseFileSystem(FileSystem fs, FileSystemContext context) {", "originalCommit": "491c3244b3888c13f70196e9044fb0018b23b925", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "70e795faf4652055668932e25efb259b74e05157", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/MetadataCachingBaseFileSystem.java b/core/client/fs/src/main/java/alluxio/client/file/MetadataCachingBaseFileSystem.java\nindex 66174a6d0d..4b74ad86a2 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/MetadataCachingBaseFileSystem.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/MetadataCachingBaseFileSystem.java\n\n@@ -12,53 +12,128 @@\n package alluxio.client.file;\n \n import alluxio.AlluxioURI;\n+import alluxio.conf.AlluxioConfiguration;\n+import alluxio.conf.PropertyKey;\n import alluxio.exception.AlluxioException;\n import alluxio.exception.FileDoesNotExistException;\n+import alluxio.grpc.Bits;\n import alluxio.grpc.GetStatusPOptions;\n import alluxio.grpc.ListStatusPOptions;\n+import alluxio.util.FileSystemOptions;\n+import alluxio.util.ThreadUtils;\n \n-import com.google.common.io.Closer;\n+import com.google.common.annotations.VisibleForTesting;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n \n /**\n  * FileSystem implementation with the capability of caching metadata of paths.\n  */\n+@ThreadSafe\n public class MetadataCachingBaseFileSystem extends BaseFileSystem {\n-  private final MetadataCacheManager mMetadataCacheManager;\n-  private final FileSystemContext mFsContext;\n-  private final Closer mCloser;\n+  private static final Logger LOG = LoggerFactory.getLogger(BaseFileSystem.class);\n+  private static final int THREAD_KEEPALIVE_SECOND = 60;\n+  private static final int THREAD_TERMINATION_TIMEOUT_MS = 10000;\n+\n+  private final MetadataCache mMetadataCache;\n+  private final ExecutorService mAccessTimeUpdater;\n \n   /**\n-   * @param fs delegated file system\n    * @param context the fs context\n    */\n-  public MetadataCachingBaseFileSystem(FileSystem fs, FileSystemContext context) {\n+  public MetadataCachingBaseFileSystem(FileSystemContext context) {\n     super(context);\n-    mCloser = Closer.create();\n-    mFsContext = context;\n-    mMetadataCacheManager = new MetadataCacheManager(fs, context);\n-    mCloser.register(fs);\n-    mCloser.register(mMetadataCacheManager);\n+\n+    int maxSize = mFsContext.getClusterConf().getInt(PropertyKey.USER_METADATA_CACHE_MAX_SIZE);\n+    long expirationTimeMs = mFsContext.getClusterConf()\n+        .getMs(PropertyKey.USER_METADATA_CACHE_EXPIRATION_TIME);\n+    mMetadataCache = new MetadataCache(maxSize, expirationTimeMs);\n+    int masterClientThreads = mFsContext.getClusterConf()\n+        .getInt(PropertyKey.USER_FILE_MASTER_CLIENT_POOL_SIZE_MAX);\n+    // At a time point, there are at most the same number of concurrent master clients that\n+    // asynchronously update access time.\n+    mAccessTimeUpdater = new ThreadPoolExecutor(0, masterClientThreads, THREAD_KEEPALIVE_SECOND,\n+        TimeUnit.SECONDS, new SynchronousQueue<>());\n   }\n \n   @Override\n   public URIStatus getStatus(AlluxioURI path, GetStatusPOptions options)\n       throws FileDoesNotExistException, IOException, AlluxioException {\n-    FileSystemUtils.checkUri(mFsContext, path);\n-    return mMetadataCacheManager.getStatus(path, options);\n+    checkUri(path);\n+    URIStatus status = mMetadataCache.get(path);\n+    if (status == null) {\n+      status = super.getStatus(path, options);\n+      mMetadataCache.put(path, status);\n+    } else if (options.getUpdateTimestamps()) {\n+      // Asynchronously send an RPC to master to update the access time.\n+      // Otherwise, if we need to synchronously send RPC to master to do this,\n+      // caching the status does not bring any benefit.\n+      asyncUpdateFileAccessTime(path);\n+    }\n+    return status;\n   }\n \n   @Override\n   public List<URIStatus> listStatus(AlluxioURI path, ListStatusPOptions options)\n       throws FileDoesNotExistException, IOException, AlluxioException {\n-    FileSystemUtils.checkUri(mFsContext, path);\n-    return mMetadataCacheManager.listStatus(path, options);\n+    checkUri(path);\n+\n+    if (options.getRecursive()) {\n+      // Do not cache results of recursive list status,\n+      // because some results might be cached multiple times.\n+      // Otherwise, needs more complicated logic inside the cache,\n+      // that might not worth the effort of caching.\n+      return super.listStatus(path, options);\n+    }\n+\n+    List<URIStatus> statuses = mMetadataCache.listStatus(path);\n+    if (statuses == null) {\n+      statuses = super.listStatus(path, options);\n+      mMetadataCache.put(path, statuses);\n+    }\n+    return statuses;\n+  }\n+\n+  /**\n+   * Asynchronously update file's last access time.\n+   *\n+   * @param path the path to the file\n+   */\n+  @VisibleForTesting\n+  public void asyncUpdateFileAccessTime(AlluxioURI path) {\n+    try {\n+      mAccessTimeUpdater.submit(() -> {\n+        try {\n+          AlluxioConfiguration conf = mFsContext.getPathConf(path);\n+          GetStatusPOptions getStatusOptions = FileSystemOptions.getStatusDefaults(conf).toBuilder()\n+              .setAccessMode(Bits.READ)\n+              .setUpdateTimestamps(true)\n+              .build();\n+          super.getStatus(path, getStatusOptions);\n+        } catch (IOException | AlluxioException e) {\n+          LOG.error(\"Failed to update access time for \" + path, e);\n+        }\n+      });\n+    } catch (RejectedExecutionException e) {\n+      LOG.warn(\"Failed to submit a task to update access time for {}: {}\", path, e.toString());\n+    }\n   }\n \n   @Override\n   public synchronized void close() throws IOException {\n-    mCloser.close();\n+    if (!mClosed) {\n+      ThreadUtils.shutdownAndAwaitTermination(mAccessTimeUpdater, THREAD_TERMINATION_TIMEOUT_MS);\n+      super.close();\n+    }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM1MjE0Mw==", "url": "https://github.com/Alluxio/alluxio/pull/10779#discussion_r374352143", "bodyText": "Instead of having a separate MetadataCachingLocalCacheFileSystem, can we compose them like LocalCacheFileSystem(MetadataCachingBaseFileSystem)?", "author": "calvinjia", "createdAt": "2020-02-03T21:31:17Z", "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystem.java", "diffHunk": "@@ -145,10 +147,15 @@ public static FileSystem create(FileSystemContext context) {\n       Object[] ctorArgs = new Object[] {context};\n       FileSystem fs =\n           (FileSystem) CommonUtils.createNewClassInstance(fsClass, ctorArgClasses, ctorArgs);\n-      if (context.getClusterConf().getBoolean(PropertyKey.USER_LOCAL_CACHE_ENABLED)) {\n-        return new LocalCacheFileSystem(fs);\n+\n+      boolean dataCache = context.getClusterConf().getBoolean(PropertyKey.USER_LOCAL_CACHE_ENABLED);\n+      boolean metadataCache =\n+          context.getClusterConf().getBoolean(PropertyKey.USER_METADATA_CACHE_ENABLED);\n+      if (dataCache) {\n+        return metadataCache ? new MetadataCachingLocalCacheFileSystem(fs, context)\n+            : new LocalCacheFileSystem(fs);", "originalCommit": "491c3244b3888c13f70196e9044fb0018b23b925", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c0bc328b7528007e54c43a0d5b50a73423ecc9fb", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/FileSystem.java b/core/client/fs/src/main/java/alluxio/client/file/FileSystem.java\nindex 2fb05434d3..90602d9c59 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/FileSystem.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/FileSystem.java\n\n@@ -142,18 +142,17 @@ public interface FileSystem extends Closeable {\n           LOG.debug(\"{}={} ({})\", key.getName(), value, source);\n         }\n       }\n-      Class fsClass = context.getClusterConf().getClass(PropertyKey.USER_FILESYSTEM_CLASS);\n+      Class fsClass = conf.getClass(PropertyKey.USER_FILESYSTEM_CLASS);\n       Class[] ctorArgClasses = new Class[] {FileSystemContext.class};\n       Object[] ctorArgs = new Object[] {context};\n       FileSystem fs =\n           (FileSystem) CommonUtils.createNewClassInstance(fsClass, ctorArgClasses, ctorArgs);\n-\n-      boolean dataCache = context.getClusterConf().getBoolean(PropertyKey.USER_LOCAL_CACHE_ENABLED);\n+      boolean dataCache = conf.getBoolean(PropertyKey.USER_LOCAL_CACHE_ENABLED);\n       boolean metadataCache =\n-          context.getClusterConf().getBoolean(PropertyKey.USER_METADATA_CACHE_ENABLED);\n+          conf.getBoolean(PropertyKey.USER_METADATA_CACHE_ENABLED);\n       if (dataCache) {\n         return metadataCache ? new MetadataCachingLocalCacheFileSystem(fs, context)\n-            : new LocalCacheFileSystem(fs);\n+            : new LocalCacheFileSystem(fs, conf);\n       } else {\n         return metadataCache ? new MetadataCachingBaseFileSystem(fs, context) : fs;\n       }\n"}}, {"oid": "394447426bbf167aff7331059757444444114cdf", "url": "https://github.com/Alluxio/alluxio/commit/394447426bbf167aff7331059757444444114cdf", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into metadata_caching", "committedDate": "2020-02-11T21:21:29Z", "type": "commit"}, {"oid": "c0bc328b7528007e54c43a0d5b50a73423ecc9fb", "url": "https://github.com/Alluxio/alluxio/commit/c0bc328b7528007e54c43a0d5b50a73423ecc9fb", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into metadata_caching", "committedDate": "2020-02-16T05:24:38Z", "type": "commit"}, {"oid": "c0bc328b7528007e54c43a0d5b50a73423ecc9fb", "url": "https://github.com/Alluxio/alluxio/commit/c0bc328b7528007e54c43a0d5b50a73423ecc9fb", "message": "Merge branch 'master' of github.com:Alluxio/alluxio into metadata_caching", "committedDate": "2020-02-16T05:24:38Z", "type": "forcePushed"}, {"oid": "70e795faf4652055668932e25efb259b74e05157", "url": "https://github.com/Alluxio/alluxio/commit/70e795faf4652055668932e25efb259b74e05157", "message": "Address comments", "committedDate": "2020-02-18T07:50:53Z", "type": "commit"}, {"oid": "49b37b8169d42455f8e022a6d0184f1dc266224a", "url": "https://github.com/Alluxio/alluxio/commit/49b37b8169d42455f8e022a6d0184f1dc266224a", "message": "Fix check style", "committedDate": "2020-02-18T08:08:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUyNDIxNQ==", "url": "https://github.com/Alluxio/alluxio/pull/10779#discussion_r380524215", "bodyText": "is it okay to get rid of this flag here? @calvinjia", "author": "apc999", "createdAt": "2020-02-18T08:39:08Z", "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystem.java", "diffHunk": "@@ -141,16 +140,12 @@ public static FileSystem create(FileSystemContext context) {\n           LOG.debug(\"{}={} ({})\", key.getName(), value, source);\n         }\n       }\n-      Class fsClass = conf.getClass(PropertyKey.USER_FILESYSTEM_CLASS);", "originalCommit": "49b37b8169d42455f8e022a6d0184f1dc266224a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4NzQxNQ==", "url": "https://github.com/Alluxio/alluxio/pull/10779#discussion_r380887415", "bodyText": "Looks good", "author": "calvinjia", "createdAt": "2020-02-18T19:30:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUyNDIxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9e5c0f5b3c3c8ac51344b390023958f7578f105c", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/FileSystem.java b/core/client/fs/src/main/java/alluxio/client/file/FileSystem.java\nindex 4d0a091dad..64fbfad9a4 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/FileSystem.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/FileSystem.java\n\n@@ -140,9 +140,9 @@ public interface FileSystem extends Closeable {\n           LOG.debug(\"{}={} ({})\", key.getName(), value, source);\n         }\n       }\n-      FileSystem fs = (conf.getBoolean(PropertyKey.USER_METADATA_CACHE_ENABLED))\n+      FileSystem fs = conf.getBoolean(PropertyKey.USER_METADATA_CACHE_ENABLED)\n           ? new MetadataCachingBaseFileSystem(context) : new BaseFileSystem(context);\n-      if (conf.getBoolean(PropertyKey.USER_LOCAL_CACHE_ENABLED)) {\n+      if (conf.getBoolean(PropertyKey.USER_CLIENT_CACHE_ENABLED)) {\n         return new LocalCacheFileSystem(fs, conf);\n       }\n       return fs;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzMDMxOA==", "url": "https://github.com/Alluxio/alluxio/pull/10779#discussion_r380930318", "bodyText": "Are the parens necessary?", "author": "calvinjia", "createdAt": "2020-02-18T20:57:06Z", "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystem.java", "diffHunk": "@@ -141,16 +140,12 @@ public static FileSystem create(FileSystemContext context) {\n           LOG.debug(\"{}={} ({})\", key.getName(), value, source);\n         }\n       }\n-      Class fsClass = conf.getClass(PropertyKey.USER_FILESYSTEM_CLASS);\n-      Class[] ctorArgClasses = new Class[] {FileSystemContext.class};\n-      Object[] ctorArgs = new Object[] {context};\n-      FileSystem fs =\n-          (FileSystem) CommonUtils.createNewClassInstance(fsClass, ctorArgClasses, ctorArgs);\n+      FileSystem fs = (conf.getBoolean(PropertyKey.USER_METADATA_CACHE_ENABLED))", "originalCommit": "49b37b8169d42455f8e022a6d0184f1dc266224a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNDgzOQ==", "url": "https://github.com/Alluxio/alluxio/pull/10779#discussion_r380934839", "bodyText": "removed", "author": "apc999", "createdAt": "2020-02-18T21:06:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzMDMxOA=="}], "type": "inlineReview", "revised_code": {"commit": "9e5c0f5b3c3c8ac51344b390023958f7578f105c", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/FileSystem.java b/core/client/fs/src/main/java/alluxio/client/file/FileSystem.java\nindex 4d0a091dad..64fbfad9a4 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/FileSystem.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/FileSystem.java\n\n@@ -140,9 +140,9 @@ public interface FileSystem extends Closeable {\n           LOG.debug(\"{}={} ({})\", key.getName(), value, source);\n         }\n       }\n-      FileSystem fs = (conf.getBoolean(PropertyKey.USER_METADATA_CACHE_ENABLED))\n+      FileSystem fs = conf.getBoolean(PropertyKey.USER_METADATA_CACHE_ENABLED)\n           ? new MetadataCachingBaseFileSystem(context) : new BaseFileSystem(context);\n-      if (conf.getBoolean(PropertyKey.USER_LOCAL_CACHE_ENABLED)) {\n+      if (conf.getBoolean(PropertyKey.USER_CLIENT_CACHE_ENABLED)) {\n         return new LocalCacheFileSystem(fs, conf);\n       }\n       return fs;\n"}}, {"oid": "9e5c0f5b3c3c8ac51344b390023958f7578f105c", "url": "https://github.com/Alluxio/alluxio/commit/9e5c0f5b3c3c8ac51344b390023958f7578f105c", "message": "Address comments", "committedDate": "2020-02-18T21:14:32Z", "type": "commit"}, {"oid": "73320303046d514572305ba810927179e7b97fb2", "url": "https://github.com/Alluxio/alluxio/commit/73320303046d514572305ba810927179e7b97fb2", "message": "Fix build", "committedDate": "2020-02-18T22:02:19Z", "type": "commit"}]}