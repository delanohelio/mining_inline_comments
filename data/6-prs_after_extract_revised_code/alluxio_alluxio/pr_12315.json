{"pr_number": 12315, "pr_title": "Add client-side API to iterate on results of listStatus", "pr_createdAt": "2020-10-15T08:30:50Z", "pr_url": "https://github.com/Alluxio/alluxio/pull/12315", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc4MzMyOA==", "url": "https://github.com/Alluxio/alluxio/pull/12315#discussion_r505783328", "bodyText": "Does listStatus just return the entire array/list? How does this stream anything when the result is already just a list/array?", "author": "gpang", "createdAt": "2020-10-15T19:20:26Z", "path": "core/client/fs/src/main/java/alluxio/client/file/RetryHandlingFileSystemMasterClient.java", "diffHunk": "@@ -234,6 +238,21 @@ public long getNewBlockIdForFile(final AlluxioURI path)\n     }, RPC_LOG, \"ListStatus\", \"path=%s,options=%s\", path, options);\n   }\n \n+  @Override\n+  public Stream<URIStatus> listStatusInStream(\n+      final AlluxioURI path, final ListStatusPOptions options)\n+      throws AlluxioStatusException {\n+    return retryRPC(() ->\n+      StreamSupport.stream(Spliterators.spliteratorUnknownSize(\n+          mClient.listStatus(ListStatusPRequest.newBuilder().setPath(getTransportPath(path))", "originalCommit": "40eee9f76dc9d6bd69d453e63f4fd19a33c0695f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc5Njk4Nw==", "url": "https://github.com/Alluxio/alluxio/pull/12315#discussion_r505796987", "bodyText": "listStatus returns an iterator where each element of this iterator is a list. This is the recommended way to implement streaming server gRPC calls. e.g., the RPC returns  something like [a,b, ...], [c,d, ...] depending on the batch size.\nNote that, in the original implementation of client-side listStatus\nhttps://github.com/Alluxio/alluxio/pull/12315/files#diff-f0b3f5c51c2e3e48833beccd832c5a63de3d74b8d195d9da564c99c299f50288R229-R237\nWe create an extra list and add each element in [a,b,...]  and [c,d,...] to this list before return to cli, which increased the resource overhead as well as latency.\n@gpang", "author": "apc999", "createdAt": "2020-10-15T19:45:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc4MzMyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgwMTk5MA==", "url": "https://github.com/Alluxio/alluxio/pull/12315#discussion_r505801990", "bodyText": "In other words, Alluxio master is already streaming results to client. however, we are not taking advantage of this streaming API given that in RetryHandlingFileSystemMasterClient.java, we will simply wait until all results are streamed from master before returning to client API callers, causing overhead in resource (e.g., memory pressure) and latency. Now we directly wrap the stream of status (may still in transmission) to client so they are able to proceed with partially transmitted results.", "author": "apc999", "createdAt": "2020-10-15T19:55:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc4MzMyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgwNzYzNg==", "url": "https://github.com/Alluxio/alluxio/pull/12315#discussion_r505807636", "bodyText": "Ahhh, I see. I didn't realize that listStatus returned an Iterator.", "author": "gpang", "createdAt": "2020-10-15T20:06:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc4MzMyOA=="}], "type": "inlineReview", "revised_code": {"commit": "d9b2a3e6b05f0b6cbd77d68ec2c4ac334c85ad72", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/RetryHandlingFileSystemMasterClient.java b/core/client/fs/src/main/java/alluxio/client/file/RetryHandlingFileSystemMasterClient.java\nindex 92029497fe..db07f3ce8a 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/RetryHandlingFileSystemMasterClient.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/RetryHandlingFileSystemMasterClient.java\n\n@@ -242,15 +242,17 @@ public final class RetryHandlingFileSystemMasterClient extends AbstractMasterCli\n   public Stream<URIStatus> listStatusInStream(\n       final AlluxioURI path, final ListStatusPOptions options)\n       throws AlluxioStatusException {\n-    return retryRPC(() ->\n-      StreamSupport.stream(Spliterators.spliteratorUnknownSize(\n-          mClient.listStatus(ListStatusPRequest.newBuilder().setPath(getTransportPath(path))\n-              .setOptions(options).build()), Spliterator.ORDERED), false)\n-          .flatMap(\n-              pListStatusResponse -> pListStatusResponse.getFileInfosList()\n-                  .stream()\n-                  .map(pFileInfo -> new URIStatus(GrpcUtils.fromProto(pFileInfo))))\n-    , RPC_LOG, \"ListStatus\", \"path=%s,options=%s\", path, options);\n+    return retryRPC(\n+        () -> StreamSupport\n+            .stream(\n+                Spliterators.spliteratorUnknownSize(\n+                    mClient.listStatus(ListStatusPRequest.newBuilder()\n+                        .setPath(getTransportPath(path)).setOptions(options).build()),\n+                    Spliterator.ORDERED),\n+                false)\n+            .flatMap(pListStatusResponse -> pListStatusResponse.getFileInfosList().stream()\n+                .map(pFileInfo -> new URIStatus(GrpcUtils.fromProto(pFileInfo)))),\n+        RPC_LOG, \"ListStatus\", \"path=%s,options=%s\", path, options);\n   }\n \n   @Override\n"}}, {"oid": "d9b2a3e6b05f0b6cbd77d68ec2c4ac334c85ad72", "url": "https://github.com/Alluxio/alluxio/commit/d9b2a3e6b05f0b6cbd77d68ec2c4ac334c85ad72", "message": "Return stream rather than list of URIStatus", "committedDate": "2020-10-15T19:39:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NjExNg==", "url": "https://github.com/Alluxio/alluxio/pull/12315#discussion_r505886116", "bodyText": "I think these comments are stale, mentioning lists?\nAlso, is this one now preferred? Maybe we should comment on the differences/tradeoffs between this one and the standard listStatus", "author": "gpang", "createdAt": "2020-10-15T21:52:48Z", "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystem.java", "diffHunk": "@@ -362,6 +363,35 @@ URIStatus getStatus(AlluxioURI path, GetStatusPOptions options)\n   List<URIStatus> listStatus(AlluxioURI path, ListStatusPOptions options)\n       throws FileDoesNotExistException, IOException, AlluxioException;\n \n+  /**\n+   * If the path is a directory, returns the {@link URIStatus} of all the direct entries in it.\n+   * Otherwise returns a list with a single {@link URIStatus} element for the file.", "originalCommit": "d9b2a3e6b05f0b6cbd77d68ec2c4ac334c85ad72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk1NTM2OA==", "url": "https://github.com/Alluxio/alluxio/pull/12315#discussion_r505955368", "bodyText": "updated", "author": "apc999", "createdAt": "2020-10-16T01:11:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NjExNg=="}], "type": "inlineReview", "revised_code": {"commit": "7b314a23b9f325eb01b0d811f025b64ba35dfe6e", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/FileSystem.java b/core/client/fs/src/main/java/alluxio/client/file/FileSystem.java\nindex 0a456239e1..fd8fa6b5c6 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/FileSystem.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/FileSystem.java\n\n@@ -360,37 +361,41 @@ public interface FileSystem extends Closeable {\n    *         which are children of the given path\n    * @throws FileDoesNotExistException if the given path does not exist\n    */\n-  List<URIStatus> listStatus(AlluxioURI path, ListStatusPOptions options)\n-      throws FileDoesNotExistException, IOException, AlluxioException;\n+  default List<URIStatus> listStatus(AlluxioURI path, ListStatusPOptions options)\n+      throws FileDoesNotExistException, IOException, AlluxioException {\n+    return listStatusAsStream(path, options).collect(Collectors.toList());\n+  }\n \n   /**\n-   * If the path is a directory, returns the {@link URIStatus} of all the direct entries in it.\n-   * Otherwise returns a list with a single {@link URIStatus} element for the file.\n+   * If the path is a directory, returns a stream of {@link URIStatus} of all the direct entries in\n+   * it. Otherwise returns a stream with a single {@link URIStatus} element for the file.\n+   * This method is preferred when listing directories with a large number of files or sub\n+   * directories inside.\n    *\n    * @param path the path to list information about\n-   * @return a list of {@link URIStatus}s containing information about the files and directories\n+   * @return a stream of {@link URIStatus}s containing information about the files and directories\n    *         which are children of the given path\n    * @throws FileDoesNotExistException if the given path does not exist\n    */\n-  default Stream<URIStatus> listStatusInStream(AlluxioURI path)\n+  default Stream<URIStatus> listStatusAsStream(AlluxioURI path)\n       throws FileDoesNotExistException, IOException, AlluxioException {\n-    return listStatus(path, ListStatusPOptions.getDefaultInstance()).stream();\n+    return listStatusAsStream(path, ListStatusPOptions.getDefaultInstance());\n   }\n \n   /**\n-   * If the path is a directory, returns the {@link URIStatus} of all the direct entries in it.\n-   * Otherwise returns a list with a single {@link URIStatus} element for the file.\n+   * If the path is a directory, returns a stream of {@link URIStatus} of all the direct entries in\n+   * it. Otherwise returns a stream with a single {@link URIStatus} element for the file.\n+   * This method is preferred when listing directories with a large number of files or sub\n+   * directories inside.\n    *\n    * @param path the path to list information about\n    * @param options options to associate with this operation\n-   * @return a list of {@link URIStatus}s containing information about the files and directories\n+   * @return a stream of {@link URIStatus}s containing information about the files and directories\n    *         which are children of the given path\n    * @throws FileDoesNotExistException if the given path does not exist\n    */\n-  default Stream<URIStatus> listStatusInStream(AlluxioURI path, ListStatusPOptions options)\n-      throws FileDoesNotExistException, IOException, AlluxioException {\n-    return listStatus(path, options).stream();\n-  }\n+  Stream<URIStatus> listStatusAsStream(AlluxioURI path, ListStatusPOptions options)\n+      throws FileDoesNotExistException, IOException, AlluxioException;\n \n   /**\n    * Convenience method for {@link #mount(AlluxioURI, AlluxioURI, MountPOptions)} with default\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NjE2OA==", "url": "https://github.com/Alluxio/alluxio/pull/12315#discussion_r505886168", "bodyText": "I think these comments are stale, mentioning lists?", "author": "gpang", "createdAt": "2020-10-15T21:52:54Z", "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystem.java", "diffHunk": "@@ -362,6 +363,35 @@ URIStatus getStatus(AlluxioURI path, GetStatusPOptions options)\n   List<URIStatus> listStatus(AlluxioURI path, ListStatusPOptions options)\n       throws FileDoesNotExistException, IOException, AlluxioException;\n \n+  /**\n+   * If the path is a directory, returns the {@link URIStatus} of all the direct entries in it.\n+   * Otherwise returns a list with a single {@link URIStatus} element for the file.\n+   *\n+   * @param path the path to list information about\n+   * @return a list of {@link URIStatus}s containing information about the files and directories\n+   *         which are children of the given path\n+   * @throws FileDoesNotExistException if the given path does not exist\n+   */\n+  default Stream<URIStatus> listStatusInStream(AlluxioURI path)\n+      throws FileDoesNotExistException, IOException, AlluxioException {\n+    return listStatus(path, ListStatusPOptions.getDefaultInstance()).stream();\n+  }\n+\n+  /**\n+   * If the path is a directory, returns the {@link URIStatus} of all the direct entries in it.\n+   * Otherwise returns a list with a single {@link URIStatus} element for the file.", "originalCommit": "d9b2a3e6b05f0b6cbd77d68ec2c4ac334c85ad72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk1NTQ0MQ==", "url": "https://github.com/Alluxio/alluxio/pull/12315#discussion_r505955441", "bodyText": "updated", "author": "apc999", "createdAt": "2020-10-16T01:11:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NjE2OA=="}], "type": "inlineReview", "revised_code": {"commit": "7b314a23b9f325eb01b0d811f025b64ba35dfe6e", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/FileSystem.java b/core/client/fs/src/main/java/alluxio/client/file/FileSystem.java\nindex 0a456239e1..fd8fa6b5c6 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/FileSystem.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/FileSystem.java\n\n@@ -360,37 +361,41 @@ public interface FileSystem extends Closeable {\n    *         which are children of the given path\n    * @throws FileDoesNotExistException if the given path does not exist\n    */\n-  List<URIStatus> listStatus(AlluxioURI path, ListStatusPOptions options)\n-      throws FileDoesNotExistException, IOException, AlluxioException;\n+  default List<URIStatus> listStatus(AlluxioURI path, ListStatusPOptions options)\n+      throws FileDoesNotExistException, IOException, AlluxioException {\n+    return listStatusAsStream(path, options).collect(Collectors.toList());\n+  }\n \n   /**\n-   * If the path is a directory, returns the {@link URIStatus} of all the direct entries in it.\n-   * Otherwise returns a list with a single {@link URIStatus} element for the file.\n+   * If the path is a directory, returns a stream of {@link URIStatus} of all the direct entries in\n+   * it. Otherwise returns a stream with a single {@link URIStatus} element for the file.\n+   * This method is preferred when listing directories with a large number of files or sub\n+   * directories inside.\n    *\n    * @param path the path to list information about\n-   * @return a list of {@link URIStatus}s containing information about the files and directories\n+   * @return a stream of {@link URIStatus}s containing information about the files and directories\n    *         which are children of the given path\n    * @throws FileDoesNotExistException if the given path does not exist\n    */\n-  default Stream<URIStatus> listStatusInStream(AlluxioURI path)\n+  default Stream<URIStatus> listStatusAsStream(AlluxioURI path)\n       throws FileDoesNotExistException, IOException, AlluxioException {\n-    return listStatus(path, ListStatusPOptions.getDefaultInstance()).stream();\n+    return listStatusAsStream(path, ListStatusPOptions.getDefaultInstance());\n   }\n \n   /**\n-   * If the path is a directory, returns the {@link URIStatus} of all the direct entries in it.\n-   * Otherwise returns a list with a single {@link URIStatus} element for the file.\n+   * If the path is a directory, returns a stream of {@link URIStatus} of all the direct entries in\n+   * it. Otherwise returns a stream with a single {@link URIStatus} element for the file.\n+   * This method is preferred when listing directories with a large number of files or sub\n+   * directories inside.\n    *\n    * @param path the path to list information about\n    * @param options options to associate with this operation\n-   * @return a list of {@link URIStatus}s containing information about the files and directories\n+   * @return a stream of {@link URIStatus}s containing information about the files and directories\n    *         which are children of the given path\n    * @throws FileDoesNotExistException if the given path does not exist\n    */\n-  default Stream<URIStatus> listStatusInStream(AlluxioURI path, ListStatusPOptions options)\n-      throws FileDoesNotExistException, IOException, AlluxioException {\n-    return listStatus(path, options).stream();\n-  }\n+  Stream<URIStatus> listStatusAsStream(AlluxioURI path, ListStatusPOptions options)\n+      throws FileDoesNotExistException, IOException, AlluxioException;\n \n   /**\n    * Convenience method for {@link #mount(AlluxioURI, AlluxioURI, MountPOptions)} with default\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4ODEwNA==", "url": "https://github.com/Alluxio/alluxio/pull/12315#discussion_r505888104", "bodyText": "I'm not sure what is best practice, but should we be returning a Iterator, Iterable or Stream?\nI'm also not sure about the name. Maybe some alternatives are listStatusStream or listStatusAsStream?", "author": "gpang", "createdAt": "2020-10-15T21:57:47Z", "path": "core/client/fs/src/main/java/alluxio/client/file/FileSystemMasterClient.java", "diffHunk": "@@ -154,6 +155,15 @@ void createDirectory(AlluxioURI path, CreateDirectoryPOptions options)\n   List<URIStatus> listStatus(AlluxioURI path, ListStatusPOptions options)\n       throws AlluxioStatusException;\n \n+  /**\n+   * @param path the path to list\n+   * @param options the listStatus options\n+   * @return the stream of file information for the given path\n+   * @throws NotFoundException if the path does not exist\n+   */\n+  Stream<URIStatus> listStatusInStream(AlluxioURI path, ListStatusPOptions options)", "originalCommit": "d9b2a3e6b05f0b6cbd77d68ec2c4ac334c85ad72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkzNTg4MA==", "url": "https://github.com/Alluxio/alluxio/pull/12315#discussion_r505935880", "bodyText": "Stream seems more favorable as I did some research\nlistStatusAsStream looks good to me", "author": "apc999", "createdAt": "2020-10-16T00:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4ODEwNA=="}], "type": "inlineReview", "revised_code": {"commit": "7b314a23b9f325eb01b0d811f025b64ba35dfe6e", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/FileSystemMasterClient.java b/core/client/fs/src/main/java/alluxio/client/file/FileSystemMasterClient.java\nindex fa64ee3236..bb70e72f90 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/FileSystemMasterClient.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/FileSystemMasterClient.java\n\n@@ -161,7 +161,7 @@ public interface FileSystemMasterClient extends Client {\n    * @return the stream of file information for the given path\n    * @throws NotFoundException if the path does not exist\n    */\n-  Stream<URIStatus> listStatusInStream(AlluxioURI path, ListStatusPOptions options)\n+  Stream<URIStatus> listStatusAsStream(AlluxioURI path, ListStatusPOptions options)\n       throws AlluxioStatusException;\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4OTAwNw==", "url": "https://github.com/Alluxio/alluxio/pull/12315#discussion_r505889007", "bodyText": "ugh, this was ugly...", "author": "gpang", "createdAt": "2020-10-15T22:00:05Z", "path": "shell/src/main/java/alluxio/cli/fs/command/CountCommand.java", "diffHunk": "@@ -88,30 +102,6 @@ private void printInfo(boolean readable, long fileCount, long folderCount, long\n     System.out.format(format, fileCount, folderCount, formatFolderSize);\n   }\n \n-  private long[] countHelper(AlluxioURI path) throws AlluxioException, IOException {", "originalCommit": "d9b2a3e6b05f0b6cbd77d68ec2c4ac334c85ad72", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "373c4cd8b7d49acd3f9f25c904f7b051e77d39df", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/fs/command/CountCommand.java b/shell/src/main/java/alluxio/cli/fs/command/CountCommand.java\nindex 26420fff61..c280d6b2ac 100644\n--- a/shell/src/main/java/alluxio/cli/fs/command/CountCommand.java\n+++ b/shell/src/main/java/alluxio/cli/fs/command/CountCommand.java\n\n@@ -97,9 +100,8 @@ public final class CountCommand extends AbstractFileSystemCommand {\n   private void printInfo(boolean readable, long fileCount, long folderCount, long folderSize) {\n     String formatFolderSize = readable ? FormatUtils.getSizeFromBytes(folderSize)\n             : String.valueOf(folderSize);\n-    String format = \"%-25s%-25s%-15s%n\";\n-    System.out.format(format, \"File Count\", \"Folder Count\", \"Folder Size\");\n-    System.out.format(format, fileCount, folderCount, formatFolderSize);\n+    System.out.format(COUNT_FORMAT, \"File Count\", \"Folder Count\", \"Folder Size\");\n+    System.out.format(COUNT_FORMAT, fileCount, folderCount, formatFolderSize);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MjI1OQ==", "url": "https://github.com/Alluxio/alluxio/pull/12315#discussion_r505892259", "bodyText": "There is a tradeoff for this recursive listing. We could be locking more of the tree for longer with the recursive listing (especially if the sync interval was triggered)", "author": "gpang", "createdAt": "2020-10-15T22:08:31Z", "path": "shell/src/main/java/alluxio/cli/fs/command/DistributedLoadCommand.java", "diffHunk": "@@ -268,15 +269,13 @@ private void load(AlluxioURI filePath, int replication)\n       throws IOException, AlluxioException {\n     URIStatus status = mFileSystem.getStatus(filePath);\n     if (status.isFolder()) {\n-      List<URIStatus> statuses = mFileSystem.listStatus(filePath);\n-      for (URIStatus uriStatus : statuses) {\n-        if (uriStatus.isFolder()) {\n-          AlluxioURI subPath = new AlluxioURI(uriStatus.getPath());\n-          load(subPath, replication);\n-        } else {\n-          addJob(uriStatus, replication);\n-        }\n-      }\n+      ListStatusPOptions options = ListStatusPOptions.newBuilder().setRecursive(true).build();", "originalCommit": "d9b2a3e6b05f0b6cbd77d68ec2c4ac334c85ad72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk1ODQwMQ==", "url": "https://github.com/Alluxio/alluxio/pull/12315#discussion_r505958401", "bodyText": "but it is more 'correct' as you are guaranteed to have a 'snapshot' of a dir, versus dealing with contentions.\nalso this can save RPC cost on master side which IMO can offset the locking overhead.", "author": "apc999", "createdAt": "2020-10-16T01:16:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MjI1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7b314a23b9f325eb01b0d811f025b64ba35dfe6e", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/fs/command/DistributedLoadCommand.java b/shell/src/main/java/alluxio/cli/fs/command/DistributedLoadCommand.java\nindex fe1dcda12e..b830254a67 100644\n--- a/shell/src/main/java/alluxio/cli/fs/command/DistributedLoadCommand.java\n+++ b/shell/src/main/java/alluxio/cli/fs/command/DistributedLoadCommand.java\n\n@@ -270,7 +270,7 @@ public final class DistributedLoadCommand extends AbstractFileSystemCommand {\n     URIStatus status = mFileSystem.getStatus(filePath);\n     if (status.isFolder()) {\n       ListStatusPOptions options = ListStatusPOptions.newBuilder().setRecursive(true).build();\n-      mFileSystem.listStatusInStream(filePath, options).forEach(\n+      mFileSystem.listStatusAsStream(filePath, options).forEach(\n           uriStatus -> {\n             if (!uriStatus.isFolder()) {\n               addJob(uriStatus, replication);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MjUyNQ==", "url": "https://github.com/Alluxio/alluxio/pull/12315#discussion_r505892525", "bodyText": "spelling timestampFunction", "author": "gpang", "createdAt": "2020-10-15T22:09:13Z", "path": "shell/src/main/java/alluxio/cli/fs/command/LsCommand.java", "diffHunk": "@@ -259,12 +254,14 @@ public Options getOptions() {\n   private void ls(AlluxioURI path, boolean recursive, boolean forceLoadMetadata, boolean dirAsFile,\n       boolean hSize, boolean pinnedOnly, String sortField, boolean reverse, String timestampOption)\n       throws AlluxioException, IOException {\n+    Function<URIStatus, Long> timestampFuncion = TIMESTAMP_FIELDS.get(timestampOption);", "originalCommit": "d9b2a3e6b05f0b6cbd77d68ec2c4ac334c85ad72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk1OTY5NQ==", "url": "https://github.com/Alluxio/alluxio/pull/12315#discussion_r505959695", "bodyText": "done", "author": "apc999", "createdAt": "2020-10-16T01:19:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MjUyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "7b314a23b9f325eb01b0d811f025b64ba35dfe6e", "chunk": "diff --git a/shell/src/main/java/alluxio/cli/fs/command/LsCommand.java b/shell/src/main/java/alluxio/cli/fs/command/LsCommand.java\nindex db149fc008..f2ca8e8544 100644\n--- a/shell/src/main/java/alluxio/cli/fs/command/LsCommand.java\n+++ b/shell/src/main/java/alluxio/cli/fs/command/LsCommand.java\n\n@@ -254,14 +254,13 @@ public final class LsCommand extends AbstractFileSystemCommand {\n   private void ls(AlluxioURI path, boolean recursive, boolean forceLoadMetadata, boolean dirAsFile,\n       boolean hSize, boolean pinnedOnly, String sortField, boolean reverse, String timestampOption)\n       throws AlluxioException, IOException {\n-    Function<URIStatus, Long> timestampFuncion = TIMESTAMP_FIELDS.get(timestampOption);\n-\n+    Function<URIStatus, Long> timestampFunction = TIMESTAMP_FIELDS.get(timestampOption);\n     URIStatus pathStatus = mFileSystem.getStatus(path);\n     if (dirAsFile) {\n       if (pinnedOnly && !pathStatus.isPinned()) {\n         return;\n       }\n-      printLsString(pathStatus, hSize, timestampFuncion);\n+      printLsString(pathStatus, hSize, timestampFunction);\n       return;\n     }\n \n"}}, {"oid": "7b314a23b9f325eb01b0d811f025b64ba35dfe6e", "url": "https://github.com/Alluxio/alluxio/commit/7b314a23b9f325eb01b0d811f025b64ba35dfe6e", "message": "Return stream rather than list of URIStatus", "committedDate": "2020-10-16T01:18:47Z", "type": "forcePushed"}, {"oid": "3f25c7ce5af4d903f2249718afc641aea30aa20c", "url": "https://github.com/Alluxio/alluxio/commit/3f25c7ce5af4d903f2249718afc641aea30aa20c", "message": "Return stream rather than list of URIStatus", "committedDate": "2020-10-16T01:21:26Z", "type": "forcePushed"}, {"oid": "5f2fc684d048f7b9646670ef4fe3f3db1fa3d7b7", "url": "https://github.com/Alluxio/alluxio/commit/5f2fc684d048f7b9646670ef4fe3f3db1fa3d7b7", "message": "Return stream rather than list of URIStatus", "committedDate": "2020-10-16T01:22:05Z", "type": "forcePushed"}, {"oid": "8dacb7ded77fe23ff385609ccf41f3dc945d1f62", "url": "https://github.com/Alluxio/alluxio/commit/8dacb7ded77fe23ff385609ccf41f3dc945d1f62", "message": "Return stream rather than list of URIStatus", "committedDate": "2020-10-16T04:25:12Z", "type": "forcePushed"}, {"oid": "ef9969a4303e4a9c0fc2094cd24371c4f476f229", "url": "https://github.com/Alluxio/alluxio/commit/ef9969a4303e4a9c0fc2094cd24371c4f476f229", "message": "Return stream rather than list of URIStatus", "committedDate": "2020-10-16T05:53:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYzNTc0Mw==", "url": "https://github.com/Alluxio/alluxio/pull/12315#discussion_r506635743", "bodyText": "Do we want this to be \"ListStatusAsStream\"?", "author": "gpang", "createdAt": "2020-10-16T17:54:45Z", "path": "core/client/fs/src/main/java/alluxio/client/file/RetryHandlingFileSystemMasterClient.java", "diffHunk": "@@ -234,6 +238,23 @@ public long getNewBlockIdForFile(final AlluxioURI path)\n     }, RPC_LOG, \"ListStatus\", \"path=%s,options=%s\", path, options);\n   }\n \n+  @Override\n+  public Stream<URIStatus> listStatusAsStream(\n+      final AlluxioURI path, final ListStatusPOptions options)\n+      throws AlluxioStatusException {\n+    return retryRPC(\n+        () -> StreamSupport\n+            .stream(\n+                Spliterators.spliteratorUnknownSize(\n+                    mClient.listStatus(ListStatusPRequest.newBuilder()\n+                        .setPath(getTransportPath(path)).setOptions(options).build()),\n+                    Spliterator.ORDERED),\n+                false)\n+            .flatMap(pListStatusResponse -> pListStatusResponse.getFileInfosList().stream()\n+                .map(pFileInfo -> new URIStatus(GrpcUtils.fromProto(pFileInfo)))),\n+        RPC_LOG, \"ListStatus\", \"path=%s,options=%s\", path, options);", "originalCommit": "ef9969a4303e4a9c0fc2094cd24371c4f476f229", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxNDAyNw==", "url": "https://github.com/Alluxio/alluxio/pull/12315#discussion_r507514027", "bodyText": "the RPC is still the same. I was not adding any new RPCs", "author": "apc999", "createdAt": "2020-10-19T06:58:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYzNTc0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk5MTE4NA==", "url": "https://github.com/Alluxio/alluxio/pull/12315#discussion_r507991184", "bodyText": "ahhh, ok", "author": "gpang", "createdAt": "2020-10-19T18:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYzNTc0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "373c4cd8b7d49acd3f9f25c904f7b051e77d39df", "chunk": "diff --git a/core/client/fs/src/main/java/alluxio/client/file/RetryHandlingFileSystemMasterClient.java b/core/client/fs/src/main/java/alluxio/client/file/RetryHandlingFileSystemMasterClient.java\nindex 92b8fc64f6..0e74353ca6 100644\n--- a/core/client/fs/src/main/java/alluxio/client/file/RetryHandlingFileSystemMasterClient.java\n+++ b/core/client/fs/src/main/java/alluxio/client/file/RetryHandlingFileSystemMasterClient.java\n\n@@ -238,23 +260,6 @@ public final class RetryHandlingFileSystemMasterClient extends AbstractMasterCli\n     }, RPC_LOG, \"ListStatus\", \"path=%s,options=%s\", path, options);\n   }\n \n-  @Override\n-  public Stream<URIStatus> listStatusAsStream(\n-      final AlluxioURI path, final ListStatusPOptions options)\n-      throws AlluxioStatusException {\n-    return retryRPC(\n-        () -> StreamSupport\n-            .stream(\n-                Spliterators.spliteratorUnknownSize(\n-                    mClient.listStatus(ListStatusPRequest.newBuilder()\n-                        .setPath(getTransportPath(path)).setOptions(options).build()),\n-                    Spliterator.ORDERED),\n-                false)\n-            .flatMap(pListStatusResponse -> pListStatusResponse.getFileInfosList().stream()\n-                .map(pFileInfo -> new URIStatus(GrpcUtils.fromProto(pFileInfo)))),\n-        RPC_LOG, \"ListStatus\", \"path=%s,options=%s\", path, options);\n-  }\n-\n   @Override\n   public void mount(final AlluxioURI alluxioPath, final AlluxioURI ufsPath,\n       final MountPOptions options) throws AlluxioStatusException {\n"}}, {"oid": "373c4cd8b7d49acd3f9f25c904f7b051e77d39df", "url": "https://github.com/Alluxio/alluxio/commit/373c4cd8b7d49acd3f9f25c904f7b051e77d39df", "message": "Address comments", "committedDate": "2020-10-20T21:11:13Z", "type": "forcePushed"}, {"oid": "915a570b575be8bd104a5fec4644133156c7810e", "url": "https://github.com/Alluxio/alluxio/commit/915a570b575be8bd104a5fec4644133156c7810e", "message": "Add client-side API to iterate on results of listStatus", "committedDate": "2020-10-21T19:45:27Z", "type": "commit"}, {"oid": "915a570b575be8bd104a5fec4644133156c7810e", "url": "https://github.com/Alluxio/alluxio/commit/915a570b575be8bd104a5fec4644133156c7810e", "message": "Add client-side API to iterate on results of listStatus", "committedDate": "2020-10-21T19:45:27Z", "type": "forcePushed"}]}