{"pr_number": 1970, "pr_title": "HBASE-24625 AsyncFSWAL.getLogFileSizeIfBeingWritten does not return the expected synced file length.", "pr_createdAt": "2020-06-25T05:43:57Z", "pr_url": "https://github.com/apache/hbase/pull/1970", "timeline": [{"oid": "60abb396591039f211a000e641e849e59bb733fb", "url": "https://github.com/apache/hbase/commit/60abb396591039f211a000e641e849e59bb733fb", "message": "HBASE-24625", "committedDate": "2020-06-25T05:37:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUyMDkwOA==", "url": "https://github.com/apache/hbase/pull/1970#discussion_r445520908", "bodyText": "Use an AtomicLong?", "author": "Apache9", "createdAt": "2020-06-25T12:30:58Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/ProtobufLogWriter.java", "diffHunk": "@@ -46,6 +46,10 @@\n \n   protected FSDataOutputStream output;\n \n+  private volatile long syncedLength = 0;", "originalCommit": "60abb396591039f211a000e641e849e59bb733fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk0MzIyOQ==", "url": "https://github.com/apache/hbase/pull/1970#discussion_r445943229", "bodyText": "seems that using AtomicLong is unnecessary, because AtomicLong could not provide update if greater than semantics,  so I used synchronized keyword here when updating the syncedLength for simplicity", "author": "comnetwork", "createdAt": "2020-06-26T03:00:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUyMDkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2ODE4OQ==", "url": "https://github.com/apache/hbase/pull/1970#discussion_r447768189", "bodyText": "Use AtomicUtils.updateMax. It is a util class in hbase-common.", "author": "Apache9", "createdAt": "2020-06-30T15:20:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUyMDkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcxNTEwNg==", "url": "https://github.com/apache/hbase/pull/1970#discussion_r448715106", "bodyText": "Used AtomicUtils to replace synchronized, thank you very much.", "author": "comnetwork", "createdAt": "2020-07-02T02:35:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUyMDkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQzMDg3OQ==", "url": "https://github.com/apache/hbase/pull/1970#discussion_r450430879", "bodyText": "nit: why do we have AtomicUtils.updateMax? It seems getAndAccumulate is designed for this use case, i.e., syncedLength.getAndAccumulate(fsdos.getPos(), Math::max)", "author": "ndimiduk", "createdAt": "2020-07-06T19:20:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUyMDkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "969898c86e8bc7478a898b662191cf9e9134319d", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/ProtobufLogWriter.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/ProtobufLogWriter.java\nindex 86dbae86ed..e6854682d3 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/ProtobufLogWriter.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/ProtobufLogWriter.java\n\n@@ -46,9 +49,7 @@ public class ProtobufLogWriter extends AbstractProtobufLogWriter\n \n   protected FSDataOutputStream output;\n \n-  private volatile long syncedLength = 0;\n-\n-  private final Object syncedLengthMonitor = new Object();\n+  private AtomicLong syncedLength = new AtomicLong(0);\n \n   @Override\n   public void append(Entry entry) throws IOException {\n"}}, {"oid": "640aa1b6924bff8a7034694f3559d8fe48cb88c1", "url": "https://github.com/apache/hbase/commit/640aa1b6924bff8a7034694f3559d8fe48cb88c1", "message": "HBASE-24625", "committedDate": "2020-06-26T03:41:26Z", "type": "commit"}, {"oid": "de20b66764d995197cf05494dd89d41c48171d01", "url": "https://github.com/apache/hbase/commit/de20b66764d995197cf05494dd89d41c48171d01", "message": "Merge branch 'master' of https://github.com/comnetwork/hbase", "committedDate": "2020-06-26T03:47:40Z", "type": "commit"}, {"oid": "b9f15728a09879ffc59cf22a8a523e83dc3ec34e", "url": "https://github.com/apache/hbase/commit/b9f15728a09879ffc59cf22a8a523e83dc3ec34e", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-06-26T04:45:47Z", "type": "commit"}, {"oid": "3c68fa1d1d09c193c0e468fc4958bfe96e540bf2", "url": "https://github.com/apache/hbase/commit/3c68fa1d1d09c193c0e468fc4958bfe96e540bf2", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-07-02T02:16:45Z", "type": "commit"}, {"oid": "969898c86e8bc7478a898b662191cf9e9134319d", "url": "https://github.com/apache/hbase/commit/969898c86e8bc7478a898b662191cf9e9134319d", "message": "replace synchronized with AtomicUtils", "committedDate": "2020-07-02T02:27:07Z", "type": "commit"}, {"oid": "a31b8660d29e6b25921b40498441793e1fcb41c4", "url": "https://github.com/apache/hbase/commit/a31b8660d29e6b25921b40498441793e1fcb41c4", "message": "replace synchronized with AtomicUtils(addnum)", "committedDate": "2020-07-02T02:31:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5MTQ1Ng==", "url": "https://github.com/apache/hbase/pull/1970#discussion_r448991456", "bodyText": "Do not need to use pre here? These are just normal text.", "author": "Apache9", "createdAt": "2020-07-02T13:12:54Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALProvider.java", "diffHunk": "@@ -74,6 +74,22 @@\n \n   interface WriterBase extends Closeable {\n     long getLength();\n+    /**\n+     * <pre>", "originalCommit": "a31b8660d29e6b25921b40498441793e1fcb41c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwMjYyMw==", "url": "https://github.com/apache/hbase/pull/1970#discussion_r449602623", "bodyText": "ok, I would fix it.", "author": "comnetwork", "createdAt": "2020-07-03T14:10:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5MTQ1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f78c54a3e19bbbcfc9241b6e62b245d7368cd51d", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALProvider.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALProvider.java\nindex 99cb8a3a80..abe1ec3b4e 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALProvider.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALProvider.java\n\n@@ -75,7 +76,6 @@ public interface WALProvider {\n   interface WriterBase extends Closeable {\n     long getLength();\n     /**\n-     * <pre>\n      * NOTE: We add this method for {@link WALFileLengthProvider} used for replication, considering the\n      * case if we use {@link AsyncFSWAL},we write to 3 DNs concurrently,according to the visibility\n      * guarantee of HDFS, the data will be available immediately when arriving at DN since all the DNs\n"}}, {"oid": "715d7d51270fae7cd6bcd78f6ac3f8cebfc8f6e3", "url": "https://github.com/apache/hbase/commit/715d7d51270fae7cd6bcd78f6ac3f8cebfc8f6e3", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-07-03T14:16:48Z", "type": "commit"}, {"oid": "f78c54a3e19bbbcfc9241b6e62b245d7368cd51d", "url": "https://github.com/apache/hbase/commit/f78c54a3e19bbbcfc9241b6e62b245d7368cd51d", "message": "remove pre", "committedDate": "2020-07-03T14:20:37Z", "type": "commit"}, {"oid": "f33ed001b70c62bbd341132e3adb1c72627c9c46", "url": "https://github.com/apache/hbase/commit/f33ed001b70c62bbd341132e3adb1c72627c9c46", "message": "fix checkstyle error", "committedDate": "2020-07-04T05:08:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQzNTIzOQ==", "url": "https://github.com/apache/hbase/pull/1970#discussion_r450435239", "bodyText": "This read-followedby-update also needs to be atomic, yes?", "author": "ndimiduk", "createdAt": "2020-07-06T19:29:39Z", "path": "hbase-asyncfs/src/main/java/org/apache/hadoop/hbase/io/asyncfs/WrapperAsyncFSOutput.java", "diffHunk": "@@ -91,7 +93,11 @@ private void flush0(CompletableFuture<Long> future, ByteArrayOutputStream buffer\n           out.hflush();\n         }\n       }\n-      future.complete(out.getPos());\n+      long pos = out.getPos();\n+      if(pos > this.syncedLength) {\n+        this.syncedLength = pos;", "originalCommit": "f33ed001b70c62bbd341132e3adb1c72627c9c46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU2OTMzOQ==", "url": "https://github.com/apache/hbase/pull/1970#discussion_r450569339", "bodyText": "This one is just for test so not a big problem but aligning with other producation implementations is better. Can have an addendum.", "author": "Apache9", "createdAt": "2020-07-07T01:57:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQzNTIzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3NzEyOQ==", "url": "https://github.com/apache/hbase/pull/1970#discussion_r450577129", "bodyText": "Oh, reviewed the code again, actuall, the flush0 method can only be executed in a single thread so no need to use AtomicUtils.updateMax. The AtomicLong is in the ProtobufLogWriter, not the output stream. But the 'if(pos > this.syncedLength) {' is a bit confusing to developers, I prefer we just remove this check...", "author": "Apache9", "createdAt": "2020-07-07T02:27:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQzNTIzOQ=="}], "type": "inlineReview", "revised_code": null}]}