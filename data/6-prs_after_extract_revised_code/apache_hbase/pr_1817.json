{"pr_number": 1817, "pr_title": "HBASE-24412 Canary support check only one column family per RegionTask", "pr_createdAt": "2020-05-31T05:09:39Z", "pr_url": "https://github.com/apache/hbase/pull/1817", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2NjA5MA==", "url": "https://github.com/apache/hbase/pull/1817#discussion_r433666090", "bodyText": "hbase.canary.read.all.famliy => hbase.canary.read.all.column.famliy", "author": "infraio", "createdAt": "2020-06-02T07:12:28Z", "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java", "diffHunk": "@@ -1451,6 +1451,7 @@\n \n   public static final String HBASE_CANARY_READ_RAW_SCAN_KEY = \"hbase.canary.read.raw.enabled\";\n \n+  public static final String HBASE_CANARY_READ_ALL_CF = \"hbase.canary.read.all.famliy\";", "originalCommit": "b6bb6161956cba3e2c676040f3358086f9a10462", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "70955002585ef303b561dff1c28d713afccaed8a", "chunk": "diff --git a/hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java b/hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java\nindex 8432699675..aafe38aec2 100644\n--- a/hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java\n+++ b/hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java\n\n@@ -1451,7 +1451,7 @@ public final class HConstants {\n \n   public static final String HBASE_CANARY_READ_RAW_SCAN_KEY = \"hbase.canary.read.raw.enabled\";\n \n-  public static final String HBASE_CANARY_READ_ALL_CF = \"hbase.canary.read.all.famliy\";\n+  public static final String HBASE_CANARY_READ_ALL_CF = \"hbase.canary.read.all.column.famliy\";\n   /**\n    * Configuration keys for programmatic JAAS configuration for secured ZK interaction\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2NzAyNQ==", "url": "https://github.com/apache/hbase/pull/1817#discussion_r433667025", "bodyText": "Read conf every time? Can this be a global var and only read from conf once?", "author": "infraio", "createdAt": "2020-06-02T07:14:25Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryTool.java", "diffHunk": "@@ -496,18 +497,75 @@ public ZookeeperTask(Connection connection, String host, String znode, int timeo\n     @Override\n     public Void call() {\n       switch (taskType) {\n-      case READ:\n-        return read();\n-      case WRITE:\n-        return write();\n-      default:\n-        return read();\n+        case READ:\n+          return read();\n+        case WRITE:\n+          return write();\n+        default:\n+          return read();\n       }\n     }\n \n+    private Void readColumnFamily(Table table, ColumnFamilyDescriptor column) {\n+      byte[] startKey = null;\n+      Get get = null;\n+      Scan scan = null;\n+      ResultScanner rs = null;\n+      StopWatch stopWatch = new StopWatch();\n+      startKey = region.getStartKey();\n+      // Can't do a get on empty start row so do a Scan of first element if any instead.\n+      if (startKey.length > 0) {\n+        get = new Get(startKey);\n+        get.setCacheBlocks(false);\n+        get.setFilter(new FirstKeyOnlyFilter());\n+        get.addFamily(column.getName());\n+      } else {\n+        scan = new Scan();\n+        LOG.debug(\"rawScan {} for {}\", rawScanEnabled, region.getTable());\n+        scan.setRaw(rawScanEnabled);\n+        scan.setCaching(1);\n+        scan.setCacheBlocks(false);\n+        scan.setFilter(new FirstKeyOnlyFilter());\n+        scan.addFamily(column.getName());\n+        scan.setMaxResultSize(1L);\n+        scan.setOneRowLimit();\n+      }\n+      LOG.debug(\"Reading from {} {} {} {}\", region.getTable(), region.getRegionNameAsString(),\n+        column.getNameAsString(), Bytes.toStringBinary(startKey));\n+      try {\n+        stopWatch.start();\n+        if (startKey.length > 0) {\n+          table.get(get);\n+        } else {\n+          rs = table.getScanner(scan);\n+          rs.next();\n+        }\n+        stopWatch.stop();\n+        this.readWriteLatency.add(stopWatch.getTime());\n+        sink.publishReadTiming(serverName, region, column, stopWatch.getTime());\n+      } catch (Exception e) {\n+        sink.publishReadFailure(serverName, region, column, e);\n+        sink.updateReadFailures(region.getRegionNameAsString(),\n+          serverName == null ? \"NULL\" : serverName.getHostname());\n+      } finally {\n+        if (rs != null) {\n+          rs.close();\n+        }\n+      }\n+      return null;\n+    }\n+\n+    private ColumnFamilyDescriptor randomPickOneColumnFamily(ColumnFamilyDescriptor[] cfs) {\n+      int size = cfs.length;\n+      return cfs[ThreadLocalRandom.current().nextInt(size)];\n+\n+    }\n+\n     public Void read() {\n       Table table = null;\n       TableDescriptor tableDesc = null;\n+      boolean regionTaskReadAllCF =", "originalCommit": "b6bb6161956cba3e2c676040f3358086f9a10462", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "70955002585ef303b561dff1c28d713afccaed8a", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryTool.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryTool.java\nindex a4be663fe7..369876a6c4 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryTool.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryTool.java\n\n@@ -492,6 +493,9 @@ public class CanaryTool implements Tool, Canary {\n       this.taskType = taskType;\n       this.rawScanEnabled = rawScanEnabled;\n       this.readWriteLatency = rwLatency;\n+      this.regionTaskReadAllCF =\n+          connection.getConfiguration().getBoolean(HConstants.HBASE_CANARY_READ_ALL_CF, true);\n+\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2ODIxOQ==", "url": "https://github.com/apache/hbase/pull/1817#discussion_r433668219", "bodyText": "Add some comment for test? If HBASE_CANARY_READ_ALL_CF config to true, the difference is?", "author": "infraio", "createdAt": "2020-06-02T07:16:56Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestCanaryTool.java", "diffHunk": "@@ -129,6 +132,56 @@ public void testBasicCanaryWorks() throws Exception {\n       isA(ColumnFamilyDescriptor.class), anyLong());\n   }\n \n+  @Test\n+  public void testCanaryRegionTaskReadAllCF() throws Exception {\n+    final TableName tableName = TableName.valueOf(name.getMethodName());\n+    Table table = testingUtility.createTable(tableName,\n+      new byte[][] { Bytes.toBytes(\"f1\"), Bytes.toBytes(\"f2\") });\n+    // insert some test rows\n+    for (int i = 0; i < 1000; i++) {\n+      byte[] iBytes = Bytes.toBytes(i);\n+      Put p = new Put(iBytes);\n+      p.addColumn(Bytes.toBytes(\"f1\"), COLUMN, iBytes);\n+      p.addColumn(Bytes.toBytes(\"f2\"), COLUMN, iBytes);\n+      table.put(p);\n+    }\n+    ExecutorService executor = new ScheduledThreadPoolExecutor(1);\n+    CanaryTool.RegionStdOutSink sink = spy(new CanaryTool.RegionStdOutSink());\n+    CanaryTool canary = new CanaryTool(executor, sink);\n+    String[] args = { \"-t\", \"10000\", \"testCanaryRegionTaskReadAllCF\" };\n+    Configuration configuration = HBaseConfiguration.create(testingUtility.getConfiguration());\n+    configuration.setBoolean(HConstants.HBASE_CANARY_READ_ALL_CF, false);\n+    assertEquals(0, ToolRunner.run(configuration, canary, args));\n+\n+    assertTrue(\"canary should expect to scan at least 1 region\",\n+      sink.getTotalExpectedRegions() > 0);\n+    assertTrue(\"there should be no read failures\", sink.getReadFailureCount() == 0);\n+    assertTrue(\"there should be no write failures\", sink.getWriteFailureCount() == 0);\n+    assertTrue(\"verify read success count > 0\", sink.getReadSuccessCount() > 0);\n+    verify(sink, atLeastOnce()).publishReadTiming(isA(ServerName.class), isA(RegionInfo.class),\n+      isA(ColumnFamilyDescriptor.class), anyLong());\n+\n+    assertEquals(\"canary region success count should equal total expected regions\",", "originalCommit": "b6bb6161956cba3e2c676040f3358086f9a10462", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "70955002585ef303b561dff1c28d713afccaed8a", "chunk": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestCanaryTool.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestCanaryTool.java\nindex c792d890e4..56870c8763 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestCanaryTool.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestCanaryTool.java\n\n@@ -146,38 +146,36 @@ public class TestCanaryTool {\n       table.put(p);\n     }\n     ExecutorService executor = new ScheduledThreadPoolExecutor(1);\n-    CanaryTool.RegionStdOutSink sink = spy(new CanaryTool.RegionStdOutSink());\n-    CanaryTool canary = new CanaryTool(executor, sink);\n-    String[] args = { \"-t\", \"10000\", \"testCanaryRegionTaskReadAllCF\" };\n-    Configuration configuration = HBaseConfiguration.create(testingUtility.getConfiguration());\n-    configuration.setBoolean(HConstants.HBASE_CANARY_READ_ALL_CF, false);\n-    assertEquals(0, ToolRunner.run(configuration, canary, args));\n-\n-    assertTrue(\"canary should expect to scan at least 1 region\",\n-      sink.getTotalExpectedRegions() > 0);\n-    assertTrue(\"there should be no read failures\", sink.getReadFailureCount() == 0);\n-    assertTrue(\"there should be no write failures\", sink.getWriteFailureCount() == 0);\n-    assertTrue(\"verify read success count > 0\", sink.getReadSuccessCount() > 0);\n-    verify(sink, atLeastOnce()).publishReadTiming(isA(ServerName.class), isA(RegionInfo.class),\n-      isA(ColumnFamilyDescriptor.class), anyLong());\n+    for (boolean readAllCF : new boolean[] { true, false }) {\n+      CanaryTool.RegionStdOutSink sink = spy(new CanaryTool.RegionStdOutSink());\n+      CanaryTool canary = new CanaryTool(executor, sink);\n+      String[] args = { \"-t\", \"10000\", \"testCanaryRegionTaskReadAllCF\" };\n+      Configuration configuration = HBaseConfiguration.create(testingUtility.getConfiguration());\n \n-    assertEquals(\"canary region success count should equal total expected regions\",\n-      sink.getReadSuccessCount() + sink.getWriteSuccessCount(), sink.getTotalExpectedRegions());\n-    Map<String, List<CanaryTool.RegionTaskResult>> regionMap = sink.getRegionMap();\n-    assertFalse(\"verify region map has size > 0\", regionMap.isEmpty());\n+      configuration.setBoolean(HConstants.HBASE_CANARY_READ_ALL_CF, readAllCF);\n+      assertEquals(0, ToolRunner.run(configuration, canary, args));\n+      // the test table has two column family. If readAllCF set true,\n+      // we expect read count is double of region count\n+      int expectedReadCount =\n+          readAllCF ? 2 * sink.getTotalExpectedRegions() : sink.getTotalExpectedRegions();\n+      assertEquals(\"canary region success count should equal total expected read count\",\n+        expectedReadCount, sink.getReadSuccessCount());\n+      Map<String, List<CanaryTool.RegionTaskResult>> regionMap = sink.getRegionMap();\n+      assertFalse(\"verify region map has size > 0\", regionMap.isEmpty());\n \n-    for (String regionName : regionMap.keySet()) {\n-      for (CanaryTool.RegionTaskResult res : regionMap.get(regionName)) {\n-        assertNotNull(\"verify getRegionNameAsString()\", regionName);\n-        assertNotNull(\"verify getRegionInfo()\", res.getRegionInfo());\n-        assertNotNull(\"verify getTableName()\", res.getTableName());\n-        assertNotNull(\"verify getTableNameAsString()\", res.getTableNameAsString());\n-        assertNotNull(\"verify getServerName()\", res.getServerName());\n-        assertNotNull(\"verify getServerNameAsString()\", res.getServerNameAsString());\n-        assertNotNull(\"verify getColumnFamily()\", res.getColumnFamily());\n-        assertNotNull(\"verify getColumnFamilyNameAsString()\", res.getColumnFamilyNameAsString());\n-        assertTrue(\"read from region \" + regionName + \" succeeded\", res.isReadSuccess());\n-        assertTrue(\"read took some time\", res.getReadLatency() > -1);\n+      for (String regionName : regionMap.keySet()) {\n+        for (CanaryTool.RegionTaskResult res : regionMap.get(regionName)) {\n+          assertNotNull(\"verify getRegionNameAsString()\", regionName);\n+          assertNotNull(\"verify getRegionInfo()\", res.getRegionInfo());\n+          assertNotNull(\"verify getTableName()\", res.getTableName());\n+          assertNotNull(\"verify getTableNameAsString()\", res.getTableNameAsString());\n+          assertNotNull(\"verify getServerName()\", res.getServerName());\n+          assertNotNull(\"verify getServerNameAsString()\", res.getServerNameAsString());\n+          assertNotNull(\"verify getColumnFamily()\", res.getColumnFamily());\n+          assertNotNull(\"verify getColumnFamilyNameAsString()\", res.getColumnFamilyNameAsString());\n+          assertTrue(\"read from region \" + regionName + \" succeeded\", res.isReadSuccess());\n+          assertTrue(\"read took some time\", res.getReadLatency() > -1);\n+        }\n       }\n     }\n   }\n"}}, {"oid": "70955002585ef303b561dff1c28d713afccaed8a", "url": "https://github.com/apache/hbase/commit/70955002585ef303b561dff1c28d713afccaed8a", "message": "HBASE-24412 Canary support check only one column family per RegionTask", "committedDate": "2020-06-02T10:58:20Z", "type": "forcePushed"}, {"oid": "4cd4fd3386e5db1f5cd830fa0e7257b4c5860630", "url": "https://github.com/apache/hbase/commit/4cd4fd3386e5db1f5cd830fa0e7257b4c5860630", "message": "HBASE-24412 Canary support check only one column family per RegionTask", "committedDate": "2020-06-02T11:30:52Z", "type": "commit"}, {"oid": "4cd4fd3386e5db1f5cd830fa0e7257b4c5860630", "url": "https://github.com/apache/hbase/commit/4cd4fd3386e5db1f5cd830fa0e7257b4c5860630", "message": "HBASE-24412 Canary support check only one column family per RegionTask", "committedDate": "2020-06-02T11:30:52Z", "type": "forcePushed"}]}