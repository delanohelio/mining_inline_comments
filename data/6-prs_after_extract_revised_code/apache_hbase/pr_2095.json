{"pr_number": 2095, "pr_title": "HBASE-24459 Move the locateMeta logic from AsyncMetaRegionTableLocato\u2026", "pr_createdAt": "2020-07-18T14:37:41Z", "pr_url": "https://github.com/apache/hbase/pull/2095", "timeline": [{"oid": "7099bdd8a6344d2c0d9a6f9013b08108257096ca", "url": "https://github.com/apache/hbase/commit/7099bdd8a6344d2c0d9a6f9013b08108257096ca", "message": "HBASE-24459 Move the locateMeta logic from AsyncMetaRegionTableLocator to ConnectionRegistry", "committedDate": "2020-07-19T13:34:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzMTcxNw==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456931717", "bodyText": "By any chance, subsequent execution with error can produce NPE here? e.g first thread encounters error, sets futureRef to null and second one when calls completeExceptionally(), it calls it on null?", "author": "virajjasani", "createdAt": "2020-07-19T17:05:50Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java", "diffHunk": "@@ -652,4 +626,160 @@ static void setCoprocessorError(RpcController controller, Throwable error) {\n       controller.setFailed(error.toString());\n     }\n   }\n+\n+  public static RegionLocations locateRow(NavigableMap<byte[], RegionLocations> cache,\n+    TableName tableName, byte[] row, int replicaId) {\n+    Map.Entry<byte[], RegionLocations> entry = cache.floorEntry(row);\n+    if (entry == null) {\n+      return null;\n+    }\n+    RegionLocations locs = entry.getValue();\n+    HRegionLocation loc = locs.getRegionLocation(replicaId);\n+    if (loc == null) {\n+      return null;\n+    }\n+    byte[] endKey = loc.getRegion().getEndKey();\n+    if (isEmptyStopRow(endKey) || Bytes.compareTo(row, endKey) < 0) {\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(\"Found {} in cache for {}, row='{}', locateType={}, replicaId={}\", loc, tableName,\n+          Bytes.toStringBinary(row), RegionLocateType.CURRENT, replicaId);\n+      }\n+      return locs;\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public static RegionLocations locateRowBefore(NavigableMap<byte[], RegionLocations> cache,\n+    TableName tableName, byte[] row, int replicaId) {\n+    boolean isEmptyStopRow = isEmptyStopRow(row);\n+    Map.Entry<byte[], RegionLocations> entry =\n+      isEmptyStopRow ? cache.lastEntry() : cache.lowerEntry(row);\n+    if (entry == null) {\n+      return null;\n+    }\n+    RegionLocations locs = entry.getValue();\n+    HRegionLocation loc = locs.getRegionLocation(replicaId);\n+    if (loc == null) {\n+      return null;\n+    }\n+    if (isEmptyStopRow(loc.getRegion().getEndKey()) ||\n+      (!isEmptyStopRow && Bytes.compareTo(loc.getRegion().getEndKey(), row) >= 0)) {\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(\"Found {} in cache for {}, row='{}', locateType={}, replicaId={}\", loc, tableName,\n+          Bytes.toStringBinary(row), RegionLocateType.BEFORE, replicaId);\n+      }\n+      return locs;\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public static void tryClearMasterStubCache(IOException error,\n+    ClientMetaService.Interface currentStub, AtomicReference<ClientMetaService.Interface> stub) {\n+    if (ClientExceptionsUtil.isConnectionException(error) ||\n+      error instanceof ServerNotRunningYetException) {\n+      stub.compareAndSet(currentStub, null);\n+    }\n+  }\n+\n+  public static <T> CompletableFuture<T> getMasterStub(ConnectionRegistry registry,\n+    AtomicReference<T> stub, AtomicReference<CompletableFuture<T>> stubMakeFuture,\n+    RpcClient rpcClient, User user, long rpcTimeout, TimeUnit unit,\n+    Function<RpcChannel, T> stubMaker, String type) {\n+    return getOrFetch(stub, stubMakeFuture, () -> {\n+      CompletableFuture<T> future = new CompletableFuture<>();\n+      addListener(registry.getActiveMaster(), (addr, error) -> {\n+        if (error != null) {\n+          future.completeExceptionally(error);\n+        } else if (addr == null) {\n+          future.completeExceptionally(new MasterNotRunningException(\n+            \"ZooKeeper available but no active master location found\"));\n+        } else {\n+          LOG.debug(\"The fetched master address is {}\", addr);\n+          try {\n+            future.complete(stubMaker.apply(\n+              rpcClient.createRpcChannel(addr, user, toIntNoOverflow(unit.toMillis(rpcTimeout)))));\n+          } catch (IOException e) {\n+            future.completeExceptionally(e);\n+          }\n+        }\n+\n+      });\n+      return future;\n+    }, type);\n+  }\n+\n+  private static <T> CompletableFuture<T> getOrFetch(AtomicReference<T> cacheRef,\n+    AtomicReference<CompletableFuture<T>> futureRef, \n+    Supplier<CompletableFuture<T>> fetch, String type) {\n+    for (;;) {\n+      T cachedValue = cacheRef.get();\n+      if (cachedValue != null) {\n+        return CompletableFuture.completedFuture(cachedValue);\n+      }\n+      LOG.trace(\"{} cache is null, try fetching from registry\", type);\n+      if (futureRef.compareAndSet(null, new CompletableFuture<>())) {\n+        LOG.debug(\"Start fetching {} from registry\", type);\n+        CompletableFuture<T> future = futureRef.get();\n+        addListener(fetch.get(), (value, error) -> {\n+          if (error != null) {\n+            LOG.debug(\"Failed to fetch {} from registry\", type, error);\n+            futureRef.getAndSet(null).completeExceptionally(error);", "originalCommit": "7099bdd8a6344d2c0d9a6f9013b08108257096ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAwMTczNg==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457001736", "bodyText": "You can see the whole method. We have done null check when calling futureRef.get() below.", "author": "Apache9", "createdAt": "2020-07-20T02:54:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzMTcxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5ODUwNg==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457098506", "bodyText": "With futureRef.compareAndSet(null, val), we are good here.", "author": "virajjasani", "createdAt": "2020-07-20T06:37:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzMTcxNw=="}], "type": "inlineReview", "revised_code": {"commit": "a79b4ffc658b9475796ac229dd249840be7dc825", "chunk": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java\nindex 7ff03ef137..86d6442f8f 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java\n\n@@ -710,11 +710,11 @@ public final class ConnectionUtils {\n     }, type);\n   }\n \n-  private static <T> CompletableFuture<T> getOrFetch(AtomicReference<T> cacheRef,\n-    AtomicReference<CompletableFuture<T>> futureRef, \n-    Supplier<CompletableFuture<T>> fetch, String type) {\n+  private static <T> CompletableFuture<T> getOrFetch(AtomicReference<T> cachedRef,\n+    AtomicReference<CompletableFuture<T>> futureRef, Supplier<CompletableFuture<T>> fetch,\n+    String type) {\n     for (;;) {\n-      T cachedValue = cacheRef.get();\n+      T cachedValue = cachedRef.get();\n       if (cachedValue != null) {\n         return CompletableFuture.completedFuture(cachedValue);\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzMjk0NQ==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456932945", "bodyText": "nit: Since we have multiple Interface in MasterProtos, would you prefer providing ClientMetaService.Interface for better readability? i.e AtomicReference<ClientMetaService.Interface> and AtomicReference<CompletableFuture<ClientMetaService.Interface>>\nNo strong opinion though.", "author": "virajjasani", "createdAt": "2020-07-19T17:19:03Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java", "diffHunk": "@@ -59,9 +74,29 @@\n \n   private final ZNodePaths znodePaths;\n \n-  ZKConnectionRegistry(Configuration conf) {\n+  private final AtomicReference<Interface> stub = new AtomicReference<>();\n+\n+  private final AtomicReference<CompletableFuture<Interface>> stubMakeFuture =\n+    new AtomicReference<>();", "originalCommit": "7099bdd8a6344d2c0d9a6f9013b08108257096ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a79b4ffc658b9475796ac229dd249840be7dc825", "chunk": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java\nindex 655f861fbf..a10ef18199 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java\n\n@@ -74,9 +73,9 @@ class ZKConnectionRegistry implements ConnectionRegistry {\n \n   private final ZNodePaths znodePaths;\n \n-  private final AtomicReference<Interface> stub = new AtomicReference<>();\n+  private final AtomicReference<ClientMetaService.Interface> cachedStub = new AtomicReference<>();\n \n-  private final AtomicReference<CompletableFuture<Interface>> stubMakeFuture =\n+  private final AtomicReference<CompletableFuture<ClientMetaService.Interface>> stubMakeFuture =\n     new AtomicReference<>();\n \n   // RPC client used to talk to the masters.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzNTg5MA==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456935890", "bodyText": "Similar to above methods, we can use generics here also:\n  public static <T extends ClientMetaService.Interface> CompletableFuture<List<HRegionLocation>> getAllMetaRegionLocations(\n    boolean excludeOfflinedSplitParents, CompletableFuture<T> getStubFuture,\n    AtomicReference<T> stubRef, RpcControllerFactory rpcControllerFactory, int callTimeoutMs) {\n\n&\n  public static<T extends ClientMetaService.Interface> void tryClearMasterStubCache(IOException error,\n    T currentStub, AtomicReference<T> stub) {\n\nBeing Utils class, this might suit well, thought?\nBut if you feel this is overkill, we are good without that change.", "author": "virajjasani", "createdAt": "2020-07-19T17:49:27Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java", "diffHunk": "@@ -652,4 +626,160 @@ static void setCoprocessorError(RpcController controller, Throwable error) {\n       controller.setFailed(error.toString());\n     }\n   }\n+\n+  public static RegionLocations locateRow(NavigableMap<byte[], RegionLocations> cache,\n+    TableName tableName, byte[] row, int replicaId) {\n+    Map.Entry<byte[], RegionLocations> entry = cache.floorEntry(row);\n+    if (entry == null) {\n+      return null;\n+    }\n+    RegionLocations locs = entry.getValue();\n+    HRegionLocation loc = locs.getRegionLocation(replicaId);\n+    if (loc == null) {\n+      return null;\n+    }\n+    byte[] endKey = loc.getRegion().getEndKey();\n+    if (isEmptyStopRow(endKey) || Bytes.compareTo(row, endKey) < 0) {\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(\"Found {} in cache for {}, row='{}', locateType={}, replicaId={}\", loc, tableName,\n+          Bytes.toStringBinary(row), RegionLocateType.CURRENT, replicaId);\n+      }\n+      return locs;\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public static RegionLocations locateRowBefore(NavigableMap<byte[], RegionLocations> cache,\n+    TableName tableName, byte[] row, int replicaId) {\n+    boolean isEmptyStopRow = isEmptyStopRow(row);\n+    Map.Entry<byte[], RegionLocations> entry =\n+      isEmptyStopRow ? cache.lastEntry() : cache.lowerEntry(row);\n+    if (entry == null) {\n+      return null;\n+    }\n+    RegionLocations locs = entry.getValue();\n+    HRegionLocation loc = locs.getRegionLocation(replicaId);\n+    if (loc == null) {\n+      return null;\n+    }\n+    if (isEmptyStopRow(loc.getRegion().getEndKey()) ||\n+      (!isEmptyStopRow && Bytes.compareTo(loc.getRegion().getEndKey(), row) >= 0)) {\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(\"Found {} in cache for {}, row='{}', locateType={}, replicaId={}\", loc, tableName,\n+          Bytes.toStringBinary(row), RegionLocateType.BEFORE, replicaId);\n+      }\n+      return locs;\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public static void tryClearMasterStubCache(IOException error,\n+    ClientMetaService.Interface currentStub, AtomicReference<ClientMetaService.Interface> stub) {\n+    if (ClientExceptionsUtil.isConnectionException(error) ||\n+      error instanceof ServerNotRunningYetException) {\n+      stub.compareAndSet(currentStub, null);\n+    }\n+  }\n+\n+  public static <T> CompletableFuture<T> getMasterStub(ConnectionRegistry registry,\n+    AtomicReference<T> stub, AtomicReference<CompletableFuture<T>> stubMakeFuture,\n+    RpcClient rpcClient, User user, long rpcTimeout, TimeUnit unit,\n+    Function<RpcChannel, T> stubMaker, String type) {\n+    return getOrFetch(stub, stubMakeFuture, () -> {\n+      CompletableFuture<T> future = new CompletableFuture<>();\n+      addListener(registry.getActiveMaster(), (addr, error) -> {\n+        if (error != null) {\n+          future.completeExceptionally(error);\n+        } else if (addr == null) {\n+          future.completeExceptionally(new MasterNotRunningException(\n+            \"ZooKeeper available but no active master location found\"));\n+        } else {\n+          LOG.debug(\"The fetched master address is {}\", addr);\n+          try {\n+            future.complete(stubMaker.apply(\n+              rpcClient.createRpcChannel(addr, user, toIntNoOverflow(unit.toMillis(rpcTimeout)))));\n+          } catch (IOException e) {\n+            future.completeExceptionally(e);\n+          }\n+        }\n+\n+      });\n+      return future;\n+    }, type);\n+  }\n+\n+  private static <T> CompletableFuture<T> getOrFetch(AtomicReference<T> cacheRef,\n+    AtomicReference<CompletableFuture<T>> futureRef, \n+    Supplier<CompletableFuture<T>> fetch, String type) {\n+    for (;;) {\n+      T cachedValue = cacheRef.get();\n+      if (cachedValue != null) {\n+        return CompletableFuture.completedFuture(cachedValue);\n+      }\n+      LOG.trace(\"{} cache is null, try fetching from registry\", type);\n+      if (futureRef.compareAndSet(null, new CompletableFuture<>())) {\n+        LOG.debug(\"Start fetching {} from registry\", type);\n+        CompletableFuture<T> future = futureRef.get();\n+        addListener(fetch.get(), (value, error) -> {\n+          if (error != null) {\n+            LOG.debug(\"Failed to fetch {} from registry\", type, error);\n+            futureRef.getAndSet(null).completeExceptionally(error);\n+            return;\n+          }\n+          LOG.debug(\"The fetched {} is {}\", type, value);\n+          // Here we update cache before reset future, so it is possible that someone can get a\n+          // stale value. Consider this:\n+          // 1. update cacheRef\n+          // 2. someone clears the cache and relocates again\n+          // 3. the futureRef is not null so the old future is used.\n+          // 4. we clear futureRef and complete the future in it with the value being\n+          // cleared in step 2.\n+          // But we do not think it is a big deal as it rarely happens, and even if it happens, the\n+          // caller will retry again later, no correctness problems.\n+          cacheRef.set(value);\n+          futureRef.set(null);\n+          future.complete(value);\n+        });\n+        return future;\n+      } else {\n+        CompletableFuture<T> future = futureRef.get();\n+        if (future != null) {\n+          return future;\n+        }\n+      }\n+    }\n+  }\n+\n+  public static CompletableFuture<List<HRegionLocation>> getAllMetaRegionLocations(\n+    boolean excludeOfflinedSplitParents,\n+    CompletableFuture<ClientMetaService.Interface> getStubFuture,\n+    AtomicReference<ClientMetaService.Interface> stubRef,\n+    RpcControllerFactory rpcControllerFactory, int callTimeoutMs) {", "originalCommit": "7099bdd8a6344d2c0d9a6f9013b08108257096ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODYwNQ==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456988605", "bodyText": "The class is IA.Private so I think we could do this later when we really have the requirement?", "author": "Apache9", "createdAt": "2020-07-20T01:50:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzNTg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3NTk2MA==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457175960", "bodyText": "Sure, that is fine.", "author": "virajjasani", "createdAt": "2020-07-20T08:32:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzNTg5MA=="}], "type": "inlineReview", "revised_code": {"commit": "a79b4ffc658b9475796ac229dd249840be7dc825", "chunk": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java\nindex 7ff03ef137..86d6442f8f 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java\n\n@@ -710,11 +710,11 @@ public final class ConnectionUtils {\n     }, type);\n   }\n \n-  private static <T> CompletableFuture<T> getOrFetch(AtomicReference<T> cacheRef,\n-    AtomicReference<CompletableFuture<T>> futureRef, \n-    Supplier<CompletableFuture<T>> fetch, String type) {\n+  private static <T> CompletableFuture<T> getOrFetch(AtomicReference<T> cachedRef,\n+    AtomicReference<CompletableFuture<T>> futureRef, Supplier<CompletableFuture<T>> fetch,\n+    String type) {\n     for (;;) {\n-      T cachedValue = cacheRef.get();\n+      T cachedValue = cachedRef.get();\n       if (cachedValue != null) {\n         return CompletableFuture.completedFuture(cachedValue);\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzNzQwNw==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456937407", "bodyText": "Since this is used for MasterService.Interface and ClientMetaService.Interface, we can call the method something generic? maybe just getStub()?", "author": "virajjasani", "createdAt": "2020-07-19T18:04:47Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java", "diffHunk": "@@ -652,4 +626,160 @@ static void setCoprocessorError(RpcController controller, Throwable error) {\n       controller.setFailed(error.toString());\n     }\n   }\n+\n+  public static RegionLocations locateRow(NavigableMap<byte[], RegionLocations> cache,\n+    TableName tableName, byte[] row, int replicaId) {\n+    Map.Entry<byte[], RegionLocations> entry = cache.floorEntry(row);\n+    if (entry == null) {\n+      return null;\n+    }\n+    RegionLocations locs = entry.getValue();\n+    HRegionLocation loc = locs.getRegionLocation(replicaId);\n+    if (loc == null) {\n+      return null;\n+    }\n+    byte[] endKey = loc.getRegion().getEndKey();\n+    if (isEmptyStopRow(endKey) || Bytes.compareTo(row, endKey) < 0) {\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(\"Found {} in cache for {}, row='{}', locateType={}, replicaId={}\", loc, tableName,\n+          Bytes.toStringBinary(row), RegionLocateType.CURRENT, replicaId);\n+      }\n+      return locs;\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public static RegionLocations locateRowBefore(NavigableMap<byte[], RegionLocations> cache,\n+    TableName tableName, byte[] row, int replicaId) {\n+    boolean isEmptyStopRow = isEmptyStopRow(row);\n+    Map.Entry<byte[], RegionLocations> entry =\n+      isEmptyStopRow ? cache.lastEntry() : cache.lowerEntry(row);\n+    if (entry == null) {\n+      return null;\n+    }\n+    RegionLocations locs = entry.getValue();\n+    HRegionLocation loc = locs.getRegionLocation(replicaId);\n+    if (loc == null) {\n+      return null;\n+    }\n+    if (isEmptyStopRow(loc.getRegion().getEndKey()) ||\n+      (!isEmptyStopRow && Bytes.compareTo(loc.getRegion().getEndKey(), row) >= 0)) {\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(\"Found {} in cache for {}, row='{}', locateType={}, replicaId={}\", loc, tableName,\n+          Bytes.toStringBinary(row), RegionLocateType.BEFORE, replicaId);\n+      }\n+      return locs;\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public static void tryClearMasterStubCache(IOException error,\n+    ClientMetaService.Interface currentStub, AtomicReference<ClientMetaService.Interface> stub) {\n+    if (ClientExceptionsUtil.isConnectionException(error) ||\n+      error instanceof ServerNotRunningYetException) {\n+      stub.compareAndSet(currentStub, null);\n+    }\n+  }\n+\n+  public static <T> CompletableFuture<T> getMasterStub(ConnectionRegistry registry,", "originalCommit": "7099bdd8a6344d2c0d9a6f9013b08108257096ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4ODgxOQ==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456988819", "bodyText": "They are both interfaces where master implements. You can see that in the implementation, we just call registry.getActiveMaster...", "author": "Apache9", "createdAt": "2020-07-20T01:51:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzNzQwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3NjE5NQ==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457076195", "bodyText": "Yes in that viewpoint, getMasterStub() makes more sense. I was just thinking about Interface that we use here.", "author": "virajjasani", "createdAt": "2020-07-20T05:53:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzNzQwNw=="}], "type": "inlineReview", "revised_code": {"commit": "a79b4ffc658b9475796ac229dd249840be7dc825", "chunk": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java\nindex 7ff03ef137..86d6442f8f 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java\n\n@@ -710,11 +710,11 @@ public final class ConnectionUtils {\n     }, type);\n   }\n \n-  private static <T> CompletableFuture<T> getOrFetch(AtomicReference<T> cacheRef,\n-    AtomicReference<CompletableFuture<T>> futureRef, \n-    Supplier<CompletableFuture<T>> fetch, String type) {\n+  private static <T> CompletableFuture<T> getOrFetch(AtomicReference<T> cachedRef,\n+    AtomicReference<CompletableFuture<T>> futureRef, Supplier<CompletableFuture<T>> fetch,\n+    String type) {\n     for (;;) {\n-      T cachedValue = cacheRef.get();\n+      T cachedValue = cachedRef.get();\n       if (cachedValue != null) {\n         return CompletableFuture.completedFuture(cachedValue);\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzNzk2Mg==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456937962", "bodyText": "nit: IOException is redundant", "author": "virajjasani", "createdAt": "2020-07-19T18:10:00Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "diffHunk": "@@ -2318,19 +2333,17 @@ public long createSystemTable(final TableDescriptor tableDescriptor) throws IOEx\n     return procId;\n   }\n \n-  private void startActiveMasterManager(int infoPort) throws KeeperException {\n+  private void startActiveMasterManager(int infoPort) throws KeeperException, IOException {", "originalCommit": "7099bdd8a6344d2c0d9a6f9013b08108257096ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a79b4ffc658b9475796ac229dd249840be7dc825", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java\nindex 1e7d9b62eb..21df91d518 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java\n\n@@ -2333,7 +2331,7 @@ public class HMaster extends HRegionServer implements MasterServices {\n     return procId;\n   }\n \n-  private void startActiveMasterManager(int infoPort) throws KeeperException, IOException {\n+  private void startActiveMasterManager(int infoPort) throws KeeperException {\n     String backupZNode = ZNodePaths.joinZNode(\n       zooKeeper.getZNodePaths().backupMasterAddressesZNode, serverName.toString());\n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzOTIzMg==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456939232", "bodyText": "Yes, this seems better, hopefully with not too much of perf impact when MasterRpcServices access it.", "author": "virajjasani", "createdAt": "2020-07-19T18:22:31Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "diffHunk": "@@ -376,12 +376,11 @@ public void run() {\n   // manager of assignment nodes in zookeeper\n   private AssignmentManager assignmentManager;\n \n-\n   /**\n    * Cache for the meta region replica's locations. Also tracks their changes to avoid stale\n    * cache entries.\n    */\n-  private final MetaRegionLocationCache metaRegionLocationCache;\n+  private volatile MetaLocationCache metaLocationCache;", "originalCommit": "7099bdd8a6344d2c0d9a6f9013b08108257096ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzOTU0Nw==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456939547", "bodyText": "nit: replace with lambda?", "author": "virajjasani", "createdAt": "2020-07-19T18:25:43Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "diffHunk": "@@ -634,6 +631,27 @@ protected String getUseThisHostnameInstead(Configuration conf) {\n   @Override\n   public void run() {\n     try {\n+      // we have to do this in a background thread as for a fresh new cluster, we need to become\n+      // active master first to set the cluster id so we can initialize the cluster connection.\n+      // for backup master, we need to use async cluster connection to connect to active master for\n+      // fetching the content of root table, to serve the locate meta requests from client.\n+      Threads.setDaemonThreadRunning(new Thread() {\n+\n+        @Override\n+        public void run() {", "originalCommit": "7099bdd8a6344d2c0d9a6f9013b08108257096ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a79b4ffc658b9475796ac229dd249840be7dc825", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java\nindex 1e7d9b62eb..21df91d518 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java\n\n@@ -635,23 +635,21 @@ public class HMaster extends HRegionServer implements MasterServices {\n       // active master first to set the cluster id so we can initialize the cluster connection.\n       // for backup master, we need to use async cluster connection to connect to active master for\n       // fetching the content of root table, to serve the locate meta requests from client.\n-      Threads.setDaemonThreadRunning(new Thread() {\n-\n-        @Override\n-        public void run() {\n-          for (;;) {\n-            try {\n-              if (!Strings.isNullOrEmpty(ZKClusterId.readClusterIdZNode(zooKeeper))) {\n-                setupClusterConnection();\n-                break;\n-              }\n-            } catch (Throwable t) {\n-              LOG.warn(\"failed to initialize cluster connection, retrying...\");\n+      Threads.setDaemonThreadRunning(new Thread(() -> {\n+        for (;;) {\n+          try {\n+            if (!Strings.isNullOrEmpty(ZKClusterId.readClusterIdZNode(zooKeeper))) {\n+              setupClusterConnection();\n+              break;\n+            } else {\n+              LOG.trace(\"cluster id is still null, waiting...\");\n             }\n-            Threads.sleep(1000);\n+          } catch (Throwable t) {\n+            LOG.warn(\"failed to initialize cluster connection, retrying...\");\n           }\n+          Threads.sleep(1000);\n         }\n-      }, getName() + \":initClusterConnection\");\n+      }), getName() + \":initClusterConnection\");\n       if (!conf.getBoolean(\"hbase.testing.nocluster\", false)) {\n         Threads.setDaemonThreadRunning(new Thread(() -> {\n           try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkzOTY4NA==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456939684", "bodyText": "For else part, maybe we can have trace log?", "author": "virajjasani", "createdAt": "2020-07-19T18:27:14Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "diffHunk": "@@ -634,6 +631,27 @@ protected String getUseThisHostnameInstead(Configuration conf) {\n   @Override\n   public void run() {\n     try {\n+      // we have to do this in a background thread as for a fresh new cluster, we need to become\n+      // active master first to set the cluster id so we can initialize the cluster connection.\n+      // for backup master, we need to use async cluster connection to connect to active master for\n+      // fetching the content of root table, to serve the locate meta requests from client.\n+      Threads.setDaemonThreadRunning(new Thread() {\n+\n+        @Override\n+        public void run() {\n+          for (;;) {\n+            try {\n+              if (!Strings.isNullOrEmpty(ZKClusterId.readClusterIdZNode(zooKeeper))) {\n+                setupClusterConnection();\n+                break;\n+              }", "originalCommit": "7099bdd8a6344d2c0d9a6f9013b08108257096ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a79b4ffc658b9475796ac229dd249840be7dc825", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java\nindex 1e7d9b62eb..21df91d518 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java\n\n@@ -635,23 +635,21 @@ public class HMaster extends HRegionServer implements MasterServices {\n       // active master first to set the cluster id so we can initialize the cluster connection.\n       // for backup master, we need to use async cluster connection to connect to active master for\n       // fetching the content of root table, to serve the locate meta requests from client.\n-      Threads.setDaemonThreadRunning(new Thread() {\n-\n-        @Override\n-        public void run() {\n-          for (;;) {\n-            try {\n-              if (!Strings.isNullOrEmpty(ZKClusterId.readClusterIdZNode(zooKeeper))) {\n-                setupClusterConnection();\n-                break;\n-              }\n-            } catch (Throwable t) {\n-              LOG.warn(\"failed to initialize cluster connection, retrying...\");\n+      Threads.setDaemonThreadRunning(new Thread(() -> {\n+        for (;;) {\n+          try {\n+            if (!Strings.isNullOrEmpty(ZKClusterId.readClusterIdZNode(zooKeeper))) {\n+              setupClusterConnection();\n+              break;\n+            } else {\n+              LOG.trace(\"cluster id is still null, waiting...\");\n             }\n-            Threads.sleep(1000);\n+          } catch (Throwable t) {\n+            LOG.warn(\"failed to initialize cluster connection, retrying...\");\n           }\n+          Threads.sleep(1000);\n         }\n-      }, getName() + \":initClusterConnection\");\n+      }), getName() + \":initClusterConnection\");\n       if (!conf.getBoolean(\"hbase.testing.nocluster\", false)) {\n         Threads.setDaemonThreadRunning(new Thread(() -> {\n           try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MDUyMw==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456940523", "bodyText": "This method getMetaRegionLocations() is no longer being called from MasterRegistry.\nMasterRegistry.getMetaRegionLocations() is not in use:\n  public CompletableFuture<RegionLocations> getMetaRegionLocations()\n\nOther rpc calls i.e locateMetaRegion()  &  getAllMetaRegionLocations() are in use.", "author": "virajjasani", "createdAt": "2020-07-19T18:36:11Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterRpcServices.java", "diffHunk": "@@ -3276,11 +3290,16 @@ public LocateMetaRegionResponse locateMetaRegion(RpcController controller,\n     byte[] row = request.getRow().toByteArray();\n     RegionLocateType locateType = ProtobufUtil.toRegionLocateType(request.getLocateType());\n     try {\n-      master.checkServiceStarted();", "originalCommit": "7099bdd8a6344d2c0d9a6f9013b08108257096ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5MDI4OQ==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456990289", "bodyText": "It is used by old MasterRegistry. It has already been released in 2.3.0 so we can not remove it, we need to keep compatible.", "author": "Apache9", "createdAt": "2020-07-20T01:58:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MDUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3MzcwMA==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457073700", "bodyText": "Oh yes this is for backward compatibility.", "author": "virajjasani", "createdAt": "2020-07-20T05:48:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MDUyMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MTUxNg==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456941516", "bodyText": "We are never expecting null cache for backup masters right?", "author": "virajjasani", "createdAt": "2020-07-19T18:46:23Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterRpcServices.java", "diffHunk": "@@ -3305,24 +3324,31 @@ public GetAllMetaRegionLocationsResponse getAllMetaRegionLocations(RpcController\n     GetAllMetaRegionLocationsRequest request) throws ServiceException {\n     boolean excludeOfflinedSplitParents = request.getExcludeOfflinedSplitParents();\n     try {\n-      master.checkServiceStarted();\n       if (master.getMasterCoprocessorHost() != null) {\n         master.getMasterCoprocessorHost().preGetAllMetaRegionLocations(excludeOfflinedSplitParents);\n       }\n-      List<RegionLocations> locs = master.getAllMetaRegionLocations(excludeOfflinedSplitParents);\n-      List<HRegionLocation> list = new ArrayList<>();\n-      GetAllMetaRegionLocationsResponse.Builder builder =\n-        GetAllMetaRegionLocationsResponse.newBuilder();\n-      if (locs != null) {\n-        for (RegionLocations ls : locs) {\n-          for (HRegionLocation loc : ls) {\n-            if (loc != null) {\n-              builder.addMetaLocations(ProtobufUtil.toRegionLocation(loc));\n-              list.add(loc);\n+      MetaLocationCache cache = master.getMetaLocationCache();\n+      List<HRegionLocation> list;\n+      if (cache != null) {", "originalCommit": "7099bdd8a6344d2c0d9a6f9013b08108257096ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxNTM3Mw==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457015373", "bodyText": "For backup masters it will not be null. Active master will set it to null to let requests go to the master local region directly.", "author": "Apache9", "createdAt": "2020-07-20T03:31:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MTUxNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MTY5NA==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456941694", "bodyText": "nit: holder = new CacheHolder(locs)", "author": "virajjasani", "createdAt": "2020-07-19T18:48:46Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master;\n+\n+import static org.apache.hadoop.hbase.client.ConnectionUtils.locateRow;\n+import static org.apache.hadoop.hbase.client.ConnectionUtils.locateRowBefore;\n+import static org.apache.hadoop.hbase.util.FutureUtils.addListener;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.SortedSet;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.hbase.HRegionLocation;\n+import org.apache.hadoop.hbase.RegionLocations;\n+import org.apache.hadoop.hbase.ScheduledChore;\n+import org.apache.hadoop.hbase.Stoppable;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.AsyncClusterConnection;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.client.RegionLocateType;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.hbase.thirdparty.com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * A cache of meta region locations.\n+ */\n+@InterfaceAudience.Private\n+class MetaLocationCache implements Stoppable {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(MetaLocationCache.class);\n+\n+  @VisibleForTesting\n+  static final String SYNC_INTERVAL_SECONDS =\n+    \"hbase.master.meta-location-cache.sync-interval-seconds\";\n+\n+  // default sync every 1 second.\n+  @VisibleForTesting\n+  static final int DEFAULT_SYNC_INTERVAL_SECONDS = 1;\n+\n+  private static final String FETCH_TIMEOUT_MS =\n+    \"hbase.master.meta-location-cache.fetch-timeout-ms\";\n+\n+  // default timeout 1 second\n+  private static final int DEFAULT_FETCH_TIMEOUT_MS = 1000;\n+\n+  private static final class CacheHolder {\n+\n+    final NavigableMap<byte[], RegionLocations> cache;\n+\n+    final List<HRegionLocation> all;\n+\n+    CacheHolder(List<HRegionLocation> all) {\n+      this.all = Collections.unmodifiableList(all);\n+      NavigableMap<byte[], SortedSet<HRegionLocation>> startKeyToLocs =\n+        new TreeMap<>(Bytes.BYTES_COMPARATOR);\n+      for (HRegionLocation loc : all) {\n+        if (loc.getRegion().isSplitParent()) {\n+          continue;\n+        }\n+        startKeyToLocs.computeIfAbsent(loc.getRegion().getStartKey(),\n+          k -> new TreeSet<>((l1, l2) -> l1.getRegion().compareTo(l2.getRegion()))).add(loc);\n+      }\n+      this.cache = startKeyToLocs.entrySet().stream().collect(Collectors.collectingAndThen(\n+        Collectors.toMap(Map.Entry::getKey, e -> new RegionLocations(e.getValue()), (u, v) -> {\n+          throw new IllegalStateException();\n+        }, () -> new TreeMap<>(Bytes.BYTES_COMPARATOR)), Collections::unmodifiableNavigableMap));\n+    }\n+  }\n+\n+  private volatile CacheHolder holder;\n+\n+  private volatile boolean stopped = false;\n+\n+  MetaLocationCache(MasterServices master) {\n+    int syncIntervalSeconds =\n+      master.getConfiguration().getInt(SYNC_INTERVAL_SECONDS, DEFAULT_SYNC_INTERVAL_SECONDS);\n+    int fetchTimeoutMs =\n+      master.getConfiguration().getInt(FETCH_TIMEOUT_MS, DEFAULT_FETCH_TIMEOUT_MS);\n+    master.getChoreService().scheduleChore(new ScheduledChore(\n+      getClass().getSimpleName() + \"-Sync-Chore\", this, syncIntervalSeconds, 0, TimeUnit.SECONDS) {\n+\n+      @Override\n+      protected void chore() {\n+        AsyncClusterConnection conn = master.getAsyncClusterConnection();\n+        if (conn != null) {\n+          addListener(conn.getAllMetaRegionLocations(fetchTimeoutMs), (locs, error) -> {\n+            if (error != null) {\n+              LOG.warn(\"Failed to fetch all meta region locations from active master\", error);\n+              return;\n+            }\n+            CacheHolder ch = new CacheHolder(locs);\n+            holder = ch;", "originalCommit": "7099bdd8a6344d2c0d9a6f9013b08108257096ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4MTY4NQ==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456981685", "bodyText": "I believe thats for thread-safety of holder", "author": "bharathv", "createdAt": "2020-07-20T01:10:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MTY5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxNTgyNw==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457015827", "bodyText": "A simple assign maybe OK. Let me check the logic here. Maybe at the first place the initialization code is not a simple 'new CacheHolder' so I declared a local var for it...", "author": "Apache9", "createdAt": "2020-07-20T03:32:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MTY5NA=="}], "type": "inlineReview", "revised_code": {"commit": "a79b4ffc658b9475796ac229dd249840be7dc825", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java\ndeleted file mode 100644\nindex dd4da2fbf0..0000000000\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java\n+++ /dev/null\n\n@@ -1,164 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hadoop.hbase.master;\n-\n-import static org.apache.hadoop.hbase.client.ConnectionUtils.locateRow;\n-import static org.apache.hadoop.hbase.client.ConnectionUtils.locateRowBefore;\n-import static org.apache.hadoop.hbase.util.FutureUtils.addListener;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.NavigableMap;\n-import java.util.SortedSet;\n-import java.util.TreeMap;\n-import java.util.TreeSet;\n-import java.util.concurrent.TimeUnit;\n-import java.util.stream.Collectors;\n-import org.apache.hadoop.hbase.HRegionLocation;\n-import org.apache.hadoop.hbase.RegionLocations;\n-import org.apache.hadoop.hbase.ScheduledChore;\n-import org.apache.hadoop.hbase.Stoppable;\n-import org.apache.hadoop.hbase.TableName;\n-import org.apache.hadoop.hbase.client.AsyncClusterConnection;\n-import org.apache.hadoop.hbase.client.RegionInfo;\n-import org.apache.hadoop.hbase.client.RegionLocateType;\n-import org.apache.hadoop.hbase.util.Bytes;\n-import org.apache.yetus.audience.InterfaceAudience;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import org.apache.hbase.thirdparty.com.google.common.annotations.VisibleForTesting;\n-\n-/**\n- * A cache of meta region locations.\n- */\n-@InterfaceAudience.Private\n-class MetaLocationCache implements Stoppable {\n-\n-  private static final Logger LOG = LoggerFactory.getLogger(MetaLocationCache.class);\n-\n-  @VisibleForTesting\n-  static final String SYNC_INTERVAL_SECONDS =\n-    \"hbase.master.meta-location-cache.sync-interval-seconds\";\n-\n-  // default sync every 1 second.\n-  @VisibleForTesting\n-  static final int DEFAULT_SYNC_INTERVAL_SECONDS = 1;\n-\n-  private static final String FETCH_TIMEOUT_MS =\n-    \"hbase.master.meta-location-cache.fetch-timeout-ms\";\n-\n-  // default timeout 1 second\n-  private static final int DEFAULT_FETCH_TIMEOUT_MS = 1000;\n-\n-  private static final class CacheHolder {\n-\n-    final NavigableMap<byte[], RegionLocations> cache;\n-\n-    final List<HRegionLocation> all;\n-\n-    CacheHolder(List<HRegionLocation> all) {\n-      this.all = Collections.unmodifiableList(all);\n-      NavigableMap<byte[], SortedSet<HRegionLocation>> startKeyToLocs =\n-        new TreeMap<>(Bytes.BYTES_COMPARATOR);\n-      for (HRegionLocation loc : all) {\n-        if (loc.getRegion().isSplitParent()) {\n-          continue;\n-        }\n-        startKeyToLocs.computeIfAbsent(loc.getRegion().getStartKey(),\n-          k -> new TreeSet<>((l1, l2) -> l1.getRegion().compareTo(l2.getRegion()))).add(loc);\n-      }\n-      this.cache = startKeyToLocs.entrySet().stream().collect(Collectors.collectingAndThen(\n-        Collectors.toMap(Map.Entry::getKey, e -> new RegionLocations(e.getValue()), (u, v) -> {\n-          throw new IllegalStateException();\n-        }, () -> new TreeMap<>(Bytes.BYTES_COMPARATOR)), Collections::unmodifiableNavigableMap));\n-    }\n-  }\n-\n-  private volatile CacheHolder holder;\n-\n-  private volatile boolean stopped = false;\n-\n-  MetaLocationCache(MasterServices master) {\n-    int syncIntervalSeconds =\n-      master.getConfiguration().getInt(SYNC_INTERVAL_SECONDS, DEFAULT_SYNC_INTERVAL_SECONDS);\n-    int fetchTimeoutMs =\n-      master.getConfiguration().getInt(FETCH_TIMEOUT_MS, DEFAULT_FETCH_TIMEOUT_MS);\n-    master.getChoreService().scheduleChore(new ScheduledChore(\n-      getClass().getSimpleName() + \"-Sync-Chore\", this, syncIntervalSeconds, 0, TimeUnit.SECONDS) {\n-\n-      @Override\n-      protected void chore() {\n-        AsyncClusterConnection conn = master.getAsyncClusterConnection();\n-        if (conn != null) {\n-          addListener(conn.getAllMetaRegionLocations(fetchTimeoutMs), (locs, error) -> {\n-            if (error != null) {\n-              LOG.warn(\"Failed to fetch all meta region locations from active master\", error);\n-              return;\n-            }\n-            CacheHolder ch = new CacheHolder(locs);\n-            holder = ch;\n-          });\n-        }\n-      }\n-    });\n-  }\n-\n-  RegionLocations locateMeta(byte[] row, RegionLocateType locateType) {\n-    if (locateType == RegionLocateType.AFTER) {\n-      // as we know the exact row after us, so we can just create the new row, and use the same\n-      // algorithm to locate it.\n-      row = Arrays.copyOf(row, row.length + 1);\n-      locateType = RegionLocateType.CURRENT;\n-    }\n-    CacheHolder holder = this.holder;\n-    if (holder == null) {\n-      return null;\n-    }\n-    return locateType.equals(RegionLocateType.BEFORE) ?\n-      locateRowBefore(holder.cache, TableName.META_TABLE_NAME, row, RegionInfo.DEFAULT_REPLICA_ID) :\n-      locateRow(holder.cache, TableName.META_TABLE_NAME, row, RegionInfo.DEFAULT_REPLICA_ID);\n-  }\n-\n-  List<HRegionLocation> getAllMetaRegionLocations(boolean excludeOfflinedSplitParents) {\n-    CacheHolder holder = this.holder;\n-    if (holder == null) {\n-      return Collections.emptyList();\n-    }\n-    if (excludeOfflinedSplitParents) {\n-      // just return all the locations\n-      return holder.all;\n-    } else {\n-      return holder.all.stream().filter(l -> !l.getRegion().isSplitParent())\n-        .collect(Collectors.toList());\n-    }\n-  }\n-\n-  @Override\n-  public void stop(String why) {\n-    LOG.info(\"Stopping meta location cache: {}\", why);\n-    this.stopped = true;\n-  }\n-\n-  @Override\n-  public boolean isStopped() {\n-    return stopped;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk3MzkzOQ==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456973939", "bodyText": "I think you can also remove MetaRegionLocationCache implementation..", "author": "bharathv", "createdAt": "2020-07-20T00:13:06Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMetaRegionLocationCache.java", "diffHunk": "@@ -1,191 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hadoop.hbase.client;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.hbase.HBaseClassTestRule;\n-import org.apache.hadoop.hbase.HBaseTestingUtility;\n-import org.apache.hadoop.hbase.HConstants;\n-import org.apache.hadoop.hbase.HRegionLocation;\n-import org.apache.hadoop.hbase.MultithreadedTestUtil;\n-import org.apache.hadoop.hbase.ServerName;\n-import org.apache.hadoop.hbase.master.HMaster;\n-import org.apache.hadoop.hbase.master.MetaRegionLocationCache;\n-import org.apache.hadoop.hbase.master.RegionState;\n-import org.apache.hadoop.hbase.testclassification.MasterTests;\n-import org.apache.hadoop.hbase.testclassification.SmallTests;\n-import org.apache.hadoop.hbase.util.JVMClusterUtil;\n-import org.apache.hadoop.hbase.zookeeper.MetaTableLocator;\n-import org.apache.hadoop.hbase.zookeeper.ZKUtil;\n-import org.apache.hadoop.hbase.zookeeper.ZKWatcher;\n-import org.apache.hadoop.hbase.zookeeper.ZNodePaths;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.ClassRule;\n-import org.junit.Test;\n-import org.junit.experimental.categories.Category;\n-\n-import org.apache.hbase.thirdparty.com.google.common.io.Closeables;\n-\n-@Category({ SmallTests.class, MasterTests.class })", "originalCommit": "7099bdd8a6344d2c0d9a6f9013b08108257096ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk3NDkyMA==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456974920", "bodyText": "Should we consider merging the both the APIs to fetch meta locations into a single RPC call to keep this interface simple and clean? Right now it maps 1:1 to the requirements of RegionLocator API.", "author": "bharathv", "createdAt": "2020-07-20T00:21:25Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionRegistry.java", "diffHunk": "@@ -18,21 +18,36 @@\n package org.apache.hadoop.hbase.client;\n \n import java.io.Closeable;\n+import java.util.List;\n import java.util.concurrent.CompletableFuture;\n+import org.apache.hadoop.hbase.HRegionLocation;\n+import org.apache.hadoop.hbase.RegionLocations;\n import org.apache.hadoop.hbase.ServerName;\n import org.apache.yetus.audience.InterfaceAudience;\n \n /**\n  * Registry for meta information needed for connection setup to a HBase cluster. Implementations\n- * hold cluster information such as this cluster's id, location of hbase:meta, etc..\n- * Internal use only.\n+ * hold cluster information such as this cluster's id, location of hbase:meta, etc.. Internal use\n+ * only.\n  */\n @InterfaceAudience.Private\n interface ConnectionRegistry extends Closeable {\n \n+  /**\n+   * Get location of meta region for the given {@code row}.\n+   */\n+  CompletableFuture<RegionLocations> locateMeta(byte[] row, RegionLocateType locateType);\n+\n+  /**\n+   * Get all meta region locations, including the location of secondary regions.\n+   * @param excludeOfflinedSplitParents whether to include split parent.\n+   */\n+  CompletableFuture<List<HRegionLocation>>", "originalCommit": "7099bdd8a6344d2c0d9a6f9013b08108257096ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5MDk0OA==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456990948", "bodyText": "I think it is fine? The locateMeta method will be called much more than getAllMetaRegionLocations, if we merge them into one method, the parameters will be more complicated.", "author": "Apache9", "createdAt": "2020-07-20T02:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk3NDkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE4Nzg0NA==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457187844", "bodyText": "I think it's fine to keep them separate, logically it might make sense to combine them but given that Rpc service interface also has the same separation, here we can maintain it for easy mapping. Yes it is 1:1 with RPC call, but still looks simple. Anyways, I don't have strong preference here.", "author": "virajjasani", "createdAt": "2020-07-20T08:48:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk3NDkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIzNjUwNA==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r458236504", "bodyText": "Yeah, noted previously that there is overlap with RegionLocator API. One bother is that RL is public. CR is not (though I think changing it after release will be troublesome..)", "author": "saintstack", "createdAt": "2020-07-21T16:38:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk3NDkyMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk3ODM5NA==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456978394", "bodyText": "rpcClient.close()?", "author": "bharathv", "createdAt": "2020-07-20T00:48:23Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java", "diffHunk": "@@ -229,6 +264,45 @@ private void getMetaRegionLocation(CompletableFuture<RegionLocations> future,\n       });\n   }\n \n+  private CompletableFuture<Interface> getStub() {\n+    return ConnectionUtils.getMasterStub(this, stub, stubMakeFuture, rpcClient, user,\n+      readRpcTimeoutNs, TimeUnit.NANOSECONDS, ClientMetaService::newStub, \"ClientMetaService\");\n+  }\n+\n+  @Override\n+  public CompletableFuture<RegionLocations> locateMeta(byte[] row, RegionLocateType locateType) {\n+    CompletableFuture<RegionLocations> future = new CompletableFuture<>();\n+    addListener(getStub(), (stub, error) -> {\n+      if (error != null) {\n+        future.completeExceptionally(error);\n+        return;\n+      }\n+      HBaseRpcController controller = rpcControllerFactory.newController();\n+      stub.locateMetaRegion(controller,\n+        LocateMetaRegionRequest.newBuilder().setRow(ByteString.copyFrom(row))\n+          .setLocateType(ProtobufUtil.toProtoRegionLocateType(locateType)).build(),\n+        resp -> {\n+          if (controller.failed()) {\n+            IOException ex = controller.getFailed();\n+            ConnectionUtils.tryClearMasterStubCache(ex, stub, ZKConnectionRegistry.this.stub);\n+            future.completeExceptionally(ex);\n+            return;\n+          }\n+          RegionLocations locs = new RegionLocations(resp.getMetaLocationsList().stream()\n+            .map(ProtobufUtil::toRegionLocation).collect(Collectors.toList()));\n+          future.complete(locs);\n+        });\n+    });\n+    return future;\n+  }\n+\n+  @Override\n+  public CompletableFuture<List<HRegionLocation>>\n+    getAllMetaRegionLocations(boolean excludeOfflinedSplitParents) {\n+    return ConnectionUtils.getAllMetaRegionLocations(excludeOfflinedSplitParents, getStub(), stub,\n+      rpcControllerFactory, -1);\n+  }\n+\n   @Override\n   public void close() {\n     zk.close();", "originalCommit": "7099bdd8a6344d2c0d9a6f9013b08108257096ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a79b4ffc658b9475796ac229dd249840be7dc825", "chunk": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java\nindex 655f861fbf..a10ef18199 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java\n\n@@ -264,8 +263,8 @@ class ZKConnectionRegistry implements ConnectionRegistry {\n       });\n   }\n \n-  private CompletableFuture<Interface> getStub() {\n-    return ConnectionUtils.getMasterStub(this, stub, stubMakeFuture, rpcClient, user,\n+  private CompletableFuture<ClientMetaService.Interface> getStub() {\n+    return ConnectionUtils.getMasterStub(this, cachedStub, stubMakeFuture, rpcClient, user,\n       readRpcTimeoutNs, TimeUnit.NANOSECONDS, ClientMetaService::newStub, \"ClientMetaService\");\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk3ODc1OA==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456978758", "bodyText": "nit: call it cachedStub or something?", "author": "bharathv", "createdAt": "2020-07-20T00:50:48Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java", "diffHunk": "@@ -59,9 +74,29 @@\n \n   private final ZNodePaths znodePaths;\n \n-  ZKConnectionRegistry(Configuration conf) {\n+  private final AtomicReference<Interface> stub = new AtomicReference<>();", "originalCommit": "7099bdd8a6344d2c0d9a6f9013b08108257096ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a79b4ffc658b9475796ac229dd249840be7dc825", "chunk": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java\nindex 655f861fbf..a10ef18199 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java\n\n@@ -74,9 +73,9 @@ class ZKConnectionRegistry implements ConnectionRegistry {\n \n   private final ZNodePaths znodePaths;\n \n-  private final AtomicReference<Interface> stub = new AtomicReference<>();\n+  private final AtomicReference<ClientMetaService.Interface> cachedStub = new AtomicReference<>();\n \n-  private final AtomicReference<CompletableFuture<Interface>> stubMakeFuture =\n+  private final AtomicReference<CompletableFuture<ClientMetaService.Interface>> stubMakeFuture =\n     new AtomicReference<>();\n \n   // RPC client used to talk to the masters.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk3OTEwOQ==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456979109", "bodyText": "I liked @saintstack's idea in the design doc where we can ask active master for the list of available masters and load balance the RPCs. I think that can be used both here (to randomize the master we are talking to) and in master registry to always maintain a fresh list of masters and only use the initial list of masters a seed input.\n(I can quickly add that feature if everyone is okay with it).", "author": "bharathv", "createdAt": "2020-07-20T00:53:22Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java", "diffHunk": "@@ -652,4 +626,160 @@ static void setCoprocessorError(RpcController controller, Throwable error) {\n       controller.setFailed(error.toString());\n     }\n   }\n+\n+  public static RegionLocations locateRow(NavigableMap<byte[], RegionLocations> cache,\n+    TableName tableName, byte[] row, int replicaId) {\n+    Map.Entry<byte[], RegionLocations> entry = cache.floorEntry(row);\n+    if (entry == null) {\n+      return null;\n+    }\n+    RegionLocations locs = entry.getValue();\n+    HRegionLocation loc = locs.getRegionLocation(replicaId);\n+    if (loc == null) {\n+      return null;\n+    }\n+    byte[] endKey = loc.getRegion().getEndKey();\n+    if (isEmptyStopRow(endKey) || Bytes.compareTo(row, endKey) < 0) {\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(\"Found {} in cache for {}, row='{}', locateType={}, replicaId={}\", loc, tableName,\n+          Bytes.toStringBinary(row), RegionLocateType.CURRENT, replicaId);\n+      }\n+      return locs;\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public static RegionLocations locateRowBefore(NavigableMap<byte[], RegionLocations> cache,\n+    TableName tableName, byte[] row, int replicaId) {\n+    boolean isEmptyStopRow = isEmptyStopRow(row);\n+    Map.Entry<byte[], RegionLocations> entry =\n+      isEmptyStopRow ? cache.lastEntry() : cache.lowerEntry(row);\n+    if (entry == null) {\n+      return null;\n+    }\n+    RegionLocations locs = entry.getValue();\n+    HRegionLocation loc = locs.getRegionLocation(replicaId);\n+    if (loc == null) {\n+      return null;\n+    }\n+    if (isEmptyStopRow(loc.getRegion().getEndKey()) ||\n+      (!isEmptyStopRow && Bytes.compareTo(loc.getRegion().getEndKey(), row) >= 0)) {\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(\"Found {} in cache for {}, row='{}', locateType={}, replicaId={}\", loc, tableName,\n+          Bytes.toStringBinary(row), RegionLocateType.BEFORE, replicaId);\n+      }\n+      return locs;\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public static void tryClearMasterStubCache(IOException error,\n+    ClientMetaService.Interface currentStub, AtomicReference<ClientMetaService.Interface> stub) {\n+    if (ClientExceptionsUtil.isConnectionException(error) ||\n+      error instanceof ServerNotRunningYetException) {\n+      stub.compareAndSet(currentStub, null);\n+    }\n+  }\n+\n+  public static <T> CompletableFuture<T> getMasterStub(ConnectionRegistry registry,\n+    AtomicReference<T> stub, AtomicReference<CompletableFuture<T>> stubMakeFuture,\n+    RpcClient rpcClient, User user, long rpcTimeout, TimeUnit unit,\n+    Function<RpcChannel, T> stubMaker, String type) {\n+    return getOrFetch(stub, stubMakeFuture, () -> {\n+      CompletableFuture<T> future = new CompletableFuture<>();\n+      addListener(registry.getActiveMaster(), (addr, error) -> {", "originalCommit": "7099bdd8a6344d2c0d9a6f9013b08108257096ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5NDMxNA==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456994314", "bodyText": "+1. Can file another issue for it.", "author": "Apache9", "createdAt": "2020-07-20T02:18:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk3OTEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3NTcyNw==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457175727", "bodyText": "+1", "author": "virajjasani", "createdAt": "2020-07-20T08:32:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk3OTEwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "a79b4ffc658b9475796ac229dd249840be7dc825", "chunk": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java\nindex 7ff03ef137..86d6442f8f 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java\n\n@@ -710,11 +710,11 @@ public final class ConnectionUtils {\n     }, type);\n   }\n \n-  private static <T> CompletableFuture<T> getOrFetch(AtomicReference<T> cacheRef,\n-    AtomicReference<CompletableFuture<T>> futureRef, \n-    Supplier<CompletableFuture<T>> fetch, String type) {\n+  private static <T> CompletableFuture<T> getOrFetch(AtomicReference<T> cachedRef,\n+    AtomicReference<CompletableFuture<T>> futureRef, Supplier<CompletableFuture<T>> fetch,\n+    String type) {\n     for (;;) {\n-      T cachedValue = cacheRef.get();\n+      T cachedValue = cachedRef.get();\n       if (cachedValue != null) {\n         return CompletableFuture.completedFuture(cachedValue);\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4MTAzMw==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456981033", "bodyText": "Why do we need the else part? It looks like the cache runs on all masters ?", "author": "bharathv", "createdAt": "2020-07-20T01:06:36Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterRpcServices.java", "diffHunk": "@@ -2928,13 +2928,27 @@ public GetActiveMasterResponse getActiveMaster(RpcController rpcController,\n \n   @Override\n   public GetMetaRegionLocationsResponse getMetaRegionLocations(RpcController rpcController,\n-      GetMetaRegionLocationsRequest request) throws ServiceException {\n-    GetMetaRegionLocationsResponse.Builder response = GetMetaRegionLocationsResponse.newBuilder();\n-    Optional<List<HRegionLocation>> metaLocations =\n-        master.getMetaRegionLocationCache().getMetaRegionLocations();\n-    metaLocations.ifPresent(hRegionLocations -> hRegionLocations.forEach(\n-      location -> response.addMetaLocations(ProtobufUtil.toRegionLocation(location))));\n-    return response.build();\n+    GetMetaRegionLocationsRequest request) throws ServiceException {\n+    MetaLocationCache cache = master.getMetaLocationCache();\n+    RegionLocations locs;\n+    try {\n+      if (cache != null) {\n+        locs = cache.locateMeta(HConstants.EMPTY_BYTE_ARRAY, RegionLocateType.CURRENT);\n+      } else {", "originalCommit": "7099bdd8a6344d2c0d9a6f9013b08108257096ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5NDc4MA==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456994780", "bodyText": "The design is when master becomes active, we will serve the requests by the local master region dreictly, so we will set cache to null after we successfully initialize the master local region. This is important as backup masters will also use the getAllMetaRegionLocations method to sync from active master.", "author": "Apache9", "createdAt": "2020-07-20T02:20:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4MTAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1NzExNg==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457757116", "bodyText": "Ah got it, I missed that part in the first iteration, I think you could roll that logic into the cache to keep the lifecycle simple (since the cache already has access to the master and we can check if master.isActive()). That way all the callers only use the cache and we can avoid the logic in finishMasterInitialization logic.\nAlso as discussed in the design doc, would be nice to have an actual versioned cache that avoids round trips if nothing changes (for the future). The 1s pull seems a bit aggressive but is fine as a stop-gap I guess.", "author": "bharathv", "createdAt": "2020-07-20T23:59:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4MTAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc4OTk0MQ==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457789941", "bodyText": "Yes, will try to do this as a follow on. Maybe need to introduce another method for doing this, as the return value should have a way tell the upper layer there is no change, and also we should not have the excludeOfflineSplitParent option for this method, otherwise the semantice will be confusing.", "author": "Apache9", "createdAt": "2020-07-21T01:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4MTAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc5Mjc3OQ==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457792779", "bodyText": "And on the cache stuff, at least we need to stop the chore after switching to active master? And for active master, we will not get from cache any more, still using the cache will be a bit confusing.", "author": "Apache9", "createdAt": "2020-07-21T02:06:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4MTAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4NzczMg==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r458287732", "bodyText": "Serving from NavigableMap should be faster than fetch from local Region? For this reason would we want to do like @bharathv  suggests (can be follow-on)", "author": "saintstack", "createdAt": "2020-07-21T18:01:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4MTAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NzkzNg==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r458457936", "bodyText": "What @bharathv mean is we can reuse the cache interface to simpilify the code, not for performance. After switching to active master we should serve the requests with local region, as we do not want to keep a cache at active master which could be stale?", "author": "Apache9", "createdAt": "2020-07-22T00:05:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4MTAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2MTg0NQ==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r458461845", "bodyText": "I was talking performance. Why would a cache on active Region be stale? Why would it not be updated on write the Region?", "author": "saintstack", "createdAt": "2020-07-22T00:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4MTAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NTI3Nw==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r458465277", "bodyText": "Now the cache is running as a side logic besides the core. Making it always sync with the local region will mess up the code when updating local region, especially that the local region is not for storing root. Since we could also set the family to in memory, I do not think the performance will be much better so I do not think it is worth to also introduce a cache for active master. No big gain but the code will be much complicated.", "author": "Apache9", "createdAt": "2020-07-22T00:32:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4MTAzMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4MTgyOQ==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456981829", "bodyText": "nit: conn reference can be cached once", "author": "bharathv", "createdAt": "2020-07-20T01:11:45Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master;\n+\n+import static org.apache.hadoop.hbase.client.ConnectionUtils.locateRow;\n+import static org.apache.hadoop.hbase.client.ConnectionUtils.locateRowBefore;\n+import static org.apache.hadoop.hbase.util.FutureUtils.addListener;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.SortedSet;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.hbase.HRegionLocation;\n+import org.apache.hadoop.hbase.RegionLocations;\n+import org.apache.hadoop.hbase.ScheduledChore;\n+import org.apache.hadoop.hbase.Stoppable;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.AsyncClusterConnection;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.client.RegionLocateType;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.hbase.thirdparty.com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * A cache of meta region locations.\n+ */\n+@InterfaceAudience.Private\n+class MetaLocationCache implements Stoppable {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(MetaLocationCache.class);\n+\n+  @VisibleForTesting\n+  static final String SYNC_INTERVAL_SECONDS =\n+    \"hbase.master.meta-location-cache.sync-interval-seconds\";\n+\n+  // default sync every 1 second.\n+  @VisibleForTesting\n+  static final int DEFAULT_SYNC_INTERVAL_SECONDS = 1;\n+\n+  private static final String FETCH_TIMEOUT_MS =\n+    \"hbase.master.meta-location-cache.fetch-timeout-ms\";\n+\n+  // default timeout 1 second\n+  private static final int DEFAULT_FETCH_TIMEOUT_MS = 1000;\n+\n+  private static final class CacheHolder {\n+\n+    final NavigableMap<byte[], RegionLocations> cache;\n+\n+    final List<HRegionLocation> all;\n+\n+    CacheHolder(List<HRegionLocation> all) {\n+      this.all = Collections.unmodifiableList(all);\n+      NavigableMap<byte[], SortedSet<HRegionLocation>> startKeyToLocs =\n+        new TreeMap<>(Bytes.BYTES_COMPARATOR);\n+      for (HRegionLocation loc : all) {\n+        if (loc.getRegion().isSplitParent()) {\n+          continue;\n+        }\n+        startKeyToLocs.computeIfAbsent(loc.getRegion().getStartKey(),\n+          k -> new TreeSet<>((l1, l2) -> l1.getRegion().compareTo(l2.getRegion()))).add(loc);\n+      }\n+      this.cache = startKeyToLocs.entrySet().stream().collect(Collectors.collectingAndThen(\n+        Collectors.toMap(Map.Entry::getKey, e -> new RegionLocations(e.getValue()), (u, v) -> {\n+          throw new IllegalStateException();\n+        }, () -> new TreeMap<>(Bytes.BYTES_COMPARATOR)), Collections::unmodifiableNavigableMap));\n+    }\n+  }\n+\n+  private volatile CacheHolder holder;\n+\n+  private volatile boolean stopped = false;\n+\n+  MetaLocationCache(MasterServices master) {\n+    int syncIntervalSeconds =\n+      master.getConfiguration().getInt(SYNC_INTERVAL_SECONDS, DEFAULT_SYNC_INTERVAL_SECONDS);\n+    int fetchTimeoutMs =\n+      master.getConfiguration().getInt(FETCH_TIMEOUT_MS, DEFAULT_FETCH_TIMEOUT_MS);\n+    master.getChoreService().scheduleChore(new ScheduledChore(\n+      getClass().getSimpleName() + \"-Sync-Chore\", this, syncIntervalSeconds, 0, TimeUnit.SECONDS) {\n+\n+      @Override\n+      protected void chore() {\n+        AsyncClusterConnection conn = master.getAsyncClusterConnection();", "originalCommit": "7099bdd8a6344d2c0d9a6f9013b08108257096ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a79b4ffc658b9475796ac229dd249840be7dc825", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java\ndeleted file mode 100644\nindex dd4da2fbf0..0000000000\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java\n+++ /dev/null\n\n@@ -1,164 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hadoop.hbase.master;\n-\n-import static org.apache.hadoop.hbase.client.ConnectionUtils.locateRow;\n-import static org.apache.hadoop.hbase.client.ConnectionUtils.locateRowBefore;\n-import static org.apache.hadoop.hbase.util.FutureUtils.addListener;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.NavigableMap;\n-import java.util.SortedSet;\n-import java.util.TreeMap;\n-import java.util.TreeSet;\n-import java.util.concurrent.TimeUnit;\n-import java.util.stream.Collectors;\n-import org.apache.hadoop.hbase.HRegionLocation;\n-import org.apache.hadoop.hbase.RegionLocations;\n-import org.apache.hadoop.hbase.ScheduledChore;\n-import org.apache.hadoop.hbase.Stoppable;\n-import org.apache.hadoop.hbase.TableName;\n-import org.apache.hadoop.hbase.client.AsyncClusterConnection;\n-import org.apache.hadoop.hbase.client.RegionInfo;\n-import org.apache.hadoop.hbase.client.RegionLocateType;\n-import org.apache.hadoop.hbase.util.Bytes;\n-import org.apache.yetus.audience.InterfaceAudience;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import org.apache.hbase.thirdparty.com.google.common.annotations.VisibleForTesting;\n-\n-/**\n- * A cache of meta region locations.\n- */\n-@InterfaceAudience.Private\n-class MetaLocationCache implements Stoppable {\n-\n-  private static final Logger LOG = LoggerFactory.getLogger(MetaLocationCache.class);\n-\n-  @VisibleForTesting\n-  static final String SYNC_INTERVAL_SECONDS =\n-    \"hbase.master.meta-location-cache.sync-interval-seconds\";\n-\n-  // default sync every 1 second.\n-  @VisibleForTesting\n-  static final int DEFAULT_SYNC_INTERVAL_SECONDS = 1;\n-\n-  private static final String FETCH_TIMEOUT_MS =\n-    \"hbase.master.meta-location-cache.fetch-timeout-ms\";\n-\n-  // default timeout 1 second\n-  private static final int DEFAULT_FETCH_TIMEOUT_MS = 1000;\n-\n-  private static final class CacheHolder {\n-\n-    final NavigableMap<byte[], RegionLocations> cache;\n-\n-    final List<HRegionLocation> all;\n-\n-    CacheHolder(List<HRegionLocation> all) {\n-      this.all = Collections.unmodifiableList(all);\n-      NavigableMap<byte[], SortedSet<HRegionLocation>> startKeyToLocs =\n-        new TreeMap<>(Bytes.BYTES_COMPARATOR);\n-      for (HRegionLocation loc : all) {\n-        if (loc.getRegion().isSplitParent()) {\n-          continue;\n-        }\n-        startKeyToLocs.computeIfAbsent(loc.getRegion().getStartKey(),\n-          k -> new TreeSet<>((l1, l2) -> l1.getRegion().compareTo(l2.getRegion()))).add(loc);\n-      }\n-      this.cache = startKeyToLocs.entrySet().stream().collect(Collectors.collectingAndThen(\n-        Collectors.toMap(Map.Entry::getKey, e -> new RegionLocations(e.getValue()), (u, v) -> {\n-          throw new IllegalStateException();\n-        }, () -> new TreeMap<>(Bytes.BYTES_COMPARATOR)), Collections::unmodifiableNavigableMap));\n-    }\n-  }\n-\n-  private volatile CacheHolder holder;\n-\n-  private volatile boolean stopped = false;\n-\n-  MetaLocationCache(MasterServices master) {\n-    int syncIntervalSeconds =\n-      master.getConfiguration().getInt(SYNC_INTERVAL_SECONDS, DEFAULT_SYNC_INTERVAL_SECONDS);\n-    int fetchTimeoutMs =\n-      master.getConfiguration().getInt(FETCH_TIMEOUT_MS, DEFAULT_FETCH_TIMEOUT_MS);\n-    master.getChoreService().scheduleChore(new ScheduledChore(\n-      getClass().getSimpleName() + \"-Sync-Chore\", this, syncIntervalSeconds, 0, TimeUnit.SECONDS) {\n-\n-      @Override\n-      protected void chore() {\n-        AsyncClusterConnection conn = master.getAsyncClusterConnection();\n-        if (conn != null) {\n-          addListener(conn.getAllMetaRegionLocations(fetchTimeoutMs), (locs, error) -> {\n-            if (error != null) {\n-              LOG.warn(\"Failed to fetch all meta region locations from active master\", error);\n-              return;\n-            }\n-            CacheHolder ch = new CacheHolder(locs);\n-            holder = ch;\n-          });\n-        }\n-      }\n-    });\n-  }\n-\n-  RegionLocations locateMeta(byte[] row, RegionLocateType locateType) {\n-    if (locateType == RegionLocateType.AFTER) {\n-      // as we know the exact row after us, so we can just create the new row, and use the same\n-      // algorithm to locate it.\n-      row = Arrays.copyOf(row, row.length + 1);\n-      locateType = RegionLocateType.CURRENT;\n-    }\n-    CacheHolder holder = this.holder;\n-    if (holder == null) {\n-      return null;\n-    }\n-    return locateType.equals(RegionLocateType.BEFORE) ?\n-      locateRowBefore(holder.cache, TableName.META_TABLE_NAME, row, RegionInfo.DEFAULT_REPLICA_ID) :\n-      locateRow(holder.cache, TableName.META_TABLE_NAME, row, RegionInfo.DEFAULT_REPLICA_ID);\n-  }\n-\n-  List<HRegionLocation> getAllMetaRegionLocations(boolean excludeOfflinedSplitParents) {\n-    CacheHolder holder = this.holder;\n-    if (holder == null) {\n-      return Collections.emptyList();\n-    }\n-    if (excludeOfflinedSplitParents) {\n-      // just return all the locations\n-      return holder.all;\n-    } else {\n-      return holder.all.stream().filter(l -> !l.getRegion().isSplitParent())\n-        .collect(Collectors.toList());\n-    }\n-  }\n-\n-  @Override\n-  public void stop(String why) {\n-    LOG.info(\"Stopping meta location cache: {}\", why);\n-    this.stopped = true;\n-  }\n-\n-  @Override\n-  public boolean isStopped() {\n-    return stopped;\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4MjE1OQ==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r456982159", "bodyText": "We need any tests to test sync / timeout etc of this cache?", "author": "bharathv", "createdAt": "2020-07-20T01:13:59Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master;\n+\n+import static org.apache.hadoop.hbase.client.ConnectionUtils.locateRow;\n+import static org.apache.hadoop.hbase.client.ConnectionUtils.locateRowBefore;\n+import static org.apache.hadoop.hbase.util.FutureUtils.addListener;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.SortedSet;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.hbase.HRegionLocation;\n+import org.apache.hadoop.hbase.RegionLocations;\n+import org.apache.hadoop.hbase.ScheduledChore;\n+import org.apache.hadoop.hbase.Stoppable;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.AsyncClusterConnection;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.client.RegionLocateType;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.hbase.thirdparty.com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * A cache of meta region locations.\n+ */\n+@InterfaceAudience.Private\n+class MetaLocationCache implements Stoppable {", "originalCommit": "7099bdd8a6344d2c0d9a6f9013b08108257096ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3MjQ2OA==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457072468", "bodyText": "Will do.", "author": "Apache9", "createdAt": "2020-07-20T05:46:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk4MjE1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a79b4ffc658b9475796ac229dd249840be7dc825", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java\ndeleted file mode 100644\nindex dd4da2fbf0..0000000000\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java\n+++ /dev/null\n\n@@ -1,164 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hadoop.hbase.master;\n-\n-import static org.apache.hadoop.hbase.client.ConnectionUtils.locateRow;\n-import static org.apache.hadoop.hbase.client.ConnectionUtils.locateRowBefore;\n-import static org.apache.hadoop.hbase.util.FutureUtils.addListener;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.NavigableMap;\n-import java.util.SortedSet;\n-import java.util.TreeMap;\n-import java.util.TreeSet;\n-import java.util.concurrent.TimeUnit;\n-import java.util.stream.Collectors;\n-import org.apache.hadoop.hbase.HRegionLocation;\n-import org.apache.hadoop.hbase.RegionLocations;\n-import org.apache.hadoop.hbase.ScheduledChore;\n-import org.apache.hadoop.hbase.Stoppable;\n-import org.apache.hadoop.hbase.TableName;\n-import org.apache.hadoop.hbase.client.AsyncClusterConnection;\n-import org.apache.hadoop.hbase.client.RegionInfo;\n-import org.apache.hadoop.hbase.client.RegionLocateType;\n-import org.apache.hadoop.hbase.util.Bytes;\n-import org.apache.yetus.audience.InterfaceAudience;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import org.apache.hbase.thirdparty.com.google.common.annotations.VisibleForTesting;\n-\n-/**\n- * A cache of meta region locations.\n- */\n-@InterfaceAudience.Private\n-class MetaLocationCache implements Stoppable {\n-\n-  private static final Logger LOG = LoggerFactory.getLogger(MetaLocationCache.class);\n-\n-  @VisibleForTesting\n-  static final String SYNC_INTERVAL_SECONDS =\n-    \"hbase.master.meta-location-cache.sync-interval-seconds\";\n-\n-  // default sync every 1 second.\n-  @VisibleForTesting\n-  static final int DEFAULT_SYNC_INTERVAL_SECONDS = 1;\n-\n-  private static final String FETCH_TIMEOUT_MS =\n-    \"hbase.master.meta-location-cache.fetch-timeout-ms\";\n-\n-  // default timeout 1 second\n-  private static final int DEFAULT_FETCH_TIMEOUT_MS = 1000;\n-\n-  private static final class CacheHolder {\n-\n-    final NavigableMap<byte[], RegionLocations> cache;\n-\n-    final List<HRegionLocation> all;\n-\n-    CacheHolder(List<HRegionLocation> all) {\n-      this.all = Collections.unmodifiableList(all);\n-      NavigableMap<byte[], SortedSet<HRegionLocation>> startKeyToLocs =\n-        new TreeMap<>(Bytes.BYTES_COMPARATOR);\n-      for (HRegionLocation loc : all) {\n-        if (loc.getRegion().isSplitParent()) {\n-          continue;\n-        }\n-        startKeyToLocs.computeIfAbsent(loc.getRegion().getStartKey(),\n-          k -> new TreeSet<>((l1, l2) -> l1.getRegion().compareTo(l2.getRegion()))).add(loc);\n-      }\n-      this.cache = startKeyToLocs.entrySet().stream().collect(Collectors.collectingAndThen(\n-        Collectors.toMap(Map.Entry::getKey, e -> new RegionLocations(e.getValue()), (u, v) -> {\n-          throw new IllegalStateException();\n-        }, () -> new TreeMap<>(Bytes.BYTES_COMPARATOR)), Collections::unmodifiableNavigableMap));\n-    }\n-  }\n-\n-  private volatile CacheHolder holder;\n-\n-  private volatile boolean stopped = false;\n-\n-  MetaLocationCache(MasterServices master) {\n-    int syncIntervalSeconds =\n-      master.getConfiguration().getInt(SYNC_INTERVAL_SECONDS, DEFAULT_SYNC_INTERVAL_SECONDS);\n-    int fetchTimeoutMs =\n-      master.getConfiguration().getInt(FETCH_TIMEOUT_MS, DEFAULT_FETCH_TIMEOUT_MS);\n-    master.getChoreService().scheduleChore(new ScheduledChore(\n-      getClass().getSimpleName() + \"-Sync-Chore\", this, syncIntervalSeconds, 0, TimeUnit.SECONDS) {\n-\n-      @Override\n-      protected void chore() {\n-        AsyncClusterConnection conn = master.getAsyncClusterConnection();\n-        if (conn != null) {\n-          addListener(conn.getAllMetaRegionLocations(fetchTimeoutMs), (locs, error) -> {\n-            if (error != null) {\n-              LOG.warn(\"Failed to fetch all meta region locations from active master\", error);\n-              return;\n-            }\n-            CacheHolder ch = new CacheHolder(locs);\n-            holder = ch;\n-          });\n-        }\n-      }\n-    });\n-  }\n-\n-  RegionLocations locateMeta(byte[] row, RegionLocateType locateType) {\n-    if (locateType == RegionLocateType.AFTER) {\n-      // as we know the exact row after us, so we can just create the new row, and use the same\n-      // algorithm to locate it.\n-      row = Arrays.copyOf(row, row.length + 1);\n-      locateType = RegionLocateType.CURRENT;\n-    }\n-    CacheHolder holder = this.holder;\n-    if (holder == null) {\n-      return null;\n-    }\n-    return locateType.equals(RegionLocateType.BEFORE) ?\n-      locateRowBefore(holder.cache, TableName.META_TABLE_NAME, row, RegionInfo.DEFAULT_REPLICA_ID) :\n-      locateRow(holder.cache, TableName.META_TABLE_NAME, row, RegionInfo.DEFAULT_REPLICA_ID);\n-  }\n-\n-  List<HRegionLocation> getAllMetaRegionLocations(boolean excludeOfflinedSplitParents) {\n-    CacheHolder holder = this.holder;\n-    if (holder == null) {\n-      return Collections.emptyList();\n-    }\n-    if (excludeOfflinedSplitParents) {\n-      // just return all the locations\n-      return holder.all;\n-    } else {\n-      return holder.all.stream().filter(l -> !l.getRegion().isSplitParent())\n-        .collect(Collectors.toList());\n-    }\n-  }\n-\n-  @Override\n-  public void stop(String why) {\n-    LOG.info(\"Stopping meta location cache: {}\", why);\n-    this.stopped = true;\n-  }\n-\n-  @Override\n-  public boolean isStopped() {\n-    return stopped;\n-  }\n-}\n"}}, {"oid": "a79b4ffc658b9475796ac229dd249840be7dc825", "url": "https://github.com/apache/hbase/commit/a79b4ffc658b9475796ac229dd249840be7dc825", "message": "HBASE-24459 Move the locateMeta logic from AsyncMetaRegionTableLocator to ConnectionRegistry", "committedDate": "2020-07-20T05:46:36Z", "type": "forcePushed"}, {"oid": "488a9b7e92a5db536f2287a19b17f2f38dbf1d77", "url": "https://github.com/apache/hbase/commit/488a9b7e92a5db536f2287a19b17f2f38dbf1d77", "message": "HBASE-24459 Move the locateMeta logic from AsyncMetaRegionTableLocator to ConnectionRegistry", "committedDate": "2020-07-20T06:16:17Z", "type": "forcePushed"}, {"oid": "6c7fd65482301a1bc6c4890b74633d18a365b9b2", "url": "https://github.com/apache/hbase/commit/6c7fd65482301a1bc6c4890b74633d18a365b9b2", "message": "HBASE-24459 Move the locateMeta logic from AsyncMetaRegionTableLocator to ConnectionRegistry", "committedDate": "2020-07-20T14:09:48Z", "type": "forcePushed"}, {"oid": "4e0cd933d7c2b619b34a75bdc196d5be47fe2184", "url": "https://github.com/apache/hbase/commit/4e0cd933d7c2b619b34a75bdc196d5be47fe2184", "message": "HBASE-24459 Move the locateMeta logic from AsyncMetaRegionTableLocator to ConnectionRegistry", "committedDate": "2020-07-20T14:16:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQwMTE2NA==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457401164", "bodyText": "nit: final ?", "author": "virajjasani", "createdAt": "2020-07-20T13:49:03Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaLocationCache.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.ChoreService;\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HBaseConfiguration;\n+import org.apache.hadoop.hbase.HRegionLocation;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.AsyncClusterConnection;\n+import org.apache.hadoop.hbase.client.RegionInfoBuilder;\n+import org.apache.hadoop.hbase.testclassification.MasterTests;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n+import org.apache.hadoop.hbase.util.FutureUtils;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category({ MasterTests.class, MediumTests.class })\n+public class TestMetaLocationCache {\n+\n+  @ClassRule\n+  public static final HBaseClassTestRule CLASS_RULE =\n+    HBaseClassTestRule.forClass(TestMetaFixerNoCluster.class);\n+\n+  private static Configuration CONF = HBaseConfiguration.create();", "originalCommit": "9e3f6b8ca1231e9d702da607d9775a3e58bea033", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6c7fd65482301a1bc6c4890b74633d18a365b9b2", "chunk": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaLocationCache.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaLocationCache.java\nindex 00d079f2e1..ac314bb153 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaLocationCache.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaLocationCache.java\n\n@@ -17,7 +17,9 @@\n  */\n package org.apache.hadoop.hbase.master;\n \n+import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n import static org.mockito.ArgumentMatchers.anyInt;\n import static org.mockito.Mockito.mock;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyNjc1Nw==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457426757", "bodyText": "typo: TestMetaLocationCache", "author": "virajjasani", "createdAt": "2020-07-20T14:16:40Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaLocationCache.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.ChoreService;\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HBaseConfiguration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.HRegionLocation;\n+import org.apache.hadoop.hbase.RegionLocations;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.AsyncClusterConnection;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.client.RegionInfoBuilder;\n+import org.apache.hadoop.hbase.client.RegionLocateType;\n+import org.apache.hadoop.hbase.testclassification.MasterTests;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.FutureUtils;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category({ MasterTests.class, MediumTests.class })\n+public class TestMetaLocationCache {\n+\n+  @ClassRule\n+  public static final HBaseClassTestRule CLASS_RULE =\n+    HBaseClassTestRule.forClass(TestMetaFixerNoCluster.class);", "originalCommit": "6c7fd65482301a1bc6c4890b74633d18a365b9b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46df66505ba0c783db24715da45aa3c388b02cf8", "chunk": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaLocationCache.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaLocationCache.java\nindex ac314bb153..306767ed1e 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaLocationCache.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaLocationCache.java\n\n@@ -58,7 +58,7 @@ public class TestMetaLocationCache {\n \n   @ClassRule\n   public static final HBaseClassTestRule CLASS_RULE =\n-    HBaseClassTestRule.forClass(TestMetaFixerNoCluster.class);\n+    HBaseClassTestRule.forClass(TestMetaLocationCache.class);\n \n   private static Configuration CONF = HBaseConfiguration.create();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzMDcwMA==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457430700", "bodyText": "Since we are dealing with Mocks only, this can be SmallTests?", "author": "virajjasani", "createdAt": "2020-07-20T14:21:06Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaLocationCache.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.ChoreService;\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HBaseConfiguration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.HRegionLocation;\n+import org.apache.hadoop.hbase.RegionLocations;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.AsyncClusterConnection;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.client.RegionInfoBuilder;\n+import org.apache.hadoop.hbase.client.RegionLocateType;\n+import org.apache.hadoop.hbase.testclassification.MasterTests;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.FutureUtils;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category({ MasterTests.class, MediumTests.class })", "originalCommit": "4e0cd933d7c2b619b34a75bdc196d5be47fe2184", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc5MDU2Nw==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457790567", "bodyText": "Not sure, we have sleep in the tests.", "author": "Apache9", "createdAt": "2020-07-21T01:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzMDcwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzA4Mg==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457827082", "bodyText": "Sure, MediumTests is fine since we have sleep.", "author": "virajjasani", "createdAt": "2020-07-21T04:20:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzMDcwMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzMjg5MQ==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457432891", "bodyText": "nit: we can assign value right here and keep this static final", "author": "virajjasani", "createdAt": "2020-07-20T14:23:17Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaLocationCache.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.ChoreService;\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HBaseConfiguration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.HRegionLocation;\n+import org.apache.hadoop.hbase.RegionLocations;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.AsyncClusterConnection;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.client.RegionInfoBuilder;\n+import org.apache.hadoop.hbase.client.RegionLocateType;\n+import org.apache.hadoop.hbase.testclassification.MasterTests;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.FutureUtils;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category({ MasterTests.class, MediumTests.class })\n+public class TestMetaLocationCache {\n+\n+  @ClassRule\n+  public static final HBaseClassTestRule CLASS_RULE =\n+    HBaseClassTestRule.forClass(TestMetaLocationCache.class);\n+\n+  private static Configuration CONF = HBaseConfiguration.create();\n+\n+  private static ChoreService CHORE_SERVICE;", "originalCommit": "4e0cd933d7c2b619b34a75bdc196d5be47fe2184", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzMzEyNw==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457433127", "bodyText": "nit: final", "author": "virajjasani", "createdAt": "2020-07-20T14:23:32Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaLocationCache.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.ChoreService;\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HBaseConfiguration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.HRegionLocation;\n+import org.apache.hadoop.hbase.RegionLocations;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.AsyncClusterConnection;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.client.RegionInfoBuilder;\n+import org.apache.hadoop.hbase.client.RegionLocateType;\n+import org.apache.hadoop.hbase.testclassification.MasterTests;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.FutureUtils;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category({ MasterTests.class, MediumTests.class })\n+public class TestMetaLocationCache {\n+\n+  @ClassRule\n+  public static final HBaseClassTestRule CLASS_RULE =\n+    HBaseClassTestRule.forClass(TestMetaLocationCache.class);\n+\n+  private static Configuration CONF = HBaseConfiguration.create();\n+\n+  private static ChoreService CHORE_SERVICE;\n+\n+  private static byte[] SPLIT = Bytes.toBytes(\"a\");", "originalCommit": "4e0cd933d7c2b619b34a75bdc196d5be47fe2184", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0ODgxMQ==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457448811", "bodyText": "LOG.error might fit well? Also, what if this chore keeps getting error multiple times? That could mean due to some issue with RPC call, backup masters will serve stale data? Should we rather make this a high priority issue and stop backup masters if we get error say 30-60 times in a consecutive manner?", "author": "virajjasani", "createdAt": "2020-07-20T14:39:46Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master;\n+\n+import static org.apache.hadoop.hbase.client.ConnectionUtils.locateRow;\n+import static org.apache.hadoop.hbase.client.ConnectionUtils.locateRowBefore;\n+import static org.apache.hadoop.hbase.util.FutureUtils.addListener;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.SortedSet;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.hbase.HRegionLocation;\n+import org.apache.hadoop.hbase.RegionLocations;\n+import org.apache.hadoop.hbase.ScheduledChore;\n+import org.apache.hadoop.hbase.Stoppable;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.AsyncClusterConnection;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.client.RegionLocateType;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.hbase.thirdparty.com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * A cache of meta region locations.\n+ */\n+@InterfaceAudience.Private\n+class MetaLocationCache implements Stoppable {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(MetaLocationCache.class);\n+\n+  @VisibleForTesting\n+  static final String SYNC_INTERVAL_SECONDS =\n+    \"hbase.master.meta-location-cache.sync-interval-seconds\";\n+\n+  // default sync every 1 second.\n+  @VisibleForTesting\n+  static final int DEFAULT_SYNC_INTERVAL_SECONDS = 1;\n+\n+  private static final String FETCH_TIMEOUT_MS =\n+    \"hbase.master.meta-location-cache.fetch-timeout-ms\";\n+\n+  // default timeout 1 second\n+  private static final int DEFAULT_FETCH_TIMEOUT_MS = 1000;\n+\n+  private static final class CacheHolder {\n+\n+    final NavigableMap<byte[], RegionLocations> cache;\n+\n+    final List<HRegionLocation> all;\n+\n+    CacheHolder(List<HRegionLocation> all) {\n+      this.all = Collections.unmodifiableList(all);\n+      NavigableMap<byte[], SortedSet<HRegionLocation>> startKeyToLocs =\n+        new TreeMap<>(Bytes.BYTES_COMPARATOR);\n+      for (HRegionLocation loc : all) {\n+        if (loc.getRegion().isSplitParent()) {\n+          continue;\n+        }\n+        startKeyToLocs.computeIfAbsent(loc.getRegion().getStartKey(),\n+          k -> new TreeSet<>((l1, l2) -> l1.getRegion().compareTo(l2.getRegion()))).add(loc);\n+      }\n+      this.cache = startKeyToLocs.entrySet().stream().collect(Collectors.collectingAndThen(\n+        Collectors.toMap(Map.Entry::getKey, e -> new RegionLocations(e.getValue()), (u, v) -> {\n+          throw new IllegalStateException();\n+        }, () -> new TreeMap<>(Bytes.BYTES_COMPARATOR)), Collections::unmodifiableNavigableMap));\n+    }\n+  }\n+\n+  private volatile CacheHolder holder;\n+\n+  private volatile boolean stopped = false;\n+\n+  MetaLocationCache(MasterServices master) {\n+    int syncIntervalSeconds =\n+      master.getConfiguration().getInt(SYNC_INTERVAL_SECONDS, DEFAULT_SYNC_INTERVAL_SECONDS);\n+    int fetchTimeoutMs =\n+      master.getConfiguration().getInt(FETCH_TIMEOUT_MS, DEFAULT_FETCH_TIMEOUT_MS);\n+    master.getChoreService().scheduleChore(new ScheduledChore(\n+      getClass().getSimpleName() + \"-Sync-Chore\", this, syncIntervalSeconds, 0, TimeUnit.SECONDS) {\n+\n+      @Override\n+      protected void chore() {\n+        AsyncClusterConnection conn = master.getAsyncClusterConnection();\n+        if (conn != null) {\n+          addListener(conn.getAllMetaRegionLocations(fetchTimeoutMs), (locs, error) -> {\n+            if (error != null) {\n+              LOG.warn(\"Failed to fetch all meta region locations from active master\", error);", "originalCommit": "4e0cd933d7c2b619b34a75bdc196d5be47fe2184", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc5MDQzMQ==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457790431", "bodyText": "Can be a follow on I think. Agree that if active master is down for a long time, we should avoid flooding the log file.", "author": "Apache9", "createdAt": "2020-07-21T01:57:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0ODgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzgxMQ==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r457827811", "bodyText": "Sure, we can take it up on follow-up Jira.", "author": "virajjasani", "createdAt": "2020-07-21T04:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0ODgxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "46df66505ba0c783db24715da45aa3c388b02cf8", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java\nindex 03eae50e26..a3170493e8 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java\n\n@@ -31,6 +31,7 @@ import java.util.TreeMap;\n import java.util.TreeSet;\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n+import org.apache.hadoop.hbase.CellComparatorImpl;\n import org.apache.hadoop.hbase.HRegionLocation;\n import org.apache.hadoop.hbase.RegionLocations;\n import org.apache.hadoop.hbase.ScheduledChore;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyOTQ0Nw==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r458229447", "bodyText": "Seems arbitrary that we do ROOT location in here but location for hbase:meta is elsewhere and if they want to do 'caching'/'replicas', they'd use a different system.\nOr is idea that this cache of location be generalized? Or for ROOT only?\nImplementations could get RS stubs I suppose so don't have to go to Master to get meta Locations?", "author": "saintstack", "createdAt": "2020-07-21T16:27:44Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionRegistry.java", "diffHunk": "@@ -18,21 +18,36 @@\n package org.apache.hadoop.hbase.client;\n \n import java.io.Closeable;\n+import java.util.List;\n import java.util.concurrent.CompletableFuture;\n+import org.apache.hadoop.hbase.HRegionLocation;\n+import org.apache.hadoop.hbase.RegionLocations;\n import org.apache.hadoop.hbase.ServerName;\n import org.apache.yetus.audience.InterfaceAudience;\n \n /**\n  * Registry for meta information needed for connection setup to a HBase cluster. Implementations\n- * hold cluster information such as this cluster's id, location of hbase:meta, etc..\n- * Internal use only.\n+ * hold cluster information such as this cluster's id, location of hbase:meta, etc.. Internal use\n+ * only.\n  */\n @InterfaceAudience.Private\n interface ConnectionRegistry extends Closeable {\n \n+  /**\n+   * Get location of meta region for the given {@code row}.\n+   */\n+  CompletableFuture<RegionLocations> locateMeta(byte[] row, RegionLocateType locateType);", "originalCommit": "4e0cd933d7c2b619b34a75bdc196d5be47fe2184", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NjEzNA==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r458466134", "bodyText": "I do not think it is arbitrary. Before we have root table, meta location is here and user locations are elsewhere. The point here, is that, what things in HBase are called 'bootstraping' things. In the past it is meta, and now, it is root.\nAnd see my plan below, my plan is to store the bootstraping things on the HA masters, so do not want to envolve RS in, let's keep them within masters.", "author": "Apache9", "createdAt": "2020-07-22T00:35:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyOTQ0Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4OTIyNA==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r458289224", "bodyText": "Needs to be meta comparator?", "author": "saintstack", "createdAt": "2020-07-21T18:03:39Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master;\n+\n+import static org.apache.hadoop.hbase.client.ConnectionUtils.locateRow;\n+import static org.apache.hadoop.hbase.client.ConnectionUtils.locateRowBefore;\n+import static org.apache.hadoop.hbase.util.FutureUtils.addListener;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.SortedSet;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import org.apache.hadoop.hbase.HRegionLocation;\n+import org.apache.hadoop.hbase.RegionLocations;\n+import org.apache.hadoop.hbase.ScheduledChore;\n+import org.apache.hadoop.hbase.Stoppable;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.AsyncClusterConnection;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.client.RegionLocateType;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.hbase.thirdparty.com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * A cache of meta region locations.\n+ */\n+@InterfaceAudience.Private\n+class MetaLocationCache implements Stoppable {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(MetaLocationCache.class);\n+\n+  @VisibleForTesting\n+  static final String SYNC_INTERVAL_SECONDS =\n+    \"hbase.master.meta-location-cache.sync-interval-seconds\";\n+\n+  // default sync every 1 second.\n+  @VisibleForTesting\n+  static final int DEFAULT_SYNC_INTERVAL_SECONDS = 1;\n+\n+  private static final String FETCH_TIMEOUT_MS =\n+    \"hbase.master.meta-location-cache.fetch-timeout-ms\";\n+\n+  // default timeout 1 second\n+  private static final int DEFAULT_FETCH_TIMEOUT_MS = 1000;\n+\n+  private static final class CacheHolder {\n+\n+    final NavigableMap<byte[], RegionLocations> cache;\n+\n+    final List<HRegionLocation> all;\n+\n+    CacheHolder(List<HRegionLocation> all) {\n+      this.all = Collections.unmodifiableList(all);\n+      NavigableMap<byte[], SortedSet<HRegionLocation>> startKeyToLocs =\n+        new TreeMap<>(Bytes.BYTES_COMPARATOR);\n+      for (HRegionLocation loc : all) {\n+        if (loc.getRegion().isSplitParent()) {\n+          continue;\n+        }\n+        startKeyToLocs.computeIfAbsent(loc.getRegion().getStartKey(),\n+          k -> new TreeSet<>((l1, l2) -> l1.getRegion().compareTo(l2.getRegion()))).add(loc);\n+      }\n+      this.cache = startKeyToLocs.entrySet().stream().collect(Collectors.collectingAndThen(\n+        Collectors.toMap(Map.Entry::getKey, e -> new RegionLocations(e.getValue()), (u, v) -> {\n+          throw new IllegalStateException();\n+        }, () -> new TreeMap<>(Bytes.BYTES_COMPARATOR)), Collections::unmodifiableNavigableMap));", "originalCommit": "4e0cd933d7c2b619b34a75bdc196d5be47fe2184", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1ODEzNw==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r458458137", "bodyText": "No. We just use start keys as the map key so a bytes comparator is enough.", "author": "Apache9", "createdAt": "2020-07-22T00:06:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4OTIyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2MDkwNw==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r458460907", "bodyText": "Whats the start key look like then in ROOT? Does it not have tablename as prefix with ',' separators? Don't you want \"TABLENAME,....\" to sort after \"TABLENAME,....\"?", "author": "saintstack", "createdAt": "2020-07-22T00:16:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4OTIyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NDMxMw==", "url": "https://github.com/apache/hbase/pull/2095#discussion_r458464313", "bodyText": "Oh yes, you are right. So the current implementation at client side should also be changed. When caching locations of meta or root we should use meta comparator.", "author": "Apache9", "createdAt": "2020-07-22T00:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4OTIyNA=="}], "type": "inlineReview", "revised_code": {"commit": "46df66505ba0c783db24715da45aa3c388b02cf8", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java\nindex 03eae50e26..a3170493e8 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MetaLocationCache.java\n\n@@ -31,6 +31,7 @@ import java.util.TreeMap;\n import java.util.TreeSet;\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n+import org.apache.hadoop.hbase.CellComparatorImpl;\n import org.apache.hadoop.hbase.HRegionLocation;\n import org.apache.hadoop.hbase.RegionLocations;\n import org.apache.hadoop.hbase.ScheduledChore;\n"}}, {"oid": "46df66505ba0c783db24715da45aa3c388b02cf8", "url": "https://github.com/apache/hbase/commit/46df66505ba0c783db24715da45aa3c388b02cf8", "message": "HBASE-24459 Move the locateMeta logic from AsyncMetaRegionTableLocator to ConnectionRegistry", "committedDate": "2020-07-23T09:23:46Z", "type": "forcePushed"}, {"oid": "137fd978b5658919741f18a7e8d0cd13d9112554", "url": "https://github.com/apache/hbase/commit/137fd978b5658919741f18a7e8d0cd13d9112554", "message": "HBASE-24459 Move the locateMeta logic from AsyncMetaRegionTableLocator to ConnectionRegistry", "committedDate": "2020-08-07T02:25:39Z", "type": "forcePushed"}, {"oid": "0a2a69201431e38d27a9dc687089926352c6e1f5", "url": "https://github.com/apache/hbase/commit/0a2a69201431e38d27a9dc687089926352c6e1f5", "message": "HBASE-24459 Move the locateMeta logic from AsyncMetaRegionTableLocator to ConnectionRegistry", "committedDate": "2020-08-09T14:17:37Z", "type": "forcePushed"}, {"oid": "4fa5c92070e510c1739df72d0bdce272ad0a67c7", "url": "https://github.com/apache/hbase/commit/4fa5c92070e510c1739df72d0bdce272ad0a67c7", "message": "HBASE-24459 Move the locateMeta logic from AsyncMetaRegionTableLocator to ConnectionRegistry", "committedDate": "2020-08-12T02:31:28Z", "type": "forcePushed"}, {"oid": "160b3759a2c8c20e228c577e0ebfff79933db789", "url": "https://github.com/apache/hbase/commit/160b3759a2c8c20e228c577e0ebfff79933db789", "message": "HBASE-24459 Move the locateMeta logic from AsyncMetaRegionTableLocator to ConnectionRegistry", "committedDate": "2020-08-17T15:03:32Z", "type": "forcePushed"}, {"oid": "22ec1edc11f62826f8270c7900dc359e1cac6bc5", "url": "https://github.com/apache/hbase/commit/22ec1edc11f62826f8270c7900dc359e1cac6bc5", "message": "HBASE-24459 Move the locateMeta logic from AsyncMetaRegionTableLocator to ConnectionRegistry", "committedDate": "2020-08-19T06:37:41Z", "type": "forcePushed"}, {"oid": "0e404e6441061abaad60b0097464bd4dff56f908", "url": "https://github.com/apache/hbase/commit/0e404e6441061abaad60b0097464bd4dff56f908", "message": "HBASE-24459 Move the locateMeta logic from AsyncMetaRegionTableLocator to ConnectionRegistry", "committedDate": "2020-08-20T08:03:57Z", "type": "forcePushed"}, {"oid": "8e67cdc8c7008a41be2fc90437b2e9fea6eeadf3", "url": "https://github.com/apache/hbase/commit/8e67cdc8c7008a41be2fc90437b2e9fea6eeadf3", "message": "HBASE-24459 Move the locateMeta logic from AsyncMetaRegionTableLocator to ConnectionRegistry", "committedDate": "2020-08-21T07:41:51Z", "type": "commit"}, {"oid": "8e67cdc8c7008a41be2fc90437b2e9fea6eeadf3", "url": "https://github.com/apache/hbase/commit/8e67cdc8c7008a41be2fc90437b2e9fea6eeadf3", "message": "HBASE-24459 Move the locateMeta logic from AsyncMetaRegionTableLocator to ConnectionRegistry", "committedDate": "2020-08-21T07:41:51Z", "type": "forcePushed"}]}