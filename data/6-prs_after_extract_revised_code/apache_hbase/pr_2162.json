{"pr_number": 2162, "pr_title": "HBASE-24788: Fix the connection leaks on getting hbase admin from unclosed connection", "pr_createdAt": "2020-07-28T20:26:52Z", "pr_url": "https://github.com/apache/hbase/pull/2162", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2NTAyNg==", "url": "https://github.com/apache/hbase/pull/2162#discussion_r461865026", "bodyText": "nit: Check-style might flag this for bad indentation (needs nested indent)", "author": "bharathv", "createdAt": "2020-07-28T20:40:52Z", "path": "hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/TableOutputFormat.java", "diffHunk": "@@ -155,11 +155,10 @@ public void write(KEY key, Mutation value)\n    * @param context  The current task context.\n    * @return The newly created writer instance.\n    * @throws IOException When creating the writer fails.\n-   * @throws InterruptedException When the jobs is cancelled.\n    */\n   @Override\n   public RecordWriter<KEY, Mutation> getRecordWriter(TaskAttemptContext context)\n-  throws IOException, InterruptedException {\n+  throws IOException {", "originalCommit": "568eb12a49c5c1d5a5813fb1d5bcf1c2e933ccf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b445adc31c83ed1c461202e851f21cee9cb483a", "chunk": "diff --git a/hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/TableOutputFormat.java b/hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/TableOutputFormat.java\nindex 8312de252d..52f340251c 100644\n--- a/hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/TableOutputFormat.java\n+++ b/hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/TableOutputFormat.java\n\n@@ -158,7 +158,7 @@ implements Configurable {\n    */\n   @Override\n   public RecordWriter<KEY, Mutation> getRecordWriter(TaskAttemptContext context)\n-  throws IOException {\n+    throws IOException {\n     return new TableRecordWriter();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2NTUwNg==", "url": "https://github.com/apache/hbase/pull/2162#discussion_r461865506", "bodyText": "nit: remove extra newline", "author": "bharathv", "createdAt": "2020-07-28T20:41:41Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java", "diffHunk": "@@ -161,25 +162,27 @@ public static void setupRegionReplicaReplication(Configuration conf) throws IOEx\n     if (!isRegionReplicaReplicationEnabled(conf)) {\n       return;\n     }\n-    Admin admin = ConnectionFactory.createConnection(conf).getAdmin();\n-    ReplicationPeerConfig peerConfig = null;\n-    try {\n-      peerConfig = admin.getReplicationPeerConfig(REGION_REPLICA_REPLICATION_PEER);\n-    } catch (ReplicationPeerNotFoundException e) {\n-      LOG.warn(\"Region replica replication peer id=\" + REGION_REPLICA_REPLICATION_PEER\n-          + \" not exist\", e);\n-    }\n-    try {\n+\n+    try (Connection connection = ConnectionFactory.createConnection(conf);\n+      Admin admin = connection.getAdmin()) {\n+", "originalCommit": "568eb12a49c5c1d5a5813fb1d5bcf1c2e933ccf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b445adc31c83ed1c461202e851f21cee9cb483a", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java\nindex 4eb6ceb092..c86a3bf4b0 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java\n\n@@ -165,15 +165,8 @@ public class ServerRegionReplicaUtil extends RegionReplicaUtil {\n \n     try (Connection connection = ConnectionFactory.createConnection(conf);\n       Admin admin = connection.getAdmin()) {\n-\n       ReplicationPeerConfig peerConfig = null;\n-      try {\n-        peerConfig = admin.getReplicationPeerConfig(REGION_REPLICA_REPLICATION_PEER);\n-      } catch (ReplicationPeerNotFoundException e) {\n-        LOG.warn(\n-          \"Region replica replication peer id=\" + REGION_REPLICA_REPLICATION_PEER + \" not exist\",\n-          e);\n-      }\n+      peerConfig = admin.getReplicationPeerConfig(REGION_REPLICA_REPLICATION_PEER);\n \n       if (peerConfig == null) {\n         LOG.info(\"Region replica replication peer id=\" + REGION_REPLICA_REPLICATION_PEER\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2NTcxMg==", "url": "https://github.com/apache/hbase/pull/2162#discussion_r461865712", "bodyText": "nit: can be condensed to fewer lines.", "author": "bharathv", "createdAt": "2020-07-28T20:42:02Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java", "diffHunk": "@@ -161,25 +162,27 @@ public static void setupRegionReplicaReplication(Configuration conf) throws IOEx\n     if (!isRegionReplicaReplicationEnabled(conf)) {\n       return;\n     }\n-    Admin admin = ConnectionFactory.createConnection(conf).getAdmin();\n-    ReplicationPeerConfig peerConfig = null;\n-    try {\n-      peerConfig = admin.getReplicationPeerConfig(REGION_REPLICA_REPLICATION_PEER);\n-    } catch (ReplicationPeerNotFoundException e) {\n-      LOG.warn(\"Region replica replication peer id=\" + REGION_REPLICA_REPLICATION_PEER\n-          + \" not exist\", e);\n-    }\n-    try {\n+\n+    try (Connection connection = ConnectionFactory.createConnection(conf);\n+      Admin admin = connection.getAdmin()) {\n+\n+      ReplicationPeerConfig peerConfig = null;\n+      try {\n+        peerConfig = admin.getReplicationPeerConfig(REGION_REPLICA_REPLICATION_PEER);\n+      } catch (ReplicationPeerNotFoundException e) {\n+        LOG.warn(", "originalCommit": "568eb12a49c5c1d5a5813fb1d5bcf1c2e933ccf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b445adc31c83ed1c461202e851f21cee9cb483a", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java\nindex 4eb6ceb092..c86a3bf4b0 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java\n\n@@ -165,15 +165,8 @@ public class ServerRegionReplicaUtil extends RegionReplicaUtil {\n \n     try (Connection connection = ConnectionFactory.createConnection(conf);\n       Admin admin = connection.getAdmin()) {\n-\n       ReplicationPeerConfig peerConfig = null;\n-      try {\n-        peerConfig = admin.getReplicationPeerConfig(REGION_REPLICA_REPLICATION_PEER);\n-      } catch (ReplicationPeerNotFoundException e) {\n-        LOG.warn(\n-          \"Region replica replication peer id=\" + REGION_REPLICA_REPLICATION_PEER + \" not exist\",\n-          e);\n-      }\n+      peerConfig = admin.getReplicationPeerConfig(REGION_REPLICA_REPLICATION_PEER);\n \n       if (peerConfig == null) {\n         LOG.info(\"Region replica replication peer id=\" + REGION_REPLICA_REPLICATION_PEER\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1MzI5Mw==", "url": "https://github.com/apache/hbase/pull/2162#discussion_r461953293", "bodyText": "this should be a try-with-resources too?", "author": "bharathv", "createdAt": "2020-07-28T23:36:29Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestClearRegionBlockCache.java", "diffHunk": "@@ -149,8 +150,8 @@ public void testClearBlockCacheFromAdmin() throws Exception {\n \n   @Test\n   public void testClearBlockCacheFromAsyncAdmin() throws Exception {\n-    AsyncAdmin admin =\n-        ConnectionFactory.createAsyncConnection(HTU.getConfiguration()).get().getAdmin();\n+    AsyncConnection conn = ConnectionFactory.createAsyncConnection(HTU.getConfiguration()).get();\n+    AsyncAdmin admin = conn.getAdmin();", "originalCommit": "6c065a8c46a89244329e93b5e09c7a91d75b2b74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b445adc31c83ed1c461202e851f21cee9cb483a", "chunk": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestClearRegionBlockCache.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestClearRegionBlockCache.java\nindex 1a56e84a6d..74c07e4199 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestClearRegionBlockCache.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestClearRegionBlockCache.java\n\n@@ -150,28 +150,29 @@ public class TestClearRegionBlockCache {\n \n   @Test\n   public void testClearBlockCacheFromAsyncAdmin() throws Exception {\n-    AsyncConnection conn = ConnectionFactory.createAsyncConnection(HTU.getConfiguration()).get();\n-    AsyncAdmin admin = conn.getAdmin();\n-\n-    BlockCache blockCache1 = rs1.getBlockCache().get();\n-    BlockCache blockCache2 = rs2.getBlockCache().get();\n-    long initialBlockCount1 = blockCache1.getBlockCount();\n-    long initialBlockCount2 = blockCache2.getBlockCount();\n-\n-    // scan will cause blocks to be added in BlockCache\n-    scanAllRegionsForRS(rs1);\n-    assertEquals(blockCache1.getBlockCount() - initialBlockCount1,\n+    try (AsyncConnection conn = ConnectionFactory.createAsyncConnection(HTU.getConfiguration())\n+      .get()) {\n+      AsyncAdmin admin = conn.getAdmin();\n+\n+      BlockCache blockCache1 = rs1.getBlockCache().get();\n+      BlockCache blockCache2 = rs2.getBlockCache().get();\n+      long initialBlockCount1 = blockCache1.getBlockCount();\n+      long initialBlockCount2 = blockCache2.getBlockCount();\n+\n+      // scan will cause blocks to be added in BlockCache\n+      scanAllRegionsForRS(rs1);\n+      assertEquals(blockCache1.getBlockCount() - initialBlockCount1,\n         HTU.getNumHFilesForRS(rs1, TABLE_NAME, FAMILY));\n-    scanAllRegionsForRS(rs2);\n-    assertEquals(blockCache2.getBlockCount() - initialBlockCount2,\n+      scanAllRegionsForRS(rs2);\n+      assertEquals(blockCache2.getBlockCount() - initialBlockCount2,\n         HTU.getNumHFilesForRS(rs2, TABLE_NAME, FAMILY));\n \n-    CacheEvictionStats stats = admin.clearBlockCache(TABLE_NAME).get();\n-    assertEquals(stats.getEvictedBlocks(), HTU.getNumHFilesForRS(rs1, TABLE_NAME, FAMILY) + HTU\n+      CacheEvictionStats stats = admin.clearBlockCache(TABLE_NAME).get();\n+      assertEquals(stats.getEvictedBlocks(), HTU.getNumHFilesForRS(rs1, TABLE_NAME, FAMILY) + HTU\n         .getNumHFilesForRS(rs2, TABLE_NAME, FAMILY));\n-    assertEquals(initialBlockCount1, blockCache1.getBlockCount());\n-    assertEquals(initialBlockCount2, blockCache2.getBlockCount());\n-    conn.close();\n+      assertEquals(initialBlockCount1, blockCache1.getBlockCount());\n+      assertEquals(initialBlockCount2, blockCache2.getBlockCount());\n+    }\n   }\n \n   private void scanAllRegionsForRS(HRegionServer rs) throws IOException {\n"}}, {"oid": "6b445adc31c83ed1c461202e851f21cee9cb483a", "url": "https://github.com/apache/hbase/commit/6b445adc31c83ed1c461202e851f21cee9cb483a", "message": "HBASE-24788: Fix the connection leaks on getting hbase admin from unclosed connection", "committedDate": "2020-07-29T02:34:38Z", "type": "commit"}, {"oid": "6b445adc31c83ed1c461202e851f21cee9cb483a", "url": "https://github.com/apache/hbase/commit/6b445adc31c83ed1c461202e851f21cee9cb483a", "message": "HBASE-24788: Fix the connection leaks on getting hbase admin from unclosed connection", "committedDate": "2020-07-29T02:34:38Z", "type": "forcePushed"}, {"oid": "34a897b2a5115cd62eefedf424abc7aee2982b9d", "url": "https://github.com/apache/hbase/commit/34a897b2a5115cd62eefedf424abc7aee2982b9d", "message": "Fixing the check-style", "committedDate": "2020-07-29T07:52:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzODc4OA==", "url": "https://github.com/apache/hbase/pull/2162#discussion_r462138788", "bodyText": "If we catch this Exception, don't we want to create replication peer id?\nWe can model this with:\ntry(closeables){\n  try{\n    peerConfig = admin.getReplicationPeerConfig(REGION_REPLICA_REPLICATION_PEER);\n  } catch (ReplicationPeerNotFoundException e){\n  }\n  if (peerConfig == null) {\n    .....\n  }\n}", "author": "virajjasani", "createdAt": "2020-07-29T08:45:05Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java", "diffHunk": "@@ -161,25 +162,24 @@ public static void setupRegionReplicaReplication(Configuration conf) throws IOEx\n     if (!isRegionReplicaReplicationEnabled(conf)) {\n       return;\n     }\n-    Admin admin = ConnectionFactory.createConnection(conf).getAdmin();\n-    ReplicationPeerConfig peerConfig = null;\n-    try {\n+\n+    try (Connection connection = ConnectionFactory.createConnection(conf);\n+      Admin admin = connection.getAdmin()) {\n+      ReplicationPeerConfig peerConfig = null;\n       peerConfig = admin.getReplicationPeerConfig(REGION_REPLICA_REPLICATION_PEER);\n-    } catch (ReplicationPeerNotFoundException e) {\n-      LOG.warn(\"Region replica replication peer id=\" + REGION_REPLICA_REPLICATION_PEER\n-          + \" not exist\", e);\n-    }\n-    try {\n+\n       if (peerConfig == null) {\n         LOG.info(\"Region replica replication peer id=\" + REGION_REPLICA_REPLICATION_PEER\n-            + \" not exist. Creating...\");\n+          + \" not exist. Creating...\");\n         peerConfig = new ReplicationPeerConfig();\n         peerConfig.setClusterKey(ZKConfig.getZooKeeperClusterKey(conf));\n         peerConfig.setReplicationEndpointImpl(RegionReplicaReplicationEndpoint.class.getName());\n         admin.addReplicationPeer(REGION_REPLICA_REPLICATION_PEER, peerConfig);\n       }\n-    } finally {\n-      admin.close();\n+    } catch (ReplicationPeerNotFoundException e) {\n+      LOG.warn(\n+        \"Region replica replication peer id=\" + REGION_REPLICA_REPLICATION_PEER + \" not exist\",\n+        e);", "originalCommit": "6b445adc31c83ed1c461202e851f21cee9cb483a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0MDUzMg==", "url": "https://github.com/apache/hbase/pull/2162#discussion_r462140532", "bodyText": "yeah, I was about to submit the change for this.", "author": "sandeepvinayak", "createdAt": "2020-07-29T08:47:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEzODc4OA=="}], "type": "inlineReview", "revised_code": {"commit": "d087e7b5339510bd88b0c49b9a184cfd02ad3a32", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java\nindex c86a3bf4b0..b83749d9c3 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java\n\n@@ -166,7 +166,13 @@ public class ServerRegionReplicaUtil extends RegionReplicaUtil {\n     try (Connection connection = ConnectionFactory.createConnection(conf);\n       Admin admin = connection.getAdmin()) {\n       ReplicationPeerConfig peerConfig = null;\n-      peerConfig = admin.getReplicationPeerConfig(REGION_REPLICA_REPLICATION_PEER);\n+      try {\n+        peerConfig = admin.getReplicationPeerConfig(REGION_REPLICA_REPLICATION_PEER);\n+      } catch (ReplicationPeerNotFoundException e) {\n+        LOG.warn(\n+          \"Region replica replication peer id=\" + REGION_REPLICA_REPLICATION_PEER + \" not exist\",\n+          e);\n+      }\n \n       if (peerConfig == null) {\n         LOG.info(\"Region replica replication peer id=\" + REGION_REPLICA_REPLICATION_PEER\n"}}, {"oid": "d087e7b5339510bd88b0c49b9a184cfd02ad3a32", "url": "https://github.com/apache/hbase/commit/d087e7b5339510bd88b0c49b9a184cfd02ad3a32", "message": "Fixing the broken tests", "committedDate": "2020-07-29T09:03:01Z", "type": "commit"}, {"oid": "88f9ebc53562fc2765c8c9b0204e34673363939b", "url": "https://github.com/apache/hbase/commit/88f9ebc53562fc2765c8c9b0204e34673363939b", "message": "Fixing the broken tests", "committedDate": "2020-07-29T09:28:17Z", "type": "commit"}]}