{"pr_number": 2284, "pr_title": "HBASE-24764: Add support of adding default peer configs via hbase-site.xml for all replication peers.", "pr_createdAt": "2020-08-19T19:54:37Z", "pr_url": "https://github.com/apache/hbase/pull/2284", "timeline": [{"oid": "8510b99a4376d01acc09de964e416bf1a641b3a4", "url": "https://github.com/apache/hbase/commit/8510b99a4376d01acc09de964e416bf1a641b3a4", "message": "HBASE-24764: Add support of adding default peer configs via hbase-site.xml for all replication peers.", "committedDate": "2020-08-18T23:04:55Z", "type": "commit"}, {"oid": "4b83e2c201fd435b2f20885d196a7671b192de01", "url": "https://github.com/apache/hbase/commit/4b83e2c201fd435b2f20885d196a7671b192de01", "message": "HBASE-24764: Moving logic to ReplicationPeerConfigUtil", "committedDate": "2020-08-19T06:15:48Z", "type": "commit"}, {"oid": "b50ceabee2f2dbb07556e109fcdec76ed4d144d6", "url": "https://github.com/apache/hbase/commit/b50ceabee2f2dbb07556e109fcdec76ed4d144d6", "message": "Removing extra line", "committedDate": "2020-08-19T19:21:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5OTg3OA==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r474299878", "bodyText": "See how rest of code has space between keyword and brackets as in 'if (' rather than 'if('.... you do this a few times in this PR.", "author": "saintstack", "createdAt": "2020-08-20T22:09:23Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java", "diffHunk": "@@ -450,6 +451,45 @@ public static ReplicationPeerConfig appendTableCFsToReplicationPeerConfig(\n     return builder.build();\n   }\n \n+  /**\n+   Sample Configuration\n+   <property>\n+   <name>hbase.replication.peer.default.configs</name>\n+   <value>hbase.replication.source.custom.walentryfilters=x,y,z;hbase.xxx.custom_property=123</value>\n+   </property>\n+   */\n+\n+  /**\n+   * Helper method to add default peer configs from HBase Configuration to ReplicationPeerConfig\n+   * @param conf Configuration\n+   * @return true if new configurations was added.\n+   */\n+  public static ReplicationPeerConfig addDefaultPeerConfigsIfNotPresent(Configuration conf, ReplicationPeerConfig receivedPeerConfig){\n+\n+    ReplicationPeerConfigBuilder copiedPeerConfigBuilder = ReplicationPeerConfig.newBuilder(receivedPeerConfig);\n+    String defaultPeerConfigs = conf.get(HBASE_REPLICATION_PEER_DEFAULT_CONFIG);\n+\n+    Map<String,String> peerConfigurations = receivedPeerConfig.getConfiguration();\n+\n+    if(defaultPeerConfigs != null && defaultPeerConfigs.length() != 0){", "originalCommit": "b50ceabee2f2dbb07556e109fcdec76ed4d144d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "283a180d980211ec747bf1c72e9c2f242206ee52", "chunk": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\nindex 87b4dcd998..e15a2b8310 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n\n@@ -454,34 +454,34 @@ public final class ReplicationPeerConfigUtil {\n   /**\n    Sample Configuration\n    <property>\n-   <name>hbase.replication.peer.default.configs</name>\n+   <name>hbase.replication.peer.base.configs</name>\n    <value>hbase.replication.source.custom.walentryfilters=x,y,z;hbase.xxx.custom_property=123</value>\n    </property>\n    */\n \n   /**\n-   * Helper method to add default peer configs from HBase Configuration to ReplicationPeerConfig\n+   * Helper method to add base peer configs from HBase Configuration to ReplicationPeerConfig\n    * @param conf Configuration\n    * @return true if new configurations was added.\n    */\n-  public static ReplicationPeerConfig addDefaultPeerConfigsIfNotPresent(Configuration conf, ReplicationPeerConfig receivedPeerConfig){\n+  public static ReplicationPeerConfig addBasePeerConfigsIfNotPresent(Configuration conf, ReplicationPeerConfig receivedPeerConfig){\n \n     ReplicationPeerConfigBuilder copiedPeerConfigBuilder = ReplicationPeerConfig.newBuilder(receivedPeerConfig);\n-    String defaultPeerConfigs = conf.get(HBASE_REPLICATION_PEER_DEFAULT_CONFIG);\n+    String defaultPeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG);\n \n     Map<String,String> peerConfigurations = receivedPeerConfig.getConfiguration();\n \n-    if(defaultPeerConfigs != null && defaultPeerConfigs.length() != 0){\n+    if (defaultPeerConfigs != null && defaultPeerConfigs.length() != 0) {\n       String[] defaultPeerConfigList = defaultPeerConfigs.split(\";\");\n \n-      for(String defaultPeerConfig :  defaultPeerConfigList){\n+      for (String defaultPeerConfig :  defaultPeerConfigList) {\n         String[] configSplit = defaultPeerConfig.split(\"=\");\n-        if(configSplit != null && configSplit.length == 2){\n+        if (configSplit != null && configSplit.length == 2) {\n           String configName = configSplit[0];\n           String configValue = configSplit[1];\n \n           // Only override if default property does not exist in existing peer configs or its value is different.\n-          if(!peerConfigurations.containsKey(configName) || !peerConfigurations.get(configName).equalsIgnoreCase(configValue)){\n+          if (!peerConfigurations.containsKey(configName) || !peerConfigurations.get(configName).equalsIgnoreCase(configValue)) {\n             copiedPeerConfigBuilder.putConfiguration(configName,configValue);\n           }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMwMDIyOA==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r474300228", "bodyText": "Is this 'default' or 'base' configuration for all peers?", "author": "saintstack", "createdAt": "2020-08-20T22:10:19Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java", "diffHunk": "@@ -60,6 +60,7 @@\n public final class ReplicationPeerConfigUtil {\n \n   private static final Logger LOG = LoggerFactory.getLogger(ReplicationPeerConfigUtil.class);\n+  public static final String HBASE_REPLICATION_PEER_DEFAULT_CONFIG= \"hbase.replication.peer.default.config\";", "originalCommit": "b50ceabee2f2dbb07556e109fcdec76ed4d144d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM0MzYxNw==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r474343617", "bodyText": "Updated in the latest commit.", "author": "ankitjain64", "createdAt": "2020-08-21T00:32:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMwMDIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "283a180d980211ec747bf1c72e9c2f242206ee52", "chunk": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\nindex 87b4dcd998..e15a2b8310 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n\n@@ -60,7 +60,7 @@ import org.apache.hadoop.hbase.shaded.protobuf.generated.ReplicationProtos;\n public final class ReplicationPeerConfigUtil {\n \n   private static final Logger LOG = LoggerFactory.getLogger(ReplicationPeerConfigUtil.class);\n-  public static final String HBASE_REPLICATION_PEER_DEFAULT_CONFIG= \"hbase.replication.peer.default.config\";\n+  public static final String HBASE_REPLICATION_PEER_BASE_CONFIG = \"hbase.replication.peer.base.config\";\n \n   private ReplicationPeerConfigUtil() {}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMwMTE1OQ==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r474301159", "bodyText": "';' is safe character to use as delimiter for sure? Will never be part of a config value? Are the constraint on peer values at all so you could choose a delimiter that was outside of the constraint set?", "author": "saintstack", "createdAt": "2020-08-20T22:12:43Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java", "diffHunk": "@@ -450,6 +451,45 @@ public static ReplicationPeerConfig appendTableCFsToReplicationPeerConfig(\n     return builder.build();\n   }\n \n+  /**\n+   Sample Configuration\n+   <property>\n+   <name>hbase.replication.peer.default.configs</name>\n+   <value>hbase.replication.source.custom.walentryfilters=x,y,z;hbase.xxx.custom_property=123</value>\n+   </property>\n+   */\n+\n+  /**\n+   * Helper method to add default peer configs from HBase Configuration to ReplicationPeerConfig\n+   * @param conf Configuration\n+   * @return true if new configurations was added.\n+   */\n+  public static ReplicationPeerConfig addDefaultPeerConfigsIfNotPresent(Configuration conf, ReplicationPeerConfig receivedPeerConfig){\n+\n+    ReplicationPeerConfigBuilder copiedPeerConfigBuilder = ReplicationPeerConfig.newBuilder(receivedPeerConfig);\n+    String defaultPeerConfigs = conf.get(HBASE_REPLICATION_PEER_DEFAULT_CONFIG);\n+\n+    Map<String,String> peerConfigurations = receivedPeerConfig.getConfiguration();\n+\n+    if(defaultPeerConfigs != null && defaultPeerConfigs.length() != 0){\n+      String[] defaultPeerConfigList = defaultPeerConfigs.split(\";\");", "originalCommit": "b50ceabee2f2dbb07556e109fcdec76ed4d144d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM0NjYxMg==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r474346612", "bodyText": "so you could choose a delimiter that was outside of the constraint set\nAre there any current constraints regarding the convention on peer values that I can refer to?\n\n\nI looked around and since there can be multiple values of a particular peer config that are generally delimited by , so I decided to use ; for delimiting different peer configs. But I am happy to change this if it can cause any problems in your opinion. Thanks", "author": "ankitjain64", "createdAt": "2020-08-21T00:44:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMwMTE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM5NzYxMg==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r474397612", "bodyText": "Also Splitter from Guava provides a clean API to do this parsing (couple of lines of code).", "author": "bharathv", "createdAt": "2020-08-21T04:10:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMwMTE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU3MTc4OA==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r478571788", "bodyText": "Looks like you missed this, this code can be condensed into\nSplitter.on(';').withKeyValueSeparator('=').split(value).trimResults();", "author": "bharathv", "createdAt": "2020-08-27T17:12:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMwMTE1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "283a180d980211ec747bf1c72e9c2f242206ee52", "chunk": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\nindex 87b4dcd998..e15a2b8310 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n\n@@ -454,34 +454,34 @@ public final class ReplicationPeerConfigUtil {\n   /**\n    Sample Configuration\n    <property>\n-   <name>hbase.replication.peer.default.configs</name>\n+   <name>hbase.replication.peer.base.configs</name>\n    <value>hbase.replication.source.custom.walentryfilters=x,y,z;hbase.xxx.custom_property=123</value>\n    </property>\n    */\n \n   /**\n-   * Helper method to add default peer configs from HBase Configuration to ReplicationPeerConfig\n+   * Helper method to add base peer configs from HBase Configuration to ReplicationPeerConfig\n    * @param conf Configuration\n    * @return true if new configurations was added.\n    */\n-  public static ReplicationPeerConfig addDefaultPeerConfigsIfNotPresent(Configuration conf, ReplicationPeerConfig receivedPeerConfig){\n+  public static ReplicationPeerConfig addBasePeerConfigsIfNotPresent(Configuration conf, ReplicationPeerConfig receivedPeerConfig){\n \n     ReplicationPeerConfigBuilder copiedPeerConfigBuilder = ReplicationPeerConfig.newBuilder(receivedPeerConfig);\n-    String defaultPeerConfigs = conf.get(HBASE_REPLICATION_PEER_DEFAULT_CONFIG);\n+    String defaultPeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG);\n \n     Map<String,String> peerConfigurations = receivedPeerConfig.getConfiguration();\n \n-    if(defaultPeerConfigs != null && defaultPeerConfigs.length() != 0){\n+    if (defaultPeerConfigs != null && defaultPeerConfigs.length() != 0) {\n       String[] defaultPeerConfigList = defaultPeerConfigs.split(\";\");\n \n-      for(String defaultPeerConfig :  defaultPeerConfigList){\n+      for (String defaultPeerConfig :  defaultPeerConfigList) {\n         String[] configSplit = defaultPeerConfig.split(\"=\");\n-        if(configSplit != null && configSplit.length == 2){\n+        if (configSplit != null && configSplit.length == 2) {\n           String configName = configSplit[0];\n           String configValue = configSplit[1];\n \n           // Only override if default property does not exist in existing peer configs or its value is different.\n-          if(!peerConfigurations.containsKey(configName) || !peerConfigurations.get(configName).equalsIgnoreCase(configValue)){\n+          if (!peerConfigurations.containsKey(configName) || !peerConfigurations.get(configName).equalsIgnoreCase(configValue)) {\n             copiedPeerConfigBuilder.putConfiguration(configName,configValue);\n           }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMwMTU3Mw==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r474301573", "bodyText": "Long lines?  100chars is max.", "author": "saintstack", "createdAt": "2020-08-20T22:13:50Z", "path": "hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationPeerStorage.java", "diffHunk": "@@ -215,4 +218,40 @@ public void testNoSyncReplicationState()\n     assertNotEquals(-1, ZKUtil.checkExists(UTIL.getZooKeeperWatcher(),\n       STORAGE.getNewSyncReplicationStateNode(peerId)));\n   }\n+\n+  @Test\n+  public void testDefaultReplicationPeerConfigIsAppliedIfNotAlreadySet(){\n+    String customPeerConfigKey = \"hbase.xxx.custom_config\";\n+    String customPeerConfigValue = \"test\";\n+\n+    ReplicationPeerConfig existingReplicationPeerConfig = getConfig(1);\n+\n+    // custom config not present\n+    assertEquals(existingReplicationPeerConfig.getConfiguration().get(customPeerConfigKey), null);\n+\n+    Configuration conf = UTIL.getConfiguration();\n+    conf.set(ReplicationPeerConfigUtil.HBASE_REPLICATION_PEER_DEFAULT_CONFIG,\n+      customPeerConfigKey.concat(\"=\").concat(customPeerConfigValue));\n+\n+    ReplicationPeerConfig updatedReplicationPeerConfig = ReplicationPeerConfigUtil.addDefaultPeerConfigsIfNotPresent(conf,existingReplicationPeerConfig);", "originalCommit": "b50ceabee2f2dbb07556e109fcdec76ed4d144d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "283a180d980211ec747bf1c72e9c2f242206ee52", "chunk": "diff --git a/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationPeerStorage.java b/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationPeerStorage.java\nindex 0b0a530300..520e8a39c4 100644\n--- a/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationPeerStorage.java\n+++ b/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationPeerStorage.java\n\n@@ -230,11 +230,14 @@ public class TestZKReplicationPeerStorage {\n     assertEquals(existingReplicationPeerConfig.getConfiguration().get(customPeerConfigKey), null);\n \n     Configuration conf = UTIL.getConfiguration();\n-    conf.set(ReplicationPeerConfigUtil.HBASE_REPLICATION_PEER_DEFAULT_CONFIG,\n+    conf.set(ReplicationPeerConfigUtil.HBASE_REPLICATION_PEER_BASE_CONFIG,\n       customPeerConfigKey.concat(\"=\").concat(customPeerConfigValue));\n \n-    ReplicationPeerConfig updatedReplicationPeerConfig = ReplicationPeerConfigUtil.addDefaultPeerConfigsIfNotPresent(conf,existingReplicationPeerConfig);\n-    assertEquals(customPeerConfigValue, updatedReplicationPeerConfig.getConfiguration().get(customPeerConfigKey));\n+    ReplicationPeerConfig updatedReplicationPeerConfig = ReplicationPeerConfigUtil.\n+      addBasePeerConfigsIfNotPresent(conf,existingReplicationPeerConfig);\n+\n+    assertEquals(customPeerConfigValue, updatedReplicationPeerConfig.getConfiguration().\n+      get(customPeerConfigKey));\n   }\n \n   @Test\n"}}, {"oid": "283a180d980211ec747bf1c72e9c2f242206ee52", "url": "https://github.com/apache/hbase/commit/283a180d980211ec747bf1c72e9c2f242206ee52", "message": "HBASE-24764: Addressing review comments", "committedDate": "2020-08-21T00:14:41Z", "type": "commit"}, {"oid": "68b769eec54b1ba089a00800ad5ae17bad3e6598", "url": "https://github.com/apache/hbase/commit/68b769eec54b1ba089a00800ad5ae17bad3e6598", "message": "HBASE-24764: Updating tests", "committedDate": "2020-08-21T00:43:45Z", "type": "commit"}, {"oid": "d815e13083e10e8c00713f5807da4744b16650c3", "url": "https://github.com/apache/hbase/commit/d815e13083e10e8c00713f5807da4744b16650c3", "message": "HBASE-24764: Fixing formatting issues", "committedDate": "2020-08-21T01:06:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzMTkyOA==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r473431928", "bodyText": "Make it private?", "author": "bharathv", "createdAt": "2020-08-19T23:29:19Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java", "diffHunk": "@@ -60,6 +60,7 @@\n public final class ReplicationPeerConfigUtil {\n \n   private static final Logger LOG = LoggerFactory.getLogger(ReplicationPeerConfigUtil.class);\n+  public static final String HBASE_REPLICATION_PEER_DEFAULT_CONFIG= \"hbase.replication.peer.default.config\";", "originalCommit": "b50ceabee2f2dbb07556e109fcdec76ed4d144d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkzODY1Ng==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r476938656", "bodyText": "This is also getting referenced in other classes for testing, so kept it public.", "author": "ankitjain64", "createdAt": "2020-08-26T01:09:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzMTkyOA=="}], "type": "inlineReview", "revised_code": {"commit": "283a180d980211ec747bf1c72e9c2f242206ee52", "chunk": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\nindex 87b4dcd998..e15a2b8310 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n\n@@ -60,7 +60,7 @@ import org.apache.hadoop.hbase.shaded.protobuf.generated.ReplicationProtos;\n public final class ReplicationPeerConfigUtil {\n \n   private static final Logger LOG = LoggerFactory.getLogger(ReplicationPeerConfigUtil.class);\n-  public static final String HBASE_REPLICATION_PEER_DEFAULT_CONFIG= \"hbase.replication.peer.default.config\";\n+  public static final String HBASE_REPLICATION_PEER_BASE_CONFIG = \"hbase.replication.peer.base.config\";\n \n   private ReplicationPeerConfigUtil() {}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzNDE3Ng==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r473434176", "bodyText": "nit: Sample configuration block not needed. Its kind of obvious. Instead add the configuration value formatting to the javadoc of the config? (and also what the default is).", "author": "bharathv", "createdAt": "2020-08-19T23:32:18Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java", "diffHunk": "@@ -450,6 +451,45 @@ public static ReplicationPeerConfig appendTableCFsToReplicationPeerConfig(\n     return builder.build();\n   }\n \n+  /**", "originalCommit": "b50ceabee2f2dbb07556e109fcdec76ed4d144d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "283a180d980211ec747bf1c72e9c2f242206ee52", "chunk": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\nindex 87b4dcd998..e15a2b8310 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n\n@@ -454,34 +454,34 @@ public final class ReplicationPeerConfigUtil {\n   /**\n    Sample Configuration\n    <property>\n-   <name>hbase.replication.peer.default.configs</name>\n+   <name>hbase.replication.peer.base.configs</name>\n    <value>hbase.replication.source.custom.walentryfilters=x,y,z;hbase.xxx.custom_property=123</value>\n    </property>\n    */\n \n   /**\n-   * Helper method to add default peer configs from HBase Configuration to ReplicationPeerConfig\n+   * Helper method to add base peer configs from HBase Configuration to ReplicationPeerConfig\n    * @param conf Configuration\n    * @return true if new configurations was added.\n    */\n-  public static ReplicationPeerConfig addDefaultPeerConfigsIfNotPresent(Configuration conf, ReplicationPeerConfig receivedPeerConfig){\n+  public static ReplicationPeerConfig addBasePeerConfigsIfNotPresent(Configuration conf, ReplicationPeerConfig receivedPeerConfig){\n \n     ReplicationPeerConfigBuilder copiedPeerConfigBuilder = ReplicationPeerConfig.newBuilder(receivedPeerConfig);\n-    String defaultPeerConfigs = conf.get(HBASE_REPLICATION_PEER_DEFAULT_CONFIG);\n+    String defaultPeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG);\n \n     Map<String,String> peerConfigurations = receivedPeerConfig.getConfiguration();\n \n-    if(defaultPeerConfigs != null && defaultPeerConfigs.length() != 0){\n+    if (defaultPeerConfigs != null && defaultPeerConfigs.length() != 0) {\n       String[] defaultPeerConfigList = defaultPeerConfigs.split(\";\");\n \n-      for(String defaultPeerConfig :  defaultPeerConfigList){\n+      for (String defaultPeerConfig :  defaultPeerConfigList) {\n         String[] configSplit = defaultPeerConfig.split(\"=\");\n-        if(configSplit != null && configSplit.length == 2){\n+        if (configSplit != null && configSplit.length == 2) {\n           String configName = configSplit[0];\n           String configValue = configSplit[1];\n \n           // Only override if default property does not exist in existing peer configs or its value is different.\n-          if(!peerConfigurations.containsKey(configName) || !peerConfigurations.get(configName).equalsIgnoreCase(configValue)){\n+          if (!peerConfigurations.containsKey(configName) || !peerConfigurations.get(configName).equalsIgnoreCase(configValue)) {\n             copiedPeerConfigBuilder.putConfiguration(configName,configValue);\n           }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzNDc1OQ==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r473434759", "bodyText": "Mind fixing the check-style issues from precommit? Bunch of overflows.", "author": "bharathv", "createdAt": "2020-08-19T23:33:12Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java", "diffHunk": "@@ -450,6 +451,45 @@ public static ReplicationPeerConfig appendTableCFsToReplicationPeerConfig(\n     return builder.build();\n   }\n \n+  /**\n+   Sample Configuration\n+   <property>\n+   <name>hbase.replication.peer.default.configs</name>\n+   <value>hbase.replication.source.custom.walentryfilters=x,y,z;hbase.xxx.custom_property=123</value>\n+   </property>\n+   */\n+\n+  /**\n+   * Helper method to add default peer configs from HBase Configuration to ReplicationPeerConfig\n+   * @param conf Configuration\n+   * @return true if new configurations was added.\n+   */\n+  public static ReplicationPeerConfig addDefaultPeerConfigsIfNotPresent(Configuration conf, ReplicationPeerConfig receivedPeerConfig){", "originalCommit": "b50ceabee2f2dbb07556e109fcdec76ed4d144d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "283a180d980211ec747bf1c72e9c2f242206ee52", "chunk": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\nindex 87b4dcd998..e15a2b8310 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n\n@@ -454,34 +454,34 @@ public final class ReplicationPeerConfigUtil {\n   /**\n    Sample Configuration\n    <property>\n-   <name>hbase.replication.peer.default.configs</name>\n+   <name>hbase.replication.peer.base.configs</name>\n    <value>hbase.replication.source.custom.walentryfilters=x,y,z;hbase.xxx.custom_property=123</value>\n    </property>\n    */\n \n   /**\n-   * Helper method to add default peer configs from HBase Configuration to ReplicationPeerConfig\n+   * Helper method to add base peer configs from HBase Configuration to ReplicationPeerConfig\n    * @param conf Configuration\n    * @return true if new configurations was added.\n    */\n-  public static ReplicationPeerConfig addDefaultPeerConfigsIfNotPresent(Configuration conf, ReplicationPeerConfig receivedPeerConfig){\n+  public static ReplicationPeerConfig addBasePeerConfigsIfNotPresent(Configuration conf, ReplicationPeerConfig receivedPeerConfig){\n \n     ReplicationPeerConfigBuilder copiedPeerConfigBuilder = ReplicationPeerConfig.newBuilder(receivedPeerConfig);\n-    String defaultPeerConfigs = conf.get(HBASE_REPLICATION_PEER_DEFAULT_CONFIG);\n+    String defaultPeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG);\n \n     Map<String,String> peerConfigurations = receivedPeerConfig.getConfiguration();\n \n-    if(defaultPeerConfigs != null && defaultPeerConfigs.length() != 0){\n+    if (defaultPeerConfigs != null && defaultPeerConfigs.length() != 0) {\n       String[] defaultPeerConfigList = defaultPeerConfigs.split(\";\");\n \n-      for(String defaultPeerConfig :  defaultPeerConfigList){\n+      for (String defaultPeerConfig :  defaultPeerConfigList) {\n         String[] configSplit = defaultPeerConfig.split(\"=\");\n-        if(configSplit != null && configSplit.length == 2){\n+        if (configSplit != null && configSplit.length == 2) {\n           String configName = configSplit[0];\n           String configValue = configSplit[1];\n \n           // Only override if default property does not exist in existing peer configs or its value is different.\n-          if(!peerConfigurations.containsKey(configName) || !peerConfigurations.get(configName).equalsIgnoreCase(configValue)){\n+          if (!peerConfigurations.containsKey(configName) || !peerConfigurations.get(configName).equalsIgnoreCase(configValue)) {\n             copiedPeerConfigBuilder.putConfiguration(configName,configValue);\n           }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzNTQ2Nw==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r473435467", "bodyText": "nit: get(CONFIG, default)", "author": "bharathv", "createdAt": "2020-08-19T23:34:13Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java", "diffHunk": "@@ -450,6 +451,45 @@ public static ReplicationPeerConfig appendTableCFsToReplicationPeerConfig(\n     return builder.build();\n   }\n \n+  /**\n+   Sample Configuration\n+   <property>\n+   <name>hbase.replication.peer.default.configs</name>\n+   <value>hbase.replication.source.custom.walentryfilters=x,y,z;hbase.xxx.custom_property=123</value>\n+   </property>\n+   */\n+\n+  /**\n+   * Helper method to add default peer configs from HBase Configuration to ReplicationPeerConfig\n+   * @param conf Configuration\n+   * @return true if new configurations was added.\n+   */\n+  public static ReplicationPeerConfig addDefaultPeerConfigsIfNotPresent(Configuration conf, ReplicationPeerConfig receivedPeerConfig){\n+\n+    ReplicationPeerConfigBuilder copiedPeerConfigBuilder = ReplicationPeerConfig.newBuilder(receivedPeerConfig);\n+    String defaultPeerConfigs = conf.get(HBASE_REPLICATION_PEER_DEFAULT_CONFIG);", "originalCommit": "b50ceabee2f2dbb07556e109fcdec76ed4d144d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "283a180d980211ec747bf1c72e9c2f242206ee52", "chunk": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\nindex 87b4dcd998..e15a2b8310 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n\n@@ -454,34 +454,34 @@ public final class ReplicationPeerConfigUtil {\n   /**\n    Sample Configuration\n    <property>\n-   <name>hbase.replication.peer.default.configs</name>\n+   <name>hbase.replication.peer.base.configs</name>\n    <value>hbase.replication.source.custom.walentryfilters=x,y,z;hbase.xxx.custom_property=123</value>\n    </property>\n    */\n \n   /**\n-   * Helper method to add default peer configs from HBase Configuration to ReplicationPeerConfig\n+   * Helper method to add base peer configs from HBase Configuration to ReplicationPeerConfig\n    * @param conf Configuration\n    * @return true if new configurations was added.\n    */\n-  public static ReplicationPeerConfig addDefaultPeerConfigsIfNotPresent(Configuration conf, ReplicationPeerConfig receivedPeerConfig){\n+  public static ReplicationPeerConfig addBasePeerConfigsIfNotPresent(Configuration conf, ReplicationPeerConfig receivedPeerConfig){\n \n     ReplicationPeerConfigBuilder copiedPeerConfigBuilder = ReplicationPeerConfig.newBuilder(receivedPeerConfig);\n-    String defaultPeerConfigs = conf.get(HBASE_REPLICATION_PEER_DEFAULT_CONFIG);\n+    String defaultPeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG);\n \n     Map<String,String> peerConfigurations = receivedPeerConfig.getConfiguration();\n \n-    if(defaultPeerConfigs != null && defaultPeerConfigs.length() != 0){\n+    if (defaultPeerConfigs != null && defaultPeerConfigs.length() != 0) {\n       String[] defaultPeerConfigList = defaultPeerConfigs.split(\";\");\n \n-      for(String defaultPeerConfig :  defaultPeerConfigList){\n+      for (String defaultPeerConfig :  defaultPeerConfigList) {\n         String[] configSplit = defaultPeerConfig.split(\"=\");\n-        if(configSplit != null && configSplit.length == 2){\n+        if (configSplit != null && configSplit.length == 2) {\n           String configName = configSplit[0];\n           String configValue = configSplit[1];\n \n           // Only override if default property does not exist in existing peer configs or its value is different.\n-          if(!peerConfigurations.containsKey(configName) || !peerConfigurations.get(configName).equalsIgnoreCase(configValue)){\n+          if (!peerConfigurations.containsKey(configName) || !peerConfigurations.get(configName).equalsIgnoreCase(configValue)) {\n             copiedPeerConfigBuilder.putConfiguration(configName,configValue);\n           }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM4NzgyMQ==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r474387821", "bodyText": "nit: return value javadoc seems wrong.", "author": "bharathv", "createdAt": "2020-08-21T03:26:50Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java", "diffHunk": "@@ -450,6 +452,50 @@ public static ReplicationPeerConfig appendTableCFsToReplicationPeerConfig(\n     return builder.build();\n   }\n \n+  /**\n+   Sample Configuration\n+   <property>\n+   <name>hbase.replication.peer.base.configs</name>\n+   <value>hbase.replication.source.custom.walentryfilters=x,y,z;\n+   hbase.xxx.custom_property=123</value>\n+   </property>\n+   */\n+\n+  /**\n+   * Helper method to add base peer configs from HBase Configuration to ReplicationPeerConfig\n+   * @param conf Configuration\n+   * @return true if new configurations was added.", "originalCommit": "d815e13083e10e8c00713f5807da4744b16650c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "560154a9ac422f003614deb5ac0f0f9ae869b579", "chunk": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\nindex 906f25356b..648f9273fa 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n\n@@ -464,15 +464,16 @@ public final class ReplicationPeerConfigUtil {\n   /**\n    * Helper method to add base peer configs from HBase Configuration to ReplicationPeerConfig\n    * @param conf Configuration\n-   * @return true if new configurations was added.\n+   * @return ReplicationPeerConfig if peer configurations are updated else null.\n    */\n   public static ReplicationPeerConfig addBasePeerConfigsIfNotPresent(Configuration conf,\n     ReplicationPeerConfig receivedPeerConfig){\n \n+    boolean isPeerConfigChanged = false;\n+    String defaultPeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG,null);\n+\n     ReplicationPeerConfigBuilder copiedPeerConfigBuilder = ReplicationPeerConfig.\n       newBuilder(receivedPeerConfig);\n-    String defaultPeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG);\n-\n     Map<String,String> peerConfigurations = receivedPeerConfig.getConfiguration();\n \n     if (defaultPeerConfigs != null && defaultPeerConfigs.length() != 0) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM5Njg2OQ==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r474396869", "bodyText": "I was thinking this happens only in the master code paths. Ex: ReplicationPeerManager#create (for existing peers) or addPeer() for new peers etc. That way the configuration in storage remains consistent.\nDoing from the RS code paths (ReplicationPeers) means that if different RS run with different configs it can result in a different final state (depending which RS does this RPC last). Also doing this from HMaster seems logical since this is more like an admin operation whereas RS based codepaths are just consumers of this config.", "author": "bharathv", "createdAt": "2020-08-21T04:07:04Z", "path": "hbase-replication/src/main/java/org/apache/hadoop/hbase/replication/ReplicationPeers.java", "diffHunk": "@@ -144,7 +145,12 @@ private ReplicationPeerImpl createPeer(String peerId) throws ReplicationExceptio\n     SyncReplicationState syncReplicationState = peerStorage.getPeerSyncReplicationState(peerId);\n     SyncReplicationState newSyncReplicationState =\n       peerStorage.getPeerNewSyncReplicationState(peerId);\n+\n+    ReplicationPeerConfig updatedPeerConfig = ReplicationPeerConfigUtil.\n+      addBasePeerConfigsIfNotPresent(this.conf, peerConfig);\n+    peerStorage.updatePeerConfig(peerId,updatedPeerConfig);", "originalCommit": "d815e13083e10e8c00713f5807da4744b16650c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkzOTA3OQ==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r476939079", "bodyText": "Yes, that completely makes sense. Updated in the latest commit.", "author": "ankitjain64", "createdAt": "2020-08-26T01:09:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM5Njg2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "560154a9ac422f003614deb5ac0f0f9ae869b579", "chunk": "diff --git a/hbase-replication/src/main/java/org/apache/hadoop/hbase/replication/ReplicationPeers.java b/hbase-replication/src/main/java/org/apache/hadoop/hbase/replication/ReplicationPeers.java\nindex db8939c921..76cba22a1f 100644\n--- a/hbase-replication/src/main/java/org/apache/hadoop/hbase/replication/ReplicationPeers.java\n+++ b/hbase-replication/src/main/java/org/apache/hadoop/hbase/replication/ReplicationPeers.java\n\n@@ -146,11 +145,7 @@ public class ReplicationPeers {\n     SyncReplicationState newSyncReplicationState =\n       peerStorage.getPeerNewSyncReplicationState(peerId);\n \n-    ReplicationPeerConfig updatedPeerConfig = ReplicationPeerConfigUtil.\n-      addBasePeerConfigsIfNotPresent(this.conf, peerConfig);\n-    peerStorage.updatePeerConfig(peerId,updatedPeerConfig);\n-\n     return new ReplicationPeerImpl(ReplicationUtils.getPeerClusterConfiguration(peerConfig, conf),\n-      peerId, updatedPeerConfig, enabled, syncReplicationState, newSyncReplicationState);\n+      peerId, peerConfig, enabled, syncReplicationState, newSyncReplicationState);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM5ODAyNw==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r474398027", "bodyText": "Two tests can be merged into one.", "author": "bharathv", "createdAt": "2020-08-21T04:12:09Z", "path": "hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationPeerStorage.java", "diffHunk": "@@ -215,4 +218,52 @@ public void testNoSyncReplicationState()\n     assertNotEquals(-1, ZKUtil.checkExists(UTIL.getZooKeeperWatcher(),\n       STORAGE.getNewSyncReplicationStateNode(peerId)));\n   }\n+\n+  @Test\n+  public void testDefaultReplicationPeerConfigIsAppliedIfNotAlreadySet(){", "originalCommit": "d815e13083e10e8c00713f5807da4744b16650c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkzOTUwOQ==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r476939509", "bodyText": "Since they were testing different behaviors I kept them as different, do you think we should still merge them?", "author": "ankitjain64", "createdAt": "2020-08-26T01:10:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM5ODAyNw=="}], "type": "inlineReview", "revised_code": {"commit": "6d5ac0f5e5f80873d3e32be24a13096b956f44dc", "chunk": "diff --git a/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationPeerStorage.java b/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationPeerStorage.java\nindex 809be5119f..14888c674d 100644\n--- a/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationPeerStorage.java\n+++ b/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationPeerStorage.java\n\n@@ -220,7 +221,7 @@ public class TestZKReplicationPeerStorage {\n   }\n \n   @Test\n-  public void testDefaultReplicationPeerConfigIsAppliedIfNotAlreadySet(){\n+  public void testBaseReplicationPeerConfigIsAppliedIfNotAlreadySet(){\n     String customPeerConfigKey = \"hbase.xxx.custom_config\";\n     String customPeerConfigValue = \"test\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM5ODQ2Mg==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r474398462", "bodyText": "I think we need more coverage for the following cases.\n\nExisting peer config gets the config override\nAdmin code paths (for getPeerConfig, updatePeerConfig, etc) work well with the overlays (updating an existing / non-existing config etc)", "author": "bharathv", "createdAt": "2020-08-21T04:14:02Z", "path": "hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationPeerStorage.java", "diffHunk": "@@ -215,4 +218,52 @@ public void testNoSyncReplicationState()\n     assertNotEquals(-1, ZKUtil.checkExists(UTIL.getZooKeeperWatcher(),\n       STORAGE.getNewSyncReplicationStateNode(peerId)));\n   }\n+\n+  @Test\n+  public void testDefaultReplicationPeerConfigIsAppliedIfNotAlreadySet(){\n+    String customPeerConfigKey = \"hbase.xxx.custom_config\";\n+    String customPeerConfigValue = \"test\";\n+\n+    String customPeerConfigSecondKey = \"hbase.xxx.custom_second_config\";\n+    String customPeerConfigSecondValue = \"testSecond\";\n+\n+    ReplicationPeerConfig existingReplicationPeerConfig = getConfig(1);\n+\n+    // custom config not present\n+    assertEquals(existingReplicationPeerConfig.getConfiguration().get(customPeerConfigKey), null);\n+\n+    Configuration conf = UTIL.getConfiguration();\n+    conf.set(ReplicationPeerConfigUtil.HBASE_REPLICATION_PEER_BASE_CONFIG,\n+      customPeerConfigKey.concat(\"=\").concat(customPeerConfigValue).concat(\";\").\n+        concat(customPeerConfigSecondKey).concat(\"=\").concat(customPeerConfigSecondValue));\n+\n+    ReplicationPeerConfig updatedReplicationPeerConfig = ReplicationPeerConfigUtil.\n+      addBasePeerConfigsIfNotPresent(conf,existingReplicationPeerConfig);\n+\n+    assertEquals(customPeerConfigValue, updatedReplicationPeerConfig.getConfiguration().\n+      get(customPeerConfigKey));\n+    assertEquals(customPeerConfigSecondValue, updatedReplicationPeerConfig.getConfiguration().\n+      get(customPeerConfigSecondKey));\n+  }\n+\n+  @Test\n+  public void testDefaultReplicationPeerConfigOverrideIfAlreadySet(){", "originalCommit": "d815e13083e10e8c00713f5807da4744b16650c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk0NDU1MA==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r476944550", "bodyText": "Added the tests for admin code paths.\nThe behavior after this patch is that a peer config will only be updated by configuration object if that new configuration was not present in ReplicationPeerConfig. If it was already present then old value is retained and values from configuration object won't make any changes.", "author": "ankitjain64", "createdAt": "2020-08-26T01:17:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM5ODQ2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6d5ac0f5e5f80873d3e32be24a13096b956f44dc", "chunk": "diff --git a/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationPeerStorage.java b/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationPeerStorage.java\nindex 809be5119f..14888c674d 100644\n--- a/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationPeerStorage.java\n+++ b/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationPeerStorage.java\n\n@@ -220,7 +221,7 @@ public class TestZKReplicationPeerStorage {\n   }\n \n   @Test\n-  public void testDefaultReplicationPeerConfigIsAppliedIfNotAlreadySet(){\n+  public void testBaseReplicationPeerConfigIsAppliedIfNotAlreadySet(){\n     String customPeerConfigKey = \"hbase.xxx.custom_config\";\n     String customPeerConfigValue = \"test\";\n \n"}}, {"oid": "560154a9ac422f003614deb5ac0f0f9ae869b579", "url": "https://github.com/apache/hbase/commit/560154a9ac422f003614deb5ac0f0f9ae869b579", "message": "Review comments", "committedDate": "2020-08-25T20:58:26Z", "type": "commit"}, {"oid": "6d5ac0f5e5f80873d3e32be24a13096b956f44dc", "url": "https://github.com/apache/hbase/commit/6d5ac0f5e5f80873d3e32be24a13096b956f44dc", "message": "HBASE-24764: Review comments and adding more tests", "committedDate": "2020-08-26T01:05:58Z", "type": "commit"}, {"oid": "df48cb0b2f86aedbad50f1bb007a2be272d7cd57", "url": "https://github.com/apache/hbase/commit/df48cb0b2f86aedbad50f1bb007a2be272d7cd57", "message": "HBASE-24764: Remove extra lines", "committedDate": "2020-08-26T01:14:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2MDk1Mg==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r478560952", "bodyText": "nit: space between ) {", "author": "bharathv", "createdAt": "2020-08-27T16:53:20Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java", "diffHunk": "@@ -450,6 +452,49 @@ public static ReplicationPeerConfig appendTableCFsToReplicationPeerConfig(\n     return builder.build();\n   }\n \n+  /**\n+   * Helper method to add base peer configs from Configuration to ReplicationPeerConfig\n+   * if not present in latter.\n+   *\n+   * This merges the user supplied peer configuration\n+   * {@link org.apache.hadoop.hbase.replication.ReplicationPeerConfig} with peer configs\n+   * provided as property hbase.replication.peer.base.configs in hbase configuration.\n+   * Expected format for this hbase configuration is \"k1=v1;k2=v2,v2_1\"\n+   *\n+   * @param conf Configuration\n+   * @return ReplicationPeerConfig if peer configurations are updated else null.\n+   */\n+  public static ReplicationPeerConfig addBasePeerConfigsIfNotPresent(Configuration conf,\n+    ReplicationPeerConfig receivedPeerConfig){", "originalCommit": "df48cb0b2f86aedbad50f1bb007a2be272d7cd57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2f08b08d0b2cf94767c843c2f8219d7d6edc248", "chunk": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\nindex c5a825a90d..a59a996cfa 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n\n@@ -465,29 +466,26 @@ public final class ReplicationPeerConfigUtil {\n    * @return ReplicationPeerConfig if peer configurations are updated else null.\n    */\n   public static ReplicationPeerConfig addBasePeerConfigsIfNotPresent(Configuration conf,\n-    ReplicationPeerConfig receivedPeerConfig){\n+    ReplicationPeerConfig receivedPeerConfig) {\n     boolean isPeerConfigChanged = false;\n-    String defaultPeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG,null);\n+    String basePeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG, null);\n \n     ReplicationPeerConfigBuilder copiedPeerConfigBuilder = ReplicationPeerConfig.\n       newBuilder(receivedPeerConfig);\n-    Map<String,String> peerConfigurations = receivedPeerConfig.getConfiguration();\n+    Map<String,String> receivedPeerConfigMap = receivedPeerConfig.getConfiguration();\n \n-    if (defaultPeerConfigs != null && defaultPeerConfigs.length() != 0) {\n-      String[] defaultPeerConfigList = defaultPeerConfigs.split(\";\");\n+    if (basePeerConfigs != null && basePeerConfigs.length() != 0) {\n \n-      for (String defaultPeerConfig :  defaultPeerConfigList) {\n-        String[] configSplit = defaultPeerConfig.split(\"=\");\n+      Map<String, String> basePeerConfigMap = Splitter.on(';').trimResults().omitEmptyStrings()\n+        .withKeyValueSeparator(\"=\").split(basePeerConfigs);\n \n-        if (configSplit != null && configSplit.length == 2) {\n-          String configName = configSplit[0];\n-          String configValue = configSplit[1];\n-\n-          // Only override if base config does not exist in existing peer configs\n-          if (!peerConfigurations.containsKey(configName)) {\n-            copiedPeerConfigBuilder.putConfiguration(configName,configValue);\n-            isPeerConfigChanged = true;\n-          }\n+      for (Map.Entry<String,String> entry : basePeerConfigMap.entrySet()) {\n+        String configName = entry.getKey();\n+        String configValue = entry.getValue();\n+        // Only override if base config does not exist in existing peer configs\n+        if (!receivedPeerConfigMap.containsKey(configName)) {\n+          copiedPeerConfigBuilder.putConfiguration(configName,configValue);\n+          isPeerConfigChanged = true;\n         }\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2MjA2OQ==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r478562069", "bodyText": "nit: space between , null", "author": "bharathv", "createdAt": "2020-08-27T16:55:16Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java", "diffHunk": "@@ -450,6 +452,49 @@ public static ReplicationPeerConfig appendTableCFsToReplicationPeerConfig(\n     return builder.build();\n   }\n \n+  /**\n+   * Helper method to add base peer configs from Configuration to ReplicationPeerConfig\n+   * if not present in latter.\n+   *\n+   * This merges the user supplied peer configuration\n+   * {@link org.apache.hadoop.hbase.replication.ReplicationPeerConfig} with peer configs\n+   * provided as property hbase.replication.peer.base.configs in hbase configuration.\n+   * Expected format for this hbase configuration is \"k1=v1;k2=v2,v2_1\"\n+   *\n+   * @param conf Configuration\n+   * @return ReplicationPeerConfig if peer configurations are updated else null.\n+   */\n+  public static ReplicationPeerConfig addBasePeerConfigsIfNotPresent(Configuration conf,\n+    ReplicationPeerConfig receivedPeerConfig){\n+    boolean isPeerConfigChanged = false;\n+    String defaultPeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG,null);", "originalCommit": "df48cb0b2f86aedbad50f1bb007a2be272d7cd57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2f08b08d0b2cf94767c843c2f8219d7d6edc248", "chunk": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\nindex c5a825a90d..a59a996cfa 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n\n@@ -465,29 +466,26 @@ public final class ReplicationPeerConfigUtil {\n    * @return ReplicationPeerConfig if peer configurations are updated else null.\n    */\n   public static ReplicationPeerConfig addBasePeerConfigsIfNotPresent(Configuration conf,\n-    ReplicationPeerConfig receivedPeerConfig){\n+    ReplicationPeerConfig receivedPeerConfig) {\n     boolean isPeerConfigChanged = false;\n-    String defaultPeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG,null);\n+    String basePeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG, null);\n \n     ReplicationPeerConfigBuilder copiedPeerConfigBuilder = ReplicationPeerConfig.\n       newBuilder(receivedPeerConfig);\n-    Map<String,String> peerConfigurations = receivedPeerConfig.getConfiguration();\n+    Map<String,String> receivedPeerConfigMap = receivedPeerConfig.getConfiguration();\n \n-    if (defaultPeerConfigs != null && defaultPeerConfigs.length() != 0) {\n-      String[] defaultPeerConfigList = defaultPeerConfigs.split(\";\");\n+    if (basePeerConfigs != null && basePeerConfigs.length() != 0) {\n \n-      for (String defaultPeerConfig :  defaultPeerConfigList) {\n-        String[] configSplit = defaultPeerConfig.split(\"=\");\n+      Map<String, String> basePeerConfigMap = Splitter.on(';').trimResults().omitEmptyStrings()\n+        .withKeyValueSeparator(\"=\").split(basePeerConfigs);\n \n-        if (configSplit != null && configSplit.length == 2) {\n-          String configName = configSplit[0];\n-          String configValue = configSplit[1];\n-\n-          // Only override if base config does not exist in existing peer configs\n-          if (!peerConfigurations.containsKey(configName)) {\n-            copiedPeerConfigBuilder.putConfiguration(configName,configValue);\n-            isPeerConfigChanged = true;\n-          }\n+      for (Map.Entry<String,String> entry : basePeerConfigMap.entrySet()) {\n+        String configName = entry.getKey();\n+        String configValue = entry.getValue();\n+        // Only override if base config does not exist in existing peer configs\n+        if (!receivedPeerConfigMap.containsKey(configName)) {\n+          copiedPeerConfigBuilder.putConfiguration(configName,configValue);\n+          isPeerConfigChanged = true;\n         }\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU3NDczNw==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r478574737", "bodyText": "Why this? Just change the receivedPeerConfig in place?", "author": "bharathv", "createdAt": "2020-08-27T17:17:16Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java", "diffHunk": "@@ -450,6 +452,49 @@ public static ReplicationPeerConfig appendTableCFsToReplicationPeerConfig(\n     return builder.build();\n   }\n \n+  /**\n+   * Helper method to add base peer configs from Configuration to ReplicationPeerConfig\n+   * if not present in latter.\n+   *\n+   * This merges the user supplied peer configuration\n+   * {@link org.apache.hadoop.hbase.replication.ReplicationPeerConfig} with peer configs\n+   * provided as property hbase.replication.peer.base.configs in hbase configuration.\n+   * Expected format for this hbase configuration is \"k1=v1;k2=v2,v2_1\"\n+   *\n+   * @param conf Configuration\n+   * @return ReplicationPeerConfig if peer configurations are updated else null.\n+   */\n+  public static ReplicationPeerConfig addBasePeerConfigsIfNotPresent(Configuration conf,\n+    ReplicationPeerConfig receivedPeerConfig){\n+    boolean isPeerConfigChanged = false;\n+    String defaultPeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG,null);\n+\n+    ReplicationPeerConfigBuilder copiedPeerConfigBuilder = ReplicationPeerConfig.\n+      newBuilder(receivedPeerConfig);\n+    Map<String,String> peerConfigurations = receivedPeerConfig.getConfiguration();\n+\n+    if (defaultPeerConfigs != null && defaultPeerConfigs.length() != 0) {\n+      String[] defaultPeerConfigList = defaultPeerConfigs.split(\";\");\n+\n+      for (String defaultPeerConfig :  defaultPeerConfigList) {\n+        String[] configSplit = defaultPeerConfig.split(\"=\");\n+\n+        if (configSplit != null && configSplit.length == 2) {\n+          String configName = configSplit[0];\n+          String configValue = configSplit[1];\n+\n+          // Only override if base config does not exist in existing peer configs\n+          if (!peerConfigurations.containsKey(configName)) {\n+            copiedPeerConfigBuilder.putConfiguration(configName,configValue);\n+            isPeerConfigChanged = true;\n+          }\n+        }\n+      }\n+    }\n+\n+    return isPeerConfigChanged ? copiedPeerConfigBuilder.build() : null;", "originalCommit": "df48cb0b2f86aedbad50f1bb007a2be272d7cd57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczMzQzMg==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r478733432", "bodyText": "Done in latest commit.", "author": "ankitjain64", "createdAt": "2020-08-27T22:37:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU3NDczNw=="}], "type": "inlineReview", "revised_code": {"commit": "e2f08b08d0b2cf94767c843c2f8219d7d6edc248", "chunk": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\nindex c5a825a90d..a59a996cfa 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n\n@@ -465,29 +466,26 @@ public final class ReplicationPeerConfigUtil {\n    * @return ReplicationPeerConfig if peer configurations are updated else null.\n    */\n   public static ReplicationPeerConfig addBasePeerConfigsIfNotPresent(Configuration conf,\n-    ReplicationPeerConfig receivedPeerConfig){\n+    ReplicationPeerConfig receivedPeerConfig) {\n     boolean isPeerConfigChanged = false;\n-    String defaultPeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG,null);\n+    String basePeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG, null);\n \n     ReplicationPeerConfigBuilder copiedPeerConfigBuilder = ReplicationPeerConfig.\n       newBuilder(receivedPeerConfig);\n-    Map<String,String> peerConfigurations = receivedPeerConfig.getConfiguration();\n+    Map<String,String> receivedPeerConfigMap = receivedPeerConfig.getConfiguration();\n \n-    if (defaultPeerConfigs != null && defaultPeerConfigs.length() != 0) {\n-      String[] defaultPeerConfigList = defaultPeerConfigs.split(\";\");\n+    if (basePeerConfigs != null && basePeerConfigs.length() != 0) {\n \n-      for (String defaultPeerConfig :  defaultPeerConfigList) {\n-        String[] configSplit = defaultPeerConfig.split(\"=\");\n+      Map<String, String> basePeerConfigMap = Splitter.on(';').trimResults().omitEmptyStrings()\n+        .withKeyValueSeparator(\"=\").split(basePeerConfigs);\n \n-        if (configSplit != null && configSplit.length == 2) {\n-          String configName = configSplit[0];\n-          String configValue = configSplit[1];\n-\n-          // Only override if base config does not exist in existing peer configs\n-          if (!peerConfigurations.containsKey(configName)) {\n-            copiedPeerConfigBuilder.putConfiguration(configName,configValue);\n-            isPeerConfigChanged = true;\n-          }\n+      for (Map.Entry<String,String> entry : basePeerConfigMap.entrySet()) {\n+        String configName = entry.getKey();\n+        String configValue = entry.getValue();\n+        // Only override if base config does not exist in existing peer configs\n+        if (!receivedPeerConfigMap.containsKey(configName)) {\n+          copiedPeerConfigBuilder.putConfiguration(configName,configValue);\n+          isPeerConfigChanged = true;\n         }\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwNjc2MA==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r478606760", "bodyText": "I lost your comment in the force push, but I think we can merge both these tests into testReplicationBaseConfig() or some such... We cam just add these last two lines in the above test and we don't need all the other boilerplate.", "author": "bharathv", "createdAt": "2020-08-27T18:14:04Z", "path": "hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationPeerStorage.java", "diffHunk": "@@ -215,4 +219,51 @@ public void testNoSyncReplicationState()\n     assertNotEquals(-1, ZKUtil.checkExists(UTIL.getZooKeeperWatcher(),\n       STORAGE.getNewSyncReplicationStateNode(peerId)));\n   }\n+\n+  @Test\n+  public void testBaseReplicationPeerConfigIsAppliedIfNotAlreadySet(){\n+    String customPeerConfigKey = \"hbase.xxx.custom_config\";\n+    String customPeerConfigValue = \"test\";\n+\n+    String customPeerConfigSecondKey = \"hbase.xxx.custom_second_config\";\n+    String customPeerConfigSecondValue = \"testSecond\";\n+\n+    ReplicationPeerConfig existingReplicationPeerConfig = getConfig(1);\n+\n+    // custom config not present\n+    assertEquals(existingReplicationPeerConfig.getConfiguration().get(customPeerConfigKey), null);\n+\n+    Configuration conf = UTIL.getConfiguration();\n+    conf.set(ReplicationPeerConfigUtil.HBASE_REPLICATION_PEER_BASE_CONFIG,\n+      customPeerConfigKey.concat(\"=\").concat(customPeerConfigValue).concat(\";\").\n+        concat(customPeerConfigSecondKey).concat(\"=\").concat(customPeerConfigSecondValue));\n+\n+    ReplicationPeerConfig updatedReplicationPeerConfig = ReplicationPeerConfigUtil.\n+      addBasePeerConfigsIfNotPresent(conf,existingReplicationPeerConfig);\n+\n+    assertEquals(customPeerConfigValue, updatedReplicationPeerConfig.getConfiguration().\n+      get(customPeerConfigKey));\n+    assertEquals(customPeerConfigSecondValue, updatedReplicationPeerConfig.getConfiguration().\n+      get(customPeerConfigSecondKey));\n+  }\n+\n+  @Test\n+  public void testBaseReplicationPeerConfigDoesNotOverrideIfAlreadySet(){\n+\n+    String customPeerConfigKey = \"hbase.xxx.custom_config\";\n+    String customPeerConfigOldValue = \"test\";\n+    String customPeerConfigUpdatedValue = \"test_updated\";\n+\n+    ReplicationPeerConfig existingReplicationPeerConfig = ReplicationPeerConfig.\n+      newBuilder(getConfig(1))\n+      .putConfiguration(customPeerConfigKey,customPeerConfigOldValue).build();\n+\n+    Configuration conf = UTIL.getConfiguration();\n+    conf.set(ReplicationPeerConfigUtil.HBASE_REPLICATION_PEER_BASE_CONFIG,\n+      customPeerConfigKey.concat(\"=\").concat(customPeerConfigUpdatedValue));\n+\n+    ReplicationPeerConfig updatedReplicationPeerConfig = ReplicationPeerConfigUtil.\n+      addBasePeerConfigsIfNotPresent(conf,existingReplicationPeerConfig);", "originalCommit": "df48cb0b2f86aedbad50f1bb007a2be272d7cd57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwODk0NA==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r478708944", "bodyText": "Sure. Merged the test in latest commit.", "author": "ankitjain64", "createdAt": "2020-08-27T21:35:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwNjc2MA=="}], "type": "inlineReview", "revised_code": {"commit": "e2f08b08d0b2cf94767c843c2f8219d7d6edc248", "chunk": "diff --git a/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationPeerStorage.java b/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationPeerStorage.java\nindex 14888c674d..9c393379d1 100644\n--- a/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationPeerStorage.java\n+++ b/hbase-replication/src/test/java/org/apache/hadoop/hbase/replication/TestZKReplicationPeerStorage.java\n\n@@ -221,12 +221,14 @@ public class TestZKReplicationPeerStorage {\n   }\n \n   @Test\n-  public void testBaseReplicationPeerConfigIsAppliedIfNotAlreadySet(){\n+  public void testBaseReplicationPeerConfig() {\n     String customPeerConfigKey = \"hbase.xxx.custom_config\";\n     String customPeerConfigValue = \"test\";\n+    String customPeerConfigUpdatedValue = \"testUpdated\";\n \n     String customPeerConfigSecondKey = \"hbase.xxx.custom_second_config\";\n     String customPeerConfigSecondValue = \"testSecond\";\n+    String customPeerConfigSecondUpdatedValue = \"testSecondUpdated\";\n \n     ReplicationPeerConfig existingReplicationPeerConfig = getConfig(1);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwODc3Ng==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r478608776", "bodyText": "nit: } finally", "author": "bharathv", "createdAt": "2020-08-27T18:17:41Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestMasterReplication.java", "diffHunk": "@@ -441,6 +442,41 @@ public void testCyclicReplication3() throws Exception {\n     }\n   }\n \n+  /**\n+   * Tests that base replication peer configs are applied on peer creation\n+   * and the is overriden if updated as part of updateReplicationPeerConfig()\n+   *\n+   */\n+  @Test\n+  public void testBasePeerConfigsAppliedOnPeerCreationAndUpdate()\n+    throws Exception {\n+    LOG.info(\"testBasePeerConfigsAppliedOnPeerCreation\");\n+    String customPeerConfigKey = \"hbase.xxx.custom_config\";\n+    String customPeerConfigValue = \"test\";\n+    String customPeerConfigUpdatedValue = \"test_updated\";\n+    try {\n+      baseConfiguration.set(ReplicationPeerConfigUtil.HBASE_REPLICATION_PEER_BASE_CONFIG,\n+        customPeerConfigKey.concat(\"=\").concat(customPeerConfigValue));\n+      startMiniClusters(2);\n+      addPeer(\"1\", 0, 1);\n+      Admin admin = utilities[0].getAdmin();\n+\n+      Assert.assertEquals(customPeerConfigValue, admin.getReplicationPeerConfig(\"1\").\n+        getConfiguration().get(customPeerConfigKey));\n+\n+      ReplicationPeerConfig updatedReplicationPeerConfig = ReplicationPeerConfig.\n+        newBuilder(admin.getReplicationPeerConfig(\"1\")).\n+        putConfiguration(customPeerConfigKey,customPeerConfigUpdatedValue).build();\n+      admin.updateReplicationPeerConfig(\"1\", updatedReplicationPeerConfig);\n+\n+      Assert.assertEquals(customPeerConfigUpdatedValue, admin.getReplicationPeerConfig(\"1\").\n+        getConfiguration().get(customPeerConfigKey));\n+    }finally {", "originalCommit": "df48cb0b2f86aedbad50f1bb007a2be272d7cd57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a65f3e4e5c4ded0a340d8d576268a067d2c163ad", "chunk": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestMasterReplication.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestMasterReplication.java\nindex 9996de8cc7..69693b0873 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestMasterReplication.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestMasterReplication.java\n\n@@ -444,7 +444,7 @@ public class TestMasterReplication {\n \n   /**\n    * Tests that base replication peer configs are applied on peer creation\n-   * and the is overriden if updated as part of updateReplicationPeerConfig()\n+   * and the configs are overriden if updated as part of updateReplicationPeerConfig()\n    *\n    */\n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxMDM0OQ==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r478610349", "bodyText": "Can you also add some tests for deleting a configuration? delete an override, base config should be picked up if it is present\nAlso, add another peer and make sure it only has the base configuration and not the updated values above.\nAlso, add a peer, update base configuration, restart cluster, new base should be picked up (our target usecase essentially).", "author": "bharathv", "createdAt": "2020-08-27T18:20:38Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestMasterReplication.java", "diffHunk": "@@ -441,6 +442,41 @@ public void testCyclicReplication3() throws Exception {\n     }\n   }\n \n+  /**\n+   * Tests that base replication peer configs are applied on peer creation\n+   * and the is overriden if updated as part of updateReplicationPeerConfig()\n+   *\n+   */\n+  @Test\n+  public void testBasePeerConfigsAppliedOnPeerCreationAndUpdate()\n+    throws Exception {\n+    LOG.info(\"testBasePeerConfigsAppliedOnPeerCreation\");\n+    String customPeerConfigKey = \"hbase.xxx.custom_config\";\n+    String customPeerConfigValue = \"test\";\n+    String customPeerConfigUpdatedValue = \"test_updated\";\n+    try {\n+      baseConfiguration.set(ReplicationPeerConfigUtil.HBASE_REPLICATION_PEER_BASE_CONFIG,\n+        customPeerConfigKey.concat(\"=\").concat(customPeerConfigValue));\n+      startMiniClusters(2);\n+      addPeer(\"1\", 0, 1);\n+      Admin admin = utilities[0].getAdmin();\n+\n+      Assert.assertEquals(customPeerConfigValue, admin.getReplicationPeerConfig(\"1\").\n+        getConfiguration().get(customPeerConfigKey));\n+\n+      ReplicationPeerConfig updatedReplicationPeerConfig = ReplicationPeerConfig.\n+        newBuilder(admin.getReplicationPeerConfig(\"1\")).\n+        putConfiguration(customPeerConfigKey,customPeerConfigUpdatedValue).build();\n+      admin.updateReplicationPeerConfig(\"1\", updatedReplicationPeerConfig);", "originalCommit": "df48cb0b2f86aedbad50f1bb007a2be272d7cd57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwOTk0NQ==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r478709945", "bodyText": "Looks like hbase does not provide the support for deleting a peer configuration, we can only update the value after a configuration is added. But I have added the test case for the scenario that new base config gets picked up after hbase restart.", "author": "ankitjain64", "createdAt": "2020-08-27T21:37:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxMDM0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a65f3e4e5c4ded0a340d8d576268a067d2c163ad", "chunk": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestMasterReplication.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestMasterReplication.java\nindex 9996de8cc7..69693b0873 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestMasterReplication.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestMasterReplication.java\n\n@@ -444,7 +444,7 @@ public class TestMasterReplication {\n \n   /**\n    * Tests that base replication peer configs are applied on peer creation\n-   * and the is overriden if updated as part of updateReplicationPeerConfig()\n+   * and the configs are overriden if updated as part of updateReplicationPeerConfig()\n    *\n    */\n   @Test\n"}}, {"oid": "a65f3e4e5c4ded0a340d8d576268a067d2c163ad", "url": "https://github.com/apache/hbase/commit/a65f3e4e5c4ded0a340d8d576268a067d2c163ad", "message": "HBASE-24764: Modifying test description", "committedDate": "2020-08-27T18:21:47Z", "type": "commit"}, {"oid": "e2f08b08d0b2cf94767c843c2f8219d7d6edc248", "url": "https://github.com/apache/hbase/commit/e2f08b08d0b2cf94767c843c2f8219d7d6edc248", "message": "HBASE-24764 : Review comments and adding more tests", "committedDate": "2020-08-27T21:29:12Z", "type": "commit"}, {"oid": "20e33507197601ca3f1e42dd6e1aba472641ef48", "url": "https://github.com/apache/hbase/commit/20e33507197601ca3f1e42dd6e1aba472641ef48", "message": "HBASE-24764 : Review Comments", "committedDate": "2020-08-27T22:25:01Z", "type": "commit"}, {"oid": "9147c933e0a513e2998ef3af04d0f1c1868e8b0a", "url": "https://github.com/apache/hbase/commit/9147c933e0a513e2998ef3af04d0f1c1868e8b0a", "message": "Remvoing shaded imports", "committedDate": "2020-08-27T22:39:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3NTYzOQ==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r479575639", "bodyText": "nit: Use the default as empty string? That way we can avoid null check in if, not a big deal, just to be consistent with other similar usages.", "author": "bharathv", "createdAt": "2020-08-28T23:41:15Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java", "diffHunk": "@@ -450,6 +453,45 @@ public static ReplicationPeerConfig appendTableCFsToReplicationPeerConfig(\n     return builder.build();\n   }\n \n+  /**\n+   * Helper method to add base peer configs from Configuration to ReplicationPeerConfig\n+   * if not present in latter.\n+   *\n+   * This merges the user supplied peer configuration\n+   * {@link org.apache.hadoop.hbase.replication.ReplicationPeerConfig} with peer configs\n+   * provided as property hbase.replication.peer.base.configs in hbase configuration.\n+   * Expected format for this hbase configuration is \"k1=v1;k2=v2,v2_1\". Original value\n+   * of conf is retained if already present in ReplicationPeerConfig.\n+   *\n+   * @param conf Configuration\n+   * @return ReplicationPeerConfig containing updated configs.\n+   */\n+  public static ReplicationPeerConfig addBasePeerConfigsIfNotPresent(Configuration conf,\n+    ReplicationPeerConfig receivedPeerConfig) {\n+    String basePeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG, null);", "originalCommit": "9147c933e0a513e2998ef3af04d0f1c1868e8b0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb9c543a3fcd544f51f4a0f51811ff79c1684bd8", "chunk": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\nindex e299f4c726..c5dcd762e9 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n\n@@ -468,27 +468,23 @@ public final class ReplicationPeerConfigUtil {\n    */\n   public static ReplicationPeerConfig addBasePeerConfigsIfNotPresent(Configuration conf,\n     ReplicationPeerConfig receivedPeerConfig) {\n-    String basePeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG, null);\n-\n+    String basePeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG, \"\");\n     ReplicationPeerConfigBuilder copiedPeerConfigBuilder = ReplicationPeerConfig.\n       newBuilder(receivedPeerConfig);\n     Map<String,String> receivedPeerConfigMap = receivedPeerConfig.getConfiguration();\n \n-    if (basePeerConfigs != null && basePeerConfigs.length() != 0) {\n-\n+    if (basePeerConfigs.length() != 0) {\n       Map<String, String> basePeerConfigMap = Splitter.on(';').trimResults().omitEmptyStrings()\n         .withKeyValueSeparator(\"=\").split(basePeerConfigs);\n-\n       for (Map.Entry<String,String> entry : basePeerConfigMap.entrySet()) {\n         String configName = entry.getKey();\n         String configValue = entry.getValue();\n         // Only override if base config does not exist in existing peer configs\n         if (!receivedPeerConfigMap.containsKey(configName)) {\n-          copiedPeerConfigBuilder.putConfiguration(configName,configValue);\n+          copiedPeerConfigBuilder.putConfiguration(configName, configValue);\n         }\n       }\n     }\n-\n     return copiedPeerConfigBuilder.build();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3NTcyNA==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r479575724", "bodyText": "nit: Remove multiple extraneous new lines in this method.", "author": "bharathv", "createdAt": "2020-08-28T23:41:40Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java", "diffHunk": "@@ -450,6 +453,45 @@ public static ReplicationPeerConfig appendTableCFsToReplicationPeerConfig(\n     return builder.build();\n   }\n \n+  /**\n+   * Helper method to add base peer configs from Configuration to ReplicationPeerConfig\n+   * if not present in latter.\n+   *\n+   * This merges the user supplied peer configuration\n+   * {@link org.apache.hadoop.hbase.replication.ReplicationPeerConfig} with peer configs\n+   * provided as property hbase.replication.peer.base.configs in hbase configuration.\n+   * Expected format for this hbase configuration is \"k1=v1;k2=v2,v2_1\". Original value\n+   * of conf is retained if already present in ReplicationPeerConfig.\n+   *\n+   * @param conf Configuration\n+   * @return ReplicationPeerConfig containing updated configs.\n+   */\n+  public static ReplicationPeerConfig addBasePeerConfigsIfNotPresent(Configuration conf,\n+    ReplicationPeerConfig receivedPeerConfig) {\n+    String basePeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG, null);\n+\n+    ReplicationPeerConfigBuilder copiedPeerConfigBuilder = ReplicationPeerConfig.\n+      newBuilder(receivedPeerConfig);\n+    Map<String,String> receivedPeerConfigMap = receivedPeerConfig.getConfiguration();\n+", "originalCommit": "9147c933e0a513e2998ef3af04d0f1c1868e8b0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb9c543a3fcd544f51f4a0f51811ff79c1684bd8", "chunk": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\nindex e299f4c726..c5dcd762e9 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n\n@@ -468,27 +468,23 @@ public final class ReplicationPeerConfigUtil {\n    */\n   public static ReplicationPeerConfig addBasePeerConfigsIfNotPresent(Configuration conf,\n     ReplicationPeerConfig receivedPeerConfig) {\n-    String basePeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG, null);\n-\n+    String basePeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG, \"\");\n     ReplicationPeerConfigBuilder copiedPeerConfigBuilder = ReplicationPeerConfig.\n       newBuilder(receivedPeerConfig);\n     Map<String,String> receivedPeerConfigMap = receivedPeerConfig.getConfiguration();\n \n-    if (basePeerConfigs != null && basePeerConfigs.length() != 0) {\n-\n+    if (basePeerConfigs.length() != 0) {\n       Map<String, String> basePeerConfigMap = Splitter.on(';').trimResults().omitEmptyStrings()\n         .withKeyValueSeparator(\"=\").split(basePeerConfigs);\n-\n       for (Map.Entry<String,String> entry : basePeerConfigMap.entrySet()) {\n         String configName = entry.getKey();\n         String configValue = entry.getValue();\n         // Only override if base config does not exist in existing peer configs\n         if (!receivedPeerConfigMap.containsKey(configName)) {\n-          copiedPeerConfigBuilder.putConfiguration(configName,configValue);\n+          copiedPeerConfigBuilder.putConfiguration(configName, configValue);\n         }\n       }\n     }\n-\n     return copiedPeerConfigBuilder.build();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3NTgyMQ==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r479575821", "bodyText": "nit:, configValue (space)", "author": "bharathv", "createdAt": "2020-08-28T23:42:06Z", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java", "diffHunk": "@@ -450,6 +453,45 @@ public static ReplicationPeerConfig appendTableCFsToReplicationPeerConfig(\n     return builder.build();\n   }\n \n+  /**\n+   * Helper method to add base peer configs from Configuration to ReplicationPeerConfig\n+   * if not present in latter.\n+   *\n+   * This merges the user supplied peer configuration\n+   * {@link org.apache.hadoop.hbase.replication.ReplicationPeerConfig} with peer configs\n+   * provided as property hbase.replication.peer.base.configs in hbase configuration.\n+   * Expected format for this hbase configuration is \"k1=v1;k2=v2,v2_1\". Original value\n+   * of conf is retained if already present in ReplicationPeerConfig.\n+   *\n+   * @param conf Configuration\n+   * @return ReplicationPeerConfig containing updated configs.\n+   */\n+  public static ReplicationPeerConfig addBasePeerConfigsIfNotPresent(Configuration conf,\n+    ReplicationPeerConfig receivedPeerConfig) {\n+    String basePeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG, null);\n+\n+    ReplicationPeerConfigBuilder copiedPeerConfigBuilder = ReplicationPeerConfig.\n+      newBuilder(receivedPeerConfig);\n+    Map<String,String> receivedPeerConfigMap = receivedPeerConfig.getConfiguration();\n+\n+    if (basePeerConfigs != null && basePeerConfigs.length() != 0) {\n+\n+      Map<String, String> basePeerConfigMap = Splitter.on(';').trimResults().omitEmptyStrings()\n+        .withKeyValueSeparator(\"=\").split(basePeerConfigs);\n+\n+      for (Map.Entry<String,String> entry : basePeerConfigMap.entrySet()) {\n+        String configName = entry.getKey();\n+        String configValue = entry.getValue();\n+        // Only override if base config does not exist in existing peer configs\n+        if (!receivedPeerConfigMap.containsKey(configName)) {\n+          copiedPeerConfigBuilder.putConfiguration(configName,configValue);", "originalCommit": "9147c933e0a513e2998ef3af04d0f1c1868e8b0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb9c543a3fcd544f51f4a0f51811ff79c1684bd8", "chunk": "diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\nindex e299f4c726..c5dcd762e9 100644\n--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationPeerConfigUtil.java\n\n@@ -468,27 +468,23 @@ public final class ReplicationPeerConfigUtil {\n    */\n   public static ReplicationPeerConfig addBasePeerConfigsIfNotPresent(Configuration conf,\n     ReplicationPeerConfig receivedPeerConfig) {\n-    String basePeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG, null);\n-\n+    String basePeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG, \"\");\n     ReplicationPeerConfigBuilder copiedPeerConfigBuilder = ReplicationPeerConfig.\n       newBuilder(receivedPeerConfig);\n     Map<String,String> receivedPeerConfigMap = receivedPeerConfig.getConfiguration();\n \n-    if (basePeerConfigs != null && basePeerConfigs.length() != 0) {\n-\n+    if (basePeerConfigs.length() != 0) {\n       Map<String, String> basePeerConfigMap = Splitter.on(';').trimResults().omitEmptyStrings()\n         .withKeyValueSeparator(\"=\").split(basePeerConfigs);\n-\n       for (Map.Entry<String,String> entry : basePeerConfigMap.entrySet()) {\n         String configName = entry.getKey();\n         String configValue = entry.getValue();\n         // Only override if base config does not exist in existing peer configs\n         if (!receivedPeerConfigMap.containsKey(configName)) {\n-          copiedPeerConfigBuilder.putConfiguration(configName,configValue);\n+          copiedPeerConfigBuilder.putConfiguration(configName, configValue);\n         }\n       }\n     }\n-\n     return copiedPeerConfigBuilder.build();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3NTk1OQ==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r479575959", "bodyText": "nit: config, peerConfig (space)", "author": "bharathv", "createdAt": "2020-08-28T23:42:45Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java", "diffHunk": "@@ -232,6 +233,9 @@ public void addPeer(String peerId, ReplicationPeerConfig peerConfig, boolean ena\n       // this should be a retry, just return\n       return;\n     }\n+    ReplicationPeerConfig updatedPeerConfig = ReplicationPeerConfigUtil.\n+      addBasePeerConfigsIfNotPresent(conf,peerConfig);", "originalCommit": "9147c933e0a513e2998ef3af04d0f1c1868e8b0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb9c543a3fcd544f51f4a0f51811ff79c1684bd8", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java\nindex eb6352f92d..14f7e9355e 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java\n\n@@ -233,9 +233,7 @@ public class ReplicationPeerManager {\n       // this should be a retry, just return\n       return;\n     }\n-    ReplicationPeerConfig updatedPeerConfig = ReplicationPeerConfigUtil.\n-      addBasePeerConfigsIfNotPresent(conf,peerConfig);\n-    peerConfig = updatedPeerConfig;\n+    peerConfig = ReplicationPeerConfigUtil.addBasePeerConfigsIfNotPresent(conf, peerConfig);\n     ReplicationPeerConfig copiedPeerConfig = ReplicationPeerConfig.newBuilder(peerConfig).build();\n     SyncReplicationState syncReplicationState =\n       copiedPeerConfig.isSyncReplication() ? SyncReplicationState.DOWNGRADE_ACTIVE\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3NjQwNA==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r479576404", "bodyText": "merge into a single line.\npeerConfig = ReplicatinPeerConfigUtil..addPeer..IfNotPresent()", "author": "bharathv", "createdAt": "2020-08-28T23:45:15Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java", "diffHunk": "@@ -232,6 +233,9 @@ public void addPeer(String peerId, ReplicationPeerConfig peerConfig, boolean ena\n       // this should be a retry, just return\n       return;\n     }\n+    ReplicationPeerConfig updatedPeerConfig = ReplicationPeerConfigUtil.\n+      addBasePeerConfigsIfNotPresent(conf,peerConfig);\n+    peerConfig = updatedPeerConfig;", "originalCommit": "9147c933e0a513e2998ef3af04d0f1c1868e8b0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb9c543a3fcd544f51f4a0f51811ff79c1684bd8", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java\nindex eb6352f92d..14f7e9355e 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java\n\n@@ -233,9 +233,7 @@ public class ReplicationPeerManager {\n       // this should be a retry, just return\n       return;\n     }\n-    ReplicationPeerConfig updatedPeerConfig = ReplicationPeerConfigUtil.\n-      addBasePeerConfigsIfNotPresent(conf,peerConfig);\n-    peerConfig = updatedPeerConfig;\n+    peerConfig = ReplicationPeerConfigUtil.addBasePeerConfigsIfNotPresent(conf, peerConfig);\n     ReplicationPeerConfig copiedPeerConfig = ReplicationPeerConfig.newBuilder(peerConfig).build();\n     SyncReplicationState syncReplicationState =\n       copiedPeerConfig.isSyncReplication() ? SyncReplicationState.DOWNGRADE_ACTIVE\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3NjQ3NQ==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r479576475", "bodyText": "nit: , updatedPeerConfig (space).", "author": "bharathv", "createdAt": "2020-08-28T23:45:37Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java", "diffHunk": "@@ -546,9 +550,13 @@ public static ReplicationPeerManager create(ZKWatcher zk, Configuration conf, St\n     ConcurrentMap<String, ReplicationPeerDescription> peers = new ConcurrentHashMap<>();\n     for (String peerId : peerStorage.listPeerIds()) {\n       ReplicationPeerConfig peerConfig = peerStorage.getPeerConfig(peerId);\n+\n+      ReplicationPeerConfig updatedPeerConfig = ReplicationPeerConfigUtil.\n+        addBasePeerConfigsIfNotPresent(conf,peerConfig);\n+      peerStorage.updatePeerConfig(peerId,updatedPeerConfig);", "originalCommit": "9147c933e0a513e2998ef3af04d0f1c1868e8b0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb9c543a3fcd544f51f4a0f51811ff79c1684bd8", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java\nindex eb6352f92d..14f7e9355e 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java\n\n@@ -551,12 +549,11 @@ public class ReplicationPeerManager {\n     for (String peerId : peerStorage.listPeerIds()) {\n       ReplicationPeerConfig peerConfig = peerStorage.getPeerConfig(peerId);\n \n-      ReplicationPeerConfig updatedPeerConfig = ReplicationPeerConfigUtil.\n-        addBasePeerConfigsIfNotPresent(conf,peerConfig);\n-      peerStorage.updatePeerConfig(peerId,updatedPeerConfig);\n+      peerConfig = ReplicationPeerConfigUtil.addBasePeerConfigsIfNotPresent(conf, peerConfig);\n+      peerStorage.updatePeerConfig(peerId, peerConfig);\n       boolean enabled = peerStorage.isPeerEnabled(peerId);\n       SyncReplicationState state = peerStorage.getPeerSyncReplicationState(peerId);\n-      peers.put(peerId, new ReplicationPeerDescription(peerId, enabled, updatedPeerConfig, state));\n+      peers.put(peerId, new ReplicationPeerDescription(peerId, enabled, peerConfig, state));\n     }\n     return new ReplicationPeerManager(peerStorage,\n       ReplicationStorageFactory.getReplicationQueueStorage(zk, conf), peers, conf, clusterId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU3NjU3OQ==", "url": "https://github.com/apache/hbase/pull/2284#discussion_r479576579", "bodyText": "peerConfig = ReplicationpeerConfigUtil.....() (avoid unnecessary temp variable)", "author": "bharathv", "createdAt": "2020-08-28T23:46:17Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java", "diffHunk": "@@ -546,9 +550,13 @@ public static ReplicationPeerManager create(ZKWatcher zk, Configuration conf, St\n     ConcurrentMap<String, ReplicationPeerDescription> peers = new ConcurrentHashMap<>();\n     for (String peerId : peerStorage.listPeerIds()) {\n       ReplicationPeerConfig peerConfig = peerStorage.getPeerConfig(peerId);\n+\n+      ReplicationPeerConfig updatedPeerConfig = ReplicationPeerConfigUtil.", "originalCommit": "9147c933e0a513e2998ef3af04d0f1c1868e8b0a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb9c543a3fcd544f51f4a0f51811ff79c1684bd8", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java\nindex eb6352f92d..14f7e9355e 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java\n\n@@ -551,12 +549,11 @@ public class ReplicationPeerManager {\n     for (String peerId : peerStorage.listPeerIds()) {\n       ReplicationPeerConfig peerConfig = peerStorage.getPeerConfig(peerId);\n \n-      ReplicationPeerConfig updatedPeerConfig = ReplicationPeerConfigUtil.\n-        addBasePeerConfigsIfNotPresent(conf,peerConfig);\n-      peerStorage.updatePeerConfig(peerId,updatedPeerConfig);\n+      peerConfig = ReplicationPeerConfigUtil.addBasePeerConfigsIfNotPresent(conf, peerConfig);\n+      peerStorage.updatePeerConfig(peerId, peerConfig);\n       boolean enabled = peerStorage.isPeerEnabled(peerId);\n       SyncReplicationState state = peerStorage.getPeerSyncReplicationState(peerId);\n-      peers.put(peerId, new ReplicationPeerDescription(peerId, enabled, updatedPeerConfig, state));\n+      peers.put(peerId, new ReplicationPeerDescription(peerId, enabled, peerConfig, state));\n     }\n     return new ReplicationPeerManager(peerStorage,\n       ReplicationStorageFactory.getReplicationQueueStorage(zk, conf), peers, conf, clusterId);\n"}}, {"oid": "eb9c543a3fcd544f51f4a0f51811ff79c1684bd8", "url": "https://github.com/apache/hbase/commit/eb9c543a3fcd544f51f4a0f51811ff79c1684bd8", "message": "HBASE-24764: Addressing review comments", "committedDate": "2020-08-29T00:45:42Z", "type": "commit"}]}