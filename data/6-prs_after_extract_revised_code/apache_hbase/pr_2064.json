{"pr_number": 2064, "pr_title": "HBASE-24735: Refactor ReplicationSourceManager: move logPositionAndCl\u2026", "pr_createdAt": "2020-07-14T09:22:00Z", "pr_url": "https://github.com/apache/hbase/pull/2064", "timeline": [{"oid": "c41d7989bc53f6c8ad6b7429c0fb915183662d2c", "url": "https://github.com/apache/hbase/commit/c41d7989bc53f6c8ad6b7429c0fb915183662d2c", "message": "HBASE-24735: Refactor ReplicationSourceManager: move logPositionAndCleanOldLogs/cleanUpHFileRefs to ReplicationSource inside", "committedDate": "2020-07-15T02:54:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxNzExNw==", "url": "https://github.com/apache/hbase/pull/2064#discussion_r455417117", "bodyText": "nit: method javadoc", "author": "bharathv", "createdAt": "2020-07-15T23:13:07Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceInterface.java", "diffHunk": "@@ -192,4 +188,8 @@ default boolean isSyncReplication() {\n   default boolean isRecovered() {\n     return false;\n   }\n+\n+  void logPosition(WALEntryBatch entryBatch);", "originalCommit": "c41d7989bc53f6c8ad6b7429c0fb915183662d2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27dab4e8b43b5d498f52c6413cd9c2d9d4f60bd4", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceInterface.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceInterface.java\nindex 08d2232641..da1c5fa604 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceInterface.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceInterface.java\n\n@@ -189,7 +189,17 @@ public interface ReplicationSourceInterface {\n     return false;\n   }\n \n-  void logPosition(WALEntryBatch entryBatch);\n+  /**\n+   * Set the current position of WAL to {@link ReplicationQueueStorage}\n+   * @param entryBatch a batch of WAL entries to replicate\n+   */\n+  void setWALPosition(WALEntryBatch entryBatch);\n \n-  void cleanOldLogs(String walName, boolean inclusive);\n+  /**\n+   * Cleans a WAL and all older WALs from replication queue. Called when we are sure that a WAL is\n+   * closed and has no more entries.\n+   * @param walName the name of WAL\n+   * @param inclusive whether we should also remove the given WAL\n+   */\n+  void cleanOldWALs(String walName, boolean inclusive);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxNzE1NQ==", "url": "https://github.com/apache/hbase/pull/2064#discussion_r455417155", "bodyText": "nit: method javadoc", "author": "bharathv", "createdAt": "2020-07-15T23:13:17Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceInterface.java", "diffHunk": "@@ -192,4 +188,8 @@ default boolean isSyncReplication() {\n   default boolean isRecovered() {\n     return false;\n   }\n+\n+  void logPosition(WALEntryBatch entryBatch);\n+\n+  void cleanOldLogs(String walName, boolean inclusive);", "originalCommit": "c41d7989bc53f6c8ad6b7429c0fb915183662d2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27dab4e8b43b5d498f52c6413cd9c2d9d4f60bd4", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceInterface.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceInterface.java\nindex 08d2232641..da1c5fa604 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceInterface.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceInterface.java\n\n@@ -189,7 +189,17 @@ public interface ReplicationSourceInterface {\n     return false;\n   }\n \n-  void logPosition(WALEntryBatch entryBatch);\n+  /**\n+   * Set the current position of WAL to {@link ReplicationQueueStorage}\n+   * @param entryBatch a batch of WAL entries to replicate\n+   */\n+  void setWALPosition(WALEntryBatch entryBatch);\n \n-  void cleanOldLogs(String walName, boolean inclusive);\n+  /**\n+   * Cleans a WAL and all older WALs from replication queue. Called when we are sure that a WAL is\n+   * closed and has no more entries.\n+   * @param walName the name of WAL\n+   * @param inclusive whether we should also remove the given WAL\n+   */\n+  void cleanOldWALs(String walName, boolean inclusive);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxOTExNw==", "url": "https://github.com/apache/hbase/pull/2064#discussion_r455419117", "bodyText": "You don't need the manager in the c'tor anymore?", "author": "bharathv", "createdAt": "2020-07-15T23:19:06Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -139,17 +144,16 @@\n    * Instantiation method used by region servers\n    * @param conf configuration to use\n    * @param fs file system to use\n-   * @param manager replication manager to ping to\n    * @param server the server for this region server\n    * @param queueId the id of our replication queue\n    * @param clusterId unique UUID for the cluster\n    * @param metrics metrics for replication source\n    */\n   @Override\n-  public void init(Configuration conf, FileSystem fs, ReplicationSourceManager manager,\n+  public void init(Configuration conf, FileSystem fs, Path walDir, ReplicationSourceManager manager,", "originalCommit": "c41d7989bc53f6c8ad6b7429c0fb915183662d2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ0ODI3NA==", "url": "https://github.com/apache/hbase/pull/2064#discussion_r455448274", "bodyText": "There are one typre ReplicationSource which called RecoveredReplicationSource, which replicate the WAL queues from a dead RegionServer. For RecoveredReplicationSource, the replication stream will finished when all WALs was replicated because the dead server cannot generate new WAL. Here need manager because RecoveredReplicationSource need to finish itself and clear the related reference from ReplicationSourceManager. When move to ReplicationServer future, need a ReplicationServer instead of this manager.", "author": "infraio", "createdAt": "2020-07-16T00:57:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxOTExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1OTA4NA==", "url": "https://github.com/apache/hbase/pull/2064#discussion_r455459084", "bodyText": "Oh, I see, didn't realize you didn't change the recovered source.", "author": "bharathv", "createdAt": "2020-07-16T01:38:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxOTExNw=="}], "type": "inlineReview", "revised_code": {"commit": "717e4c635642b80aa0bd10bffc28a631412c062f", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java\nindex 2026a33b6e..cb4171c0bd 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java\n\n@@ -140,10 +144,44 @@ public class ReplicationSource implements ReplicationSourceInterface {\n \n   private Thread initThread;\n \n+  /**\n+   * WALs to replicate.\n+   * Predicate that returns 'true' for WALs to replicate and false for WALs to skip.\n+   */\n+  private final Predicate<Path> filterInWALs;\n+\n+  /**\n+   * Base WALEntry filters for this class. Unmodifiable. Set on construction.\n+   * Filters *out* edits we do not want replicated, passed on to replication endpoints.\n+   * This is the basic set. Down in #initializeWALEntryFilter this set is added to the end of\n+   * the WALEntry filter chain. These are put after those that we pick up from the configured\n+   * endpoints and other machinations to create the final {@link #walEntryFilter}.\n+   * @see WALEntryFilter\n+   */\n+  private final List<WALEntryFilter> baseFilterOutWALEntries;\n+\n+  ReplicationSource() {\n+    // Default, filters *in* all WALs but meta WALs & filters *out* all WALEntries of System Tables.\n+    this(p -> !AbstractFSWALProvider.isMetaFile(p),\n+      Lists.newArrayList(new SystemTableWALEntryFilter()));\n+  }\n+\n+  /**\n+   * @param replicateWAL Pass a filter to run against WAL Path; filter *in* WALs to Replicate;\n+   *   i.e. return 'true' if you want to replicate the content of the WAL.\n+   * @param baseFilterOutWALEntries Base set of filters you want applied always; filters *out*\n+   *   WALEntries so they never make it out of this ReplicationSource.\n+   */\n+  ReplicationSource(Predicate<Path> replicateWAL, List<WALEntryFilter> baseFilterOutWALEntries) {\n+    this.filterInWALs = replicateWAL;\n+    this.baseFilterOutWALEntries = Collections.unmodifiableList(baseFilterOutWALEntries);\n+  }\n+\n   /**\n    * Instantiation method used by region servers\n    * @param conf configuration to use\n    * @param fs file system to use\n+   * @param manager replication manager to ping to\n    * @param server the server for this region server\n    * @param queueId the id of our replication queue\n    * @param clusterId unique UUID for the cluster\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxOTUzNQ==", "url": "https://github.com/apache/hbase/pull/2064#discussion_r455419535", "bodyText": "move this to the interface?", "author": "bharathv", "createdAt": "2020-07-15T23:20:25Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -729,4 +728,143 @@ void removeWorker(ReplicationSourceShipper worker) {\n   private String logPeerId(){\n     return \"[Source for peer \" + this.getPeer().getId() + \"]:\";\n   }\n+\n+  @VisibleForTesting\n+  public void logPosition(WALEntryBatch entryBatch) {\n+    String fileName = entryBatch.getLastWalPath().getName();\n+    interruptOrAbortWhenFail(() -> this.queueStorage\n+      .setWALPosition(server.getServerName(), getQueueId(), fileName,\n+        entryBatch.getLastWalPosition(), entryBatch.getLastSeqIds()));\n+  }\n+\n+  /**", "originalCommit": "c41d7989bc53f6c8ad6b7429c0fb915183662d2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27dab4e8b43b5d498f52c6413cd9c2d9d4f60bd4", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java\nindex 2026a33b6e..1723356d91 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java\n\n@@ -730,26 +721,20 @@ public class ReplicationSource implements ReplicationSourceInterface {\n   }\n \n   @VisibleForTesting\n-  public void logPosition(WALEntryBatch entryBatch) {\n+  public void setWALPosition(WALEntryBatch entryBatch) {\n     String fileName = entryBatch.getLastWalPath().getName();\n     interruptOrAbortWhenFail(() -> this.queueStorage\n       .setWALPosition(server.getServerName(), getQueueId(), fileName,\n         entryBatch.getLastWalPosition(), entryBatch.getLastSeqIds()));\n   }\n \n-  /**\n-   * Cleans a log file and all older logs from replication queue. Called when we are sure that a log\n-   * file is closed and has no more entries.\n-   * @param log Path to the log\n-   * @param inclusive whether we should also remove the given log file\n-   */\n   @VisibleForTesting\n-  public void cleanOldLogs(String log, boolean inclusive) {\n+  public void cleanOldWALs(String log, boolean inclusive) {\n     NavigableSet<String> walsToRemove = getWalsToRemove(log, inclusive);\n     if (walsToRemove.isEmpty()) {\n       return;\n     }\n-    // cleanOldLogs may spend some time, especially for sync replication where we may want to\n+    // cleanOldWALs may spend some time, especially for sync replication where we may want to\n     // remove remote wals as the remote cluster may have already been down, so we do it outside\n     // the lock to avoid block preLogRoll\n     cleanOldLogs(walsToRemove);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQyMDA0NQ==", "url": "https://github.com/apache/hbase/pull/2064#discussion_r455420045", "bodyText": "curious why this change?", "author": "bharathv", "createdAt": "2020-07-15T23:21:59Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "diffHunk": "@@ -926,7 +799,8 @@ public void join() {\n    * @return list of all normal sources\n    */\n   public List<ReplicationSourceInterface> getSources() {\n-    return new ArrayList<>(this.sources.values());\n+    return this.sources.values().stream().filter(source -> source.isSourceActive())", "originalCommit": "c41d7989bc53f6c8ad6b7429c0fb915183662d2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ0ODU4Ng==", "url": "https://github.com/apache/hbase/pull/2064#discussion_r455448586", "bodyText": "This is for the ut TestMasterReplication#testLoopedReplication. Will remove this after HBASE-24743.", "author": "infraio", "createdAt": "2020-07-16T00:59:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQyMDA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1OTI4Mw==", "url": "https://github.com/apache/hbase/pull/2064#discussion_r455459283", "bodyText": "ok", "author": "bharathv", "createdAt": "2020-07-16T01:39:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQyMDA0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "27dab4e8b43b5d498f52c6413cd9c2d9d4f60bd4", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java\nindex 1faced0a84..f6284a972c 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java\n\n@@ -799,8 +799,7 @@ public class ReplicationSourceManager implements ReplicationListener {\n    * @return list of all normal sources\n    */\n   public List<ReplicationSourceInterface> getSources() {\n-    return this.sources.values().stream().filter(source -> source.isSourceActive())\n-      .collect(Collectors.toList());\n+    return new ArrayList<>(this.sources.values());\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQyMDM1NQ==", "url": "https://github.com/apache/hbase/pull/2064#discussion_r455420355", "bodyText": "I think this is not needed.", "author": "bharathv", "createdAt": "2020-07-15T23:23:01Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/WALEntryBatch.java", "diffHunk": "@@ -30,8 +30,7 @@\n /**\n  * Holds a batch of WAL entries to replicate, along with some statistics\n  */\n-@InterfaceAudience.Private\n-class WALEntryBatch {\n+@InterfaceAudience.Private public class WALEntryBatch {", "originalCommit": "c41d7989bc53f6c8ad6b7429c0fb915183662d2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27dab4e8b43b5d498f52c6413cd9c2d9d4f60bd4", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/WALEntryBatch.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/WALEntryBatch.java\nindex 7a5a280608..591b44de93 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/WALEntryBatch.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/WALEntryBatch.java\n\n@@ -30,7 +30,8 @@ import org.apache.yetus.audience.InterfaceAudience;\n /**\n  * Holds a batch of WAL entries to replicate, along with some statistics\n  */\n-@InterfaceAudience.Private public class WALEntryBatch {\n+@InterfaceAudience.Private\n+public class WALEntryBatch {\n \n   // used by recovered replication queue to indicate that all the entries have been read.\n   public static final WALEntryBatch NO_MORE_DATA = new WALEntryBatch(0, null);\n"}}, {"oid": "27dab4e8b43b5d498f52c6413cd9c2d9d4f60bd4", "url": "https://github.com/apache/hbase/commit/27dab4e8b43b5d498f52c6413cd9c2d9d4f60bd4", "message": "HBASE-24735: Refactor ReplicationSourceManager: move logPositionAndCleanOldLogs/cleanUpHFileRefs to ReplicationSource inside", "committedDate": "2020-07-21T01:35:00Z", "type": "forcePushed"}, {"oid": "6f28e3bd2944251277a86beff7232f9b5abe6249", "url": "https://github.com/apache/hbase/commit/6f28e3bd2944251277a86beff7232f9b5abe6249", "message": "HBASE-24735: Refactor ReplicationSourceManager: move logPositionAndCleanOldLogs/cleanUpHFileRefs to ReplicationSource inside", "committedDate": "2020-07-21T01:38:50Z", "type": "forcePushed"}, {"oid": "782dc50265aeda6f68e036efdd48b0e5b5237662", "url": "https://github.com/apache/hbase/commit/782dc50265aeda6f68e036efdd48b0e5b5237662", "message": "HBASE-24735: Refactor ReplicationSourceManager: move logPositionAndCleanOldLogs/cleanUpHFileRefs to ReplicationSource inside", "committedDate": "2020-07-21T06:05:39Z", "type": "forcePushed"}, {"oid": "717e4c635642b80aa0bd10bffc28a631412c062f", "url": "https://github.com/apache/hbase/commit/717e4c635642b80aa0bd10bffc28a631412c062f", "message": "HBASE-24735: Refactor ReplicationSourceManager: move logPositionAndCleanOldLogs/cleanUpHFileRefs to ReplicationSource inside", "committedDate": "2020-08-10T06:52:27Z", "type": "forcePushed"}, {"oid": "027690e8712cd484ffafeeda4818c0a76bf6d2d7", "url": "https://github.com/apache/hbase/commit/027690e8712cd484ffafeeda4818c0a76bf6d2d7", "message": "HBASE-24735: Refactor ReplicationSourceManager: move logPositionAndCleanOldLogs/cleanUpHFileRefs to ReplicationSource inside", "committedDate": "2020-08-10T13:52:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5NTQyMw==", "url": "https://github.com/apache/hbase/pull/2064#discussion_r468095423", "bodyText": "Since we are cleaning out this extra, unnecessary variable, could we make \"this.manager\" package private (or provide a package private getter), so that source readers and source shippers don't have to define an additional reference to ReplicationSourceManager?", "author": "wchevreuil", "createdAt": "2020-08-10T18:25:45Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -130,8 +137,6 @@\n   protected final ConcurrentHashMap<String, ReplicationSourceShipper> workerThreads =\n       new ConcurrentHashMap<>();\n \n-  private AtomicLong totalBufferUsed;", "originalCommit": "027690e8712cd484ffafeeda4818c0a76bf6d2d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2OTE4OA==", "url": "https://github.com/apache/hbase/pull/2064#discussion_r468269188", "bodyText": "Good idea. Let me refator it. And after I rethink about this, the ReplicationSourceManager is still needed by ReplicationSource. But only need the getTotalBuffered/getTotalLimit/getGlobalMetrics now. Maybe introduce a new interface in the future.", "author": "infraio", "createdAt": "2020-08-11T01:09:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5NTQyMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5NjA2NQ==", "url": "https://github.com/apache/hbase/pull/2064#discussion_r468096065", "bodyText": "Might not be needed if we make \"ReplicationSource.manager\" accessible (see my comments above).", "author": "wchevreuil", "createdAt": "2020-08-10T18:27:03Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -398,10 +402,11 @@ protected ReplicationSourceShipper createNewShipper(String walGroupId,\n   }\n \n   private ReplicationSourceWALReader createNewWALReader(String walGroupId,\n-      PriorityBlockingQueue<Path> queue, long startPosition) {\n-    return replicationPeer.getPeerConfig().isSerial()\n-      ? new SerialReplicationSourceWALReader(fs, conf, queue, startPosition, walEntryFilter, this)\n-      : new ReplicationSourceWALReader(fs, conf, queue, startPosition, walEntryFilter, this);\n+    PriorityBlockingQueue<Path> queue, long startPosition) {\n+    return replicationPeer.getPeerConfig().isSerial() ?\n+      new SerialReplicationSourceWALReader(fs, conf, queue, startPosition, walEntryFilter, this,\n+        manager) :\n+      new ReplicationSourceWALReader(fs, conf, queue, startPosition, walEntryFilter, this, manager);", "originalCommit": "027690e8712cd484ffafeeda4818c0a76bf6d2d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5fb08cae55a824b940c9c6e1fe1a45908aac989", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java\nindex cb4171c0bd..fd9fb311b2 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java\n\n@@ -402,11 +402,10 @@ public class ReplicationSource implements ReplicationSourceInterface {\n   }\n \n   private ReplicationSourceWALReader createNewWALReader(String walGroupId,\n-    PriorityBlockingQueue<Path> queue, long startPosition) {\n+      PriorityBlockingQueue<Path> queue, long startPosition) {\n     return replicationPeer.getPeerConfig().isSerial() ?\n-      new SerialReplicationSourceWALReader(fs, conf, queue, startPosition, walEntryFilter, this,\n-        manager) :\n-      new ReplicationSourceWALReader(fs, conf, queue, startPosition, walEntryFilter, this, manager);\n+      new SerialReplicationSourceWALReader(fs, conf, queue, startPosition, walEntryFilter, this) :\n+      new ReplicationSourceWALReader(fs, conf, queue, startPosition, walEntryFilter, this);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5NzA5MQ==", "url": "https://github.com/apache/hbase/pull/2064#discussion_r468097091", "bodyText": "Better use IA.Private, instead. See: See: https://lists.apache.org/thread.html/r9a2df6a3b58e00c0c482d8660434d8ce6075863c18700978e6ea8b21%40%3Cdev.hbase.apache.org%3E", "author": "wchevreuil", "createdAt": "2020-08-10T18:29:03Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -770,4 +770,137 @@ void removeWorker(ReplicationSourceShipper worker) {\n   private String logPeerId(){\n     return \"[Source for peer \" + this.getPeer().getId() + \"]:\";\n   }\n+\n+  @VisibleForTesting", "originalCommit": "027690e8712cd484ffafeeda4818c0a76bf6d2d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NjA2MQ==", "url": "https://github.com/apache/hbase/pull/2064#discussion_r468266061", "bodyText": "Got it.", "author": "infraio", "createdAt": "2020-08-11T00:57:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5NzA5MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "f5fb08cae55a824b940c9c6e1fe1a45908aac989", "url": "https://github.com/apache/hbase/commit/f5fb08cae55a824b940c9c6e1fe1a45908aac989", "message": "HBASE-24735: Refactor ReplicationSourceManager: move logPositionAndCleanOldLogs/cleanUpHFileRefs to ReplicationSource inside", "committedDate": "2020-08-11T01:15:47Z", "type": "commit"}, {"oid": "f5fb08cae55a824b940c9c6e1fe1a45908aac989", "url": "https://github.com/apache/hbase/commit/f5fb08cae55a824b940c9c6e1fe1a45908aac989", "message": "HBASE-24735: Refactor ReplicationSourceManager: move logPositionAndCleanOldLogs/cleanUpHFileRefs to ReplicationSource inside", "committedDate": "2020-08-11T01:15:47Z", "type": "forcePushed"}]}