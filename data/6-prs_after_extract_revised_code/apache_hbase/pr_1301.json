{"pr_number": 1301, "pr_title": "HBASE-23833. The relocated hadoop-thirdparty protobuf breaks HBase asyncwal\t", "pr_createdAt": "2020-03-17T22:53:28Z", "pr_url": "https://github.com/apache/hbase/pull/1301", "timeline": [{"oid": "71f02d5cb7156c91753c7ac1352028a38aa2d74e", "url": "https://github.com/apache/hbase/commit/71f02d5cb7156c91753c7ac1352028a38aa2d74e", "message": "Use Reflection to access shaded Hadoop protobuf classes.\n\n(cherry picked from commit a321e536989083ca3620bf2c53f12c07740bf5b0)", "committedDate": "2020-03-17T22:43:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NDAyNA==", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394794024", "bodyText": "Smile. These gymastics need big comment here to explain magic going on here. Smile.", "author": "saintstack", "createdAt": "2020-03-19T05:10:04Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "diffHunk": "@@ -355,6 +353,55 @@ private void sendSaslMessage(ChannelHandlerContext ctx, byte[] payload) throws I\n       return Collections.singletonList(new CipherOption(CipherSuite.AES_CTR_NOPADDING));\n     }\n \n+    private static class BuilderPayloadSetter {", "originalCommit": "71f02d5cb7156c91753c7ac1352028a38aa2d74e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65eec63ec4f8f480bafed7fd7910baa440e24aa0", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java\nindex d5e4b97bbe..e0f1fa2ed8 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java\n\n@@ -353,51 +354,81 @@ public final class FanOutOneBlockAsyncDFSOutputSaslHelper {\n       return Collections.singletonList(new CipherOption(CipherSuite.AES_CTR_NOPADDING));\n     }\n \n+    /**\n+     * The asyncfs subsystem emulates a HDFS client by sending protobuf messages via netty.\n+     * After Hadoop 3.3.0, the protobuf classes are relocated to org.apache.hadoop.thirdparty.protobuf.*.\n+     * Use Reflection to check which ones to use.\n+     */\n     private static class BuilderPayloadSetter {\n-      private static Class<?> byteStringClass;\n-      private static Class<?> builderClass;\n-      private static Method copyFromMethod;\n-      private static Method setPayloadMethod = null;\n-\n-      static void setter(DataTransferEncryptorMessageProto.Builder builder, byte[] payload) {\n-        Object byteStringObject = null;\n-        try {\n-          byteStringObject = copyFromMethod.invoke(null, payload);\n-        } catch (IllegalAccessException e) {\n-          e.printStackTrace();\n-        } catch (InvocationTargetException e) {\n-          e.printStackTrace();\n-        }\n-\n-        if (setPayloadMethod == null) {\n-          try {\n-            setPayloadMethod = builderClass.getMethod(\"setPayload\", byteStringClass);\n-          } catch (NoSuchMethodException e) {\n-            e.printStackTrace();\n-          }\n-        }\n-\n+      private static Method setPayloadMethod;\n+      private static Constructor<?> constructor;\n+\n+      /**\n+       * Create a ByteString from byte array without copying (wrap), and then set it as the payload\n+       * for the builder.\n+       *\n+       * @param builder builder for HDFS DataTransferEncryptorMessage.\n+       * @param payload byte array of payload.\n+       * @throws IOException\n+       */\n+      static void wrapAndSetPayload(DataTransferEncryptorMessageProto.Builder builder, byte[] payload)\n+        throws IOException {\n+        Object byteStringObject;\n         try {\n+          // byteStringObject = new LiteralByteString(payload);\n+          byteStringObject = constructor.newInstance(payload);\n+          // builder.setPayload(byteStringObject);\n           setPayloadMethod.invoke(builder, byteStringObject);\n-        } catch (IllegalAccessException e) {\n-          e.printStackTrace();\n+        } catch (IllegalAccessException | InstantiationException e) {\n+          throw new RuntimeException(e);\n         } catch (InvocationTargetException e) {\n-          e.printStackTrace();\n+          Throwables.propagateIfPossible(e.getTargetException(), IOException.class);\n+          throw new RuntimeException(e.getTargetException());\n         }\n       }\n \n       static {\n-        builderClass = DataTransferEncryptorMessageProto.Builder.class;\n-        byteStringClass = com.google.protobuf.ByteString.class;\n+        Class<?> builderClass = DataTransferEncryptorMessageProto.Builder.class;\n+\n+        // Try the unrelocated ByteString\n+        Class<?> byteStringClass = com.google.protobuf.ByteString.class;\n         try {\n+          // See if it can load the relocated ByteString, which comes from hadoop-thirdparty.\n           byteStringClass = Class.forName(\"org.apache.hadoop.thirdparty.protobuf.ByteString\");\n+          LOG.debug(\"Found relocated ByteString class from hadoop-thirdparty.\" +\n+            \" Assuming this is Hadoop 3.3.0+.\");\n         } catch (ClassNotFoundException e) {\n-          e.printStackTrace();\n+          LOG.debug(\"Did not find relocated ByteString class from hadoop-thirdparty.\" +\n+            \" Assuming this is below Hadoop 3.3.0\", e);\n         }\n+\n+        // LiteralByteString is a package private class in protobuf. Make it accessible.\n+        Class<?> literalByteStringClass;\n         try {\n-          copyFromMethod = byteStringClass.getMethod(\"copyFrom\", byte[].class);\n+          literalByteStringClass = Class.forName(\n+            \"org.apache.hadoop.thirdparty.protobuf.LiteralByteString\");\n+          LOG.debug(\"Shaded LiteralByteString from hadoop-thirdparty is found.\");\n+        } catch (ClassNotFoundException e) {\n+          try {\n+            literalByteStringClass = Class.forName(\"com.google.protobuf.LiteralByteString\");\n+            LOG.debug(\"com.google.protobuf.LiteralByteString found.\");\n+          } catch (ClassNotFoundException ex) {\n+            throw new RuntimeException(ex);\n+          }\n+        }\n+\n+        try {\n+          constructor = literalByteStringClass.getDeclaredConstructor(byte[].class);\n+          constructor.setAccessible(true);\n         } catch (NoSuchMethodException e) {\n-          e.printStackTrace();\n+          throw new RuntimeException(e);\n+        }\n+\n+        try {\n+          setPayloadMethod = builderClass.getMethod(\"setPayload\", byteStringClass);\n+        } catch (NoSuchMethodException e) {\n+          // if either method is not found, we are in big trouble. Abort.\n+          throw new RuntimeException(e);\n         }\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NzIzMw==", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394797233", "bodyText": "The builder is from HDFS. It is NOT a pb. It has pbs in it?", "author": "saintstack", "createdAt": "2020-03-19T05:24:28Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "diffHunk": "@@ -363,7 +410,7 @@ private void sendSaslMessage(ChannelHandlerContext ctx, byte[] payload,\n       if (payload != null) {\n         // Was ByteStringer; fix w/o using ByteStringer. Its in hbase-protocol\n         // and we want to keep that out of hbase-server.\n-        builder.setPayload(ByteString.copyFrom(payload));\n+        BuilderPayloadSetter.setter(builder, payload);", "originalCommit": "71f02d5cb7156c91753c7ac1352028a38aa2d74e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65eec63ec4f8f480bafed7fd7910baa440e24aa0", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java\nindex d5e4b97bbe..e0f1fa2ed8 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java\n\n@@ -408,9 +439,7 @@ public final class FanOutOneBlockAsyncDFSOutputSaslHelper {\n           DataTransferEncryptorMessageProto.newBuilder();\n       builder.setStatus(DataTransferEncryptorStatus.SUCCESS);\n       if (payload != null) {\n-        // Was ByteStringer; fix w/o using ByteStringer. Its in hbase-protocol\n-        // and we want to keep that out of hbase-server.\n-        BuilderPayloadSetter.setter(builder, payload);\n+        BuilderPayloadSetter.wrapAndSetPayload(builder, payload);\n       }\n       if (options != null) {\n         builder.addAllCipherOption(PBHelperClient.convertCipherOptions(options));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NzQ3OA==", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394797478", "bodyText": "Is this ok? This presumes what pb is on the CLASSPATH? pb2.5?  Should it be the shaded hbase ByteString?", "author": "saintstack", "createdAt": "2020-03-19T05:25:40Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "diffHunk": "@@ -355,6 +353,55 @@ private void sendSaslMessage(ChannelHandlerContext ctx, byte[] payload) throws I\n       return Collections.singletonList(new CipherOption(CipherSuite.AES_CTR_NOPADDING));\n     }\n \n+    private static class BuilderPayloadSetter {\n+      private static Class<?> byteStringClass;\n+      private static Class<?> builderClass;\n+      private static Method copyFromMethod;\n+      private static Method setPayloadMethod = null;\n+\n+      static void setter(DataTransferEncryptorMessageProto.Builder builder, byte[] payload) {\n+        Object byteStringObject = null;\n+        try {\n+          byteStringObject = copyFromMethod.invoke(null, payload);\n+        } catch (IllegalAccessException e) {\n+          e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+          e.printStackTrace();\n+        }\n+\n+        if (setPayloadMethod == null) {\n+          try {\n+            setPayloadMethod = builderClass.getMethod(\"setPayload\", byteStringClass);\n+          } catch (NoSuchMethodException e) {\n+            e.printStackTrace();\n+          }\n+        }\n+\n+        try {\n+          setPayloadMethod.invoke(builder, byteStringObject);\n+        } catch (IllegalAccessException e) {\n+          e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+          e.printStackTrace();\n+        }\n+      }\n+\n+      static {\n+        builderClass = DataTransferEncryptorMessageProto.Builder.class;\n+        byteStringClass = com.google.protobuf.ByteString.class;", "originalCommit": "71f02d5cb7156c91753c7ac1352028a38aa2d74e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NzU3Ng==", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394797576", "bodyText": "Or this is just a default setting?", "author": "saintstack", "createdAt": "2020-03-19T05:26:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NzQ3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5Nzg1Ng==", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394797856", "bodyText": "Seems like it should be hbase internal shaded ByteString, not this com.google one.", "author": "saintstack", "createdAt": "2020-03-19T05:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NzQ3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5ODAxOQ==", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394798019", "bodyText": "oh. i get it. This is the HDFS ByteString. The one that will be on the CP for all versions before HDFS3.3. Ok.", "author": "saintstack", "createdAt": "2020-03-19T05:28:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NzQ3OA=="}], "type": "inlineReview", "revised_code": {"commit": "65eec63ec4f8f480bafed7fd7910baa440e24aa0", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java\nindex d5e4b97bbe..e0f1fa2ed8 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java\n\n@@ -353,51 +354,81 @@ public final class FanOutOneBlockAsyncDFSOutputSaslHelper {\n       return Collections.singletonList(new CipherOption(CipherSuite.AES_CTR_NOPADDING));\n     }\n \n+    /**\n+     * The asyncfs subsystem emulates a HDFS client by sending protobuf messages via netty.\n+     * After Hadoop 3.3.0, the protobuf classes are relocated to org.apache.hadoop.thirdparty.protobuf.*.\n+     * Use Reflection to check which ones to use.\n+     */\n     private static class BuilderPayloadSetter {\n-      private static Class<?> byteStringClass;\n-      private static Class<?> builderClass;\n-      private static Method copyFromMethod;\n-      private static Method setPayloadMethod = null;\n-\n-      static void setter(DataTransferEncryptorMessageProto.Builder builder, byte[] payload) {\n-        Object byteStringObject = null;\n-        try {\n-          byteStringObject = copyFromMethod.invoke(null, payload);\n-        } catch (IllegalAccessException e) {\n-          e.printStackTrace();\n-        } catch (InvocationTargetException e) {\n-          e.printStackTrace();\n-        }\n-\n-        if (setPayloadMethod == null) {\n-          try {\n-            setPayloadMethod = builderClass.getMethod(\"setPayload\", byteStringClass);\n-          } catch (NoSuchMethodException e) {\n-            e.printStackTrace();\n-          }\n-        }\n-\n+      private static Method setPayloadMethod;\n+      private static Constructor<?> constructor;\n+\n+      /**\n+       * Create a ByteString from byte array without copying (wrap), and then set it as the payload\n+       * for the builder.\n+       *\n+       * @param builder builder for HDFS DataTransferEncryptorMessage.\n+       * @param payload byte array of payload.\n+       * @throws IOException\n+       */\n+      static void wrapAndSetPayload(DataTransferEncryptorMessageProto.Builder builder, byte[] payload)\n+        throws IOException {\n+        Object byteStringObject;\n         try {\n+          // byteStringObject = new LiteralByteString(payload);\n+          byteStringObject = constructor.newInstance(payload);\n+          // builder.setPayload(byteStringObject);\n           setPayloadMethod.invoke(builder, byteStringObject);\n-        } catch (IllegalAccessException e) {\n-          e.printStackTrace();\n+        } catch (IllegalAccessException | InstantiationException e) {\n+          throw new RuntimeException(e);\n         } catch (InvocationTargetException e) {\n-          e.printStackTrace();\n+          Throwables.propagateIfPossible(e.getTargetException(), IOException.class);\n+          throw new RuntimeException(e.getTargetException());\n         }\n       }\n \n       static {\n-        builderClass = DataTransferEncryptorMessageProto.Builder.class;\n-        byteStringClass = com.google.protobuf.ByteString.class;\n+        Class<?> builderClass = DataTransferEncryptorMessageProto.Builder.class;\n+\n+        // Try the unrelocated ByteString\n+        Class<?> byteStringClass = com.google.protobuf.ByteString.class;\n         try {\n+          // See if it can load the relocated ByteString, which comes from hadoop-thirdparty.\n           byteStringClass = Class.forName(\"org.apache.hadoop.thirdparty.protobuf.ByteString\");\n+          LOG.debug(\"Found relocated ByteString class from hadoop-thirdparty.\" +\n+            \" Assuming this is Hadoop 3.3.0+.\");\n         } catch (ClassNotFoundException e) {\n-          e.printStackTrace();\n+          LOG.debug(\"Did not find relocated ByteString class from hadoop-thirdparty.\" +\n+            \" Assuming this is below Hadoop 3.3.0\", e);\n         }\n+\n+        // LiteralByteString is a package private class in protobuf. Make it accessible.\n+        Class<?> literalByteStringClass;\n         try {\n-          copyFromMethod = byteStringClass.getMethod(\"copyFrom\", byte[].class);\n+          literalByteStringClass = Class.forName(\n+            \"org.apache.hadoop.thirdparty.protobuf.LiteralByteString\");\n+          LOG.debug(\"Shaded LiteralByteString from hadoop-thirdparty is found.\");\n+        } catch (ClassNotFoundException e) {\n+          try {\n+            literalByteStringClass = Class.forName(\"com.google.protobuf.LiteralByteString\");\n+            LOG.debug(\"com.google.protobuf.LiteralByteString found.\");\n+          } catch (ClassNotFoundException ex) {\n+            throw new RuntimeException(ex);\n+          }\n+        }\n+\n+        try {\n+          constructor = literalByteStringClass.getDeclaredConstructor(byte[].class);\n+          constructor.setAccessible(true);\n         } catch (NoSuchMethodException e) {\n-          e.printStackTrace();\n+          throw new RuntimeException(e);\n+        }\n+\n+        try {\n+          setPayloadMethod = builderClass.getMethod(\"setPayload\", byteStringClass);\n+        } catch (NoSuchMethodException e) {\n+          // if either method is not found, we are in big trouble. Abort.\n+          throw new RuntimeException(e);\n         }\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NzcxOQ==", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394797719", "bodyText": "This is printed out once on class loading? We can prettify later.", "author": "saintstack", "createdAt": "2020-03-19T05:26:44Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "diffHunk": "@@ -355,6 +353,55 @@ private void sendSaslMessage(ChannelHandlerContext ctx, byte[] payload) throws I\n       return Collections.singletonList(new CipherOption(CipherSuite.AES_CTR_NOPADDING));\n     }\n \n+    private static class BuilderPayloadSetter {\n+      private static Class<?> byteStringClass;\n+      private static Class<?> builderClass;\n+      private static Method copyFromMethod;\n+      private static Method setPayloadMethod = null;\n+\n+      static void setter(DataTransferEncryptorMessageProto.Builder builder, byte[] payload) {\n+        Object byteStringObject = null;\n+        try {\n+          byteStringObject = copyFromMethod.invoke(null, payload);\n+        } catch (IllegalAccessException e) {\n+          e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+          e.printStackTrace();\n+        }\n+\n+        if (setPayloadMethod == null) {\n+          try {\n+            setPayloadMethod = builderClass.getMethod(\"setPayload\", byteStringClass);\n+          } catch (NoSuchMethodException e) {\n+            e.printStackTrace();\n+          }\n+        }\n+\n+        try {\n+          setPayloadMethod.invoke(builder, byteStringObject);\n+        } catch (IllegalAccessException e) {\n+          e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+          e.printStackTrace();\n+        }\n+      }\n+\n+      static {\n+        builderClass = DataTransferEncryptorMessageProto.Builder.class;\n+        byteStringClass = com.google.protobuf.ByteString.class;\n+        try {\n+          byteStringClass = Class.forName(\"org.apache.hadoop.thirdparty.protobuf.ByteString\");\n+        } catch (ClassNotFoundException e) {\n+          e.printStackTrace();", "originalCommit": "71f02d5cb7156c91753c7ac1352028a38aa2d74e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MTczMA==", "url": "https://github.com/apache/hbase/pull/1301#discussion_r395391730", "bodyText": "Done.", "author": "jojochuang", "createdAt": "2020-03-20T00:33:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NzcxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "65eec63ec4f8f480bafed7fd7910baa440e24aa0", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java\nindex d5e4b97bbe..e0f1fa2ed8 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java\n\n@@ -353,51 +354,81 @@ public final class FanOutOneBlockAsyncDFSOutputSaslHelper {\n       return Collections.singletonList(new CipherOption(CipherSuite.AES_CTR_NOPADDING));\n     }\n \n+    /**\n+     * The asyncfs subsystem emulates a HDFS client by sending protobuf messages via netty.\n+     * After Hadoop 3.3.0, the protobuf classes are relocated to org.apache.hadoop.thirdparty.protobuf.*.\n+     * Use Reflection to check which ones to use.\n+     */\n     private static class BuilderPayloadSetter {\n-      private static Class<?> byteStringClass;\n-      private static Class<?> builderClass;\n-      private static Method copyFromMethod;\n-      private static Method setPayloadMethod = null;\n-\n-      static void setter(DataTransferEncryptorMessageProto.Builder builder, byte[] payload) {\n-        Object byteStringObject = null;\n-        try {\n-          byteStringObject = copyFromMethod.invoke(null, payload);\n-        } catch (IllegalAccessException e) {\n-          e.printStackTrace();\n-        } catch (InvocationTargetException e) {\n-          e.printStackTrace();\n-        }\n-\n-        if (setPayloadMethod == null) {\n-          try {\n-            setPayloadMethod = builderClass.getMethod(\"setPayload\", byteStringClass);\n-          } catch (NoSuchMethodException e) {\n-            e.printStackTrace();\n-          }\n-        }\n-\n+      private static Method setPayloadMethod;\n+      private static Constructor<?> constructor;\n+\n+      /**\n+       * Create a ByteString from byte array without copying (wrap), and then set it as the payload\n+       * for the builder.\n+       *\n+       * @param builder builder for HDFS DataTransferEncryptorMessage.\n+       * @param payload byte array of payload.\n+       * @throws IOException\n+       */\n+      static void wrapAndSetPayload(DataTransferEncryptorMessageProto.Builder builder, byte[] payload)\n+        throws IOException {\n+        Object byteStringObject;\n         try {\n+          // byteStringObject = new LiteralByteString(payload);\n+          byteStringObject = constructor.newInstance(payload);\n+          // builder.setPayload(byteStringObject);\n           setPayloadMethod.invoke(builder, byteStringObject);\n-        } catch (IllegalAccessException e) {\n-          e.printStackTrace();\n+        } catch (IllegalAccessException | InstantiationException e) {\n+          throw new RuntimeException(e);\n         } catch (InvocationTargetException e) {\n-          e.printStackTrace();\n+          Throwables.propagateIfPossible(e.getTargetException(), IOException.class);\n+          throw new RuntimeException(e.getTargetException());\n         }\n       }\n \n       static {\n-        builderClass = DataTransferEncryptorMessageProto.Builder.class;\n-        byteStringClass = com.google.protobuf.ByteString.class;\n+        Class<?> builderClass = DataTransferEncryptorMessageProto.Builder.class;\n+\n+        // Try the unrelocated ByteString\n+        Class<?> byteStringClass = com.google.protobuf.ByteString.class;\n         try {\n+          // See if it can load the relocated ByteString, which comes from hadoop-thirdparty.\n           byteStringClass = Class.forName(\"org.apache.hadoop.thirdparty.protobuf.ByteString\");\n+          LOG.debug(\"Found relocated ByteString class from hadoop-thirdparty.\" +\n+            \" Assuming this is Hadoop 3.3.0+.\");\n         } catch (ClassNotFoundException e) {\n-          e.printStackTrace();\n+          LOG.debug(\"Did not find relocated ByteString class from hadoop-thirdparty.\" +\n+            \" Assuming this is below Hadoop 3.3.0\", e);\n         }\n+\n+        // LiteralByteString is a package private class in protobuf. Make it accessible.\n+        Class<?> literalByteStringClass;\n         try {\n-          copyFromMethod = byteStringClass.getMethod(\"copyFrom\", byte[].class);\n+          literalByteStringClass = Class.forName(\n+            \"org.apache.hadoop.thirdparty.protobuf.LiteralByteString\");\n+          LOG.debug(\"Shaded LiteralByteString from hadoop-thirdparty is found.\");\n+        } catch (ClassNotFoundException e) {\n+          try {\n+            literalByteStringClass = Class.forName(\"com.google.protobuf.LiteralByteString\");\n+            LOG.debug(\"com.google.protobuf.LiteralByteString found.\");\n+          } catch (ClassNotFoundException ex) {\n+            throw new RuntimeException(ex);\n+          }\n+        }\n+\n+        try {\n+          constructor = literalByteStringClass.getDeclaredConstructor(byte[].class);\n+          constructor.setAccessible(true);\n         } catch (NoSuchMethodException e) {\n-          e.printStackTrace();\n+          throw new RuntimeException(e);\n+        }\n+\n+        try {\n+          setPayloadMethod = builderClass.getMethod(\"setPayload\", byteStringClass);\n+        } catch (NoSuchMethodException e) {\n+          // if either method is not found, we are in big trouble. Abort.\n+          throw new RuntimeException(e);\n         }\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5ODE5NQ==", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394798195", "bodyText": "This a byte array copy? If we wanted to wrap w/o copy, could we do that?", "author": "saintstack", "createdAt": "2020-03-19T05:28:47Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "diffHunk": "@@ -355,6 +353,55 @@ private void sendSaslMessage(ChannelHandlerContext ctx, byte[] payload) throws I\n       return Collections.singletonList(new CipherOption(CipherSuite.AES_CTR_NOPADDING));\n     }\n \n+    private static class BuilderPayloadSetter {\n+      private static Class<?> byteStringClass;\n+      private static Class<?> builderClass;\n+      private static Method copyFromMethod;\n+      private static Method setPayloadMethod = null;\n+\n+      static void setter(DataTransferEncryptorMessageProto.Builder builder, byte[] payload) {\n+        Object byteStringObject = null;\n+        try {\n+          byteStringObject = copyFromMethod.invoke(null, payload);", "originalCommit": "71f02d5cb7156c91753c7ac1352028a38aa2d74e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MzQwOA==", "url": "https://github.com/apache/hbase/pull/1301#discussion_r395393408", "bodyText": "yeah i think that's possible. In fact, that was the case prior to HBASE-17908. Here the code simply do what was there after HBASE-17908. I can certain try do the zero copy thing too.", "author": "jojochuang", "createdAt": "2020-03-20T00:41:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5ODE5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "65eec63ec4f8f480bafed7fd7910baa440e24aa0", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java\nindex d5e4b97bbe..e0f1fa2ed8 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java\n\n@@ -353,51 +354,81 @@ public final class FanOutOneBlockAsyncDFSOutputSaslHelper {\n       return Collections.singletonList(new CipherOption(CipherSuite.AES_CTR_NOPADDING));\n     }\n \n+    /**\n+     * The asyncfs subsystem emulates a HDFS client by sending protobuf messages via netty.\n+     * After Hadoop 3.3.0, the protobuf classes are relocated to org.apache.hadoop.thirdparty.protobuf.*.\n+     * Use Reflection to check which ones to use.\n+     */\n     private static class BuilderPayloadSetter {\n-      private static Class<?> byteStringClass;\n-      private static Class<?> builderClass;\n-      private static Method copyFromMethod;\n-      private static Method setPayloadMethod = null;\n-\n-      static void setter(DataTransferEncryptorMessageProto.Builder builder, byte[] payload) {\n-        Object byteStringObject = null;\n-        try {\n-          byteStringObject = copyFromMethod.invoke(null, payload);\n-        } catch (IllegalAccessException e) {\n-          e.printStackTrace();\n-        } catch (InvocationTargetException e) {\n-          e.printStackTrace();\n-        }\n-\n-        if (setPayloadMethod == null) {\n-          try {\n-            setPayloadMethod = builderClass.getMethod(\"setPayload\", byteStringClass);\n-          } catch (NoSuchMethodException e) {\n-            e.printStackTrace();\n-          }\n-        }\n-\n+      private static Method setPayloadMethod;\n+      private static Constructor<?> constructor;\n+\n+      /**\n+       * Create a ByteString from byte array without copying (wrap), and then set it as the payload\n+       * for the builder.\n+       *\n+       * @param builder builder for HDFS DataTransferEncryptorMessage.\n+       * @param payload byte array of payload.\n+       * @throws IOException\n+       */\n+      static void wrapAndSetPayload(DataTransferEncryptorMessageProto.Builder builder, byte[] payload)\n+        throws IOException {\n+        Object byteStringObject;\n         try {\n+          // byteStringObject = new LiteralByteString(payload);\n+          byteStringObject = constructor.newInstance(payload);\n+          // builder.setPayload(byteStringObject);\n           setPayloadMethod.invoke(builder, byteStringObject);\n-        } catch (IllegalAccessException e) {\n-          e.printStackTrace();\n+        } catch (IllegalAccessException | InstantiationException e) {\n+          throw new RuntimeException(e);\n         } catch (InvocationTargetException e) {\n-          e.printStackTrace();\n+          Throwables.propagateIfPossible(e.getTargetException(), IOException.class);\n+          throw new RuntimeException(e.getTargetException());\n         }\n       }\n \n       static {\n-        builderClass = DataTransferEncryptorMessageProto.Builder.class;\n-        byteStringClass = com.google.protobuf.ByteString.class;\n+        Class<?> builderClass = DataTransferEncryptorMessageProto.Builder.class;\n+\n+        // Try the unrelocated ByteString\n+        Class<?> byteStringClass = com.google.protobuf.ByteString.class;\n         try {\n+          // See if it can load the relocated ByteString, which comes from hadoop-thirdparty.\n           byteStringClass = Class.forName(\"org.apache.hadoop.thirdparty.protobuf.ByteString\");\n+          LOG.debug(\"Found relocated ByteString class from hadoop-thirdparty.\" +\n+            \" Assuming this is Hadoop 3.3.0+.\");\n         } catch (ClassNotFoundException e) {\n-          e.printStackTrace();\n+          LOG.debug(\"Did not find relocated ByteString class from hadoop-thirdparty.\" +\n+            \" Assuming this is below Hadoop 3.3.0\", e);\n         }\n+\n+        // LiteralByteString is a package private class in protobuf. Make it accessible.\n+        Class<?> literalByteStringClass;\n         try {\n-          copyFromMethod = byteStringClass.getMethod(\"copyFrom\", byte[].class);\n+          literalByteStringClass = Class.forName(\n+            \"org.apache.hadoop.thirdparty.protobuf.LiteralByteString\");\n+          LOG.debug(\"Shaded LiteralByteString from hadoop-thirdparty is found.\");\n+        } catch (ClassNotFoundException e) {\n+          try {\n+            literalByteStringClass = Class.forName(\"com.google.protobuf.LiteralByteString\");\n+            LOG.debug(\"com.google.protobuf.LiteralByteString found.\");\n+          } catch (ClassNotFoundException ex) {\n+            throw new RuntimeException(ex);\n+          }\n+        }\n+\n+        try {\n+          constructor = literalByteStringClass.getDeclaredConstructor(byte[].class);\n+          constructor.setAccessible(true);\n         } catch (NoSuchMethodException e) {\n-          e.printStackTrace();\n+          throw new RuntimeException(e);\n+        }\n+\n+        try {\n+          setPayloadMethod = builderClass.getMethod(\"setPayload\", byteStringClass);\n+        } catch (NoSuchMethodException e) {\n+          // if either method is not found, we are in big trouble. Abort.\n+          throw new RuntimeException(e);\n         }\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5ODM5NA==", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394798394", "bodyText": "hmm... we can't set this till setter time I suppose? Could we do it at static class loading time?", "author": "saintstack", "createdAt": "2020-03-19T05:29:40Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "diffHunk": "@@ -355,6 +353,55 @@ private void sendSaslMessage(ChannelHandlerContext ctx, byte[] payload) throws I\n       return Collections.singletonList(new CipherOption(CipherSuite.AES_CTR_NOPADDING));\n     }\n \n+    private static class BuilderPayloadSetter {\n+      private static Class<?> byteStringClass;\n+      private static Class<?> builderClass;\n+      private static Method copyFromMethod;\n+      private static Method setPayloadMethod = null;\n+\n+      static void setter(DataTransferEncryptorMessageProto.Builder builder, byte[] payload) {\n+        Object byteStringObject = null;\n+        try {\n+          byteStringObject = copyFromMethod.invoke(null, payload);\n+        } catch (IllegalAccessException e) {\n+          e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+          e.printStackTrace();\n+        }\n+\n+        if (setPayloadMethod == null) {\n+          try {\n+            setPayloadMethod = builderClass.getMethod(\"setPayload\", byteStringClass);", "originalCommit": "71f02d5cb7156c91753c7ac1352028a38aa2d74e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MjU5Mw==", "url": "https://github.com/apache/hbase/pull/1301#discussion_r395392593", "bodyText": "Moved to static loading time.", "author": "jojochuang", "createdAt": "2020-03-20T00:37:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5ODM5NA=="}], "type": "inlineReview", "revised_code": {"commit": "65eec63ec4f8f480bafed7fd7910baa440e24aa0", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java\nindex d5e4b97bbe..e0f1fa2ed8 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java\n\n@@ -353,51 +354,81 @@ public final class FanOutOneBlockAsyncDFSOutputSaslHelper {\n       return Collections.singletonList(new CipherOption(CipherSuite.AES_CTR_NOPADDING));\n     }\n \n+    /**\n+     * The asyncfs subsystem emulates a HDFS client by sending protobuf messages via netty.\n+     * After Hadoop 3.3.0, the protobuf classes are relocated to org.apache.hadoop.thirdparty.protobuf.*.\n+     * Use Reflection to check which ones to use.\n+     */\n     private static class BuilderPayloadSetter {\n-      private static Class<?> byteStringClass;\n-      private static Class<?> builderClass;\n-      private static Method copyFromMethod;\n-      private static Method setPayloadMethod = null;\n-\n-      static void setter(DataTransferEncryptorMessageProto.Builder builder, byte[] payload) {\n-        Object byteStringObject = null;\n-        try {\n-          byteStringObject = copyFromMethod.invoke(null, payload);\n-        } catch (IllegalAccessException e) {\n-          e.printStackTrace();\n-        } catch (InvocationTargetException e) {\n-          e.printStackTrace();\n-        }\n-\n-        if (setPayloadMethod == null) {\n-          try {\n-            setPayloadMethod = builderClass.getMethod(\"setPayload\", byteStringClass);\n-          } catch (NoSuchMethodException e) {\n-            e.printStackTrace();\n-          }\n-        }\n-\n+      private static Method setPayloadMethod;\n+      private static Constructor<?> constructor;\n+\n+      /**\n+       * Create a ByteString from byte array without copying (wrap), and then set it as the payload\n+       * for the builder.\n+       *\n+       * @param builder builder for HDFS DataTransferEncryptorMessage.\n+       * @param payload byte array of payload.\n+       * @throws IOException\n+       */\n+      static void wrapAndSetPayload(DataTransferEncryptorMessageProto.Builder builder, byte[] payload)\n+        throws IOException {\n+        Object byteStringObject;\n         try {\n+          // byteStringObject = new LiteralByteString(payload);\n+          byteStringObject = constructor.newInstance(payload);\n+          // builder.setPayload(byteStringObject);\n           setPayloadMethod.invoke(builder, byteStringObject);\n-        } catch (IllegalAccessException e) {\n-          e.printStackTrace();\n+        } catch (IllegalAccessException | InstantiationException e) {\n+          throw new RuntimeException(e);\n         } catch (InvocationTargetException e) {\n-          e.printStackTrace();\n+          Throwables.propagateIfPossible(e.getTargetException(), IOException.class);\n+          throw new RuntimeException(e.getTargetException());\n         }\n       }\n \n       static {\n-        builderClass = DataTransferEncryptorMessageProto.Builder.class;\n-        byteStringClass = com.google.protobuf.ByteString.class;\n+        Class<?> builderClass = DataTransferEncryptorMessageProto.Builder.class;\n+\n+        // Try the unrelocated ByteString\n+        Class<?> byteStringClass = com.google.protobuf.ByteString.class;\n         try {\n+          // See if it can load the relocated ByteString, which comes from hadoop-thirdparty.\n           byteStringClass = Class.forName(\"org.apache.hadoop.thirdparty.protobuf.ByteString\");\n+          LOG.debug(\"Found relocated ByteString class from hadoop-thirdparty.\" +\n+            \" Assuming this is Hadoop 3.3.0+.\");\n         } catch (ClassNotFoundException e) {\n-          e.printStackTrace();\n+          LOG.debug(\"Did not find relocated ByteString class from hadoop-thirdparty.\" +\n+            \" Assuming this is below Hadoop 3.3.0\", e);\n         }\n+\n+        // LiteralByteString is a package private class in protobuf. Make it accessible.\n+        Class<?> literalByteStringClass;\n         try {\n-          copyFromMethod = byteStringClass.getMethod(\"copyFrom\", byte[].class);\n+          literalByteStringClass = Class.forName(\n+            \"org.apache.hadoop.thirdparty.protobuf.LiteralByteString\");\n+          LOG.debug(\"Shaded LiteralByteString from hadoop-thirdparty is found.\");\n+        } catch (ClassNotFoundException e) {\n+          try {\n+            literalByteStringClass = Class.forName(\"com.google.protobuf.LiteralByteString\");\n+            LOG.debug(\"com.google.protobuf.LiteralByteString found.\");\n+          } catch (ClassNotFoundException ex) {\n+            throw new RuntimeException(ex);\n+          }\n+        }\n+\n+        try {\n+          constructor = literalByteStringClass.getDeclaredConstructor(byte[].class);\n+          constructor.setAccessible(true);\n         } catch (NoSuchMethodException e) {\n-          e.printStackTrace();\n+          throw new RuntimeException(e);\n+        }\n+\n+        try {\n+          setPayloadMethod = builderClass.getMethod(\"setPayload\", byteStringClass);\n+        } catch (NoSuchMethodException e) {\n+          // if either method is not found, we are in big trouble. Abort.\n+          throw new RuntimeException(e);\n         }\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5ODQ5MQ==", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394798491", "bodyText": "license?", "author": "saintstack", "createdAt": "2020-03-19T05:30:04Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/ProtobufDecoder.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package org.apache.hadoop.hbase.io.asyncfs;", "originalCommit": "71f02d5cb7156c91753c7ac1352028a38aa2d74e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65eec63ec4f8f480bafed7fd7910baa440e24aa0", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/ProtobufDecoder.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/ProtobufDecoder.java\nindex dca6f1ba6d..98b4e6f08e 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/ProtobufDecoder.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/ProtobufDecoder.java\n\n@@ -1,3 +1,20 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package org.apache.hadoop.hbase.io.asyncfs;\n \n import org.apache.hbase.thirdparty.io.netty.buffer.ByteBuf;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5ODcyOA==", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394798728", "bodyText": "Needs comment on what this is doing.", "author": "saintstack", "createdAt": "2020-03-19T05:31:04Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/ProtobufDecoder.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package org.apache.hadoop.hbase.io.asyncfs;\n+\n+import org.apache.hbase.thirdparty.io.netty.buffer.ByteBuf;\n+import org.apache.hbase.thirdparty.io.netty.buffer.ByteBufUtil;\n+import org.apache.hbase.thirdparty.io.netty.channel.ChannelHandlerContext;\n+import org.apache.hbase.thirdparty.io.netty.handler.codec.MessageToMessageDecoder;\n+import org.apache.hbase.thirdparty.io.netty.util.internal.ObjectUtil;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+\n+/** Modified based on io.netty.handler.codec.protobuf.ProtobufDecoder */", "originalCommit": "71f02d5cb7156c91753c7ac1352028a38aa2d74e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "65eec63ec4f8f480bafed7fd7910baa440e24aa0", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/ProtobufDecoder.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/ProtobufDecoder.java\nindex dca6f1ba6d..98b4e6f08e 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/ProtobufDecoder.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/ProtobufDecoder.java\n\n@@ -1,3 +1,20 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package org.apache.hadoop.hbase.io.asyncfs;\n \n import org.apache.hbase.thirdparty.io.netty.buffer.ByteBuf;\n"}}, {"oid": "65eec63ec4f8f480bafed7fd7910baa440e24aa0", "url": "https://github.com/apache/hbase/commit/65eec63ec4f8f480bafed7fd7910baa440e24aa0", "message": "Update to improve the code:\n\n1. Added license.\n2. Added more comments.\n3. Wrap byte array instead of copy to make a ByteString.\n4. Moved all reflection instantiation to static class loading time.", "committedDate": "2020-03-20T18:24:04Z", "type": "commit"}, {"oid": "f96536d00dc8241ef8c6b0351c51cb3ca0691f70", "url": "https://github.com/apache/hbase/commit/f96536d00dc8241ef8c6b0351c51cb3ca0691f70", "message": "Use LiteralByteString to wrap byte array instead of copying it.", "committedDate": "2020-03-20T18:24:17Z", "type": "commit"}]}