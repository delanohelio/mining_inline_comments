{"pr_number": 2738, "pr_title": "HBASE-25363 Improve performance of HFileLinkCleaner by using ReadWrit\u2026", "pr_createdAt": "2020-12-05T13:50:10Z", "pr_url": "https://github.com/apache/hbase/pull/2738", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU0Njg5Mg==", "url": "https://github.com/apache/hbase/pull/2738#discussion_r537546892", "bodyText": "Usually we will put this line before the try block.", "author": "Apache9", "createdAt": "2020-12-07T14:25:44Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java", "diffHunk": "@@ -44,71 +45,79 @@\n   private static final Logger LOG = LoggerFactory.getLogger(HFileLinkCleaner.class);\n \n   private FileSystem fs = null;\n+  private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n \n   @Override\n-  public synchronized boolean isFileDeletable(FileStatus fStat) {\n-    if (this.fs == null) return false;\n-    Path filePath = fStat.getPath();\n-    // HFile Link is always deletable\n-    if (HFileLink.isHFileLink(filePath)) return true;\n+  public boolean isFileDeletable(FileStatus fStat) {\n+    try {\n+      lock.readLock().lock();", "originalCommit": "91b6bcaafde0424b1974f89f033dff2286d55279", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "14e8adbc50c0a14d0815dd8370521ddd98449ed6", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java\nindex d7eec1129b..b19e174be0 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java\n\n@@ -49,12 +49,16 @@ public class HFileLinkCleaner extends BaseHFileCleanerDelegate {\n \n   @Override\n   public boolean isFileDeletable(FileStatus fStat) {\n+    lock.readLock().lock();\n     try {\n-      lock.readLock().lock();\n-      if (this.fs == null) return false;\n+      if (this.fs == null) {\n+        return false;\n+      }\n       Path filePath = fStat.getPath();\n       // HFile Link is always deletable\n-      if (HFileLink.isHFileLink(filePath)) return true;\n+      if (HFileLink.isHFileLink(filePath)) {\n+        return true;\n+      }\n \n       // If the file is inside a link references directory, means that it is a back ref link.\n       // The back ref can be deleted only if the referenced file doesn't exists.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU0ODAxOQ==", "url": "https://github.com/apache/hbase/pull/2738#discussion_r537548019", "bodyText": "nits: add '{}' to hold the 'return false;' block to fix a checkstyle warning.", "author": "Apache9", "createdAt": "2020-12-07T14:27:10Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java", "diffHunk": "@@ -44,71 +45,79 @@\n   private static final Logger LOG = LoggerFactory.getLogger(HFileLinkCleaner.class);\n \n   private FileSystem fs = null;\n+  private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n \n   @Override\n-  public synchronized boolean isFileDeletable(FileStatus fStat) {\n-    if (this.fs == null) return false;\n-    Path filePath = fStat.getPath();\n-    // HFile Link is always deletable\n-    if (HFileLink.isHFileLink(filePath)) return true;\n+  public boolean isFileDeletable(FileStatus fStat) {\n+    try {\n+      lock.readLock().lock();\n+      if (this.fs == null) return false;", "originalCommit": "91b6bcaafde0424b1974f89f033dff2286d55279", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "14e8adbc50c0a14d0815dd8370521ddd98449ed6", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java\nindex d7eec1129b..b19e174be0 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java\n\n@@ -49,12 +49,16 @@ public class HFileLinkCleaner extends BaseHFileCleanerDelegate {\n \n   @Override\n   public boolean isFileDeletable(FileStatus fStat) {\n+    lock.readLock().lock();\n     try {\n-      lock.readLock().lock();\n-      if (this.fs == null) return false;\n+      if (this.fs == null) {\n+        return false;\n+      }\n       Path filePath = fStat.getPath();\n       // HFile Link is always deletable\n-      if (HFileLink.isHFileLink(filePath)) return true;\n+      if (HFileLink.isHFileLink(filePath)) {\n+        return true;\n+      }\n \n       // If the file is inside a link references directory, means that it is a back ref link.\n       // The back ref can be deleted only if the referenced file doesn't exists.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU0ODIwNw==", "url": "https://github.com/apache/hbase/pull/2738#discussion_r537548207", "bodyText": "Ditto.", "author": "Apache9", "createdAt": "2020-12-07T14:27:19Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java", "diffHunk": "@@ -44,71 +45,79 @@\n   private static final Logger LOG = LoggerFactory.getLogger(HFileLinkCleaner.class);\n \n   private FileSystem fs = null;\n+  private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n \n   @Override\n-  public synchronized boolean isFileDeletable(FileStatus fStat) {\n-    if (this.fs == null) return false;\n-    Path filePath = fStat.getPath();\n-    // HFile Link is always deletable\n-    if (HFileLink.isHFileLink(filePath)) return true;\n+  public boolean isFileDeletable(FileStatus fStat) {\n+    try {\n+      lock.readLock().lock();\n+      if (this.fs == null) return false;\n+      Path filePath = fStat.getPath();\n+      // HFile Link is always deletable\n+      if (HFileLink.isHFileLink(filePath)) return true;", "originalCommit": "91b6bcaafde0424b1974f89f033dff2286d55279", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "14e8adbc50c0a14d0815dd8370521ddd98449ed6", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java\nindex d7eec1129b..b19e174be0 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java\n\n@@ -49,12 +49,16 @@ public class HFileLinkCleaner extends BaseHFileCleanerDelegate {\n \n   @Override\n   public boolean isFileDeletable(FileStatus fStat) {\n+    lock.readLock().lock();\n     try {\n-      lock.readLock().lock();\n-      if (this.fs == null) return false;\n+      if (this.fs == null) {\n+        return false;\n+      }\n       Path filePath = fStat.getPath();\n       // HFile Link is always deletable\n-      if (HFileLink.isHFileLink(filePath)) return true;\n+      if (HFileLink.isHFileLink(filePath)) {\n+        return true;\n+      }\n \n       // If the file is inside a link references directory, means that it is a back ref link.\n       // The back ref can be deleted only if the referenced file doesn't exists.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU0ODU3NQ==", "url": "https://github.com/apache/hbase/pull/2738#discussion_r537548575", "bodyText": "Better move this line before the try block.", "author": "Apache9", "createdAt": "2020-12-07T14:27:48Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java", "diffHunk": "@@ -44,71 +45,79 @@\n   private static final Logger LOG = LoggerFactory.getLogger(HFileLinkCleaner.class);\n \n   private FileSystem fs = null;\n+  private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n \n   @Override\n-  public synchronized boolean isFileDeletable(FileStatus fStat) {\n-    if (this.fs == null) return false;\n-    Path filePath = fStat.getPath();\n-    // HFile Link is always deletable\n-    if (HFileLink.isHFileLink(filePath)) return true;\n+  public boolean isFileDeletable(FileStatus fStat) {\n+    try {\n+      lock.readLock().lock();\n+      if (this.fs == null) return false;\n+      Path filePath = fStat.getPath();\n+      // HFile Link is always deletable\n+      if (HFileLink.isHFileLink(filePath)) return true;\n \n-    // If the file is inside a link references directory, means that it is a back ref link.\n-    // The back ref can be deleted only if the referenced file doesn't exists.\n-    Path parentDir = filePath.getParent();\n-    if (HFileLink.isBackReferencesDir(parentDir)) {\n-      Path hfilePath = null;\n-      try {\n-        // Also check if the HFile is in the HBASE_TEMP_DIRECTORY; this is where the referenced\n-        // file gets created when cloning a snapshot.\n-        hfilePath = HFileLink.getHFileFromBackReference(\n-          new Path(CommonFSUtils.getRootDir(getConf()), HConstants.HBASE_TEMP_DIRECTORY), filePath);\n-        if (fs.exists(hfilePath)) {\n-          return false;\n-        }\n-        // check whether the HFileLink still exists in mob dir.\n-        hfilePath = HFileLink.getHFileFromBackReference(MobUtils.getMobHome(getConf()), filePath);\n-        if (fs.exists(hfilePath)) {\n+      // If the file is inside a link references directory, means that it is a back ref link.\n+      // The back ref can be deleted only if the referenced file doesn't exists.\n+      Path parentDir = filePath.getParent();\n+      if (HFileLink.isBackReferencesDir(parentDir)) {\n+        Path hfilePath = null;\n+        try {\n+          // Also check if the HFile is in the HBASE_TEMP_DIRECTORY; this is where the referenced\n+          // file gets created when cloning a snapshot.\n+          hfilePath = HFileLink.getHFileFromBackReference(new Path(CommonFSUtils.getRootDir(getConf()), HConstants.HBASE_TEMP_DIRECTORY),\n+            filePath);\n+          if (fs.exists(hfilePath)) {\n+            return false;\n+          }\n+          // check whether the HFileLink still exists in mob dir.\n+          hfilePath = HFileLink.getHFileFromBackReference(MobUtils.getMobHome(getConf()), filePath);\n+          if (fs.exists(hfilePath)) {\n+            return false;\n+          }\n+          hfilePath = HFileLink.getHFileFromBackReference(CommonFSUtils.getRootDir(getConf()), filePath);\n+          return !fs.exists(hfilePath);\n+        } catch (IOException e) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Couldn't verify if the referenced file still exists, keep it just in case: \"\n+              + hfilePath);\n+          }\n           return false;\n         }\n-        hfilePath =\n-          HFileLink.getHFileFromBackReference(CommonFSUtils.getRootDir(getConf()), filePath);\n-        return !fs.exists(hfilePath);\n+      }\n+\n+      // HFile is deletable only if has no links\n+      Path backRefDir = null;\n+      try {\n+        backRefDir = HFileLink.getBackReferencesDir(parentDir, filePath.getName());\n+        return CommonFSUtils.listStatus(fs, backRefDir) == null;\n       } catch (IOException e) {\n         if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Couldn't verify if the referenced file still exists, keep it just in case: \" +\n-            hfilePath);\n+          LOG.debug(\n+            \"Couldn't get the references, not deleting file, just in case. filePath=\" + filePath + \", backRefDir=\" + backRefDir);\n         }\n         return false;\n       }\n-    }\n-\n-    // HFile is deletable only if has no links\n-    Path backRefDir = null;\n-    try {\n-      backRefDir = HFileLink.getBackReferencesDir(parentDir, filePath.getName());\n-      return CommonFSUtils.listStatus(fs, backRefDir) == null;\n-    } catch (IOException e) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Couldn't get the references, not deleting file, just in case. filePath=\"\n-            + filePath + \", backRefDir=\" + backRefDir);\n-      }\n-      return false;\n+    } finally {\n+      lock.readLock().unlock();\n     }\n   }\n \n   @Override\n-  public synchronized void setConf(Configuration conf) {\n+  public void setConf(Configuration conf) {\n     super.setConf(conf);\n \n     // setup filesystem\n     try {\n+      lock.writeLock().lock();", "originalCommit": "91b6bcaafde0424b1974f89f033dff2286d55279", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "14e8adbc50c0a14d0815dd8370521ddd98449ed6", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java\nindex d7eec1129b..b19e174be0 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java\n\n@@ -49,12 +49,16 @@ public class HFileLinkCleaner extends BaseHFileCleanerDelegate {\n \n   @Override\n   public boolean isFileDeletable(FileStatus fStat) {\n+    lock.readLock().lock();\n     try {\n-      lock.readLock().lock();\n-      if (this.fs == null) return false;\n+      if (this.fs == null) {\n+        return false;\n+      }\n       Path filePath = fStat.getPath();\n       // HFile Link is always deletable\n-      if (HFileLink.isHFileLink(filePath)) return true;\n+      if (HFileLink.isHFileLink(filePath)) {\n+        return true;\n+      }\n \n       // If the file is inside a link references directory, means that it is a back ref link.\n       // The back ref can be deleted only if the referenced file doesn't exists.\n"}}, {"oid": "14e8adbc50c0a14d0815dd8370521ddd98449ed6", "url": "https://github.com/apache/hbase/commit/14e8adbc50c0a14d0815dd8370521ddd98449ed6", "message": "fix according to comments", "committedDate": "2020-12-08T07:01:19Z", "type": "forcePushed"}, {"oid": "e9708af7933915b70f7fc7943761b0ac257ba198", "url": "https://github.com/apache/hbase/commit/e9708af7933915b70f7fc7943761b0ac257ba198", "message": "HBASE-25363 Improve performance of HFileLinkCleaner by using ReadWriteLock instead of synchronize", "committedDate": "2020-12-08T09:21:16Z", "type": "commit"}, {"oid": "e9708af7933915b70f7fc7943761b0ac257ba198", "url": "https://github.com/apache/hbase/commit/e9708af7933915b70f7fc7943761b0ac257ba198", "message": "HBASE-25363 Improve performance of HFileLinkCleaner by using ReadWriteLock instead of synchronize", "committedDate": "2020-12-08T09:21:16Z", "type": "forcePushed"}]}