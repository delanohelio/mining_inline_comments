{"pr_number": 1719, "pr_title": "HBASE-24370 Avoid aggressive MergeRegion and GCMultipleMergedRegionsP\u2026", "pr_createdAt": "2020-05-14T23:09:08Z", "pr_url": "https://github.com/apache/hbase/pull/1719", "timeline": [{"oid": "1fbe693dd48bac04993ae3b9c80bebbe2c621b45", "url": "https://github.com/apache/hbase/commit/1fbe693dd48bac04993ae3b9c80bebbe2c621b45", "message": "HBASE-24370 Avoid aggressive MergeRegion and GCMultipleMergedRegionsProcedure", "committedDate": "2020-05-15T23:10:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0MjcxOQ==", "url": "https://github.com/apache/hbase/pull/1719#discussion_r426242719", "bodyText": "Use assertNotNull instead.", "author": "HorizonNet", "createdAt": "2020-05-17T10:11:39Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAdmin1.java", "diffHunk": "@@ -530,25 +532,42 @@ public void testMergeRegions() throws Exception {\n       List<RegionInfo> tableRegions;\n       RegionInfo regionA;\n       RegionInfo regionB;\n+      RegionInfo regionC;\n+      RegionInfo mergedChildRegion = null;\n \n       // merge with full name\n       tableRegions = ADMIN.getRegions(tableName);\n       assertEquals(3, ADMIN.getRegions(tableName).size());\n       regionA = tableRegions.get(0);\n       regionB = tableRegions.get(1);\n+      regionC = tableRegions.get(2);\n       // TODO convert this to version that is synchronous (See HBASE-16668)\n-      ADMIN.mergeRegionsAsync(regionA.getRegionName(), regionB.getRegionName(), false).get(60,\n-        TimeUnit.SECONDS);\n+      ADMIN.mergeRegionsAsync(regionA.getRegionName(), regionB.getRegionName(),\n+        false).get(60, TimeUnit.SECONDS);\n \n-      assertEquals(2, ADMIN.getRegions(tableName).size());\n-\n-      // merge with encoded name\n       tableRegions = ADMIN.getRegions(tableName);\n-      regionA = tableRegions.get(0);\n-      regionB = tableRegions.get(1);\n+\n+      assertEquals(2, tableRegions.size());\n+      for (RegionInfo ri : tableRegions) {\n+        if (regionC.compareTo(ri) != 0) {\n+          mergedChildRegion = ri;\n+          break;\n+        }\n+      }\n+\n+      assertTrue(mergedChildRegion != null);", "originalCommit": "1fbe693dd48bac04993ae3b9c80bebbe2c621b45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5762d18ab5451b11a750bf12d577efbfac70345", "chunk": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAdmin1.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAdmin1.java\nindex d420977e1a..de98270e81 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAdmin1.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAdmin1.java\n\n@@ -555,7 +556,7 @@ public class TestAdmin1 extends TestAdminBase {\n         }\n       }\n \n-      assertTrue(mergedChildRegion != null);\n+      assertNotNull(mergedChildRegion);\n       // Need to wait GC for merged child region is done.\n       HMaster services = TEST_UTIL.getHBaseCluster().getMaster();\n       CatalogJanitor cj = services.getCatalogJanitor();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0Mjc0Mg==", "url": "https://github.com/apache/hbase/pull/1719#discussion_r426242742", "bodyText": "Ditto", "author": "HorizonNet", "createdAt": "2020-05-17T10:12:02Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncRegionAdminApi2.java", "diffHunk": "@@ -161,20 +163,39 @@ public void testMergeRegions() throws Exception {\n       .getTableHRegionLocations(metaTable, tableName).get();\n     RegionInfo regionA;\n     RegionInfo regionB;\n+    RegionInfo regionC;\n+    RegionInfo mergedChildRegion = null;\n \n     // merge with full name\n     assertEquals(3, regionLocations.size());\n     regionA = regionLocations.get(0).getRegion();\n     regionB = regionLocations.get(1).getRegion();\n+    regionC = regionLocations.get(2).getRegion();\n     admin.mergeRegions(regionA.getRegionName(), regionB.getRegionName(), false).get();\n \n     regionLocations = AsyncMetaTableAccessor\n       .getTableHRegionLocations(metaTable, tableName).get();\n+\n     assertEquals(2, regionLocations.size());\n+    for (HRegionLocation rl : regionLocations) {\n+      if (regionC.compareTo(rl.getRegion()) != 0) {\n+        mergedChildRegion = rl.getRegion();\n+        break;\n+      }\n+    }\n+\n+    assertTrue(mergedChildRegion != null);", "originalCommit": "1fbe693dd48bac04993ae3b9c80bebbe2c621b45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3MTE2Ng==", "url": "https://github.com/apache/hbase/pull/1719#discussion_r426371166", "bodyText": "Thanks @HorizonNet, let me address the comments and push another update. For some reason, the second push did not trigger unittest runs.", "author": "huaxiangsun", "createdAt": "2020-05-18T05:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0Mjc0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b5762d18ab5451b11a750bf12d577efbfac70345", "chunk": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncRegionAdminApi2.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncRegionAdminApi2.java\nindex 3af3c5fe98..ef73b20850 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncRegionAdminApi2.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncRegionAdminApi2.java\n\n@@ -184,7 +185,7 @@ public class TestAsyncRegionAdminApi2 extends TestAsyncAdminBase {\n       }\n     }\n \n-    assertTrue(mergedChildRegion != null);\n+    assertNotNull(mergedChildRegion);\n     // Need to wait GC for merged child region is done.\n     HMaster services = TEST_UTIL.getHBaseCluster().getMaster();\n     CatalogJanitor cj = services.getCatalogJanitor();\n"}}, {"oid": "b5762d18ab5451b11a750bf12d577efbfac70345", "url": "https://github.com/apache/hbase/commit/b5762d18ab5451b11a750bf12d577efbfac70345", "message": "HBASE-24370 Avoid aggressive MergeRegion and GCMultipleMergedRegionsProcedure", "committedDate": "2020-05-18T05:18:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzMzU2Ng==", "url": "https://github.com/apache/hbase/pull/1719#discussion_r426833566", "bodyText": "I think you can add directly to putOfMerged as its value is only used once.", "author": "HorizonNet", "createdAt": "2020-05-18T19:01:14Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaFixer.java", "diffHunk": "@@ -308,6 +314,75 @@ public void testOverlapWithSmallMergeCount() throws Exception {\n     }\n   }\n \n+  /**\n+   * This test covers the case that one of merged parent regions is a merged child region that\n+   * has not been GCed but there is no reference files anymore. In this case, it will kick off\n+   * a GC procedure, but no merge will happen.\n+   */\n+  @Test\n+  public void testMergeWithMergedChildRegion() throws Exception {\n+    TableName tn = TableName.valueOf(this.name.getMethodName());\n+    Table t = TEST_UTIL.createMultiRegionTable(tn, HConstants.CATALOG_FAMILY);\n+    List<RegionInfo> ris = MetaTableAccessor.getTableRegions(TEST_UTIL.getConnection(), tn);\n+    assertTrue(ris.size() > 5);\n+    HMaster services = TEST_UTIL.getHBaseCluster().getMaster();\n+    CatalogJanitor cj = services.getCatalogJanitor();\n+    cj.scan();\n+    CatalogJanitor.Report report = cj.getLastReport();\n+    assertTrue(report.isEmpty());\n+    RegionInfo overlapRegion = makeOverlap(services, ris.get(1), ris.get(2));\n+    Threads.sleep(10000);\n+\n+    cj.scan();\n+    report = cj.getLastReport();\n+    assertEquals(2, report.getOverlaps().size());\n+\n+    // Mark it as a merged child region.\n+    RegionInfo fakedParentRegion = RegionInfoBuilder.newBuilder(tn).\n+      setStartKey(overlapRegion.getStartKey()).\n+      build();\n+\n+    Table meta = MetaTableAccessor.getMetaHTable(TEST_UTIL.getConnection());\n+    long time = HConstants.LATEST_TIMESTAMP;", "originalCommit": "b5762d18ab5451b11a750bf12d577efbfac70345", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg5MzA5OQ==", "url": "https://github.com/apache/hbase/pull/1719#discussion_r426893099", "bodyText": "Do not think so, here is the error.\n{code}\n[ERROR] org.apache.maven.surefire.booter.SurefireBooterForkException: ExecutionException The forked VM terminated without properly saying goodbye. VM crash or System.exit called?\n[ERROR] Command was /bin/sh -c cd /home/jenkins/jenkins-slave/workspace/Base-PreCommit-GitHub-PR_PR-1719/yetus-jdk8-hadoop3-check/src/hbase-server && /usr/lib/jvm/jdk8u232-b09/jre/bin/java -enableassertions -Dhbase.build.id=2020-05-18T05:49:26Z -Xmx2200m -Djava.security.egd=file:/dev/./urandom -Djava.net.preferIPv4Stack=true -Djava.awt.headless=true -Djdk.net.URLClassPath.disableClassPathURLCheck=true -Dorg.apache.hbase.thirdparty.io.netty.leakDetection.level=advanced -Dio.netty.eventLoopThreads=3 -jar /home/jenkins/jenkins-slave/workspace/Base-PreCommit-GitHub-PR_PR-1719/yetus-jdk8-hadoop3-check/src/hbase-server/target/surefire/surefirebooter7252273393886972447.jar /home/jenkins/jenkins-slave/workspace/Base-PreCommit-GitHub-PR_PR-1719/yetus-jdk8-hadoop3-check/src/hbase-server/target/surefire 2020-05-18T05-50-20_960-jvmRun4 surefire6893180967496752951tmp surefire_2101684540561928323544tmp\n[ERROR] Process Exit Code: 0\n[ERROR] \tat org.apache.maven.plugin.surefire.booterclient.ForkStarter.awaitResultsDone(ForkStarter.java:513)\n[ERROR] \tat org.apache.maven.plugin.surefire.booterclient.ForkStarter.runSuitesForkPerTestSet(ForkStarter.java:460)\n[ERROR] \tat org.apache.maven.plugin.surefire.booterclient.ForkStarter.run(ForkStarter.java:301)\n[ERROR] \tat org.apache.maven.plugin.surefire.booterclient.ForkStarter.run(ForkStarter.java:249)\n[ERROR] \tat org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeProvider(AbstractSurefireMojo.java:1217)\n[ERROR] \tat org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeAfterPreconditionsChecked(AbstractSurefireMojo.java:1063)\n[ERROR] \tat org.apache.maven.plugin.surefire.AbstractSurefireMojo.execute(AbstractSurefireMojo.java:889)\n[ERROR] \tat org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:137)\n[ERROR] \tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:210)\n[ERROR] \tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:156)\n[ERROR] \tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:148)\n[ERROR] \tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:117)\n[ERROR] \tat org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder$1.call(MultiThreadedBuilder.java:190)\n[ERROR] \tat org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder$1.call(MultiThreadedBuilder.java:186)\n[ERROR] \tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n[ERROR] \tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n[ERROR] \tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n[ERROR] \tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n[ERROR] \tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n[ERROR] \tat java.lang.Thread.run(Thread.java:748)\n{code}\nLet me push up a new updated patch and see if this can be reproduced.", "author": "huaxiangsun", "createdAt": "2020-05-18T21:06:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzMzU2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "51c2fc221f99052a09e73fef8f568fd4ffbbf654", "chunk": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaFixer.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaFixer.java\nindex 08505424ac..a36ef882c6 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaFixer.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaFixer.java\n\n@@ -331,7 +330,6 @@ public class TestMetaFixer {\n     CatalogJanitor.Report report = cj.getLastReport();\n     assertTrue(report.isEmpty());\n     RegionInfo overlapRegion = makeOverlap(services, ris.get(1), ris.get(2));\n-    Threads.sleep(10000);\n \n     cj.scan();\n     report = cj.getLastReport();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzNDAwMA==", "url": "https://github.com/apache/hbase/pull/1719#discussion_r426834000", "bodyText": "Can this one be set to lower value?", "author": "HorizonNet", "createdAt": "2020-05-18T19:02:11Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaFixer.java", "diffHunk": "@@ -308,6 +314,75 @@ public void testOverlapWithSmallMergeCount() throws Exception {\n     }\n   }\n \n+  /**\n+   * This test covers the case that one of merged parent regions is a merged child region that\n+   * has not been GCed but there is no reference files anymore. In this case, it will kick off\n+   * a GC procedure, but no merge will happen.\n+   */\n+  @Test\n+  public void testMergeWithMergedChildRegion() throws Exception {\n+    TableName tn = TableName.valueOf(this.name.getMethodName());\n+    Table t = TEST_UTIL.createMultiRegionTable(tn, HConstants.CATALOG_FAMILY);\n+    List<RegionInfo> ris = MetaTableAccessor.getTableRegions(TEST_UTIL.getConnection(), tn);\n+    assertTrue(ris.size() > 5);\n+    HMaster services = TEST_UTIL.getHBaseCluster().getMaster();\n+    CatalogJanitor cj = services.getCatalogJanitor();\n+    cj.scan();\n+    CatalogJanitor.Report report = cj.getLastReport();\n+    assertTrue(report.isEmpty());\n+    RegionInfo overlapRegion = makeOverlap(services, ris.get(1), ris.get(2));\n+    Threads.sleep(10000);", "originalCommit": "b5762d18ab5451b11a750bf12d577efbfac70345", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwMTg1Ng==", "url": "https://github.com/apache/hbase/pull/1719#discussion_r426901856", "bodyText": "Checked the code, it seems the sleep is not needed at all, as procedure has been waited to complete.", "author": "huaxiangsun", "createdAt": "2020-05-18T21:26:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzNDAwMA=="}], "type": "inlineReview", "revised_code": {"commit": "51c2fc221f99052a09e73fef8f568fd4ffbbf654", "chunk": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaFixer.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaFixer.java\nindex 08505424ac..a36ef882c6 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaFixer.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMetaFixer.java\n\n@@ -331,7 +330,6 @@ public class TestMetaFixer {\n     CatalogJanitor.Report report = cj.getLastReport();\n     assertTrue(report.isEmpty());\n     RegionInfo overlapRegion = makeOverlap(services, ris.get(1), ris.get(2));\n-    Threads.sleep(10000);\n \n     cj.scan();\n     report = cj.getLastReport();\n"}}, {"oid": "51c2fc221f99052a09e73fef8f568fd4ffbbf654", "url": "https://github.com/apache/hbase/commit/51c2fc221f99052a09e73fef8f568fd4ffbbf654", "message": "HBASE-24370 Avoid aggressive MergeRegion and GCMultipleMergedRegionsProcedure", "committedDate": "2020-05-18T21:36:44Z", "type": "forcePushed"}, {"oid": "c3aa0954b84a4f849ab37be31e755f3a6050ffe5", "url": "https://github.com/apache/hbase/commit/c3aa0954b84a4f849ab37be31e755f3a6050ffe5", "message": "HBASE-24370 Avoid aggressive MergeRegion and GCMultipleMergedRegionsProcedure", "committedDate": "2020-05-19T21:41:39Z", "type": "commit"}, {"oid": "c3aa0954b84a4f849ab37be31e755f3a6050ffe5", "url": "https://github.com/apache/hbase/commit/c3aa0954b84a4f849ab37be31e755f3a6050ffe5", "message": "HBASE-24370 Avoid aggressive MergeRegion and GCMultipleMergedRegionsProcedure", "committedDate": "2020-05-19T21:41:39Z", "type": "forcePushed"}]}