{"pr_number": 2501, "pr_title": "HBASE-25065 WAL archival to be done by a separate thread", "pr_createdAt": "2020-10-05T07:06:44Z", "pr_url": "https://github.com/apache/hbase/pull/2501", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNDIyOQ==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501434229", "bodyText": "Why the cast? Isn't HRegionServer a Server?", "author": "saintstack", "createdAt": "2020-10-08T03:57:53Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java", "diffHunk": "@@ -1905,8 +1906,8 @@ public boolean isOnline() {\n   private void setupWALAndReplication() throws IOException {\n     boolean isMasterNoTableOrSystemTableOnly = this instanceof HMaster &&\n         !LoadBalancer.isMasterCanHostUserRegions(conf);\n-    WALFactory factory =\n-        new WALFactory(conf, serverName.toString(), !isMasterNoTableOrSystemTableOnly);\n+    WALFactory factory = new WALFactory(conf, serverName.toString(), (Server) this,", "originalCommit": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3d1c7b165ae3691c9a121334072e0b4ab8bd21a", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java\nindex 9a4287e0e8..8232965043 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java\n\n@@ -1906,8 +1906,8 @@ public class HRegionServer extends Thread implements\n   private void setupWALAndReplication() throws IOException {\n     boolean isMasterNoTableOrSystemTableOnly = this instanceof HMaster &&\n         !LoadBalancer.isMasterCanHostUserRegions(conf);\n-    WALFactory factory = new WALFactory(conf, serverName.toString(), (Server) this,\n-        !isMasterNoTableOrSystemTableOnly);\n+    WALFactory factory =\n+        new WALFactory(conf, serverName.toString(), this, !isMasterNoTableOrSystemTableOnly);\n     if (!isMasterNoTableOrSystemTableOnly) {\n       // TODO Replication make assumptions here based on the default filesystem impl\n       Path oldLogDir = new Path(walRootDir, HConstants.HREGION_OLDLOGDIR_NAME);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNDQ0OQ==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501434449", "bodyText": "Is it a good idea adding 'Server' in here? I think been trying to keep it so this is apart from need for a 'Server'?", "author": "saintstack", "createdAt": "2020-10-08T03:58:46Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -185,6 +190,8 @@\n    */\n   protected final Configuration conf;\n \n+  protected final Server server;", "originalCommit": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3d1c7b165ae3691c9a121334072e0b4ab8bd21a", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 935b1b16a3..83dd26534d 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n\n@@ -190,7 +192,7 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n    */\n   protected final Configuration conf;\n \n-  protected final Server server;\n+  protected final Abortable abortable;\n \n   /** Listeners that are called on WAL events. */\n   protected final List<WALActionsListener> listeners = new CopyOnWriteArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNDU0MQ==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501434541", "bodyText": "s/Log/WAL/g", "author": "saintstack", "createdAt": "2020-10-08T03:59:13Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -329,6 +336,11 @@ public WalProps(Map<byte[], Long> encodedName2HighestSequenceId, long logSize) {\n \n   protected final AtomicBoolean rollRequested = new AtomicBoolean(false);\n \n+  private final ExecutorService logArchiveExecutor = Executors.newSingleThreadExecutor(\n+    new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"Log-Archiver-%d\").build());", "originalCommit": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzNjI2NQ==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501636265", "bodyText": "Done", "author": "ramkrish86", "createdAt": "2020-10-08T11:08:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNDU0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a3d1c7b165ae3691c9a121334072e0b4ab8bd21a", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 935b1b16a3..83dd26534d 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n\n@@ -337,7 +339,7 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n   protected final AtomicBoolean rollRequested = new AtomicBoolean(false);\n \n   private final ExecutorService logArchiveExecutor = Executors.newSingleThreadExecutor(\n-    new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"Log-Archiver-%d\").build());\n+    new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"WAL-Archiver-%d\").build());\n \n   private final int archiveRetries;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNDk4Mw==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501434983", "bodyText": "s/logroll/walroll/g", "author": "saintstack", "createdAt": "2020-10-08T04:00:47Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -482,6 +503,8 @@ protected SyncFuture initialValue() {\n     this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n+    archiveRetries = this.conf.getInt(\"hbase.regionserver.logroll.archive.retries\", 0);", "originalCommit": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3d1c7b165ae3691c9a121334072e0b4ab8bd21a", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 935b1b16a3..83dd26534d 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n\n@@ -503,7 +505,7 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n     this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n-    archiveRetries = this.conf.getInt(\"hbase.regionserver.logroll.archive.retries\", 0);\n+    archiveRetries = this.conf.getInt(\"hbase.regionserver.walroll.archive.retries\", 0);\n \n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNTMyOA==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501435328", "bodyText": "Why not put this inside the doShutdown?", "author": "saintstack", "createdAt": "2020-10-08T04:02:27Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -907,6 +959,9 @@ public void shutdown() throws IOException {\n     rollWriterLock.lock();\n     try {\n       doShutdown();\n+      if (logArchiveExecutor != null) {", "originalCommit": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzNjA0OA==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501636048", "bodyText": "doShutDown is abstract method. So its better we do in the Parent class.", "author": "ramkrish86", "createdAt": "2020-10-08T11:08:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNTMyOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNTcwMw==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501435703", "bodyText": "This the only reason for passing server? There is an Abortable Interface. Pass in an Abortable Interface instead (the server is an implementation of an Abortable so you could pass server).", "author": "saintstack", "createdAt": "2020-10-08T04:04:13Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -715,11 +738,39 @@ private void cleanOldLogs() throws IOException {\n         regionsBlockingThisWal.clear();\n       }\n     }\n+\n     if (logsToArchive != null) {\n-      for (Pair<Path, Long> logAndSize : logsToArchive) {\n-        this.totalLogSize.addAndGet(-logAndSize.getSecond());\n-        archiveLogFile(logAndSize.getFirst());\n-        this.walFile2Props.remove(logAndSize.getFirst());\n+      final List<Pair<Path, Long>> localLogsToArchive = logsToArchive;\n+      // make it async\n+      for (Pair<Path, Long> log : localLogsToArchive) {\n+        logArchiveExecutor.execute(() -> {\n+          archiveRetriable(log);\n+        });\n+        this.walFile2Props.remove(log.getFirst());\n+      }\n+    }\n+  }\n+\n+  protected void archiveRetriable(final Pair<Path, Long> log) {\n+    int retry = 1;\n+    while (true) {\n+      try {\n+        archiveLogFile(log.getFirst());\n+        totalLogSize.addAndGet(-log.getSecond());\n+        // successful\n+        break;\n+      } catch (Throwable e) {\n+        if (retry > archiveRetries) {\n+          LOG.error(\"Failed log archiving for the log {},\", log.getFirst(), e);\n+          if (this.server != null) {\n+            this.server.abort(\"Failed log archiving\", e);", "originalCommit": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzNjEyMw==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501636123", "bodyText": "Fixed this every where.", "author": "ramkrish86", "createdAt": "2020-10-08T11:08:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNTcwMw=="}], "type": "inlineReview", "revised_code": {"commit": "a3d1c7b165ae3691c9a121334072e0b4ab8bd21a", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 935b1b16a3..83dd26534d 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n\n@@ -744,14 +746,14 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n       // make it async\n       for (Pair<Path, Long> log : localLogsToArchive) {\n         logArchiveExecutor.execute(() -> {\n-          archiveRetriable(log);\n+          archiveRetryable(log);\n         });\n         this.walFile2Props.remove(log.getFirst());\n       }\n     }\n   }\n \n-  protected void archiveRetriable(final Pair<Path, Long> log) {\n+  protected void archiveRetryable(final Pair<Path, Long> log) {\n     int retry = 1;\n     while (true) {\n       try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNjA3Mg==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501436072", "bodyText": "Yeah, too much if it is only being used to abort. Just pass an Abortable.", "author": "saintstack", "createdAt": "2020-10-08T04:05:35Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java", "diffHunk": "@@ -86,6 +87,7 @@\n   public static final String WAL_ENABLED = \"hbase.regionserver.hlog.enabled\";\n \n   final String factoryId;\n+  final Server server;", "originalCommit": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3d1c7b165ae3691c9a121334072e0b4ab8bd21a", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java\nindex 9cf9c9ca2d..08403d7f42 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java\n\n@@ -87,7 +87,7 @@ public class WALFactory {\n   public static final String WAL_ENABLED = \"hbase.regionserver.hlog.enabled\";\n \n   final String factoryId;\n-  final Server server;\n+  final Abortable abortable;\n   private final WALProvider provider;\n   // The meta updates are written to a different wal. If this\n   // regionserver holds meta regions, then this ref will be non-null.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNjIxNw==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501436217", "bodyText": "s/Retriable/Retryable/g", "author": "saintstack", "createdAt": "2020-10-08T04:06:15Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java", "diffHunk": "@@ -122,6 +127,18 @@ public DodgyFSLog(FileSystem fs, Path root, String logDir, Configuration conf)\n       return regions;\n     }\n \n+    @Override\n+    protected void archiveLogFile(Path p) throws IOException {\n+      if (throwArchiveException) {\n+        throw new IOException(\"throw archival exception\");\n+      }\n+    }\n+\n+    @Override\n+    protected void archiveRetriable(Pair<Path, Long> localLogsToArchive) {", "originalCommit": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzNjE2Ng==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501636166", "bodyText": "Done", "author": "ramkrish86", "createdAt": "2020-10-08T11:08:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNjIxNw=="}], "type": "inlineReview", "revised_code": {"commit": "a3d1c7b165ae3691c9a121334072e0b4ab8bd21a", "chunk": "diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java\nindex b13597d90b..d0d8e458e8 100644\n--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java\n+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java\n\n@@ -135,8 +135,8 @@ public class TestFailedAppendAndSync {\n     }\n \n     @Override\n-    protected void archiveRetriable(Pair<Path, Long> localLogsToArchive) {\n-      super.archiveRetriable(localLogsToArchive);\n+    protected void archiveRetryable(Pair<Path, Long> localLogsToArchive) {\n+      super.archiveRetryable(localLogsToArchive);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2OTI0Nw==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501869247", "bodyText": "Default is no retries?\nWill the retry ever work? Will it be regular occurence?", "author": "saintstack", "createdAt": "2020-10-08T16:53:49Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -482,6 +505,8 @@ protected SyncFuture initialValue() {\n     this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n+    archiveRetries = this.conf.getInt(\"hbase.regionserver.walroll.archive.retries\", 0);", "originalCommit": "52209f4a21d71d8e28d18dfef21b2acfaeaad5fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTQyMw==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r502191423", "bodyText": "Ideally if the WAL FS is having an issue then this archive may also fail. By default we will try it (mandatory) once (so retries are 0) - then if this new config is set to a non-zero value we will try to repeat it for the configured times. Generally we are not going to configure it to a non-zero value.", "author": "ramkrish86", "createdAt": "2020-10-09T05:06:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2OTI0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY1MTk3NA==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r502651974", "bodyText": "ok", "author": "saintstack", "createdAt": "2020-10-09T20:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2OTI0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "264c2b16c9cd6392cd0bab50b8d43771f43abe6a", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 83dd26534d..b8bf669b54 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n\n@@ -505,7 +502,7 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n     this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n-    archiveRetries = this.conf.getInt(\"hbase.regionserver.walroll.archive.retries\", 0);\n+    archiveRetries = this.conf.getInt(\"hbase.regionserver.logroll.archive.retries\", 0);\n \n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MTU4OQ==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501871589", "bodyText": "nit: just name it archive ? That it retries is an internal affair.", "author": "saintstack", "createdAt": "2020-10-08T16:57:26Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -715,11 +740,39 @@ private void cleanOldLogs() throws IOException {\n         regionsBlockingThisWal.clear();\n       }\n     }\n+\n     if (logsToArchive != null) {\n-      for (Pair<Path, Long> logAndSize : logsToArchive) {\n-        this.totalLogSize.addAndGet(-logAndSize.getSecond());\n-        archiveLogFile(logAndSize.getFirst());\n-        this.walFile2Props.remove(logAndSize.getFirst());\n+      final List<Pair<Path, Long>> localLogsToArchive = logsToArchive;\n+      // make it async\n+      for (Pair<Path, Long> log : localLogsToArchive) {\n+        logArchiveExecutor.execute(() -> {\n+          archiveRetryable(log);\n+        });\n+        this.walFile2Props.remove(log.getFirst());\n+      }\n+    }\n+  }\n+\n+  protected void archiveRetryable(final Pair<Path, Long> log) {", "originalCommit": "52209f4a21d71d8e28d18dfef21b2acfaeaad5fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "264c2b16c9cd6392cd0bab50b8d43771f43abe6a", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\nindex 83dd26534d..b8bf669b54 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java\n\n@@ -746,14 +743,14 @@ public abstract class AbstractFSWAL<W extends WriterBase> implements WAL {\n       // make it async\n       for (Pair<Path, Long> log : localLogsToArchive) {\n         logArchiveExecutor.execute(() -> {\n-          archiveRetryable(log);\n+          archiveRetriable(log);\n         });\n         this.walFile2Props.remove(log.getFirst());\n       }\n     }\n   }\n \n-  protected void archiveRetryable(final Pair<Path, Long> log) {\n+  protected void archiveRetriable(final Pair<Path, Long> log) {\n     int retry = 1;\n     while (true) {\n       try {\n"}}, {"oid": "264c2b16c9cd6392cd0bab50b8d43771f43abe6a", "url": "https://github.com/apache/hbase/commit/264c2b16c9cd6392cd0bab50b8d43771f43abe6a", "message": "HBASE-25065 WAL archival can be batched/throttled and also done by a separate thread", "committedDate": "2020-10-11T04:55:15Z", "type": "commit"}, {"oid": "081b02b43fa2fcacfb2595d79d7d8f4bbb356542", "url": "https://github.com/apache/hbase/commit/081b02b43fa2fcacfb2595d79d7d8f4bbb356542", "message": "Fix checkstyle issues", "committedDate": "2020-10-11T04:55:15Z", "type": "commit"}, {"oid": "a3d1c7b165ae3691c9a121334072e0b4ab8bd21a", "url": "https://github.com/apache/hbase/commit/a3d1c7b165ae3691c9a121334072e0b4ab8bd21a", "message": "Address review comments", "committedDate": "2020-10-11T05:13:01Z", "type": "commit"}, {"oid": "ab4abb454414822623119bb5bf5f599c5a72d859", "url": "https://github.com/apache/hbase/commit/ab4abb454414822623119bb5bf5f599c5a72d859", "message": "checkstyle comments", "committedDate": "2020-10-11T05:13:01Z", "type": "commit"}, {"oid": "2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95", "url": "https://github.com/apache/hbase/commit/2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95", "message": "Addressing final review comments", "committedDate": "2020-10-11T05:13:01Z", "type": "commit"}, {"oid": "2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95", "url": "https://github.com/apache/hbase/commit/2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95", "message": "Addressing final review comments", "committedDate": "2020-10-11T05:13:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxMzQ5Ng==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r503513496", "bodyText": "nit: why all the extra whitespace?", "author": "ndimiduk", "createdAt": "2020-10-12T20:20:04Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -84,8 +87,12 @@\n import org.apache.yetus.audience.InterfaceAudience;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import org.apache.hbase.thirdparty.com.google.common.annotations.VisibleForTesting;\n+import org.apache.hbase.thirdparty.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+", "originalCommit": "2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxMzc4Mw==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r503513783", "bodyText": "Introducing a new configuration is a hint that this is too \"big/complex\" to add on a patch release.", "author": "ndimiduk", "createdAt": "2020-10-12T20:20:45Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -482,6 +505,8 @@ protected SyncFuture initialValue() {\n     this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n+    archiveRetries = this.conf.getInt(\"hbase.regionserver.walroll.archive.retries\", 0);", "originalCommit": "2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxNTk0OQ==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r503515949", "bodyText": "No backoff of any kind in the retry mechanism?", "author": "ndimiduk", "createdAt": "2020-10-12T20:26:18Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -715,11 +740,39 @@ private void cleanOldLogs() throws IOException {\n         regionsBlockingThisWal.clear();\n       }\n     }\n+\n     if (logsToArchive != null) {\n-      for (Pair<Path, Long> logAndSize : logsToArchive) {\n-        this.totalLogSize.addAndGet(-logAndSize.getSecond());\n-        archiveLogFile(logAndSize.getFirst());\n-        this.walFile2Props.remove(logAndSize.getFirst());\n+      final List<Pair<Path, Long>> localLogsToArchive = logsToArchive;\n+      // make it async\n+      for (Pair<Path, Long> log : localLogsToArchive) {\n+        logArchiveExecutor.execute(() -> {\n+          archive(log);\n+        });\n+        this.walFile2Props.remove(log.getFirst());\n+      }\n+    }\n+  }\n+\n+  protected void archive(final Pair<Path, Long> log) {\n+    int retry = 1;\n+    while (true) {", "originalCommit": "2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxNjQ0NQ==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r503516445", "bodyText": "This will be a flaky test. Please use the waitFor pattern already provided on the testing utility class.", "author": "ndimiduk", "createdAt": "2020-10-12T20:27:27Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/AbstractTestLogRolling.java", "diffHunk": "@@ -175,10 +175,15 @@ public void testLogRollOnNothingWritten() throws Exception {\n     }\n   }\n \n-  private void assertLogFileSize(WAL log) {\n+  private void assertLogFileSize(WAL log) throws InterruptedException {\n     if (AbstractFSWALProvider.getNumRolledLogFiles(log) > 0) {\n       assertTrue(AbstractFSWALProvider.getLogFileSize(log) > 0);\n     } else {\n+      for (int i = 0; i < 10; i++) {", "originalCommit": "2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxNzUyNw==", "url": "https://github.com/apache/hbase/pull/2501#discussion_r503517527", "bodyText": "This will be a flaky test. Please use the waitFor pattern already provided on the testing utility class.", "author": "ndimiduk", "createdAt": "2020-10-12T20:30:05Z", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java", "diffHunk": "@@ -256,6 +273,27 @@ public void testLockupAroundBadAssignSync() throws IOException {\n           Threads.sleep(1);\n         }\n       }\n+\n+      try {\n+        dodgyWAL.throwAppendException = false;\n+        dodgyWAL.throwSyncException = false;\n+        dodgyWAL.throwArchiveException = true;\n+        Pair<Path, Long> pair = new Pair<Path, Long>();\n+        pair.setFirst(new Path(\"/a/b/\"));\n+        pair.setSecond(100L);\n+        dodgyWAL.archive(pair);\n+      } catch (Throwable ioe) {\n+      }\n+      while (true) {\n+        try {\n+          // one more abort needs to be called\n+          Mockito.verify(services, Mockito.atLeast(2)).abort(Mockito.anyString(),\n+            (Throwable) Mockito.anyObject());\n+          break;\n+        } catch (WantedButNotInvoked t) {\n+          Threads.sleep(1);", "originalCommit": "2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}