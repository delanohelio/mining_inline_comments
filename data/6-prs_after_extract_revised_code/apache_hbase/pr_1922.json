{"pr_number": 1922, "pr_title": "HBASE-24583 Normalizer can't actually merge empty regions when neighbor is larger than average size", "pr_createdAt": "2020-06-17T23:00:01Z", "pr_url": "https://github.com/apache/hbase/pull/1922", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTkxMg==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r441971912", "bodyText": "wtb generate the hashCode at the beginning (in constructor)? instead of calculating it every time.", "author": "Reidddddd", "createdAt": "2020-06-18T05:12:06Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "diffHunk": "@@ -78,4 +82,30 @@ public void execute(Admin admin) {\n       LOG.error(\"Error during region merge: \", ex);\n     }\n   }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    MergeNormalizationPlan that = (MergeNormalizationPlan) o;\n+\n+    return new EqualsBuilder()\n+      .append(firstRegion, that.firstRegion)\n+      .append(secondRegion, that.secondRegion)\n+      .isEquals();\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return new HashCodeBuilder(17, 37)", "originalCommit": "c20ec6ab9746170132f2064612ca10bd42a2d7f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MjI2NQ==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r441972265", "bodyText": "the same below", "author": "Reidddddd", "createdAt": "2020-06-18T05:13:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5OTM3MQ==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r442299371", "bodyText": "Nice one, since we have two final RegionInfo and hopefully they are not getting mutated after plan generation, we can do this.", "author": "virajjasani", "createdAt": "2020-06-18T15:08:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg3MTc5OA==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r443871798", "bodyText": "And make the object instances that much larger? Is that really helpful? I think of this as a premature optimization, something the JIT can handle for me if it thinks so.\nIf you feel strongly about it, I suppose...", "author": "ndimiduk", "createdAt": "2020-06-22T23:05:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA1NjkyNQ==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r444056925", "bodyText": "I don't have strong opinion since I have also never done it, just that I felt what if this is beneficial but it seems it is not proper optimization. It's fine to keep it as is in that case.\n@Reidddddd what do you think? Not a major improvement right?", "author": "virajjasani", "createdAt": "2020-06-23T08:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3NzQ5NQ==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r444077495", "bodyText": "Step back, I don't think it ever needs hashCode() method, they are currently stored in ArrayList only. Why not implement it when needed.", "author": "Reidddddd", "createdAt": "2020-06-23T09:09:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI2ODQ0Nw==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r444268447", "bodyText": "So what I really wanted was equals, so that I could treat these objects as POJOs and do simple comparisons in unit tests. In java, it's a bad idea to implement a custom equals without also implementing hashCode, so I did both. Well, I generated both from IntelliJ without much thought about it.", "author": "ndimiduk", "createdAt": "2020-06-23T14:29:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMwODA4Mw==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r445308083", "bodyText": "please make sure we implement hashCode if we implement equals.\nif we're not expecting to call hashCode then why are we going through ways to optimize the call?", "author": "busbey", "createdAt": "2020-06-25T05:02:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ4MTMwMQ==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r445481301", "bodyText": "please make sure we implement hashCode if we implement equals\n\nhashCode and equals are not binding. hashCode only makes sense when object will be used as a key in Map or as en element in Set, with one rare case: hashCode is used as a part of judging equals.\n\nthen why are we going through ways to optimize the call?\n\nBecause I lacked the context. After I read the codes in trunk and got the intention of this PR, then found out it unnecessary.", "author": "Reidddddd", "createdAt": "2020-06-25T11:10:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyMzA3Ng==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r446323076", "bodyText": "From javadoc on Object#equals(Object)\n\nNote that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.\n\nAnd besides since I want to treat these objects like POJOs, it is useful to be able to use them in maps and sets.", "author": "ndimiduk", "createdAt": "2020-06-26T17:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTkxMg=="}], "type": "inlineReview", "revised_code": {"commit": "94634ad305b86dcee880be920e43a1f5fae05440", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java\nindex 30d92b02d9..17e313047d 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java\n\n@@ -66,23 +76,6 @@ public class MergeNormalizationPlan implements NormalizationPlan {\n       .toString();\n   }\n \n-  /**\n-   * {@inheritDoc}\n-   */\n-  @Override\n-  public void execute(Admin admin) {\n-    LOG.info(\"Executing merging normalization plan: \" + this);\n-    try {\n-      // Do not use force=true as corner cases can happen, non adjacent regions,\n-      // merge with a merged child region with no GC done yet, it is going to\n-      // cause all different issues.\n-      admin.mergeRegionsAsync(firstRegion.getEncodedNameAsBytes(),\n-        secondRegion.getEncodedNameAsBytes(), false);\n-    } catch (IOException ex) {\n-      LOG.error(\"Error during region merge: \", ex);\n-    }\n-  }\n-\n   @Override\n   public boolean equals(Object o) {\n     if (this == o) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NTQ2Nw==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r442295467", "bodyText": "By introducing hashCode() and equals(), comparison is no more dependant on getter methods, can we also remove getFirstRegion() and getSecondRegion()? Although they are useful, but I don't think they will be used anymore. Thought?", "author": "virajjasani", "createdAt": "2020-06-18T15:02:20Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "diffHunk": "@@ -78,4 +82,30 @@ public void execute(Admin admin) {\n       LOG.error(\"Error during region merge: \", ex);\n     }\n   }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    MergeNormalizationPlan that = (MergeNormalizationPlan) o;\n+\n+    return new EqualsBuilder()\n+      .append(firstRegion, that.firstRegion)\n+      .append(secondRegion, that.secondRegion)\n+      .isEquals();\n+  }\n+\n+  @Override\n+  public int hashCode() {", "originalCommit": "c20ec6ab9746170132f2064612ca10bd42a2d7f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMzY0Mw==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r442303643", "bodyText": "Plus, removal of getters further reduces the chances of mutation of firstRegion and secondRegion.", "author": "virajjasani", "createdAt": "2020-06-18T15:14:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NTQ2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg3MzAyNw==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r443873027", "bodyText": "Yeah, seems they're unused. As is SplitNormalizationPlan#getRegionInfo(). Seems a little strange to have a POJO without public accessors, to include these members in toString but not have accessors, but yeah, less data visibility is better data visibility.", "author": "ndimiduk", "createdAt": "2020-06-22T23:09:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NTQ2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMxOTc2NA==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r446319764", "bodyText": "Actually, I think i'd like to keep them. I'm finding they're handy for some of the experimental changes I've been trying. I'd prefer keep them for now.", "author": "ndimiduk", "createdAt": "2020-06-26T17:35:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NTQ2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "94634ad305b86dcee880be920e43a1f5fae05440", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java\nindex 30d92b02d9..17e313047d 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java\n\n@@ -66,23 +76,6 @@ public class MergeNormalizationPlan implements NormalizationPlan {\n       .toString();\n   }\n \n-  /**\n-   * {@inheritDoc}\n-   */\n-  @Override\n-  public void execute(Admin admin) {\n-    LOG.info(\"Executing merging normalization plan: \" + this);\n-    try {\n-      // Do not use force=true as corner cases can happen, non adjacent regions,\n-      // merge with a merged child region with no GC done yet, it is going to\n-      // cause all different issues.\n-      admin.mergeRegionsAsync(firstRegion.getEncodedNameAsBytes(),\n-        secondRegion.getEncodedNameAsBytes(), false);\n-    } catch (IOException ex) {\n-      LOG.error(\"Error during region merge: \", ex);\n-    }\n-  }\n-\n   @Override\n   public boolean equals(Object o) {\n     if (this == o) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMDg0Ng==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r442300846", "bodyText": "Seems like a good candidate for final and setRegionInfo() can be removed?", "author": "virajjasani", "createdAt": "2020-06-18T15:10:32Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SplitNormalizationPlan.java", "diffHunk": "@@ -33,11 +36,9 @@\n   private static final Logger LOG = LoggerFactory.getLogger(SplitNormalizationPlan.class.getName());\n \n   private RegionInfo regionInfo;", "originalCommit": "c20ec6ab9746170132f2064612ca10bd42a2d7f2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94634ad305b86dcee880be920e43a1f5fae05440", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SplitNormalizationPlan.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SplitNormalizationPlan.java\nindex 918b1d3446..7c634fbf24 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SplitNormalizationPlan.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SplitNormalizationPlan.java\n\n@@ -18,29 +18,34 @@\n  */\n package org.apache.hadoop.hbase.master.normalizer;\n \n+import java.io.IOException;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.commons.lang3.builder.ToStringBuilder;\n import org.apache.commons.lang3.builder.ToStringStyle;\n-import org.apache.hadoop.hbase.client.Admin;\n+import org.apache.hadoop.hbase.HConstants;\n import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.master.MasterServices;\n import org.apache.yetus.audience.InterfaceAudience;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n /**\n  * Normalization plan to split region.\n  */\n @InterfaceAudience.Private\n public class SplitNormalizationPlan implements NormalizationPlan {\n-  private static final Logger LOG = LoggerFactory.getLogger(SplitNormalizationPlan.class.getName());\n \n-  private RegionInfo regionInfo;\n+  private final RegionInfo regionInfo;\n \n   public SplitNormalizationPlan(RegionInfo regionInfo) {\n     this.regionInfo = regionInfo;\n   }\n \n+  @Override\n+  public long submit(MasterServices masterServices) throws IOException {\n+    return masterServices.splitRegion(regionInfo, null, HConstants.NO_NONCE,\n+      HConstants.NO_NONCE);\n+  }\n+\n   @Override\n   public PlanType getType() {\n     return PlanType.SPLIT;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r442371151", "bodyText": "There is a special case for size to be 0, wondering if the region size is very small but nonzero, and there is a large size neighbor region, can we do something about it?\n100 1 100  (avg size is 20), in this case, 1 wont be merged as well.  What if some logic like\ncurrentSizeMb < 0.1 * avgRegionSizeMb and currentSizeMb/nextSizeMb < 0.1 (switch currentSizeMb and nextSizeMb as well), then merge", "author": "huaxiangsun", "createdAt": "2020-06-18T16:57:35Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java", "diffHunk": "@@ -369,7 +369,8 @@ private boolean skipForMerge(final RegionStates regionStates, final RegionInfo r\n       }\n       final long currentSizeMb = getRegionSizeMB(current);\n       final long nextSizeMb = getRegionSizeMB(next);\n-      if (currentSizeMb + nextSizeMb < avgRegionSizeMb) {\n+      // always merge away empty regions when they present themselves.\n+      if (currentSizeMb == 0 || nextSizeMb == 0 || currentSizeMb + nextSizeMb < avgRegionSizeMb) {", "originalCommit": "c20ec6ab9746170132f2064612ca10bd42a2d7f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MjE3Mw==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r442372173", "bodyText": "0.1 is a small random number, can be 0.05.", "author": "huaxiangsun", "createdAt": "2020-06-18T16:59:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg3NjU5NQ==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r443876595", "bodyText": "I like this idea of a fuzzy threshold idea. What if we merge a little more aggressively, expressed relative to avgRegionSizeMb? Something like\nif (currentSizeMb + nextSizeMb < avgRegionSizeMb * 0.4) {...}\n\nThis gives us a strong preference toward larger regions, with a threshold based on the average size.\nI guess next you'll same \"make it configurable\" :)", "author": "ndimiduk", "createdAt": "2020-06-22T23:21:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxNTQxMA==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r444415410", "bodyText": "if (currentSizeMb + nextSizeMb < avgRegionSizeMb * 0.4) {...}\n\n\nThe above statement does not address the case that 100 1 80 (average 60), in this case 100 is not qualified for split, and none is qualified for merge as well.\nDo not mean to block your commit, and for cases like above, need to spend more time to find a right solution, we can create an improvement jira to address it.", "author": "huaxiangsun", "createdAt": "2020-06-23T18:12:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNDc1NA==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r446324754", "bodyText": "@huaxiangsun I've been thinking about this and haven't come to a formula that I like. So let me propose this: rather than basing this decision on a scaling factor, how about we decide on some arbitrary value to use as meaning \"effectively 0\" in size. Say, any region <= 10mb will be considered as \"effectively 0-sized\" and we'll merge it into it's neighbor when possible. I supposed we can make this configurable as well...\nWhat do you think?", "author": "ndimiduk", "createdAt": "2020-06-26T17:46:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NDk4Mw==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r446344983", "bodyText": "Yeah, this is a good idea!", "author": "huaxiangsun", "createdAt": "2020-06-26T18:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4NzUxOA==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r446387518", "bodyText": "Argh. This idea is in direct contradiction to the feature implemented by \"The minimum size for a region to be considered for a merge, in whole MBs.\"\n  static final String MERGE_MIN_REGION_SIZE_MB_KEY = \"hbase.normalizer.merge.min_region_size.mb\";\n  static final int DEFAULT_MERGE_MIN_REGION_SIZE_MB = 1;", "author": "ndimiduk", "createdAt": "2020-06-26T20:10:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxMzQ4Nw==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r446413487", "bodyText": "I think what we need is to unset the default values of hbase.normalizer.merge.min_region_age.days and hbase.normalizer.merge.min_region_size.mb. If someone wants the features, make them opt-in.", "author": "ndimiduk", "createdAt": "2020-06-26T21:15:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxODMxNA==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r446418314", "bodyText": "Oh, and hbase.normalizer.min.region.count as well.", "author": "ndimiduk", "createdAt": "2020-06-26T21:29:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNDI0MA==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r449304240", "bodyText": "There hasn't been much feedback on the DISCUSS thread.\nI'm of the mind that we can resolve this specific bug using the special-case (if == 0) code I have in this patch. I think we should return with another change that allows the min_* values to be unset, and probably remove the defaults for everything except min_region_age.days.", "author": "ndimiduk", "createdAt": "2020-07-02T23:11:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1OTQ0OQ==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r453759449", "bodyText": "I think this is good enough considering if region is empty it is in KB's as per my experience(i can be wrong here). One issue is if there are few rows which are yet to expire then the probability of next region to be more than avgRegionSize is also low but ofcourse possible. Silver lline is eventually we will merge it maybe in 2-3 weeks.", "author": "mnpoonia", "createdAt": "2020-07-13T16:02:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0NTE1MQ==", "url": "https://github.com/apache/hbase/pull/1922#discussion_r464645151", "bodyText": "Replying to my earlier comment,\n\nSo let me propose this: rather than basing this decision on a scaling factor, how about we decide on some arbitrary value to use as meaning \"effectively 0\" in size.\n\nPer my above, and @mnpoonia 's, we've already decided that \"effectively 0\" means \"less than 1mb according to reported metrics.\" Thus I think we should keep this \"special logic\".", "author": "ndimiduk", "createdAt": "2020-08-03T20:29:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "94634ad305b86dcee880be920e43a1f5fae05440", "url": "https://github.com/apache/hbase/commit/94634ad305b86dcee880be920e43a1f5fae05440", "message": "HBASE-24583 Normalizer can't actually merge empty regions...\n\nwhen neighbor is larger than average size\n\n* add `testMergeEmptyRegions` to explicitly cover different\n  interleaving of 0-sized regions.\n* fix bug where merging a 0-size region is skipped due to large\n  neighbor.\n* remove unused `splitPoint` from `SplitNormalizationPlan`.\n* generate `toString`, `hashCode`, and `equals` methods from Apache\n  Commons Lang3 template on `SplitNormalizationPlan` and\n  `MergeNormalizationPlan`.\n* simplify test to use equality matching over `*NormalizationPlan`\n  instances as plain pojos.\n* test make use of this handy `TableNameTestRule`.\n* fix line-length issues in `TestSimpleRegionNormalizer`", "committedDate": "2020-08-03T21:14:41Z", "type": "forcePushed"}, {"oid": "e121c6d070d5977b69811d87920c620ad834bfca", "url": "https://github.com/apache/hbase/commit/e121c6d070d5977b69811d87920c620ad834bfca", "message": "HBASE-24583 Normalizer can't actually merge empty regions...\n\nwhen neighbor is larger than average size\n\n* add `testMergeEmptyRegions` to explicitly cover different\n  interleaving of 0-sized regions.\n* fix bug where merging a 0-size region is skipped due to large\n  neighbor.\n* remove unused `splitPoint` from `SplitNormalizationPlan`.\n* generate `toString`, `hashCode`, and `equals` methods from Apache\n  Commons Lang3 template on `SplitNormalizationPlan` and\n  `MergeNormalizationPlan`.\n* simplify test to use equality matching over `*NormalizationPlan`\n  instances as plain pojos.\n* test make use of this handy `TableNameTestRule`.\n* fix line-length issues in `TestSimpleRegionNormalizer`", "committedDate": "2020-08-10T17:50:47Z", "type": "forcePushed"}, {"oid": "00642c7471e00fca24e4110d4a822ab997c4939b", "url": "https://github.com/apache/hbase/commit/00642c7471e00fca24e4110d4a822ab997c4939b", "message": "HBASE-24583 Normalizer can't actually merge empty regions...\n\nwhen neighbor is larger than average size\n\n* add `testMergeEmptyRegions` to explicitly cover different\n  interleaving of 0-sized regions.\n* fix bug where merging a 0-size region is skipped due to large\n  neighbor.\n* remove unused `splitPoint` from `SplitNormalizationPlan`.\n* generate `toString`, `hashCode`, and `equals` methods from Apache\n  Commons Lang3 template on `SplitNormalizationPlan` and\n  `MergeNormalizationPlan`.\n* simplify test to use equality matching over `*NormalizationPlan`\n  instances as plain pojos.\n* test make use of this handy `TableNameTestRule`.\n* fix line-length issues in `TestSimpleRegionNormalizer`\n\nSigned-off-by: Wellington Chevreuil <wchevreuil@apache.org>\nSigned-off-by: Viraj Jasani <vjasani@apache.org>\nSigned-off-by: huaxiangsun <huaxiangsun@apache.org>", "committedDate": "2020-08-10T17:51:46Z", "type": "forcePushed"}, {"oid": "3191b69c0b7223ff1c5999707ab5444fdbc3047e", "url": "https://github.com/apache/hbase/commit/3191b69c0b7223ff1c5999707ab5444fdbc3047e", "message": "HBASE-24583 Normalizer can't actually merge empty regions...\n\nwhen neighbor is larger than average size\n\n* add `testMergeEmptyRegions` to explicitly cover different\n  interleaving of 0-sized regions.\n* fix bug where merging a 0-size region is skipped due to large\n  neighbor.\n* remove unused `splitPoint` from `SplitNormalizationPlan`.\n* generate `toString`, `hashCode`, and `equals` methods from Apache\n  Commons Lang3 template on `SplitNormalizationPlan` and\n  `MergeNormalizationPlan`.\n* simplify test to use equality matching over `*NormalizationPlan`\n  instances as plain pojos.\n* test make use of this handy `TableNameTestRule`.\n* fix line-length issues in `TestSimpleRegionNormalizer`\n\nSigned-off-by: Wellington Chevreuil <wchevreuil@apache.org>\nSigned-off-by: Viraj Jasani <vjasani@apache.org>\nSigned-off-by: huaxiangsun <huaxiangsun@apache.org>\nSigned-off-by: Aman Poonia <aman.poonia.29@gmail.com>", "committedDate": "2020-08-12T17:00:01Z", "type": "commit"}, {"oid": "3191b69c0b7223ff1c5999707ab5444fdbc3047e", "url": "https://github.com/apache/hbase/commit/3191b69c0b7223ff1c5999707ab5444fdbc3047e", "message": "HBASE-24583 Normalizer can't actually merge empty regions...\n\nwhen neighbor is larger than average size\n\n* add `testMergeEmptyRegions` to explicitly cover different\n  interleaving of 0-sized regions.\n* fix bug where merging a 0-size region is skipped due to large\n  neighbor.\n* remove unused `splitPoint` from `SplitNormalizationPlan`.\n* generate `toString`, `hashCode`, and `equals` methods from Apache\n  Commons Lang3 template on `SplitNormalizationPlan` and\n  `MergeNormalizationPlan`.\n* simplify test to use equality matching over `*NormalizationPlan`\n  instances as plain pojos.\n* test make use of this handy `TableNameTestRule`.\n* fix line-length issues in `TestSimpleRegionNormalizer`\n\nSigned-off-by: Wellington Chevreuil <wchevreuil@apache.org>\nSigned-off-by: Viraj Jasani <vjasani@apache.org>\nSigned-off-by: huaxiangsun <huaxiangsun@apache.org>\nSigned-off-by: Aman Poonia <aman.poonia.29@gmail.com>", "committedDate": "2020-08-12T17:00:01Z", "type": "forcePushed"}]}