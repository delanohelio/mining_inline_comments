{"pr_number": 1701, "pr_title": "HBASE-24361 Make `RESTApiClusterManager` more resilient", "pr_createdAt": "2020-05-12T23:58:19Z", "pr_url": "https://github.com/apache/hbase/pull/1701", "timeline": [{"oid": "bf8b26e4c6b6423fbc980169bb81a196a512ee1a", "url": "https://github.com/apache/hbase/commit/bf8b26e4c6b6423fbc980169bb81a196a512ee1a", "message": "HBASE-24361 Make `RESTApiClusterManager` more resilient\n\n* sometimes API calls return with null/empty response bodies. thus,\n  wrap all API calls in a retry loop.\n* calls that submit work in the form of \"commands\" now retrieve the\n  commandId from successful command submission, and track completion\n  of that command before returning control to calling context.\n* model CM's process state and use that model to guide state\n  transitions more intelligently. this guards against, for example,\n  the start command failing with an error message like \"Role must be\n  stopped\".\n* improvements to logging levels, avoid spamming logs with the\n  side-effects of retries at this and higher contexts.\n* include references to API documentation, such as it is.", "committedDate": "2020-05-12T23:54:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMDk0Nw==", "url": "https://github.com/apache/hbase/pull/1701#discussion_r424100947", "bodyText": "Good", "author": "saintstack", "createdAt": "2020-05-13T00:03:16Z", "path": "hbase-it/src/test/java/org/apache/hadoop/hbase/RESTApiClusterManager.java", "diffHunk": "@@ -124,38 +142,111 @@ public void setConf(Configuration conf) {\n     String serverUsername = conf.get(REST_API_CLUSTER_MANAGER_USERNAME, DEFAULT_SERVER_USERNAME);\n     String serverPassword = conf.get(REST_API_CLUSTER_MANAGER_PASSWORD, DEFAULT_SERVER_PASSWORD);\n     client.register(HttpAuthenticationFeature.basic(serverUsername, serverPassword));\n+\n+    this.retryCounterFactory = new RetryCounterFactory(new RetryConfig()\n+      .setMaxAttempts(conf.getInt(RETRY_ATTEMPTS_KEY, DEFAULT_RETRY_ATTEMPTS))\n+      .setSleepInterval(conf.getLong(RETRY_SLEEP_INTERVAL_KEY, DEFAULT_RETRY_SLEEP_INTERVAL)));\n   }\n \n   @Override\n-  public void start(ServiceType service, String hostname, int port) throws IOException {\n-    performClusterManagerCommand(service, hostname, RoleCommand.START);\n+  public void start(ServiceType service, String hostname, int port) {\n+    // With Cloudera Manager (6.3.x), sending a START command to a service role\n+    // that is already in the \"Started\" state is an error. CM will log a message\n+    // saying \"Role must be stopped\". It will complain similarly for other\n+    // expected state transitions.\n+    // A role process that has been `kill -9`'ed ends up with the service role\n+    // retaining the \"Started\" state but with the process marked as \"unhealthy\".\n+    // Instead of blindly issuing the START command, first send a STOP command\n+    // to ensure the START will be accepted.\n+    LOG.debug(\"Performing start of {} on {}:{}\", service, hostname, port);", "originalCommit": "bf8b26e4c6b6423fbc980169bb81a196a512ee1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMTAzMA==", "url": "https://github.com/apache/hbase/pull/1701#discussion_r424101030", "bodyText": "Man", "author": "saintstack", "createdAt": "2020-05-13T00:03:35Z", "path": "hbase-it/src/test/java/org/apache/hadoop/hbase/RESTApiClusterManager.java", "diffHunk": "@@ -124,38 +142,111 @@ public void setConf(Configuration conf) {\n     String serverUsername = conf.get(REST_API_CLUSTER_MANAGER_USERNAME, DEFAULT_SERVER_USERNAME);\n     String serverPassword = conf.get(REST_API_CLUSTER_MANAGER_PASSWORD, DEFAULT_SERVER_PASSWORD);\n     client.register(HttpAuthenticationFeature.basic(serverUsername, serverPassword));\n+\n+    this.retryCounterFactory = new RetryCounterFactory(new RetryConfig()\n+      .setMaxAttempts(conf.getInt(RETRY_ATTEMPTS_KEY, DEFAULT_RETRY_ATTEMPTS))\n+      .setSleepInterval(conf.getLong(RETRY_SLEEP_INTERVAL_KEY, DEFAULT_RETRY_SLEEP_INTERVAL)));\n   }\n \n   @Override\n-  public void start(ServiceType service, String hostname, int port) throws IOException {\n-    performClusterManagerCommand(service, hostname, RoleCommand.START);\n+  public void start(ServiceType service, String hostname, int port) {\n+    // With Cloudera Manager (6.3.x), sending a START command to a service role\n+    // that is already in the \"Started\" state is an error. CM will log a message\n+    // saying \"Role must be stopped\". It will complain similarly for other\n+    // expected state transitions.\n+    // A role process that has been `kill -9`'ed ends up with the service role\n+    // retaining the \"Started\" state but with the process marked as \"unhealthy\".\n+    // Instead of blindly issuing the START command, first send a STOP command\n+    // to ensure the START will be accepted.\n+    LOG.debug(\"Performing start of {} on {}:{}\", service, hostname, port);\n+    final RoleState currentState = getRoleState(service, hostname);\n+    switch (currentState) {\n+      case NA:\n+      case BUSY:\n+      case UNKNOWN:\n+      case HISTORY_NOT_AVAILABLE:\n+        LOG.warn(\"Unexpected service state detected. Service START requested, but currently in\"\n+          + \" {} state. Attempting to start. {}, {}:{}\", currentState, service, hostname, port);\n+        performClusterManagerCommand(service, hostname, RoleCommand.START);\n+        return;\n+      case STOPPING:\n+        LOG.warn(\"Unexpected service state detected. Service START requested, but currently in\"\n+          + \" {} state. Waiting for stop before attempting start. {}, {}:{}\", currentState,\n+          service, hostname, port);\n+        waitFor(() -> Objects.equals(RoleState.STOPPED, getRoleState(service, hostname)));\n+        performClusterManagerCommand(service, hostname, RoleCommand.START);\n+        return;\n+      case STOPPED:\n+        performClusterManagerCommand(service, hostname, RoleCommand.START);\n+        return;\n+      case STARTING:\n+        LOG.warn(\"Unexpected service state detected. Service START requested, but already in\"\n+          + \" {} state. Ignoring current request and waiting for start to complete. {}, {}:{}\",\n+          currentState, service, hostname, port);\n+        waitFor(()-> Objects.equals(RoleState.STARTED, getRoleState(service, hostname)));\n+        return;\n+      case STARTED:\n+        LOG.warn(\"Unexpected service state detected. Service START requested, but already in\"\n+          + \" {} state. Restarting. {}, {}:{}\", currentState, service, hostname, port);\n+        performClusterManagerCommand(service, hostname, RoleCommand.RESTART);\n+        return;\n+    }", "originalCommit": "bf8b26e4c6b6423fbc980169bb81a196a512ee1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}