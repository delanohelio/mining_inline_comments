{"pr_number": 1258, "pr_title": "HBASE-23932 Minor improvements to Region Normalizer", "pr_createdAt": "2020-03-09T21:01:20Z", "pr_url": "https://github.com/apache/hbase/pull/1258", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5OTI0Mw==", "url": "https://github.com/apache/hbase/pull/1258#discussion_r389999243", "bodyText": "Nice!", "author": "joshelser", "createdAt": "2020-03-09T22:36:24Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "diffHunk": "@@ -1722,21 +1723,36 @@ public boolean balance() throws IOException {\n     return balance(false);\n   }\n \n-  public boolean balance(boolean force) throws IOException {\n-    // if master not initialized, don't run balancer.\n+  /**\n+   * Checks master state before initiating action over region topology.\n+   * @param action the name of the action under consideration, for logging.\n+   * @return {@code true} when the caller should exit early, {@code false} otherwise.\n+   */\n+  private boolean skipRegionManagementAction(final String action) {", "originalCommit": "0f4fea1149c5d069de342d44684d73ec9991ef6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5OTgxNA==", "url": "https://github.com/apache/hbase/pull/1258#discussion_r389999814", "bodyText": "Nice -- wraps a null-check around isEmpty(). Had to look it up.", "author": "joshelser", "createdAt": "2020-03-09T22:38:05Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "diffHunk": "@@ -1868,52 +1889,50 @@ public RegionNormalizer getRegionNormalizer() {\n    *    is globally disabled)\n    */\n   public boolean normalizeRegions() throws IOException {\n-    if (!isInitialized()) {\n-      LOG.debug(\"Master has not been initialized, don't run region normalizer.\");\n-      return false;\n-    }\n-    if (this.getServerManager().isClusterShutdown()) {\n-      LOG.info(\"Cluster is shutting down, don't run region normalizer.\");\n+    if (regionNormalizerTracker == null || !regionNormalizerTracker.isNormalizerOn()) {\n+      LOG.debug(\"Region normalization is disabled, don't run region normalizer.\");\n       return false;\n     }\n-    if (isInMaintenanceMode()) {\n-      LOG.info(\"Master is in maintenance mode, don't run region normalizer.\");\n+    if (skipRegionManagementAction(\"region normalizer\")) {\n       return false;\n     }\n-    if (!this.regionNormalizerTracker.isNormalizerOn()) {\n-      LOG.debug(\"Region normalization is disabled, don't run region normalizer.\");\n+    if (assignmentManager.hasRegionsInTransition()) {\n       return false;\n     }\n \n     synchronized (this.normalizer) {\n       // Don't run the normalizer concurrently\n+\n       List<TableName> allEnabledTables = new ArrayList<>(\n         this.tableStateManager.getTablesInStates(TableState.State.ENABLED));\n \n       Collections.shuffle(allEnabledTables);\n \n       for (TableName table : allEnabledTables) {\n-        if (isInMaintenanceMode()) {\n-          LOG.debug(\"Master is in maintenance mode, stop running region normalizer.\");\n-          return false;\n-        }\n-\n         TableDescriptor tblDesc = getTableDescriptors().get(table);\n         if (table.isSystemTable() || (tblDesc != null &&\n             !tblDesc.isNormalizationEnabled())) {\n           LOG.trace(\"Skipping normalization for {}, as it's either system\"\n               + \" table or doesn't have auto normalization turned on\", table);\n           continue;\n         }\n-        List<NormalizationPlan> plans = this.normalizer.computePlanForTable(table);\n-        if (plans != null) {\n-          for (NormalizationPlan plan : plans) {\n-            plan.execute(asyncClusterConnection.toConnection().getAdmin());\n-            if (plan.getType() == PlanType.SPLIT) {\n-              splitPlanCount++;\n-            } else if (plan.getType() == PlanType.MERGE) {\n-              mergePlanCount++;\n-            }\n+\n+        // make one last check that the cluster isn't shutting down before proceeding.\n+        if (skipRegionManagementAction(\"region normalizer\")) {\n+          return false;\n+        }\n+\n+        final List<NormalizationPlan> plans = this.normalizer.computePlanForTable(table);\n+        if (CollectionUtils.isEmpty(plans)) {", "originalCommit": "0f4fea1149c5d069de342d44684d73ec9991ef6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c9feadc3026a6b5fbfa018c7c090a8ad69ab6995", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java\nindex 2c8f1b8c3f..05117da038 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java\n\n@@ -1927,12 +1928,14 @@ public class HMaster extends HRegionServer implements MasterServices {\n           return true;\n         }\n \n-        for (NormalizationPlan plan : plans) {\n-          plan.execute(asyncClusterConnection.toConnection().getAdmin());\n-          if (plan.getType() == PlanType.SPLIT) {\n-            splitPlanCount++;\n-          } else if (plan.getType() == PlanType.MERGE) {\n-            mergePlanCount++;\n+        try (final Admin admin = asyncClusterConnection.toConnection().getAdmin()) {\n+          for (NormalizationPlan plan : plans) {\n+            plan.execute(admin);\n+            if (plan.getType() == PlanType.SPLIT) {\n+              splitPlanCount++;\n+            } else if (plan.getType() == PlanType.MERGE) {\n+              mergePlanCount++;\n+            }\n           }\n         }\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwMDk4NQ==", "url": "https://github.com/apache/hbase/pull/1258#discussion_r390000985", "bodyText": "toConnection() returns a cached Connection but we make a new Admin object every time (at least via AsyncClusterConnectionImpl. Should we just cache this Admin once for all plans?", "author": "joshelser", "createdAt": "2020-03-09T22:41:38Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "diffHunk": "@@ -1868,52 +1889,50 @@ public RegionNormalizer getRegionNormalizer() {\n    *    is globally disabled)\n    */\n   public boolean normalizeRegions() throws IOException {\n-    if (!isInitialized()) {\n-      LOG.debug(\"Master has not been initialized, don't run region normalizer.\");\n-      return false;\n-    }\n-    if (this.getServerManager().isClusterShutdown()) {\n-      LOG.info(\"Cluster is shutting down, don't run region normalizer.\");\n+    if (regionNormalizerTracker == null || !regionNormalizerTracker.isNormalizerOn()) {\n+      LOG.debug(\"Region normalization is disabled, don't run region normalizer.\");\n       return false;\n     }\n-    if (isInMaintenanceMode()) {\n-      LOG.info(\"Master is in maintenance mode, don't run region normalizer.\");\n+    if (skipRegionManagementAction(\"region normalizer\")) {\n       return false;\n     }\n-    if (!this.regionNormalizerTracker.isNormalizerOn()) {\n-      LOG.debug(\"Region normalization is disabled, don't run region normalizer.\");\n+    if (assignmentManager.hasRegionsInTransition()) {\n       return false;\n     }\n \n     synchronized (this.normalizer) {\n       // Don't run the normalizer concurrently\n+\n       List<TableName> allEnabledTables = new ArrayList<>(\n         this.tableStateManager.getTablesInStates(TableState.State.ENABLED));\n \n       Collections.shuffle(allEnabledTables);\n \n       for (TableName table : allEnabledTables) {\n-        if (isInMaintenanceMode()) {\n-          LOG.debug(\"Master is in maintenance mode, stop running region normalizer.\");\n-          return false;\n-        }\n-\n         TableDescriptor tblDesc = getTableDescriptors().get(table);\n         if (table.isSystemTable() || (tblDesc != null &&\n             !tblDesc.isNormalizationEnabled())) {\n           LOG.trace(\"Skipping normalization for {}, as it's either system\"\n               + \" table or doesn't have auto normalization turned on\", table);\n           continue;\n         }\n-        List<NormalizationPlan> plans = this.normalizer.computePlanForTable(table);\n-        if (plans != null) {\n-          for (NormalizationPlan plan : plans) {\n-            plan.execute(asyncClusterConnection.toConnection().getAdmin());\n-            if (plan.getType() == PlanType.SPLIT) {\n-              splitPlanCount++;\n-            } else if (plan.getType() == PlanType.MERGE) {\n-              mergePlanCount++;\n-            }\n+\n+        // make one last check that the cluster isn't shutting down before proceeding.\n+        if (skipRegionManagementAction(\"region normalizer\")) {\n+          return false;\n+        }\n+\n+        final List<NormalizationPlan> plans = this.normalizer.computePlanForTable(table);\n+        if (CollectionUtils.isEmpty(plans)) {\n+          return true;\n+        }\n+\n+        for (NormalizationPlan plan : plans) {\n+          plan.execute(asyncClusterConnection.toConnection().getAdmin());", "originalCommit": "0f4fea1149c5d069de342d44684d73ec9991ef6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ2MTE0Nw==", "url": "https://github.com/apache/hbase/pull/1258#discussion_r390461147", "bodyText": "Oh fun. This code actually leaks admin instances :(", "author": "ndimiduk", "createdAt": "2020-03-10T16:50:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwMDk4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c9feadc3026a6b5fbfa018c7c090a8ad69ab6995", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java\nindex 2c8f1b8c3f..05117da038 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java\n\n@@ -1927,12 +1928,14 @@ public class HMaster extends HRegionServer implements MasterServices {\n           return true;\n         }\n \n-        for (NormalizationPlan plan : plans) {\n-          plan.execute(asyncClusterConnection.toConnection().getAdmin());\n-          if (plan.getType() == PlanType.SPLIT) {\n-            splitPlanCount++;\n-          } else if (plan.getType() == PlanType.MERGE) {\n-            mergePlanCount++;\n+        try (final Admin admin = asyncClusterConnection.toConnection().getAdmin()) {\n+          for (NormalizationPlan plan : plans) {\n+            plan.execute(admin);\n+            if (plan.getType() == PlanType.SPLIT) {\n+              splitPlanCount++;\n+            } else if (plan.getType() == PlanType.MERGE) {\n+              mergePlanCount++;\n+            }\n           }\n         }\n       }\n"}}, {"oid": "c9feadc3026a6b5fbfa018c7c090a8ad69ab6995", "url": "https://github.com/apache/hbase/commit/c9feadc3026a6b5fbfa018c7c090a8ad69ab6995", "message": "HBASE-23932 Minor improvements to Region Normalizer\n\n - consolidate checks made by master on behalf of balancer and\n   normalizer: deciding if the master is in a healthy state for\n   running any actions at all (skipRegionManagementAction). Normalizer\n   now does as balancer did previously.\n - both balancer and normalizer make one final check on above\n   conditions between calculating an action plan and executing the\n   plan. should make the process more responsive to shutdown\n   requests.\n - change normalizer to only consider acting on a region when it is in\n   the OPEN state. previously we would normalizer attempt to merge a\n   region that was already in a MERGING_NEW,MERGING,MERGED state.\n - fix some typos in variable names.\n\nSigned-off-by: Josh Elser <elserj@apache.org>\nSigned-off-by: binlijin <binlijin@gmail.com>", "committedDate": "2020-03-10T17:04:33Z", "type": "commit"}, {"oid": "c9feadc3026a6b5fbfa018c7c090a8ad69ab6995", "url": "https://github.com/apache/hbase/commit/c9feadc3026a6b5fbfa018c7c090a8ad69ab6995", "message": "HBASE-23932 Minor improvements to Region Normalizer\n\n - consolidate checks made by master on behalf of balancer and\n   normalizer: deciding if the master is in a healthy state for\n   running any actions at all (skipRegionManagementAction). Normalizer\n   now does as balancer did previously.\n - both balancer and normalizer make one final check on above\n   conditions between calculating an action plan and executing the\n   plan. should make the process more responsive to shutdown\n   requests.\n - change normalizer to only consider acting on a region when it is in\n   the OPEN state. previously we would normalizer attempt to merge a\n   region that was already in a MERGING_NEW,MERGING,MERGED state.\n - fix some typos in variable names.\n\nSigned-off-by: Josh Elser <elserj@apache.org>\nSigned-off-by: binlijin <binlijin@gmail.com>", "committedDate": "2020-03-10T17:04:33Z", "type": "forcePushed"}]}