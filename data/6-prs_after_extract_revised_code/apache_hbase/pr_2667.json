{"pr_number": 2667, "pr_title": "HBASE-25281 Bulkload split hfile too many times due to unreasonable split point", "pr_createdAt": "2020-11-17T06:03:38Z", "pr_url": "https://github.com/apache/hbase/pull/2667", "timeline": [{"oid": "374cf2a4a65ebe85eb8fa9c2b0ec87cc1e88fac8", "url": "https://github.com/apache/hbase/commit/374cf2a4a65ebe85eb8fa9c2b0ec87cc1e88fac8", "message": "HBASE-25281 Bulkload split hfile too many times due to unreasonable split point", "committedDate": "2020-11-17T07:07:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwNjc2Ng==", "url": "https://github.com/apache/hbase/pull/2667#discussion_r525106766", "bodyText": "nit: \"getValidRegionIndex\"", "author": "wchevreuil", "createdAt": "2020-11-17T12:10:59Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/BulkLoadHFilesTool.java", "diffHunk": "@@ -615,6 +615,43 @@ private String getUniqueName() {\n     return lqis;\n   }\n \n+  /**\n+   * @param startEndKeys the start/end keys of regions belong to this table, the list in ascending\n+   *          order by start key\n+   * @param key the key need to find which region belong to\n+   * @param tableName table\n+   * @throws IOException the table has hole or overlap, need hbck tool to fix\n+   */\n+  private int getVaildRegionIndex(List<Pair<byte[], byte[]>> startEndKeys, byte[] key,", "originalCommit": "374cf2a4a65ebe85eb8fa9c2b0ec87cc1e88fac8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0Njc0MA==", "url": "https://github.com/apache/hbase/pull/2667#discussion_r525746740", "bodyText": "sorry, a mistake", "author": "nyl3532016", "createdAt": "2020-11-18T03:43:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwNjc2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5712cf17329b674691e1447f168a4738ad16b75d", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/BulkLoadHFilesTool.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/BulkLoadHFilesTool.java\nindex 0f42dc0e64..a39ecafdd0 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/BulkLoadHFilesTool.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/BulkLoadHFilesTool.java\n\n@@ -619,11 +619,9 @@ public class BulkLoadHFilesTool extends Configured implements BulkLoadHFiles, To\n    * @param startEndKeys the start/end keys of regions belong to this table, the list in ascending\n    *          order by start key\n    * @param key the key need to find which region belong to\n-   * @param tableName table\n-   * @throws IOException the table has hole or overlap, need hbck tool to fix\n+   * @return region index\n    */\n-  private int getVaildRegionIndex(List<Pair<byte[], byte[]>> startEndKeys, byte[] key,\n-      TableName tableName) throws IOException {\n+  private int getRegionIndex(List<Pair<byte[], byte[]>> startEndKeys, byte[] key) {\n     int idx = Collections.binarySearch(startEndKeys, Pair.newPair(key, HConstants.EMPTY_END_ROW),\n       (p1, p2) -> Bytes.compareTo(p1.getFirst(), p2.getFirst()));\n     if (idx < 0) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5NTkyOQ==", "url": "https://github.com/apache/hbase/pull/2667#discussion_r525595929", "bodyText": "So if the hfile.endKey > region.endKey, we don't always split the file by region.endKey anymore? Can you explain what should be the ideal split point in this case?", "author": "wchevreuil", "createdAt": "2020-11-17T23:34:27Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/BulkLoadHFilesTool.java", "diffHunk": "@@ -647,51 +684,24 @@ private String getUniqueName() {\n       return null;\n     }\n     if (Bytes.compareTo(first.get(), last.get()) > 0) {\n-      throw new IllegalArgumentException(\"Invalid range: \" + Bytes.toStringBinary(first.get()) +\n-        \" > \" + Bytes.toStringBinary(last.get()));\n-    }\n-    int idx =\n-      Collections.binarySearch(startEndKeys, Pair.newPair(first.get(), HConstants.EMPTY_END_ROW),\n-        (p1, p2) -> Bytes.compareTo(p1.getFirst(), p2.getFirst()));\n-    if (idx < 0) {\n-      // not on boundary, returns -(insertion index). Calculate region it\n-      // would be in.\n-      idx = -(idx + 1) - 1;\n-    }\n-    int indexForCallable = idx;\n-\n-    /*\n-     * we can consider there is a region hole in following conditions. 1) if idx < 0,then first\n-     * region info is lost. 2) if the endkey of a region is not equal to the startkey of the next\n-     * region. 3) if the endkey of the last region is not empty.\n-     */\n-    if (indexForCallable < 0) {\n-      throw new IOException(\"The first region info for table \" + tableName +\n-        \" can't be found in hbase:meta.Please use hbck tool to fix it first.\");\n-    } else if ((indexForCallable == startEndKeys.size() - 1) &&\n-      !Bytes.equals(startEndKeys.get(indexForCallable).getSecond(), HConstants.EMPTY_BYTE_ARRAY)) {\n-      throw new IOException(\"The last region info for table \" + tableName +\n-        \" can't be found in hbase:meta.Please use hbck tool to fix it first.\");\n-    } else if (indexForCallable + 1 < startEndKeys.size() &&\n-      !(Bytes.compareTo(startEndKeys.get(indexForCallable).getSecond(),\n-        startEndKeys.get(indexForCallable + 1).getFirst()) == 0)) {\n-      throw new IOException(\"The endkey of one region for table \" + tableName +\n-        \" is not equal to the startkey of the next region in hbase:meta.\" +\n-        \"Please use hbck tool to fix it first.\");\n+      throw new IllegalArgumentException(\"Invalid range: \" + Bytes.toStringBinary(first.get())\n+          + \" > \" + Bytes.toStringBinary(last.get()));\n     }\n-\n-    boolean lastKeyInRange = Bytes.compareTo(last.get(), startEndKeys.get(idx).getSecond()) < 0 ||\n-      Bytes.equals(startEndKeys.get(idx).getSecond(), HConstants.EMPTY_BYTE_ARRAY);\n+    int firstKeyRegionIdx = getVaildRegionIndex(startEndKeys, first.get(), tableName);\n+    boolean lastKeyInRange =\n+        Bytes.compareTo(last.get(), startEndKeys.get(firstKeyRegionIdx).getSecond()) < 0 || Bytes\n+            .equals(startEndKeys.get(firstKeyRegionIdx).getSecond(), HConstants.EMPTY_BYTE_ARRAY);\n     if (!lastKeyInRange) {\n-      Pair<byte[], byte[]> startEndKey = startEndKeys.get(indexForCallable);\n-      List<LoadQueueItem> lqis =\n-        splitStoreFile(item, FutureUtils.get(conn.getAdmin().getDescriptor(tableName)),\n-            startEndKey.getSecond());\n+      int lastKeyRegionIdx = getVaildRegionIndex(startEndKeys, last.get(), tableName);\n+      int splitIdx = (firstKeyRegionIdx + lastKeyRegionIdx) / 2;", "originalCommit": "374cf2a4a65ebe85eb8fa9c2b0ec87cc1e88fac8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0NTUwOA==", "url": "https://github.com/apache/hbase/pull/2667#discussion_r525745508", "bodyText": "yes\uff0cif hfile span multi regions, for example A,B,C,D,E,F(the start key of these regions are in ascending order), we should use region C endkey to split, not region A. In this way, we can get equal .top and .bottom hfiles, reduce time complexity of split from O(n) to O(logn),decrease invoke of bulkLoad rpc to regionserver ,and also avoid write amplification during copyHFileHalf", "author": "nyl3532016", "createdAt": "2020-11-18T03:41:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5NTkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE4MjU2NQ==", "url": "https://github.com/apache/hbase/pull/2667#discussion_r528182565", "bodyText": "Makes sense, thanks for explaining!", "author": "wchevreuil", "createdAt": "2020-11-21T11:02:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5NTkyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5712cf17329b674691e1447f168a4738ad16b75d", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/BulkLoadHFilesTool.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/BulkLoadHFilesTool.java\nindex 0f42dc0e64..a39ecafdd0 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/BulkLoadHFilesTool.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/tool/BulkLoadHFilesTool.java\n\n@@ -687,13 +689,19 @@ public class BulkLoadHFilesTool extends Configured implements BulkLoadHFiles, To\n       throw new IllegalArgumentException(\"Invalid range: \" + Bytes.toStringBinary(first.get())\n           + \" > \" + Bytes.toStringBinary(last.get()));\n     }\n-    int firstKeyRegionIdx = getVaildRegionIndex(startEndKeys, first.get(), tableName);\n+    int firstKeyRegionIdx = getRegionIndex(startEndKeys, first.get());\n+    checkRegionIndexValid(firstKeyRegionIdx, startEndKeys, tableName);\n     boolean lastKeyInRange =\n         Bytes.compareTo(last.get(), startEndKeys.get(firstKeyRegionIdx).getSecond()) < 0 || Bytes\n             .equals(startEndKeys.get(firstKeyRegionIdx).getSecond(), HConstants.EMPTY_BYTE_ARRAY);\n     if (!lastKeyInRange) {\n-      int lastKeyRegionIdx = getVaildRegionIndex(startEndKeys, last.get(), tableName);\n+      int lastKeyRegionIdx = getRegionIndex(startEndKeys, last.get());\n       int splitIdx = (firstKeyRegionIdx + lastKeyRegionIdx) / 2;\n+      // make sure the splitPoint is valid in case region overlap occur, maybe the splitPoint bigger\n+      // than hfile.endkey w/o this check\n+      if (splitIdx != firstKeyRegionIdx) {\n+        checkRegionIndexValid(splitIdx, startEndKeys, tableName);\n+      }\n       byte[] splitPoint = startEndKeys.get(splitIdx).getSecond();\n       List<LoadQueueItem> lqis = splitStoreFile(item,\n         FutureUtils.get(conn.getAdmin().getDescriptor(tableName)), splitPoint);\n"}}, {"oid": "5712cf17329b674691e1447f168a4738ad16b75d", "url": "https://github.com/apache/hbase/commit/5712cf17329b674691e1447f168a4738ad16b75d", "message": "HBASE-25281 Bulkload split hfile too many times due to unreasonable split point", "committedDate": "2020-11-18T09:11:36Z", "type": "commit"}, {"oid": "5712cf17329b674691e1447f168a4738ad16b75d", "url": "https://github.com/apache/hbase/commit/5712cf17329b674691e1447f168a4738ad16b75d", "message": "HBASE-25281 Bulkload split hfile too many times due to unreasonable split point", "committedDate": "2020-11-18T09:11:36Z", "type": "forcePushed"}]}