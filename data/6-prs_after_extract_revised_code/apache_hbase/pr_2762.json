{"pr_number": 2762, "pr_title": "HBASE-25329 Dump region hashes in logs for the regions that are stuck in transition for more than a configured amount of time", "pr_createdAt": "2020-12-10T08:37:17Z", "pr_url": "https://github.com/apache/hbase/pull/2762", "timeline": [{"oid": "be44c67db45e82e518f5b75c2f11ec2f77af1f0d", "url": "https://github.com/apache/hbase/commit/be44c67db45e82e518f5b75c2f11ec2f77af1f0d", "message": "HBASE-25329 Dump region hashes in logs for the regions that are stuck in transition for more than a configured amount of time", "committedDate": "2020-12-10T18:22:42Z", "type": "forcePushed"}, {"oid": "61c12786bcd7b5abcf538149c6282c384fbc79e9", "url": "https://github.com/apache/hbase/commit/61c12786bcd7b5abcf538149c6282c384fbc79e9", "message": "HBASE-25329 Dump region hashes in logs for the regions that are stuck in transition for more than a configured amount of time", "committedDate": "2020-12-10T18:26:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ0NTQ4OA==", "url": "https://github.com/apache/hbase/pull/2762#discussion_r541445488", "bodyText": "500 seems high to me. Would 20 be enough? Should this be a constant in the file, even if not configurable?", "author": "d-c-manning", "createdAt": "2020-12-12T00:12:12Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java", "diffHunk": "@@ -3549,11 +3554,24 @@ public void updateRegionsInTransitionMetrics() {\n       if (oldestRITTime < ritTime) {\n         oldestRITTime = ritTime;\n       }\n+      if (counter < 500) { // Record 500 oldest RITs", "originalCommit": "61c12786bcd7b5abcf538149c6282c384fbc79e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36e0655984977ac21814640e715dbf202301146b", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\nindex fd2b8f4c97..0fdf50b5d9 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n\n@@ -3541,37 +3538,36 @@ public class AssignmentManager extends ZooKeeperListener {\n     int totalRITs = 0;\n     int totalRITsOverThreshold = 0;\n     long oldestRITTime = 0;\n-    Set<String> oldestRITHashesAndStates = Sets.newHashSet(); // set of <rit hash>:<rit state>\n+    Map<String, RegionState> ritsOverThreshold = null;\n     int ritThreshold = this.server.getConfiguration().\n       getInt(HConstants.METRICS_RIT_STUCK_WARNING_THRESHOLD, 60000);\n-    int counter = 0;\n-    for (RegionState state: regionStates.getRegionsInTransitionOrderedByDuration()) {\n+    for (RegionState state: regionStates.getRegionsInTransition()) {\n       totalRITs++;\n       long ritTime = currentTime - state.getStamp();\n       if (ritTime > ritThreshold) { // more than the threshold\n         totalRITsOverThreshold++;\n+        if (ritsOverThreshold == null) {\n+          ritsOverThreshold = new HashMap<>();\n+        }\n+        ritsOverThreshold.put(state.getRegion().getEncodedName(), state);\n       }\n       if (oldestRITTime < ritTime) {\n         oldestRITTime = ritTime;\n       }\n-      if (counter < 500) { // Record 500 oldest RITs\n-        oldestRITHashesAndStates.add(\n-          state.getRegion().getRegionNameAsString() + \":\" + state.getState().name()\n-        );\n+    }\n+    if (LOG.isDebugEnabled() && ritsOverThreshold != null && !ritsOverThreshold.isEmpty()) {\n+      StringBuilder sb = new StringBuilder();\n+      for (Map.Entry<String, RegionState> regionName: ritsOverThreshold.entrySet()) {\n+        sb.append(regionName).append(\":\")\n+          .append(ritsOverThreshold.get(regionName).getState().name()).append(\"\\n\");\n       }\n-      counter += 1;\n+      sb.delete(sb.length()-1, sb.length());\n+      LOG.debug(\"RITs over threshold: \" + sb.toString());\n     }\n     if (this.metricsAssignmentManager != null) {\n       this.metricsAssignmentManager.updateRITOldestAge(oldestRITTime);\n       this.metricsAssignmentManager.updateRITCount(totalRITs);\n       this.metricsAssignmentManager.updateRITCountOverThreshold(totalRITsOverThreshold);\n-\n-      LOG.debug(\"Oldest RIT hashes and states: \" + oldestRITHashesAndStates.toString());\n-      long time = EnvironmentEdgeManager.currentTime();\n-      if ((time - ritThreshold / 2) >= this.lastRITHashMetricUpdate) {\n-        this.metricsAssignmentManager.updateRITHashesAndStates(oldestRITHashesAndStates);\n-        this.lastRITHashMetricUpdate = time;\n-      }\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MDE4NQ==", "url": "https://github.com/apache/hbase/pull/2762#discussion_r541450185", "bodyText": "Why do we update the metrics hashes only if it's been more than ritThreshold / 2 time since last update? If we do the work to find the oldest, it seems like we should update the metrics always. Then any query to get metrics will always have the most recent results (~3 seconds old at max, with default hbase.regionserver.msginterval)\nThough I do think it's a good idea for limiting the logging. Should the LOG.debug statement be in here?\nThen this statement may deserve a comment.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if ((time - ritThreshold / 2) >= this.lastRITHashMetricUpdate) {\n          \n          \n            \n                  // Only log if it has been long enough since the last update (default 30 seconds)\n          \n          \n            \n                  if ((time - ritThreshold / 2) >= this.lastRITHashMetricUpdate) {", "author": "d-c-manning", "createdAt": "2020-12-12T00:19:38Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java", "diffHunk": "@@ -3549,11 +3554,24 @@ public void updateRegionsInTransitionMetrics() {\n       if (oldestRITTime < ritTime) {\n         oldestRITTime = ritTime;\n       }\n+      if (counter < 500) { // Record 500 oldest RITs\n+        oldestRITHashesAndStates.add(\n+          state.getRegion().getRegionNameAsString() + \":\" + state.getState().name()\n+        );\n+      }\n+      counter += 1;\n     }\n     if (this.metricsAssignmentManager != null) {\n       this.metricsAssignmentManager.updateRITOldestAge(oldestRITTime);\n       this.metricsAssignmentManager.updateRITCount(totalRITs);\n       this.metricsAssignmentManager.updateRITCountOverThreshold(totalRITsOverThreshold);\n+\n+      LOG.debug(\"Oldest RIT hashes and states: \" + oldestRITHashesAndStates.toString());\n+      long time = EnvironmentEdgeManager.currentTime();\n+      if ((time - ritThreshold / 2) >= this.lastRITHashMetricUpdate) {", "originalCommit": "61c12786bcd7b5abcf538149c6282c384fbc79e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg0ODgwOQ==", "url": "https://github.com/apache/hbase/pull/2762#discussion_r543848809", "bodyText": "Though I do think it's a good idea for limiting the logging. Should the LOG.debug statement be in here?\n\nyes it is for the reason you stated. will add the comment and move LOG.debug under this condition. maybe the other stuff can be moved outside.", "author": "caroliney14", "createdAt": "2020-12-16T02:39:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MDE4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "36e0655984977ac21814640e715dbf202301146b", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\nindex fd2b8f4c97..0fdf50b5d9 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n\n@@ -3541,37 +3538,36 @@ public class AssignmentManager extends ZooKeeperListener {\n     int totalRITs = 0;\n     int totalRITsOverThreshold = 0;\n     long oldestRITTime = 0;\n-    Set<String> oldestRITHashesAndStates = Sets.newHashSet(); // set of <rit hash>:<rit state>\n+    Map<String, RegionState> ritsOverThreshold = null;\n     int ritThreshold = this.server.getConfiguration().\n       getInt(HConstants.METRICS_RIT_STUCK_WARNING_THRESHOLD, 60000);\n-    int counter = 0;\n-    for (RegionState state: regionStates.getRegionsInTransitionOrderedByDuration()) {\n+    for (RegionState state: regionStates.getRegionsInTransition()) {\n       totalRITs++;\n       long ritTime = currentTime - state.getStamp();\n       if (ritTime > ritThreshold) { // more than the threshold\n         totalRITsOverThreshold++;\n+        if (ritsOverThreshold == null) {\n+          ritsOverThreshold = new HashMap<>();\n+        }\n+        ritsOverThreshold.put(state.getRegion().getEncodedName(), state);\n       }\n       if (oldestRITTime < ritTime) {\n         oldestRITTime = ritTime;\n       }\n-      if (counter < 500) { // Record 500 oldest RITs\n-        oldestRITHashesAndStates.add(\n-          state.getRegion().getRegionNameAsString() + \":\" + state.getState().name()\n-        );\n+    }\n+    if (LOG.isDebugEnabled() && ritsOverThreshold != null && !ritsOverThreshold.isEmpty()) {\n+      StringBuilder sb = new StringBuilder();\n+      for (Map.Entry<String, RegionState> regionName: ritsOverThreshold.entrySet()) {\n+        sb.append(regionName).append(\":\")\n+          .append(ritsOverThreshold.get(regionName).getState().name()).append(\"\\n\");\n       }\n-      counter += 1;\n+      sb.delete(sb.length()-1, sb.length());\n+      LOG.debug(\"RITs over threshold: \" + sb.toString());\n     }\n     if (this.metricsAssignmentManager != null) {\n       this.metricsAssignmentManager.updateRITOldestAge(oldestRITTime);\n       this.metricsAssignmentManager.updateRITCount(totalRITs);\n       this.metricsAssignmentManager.updateRITCountOverThreshold(totalRITsOverThreshold);\n-\n-      LOG.debug(\"Oldest RIT hashes and states: \" + oldestRITHashesAndStates.toString());\n-      long time = EnvironmentEdgeManager.currentTime();\n-      if ((time - ritThreshold / 2) >= this.lastRITHashMetricUpdate) {\n-        this.metricsAssignmentManager.updateRITHashesAndStates(oldestRITHashesAndStates);\n-        this.lastRITHashMetricUpdate = time;\n-      }\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MDI0OQ==", "url": "https://github.com/apache/hbase/pull/2762#discussion_r541450249", "bodyText": "can we just reuse currentTime here from the beginning of the method?", "author": "d-c-manning", "createdAt": "2020-12-12T00:19:56Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java", "diffHunk": "@@ -3549,11 +3554,24 @@ public void updateRegionsInTransitionMetrics() {\n       if (oldestRITTime < ritTime) {\n         oldestRITTime = ritTime;\n       }\n+      if (counter < 500) { // Record 500 oldest RITs\n+        oldestRITHashesAndStates.add(\n+          state.getRegion().getRegionNameAsString() + \":\" + state.getState().name()\n+        );\n+      }\n+      counter += 1;\n     }\n     if (this.metricsAssignmentManager != null) {\n       this.metricsAssignmentManager.updateRITOldestAge(oldestRITTime);\n       this.metricsAssignmentManager.updateRITCount(totalRITs);\n       this.metricsAssignmentManager.updateRITCountOverThreshold(totalRITsOverThreshold);\n+\n+      LOG.debug(\"Oldest RIT hashes and states: \" + oldestRITHashesAndStates.toString());\n+      long time = EnvironmentEdgeManager.currentTime();", "originalCommit": "61c12786bcd7b5abcf538149c6282c384fbc79e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36e0655984977ac21814640e715dbf202301146b", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\nindex fd2b8f4c97..0fdf50b5d9 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n\n@@ -3541,37 +3538,36 @@ public class AssignmentManager extends ZooKeeperListener {\n     int totalRITs = 0;\n     int totalRITsOverThreshold = 0;\n     long oldestRITTime = 0;\n-    Set<String> oldestRITHashesAndStates = Sets.newHashSet(); // set of <rit hash>:<rit state>\n+    Map<String, RegionState> ritsOverThreshold = null;\n     int ritThreshold = this.server.getConfiguration().\n       getInt(HConstants.METRICS_RIT_STUCK_WARNING_THRESHOLD, 60000);\n-    int counter = 0;\n-    for (RegionState state: regionStates.getRegionsInTransitionOrderedByDuration()) {\n+    for (RegionState state: regionStates.getRegionsInTransition()) {\n       totalRITs++;\n       long ritTime = currentTime - state.getStamp();\n       if (ritTime > ritThreshold) { // more than the threshold\n         totalRITsOverThreshold++;\n+        if (ritsOverThreshold == null) {\n+          ritsOverThreshold = new HashMap<>();\n+        }\n+        ritsOverThreshold.put(state.getRegion().getEncodedName(), state);\n       }\n       if (oldestRITTime < ritTime) {\n         oldestRITTime = ritTime;\n       }\n-      if (counter < 500) { // Record 500 oldest RITs\n-        oldestRITHashesAndStates.add(\n-          state.getRegion().getRegionNameAsString() + \":\" + state.getState().name()\n-        );\n+    }\n+    if (LOG.isDebugEnabled() && ritsOverThreshold != null && !ritsOverThreshold.isEmpty()) {\n+      StringBuilder sb = new StringBuilder();\n+      for (Map.Entry<String, RegionState> regionName: ritsOverThreshold.entrySet()) {\n+        sb.append(regionName).append(\":\")\n+          .append(ritsOverThreshold.get(regionName).getState().name()).append(\"\\n\");\n       }\n-      counter += 1;\n+      sb.delete(sb.length()-1, sb.length());\n+      LOG.debug(\"RITs over threshold: \" + sb.toString());\n     }\n     if (this.metricsAssignmentManager != null) {\n       this.metricsAssignmentManager.updateRITOldestAge(oldestRITTime);\n       this.metricsAssignmentManager.updateRITCount(totalRITs);\n       this.metricsAssignmentManager.updateRITCountOverThreshold(totalRITsOverThreshold);\n-\n-      LOG.debug(\"Oldest RIT hashes and states: \" + oldestRITHashesAndStates.toString());\n-      long time = EnvironmentEdgeManager.currentTime();\n-      if ((time - ritThreshold / 2) >= this.lastRITHashMetricUpdate) {\n-        this.metricsAssignmentManager.updateRITHashesAndStates(oldestRITHashesAndStates);\n-        this.lastRITHashMetricUpdate = time;\n-      }\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MzY1NA==", "url": "https://github.com/apache/hbase/pull/2762#discussion_r541453654", "bodyText": "since this method uses the state.getStamp() to determine whether the RIT is over the threshold or the oldest time... should we just use getRegionsInTransitionOrderedByTimestamp instead?\nThis new method getRegionsInTransitionOrderedByDuration is tracking total duration instead of duration since last state transition, so the longest RITs may not necessarily be those that are reported over threshold. I think it's probably good to be consistent... I'm not sure which way is better to be consistent, but since these metrics in this method are reporting time since last change instead of total duration, I'd favor that approach.", "author": "d-c-manning", "createdAt": "2020-12-12T00:32:32Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java", "diffHunk": "@@ -3538,9 +3541,11 @@ public void updateRegionsInTransitionMetrics() {\n     int totalRITs = 0;\n     int totalRITsOverThreshold = 0;\n     long oldestRITTime = 0;\n+    Set<String> oldestRITHashesAndStates = Sets.newHashSet(); // set of <rit hash>:<rit state>\n     int ritThreshold = this.server.getConfiguration().\n       getInt(HConstants.METRICS_RIT_STUCK_WARNING_THRESHOLD, 60000);\n-    for (RegionState state: regionStates.getRegionsInTransition()) {\n+    int counter = 0;\n+    for (RegionState state: regionStates.getRegionsInTransitionOrderedByDuration()) {", "originalCommit": "61c12786bcd7b5abcf538149c6282c384fbc79e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36e0655984977ac21814640e715dbf202301146b", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\nindex fd2b8f4c97..0fdf50b5d9 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n\n@@ -3541,37 +3538,36 @@ public class AssignmentManager extends ZooKeeperListener {\n     int totalRITs = 0;\n     int totalRITsOverThreshold = 0;\n     long oldestRITTime = 0;\n-    Set<String> oldestRITHashesAndStates = Sets.newHashSet(); // set of <rit hash>:<rit state>\n+    Map<String, RegionState> ritsOverThreshold = null;\n     int ritThreshold = this.server.getConfiguration().\n       getInt(HConstants.METRICS_RIT_STUCK_WARNING_THRESHOLD, 60000);\n-    int counter = 0;\n-    for (RegionState state: regionStates.getRegionsInTransitionOrderedByDuration()) {\n+    for (RegionState state: regionStates.getRegionsInTransition()) {\n       totalRITs++;\n       long ritTime = currentTime - state.getStamp();\n       if (ritTime > ritThreshold) { // more than the threshold\n         totalRITsOverThreshold++;\n+        if (ritsOverThreshold == null) {\n+          ritsOverThreshold = new HashMap<>();\n+        }\n+        ritsOverThreshold.put(state.getRegion().getEncodedName(), state);\n       }\n       if (oldestRITTime < ritTime) {\n         oldestRITTime = ritTime;\n       }\n-      if (counter < 500) { // Record 500 oldest RITs\n-        oldestRITHashesAndStates.add(\n-          state.getRegion().getRegionNameAsString() + \":\" + state.getState().name()\n-        );\n+    }\n+    if (LOG.isDebugEnabled() && ritsOverThreshold != null && !ritsOverThreshold.isEmpty()) {\n+      StringBuilder sb = new StringBuilder();\n+      for (Map.Entry<String, RegionState> regionName: ritsOverThreshold.entrySet()) {\n+        sb.append(regionName).append(\":\")\n+          .append(ritsOverThreshold.get(regionName).getState().name()).append(\"\\n\");\n       }\n-      counter += 1;\n+      sb.delete(sb.length()-1, sb.length());\n+      LOG.debug(\"RITs over threshold: \" + sb.toString());\n     }\n     if (this.metricsAssignmentManager != null) {\n       this.metricsAssignmentManager.updateRITOldestAge(oldestRITTime);\n       this.metricsAssignmentManager.updateRITCount(totalRITs);\n       this.metricsAssignmentManager.updateRITCountOverThreshold(totalRITsOverThreshold);\n-\n-      LOG.debug(\"Oldest RIT hashes and states: \" + oldestRITHashesAndStates.toString());\n-      long time = EnvironmentEdgeManager.currentTime();\n-      if ((time - ritThreshold / 2) >= this.lastRITHashMetricUpdate) {\n-        this.metricsAssignmentManager.updateRITHashesAndStates(oldestRITHashesAndStates);\n-        this.lastRITHashMetricUpdate = time;\n-      }\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1Mzk0MA==", "url": "https://github.com/apache/hbase/pull/2762#discussion_r541453940", "bodyText": "should we also filter these to only those RITs that are over the threshold? Or do we want to display every RIT, even if it's only been transitioning for 100ms, if it's the longest/only RIT in the cluster?", "author": "d-c-manning", "createdAt": "2020-12-12T00:33:43Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java", "diffHunk": "@@ -3549,11 +3554,24 @@ public void updateRegionsInTransitionMetrics() {\n       if (oldestRITTime < ritTime) {\n         oldestRITTime = ritTime;\n       }\n+      if (counter < 500) { // Record 500 oldest RITs\n+        oldestRITHashesAndStates.add(", "originalCommit": "61c12786bcd7b5abcf538149c6282c384fbc79e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg0MjQxMw==", "url": "https://github.com/apache/hbase/pull/2762#discussion_r543842413", "bodyText": "I think it makes sense to only record RITs over threshold, since those would be the problematic ones", "author": "caroliney14", "createdAt": "2020-12-16T02:31:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1Mzk0MA=="}], "type": "inlineReview", "revised_code": {"commit": "36e0655984977ac21814640e715dbf202301146b", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\nindex fd2b8f4c97..0fdf50b5d9 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n\n@@ -3541,37 +3538,36 @@ public class AssignmentManager extends ZooKeeperListener {\n     int totalRITs = 0;\n     int totalRITsOverThreshold = 0;\n     long oldestRITTime = 0;\n-    Set<String> oldestRITHashesAndStates = Sets.newHashSet(); // set of <rit hash>:<rit state>\n+    Map<String, RegionState> ritsOverThreshold = null;\n     int ritThreshold = this.server.getConfiguration().\n       getInt(HConstants.METRICS_RIT_STUCK_WARNING_THRESHOLD, 60000);\n-    int counter = 0;\n-    for (RegionState state: regionStates.getRegionsInTransitionOrderedByDuration()) {\n+    for (RegionState state: regionStates.getRegionsInTransition()) {\n       totalRITs++;\n       long ritTime = currentTime - state.getStamp();\n       if (ritTime > ritThreshold) { // more than the threshold\n         totalRITsOverThreshold++;\n+        if (ritsOverThreshold == null) {\n+          ritsOverThreshold = new HashMap<>();\n+        }\n+        ritsOverThreshold.put(state.getRegion().getEncodedName(), state);\n       }\n       if (oldestRITTime < ritTime) {\n         oldestRITTime = ritTime;\n       }\n-      if (counter < 500) { // Record 500 oldest RITs\n-        oldestRITHashesAndStates.add(\n-          state.getRegion().getRegionNameAsString() + \":\" + state.getState().name()\n-        );\n+    }\n+    if (LOG.isDebugEnabled() && ritsOverThreshold != null && !ritsOverThreshold.isEmpty()) {\n+      StringBuilder sb = new StringBuilder();\n+      for (Map.Entry<String, RegionState> regionName: ritsOverThreshold.entrySet()) {\n+        sb.append(regionName).append(\":\")\n+          .append(ritsOverThreshold.get(regionName).getState().name()).append(\"\\n\");\n       }\n-      counter += 1;\n+      sb.delete(sb.length()-1, sb.length());\n+      LOG.debug(\"RITs over threshold: \" + sb.toString());\n     }\n     if (this.metricsAssignmentManager != null) {\n       this.metricsAssignmentManager.updateRITOldestAge(oldestRITTime);\n       this.metricsAssignmentManager.updateRITCount(totalRITs);\n       this.metricsAssignmentManager.updateRITCountOverThreshold(totalRITsOverThreshold);\n-\n-      LOG.debug(\"Oldest RIT hashes and states: \" + oldestRITHashesAndStates.toString());\n-      long time = EnvironmentEdgeManager.currentTime();\n-      if ((time - ritThreshold / 2) >= this.lastRITHashMetricUpdate) {\n-        this.metricsAssignmentManager.updateRITHashesAndStates(oldestRITHashesAndStates);\n-        this.lastRITHashMetricUpdate = time;\n-      }\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1NzM3Nw==", "url": "https://github.com/apache/hbase/pull/2762#discussion_r541457377", "bodyText": "Do we have to use name() as I see other references use state.getState() directly.\nregion names could be quite long - when you refer to hash, did you want the md5 encoded name?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      state.getRegion().getRegionNameAsString() + \":\" + state.getState().name()\n          \n          \n            \n                      state.getRegion().getEncodedName() + \":\" + state.getState()\n          \n      \n    \n    \n  \n\nOr should the entire region name be available?", "author": "d-c-manning", "createdAt": "2020-12-12T00:40:42Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java", "diffHunk": "@@ -3549,11 +3554,24 @@ public void updateRegionsInTransitionMetrics() {\n       if (oldestRITTime < ritTime) {\n         oldestRITTime = ritTime;\n       }\n+      if (counter < 500) { // Record 500 oldest RITs\n+        oldestRITHashesAndStates.add(\n+          state.getRegion().getRegionNameAsString() + \":\" + state.getState().name()", "originalCommit": "61c12786bcd7b5abcf538149c6282c384fbc79e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg0NDE2Ng==", "url": "https://github.com/apache/hbase/pull/2762#discussion_r543844166", "bodyText": "if the md5 encoded name is enough info for debugging (which I think yes), then it should suffice to use that \ud83d\udc4d", "author": "caroliney14", "createdAt": "2020-12-16T02:33:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1NzM3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg0NjAwMA==", "url": "https://github.com/apache/hbase/pull/2762#discussion_r543846000", "bodyText": "as for state, that is an enum, and we want the state name, which is why I added .name(). see this SO", "author": "caroliney14", "createdAt": "2020-12-16T02:35:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1NzM3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "36e0655984977ac21814640e715dbf202301146b", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\nindex fd2b8f4c97..0fdf50b5d9 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n\n@@ -3541,37 +3538,36 @@ public class AssignmentManager extends ZooKeeperListener {\n     int totalRITs = 0;\n     int totalRITsOverThreshold = 0;\n     long oldestRITTime = 0;\n-    Set<String> oldestRITHashesAndStates = Sets.newHashSet(); // set of <rit hash>:<rit state>\n+    Map<String, RegionState> ritsOverThreshold = null;\n     int ritThreshold = this.server.getConfiguration().\n       getInt(HConstants.METRICS_RIT_STUCK_WARNING_THRESHOLD, 60000);\n-    int counter = 0;\n-    for (RegionState state: regionStates.getRegionsInTransitionOrderedByDuration()) {\n+    for (RegionState state: regionStates.getRegionsInTransition()) {\n       totalRITs++;\n       long ritTime = currentTime - state.getStamp();\n       if (ritTime > ritThreshold) { // more than the threshold\n         totalRITsOverThreshold++;\n+        if (ritsOverThreshold == null) {\n+          ritsOverThreshold = new HashMap<>();\n+        }\n+        ritsOverThreshold.put(state.getRegion().getEncodedName(), state);\n       }\n       if (oldestRITTime < ritTime) {\n         oldestRITTime = ritTime;\n       }\n-      if (counter < 500) { // Record 500 oldest RITs\n-        oldestRITHashesAndStates.add(\n-          state.getRegion().getRegionNameAsString() + \":\" + state.getState().name()\n-        );\n+    }\n+    if (LOG.isDebugEnabled() && ritsOverThreshold != null && !ritsOverThreshold.isEmpty()) {\n+      StringBuilder sb = new StringBuilder();\n+      for (Map.Entry<String, RegionState> regionName: ritsOverThreshold.entrySet()) {\n+        sb.append(regionName).append(\":\")\n+          .append(ritsOverThreshold.get(regionName).getState().name()).append(\"\\n\");\n       }\n-      counter += 1;\n+      sb.delete(sb.length()-1, sb.length());\n+      LOG.debug(\"RITs over threshold: \" + sb.toString());\n     }\n     if (this.metricsAssignmentManager != null) {\n       this.metricsAssignmentManager.updateRITOldestAge(oldestRITTime);\n       this.metricsAssignmentManager.updateRITCount(totalRITs);\n       this.metricsAssignmentManager.updateRITCountOverThreshold(totalRITsOverThreshold);\n-\n-      LOG.debug(\"Oldest RIT hashes and states: \" + oldestRITHashesAndStates.toString());\n-      long time = EnvironmentEdgeManager.currentTime();\n-      if ((time - ritThreshold / 2) >= this.lastRITHashMetricUpdate) {\n-        this.metricsAssignmentManager.updateRITHashesAndStates(oldestRITHashesAndStates);\n-        this.lastRITHashMetricUpdate = time;\n-      }\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ2MTM5Nw==", "url": "https://github.com/apache/hbase/pull/2762#discussion_r541461397", "bodyText": "we should only log if oldestRITHashesAndStates is non-empty.", "author": "d-c-manning", "createdAt": "2020-12-12T00:57:11Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java", "diffHunk": "@@ -3549,11 +3554,24 @@ public void updateRegionsInTransitionMetrics() {\n       if (oldestRITTime < ritTime) {\n         oldestRITTime = ritTime;\n       }\n+      if (counter < 500) { // Record 500 oldest RITs\n+        oldestRITHashesAndStates.add(\n+          state.getRegion().getRegionNameAsString() + \":\" + state.getState().name()\n+        );\n+      }\n+      counter += 1;\n     }\n     if (this.metricsAssignmentManager != null) {\n       this.metricsAssignmentManager.updateRITOldestAge(oldestRITTime);\n       this.metricsAssignmentManager.updateRITCount(totalRITs);\n       this.metricsAssignmentManager.updateRITCountOverThreshold(totalRITsOverThreshold);\n+\n+      LOG.debug(\"Oldest RIT hashes and states: \" + oldestRITHashesAndStates.toString());", "originalCommit": "61c12786bcd7b5abcf538149c6282c384fbc79e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36e0655984977ac21814640e715dbf202301146b", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\nindex fd2b8f4c97..0fdf50b5d9 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n\n@@ -3541,37 +3538,36 @@ public class AssignmentManager extends ZooKeeperListener {\n     int totalRITs = 0;\n     int totalRITsOverThreshold = 0;\n     long oldestRITTime = 0;\n-    Set<String> oldestRITHashesAndStates = Sets.newHashSet(); // set of <rit hash>:<rit state>\n+    Map<String, RegionState> ritsOverThreshold = null;\n     int ritThreshold = this.server.getConfiguration().\n       getInt(HConstants.METRICS_RIT_STUCK_WARNING_THRESHOLD, 60000);\n-    int counter = 0;\n-    for (RegionState state: regionStates.getRegionsInTransitionOrderedByDuration()) {\n+    for (RegionState state: regionStates.getRegionsInTransition()) {\n       totalRITs++;\n       long ritTime = currentTime - state.getStamp();\n       if (ritTime > ritThreshold) { // more than the threshold\n         totalRITsOverThreshold++;\n+        if (ritsOverThreshold == null) {\n+          ritsOverThreshold = new HashMap<>();\n+        }\n+        ritsOverThreshold.put(state.getRegion().getEncodedName(), state);\n       }\n       if (oldestRITTime < ritTime) {\n         oldestRITTime = ritTime;\n       }\n-      if (counter < 500) { // Record 500 oldest RITs\n-        oldestRITHashesAndStates.add(\n-          state.getRegion().getRegionNameAsString() + \":\" + state.getState().name()\n-        );\n+    }\n+    if (LOG.isDebugEnabled() && ritsOverThreshold != null && !ritsOverThreshold.isEmpty()) {\n+      StringBuilder sb = new StringBuilder();\n+      for (Map.Entry<String, RegionState> regionName: ritsOverThreshold.entrySet()) {\n+        sb.append(regionName).append(\":\")\n+          .append(ritsOverThreshold.get(regionName).getState().name()).append(\"\\n\");\n       }\n-      counter += 1;\n+      sb.delete(sb.length()-1, sb.length());\n+      LOG.debug(\"RITs over threshold: \" + sb.toString());\n     }\n     if (this.metricsAssignmentManager != null) {\n       this.metricsAssignmentManager.updateRITOldestAge(oldestRITTime);\n       this.metricsAssignmentManager.updateRITCount(totalRITs);\n       this.metricsAssignmentManager.updateRITCountOverThreshold(totalRITsOverThreshold);\n-\n-      LOG.debug(\"Oldest RIT hashes and states: \" + oldestRITHashesAndStates.toString());\n-      long time = EnvironmentEdgeManager.currentTime();\n-      if ((time - ritThreshold / 2) >= this.lastRITHashMetricUpdate) {\n-        this.metricsAssignmentManager.updateRITHashesAndStates(oldestRITHashesAndStates);\n-        this.lastRITHashMetricUpdate = time;\n-      }\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM2NjQ2Mg==", "url": "https://github.com/apache/hbase/pull/2762#discussion_r556366462", "bodyText": "nit: new HashMap<>()", "author": "virajjasani", "createdAt": "2021-01-13T09:10:09Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java", "diffHunk": "@@ -3538,18 +3538,31 @@ public void updateRegionsInTransitionMetrics() {\n     int totalRITs = 0;\n     int totalRITsOverThreshold = 0;\n     long oldestRITTime = 0;\n+    HashMap<String, RegionState> ritsOverThreshold = null;\n     int ritThreshold = this.server.getConfiguration().\n       getInt(HConstants.METRICS_RIT_STUCK_WARNING_THRESHOLD, 60000);\n     for (RegionState state: regionStates.getRegionsInTransition()) {\n       totalRITs++;\n       long ritTime = currentTime - state.getStamp();\n       if (ritTime > ritThreshold) { // more than the threshold\n         totalRITsOverThreshold++;\n+        if (ritsOverThreshold == null) {\n+          ritsOverThreshold = new HashMap<String, RegionState>();", "originalCommit": "064250c4071d261aa10d2a6138990f7f357c64ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36e0655984977ac21814640e715dbf202301146b", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\nindex 1dd28791b4..0fdf50b5d9 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n\n@@ -3538,7 +3538,7 @@ public class AssignmentManager extends ZooKeeperListener {\n     int totalRITs = 0;\n     int totalRITsOverThreshold = 0;\n     long oldestRITTime = 0;\n-    HashMap<String, RegionState> ritsOverThreshold = null;\n+    Map<String, RegionState> ritsOverThreshold = null;\n     int ritThreshold = this.server.getConfiguration().\n       getInt(HConstants.METRICS_RIT_STUCK_WARNING_THRESHOLD, 60000);\n     for (RegionState state: regionStates.getRegionsInTransition()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM2ODU1Mg==", "url": "https://github.com/apache/hbase/pull/2762#discussion_r556368552", "bodyText": "nit: use chain of append() to cover String concatenation?\n        sb.append(regionName).append(\":\")\n          .append(ritsOverThreshold.get(regionName).getState().name()).append(\"\\n\");", "author": "virajjasani", "createdAt": "2021-01-13T09:13:30Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java", "diffHunk": "@@ -3538,18 +3538,31 @@ public void updateRegionsInTransitionMetrics() {\n     int totalRITs = 0;\n     int totalRITsOverThreshold = 0;\n     long oldestRITTime = 0;\n+    HashMap<String, RegionState> ritsOverThreshold = null;\n     int ritThreshold = this.server.getConfiguration().\n       getInt(HConstants.METRICS_RIT_STUCK_WARNING_THRESHOLD, 60000);\n     for (RegionState state: regionStates.getRegionsInTransition()) {\n       totalRITs++;\n       long ritTime = currentTime - state.getStamp();\n       if (ritTime > ritThreshold) { // more than the threshold\n         totalRITsOverThreshold++;\n+        if (ritsOverThreshold == null) {\n+          ritsOverThreshold = new HashMap<String, RegionState>();\n+        }\n+        ritsOverThreshold.put(state.getRegion().getEncodedName(), state);\n       }\n       if (oldestRITTime < ritTime) {\n         oldestRITTime = ritTime;\n       }\n     }\n+    if (LOG.isDebugEnabled() && ritsOverThreshold != null && !ritsOverThreshold.isEmpty()) {\n+      StringBuilder sb = new StringBuilder();\n+      for (String regionName: ritsOverThreshold.keySet()) {\n+        sb.append(regionName + \":\" + ritsOverThreshold.get(regionName).getState().name() + \"\\n\");", "originalCommit": "064250c4071d261aa10d2a6138990f7f357c64ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36e0655984977ac21814640e715dbf202301146b", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\nindex 1dd28791b4..0fdf50b5d9 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n\n@@ -3538,7 +3538,7 @@ public class AssignmentManager extends ZooKeeperListener {\n     int totalRITs = 0;\n     int totalRITsOverThreshold = 0;\n     long oldestRITTime = 0;\n-    HashMap<String, RegionState> ritsOverThreshold = null;\n+    Map<String, RegionState> ritsOverThreshold = null;\n     int ritThreshold = this.server.getConfiguration().\n       getInt(HConstants.METRICS_RIT_STUCK_WARNING_THRESHOLD, 60000);\n     for (RegionState state: regionStates.getRegionsInTransition()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM2OTAzNw==", "url": "https://github.com/apache/hbase/pull/2762#discussion_r556369037", "bodyText": "Do we want to remove last appended new line char? If so, start index should be sb.length()-1 right?", "author": "virajjasani", "createdAt": "2021-01-13T09:14:13Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java", "diffHunk": "@@ -3538,18 +3538,31 @@ public void updateRegionsInTransitionMetrics() {\n     int totalRITs = 0;\n     int totalRITsOverThreshold = 0;\n     long oldestRITTime = 0;\n+    HashMap<String, RegionState> ritsOverThreshold = null;\n     int ritThreshold = this.server.getConfiguration().\n       getInt(HConstants.METRICS_RIT_STUCK_WARNING_THRESHOLD, 60000);\n     for (RegionState state: regionStates.getRegionsInTransition()) {\n       totalRITs++;\n       long ritTime = currentTime - state.getStamp();\n       if (ritTime > ritThreshold) { // more than the threshold\n         totalRITsOverThreshold++;\n+        if (ritsOverThreshold == null) {\n+          ritsOverThreshold = new HashMap<String, RegionState>();\n+        }\n+        ritsOverThreshold.put(state.getRegion().getEncodedName(), state);\n       }\n       if (oldestRITTime < ritTime) {\n         oldestRITTime = ritTime;\n       }\n     }\n+    if (LOG.isDebugEnabled() && ritsOverThreshold != null && !ritsOverThreshold.isEmpty()) {\n+      StringBuilder sb = new StringBuilder();\n+      for (String regionName: ritsOverThreshold.keySet()) {\n+        sb.append(regionName + \":\" + ritsOverThreshold.get(regionName).getState().name() + \"\\n\");\n+      }\n+      sb.delete(sb.length()-2, sb.length());", "originalCommit": "064250c4071d261aa10d2a6138990f7f357c64ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36e0655984977ac21814640e715dbf202301146b", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\nindex 1dd28791b4..0fdf50b5d9 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n\n@@ -3538,7 +3538,7 @@ public class AssignmentManager extends ZooKeeperListener {\n     int totalRITs = 0;\n     int totalRITsOverThreshold = 0;\n     long oldestRITTime = 0;\n-    HashMap<String, RegionState> ritsOverThreshold = null;\n+    Map<String, RegionState> ritsOverThreshold = null;\n     int ritThreshold = this.server.getConfiguration().\n       getInt(HConstants.METRICS_RIT_STUCK_WARNING_THRESHOLD, 60000);\n     for (RegionState state: regionStates.getRegionsInTransition()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM3MDE2MQ==", "url": "https://github.com/apache/hbase/pull/2762#discussion_r556370161", "bodyText": "nit: Map<String, RegionState> ritsOverThreshold = null", "author": "virajjasani", "createdAt": "2021-01-13T09:15:58Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java", "diffHunk": "@@ -3538,18 +3538,31 @@ public void updateRegionsInTransitionMetrics() {\n     int totalRITs = 0;\n     int totalRITsOverThreshold = 0;\n     long oldestRITTime = 0;\n+    HashMap<String, RegionState> ritsOverThreshold = null;", "originalCommit": "064250c4071d261aa10d2a6138990f7f357c64ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36e0655984977ac21814640e715dbf202301146b", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\nindex 1dd28791b4..0fdf50b5d9 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n\n@@ -3538,7 +3538,7 @@ public class AssignmentManager extends ZooKeeperListener {\n     int totalRITs = 0;\n     int totalRITsOverThreshold = 0;\n     long oldestRITTime = 0;\n-    HashMap<String, RegionState> ritsOverThreshold = null;\n+    Map<String, RegionState> ritsOverThreshold = null;\n     int ritThreshold = this.server.getConfiguration().\n       getInt(HConstants.METRICS_RIT_STUCK_WARNING_THRESHOLD, 60000);\n     for (RegionState state: regionStates.getRegionsInTransition()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM1ODUwMA==", "url": "https://github.com/apache/hbase/pull/2762#discussion_r558358500", "bodyText": "If you could convert this to entrySet(), that would be great (as per findbugs)", "author": "virajjasani", "createdAt": "2021-01-15T14:53:26Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java", "diffHunk": "@@ -3538,18 +3538,32 @@ public void updateRegionsInTransitionMetrics() {\n     int totalRITs = 0;\n     int totalRITsOverThreshold = 0;\n     long oldestRITTime = 0;\n+    Map<String, RegionState> ritsOverThreshold = null;\n     int ritThreshold = this.server.getConfiguration().\n       getInt(HConstants.METRICS_RIT_STUCK_WARNING_THRESHOLD, 60000);\n     for (RegionState state: regionStates.getRegionsInTransition()) {\n       totalRITs++;\n       long ritTime = currentTime - state.getStamp();\n       if (ritTime > ritThreshold) { // more than the threshold\n         totalRITsOverThreshold++;\n+        if (ritsOverThreshold == null) {\n+          ritsOverThreshold = new HashMap<>();\n+        }\n+        ritsOverThreshold.put(state.getRegion().getEncodedName(), state);\n       }\n       if (oldestRITTime < ritTime) {\n         oldestRITTime = ritTime;\n       }\n     }\n+    if (LOG.isDebugEnabled() && ritsOverThreshold != null && !ritsOverThreshold.isEmpty()) {\n+      StringBuilder sb = new StringBuilder();\n+      for (String regionName: ritsOverThreshold.keySet()) {", "originalCommit": "ab52ab083cb8b780ae845d5059cee1f0db39932b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36e0655984977ac21814640e715dbf202301146b", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\nindex 0b6e7b10b5..0fdf50b5d9 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n\n@@ -3557,7 +3557,7 @@ public class AssignmentManager extends ZooKeeperListener {\n     }\n     if (LOG.isDebugEnabled() && ritsOverThreshold != null && !ritsOverThreshold.isEmpty()) {\n       StringBuilder sb = new StringBuilder();\n-      for (String regionName: ritsOverThreshold.keySet()) {\n+      for (Map.Entry<String, RegionState> regionName: ritsOverThreshold.entrySet()) {\n         sb.append(regionName).append(\":\")\n           .append(ritsOverThreshold.get(regionName).getState().name()).append(\"\\n\");\n       }\n"}}, {"oid": "36e0655984977ac21814640e715dbf202301146b", "url": "https://github.com/apache/hbase/commit/36e0655984977ac21814640e715dbf202301146b", "message": "HBASE-25329 Dump region hashes in logs for the regions that are stuck in transition for more than a configured amount of time", "committedDate": "2021-01-19T18:31:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDcwMjExOA==", "url": "https://github.com/apache/hbase/pull/2762#discussion_r560702118", "bodyText": "This should be:\n       sb.append(regionName.getKey()).append(\":\")\n          .append(regionName.getValue().getState().name()).append(\"\\n\");", "author": "virajjasani", "createdAt": "2021-01-20T06:12:55Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java", "diffHunk": "@@ -3538,18 +3538,32 @@ public void updateRegionsInTransitionMetrics() {\n     int totalRITs = 0;\n     int totalRITsOverThreshold = 0;\n     long oldestRITTime = 0;\n+    Map<String, RegionState> ritsOverThreshold = null;\n     int ritThreshold = this.server.getConfiguration().\n       getInt(HConstants.METRICS_RIT_STUCK_WARNING_THRESHOLD, 60000);\n     for (RegionState state: regionStates.getRegionsInTransition()) {\n       totalRITs++;\n       long ritTime = currentTime - state.getStamp();\n       if (ritTime > ritThreshold) { // more than the threshold\n         totalRITsOverThreshold++;\n+        if (ritsOverThreshold == null) {\n+          ritsOverThreshold = new HashMap<>();\n+        }\n+        ritsOverThreshold.put(state.getRegion().getEncodedName(), state);\n       }\n       if (oldestRITTime < ritTime) {\n         oldestRITTime = ritTime;\n       }\n     }\n+    if (LOG.isDebugEnabled() && ritsOverThreshold != null && !ritsOverThreshold.isEmpty()) {\n+      StringBuilder sb = new StringBuilder();\n+      for (Map.Entry<String, RegionState> regionName: ritsOverThreshold.entrySet()) {\n+        sb.append(regionName).append(\":\")\n+          .append(ritsOverThreshold.get(regionName).getState().name()).append(\"\\n\");", "originalCommit": "36e0655984977ac21814640e715dbf202301146b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "295f8516d348d6c3ca6bbbee8b1c8df71bc5b7a5", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\nindex 0fdf50b5d9..2b8c521062 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java\n\n@@ -3557,9 +3557,9 @@ public class AssignmentManager extends ZooKeeperListener {\n     }\n     if (LOG.isDebugEnabled() && ritsOverThreshold != null && !ritsOverThreshold.isEmpty()) {\n       StringBuilder sb = new StringBuilder();\n-      for (Map.Entry<String, RegionState> regionName: ritsOverThreshold.entrySet()) {\n-        sb.append(regionName).append(\":\")\n-          .append(ritsOverThreshold.get(regionName).getState().name()).append(\"\\n\");\n+      for (Map.Entry<String, RegionState> rit: ritsOverThreshold.entrySet()) {\n+        sb.append(rit.getKey()).append(\":\")\n+          .append(rit.getValue().getState().name()).append(\"\\n\");\n       }\n       sb.delete(sb.length()-1, sb.length());\n       LOG.debug(\"RITs over threshold: \" + sb.toString());\n"}}, {"oid": "295f8516d348d6c3ca6bbbee8b1c8df71bc5b7a5", "url": "https://github.com/apache/hbase/commit/295f8516d348d6c3ca6bbbee8b1c8df71bc5b7a5", "message": "HBASE-25329 Dump region hashes in logs for the regions that are stuck in transition for more than a configured amount of time", "committedDate": "2021-01-20T06:34:16Z", "type": "commit"}, {"oid": "295f8516d348d6c3ca6bbbee8b1c8df71bc5b7a5", "url": "https://github.com/apache/hbase/commit/295f8516d348d6c3ca6bbbee8b1c8df71bc5b7a5", "message": "HBASE-25329 Dump region hashes in logs for the regions that are stuck in transition for more than a configured amount of time", "committedDate": "2021-01-20T06:34:16Z", "type": "forcePushed"}]}