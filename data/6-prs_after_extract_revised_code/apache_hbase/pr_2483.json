{"pr_number": 2483, "pr_title": "HBASE-25026 - Create a metric to track full region scans RPCs", "pr_createdAt": "2020-09-30T17:25:17Z", "pr_url": "https://github.com/apache/hbase/pull/2483", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcyMzE3OA==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r497723178", "bodyText": "Full Region or full Table?", "author": "saintstack", "createdAt": "2020-09-30T18:41:08Z", "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSource.java", "diffHunk": "@@ -571,6 +571,9 @@\n   String RPC_SCAN_REQUEST_COUNT = \"rpcScanRequestCount\";\n   String RPC_SCAN_REQUEST_COUNT_DESC =\n       \"Number of rpc scan requests this RegionServer has answered.\";\n+  String RPC_FULL_SCAN_REQUEST_COUNT = \"rpcFullScanRequestCount\";\n+  String RPC_FULL_SCAN_REQUEST_COUNT_DESC =\n+      \"Number of rpc scan requests that were possible full region scans.\";", "originalCommit": "16cdf183b73fc2a6f4a5b88cdc5cdca7b7dcaa9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk5NTk2NA==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r497995964", "bodyText": "Looks good. Some nits in below. Main question is if this count has value? If so, how? Thanks.\n@saintstack  - the main reason was that we generally don't get an insight if the user has issued a scan without really setting a start and stop row. Mostly they want a specific set of rows in the scan but they generally miss setting the start and stop row and depend on filters. Though filters are an option but still deciding the rowkeys upfront to ensure we make use of the start and stop row is a good practice. If we have a metric to capture we can atleast indicate the pattern but whether it is really intentional or not may be something which as experts we can decide and inform the user. Also though some time it is intentional it might not be the actual business logic that is doing the scan but a sanity check that the user is running to do some verifications. that is not latency sensitive but still it will evict the cached data which is actually needed for the real latency sensitive queries. In such cases atleast we can suggest that the scan that is doing a full range/table scan can be made not to use the cache by setting scan#setCaching(false)", "author": "ramkrish86", "createdAt": "2020-10-01T05:45:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcyMzE3OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcyMzU2Mw==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r497723563", "bodyText": "No need of space here", "author": "saintstack", "createdAt": "2020-09-30T18:41:45Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -1,4 +1,4 @@\n-/**\n+  /**", "originalCommit": "16cdf183b73fc2a6f4a5b88cdc5cdca7b7dcaa9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a90abf5515dd5963f539aaa339371d1d056d69cc", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java\nindex 3220d1dbb4..32fecb1015 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java\n\n@@ -1,4 +1,4 @@\n-  /**\n+/**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcyNDg4Ng==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r497724886", "bodyText": "Does this need javadoc/comment? It is NOT the same as the RegionInfo#startRow, right? If so, say so (my first though was why this data member when we have this info in RegionInfo... but this is the scan startRow...)", "author": "saintstack", "createdAt": "2020-09-30T18:44:16Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -7030,6 +7030,7 @@ public String toString() {\n     protected Cell joinedContinuationRow = null;\n     private boolean filterClosed = false;\n \n+    protected final byte[] startRow;", "originalCommit": "16cdf183b73fc2a6f4a5b88cdc5cdca7b7dcaa9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwMDQ0NA==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r498500444", "bodyText": "added comment here, thx", "author": "gkanade", "createdAt": "2020-10-01T20:38:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcyNDg4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a90abf5515dd5963f539aaa339371d1d056d69cc", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java\nindex 3220d1dbb4..32fecb1015 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java\n\n@@ -7030,6 +7030,7 @@ public class HRegion implements HeapSize, PropagatingConfigurationObserver, Regi\n     protected Cell joinedContinuationRow = null;\n     private boolean filterClosed = false;\n \n+    // startRow here refers to the start row of scan\n     protected final byte[] startRow;\n     protected final byte[] stopRow;\n     protected final boolean includeStopRow;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcyNjcxMw==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r497726713", "bodyText": "Why exclude meta table scans? Do this check first before doing all the above byte array compares?", "author": "saintstack", "createdAt": "2020-09-30T18:47:15Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java", "diffHunk": "@@ -3498,6 +3501,18 @@ public ScanResponse scan(final RpcController controller, final ScanRequest reque\n       throw new ServiceException(e);\n     }\n     HRegion region = rsh.r;\n+    // If the start row is the actual start Row of the region and end row is actual end row of region\n+    // or\n+    // If the stop is not specified or the stop Row is greater than the end key of the current region\n+    if ((Bytes.equals(rsh.s.getStartRow(), region.getRegionInfo().getStartKey())\n+      && Bytes.equals(rsh.s.getStopRow(), region.getRegionInfo().getEndKey()))\n+      || Bytes.equals(rsh.s.getStopRow(), HConstants.EMPTY_END_ROW)\n+      || (Bytes.compareTo(region.getRegionInfo().getEndKey(), rsh.s.getStopRow()) <= 0\n+      && !Bytes.equals(region.getRegionInfo().getEndKey(), HConstants.EMPTY_END_ROW))) {\n+      if(!region.getTableDescriptor().isMetaTable()) {", "originalCommit": "16cdf183b73fc2a6f4a5b88cdc5cdca7b7dcaa9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwMDkxMw==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r498500913", "bodyText": "As @ramkrish86 mentioned above this is to get insights into possible inadvertent user errors, hence skipping meta. I will sync with Ram to figure out if we should exclude other system tables as well and then move the check accordingly.", "author": "gkanade", "createdAt": "2020-10-01T20:39:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcyNjcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwMTU5Mg==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r498601592", "bodyText": "Ya better to avoid all system table checks", "author": "anoopsjohn", "createdAt": "2020-10-02T03:06:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcyNjcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwMTgzMw==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r498601833", "bodyText": "Is this check going to happen for every scan#next calls? We should do this only once for 1st req which create the scanner on region.  Also will this code get executed for get calls also?", "author": "anoopsjohn", "createdAt": "2020-10-02T03:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcyNjcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY2NjU5NQ==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r498666595", "bodyText": "Currently the number of scan requests that we get is also based on the scan() call that happens at the RsRpcServices. Also if a scan query is spanning across two regions - we wil have 2 RPC requests coming in and among that 1 will be a full region scan. That should still make sense right? Among totalscan Rpc requests how much are full region scans?\nThis is only for scans and not for gets. Should we include gets also - that is generally with fixed start and stop row correct?", "author": "ramkrish86", "createdAt": "2020-10-02T07:51:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcyNjcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM0Mjg3Mw==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r499342873", "bodyText": "region.getRegionInfo().getTable().isSystemTable(). Check for this first before you check for fullRegionScan. That will ensure we do it for the user regions only.", "author": "ramkrish86", "createdAt": "2020-10-05T04:40:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcyNjcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ0NDA3Nw==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r499444077", "bodyText": "Is this check going to happen for every scan#next calls? We should do this only once for 1st req which create the scanner on region.\nI thought about this again. We can account it once only once but if say a scanner calls next() 10 times and every time RsRpcServices#scan() gets called we account the rpc scan request as 10. Now if we account for the new metric only once  then it means 1 out of every 10 scan request is full region scan. Then we are not having a ratio which we want. Instead if we had accounted all 10 as full regoin scan then we can atleast have the correct ratio. Correct me if am wrong.", "author": "ramkrish86", "createdAt": "2020-10-05T08:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcyNjcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM4MTc3OA==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r510381778", "bodyText": "This is now moved to HRegion layer. We check it once when we instantiate the scanner.", "author": "gkanade", "createdAt": "2020-10-22T18:47:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcyNjcxMw=="}], "type": "inlineReview", "revised_code": {"commit": "a90abf5515dd5963f539aaa339371d1d056d69cc", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java\nindex 4a3f23d3e5..0ece789cea 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java\n\n@@ -3504,11 +3504,7 @@ public class RSRpcServices implements HBaseRPCErrorHandler,\n     // If the start row is the actual start Row of the region and end row is actual end row of region\n     // or\n     // If the stop is not specified or the stop Row is greater than the end key of the current region\n-    if ((Bytes.equals(rsh.s.getStartRow(), region.getRegionInfo().getStartKey())\n-      && Bytes.equals(rsh.s.getStopRow(), region.getRegionInfo().getEndKey()))\n-      || Bytes.equals(rsh.s.getStopRow(), HConstants.EMPTY_END_ROW)\n-      || (Bytes.compareTo(region.getRegionInfo().getEndKey(), rsh.s.getStopRow()) <= 0\n-      && !Bytes.equals(region.getRegionInfo().getEndKey(), HConstants.EMPTY_END_ROW))) {\n+    if(rsh.s.isFullRegionScan()){\n       if(!region.getTableDescriptor().isMetaTable()) {\n         rpcFullScanRequestCount.increment();\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwMTM5NQ==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r498601395", "bodyText": "We should not be exposing these in this interface. This interface is exposed to CPs possibly allowing to pollute the keys.\nWe can add a method which can check whether a full region scan or not. The RegionScannerImpl having ref to Scan instance as well as Region so it can check whether full region scan or not and return boolean", "author": "anoopsjohn", "createdAt": "2020-10-02T03:05:07Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScanner.java", "diffHunk": "@@ -115,4 +116,12 @@\n    */\n   boolean nextRaw(List<Cell> result, ScannerContext scannerContext)\n       throws IOException;\n+\n+  default byte[] getStartRow() {", "originalCommit": "1169cf7d697b4c26a6b29a0009f54ca81c87a866", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4NzExMA==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r499087110", "bodyText": "thx for the suggestion - fixed, plz check", "author": "gkanade", "createdAt": "2020-10-02T23:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwMTM5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a90abf5515dd5963f539aaa339371d1d056d69cc", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScanner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScanner.java\nindex 6f3ea9587a..cea7c8189e 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScanner.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScanner.java\n\n@@ -117,11 +117,5 @@ public interface RegionScanner extends InternalScanner {\n   boolean nextRaw(List<Cell> result, ScannerContext scannerContext)\n       throws IOException;\n \n-  default byte[] getStartRow() {\n-    return  HConstants.EMPTY_START_ROW;\n-  }\n-\n-  default byte[] getStopRow() {\n-    return HConstants.EMPTY_END_ROW;\n-  }\n+  boolean isFullRegionScan();\n }\n"}}, {"oid": "a90abf5515dd5963f539aaa339371d1d056d69cc", "url": "https://github.com/apache/hbase/commit/a90abf5515dd5963f539aaa339371d1d056d69cc", "message": "comment and spacing fixes\n\nuse full region scan bool interface", "committedDate": "2020-10-02T23:34:11Z", "type": "forcePushed"}, {"oid": "dd76e750afd026ee340ada2b1e9d5391766473ef", "url": "https://github.com/apache/hbase/commit/dd76e750afd026ee340ada2b1e9d5391766473ef", "message": "use full region scan bool interface\n\nIteration 1\n\ncomment and spacing fixes\n\nuse full region scan bool interface", "committedDate": "2020-10-02T23:36:32Z", "type": "forcePushed"}, {"oid": "6ba4f8acc9fa78096515c4720c1aa62c15973b5d", "url": "https://github.com/apache/hbase/commit/6ba4f8acc9fa78096515c4720c1aa62c15973b5d", "message": "Made user table check cleaner", "committedDate": "2020-10-07T18:55:53Z", "type": "forcePushed"}, {"oid": "9bef35c095668801070e0edb7e3d40e43c9b085e", "url": "https://github.com/apache/hbase/commit/9bef35c095668801070e0edb7e3d40e43c9b085e", "message": "Made check for user table only cleaner", "committedDate": "2020-10-07T19:02:36Z", "type": "forcePushed"}, {"oid": "9e1edc01397151dd5e8de094c7b34106a21d51fa", "url": "https://github.com/apache/hbase/commit/9e1edc01397151dd5e8de094c7b34106a21d51fa", "message": "added asf license message", "committedDate": "2020-10-07T18:55:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYwMzg2NA==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r501603864", "bodyText": "If we are doing this way - then I think it is better to have the default implementation in the interface returning 'false'. So that the downstreamers need not change this code. I think it is still better to have this check in RS (like a Util method)only rather than here because this will have an impact on projects like Phoenix. (because RegionScanner is exposed to CP).", "author": "ramkrish86", "createdAt": "2020-10-08T10:11:10Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScanner.java", "diffHunk": "@@ -115,4 +116,6 @@\n    */\n   boolean nextRaw(List<Cell> result, ScannerContext scannerContext)\n       throws IOException;\n+\n+  boolean isFullRegionScan();", "originalCommit": "89383694c696ba5da0edb1e4bd377533ba60f5e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY2Mjc1OA==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r501662758", "bodyText": "Agree.  After seeing this wanted to say abt def impl in interface (at least)..  But ya these methods in CP exposed interfaces make more work for phoenix kind of CPs which wraps the RegionScanner.  Exposing the user scan or its start/stop rows directly also not correct.  We cleaned all these stuff in 2+ versions.\nWhy cant we do the new metric accounting in lower layer of HRegion ? not in RS", "author": "anoopsjohn", "createdAt": "2020-10-08T11:58:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYwMzg2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM4Mjc0Mg==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r510382742", "bodyText": "Moved metric accounting to HRegion layer now.", "author": "gkanade", "createdAt": "2020-10-22T18:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYwMzg2NA=="}], "type": "inlineReview", "revised_code": {"commit": "3a32de67eef356c82c511df58ee522dfc2ff45a4", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScanner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScanner.java\nindex cea7c8189e..1860d8185e 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScanner.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScanner.java\n\n@@ -116,6 +115,4 @@ public interface RegionScanner extends InternalScanner {\n    */\n   boolean nextRaw(List<Cell> result, ScannerContext scannerContext)\n       throws IOException;\n-\n-  boolean isFullRegionScan();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2ODQ0OA==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r508268448", "bodyText": "Not used.  Do we need this setter?", "author": "anoopsjohn", "createdAt": "2020-10-20T07:26:42Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -9143,4 +9162,8 @@ public void setReadRequestsCount(long readRequestsCount) {\n   public void setWriteRequestsCount(long writeRequestsCount) {\n     this.writeRequestsCount.add(writeRequestsCount);\n   }\n+\n+  public void setFullScanRequestsCount(long fullScanRequestsCount) {", "originalCommit": "d42ca89e1d3511fbdff89f2050093f4d640b6d0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM4MzAxMw==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r510383013", "bodyText": "Removed", "author": "gkanade", "createdAt": "2020-10-22T18:49:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2ODQ0OA=="}], "type": "inlineReview", "revised_code": {"commit": "3a32de67eef356c82c511df58ee522dfc2ff45a4", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java\nindex c045f0d5c7..91775ff8e8 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java\n\n@@ -9162,8 +9155,4 @@ public class HRegion implements HeapSize, PropagatingConfigurationObserver, Regi\n   public void setWriteRequestsCount(long writeRequestsCount) {\n     this.writeRequestsCount.add(writeRequestsCount);\n   }\n-\n-  public void setFullScanRequestsCount(long fullScanRequestsCount) {\n-    this.fullScanRequestsCount.add(fullScanRequestsCount);\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2ODk3Nw==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r508268977", "bodyText": "Nit :  missing code formatting", "author": "anoopsjohn", "createdAt": "2020-10-20T07:27:39Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java", "diffHunk": "@@ -3498,6 +3501,12 @@ public ScanResponse scan(final RpcController controller, final ScanRequest reque\n       throw new ServiceException(e);\n     }\n     HRegion region = rsh.r;\n+    // If the start row is the actual start Row of the region and end row is actual end row of region\n+    // or\n+    // If the stop is not specified or the stop Row is greater than the end key of the current region\n+    if(!region.getRegionInfo().getTable().isSystemTable()){", "originalCommit": "d42ca89e1d3511fbdff89f2050093f4d640b6d0d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a32de67eef356c82c511df58ee522dfc2ff45a4", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java\nindex ad4e28227b..b702203bf5 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java\n\n@@ -3501,12 +3501,6 @@ public class RSRpcServices implements HBaseRPCErrorHandler,\n       throw new ServiceException(e);\n     }\n     HRegion region = rsh.r;\n-    // If the start row is the actual start Row of the region and end row is actual end row of region\n-    // or\n-    // If the stop is not specified or the stop Row is greater than the end key of the current region\n-    if(!region.getRegionInfo().getTable().isSystemTable()){\n-      rpcFullScanRequestCount.add(rsh.r.getFullScanRequestsCount());\n-    }\n     String scannerName = rsh.scannerName;\n     LeaseManager.Lease lease;\n     try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2OTE1OA==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r508269158", "bodyText": "Unused import", "author": "anoopsjohn", "createdAt": "2020-10-20T07:27:53Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScanner.java", "diffHunk": "@@ -23,6 +23,7 @@\n \n import org.apache.hadoop.hbase.Cell;\n import org.apache.hadoop.hbase.HBaseInterfaceAudience;\n+import org.apache.hadoop.hbase.HConstants;", "originalCommit": "d42ca89e1d3511fbdff89f2050093f4d640b6d0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM4MzEyNQ==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r510383125", "bodyText": "Removed", "author": "gkanade", "createdAt": "2020-10-22T18:49:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2OTE1OA=="}], "type": "inlineReview", "revised_code": {"commit": "3a32de67eef356c82c511df58ee522dfc2ff45a4", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScanner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScanner.java\nindex 04ea1f41c8..1860d8185e 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScanner.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScanner.java\n\n@@ -23,7 +23,6 @@ import java.util.List;\n \n import org.apache.hadoop.hbase.Cell;\n import org.apache.hadoop.hbase.HBaseInterfaceAudience;\n-import org.apache.hadoop.hbase.HConstants;\n import org.apache.hadoop.hbase.client.RegionInfo;\n import org.apache.yetus.audience.InterfaceAudience;\n import org.apache.yetus.audience.InterfaceStability;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2OTcyMQ==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r508269721", "bodyText": "nit format\nif (isFullRegionScan()) {", "author": "anoopsjohn", "createdAt": "2020-10-20T07:28:53Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -7238,6 +7246,9 @@ public boolean nextRaw(List<Cell> outResults, ScannerContext scannerContext)\n         rsServices.getMetrics().updateReadQueryMeter(getRegionInfo().getTable());\n       }\n \n+      if(isFullRegionScan()) {", "originalCommit": "d42ca89e1d3511fbdff89f2050093f4d640b6d0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM4MzMxNg==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r510383316", "bodyText": "Remove now", "author": "gkanade", "createdAt": "2020-10-22T18:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2OTcyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "3a32de67eef356c82c511df58ee522dfc2ff45a4", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java\nindex c045f0d5c7..91775ff8e8 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java\n\n@@ -7246,9 +7250,6 @@ public class HRegion implements HeapSize, PropagatingConfigurationObserver, Regi\n         rsServices.getMetrics().updateReadQueryMeter(getRegionInfo().getTable());\n       }\n \n-      if(isFullRegionScan()) {\n-        fullScanRequestsCount.increment();\n-      }\n       // If the size limit was reached it means a partial Result is being returned. Returning a\n       // partial Result means that we should not reset the filters; filters should only be reset in\n       // between rows\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2OTk3NQ==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r508269975", "bodyText": "Can be private now?", "author": "anoopsjohn", "createdAt": "2020-10-20T07:29:17Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -7699,6 +7710,14 @@ public void run() throws IOException {\n       // callback\n       this.close();\n     }\n+\n+    public boolean isFullRegionScan() {", "originalCommit": "d42ca89e1d3511fbdff89f2050093f4d640b6d0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM4MzUwMg==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r510383502", "bodyText": "No longer a method, added check directly before scanner instantiation", "author": "gkanade", "createdAt": "2020-10-22T18:50:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI2OTk3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3a32de67eef356c82c511df58ee522dfc2ff45a4", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java\nindex c045f0d5c7..91775ff8e8 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java\n\n@@ -7710,14 +7711,6 @@ public class HRegion implements HeapSize, PropagatingConfigurationObserver, Regi\n       // callback\n       this.close();\n     }\n-\n-    public boolean isFullRegionScan() {\n-      return ((Bytes.equals(this.startRow, region.getRegionInfo().getStartKey())\n-        && Bytes.equals(this.stopRow, region.getRegionInfo().getEndKey()))\n-        || Bytes.equals(this.stopRow, HConstants.EMPTY_END_ROW)\n-        || (Bytes.compareTo(region.getRegionInfo().getEndKey(), this.stopRow) <= 0\n-        && !Bytes.equals(region.getRegionInfo().getEndKey(), HConstants.EMPTY_END_ROW)));\n-    }\n   }\n \n   // Utility methods\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0Mjk3Mw==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r509142973", "bodyText": "Can add a comment saying what all we count as full scan..  the check is bit complex,.. So nice code level comment helps..  Also we can do this boolean eval at create of scan itself and use that boolean state? No need to do all thse bytes[] checks for every next() call?", "author": "anoopsjohn", "createdAt": "2020-10-21T09:49:03Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -3075,6 +3080,13 @@ private RegionScannerImpl getScanner(Scan scan, List<KeyValueScanner> additional\n           checkFamily(family);\n         }\n       }\n+      if((Bytes.equals(scan.getStartRow(), getRegionInfo().getStartKey())", "originalCommit": "a2a655de440aabb4b5d7612cce685c16bcc3b0e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM4OTg2Mw==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r510389863", "bodyText": "done, now it is at time scanner instantiated only.", "author": "gkanade", "createdAt": "2020-10-22T19:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0Mjk3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3a32de67eef356c82c511df58ee522dfc2ff45a4", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java\nindex ceedf340bd..91775ff8e8 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java\n\n@@ -3080,12 +3075,17 @@ public class HRegion implements HeapSize, PropagatingConfigurationObserver, Regi\n           checkFamily(family);\n         }\n       }\n-      if((Bytes.equals(scan.getStartRow(), getRegionInfo().getStartKey())\n-        && Bytes.equals(scan.getStopRow(), getRegionInfo().getEndKey()))\n-        || Bytes.equals(scan.getStopRow(), HConstants.EMPTY_END_ROW)\n-        || (Bytes.compareTo(getRegionInfo().getEndKey(), scan.getStopRow()) <= 0\n-        && !Bytes.equals(getRegionInfo().getEndKey(), HConstants.EMPTY_END_ROW))) {\n-        fullScanRequestsCount.increment();\n+      if(!this.getRegionInfo().getTable().isSystemTable()) {\n+        if ((Bytes.equals(scan.getStartRow(), getRegionInfo().getStartKey()) && Bytes\n+          .equals(scan.getStopRow(), getRegionInfo().getEndKey())) || Bytes\n+          .equals(scan.getStopRow(), HConstants.EMPTY_END_ROW) || (\n+          Bytes.compareTo(getRegionInfo().getEndKey(), scan.getStopRow()) <= 0 && !Bytes\n+            .equals(getRegionInfo().getEndKey(), HConstants.EMPTY_END_ROW))) {\n+          HRegionServer hrs = (HRegionServer) this.getRegionServerServices();\n+          if(hrs != null) {\n+            hrs.getRSRpcServices().rpcFullScanRequestCount.increment();\n+          }\n+        }\n       }\n       return instantiateRegionScanner(scan, additionalScanners, nonceGroup, nonce);\n     } finally {\n"}}, {"oid": "3a32de67eef356c82c511df58ee522dfc2ff45a4", "url": "https://github.com/apache/hbase/commit/3a32de67eef356c82c511df58ee522dfc2ff45a4", "message": "Account at HRegion level", "committedDate": "2020-10-22T18:44:37Z", "type": "forcePushed"}, {"oid": "f71ffb37481dd021dc7a1a50e07462c701bb8eef", "url": "https://github.com/apache/hbase/commit/f71ffb37481dd021dc7a1a50e07462c701bb8eef", "message": "Account at HRegion level", "committedDate": "2020-10-22T19:00:26Z", "type": "forcePushed"}, {"oid": "365363139fef83296a6c890afa721fc62fa43861", "url": "https://github.com/apache/hbase/commit/365363139fef83296a6c890afa721fc62fa43861", "message": "back to accounting at RSRpcServices", "committedDate": "2020-11-10T19:35:46Z", "type": "forcePushed"}, {"oid": "28772ff4ece7fb5cc7c3359afeabb477e7810e02", "url": "https://github.com/apache/hbase/commit/28772ff4ece7fb5cc7c3359afeabb477e7810e02", "message": "back to accounting at RSRpcServices", "committedDate": "2020-11-10T20:00:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxNzk1NA==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r521517954", "bodyText": "This might not be needed. anyway we have inited to false na.", "author": "ramkrish86", "createdAt": "2020-11-11T17:24:27Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java", "diffHunk": "@@ -3167,7 +3187,18 @@ private RegionScannerHolder newRegionScanner(ScanRequest request, ScanResponse.B\n     builder.setMvccReadPoint(scanner.getMvccReadPoint());\n     builder.setTtl(scannerLeaseTimeoutPeriod);\n     String scannerName = String.valueOf(scannerId);\n-    return addScanner(scannerName, scanner, shipper, region, scan.isNeedCursorResult());\n+\n+    boolean isFullRegionScan = false;\n+    if(!region.getRegionInfo().getTable().isSystemTable()) {\n+      if(checkFullRegionScan(scan, region)){\n+        isFullRegionScan = true;\n+      } else {\n+        isFullRegionScan = false;\n+      }\n+    } else {\n+      isFullRegionScan = false;", "originalCommit": "28772ff4ece7fb5cc7c3359afeabb477e7810e02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU3OTcxMw==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r521579713", "bodyText": "thx for the catch, yes fixed.", "author": "gkanade", "createdAt": "2020-11-11T19:11:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxNzk1NA=="}], "type": "inlineReview", "revised_code": {"commit": "6939673fa895671f8c4de4a5e2a0804511431b68", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java\nindex 459e5ef81b..923ab107d2 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java\n\n@@ -3188,17 +3187,11 @@ public class RSRpcServices implements HBaseRPCErrorHandler,\n     builder.setTtl(scannerLeaseTimeoutPeriod);\n     String scannerName = String.valueOf(scannerId);\n \n-    boolean isFullRegionScan = false;\n-    if(!region.getRegionInfo().getTable().isSystemTable()) {\n-      if(checkFullRegionScan(scan, region)){\n-        isFullRegionScan = true;\n-      } else {\n-        isFullRegionScan = false;\n-      }\n-    } else {\n-      isFullRegionScan = false;\n-    }\n-    return addScanner(scannerName, scanner, shipper, region, scan.isNeedCursorResult(), isFullRegionScan);\n+    boolean fullRegionScan = !region.getRegionInfo().getTable().isSystemTable() &&\n+      isFullRegionScan(scan, region);\n+\n+    return addScanner(scannerName, scanner, shipper, region, scan.isNeedCursorResult(),\n+      fullRegionScan);\n   }\n \n   private void checkScanNextCallSeq(ScanRequest request, RegionScannerHolder rsh)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxODM0MA==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r521518340", "bodyText": "Ya this looks good. So this is happening only for scan na ?", "author": "ramkrish86", "createdAt": "2020-11-11T17:25:06Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java", "diffHunk": "@@ -3481,6 +3512,9 @@ public ScanResponse scan(final RpcController controller, final ScanRequest reque\n       }\n       throw new ServiceException(e);\n     }\n+    if(rsh.isFullRegionScan) {\n+      rpcFullScanRequestCount.increment();", "originalCommit": "28772ff4ece7fb5cc7c3359afeabb477e7810e02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUzMTEyOA==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r521531128", "bodyText": "Ya this is in RsRpcServices under scan() so should be ok. One thing I noticed is that - once  a scan is created and a next() call happens does the rpcScanRequestCount becomes 2 or is it 1?", "author": "ramkrish86", "createdAt": "2020-11-11T17:46:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxODM0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU3MDExMw==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r521570113", "bodyText": "this is called in the scan method, same place as where we increment rpcScanRequestCount, so yes it should happen only for scan. @anoopsjohn to verify.", "author": "gkanade", "createdAt": "2020-11-11T18:53:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxODM0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzODQzMA==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r521838430", "bodyText": "Nit :   if( ->   if (", "author": "anoopsjohn", "createdAt": "2020-11-12T04:53:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxODM0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1NDEzMQ==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r522354131", "bodyText": "fixed", "author": "gkanade", "createdAt": "2020-11-12T19:16:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxODM0MA=="}], "type": "inlineReview", "revised_code": {"commit": "6939673fa895671f8c4de4a5e2a0804511431b68", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java\nindex 459e5ef81b..923ab107d2 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java\n\n@@ -3512,7 +3505,7 @@ public class RSRpcServices implements HBaseRPCErrorHandler,\n       }\n       throw new ServiceException(e);\n     }\n-    if(rsh.isFullRegionScan) {\n+    if (rsh.isFullRegionScan) {\n       rpcFullScanRequestCount.increment();\n     }\n     HRegion region = rsh.r;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzNzM2OQ==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r521837369", "bodyText": "Nit: whitespace lines", "author": "anoopsjohn", "createdAt": "2020-11-12T04:49:55Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java", "diffHunk": "@@ -1336,14 +1342,31 @@ private RegionScannerHolder addScanner(String scannerName, RegionScanner s, Ship\n     } else {\n       closeCallback = new RegionScannerCloseCallBack(s);\n     }\n+", "originalCommit": "798d8dfb314a141b9d9991d122a884bd5c79bd2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1Mzk2Nw==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r522353967", "bodyText": "fixed", "author": "gkanade", "createdAt": "2020-11-12T19:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzNzM2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6939673fa895671f8c4de4a5e2a0804511431b68", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java\nindex d4f9d3f562..923ab107d2 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java\n\n@@ -1343,17 +1343,16 @@ public class RSRpcServices implements HBaseRPCErrorHandler,\n       closeCallback = new RegionScannerCloseCallBack(s);\n     }\n \n-\n-\n     RegionScannerHolder rsh =\n-        new RegionScannerHolder(scannerName, s, r, closeCallback, shippedCallback, needCursor, isFullRegionScan);\n+        new RegionScannerHolder(scannerName, s, r, closeCallback, shippedCallback,\n+          needCursor, isFullRegionScan);\n     RegionScannerHolder existing = scanners.putIfAbsent(scannerName, rsh);\n     assert existing == null : \"scannerId must be unique within regionserver's whole lifecycle! \" +\n       scannerName;\n     return rsh;\n   }\n \n-  private boolean checkFullRegionScan(Scan scan, HRegion region) {\n+  private boolean isFullRegionScan(Scan scan, HRegion region) {\n     // If the scan start row equals or less than the start key of the region\n     // and stop row greater than equals end key (if stop row present)\n     // or if the stop row is empty\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzNzQ5MA==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r521837490", "bodyText": "nit: Format line so that max length is 100", "author": "anoopsjohn", "createdAt": "2020-11-12T04:50:20Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java", "diffHunk": "@@ -1336,14 +1342,31 @@ private RegionScannerHolder addScanner(String scannerName, RegionScanner s, Ship\n     } else {\n       closeCallback = new RegionScannerCloseCallBack(s);\n     }\n+\n+\n+\n     RegionScannerHolder rsh =\n-        new RegionScannerHolder(scannerName, s, r, closeCallback, shippedCallback, needCursor);\n+        new RegionScannerHolder(scannerName, s, r, closeCallback, shippedCallback, needCursor, isFullRegionScan);", "originalCommit": "798d8dfb314a141b9d9991d122a884bd5c79bd2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1MzkwMg==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r522353902", "bodyText": "fixed", "author": "gkanade", "createdAt": "2020-11-12T19:15:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzNzQ5MA=="}], "type": "inlineReview", "revised_code": {"commit": "6939673fa895671f8c4de4a5e2a0804511431b68", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java\nindex d4f9d3f562..923ab107d2 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java\n\n@@ -1343,17 +1343,16 @@ public class RSRpcServices implements HBaseRPCErrorHandler,\n       closeCallback = new RegionScannerCloseCallBack(s);\n     }\n \n-\n-\n     RegionScannerHolder rsh =\n-        new RegionScannerHolder(scannerName, s, r, closeCallback, shippedCallback, needCursor, isFullRegionScan);\n+        new RegionScannerHolder(scannerName, s, r, closeCallback, shippedCallback,\n+          needCursor, isFullRegionScan);\n     RegionScannerHolder existing = scanners.putIfAbsent(scannerName, rsh);\n     assert existing == null : \"scannerId must be unique within regionserver's whole lifecycle! \" +\n       scannerName;\n     return rsh;\n   }\n \n-  private boolean checkFullRegionScan(Scan scan, HRegion region) {\n+  private boolean isFullRegionScan(Scan scan, HRegion region) {\n     // If the scan start row equals or less than the start key of the region\n     // and stop row greater than equals end key (if stop row present)\n     // or if the stop row is empty\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzNzgxMQ==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r521837811", "bodyText": "nit : format missing.  there should be a space between if and (", "author": "anoopsjohn", "createdAt": "2020-11-12T04:51:46Z", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java", "diffHunk": "@@ -3164,7 +3187,14 @@ private RegionScannerHolder newRegionScanner(ScanRequest request, ScanResponse.B\n     builder.setMvccReadPoint(scanner.getMvccReadPoint());\n     builder.setTtl(scannerLeaseTimeoutPeriod);\n     String scannerName = String.valueOf(scannerId);\n-    return addScanner(scannerName, scanner, shipper, region, scan.isNeedCursorResult());\n+\n+    boolean isFullRegionScan = false;\n+    if(!region.getRegionInfo().getTable().isSystemTable()) {", "originalCommit": "798d8dfb314a141b9d9991d122a884bd5c79bd2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzODI0NQ==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r521838245", "bodyText": "BTW this can be single line simply\nboolean isFullRegionScan = !region.getRegionInfo().getTable().isSystemTable() && checkFullRegionScan(scan, region);\ncheckFullRegionScan ->  isFullRegionScan", "author": "anoopsjohn", "createdAt": "2020-11-12T04:53:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzNzgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1MzgyNg==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r522353826", "bodyText": "done, didnt get the last line of your comment", "author": "gkanade", "createdAt": "2020-11-12T19:15:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzNzgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzNDk1MQ==", "url": "https://github.com/apache/hbase/pull/2483#discussion_r523234951", "bodyText": "fixed", "author": "gkanade", "createdAt": "2020-11-13T21:12:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzNzgxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "6939673fa895671f8c4de4a5e2a0804511431b68", "chunk": "diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java\nindex d4f9d3f562..923ab107d2 100644\n--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java\n+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java\n\n@@ -3188,13 +3187,11 @@ public class RSRpcServices implements HBaseRPCErrorHandler,\n     builder.setTtl(scannerLeaseTimeoutPeriod);\n     String scannerName = String.valueOf(scannerId);\n \n-    boolean isFullRegionScan = false;\n-    if(!region.getRegionInfo().getTable().isSystemTable()) {\n-      if(checkFullRegionScan(scan, region)){\n-        isFullRegionScan = true;\n-      }\n-    }\n-    return addScanner(scannerName, scanner, shipper, region, scan.isNeedCursorResult(), isFullRegionScan);\n+    boolean fullRegionScan = !region.getRegionInfo().getTable().isSystemTable() &&\n+      isFullRegionScan(scan, region);\n+\n+    return addScanner(scannerName, scanner, shipper, region, scan.isNeedCursorResult(),\n+      fullRegionScan);\n   }\n \n   private void checkScanNextCallSeq(ScanRequest request, RegionScannerHolder rsh)\n"}}, {"oid": "6939673fa895671f8c4de4a5e2a0804511431b68", "url": "https://github.com/apache/hbase/commit/6939673fa895671f8c4de4a5e2a0804511431b68", "message": "Iteration 1\n\nAdd new metric rpcFullScanRequestCount to track number of requests that\nare full region scans. Can be used to notify user to check if this is\ntruly intended", "committedDate": "2020-11-13T21:15:04Z", "type": "forcePushed"}, {"oid": "c5cbf0db1d9674ea3228969582ea49f0dc41cade", "url": "https://github.com/apache/hbase/commit/c5cbf0db1d9674ea3228969582ea49f0dc41cade", "message": "Iteration 1\n\nAdd new metric rpcFullScanRequestCount to track number of requests that\nare full region scans. Can be used to notify user to check if this is\ntruly intended", "committedDate": "2020-11-16T19:32:01Z", "type": "commit"}, {"oid": "c5cbf0db1d9674ea3228969582ea49f0dc41cade", "url": "https://github.com/apache/hbase/commit/c5cbf0db1d9674ea3228969582ea49f0dc41cade", "message": "Iteration 1\n\nAdd new metric rpcFullScanRequestCount to track number of requests that\nare full region scans. Can be used to notify user to check if this is\ntruly intended", "committedDate": "2020-11-16T19:32:01Z", "type": "forcePushed"}]}