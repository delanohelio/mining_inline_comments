{"pr_number": 13355, "pr_title": "Receipt design changes FormRecognizer", "pr_createdAt": "2020-07-21T01:52:43Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/13355", "timeline": [{"oid": "dd6839c99b54003fc6f9dfd3d0272623d110806b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dd6839c99b54003fc6f9dfd3d0272623d110806b", "message": "receipt design changes", "committedDate": "2020-07-21T01:51:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc4OTI3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r457789271", "bodyText": "@srnagar @JonathanGiles Confirming if this ^^ is how we would be using the FormField<T> for strongly typed examples?\nSince we don't have any T value, still would need to extract the corresponding asString, or asX methods.", "author": "samvaity", "createdAt": "2020-07-21T01:53:59Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/StronglyTypedRecognizedForm.java", "diffHunk": "@@ -41,36 +41,40 @@ public static void main(final String[] args) {\n             System.out.printf(\"----------- Recognized receipt info for page %d -----------%n\", i);\n             // Use Receipt model transform the recognized form to strongly typed US receipt fields\n             Receipt usReceipt = new Receipt(recognizedForm);\n-            System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\", usReceipt.getMerchantName().getValue(),\n+            System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\", usReceipt.getMerchantName().getFieldValue(),\n                 usReceipt.getMerchantName().getConfidence());\n             System.out.printf(\"Merchant Address: %s, confidence: %.2f%n\",\n-                usReceipt.getMerchantAddress().getValue(),\n+                usReceipt.getMerchantAddress().getFieldValue(),\n                 usReceipt.getMerchantAddress().getConfidence());\n+            // It will have to be this way?\n+            // System.out.printf(\"Merchant Address: %s, confidence: %.2f%n\",\n+            //     usReceipt.getMerchantAddress().getFieldValue().asString(),\n+            //     usReceipt.getMerchantAddress().getConfidence());", "originalCommit": "dd6839c99b54003fc6f9dfd3d0272623d110806b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxNjE1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458516159", "bodyText": "I don't think the generic type <T> is useful if the user still has to do getFieldValue().asString(). I think we are trying to make FormField work both ways and is causing this issue.\nHave you considered the approach below? It's not ideal but a new type that's defined once can reduce the burden on the user. They'll not have to repeatedly call getValue().asType() method which is going to be accessed a lot more frequently.\n// Receipt type\npublic final class Receipt {\n    private ReceiptType receiptType;\n    private TypedFormField<String> merchantAddress; // return a different form field type\n    \n    public Receipt(RecognizedForm recognizedForm) {\n\n       for (Map.Entry<String, FormField> entry : recognizedForm.getFields().entrySet()) {\n            String key = entry.getKey();\n            FormField fieldValue = entry.getValue();\n            switch (key) {\n                case \"MerchantAddress\":\n                    merchantAddress = new TypedFormField(fieldValue, String.class);\n                    break;\n                \n                default:\n                    break;\n            }\n        }\n        \n    }\n\n    // getter and setters here\n    public TypedFormField<String> getMerchantAddress() {\n         return merchantAddress;\n    }\n}\n\n-------------------------------------------\n\n// Strongly typed form field\npublic class TypedFormField<T> { // with a better class name\n\n    private final FormField formField;\n    private final Class<T> type;\n\n    public TypedFormField(FormField formField, Class<T> type) {\n        this.formField = formField;\n        this.type = type;\n    }\n\n    public T getValue() {\n        if (formField.getValueType() == FieldValueType.STRING && type.getClass().equals(String.class)) {\n            return formField.getValue().asDate();\n        }\n        throw new IllegalStateException(\"Type mismatch error\");\n    }\n   \n    public float getConfidence() {\n        return this.formField.getConfidence();\n    }\n \n}\n-------------------------------------------\n// User code\nReceipt usReceipt = new Receipt(recognizedForm);\nString address = usReceipt.getMerchantAddress().getValue()\nfloat confidence = usReceipt.getMerchantAddress().getConfidence();", "author": "srnagar", "createdAt": "2020-07-22T03:44:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc4OTI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "59505396dac31d36c1e8cbb7df739b9e2bc66e3c", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/StronglyTypedRecognizedForm.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/StronglyTypedRecognizedForm.java\nindex 93ccffd75f7..47478bd215a 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/StronglyTypedRecognizedForm.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/StronglyTypedRecognizedForm.java\n\n@@ -41,40 +41,40 @@ public class StronglyTypedRecognizedForm {\n             System.out.printf(\"----------- Recognized receipt info for page %d -----------%n\", i);\n             // Use Receipt model transform the recognized form to strongly typed US receipt fields\n             Receipt usReceipt = new Receipt(recognizedForm);\n-            System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\", usReceipt.getMerchantName().getFieldValue(),\n+            System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\", usReceipt.getMerchantName().getValue(),\n                 usReceipt.getMerchantName().getConfidence());\n             System.out.printf(\"Merchant Address: %s, confidence: %.2f%n\",\n-                usReceipt.getMerchantAddress().getFieldValue(),\n+                usReceipt.getMerchantAddress().getValue(),\n                 usReceipt.getMerchantAddress().getConfidence());\n             // It will have to be this way?\n             // System.out.printf(\"Merchant Address: %s, confidence: %.2f%n\",\n             //     usReceipt.getMerchantAddress().getFieldValue().asString(),\n             //     usReceipt.getMerchantAddress().getConfidence());\n             System.out.printf(\"Merchant Phone Number %s, confidence: %.2f%n\",\n-                usReceipt.getMerchantPhoneNumber().getFieldValue(), usReceipt.getMerchantPhoneNumber().getConfidence());\n-            System.out.printf(\"Total: %.2f confidence: %.2f%n\", usReceipt.getTotal().getFieldValue(),\n+                usReceipt.getMerchantPhoneNumber().getValue(), usReceipt.getMerchantPhoneNumber().getConfidence());\n+            System.out.printf(\"Total: %.2f confidence: %.2f%n\", usReceipt.getTotal().getValue(),\n                 usReceipt.getTotal().getConfidence());\n             System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n-                usReceipt.getTransactionDate().getFieldValue(), usReceipt.getTransactionDate().getConfidence());\n+                usReceipt.getTransactionDate().getValue(), usReceipt.getTransactionDate().getConfidence());\n             System.out.printf(\"Transaction Time: %s, confidence: %.2f%n\",\n-                usReceipt.getTransactionTime().getFieldValue(), usReceipt.getTransactionTime().getConfidence());\n+                usReceipt.getTransactionTime().getValue(), usReceipt.getTransactionTime().getConfidence());\n             System.out.printf(\"Receipt Items: %n\");\n             usReceipt.getReceiptItems().forEach(receiptItem -> {\n                 if (receiptItem.getName() != null) {\n-                    System.out.printf(\"Name: %s, confidence: %.2f%n\", receiptItem.getName().getFieldValue(),\n+                    System.out.printf(\"Name: %s, confidence: %.2f%n\", receiptItem.getName().getValue(),\n                         receiptItem.getName().getConfidence());\n                 }\n                 if (receiptItem.getQuantity() != null) {\n-                    System.out.printf(\"Quantity: %f, confidence: %.2f%n\", receiptItem.getQuantity().getFieldValue(),\n+                    System.out.printf(\"Quantity: %f, confidence: %.2f%n\", receiptItem.getQuantity().getValue(),\n                         receiptItem.getQuantity().getConfidence());\n                 }\n                 if (receiptItem.getPrice() != null) {\n-                    System.out.printf(\"Price: %f, confidence: %.2f%n\", receiptItem.getPrice().getFieldValue(),\n+                    System.out.printf(\"Price: %f, confidence: %.2f%n\", receiptItem.getPrice().getValue(),\n                         receiptItem.getPrice().getConfidence());\n                 }\n                 if (receiptItem.getTotalPrice() != null) {\n                     System.out.printf(\"Total Price: %f, confidence: %.2f%n\",\n-                        receiptItem.getTotalPrice().getFieldValue(), receiptItem.getTotalPrice().getConfidence());\n+                        receiptItem.getTotalPrice().getValue(), receiptItem.getTotalPrice().getConfidence());\n                 }\n             });\n             System.out.println(\"-----------------------------------\");\n"}}, {"oid": "59505396dac31d36c1e8cbb7df739b9e2bc66e3c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/59505396dac31d36c1e8cbb7df739b9e2bc66e3c", "message": "getFieldValue --> getValue()", "committedDate": "2020-07-21T02:00:54Z", "type": "commit"}, {"oid": "322357220964594bcf22860894c521a3c8e0407d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/322357220964594bcf22860894c521a3c8e0407d", "message": "revert impl file changes", "committedDate": "2020-07-21T02:23:13Z", "type": "commit"}, {"oid": "709203a82e4c9227d7e813a8829dcc9a7b97d416", "url": "https://github.com/Azure/azure-sdk-for-java/commit/709203a82e4c9227d7e813a8829dcc9a7b97d416", "message": "checkstyle fix", "committedDate": "2020-07-21T17:16:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzNDE2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458434163", "bodyText": "nit: dot might need to be at beginning of line for style consistency.", "author": "mssfang", "createdAt": "2020-07-21T22:51:21Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -244,39 +244,57 @@ private Transforms() {\n         FormField<?> value;\n         switch (fieldValue.getType()) {\n             case PHONE_NUMBER:\n-                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, fieldValue.getValuePhoneNumber(), valueText, FieldValueType.PHONE_NUMBER);\n+                value = new FormField<>(key, labelText, valueText, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.PHONE_NUMBER).", "originalCommit": "709203a82e4c9227d7e813a8829dcc9a7b97d416", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3c4593ee6e69ed6000d978d46281284d42d0cd9", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java\nindex 1e9b00a65ee..429032dc7af 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java\n\n@@ -244,56 +245,73 @@ final class Transforms {\n         FormField<?> value;\n         switch (fieldValue.getType()) {\n             case PHONE_NUMBER:\n-                value = new FormField<>(key, labelText, valueText, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.PHONE_NUMBER).\n-                setFormFieldPhoneNumber(fieldValue.getValuePhoneNumber()), setDefaultConfidenceValue(fieldValue.getConfidence())\n-                );\n+                value = new FormField<>(key, labelText, valueText,\n+                    new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.PHONE_NUMBER)\n+                        .setFormFieldPhoneNumber(fieldValue.getValuePhoneNumber()),\n+                    setDefaultConfidenceValue(fieldValue.getConfidence()));\n                 break;\n             case STRING:\n-                value = new FormField<>(key, labelText, valueText, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.STRING)\n-                .setFormFieldString(fieldValue.getValueString()), setDefaultConfidenceValue(fieldValue.getConfidence())\n-                );\n+                value = new FormField<>(key, labelText, valueText,\n+                    new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.STRING)\n+                        .setFormFieldString(fieldValue.getValueString()),\n+                    setDefaultConfidenceValue(fieldValue.getConfidence()));\n                 break;\n             case TIME:\n                 LocalTime fieldTime = fieldValue.getValueTime() == null ? null : LocalTime\n                     .parse(fieldValue.getValueTime(), DateTimeFormatter.ofPattern(\"HH:mm:ss\"));\n-                value = new FormField<>(key, labelText, valueText, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.TIME)\n-                .setFormFieldTime(fieldTime), setDefaultConfidenceValue(fieldValue.getConfidence())\n-                );\n+                value = new FormField<>(key, labelText, valueText,\n+                    new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.TIME)\n+                        .setFormFieldTime(fieldTime), setDefaultConfidenceValue(fieldValue.getConfidence()));\n                 break;\n             case DATE:\n-                value = new FormField<>(key, labelText, valueText, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.DATE)\n-                .setFormFieldDate(fieldValue.getValueDate()), setDefaultConfidenceValue(fieldValue.getConfidence())\n+                value = new FormField<>(key, labelText, valueText,\n+                    new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.DATE)\n+                        .setFormFieldDate(fieldValue.getValueDate()),\n+                    setDefaultConfidenceValue(fieldValue.getConfidence())\n                 );\n                 break;\n             case INTEGER:\n                 com.azure.ai.formrecognizer.models.FieldValue longFieldValue;\n                 // TODO (savaity): service bug\n                 if (fieldValue.getValueInteger() == null) {\n-                    longFieldValue = new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.LONG).setFormFieldLong(null);\n+                    longFieldValue =\n+                        new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.LONG).setFormFieldLong(null);\n                 } else {\n-                    longFieldValue = new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.LONG).setFormFieldLong(Long.valueOf(fieldValue.getValueInteger()));\n+                    longFieldValue =\n+                        new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.LONG)\n+                            .setFormFieldLong(Long.valueOf(fieldValue.getValueInteger()));\n                 }\n-                value = new FormField<>(key, labelText, valueText, longFieldValue, setDefaultConfidenceValue(fieldValue.getConfidence())\n+                value = new FormField<>(key, labelText, valueText, longFieldValue,\n+                    setDefaultConfidenceValue(fieldValue.getConfidence())\n                 );\n                 break;\n             case NUMBER:\n                 com.azure.ai.formrecognizer.models.FieldValue doubleFieldValue;\n                 // TODO (savaity): service bug\n                 if (fieldValue.getValueNumber() == null) {\n-                    doubleFieldValue = new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.DOUBLE).setFormFieldDouble(null);\n+                    doubleFieldValue =\n+                        new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.DOUBLE)\n+                            .setFormFieldDouble(null);\n                 } else {\n-                    doubleFieldValue = new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.DOUBLE).setFormFieldDouble(Double.valueOf(fieldValue.getValueNumber()));\n+                    doubleFieldValue =\n+                        new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.DOUBLE)\n+                            .setFormFieldDouble(Double.valueOf(fieldValue.getValueNumber()));\n                 }\n-                value = new FormField<>(key, labelText, valueText, doubleFieldValue, setDefaultConfidenceValue(fieldValue.getConfidence()));\n+                value = new FormField<>(key, labelText, valueText, doubleFieldValue,\n+                    setDefaultConfidenceValue(fieldValue.getConfidence()));\n                 break;\n             case ARRAY:\n-                value = new FormField<>(key, null, null, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.LIST)\n-                    .setFormFieldList(toFormFieldArray(fieldValue.getValueArray(), readResults)), setDefaultConfidenceValue(fieldValue.getConfidence())\n+                value = new FormField<>(key, null, null,\n+                    new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.LIST)\n+                        .setFormFieldList(toFormFieldArray(fieldValue.getValueArray(), readResults)),\n+                    setDefaultConfidenceValue(fieldValue.getConfidence())\n                 );\n                 break;\n             case OBJECT:\n-                value = new FormField<>(key, labelText, valueText, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.MAP)\n-                .setFormFieldMap(toFormFieldObject(fieldValue.getValueObject(), pageNumber, readResults)), setDefaultConfidenceValue(fieldValue.getConfidence())\n+                value = new FormField<>(key, labelText, valueText,\n+                    new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.MAP)\n+                        .setFormFieldMap(toFormFieldObject(fieldValue.getValueObject(), pageNumber, readResults)),\n+                    setDefaultConfidenceValue(fieldValue.getConfidence())\n                 );\n                 break;\n             default:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzNDk1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458434951", "bodyText": "nit: com.azure.ai.formrecognizer.models.FieldValue can be in import list at the beginning of file", "author": "mssfang", "createdAt": "2020-07-21T22:53:45Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -244,39 +244,57 @@ private Transforms() {\n         FormField<?> value;\n         switch (fieldValue.getType()) {\n             case PHONE_NUMBER:\n-                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, fieldValue.getValuePhoneNumber(), valueText, FieldValueType.PHONE_NUMBER);\n+                value = new FormField<>(key, labelText, valueText, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.PHONE_NUMBER).\n+                setFormFieldPhoneNumber(fieldValue.getValuePhoneNumber()), setDefaultConfidenceValue(fieldValue.getConfidence())\n+                );\n                 break;\n             case STRING:\n-                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, fieldValue.getValueString(), valueText, FieldValueType.STRING);\n+                value = new FormField<>(key, labelText, valueText, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.STRING)", "originalCommit": "709203a82e4c9227d7e813a8829dcc9a7b97d416", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NjkwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458456906", "bodyText": "Can't..have FieldValue in implementation.models too.", "author": "samvaity", "createdAt": "2020-07-22T00:02:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzNDk1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c3c4593ee6e69ed6000d978d46281284d42d0cd9", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java\nindex 1e9b00a65ee..429032dc7af 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java\n\n@@ -244,56 +245,73 @@ final class Transforms {\n         FormField<?> value;\n         switch (fieldValue.getType()) {\n             case PHONE_NUMBER:\n-                value = new FormField<>(key, labelText, valueText, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.PHONE_NUMBER).\n-                setFormFieldPhoneNumber(fieldValue.getValuePhoneNumber()), setDefaultConfidenceValue(fieldValue.getConfidence())\n-                );\n+                value = new FormField<>(key, labelText, valueText,\n+                    new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.PHONE_NUMBER)\n+                        .setFormFieldPhoneNumber(fieldValue.getValuePhoneNumber()),\n+                    setDefaultConfidenceValue(fieldValue.getConfidence()));\n                 break;\n             case STRING:\n-                value = new FormField<>(key, labelText, valueText, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.STRING)\n-                .setFormFieldString(fieldValue.getValueString()), setDefaultConfidenceValue(fieldValue.getConfidence())\n-                );\n+                value = new FormField<>(key, labelText, valueText,\n+                    new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.STRING)\n+                        .setFormFieldString(fieldValue.getValueString()),\n+                    setDefaultConfidenceValue(fieldValue.getConfidence()));\n                 break;\n             case TIME:\n                 LocalTime fieldTime = fieldValue.getValueTime() == null ? null : LocalTime\n                     .parse(fieldValue.getValueTime(), DateTimeFormatter.ofPattern(\"HH:mm:ss\"));\n-                value = new FormField<>(key, labelText, valueText, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.TIME)\n-                .setFormFieldTime(fieldTime), setDefaultConfidenceValue(fieldValue.getConfidence())\n-                );\n+                value = new FormField<>(key, labelText, valueText,\n+                    new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.TIME)\n+                        .setFormFieldTime(fieldTime), setDefaultConfidenceValue(fieldValue.getConfidence()));\n                 break;\n             case DATE:\n-                value = new FormField<>(key, labelText, valueText, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.DATE)\n-                .setFormFieldDate(fieldValue.getValueDate()), setDefaultConfidenceValue(fieldValue.getConfidence())\n+                value = new FormField<>(key, labelText, valueText,\n+                    new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.DATE)\n+                        .setFormFieldDate(fieldValue.getValueDate()),\n+                    setDefaultConfidenceValue(fieldValue.getConfidence())\n                 );\n                 break;\n             case INTEGER:\n                 com.azure.ai.formrecognizer.models.FieldValue longFieldValue;\n                 // TODO (savaity): service bug\n                 if (fieldValue.getValueInteger() == null) {\n-                    longFieldValue = new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.LONG).setFormFieldLong(null);\n+                    longFieldValue =\n+                        new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.LONG).setFormFieldLong(null);\n                 } else {\n-                    longFieldValue = new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.LONG).setFormFieldLong(Long.valueOf(fieldValue.getValueInteger()));\n+                    longFieldValue =\n+                        new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.LONG)\n+                            .setFormFieldLong(Long.valueOf(fieldValue.getValueInteger()));\n                 }\n-                value = new FormField<>(key, labelText, valueText, longFieldValue, setDefaultConfidenceValue(fieldValue.getConfidence())\n+                value = new FormField<>(key, labelText, valueText, longFieldValue,\n+                    setDefaultConfidenceValue(fieldValue.getConfidence())\n                 );\n                 break;\n             case NUMBER:\n                 com.azure.ai.formrecognizer.models.FieldValue doubleFieldValue;\n                 // TODO (savaity): service bug\n                 if (fieldValue.getValueNumber() == null) {\n-                    doubleFieldValue = new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.DOUBLE).setFormFieldDouble(null);\n+                    doubleFieldValue =\n+                        new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.DOUBLE)\n+                            .setFormFieldDouble(null);\n                 } else {\n-                    doubleFieldValue = new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.DOUBLE).setFormFieldDouble(Double.valueOf(fieldValue.getValueNumber()));\n+                    doubleFieldValue =\n+                        new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.DOUBLE)\n+                            .setFormFieldDouble(Double.valueOf(fieldValue.getValueNumber()));\n                 }\n-                value = new FormField<>(key, labelText, valueText, doubleFieldValue, setDefaultConfidenceValue(fieldValue.getConfidence()));\n+                value = new FormField<>(key, labelText, valueText, doubleFieldValue,\n+                    setDefaultConfidenceValue(fieldValue.getConfidence()));\n                 break;\n             case ARRAY:\n-                value = new FormField<>(key, null, null, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.LIST)\n-                    .setFormFieldList(toFormFieldArray(fieldValue.getValueArray(), readResults)), setDefaultConfidenceValue(fieldValue.getConfidence())\n+                value = new FormField<>(key, null, null,\n+                    new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.LIST)\n+                        .setFormFieldList(toFormFieldArray(fieldValue.getValueArray(), readResults)),\n+                    setDefaultConfidenceValue(fieldValue.getConfidence())\n                 );\n                 break;\n             case OBJECT:\n-                value = new FormField<>(key, labelText, valueText, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.MAP)\n-                .setFormFieldMap(toFormFieldObject(fieldValue.getValueObject(), pageNumber, readResults)), setDefaultConfidenceValue(fieldValue.getConfidence())\n+                value = new FormField<>(key, labelText, valueText,\n+                    new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.MAP)\n+                        .setFormFieldMap(toFormFieldObject(fieldValue.getValueObject(), pageNumber, readResults)),\n+                    setDefaultConfidenceValue(fieldValue.getConfidence())\n                 );\n                 break;\n             default:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzNzI2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458437266", "bodyText": "no longer takes a FieldValueType?", "author": "mssfang", "createdAt": "2020-07-21T23:00:29Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FormField.java", "diffHunk": "@@ -14,28 +14,25 @@\n     private final float confidence;\n     private final FieldData labelData;\n     private final String name;\n+    private final FieldValue value;\n     private final FieldData valueData;\n-    private final T value;\n-    private final FieldValueType valueType;\n \n     /**\n      * Constructs a FormField object.\n      *\n-     * @param confidence The confidence of the recognized field.\n-     * @param labelData The text, bounding box, and field elements for the field label.\n      * @param name The name the field or label.\n-     * @param value The value of the recognized field.\n+     * @param labelData The text, bounding box, and field elements for the field label.\n      * @param valueData The text, bounding box, and field elements for the field value.\n-     * @param valueType The type of the value of the recognized field.\n+     * @param value The value of the recognized field.\n+     * @param confidence The confidence of the recognized field.\n      */\n-    public FormField(final float confidence, final FieldData labelData, final String name, final T value,\n-        final FieldData valueData, FieldValueType valueType) {\n+    public FormField(final String name, final FieldData labelData, final FieldData valueData,\n+        final FieldValue value, final float confidence) {", "originalCommit": "709203a82e4c9227d7e813a8829dcc9a7b97d416", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NzE0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458457148", "bodyText": "It is in the FieldValue model.", "author": "samvaity", "createdAt": "2020-07-22T00:03:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzNzI2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5OTUxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458499517", "bodyText": "@mssfang FieldValueType is now in FieldValue", "author": "srnagar", "createdAt": "2020-07-22T02:38:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzNzI2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "11e0e4631494e5a271de3d6e7b7a829a9401e4e3", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FormField.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FormField.java\nindex 1e551cd3ed6..c11581e2768 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FormField.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FormField.java\n\n@@ -9,7 +9,7 @@ import com.azure.core.annotation.Immutable;\n  * The FormField model.\n  */\n @Immutable\n-public final class FormField<T> {\n+public final class FormField {\n \n     private final float confidence;\n     private final FieldData labelData;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzODM3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458438373", "bodyText": "feel strange but it is what it is.", "author": "mssfang", "createdAt": "2020-07-21T23:03:49Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java", "diffHunk": "@@ -168,7 +169,8 @@ public static void main(String[] args) throws IOException {\n                     .filter(formFieldEntry -> \"Vendor Name:\".equals(formFieldEntry.getValue().getLabelData().getText()))\n                     .findAny()\n                     .ifPresent(formFieldEntry ->\n-                        System.out.printf(\"The Vendor name is: %s%n\", formFieldEntry.getValue()));\n+                        System.out.printf(\"The Vendor name is: %s%n\", formFieldEntry.getValue()", "originalCommit": "709203a82e4c9227d7e813a8829dcc9a7b97d416", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0MDQxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458440414", "bodyText": "nit: extra line", "author": "mssfang", "createdAt": "2020-07-21T23:09:48Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/Receipt.java", "diffHunk": "@@ -357,4 +356,6 @@ public ReceiptItem(final FormField<String> name, final FormField<Float> quantity\n             return totalPrice;\n         }\n     }\n+\n+", "originalCommit": "709203a82e4c9227d7e813a8829dcc9a7b97d416", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3c4593ee6e69ed6000d978d46281284d42d0cd9", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/Receipt.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/Receipt.java\nindex 964b020e3d9..c86c1e186e0 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/Receipt.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/Receipt.java\n\n@@ -356,6 +356,4 @@ public final class Receipt {\n             return totalPrice;\n         }\n     }\n-\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0MjY0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458442644", "bodyText": "assertTrue(inputMap.equals(actualList));\nhttps://www.baeldung.com/java-compare-hashmaps", "author": "mssfang", "createdAt": "2020-07-21T23:16:49Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FieldValueExtensionMethodTest.java", "diffHunk": "@@ -0,0 +1,301 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FieldValue;\n+import com.azure.ai.formrecognizer.models.FieldValueType;\n+import com.azure.ai.formrecognizer.models.FormField;\n+import org.junit.jupiter.api.Test;\n+\n+import java.time.LocalDate;\n+import java.time.LocalTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class FieldValueExtensionMethodTest {\n+\n+    /**\n+     * Test for {@link FieldValue#asDate()} to Date.\n+     */\n+    @Test\n+    public void toDateFromDate() {\n+        LocalDate inputDate = LocalDate.of(2006, 6, 6);\n+        FormField<?> formField = new FormField<>(null, null, null, new FieldValue(FieldValueType.DATE)\n+            .setFormFieldDate(inputDate), 0);\n+        LocalDate actualDate = formField.getValue().asDate();\n+        assertEquals(inputDate, actualDate);\n+    }\n+\n+    /**\n+     * Test for {@link FieldValue#asDate()} to Date from String.\n+     */\n+    @Test\n+    public void toDateFromString() {\n+        String inputDateString = \"2006/06/06\";\n+        FormField<?> formField = new FormField<>(null, null, null,\n+            new FieldValue(FieldValueType.STRING).setFormFieldString(inputDateString), 0);\n+        final UnsupportedOperationException unsupportedOperationException =\n+            assertThrows(UnsupportedOperationException.class, () ->\n+                formField.getValue().asDate());\n+        assertEquals(unsupportedOperationException.getMessage(), \"Cannot get field as DATE from field value \"\n+            + \"of type STRING\");\n+    }\n+\n+    /**\n+     * Test for {@link FieldValue#asDate()} to Date from null field value.\n+     */\n+    @Test\n+    public void toDateFromNull() {\n+        FormField<?> formField = new FormField<>(null, null, null, new FieldValue(FieldValueType.DATE)\n+            .setFormFieldDate(null), 0);\n+        assertNull(formField.getValue().asDate());\n+    }\n+\n+\n+    /**\n+     * Test for {@link FieldValue#asTime()} to TIME.\n+     */\n+    @Test\n+    public void toTimeFromTime() {\n+        LocalTime inputTime = LocalTime.parse(\"13:59:00\", DateTimeFormatter.ofPattern(\"HH:mm:ss\"));\n+        FormField<?> formField = new FormField<>(null, null, null,\n+            new FieldValue(FieldValueType.TIME).setFormFieldTime(inputTime), 0);\n+        LocalTime actualTime = formField.getValue().asTime();\n+        assertEquals(inputTime, actualTime);\n+    }\n+\n+    /**\n+     * Test for {@link FieldValue#asTime()} to TIME from String.\n+     */\n+    @Test\n+    public void toTimeFromString() {\n+        String inputTimeString = \"13:59:00\";\n+        FormField<?> formField = new FormField<>(null, null, null,\n+            new FieldValue(FieldValueType.STRING).setFormFieldString(inputTimeString), 0);\n+        final UnsupportedOperationException unsupportedOperationException =\n+            assertThrows(UnsupportedOperationException.class, () ->\n+                formField.getValue().asTime());\n+        assertEquals(unsupportedOperationException.getMessage(), \"Cannot get field as TIME from field\"\n+            + \" value of type STRING\");\n+    }\n+\n+    /**\n+     * Test for {@link FieldValue#asTime()} to TIME from null field value.\n+     */\n+    @Test\n+    public void toTimeFromNull() {\n+        assertNull(new FormField<>(null, null, null,\n+            new FieldValue(FieldValueType.TIME), 0).getValue().asTime());\n+    }\n+\n+\n+    /**\n+     * Test for {@link FieldValue#asList()} to list.\n+     */\n+    @Test\n+    public void toListFromList() {\n+        List<FormField<?>> inputList = new ArrayList<>(Arrays.asList(new FormField<>(null, null, null, null, 0)));\n+        FormField<?> formField = new FormField<>(null, null, null,\n+            new FieldValue(FieldValueType.LIST).setFormFieldList(inputList), 0);\n+        List<FormField<?>> actualList = formField.getValue().asList();\n+        assertEquals(inputList, actualList);\n+    }\n+\n+    /**\n+     * Test for {@link FieldValue#asList()} to list from String.\n+     */\n+    @Test\n+    public void toListFromString() {\n+        String test = \"testString\";\n+        final UnsupportedOperationException unsupportedOperationException =\n+            assertThrows(UnsupportedOperationException.class, () ->\n+                new FormField<>(null, null, null,\n+                    new FieldValue(FieldValueType.STRING).setFormFieldString(test), 0).getValue().asList());\n+        assertEquals(unsupportedOperationException.getMessage(), \"Cannot get field as a LIST from field value \"\n+            + \"of type STRING\");\n+    }\n+\n+    /**\n+     * Test for {@link FieldValue#asList()}  to list from null field value.\n+     */\n+    @Test\n+    public void toListFromNull() {\n+        assertNull(new FormField<>(null, null, null, new FieldValue(FieldValueType.LIST), 0).getValue().asList());\n+    }\n+\n+    /**\n+     * Test for {@link FieldValue#asPhoneNumber()} to phone number.\n+     */\n+    @Test\n+    public void toPhoneNumberFromPhoneNumber() {\n+        String phoneNumber = \"19876543210\";\n+        String actualPhoneNumber = new FormField<>(null, null, null,\n+            new FieldValue(FieldValueType.PHONE_NUMBER).setFormFieldPhoneNumber(phoneNumber), 0)\n+            .getValue().asPhoneNumber();\n+        assertEquals(phoneNumber, actualPhoneNumber);\n+    }\n+\n+    /**\n+     * Test for {@link FieldValue#asPhoneNumber()} to phone number from String.\n+     */\n+    @Test\n+    public void toPhoneNumberFromString() {\n+        String phoneNumber = \"19876543210\";\n+        final UnsupportedOperationException unsupportedOperationException =\n+            assertThrows(UnsupportedOperationException.class, () ->\n+                new FormField<>(null, null, null,\n+                    new FieldValue(FieldValueType.STRING).setFormFieldString(phoneNumber), 0)\n+                    .getValue().asPhoneNumber());\n+        assertEquals(unsupportedOperationException.getMessage(), \"Cannot get field as aPHONE_NUMBER \"\n+            + \"from field value of type STRING\");\n+    }\n+\n+    /**\n+     * Test for {@link FieldValue#asPhoneNumber()} to phone number from null field value.\n+     */\n+    @Test\n+    public void toPhoneNumberFromNull() {\n+        assertNull(new FormField<>(null, null, null,\n+            new FieldValue(FieldValueType.PHONE_NUMBER), 0).getValue().asPhoneNumber());\n+    }\n+\n+    /**\n+     * Test for {@link FieldValue#asMap()} to map.\n+     */\n+    @Test\n+    public void toMapFromMap() {\n+        Map<String, FormField<?>> inputMap = new HashMap<String, FormField<?>>() {\n+            {\n+                put(\"key\", new FormField<>(null, null, null, null, 0));\n+            }\n+        };\n+        Map<String, FormField<?>> actualList = new FormField<>(null, null, null,\n+            new FieldValue(FieldValueType.MAP).setFormFieldMap(inputMap), 0).getValue().asMap();\n+        assertEquals(inputMap, actualList);", "originalCommit": "709203a82e4c9227d7e813a8829dcc9a7b97d416", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3c4593ee6e69ed6000d978d46281284d42d0cd9", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FieldValueExtensionMethodTest.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FieldValueExtensionMethodTest.java\nindex 9d998828d7f..aa0d97ac81f 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FieldValueExtensionMethodTest.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FieldValueExtensionMethodTest.java\n\n@@ -178,9 +178,9 @@ public class FieldValueExtensionMethodTest {\n                 put(\"key\", new FormField<>(null, null, null, null, 0));\n             }\n         };\n-        Map<String, FormField<?>> actualList = new FormField<>(null, null, null,\n+        Map<String, FormField<?>> actualMap = new FormField<>(null, null, null,\n             new FieldValue(FieldValueType.MAP).setFormFieldMap(inputMap), 0).getValue().asMap();\n-        assertEquals(inputMap, actualList);\n+        assertEquals(inputMap, actualMap);\n     }\n \n     /**\n"}}, {"oid": "c3c4593ee6e69ed6000d978d46281284d42d0cd9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c3c4593ee6e69ed6000d978d46281284d42d0cd9", "message": "review comments", "committedDate": "2020-07-22T00:19:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5ODg3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458498871", "bodyText": "type should be non-null. Add a  null check here.", "author": "srnagar", "createdAt": "2020-07-22T02:36:08Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValue.java", "diffHunk": "@@ -0,0 +1,258 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.time.LocalDate;\n+import java.time.LocalTime;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.azure.ai.formrecognizer.models.FieldValueType.DATE;\n+import static com.azure.ai.formrecognizer.models.FieldValueType.DOUBLE;\n+import static com.azure.ai.formrecognizer.models.FieldValueType.LIST;\n+import static com.azure.ai.formrecognizer.models.FieldValueType.LONG;\n+import static com.azure.ai.formrecognizer.models.FieldValueType.MAP;\n+import static com.azure.ai.formrecognizer.models.FieldValueType.PHONE_NUMBER;\n+import static com.azure.ai.formrecognizer.models.FieldValueType.STRING;\n+import static com.azure.ai.formrecognizer.models.FieldValueType.TIME;\n+\n+/**\n+ * The FieldValue model.\n+ */\n+@Fluent\n+public final class FieldValue {\n+    private final ClientLogger logger = new ClientLogger(FieldValue.class);\n+    private final FieldValueType type;\n+    private Map<String, FormField<?>> formFieldMap;\n+    private List<FormField<?>> formFieldList;\n+    private Double formFieldDouble;\n+    private Long formFieldLong;\n+    private LocalDate formFieldDate;\n+    private LocalTime formFieldTime;\n+    private String formFieldString;\n+    private String formFieldPhoneNumber;\n+\n+    /**\n+     * Constructs a FieldValue object\n+     *\n+     * @param type The type of the field.\n+     */\n+    public FieldValue(final FieldValueType type) {\n+        this.type = type;", "originalCommit": "709203a82e4c9227d7e813a8829dcc9a7b97d416", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk5NjE4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13355#discussion_r458996183", "bodyText": "type is required in swagger. Should we still check here then?\nhttps://github.com/Azure/azure-rest-api-specs/blob/master/specification/cognitiveservices/data-plane/FormRecognizer/preview/v2.0/FormRecognizer.json#L1553", "author": "samvaity", "createdAt": "2020-07-22T18:26:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5ODg3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "045dd51bc805262e662f779dcd62d380f714fa79", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValue.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValue.java\nindex 0837994f7b7..bc10b91d93b 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValue.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValue.java\n\n@@ -8,7 +8,6 @@ import com.azure.core.util.logging.ClientLogger;\n \n import java.time.LocalDate;\n import java.time.LocalTime;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n \n"}}, {"oid": "045dd51bc805262e662f779dcd62d380f714fa79", "url": "https://github.com/Azure/azure-sdk-for-java/commit/045dd51bc805262e662f779dcd62d380f714fa79", "message": "add TypedFormField", "committedDate": "2020-07-22T23:36:38Z", "type": "commit"}, {"oid": "11e0e4631494e5a271de3d6e7b7a829a9401e4e3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/11e0e4631494e5a271de3d6e7b7a829a9401e4e3", "message": "remove T from FormField", "committedDate": "2020-07-23T17:20:44Z", "type": "commit"}, {"oid": "d6ea97685c16407a84861a88f3a6d76fa145587b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d6ea97685c16407a84861a88f3a6d76fa145587b", "message": "update readme", "committedDate": "2020-07-23T17:34:21Z", "type": "commit"}]}