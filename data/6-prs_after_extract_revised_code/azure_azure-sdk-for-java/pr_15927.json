{"pr_number": 15927, "pr_title": "Adding diagnostic in CTL run for higher latency requests", "pr_createdAt": "2020-10-05T15:56:43Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/15927", "timeline": [{"oid": "c2c3b865c2ce126592271c55ae0c7ac3f9b79a6b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c2c3b865c2ce126592271c55ae0c7ac3f9b79a6b", "message": "Adding diagnostic for latency breached requests", "committedDate": "2020-10-05T15:50:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMjMwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#discussion_r499712309", "bodyText": "Isn't that way too high? I would think something around 3 seconds or so (maybe 10 to account for queries/FeedResponses with 1000 items( is a more realistic default threshold?", "author": "FabianMeiswinkel", "createdAt": "2020-10-05T16:08:28Z", "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/Configuration.java", "diffHunk": "@@ -61,6 +61,9 @@\n     @Parameter(names = \"-maxConnectionPoolSize\", description = \"Max Connection Pool Size\")\n     private Integer maxConnectionPoolSize = 1000;\n \n+    @Parameter(names = \"-thresholdForDiagnosticsInMs\", description = \"Latency threshold for printing diagnostics\")\n+    private Integer thresholdForDiagnosticsInMs = 60000;", "originalCommit": "c2c3b865c2ce126592271c55ae0c7ac3f9b79a6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNzMyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#discussion_r499727327", "bodyText": "We have retry policy upto 60 sec during 410s, if we bring it below that , there would be  to extra logging for the expected behavior . So the idea was to capture diagnostics for stuck requests (> 1 min) which bring the throughput to 0 for some time as we have experienced in past. Btw It is configurable , so we can change easily during run time without any extra effort", "author": "simplynaveen20", "createdAt": "2020-10-05T16:32:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMjMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMTEwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#discussion_r499731105", "bodyText": "@simplynaveen20  - I agree to @FabianMeiswinkel 's point here, why are we setting the threshold this high ?", "author": "kushagraThapar", "createdAt": "2020-10-05T16:39:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMjMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMTUxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#discussion_r499731515", "bodyText": "Thanks for providing the reason.", "author": "kushagraThapar", "createdAt": "2020-10-05T16:40:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMjMwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "cc4ef5c8f20f42e52a4c8041cc3cd269f9bc905d", "chunk": "diff --git a/sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/Configuration.java b/sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/Configuration.java\nindex 8efc5953ec6..e3fc29a75e6 100644\n--- a/sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/Configuration.java\n+++ b/sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/Configuration.java\n\n@@ -61,8 +61,8 @@ public class Configuration {\n     @Parameter(names = \"-maxConnectionPoolSize\", description = \"Max Connection Pool Size\")\n     private Integer maxConnectionPoolSize = 1000;\n \n-    @Parameter(names = \"-thresholdForDiagnosticsInMs\", description = \"Latency threshold for printing diagnostics\")\n-    private Integer thresholdForDiagnosticsInMs = 60000;\n+    @Parameter(names = \"-diagnosticsThresholdDuration\", description = \"Latency threshold for printing diagnostics\", converter = DurationConverter.class)\n+    private Duration diagnosticsThresholdDuration = Duration.ofSeconds(60);\n \n     @Parameter(names = \"-disablePassingPartitionKeyAsOptionOnWrite\", description = \"Disables passing partition in request options for write operation;\" +\n         \" in this case, json will be parsed and partition key will be extracted (this requires more computational overhead).\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczOTUyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#discussion_r499739527", "bodyText": "Could you please use Duration format instead of Milisecond here to be consistent with the existing configuration?\nsee this duration config:\nhttps://github.com/Azure/azure-sdk-for-java/blob/master/sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/Configuration.java#L129-L130\nWe will have more time configurations and some can be a few hours. It would be good to use a unified time format everywhere. Duration will be the most suitable format.", "author": "moderakh", "createdAt": "2020-10-05T16:53:48Z", "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/Configuration.java", "diffHunk": "@@ -61,6 +61,9 @@\n     @Parameter(names = \"-maxConnectionPoolSize\", description = \"Max Connection Pool Size\")\n     private Integer maxConnectionPoolSize = 1000;\n \n+    @Parameter(names = \"-thresholdForDiagnosticsInMs\", description = \"Latency threshold for printing diagnostics\")\n+    private Integer thresholdForDiagnosticsInMs = 60000;", "originalCommit": "c2c3b865c2ce126592271c55ae0c7ac3f9b79a6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NTAzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#discussion_r499745032", "bodyText": "Duration more suits in scenario like maxRunningTimeDuration, but here we have latency  threshold which will  be in seconds at max.  Integer  thresholdForDiagnosticsInMs is more intuitive here", "author": "simplynaveen20", "createdAt": "2020-10-05T17:03:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczOTUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1NDEwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#discussion_r499754104", "bodyText": "all the public APIs of the SDK for latency regardless of being a short duration or high duration use duration. same goes for  maxRunningTimeDuration config in the benchmark. Duration can be used for both small and long duration configuration. Please let's be consistent everywhere.", "author": "moderakh", "createdAt": "2020-10-05T17:20:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczOTUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg4MjYxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#discussion_r499882618", "bodyText": "Done, only concern was if we choose to set it under one sec then we have to pass in decimal like PT0.010S.", "author": "simplynaveen20", "createdAt": "2020-10-05T21:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczOTUyNw=="}], "type": "inlineReview", "revised_code": {"commit": "cc4ef5c8f20f42e52a4c8041cc3cd269f9bc905d", "chunk": "diff --git a/sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/Configuration.java b/sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/Configuration.java\nindex 8efc5953ec6..e3fc29a75e6 100644\n--- a/sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/Configuration.java\n+++ b/sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/Configuration.java\n\n@@ -61,8 +61,8 @@ public class Configuration {\n     @Parameter(names = \"-maxConnectionPoolSize\", description = \"Max Connection Pool Size\")\n     private Integer maxConnectionPoolSize = 1000;\n \n-    @Parameter(names = \"-thresholdForDiagnosticsInMs\", description = \"Latency threshold for printing diagnostics\")\n-    private Integer thresholdForDiagnosticsInMs = 60000;\n+    @Parameter(names = \"-diagnosticsThresholdDuration\", description = \"Latency threshold for printing diagnostics\", converter = DurationConverter.class)\n+    private Duration diagnosticsThresholdDuration = Duration.ofSeconds(60);\n \n     @Parameter(names = \"-disablePassingPartitionKeyAsOptionOnWrite\", description = \"Disables passing partition in request options for write operation;\" +\n         \" in this case, json will be parsed and partition key will be extracted (this requires more computational overhead).\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1NTg0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#discussion_r499755847", "bodyText": "StopWatch can be accessed on different threads and it is not thread safe.\nPlease use a volatile long for measuring the checkpoint.\nprivate long startTimeInMs", "author": "moderakh", "createdAt": "2020-10-05T17:23:06Z", "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/BenchmarkRequestSubscriber.java", "diffHunk": "@@ -15,26 +18,50 @@\n \n public class BenchmarkRequestSubscriber<T> extends BaseSubscriber<T> {\n     final static Logger logger = LoggerFactory.getLogger(BenchmarkRequestSubscriber.class);\n+    private final StopWatch durationTimer = new StopWatch();", "originalCommit": "c2c3b865c2ce126592271c55ae0c7ac3f9b79a6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg4NDAyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#discussion_r499884028", "bodyText": "done", "author": "simplynaveen20", "createdAt": "2020-10-05T21:31:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1NTg0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "cc4ef5c8f20f42e52a4c8041cc3cd269f9bc905d", "chunk": "diff --git a/sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/BenchmarkRequestSubscriber.java b/sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/BenchmarkRequestSubscriber.java\nindex a0d8619b320..9d589995d16 100644\n--- a/sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/BenchmarkRequestSubscriber.java\n+++ b/sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/BenchmarkRequestSubscriber.java\n\n@@ -13,52 +12,51 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import reactor.core.publisher.BaseSubscriber;\n \n+import java.time.Duration;\n import java.util.concurrent.Semaphore;\n import java.util.concurrent.atomic.AtomicLong;\n \n public class BenchmarkRequestSubscriber<T> extends BaseSubscriber<T> {\n     final static Logger logger = LoggerFactory.getLogger(BenchmarkRequestSubscriber.class);\n-    private final StopWatch durationTimer = new StopWatch();\n+    private final Duration diagnosticsThresholdDuration;\n+    private volatile long startTimeInMs;\n     private Meter successMeter;\n     private Meter failureMeter;\n     private Semaphore concurrencyControlSemaphore;\n     private AtomicLong count;\n-    private int thresholdForDiagnosticsInMs;\n+\n     public Timer.Context context;\n \n     public BenchmarkRequestSubscriber(Meter successMeter,\n                                       Meter failureMeter,\n                                       Semaphore concurrencyControlSemaphore,\n                                       AtomicLong count,\n-                                      int thresholdForDiagnosticsInMs) {\n+                                      Duration diagnosticsThresholdDuration) {\n         this.successMeter = successMeter;\n         this.failureMeter = failureMeter;\n         this.concurrencyControlSemaphore = concurrencyControlSemaphore;\n         this.count = count;\n-        this.thresholdForDiagnosticsInMs = thresholdForDiagnosticsInMs;\n+        this.diagnosticsThresholdDuration = diagnosticsThresholdDuration;\n     }\n \n     @Override\n     protected void hookOnSubscribe(Subscription subscription) {\n         super.hookOnSubscribe(subscription);\n-        durationTimer.start();\n+        startTimeInMs = System.currentTimeMillis();\n     }\n \n     @Override\n     protected void hookOnNext(T value) {\n-        if (durationTimer.isStarted()) {\n-            durationTimer.stop();\n-        }\n-\n-        if (durationTimer != null && durationTimer.getTime() > thresholdForDiagnosticsInMs) {\n+        if ((System.currentTimeMillis() - startTimeInMs) > diagnosticsThresholdDuration.toMillis()) {\n             if (value instanceof CosmosItemResponse) {\n                 CosmosItemResponse itemResponse = (CosmosItemResponse) value;\n-                logger.info(\"Request taking longer than {}ms diagnostic = {}\", thresholdForDiagnosticsInMs, itemResponse.getDiagnostics().toString());\n+                logger.info(\"Request taking longer than {}ms diagnostic = {}\",\n+                    diagnosticsThresholdDuration.toMillis(), itemResponse.getDiagnostics().toString());\n             } else if (value instanceof FeedResponse) {\n-                durationTimer.reset();\n-                durationTimer.start();\n+                startTimeInMs = System.currentTimeMillis();\n                 FeedResponse feedResponse = (FeedResponse) value;\n-                logger.info(\"Request taking longer than {}ms diagnostic = {}\", thresholdForDiagnosticsInMs, feedResponse.getCosmosDiagnostics().toString());\n+                logger.info(\"Request taking longer than {}ms diagnostic = {}\",\n+                    diagnosticsThresholdDuration.toMillis(), feedResponse.getCosmosDiagnostics().toString());\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1NjU3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#discussion_r499756574", "bodyText": "StopWatch can be used on different threads and it is not thread safe.\nPlease use a volatile long for measuring the checkpoint.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (durationTimer != null && durationTimer.getTime() > thresholdForDiagnosticsInMs) {\n          \n          \n            \n                    if (durationTimer != null && System.currentMilis() startTimeInMs-  > thresholdForDiagnosticsInMs) {", "author": "moderakh", "createdAt": "2020-10-05T17:24:31Z", "path": "sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/BenchmarkRequestSubscriber.java", "diffHunk": "@@ -15,26 +18,50 @@\n \n public class BenchmarkRequestSubscriber<T> extends BaseSubscriber<T> {\n     final static Logger logger = LoggerFactory.getLogger(BenchmarkRequestSubscriber.class);\n+    private final StopWatch durationTimer = new StopWatch();\n     private Meter successMeter;\n     private Meter failureMeter;\n     private Semaphore concurrencyControlSemaphore;\n     private AtomicLong count;\n+    private int thresholdForDiagnosticsInMs;\n     public Timer.Context context;\n \n-    public BenchmarkRequestSubscriber(Meter successMeter, Meter failureMeter, Semaphore concurrencyControlSemaphore,  AtomicLong count) {\n+    public BenchmarkRequestSubscriber(Meter successMeter,\n+                                      Meter failureMeter,\n+                                      Semaphore concurrencyControlSemaphore,\n+                                      AtomicLong count,\n+                                      int thresholdForDiagnosticsInMs) {\n         this.successMeter = successMeter;\n         this.failureMeter = failureMeter;\n         this.concurrencyControlSemaphore = concurrencyControlSemaphore;\n         this.count = count;\n+        this.thresholdForDiagnosticsInMs = thresholdForDiagnosticsInMs;\n     }\n \n     @Override\n     protected void hookOnSubscribe(Subscription subscription) {\n         super.hookOnSubscribe(subscription);\n+        durationTimer.start();\n     }\n \n     @Override\n     protected void hookOnNext(T value) {\n+        if (durationTimer.isStarted()) {\n+            durationTimer.stop();\n+        }\n+\n+        if (durationTimer != null && durationTimer.getTime() > thresholdForDiagnosticsInMs) {", "originalCommit": "c2c3b865c2ce126592271c55ae0c7ac3f9b79a6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1OTYyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#discussion_r499759629", "bodyText": "Wow - thanks - I would never have imagined StopWatch to not be thread-safe in Java", "author": "FabianMeiswinkel", "createdAt": "2020-10-05T17:29:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1NjU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2ODA5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#discussion_r499768093", "bodyText": "per documentation it is not :-)\nhttp://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/time/StopWatch.html\nhttps://guava.dev/releases/18.0/api/docs/com/google/common/base/Stopwatch.html", "author": "moderakh", "createdAt": "2020-10-05T17:46:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1NjU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg4Mzk0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15927#discussion_r499883948", "bodyText": "Done , moved to volatile long startTimeInMs , but we could have done with StopWatch with synchronous block as we are doing in gone and retry policy. Also we are creating new subscriber every time and not sharing with other request , so not sure we would have the threading problem here. Any way I am fine either way", "author": "simplynaveen20", "createdAt": "2020-10-05T21:31:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1NjU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "cc4ef5c8f20f42e52a4c8041cc3cd269f9bc905d", "chunk": "diff --git a/sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/BenchmarkRequestSubscriber.java b/sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/BenchmarkRequestSubscriber.java\nindex a0d8619b320..9d589995d16 100644\n--- a/sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/BenchmarkRequestSubscriber.java\n+++ b/sdk/cosmos/azure-cosmos-benchmark/src/main/java/com/azure/cosmos/benchmark/BenchmarkRequestSubscriber.java\n\n@@ -13,52 +12,51 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import reactor.core.publisher.BaseSubscriber;\n \n+import java.time.Duration;\n import java.util.concurrent.Semaphore;\n import java.util.concurrent.atomic.AtomicLong;\n \n public class BenchmarkRequestSubscriber<T> extends BaseSubscriber<T> {\n     final static Logger logger = LoggerFactory.getLogger(BenchmarkRequestSubscriber.class);\n-    private final StopWatch durationTimer = new StopWatch();\n+    private final Duration diagnosticsThresholdDuration;\n+    private volatile long startTimeInMs;\n     private Meter successMeter;\n     private Meter failureMeter;\n     private Semaphore concurrencyControlSemaphore;\n     private AtomicLong count;\n-    private int thresholdForDiagnosticsInMs;\n+\n     public Timer.Context context;\n \n     public BenchmarkRequestSubscriber(Meter successMeter,\n                                       Meter failureMeter,\n                                       Semaphore concurrencyControlSemaphore,\n                                       AtomicLong count,\n-                                      int thresholdForDiagnosticsInMs) {\n+                                      Duration diagnosticsThresholdDuration) {\n         this.successMeter = successMeter;\n         this.failureMeter = failureMeter;\n         this.concurrencyControlSemaphore = concurrencyControlSemaphore;\n         this.count = count;\n-        this.thresholdForDiagnosticsInMs = thresholdForDiagnosticsInMs;\n+        this.diagnosticsThresholdDuration = diagnosticsThresholdDuration;\n     }\n \n     @Override\n     protected void hookOnSubscribe(Subscription subscription) {\n         super.hookOnSubscribe(subscription);\n-        durationTimer.start();\n+        startTimeInMs = System.currentTimeMillis();\n     }\n \n     @Override\n     protected void hookOnNext(T value) {\n-        if (durationTimer.isStarted()) {\n-            durationTimer.stop();\n-        }\n-\n-        if (durationTimer != null && durationTimer.getTime() > thresholdForDiagnosticsInMs) {\n+        if ((System.currentTimeMillis() - startTimeInMs) > diagnosticsThresholdDuration.toMillis()) {\n             if (value instanceof CosmosItemResponse) {\n                 CosmosItemResponse itemResponse = (CosmosItemResponse) value;\n-                logger.info(\"Request taking longer than {}ms diagnostic = {}\", thresholdForDiagnosticsInMs, itemResponse.getDiagnostics().toString());\n+                logger.info(\"Request taking longer than {}ms diagnostic = {}\",\n+                    diagnosticsThresholdDuration.toMillis(), itemResponse.getDiagnostics().toString());\n             } else if (value instanceof FeedResponse) {\n-                durationTimer.reset();\n-                durationTimer.start();\n+                startTimeInMs = System.currentTimeMillis();\n                 FeedResponse feedResponse = (FeedResponse) value;\n-                logger.info(\"Request taking longer than {}ms diagnostic = {}\", thresholdForDiagnosticsInMs, feedResponse.getCosmosDiagnostics().toString());\n+                logger.info(\"Request taking longer than {}ms diagnostic = {}\",\n+                    diagnosticsThresholdDuration.toMillis(), feedResponse.getCosmosDiagnostics().toString());\n             }\n         }\n \n"}}, {"oid": "cc4ef5c8f20f42e52a4c8041cc3cd269f9bc905d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cc4ef5c8f20f42e52a4c8041cc3cd269f9bc905d", "message": "resolving comments", "committedDate": "2020-10-05T21:26:12Z", "type": "commit"}]}