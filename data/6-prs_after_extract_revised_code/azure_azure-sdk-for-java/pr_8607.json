{"pr_number": 8607, "pr_title": "Adding meta data and serialization diagnostics on point operations", "pr_createdAt": "2020-02-28T15:43:04Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/8607", "timeline": [{"oid": "1d8856a1dd10b9afa60d3da9baba7096c8256ed6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1d8856a1dd10b9afa60d3da9baba7096c8256ed6", "message": "making databaseAccount update dynamic", "committedDate": "2020-02-24T21:29:06Z", "type": "commit"}, {"oid": "390f8b2ff26e1e49884b860a3d35fdd216442eed", "url": "https://github.com/Azure/azure-sdk-for-java/commit/390f8b2ff26e1e49884b860a3d35fdd216442eed", "message": "Revert \"making databaseAccount update dynamic\"\n\nThis reverts commit 1d8856a1dd10b9afa60d3da9baba7096c8256ed6.", "committedDate": "2020-02-24T21:39:51Z", "type": "commit"}, {"oid": "6ba47e75759daf1f40f1a44cf7fe647f8d328193", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6ba47e75759daf1f40f1a44cf7fe647f8d328193", "message": "making databaseAccount update dynamic", "committedDate": "2020-02-24T22:00:08Z", "type": "commit"}, {"oid": "99807ce7f5587b1f21ead3cd4f205c926b462aad", "url": "https://github.com/Azure/azure-sdk-for-java/commit/99807ce7f5587b1f21ead3cd4f205c926b462aad", "message": "Revert \"making databaseAccount update dynamic\"\n\nThis reverts commit 1d8856a1dd10b9afa60d3da9baba7096c8256ed6.", "committedDate": "2020-02-24T22:00:08Z", "type": "commit"}, {"oid": "639da10dd9c90a950733ab3a041886d9eab7ef0e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/639da10dd9c90a950733ab3a041886d9eab7ef0e", "message": "Merge branch 'master' of https://github.com/simplynaveen20/azure-sdk-for-java", "committedDate": "2020-02-24T22:10:22Z", "type": "commit"}, {"oid": "a6529329540ef0175eea60b0154731fc46234146", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a6529329540ef0175eea60b0154731fc46234146", "message": "Adding meta data and serialization diagnoics", "committedDate": "2020-02-24T22:30:38Z", "type": "commit"}, {"oid": "49fd90b7422c397c5d0422fa26fd108d578831a3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/49fd90b7422c397c5d0422fa26fd108d578831a3", "message": "adding UTC  to time variables and adding meta data serializer", "committedDate": "2020-02-24T22:43:43Z", "type": "commit"}, {"oid": "99fbe1f32742703249ac01b371de00172ef105f4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/99fbe1f32742703249ac01b371de00172ef105f4", "message": "adding serialization infor to diagnostics", "committedDate": "2020-02-27T19:53:58Z", "type": "commit"}, {"oid": "3391a3dfaa2100f59f4e21e3cf099927033681ee", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3391a3dfaa2100f59f4e21e3cf099927033681ee", "message": "Merge remote-tracking branch 'upstream/master' into user/nakumars/newMetaDataAndSerializationDiagnostics", "committedDate": "2020-02-27T19:54:39Z", "type": "commit"}, {"oid": "89d6dca1697a404d152a167dbee50f35ad855729", "url": "https://github.com/Azure/azure-sdk-for-java/commit/89d6dca1697a404d152a167dbee50f35ad855729", "message": "adding test cases", "committedDate": "2020-02-28T00:01:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2OTE1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r385769152", "bodyText": "Please share if there are more relevant serializations in the code which we want to capture", "author": "simplynaveen20", "createdAt": "2020-02-28T15:45:21Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java", "diffHunk": "@@ -0,0 +1,90 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.ZonedDateTimeSerializer;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+\n+public class SerializationDiagnosticsContext {\n+    public volatile List<SerializationDiagnosticsContext.SerializationDiagnostics> serializationDiagnosticsList;\n+\n+    public void addMetaDataDiagnostic(SerializationDiagnosticsContext.SerializationDiagnostics serializationDiagnostics) {\n+        if (serializationDiagnosticsList == null) {\n+            serializationDiagnosticsList = new ArrayList<>();\n+        }\n+\n+        serializationDiagnosticsList.add(serializationDiagnostics);\n+    }\n+\n+    public <T> T getResource(Callable<T> function, SerializationType serializationType) {\n+        ZonedDateTime serializationStartTime = ZonedDateTime.now(ZoneOffset.UTC);\n+        T t = null;\n+        try {\n+            t = function.call();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n+        ZonedDateTime serializationEndTime = ZonedDateTime.now(ZoneOffset.UTC);\n+        if (serializationDiagnosticsList == null) {\n+            serializationDiagnosticsList = new ArrayList<>();\n+        }\n+\n+        serializationDiagnosticsList.add(new SerializationDiagnostics(serializationStartTime, serializationEndTime, serializationType));\n+        return t;\n+    }\n+\n+    @JsonSerialize(using = SerializationDiagnosticsContext.SerializationDiagnosticsSerializer.class)\n+    public static class SerializationDiagnostics {\n+        public volatile ZonedDateTime startTimeUTC;\n+        public volatile ZonedDateTime endTimeUTC;\n+        public volatile SerializationDiagnosticsContext.SerializationType serializationType;\n+\n+        public SerializationDiagnostics(ZonedDateTime startTimeUTC, ZonedDateTime endTimeUTC, SerializationDiagnosticsContext.SerializationType serializationType) {\n+            this.startTimeUTC = startTimeUTC;\n+            this.endTimeUTC = endTimeUTC;\n+            this.serializationType = serializationType;\n+        }\n+    }\n+\n+    static class SerializationDiagnosticsSerializer extends StdSerializer<SerializationDiagnosticsContext.SerializationDiagnostics> {\n+\n+        public SerializationDiagnosticsSerializer() {\n+            super(SerializationDiagnosticsContext.SerializationDiagnostics.class);\n+        }\n+\n+        @Override\n+        public void serialize(SerializationDiagnosticsContext.SerializationDiagnostics serializationDiagnostics, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {\n+            Duration durationinMS = serializationDiagnostics.startTimeUTC == null ?\n+                null : serializationDiagnostics.endTimeUTC == null ?\n+                Duration.ZERO : Duration.between(serializationDiagnostics.startTimeUTC, serializationDiagnostics.endTimeUTC);\n+            jsonGenerator.writeStartObject();\n+            jsonGenerator.writeObjectField(\"serializationType\", serializationDiagnostics.serializationType);\n+            jsonGenerator.writeStringField(\"startTimeUTC\", ZonedDateTimeSerializer.formatDateTime(serializationDiagnostics.startTimeUTC));\n+            jsonGenerator.writeStringField(\"endTimeUTC\", ZonedDateTimeSerializer.formatDateTime(serializationDiagnostics.endTimeUTC));\n+            if(durationinMS != null) {\n+                jsonGenerator.writeNumberField(\"durationInMicroSec\", durationinMS.toNanos()/1000);\n+            }\n+\n+            jsonGenerator.writeEndObject();\n+        }\n+    }\n+    public enum  SerializationType{", "originalCommit": "89d6dca1697a404d152a167dbee50f35ad855729", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8f5dc0ca19d03c9f872b26ab7238cb887d4eae4", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java\nindex 6af29d4515e..09b667f6ad5 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java\n\n@@ -14,6 +14,7 @@ import java.time.Duration;\n import java.time.ZoneOffset;\n import java.time.ZonedDateTime;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.concurrent.Callable;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3MTE1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r385771150", "bodyText": "fyi - I am not removing this onBeforeSendRequest , moving it early in the stack to getCreateDocumentRequest method , ensuring we are capturing meta data (collection calls) in retries", "author": "simplynaveen20", "createdAt": "2020-02-28T15:48:40Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1120,14 +1133,10 @@ void captureSessionToken(RxDocumentServiceRequest request, RxDocumentServiceResp\n         try {\n             logger.debug(\"Creating a Document. collectionLink: [{}]\", collectionLink);\n \n-            Mono<RxDocumentServiceRequest> requestObs = getCreateDocumentRequest(collectionLink, document,\n+            Mono<RxDocumentServiceRequest> requestObs = getCreateDocumentRequest(requestRetryPolicy, collectionLink, document,\n                 options, disableAutomaticIdGeneration, OperationType.Create);\n \n             Mono<RxDocumentServiceResponse> responseObservable = requestObs.flatMap(request -> {\n-                if (requestRetryPolicy != null) {\n-                    requestRetryPolicy.onBeforeSendRequest(request);", "originalCommit": "89d6dca1697a404d152a167dbee50f35ad855729", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5NTMwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r402395307", "bodyText": "the purpose of getCreateDocumentRequest is just to create the request. retry-policy interaction should happen outside. why are we moving this?", "author": "moderakh", "createdAt": "2020-04-02T15:16:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3MTE1MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "b57868239bad96a91a3676575c4dc44cd0b155de", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b57868239bad96a91a3676575c4dc44cd0b155de", "message": "resolving merge conflicts", "committedDate": "2020-02-28T16:19:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0MzAzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387143036", "bodyText": "I think it is Metadata not MetaData", "author": "moderakh", "createdAt": "2020-03-03T16:32:16Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java", "diffHunk": "@@ -9,12 +9,14 @@\n import com.azure.cosmos.implementation.CosmosPagedFluxOptions;\n import com.azure.cosmos.implementation.Document;\n import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.MetaDataDiagnosticsContext;", "originalCommit": "b57868239bad96a91a3676575c4dc44cd0b155de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56e806ddfed0d22f3e2ad2980df8918e233ee2e7", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java\nindex 01de0917cd2..6146dc84e2e 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java\n\n@@ -3,10 +3,10 @@\n \n package com.azure.cosmos;\n \n+import com.azure.cosmos.implementation.ChangeFeedOptions;\n import com.azure.cosmos.implementation.Configs;\n import com.azure.cosmos.implementation.Constants;\n import com.azure.cosmos.implementation.CosmosItemProperties;\n-import com.azure.cosmos.implementation.CosmosPagedFluxOptions;\n import com.azure.cosmos.implementation.Document;\n import com.azure.cosmos.implementation.HttpConstants;\n import com.azure.cosmos.implementation.MetaDataDiagnosticsContext;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0NTAxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387145015", "bodyText": "I noticed in the resultant diagnostics string some fields are utc and some have timezone. I wonder why you have the mix of the two?", "author": "moderakh", "createdAt": "2020-03-03T16:35:19Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java", "diffHunk": "@@ -275,8 +264,8 @@ public void serialize(ClientSideRequestStatistics statistics, JsonGenerator gene\n             generator.writeStartObject();\n             long requestLatency = statistics.getRequestLatency().toMillis();;\n             generator.writeNumberField(\"requestLatency\", requestLatency);\n-            generator.writeStringField(\"requestStartTime\", formatDateTime(statistics.requestStartTime));\n-            generator.writeStringField(\"requestEndTime\", formatDateTime(statistics.requestEndTime));\n+            generator.writeStringField(\"requestStartTimeUTC\", ZonedDateTimeSerializer.formatDateTime(statistics.requestStartTimeUTC));", "originalCommit": "b57868239bad96a91a3676575c4dc44cd0b155de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyOTU5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r397429595", "bodyText": "trying to move every time to utc to avoid confusion during debugging", "author": "simplynaveen20", "createdAt": "2020-03-24T20:09:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0NTAxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "56e806ddfed0d22f3e2ad2980df8918e233ee2e7", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java\nindex 97a5a655744..b15dc652a49 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java\n\n@@ -222,47 +236,50 @@ class ClientSideRequestStatistics {\n \n     static class StoreResponseStatistics {\n         @JsonSerialize(using = StoreResult.StoreResultSerializer.class)\n-        public StoreResult storeResult;\n+        StoreResult storeResult;\n         @JsonSerialize(using = ZonedDateTimeSerializer.class)\n-        public ZonedDateTime requestResponseTime;\n-        public ResourceType requestResourceType;\n-        public OperationType requestOperationType;\n+        ZonedDateTime requestResponseTime;\n+        ResourceType requestResourceType;\n+        OperationType requestOperationType;\n     }\n \n-    private class AddressResolutionStatistics {\n-        @JsonSerialize(using = ZonedDateTimeSerializer.class)\n-        public ZonedDateTime startTime;\n-        @JsonSerialize(using = ZonedDateTimeSerializer.class)\n-        public ZonedDateTime endTime;\n-        public String targetEndpoint;\n-    }\n+    private static class SystemInformation {\n+        String usedMemory;\n+        String availableMemory;\n+        String processCpuLoad;\n+        String systemCpuLoad;\n \n-    private class GatewayStatistics {\n-        public String sessionToken;\n-        public OperationType operationType;\n-        public int statusCode;\n-        public int subStatusCode;\n-        public String requestCharge;\n-        public RequestTimeline requestTimeline;\n-    }\n+        public String getUsedMemory() {\n+            return usedMemory;\n+        }\n \n-    private static class SystemInformation {\n-        public String usedMemory;\n-        public String availableMemory;\n-        public String processCpuLoad;\n-        public String systemCpuLoad;\n+        public String getAvailableMemory() {\n+            return availableMemory;\n+        }\n+\n+        public String getProcessCpuLoad() {\n+            return processCpuLoad;\n+        }\n+\n+        public String getSystemCpuLoad() {\n+            return systemCpuLoad;\n+        }\n     }\n \n-    static class ClientSideRequestStatisticsSerializer extends StdSerializer<ClientSideRequestStatistics> {\n+    public static class ClientSideRequestStatisticsSerializer extends StdSerializer<ClientSideRequestStatistics> {\n \n-        public ClientSideRequestStatisticsSerializer(){\n+        private static final long serialVersionUID = -2746532297176812860L;\n+\n+        ClientSideRequestStatisticsSerializer() {\n             super(ClientSideRequestStatistics.class);\n         }\n \n         @Override\n-        public void serialize(ClientSideRequestStatistics statistics, JsonGenerator generator, SerializerProvider provider) throws IOException {\n+        public void serialize(\n+            ClientSideRequestStatistics statistics, JsonGenerator generator, SerializerProvider provider) throws\n+            IOException {\n             generator.writeStartObject();\n-            long requestLatency = statistics.getRequestLatency().toMillis();;\n+            long requestLatency = statistics.getRequestLatency().toMillis();\n             generator.writeNumberField(\"requestLatency\", requestLatency);\n             generator.writeStringField(\"requestStartTimeUTC\", ZonedDateTimeSerializer.formatDateTime(statistics.requestStartTimeUTC));\n             generator.writeStringField(\"requestEndTimeUTC\", ZonedDateTimeSerializer.formatDateTime(statistics.requestEndTimeUTC));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0NTI0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387145246", "bodyText": "metaData -> metadata here and other places please", "author": "moderakh", "createdAt": "2020-03-03T16:35:41Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java", "diffHunk": "@@ -292,6 +281,8 @@ public void serialize(ClientSideRequestStatistics statistics, JsonGenerator gene\n             generator.writeObjectField(\"addressResolutionStatistics\", statistics.addressResolutionStatistics);\n             generator.writeObjectField(\"regionsContacted\", statistics.regionsContacted);\n             generator.writeObjectField(\"retryContext\", statistics.retryContext);\n+            generator.writeObjectField(\"metaDataDiagnosticsContext\", statistics.getMetaDataDiagnosticsContext());", "originalCommit": "b57868239bad96a91a3676575c4dc44cd0b155de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56e806ddfed0d22f3e2ad2980df8918e233ee2e7", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java\nindex 97a5a655744..b15dc652a49 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java\n\n@@ -272,10 +289,14 @@ class ClientSideRequestStatistics {\n             int initialIndex =\n                 Math.max(supplementalResponseStatisticsListCount - MAX_SUPPLEMENTAL_REQUESTS_FOR_TO_STRING, 0);\n             if (initialIndex != 0) {\n-                List<StoreResponseStatistics> subList = statistics.supplementalResponseStatisticsList.subList(initialIndex, supplementalResponseStatisticsListCount);\n+                List<StoreResponseStatistics> subList = statistics.supplementalResponseStatisticsList\n+                                                            .subList(initialIndex,\n+                                                                     supplementalResponseStatisticsListCount);\n                 generator.writeObjectField(\"supplementalResponseStatisticsList\", subList);\n-            } else{\n-                generator.writeObjectField(\"supplementalResponseStatisticsList\", statistics.supplementalResponseStatisticsList);\n+            } else {\n+                generator\n+                    .writeObjectField(\"supplementalResponseStatisticsList\",\n+                                      statistics.supplementalResponseStatisticsList);\n             }\n \n             generator.writeObjectField(\"addressResolutionStatistics\", statistics.addressResolutionStatistics);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0NzY0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387147649", "bodyText": "why are we preferring this approach over having a start timer and end timer before and after serialization?\nthis way you have to change every deserialization() code to a () -> deserialization() ?", "author": "moderakh", "createdAt": "2020-03-03T16:39:27Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainerResponse.java", "diffHunk": "@@ -18,7 +21,11 @@\n             super.setProperties(null);\n             container = null;\n         } else {\n-            CosmosContainerProperties props = new CosmosContainerProperties(bodyAsString);\n+            Callable<CosmosContainerProperties> createCosmosContainerPropertiesCallable = () -> {\n+                return new CosmosContainerProperties(bodyAsString);\n+            };\n+            SerializationDiagnosticsContext serializationDiagnosticsContext = BridgeInternal.getSerializationDiagnosticsContext(this.getCosmosResponseDiagnostics());\n+            CosmosContainerProperties props = serializationDiagnosticsContext.getResource(createCosmosContainerPropertiesCallable, SerializationDiagnosticsContext.SerializationType.ContainerSerialization);", "originalCommit": "b57868239bad96a91a3676575c4dc44cd0b155de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNTcxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r397435718", "bodyText": "This way we need not to put start,end time and adding it to the serialization list , that logic can be confined in one place.  There are some places where we can't use getResource() due to unavailability of serialization context  such as in getCreateDocumentRequest() in RxDocumentClientImpl.java , so for those we have addSerializationDiagnostics() as you suggesting.", "author": "simplynaveen20", "createdAt": "2020-03-24T20:20:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0NzY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxMjk0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r398212948", "bodyText": "removed callable as it was have some perf cost", "author": "simplynaveen20", "createdAt": "2020-03-25T22:36:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0NzY0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d096ab1925bdf2120703e8ab16b23f6ac49d3fc9", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainerResponse.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainerResponse.java\ndeleted file mode 100644\nindex db2b0d6cf0c..00000000000\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainerResponse.java\n+++ /dev/null\n\n@@ -1,69 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-package com.azure.cosmos;\n-\n-import com.azure.cosmos.implementation.DocumentCollection;\n-import com.azure.cosmos.implementation.ResourceResponse;\n-import com.azure.cosmos.implementation.SerializationDiagnosticsContext;\n-import org.apache.commons.lang3.StringUtils;\n-\n-import java.util.concurrent.Callable;\n-\n-@SuppressWarnings(\"enforcefinalfields\")\n-public class CosmosAsyncContainerResponse extends CosmosResponse<CosmosContainerProperties> {\n-\n-    private final CosmosAsyncContainer container;\n-\n-    CosmosAsyncContainerResponse(ResourceResponse<DocumentCollection> response, CosmosAsyncDatabase database) {\n-        super(response);\n-        String bodyAsString = response.getBodyAsString();\n-        if (StringUtils.isEmpty(bodyAsString)) {\n-            super.setProperties(null);\n-            container = null;\n-        } else {\n-            Callable<CosmosContainerProperties> createCosmosContainerPropertiesCallable = () -> {\n-                return new CosmosContainerProperties(bodyAsString);\n-            };\n-            SerializationDiagnosticsContext serializationDiagnosticsContext = BridgeInternal.getSerializationDiagnosticsContext(this.getCosmosResponseDiagnostics());\n-            CosmosContainerProperties props = serializationDiagnosticsContext.getResource(createCosmosContainerPropertiesCallable, SerializationDiagnosticsContext.SerializationType.ContainerSerialization);\n-            super.setProperties(props);\n-            container = new CosmosAsyncContainer(this.getProperties().getId(), database);\n-        }\n-    }\n-\n-    /**\n-     * Gets the progress of an index transformation, if one is underway.\n-     *\n-     * @return the progress of an index transformation.\n-     */\n-    public long getIndexTransformationProgress() {\n-        return resourceResponseWrapper.getIndexTransformationProgress();\n-    }\n-\n-    /**\n-     * Gets the progress of lazy indexing.\n-     *\n-     * @return the progress of lazy indexing.\n-     */\n-    long getLazyIndexingProgress() {\n-        return resourceResponseWrapper.getLazyIndexingProgress();\n-    }\n-\n-    /**\n-     * Gets the container properties\n-     *\n-     * @return the cosmos container properties\n-     */\n-    public CosmosContainerProperties getProperties() {\n-        return super.getProperties();\n-    }\n-\n-    /**\n-     * Gets the Container object\n-     *\n-     * @return the Cosmos container object\n-     */\n-    public CosmosAsyncContainer getContainer() {\n-        return container;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0OTU3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387149578", "bodyText": "this is .Net naming style. the enum types should have java naming style.", "author": "moderakh", "createdAt": "2020-03-03T16:42:15Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/MetaDataDiagnosticsContext.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.ZonedDateTimeSerializer;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class MetaDataDiagnosticsContext {\n+    public volatile List<MetaDataDiagnostic> metaDataDiagnosticList;\n+\n+    public void addMetaDataDiagnostic(MetaDataDiagnostic metaDataDiagnostic) {\n+        if (metaDataDiagnosticList == null) {\n+            metaDataDiagnosticList = new ArrayList<>();\n+        }\n+\n+        metaDataDiagnosticList.add(metaDataDiagnostic);\n+    }\n+\n+    @JsonSerialize(using = MetaDataDiagnosticSerializer.class)\n+    public static class MetaDataDiagnostic {\n+        public volatile ZonedDateTime startTimeUTC;\n+        public volatile ZonedDateTime endTimeUTC;\n+        public volatile MetaDataEnum metaDataName;\n+\n+        public MetaDataDiagnostic(ZonedDateTime startTimeUTC, ZonedDateTime endTimeUTC, MetaDataEnum metaDataName) {\n+            this.startTimeUTC = startTimeUTC;\n+            this.endTimeUTC = endTimeUTC;\n+            this.metaDataName = metaDataName;\n+        }\n+    }\n+\n+    static class MetaDataDiagnosticSerializer extends StdSerializer<MetaDataDiagnostic> {\n+\n+        public MetaDataDiagnosticSerializer() {\n+            super(MetaDataDiagnostic.class);\n+        }\n+\n+        @Override\n+        public void serialize(MetaDataDiagnostic metaDataDiagnostic, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {\n+            Duration durationinMS = metaDataDiagnostic.startTimeUTC == null ?\n+                null : metaDataDiagnostic.endTimeUTC == null ?\n+                Duration.ZERO : Duration.between(metaDataDiagnostic.startTimeUTC, metaDataDiagnostic.endTimeUTC);\n+            jsonGenerator.writeStartObject();\n+            jsonGenerator.writeObjectField(\"metaDataName\", metaDataDiagnostic.metaDataName);\n+            jsonGenerator.writeStringField(\"startTimeUTC\", ZonedDateTimeSerializer.formatDateTime(metaDataDiagnostic.startTimeUTC));\n+            jsonGenerator.writeStringField(\"endTimeUTC\", ZonedDateTimeSerializer.formatDateTime(metaDataDiagnostic.endTimeUTC));\n+            if(durationinMS != null) {\n+                jsonGenerator.writeNumberField(\"durationinMS\", durationinMS.toMillis());\n+            }\n+\n+            jsonGenerator.writeEndObject();\n+        }\n+    }\n+    public enum  MetaDataEnum{\n+        ContainerLookUp,\n+        PartitionKeyRangeLookUp,\n+        ServerAddressLookup,\n+        MasterAddressLookUp", "originalCommit": "b57868239bad96a91a3676575c4dc44cd0b155de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8f5dc0ca19d03c9f872b26ab7238cb887d4eae4", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/MetaDataDiagnosticsContext.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/MetaDataDiagnosticsContext.java\ndeleted file mode 100644\nindex aa39530e1f6..00000000000\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/MetaDataDiagnosticsContext.java\n+++ /dev/null\n\n@@ -1,71 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.cosmos.implementation;\n-\n-import com.azure.cosmos.ZonedDateTimeSerializer;\n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n-import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n-\n-import java.io.IOException;\n-import java.time.Duration;\n-import java.time.ZonedDateTime;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-public class MetaDataDiagnosticsContext {\n-    public volatile List<MetaDataDiagnostic> metaDataDiagnosticList;\n-\n-    public void addMetaDataDiagnostic(MetaDataDiagnostic metaDataDiagnostic) {\n-        if (metaDataDiagnosticList == null) {\n-            metaDataDiagnosticList = new ArrayList<>();\n-        }\n-\n-        metaDataDiagnosticList.add(metaDataDiagnostic);\n-    }\n-\n-    @JsonSerialize(using = MetaDataDiagnosticSerializer.class)\n-    public static class MetaDataDiagnostic {\n-        public volatile ZonedDateTime startTimeUTC;\n-        public volatile ZonedDateTime endTimeUTC;\n-        public volatile MetaDataEnum metaDataName;\n-\n-        public MetaDataDiagnostic(ZonedDateTime startTimeUTC, ZonedDateTime endTimeUTC, MetaDataEnum metaDataName) {\n-            this.startTimeUTC = startTimeUTC;\n-            this.endTimeUTC = endTimeUTC;\n-            this.metaDataName = metaDataName;\n-        }\n-    }\n-\n-    static class MetaDataDiagnosticSerializer extends StdSerializer<MetaDataDiagnostic> {\n-\n-        public MetaDataDiagnosticSerializer() {\n-            super(MetaDataDiagnostic.class);\n-        }\n-\n-        @Override\n-        public void serialize(MetaDataDiagnostic metaDataDiagnostic, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {\n-            Duration durationinMS = metaDataDiagnostic.startTimeUTC == null ?\n-                null : metaDataDiagnostic.endTimeUTC == null ?\n-                Duration.ZERO : Duration.between(metaDataDiagnostic.startTimeUTC, metaDataDiagnostic.endTimeUTC);\n-            jsonGenerator.writeStartObject();\n-            jsonGenerator.writeObjectField(\"metaDataName\", metaDataDiagnostic.metaDataName);\n-            jsonGenerator.writeStringField(\"startTimeUTC\", ZonedDateTimeSerializer.formatDateTime(metaDataDiagnostic.startTimeUTC));\n-            jsonGenerator.writeStringField(\"endTimeUTC\", ZonedDateTimeSerializer.formatDateTime(metaDataDiagnostic.endTimeUTC));\n-            if(durationinMS != null) {\n-                jsonGenerator.writeNumberField(\"durationinMS\", durationinMS.toMillis());\n-            }\n-\n-            jsonGenerator.writeEndObject();\n-        }\n-    }\n-    public enum  MetaDataEnum{\n-        ContainerLookUp,\n-        PartitionKeyRangeLookUp,\n-        ServerAddressLookup,\n-        MasterAddressLookUp\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1MjY0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387152645", "bodyText": "I am guessing this can be accessed from multiple threads. Then shouldn't this be a synchronized list?\nsee this similar race condition bug in the diagnostics string: #8505", "author": "moderakh", "createdAt": "2020-03-03T16:46:57Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/MetaDataDiagnosticsContext.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.ZonedDateTimeSerializer;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class MetaDataDiagnosticsContext {\n+    public volatile List<MetaDataDiagnostic> metaDataDiagnosticList;", "originalCommit": "b57868239bad96a91a3676575c4dc44cd0b155de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8f5dc0ca19d03c9f872b26ab7238cb887d4eae4", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/MetaDataDiagnosticsContext.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/MetaDataDiagnosticsContext.java\ndeleted file mode 100644\nindex aa39530e1f6..00000000000\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/MetaDataDiagnosticsContext.java\n+++ /dev/null\n\n@@ -1,71 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.cosmos.implementation;\n-\n-import com.azure.cosmos.ZonedDateTimeSerializer;\n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n-import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n-\n-import java.io.IOException;\n-import java.time.Duration;\n-import java.time.ZonedDateTime;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-public class MetaDataDiagnosticsContext {\n-    public volatile List<MetaDataDiagnostic> metaDataDiagnosticList;\n-\n-    public void addMetaDataDiagnostic(MetaDataDiagnostic metaDataDiagnostic) {\n-        if (metaDataDiagnosticList == null) {\n-            metaDataDiagnosticList = new ArrayList<>();\n-        }\n-\n-        metaDataDiagnosticList.add(metaDataDiagnostic);\n-    }\n-\n-    @JsonSerialize(using = MetaDataDiagnosticSerializer.class)\n-    public static class MetaDataDiagnostic {\n-        public volatile ZonedDateTime startTimeUTC;\n-        public volatile ZonedDateTime endTimeUTC;\n-        public volatile MetaDataEnum metaDataName;\n-\n-        public MetaDataDiagnostic(ZonedDateTime startTimeUTC, ZonedDateTime endTimeUTC, MetaDataEnum metaDataName) {\n-            this.startTimeUTC = startTimeUTC;\n-            this.endTimeUTC = endTimeUTC;\n-            this.metaDataName = metaDataName;\n-        }\n-    }\n-\n-    static class MetaDataDiagnosticSerializer extends StdSerializer<MetaDataDiagnostic> {\n-\n-        public MetaDataDiagnosticSerializer() {\n-            super(MetaDataDiagnostic.class);\n-        }\n-\n-        @Override\n-        public void serialize(MetaDataDiagnostic metaDataDiagnostic, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {\n-            Duration durationinMS = metaDataDiagnostic.startTimeUTC == null ?\n-                null : metaDataDiagnostic.endTimeUTC == null ?\n-                Duration.ZERO : Duration.between(metaDataDiagnostic.startTimeUTC, metaDataDiagnostic.endTimeUTC);\n-            jsonGenerator.writeStartObject();\n-            jsonGenerator.writeObjectField(\"metaDataName\", metaDataDiagnostic.metaDataName);\n-            jsonGenerator.writeStringField(\"startTimeUTC\", ZonedDateTimeSerializer.formatDateTime(metaDataDiagnostic.startTimeUTC));\n-            jsonGenerator.writeStringField(\"endTimeUTC\", ZonedDateTimeSerializer.formatDateTime(metaDataDiagnostic.endTimeUTC));\n-            if(durationinMS != null) {\n-                jsonGenerator.writeNumberField(\"durationinMS\", durationinMS.toMillis());\n-            }\n-\n-            jsonGenerator.writeEndObject();\n-        }\n-    }\n-    public enum  MetaDataEnum{\n-        ContainerLookUp,\n-        PartitionKeyRangeLookUp,\n-        ServerAddressLookup,\n-        MasterAddressLookUp\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1MjgzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387152839", "bodyText": "I am guessing this can be accessed from multiple threads. Then shouldn't this be a synchronized list?\nsee this similar race condition bug in the diagnostics string: #8505", "author": "moderakh", "createdAt": "2020-03-03T16:47:16Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/MetaDataDiagnosticsContext.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.ZonedDateTimeSerializer;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class MetaDataDiagnosticsContext {\n+    public volatile List<MetaDataDiagnostic> metaDataDiagnosticList;\n+\n+    public void addMetaDataDiagnostic(MetaDataDiagnostic metaDataDiagnostic) {\n+        if (metaDataDiagnosticList == null) {\n+            metaDataDiagnosticList = new ArrayList<>();\n+        }\n+\n+        metaDataDiagnosticList.add(metaDataDiagnostic);", "originalCommit": "b57868239bad96a91a3676575c4dc44cd0b155de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8f5dc0ca19d03c9f872b26ab7238cb887d4eae4", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/MetaDataDiagnosticsContext.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/MetaDataDiagnosticsContext.java\ndeleted file mode 100644\nindex aa39530e1f6..00000000000\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/MetaDataDiagnosticsContext.java\n+++ /dev/null\n\n@@ -1,71 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.cosmos.implementation;\n-\n-import com.azure.cosmos.ZonedDateTimeSerializer;\n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n-import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n-\n-import java.io.IOException;\n-import java.time.Duration;\n-import java.time.ZonedDateTime;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-public class MetaDataDiagnosticsContext {\n-    public volatile List<MetaDataDiagnostic> metaDataDiagnosticList;\n-\n-    public void addMetaDataDiagnostic(MetaDataDiagnostic metaDataDiagnostic) {\n-        if (metaDataDiagnosticList == null) {\n-            metaDataDiagnosticList = new ArrayList<>();\n-        }\n-\n-        metaDataDiagnosticList.add(metaDataDiagnostic);\n-    }\n-\n-    @JsonSerialize(using = MetaDataDiagnosticSerializer.class)\n-    public static class MetaDataDiagnostic {\n-        public volatile ZonedDateTime startTimeUTC;\n-        public volatile ZonedDateTime endTimeUTC;\n-        public volatile MetaDataEnum metaDataName;\n-\n-        public MetaDataDiagnostic(ZonedDateTime startTimeUTC, ZonedDateTime endTimeUTC, MetaDataEnum metaDataName) {\n-            this.startTimeUTC = startTimeUTC;\n-            this.endTimeUTC = endTimeUTC;\n-            this.metaDataName = metaDataName;\n-        }\n-    }\n-\n-    static class MetaDataDiagnosticSerializer extends StdSerializer<MetaDataDiagnostic> {\n-\n-        public MetaDataDiagnosticSerializer() {\n-            super(MetaDataDiagnostic.class);\n-        }\n-\n-        @Override\n-        public void serialize(MetaDataDiagnostic metaDataDiagnostic, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {\n-            Duration durationinMS = metaDataDiagnostic.startTimeUTC == null ?\n-                null : metaDataDiagnostic.endTimeUTC == null ?\n-                Duration.ZERO : Duration.between(metaDataDiagnostic.startTimeUTC, metaDataDiagnostic.endTimeUTC);\n-            jsonGenerator.writeStartObject();\n-            jsonGenerator.writeObjectField(\"metaDataName\", metaDataDiagnostic.metaDataName);\n-            jsonGenerator.writeStringField(\"startTimeUTC\", ZonedDateTimeSerializer.formatDateTime(metaDataDiagnostic.startTimeUTC));\n-            jsonGenerator.writeStringField(\"endTimeUTC\", ZonedDateTimeSerializer.formatDateTime(metaDataDiagnostic.endTimeUTC));\n-            if(durationinMS != null) {\n-                jsonGenerator.writeNumberField(\"durationinMS\", durationinMS.toMillis());\n-            }\n-\n-            jsonGenerator.writeEndObject();\n-        }\n-    }\n-    public enum  MetaDataEnum{\n-        ContainerLookUp,\n-        PartitionKeyRangeLookUp,\n-        ServerAddressLookup,\n-        MasterAddressLookUp\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1Mzg5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387153890", "bodyText": "as you are invoking this in the deserialization codepath it should have the same behaviour in terms of exception throwing.\nThis changes the exception type.", "author": "moderakh", "createdAt": "2020-03-03T16:48:48Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java", "diffHunk": "@@ -0,0 +1,90 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.ZonedDateTimeSerializer;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+\n+public class SerializationDiagnosticsContext {\n+    public volatile List<SerializationDiagnosticsContext.SerializationDiagnostics> serializationDiagnosticsList;\n+\n+    public void addMetaDataDiagnostic(SerializationDiagnosticsContext.SerializationDiagnostics serializationDiagnostics) {\n+        if (serializationDiagnosticsList == null) {\n+            serializationDiagnosticsList = new ArrayList<>();\n+        }\n+\n+        serializationDiagnosticsList.add(serializationDiagnostics);\n+    }\n+\n+    public <T> T getResource(Callable<T> function, SerializationType serializationType) {\n+        ZonedDateTime serializationStartTime = ZonedDateTime.now(ZoneOffset.UTC);\n+        T t = null;\n+        try {\n+            t = function.call();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(e);", "originalCommit": "b57868239bad96a91a3676575c4dc44cd0b155de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1ODA4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r397458083", "bodyText": "All the places where this method is getting called are eventually throwing IllegalArgumentException via  JsonSerializable.  So either we throw  IllegalArgumentException  or let it be the way we have now IllegalStateException wraps IllegalArgumentException, thoughts ? And if we agree on removing getResource() method altogether measuring pros and cons, that this problem will be solved itself.", "author": "simplynaveen20", "createdAt": "2020-03-24T21:01:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1Mzg5MA=="}], "type": "inlineReview", "revised_code": {"commit": "d8f5dc0ca19d03c9f872b26ab7238cb887d4eae4", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java\nindex 6af29d4515e..09b667f6ad5 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java\n\n@@ -14,6 +14,7 @@ import java.time.Duration;\n import java.time.ZoneOffset;\n import java.time.ZonedDateTime;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.concurrent.Callable;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1NDEwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387154108", "bodyText": "I am guessing this can be accessed from multiple threads. Then shouldn't this be a synchronized list?\nsee this similar race condition bug in the diagnostics string: #8505", "author": "moderakh", "createdAt": "2020-03-03T16:49:09Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java", "diffHunk": "@@ -0,0 +1,90 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.ZonedDateTimeSerializer;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+\n+public class SerializationDiagnosticsContext {\n+    public volatile List<SerializationDiagnosticsContext.SerializationDiagnostics> serializationDiagnosticsList;\n+\n+    public void addMetaDataDiagnostic(SerializationDiagnosticsContext.SerializationDiagnostics serializationDiagnostics) {\n+        if (serializationDiagnosticsList == null) {\n+            serializationDiagnosticsList = new ArrayList<>();\n+        }\n+\n+        serializationDiagnosticsList.add(serializationDiagnostics);", "originalCommit": "b57868239bad96a91a3676575c4dc44cd0b155de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8f5dc0ca19d03c9f872b26ab7238cb887d4eae4", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java\nindex 6af29d4515e..09b667f6ad5 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java\n\n@@ -14,6 +14,7 @@ import java.time.Duration;\n import java.time.ZoneOffset;\n import java.time.ZonedDateTime;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.concurrent.Callable;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1NTA2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387155062", "bodyText": "also a general question, you changed the deserialization() -> () -> deserialization() everywhere thourhgout the code.\nAny reason we are not capturing the start and end time of deserialization and pass here only the time window?", "author": "moderakh", "createdAt": "2020-03-03T16:50:32Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java", "diffHunk": "@@ -0,0 +1,90 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.ZonedDateTimeSerializer;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+\n+public class SerializationDiagnosticsContext {\n+    public volatile List<SerializationDiagnosticsContext.SerializationDiagnostics> serializationDiagnosticsList;\n+\n+    public void addMetaDataDiagnostic(SerializationDiagnosticsContext.SerializationDiagnostics serializationDiagnostics) {\n+        if (serializationDiagnosticsList == null) {\n+            serializationDiagnosticsList = new ArrayList<>();\n+        }\n+\n+        serializationDiagnosticsList.add(serializationDiagnostics);\n+    }\n+\n+    public <T> T getResource(Callable<T> function, SerializationType serializationType) {", "originalCommit": "b57868239bad96a91a3676575c4dc44cd0b155de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNTgwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r397435802", "bodyText": "This way we need not to put start,end time and adding it to the serialization list , that logic can be confined in one place.  There are some places where we can't use getResource() due to unavailability of serialization context  such as in getCreateDocumentRequest() in RxDocumentClientImpl.java , so for those we have addSerializationDiagnostics() as you suggesting.", "author": "simplynaveen20", "createdAt": "2020-03-24T20:20:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1NTA2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxMjY0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r398212648", "bodyText": "removed callable", "author": "simplynaveen20", "createdAt": "2020-03-25T22:36:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1NTA2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "d8f5dc0ca19d03c9f872b26ab7238cb887d4eae4", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java\nindex 6af29d4515e..09b667f6ad5 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java\n\n@@ -14,6 +14,7 @@ import java.time.Duration;\n import java.time.ZoneOffset;\n import java.time.ZonedDateTime;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.concurrent.Callable;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1NTQyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387155425", "bodyText": "this is .Net naming for enum. change to Java", "author": "moderakh", "createdAt": "2020-03-03T16:51:03Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java", "diffHunk": "@@ -0,0 +1,90 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.ZonedDateTimeSerializer;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+\n+public class SerializationDiagnosticsContext {\n+    public volatile List<SerializationDiagnosticsContext.SerializationDiagnostics> serializationDiagnosticsList;\n+\n+    public void addMetaDataDiagnostic(SerializationDiagnosticsContext.SerializationDiagnostics serializationDiagnostics) {\n+        if (serializationDiagnosticsList == null) {\n+            serializationDiagnosticsList = new ArrayList<>();\n+        }\n+\n+        serializationDiagnosticsList.add(serializationDiagnostics);\n+    }\n+\n+    public <T> T getResource(Callable<T> function, SerializationType serializationType) {\n+        ZonedDateTime serializationStartTime = ZonedDateTime.now(ZoneOffset.UTC);\n+        T t = null;\n+        try {\n+            t = function.call();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n+        ZonedDateTime serializationEndTime = ZonedDateTime.now(ZoneOffset.UTC);\n+        if (serializationDiagnosticsList == null) {\n+            serializationDiagnosticsList = new ArrayList<>();\n+        }\n+\n+        serializationDiagnosticsList.add(new SerializationDiagnostics(serializationStartTime, serializationEndTime, serializationType));\n+        return t;\n+    }\n+\n+    @JsonSerialize(using = SerializationDiagnosticsContext.SerializationDiagnosticsSerializer.class)\n+    public static class SerializationDiagnostics {\n+        public volatile ZonedDateTime startTimeUTC;\n+        public volatile ZonedDateTime endTimeUTC;\n+        public volatile SerializationDiagnosticsContext.SerializationType serializationType;\n+\n+        public SerializationDiagnostics(ZonedDateTime startTimeUTC, ZonedDateTime endTimeUTC, SerializationDiagnosticsContext.SerializationType serializationType) {\n+            this.startTimeUTC = startTimeUTC;\n+            this.endTimeUTC = endTimeUTC;\n+            this.serializationType = serializationType;\n+        }\n+    }\n+\n+    static class SerializationDiagnosticsSerializer extends StdSerializer<SerializationDiagnosticsContext.SerializationDiagnostics> {\n+\n+        public SerializationDiagnosticsSerializer() {\n+            super(SerializationDiagnosticsContext.SerializationDiagnostics.class);\n+        }\n+\n+        @Override\n+        public void serialize(SerializationDiagnosticsContext.SerializationDiagnostics serializationDiagnostics, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {\n+            Duration durationinMS = serializationDiagnostics.startTimeUTC == null ?\n+                null : serializationDiagnostics.endTimeUTC == null ?\n+                Duration.ZERO : Duration.between(serializationDiagnostics.startTimeUTC, serializationDiagnostics.endTimeUTC);\n+            jsonGenerator.writeStartObject();\n+            jsonGenerator.writeObjectField(\"serializationType\", serializationDiagnostics.serializationType);\n+            jsonGenerator.writeStringField(\"startTimeUTC\", ZonedDateTimeSerializer.formatDateTime(serializationDiagnostics.startTimeUTC));\n+            jsonGenerator.writeStringField(\"endTimeUTC\", ZonedDateTimeSerializer.formatDateTime(serializationDiagnostics.endTimeUTC));\n+            if(durationinMS != null) {\n+                jsonGenerator.writeNumberField(\"durationInMicroSec\", durationinMS.toNanos()/1000);\n+            }\n+\n+            jsonGenerator.writeEndObject();\n+        }\n+    }\n+    public enum  SerializationType{\n+        DatabaseSerialization,\n+        ContainerSerialization,\n+        ItemSerialization,\n+        PartitionKeyFetchSerialization", "originalCommit": "b57868239bad96a91a3676575c4dc44cd0b155de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8f5dc0ca19d03c9f872b26ab7238cb887d4eae4", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java\nindex 6af29d4515e..09b667f6ad5 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java\n\n@@ -14,6 +14,7 @@ import java.time.Duration;\n import java.time.ZoneOffset;\n import java.time.ZonedDateTime;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.concurrent.Callable;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1NjI3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387156272", "bodyText": "code style: always a space between a term and \"{\"\nalso you have two spaces between enum and SerializationType please fix\npublic enum  SerializationType{ -> public enum SerializationType {", "author": "moderakh", "createdAt": "2020-03-03T16:52:21Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java", "diffHunk": "@@ -0,0 +1,90 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.ZonedDateTimeSerializer;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+\n+public class SerializationDiagnosticsContext {\n+    public volatile List<SerializationDiagnosticsContext.SerializationDiagnostics> serializationDiagnosticsList;\n+\n+    public void addMetaDataDiagnostic(SerializationDiagnosticsContext.SerializationDiagnostics serializationDiagnostics) {\n+        if (serializationDiagnosticsList == null) {\n+            serializationDiagnosticsList = new ArrayList<>();\n+        }\n+\n+        serializationDiagnosticsList.add(serializationDiagnostics);\n+    }\n+\n+    public <T> T getResource(Callable<T> function, SerializationType serializationType) {\n+        ZonedDateTime serializationStartTime = ZonedDateTime.now(ZoneOffset.UTC);\n+        T t = null;\n+        try {\n+            t = function.call();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n+        ZonedDateTime serializationEndTime = ZonedDateTime.now(ZoneOffset.UTC);\n+        if (serializationDiagnosticsList == null) {\n+            serializationDiagnosticsList = new ArrayList<>();\n+        }\n+\n+        serializationDiagnosticsList.add(new SerializationDiagnostics(serializationStartTime, serializationEndTime, serializationType));\n+        return t;\n+    }\n+\n+    @JsonSerialize(using = SerializationDiagnosticsContext.SerializationDiagnosticsSerializer.class)\n+    public static class SerializationDiagnostics {\n+        public volatile ZonedDateTime startTimeUTC;\n+        public volatile ZonedDateTime endTimeUTC;\n+        public volatile SerializationDiagnosticsContext.SerializationType serializationType;\n+\n+        public SerializationDiagnostics(ZonedDateTime startTimeUTC, ZonedDateTime endTimeUTC, SerializationDiagnosticsContext.SerializationType serializationType) {\n+            this.startTimeUTC = startTimeUTC;\n+            this.endTimeUTC = endTimeUTC;\n+            this.serializationType = serializationType;\n+        }\n+    }\n+\n+    static class SerializationDiagnosticsSerializer extends StdSerializer<SerializationDiagnosticsContext.SerializationDiagnostics> {\n+\n+        public SerializationDiagnosticsSerializer() {\n+            super(SerializationDiagnosticsContext.SerializationDiagnostics.class);\n+        }\n+\n+        @Override\n+        public void serialize(SerializationDiagnosticsContext.SerializationDiagnostics serializationDiagnostics, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {\n+            Duration durationinMS = serializationDiagnostics.startTimeUTC == null ?\n+                null : serializationDiagnostics.endTimeUTC == null ?\n+                Duration.ZERO : Duration.between(serializationDiagnostics.startTimeUTC, serializationDiagnostics.endTimeUTC);\n+            jsonGenerator.writeStartObject();\n+            jsonGenerator.writeObjectField(\"serializationType\", serializationDiagnostics.serializationType);\n+            jsonGenerator.writeStringField(\"startTimeUTC\", ZonedDateTimeSerializer.formatDateTime(serializationDiagnostics.startTimeUTC));\n+            jsonGenerator.writeStringField(\"endTimeUTC\", ZonedDateTimeSerializer.formatDateTime(serializationDiagnostics.endTimeUTC));\n+            if(durationinMS != null) {\n+                jsonGenerator.writeNumberField(\"durationInMicroSec\", durationinMS.toNanos()/1000);\n+            }\n+\n+            jsonGenerator.writeEndObject();\n+        }\n+    }\n+    public enum  SerializationType{", "originalCommit": "b57868239bad96a91a3676575c4dc44cd0b155de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8f5dc0ca19d03c9f872b26ab7238cb887d4eae4", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java\nindex 6af29d4515e..09b667f6ad5 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SerializationDiagnosticsContext.java\n\n@@ -14,6 +14,7 @@ import java.time.Duration;\n import java.time.ZoneOffset;\n import java.time.ZonedDateTime;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.concurrent.Callable;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1NzMwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r387157308", "bodyText": "why do we need explicit priority = 1 here?", "author": "moderakh", "createdAt": "2020-03-03T16:53:51Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosResponseDiagnosticsTest.java", "diffHunk": "@@ -59,23 +59,23 @@ public void afterClass() throws CosmosClientException {\n     @Test(groups = {\"simple\"})\n     public void gatewayDiagnostics() throws CosmosClientException {\n         CosmosItemProperties cosmosItemProperties = getCosmosItemProperties();\n-        CosmosItemResponse<CosmosItemProperties> createResponse = container.createItem(cosmosItemProperties);\n+        CosmosItemResponse<CosmosItemProperties> createResponse = this.container.createItem(cosmosItemProperties);\n         String diagnostics = createResponse.getCosmosResponseDiagnostics().toString();\n         assertThat(diagnostics).contains(\"\\\"connectionMode\\\":\\\"GATEWAY\\\"\");\n         assertThat(diagnostics).doesNotContain((\"\\\"gatewayStatistics\\\":null\"));\n         assertThat(diagnostics).contains(\"\\\"operationType\\\":\\\"Create\\\"\");\n+        assertThat(diagnostics).contains(\"\\\"metaDataName\\\":\\\"ContainerLookUp\\\"\");\n+        assertThat(diagnostics).contains(\"\\\"serializationType\\\":\\\"PartitionKeyFetchSerialization\\\"\");\n         assertThat(createResponse.getCosmosResponseDiagnostics().getRequestLatency()).isNotNull();\n         validateTransportRequestTimelineGateway(diagnostics);\n     }\n \n-    @Test(groups = {\"simple\"})\n+    @Test(groups = {\"simple\"}, priority = 1)", "originalCommit": "b57868239bad96a91a3676575c4dc44cd0b155de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzODAzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r397438033", "bodyText": "Because we want gatewayDiagnostics() and directDiagnostics() to run before gatewayDiagnosticsOnException and directDiagnosticsOnException(), other wise we wont able to test CONTAINER_LOOK_UP and PARTITION_KEY_RANGE_LOOK_UP with 100% of surety in either of these.", "author": "simplynaveen20", "createdAt": "2020-03-24T20:25:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE1NzMwOA=="}], "type": "inlineReview", "revised_code": {"commit": "56e806ddfed0d22f3e2ad2980df8918e233ee2e7", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosResponseDiagnosticsTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosResponseDiagnosticsTest.java\nindex 33c2526e9e3..6cd7cd5a3fb 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosResponseDiagnosticsTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosResponseDiagnosticsTest.java\n\n@@ -60,13 +66,13 @@ public class CosmosResponseDiagnosticsTest extends TestSuiteBase {\n     public void gatewayDiagnostics() throws CosmosClientException {\n         CosmosItemProperties cosmosItemProperties = getCosmosItemProperties();\n         CosmosItemResponse<CosmosItemProperties> createResponse = this.container.createItem(cosmosItemProperties);\n-        String diagnostics = createResponse.getCosmosResponseDiagnostics().toString();\n+        String diagnostics = createResponse.getResponseDiagnostics().toString();\n         assertThat(diagnostics).contains(\"\\\"connectionMode\\\":\\\"GATEWAY\\\"\");\n         assertThat(diagnostics).doesNotContain((\"\\\"gatewayStatistics\\\":null\"));\n         assertThat(diagnostics).contains(\"\\\"operationType\\\":\\\"Create\\\"\");\n         assertThat(diagnostics).contains(\"\\\"metaDataName\\\":\\\"ContainerLookUp\\\"\");\n         assertThat(diagnostics).contains(\"\\\"serializationType\\\":\\\"PartitionKeyFetchSerialization\\\"\");\n-        assertThat(createResponse.getCosmosResponseDiagnostics().getRequestLatency()).isNotNull();\n+        assertThat(createResponse.getResponseDiagnostics().getRequestLatency()).isNotNull();\n         validateTransportRequestTimelineGateway(diagnostics);\n     }\n \n"}}, {"oid": "56e806ddfed0d22f3e2ad2980df8918e233ee2e7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/56e806ddfed0d22f3e2ad2980df8918e233ee2e7", "message": "merging with latest code", "committedDate": "2020-03-24T15:15:14Z", "type": "commit"}, {"oid": "d096ab1925bdf2120703e8ab16b23f6ac49d3fc9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d096ab1925bdf2120703e8ab16b23f6ac49d3fc9", "message": "fixing merge conflicts", "committedDate": "2020-03-24T15:31:10Z", "type": "commit"}, {"oid": "d8f5dc0ca19d03c9f872b26ab7238cb887d4eae4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d8f5dc0ca19d03c9f872b26ab7238cb887d4eae4", "message": "resolving comments", "committedDate": "2020-03-24T20:06:34Z", "type": "commit"}, {"oid": "93af70cb323e575cfe613008f0ac00fc170b4a2f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/93af70cb323e575cfe613008f0ac00fc170b4a2f", "message": "resolving comments", "committedDate": "2020-03-24T20:15:18Z", "type": "commit"}, {"oid": "425ca1928cab67a3c3d8583ded75874f34b3911c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/425ca1928cab67a3c3d8583ded75874f34b3911c", "message": "resolving comments", "committedDate": "2020-03-24T20:17:16Z", "type": "commit"}, {"oid": "581d8a85ddfaee2872281985ba583fe65859df6e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/581d8a85ddfaee2872281985ba583fe65859df6e", "message": "Merge branch 'latest-master' into user/nakumars/newMetaDataAndSerializationDiagnostics", "committedDate": "2020-03-25T15:33:52Z", "type": "commit"}, {"oid": "4f1d7a51567104668e271c4c916b020e620ee25f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4f1d7a51567104668e271c4c916b020e620ee25f", "message": "fixing test case", "committedDate": "2020-03-25T16:38:09Z", "type": "commit"}, {"oid": "359909880befcc570f2023f14104b08cbf386b17", "url": "https://github.com/Azure/azure-sdk-for-java/commit/359909880befcc570f2023f14104b08cbf386b17", "message": "Merge branch 'latest-master' into user/nakumars/newMetaDataAndSerializationDiagnostics", "committedDate": "2020-03-25T17:07:20Z", "type": "commit"}, {"oid": "a211d732e0bba298acefaaabf39fd71083a765ea", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a211d732e0bba298acefaaabf39fd71083a765ea", "message": "merge with master", "committedDate": "2020-03-25T17:09:19Z", "type": "commit"}, {"oid": "e0a99da81b9f3267c145ac7d204b195364c74cc0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e0a99da81b9f3267c145ac7d204b195364c74cc0", "message": "fixing tests", "committedDate": "2020-03-25T17:55:26Z", "type": "commit"}, {"oid": "891e69f38fb17e41e7bcebfdaa8065f6c930b4e9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/891e69f38fb17e41e7bcebfdaa8065f6c930b4e9", "message": "refactor serialization diagnostic", "committedDate": "2020-03-25T22:32:09Z", "type": "commit"}, {"oid": "c759c419326a0d6c337167837d8ef1796669ab4e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c759c419326a0d6c337167837d8ef1796669ab4e", "message": "refactor serialization diagnotics", "committedDate": "2020-03-25T22:34:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM4NTg0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r399385841", "bodyText": "as you are using UTC everywhere, please see if Instant is more appropriate or ZonedDataTime.\nas Instance is UTC only I am guessing it might have better perf.\nPlease do a jmh perf run as discussed offline to compare the two.", "author": "moderakh", "createdAt": "2020-03-27T16:23:15Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java", "diffHunk": "@@ -51,34 +53,31 @@\n \n     private List<URI> contactedReplicas;\n     private Set<URI> failedReplicas;\n-    private ZonedDateTime requestStartTime;\n-    private ZonedDateTime requestEndTime;\n+    private ZonedDateTime requestStartTimeUTC;\n+    private ZonedDateTime requestEndTimeUTC;\n     private Set<URI> regionsContacted;\n     private RetryContext retryContext;\n     private GatewayStatistics gatewayStatistics;\n     private RequestTimeline transportRequestTimeline;\n+    private MetadataDiagnosticsContext metadataDiagnosticsContext;\n+    private SerializationDiagnosticsContext serializationDiagnosticsContext;\n \n     ClientSideRequestStatistics() {\n-        this.requestStartTime = ZonedDateTime.now(ZoneOffset.UTC);\n-        this.requestEndTime = ZonedDateTime.now(ZoneOffset.UTC);\n+        this.requestStartTimeUTC = ZonedDateTime.now(ZoneOffset.UTC);", "originalCommit": "c759c419326a0d6c337167837d8ef1796669ab4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NTkwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r401695904", "bodyText": "InstantVsZonedDateTime.instantTime       thrpt    5  323658648.596 \u00b1 21659882.776  ops/s\nInstantVsZonedDateTime.zonedDateTime     thrpt    5  126614135.659 \u00b1  5709318.981  ops/s\nInstantVsZonedDateTime.zonedDateTimeUTC  thrpt    5  124846883.459 \u00b1 16047362.965  ops/s\nAs per the above number instantTime is performing good.\nHow ever I ran the regular ReadThroughput benchmark with and without PR , results are same, so in overall end to end test it is not making noticeable difference.\nHowever it make sense to use instantTime  if we want UTC . So we have three ways from here onward\n\nChange all the zonedDateTimeUTC   to instantTime  throughout the code(at least in all diagnostics in a separate PR soon after this) and merge this PR\nChanged  zonedDateTimeUTC  to instantTime only in the scope of this PR\nChanged  all the zonedDateTimeUTC   to instantTime with this PR itself .\n\nI am inclined toward 1 as it will be cleaner and more modular.", "author": "simplynaveen20", "createdAt": "2020-04-01T15:16:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM4NTg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4NjQxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r401786415", "bodyText": "@simplynaveen20 Let's do 1 as a separate PR - we should change ZonedDateTimeUTC to instantTime. There is no need for ZonedDateTimeUTC in SDK, as everything should be in UTC.", "author": "kushagraThapar", "createdAt": "2020-04-01T17:28:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM4NTg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4NjQ2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r402386467", "bodyText": "option 1 makes sense.", "author": "moderakh", "createdAt": "2020-04-02T15:05:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM4NTg0MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "4a2b96e9e61b503820702c78b9ad7430d5cfdab4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4a2b96e9e61b503820702c78b9ad7430d5cfdab4", "message": "fixing test case", "committedDate": "2020-04-01T18:53:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5NDA0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r402394041", "bodyText": "the purpose of getCreateDocumentRequest is to create the request. Why retryPolicy is passed here?\nwhoever invokes getCreateDocumentRequest should handle requestRetryPolicy not this method.", "author": "moderakh", "createdAt": "2020-04-02T15:14:49Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -972,15 +1016,26 @@ private static PartitionKeyInternal extractPartitionKeyValueFromDocument(\n             throw new IllegalArgumentException(\"document\");\n         }\n \n+        ZonedDateTime serializationStartTimeUTC = ZonedDateTime.now(ZoneOffset.UTC);\n         ByteBuffer content = BridgeInternal.serializeJsonToByteBuffer(document, mapper);\n+        ZonedDateTime serializationEndTimeUTC = ZonedDateTime.now(ZoneOffset.UTC);\n+        SerializationDiagnosticsContext.SerializationDiagnostics serializationDiagnostics = new SerializationDiagnosticsContext.SerializationDiagnostics(\n+            serializationStartTimeUTC,\n+            serializationEndTimeUTC,\n+            SerializationDiagnosticsContext.SerializationType.ITEM_SERIALIZATION);\n \n         String path = Utils.joinPath(documentCollectionLink, Paths.DOCUMENTS_PATH_SEGMENT);\n         Map<String, String> requestHeaders = this.getRequestHeaders(options);\n \n         RxDocumentServiceRequest request = RxDocumentServiceRequest.create(operationType, ResourceType.Document, path,\n                                                                            requestHeaders, options, content);\n+        if (requestRetryPolicy != null) {\n+            requestRetryPolicy.onBeforeSendRequest(request);", "originalCommit": "4a2b96e9e61b503820702c78b9ad7430d5cfdab4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA3NjkwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r403076901", "bodyText": "discussed offline", "author": "simplynaveen20", "createdAt": "2020-04-03T15:13:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5NDA0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5acaff142c3f9849b299c06b85025460f1b72933", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java\nindex 2c99a26dbd7..d64656579d8 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java\n\n@@ -1034,7 +1044,10 @@ public class RxDocumentClientImpl implements AsyncDocumentClient, IAuthorization\n         }\n \n         SerializationDiagnosticsContext serializationDiagnosticsContext = BridgeInternal.getSerializationDiagnosticsContext(request.requestContext.cosmosResponseDiagnostics);\n-        serializationDiagnosticsContext.addSerializationDiagnostics(serializationDiagnostics);\n+        if (serializationDiagnosticsContext != null) {\n+            serializationDiagnosticsContext.addSerializationDiagnostics(serializationDiagnostics);\n+        }\n+\n         Mono<Utils.ValueHolder<DocumentCollection>> collectionObs = this.collectionCache.resolveCollectionAsync(BridgeInternal.getMetaDataDiagnosticContext(request.requestContext.cosmosResponseDiagnostics), request);\n         return addPartitionKeyInformation(request, content, document, options, collectionObs);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQwMDEwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8607#discussion_r402400104", "bodyText": "is this needed?", "author": "moderakh", "createdAt": "2020-04-02T15:22:55Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosAsyncContainerResponse.java", "diffHunk": "@@ -7,8 +7,13 @@\n import com.azure.cosmos.CosmosAsyncDatabase;\n import com.azure.cosmos.implementation.DocumentCollection;\n import com.azure.cosmos.implementation.ResourceResponse;\n+import com.azure.cosmos.implementation.SerializationDiagnosticsContext;\n import com.azure.cosmos.implementation.apachecommons.lang.StringUtils;\n \n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.util.concurrent.Callable;", "originalCommit": "4a2b96e9e61b503820702c78b9ad7430d5cfdab4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb5949c0d7d49843f01a767d87210a729df98055", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosAsyncContainerResponse.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosAsyncContainerResponse.java\nindex 3456d854d6b..9ff7803a7bb 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosAsyncContainerResponse.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosAsyncContainerResponse.java\n\n@@ -12,7 +12,6 @@ import com.azure.cosmos.implementation.apachecommons.lang.StringUtils;\n \n import java.time.ZoneOffset;\n import java.time.ZonedDateTime;\n-import java.util.concurrent.Callable;\n \n /**\n  * The type Cosmos async container response.\n"}}, {"oid": "9081ada97fc103a7e577545065660c3a75e667d2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9081ada97fc103a7e577545065660c3a75e667d2", "message": "Merge branch 'latest-master' into user/nakumars/newMetaDataAndSerializationDiagnostics", "committedDate": "2020-04-02T19:57:34Z", "type": "commit"}, {"oid": "cb5949c0d7d49843f01a767d87210a729df98055", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cb5949c0d7d49843f01a767d87210a729df98055", "message": "removing unused import and merging with master", "committedDate": "2020-04-02T19:58:37Z", "type": "commit"}, {"oid": "331f737a65b8c8c4c39ad559c33a96a6bc6f6766", "url": "https://github.com/Azure/azure-sdk-for-java/commit/331f737a65b8c8c4c39ad559c33a96a6bc6f6766", "message": "Merge branch 'latest-master' into user/nakumars/newMetaDataAndSerializationDiagnostics", "committedDate": "2020-04-08T14:38:41Z", "type": "commit"}, {"oid": "7cb942e2c14f946a79daa6b70aa4a8a55394d111", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7cb942e2c14f946a79daa6b70aa4a8a55394d111", "message": "merging latest and fixing test case", "committedDate": "2020-04-08T14:40:39Z", "type": "commit"}, {"oid": "3d80bbaa9f0567543f485e8d09f7a52be4b51fe5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3d80bbaa9f0567543f485e8d09f7a52be4b51fe5", "message": "Merge branch 'master' into user/nakumars/newMetaDataAndSerializationDiagnostics", "committedDate": "2020-04-09T18:32:03Z", "type": "commit"}, {"oid": "98d69f1f866337d1f39a4c2a20b85f810d5b165a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/98d69f1f866337d1f39a4c2a20b85f810d5b165a", "message": "Merged latest master and updated module-info with directconnectivity module", "committedDate": "2020-04-09T18:36:38Z", "type": "commit"}, {"oid": "ead6b3c345bb7ed58aee7a21709f67310e6f54e0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ead6b3c345bb7ed58aee7a21709f67310e6f54e0", "message": "Reverted global endpoint manager close change", "committedDate": "2020-04-09T18:56:33Z", "type": "commit"}, {"oid": "2b472c3a658f212a14279a10b35db637bb8a2f93", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2b472c3a658f212a14279a10b35db637bb8a2f93", "message": "Moved ZonedDateTimeSerializer to implementation package", "committedDate": "2020-04-09T19:13:09Z", "type": "commit"}, {"oid": "5e50b30f9aa7b42259e2aea978c1e3914882605c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5e50b30f9aa7b42259e2aea978c1e3914882605c", "message": "Disabled gateway service configuration reader test", "committedDate": "2020-04-09T21:07:24Z", "type": "commit"}, {"oid": "3737f211765c89edc7756d4dadcd164dbbc8d374", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3737f211765c89edc7756d4dadcd164dbbc8d374", "message": "Disabled Gateway Service Configuration reader test", "committedDate": "2020-04-09T22:04:58Z", "type": "commit"}, {"oid": "181ded10620aa2bb5cd00d2e9931b314573a0c1a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/181ded10620aa2bb5cd00d2e9931b314573a0c1a", "message": "closing all the globalendpoint instances in test cases", "committedDate": "2020-04-10T15:05:57Z", "type": "commit"}, {"oid": "eea7431f07eda451a469f493d345b1d6ff4625f3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/eea7431f07eda451a469f493d345b1d6ff4625f3", "message": "Disabling priority for testing our theory", "committedDate": "2020-04-10T16:18:07Z", "type": "commit"}, {"oid": "5acaff142c3f9849b299c06b85025460f1b72933", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5acaff142c3f9849b299c06b85025460f1b72933", "message": "fixing test case", "committedDate": "2020-04-10T17:49:41Z", "type": "commit"}, {"oid": "359f940c7e729c25ab428f018f041cdef1863944", "url": "https://github.com/Azure/azure-sdk-for-java/commit/359f940c7e729c25ab428f018f041cdef1863944", "message": "resolving merge conflict", "committedDate": "2020-04-13T17:29:15Z", "type": "commit"}, {"oid": "3b9522db705e9fdf2acea0c957fde75638eb4ebe", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3b9522db705e9fdf2acea0c957fde75638eb4ebe", "message": "Fixed cosmos check style exclusions", "committedDate": "2020-04-13T20:58:28Z", "type": "commit"}]}