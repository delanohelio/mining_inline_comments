{"pr_number": 15762, "pr_title": "Added response timeout API in reactor netty Http Client", "pr_createdAt": "2020-09-27T23:09:03Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/15762", "timeline": [{"oid": "1968c4cb3fe7e60e93828fb8d1f5ca7ed1a61ad1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1968c4cb3fe7e60e93828fb8d1f5ca7ed1a61ad1", "message": "Added response timeout API for Query Plan, Address Refresh and in general", "committedDate": "2020-09-27T23:08:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY0MjI0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495642244", "bodyText": "why change in method name ?", "author": "simplynaveen20", "createdAt": "2020-09-28T00:53:49Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java", "diffHunk": "@@ -98,29 +100,41 @@ private void configureChannelPipelineHandlers() {\n         Objects.requireNonNull(request.httpMethod());\n         Objects.requireNonNull(request.uri());\n         Objects.requireNonNull(this.httpClientConfig);\n-        if(request.getReactorNettyRequestRecord() == null) {\n+        if(request.reactorNettyRequestRecord() == null) {\n             ReactorNettyRequestRecord reactorNettyRequestRecord = new ReactorNettyRequestRecord();\n             reactorNettyRequestRecord.setTimeCreated(Instant.now());\n-            request.setReactorNettyRequestRecord(reactorNettyRequestRecord);\n+            request.withReactorNettyRequestRecord(reactorNettyRequestRecord);\n         }\n \n         final AtomicReference<ReactorNettyHttpResponse> responseReference = new AtomicReference<>();\n \n+        final Duration responseTimeout;\n+        if (OperationType.QueryPlan.equals(request.operationType())) {\n+            responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getQueryPlanResponseTimeoutInSeconds());\n+        } else if (OperationType.AddressRefresh.equals(request.operationType())) {\n+            responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getAddressRefreshResponseTimeoutInSeconds());\n+        } else {\n+            responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getDirectHttpsResponseTimeoutInSeconds());\n+        }\n+\n+        logger.info(\"Request Operation Type is : {}\", request.operationType());\n+\n         return this.httpClient\n             .observe((connection, state) -> {\n                 Instant time = Instant.now();\n                 if(state.equals(HttpClientState.CONNECTED) || state.equals(HttpClientState.ACQUIRED)){\n-                    request.getReactorNettyRequestRecord().setTimeConnected(time);\n+                    request.reactorNettyRequestRecord().setTimeConnected(time);\n                 } else if(state.equals(HttpClientState.CONFIGURED)){\n-                    request.getReactorNettyRequestRecord().setTimeConfigured(time);\n+                    request.reactorNettyRequestRecord().setTimeConfigured(time);\n                 } else if(state.equals(HttpClientState.REQUEST_SENT)){\n-                    request.getReactorNettyRequestRecord().setTimeSent(time);\n+                    request.reactorNettyRequestRecord().setTimeSent(time);\n                 } else if(state.equals(HttpClientState.RESPONSE_RECEIVED)){\n-                    request.getReactorNettyRequestRecord().setTimeReceived(time);\n+                    request.reactorNettyRequestRecord().setTimeReceived(time);", "originalCommit": "1968c4cb3fe7e60e93828fb8d1f5ca7ed1a61ad1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1NjI2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495656265", "bodyText": "@simplynaveen20  - this is to correct the naming of this API to be in consistent with rest of the APIs in HttpRequest class.", "author": "kushagraThapar", "createdAt": "2020-09-28T02:10:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY0MjI0NA=="}], "type": "inlineReview", "revised_code": {"commit": "c4893e3f01f983ccefbed93e3afe65be094cd63c", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java\nindex 2002f70d580..a1a3d8802b4 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java\n\n@@ -117,8 +117,6 @@ class ReactorNettyClient implements HttpClient {\n             responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getDirectHttpsResponseTimeoutInSeconds());\n         }\n \n-        logger.info(\"Request Operation Type is : {}\", request.operationType());\n-\n         return this.httpClient\n             .observe((connection, state) -> {\n                 Instant time = Instant.now();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY0MjQ3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495642470", "bodyText": "this is for IllegalReferenceCountException ?", "author": "simplynaveen20", "createdAt": "2020-09-28T00:55:20Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java", "diffHunk": "@@ -133,8 +147,16 @@ private void configureChannelPipelineHandlers() {\n             .doOnCancel(() -> {\n                 ReactorNettyHttpResponse reactorNettyHttpResponse = responseReference.get();\n                 if (reactorNettyHttpResponse != null) {\n-                    reactorNettyHttpResponse.releaseAfterCancel(request.httpMethod());\n+                    reactorNettyHttpResponse.releaseOnNotSubscribedResponse(ReactorNettyResponseState.CANCELLED);\n+                }\n+            })\n+            .onErrorMap(throwable -> {\n+                logger.error(\"Error occurred while sending request : \", throwable);\n+                ReactorNettyHttpResponse reactorNettyHttpResponse = responseReference.get();\n+                if (reactorNettyHttpResponse != null) {\n+                    reactorNettyHttpResponse.releaseOnNotSubscribedResponse(ReactorNettyResponseState.ERROR);", "originalCommit": "1968c4cb3fe7e60e93828fb8d1f5ca7ed1a61ad1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1NjMzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495656334", "bodyText": "Yes, this is a safety block for IllegalReferenceCountException :)", "author": "kushagraThapar", "createdAt": "2020-09-28T02:10:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY0MjQ3MA=="}], "type": "inlineReview", "revised_code": {"commit": "c4893e3f01f983ccefbed93e3afe65be094cd63c", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java\nindex 2002f70d580..a1a3d8802b4 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java\n\n@@ -151,7 +149,6 @@ class ReactorNettyClient implements HttpClient {\n                 }\n             })\n             .onErrorMap(throwable -> {\n-                logger.error(\"Error occurred while sending request : \", throwable);\n                 ReactorNettyHttpResponse reactorNettyHttpResponse = responseReference.get();\n                 if (reactorNettyHttpResponse != null) {\n                     reactorNettyHttpResponse.releaseOnNotSubscribedResponse(ReactorNettyResponseState.ERROR);\n"}}, {"oid": "c4893e3f01f983ccefbed93e3afe65be094cd63c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c4893e3f01f983ccefbed93e3afe65be094cd63c", "message": "Retry the queryplan and address refresh calls on gateway ReadTimeOut exception\nUnit tests for above retries\nIllegalRefCount fix by retain()", "committedDate": "2020-09-28T04:45:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMTMxMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495731312", "bodyText": "NIT: I would prefer a name like \"NonIOBoundOperationRetryCount\" - that way we can reuse the constant.", "author": "FabianMeiswinkel", "createdAt": "2020-09-28T07:11:37Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java", "diffHunk": "@@ -29,6 +30,7 @@\n     final static int RetryIntervalInMS = 1000; //Once we detect failover wait for 1 second before retrying request.\n     final static int MaxRetryCount = 120;\n     private final static int MaxServiceUnavailableRetryCount = 1;\n+    private final static int MAX_QUERYPLAN_ADDRESS_RETRY_COUNT = 2;", "originalCommit": "c4893e3f01f983ccefbed93e3afe65be094cd63c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc2MTk0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495761944", "bodyText": "Is 'NonIO' meant for non-user-data?", "author": "kirankumarkolli", "createdAt": "2020-09-28T08:11:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMTMxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxODU0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497018540", "bodyText": "I think keeping it as MAX_QUERY_PLAN_AND_ADDRESS_REFRESH_COUNT makes more sense since it directly relates to just query plan and address refresh.\nIf we need to add more constants, we can merge it afterwards, for now, let's keep it separate to have better readability of the code.", "author": "kushagraThapar", "createdAt": "2020-09-29T20:18:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMTMxMg=="}], "type": "inlineReview", "revised_code": {"commit": "04c3bb733a4a272f6772c3a483cb506aeb7a49ef", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java\nindex b79dcd8c3ec..faf0f9b8682 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java\n\n@@ -30,7 +30,8 @@ public class ClientRetryPolicy extends DocumentClientRetryPolicy {\n     final static int RetryIntervalInMS = 1000; //Once we detect failover wait for 1 second before retrying request.\n     final static int MaxRetryCount = 120;\n     private final static int MaxServiceUnavailableRetryCount = 1;\n-    private final static int MAX_QUERYPLAN_ADDRESS_RETRY_COUNT = 2;\n+    //  Query Plan and Address Refresh will be re-tried 3 times, please check the if condition carefully :)\n+    private final static int MAX_QUERY_PLAN_AND_ADDRESS_RETRY_COUNT = 2;\n \n     private final DocumentClientRetryPolicy throttlingRetry;\n     private final GlobalEndpointManager globalEndpointManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMjU2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495732564", "bodyText": "NIT: similar as above - have a helper function IsNonIOBoundOperation or similar that returns true for now if addres refresh or query plan retrieval but can be extended easily", "author": "FabianMeiswinkel", "createdAt": "2020-09-28T07:14:13Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java", "diffHunk": "@@ -106,9 +110,15 @@ public ClientRetryPolicy(GlobalEndpointManager globalEndpointManager,\n                 } else {\n                     return this.shouldNotRetryOnEndpointFailureAsync(this.isReadRequest, false);\n                 }\n+            } else if (clientException != null && clientException.getCause() instanceof ReadTimeoutException) {", "originalCommit": "c4893e3f01f983ccefbed93e3afe65be094cd63c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1NjUwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r496056501", "bodyText": "We already have a utility class/methods for similar functionality.\nThis should go to the same class as WebExceptionUtility.isNetworkFailure().", "author": "moderakh", "createdAt": "2020-09-28T15:51:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMjU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNjM3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497026377", "bodyText": "This done, we added the retry utility.", "author": "kushagraThapar", "createdAt": "2020-09-29T20:32:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMjU2NA=="}], "type": "inlineReview", "revised_code": {"commit": "d83cb99c3e3d6ba55c68425f75bb5a7e9a93e528", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java\nindex b79dcd8c3ec..843b9e6960a 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java\n\n@@ -111,8 +111,9 @@ public class ClientRetryPolicy extends DocumentClientRetryPolicy {\n                     return this.shouldNotRetryOnEndpointFailureAsync(this.isReadRequest, false);\n                 }\n             } else if (clientException != null && clientException.getCause() instanceof ReadTimeoutException) {\n-                //if operationtype is QueryPlan / AddressRefresh then just retry\n-                if (this.operationType == OperationType.QueryPlan || this.operationType == OperationType.AddressRefresh) {\n+                //if operationType is QueryPlan / AddressRefresh then just retry\n+                //  TODO: We need to add AddressRefresh scenario here\n+                if (this.operationType == OperationType.QueryPlan) {\n                     return shouldRetryQueryPlanAndAddress();\n                 }\n             } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNDI5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495734295", "bodyText": "Question: Why the DIRECT prefix ? This is not just applicable when using Direct Transport with Https Transport (vs. TCP) but for all https calls (independent of Gateway or Direct with Https, correct?) If so I would remove the Direct - could otherwise be too confusing", "author": "FabianMeiswinkel", "createdAt": "2020-09-28T07:17:57Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java", "diffHunk": "@@ -176,6 +182,18 @@ public int getReactorNettyMaxConnectionPoolSize() {\n         return REACTOR_NETTY_MAX_CONNECTION_POOL_SIZE;\n     }\n \n+    public int getDirectHttpsResponseTimeoutInSeconds() {\n+        return getJVMConfigAsInt(DIRECT_HTTPS_RESPONSE_TIMEOUT_IN_SECONDS, DEFAULT_DIRECT_HTTPS_RESPONSE_TIMEOUT_IN_SECONDS);", "originalCommit": "c4893e3f01f983ccefbed93e3afe65be094cd63c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NjIxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r496096216", "bodyText": "The reason I added DIRECT prefix is because all the other Reactor Netty Client Configurations have the same DIRECT_HTTPS prefixes, however, the other configurations were exposed early enough in the days Direct Https mode, which is not intended to be used anymore, so these new configurations can be renamed to something better.", "author": "kushagraThapar", "createdAt": "2020-09-28T16:54:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNDI5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNDA1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497014058", "bodyText": "This is done, resolving the comment now.", "author": "kushagraThapar", "createdAt": "2020-09-29T20:09:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNDI5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d83cb99c3e3d6ba55c68425f75bb5a7e9a93e528", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java\nindex 93751dfde4a..e0f088f2236 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java\n\n@@ -182,15 +182,15 @@ public class Configs {\n         return REACTOR_NETTY_MAX_CONNECTION_POOL_SIZE;\n     }\n \n-    public int getDirectHttpsResponseTimeoutInSeconds() {\n-        return getJVMConfigAsInt(DIRECT_HTTPS_RESPONSE_TIMEOUT_IN_SECONDS, DEFAULT_DIRECT_HTTPS_RESPONSE_TIMEOUT_IN_SECONDS);\n+    public static int getHttpsResponseTimeoutInSeconds() {\n+        return getJVMConfigAsInt(HTTPS_RESPONSE_TIMEOUT_IN_SECONDS, DEFAULT_HTTPS_RESPONSE_TIMEOUT_IN_SECONDS);\n     }\n \n-    public int getQueryPlanResponseTimeoutInSeconds() {\n+    public static int getQueryPlanResponseTimeoutInSeconds() {\n         return getJVMConfigAsInt(QUERY_PLAN_RESPONSE_TIMEOUT_IN_SECONDS, DEFAULT_QUERY_PLAN_RESPONSE_TIMEOUT_IN_SECONDS);\n     }\n \n-    public int getAddressRefreshResponseTimeoutInSeconds() {\n+    public static int getAddressRefreshResponseTimeoutInSeconds() {\n         return getJVMConfigAsInt(ADDRESS_REFRESH_RESPONSE_TIMEOUT_IN_SECONDS, DEFAULT_ADDRESS_REFRESH_RESPONSE_TIMEOUT_IN_SECONDS);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNjQyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495736424", "bodyText": "NIT - do we also want to expose maxRetryCount in VMOptions?", "author": "FabianMeiswinkel", "createdAt": "2020-09-28T07:22:21Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java", "diffHunk": "@@ -65,6 +68,9 @@\n     private static final Duration CONNECTION_ACQUIRE_TIMEOUT = Duration.ofSeconds(45);\n     private static final int REACTOR_NETTY_MAX_CONNECTION_POOL_SIZE = 1000;\n     private static final String REACTOR_NETTY_CONNECTION_POOL_NAME = \"reactor-netty-connection-pool\";\n+    private static final int DEFAULT_DIRECT_HTTPS_RESPONSE_TIMEOUT_IN_SECONDS = 60;\n+    private static final int DEFAULT_QUERY_PLAN_RESPONSE_TIMEOUT_IN_SECONDS = 3;\n+    private static final int DEFAULT_ADDRESS_REFRESH_RESPONSE_TIMEOUT_IN_SECONDS = 3;", "originalCommit": "c4893e3f01f983ccefbed93e3afe65be094cd63c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNDQzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497014435", "bodyText": "We decided to not expose it, as we have other properties in that file too which we are not exposing. So let's keep it as it is for now, if customers want it, we can expose it.\n@FabianMeiswinkel @simplynaveen20 @moderakh  thoughts?", "author": "kushagraThapar", "createdAt": "2020-09-29T20:10:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNjQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyMTI3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497021274", "bodyText": "Yes lets not expose it now , retry is internal logic ,and we have not expose it for others either. Time out is expose system property , if any issue comes we can fine tune with that", "author": "simplynaveen20", "createdAt": "2020-09-29T20:23:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNjQyNA=="}], "type": "inlineReview", "revised_code": {"commit": "d83cb99c3e3d6ba55c68425f75bb5a7e9a93e528", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java\nindex 93751dfde4a..e0f088f2236 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Configs.java\n\n@@ -68,7 +68,7 @@ public class Configs {\n     private static final Duration CONNECTION_ACQUIRE_TIMEOUT = Duration.ofSeconds(45);\n     private static final int REACTOR_NETTY_MAX_CONNECTION_POOL_SIZE = 1000;\n     private static final String REACTOR_NETTY_CONNECTION_POOL_NAME = \"reactor-netty-connection-pool\";\n-    private static final int DEFAULT_DIRECT_HTTPS_RESPONSE_TIMEOUT_IN_SECONDS = 60;\n+    private static final int DEFAULT_HTTPS_RESPONSE_TIMEOUT_IN_SECONDS = 60;\n     private static final int DEFAULT_QUERY_PLAN_RESPONSE_TIMEOUT_IN_SECONDS = 3;\n     private static final int DEFAULT_ADDRESS_REFRESH_RESPONSE_TIMEOUT_IN_SECONDS = 3;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0NjYxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495746615", "bodyText": "When searching for Unpooled.wrappedBuffer there are several other places where we don't retain it as well.  SHouldn't this be consistent across the board?", "author": "FabianMeiswinkel", "createdAt": "2020-09-28T07:42:49Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/BufferedHttpResponse.java", "diffHunk": "@@ -50,7 +50,7 @@ public HttpHeaders headers() {\n \n     @Override\n     public Flux<ByteBuf> body() {\n-        return bodyAsByteArray().flatMapMany(bytes -> Flux.just(Unpooled.wrappedBuffer(bytes)));\n+        return bodyAsByteArray().flatMapMany(bytes -> Flux.just(Unpooled.wrappedBuffer(bytes).retain()));", "originalCommit": "c4893e3f01f983ccefbed93e3afe65be094cd63c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0ODIwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495748204", "bodyText": "I assume you saw this one? netty/netty#1482", "author": "FabianMeiswinkel", "createdAt": "2020-09-28T07:45:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0NjYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0OTEwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495749106", "bodyText": "I assume calling retain here assuming the factory methods to create the ByteBuf are only called when write etc. is planned later is acceptable - but teh pattern should be consistent - or if there are reaosns to not be consistent everywhere we need to add comments or refactor the code so that the intentions become clear", "author": "FabianMeiswinkel", "createdAt": "2020-09-28T07:47:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0NjYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5ODY3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r496098670", "bodyText": "As discussed, we changed it everywhere where ReactorNettyClient is used, because Http Client handles the reference counts internally (we have no control over it), whereas in Rntbd Client, we manage the reference counts ourselves, and that's why we didn't change the retain() APIs in Rntbd Client usages as it is already handled across the Rntbd layer.\nAgreed, we will add the comments around this code section to make it more clear.", "author": "kushagraThapar", "createdAt": "2020-09-28T16:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0NjYxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNDU0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497014549", "bodyText": "This is done, resolving this conversation.", "author": "kushagraThapar", "createdAt": "2020-09-29T20:10:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0NjYxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9fd600f09faf4785ae76843d1a9c6adf8a16f410", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/BufferedHttpResponse.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/BufferedHttpResponse.java\nindex defd8ec3ef7..9e7f42ab216 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/BufferedHttpResponse.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/BufferedHttpResponse.java\n\n@@ -50,7 +50,7 @@ public class BufferedHttpResponse extends HttpResponse {\n \n     @Override\n     public Flux<ByteBuf> body() {\n-        return bodyAsByteArray().flatMapMany(bytes -> Flux.just(Unpooled.wrappedBuffer(bytes).retain()));\n+        return bodyAsByteArray().flatMapMany(bytes -> Flux.just(Unpooled.wrappedBuffer(bytes)));\n     }\n \n     @Override\n"}}, {"oid": "7f82d1f2b09df29d9b35b098773b2722fece1b3e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7f82d1f2b09df29d9b35b098773b2722fece1b3e", "message": "Adding log on retry", "committedDate": "2020-09-28T07:47:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc2NTc0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495765745", "bodyText": "The logic is not query/address dependent, can it be named generic to convey the intent.", "author": "kirankumarkolli", "createdAt": "2020-09-28T08:18:53Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java", "diffHunk": "@@ -121,6 +131,23 @@ public ClientRetryPolicy(GlobalEndpointManager globalEndpointManager,\n         return this.throttlingRetry.shouldRetry(e);\n     }\n \n+    private Mono<ShouldRetryResult> shouldRetryQueryPlanAndAddress() {", "originalCommit": "7f82d1f2b09df29d9b35b098773b2722fece1b3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNjcyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497026726", "bodyText": "This is very dependent on query/address retry logic, we can revisit it when we will do other meta data calls. This is good for readability.", "author": "kushagraThapar", "createdAt": "2020-09-29T20:33:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc2NTc0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6783e72b5e493473cfb5bed14481b5527f9d9f50", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java\nindex 00ac457df87..209ffa18ea4 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java\n\n@@ -135,14 +136,17 @@ public class ClientRetryPolicy extends DocumentClientRetryPolicy {\n \n         if (this.queryplanAddressRefreshCount++ > MAX_QUERYPLAN_ADDRESS_RETRY_COUNT) {\n             logger\n-                .warn(\"shouldRetryQueryPlanAndAddress() Not retrying. Retry count = {}\",\n-                      this.serviceUnavailableRetryCount);\n+                .warn(\n+                    \"shouldRetryQueryPlanAndAddress() Not retrying on endpoint {}, operationType = {}, count = {}, \" +\n+                        \"isAddressRefresh = {}\",\n+                    this.locationEndpoint, operationType, this.queryplanAddressRefreshCount, this.isAddressRefresh);\n             return Mono.just(ShouldRetryResult.noRetry());\n         }\n \n         logger\n-            .warn(\"shouldRetryQueryPlanAndAddress() Retrying on endpoint {}, operationType = {}, count = {}\",\n-                  this.locationEndpoint, operationType, this.queryplanAddressRefreshCount);\n+            .warn(\"shouldRetryQueryPlanAndAddress() Retrying on endpoint {}, operationType = {}, count = {}, \" +\n+                      \"isAddressRefresh = {}\",\n+                  this.locationEndpoint, operationType, this.queryplanAddressRefreshCount, this.isAddressRefresh);\n \n         Duration retryDelay = Duration.ZERO;\n         return Mono.just(ShouldRetryResult.retryAfter(retryDelay));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc2OTYzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495769636", "bodyText": "HtpReqeustMessage CTOR always forces the operationType, why is it missing?\nIdeally its better to make it operationType immutable.", "author": "kirankumarkolli", "createdAt": "2020-09-28T08:25:40Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/HttpTransportClient.java", "diffHunk": "@@ -361,6 +361,9 @@ private HttpRequest prepareHttpMessage(\n                 throw new IllegalStateException();\n         }\n \n+        // add operation type\n+        httpRequestMessage.withOperationType(request.getOperationType());", "originalCommit": "7f82d1f2b09df29d9b35b098773b2722fece1b3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwMzY0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r496103643", "bodyText": "@kirankumarkolli - HttpRequestMessage constructor does not enforce operationType always, there are few constructors where we don't enforce it, however, we can make it immutable by some small code changes.\n@moderakh  also pointed out another approach, where we don't even need the operationType on the HttpRequestMessage, I think that will be more cleaner, will implement that approach.", "author": "kushagraThapar", "createdAt": "2020-09-28T17:04:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc2OTYzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNDY2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497014669", "bodyText": "This is done, resolving the conversation.", "author": "kushagraThapar", "createdAt": "2020-09-29T20:10:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc2OTYzNg=="}], "type": "inlineReview", "revised_code": {"commit": "d83cb99c3e3d6ba55c68425f75bb5a7e9a93e528", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/HttpTransportClient.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/HttpTransportClient.java\nindex b41a0938ba2..8109299be14 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/HttpTransportClient.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/HttpTransportClient.java\n\n@@ -361,9 +367,6 @@ public class HttpTransportClient extends TransportClient {\n                 throw new IllegalStateException();\n         }\n \n-        // add operation type\n-        httpRequestMessage.withOperationType(request.getOperationType());\n-\n         Map<String, String> documentServiceRequestHeaders = request.getHeaders();\n         HttpHeaders httpRequestHeaders = httpRequestMessage.headers();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MTEwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r495771103", "bodyText": "Will it impact the full region fail-over?\nIf so does it needs to be finer scoped like, ReadTimeout & non-data-plane operations etc...", "author": "kirankumarkolli", "createdAt": "2020-09-28T08:28:08Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayAddressCache.java", "diffHunk": "@@ -559,7 +563,10 @@ public void dispose() {\n             }\n \n             if (WebExceptionUtility.isNetworkFailure(dce)) {\n-                BridgeInternal.setSubStatusCode(dce, HttpConstants.SubStatusCodes.GATEWAY_ENDPOINT_UNAVAILABLE);\n+                if (!(dce.getCause() instanceof ReadTimeoutException)) {", "originalCommit": "7f82d1f2b09df29d9b35b098773b2722fece1b3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNDg0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497014846", "bodyText": "Since it doesn't impacts the Region failover, resolving this conversation.", "author": "kushagraThapar", "createdAt": "2020-09-29T20:11:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MTEwMw=="}], "type": "inlineReview", "revised_code": {"commit": "1f0be619a510c69439c75720b019bf86ce943641", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayAddressCache.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayAddressCache.java\nindex 2c22028cdf6..48b35b5b540 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayAddressCache.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayAddressCache.java\n\n@@ -563,9 +569,10 @@ public class GatewayAddressCache implements IAddressCache {\n             }\n \n             if (WebExceptionUtility.isNetworkFailure(dce)) {\n-                if (!(dce.getCause() instanceof ReadTimeoutException)) {\n-                    BridgeInternal\n-                        .setSubStatusCode(dce, HttpConstants.SubStatusCodes.GATEWAY_ENDPOINT_UNAVAILABLE);\n+                if (WebExceptionUtility.isReadTimeoutException(dce)) {\n+                    BridgeInternal.setSubStatusCode(dce, HttpConstants.SubStatusCodes.GATEWAY_ENDPOINT_READ_TIMEOUT);\n+                } else {\n+                    BridgeInternal.setSubStatusCode(dce, HttpConstants.SubStatusCodes.GATEWAY_ENDPOINT_UNAVAILABLE);\n                 }\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1Mjc4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r496052781", "bodyText": "the safer approach is to do a recursive cause check similar to WebExceptionUtility.isNetworkFailure().\nCan this be factored out as a utility method to WebExceptionUtility similar to WebExceptionUtility.isNetworkFailure().?", "author": "moderakh", "createdAt": "2020-09-28T15:45:52Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java", "diffHunk": "@@ -299,7 +301,10 @@ private String ensureSlashPrefixed(String path) {\n                        }\n \n                        if (WebExceptionUtility.isNetworkFailure(dce)) {\n-                           BridgeInternal.setSubStatusCode(dce, HttpConstants.SubStatusCodes.GATEWAY_ENDPOINT_UNAVAILABLE);\n+                           if (!(dce.getCause() instanceof ReadTimeoutException)) {", "originalCommit": "7f82d1f2b09df29d9b35b098773b2722fece1b3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNDk3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497024978", "bodyText": "This is done.", "author": "kushagraThapar", "createdAt": "2020-09-29T20:29:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1Mjc4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "04c3bb733a4a272f6772c3a483cb506aeb7a49ef", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java\nindex 2335c511bc7..d8c83e476f6 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java\n\n@@ -301,7 +304,7 @@ class RxGatewayStoreModel implements RxStoreModel {\n                        }\n \n                        if (WebExceptionUtility.isNetworkFailure(dce)) {\n-                           if (!(dce.getCause() instanceof ReadTimeoutException)) {\n+                           if (!WebExceptionUtility.isReadTimeoutException(dce)) {\n                                BridgeInternal\n                                    .setSubStatusCode(dce, HttpConstants.SubStatusCodes.GATEWAY_ENDPOINT_UNAVAILABLE);\n                            }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1Mjk4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r496052985", "bodyText": "ditto", "author": "moderakh", "createdAt": "2020-09-28T15:46:10Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayAddressCache.java", "diffHunk": "@@ -342,7 +343,10 @@ public GatewayAddressCache(\n             }\n \n             if (WebExceptionUtility.isNetworkFailure(dce)) {\n-                BridgeInternal.setSubStatusCode(dce, HttpConstants.SubStatusCodes.GATEWAY_ENDPOINT_UNAVAILABLE);\n+                if (!(dce.getCause() instanceof ReadTimeoutException)) {", "originalCommit": "7f82d1f2b09df29d9b35b098773b2722fece1b3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAyNTc0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497025749", "bodyText": "This is done.", "author": "kushagraThapar", "createdAt": "2020-09-29T20:31:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1Mjk4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "04c3bb733a4a272f6772c3a483cb506aeb7a49ef", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayAddressCache.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayAddressCache.java\nindex 2c22028cdf6..8fe298d42a9 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayAddressCache.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayAddressCache.java\n\n@@ -343,9 +346,8 @@ public class GatewayAddressCache implements IAddressCache {\n             }\n \n             if (WebExceptionUtility.isNetworkFailure(dce)) {\n-                if (!(dce.getCause() instanceof ReadTimeoutException)) {\n-                    BridgeInternal\n-                        .setSubStatusCode(dce, HttpConstants.SubStatusCodes.GATEWAY_ENDPOINT_UNAVAILABLE);\n+                if (!WebExceptionUtility.isReadTimeoutException(dce)) {\n+                    BridgeInternal.setSubStatusCode(dce, HttpConstants.SubStatusCodes.GATEWAY_ENDPOINT_UNAVAILABLE);\n                 }\n             }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2ODIyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r496068229", "bodyText": "seems you are trying to fix a netty ref counting issue.\nI don't have all the context. However at the first look this doesn't seem to me to be the right place for increasing the ref count.\nUnpooled.wrappedBuffer() already sets ref count to a non zero value. If we have ref counting issue. I suspect we should fix that elsewhere. not here.", "author": "moderakh", "createdAt": "2020-09-28T16:08:59Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentServiceRequest.java", "diffHunk": "@@ -953,7 +953,7 @@ public void clearRoutingHints() {\n             return Flux.empty();\n         }\n \n-        return Flux.just(Unpooled.wrappedBuffer(contentAsByteArray));\n+        return Flux.just(Unpooled.wrappedBuffer(contentAsByteArray).retain());", "originalCommit": "7f82d1f2b09df29d9b35b098773b2722fece1b3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NzQ5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r496097496", "bodyText": "@moderakh , I checked the code and Unpooled.wrappedBuffer() does not increments the reference count. That's why we need to do it here and at other places where we create this.", "author": "kushagraThapar", "createdAt": "2020-09-28T16:56:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2ODIyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNTExNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497015117", "bodyText": "This is done, resolving the conversation.", "author": "kushagraThapar", "createdAt": "2020-09-29T20:11:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2ODIyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "9fd600f09faf4785ae76843d1a9c6adf8a16f410", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentServiceRequest.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentServiceRequest.java\nindex 2d1619f7492..6d57108de86 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentServiceRequest.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentServiceRequest.java\n\n@@ -953,7 +953,7 @@ public class RxDocumentServiceRequest implements Cloneable {\n             return Flux.empty();\n         }\n \n-        return Flux.just(Unpooled.wrappedBuffer(contentAsByteArray).retain());\n+        return Flux.just(Unpooled.wrappedBuffer(contentAsByteArray));\n     }\n \n     public int getContentLength() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3MjM3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r496072373", "bodyText": "These is business logic. HttpClient should only be doing http network layer handling not business logic.\nIf we need to set a different response timeout per business logic operation then the caller of HttpClient.Send should pass the timeout as an override.\nadding an overloaded method HttpClient.send(httpRequest, responseTimeout) and keeping the business logic out of the HttpClient to me seems a better approach.\nThat way you don't have to add operationType to the HttpRequest.", "author": "moderakh", "createdAt": "2020-09-28T16:15:22Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java", "diffHunk": "@@ -98,29 +100,39 @@ private void configureChannelPipelineHandlers() {\n         Objects.requireNonNull(request.httpMethod());\n         Objects.requireNonNull(request.uri());\n         Objects.requireNonNull(this.httpClientConfig);\n-        if(request.getReactorNettyRequestRecord() == null) {\n+        if(request.reactorNettyRequestRecord() == null) {\n             ReactorNettyRequestRecord reactorNettyRequestRecord = new ReactorNettyRequestRecord();\n             reactorNettyRequestRecord.setTimeCreated(Instant.now());\n-            request.setReactorNettyRequestRecord(reactorNettyRequestRecord);\n+            request.withReactorNettyRequestRecord(reactorNettyRequestRecord);\n         }\n \n         final AtomicReference<ReactorNettyHttpResponse> responseReference = new AtomicReference<>();\n \n+        final Duration responseTimeout;\n+        if (OperationType.QueryPlan.equals(request.operationType())) {\n+            responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getQueryPlanResponseTimeoutInSeconds());\n+        } else if (OperationType.AddressRefresh.equals(request.operationType())) {\n+            responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getAddressRefreshResponseTimeoutInSeconds());\n+        } else {\n+            responseTimeout = Duration.ofSeconds(this.httpClientConfig.getConfigs().getDirectHttpsResponseTimeoutInSeconds());\n+        }", "originalCommit": "7f82d1f2b09df29d9b35b098773b2722fece1b3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwMjY0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r496102641", "bodyText": "@moderakh  - that is good point, we can update it. In fact, we don't even need overloaded API, we can just update the same API since responseTimeout is a must to have value now.", "author": "kushagraThapar", "createdAt": "2020-09-28T17:02:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3MjM3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxNTIxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15762#discussion_r497015219", "bodyText": "This is done too, resolving the conversation.", "author": "kushagraThapar", "createdAt": "2020-09-29T20:12:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3MjM3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d83cb99c3e3d6ba55c68425f75bb5a7e9a93e528", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java\nindex a1a3d8802b4..1c011a9f94a 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java\n\n@@ -96,7 +96,13 @@ class ReactorNettyClient implements HttpClient {\n     }\n \n     @Override\n-    public Mono<HttpResponse> send(final HttpRequest request) {\n+    public Mono<HttpResponse> send(HttpRequest request) {\n+        //  By default, Configs.getHttpsResponseTimeoutInSeconds default value is used as response timeout\n+        return send(request, Duration.ofSeconds(Configs.getHttpsResponseTimeoutInSeconds()));\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> send(final HttpRequest request, Duration responseTimeout) {\n         Objects.requireNonNull(request.httpMethod());\n         Objects.requireNonNull(request.uri());\n         Objects.requireNonNull(this.httpClientConfig);\n"}}, {"oid": "9fd600f09faf4785ae76843d1a9c6adf8a16f410", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9fd600f09faf4785ae76843d1a9c6adf8a16f410", "message": "Remvoving retain() for CTL run.", "committedDate": "2020-09-28T21:14:27Z", "type": "commit"}, {"oid": "d83cb99c3e3d6ba55c68425f75bb5a7e9a93e528", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d83cb99c3e3d6ba55c68425f75bb5a7e9a93e528", "message": "Implemented code review comments, updated responseTimeout API, removed Flux Byte Buf to Flux of byte array", "committedDate": "2020-09-29T00:53:12Z", "type": "commit"}, {"oid": "6783e72b5e493473cfb5bed14481b5527f9d9f50", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6783e72b5e493473cfb5bed14481b5527f9d9f50", "message": "Adding timeout and retry for address refresh\nAdding unit test for above", "committedDate": "2020-09-29T04:41:02Z", "type": "commit"}, {"oid": "f509e904fc1fa5ff32be740a4f70658e226d24b4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f509e904fc1fa5ff32be740a4f70658e226d24b4", "message": "Fixed address refresh retry, updated default timeout for query plan and address refresh to 5 seconds", "committedDate": "2020-09-29T19:05:01Z", "type": "commit"}, {"oid": "d21d4c40fa5fb683e41f19c08495c932f743a482", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d21d4c40fa5fb683e41f19c08495c932f743a482", "message": "Updated spring-boot-starter-parent replace version to 2.2.10.RELEASE", "committedDate": "2020-09-29T20:08:33Z", "type": "commit"}, {"oid": "04c3bb733a4a272f6772c3a483cb506aeb7a49ef", "url": "https://github.com/Azure/azure-sdk-for-java/commit/04c3bb733a4a272f6772c3a483cb506aeb7a49ef", "message": "Renames and code review comments", "committedDate": "2020-09-29T20:53:06Z", "type": "commit"}, {"oid": "757425a0d49fda268b7d27bd3f79a19fc0115ead", "url": "https://github.com/Azure/azure-sdk-for-java/commit/757425a0d49fda268b7d27bd3f79a19fc0115ead", "message": "Checking against general exception e", "committedDate": "2020-09-29T21:00:37Z", "type": "commit"}, {"oid": "1f0be619a510c69439c75720b019bf86ce943641", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1f0be619a510c69439c75720b019bf86ce943641", "message": "Added new substatus code for Gateway ReadTimeoutException", "committedDate": "2020-09-29T22:28:41Z", "type": "commit"}]}