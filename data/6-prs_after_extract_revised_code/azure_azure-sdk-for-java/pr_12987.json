{"pr_number": 12987, "pr_title": "Refactor Formrecognizer samples", "pr_createdAt": "2020-07-09T23:43:20Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/12987", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5Nzg1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r452997858", "bodyText": "using == instead of .equals()?", "author": "mssfang", "createdAt": "2020-07-10T18:12:12Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -430,64 +426,65 @@ public void beginRecognizeReceipts() throws IOException {\n         File receipt = new File(\"{file_source_url}\");\n         Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(receipt.toPath())));\n         formRecognizerAsyncClient.beginRecognizeReceipts(buffer, receipt.length())\n-            .subscribe(recognizePollingOperation ->\n+            .flatMap(recognizePollingOperation ->\n                 // if training polling operation completed, retrieve the final result.\n-                recognizePollingOperation.getFinalResult().subscribe(recognizedReceipts -> {\n-                    for (int i = 0; i < recognizedReceipts.size(); i++) {\n-                        RecognizedForm recognizedForm = recognizedReceipts.get(i);\n-                        Map<String, FormField<?>> recognizedFields = recognizedForm.getFields();\n-                        System.out.printf(\"----------- Recognized Receipt page %d -----------%n\", i);\n-                        FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n-                        if (merchantNameField != null) {\n-                            if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n-                                String merchantName = FieldValueType.STRING.cast(merchantNameField);\n-                                System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n-                                    merchantName, merchantNameField.getConfidence());\n+                recognizePollingOperation.getFinalResult())\n+                    .subscribe(recognizedReceipts -> {\n+                        for (int i = 0; i < recognizedReceipts.size(); i++) {\n+                            RecognizedForm recognizedForm = recognizedReceipts.get(i);\n+                            Map<String, FormField<?>> recognizedFields = recognizedForm.getFields();\n+                            System.out.printf(\"----------- Recognized Receipt page %d -----------%n\", i);\n+                            FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n+                            if (merchantNameField != null) {\n+                                if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n+                                    String merchantName = FieldValueType.STRING.cast(merchantNameField);\n+                                    System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n+                                        merchantName, merchantNameField.getConfidence());\n+                                }\n                             }\n-                        }\n \n-                        FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n-                        if (merchantPhoneNumberField != null) {\n-                            if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n-                                String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n-                                System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n-                                    merchantAddress, merchantPhoneNumberField.getConfidence());\n+                            FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n+                            if (merchantPhoneNumberField != null) {\n+                                if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n+                                    String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n+                                    System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n+                                        merchantAddress, merchantPhoneNumberField.getConfidence());\n+                                }\n                             }\n-                        }\n \n-                        FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n-                        if (transactionDateField != null) {\n-                            if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n-                                LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n-                                System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n-                                    transactionDate, transactionDateField.getConfidence());\n+                            FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n+                            if (transactionDateField != null) {\n+                                if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n+                                    LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n+                                    System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n+                                        transactionDate, transactionDateField.getConfidence());\n+                                }\n                             }\n-                        }\n \n-                        FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n-                        if (receiptItemsField != null) {\n-                            System.out.printf(\"Receipt Items: %n\");\n-                            if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {\n-                                List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n-                                receiptItems.forEach(receiptItem -> {\n-                                    if (FieldValueType.MAP.equals(receiptItem.getValueType())) {\n-\n-                                        Map<String, FormField<?>> formFieldMap = FieldValueType.MAP.cast(receiptItem);\n-                                        formFieldMap.forEach((key, formField) -> {\n-                                            if (\"Quantity\".equals(key)) {\n-                                                if (FieldValueType.DOUBLE.equals(formField.getValueType())) {\n-                                                    Float quantity = FieldValueType.DOUBLE.cast(formField);\n-                                                    System.out.printf(\"Quantity: %f, confidence: %.2f%n\",\n-                                                        quantity, formField.getConfidence());\n+                            FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n+                            if (receiptItemsField != null) {\n+                                System.out.printf(\"Receipt Items: %n\");\n+                                if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {", "originalCommit": "41bc8b212239f187f79ffe971fcec742a0926005", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5ODE5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r452998199", "bodyText": "same to rest of files. Might be need to revisit CodeSnippets files again", "author": "mssfang", "createdAt": "2020-07-10T18:12:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5Nzg1OA=="}], "type": "inlineReview", "revised_code": {"commit": "3a5029108d12147488920707206502aadea890d4", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\nindex d61aa4084c9..2091f322682 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n\n@@ -436,7 +440,7 @@ public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n                             System.out.printf(\"----------- Recognized Receipt page %d -----------%n\", i);\n                             FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n                             if (merchantNameField != null) {\n-                                if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n+                                if (FieldValueType.STRING == merchantNameField.getValueType()) {\n                                     String merchantName = FieldValueType.STRING.cast(merchantNameField);\n                                     System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n                                         merchantName, merchantNameField.getConfidence());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNTIwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r453005201", "bodyText": "perfect place to use stream() method here. Great.", "author": "mssfang", "createdAt": "2020-07-10T18:28:04Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java", "diffHunk": "@@ -443,62 +443,57 @@ public void beginRecognizeReceiptsWithOptions() throws IOException {\n         boolean includeFieldElements = true;\n         byte[] fileContent = Files.readAllBytes(receipt.toPath());\n         InputStream targetStream = new ByteArrayInputStream(fileContent);\n-        formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length(),\n+        for (RecognizedForm recognizedForm : formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length(),\n             new RecognizeOptions()\n                 .setContentType(FormContentType.IMAGE_JPEG)\n                 .setIncludeFieldElements(includeFieldElements)\n                 .setPollInterval(Duration.ofSeconds(5)))\n-            .getFinalResult().forEach(recognizedReceipt -> {\n-                Map<String, FormField<?>> recognizedFields = recognizedReceipt.getFields();\n-                FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n-                if (merchantNameField != null) {\n-                    if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n-                        String merchantName = FieldValueType.STRING.cast(merchantNameField);\n-                        System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n-                            merchantName, merchantNameField.getConfidence());\n-                    }\n+            .getFinalResult()) {\n+            Map<String, FormField<?>> recognizedFields = recognizedForm.getFields();\n+            FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n+            if (merchantNameField != null) {\n+                if (FieldValueType.STRING == merchantNameField.getValueType()) {\n+                    String merchantName = FieldValueType.STRING.cast(merchantNameField);\n+                    System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n+                        merchantName, merchantNameField.getConfidence());\n                 }\n-\n-                FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n-                if (merchantPhoneNumberField != null) {\n-                    if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n-                        String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n-                        System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n-                            merchantAddress, merchantPhoneNumberField.getConfidence());\n-                    }\n+            }\n+            FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n+            if (merchantPhoneNumberField != null) {\n+                if (FieldValueType.PHONE_NUMBER == merchantNameField.getValueType()) {\n+                    String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n+                    System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n+                        merchantAddress, merchantPhoneNumberField.getConfidence());\n                 }\n-\n-                FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n-                if (transactionDateField != null) {\n-                    if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n-                        LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n-                        System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n-                            transactionDate, transactionDateField.getConfidence());\n-                    }\n+            }\n+            FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n+            if (transactionDateField != null) {\n+                if (FieldValueType.DATE == transactionDateField.getValueType()) {\n+                    LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n+                    System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n+                        transactionDate, transactionDateField.getConfidence());\n                 }\n-\n-                FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n-                if (receiptItemsField != null) {\n-                    System.out.printf(\"Receipt Items: %n\");\n-                    if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {\n-                        List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n-                        receiptItems.forEach(receiptItem -> {\n-                            if (FieldValueType.MAP.equals(receiptItem.getValueType())) {\n-                                Map<String, FormField<?>> formFieldMap = FieldValueType.MAP.cast(receiptItem);\n-                                formFieldMap.forEach((key, formField) -> {\n-                                    if (\"Quantity\".equals(key)) {\n-                                        if (FieldValueType.DOUBLE.equals(formField.getValueType())) {\n-                                            Float quantity = FieldValueType.DOUBLE.cast(formField);\n-                                            System.out.printf(\"Quantity: %d, confidence: %.2f%n\",\n-                                                quantity, formField.getConfidence());\n-                                        }\n-                                    }\n-                                });\n+            }\n+            FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n+            if (receiptItemsField != null) {\n+                System.out.printf(\"Receipt Items: %n\");\n+                if (FieldValueType.LIST == receiptItemsField.getValueType()) {\n+                    List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n+                    receiptItems.stream()\n+                        .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValueType())", "originalCommit": "41bc8b212239f187f79ffe971fcec742a0926005", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3a5029108d12147488920707206502aadea890d4", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java\nindex 9d679882292..ff6c25bf2bf 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java\n\n@@ -375,123 +397,125 @@ public class FormRecognizerClientJavaDocCodeSnippets {\n         // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts#InputStream-long\n         File receipt = new File(\"{receipt_url}\");\n         byte[] fileContent = Files.readAllBytes(receipt.toPath());\n-        InputStream targetStream = new ByteArrayInputStream(fileContent);\n+        try (InputStream targetStream = new ByteArrayInputStream(fileContent)) {\n+\n+            formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length()).getFinalResult()\n+                .forEach(recognizedReceipt -> {\n+                    Map<String, FormField<?>> recognizedFields = recognizedReceipt.getFields();\n+                    FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n+                    if (merchantNameField != null) {\n+                        if (FieldValueType.STRING == merchantNameField.getValueType()) {\n+                            String merchantName = FieldValueType.STRING.cast(merchantNameField);\n+                            System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n+                                merchantName, merchantNameField.getConfidence());\n+                        }\n+                    }\n \n-        formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length()).getFinalResult()\n-            .forEach(recognizedReceipt -> {\n-                Map<String, FormField<?>> recognizedFields = recognizedReceipt.getFields();\n+                    FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n+                    if (merchantPhoneNumberField != null) {\n+                        if (FieldValueType.PHONE_NUMBER == merchantPhoneNumberField.getValueType()) {\n+                            String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n+                            System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n+                                merchantAddress, merchantPhoneNumberField.getConfidence());\n+                        }\n+                    }\n+\n+                    FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n+                    if (transactionDateField != null) {\n+                        if (FieldValueType.DATE == transactionDateField.getValueType()) {\n+                            LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n+                            System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n+                                transactionDate, transactionDateField.getConfidence());\n+                        }\n+                    }\n+\n+                    FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n+                    if (receiptItemsField != null) {\n+                        System.out.printf(\"Receipt Items: %n\");\n+                        if (FieldValueType.LIST == receiptItemsField.getValueType()) {\n+                            List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n+                            receiptItems.stream()\n+                                .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValueType())\n+                                .<Map<String, FormField<?>>>map(FieldValueType.MAP::cast)\n+                                .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n+                                    if (\"Quantity\".equals(key)) {\n+                                        if (FieldValueType.DOUBLE == formField.getValueType()) {\n+                                            Float quantity = FieldValueType.DOUBLE.cast(formField);\n+                                            System.out.printf(\"Quantity: %f, confidence: %.2f%n\",\n+                                                quantity, formField.getConfidence());\n+                                        }\n+                                    }\n+                                }));\n+                        }\n+                    }\n+                });\n+        }\n+        // END: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts#InputStream-long\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerClient#beginRecognizeReceipts(InputStream, long, RecognizeOptions)}\n+     * with options\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public void beginRecognizeReceiptsWithOptions() throws IOException {\n+\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts#InputStream-long-recognizeOptions\n+        File receipt = new File(\"{local/file_path/fileName.jpg}\");\n+        boolean includeFieldElements = true;\n+        byte[] fileContent = Files.readAllBytes(receipt.toPath());\n+        try (InputStream targetStream = new ByteArrayInputStream(fileContent)) {\n+            for (RecognizedForm recognizedForm : formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length(),\n+                new RecognizeOptions()\n+                    .setContentType(FormContentType.IMAGE_JPEG)\n+                    .setIncludeFieldElements(includeFieldElements)\n+                    .setPollInterval(Duration.ofSeconds(5)))\n+                .getFinalResult()) {\n+                Map<String, FormField<?>> recognizedFields = recognizedForm.getFields();\n                 FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n                 if (merchantNameField != null) {\n-                    if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n+                    if (FieldValueType.STRING == merchantNameField.getValueType()) {\n                         String merchantName = FieldValueType.STRING.cast(merchantNameField);\n                         System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n                             merchantName, merchantNameField.getConfidence());\n                     }\n                 }\n-\n                 FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n                 if (merchantPhoneNumberField != null) {\n-                    if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n+                    if (FieldValueType.PHONE_NUMBER == merchantPhoneNumberField.getValueType()) {\n                         String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n                         System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n                             merchantAddress, merchantPhoneNumberField.getConfidence());\n                     }\n                 }\n-\n                 FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n                 if (transactionDateField != null) {\n-                    if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n+                    if (FieldValueType.DATE == transactionDateField.getValueType()) {\n                         LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n                         System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n                             transactionDate, transactionDateField.getConfidence());\n                     }\n                 }\n-\n                 FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n                 if (receiptItemsField != null) {\n                     System.out.printf(\"Receipt Items: %n\");\n-                    if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {\n+                    if (FieldValueType.LIST == receiptItemsField.getValueType()) {\n                         List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n                         receiptItems.stream()\n                             .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValueType())\n                             .<Map<String, FormField<?>>>map(FieldValueType.MAP::cast)\n                             .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n                                 if (\"Quantity\".equals(key)) {\n-                                    if (FieldValueType.DOUBLE.equals(formField.getValueType())) {\n+                                    if (FieldValueType.DOUBLE == formField.getValueType()) {\n                                         Float quantity = FieldValueType.DOUBLE.cast(formField);\n-                                        System.out.printf(\"Quantity: %d, confidence: %.2f%n\",\n+                                        System.out.printf(\"Quantity: %f, confidence: %.2f%n\",\n                                             quantity, formField.getConfidence());\n                                     }\n                                 }\n                             }));\n                     }\n                 }\n-            });\n-        // END: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts#InputStream-long\n-    }\n-\n-    /**\n-     * Code snippet for {@link FormRecognizerClient#beginRecognizeReceipts(InputStream, long, RecognizeOptions)}\n-     * with options\n-     *\n-     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n-     */\n-    public void beginRecognizeReceiptsWithOptions() throws IOException {\n-\n-        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts#InputStream-long-recognizeOptions\n-        File receipt = new File(\"{local/file_path/fileName.jpg}\");\n-        boolean includeFieldElements = true;\n-        byte[] fileContent = Files.readAllBytes(receipt.toPath());\n-        InputStream targetStream = new ByteArrayInputStream(fileContent);\n-        for (RecognizedForm recognizedForm : formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length(),\n-            new RecognizeOptions()\n-                .setContentType(FormContentType.IMAGE_JPEG)\n-                .setIncludeFieldElements(includeFieldElements)\n-                .setPollInterval(Duration.ofSeconds(5)))\n-            .getFinalResult()) {\n-            Map<String, FormField<?>> recognizedFields = recognizedForm.getFields();\n-            FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n-            if (merchantNameField != null) {\n-                if (FieldValueType.STRING == merchantNameField.getValueType()) {\n-                    String merchantName = FieldValueType.STRING.cast(merchantNameField);\n-                    System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n-                        merchantName, merchantNameField.getConfidence());\n-                }\n-            }\n-            FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n-            if (merchantPhoneNumberField != null) {\n-                if (FieldValueType.PHONE_NUMBER == merchantNameField.getValueType()) {\n-                    String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n-                    System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n-                        merchantAddress, merchantPhoneNumberField.getConfidence());\n-                }\n-            }\n-            FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n-            if (transactionDateField != null) {\n-                if (FieldValueType.DATE == transactionDateField.getValueType()) {\n-                    LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n-                    System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n-                        transactionDate, transactionDateField.getConfidence());\n-                }\n-            }\n-            FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n-            if (receiptItemsField != null) {\n-                System.out.printf(\"Receipt Items: %n\");\n-                if (FieldValueType.LIST == receiptItemsField.getValueType()) {\n-                    List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n-                    receiptItems.stream()\n-                        .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValueType())\n-                        .<Map<String, FormField<?>>>map(FieldValueType.MAP::cast)\n-                        .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n-                            if (\"Quantity\".equals(key)) {\n-                                if (FieldValueType.DOUBLE.equals(formField.getValueType())) {\n-                                    Float quantity = FieldValueType.DOUBLE.cast(formField);\n-                                    System.out.printf(\"Quantity: %d, confidence: %.2f%n\",\n-                                        quantity, formField.getConfidence());\n-                                }\n-                            }\n-                        }));\n-                }\n             }\n         }\n         // END: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts#InputStream-long-recognizeOptions\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNTYzMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r453005631", "bodyText": "is possible to use stream again and filter here?", "author": "mssfang", "createdAt": "2020-07-10T18:29:02Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java", "diffHunk": "@@ -443,62 +443,57 @@ public void beginRecognizeReceiptsWithOptions() throws IOException {\n         boolean includeFieldElements = true;\n         byte[] fileContent = Files.readAllBytes(receipt.toPath());\n         InputStream targetStream = new ByteArrayInputStream(fileContent);\n-        formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length(),\n+        for (RecognizedForm recognizedForm : formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length(),\n             new RecognizeOptions()\n                 .setContentType(FormContentType.IMAGE_JPEG)\n                 .setIncludeFieldElements(includeFieldElements)\n                 .setPollInterval(Duration.ofSeconds(5)))\n-            .getFinalResult().forEach(recognizedReceipt -> {\n-                Map<String, FormField<?>> recognizedFields = recognizedReceipt.getFields();\n-                FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n-                if (merchantNameField != null) {\n-                    if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n-                        String merchantName = FieldValueType.STRING.cast(merchantNameField);\n-                        System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n-                            merchantName, merchantNameField.getConfidence());\n-                    }\n+            .getFinalResult()) {\n+            Map<String, FormField<?>> recognizedFields = recognizedForm.getFields();\n+            FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n+            if (merchantNameField != null) {\n+                if (FieldValueType.STRING == merchantNameField.getValueType()) {\n+                    String merchantName = FieldValueType.STRING.cast(merchantNameField);\n+                    System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n+                        merchantName, merchantNameField.getConfidence());\n                 }\n-\n-                FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n-                if (merchantPhoneNumberField != null) {\n-                    if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n-                        String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n-                        System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n-                            merchantAddress, merchantPhoneNumberField.getConfidence());\n-                    }\n+            }\n+            FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n+            if (merchantPhoneNumberField != null) {\n+                if (FieldValueType.PHONE_NUMBER == merchantNameField.getValueType()) {\n+                    String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n+                    System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n+                        merchantAddress, merchantPhoneNumberField.getConfidence());\n                 }\n-\n-                FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n-                if (transactionDateField != null) {\n-                    if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n-                        LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n-                        System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n-                            transactionDate, transactionDateField.getConfidence());\n-                    }\n+            }\n+            FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n+            if (transactionDateField != null) {\n+                if (FieldValueType.DATE == transactionDateField.getValueType()) {\n+                    LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n+                    System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n+                        transactionDate, transactionDateField.getConfidence());\n                 }\n-\n-                FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n-                if (receiptItemsField != null) {\n-                    System.out.printf(\"Receipt Items: %n\");\n-                    if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {\n-                        List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n-                        receiptItems.forEach(receiptItem -> {\n-                            if (FieldValueType.MAP.equals(receiptItem.getValueType())) {\n-                                Map<String, FormField<?>> formFieldMap = FieldValueType.MAP.cast(receiptItem);\n-                                formFieldMap.forEach((key, formField) -> {\n-                                    if (\"Quantity\".equals(key)) {\n-                                        if (FieldValueType.DOUBLE.equals(formField.getValueType())) {\n-                                            Float quantity = FieldValueType.DOUBLE.cast(formField);\n-                                            System.out.printf(\"Quantity: %d, confidence: %.2f%n\",\n-                                                quantity, formField.getConfidence());\n-                                        }\n-                                    }\n-                                });\n+            }\n+            FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n+            if (receiptItemsField != null) {\n+                System.out.printf(\"Receipt Items: %n\");\n+                if (FieldValueType.LIST == receiptItemsField.getValueType()) {\n+                    List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n+                    receiptItems.stream()\n+                        .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValueType())\n+                        .<Map<String, FormField<?>>>map(FieldValueType.MAP::cast)\n+                        .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n+                            if (\"Quantity\".equals(key)) {", "originalCommit": "41bc8b212239f187f79ffe971fcec742a0926005", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAzNTY1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r453035658", "bodyText": "I guess I can. Just wanted to keep a method showing the non-stream way but thought that would be inconsistent. So kept all the sample files using forEach.\nI don't have a strong preference, what do you think, update all of them?", "author": "samvaity", "createdAt": "2020-07-10T19:21:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNTYzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc4NTU0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r453785541", "bodyText": "Personally I like to using stream() if possible.", "author": "mssfang", "createdAt": "2020-07-13T16:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNTYzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "3a5029108d12147488920707206502aadea890d4", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java\nindex 9d679882292..ff6c25bf2bf 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java\n\n@@ -375,123 +397,125 @@ public class FormRecognizerClientJavaDocCodeSnippets {\n         // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts#InputStream-long\n         File receipt = new File(\"{receipt_url}\");\n         byte[] fileContent = Files.readAllBytes(receipt.toPath());\n-        InputStream targetStream = new ByteArrayInputStream(fileContent);\n+        try (InputStream targetStream = new ByteArrayInputStream(fileContent)) {\n+\n+            formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length()).getFinalResult()\n+                .forEach(recognizedReceipt -> {\n+                    Map<String, FormField<?>> recognizedFields = recognizedReceipt.getFields();\n+                    FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n+                    if (merchantNameField != null) {\n+                        if (FieldValueType.STRING == merchantNameField.getValueType()) {\n+                            String merchantName = FieldValueType.STRING.cast(merchantNameField);\n+                            System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n+                                merchantName, merchantNameField.getConfidence());\n+                        }\n+                    }\n \n-        formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length()).getFinalResult()\n-            .forEach(recognizedReceipt -> {\n-                Map<String, FormField<?>> recognizedFields = recognizedReceipt.getFields();\n+                    FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n+                    if (merchantPhoneNumberField != null) {\n+                        if (FieldValueType.PHONE_NUMBER == merchantPhoneNumberField.getValueType()) {\n+                            String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n+                            System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n+                                merchantAddress, merchantPhoneNumberField.getConfidence());\n+                        }\n+                    }\n+\n+                    FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n+                    if (transactionDateField != null) {\n+                        if (FieldValueType.DATE == transactionDateField.getValueType()) {\n+                            LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n+                            System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n+                                transactionDate, transactionDateField.getConfidence());\n+                        }\n+                    }\n+\n+                    FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n+                    if (receiptItemsField != null) {\n+                        System.out.printf(\"Receipt Items: %n\");\n+                        if (FieldValueType.LIST == receiptItemsField.getValueType()) {\n+                            List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n+                            receiptItems.stream()\n+                                .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValueType())\n+                                .<Map<String, FormField<?>>>map(FieldValueType.MAP::cast)\n+                                .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n+                                    if (\"Quantity\".equals(key)) {\n+                                        if (FieldValueType.DOUBLE == formField.getValueType()) {\n+                                            Float quantity = FieldValueType.DOUBLE.cast(formField);\n+                                            System.out.printf(\"Quantity: %f, confidence: %.2f%n\",\n+                                                quantity, formField.getConfidence());\n+                                        }\n+                                    }\n+                                }));\n+                        }\n+                    }\n+                });\n+        }\n+        // END: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts#InputStream-long\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerClient#beginRecognizeReceipts(InputStream, long, RecognizeOptions)}\n+     * with options\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public void beginRecognizeReceiptsWithOptions() throws IOException {\n+\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts#InputStream-long-recognizeOptions\n+        File receipt = new File(\"{local/file_path/fileName.jpg}\");\n+        boolean includeFieldElements = true;\n+        byte[] fileContent = Files.readAllBytes(receipt.toPath());\n+        try (InputStream targetStream = new ByteArrayInputStream(fileContent)) {\n+            for (RecognizedForm recognizedForm : formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length(),\n+                new RecognizeOptions()\n+                    .setContentType(FormContentType.IMAGE_JPEG)\n+                    .setIncludeFieldElements(includeFieldElements)\n+                    .setPollInterval(Duration.ofSeconds(5)))\n+                .getFinalResult()) {\n+                Map<String, FormField<?>> recognizedFields = recognizedForm.getFields();\n                 FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n                 if (merchantNameField != null) {\n-                    if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n+                    if (FieldValueType.STRING == merchantNameField.getValueType()) {\n                         String merchantName = FieldValueType.STRING.cast(merchantNameField);\n                         System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n                             merchantName, merchantNameField.getConfidence());\n                     }\n                 }\n-\n                 FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n                 if (merchantPhoneNumberField != null) {\n-                    if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n+                    if (FieldValueType.PHONE_NUMBER == merchantPhoneNumberField.getValueType()) {\n                         String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n                         System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n                             merchantAddress, merchantPhoneNumberField.getConfidence());\n                     }\n                 }\n-\n                 FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n                 if (transactionDateField != null) {\n-                    if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n+                    if (FieldValueType.DATE == transactionDateField.getValueType()) {\n                         LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n                         System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n                             transactionDate, transactionDateField.getConfidence());\n                     }\n                 }\n-\n                 FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n                 if (receiptItemsField != null) {\n                     System.out.printf(\"Receipt Items: %n\");\n-                    if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {\n+                    if (FieldValueType.LIST == receiptItemsField.getValueType()) {\n                         List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n                         receiptItems.stream()\n                             .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValueType())\n                             .<Map<String, FormField<?>>>map(FieldValueType.MAP::cast)\n                             .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n                                 if (\"Quantity\".equals(key)) {\n-                                    if (FieldValueType.DOUBLE.equals(formField.getValueType())) {\n+                                    if (FieldValueType.DOUBLE == formField.getValueType()) {\n                                         Float quantity = FieldValueType.DOUBLE.cast(formField);\n-                                        System.out.printf(\"Quantity: %d, confidence: %.2f%n\",\n+                                        System.out.printf(\"Quantity: %f, confidence: %.2f%n\",\n                                             quantity, formField.getConfidence());\n                                     }\n                                 }\n                             }));\n                     }\n                 }\n-            });\n-        // END: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts#InputStream-long\n-    }\n-\n-    /**\n-     * Code snippet for {@link FormRecognizerClient#beginRecognizeReceipts(InputStream, long, RecognizeOptions)}\n-     * with options\n-     *\n-     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n-     */\n-    public void beginRecognizeReceiptsWithOptions() throws IOException {\n-\n-        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts#InputStream-long-recognizeOptions\n-        File receipt = new File(\"{local/file_path/fileName.jpg}\");\n-        boolean includeFieldElements = true;\n-        byte[] fileContent = Files.readAllBytes(receipt.toPath());\n-        InputStream targetStream = new ByteArrayInputStream(fileContent);\n-        for (RecognizedForm recognizedForm : formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length(),\n-            new RecognizeOptions()\n-                .setContentType(FormContentType.IMAGE_JPEG)\n-                .setIncludeFieldElements(includeFieldElements)\n-                .setPollInterval(Duration.ofSeconds(5)))\n-            .getFinalResult()) {\n-            Map<String, FormField<?>> recognizedFields = recognizedForm.getFields();\n-            FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n-            if (merchantNameField != null) {\n-                if (FieldValueType.STRING == merchantNameField.getValueType()) {\n-                    String merchantName = FieldValueType.STRING.cast(merchantNameField);\n-                    System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n-                        merchantName, merchantNameField.getConfidence());\n-                }\n-            }\n-            FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n-            if (merchantPhoneNumberField != null) {\n-                if (FieldValueType.PHONE_NUMBER == merchantNameField.getValueType()) {\n-                    String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n-                    System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n-                        merchantAddress, merchantPhoneNumberField.getConfidence());\n-                }\n-            }\n-            FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n-            if (transactionDateField != null) {\n-                if (FieldValueType.DATE == transactionDateField.getValueType()) {\n-                    LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n-                    System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n-                        transactionDate, transactionDateField.getConfidence());\n-                }\n-            }\n-            FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n-            if (receiptItemsField != null) {\n-                System.out.printf(\"Receipt Items: %n\");\n-                if (FieldValueType.LIST == receiptItemsField.getValueType()) {\n-                    List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n-                    receiptItems.stream()\n-                        .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValueType())\n-                        .<Map<String, FormField<?>>>map(FieldValueType.MAP::cast)\n-                        .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n-                            if (\"Quantity\".equals(key)) {\n-                                if (FieldValueType.DOUBLE.equals(formField.getValueType())) {\n-                                    Float quantity = FieldValueType.DOUBLE.cast(formField);\n-                                    System.out.printf(\"Quantity: %d, confidence: %.2f%n\",\n-                                        quantity, formField.getConfidence());\n-                                }\n-                            }\n-                        }));\n-                }\n             }\n         }\n         // END: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts#InputStream-long-recognizeOptions\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MzI5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r453883296", "bodyText": "good catch", "author": "mssfang", "createdAt": "2020-07-13T19:32:18Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -304,7 +302,7 @@ public void beginRecognizeReceiptsFromUrl() {\n \n                     FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n                     if (merchantPhoneNumberField != null) {\n-                        if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n+                        if (FieldValueType.PHONE_NUMBER == merchantPhoneNumberField.getValueType()) {", "originalCommit": "352b5593fffdbb3d00964affc9b685077c457e9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f32feaf471ca82c2c936d4ab478b598994c0a56", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\nindex 7a1602434a2..d61aa4084c9 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n\n@@ -302,7 +300,7 @@ public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n \n                     FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n                     if (merchantPhoneNumberField != null) {\n-                        if (FieldValueType.PHONE_NUMBER == merchantPhoneNumberField.getValueType()) {\n+                        if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n                             String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n                             System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n                                 merchantAddress, merchantPhoneNumberField.getConfidence());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxMDUxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r454010514", "bodyText": "NIT:  you are using two space here, but should be one.", "author": "mssfang", "createdAt": "2020-07-13T23:40:42Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java", "diffHunk": "@@ -109,15 +111,14 @@ public static void main(String[] args) throws IOException {\n                     String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n             }\n \n-            final StringBuilder boundingBoxLabelStr = new StringBuilder();\n             if (formField.getLabelData() != null && formField.getLabelData().getBoundingBox() != null) {\n                 formField.getLabelData().getBoundingBox().getPoints().stream().map(point ->\n                     String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n-            }\n-            System.out.printf(\"Field %s has label %s  within bounding box %s with a confidence score \"\n-                    + \"of %.2f.%n\",\n-                label, formField.getLabelData().getText(), boundingBoxLabelStr, formField.getConfidence());\n \n+                System.out.printf(\"Field %s has label %s  within bounding box %s with a confidence score \"", "originalCommit": "352b5593fffdbb3d00964affc9b685077c457e9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f32feaf471ca82c2c936d4ab478b598994c0a56", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java\nindex 12e23017d4e..ca0efe52b45 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java\n\n@@ -111,14 +111,15 @@ public class AdvancedDiffLabeledUnlabeledData {\n                     String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n             }\n \n+            final StringBuilder boundingBoxLabelStr = new StringBuilder();\n             if (formField.getLabelData() != null && formField.getLabelData().getBoundingBox() != null) {\n                 formField.getLabelData().getBoundingBox().getPoints().stream().map(point ->\n                     String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n-\n-                System.out.printf(\"Field %s has label %s  within bounding box %s with a confidence score \"\n-                        + \"of %.2f.%n\",\n-                    label, formField.getLabelData().getText(), \"\", formField.getConfidence());\n             }\n+            System.out.printf(\"Field %s has label %s  within bounding box %s with a confidence score \"\n+                    + \"of %.2f.%n\",\n+                label, formField.getLabelData().getText(), boundingBoxLabelStr, formField.getConfidence());\n+\n             System.out.printf(\"Field %s has value %s based on %s within bounding box %s with a confidence score \"\n                     + \"of %.2f.%n\",\n                 label, formField.getValue(), formField.getValueData().getText(), boundingBoxStr,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxMTMxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r454011317", "bodyText": "nit: same here. extra space", "author": "mssfang", "createdAt": "2020-07-13T23:42:08Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java", "diffHunk": "@@ -146,14 +146,14 @@ public static void main(String[] args) throws IOException {\n                         String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n                 }\n \n-                final StringBuilder boundingBoxLabelStr = new StringBuilder();\n                 if (formField.getLabelData() != null && formField.getLabelData().getBoundingBox() != null) {\n                     formField.getLabelData().getBoundingBox().getPoints().stream().map(point ->\n                         String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n+\n+                    System.out.printf(\"Field %s has label %s  within bounding box %s with a confidence score \"", "originalCommit": "352b5593fffdbb3d00964affc9b685077c457e9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f32feaf471ca82c2c936d4ab478b598994c0a56", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java\nindex 3a3c9594d2f..87fe7897e78 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledDataAsync.java\n\n@@ -146,14 +147,14 @@ public class AdvancedDiffLabeledUnlabeledDataAsync {\n                         String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n                 }\n \n+                final StringBuilder boundingBoxLabelStr = new StringBuilder();\n                 if (formField.getLabelData() != null && formField.getLabelData().getBoundingBox() != null) {\n                     formField.getLabelData().getBoundingBox().getPoints().stream().map(point ->\n                         String.format(\"[%.2f, %.2f]\", point.getX(), point.getY())).forEach(boundingBoxStr::append);\n-\n-                    System.out.printf(\"Field %s has label %s  within bounding box %s with a confidence score \"\n-                            + \"of %.2f.%n\",\n-                        label, formField.getLabelData().getText(), \"\", formField.getConfidence());\n                 }\n+                System.out.printf(\"Field %s has label %s  within bounding box %s with a confidence score \"\n+                        + \"of %.2f.%n\",\n+                    label, formField.getLabelData().getText(), boundingBoxLabelStr, formField.getConfidence());\n \n                 System.out.printf(\"Field %s has value %s based on %s within bounding box %s with a confidence \"\n                         + \"score of %.2f.%n\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNDE5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r454014193", "bodyText": "like other change, change to flatMap()?", "author": "mssfang", "createdAt": "2020-07-13T23:51:33Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -54,16 +55,17 @@ public void beginTraining() {\n         // BEGIN: com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginTraining#string-boolean\n         String trainingFilesUrl = \"{SAS-URL-of-your-container-in-blob-storage}\";\n         boolean useTrainingLabels = true;\n-        formTrainingAsyncClient.beginTraining(trainingFilesUrl, useTrainingLabels).subscribe(\n-            trainingPollingOperation -> {\n+        formTrainingAsyncClient.beginTraining(trainingFilesUrl, useTrainingLabels)\n+            .subscribe(trainingPollingOperation -> {", "originalCommit": "352b5593fffdbb3d00964affc9b685077c457e9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNDg3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r454014875", "bodyText": "We din't want two subscribes nested so changed for others.", "author": "samvaity", "createdAt": "2020-07-13T23:53:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNDE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8a0fda50702dd4f4f25ebaf4a15b6dce39f5729a", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\nindex c7460a2f584..5cab6b343e4 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\n\n@@ -56,17 +56,16 @@ public class FormTrainingAsyncClientJavaDocCodeSnippets {\n         String trainingFilesUrl = \"{SAS-URL-of-your-container-in-blob-storage}\";\n         boolean useTrainingLabels = true;\n         formTrainingAsyncClient.beginTraining(trainingFilesUrl, useTrainingLabels)\n-            .subscribe(trainingPollingOperation -> {\n-                // if training polling operation completed, retrieve the final result.\n-                trainingPollingOperation.getFinalResult().subscribe(customFormModel -> {\n-                    System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n-                    System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n-                    customFormModel.getSubmodels()\n-                        .forEach(customFormSubmodel -> customFormSubmodel.getFields()\n-                            .forEach((key, customFormModelField) ->\n-                                System.out.printf(\"Form type: %s Field Text: %s Field Accuracy: %f%n\",\n-                                    key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n-                });\n+            // if training polling operation completed, retrieve the final result.\n+            .flatMap(AsyncPollResponse::getFinalResult)\n+            .subscribe(customFormModel -> {\n+                System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+                System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+                customFormModel.getSubmodels()\n+                    .forEach(customFormSubmodel -> customFormSubmodel.getFields()\n+                        .forEach((key, customFormModelField) ->\n+                            System.out.printf(\"Form type: %s Field Text: %s Field Accuracy: %f%n\",\n+                                key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n             });\n         // END: com.azure.ai.formrecognizer.training.FormTrainingAsyncClient.beginTraining#string-boolean\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNTcwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r454015708", "bodyText": "what is the purpose of using try() but without catch()?", "author": "mssfang", "createdAt": "2020-07-13T23:56:38Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeCustomFormsAsync.java", "diffHunk": "@@ -43,21 +43,23 @@ public static void main(String[] args) throws IOException {\n         File sourceFile = new File(\"../formrecognizer/azure-ai-formrecognizer/src/samples/java/sample-forms/\"\n             + \"forms/Invoice_6.pdf\");\n         byte[] fileContent = Files.readAllBytes(sourceFile.toPath());\n-        InputStream targetStream = new ByteArrayInputStream(fileContent);\n-        String modelId = \"{modelId}\";\n+        PollerFlux<OperationResult, List<RecognizedForm>> recognizeFormPoller;\n+        try (InputStream targetStream = new ByteArrayInputStream(fileContent)) {", "originalCommit": "352b5593fffdbb3d00964affc9b685077c457e9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxODEwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r454018103", "bodyText": "This is an auto closeable try block. This will make sure the stream is closed out of the block.", "author": "samvaity", "createdAt": "2020-07-14T00:04:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNTcwOA=="}], "type": "inlineReview", "revised_code": {"commit": "8f32feaf471ca82c2c936d4ab478b598994c0a56", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeCustomFormsAsync.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeCustomFormsAsync.java\nindex 297a17bdf0e..4c7f6ff607b 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeCustomFormsAsync.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeCustomFormsAsync.java\n\n@@ -43,23 +44,21 @@ public class RecognizeCustomFormsAsync {\n         File sourceFile = new File(\"../formrecognizer/azure-ai-formrecognizer/src/samples/java/sample-forms/\"\n             + \"forms/Invoice_6.pdf\");\n         byte[] fileContent = Files.readAllBytes(sourceFile.toPath());\n-        PollerFlux<OperationResult, List<RecognizedForm>> recognizeFormPoller;\n-        try (InputStream targetStream = new ByteArrayInputStream(fileContent)) {\n-            String modelId = \"{modelId}\";\n+        InputStream targetStream = new ByteArrayInputStream(fileContent);\n+        String modelId = \"{modelId}\";\n \n-            recognizeFormPoller = client.beginRecognizeCustomForms(toFluxByteBuffer(targetStream),\n-                sourceFile.length(), modelId);\n-        }\n+        PollerFlux<OperationResult, List<RecognizedForm>> recognizeFormPoller =\n+            client.beginRecognizeCustomForms(toFluxByteBuffer(targetStream), sourceFile.length(), modelId);\n \n         Mono<List<RecognizedForm>> recognizeFormResult = recognizeFormPoller\n             .last()\n-            .flatMap(pollResponse -> {\n-                if (pollResponse.getStatus().isComplete()) {\n+            .flatMap(recognizeFormPollOperation -> {\n+                if (LongRunningOperationStatus.SUCCESSFULLY_COMPLETED == recognizeFormPollOperation.getStatus()) {\n                     // training completed successfully, retrieving final result.\n-                    return pollResponse.getFinalResult();\n+                    return recognizeFormPollOperation.getFinalResult();\n                 } else {\n                     return Mono.error(new RuntimeException(\"Polling completed unsuccessfully with status:\"\n-                        + pollResponse.getStatus()));\n+                        + recognizeFormPollOperation.getStatus()));\n                 }\n             });\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNzQzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r454017434", "bodyText": "NIT: merge to one sentence:\nnew RecognizeOption().setIncludeFieldElements(true));", "author": "mssfang", "createdAt": "2020-07-14T00:02:08Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/GetBoundingBoxesAsync.java", "diffHunk": "@@ -37,35 +37,34 @@ public static void main(String[] args) {\n         String modelId = \"{model_Id}\";\n         String formUrl = \"{form_url}\";\n         PollerFlux<OperationResult, List<RecognizedForm>> recognizeFormPoller =\n-            client.beginRecognizeCustomFormsFromUrl(formUrl, modelId, new RecognizeOptions()\n-                .setIncludeFieldElements(true));\n+            client.beginRecognizeCustomFormsFromUrl(formUrl, modelId,\n+                new RecognizeOptions()\n+                    .setIncludeFieldElements(true));", "originalCommit": "352b5593fffdbb3d00964affc9b685077c457e9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f32feaf471ca82c2c936d4ab478b598994c0a56", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/GetBoundingBoxesAsync.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/GetBoundingBoxesAsync.java\nindex 3ba67ea76de..40945a12b6d 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/GetBoundingBoxesAsync.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/GetBoundingBoxesAsync.java\n\n@@ -43,13 +44,13 @@ public class GetBoundingBoxesAsync {\n \n         Mono<List<RecognizedForm>> recognizeFormResult = recognizeFormPoller\n             .last()\n-            .flatMap(pollResponse -> {\n-                if (pollResponse.getStatus().isComplete()) {\n+            .flatMap(trainingOperationResponse -> {\n+                if (LongRunningOperationStatus.SUCCESSFULLY_COMPLETED == trainingOperationResponse.getStatus()) {\n                     // training completed successfully, retrieving final result.\n-                    return pollResponse.getFinalResult();\n+                    return trainingOperationResponse.getFinalResult();\n                 } else {\n                     return Mono.error(new RuntimeException(\"Polling completed unsuccessfully with status:\"\n-                        + pollResponse.getStatus()));\n+                        + trainingOperationResponse.getStatus()));\n                 }\n             });\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNzUzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r454017534", "bodyText": "checkstyle issue? line too long?", "author": "mssfang", "createdAt": "2020-07-14T00:02:32Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/GetBoundingBoxes.java", "diffHunk": "@@ -77,10 +77,8 @@ public static void main(String[] args) {\n                                 FormWord formWordElement = (FormWord) (formContent);\n                                 StringBuilder boundingBoxStr = new StringBuilder();\n                                 if (formWordElement.getBoundingBox() != null) {\n-                                    formWordElement.getBoundingBox().getPoints().forEach(point -> {\n-                                        boundingBoxStr.append(String.format(\"[%.2f, %.2f]\", point.getX(),\n-                                            point.getY()));\n-                                    });\n+                                    formWordElement.getBoundingBox().getPoints().forEach(point -> boundingBoxStr.append(String.format(\"[%.2f, %.2f]\", point.getX(),", "originalCommit": "352b5593fffdbb3d00964affc9b685077c457e9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNzY3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r454017672", "bodyText": "it is in sample, should be fine", "author": "mssfang", "createdAt": "2020-07-14T00:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNzUzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxODI3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12987#discussion_r454018277", "bodyText": "I think we skip checkstyles on samples.", "author": "samvaity", "createdAt": "2020-07-14T00:05:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNzUzNA=="}], "type": "inlineReview", "revised_code": {"commit": "8f32feaf471ca82c2c936d4ab478b598994c0a56", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/GetBoundingBoxes.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/GetBoundingBoxes.java\nindex ddd165372a6..0d30f9055c7 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/GetBoundingBoxes.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/GetBoundingBoxes.java\n\n@@ -77,8 +77,10 @@ public class GetBoundingBoxes {\n                                 FormWord formWordElement = (FormWord) (formContent);\n                                 StringBuilder boundingBoxStr = new StringBuilder();\n                                 if (formWordElement.getBoundingBox() != null) {\n-                                    formWordElement.getBoundingBox().getPoints().forEach(point -> boundingBoxStr.append(String.format(\"[%.2f, %.2f]\", point.getX(),\n-                                        point.getY())));\n+                                    formWordElement.getBoundingBox().getPoints().forEach(point -> {\n+                                        boundingBoxStr.append(String.format(\"[%.2f, %.2f]\", point.getX(),\n+                                            point.getY()));\n+                                    });\n                                 }\n                                 System.out.printf(\"Word '%s' within bounding box %s with a confidence of %.2f.%n\",\n                                     formWordElement.getText(), boundingBoxStr, formWordElement.getConfidence());\n"}}, {"oid": "8f32feaf471ca82c2c936d4ab478b598994c0a56", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8f32feaf471ca82c2c936d4ab478b598994c0a56", "message": "update samples", "committedDate": "2020-07-14T07:44:52Z", "type": "commit"}, {"oid": "3a5029108d12147488920707206502aadea890d4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3a5029108d12147488920707206502aadea890d4", "message": "enum equals update", "committedDate": "2020-07-14T07:44:54Z", "type": "commit"}, {"oid": "aaeafb793d62557bff635e04cbf6e2fe38a4b204", "url": "https://github.com/Azure/azure-sdk-for-java/commit/aaeafb793d62557bff635e04cbf6e2fe38a4b204", "message": "update streams usage", "committedDate": "2020-07-14T07:44:57Z", "type": "commit"}, {"oid": "8a0fda50702dd4f4f25ebaf4a15b6dce39f5729a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8a0fda50702dd4f4f25ebaf4a15b6dce39f5729a", "message": "rename sample files", "committedDate": "2020-07-14T07:44:59Z", "type": "commit"}, {"oid": "8a0fda50702dd4f4f25ebaf4a15b6dce39f5729a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8a0fda50702dd4f4f25ebaf4a15b6dce39f5729a", "message": "rename sample files", "committedDate": "2020-07-14T07:44:59Z", "type": "forcePushed"}]}