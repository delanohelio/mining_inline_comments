{"pr_number": 17209, "pr_title": "Added support for encryption algorithms for symmetric keys", "pr_createdAt": "2020-11-05T07:33:39Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/17209", "timeline": [{"oid": "2514dd17df78195d8225102cd9097a7fd8892dd0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2514dd17df78195d8225102cd9097a7fd8892dd0", "message": "Added support for encryption AES encryption algorithms.", "committedDate": "2020-11-05T06:17:51Z", "type": "commit"}, {"oid": "c48a75a5b0e05932cd02c874825e61eb3e193bb4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c48a75a5b0e05932cd02c874825e61eb3e193bb4", "message": "Added CryptographyOptions and ensured the initialization vector is populated before attempting to perform any local cryptography operations on symmetric keys.", "committedDate": "2020-11-05T07:31:19Z", "type": "commit"}, {"oid": "7d030d0a5627312d4abe867498ce69aec4b7609f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7d030d0a5627312d4abe867498ce69aec4b7609f", "message": "Added APIs that accept CryptographyOptions to CryptographyClient.", "committedDate": "2020-11-05T08:01:41Z", "type": "commit"}, {"oid": "67e837c456306c2aaeecdc1326169dabef66ef2f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/67e837c456306c2aaeecdc1326169dabef66ef2f", "message": "Fixed Javadoc issues.", "committedDate": "2020-11-05T08:50:15Z", "type": "commit"}, {"oid": "17b8e1b07cc0b0dd4645685a5b0f2fa657032c19", "url": "https://github.com/Azure/azure-sdk-for-java/commit/17b8e1b07cc0b0dd4645685a5b0f2fa657032c19", "message": "Fixed checkstyle issues. Added samples.", "committedDate": "2020-11-05T10:01:12Z", "type": "commit"}, {"oid": "37d0e65a6640bda46ba45331740b556237494bdd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/37d0e65a6640bda46ba45331740b556237494bdd", "message": "Added checkstyle exceptions.", "committedDate": "2020-11-05T10:02:19Z", "type": "commit"}, {"oid": "059c29ce48d87dfe947d7b86ebac48ddf78212a8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/059c29ce48d87dfe947d7b86ebac48ddf78212a8", "message": "Fixed test and spotbugs issues.", "committedDate": "2020-11-05T10:54:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3Mzc5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519473795", "bodyText": "You've made it possible here for the block size to be changed in a central place, and it feels like you're introducing a potential future bug by still having the line if (iv.length != 8) {. Perhaps 64 will never change and this change is needless, but if you keep the code like this I would recommend either externalising the 8, or perhaps more appropriately, documenting alongside the new static field the requirement that if this value changes that future developers must update the conditionals everywhere appropriately.\nPut another way, what motivated you to extract the value 64 out like this? I probably wouldn't have done it.", "author": "JonathanGiles", "createdAt": "2020-11-08T20:34:55Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesKw.java", "diffHunk": "@@ -134,7 +135,8 @@ public ICryptoTransform createEncryptor(byte[] key, byte[] iv, Provider provider\n         if (iv != null) {\n             // iv length must be 64 bits\n             if (iv.length != 8) {\n-                throw logger.logExceptionAsError(new IllegalArgumentException(\"iv length must be 64 bits\"));\n+                throw logger.logExceptionAsError(new IllegalArgumentException(String.format(\n+                    \"iv length must be %s bits\", BLOCK_SIZE_IN_BITS)));", "originalCommit": "059c29ce48d87dfe947d7b86ebac48ddf78212a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE2NjgwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r520166800", "bodyText": "To be completely honest, I think when I was first writing this I saw somewhere else a similar piece of code with a hard-coded value, based this off of that and then forgot to change it into a static field at a later point. Your suggestion is what I would prefer to do as well by default. Thanks for pointing it out :)", "author": "vcolin7", "createdAt": "2020-11-09T22:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3Mzc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE4MjE1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r520182151", "bodyText": "I took a second look at this class and it seems the hard-coded value was there already, I will change it to what you mention.", "author": "vcolin7", "createdAt": "2020-11-09T23:16:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3Mzc5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "df0aeb720f67149df6dae0321e7471b6188cbfef", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesKw.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesKw.java\nindex f8664111c84..e7fe66a1be7 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesKw.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesKw.java\n\n@@ -134,7 +134,7 @@ abstract class AesKw extends LocalKeyWrapAlgorithm {\n \n         if (iv != null) {\n             // iv length must be 64 bits\n-            if (iv.length != 8) {\n+            if (iv.length != BLOCK_SIZE_IN_BITS >> 3) {\n                 throw logger.logExceptionAsError(new IllegalArgumentException(String.format(\n                     \"iv length must be %s bits\", BLOCK_SIZE_IN_BITS)));\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3NDM3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519474373", "bodyText": "It's not always the case that Options implies 'optional' - indeed, in this case there are some required parameters. It would be better to change this text so that people don't build that impression of Options types. Saying something instead, such as \"A class containing various configuration parameters that can be applied when performing cryptographic operations.\"", "author": "JonathanGiles", "createdAt": "2020-11-08T20:40:28Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyOptions.java", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * Represents optional parameters for cryptographic operations.", "originalCommit": "059c29ce48d87dfe947d7b86ebac48ddf78212a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df0aeb720f67149df6dae0321e7471b6188cbfef", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyOptions.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyOptions.java\ndeleted file mode 100644\nindex ac01cae50a7..00000000000\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyOptions.java\n+++ /dev/null\n\n@@ -1,77 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.security.keyvault.keys.cryptography;\n-\n-import com.azure.core.annotation.Fluent;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-/**\n- * Represents optional parameters for cryptographic operations.\n- */\n-@Fluent\n-public class CryptographyOptions {\n-    /**\n-     * Initialization vector for symmetric algorithms.\n-     */\n-    @JsonProperty(value = \"iv\")\n-    private final byte[] initializationVector;\n-\n-    /**\n-     * Additional data to authenticate but not encrypt/decrypt when using authenticated crypto algorithms.\n-     */\n-    @JsonProperty(value = \"aad\")\n-    private final byte[] additionalAuthenticatedData;\n-\n-    /**\n-     * The tag to authenticate when performing decryption with an authenticated algorithm.\n-     */\n-    @JsonProperty(value = \"tag\")\n-    private final byte[] tag;\n-\n-    /**\n-     * Creates an instance of {@link CryptographyOptions} with the given parameters.\n-     *\n-     * @param initializationVector Initialization vector for symmetric algorithms.\n-     * @param additionalAuthenticatedData Additional data to authenticate but not encrypt/decrypt when using\n-     * authenticated crypto algorithms.\n-     * @param tag The tag to authenticate when performing decryption with an authenticated algorithm.\n-     */\n-    public CryptographyOptions(byte[] initializationVector, byte[] additionalAuthenticatedData, byte[] tag) {\n-        this.initializationVector = new byte[initializationVector.length];\n-        this.additionalAuthenticatedData = new byte[additionalAuthenticatedData.length];\n-        this.tag = new byte[tag.length];\n-\n-        System.arraycopy(initializationVector, 0, this.initializationVector, 0, initializationVector.length);\n-        System.arraycopy(additionalAuthenticatedData, 0, this.additionalAuthenticatedData, 0,\n-            additionalAuthenticatedData.length);\n-        System.arraycopy(tag, 0, this.tag, 0, tag.length);\n-    }\n-\n-    /**\n-     * Get the initialization vector to be used in the cryptographic operation using a symmetric algorithm.\n-     *\n-     * @return The initialization vector.\n-     */\n-    public byte[] getInitializationVector() {\n-        return initializationVector.clone();\n-    }\n-\n-    /**\n-     * Get additional data to authenticate but not encrypt/decrypt when using authenticated crypto algorithms.\n-     *\n-     * @return The additional authenticated data.\n-     */\n-    public byte[] getAdditionalAuthenticatedData() {\n-        return additionalAuthenticatedData.clone();\n-    }\n-\n-    /**\n-     * Get the tag to authenticate when performing decryption with an authenticated algorithm.\n-     *\n-     * @return The tag.\n-     */\n-    public byte[] getTag() {\n-        return tag.clone();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3NDU1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519474553", "bodyText": "Is it always the case that the user must create an instance of this type by providing all three of these byte arrays? Is it not possible to provide just one or two of these? If so, having setters is more appropriate.", "author": "JonathanGiles", "createdAt": "2020-11-08T20:42:16Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyOptions.java", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * Represents optional parameters for cryptographic operations.\n+ */\n+@Fluent\n+public class CryptographyOptions {\n+    /**\n+     * Initialization vector for symmetric algorithms.\n+     */\n+    @JsonProperty(value = \"iv\")\n+    private final byte[] initializationVector;\n+\n+    /**\n+     * Additional data to authenticate but not encrypt/decrypt when using authenticated crypto algorithms.\n+     */\n+    @JsonProperty(value = \"aad\")\n+    private final byte[] additionalAuthenticatedData;\n+\n+    /**\n+     * The tag to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    @JsonProperty(value = \"tag\")\n+    private final byte[] tag;\n+\n+    /**\n+     * Creates an instance of {@link CryptographyOptions} with the given parameters.\n+     *\n+     * @param initializationVector Initialization vector for symmetric algorithms.\n+     * @param additionalAuthenticatedData Additional data to authenticate but not encrypt/decrypt when using\n+     * authenticated crypto algorithms.\n+     * @param tag The tag to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    public CryptographyOptions(byte[] initializationVector, byte[] additionalAuthenticatedData, byte[] tag) {", "originalCommit": "059c29ce48d87dfe947d7b86ebac48ddf78212a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3MTEwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519571109", "bodyText": "Yes, see https://github.com/Azure/azure-sdk-for-net/blob/a42b92d26e9359a485fb6ec234b93146e9ff5b30/sdk/keyvault/Azure.Security.KeyVault.Keys/src/Cryptography/CryptographyClient.cs#L189 for what we did for .NET after some discussion with Scott and Krzysztof.", "author": "heaths", "createdAt": "2020-11-09T06:10:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3NDU1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU0MDE4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522540188", "bodyText": "Changed this class to a model factory after talking with both @srnagar and @heaths.", "author": "vcolin7", "createdAt": "2020-11-13T01:02:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3NDU1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "df0aeb720f67149df6dae0321e7471b6188cbfef", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyOptions.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyOptions.java\ndeleted file mode 100644\nindex ac01cae50a7..00000000000\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyOptions.java\n+++ /dev/null\n\n@@ -1,77 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.security.keyvault.keys.cryptography;\n-\n-import com.azure.core.annotation.Fluent;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-/**\n- * Represents optional parameters for cryptographic operations.\n- */\n-@Fluent\n-public class CryptographyOptions {\n-    /**\n-     * Initialization vector for symmetric algorithms.\n-     */\n-    @JsonProperty(value = \"iv\")\n-    private final byte[] initializationVector;\n-\n-    /**\n-     * Additional data to authenticate but not encrypt/decrypt when using authenticated crypto algorithms.\n-     */\n-    @JsonProperty(value = \"aad\")\n-    private final byte[] additionalAuthenticatedData;\n-\n-    /**\n-     * The tag to authenticate when performing decryption with an authenticated algorithm.\n-     */\n-    @JsonProperty(value = \"tag\")\n-    private final byte[] tag;\n-\n-    /**\n-     * Creates an instance of {@link CryptographyOptions} with the given parameters.\n-     *\n-     * @param initializationVector Initialization vector for symmetric algorithms.\n-     * @param additionalAuthenticatedData Additional data to authenticate but not encrypt/decrypt when using\n-     * authenticated crypto algorithms.\n-     * @param tag The tag to authenticate when performing decryption with an authenticated algorithm.\n-     */\n-    public CryptographyOptions(byte[] initializationVector, byte[] additionalAuthenticatedData, byte[] tag) {\n-        this.initializationVector = new byte[initializationVector.length];\n-        this.additionalAuthenticatedData = new byte[additionalAuthenticatedData.length];\n-        this.tag = new byte[tag.length];\n-\n-        System.arraycopy(initializationVector, 0, this.initializationVector, 0, initializationVector.length);\n-        System.arraycopy(additionalAuthenticatedData, 0, this.additionalAuthenticatedData, 0,\n-            additionalAuthenticatedData.length);\n-        System.arraycopy(tag, 0, this.tag, 0, tag.length);\n-    }\n-\n-    /**\n-     * Get the initialization vector to be used in the cryptographic operation using a symmetric algorithm.\n-     *\n-     * @return The initialization vector.\n-     */\n-    public byte[] getInitializationVector() {\n-        return initializationVector.clone();\n-    }\n-\n-    /**\n-     * Get additional data to authenticate but not encrypt/decrypt when using authenticated crypto algorithms.\n-     *\n-     * @return The additional authenticated data.\n-     */\n-    public byte[] getAdditionalAuthenticatedData() {\n-        return additionalAuthenticatedData.clone();\n-    }\n-\n-    /**\n-     * Get the tag to authenticate when performing decryption with an authenticated algorithm.\n-     *\n-     * @return The tag.\n-     */\n-    public byte[] getTag() {\n-        return tag.clone();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1MzQ4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519553481", "bodyText": "@Lusitanian should this be zero-padding? When we spoke about .NET, you said zero-padding was what the service was using.", "author": "heaths", "createdAt": "2020-11-09T04:59:41Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesCbc.java", "diffHunk": "@@ -16,25 +16,30 @@\n import java.util.Arrays;\n \n abstract class AesCbc extends SymmetricEncryptionAlgorithm {\n-\n     final int keySizeInBytes;\n     final int keySize;\n-    static class AesCbcDecryptor implements ICryptoTransform {\n \n+    protected AesCbc(String name, int size) {\n+        super(name);\n+\n+        keySize = size;\n+        keySizeInBytes = size >> 3;\n+    }\n+\n+    static class AesCbcEncryptor implements ICryptoTransform {\n         private final Cipher cipher;\n \n-        AesCbcDecryptor(byte[] key, byte[] iv, Provider provider)\n-            throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\n-            InvalidAlgorithmParameterException {\n+        AesCbcEncryptor(byte[] key, byte[] iv, Provider provider) throws NoSuchAlgorithmException,\n+            NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {\n \n             // Create the cipher using the Provider if specified\n             if (provider == null) {\n-                cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n+                cipher = Cipher.getInstance(\"AES/CBC/NoPadding\");", "originalCommit": "059c29ce48d87dfe947d7b86ebac48ddf78212a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1MzU5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519553592", "bodyText": "...if this is right, I'll have to change .NET's implementation to NoPadding as well.", "author": "heaths", "createdAt": "2020-11-09T05:00:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1MzQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE2NDQ4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r520164485", "bodyText": "Going from the name only it made sense to me that we should not use padding for AES-CBC and use padding for AES-CBC-PAD. Is that not the case?", "author": "vcolin7", "createdAt": "2020-11-09T22:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1MzQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE4MjQ3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r520182475", "bodyText": "When I asked MHSM about it, the reply was that zero-padding seems to be closer. I'm honestly not sure. If you're writing tests, maybe try it against the service and see what it does with CBC vs CBCPAD.", "author": "heaths", "createdAt": "2020-11-09T23:17:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1MzQ4MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1NDk3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519554972", "bodyText": "AES-CBC doesn't use \"aad\" or \"tag\" (used below for the decryptor). Are these just to provide for a common interface and are otherwise null (not obvious from what I see in this PR).", "author": "heaths", "createdAt": "2020-11-09T05:06:52Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesCbc.java", "diffHunk": "@@ -67,22 +70,12 @@\n         }\n     }\n \n-    protected AesCbc(String name, int size) {\n-        super(name);\n-        keySize = size;\n-        keySizeInBytes = size >> 3;\n-    }\n-\n     @Override\n     public ICryptoTransform createEncryptor(byte[] key, byte[] iv, byte[] authenticationData)\n         throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException,\n         InvalidAlgorithmParameterException {\n \n-        if (key == null || key.length < keySizeInBytes) {\n-            throw new InvalidKeyException(\"key must be at least \" + keySize + \" bits in length\");\n-        }\n-\n-        return new AesCbcEncryptor(Arrays.copyOfRange(key, 0, keySizeInBytes), iv, null);\n+        return createEncryptor(key, iv, authenticationData, null);", "originalCommit": "059c29ce48d87dfe947d7b86ebac48ddf78212a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE2Mzk1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r520163952", "bodyText": "Correct, this is just to provide a common interface but should hold no value when used for AES-CBC. I definitely understand some of these things are not obvious; a lot of the building blocks for this work had already been laid down in a previous release by @g2vinay.", "author": "vcolin7", "createdAt": "2020-11-09T22:33:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1NDk3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE4MjY3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r520182671", "bodyText": "Okay. As long as we don't expose it to the customer. .NET track 1 was this way as well for the same reason. As I read more through your PR that became clear.", "author": "heaths", "createdAt": "2020-11-09T23:18:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1NDk3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ff77ba13802b18d690436a3ec2534f732fb3bc47", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesCbc.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesCbc.java\nindex a122849be8b..d72fdf079b7 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesCbc.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesCbc.java\n\n@@ -71,15 +71,17 @@ abstract class AesCbc extends SymmetricEncryptionAlgorithm {\n     }\n \n     @Override\n-    public ICryptoTransform createEncryptor(byte[] key, byte[] iv, byte[] authenticationData)\n+    public ICryptoTransform createEncryptor(byte[] key, byte[] iv, byte[] additionalAuthenticatedData,\n+                                            byte[] authenticationTag)\n         throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException,\n         InvalidAlgorithmParameterException {\n \n-        return createEncryptor(key, iv, authenticationData, null);\n+        return createEncryptor(key, iv, additionalAuthenticatedData, null, null);\n     }\n \n     @Override\n-    public ICryptoTransform createEncryptor(byte[] key, byte[] iv, byte[] authenticationData, Provider provider)\n+    public ICryptoTransform createEncryptor(byte[] key, byte[] iv, byte[] additionalAuthenticatedData,\n+                                            byte[] authenticationTag, Provider provider)\n         throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException,\n         InvalidAlgorithmParameterException {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1Nzk5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519557998", "bodyText": "This should be PKCS7 padding, though for 8-byte block sizes this should be equivalent. If PKCS7 is supported, it may be safer for future proofing.", "author": "heaths", "createdAt": "2020-11-09T05:19:05Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesCbcPad.java", "diffHunk": "@@ -0,0 +1,113 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.Cipher;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.spec.IvParameterSpec;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Provider;\n+import java.util.Arrays;\n+\n+abstract class AesCbcPad extends SymmetricEncryptionAlgorithm {\n+    final int keySizeInBytes;\n+    final int keySize;\n+\n+    protected AesCbcPad(String name, int size) {\n+        super(name);\n+\n+        keySize = size;\n+        keySizeInBytes = size >> 3;\n+    }\n+\n+    static class AesCbcPadEncryptor implements ICryptoTransform {\n+        private final Cipher cipher;\n+\n+        AesCbcPadEncryptor(byte[] key, byte[] iv, Provider provider) throws NoSuchAlgorithmException,\n+            NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {\n+\n+            // Create the cipher using the Provider if specified\n+            if (provider == null) {\n+                cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");", "originalCommit": "059c29ce48d87dfe947d7b86ebac48ddf78212a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE2MzE4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r520163182", "bodyText": "The javax.crypto.Cipher class only provides support for PKCS5 :(", "author": "vcolin7", "createdAt": "2020-11-09T22:32:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1Nzk5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE4MjgzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r520182832", "bodyText": "In that case, it shouldn't matter. /cc @schaabs to confirm my understanding.", "author": "heaths", "createdAt": "2020-11-09T23:18:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1Nzk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "ff77ba13802b18d690436a3ec2534f732fb3bc47", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesCbcPad.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesCbcPad.java\nindex d62153e7137..114f4f90e32 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesCbcPad.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesCbcPad.java\n\n@@ -71,15 +71,17 @@ abstract class AesCbcPad extends SymmetricEncryptionAlgorithm {\n     }\n \n     @Override\n-    public ICryptoTransform createEncryptor(byte[] key, byte[] iv, byte[] authenticationData)\n+    public ICryptoTransform createEncryptor(byte[] key, byte[] iv, byte[] additionalAuthenticatedData,\n+                                            byte[] authenticationTag)\n         throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException,\n         InvalidAlgorithmParameterException {\n \n-        return createEncryptor(key, iv, authenticationData, null);\n+        return createEncryptor(key, iv, additionalAuthenticatedData, null, null);\n     }\n \n     @Override\n-    public ICryptoTransform createEncryptor(byte[] key, byte[] iv, byte[] authenticationData, Provider provider)\n+    public ICryptoTransform createEncryptor(byte[] key, byte[] iv, byte[] additionalAuthenticatedData,\n+                                            byte[] authenticationTag, Provider provider)\n         throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException,\n         InvalidAlgorithmParameterException {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU2NDMwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519564300", "bodyText": "I'm not sure this is correct. As I understand it, GCM is closer to CTR and doesn't use CBC. Follow up with @schaabs.", "author": "heaths", "createdAt": "2020-11-09T05:44:18Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesGcm.java", "diffHunk": "@@ -0,0 +1,113 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.Cipher;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.spec.IvParameterSpec;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Provider;\n+import java.util.Arrays;\n+\n+abstract class AesGcm extends SymmetricEncryptionAlgorithm {\n+    final int keySizeInBytes;\n+    final int keySize;\n+\n+    protected AesGcm(String name, int size) {\n+        super(name);\n+\n+        keySize = size;\n+        keySizeInBytes = size >> 3;\n+    }\n+\n+    static class AesGcmEncryptor implements ICryptoTransform {\n+        private final Cipher cipher;\n+\n+        AesGcmEncryptor(byte[] key, byte[] iv, Provider provider) throws NoSuchAlgorithmException,\n+            NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {\n+\n+            // Create the cipher using the Provider if specified\n+            if (provider == null) {\n+                cipher = Cipher.getInstance(\"AES/CBC/NoPadding\");", "originalCommit": "059c29ce48d87dfe947d7b86ebac48ddf78212a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE2MDc2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r520160765", "bodyText": "That's my bad, I based this class off of AesCbc and forgot to change the value to the correct one: \"AES/GCM/NoPadding\".", "author": "vcolin7", "createdAt": "2020-11-09T22:26:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU2NDMwMA=="}], "type": "inlineReview", "revised_code": {"commit": "df0aeb720f67149df6dae0321e7471b6188cbfef", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesGcm.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesGcm.java\nindex b0946128cf9..91bf80d4f96 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesGcm.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesGcm.java\n\n@@ -7,15 +7,18 @@ import javax.crypto.BadPaddingException;\n import javax.crypto.Cipher;\n import javax.crypto.IllegalBlockSizeException;\n import javax.crypto.NoSuchPaddingException;\n-import javax.crypto.spec.IvParameterSpec;\n+import javax.crypto.spec.GCMParameterSpec;\n import javax.crypto.spec.SecretKeySpec;\n import java.security.InvalidAlgorithmParameterException;\n import java.security.InvalidKeyException;\n import java.security.NoSuchAlgorithmException;\n import java.security.Provider;\n import java.util.Arrays;\n+import java.util.Objects;\n \n abstract class AesGcm extends SymmetricEncryptionAlgorithm {\n+    static final int DEFAULT_TAG_LENGTH = 96;\n+\n     final int keySizeInBytes;\n     final int keySize;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU2NzM5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519567398", "bodyText": "Bundle all the parameters up into an EncryptOptions (and DecryptOptions for decryption) instead. See how we decided to for .NET, after discussions with the architects: https://github.com/Azure/azure-sdk-for-net/blob/a42b92d26e9359a485fb6ec234b93146e9ff5b30/sdk/keyvault/Azure.Security.KeyVault.Keys/src/Cryptography/CryptographyClient.cs#L189.\nUsing a factory (or builder probably for you), the correct options and algorithm are enforced to avoid callers making mistakes with incompatible parameters.", "author": "heaths", "createdAt": "2020-11-09T05:55:58Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "diffHunk": "@@ -213,35 +216,75 @@ private void initializeCryptoClients() {\n      * @param algorithm The algorithm to be used for encryption.\n      * @param plaintext The content to be encrypted.\n      * @return A {@link Mono} containing a {@link EncryptResult} whose {@link EncryptResult#getCipherText() cipher text}\n-     *     contains the encrypted content.\n-     * @throws ResourceNotFoundException if the key cannot be found for encryption.\n-     * @throws UnsupportedOperationException if the encrypt operation is not supported or configured on the key.\n-     * @throws NullPointerException if {@code algorithm} or  {@code plainText} is null.\n+     * contains the encrypted content.\n+     * @throws ResourceNotFoundException If the key cannot be found for encryption.\n+     * @throws UnsupportedOperationException If the encrypt operation is not supported or configured on the key.\n+     * @throws NullPointerException If {@code algorithm} or {@code plainText} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<EncryptResult> encrypt(EncryptionAlgorithm algorithm, byte[] plaintext) {\n+        return encrypt(algorithm, plaintext, null);\n+    }\n+\n+    /**\n+     * Encrypts an arbitrary sequence of bytes using the configured key. Note that the encrypt operation only supports a\n+     * single block of data, the size of which is dependent on the target key and the encryption algorithm to be used.\n+     * The encrypt operation is supported for both symmetric keys and asymmetric keys. In case of asymmetric keys public\n+     * portion of the key is used for encryption. This operation requires the keys/encrypt permission.\n+     *\n+     * <p>The {@link EncryptionAlgorithm encryption algorithm} indicates the type of algorithm to use for encrypting the\n+     * specified {@code plaintext}. Possible values for assymetric keys include:\n+     * {@link EncryptionAlgorithm#RSA1_5 RSA1_5}, {@link EncryptionAlgorithm#RSA_OAEP RSA_OAEP} and\n+     * {@link EncryptionAlgorithm#RSA_OAEP_256 RSA_OAEP_256}.\n+     *\n+     * Possible values for symmetric keys include: {@link EncryptionAlgorithm#A128CBC A128CBC},\n+     * {@link EncryptionAlgorithm#A128CBCPAD A128CBCPAD}, {@link EncryptionAlgorithm#A128CBC_HS256 A128CBC-HS256},\n+     * {@link EncryptionAlgorithm#A128GCM A128GCM}, {@link EncryptionAlgorithm#A192CBC A192CBC},\n+     * {@link EncryptionAlgorithm#A192CBCPAD A192CBCPAD}, {@link EncryptionAlgorithm#A192CBC_HS384 A192CBC-HS384},\n+     * {@link EncryptionAlgorithm#A192GCM A192GCM}, {@link EncryptionAlgorithm#A256CBC A256CBC},\n+     * {@link EncryptionAlgorithm#A256CBCPAD A256CBPAD}, {@link EncryptionAlgorithm#A256CBC_HS512 A256CBC-HS512} and\n+     * {@link EncryptionAlgorithm#A256GCM A256GCM}.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     * <p>Encrypts the content. Subscribes to the call asynchronously and prints out the encrypted content details when\n+     * a response has been received.</p>\n+     * {@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.encrypt#EncryptionAlgorithm-byte-CryptographyOptions}\n+     *\n+     * @param algorithm The algorithm to be used for encryption.\n+     * @param plaintext The content to be encrypted.\n+     * @param options Optional parameters for the encryption operation.\n+     * @return A {@link Mono} containing a {@link EncryptResult} whose {@link EncryptResult#getCipherText() cipher text}\n+     * contains the encrypted content.\n+     * @throws ResourceNotFoundException If the key cannot be found for encryption.\n+     * @throws UnsupportedOperationException If the encrypt operation is not supported or configured on the key.\n+     * @throws NullPointerException If {@code algorithm} or {@code plainText} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<EncryptResult> encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, CryptographyOptions options) {", "originalCommit": "059c29ce48d87dfe947d7b86ebac48ddf78212a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df0aeb720f67149df6dae0321e7471b6188cbfef", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java\nindex 7cd3b967f1a..decd00b92ec 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java\n\n@@ -233,7 +233,7 @@ public class CryptographyAsyncClient {\n      * portion of the key is used for encryption. This operation requires the keys/encrypt permission.\n      *\n      * <p>The {@link EncryptionAlgorithm encryption algorithm} indicates the type of algorithm to use for encrypting the\n-     * specified {@code plaintext}. Possible values for assymetric keys include:\n+     * specified {@code plaintext}. Possible values for asymmetric keys include:\n      * {@link EncryptionAlgorithm#RSA1_5 RSA1_5}, {@link EncryptionAlgorithm#RSA_OAEP RSA_OAEP} and\n      * {@link EncryptionAlgorithm#RSA_OAEP_256 RSA_OAEP_256}.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU2OTM0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519569343", "bodyText": "In addition to what @JonathanGiles said about \"options\", currently no \"options\" are needed for AES-KW and this would be premature and confusing. By using the EncryptOptions and DecryptOptions for encrypt and decrypt, we avoid this confusion as well.", "author": "heaths", "createdAt": "2020-11-09T06:02:57Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "diffHunk": "@@ -407,59 +493,94 @@ private void initializeCryptoClients() {\n      * <p>The {@link KeyWrapAlgorithm wrap algorithm} indicates the type of algorithm to use for wrapping the specified\n      * key content. Possible values include:\n      * {@link KeyWrapAlgorithm#RSA1_5 RSA1_5}, {@link KeyWrapAlgorithm#RSA_OAEP RSA_OAEP} and {@link\n-     * KeyWrapAlgorithm#RSA_OAEP_256 RSA_OAEP_256}</p>\n+     * KeyWrapAlgorithm#RSA_OAEP_256 RSA_OAEP_256}.\n+     *\n+     * Possible values for symmetric keys include: {@link EncryptionAlgorithm#A128KW A128KW},\n+     * {@link EncryptionAlgorithm#A192KW A192KW} and {@link EncryptionAlgorithm#A256KW A256KW}.</p>\n      *\n      * <p><strong>Code Samples</strong></p>\n      * <p>Wraps the key content. Subscribes to the call asynchronously and prints out the wrapped key details when a\n      * response has been received.</p>\n      * {@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.wrapKey#KeyWrapAlgorithm-byte}\n      *\n      * @param algorithm The encryption algorithm to use for wrapping the key.\n-     * @param key The key content to be wrapped\n-     * @return A {@link Mono} containing a {@link WrapResult} whose {@link WrapResult#getEncryptedKey() encrypted\n-     *     key} contains the wrapped key result.\n-     * @throws ResourceNotFoundException if the key cannot be found for wrap operation.\n-     * @throws UnsupportedOperationException if the wrap operation is not supported or configured on the key.\n-     * @throws NullPointerException if {@code algorithm} or {@code key} is null.\n+     * @param key The key content to be wrapped.\n+     * @return A {@link Mono} containing a {@link WrapResult} whose {@link WrapResult#getEncryptedKey() encrypted key}\n+     * contains the wrapped key result.\n+     * @throws ResourceNotFoundException If the key cannot be found for wrap operation.\n+     * @throws UnsupportedOperationException If the wrap operation is not supported or configured on the key.\n+     * @throws NullPointerException If {@code algorithm} or {@code key} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<WrapResult> wrapKey(KeyWrapAlgorithm algorithm, byte[] key) {\n+        return wrapKey(algorithm, key, null);\n+    }\n+\n+    /**\n+     * Wraps a symmetric key using the configured key. The wrap operation supports wrapping a symmetric key with both\n+     * symmetric and asymmetric keys. This operation requires the keys/wrapKey permission.\n+     *\n+     * <p>The {@link KeyWrapAlgorithm wrap algorithm} indicates the type of algorithm to use for wrapping the specified\n+     * key content. Possible values include:\n+     * {@link KeyWrapAlgorithm#RSA1_5 RSA1_5}, {@link KeyWrapAlgorithm#RSA_OAEP RSA_OAEP} and {@link\n+     * KeyWrapAlgorithm#RSA_OAEP_256 RSA_OAEP_256}.\n+     *\n+     * Possible values for symmetric keys include: {@link EncryptionAlgorithm#A128KW A128KW},\n+     * {@link EncryptionAlgorithm#A192KW A192KW} and {@link EncryptionAlgorithm#A256KW A256KW}.</p>\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     * <p>Wraps the key content. Subscribes to the call asynchronously and prints out the wrapped key details when a\n+     * response has been received.</p>\n+     * {@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.wrapKey#KeyWrapAlgorithm-byte-CryptographyOptions}\n+     *\n+     * @param algorithm The encryption algorithm to use for wrapping the key.\n+     * @param key The key content to be wrapped.\n+     * @param options Optional parameters for the wrap operation.\n+     * @return A {@link Mono} containing a {@link WrapResult} whose {@link WrapResult#getEncryptedKey() encrypted key}\n+     * contains the wrapped key result.\n+     * @throws ResourceNotFoundException If the key cannot be found for wrap operation.\n+     * @throws UnsupportedOperationException If the wrap operation is not supported or configured on the key.\n+     * @throws NullPointerException If {@code algorithm} or {@code key} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<WrapResult> wrapKey(KeyWrapAlgorithm algorithm, byte[] key, CryptographyOptions options) {\n         try {\n-            return withContext(context -> wrapKey(algorithm, key, context));\n+            return withContext(context -> wrapKey(algorithm, key, options, context));", "originalCommit": "059c29ce48d87dfe947d7b86ebac48ddf78212a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df0aeb720f67149df6dae0321e7471b6188cbfef", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java\nindex 7cd3b967f1a..decd00b92ec 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java\n\n@@ -513,51 +513,20 @@ public class CryptographyAsyncClient {\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<WrapResult> wrapKey(KeyWrapAlgorithm algorithm, byte[] key) {\n-        return wrapKey(algorithm, key, null);\n-    }\n-\n-    /**\n-     * Wraps a symmetric key using the configured key. The wrap operation supports wrapping a symmetric key with both\n-     * symmetric and asymmetric keys. This operation requires the keys/wrapKey permission.\n-     *\n-     * <p>The {@link KeyWrapAlgorithm wrap algorithm} indicates the type of algorithm to use for wrapping the specified\n-     * key content. Possible values include:\n-     * {@link KeyWrapAlgorithm#RSA1_5 RSA1_5}, {@link KeyWrapAlgorithm#RSA_OAEP RSA_OAEP} and {@link\n-     * KeyWrapAlgorithm#RSA_OAEP_256 RSA_OAEP_256}.\n-     *\n-     * Possible values for symmetric keys include: {@link EncryptionAlgorithm#A128KW A128KW},\n-     * {@link EncryptionAlgorithm#A192KW A192KW} and {@link EncryptionAlgorithm#A256KW A256KW}.</p>\n-     *\n-     * <p><strong>Code Samples</strong></p>\n-     * <p>Wraps the key content. Subscribes to the call asynchronously and prints out the wrapped key details when a\n-     * response has been received.</p>\n-     * {@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.wrapKey#KeyWrapAlgorithm-byte-CryptographyOptions}\n-     *\n-     * @param algorithm The encryption algorithm to use for wrapping the key.\n-     * @param key The key content to be wrapped.\n-     * @param options Optional parameters for the wrap operation.\n-     * @return A {@link Mono} containing a {@link WrapResult} whose {@link WrapResult#getEncryptedKey() encrypted key}\n-     * contains the wrapped key result.\n-     * @throws ResourceNotFoundException If the key cannot be found for wrap operation.\n-     * @throws UnsupportedOperationException If the wrap operation is not supported or configured on the key.\n-     * @throws NullPointerException If {@code algorithm} or {@code key} are {@code null}.\n-     */\n-    @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<WrapResult> wrapKey(KeyWrapAlgorithm algorithm, byte[] key, CryptographyOptions options) {\n         try {\n-            return withContext(context -> wrapKey(algorithm, key, options, context));\n+            return withContext(context -> wrapKey(algorithm, key, context));\n         } catch (RuntimeException ex) {\n             return monoError(logger, ex);\n         }\n     }\n \n-    Mono<WrapResult> wrapKey(KeyWrapAlgorithm algorithm, byte[] key, CryptographyOptions options, Context context) {\n+    Mono<WrapResult> wrapKey(KeyWrapAlgorithm algorithm, byte[] key, Context context) {\n         Objects.requireNonNull(algorithm, \"Key Wrap algorithm cannot be null.\");\n         Objects.requireNonNull(key, \"Key content to be wrapped cannot be null.\");\n \n         return ensureValidKeyAvailable().flatMap(available -> {\n             if (!available) {\n-                return cryptographyServiceClient.wrapKey(algorithm, key, options, context);\n+                return cryptographyServiceClient.wrapKey(algorithm, key, context);\n             }\n \n             if (!checkKeyPermissions(this.key.getKeyOps(), KeyOperation.WRAP_KEY)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3MDQ4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519570483", "bodyText": "As previously mentioned, it would be more intuitive to have specialized EncryptOptions and DecryptOptions that guides the user toward providing the right options. This requires much more knowledge about cryptographic methods.", "author": "heaths", "createdAt": "2020-11-09T06:07:38Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyOptions.java", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * Represents optional parameters for cryptographic operations.\n+ */\n+@Fluent\n+public class CryptographyOptions {\n+    /**\n+     * Initialization vector for symmetric algorithms.\n+     */\n+    @JsonProperty(value = \"iv\")\n+    private final byte[] initializationVector;", "originalCommit": "059c29ce48d87dfe947d7b86ebac48ddf78212a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df0aeb720f67149df6dae0321e7471b6188cbfef", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyOptions.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyOptions.java\ndeleted file mode 100644\nindex ac01cae50a7..00000000000\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyOptions.java\n+++ /dev/null\n\n@@ -1,77 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.security.keyvault.keys.cryptography;\n-\n-import com.azure.core.annotation.Fluent;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-/**\n- * Represents optional parameters for cryptographic operations.\n- */\n-@Fluent\n-public class CryptographyOptions {\n-    /**\n-     * Initialization vector for symmetric algorithms.\n-     */\n-    @JsonProperty(value = \"iv\")\n-    private final byte[] initializationVector;\n-\n-    /**\n-     * Additional data to authenticate but not encrypt/decrypt when using authenticated crypto algorithms.\n-     */\n-    @JsonProperty(value = \"aad\")\n-    private final byte[] additionalAuthenticatedData;\n-\n-    /**\n-     * The tag to authenticate when performing decryption with an authenticated algorithm.\n-     */\n-    @JsonProperty(value = \"tag\")\n-    private final byte[] tag;\n-\n-    /**\n-     * Creates an instance of {@link CryptographyOptions} with the given parameters.\n-     *\n-     * @param initializationVector Initialization vector for symmetric algorithms.\n-     * @param additionalAuthenticatedData Additional data to authenticate but not encrypt/decrypt when using\n-     * authenticated crypto algorithms.\n-     * @param tag The tag to authenticate when performing decryption with an authenticated algorithm.\n-     */\n-    public CryptographyOptions(byte[] initializationVector, byte[] additionalAuthenticatedData, byte[] tag) {\n-        this.initializationVector = new byte[initializationVector.length];\n-        this.additionalAuthenticatedData = new byte[additionalAuthenticatedData.length];\n-        this.tag = new byte[tag.length];\n-\n-        System.arraycopy(initializationVector, 0, this.initializationVector, 0, initializationVector.length);\n-        System.arraycopy(additionalAuthenticatedData, 0, this.additionalAuthenticatedData, 0,\n-            additionalAuthenticatedData.length);\n-        System.arraycopy(tag, 0, this.tag, 0, tag.length);\n-    }\n-\n-    /**\n-     * Get the initialization vector to be used in the cryptographic operation using a symmetric algorithm.\n-     *\n-     * @return The initialization vector.\n-     */\n-    public byte[] getInitializationVector() {\n-        return initializationVector.clone();\n-    }\n-\n-    /**\n-     * Get additional data to authenticate but not encrypt/decrypt when using authenticated crypto algorithms.\n-     *\n-     * @return The additional authenticated data.\n-     */\n-    public byte[] getAdditionalAuthenticatedData() {\n-        return additionalAuthenticatedData.clone();\n-    }\n-\n-    /**\n-     * Get the tag to authenticate when performing decryption with an authenticated algorithm.\n-     *\n-     * @return The tag.\n-     */\n-    public byte[] getTag() {\n-        return tag.clone();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3MTY3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519571677", "bodyText": "In public APIs, refer to this only as \"iv\". It's a common enough acronym in cryptography.", "author": "heaths", "createdAt": "2020-11-09T06:12:21Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyOperationParameters.java", "diffHunk": "@@ -24,6 +24,24 @@\n     @JsonProperty(value = \"value\", required = true)\n     private Base64Url value;\n \n+    /**\n+     * Initialization vector for symmetric algorithms.\n+     */\n+    @JsonProperty(value = \"iv\")\n+    private byte[] initializationVector;", "originalCommit": "059c29ce48d87dfe947d7b86ebac48ddf78212a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df0aeb720f67149df6dae0321e7471b6188cbfef", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyOperationParameters.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyOperationParameters.java\nindex bf4ae912ccb..ddc794985cd 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyOperationParameters.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyOperationParameters.java\n\n@@ -28,7 +28,7 @@ class KeyOperationParameters {\n      * Initialization vector for symmetric algorithms.\n      */\n     @JsonProperty(value = \"iv\")\n-    private byte[] initializationVector;\n+    private byte[] iv;\n \n     /**\n      * Additional data to authenticate but not encrypt/decrypt when using authenticated crypto algorithms.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3MTg3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519571873", "bodyText": "Use \"authenticationTag\" (yes, \"authentication\"; keep \"authenticated\" for additionalAuthenticatedData) for all public APIs here as well. \"tag\" would just be confusing with all the other instances of \"tag\" or \"tags\" used throughout the SDKs.", "author": "heaths", "createdAt": "2020-11-09T06:13:02Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyOperationParameters.java", "diffHunk": "@@ -24,6 +24,24 @@\n     @JsonProperty(value = \"value\", required = true)\n     private Base64Url value;\n \n+    /**\n+     * Initialization vector for symmetric algorithms.\n+     */\n+    @JsonProperty(value = \"iv\")\n+    private byte[] initializationVector;\n+\n+    /**\n+     * Additional data to authenticate but not encrypt/decrypt when using authenticated crypto algorithms.\n+     */\n+    @JsonProperty(value = \"aad\")\n+    private byte[] additionalAuthenticatedData;\n+\n+    /**\n+     * The tag to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    @JsonProperty(value = \"tag\")\n+    private byte[] tag;", "originalCommit": "059c29ce48d87dfe947d7b86ebac48ddf78212a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df0aeb720f67149df6dae0321e7471b6188cbfef", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyOperationParameters.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyOperationParameters.java\nindex bf4ae912ccb..ddc794985cd 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyOperationParameters.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyOperationParameters.java\n\n@@ -28,7 +28,7 @@ class KeyOperationParameters {\n      * Initialization vector for symmetric algorithms.\n      */\n     @JsonProperty(value = \"iv\")\n-    private byte[] initializationVector;\n+    private byte[] iv;\n \n     /**\n      * Additional data to authenticate but not encrypt/decrypt when using authenticated crypto algorithms.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3MzkzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519573932", "bodyText": "These other parameters \"iv\", \"aad\", and \"tag\" aren't used for key wrap or unwrap. See the public API for .NET at https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/keyvault/Azure.Security.KeyVault.Keys/api/Azure.Security.KeyVault.Keys.netstandard2.0.cs. We can certainly discuss changes, but what we have now are designed to lead the customer to use the right parameters and get only the data useful back in a request.", "author": "heaths", "createdAt": "2020-11-09T06:20:51Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyWrapUnwrapRequest.java", "diffHunk": "@@ -24,6 +24,24 @@\n     @JsonProperty(value = \"value\", required = true)\n     private Base64Url value;\n \n+    /**\n+     * Initialization vector for symmetric algorithms.\n+     */\n+    @JsonProperty(value = \"iv\")\n+    private byte[] initializationVector;", "originalCommit": "059c29ce48d87dfe947d7b86ebac48ddf78212a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df0aeb720f67149df6dae0321e7471b6188cbfef", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyWrapUnwrapRequest.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyWrapUnwrapRequest.java\nindex 54ddc13ef86..d1045cfdf3a 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyWrapUnwrapRequest.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/KeyWrapUnwrapRequest.java\n\n@@ -24,24 +24,6 @@ class KeyWrapUnwrapRequest {\n     @JsonProperty(value = \"value\", required = true)\n     private Base64Url value;\n \n-    /**\n-     * Initialization vector for symmetric algorithms.\n-     */\n-    @JsonProperty(value = \"iv\")\n-    private byte[] initializationVector;\n-\n-    /**\n-     * Additional data to authenticate but not encrypt/decrypt when using authenticated crypto algorithms.\n-     */\n-    @JsonProperty(value = \"aad\")\n-    private byte[] additionalAuthenticatedData;\n-\n-    /**\n-     * The tag to authenticate when performing decryption with an authenticated algorithm.\n-     */\n-    @JsonProperty(value = \"tag\")\n-    private byte[] tag;\n-\n     /**\n      * Get the algorithm value.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3NDUxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519574516", "bodyText": "Comments about using the EncryptOptions and similar should apply to the LocalCryptographyClient. In fact, I'm just noticing this says \"LocalKeyCryptographyClient\". It should be \"LocalCryptographyClient\" (that's what we shipped for betas for .NET and JS).", "author": "heaths", "createdAt": "2020-11-09T06:22:59Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/LocalKeyCryptographyClient.java", "diffHunk": "@@ -27,21 +27,22 @@\n         this.serviceClient = serviceClient;\n     }\n \n-    abstract Mono<EncryptResult> encryptAsync(EncryptionAlgorithm algorithm, byte[] plaintext, Context context, JsonWebKey jsonWebKey);\n+    abstract Mono<EncryptResult> encryptAsync(EncryptionAlgorithm algorithm, byte[] plaintext,", "originalCommit": "059c29ce48d87dfe947d7b86ebac48ddf78212a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3NDgxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519574818", "bodyText": "Actually, I see this isn't exposed. But I'll leave the comment here in case it still applies.", "author": "heaths", "createdAt": "2020-11-09T06:24:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3NDUxNg=="}], "type": "inlineReview", "revised_code": {"commit": "df0aeb720f67149df6dae0321e7471b6188cbfef", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/LocalKeyCryptographyClient.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/LocalKeyCryptographyClient.java\nindex 90c1d5cc679..4728c90a9a4 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/LocalKeyCryptographyClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/LocalKeyCryptographyClient.java\n\n@@ -28,21 +28,21 @@ abstract class LocalKeyCryptographyClient {\n     }\n \n     abstract Mono<EncryptResult> encryptAsync(EncryptionAlgorithm algorithm, byte[] plaintext,\n-                                              CryptographyOptions options, Context context, JsonWebKey jsonWebKey);\n+                                              EncryptOptions options, Context context, JsonWebKey jsonWebKey);\n \n     abstract Mono<DecryptResult> decryptAsync(EncryptionAlgorithm algorithm, byte[] cipherText,\n-                                              CryptographyOptions options, Context context, JsonWebKey jsonWebKey);\n+                                              DecryptOptions options, Context context, JsonWebKey jsonWebKey);\n \n     abstract Mono<SignResult> signAsync(SignatureAlgorithm algorithm, byte[] digest, Context context, JsonWebKey key);\n \n     abstract Mono<VerifyResult> verifyAsync(SignatureAlgorithm algorithm, byte[] digest, byte[] signature,\n                                             Context context, JsonWebKey key);\n \n-    abstract Mono<WrapResult> wrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key, CryptographyOptions options,\n-                                           Context context, JsonWebKey jsonWebKey);\n+    abstract Mono<WrapResult> wrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key, Context context,\n+                                           JsonWebKey jsonWebKey);\n \n-    abstract Mono<UnwrapResult> unwrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] encryptedKey,\n-                                               CryptographyOptions options, Context context, JsonWebKey jsonWebKey);\n+    abstract Mono<UnwrapResult> unwrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] encryptedKey, Context context,\n+                                               JsonWebKey jsonWebKey);\n \n     abstract Mono<SignResult> signDataAsync(SignatureAlgorithm algorithm, byte[] data, Context context, JsonWebKey key);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3NTIyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r519575220", "bodyText": "These aren't in the list to implement. Just AES-CBC, AES-CBCPAD, AES-KW, and AES-GCM.", "author": "heaths", "createdAt": "2020-11-09T06:25:23Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/models/EncryptionAlgorithm.java", "diffHunk": "@@ -42,21 +67,41 @@\n      * Static value A192CBC_HS384 for EncryptionAlgorithm.\n      */\n     public static final EncryptionAlgorithm A192CBC_HS384 = fromString(\"A192CBC-HS384\");\n-    \n+\n     /**\n-     * Static value A256CBC for EncryptionAlgorithm.\n+     * Static value A256CBC_HS512 for EncryptionAlgorithm.\n      */\n-    public static final EncryptionAlgorithm A256CBC = fromString(\"A256CBC\");\n-    \n+    public static final EncryptionAlgorithm A256CBC_HS512 = fromString(\"A256CBC-HS512\");", "originalCommit": "059c29ce48d87dfe947d7b86ebac48ddf78212a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE2MjQ0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r520162440", "bodyText": "Those were already made public in a previous release to provide feature-parity with the Track 1 SDK, I don't think we should remove them.", "author": "vcolin7", "createdAt": "2020-11-09T22:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3NTIyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE4NDMwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r520184304", "bodyText": "Understood (.NET track 1 did too), but they aren't in the swagger. My understanding was that they were proposed and may indeed be implemented, but never made it into the public swaggers. @AlexGhiondea, @schaabs what do you think here? If we're going with parity with track 1, adding support for AES-HMAC using SHA2 makes sense, but are we doing that now?", "author": "heaths", "createdAt": "2020-11-09T23:22:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU3NTIyMA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "df0aeb720f67149df6dae0321e7471b6188cbfef", "url": "https://github.com/Azure/azure-sdk-for-java/commit/df0aeb720f67149df6dae0321e7471b6188cbfef", "message": "Applied PR feedback and added local tests.", "committedDate": "2020-11-11T18:38:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU5MDUzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r521590535", "bodyText": "Do you think these will be discoverable? In .NET, we waffled on classes like this vs. factories and opted for the latter for discoverability. Would htat work better here. You could, for example, mix that and builders by having a factory returning the right class that you can then set options, e.t.:\nEncryptOptions\n  .createA128GcmOptions(iv, key)\n  .setAdditionalAuthenticationData(data);\nI'm also wondering how they specify the key size with this.", "author": "heaths", "createdAt": "2020-11-11T19:32:05Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesCbcDecryptOptions.java", "diffHunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+/**\n+ * A class containing configuration parameters that can be applied when decrypting AES-CBC keys with and without\n+ * padding.\n+ */\n+public class AesCbcDecryptOptions extends DecryptOptions {\n+    /**\n+     * Creates an instance of {@link AesCbcDecryptOptions} with the given parameters.\n+     *\n+     * @param iv Initialization vector for the decryption operation.\n+     */\n+    public AesCbcDecryptOptions(byte[] iv) {", "originalCommit": "df0aeb720f67149df6dae0321e7471b6188cbfef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4MDE2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r521680168", "bodyText": "The Key size is specified in the clients. For example:\nCryptographyClient.encrypt(EncryptionAlgorithm algorithm, String plaintext, EncryptOptions options)", "author": "vcolin7", "createdAt": "2020-11-11T22:37:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU5MDUzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4MDc5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r521680792", "bodyText": "Do you have any thoughts on this @srnagar, @JonathanGiles?", "author": "vcolin7", "createdAt": "2020-11-11T22:39:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU5MDUzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3MTk5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r521771999", "bodyText": "Since these are inputs to the API, how does the user know what are the available subtypes of EncryptOptions/DecryptOptions. In other places, we have used a type flag to switch between strongly typed sub-classes.\nSee example here:\nhttps://github.com/Azure/azure-sdk-for-java/blob/master/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValue.java", "author": "srnagar", "createdAt": "2020-11-12T02:07:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU5MDUzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "596d98e58e6860b78fbcce460fbe5da39333ce69", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesCbcDecryptOptions.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesCbcDecryptOptions.java\nindex a962f4325bc..53f88f977f3 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesCbcDecryptOptions.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/AesCbcDecryptOptions.java\n\n@@ -3,6 +3,8 @@\n \n package com.azure.security.keyvault.keys.cryptography;\n \n+import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n+\n /**\n  * A class containing configuration parameters that can be applied when decrypting AES-CBC keys with and without\n  * padding.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY0OTA5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r521649096", "bodyText": "EncryptOptions and DecryptOptions should be the only parameter. See https://apiview.dev/Assemblies/Review/d74052731cb94759804beaa492b7a17a#Azure.Security.KeyVault.Keys.Cryptography.LocalCryptographyClient for an example. This requires them passing the right pairs of arguments, where as what we did in .NET leads them to the right answer by design.", "author": "heaths", "createdAt": "2020-11-11T21:28:30Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "diffHunk": "@@ -357,15 +357,15 @@ private void initializeCryptoClients() {\n      * @throws NullPointerException If {@code algorithm} or {@code cipherText} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<DecryptResult> decrypt(EncryptionAlgorithm algorithm, byte[] cipherText, CryptographyOptions options) {\n+    public Mono<DecryptResult> decrypt(EncryptionAlgorithm algorithm, byte[] cipherText, DecryptOptions options) {", "originalCommit": "df0aeb720f67149df6dae0321e7471b6188cbfef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "596d98e58e6860b78fbcce460fbe5da39333ce69", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java\nindex decd00b92ec..d0f5b21762c 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java\n\n@@ -346,33 +340,27 @@ public class CryptographyAsyncClient {\n      * <p><strong>Code Samples</strong></p>\n      * <p>Decrypts the encrypted content. Subscribes to the call asynchronously and prints out the decrypted content\n      * details when a response has been received.</p>\n-     * {@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.decrypt#EncryptionAlgorithm-byte-DecryptOptions}\n+     * {@codesnippet com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient.decrypt#DecryptOptions}\n      *\n-     * @param algorithm The algorithm to be used for decryption.\n-     * @param cipherText The content to be decrypted.\n-     * @param options Optional parameters for the decryption operation.\n+     * @param decryptOptions The parameters to use in the decryption operation.\n      * @return A {@link Mono} containing the decrypted blob.\n      * @throws ResourceNotFoundException If the key cannot be found for decryption.\n      * @throws UnsupportedOperationException If the decrypt operation is not supported or configured on the key.\n      * @throws NullPointerException If {@code algorithm} or {@code cipherText} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<DecryptResult> decrypt(EncryptionAlgorithm algorithm, byte[] cipherText, DecryptOptions options) {\n+    public Mono<DecryptResult> decrypt(DecryptOptions decryptOptions) {\n         try {\n-            return withContext(context -> decrypt(algorithm, cipherText, options, context));\n+            return withContext(context -> decrypt(decryptOptions, context));\n         } catch (RuntimeException ex) {\n             return monoError(logger, ex);\n         }\n     }\n \n-    Mono<DecryptResult> decrypt(EncryptionAlgorithm algorithm, byte[] cipherText, DecryptOptions options,\n-                                Context context) {\n-        Objects.requireNonNull(algorithm, \"Encryption algorithm cannot be null.\");\n-        Objects.requireNonNull(cipherText, \"Cipher text content to be decrypted cannot be null.\");\n-\n+    Mono<DecryptResult> decrypt(DecryptOptions decryptOptions, Context context) {\n         return ensureValidKeyAvailable().flatMap(available -> {\n             if (!available) {\n-                return cryptographyServiceClient.decrypt(algorithm, cipherText, options, context);\n+                return cryptographyServiceClient.decrypt(decryptOptions, context);\n             }\n \n             if (!checkKeyPermissions(this.key.getKeyOps(), KeyOperation.DECRYPT)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MDEyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r521650122", "bodyText": "This requires them knowing what to pass for which algorithms. This is not a good customer UX. Please see https://apiview.dev/Assemblies/Review/d74052731cb94759804beaa492b7a17a#Azure.Security.KeyVault.Keys.Cryptography.DecryptOptions. Perhaps a builder would be more idiomatic, but the overall concept is to make sure they can only provide relevant arguments that also dictates the algorithm, rather than pairing them together correctly. We can make crypto easier in our limited APIs (compared to general crypto provided in our respective frameworks).", "author": "heaths", "createdAt": "2020-11-11T21:30:51Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/DecryptOptions.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * A class containing various configuration parameters that can be applied when performing decryption operations.\n+ */\n+public class DecryptOptions {\n+    /**\n+     * Initialization vector to be used in the decryption operation using a symmetric algorithm.\n+     */\n+    @JsonProperty(value = \"iv\")\n+    private final byte[] iv;\n+\n+    /**\n+     * Get additional data to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    @JsonProperty(value = \"aad\")\n+    private final byte[] additionalAuthenticatedData;\n+\n+    /**\n+     * The tag to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    @JsonProperty(value = \"tag\")\n+    private final byte[] authenticationTag;\n+\n+    /**\n+     * Creates an instance of {@link DecryptOptions} with the given parameters.\n+     *\n+     * @param iv Initialization vector for symmetric algorithms.\n+     * @param additionalAuthenticatedData Additional data to authenticate but not encrypt/decrypt when using\n+     * authenticated crypto algorithms.\n+     * @param authenticationTag The tag to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    public DecryptOptions(byte[] iv, byte[] additionalAuthenticatedData, byte[] authenticationTag) {", "originalCommit": "df0aeb720f67149df6dae0321e7471b6188cbfef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5NDE5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r521694194", "bodyText": "Will evaluate a different approach. Probably what you suggested here.", "author": "vcolin7", "createdAt": "2020-11-11T23:15:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MDEyMg=="}], "type": "inlineReview", "revised_code": {"commit": "596d98e58e6860b78fbcce460fbe5da39333ce69", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/DecryptOptions.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/DecryptOptions.java\nindex 216c3d37269..37969353fe9 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/DecryptOptions.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/DecryptOptions.java\n\n@@ -3,59 +3,96 @@\n \n package com.azure.security.keyvault.keys.cryptography;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n+\n+import java.util.Objects;\n \n /**\n  * A class containing various configuration parameters that can be applied when performing decryption operations.\n  */\n public class DecryptOptions {\n+    /**\n+     * The algorithm to be used for decryption.\n+     */\n+    final EncryptionAlgorithm algorithm;\n+\n+    /**\n+     * The content to be decrypted.\n+     */\n+    final byte[] cipherText;\n+\n     /**\n      * Initialization vector to be used in the decryption operation using a symmetric algorithm.\n      */\n-    @JsonProperty(value = \"iv\")\n-    private final byte[] iv;\n+    byte[] iv;\n \n     /**\n      * Get additional data to authenticate when performing decryption with an authenticated algorithm.\n      */\n-    @JsonProperty(value = \"aad\")\n-    private final byte[] additionalAuthenticatedData;\n+    byte[] additionalAuthenticatedData;\n \n     /**\n      * The tag to authenticate when performing decryption with an authenticated algorithm.\n      */\n-    @JsonProperty(value = \"tag\")\n-    private final byte[] authenticationTag;\n+    byte[] authenticationTag;\n+\n+    /**\n+     * Factory method to create an instance of {@link AesCbcDecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param ciphertext The content to be decrypted.\n+     * @return The {@link AesCbcDecryptOptions}.\n+     */\n+    public static AesCbcDecryptOptions createAesCbcOptions(EncryptionAlgorithm algorithm, byte[] ciphertext) {\n+        return new AesCbcDecryptOptions(algorithm, ciphertext);\n+    }\n+\n+    /**\n+     * Factory method to create an instance of {@link AesGcmDecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param ciphertext The content to be decrypted.\n+     * @param iv Initialization vector for the decryption operation.\n+     * @return The {@link AesGcmDecryptOptions}.\n+     */\n+    public static AesGcmDecryptOptions createAesGcmOptions(EncryptionAlgorithm algorithm, byte[] ciphertext, byte[] iv) {\n+        return new AesGcmDecryptOptions(algorithm, ciphertext, iv);\n+    }\n \n     /**\n      * Creates an instance of {@link DecryptOptions} with the given parameters.\n      *\n-     * @param iv Initialization vector for symmetric algorithms.\n-     * @param additionalAuthenticatedData Additional data to authenticate but not encrypt/decrypt when using\n-     * authenticated crypto algorithms.\n-     * @param authenticationTag The tag to authenticate when performing decryption with an authenticated algorithm.\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param cipherText The content to be decrypted.\n      */\n-    public DecryptOptions(byte[] iv, byte[] additionalAuthenticatedData, byte[] authenticationTag) {\n-        if (iv == null) {\n-            this.iv = null;\n-        } else {\n-            this.iv = new byte[iv.length];\n-            System.arraycopy(iv, 0, this.iv, 0, iv.length);\n-        }\n+    DecryptOptions(EncryptionAlgorithm algorithm, byte[] cipherText) {\n+        Objects.requireNonNull(algorithm, \"'algorithm cannot be null'\");\n+        Objects.requireNonNull(cipherText, \"'ciphertext' cannot be null\");\n \n-        if (additionalAuthenticatedData == null) {\n-            this.additionalAuthenticatedData = null;\n-        } else {\n-            this.additionalAuthenticatedData = new byte[additionalAuthenticatedData.length];\n-            System.arraycopy(additionalAuthenticatedData, 0, this.additionalAuthenticatedData, 0,\n-                additionalAuthenticatedData.length);\n-        }\n+        this.algorithm = algorithm;\n+        this.cipherText = new byte[cipherText.length];\n+        System.arraycopy(cipherText, 0, this.cipherText, 0, cipherText.length);\n+    }\n \n-        if (authenticationTag == null) {\n-            this.authenticationTag = null;\n+    /**\n+     * The algorithm to be used for encryption.\n+     *\n+     * @return The algorithm to be used for encryption.\n+     */\n+    public EncryptionAlgorithm getAlgorithm() {\n+        return algorithm;\n+    }\n+\n+    /**\n+     * Get the content to be encrypted.\n+     *\n+     * @return The content to be encrypted.\n+     */\n+    public byte[] getCipherText() {\n+        if (cipherText == null) {\n+            return null;\n         } else {\n-            this.authenticationTag = new byte[authenticationTag.length];\n-            System.arraycopy(authenticationTag, 0, this.authenticationTag, 0, authenticationTag.length);\n+            return cipherText.clone();\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MTc1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r521651753", "bodyText": "See https://apiview.dev/Assemblies/Review/d74052731cb94759804beaa492b7a17a#Azure.Security.KeyVault.Keys.Cryptography.EncryptOptions. Where iv is optional (default parameter value of null), we should generate an appropriately long one. See https://github.com/Azure/azure-sdk-for-net/blob/275bad601e72a8e308a73aed621e838d1ae20e9b/sdk/keyvault/Azure.Security.KeyVault.Keys/src/Cryptography/EncryptOptions.cs#L171-L179 for how/when I did this (I call Initialize from local and remote providers and let this class handle if and when it should generate an IV/nonce).", "author": "heaths", "createdAt": "2020-11-11T21:34:30Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/EncryptOptions.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * A class containing various configuration parameters that can be applied when performing encryption operations.\n+ */\n+public class EncryptOptions {\n+    /**\n+     * Initialization vector to be used in the encryption operation using a symmetric algorithm.\n+     */\n+    @JsonProperty(value = \"iv\")\n+    private final byte[] iv;\n+\n+    /**\n+     * Get additional data to authenticate when performing encryption with an authenticated algorithm.\n+     */\n+    @JsonProperty(value = \"aad\")\n+    private final byte[] additionalAuthenticatedData;\n+\n+    /**\n+     * Creates an instance of {@link EncryptOptions} with the given parameters.\n+     *\n+     * @param iv Initialization vector for symmetric algorithms.\n+     * @param additionalAuthenticatedData Additional data to authenticate but not encrypt/decrypt when using\n+     * authenticated crypto algorithms.\n+     */\n+    public EncryptOptions(byte[] iv, byte[] additionalAuthenticatedData) {\n+        if (iv == null) {\n+            this.iv = null;", "originalCommit": "df0aeb720f67149df6dae0321e7471b6188cbfef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MTkxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r521651914", "bodyText": "...generation of an IV could probably wait closer to GA, but I'd open a bug on that if you punt it for tracking.", "author": "heaths", "createdAt": "2020-11-11T21:34:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MTc1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4NjYzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r521686630", "bodyText": "We do generate a random iv of appropriate size depending on the EncryptionAlgorithm, here's an example. Although, if the options types are going to also take the algorithm and plaintext/ciphertext we could move that here as well.", "author": "vcolin7", "createdAt": "2020-11-11T22:53:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MTc1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "596d98e58e6860b78fbcce460fbe5da39333ce69", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/EncryptOptions.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/EncryptOptions.java\nindex b9e53bb4c77..6bba15997fb 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/EncryptOptions.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/EncryptOptions.java\n\n@@ -3,50 +3,96 @@\n \n package com.azure.security.keyvault.keys.cryptography;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n+\n+import java.util.Objects;\n \n /**\n  * A class containing various configuration parameters that can be applied when performing encryption operations.\n  */\n public class EncryptOptions {\n+    /**\n+     * The algorithm to be used for encryption.\n+     */\n+    final EncryptionAlgorithm algorithm;\n+\n+    /**\n+     * The content to be encrypted.\n+     */\n+    final byte[] plainText;\n+\n     /**\n      * Initialization vector to be used in the encryption operation using a symmetric algorithm.\n      */\n-    @JsonProperty(value = \"iv\")\n-    private final byte[] iv;\n+    byte[] iv;\n \n     /**\n      * Get additional data to authenticate when performing encryption with an authenticated algorithm.\n      */\n-    @JsonProperty(value = \"aad\")\n-    private final byte[] additionalAuthenticatedData;\n+    byte[] additionalAuthenticatedData;\n+\n+    /**\n+     * Factory method to create an instance of {@link AesCbcEncryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for encryption.\n+     * @param plaintext The content to be encryption.\n+     * @return The {@link AesCbcEncryptOptions}.\n+     */\n+    public static AesCbcEncryptOptions createAesCbcOptions(EncryptionAlgorithm algorithm, byte[] plaintext) {\n+        return new AesCbcEncryptOptions(algorithm, plaintext);\n+    }\n+\n+    /**\n+     * Factory method to create an instance of {@link AesGcmEncryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for encryption.\n+     * @param plaintext The content to be encryption.\n+     * @param iv Initialization vector for the encryption operation.\n+     * @return The {@link AesGcmEncryptOptions}.\n+     */\n+    public static AesGcmEncryptOptions createAesGcmOptions(EncryptionAlgorithm algorithm, byte[] plaintext, byte[] iv) {\n+        return new AesGcmEncryptOptions(algorithm, plaintext, iv);\n+    }\n \n     /**\n      * Creates an instance of {@link EncryptOptions} with the given parameters.\n      *\n-     * @param iv Initialization vector for symmetric algorithms.\n-     * @param additionalAuthenticatedData Additional data to authenticate but not encrypt/decrypt when using\n-     * authenticated crypto algorithms.\n+     * @param algorithm The algorithm to be used for encryption.\n+     * @param plainText The content to be encrypted.\n      */\n-    public EncryptOptions(byte[] iv, byte[] additionalAuthenticatedData) {\n-        if (iv == null) {\n-            this.iv = null;\n-        } else {\n-            this.iv = new byte[iv.length];\n-            System.arraycopy(iv, 0, this.iv, 0, iv.length);\n-        }\n+    EncryptOptions(EncryptionAlgorithm algorithm, byte[] plainText) {\n+        Objects.requireNonNull(algorithm, \"'algorithm cannot be null'\");\n+        Objects.requireNonNull(plainText, \"'plaintext' cannot be null\");\n \n-        if (additionalAuthenticatedData == null) {\n-            this.additionalAuthenticatedData = null;\n+        this.algorithm = algorithm;\n+        this.plainText = new byte[plainText.length];\n+        System.arraycopy(plainText, 0, this.plainText, 0, plainText.length);\n+    }\n+\n+    /**\n+     * The algorithm to be used for encryption.\n+     *\n+     * @return The algorithm to be used for encryption.\n+     */\n+    public EncryptionAlgorithm getAlgorithm() {\n+        return algorithm;\n+    }\n+\n+    /**\n+     * Get the content to be encrypted.\n+     *\n+     * @return The content to be encrypted.\n+     */\n+    public byte[] getPlainText() {\n+        if (plainText == null) {\n+            return null;\n         } else {\n-            this.additionalAuthenticatedData = new byte[additionalAuthenticatedData.length];\n-            System.arraycopy(additionalAuthenticatedData, 0, this.additionalAuthenticatedData, 0,\n-                additionalAuthenticatedData.length);\n+            return plainText.clone();\n         }\n     }\n \n     /**\n-     * Get the initialization vector to be used in the decryption operation using a symmetric algorithm.\n+     * Get the initialization vector to be used in the encryption operation using a symmetric algorithm.\n      *\n      * @return The initialization vector.\n      */\n"}}, {"oid": "596d98e58e6860b78fbcce460fbe5da39333ce69", "url": "https://github.com/Azure/azure-sdk-for-java/commit/596d98e58e6860b78fbcce460fbe5da39333ce69", "message": "Made the EncryptOptions and DecryptOptions constructor package-private, as well as their children's, and made them have factory methods for creating the former to help with discoverability.", "committedDate": "2020-11-12T17:34:47Z", "type": "commit"}, {"oid": "8b937512b6060605f73c8980c6bb7e227e786f2c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8b937512b6060605f73c8980c6bb7e227e786f2c", "message": "Fixed build issues.", "committedDate": "2020-11-12T18:13:10Z", "type": "commit"}, {"oid": "b1f1511b8176ae42a6b0d138da8062da0027609d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b1f1511b8176ae42a6b0d138da8062da0027609d", "message": "Changed EncryptOptions and DecryptOptions to use a factory model.", "committedDate": "2020-11-12T21:44:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQzNzYyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522437627", "bodyText": "You normally put options classes in their own namespace? Seems...verbose. Could equate them to models (after all, these options classes are closer to models than what we were using before).", "author": "heaths", "createdAt": "2020-11-12T21:29:18Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java", "diffHunk": "@@ -23,6 +23,8 @@\n import com.azure.security.keyvault.keys.cryptography.models.SignResult;\n import com.azure.security.keyvault.keys.cryptography.models.VerifyResult;\n import com.azure.security.keyvault.keys.cryptography.models.WrapResult;\n+import com.azure.security.keyvault.keys.cryptography.options.DecryptOptions;", "originalCommit": "8b937512b6060605f73c8980c6bb7e227e786f2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUwNzExMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522507112", "bodyText": "Moved this from to the cryptography package since we will only have two options types now.", "author": "vcolin7", "createdAt": "2020-11-12T23:39:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQzNzYyNw=="}], "type": "inlineReview", "revised_code": {"commit": "b1f1511b8176ae42a6b0d138da8062da0027609d", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java\nindex 7d01e859609..f2e39b90679 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyAsyncClient.java\n\n@@ -23,8 +23,6 @@ import com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm;\n import com.azure.security.keyvault.keys.cryptography.models.SignResult;\n import com.azure.security.keyvault.keys.cryptography.models.VerifyResult;\n import com.azure.security.keyvault.keys.cryptography.models.WrapResult;\n-import com.azure.security.keyvault.keys.cryptography.options.DecryptOptions;\n-import com.azure.security.keyvault.keys.cryptography.options.EncryptOptions;\n import com.azure.security.keyvault.keys.models.KeyVaultKey;\n import com.azure.security.keyvault.keys.models.JsonWebKey;\n import com.azure.security.keyvault.keys.models.KeyOperation;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MzkwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522483907", "bodyText": "Nit: it's actually \"plaintext\" in crypto-speak.", "author": "heaths", "createdAt": "2020-11-12T22:52:10Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyServiceClient.java", "diffHunk": "@@ -125,19 +127,17 @@ JsonWebKey transformSecretKey(SecretKey secretKey) throws JsonProcessingExceptio\n         return mapper.readValue(jsonString, JsonWebKey.class);\n     }\n \n-    Mono<EncryptResult> encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, EncryptOptions options,\n-                                Context context) {\n-        byte[] iv = null;\n-        byte[] authenticatedData = null;\n-\n-        if (options != null) {\n-            iv = options.getIv();\n-            authenticatedData = options.getAdditionalAuthenticatedData();\n-        }\n+    Mono<EncryptResult> encrypt(EncryptOptions encryptOptions, Context context) {\n+        Objects.requireNonNull(encryptOptions, \"'encryptOptions' cannot be null.\");\n+        Objects.requireNonNull(encryptOptions.getAlgorithm(), \"Encryption algorithm cannot be null.\");\n+        Objects.requireNonNull(encryptOptions.getPlainText(), \"Plain text content to be encrypted cannot be null.\");", "originalCommit": "8b937512b6060605f73c8980c6bb7e227e786f2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNjIyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522516221", "bodyText": "We'll keep it as \"plaintext\" in the new code. Unfortunately, there's a couple APIs [1][2] that have already GA'd using plainText,", "author": "vcolin7", "createdAt": "2020-11-12T23:56:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MzkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUzNzEzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522537133", "bodyText": "After talking to @JonathanGiles, in this case he thinks is it's better we remain consistent with what's already been GA'd, given that the difference in capitalization does not make it confusing to understand what the terms refer to.", "author": "vcolin7", "createdAt": "2020-11-13T00:53:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MzkwNw=="}], "type": "inlineReview", "revised_code": {"commit": "ff77ba13802b18d690436a3ec2534f732fb3bc47", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyServiceClient.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyServiceClient.java\nindex 3e6c751f69e..d6b22b16da1 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyServiceClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyServiceClient.java\n\n@@ -129,8 +127,6 @@ class CryptographyServiceClient {\n \n     Mono<EncryptResult> encrypt(EncryptOptions encryptOptions, Context context) {\n         Objects.requireNonNull(encryptOptions, \"'encryptOptions' cannot be null.\");\n-        Objects.requireNonNull(encryptOptions.getAlgorithm(), \"Encryption algorithm cannot be null.\");\n-        Objects.requireNonNull(encryptOptions.getPlainText(), \"Plain text content to be encrypted cannot be null.\");\n \n         EncryptionAlgorithm algorithm = encryptOptions.getAlgorithm();\n         byte[] iv = encryptOptions.getIv();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4NDI2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522484264", "bodyText": "On that note, I guess I missed this before, but just getPlaintext (it's one word).", "author": "heaths", "createdAt": "2020-11-12T22:52:40Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyServiceClient.java", "diffHunk": "@@ -125,19 +127,17 @@ JsonWebKey transformSecretKey(SecretKey secretKey) throws JsonProcessingExceptio\n         return mapper.readValue(jsonString, JsonWebKey.class);\n     }\n \n-    Mono<EncryptResult> encrypt(EncryptionAlgorithm algorithm, byte[] plaintext, EncryptOptions options,\n-                                Context context) {\n-        byte[] iv = null;\n-        byte[] authenticatedData = null;\n-\n-        if (options != null) {\n-            iv = options.getIv();\n-            authenticatedData = options.getAdditionalAuthenticatedData();\n-        }\n+    Mono<EncryptResult> encrypt(EncryptOptions encryptOptions, Context context) {\n+        Objects.requireNonNull(encryptOptions, \"'encryptOptions' cannot be null.\");\n+        Objects.requireNonNull(encryptOptions.getAlgorithm(), \"Encryption algorithm cannot be null.\");\n+        Objects.requireNonNull(encryptOptions.getPlainText(), \"Plain text content to be encrypted cannot be null.\");\n \n+        EncryptionAlgorithm algorithm = encryptOptions.getAlgorithm();\n+        byte[] iv = encryptOptions.getIv();\n+        byte[] authenticatedData = encryptOptions.getAdditionalAuthenticatedData();\n         KeyOperationParameters parameters = new KeyOperationParameters()\n             .setAlgorithm(algorithm)\n-            .setValue(plaintext)\n+            .setValue(encryptOptions.getPlainText())", "originalCommit": "8b937512b6060605f73c8980c6bb7e227e786f2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff77ba13802b18d690436a3ec2534f732fb3bc47", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyServiceClient.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyServiceClient.java\nindex 3e6c751f69e..d6b22b16da1 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyServiceClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyServiceClient.java\n\n@@ -129,8 +127,6 @@ class CryptographyServiceClient {\n \n     Mono<EncryptResult> encrypt(EncryptOptions encryptOptions, Context context) {\n         Objects.requireNonNull(encryptOptions, \"'encryptOptions' cannot be null.\");\n-        Objects.requireNonNull(encryptOptions.getAlgorithm(), \"Encryption algorithm cannot be null.\");\n-        Objects.requireNonNull(encryptOptions.getPlainText(), \"Plain text content to be encrypted cannot be null.\");\n \n         EncryptionAlgorithm algorithm = encryptOptions.getAlgorithm();\n         byte[] iv = encryptOptions.getIv();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4NTI5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522485293", "bodyText": "getCiphertext (one word)", "author": "heaths", "createdAt": "2020-11-12T22:54:06Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyServiceClient.java", "diffHunk": "@@ -153,21 +153,18 @@ JsonWebKey transformSecretKey(SecretKey secretKey) throws JsonProcessingExceptio\n                 Mono.just(new EncryptResult(keyOperationResultResponse.getValue().getResult(), algorithm, keyId)));\n     }\n \n-    Mono<DecryptResult> decrypt(EncryptionAlgorithm algorithm, byte[] cipherText, DecryptOptions options,\n-                                Context context) {\n-        byte[] iv = null;\n-        byte[] additionalAuthenticatedData = null;\n-        byte[] authenticationTag = null;\n-\n-        if (options != null) {\n-            iv = options.getIv();\n-            additionalAuthenticatedData = options.getAdditionalAuthenticatedData();\n-            authenticationTag = options.getAuthenticationTag();\n-        }\n+    Mono<DecryptResult> decrypt(DecryptOptions decryptOptions, Context context) {\n+        Objects.requireNonNull(decryptOptions, \"'decryptOptions' cannot be null.\");\n+        Objects.requireNonNull(decryptOptions.getAlgorithm(), \"Encryption algorithm cannot be null.\");\n+        Objects.requireNonNull(decryptOptions.getCipherText(), \"Cipher text content to be decrypted cannot be null.\");", "originalCommit": "8b937512b6060605f73c8980c6bb7e227e786f2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff77ba13802b18d690436a3ec2534f732fb3bc47", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyServiceClient.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyServiceClient.java\nindex 3e6c751f69e..d6b22b16da1 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyServiceClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/CryptographyServiceClient.java\n\n@@ -155,8 +151,6 @@ class CryptographyServiceClient {\n \n     Mono<DecryptResult> decrypt(DecryptOptions decryptOptions, Context context) {\n         Objects.requireNonNull(decryptOptions, \"'decryptOptions' cannot be null.\");\n-        Objects.requireNonNull(decryptOptions.getAlgorithm(), \"Encryption algorithm cannot be null.\");\n-        Objects.requireNonNull(decryptOptions.getCipherText(), \"Cipher text content to be decrypted cannot be null.\");\n \n         EncryptionAlgorithm algorithm = decryptOptions.getAlgorithm();\n         byte[] iv = decryptOptions.getIv();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4ODUwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522488505", "bodyText": "iv in all cases should be generated with a cryptographically random generator. See https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/keyvault/Azure.Security.KeyVault.Keys/src/Cryptography/EncryptOptions.cs. If necessary, you could open an issue and do this for GA.", "author": "heaths", "createdAt": "2020-11-12T22:58:23Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/AesCbcDecryptOptions.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography.options;\n+\n+import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n+\n+/**\n+ * A class containing configuration parameters that can be applied when decrypting AES-CBC keys with and without\n+ * padding.\n+ */\n+public class AesCbcDecryptOptions extends DecryptOptions {\n+    /**\n+     * Creates an instance of {@link AesCbcDecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param ciphertext The content to be decrypted.\n+     */\n+    AesCbcDecryptOptions(EncryptionAlgorithm algorithm, byte[] ciphertext) {\n+        super(algorithm, ciphertext);\n+    }\n+\n+    /**\n+     * Set the given initialization vector to be used in this decryption operation.\n+     *\n+     * @param iv Initialization vector for the decryption operation.\n+     * @return The updated {@link AesCbcDecryptOptions} object.\n+     */\n+    public AesCbcDecryptOptions setIv(byte[] iv) {", "originalCommit": "8b937512b6060605f73c8980c6bb7e227e786f2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUwNjkxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522506916", "bodyText": "If not provided, it gets generated here.", "author": "vcolin7", "createdAt": "2020-11-12T23:38:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4ODUwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ff77ba13802b18d690436a3ec2534f732fb3bc47", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/AesCbcDecryptOptions.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/AesCbcDecryptOptions.java\ndeleted file mode 100644\nindex 81ac367530b..00000000000\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/AesCbcDecryptOptions.java\n+++ /dev/null\n\n@@ -1,39 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.security.keyvault.keys.cryptography.options;\n-\n-import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n-\n-/**\n- * A class containing configuration parameters that can be applied when decrypting AES-CBC keys with and without\n- * padding.\n- */\n-public class AesCbcDecryptOptions extends DecryptOptions {\n-    /**\n-     * Creates an instance of {@link AesCbcDecryptOptions} with the given parameters.\n-     *\n-     * @param algorithm The algorithm to be used for decryption.\n-     * @param ciphertext The content to be decrypted.\n-     */\n-    AesCbcDecryptOptions(EncryptionAlgorithm algorithm, byte[] ciphertext) {\n-        super(algorithm, ciphertext);\n-    }\n-\n-    /**\n-     * Set the given initialization vector to be used in this decryption operation.\n-     *\n-     * @param iv Initialization vector for the decryption operation.\n-     * @return The updated {@link AesCbcDecryptOptions} object.\n-     */\n-    public AesCbcDecryptOptions setIv(byte[] iv) {\n-        if (iv == null) {\n-            this.iv = null;\n-        } else {\n-            this.iv = new byte[iv.length];\n-            System.arraycopy(iv, 0, this.iv, 0, iv.length);\n-        }\n-\n-        return this;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4OTYyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522489621", "bodyText": "This is required for GCM. Shouldn't this throw?", "author": "heaths", "createdAt": "2020-11-12T23:00:36Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/AesGcmDecryptOptions.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography.options;\n+\n+import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n+\n+/**\n+ * A class containing configuration parameters that can be applied when decrypting AES-GCM keys.\n+ */\n+public class AesGcmDecryptOptions extends DecryptOptions {\n+    /**\n+     * Creates an instance of {@link AesGcmDecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param ciphertext The content to be decrypted.\n+     * @param iv Initialization vector for the decryption operation.\n+     */\n+    AesGcmDecryptOptions(EncryptionAlgorithm algorithm, byte[] ciphertext, byte[] iv) {\n+        super(algorithm, ciphertext);\n+\n+        if (iv == null) {\n+            this.iv = null;\n+        } else {\n+            this.iv = new byte[iv.length];\n+            System.arraycopy(iv, 0, this.iv, 0, iv.length);\n+        }\n+    }\n+\n+    /**\n+     * Set additional data to authenticate when using authenticated crypto algorithms.\n+     *\n+     * @param additionalAuthenticatedData Additional data to authenticate when using authenticated crypto algorithms.\n+     * @return The updated {@link AesGcmDecryptOptions} object.\n+     */\n+    public AesGcmDecryptOptions setAdditionalAuthenticatedData(byte[] additionalAuthenticatedData) {\n+        if (additionalAuthenticatedData == null) {\n+            this.additionalAuthenticatedData = null;\n+        } else {\n+            this.additionalAuthenticatedData = new byte[additionalAuthenticatedData.length];\n+            System.arraycopy(additionalAuthenticatedData, 0, this.additionalAuthenticatedData, 0,\n+                additionalAuthenticatedData.length);\n+        }\n+\n+        return this;\n+    }\n+\n+    /**\n+     * Set the tag to authenticate when performing decryption.\n+     *\n+     * @param authenticationTag The tag to authenticate when performing decryption.\n+     * @return The updated {@link AesGcmDecryptOptions} object.\n+     */\n+    public AesGcmDecryptOptions setAuthenticationTag(byte[] authenticationTag) {\n+        if (authenticationTag == null) {\n+            this.authenticationTag = null;", "originalCommit": "8b937512b6060605f73c8980c6bb7e227e786f2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNzk1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522517953", "bodyText": "Apparently the local Java implementation doesn't care about the contents but the size of the tag :S", "author": "vcolin7", "createdAt": "2020-11-13T00:02:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4OTYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyODg4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522528884", "bodyText": "We can still throw if it's null.", "author": "vcolin7", "createdAt": "2020-11-13T00:36:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4OTYyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "ff77ba13802b18d690436a3ec2534f732fb3bc47", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/AesGcmDecryptOptions.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/AesGcmDecryptOptions.java\ndeleted file mode 100644\nindex 003ab82fee9..00000000000\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/AesGcmDecryptOptions.java\n+++ /dev/null\n\n@@ -1,65 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.security.keyvault.keys.cryptography.options;\n-\n-import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n-\n-/**\n- * A class containing configuration parameters that can be applied when decrypting AES-GCM keys.\n- */\n-public class AesGcmDecryptOptions extends DecryptOptions {\n-    /**\n-     * Creates an instance of {@link AesGcmDecryptOptions} with the given parameters.\n-     *\n-     * @param algorithm The algorithm to be used for decryption.\n-     * @param ciphertext The content to be decrypted.\n-     * @param iv Initialization vector for the decryption operation.\n-     */\n-    AesGcmDecryptOptions(EncryptionAlgorithm algorithm, byte[] ciphertext, byte[] iv) {\n-        super(algorithm, ciphertext);\n-\n-        if (iv == null) {\n-            this.iv = null;\n-        } else {\n-            this.iv = new byte[iv.length];\n-            System.arraycopy(iv, 0, this.iv, 0, iv.length);\n-        }\n-    }\n-\n-    /**\n-     * Set additional data to authenticate when using authenticated crypto algorithms.\n-     *\n-     * @param additionalAuthenticatedData Additional data to authenticate when using authenticated crypto algorithms.\n-     * @return The updated {@link AesGcmDecryptOptions} object.\n-     */\n-    public AesGcmDecryptOptions setAdditionalAuthenticatedData(byte[] additionalAuthenticatedData) {\n-        if (additionalAuthenticatedData == null) {\n-            this.additionalAuthenticatedData = null;\n-        } else {\n-            this.additionalAuthenticatedData = new byte[additionalAuthenticatedData.length];\n-            System.arraycopy(additionalAuthenticatedData, 0, this.additionalAuthenticatedData, 0,\n-                additionalAuthenticatedData.length);\n-        }\n-\n-        return this;\n-    }\n-\n-    /**\n-     * Set the tag to authenticate when performing decryption.\n-     *\n-     * @param authenticationTag The tag to authenticate when performing decryption.\n-     * @return The updated {@link AesGcmDecryptOptions} object.\n-     */\n-    public AesGcmDecryptOptions setAuthenticationTag(byte[] authenticationTag) {\n-        if (authenticationTag == null) {\n-            this.authenticationTag = null;\n-        } else {\n-            this.authenticationTag = new byte[authenticationTag.length];\n-            System.arraycopy(authenticationTag, 0, this.authenticationTag, 0,\n-                authenticationTag.length);\n-        }\n-\n-        return this;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ5MDA2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522490067", "bodyText": "As mentioned elsewhere, \"Ciphertext\" and \"Plaintext\".", "author": "heaths", "createdAt": "2020-11-12T23:01:50Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/DecryptOptions.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography.options;\n+\n+import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A class containing various configuration parameters that can be applied when performing decryption operations.\n+ */\n+public class DecryptOptions {\n+    /**\n+     * The algorithm to be used for decryption.\n+     */\n+    final EncryptionAlgorithm algorithm;\n+\n+    /**\n+     * The content to be decrypted.\n+     */\n+    final byte[] cipherText;\n+\n+    /**\n+     * Initialization vector to be used in the decryption operation using a symmetric algorithm.\n+     */\n+    byte[] iv;\n+\n+    /**\n+     * Get additional data to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    byte[] additionalAuthenticatedData;\n+\n+    /**\n+     * The tag to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    byte[] authenticationTag;\n+\n+    /**\n+     * Factory method to create an instance of {@link DecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param ciphertext The content to be decrypted.\n+     * @return The {@link DecryptOptions}.\n+     */\n+    public static DecryptOptions createOptions(EncryptionAlgorithm algorithm, byte[] ciphertext) {\n+        return new DecryptOptions(algorithm, ciphertext);\n+    }\n+\n+    /**\n+     * Factory method to create an instance of {@link AesCbcDecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param ciphertext The content to be decrypted.\n+     * @return The {@link AesCbcDecryptOptions}.\n+     */\n+    public static AesCbcDecryptOptions createAesCbcOptions(EncryptionAlgorithm algorithm, byte[] ciphertext) {\n+        return new AesCbcDecryptOptions(algorithm, ciphertext);\n+    }\n+\n+    /**\n+     * Factory method to create an instance of {@link AesGcmDecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param ciphertext The content to be decrypted.\n+     * @param iv Initialization vector for the decryption operation.\n+     * @return The {@link AesGcmDecryptOptions}.\n+     */\n+    public static AesGcmDecryptOptions createAesGcmOptions(EncryptionAlgorithm algorithm, byte[] ciphertext, byte[] iv) {\n+        return new AesGcmDecryptOptions(algorithm, ciphertext, iv);\n+    }\n+\n+    /**\n+     * Creates an instance of {@link DecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param cipherText The content to be decrypted.\n+     */\n+    DecryptOptions(EncryptionAlgorithm algorithm, byte[] cipherText) {\n+        Objects.requireNonNull(algorithm, \"'algorithm cannot be null'\");\n+        Objects.requireNonNull(cipherText, \"'ciphertext' cannot be null\");\n+\n+        this.algorithm = algorithm;\n+        this.cipherText = new byte[cipherText.length];\n+        System.arraycopy(cipherText, 0, this.cipherText, 0, cipherText.length);\n+    }\n+\n+    /**\n+     * The algorithm to be used for encryption.\n+     *\n+     * @return The algorithm to be used for encryption.\n+     */\n+    public EncryptionAlgorithm getAlgorithm() {\n+        return algorithm;\n+    }\n+\n+    /**\n+     * Get the content to be encrypted.\n+     *\n+     * @return The content to be encrypted.\n+     */\n+    public byte[] getCipherText() {", "originalCommit": "8b937512b6060605f73c8980c6bb7e227e786f2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff77ba13802b18d690436a3ec2534f732fb3bc47", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/DecryptOptions.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/DecryptOptions.java\ndeleted file mode 100644\nindex 1a8573efe23..00000000000\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/DecryptOptions.java\n+++ /dev/null\n\n@@ -1,148 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.security.keyvault.keys.cryptography.options;\n-\n-import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n-\n-import java.util.Objects;\n-\n-/**\n- * A class containing various configuration parameters that can be applied when performing decryption operations.\n- */\n-public class DecryptOptions {\n-    /**\n-     * The algorithm to be used for decryption.\n-     */\n-    final EncryptionAlgorithm algorithm;\n-\n-    /**\n-     * The content to be decrypted.\n-     */\n-    final byte[] cipherText;\n-\n-    /**\n-     * Initialization vector to be used in the decryption operation using a symmetric algorithm.\n-     */\n-    byte[] iv;\n-\n-    /**\n-     * Get additional data to authenticate when performing decryption with an authenticated algorithm.\n-     */\n-    byte[] additionalAuthenticatedData;\n-\n-    /**\n-     * The tag to authenticate when performing decryption with an authenticated algorithm.\n-     */\n-    byte[] authenticationTag;\n-\n-    /**\n-     * Factory method to create an instance of {@link DecryptOptions} with the given parameters.\n-     *\n-     * @param algorithm The algorithm to be used for decryption.\n-     * @param ciphertext The content to be decrypted.\n-     * @return The {@link DecryptOptions}.\n-     */\n-    public static DecryptOptions createOptions(EncryptionAlgorithm algorithm, byte[] ciphertext) {\n-        return new DecryptOptions(algorithm, ciphertext);\n-    }\n-\n-    /**\n-     * Factory method to create an instance of {@link AesCbcDecryptOptions} with the given parameters.\n-     *\n-     * @param algorithm The algorithm to be used for decryption.\n-     * @param ciphertext The content to be decrypted.\n-     * @return The {@link AesCbcDecryptOptions}.\n-     */\n-    public static AesCbcDecryptOptions createAesCbcOptions(EncryptionAlgorithm algorithm, byte[] ciphertext) {\n-        return new AesCbcDecryptOptions(algorithm, ciphertext);\n-    }\n-\n-    /**\n-     * Factory method to create an instance of {@link AesGcmDecryptOptions} with the given parameters.\n-     *\n-     * @param algorithm The algorithm to be used for decryption.\n-     * @param ciphertext The content to be decrypted.\n-     * @param iv Initialization vector for the decryption operation.\n-     * @return The {@link AesGcmDecryptOptions}.\n-     */\n-    public static AesGcmDecryptOptions createAesGcmOptions(EncryptionAlgorithm algorithm, byte[] ciphertext, byte[] iv) {\n-        return new AesGcmDecryptOptions(algorithm, ciphertext, iv);\n-    }\n-\n-    /**\n-     * Creates an instance of {@link DecryptOptions} with the given parameters.\n-     *\n-     * @param algorithm The algorithm to be used for decryption.\n-     * @param cipherText The content to be decrypted.\n-     */\n-    DecryptOptions(EncryptionAlgorithm algorithm, byte[] cipherText) {\n-        Objects.requireNonNull(algorithm, \"'algorithm cannot be null'\");\n-        Objects.requireNonNull(cipherText, \"'ciphertext' cannot be null\");\n-\n-        this.algorithm = algorithm;\n-        this.cipherText = new byte[cipherText.length];\n-        System.arraycopy(cipherText, 0, this.cipherText, 0, cipherText.length);\n-    }\n-\n-    /**\n-     * The algorithm to be used for encryption.\n-     *\n-     * @return The algorithm to be used for encryption.\n-     */\n-    public EncryptionAlgorithm getAlgorithm() {\n-        return algorithm;\n-    }\n-\n-    /**\n-     * Get the content to be encrypted.\n-     *\n-     * @return The content to be encrypted.\n-     */\n-    public byte[] getCipherText() {\n-        if (cipherText == null) {\n-            return null;\n-        } else {\n-            return cipherText.clone();\n-        }\n-    }\n-\n-    /**\n-     * Get the initialization vector to be used in the decryption operation using a symmetric algorithm.\n-     *\n-     * @return The initialization vector.\n-     */\n-    public byte[] getIv() {\n-        if (iv == null) {\n-            return null;\n-        } else {\n-            return iv.clone();\n-        }\n-    }\n-\n-    /**\n-     * Get additional data to authenticate when performing decryption with an authenticated algorithm.\n-     *\n-     * @return The additional authenticated data.\n-     */\n-    public byte[] getAdditionalAuthenticatedData() {\n-        if (additionalAuthenticatedData == null) {\n-            return null;\n-        } else {\n-            return additionalAuthenticatedData.clone();\n-        }\n-    }\n-\n-    /**\n-     * Get the tag to authenticate when performing decryption with an authenticated algorithm.\n-     *\n-     * @return The authentication tag.\n-     */\n-    public byte[] getAuthenticationTag() {\n-        if (authenticationTag == null) {\n-            return null;\n-        } else {\n-            return authenticationTag.clone();\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ5MjI5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522492296", "bodyText": "You cloned to set this. Do you need to clone again?", "author": "heaths", "createdAt": "2020-11-12T23:07:35Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/DecryptOptions.java", "diffHunk": "@@ -0,0 +1,148 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography.options;\n+\n+import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A class containing various configuration parameters that can be applied when performing decryption operations.\n+ */\n+public class DecryptOptions {\n+    /**\n+     * The algorithm to be used for decryption.\n+     */\n+    final EncryptionAlgorithm algorithm;\n+\n+    /**\n+     * The content to be decrypted.\n+     */\n+    final byte[] cipherText;\n+\n+    /**\n+     * Initialization vector to be used in the decryption operation using a symmetric algorithm.\n+     */\n+    byte[] iv;\n+\n+    /**\n+     * Get additional data to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    byte[] additionalAuthenticatedData;\n+\n+    /**\n+     * The tag to authenticate when performing decryption with an authenticated algorithm.\n+     */\n+    byte[] authenticationTag;\n+\n+    /**\n+     * Factory method to create an instance of {@link DecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param ciphertext The content to be decrypted.\n+     * @return The {@link DecryptOptions}.\n+     */\n+    public static DecryptOptions createOptions(EncryptionAlgorithm algorithm, byte[] ciphertext) {\n+        return new DecryptOptions(algorithm, ciphertext);\n+    }\n+\n+    /**\n+     * Factory method to create an instance of {@link AesCbcDecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param ciphertext The content to be decrypted.\n+     * @return The {@link AesCbcDecryptOptions}.\n+     */\n+    public static AesCbcDecryptOptions createAesCbcOptions(EncryptionAlgorithm algorithm, byte[] ciphertext) {\n+        return new AesCbcDecryptOptions(algorithm, ciphertext);\n+    }\n+\n+    /**\n+     * Factory method to create an instance of {@link AesGcmDecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param ciphertext The content to be decrypted.\n+     * @param iv Initialization vector for the decryption operation.\n+     * @return The {@link AesGcmDecryptOptions}.\n+     */\n+    public static AesGcmDecryptOptions createAesGcmOptions(EncryptionAlgorithm algorithm, byte[] ciphertext, byte[] iv) {\n+        return new AesGcmDecryptOptions(algorithm, ciphertext, iv);\n+    }\n+\n+    /**\n+     * Creates an instance of {@link DecryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for decryption.\n+     * @param cipherText The content to be decrypted.\n+     */\n+    DecryptOptions(EncryptionAlgorithm algorithm, byte[] cipherText) {\n+        Objects.requireNonNull(algorithm, \"'algorithm cannot be null'\");\n+        Objects.requireNonNull(cipherText, \"'ciphertext' cannot be null\");\n+\n+        this.algorithm = algorithm;\n+        this.cipherText = new byte[cipherText.length];\n+        System.arraycopy(cipherText, 0, this.cipherText, 0, cipherText.length);\n+    }\n+\n+    /**\n+     * The algorithm to be used for encryption.\n+     *\n+     * @return The algorithm to be used for encryption.\n+     */\n+    public EncryptionAlgorithm getAlgorithm() {\n+        return algorithm;\n+    }\n+\n+    /**\n+     * Get the content to be encrypted.\n+     *\n+     * @return The content to be encrypted.\n+     */\n+    public byte[] getCipherText() {\n+        if (cipherText == null) {\n+            return null;\n+        } else {\n+            return cipherText.clone();\n+        }\n+    }\n+\n+    /**\n+     * Get the initialization vector to be used in the decryption operation using a symmetric algorithm.\n+     *\n+     * @return The initialization vector.\n+     */\n+    public byte[] getIv() {\n+        if (iv == null) {\n+            return null;\n+        } else {\n+            return iv.clone();", "originalCommit": "8b937512b6060605f73c8980c6bb7e227e786f2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUwNTEwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522505107", "bodyText": "Since array contents are not immutable we do not want to provide access to the original array.", "author": "vcolin7", "createdAt": "2020-11-12T23:33:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ5MjI5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ff77ba13802b18d690436a3ec2534f732fb3bc47", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/DecryptOptions.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/DecryptOptions.java\ndeleted file mode 100644\nindex 1a8573efe23..00000000000\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/DecryptOptions.java\n+++ /dev/null\n\n@@ -1,148 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.security.keyvault.keys.cryptography.options;\n-\n-import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n-\n-import java.util.Objects;\n-\n-/**\n- * A class containing various configuration parameters that can be applied when performing decryption operations.\n- */\n-public class DecryptOptions {\n-    /**\n-     * The algorithm to be used for decryption.\n-     */\n-    final EncryptionAlgorithm algorithm;\n-\n-    /**\n-     * The content to be decrypted.\n-     */\n-    final byte[] cipherText;\n-\n-    /**\n-     * Initialization vector to be used in the decryption operation using a symmetric algorithm.\n-     */\n-    byte[] iv;\n-\n-    /**\n-     * Get additional data to authenticate when performing decryption with an authenticated algorithm.\n-     */\n-    byte[] additionalAuthenticatedData;\n-\n-    /**\n-     * The tag to authenticate when performing decryption with an authenticated algorithm.\n-     */\n-    byte[] authenticationTag;\n-\n-    /**\n-     * Factory method to create an instance of {@link DecryptOptions} with the given parameters.\n-     *\n-     * @param algorithm The algorithm to be used for decryption.\n-     * @param ciphertext The content to be decrypted.\n-     * @return The {@link DecryptOptions}.\n-     */\n-    public static DecryptOptions createOptions(EncryptionAlgorithm algorithm, byte[] ciphertext) {\n-        return new DecryptOptions(algorithm, ciphertext);\n-    }\n-\n-    /**\n-     * Factory method to create an instance of {@link AesCbcDecryptOptions} with the given parameters.\n-     *\n-     * @param algorithm The algorithm to be used for decryption.\n-     * @param ciphertext The content to be decrypted.\n-     * @return The {@link AesCbcDecryptOptions}.\n-     */\n-    public static AesCbcDecryptOptions createAesCbcOptions(EncryptionAlgorithm algorithm, byte[] ciphertext) {\n-        return new AesCbcDecryptOptions(algorithm, ciphertext);\n-    }\n-\n-    /**\n-     * Factory method to create an instance of {@link AesGcmDecryptOptions} with the given parameters.\n-     *\n-     * @param algorithm The algorithm to be used for decryption.\n-     * @param ciphertext The content to be decrypted.\n-     * @param iv Initialization vector for the decryption operation.\n-     * @return The {@link AesGcmDecryptOptions}.\n-     */\n-    public static AesGcmDecryptOptions createAesGcmOptions(EncryptionAlgorithm algorithm, byte[] ciphertext, byte[] iv) {\n-        return new AesGcmDecryptOptions(algorithm, ciphertext, iv);\n-    }\n-\n-    /**\n-     * Creates an instance of {@link DecryptOptions} with the given parameters.\n-     *\n-     * @param algorithm The algorithm to be used for decryption.\n-     * @param cipherText The content to be decrypted.\n-     */\n-    DecryptOptions(EncryptionAlgorithm algorithm, byte[] cipherText) {\n-        Objects.requireNonNull(algorithm, \"'algorithm cannot be null'\");\n-        Objects.requireNonNull(cipherText, \"'ciphertext' cannot be null\");\n-\n-        this.algorithm = algorithm;\n-        this.cipherText = new byte[cipherText.length];\n-        System.arraycopy(cipherText, 0, this.cipherText, 0, cipherText.length);\n-    }\n-\n-    /**\n-     * The algorithm to be used for encryption.\n-     *\n-     * @return The algorithm to be used for encryption.\n-     */\n-    public EncryptionAlgorithm getAlgorithm() {\n-        return algorithm;\n-    }\n-\n-    /**\n-     * Get the content to be encrypted.\n-     *\n-     * @return The content to be encrypted.\n-     */\n-    public byte[] getCipherText() {\n-        if (cipherText == null) {\n-            return null;\n-        } else {\n-            return cipherText.clone();\n-        }\n-    }\n-\n-    /**\n-     * Get the initialization vector to be used in the decryption operation using a symmetric algorithm.\n-     *\n-     * @return The initialization vector.\n-     */\n-    public byte[] getIv() {\n-        if (iv == null) {\n-            return null;\n-        } else {\n-            return iv.clone();\n-        }\n-    }\n-\n-    /**\n-     * Get additional data to authenticate when performing decryption with an authenticated algorithm.\n-     *\n-     * @return The additional authenticated data.\n-     */\n-    public byte[] getAdditionalAuthenticatedData() {\n-        if (additionalAuthenticatedData == null) {\n-            return null;\n-        } else {\n-            return additionalAuthenticatedData.clone();\n-        }\n-    }\n-\n-    /**\n-     * Get the tag to authenticate when performing decryption with an authenticated algorithm.\n-     *\n-     * @return The authentication tag.\n-     */\n-    public byte[] getAuthenticationTag() {\n-        if (authenticationTag == null) {\n-            return null;\n-        } else {\n-            return authenticationTag.clone();\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ5MjU4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522492581", "bodyText": "Clone again? Also, this needs to be generated at the proper size with a proper RNG if null.", "author": "heaths", "createdAt": "2020-11-12T23:08:18Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/EncryptOptions.java", "diffHunk": "@@ -0,0 +1,130 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography.options;\n+\n+import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A class containing various configuration parameters that can be applied when performing encryption operations.\n+ */\n+public class EncryptOptions {\n+    /**\n+     * The algorithm to be used for encryption.\n+     */\n+    final EncryptionAlgorithm algorithm;\n+\n+    /**\n+     * The content to be encrypted.\n+     */\n+    final byte[] plainText;\n+\n+    /**\n+     * Initialization vector to be used in the encryption operation using a symmetric algorithm.\n+     */\n+    byte[] iv;\n+\n+    /**\n+     * Get additional data to authenticate when performing encryption with an authenticated algorithm.\n+     */\n+    byte[] additionalAuthenticatedData;\n+\n+    /**\n+     * Factory method to create an instance of {@link EncryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for encryption.\n+     * @param plaintext The content to be encryption.\n+     * @return The {@link EncryptOptions}.\n+     */\n+    public static EncryptOptions createOptions(EncryptionAlgorithm algorithm, byte[] plaintext) {\n+        return new EncryptOptions(algorithm, plaintext);\n+    }\n+\n+    /**\n+     * Factory method to create an instance of {@link AesCbcEncryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for encryption.\n+     * @param plaintext The content to be encryption.\n+     * @return The {@link AesCbcEncryptOptions}.\n+     */\n+    public static AesCbcEncryptOptions createAesCbcOptions(EncryptionAlgorithm algorithm, byte[] plaintext) {\n+        return new AesCbcEncryptOptions(algorithm, plaintext);\n+    }\n+\n+    /**\n+     * Factory method to create an instance of {@link AesGcmEncryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for encryption.\n+     * @param plaintext The content to be encryption.\n+     * @param iv Initialization vector for the encryption operation.\n+     * @return The {@link AesGcmEncryptOptions}.\n+     */\n+    public static AesGcmEncryptOptions createAesGcmOptions(EncryptionAlgorithm algorithm, byte[] plaintext, byte[] iv) {\n+        return new AesGcmEncryptOptions(algorithm, plaintext, iv);\n+    }\n+\n+    /**\n+     * Creates an instance of {@link EncryptOptions} with the given parameters.\n+     *\n+     * @param algorithm The algorithm to be used for encryption.\n+     * @param plainText The content to be encrypted.\n+     */\n+    EncryptOptions(EncryptionAlgorithm algorithm, byte[] plainText) {\n+        Objects.requireNonNull(algorithm, \"'algorithm cannot be null'\");\n+        Objects.requireNonNull(plainText, \"'plaintext' cannot be null\");\n+\n+        this.algorithm = algorithm;\n+        this.plainText = new byte[plainText.length];\n+        System.arraycopy(plainText, 0, this.plainText, 0, plainText.length);\n+    }\n+\n+    /**\n+     * The algorithm to be used for encryption.\n+     *\n+     * @return The algorithm to be used for encryption.\n+     */\n+    public EncryptionAlgorithm getAlgorithm() {\n+        return algorithm;\n+    }\n+\n+    /**\n+     * Get the content to be encrypted.\n+     *\n+     * @return The content to be encrypted.\n+     */\n+    public byte[] getPlainText() {\n+        if (plainText == null) {\n+            return null;\n+        } else {\n+            return plainText.clone();\n+        }\n+    }\n+\n+    /**\n+     * Get the initialization vector to be used in the encryption operation using a symmetric algorithm.\n+     *\n+     * @return The initialization vector.\n+     */\n+    public byte[] getIv() {\n+        if (iv == null) {\n+            return null;\n+        } else {\n+            return iv.clone();", "originalCommit": "8b937512b6060605f73c8980c6bb7e227e786f2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUwNjM0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17209#discussion_r522506347", "bodyText": "If not provided, it gets generated here.", "author": "vcolin7", "createdAt": "2020-11-12T23:36:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ5MjU4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ff77ba13802b18d690436a3ec2534f732fb3bc47", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/EncryptOptions.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/EncryptOptions.java\ndeleted file mode 100644\nindex 64db353a689..00000000000\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/cryptography/options/EncryptOptions.java\n+++ /dev/null\n\n@@ -1,130 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.security.keyvault.keys.cryptography.options;\n-\n-import com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm;\n-\n-import java.util.Objects;\n-\n-/**\n- * A class containing various configuration parameters that can be applied when performing encryption operations.\n- */\n-public class EncryptOptions {\n-    /**\n-     * The algorithm to be used for encryption.\n-     */\n-    final EncryptionAlgorithm algorithm;\n-\n-    /**\n-     * The content to be encrypted.\n-     */\n-    final byte[] plainText;\n-\n-    /**\n-     * Initialization vector to be used in the encryption operation using a symmetric algorithm.\n-     */\n-    byte[] iv;\n-\n-    /**\n-     * Get additional data to authenticate when performing encryption with an authenticated algorithm.\n-     */\n-    byte[] additionalAuthenticatedData;\n-\n-    /**\n-     * Factory method to create an instance of {@link EncryptOptions} with the given parameters.\n-     *\n-     * @param algorithm The algorithm to be used for encryption.\n-     * @param plaintext The content to be encryption.\n-     * @return The {@link EncryptOptions}.\n-     */\n-    public static EncryptOptions createOptions(EncryptionAlgorithm algorithm, byte[] plaintext) {\n-        return new EncryptOptions(algorithm, plaintext);\n-    }\n-\n-    /**\n-     * Factory method to create an instance of {@link AesCbcEncryptOptions} with the given parameters.\n-     *\n-     * @param algorithm The algorithm to be used for encryption.\n-     * @param plaintext The content to be encryption.\n-     * @return The {@link AesCbcEncryptOptions}.\n-     */\n-    public static AesCbcEncryptOptions createAesCbcOptions(EncryptionAlgorithm algorithm, byte[] plaintext) {\n-        return new AesCbcEncryptOptions(algorithm, plaintext);\n-    }\n-\n-    /**\n-     * Factory method to create an instance of {@link AesGcmEncryptOptions} with the given parameters.\n-     *\n-     * @param algorithm The algorithm to be used for encryption.\n-     * @param plaintext The content to be encryption.\n-     * @param iv Initialization vector for the encryption operation.\n-     * @return The {@link AesGcmEncryptOptions}.\n-     */\n-    public static AesGcmEncryptOptions createAesGcmOptions(EncryptionAlgorithm algorithm, byte[] plaintext, byte[] iv) {\n-        return new AesGcmEncryptOptions(algorithm, plaintext, iv);\n-    }\n-\n-    /**\n-     * Creates an instance of {@link EncryptOptions} with the given parameters.\n-     *\n-     * @param algorithm The algorithm to be used for encryption.\n-     * @param plainText The content to be encrypted.\n-     */\n-    EncryptOptions(EncryptionAlgorithm algorithm, byte[] plainText) {\n-        Objects.requireNonNull(algorithm, \"'algorithm cannot be null'\");\n-        Objects.requireNonNull(plainText, \"'plaintext' cannot be null\");\n-\n-        this.algorithm = algorithm;\n-        this.plainText = new byte[plainText.length];\n-        System.arraycopy(plainText, 0, this.plainText, 0, plainText.length);\n-    }\n-\n-    /**\n-     * The algorithm to be used for encryption.\n-     *\n-     * @return The algorithm to be used for encryption.\n-     */\n-    public EncryptionAlgorithm getAlgorithm() {\n-        return algorithm;\n-    }\n-\n-    /**\n-     * Get the content to be encrypted.\n-     *\n-     * @return The content to be encrypted.\n-     */\n-    public byte[] getPlainText() {\n-        if (plainText == null) {\n-            return null;\n-        } else {\n-            return plainText.clone();\n-        }\n-    }\n-\n-    /**\n-     * Get the initialization vector to be used in the encryption operation using a symmetric algorithm.\n-     *\n-     * @return The initialization vector.\n-     */\n-    public byte[] getIv() {\n-        if (iv == null) {\n-            return null;\n-        } else {\n-            return iv.clone();\n-        }\n-    }\n-\n-    /**\n-     * Get additional data to authenticate when performing encryption with an authenticated algorithm.\n-     *\n-     * @return The additional authenticated data.\n-     */\n-    public byte[] getAdditionalAuthenticatedData() {\n-        if (additionalAuthenticatedData == null) {\n-            return null;\n-        } else {\n-            return additionalAuthenticatedData.clone();\n-        }\n-    }\n-}\n"}}, {"oid": "ff77ba13802b18d690436a3ec2534f732fb3bc47", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ff77ba13802b18d690436a3ec2534f732fb3bc47", "message": "Added iv, additionalAuthenticatedDate and authenticationTag to EncryptResult.", "committedDate": "2020-11-12T23:26:52Z", "type": "commit"}, {"oid": "53c8771dbbc4324372056fa9388c25329fc2408d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/53c8771dbbc4324372056fa9388c25329fc2408d", "message": "Made `plainText` and `cipherText` all lowercase.", "committedDate": "2020-11-13T00:15:31Z", "type": "commit"}]}