{"pr_number": 10027, "pr_title": "Update HttpResponse Default getBodyAsString Charset", "pr_createdAt": "2020-04-09T18:37:27Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/10027", "timeline": [{"oid": "98a3b8889a2b3c226555ff86987b368418606eb2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/98a3b8889a2b3c226555ff86987b368418606eb2", "message": "Updates the Netty and JDK client HttpResponses to respect response information when deciding the default String charset", "committedDate": "2020-04-09T18:32:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNjU5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10027#discussion_r406406597", "bodyText": "Do we need this BOM stripping on already stripped-and-decoded string anymore?", "author": "anuchandy", "createdAt": "2020-04-09T18:47:16Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JacksonAdapter.java", "diffHunk": "@@ -66,7 +65,7 @@\n      * BOM header from some response bodies. To be removed in deserialization.\n      */\n     private static final String BOM = \"\\uFEFF\";\n-    private static final String BOM_STRING = new String(BOM.getBytes(StandardCharsets.UTF_8), Charset.defaultCharset());\n+    private static final String BOM_STRING = new String(BOM.getBytes(StandardCharsets.UTF_8), StandardCharsets.UTF_8);", "originalCommit": "98a3b8889a2b3c226555ff86987b368418606eb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNzg0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10027#discussion_r406407843", "bodyText": "Shouldn't need it anymore, will add tests into the share RestProxyTests that will validate encoding handling for all clients.", "author": "alzimmermsft", "createdAt": "2020-04-09T18:49:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNjU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NDMwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10027#discussion_r406474307", "bodyText": "Do we need to apply a similar BOM lookup here as well?\n\n  \n    \n      azure-sdk-for-java/sdk/core/azure-core/src/main/java/com/azure/core/implementation/http/BufferedHttpResponse.java\n    \n    \n         Line 63\n      in\n      88adf36\n    \n    \n    \n    \n\n        \n          \n           public Mono<String> getBodyAsString() {", "author": "anuchandy", "createdAt": "2020-04-09T21:00:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNjU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3OTg1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10027#discussion_r406479859", "bodyText": "If so, wondering whether it makes sense to move this to FluxUtils?  something like:\nMono<String> FluxUtils.toBomAwarePublisher(\n    Flux<ByteBuffer> stream,  \n    String contentEncoding)\nwhere contentEncoding is the value of Content-Encoding header, if no BOM prefix in-stream and if contentEncoding is null then method uses utf8 as default.", "author": "anuchandy", "createdAt": "2020-04-09T21:11:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNjU5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1MjE1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10027#discussion_r406552153", "bodyText": "Added helper into CoreUtils", "author": "alzimmermsft", "createdAt": "2020-04-10T00:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNjU5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "52d843cd6e623d0142f75898e38ca8667b08e637", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JacksonAdapter.java b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JacksonAdapter.java\nindex cd6cc55d7d8..63e0ea19851 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JacksonAdapter.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JacksonAdapter.java\n\n@@ -61,12 +60,6 @@ public class JacksonAdapter implements SerializerAdapter {\n      */\n     private static SerializerAdapter serializerAdapter;\n \n-    /*\n-     * BOM header from some response bodies. To be removed in deserialization.\n-     */\n-    private static final String BOM = \"\\uFEFF\";\n-    private static final String BOM_STRING = new String(BOM.getBytes(StandardCharsets.UTF_8), StandardCharsets.UTF_8);\n-\n     /**\n      * Creates a new JacksonAdapter instance with default mapper settings.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwOTk1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10027#discussion_r406409951", "bodyText": "Any reason why we look for only these 3 charsets and not others? Adding a comment here to explain that would be good.", "author": "srnagar", "createdAt": "2020-04-09T18:53:25Z", "path": "sdk/core/azure-core-http-jdk-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java", "diffHunk": "@@ -216,14 +216,36 @@ public HttpHeaders getHeaders() {\n \n         @Override\n         public Mono<String> getBodyAsString() {\n-            return getBodyAsByteArray()\n-                .map(bytes -> new String(bytes, StandardCharsets.UTF_8));\n+            return getBodyAsByteArray().map(bytes -> {\n+                if (bytes.length >= 3 && bytes[0] == (byte) 239 && bytes[1] == (byte) 187 && bytes[2] == (byte) 191) {\n+                    return new String(bytes, 3, bytes.length - 3, StandardCharsets.UTF_8);\n+                } else if (bytes.length >= 2 && bytes[0] == (byte) 254 && bytes[1] == (byte) 255) {\n+                    return new String(bytes, 2, bytes.length - 2, StandardCharsets.UTF_16BE);\n+                } else if (bytes.length >= 2 && bytes[0] == (byte) 255 && bytes[1] == (byte) 254) {\n+                    return new String(bytes, 2, bytes.length - 2, StandardCharsets.UTF_16LE);", "originalCommit": "98a3b8889a2b3c226555ff86987b368418606eb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1MjAwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10027#discussion_r406552006", "bodyText": "Added support for UTF-32BE and UTF-32LE", "author": "alzimmermsft", "createdAt": "2020-04-10T00:52:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwOTk1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "52d843cd6e623d0142f75898e38ca8667b08e637", "chunk": "diff --git a/sdk/core/azure-core-http-jdk-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java b/sdk/core/azure-core-http-jdk-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\nindex 95bb0f3bd3e..42faf24094d 100644\n--- a/sdk/core/azure-core-http-jdk-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\n+++ b/sdk/core/azure-core-http-jdk-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\n\n@@ -228,17 +229,21 @@ class JdkAsyncHttpClient implements HttpClient {\n                      * Attempt to retrieve the default charset from the 'Content-Encoding' header, if the value isn't\n                      * present or invalid fallback to 'UTF-8' for the default charset.\n                      */\n-                    Charset charset;\n-                    try {\n-                        String contentEncoding = headers.getValue(\"Content-Encoding\");\n-                        charset = (contentEncoding != null)\n-                            ? Charset.forName(contentEncoding)\n-                            : StandardCharsets.UTF_8;\n-                    } catch (RuntimeException ex) {\n-                        charset = StandardCharsets.UTF_8;\n+                    String contentType = headers.getValue(\"Content-Type\");\n+                    if (!CoreUtils.isNullOrEmpty(contentType)) {\n+                        try {\n+                            Matcher charsetMatcher = CHARSET_PATTERN.matcher(contentType);\n+                            if (charsetMatcher.find()) {\n+                                return new String(bytes, Charset.forName(charsetMatcher.group(1)));\n+                            } else {\n+                                return new String(bytes, StandardCharsets.UTF_8);\n+                            }\n+                        } catch (IllegalCharsetNameException | UnsupportedCharsetException ex) {\n+                            return new String(bytes, StandardCharsets.UTF_8);\n+                        }\n+                    } else {\n+                        return new String(bytes, StandardCharsets.UTF_8);\n                     }\n-\n-                    return new String(bytes, charset);\n                 }\n             });\n         }\n"}}, {"oid": "52d843cd6e623d0142f75898e38ca8667b08e637", "url": "https://github.com/Azure/azure-sdk-for-java/commit/52d843cd6e623d0142f75898e38ca8667b08e637", "message": "Updated to using Content-Type instead of the incorrect Content-Encoding, added tests", "committedDate": "2020-04-10T00:00:07Z", "type": "commit"}, {"oid": "6cbcaaf1e6f91939c5286b784c91bd3d365705b8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6cbcaaf1e6f91939c5286b784c91bd3d365705b8", "message": "Merge branch 'master' into AzResponse_UpdateBodyAsStringHandling", "committedDate": "2020-04-10T00:00:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0MDE5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10027#discussion_r406540193", "bodyText": "Both JDK client and Netty client have to do the same logic for converting response byte array to string. It would be better to put this in Core utils somewhere to reduce duplication and if there are any fixes or updates to this logic, we don't need to update in two places.", "author": "srnagar", "createdAt": "2020-04-10T00:05:33Z", "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClient.java", "diffHunk": "@@ -211,9 +214,31 @@ public HttpHeaders getHeaders() {\n \n         @Override\n         public Mono<String> getBodyAsString() {\n-            return bodyIntern().aggregate().asString().doFinally(s -> {\n-                if (!reactorNettyConnection.isDisposed()) {\n-                    reactorNettyConnection.channel().eventLoop().execute(reactorNettyConnection::dispose);\n+            return getBodyAsByteArray().map(bytes -> {", "originalCommit": "6cbcaaf1e6f91939c5286b784c91bd3d365705b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0MDc1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10027#discussion_r406540757", "bodyText": "Yeah I was thinking about that, also would give the opportunity to test is more directly and thoroughly.", "author": "alzimmermsft", "createdAt": "2020-04-10T00:07:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0MDE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "23459946ed5e4f5114e2d3e69bc6b94322dcb266", "chunk": "diff --git a/sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClient.java b/sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClient.java\nindex 7cbbc3f2160..ea761ac2865 100644\n--- a/sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClient.java\n+++ b/sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClient.java\n\n@@ -214,33 +211,8 @@ class NettyAsyncHttpClient implements HttpClient {\n \n         @Override\n         public Mono<String> getBodyAsString() {\n-            return getBodyAsByteArray().map(bytes -> {\n-                if (bytes.length >= 3 && bytes[0] == (byte) 239 && bytes[1] == (byte) 187 && bytes[2] == (byte) 191) {\n-                    return new String(bytes, 3, bytes.length - 3, StandardCharsets.UTF_8);\n-                } else if (bytes.length >= 2 && bytes[0] == (byte) 254 && bytes[1] == (byte) 255) {\n-                    return new String(bytes, 2, bytes.length - 2, StandardCharsets.UTF_16BE);\n-                } else if (bytes.length >= 2 && bytes[0] == (byte) 255 && bytes[1] == (byte) 254) {\n-                    return new String(bytes, 2, bytes.length - 2, StandardCharsets.UTF_16LE);\n-                } else {\n-                    /*\n-                     * Attempt to retrieve the default charset from the 'Content-Encoding' header, if the value isn't\n-                     * present or invalid fallback to 'UTF-8' for the default charset.\n-                     */\n-                    try {\n-                        String contentType = reactorNettyResponse.responseHeaders()\n-                            .get(\"Content-Type\", \"charset=UTF-8\");\n-\n-                        Matcher charsetMatcher = CHARSET_PATTERN.matcher(contentType);\n-                        if (charsetMatcher.find()) {\n-                            return new String(bytes, Charset.forName(charsetMatcher.group(1)));\n-                        } else {\n-                            return new String(bytes, StandardCharsets.UTF_8);\n-                        }\n-                    } catch (IllegalCharsetNameException | UnsupportedCharsetException ex) {\n-                        return new String(bytes, StandardCharsets.UTF_8);\n-                    }\n-                }\n-            });\n+            return getBodyAsByteArray().map(bytes ->\n+                CoreUtils.bomAwareToString(bytes, reactorNettyResponse.responseHeaders().get(\"Content-Type\")));\n         }\n \n         @Override\n"}}, {"oid": "23459946ed5e4f5114e2d3e69bc6b94322dcb266", "url": "https://github.com/Azure/azure-sdk-for-java/commit/23459946ed5e4f5114e2d3e69bc6b94322dcb266", "message": "Moved logic into Azure Core", "committedDate": "2020-04-10T00:51:09Z", "type": "commit"}, {"oid": "5a5f01bd2176d47f0d35bfbad988337a723fa654", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5a5f01bd2176d47f0d35bfbad988337a723fa654", "message": "Update HttpClientTests and BufferedHttpResponse", "committedDate": "2020-04-10T01:00:49Z", "type": "commit"}, {"oid": "4728dd24e63d48112c878df0f622ea30431f7a3d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4728dd24e63d48112c878df0f622ea30431f7a3d", "message": "Clean linting issue, transition OkHttp to using bomAwareToString", "committedDate": "2020-04-10T17:01:25Z", "type": "commit"}]}