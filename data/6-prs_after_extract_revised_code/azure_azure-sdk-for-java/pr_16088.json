{"pr_number": 16088, "pr_title": "Add LogLevel Hooks to HttpLogOptions and HttpLoggingPolicy", "pr_createdAt": "2020-10-08T22:41:41Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/16088", "timeline": [{"oid": "588ca4afe84992433616841bea3cb67e20089811", "url": "https://github.com/Azure/azure-sdk-for-java/commit/588ca4afe84992433616841bea3cb67e20089811", "message": "Add functions to HttpLogOptions to determine the log level for request and response logging", "committedDate": "2020-10-08T22:38:50Z", "type": "commit"}, {"oid": "0b407864619eeefd82dc6523b5e14ad2db7cfdbc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0b407864619eeefd82dc6523b5e14ad2db7cfdbc", "message": "Merge branch 'master' into AzCore_AddHttpLoggingHooks", "committedDate": "2020-10-12T22:20:13Z", "type": "commit"}, {"oid": "b51dad20d578b5a81e1cfe5f8334683acaa31595", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b51dad20d578b5a81e1cfe5f8334683acaa31595", "message": "Merge branch 'master' into AzCore_AddHttpLoggingHooks", "committedDate": "2020-10-14T23:11:45Z", "type": "commit"}, {"oid": "9e78ca71c650c908cc91bece4db7f508ae601462", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9e78ca71c650c908cc91bece4db7f508ae601462", "message": "Added configuration for custom HTTP request and HTTP response logging", "committedDate": "2020-10-15T20:36:34Z", "type": "commit"}, {"oid": "e3b6b3fec9591d310f103295a3d3eb1069f1cc5a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e3b6b3fec9591d310f103295a3d3eb1069f1cc5a", "message": "Add HttpRequestLogger and HttpResponseLogger interfaces which allows for custom logging strategies to be passed into HttpLoggingPolicy", "committedDate": "2020-10-19T21:34:31Z", "type": "commit"}, {"oid": "0633212d2ef3181abbe497f2ac7822688908b91d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0633212d2ef3181abbe497f2ac7822688908b91d", "message": "Removed options bags classes that were unused prototypes", "committedDate": "2020-10-19T21:40:27Z", "type": "commit"}, {"oid": "7c21b47068b39adb35cb29884546e7ebf04d2f06", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7c21b47068b39adb35cb29884546e7ebf04d2f06", "message": "Merge branch 'master' into AzCore_AddHttpLoggingHooks", "committedDate": "2020-10-21T17:20:31Z", "type": "commit"}, {"oid": "53882456d596dc733945d804fa96a43d3feafba2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/53882456d596dc733945d804fa96a43d3feafba2", "message": "Return HttpResponse when not logging it", "committedDate": "2020-10-21T17:49:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4ODY2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r508088665", "bodyText": "Do we need this default log level here for Http logging? I think it's okay to make all HTTP request/response logging informational by default. This will minimize the number of places where log levels are configured.\nIf there's a need to change teh default, then customers have the options of providing customer request/response logger using setRequestLogger() and setResponseLogger().", "author": "srnagar", "createdAt": "2020-10-19T22:02:24Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java", "diffHunk": "@@ -202,12 +210,92 @@ public boolean isPrettyPrintBody() {\n     /**\n      * Sets flag to allow pretty printing of message bodies.\n      *\n-     * @param prettyPrintBody If true, pretty prints message bodies when logging. If the detailLevel does not\n-     *                        include body logging, this flag does nothing.\n+     * @param prettyPrintBody If true, pretty prints message bodies when logging. If the detailLevel does not include\n+     * body logging, this flag does nothing.\n      * @return The updated HttpLogOptions object.\n      */\n     public HttpLogOptions setPrettyPrintBody(boolean prettyPrintBody) {\n         this.prettyPrintBody = prettyPrintBody;\n         return this;\n     }\n+\n+    /**\n+     * Gets the {@link LogLevel} used by default when logging requests and responses.\n+     * <p>\n+     * {@link HttpRequestLogger#getLogLevel(LogLevel, HttpPipelineCallContext)} and {@link\n+     * HttpResponseLogger#getLogLevel(LogLevel, HttpResponse, Duration)} can be used to set the {@link LogLevel} for\n+     * each request and response being logged.\n+     * <p>\n+     * By default {@link LogLevel#INFORMATIONAL} is used.\n+     *\n+     * @return The {@link LogLevel} used by default when logging requests and responses.\n+     */\n+    public LogLevel getDefaultLogLevel() {\n+        return defaultLogLevel;\n+    }\n+\n+    /**\n+     * Sets the {@link LogLevel} used by default when logging requests and responses.\n+     * <p>\n+     * {@link HttpRequestLogger#getLogLevel(LogLevel, HttpPipelineCallContext)} and {@link\n+     * HttpResponseLogger#getLogLevel(LogLevel, HttpResponse, Duration)} can be used to set the {@link LogLevel} for\n+     * each request and response being logged.\n+     * <p>\n+     * By default {@link LogLevel#INFORMATIONAL} is used.\n+     *\n+     * @param defaultLogLevel The default log level.\n+     * @return The updated HttpLogOptions object.\n+     */\n+    public HttpLogOptions setDefaultLogLevel(LogLevel defaultLogLevel) {\n+        this.defaultLogLevel = defaultLogLevel;\n+        return this;\n+    }", "originalCommit": "0633212d2ef3181abbe497f2ac7822688908b91d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU2MjkzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509562932", "bodyText": "This could be added in a non-breaking way in the future. Main purpose was convenience if someone wanted to have all logging done at the VERBOSE level so their log4j, etc, configurations included INFO and request/response logging was too verbose.", "author": "alzimmermsft", "createdAt": "2020-10-21T18:36:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4ODY2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ec0060c150749bc46dd62311c00aea02bb4bd28a", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java\nindex 7fa40e9d5f9..103373f18db 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java\n\n@@ -219,38 +216,6 @@ public class HttpLogOptions {\n         return this;\n     }\n \n-    /**\n-     * Gets the {@link LogLevel} used by default when logging requests and responses.\n-     * <p>\n-     * {@link HttpRequestLogger#getLogLevel(LogLevel, HttpPipelineCallContext)} and {@link\n-     * HttpResponseLogger#getLogLevel(LogLevel, HttpResponse, Duration)} can be used to set the {@link LogLevel} for\n-     * each request and response being logged.\n-     * <p>\n-     * By default {@link LogLevel#INFORMATIONAL} is used.\n-     *\n-     * @return The {@link LogLevel} used by default when logging requests and responses.\n-     */\n-    public LogLevel getDefaultLogLevel() {\n-        return defaultLogLevel;\n-    }\n-\n-    /**\n-     * Sets the {@link LogLevel} used by default when logging requests and responses.\n-     * <p>\n-     * {@link HttpRequestLogger#getLogLevel(LogLevel, HttpPipelineCallContext)} and {@link\n-     * HttpResponseLogger#getLogLevel(LogLevel, HttpResponse, Duration)} can be used to set the {@link LogLevel} for\n-     * each request and response being logged.\n-     * <p>\n-     * By default {@link LogLevel#INFORMATIONAL} is used.\n-     *\n-     * @param defaultLogLevel The default log level.\n-     * @return The updated HttpLogOptions object.\n-     */\n-    public HttpLogOptions setDefaultLogLevel(LogLevel defaultLogLevel) {\n-        this.defaultLogLevel = defaultLogLevel;\n-        return this;\n-    }\n-\n     /**\n      * Gets the {@link HttpRequestLogger} that will be used to log requests.\n      * <p>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTUzOTcyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509539726", "bodyText": "Do we need this method? For anyone implementing this interface, they can simply use the logRequest method to log at whatever level they want. We can then make this a functional interface.", "author": "srnagar", "createdAt": "2020-10-21T18:11:59Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Manages logging HTTP requests in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpRequestLogger {\n+    /**\n+     * Retrieves the {@link LogLevel} used to log the current request.\n+     *\n+     * @param defaultLogLevel The default log level to use.\n+     * @param callContext The contextual information about the request, including headers, body, and metadata.\n+     * @return The {@link LogLevel} used to log the current request.\n+     */\n+    LogLevel getLogLevel(LogLevel defaultLogLevel, HttpPipelineCallContext callContext);", "originalCommit": "53882456d596dc733945d804fa96a43d3feafba2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU2NDEyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509564129", "bodyText": "It is meant to cover scenarios where each request could have a different log level. This could be a default interface method that just returns LogLevel.INFORMATIONAL, allowing for it to effectively be a functional interface.", "author": "alzimmermsft", "createdAt": "2020-10-21T18:38:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTUzOTcyNg=="}], "type": "inlineReview", "revised_code": {"commit": "ec0060c150749bc46dd62311c00aea02bb4bd28a", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java\nindex b2233d95ec9..60b7f517afb 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java\n\n@@ -14,20 +14,22 @@ import reactor.core.publisher.Mono;\n public interface HttpRequestLogger {\n     /**\n      * Retrieves the {@link LogLevel} used to log the current request.\n+     * <p>\n+     * By default this will return {@link LogLevel#INFORMATIONAL}.\n      *\n-     * @param defaultLogLevel The default log level to use.\n      * @param callContext The contextual information about the request, including headers, body, and metadata.\n      * @return The {@link LogLevel} used to log the current request.\n      */\n-    LogLevel getLogLevel(LogLevel defaultLogLevel, HttpPipelineCallContext callContext);\n+    default LogLevel getLogLevel(HttpPipelineCallContext callContext) {\n+        return LogLevel.INFORMATIONAL;\n+    }\n \n     /**\n      * Logs the request.\n      *\n      * @param logger The {@link ClientLogger} used to log the request.\n-     * @param logLevel The {@link LogLevel} used to loge the request.\n      * @param callContext The contextual information about the request, including headers, body, and metadata.\n-     * @return A reactive response that will indicate that the response has been logged.\n+     * @return A reactive response that will indicate that the request has been logged.\n      */\n-    Mono<Void> logRequest(ClientLogger logger, LogLevel logLevel, HttpPipelineCallContext callContext);\n+    Mono<Void> logRequest(ClientLogger logger, HttpPipelineCallContext callContext);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU0MDIxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509540218", "bodyText": "Same as above. Can we just have the logResponse() method in this interface?", "author": "srnagar", "createdAt": "2020-10-21T18:12:33Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Manages logging HTTP responses in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpResponseLogger {\n+    /**\n+     * Retrieves the {@link LogLevel} used to log the current response.\n+     *\n+     * @param defaultLogLevel The default log level to use.\n+     * @param response The HTTP response.\n+     * @param responseDuration The duration between sending the request and receiving the response.\n+     * @return The {@link LogLevel} used to log the current request.\n+     */\n+    LogLevel getLogLevel(LogLevel defaultLogLevel, HttpResponse response, Duration responseDuration);", "originalCommit": "53882456d596dc733945d804fa96a43d3feafba2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU2NDI1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509564257", "bodyText": "Same answer as above", "author": "alzimmermsft", "createdAt": "2020-10-21T18:38:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU0MDIxOA=="}], "type": "inlineReview", "revised_code": {"commit": "ec0060c150749bc46dd62311c00aea02bb4bd28a", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java\nindex e99f06fdd25..2ccf02b9149 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java\n\n@@ -16,23 +16,24 @@ import java.time.Duration;\n public interface HttpResponseLogger {\n     /**\n      * Retrieves the {@link LogLevel} used to log the current response.\n+     * <p>\n+     * By default this will return {@link LogLevel#INFORMATIONAL}.\n      *\n-     * @param defaultLogLevel The default log level to use.\n      * @param response The HTTP response.\n      * @param responseDuration The duration between sending the request and receiving the response.\n-     * @return The {@link LogLevel} used to log the current request.\n+     * @return The {@link LogLevel} used to log the current response.\n      */\n-    LogLevel getLogLevel(LogLevel defaultLogLevel, HttpResponse response, Duration responseDuration);\n+    default LogLevel getLogLevel(HttpResponse response, Duration responseDuration) {\n+        return LogLevel.INFORMATIONAL;\n+    }\n \n     /**\n-     * Logs the request.\n+     * Logs the response.\n      *\n-     * @param logger The {@link ClientLogger} used to log the request.\n-     * @param logLevel The {@link LogLevel} used to loge the request.\n+     * @param logger The {@link ClientLogger} used to log the response.\n      * @param response The HTTP response.\n      * @param responseDuration The duration between sending the request and receiving the response.\n-     * @return A reactive response that will indicate that the response has been logged.\n+     * @return A reactive response that returns the response that was logged.\n      */\n-    Mono<HttpResponse> logResponse(ClientLogger logger, LogLevel logLevel, HttpResponse response,\n-        Duration responseDuration);\n+    Mono<HttpResponse> logResponse(ClientLogger logger, HttpResponse response, Duration responseDuration);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU0MzQwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509543404", "bodyText": "Why do we need to pass the logLevel here? The HttpRequestLogger implementation should be able to determine what log level to use (from the callContext) instead of the caller passing in the level.", "author": "srnagar", "createdAt": "2020-10-21T18:16:23Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Manages logging HTTP requests in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpRequestLogger {\n+    /**\n+     * Retrieves the {@link LogLevel} used to log the current request.\n+     *\n+     * @param defaultLogLevel The default log level to use.\n+     * @param callContext The contextual information about the request, including headers, body, and metadata.\n+     * @return The {@link LogLevel} used to log the current request.\n+     */\n+    LogLevel getLogLevel(LogLevel defaultLogLevel, HttpPipelineCallContext callContext);\n+\n+    /**\n+     * Logs the request.\n+     *\n+     * @param logger The {@link ClientLogger} used to log the request.\n+     * @param logLevel The {@link LogLevel} used to loge the request.\n+     * @param callContext The contextual information about the request, including headers, body, and metadata.\n+     * @return A reactive response that will indicate that the response has been logged.\n+     */\n+    Mono<Void> logRequest(ClientLogger logger, LogLevel logLevel, HttpPipelineCallContext callContext);", "originalCommit": "53882456d596dc733945d804fa96a43d3feafba2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU2NDk5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509564994", "bodyText": "Good catch, will remove LogLevel as a required parameter.", "author": "alzimmermsft", "createdAt": "2020-10-21T18:38:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU0MzQwNA=="}], "type": "inlineReview", "revised_code": {"commit": "ec0060c150749bc46dd62311c00aea02bb4bd28a", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java\nindex b2233d95ec9..60b7f517afb 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java\n\n@@ -14,20 +14,22 @@ import reactor.core.publisher.Mono;\n public interface HttpRequestLogger {\n     /**\n      * Retrieves the {@link LogLevel} used to log the current request.\n+     * <p>\n+     * By default this will return {@link LogLevel#INFORMATIONAL}.\n      *\n-     * @param defaultLogLevel The default log level to use.\n      * @param callContext The contextual information about the request, including headers, body, and metadata.\n      * @return The {@link LogLevel} used to log the current request.\n      */\n-    LogLevel getLogLevel(LogLevel defaultLogLevel, HttpPipelineCallContext callContext);\n+    default LogLevel getLogLevel(HttpPipelineCallContext callContext) {\n+        return LogLevel.INFORMATIONAL;\n+    }\n \n     /**\n      * Logs the request.\n      *\n      * @param logger The {@link ClientLogger} used to log the request.\n-     * @param logLevel The {@link LogLevel} used to loge the request.\n      * @param callContext The contextual information about the request, including headers, body, and metadata.\n-     * @return A reactive response that will indicate that the response has been logged.\n+     * @return A reactive response that will indicate that the request has been logged.\n      */\n-    Mono<Void> logRequest(ClientLogger logger, LogLevel logLevel, HttpPipelineCallContext callContext);\n+    Mono<Void> logRequest(ClientLogger logger, HttpPipelineCallContext callContext);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1MzcwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509553704", "bodyText": "The HttpPipelineCallContext doesn't include the HTTP response. If it did, which seems to have been the intention going by the javadoc on this class, we could have used the HttpPipelineCallContext for passing in the response duration as well.", "author": "srnagar", "createdAt": "2020-10-21T18:28:28Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Manages logging HTTP responses in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpResponseLogger {\n+    /**\n+     * Retrieves the {@link LogLevel} used to log the current response.\n+     *\n+     * @param defaultLogLevel The default log level to use.\n+     * @param response The HTTP response.\n+     * @param responseDuration The duration between sending the request and receiving the response.\n+     * @return The {@link LogLevel} used to log the current request.\n+     */\n+    LogLevel getLogLevel(LogLevel defaultLogLevel, HttpResponse response, Duration responseDuration);\n+\n+    /**\n+     * Logs the request.\n+     *\n+     * @param logger The {@link ClientLogger} used to log the request.\n+     * @param logLevel The {@link LogLevel} used to loge the request.\n+     * @param response The HTTP response.\n+     * @param responseDuration The duration between sending the request and receiving the response.\n+     * @return A reactive response that will indicate that the response has been logged.\n+     */\n+    Mono<HttpResponse> logResponse(ClientLogger logger, LogLevel logLevel, HttpResponse response,\n+        Duration responseDuration);", "originalCommit": "53882456d596dc733945d804fa96a43d3feafba2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU4Njk5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509586998", "bodyText": "Will fix the Javadocs for HttpPipelineCallContext as they are misleading.", "author": "alzimmermsft", "createdAt": "2020-10-21T18:58:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1MzcwNA=="}], "type": "inlineReview", "revised_code": {"commit": "ec0060c150749bc46dd62311c00aea02bb4bd28a", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java\nindex e99f06fdd25..2ccf02b9149 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java\n\n@@ -16,23 +16,24 @@ import java.time.Duration;\n public interface HttpResponseLogger {\n     /**\n      * Retrieves the {@link LogLevel} used to log the current response.\n+     * <p>\n+     * By default this will return {@link LogLevel#INFORMATIONAL}.\n      *\n-     * @param defaultLogLevel The default log level to use.\n      * @param response The HTTP response.\n      * @param responseDuration The duration between sending the request and receiving the response.\n-     * @return The {@link LogLevel} used to log the current request.\n+     * @return The {@link LogLevel} used to log the current response.\n      */\n-    LogLevel getLogLevel(LogLevel defaultLogLevel, HttpResponse response, Duration responseDuration);\n+    default LogLevel getLogLevel(HttpResponse response, Duration responseDuration) {\n+        return LogLevel.INFORMATIONAL;\n+    }\n \n     /**\n-     * Logs the request.\n+     * Logs the response.\n      *\n-     * @param logger The {@link ClientLogger} used to log the request.\n-     * @param logLevel The {@link LogLevel} used to loge the request.\n+     * @param logger The {@link ClientLogger} used to log the response.\n      * @param response The HTTP response.\n      * @param responseDuration The duration between sending the request and receiving the response.\n-     * @return A reactive response that will indicate that the response has been logged.\n+     * @return A reactive response that returns the response that was logged.\n      */\n-    Mono<HttpResponse> logResponse(ClientLogger logger, LogLevel logLevel, HttpResponse response,\n-        Duration responseDuration);\n+    Mono<HttpResponse> logResponse(ClientLogger logger, HttpResponse response, Duration responseDuration);\n }\n"}}, {"oid": "ec0060c150749bc46dd62311c00aea02bb4bd28a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ec0060c150749bc46dd62311c00aea02bb4bd28a", "message": "Remove LogLevel parameter from interface APIs, changed getLogLevel to a default interface method, removed defaultLogLevel from HttpLogOptions", "committedDate": "2020-10-21T20:09:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY2NDI5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509664293", "bodyText": "nit; sued -> used", "author": "anuchandy", "createdAt": "2020-10-21T20:23:49Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java", "diffHunk": "@@ -202,12 +207,60 @@ public boolean isPrettyPrintBody() {\n     /**\n      * Sets flag to allow pretty printing of message bodies.\n      *\n-     * @param prettyPrintBody If true, pretty prints message bodies when logging. If the detailLevel does not\n-     *                        include body logging, this flag does nothing.\n+     * @param prettyPrintBody If true, pretty prints message bodies when logging. If the detailLevel does not include\n+     * body logging, this flag does nothing.\n      * @return The updated HttpLogOptions object.\n      */\n     public HttpLogOptions setPrettyPrintBody(boolean prettyPrintBody) {\n         this.prettyPrintBody = prettyPrintBody;\n         return this;\n     }\n+\n+    /**\n+     * Gets the {@link HttpRequestLogger} that will be used to log requests.\n+     * <p>\n+     * A default logger will be used if one isn't supplied.\n+     *\n+     * @return The {@link HttpRequestLogger} that will be used to log requests.\n+     */\n+    public HttpRequestLogger getRequestLogger() {\n+        return requestLogger;\n+    }\n+\n+    /**\n+     * Sets the {@link HttpRequestLogger} that will be used to log requests.\n+     * <p>\n+     * A default logger will be used if one isn't supplied.\n+     *\n+     * @param requestLogger The {@link HttpRequestLogger} that will be used to log requests.\n+     * @return The updated HttpLogOptions object.\n+     */\n+    public HttpLogOptions setRequestLogger(HttpRequestLogger requestLogger) {\n+        this.requestLogger = requestLogger;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the {@link HttpResponseLogger} that will be used to log responses.\n+     * <p>\n+     * A default logger will be used if one isn't supplied.\n+     *\n+     * @return The {@link HttpResponseLogger} that will be used to log responses.\n+     */\n+    public HttpResponseLogger getResponseLogger() {\n+        return responseLogger;\n+    }\n+\n+    /**\n+     * Sets the {@link HttpResponseLogger} that will be used to log responses.\n+     * <p>\n+     * A default logger will be sued if one isn't supplied.", "originalCommit": "ec0060c150749bc46dd62311c00aea02bb4bd28a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY3MDI3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r509670274", "bodyText": "Good catch, I'll take a good look through the new Javadocs.", "author": "alzimmermsft", "createdAt": "2020-10-21T20:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY2NDI5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a241bba9bb42efcbd31e84621af8c3e5397ee561", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java\nindex 103373f18db..a4369469ea9 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java\n\n@@ -217,22 +217,22 @@ public class HttpLogOptions {\n     }\n \n     /**\n-     * Gets the {@link HttpRequestLogger} that will be used to log requests.\n+     * Gets the {@link HttpRequestLogger} that will be used to log HTTP requests.\n      * <p>\n-     * A default logger will be used if one isn't supplied.\n+     * A default {@link HttpRequestLogger} will be used if one isn't supplied.\n      *\n-     * @return The {@link HttpRequestLogger} that will be used to log requests.\n+     * @return The {@link HttpRequestLogger} that will be used to log HTTP requests.\n      */\n     public HttpRequestLogger getRequestLogger() {\n         return requestLogger;\n     }\n \n     /**\n-     * Sets the {@link HttpRequestLogger} that will be used to log requests.\n+     * Sets the {@link HttpRequestLogger} that will be used to log HTTP requests.\n      * <p>\n-     * A default logger will be used if one isn't supplied.\n+     * A default {@link HttpRequestLogger} will be used if one isn't supplied.\n      *\n-     * @param requestLogger The {@link HttpRequestLogger} that will be used to log requests.\n+     * @param requestLogger The {@link HttpRequestLogger} that will be used to log HTTP requests.\n      * @return The updated HttpLogOptions object.\n      */\n     public HttpLogOptions setRequestLogger(HttpRequestLogger requestLogger) {\n"}}, {"oid": "a241bba9bb42efcbd31e84621af8c3e5397ee561", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a241bba9bb42efcbd31e84621af8c3e5397ee561", "message": "Javadoc updates", "committedDate": "2020-10-21T20:40:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0MDMxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r510340315", "bodyText": "Looks like this is unused and can be removed.", "author": "srnagar", "createdAt": "2020-10-22T17:35:34Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java", "diffHunk": "@@ -22,6 +23,11 @@\n     private Set<String> allowedHeaderNames;\n     private Set<String> allowedQueryParamNames;\n     private boolean prettyPrintBody;\n+\n+    private LogLevel defaultLogLevel;", "originalCommit": "a241bba9bb42efcbd31e84621af8c3e5397ee561", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8cfbc39734d0e8107eb95e5caffea83580a9e74", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java\nindex a4369469ea9..ac35be06f92 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpLogOptions.java\n\n@@ -24,7 +23,6 @@ public class HttpLogOptions {\n     private Set<String> allowedQueryParamNames;\n     private boolean prettyPrintBody;\n \n-    private LogLevel defaultLogLevel;\n     private HttpRequestLogger requestLogger;\n     private HttpResponseLogger responseLogger;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0MTM1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r510341359", "bodyText": "Add @FunctionalInterface annotation.", "author": "srnagar", "createdAt": "2020-10-22T17:37:11Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Manages logging HTTP requests in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpRequestLogger {", "originalCommit": "a241bba9bb42efcbd31e84621af8c3e5397ee561", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8cfbc39734d0e8107eb95e5caffea83580a9e74", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java\nindex fcc66fa83a8..dfbfefdb04b 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java\n\n@@ -3,7 +3,6 @@\n \n package com.azure.core.http.policy;\n \n-import com.azure.core.http.HttpPipelineCallContext;\n import com.azure.core.util.logging.ClientLogger;\n import com.azure.core.util.logging.LogLevel;\n import reactor.core.publisher.Mono;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0MTk0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r510341941", "bodyText": "Add @FunctionalInterface annotation.", "author": "srnagar", "createdAt": "2020-10-22T17:38:12Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Manages logging HTTP responses in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpResponseLogger {", "originalCommit": "a241bba9bb42efcbd31e84621af8c3e5397ee561", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8cfbc39734d0e8107eb95e5caffea83580a9e74", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java\nindex 1e0c3a39fb7..60fd327bea2 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java\n\n@@ -8,34 +8,31 @@ import com.azure.core.util.logging.ClientLogger;\n import com.azure.core.util.logging.LogLevel;\n import reactor.core.publisher.Mono;\n \n-import java.time.Duration;\n-\n /**\n  * Manages logging HTTP responses in {@link HttpLoggingPolicy}.\n  */\n+@FunctionalInterface\n public interface HttpResponseLogger {\n     /**\n      * Gets the {@link LogLevel} used to log the HTTP response.\n      * <p>\n      * By default this will return {@link LogLevel#INFORMATIONAL}.\n      *\n-     * @param response The HTTP response.\n-     * @param responseDuration The duration between sending the request and receiving the response.\n+     * @param loggingOptions The information available during response logging.\n      * @return The {@link LogLevel} used to log the HTTP response.\n      */\n-    default LogLevel getLogLevel(HttpResponse response, Duration responseDuration) {\n+    default LogLevel getLogLevel(HttpResponseLoggingOptions loggingOptions) {\n         return LogLevel.INFORMATIONAL;\n     }\n \n     /**\n      * Logs the HTTP response.\n      * <p>\n-     * To get the {@link LogLevel} used to log the HTTP response use {@link #getLogLevel(HttpResponse, Duration)}.\n+     * To get the {@link LogLevel} used to log the HTTP response use {@link #getLogLevel(HttpResponseLoggingOptions)}.\n      *\n      * @param logger The {@link ClientLogger} used to log the response.\n-     * @param response The HTTP response.\n-     * @param responseDuration The duration between sending the request and receiving the response.\n+     * @param loggingOptions The information available during response logging.\n      * @return A reactive response that returns the HTTP response that was logged.\n      */\n-    Mono<HttpResponse> logResponse(ClientLogger logger, HttpResponse response, Duration responseDuration);\n+    Mono<HttpResponse> logResponse(ClientLogger logger, HttpResponseLoggingOptions loggingOptions);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0MjU3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r510342576", "bodyText": "Does this have to be async? If we don't need this to be async, then users who are not familiar with reactor can also use this to customize logging.", "author": "srnagar", "createdAt": "2020-10-22T17:39:13Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Manages logging HTTP requests in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpRequestLogger {\n+    /**\n+     * Gets the {@link LogLevel} used to log the HTTP request.\n+     * <p>\n+     * By default this will return {@link LogLevel#INFORMATIONAL}.\n+     *\n+     * @param callContext The information used to send the HTTP request.\n+     * @return The {@link LogLevel} used to log the HTTP request.\n+     */\n+    default LogLevel getLogLevel(HttpPipelineCallContext callContext) {\n+        return LogLevel.INFORMATIONAL;\n+    }\n+\n+    /**\n+     * Logs the HTTP request.\n+     * <p>\n+     * To get the {@link LogLevel} used to log the HTTP request use {@link #getLogLevel(HttpPipelineCallContext)}.\n+     *\n+     * @param logger The {@link ClientLogger} used to log the HTTP request.\n+     * @param callContext The information used to send the HTTP request.\n+     * @return A reactive response that indicates that the HTTP request has been logged.\n+     */\n+    Mono<Void> logRequest(ClientLogger logger, HttpPipelineCallContext callContext);", "originalCommit": "a241bba9bb42efcbd31e84621af8c3e5397ee561", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM3MjExOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r510372118", "bodyText": "The response type should be kept async. If the body needs to be read for logging it is only accessible as Flux<ByteBuffer> and we need to keep away from blocking in pipeline policies as it may throw an exception if the reactive thread doesn't allow blocking.", "author": "alzimmermsft", "createdAt": "2020-10-22T18:29:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0MjU3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a8cfbc39734d0e8107eb95e5caffea83580a9e74", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java\nindex fcc66fa83a8..dfbfefdb04b 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLogger.java\n\n@@ -3,7 +3,6 @@\n \n package com.azure.core.http.policy;\n \n-import com.azure.core.http.HttpPipelineCallContext;\n import com.azure.core.util.logging.ClientLogger;\n import com.azure.core.util.logging.LogLevel;\n import reactor.core.publisher.Mono;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0NjcwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r510346703", "bodyText": "Wondering if responseDuration is the only criteria for deciding the log level. For e.g. the level maybe decided on the number of retry attempts too. Can we pass this in a context so we can add other data, if necessary? Same for logResponse method too.\ndefault LogLevel getLogLevel(HttpResponse response, Context context)", "author": "srnagar", "createdAt": "2020-10-22T17:46:07Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.logging.LogLevel;\n+import reactor.core.publisher.Mono;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Manages logging HTTP responses in {@link HttpLoggingPolicy}.\n+ */\n+public interface HttpResponseLogger {\n+    /**\n+     * Gets the {@link LogLevel} used to log the HTTP response.\n+     * <p>\n+     * By default this will return {@link LogLevel#INFORMATIONAL}.\n+     *\n+     * @param response The HTTP response.\n+     * @param responseDuration The duration between sending the request and receiving the response.\n+     * @return The {@link LogLevel} used to log the HTTP response.\n+     */\n+    default LogLevel getLogLevel(HttpResponse response, Duration responseDuration) {", "originalCommit": "a241bba9bb42efcbd31e84621af8c3e5397ee561", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM2MjM3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r510362379", "bodyText": "Would we want to create a property bag class to pass options into both interfaces, so if we want to expand the information available in the future we don't need to add new APIs? Or do we believe what is being passed now will stay consistent?", "author": "alzimmermsft", "createdAt": "2020-10-22T18:12:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0NjcwMw=="}], "type": "inlineReview", "revised_code": {"commit": "a8cfbc39734d0e8107eb95e5caffea83580a9e74", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java\nindex 1e0c3a39fb7..60fd327bea2 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLogger.java\n\n@@ -8,34 +8,31 @@ import com.azure.core.util.logging.ClientLogger;\n import com.azure.core.util.logging.LogLevel;\n import reactor.core.publisher.Mono;\n \n-import java.time.Duration;\n-\n /**\n  * Manages logging HTTP responses in {@link HttpLoggingPolicy}.\n  */\n+@FunctionalInterface\n public interface HttpResponseLogger {\n     /**\n      * Gets the {@link LogLevel} used to log the HTTP response.\n      * <p>\n      * By default this will return {@link LogLevel#INFORMATIONAL}.\n      *\n-     * @param response The HTTP response.\n-     * @param responseDuration The duration between sending the request and receiving the response.\n+     * @param loggingOptions The information available during response logging.\n      * @return The {@link LogLevel} used to log the HTTP response.\n      */\n-    default LogLevel getLogLevel(HttpResponse response, Duration responseDuration) {\n+    default LogLevel getLogLevel(HttpResponseLoggingOptions loggingOptions) {\n         return LogLevel.INFORMATIONAL;\n     }\n \n     /**\n      * Logs the HTTP response.\n      * <p>\n-     * To get the {@link LogLevel} used to log the HTTP response use {@link #getLogLevel(HttpResponse, Duration)}.\n+     * To get the {@link LogLevel} used to log the HTTP response use {@link #getLogLevel(HttpResponseLoggingOptions)}.\n      *\n      * @param logger The {@link ClientLogger} used to log the response.\n-     * @param response The HTTP response.\n-     * @param responseDuration The duration between sending the request and receiving the response.\n+     * @param loggingOptions The information available during response logging.\n      * @return A reactive response that returns the HTTP response that was logged.\n      */\n-    Mono<HttpResponse> logResponse(ClientLogger logger, HttpResponse response, Duration responseDuration);\n+    Mono<HttpResponse> logResponse(ClientLogger logger, HttpResponseLoggingOptions loggingOptions);\n }\n"}}, {"oid": "f611b739c6640209877fec066340a4c4f0ac6a82", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f611b739c6640209877fec066340a4c4f0ac6a82", "message": "Merge branch 'master' into AzCore_AddHttpLoggingHooks", "committedDate": "2020-10-22T18:08:30Z", "type": "commit"}, {"oid": "a8cfbc39734d0e8107eb95e5caffea83580a9e74", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a8cfbc39734d0e8107eb95e5caffea83580a9e74", "message": "Add logger option bag classes to pass information for logging the request or response, made HttpPipelineCallContext's Context property accessible via getContext", "committedDate": "2020-10-22T20:20:08Z", "type": "commit"}, {"oid": "25504583e504c0a889a9803f95acdc68b9436d60", "url": "https://github.com/Azure/azure-sdk-for-java/commit/25504583e504c0a889a9803f95acdc68b9436d60", "message": "Merge branch 'master' into AzCore_AddHttpLoggingHooks", "committedDate": "2020-11-13T22:50:40Z", "type": "commit"}, {"oid": "3f091cd485b8c296cac07608b8f018338386e553", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3f091cd485b8c296cac07608b8f018338386e553", "message": "Pull in upstream", "committedDate": "2021-01-19T22:03:55Z", "type": "commit"}, {"oid": "85795bf9a045e1ef7dbd0731862acd65d2d49644", "url": "https://github.com/Azure/azure-sdk-for-java/commit/85795bf9a045e1ef7dbd0731862acd65d2d49644", "message": "Merge branch 'master' into AzCore_AddHttpLoggingHooks", "committedDate": "2021-02-02T16:57:38Z", "type": "commit"}, {"oid": "75196720bcfa566b7111f49e3ba7cc11240f835e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/75196720bcfa566b7111f49e3ba7cc11240f835e", "message": "Merge branch 'master' into AzCore_AddHttpLoggingHooks", "committedDate": "2021-04-05T16:15:20Z", "type": "commit"}, {"oid": "80c3bf4ab8ff5d298adafbb87e76134c01e7b889", "url": "https://github.com/Azure/azure-sdk-for-java/commit/80c3bf4ab8ff5d298adafbb87e76134c01e7b889", "message": "Merge branch 'master' into AzCore_AddHttpLoggingHooks", "committedDate": "2021-04-27T20:02:54Z", "type": "commit"}, {"oid": "6198bbbeb2cf654731358a41314e95be04537bd2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6198bbbeb2cf654731358a41314e95be04537bd2", "message": "Use accessor pattern instead of making API public", "committedDate": "2021-04-27T20:35:34Z", "type": "commit"}, {"oid": "052ac13134cdff241ecd28658e062f390c321b1d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/052ac13134cdff241ecd28658e062f390c321b1d", "message": "Merge branch 'master' into AzCore_AddHttpLoggingHooks", "committedDate": "2021-05-11T19:59:51Z", "type": "commit"}, {"oid": "cd3bbd4729af664a90af569a150d08149015f91a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cd3bbd4729af664a90af569a150d08149015f91a", "message": "Merge branch 'master' into AzCore_AddHttpLoggingHooks", "committedDate": "2021-05-19T15:23:52Z", "type": "commit"}, {"oid": "3f1a5b6c6b98ad8e0f5285e3f3d6df1fce8de941", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3f1a5b6c6b98ad8e0f5285e3f3d6df1fce8de941", "message": "Merge branch 'master' into AzCore_AddHttpLoggingHooks", "committedDate": "2021-06-15T17:10:21Z", "type": "commit"}, {"oid": "95813cc1f36085a1f1528bcd92ea14ee27422477", "url": "https://github.com/Azure/azure-sdk-for-java/commit/95813cc1f36085a1f1528bcd92ea14ee27422477", "message": "Merge branch 'main' into AzCore_AddHttpLoggingHooks", "committedDate": "2021-06-30T23:59:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzQ1NjMyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r667456324", "bodyText": "We have been using *Options suffix for types that allow customizing requests (with setter methods). Since this is providing additional context for logging requests (read-only), it might be better to name this as HttpRequestLoggingContext.", "author": "srnagar", "createdAt": "2021-07-11T10:08:22Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLoggingOptions.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.util.Context;\n+\n+/**\n+ * Options class containing information available during HTTP request logging.\n+ */\n+public final class HttpRequestLoggingOptions {", "originalCommit": "95813cc1f36085a1f1528bcd92ea14ee27422477", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f907d050169877f1d1878f1aeef6c6b20a4cc018", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLoggingOptions.java b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLoggingOptions.java\ndeleted file mode 100644\nindex e038e17859a..00000000000\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpRequestLoggingOptions.java\n+++ /dev/null\n\n@@ -1,49 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.core.http.policy;\n-\n-import com.azure.core.http.HttpRequest;\n-import com.azure.core.util.Context;\n-\n-/**\n- * Options class containing information available during HTTP request logging.\n- */\n-public final class HttpRequestLoggingOptions {\n-    private final HttpRequest httpRequest;\n-    private final Context context;\n-    private final Integer tryCount;\n-\n-    HttpRequestLoggingOptions(HttpRequest httpRequest, Context context, Integer tryCount) {\n-        this.httpRequest = httpRequest;\n-        this.context = context;\n-        this.tryCount = tryCount;\n-    }\n-\n-    /**\n-     * Gets the HTTP request being sent.\n-     *\n-     * @return The HTTP request.\n-     */\n-    public HttpRequest getHttpRequest() {\n-        return httpRequest;\n-    }\n-\n-    /**\n-     * Gets the contextual information about the HTTP request.\n-     *\n-     * @return The contextual information.\n-     */\n-    public Context getContext() {\n-        return context;\n-    }\n-\n-    /**\n-     * Gets the try count for the HTTP request.\n-     *\n-     * @return The HTTP request try count.\n-     */\n-    public Integer getTryCount() {\n-        return tryCount;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzQ1NjQyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16088#discussion_r667456429", "bodyText": "Same here - name this as HttpResponseLoggingContext.", "author": "srnagar", "createdAt": "2021-07-11T10:08:59Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLoggingOptions.java", "diffHunk": "@@ -0,0 +1,63 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.policy;\n+\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.Context;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Options class containing information available during HTTP response logging.\n+ */\n+public final class HttpResponseLoggingOptions {", "originalCommit": "95813cc1f36085a1f1528bcd92ea14ee27422477", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f907d050169877f1d1878f1aeef6c6b20a4cc018", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLoggingOptions.java b/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLoggingOptions.java\ndeleted file mode 100644\nindex fa961398a86..00000000000\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/http/policy/HttpResponseLoggingOptions.java\n+++ /dev/null\n\n@@ -1,63 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.core.http.policy;\n-\n-import com.azure.core.http.HttpResponse;\n-import com.azure.core.util.Context;\n-\n-import java.time.Duration;\n-\n-/**\n- * Options class containing information available during HTTP response logging.\n- */\n-public final class HttpResponseLoggingOptions {\n-    private final HttpResponse httpResponse;\n-    private final Duration responseDuration;\n-    private final Context context;\n-    private final Integer tryCount;\n-\n-    HttpResponseLoggingOptions(HttpResponse httpResponse, Duration responseDuration, Context context,\n-        Integer tryCount) {\n-        this.httpResponse = httpResponse;\n-        this.responseDuration = responseDuration;\n-        this.context = context;\n-        this.tryCount = tryCount;\n-    }\n-\n-    /**\n-     * Gets the HTTP response being received.\n-     *\n-     * @return The HTTP response being received.\n-     */\n-    public HttpResponse getHttpResponse() {\n-        return httpResponse;\n-    }\n-\n-    /**\n-     * Gets the duration between the HTTP request being sent and the HTTP response being received.\n-     *\n-     * @return The duration between the HTTP request being sent and the HTTP response being received.\n-     */\n-    public Duration getResponseDuration() {\n-        return responseDuration;\n-    }\n-\n-    /**\n-     * Gets the contextual information about the HTTP response.\n-     *\n-     * @return The contextual information.\n-     */\n-    public Context getContext() {\n-        return context;\n-    }\n-\n-    /**\n-     * Gets the try count for the HTTP request associated to the HTTP response.\n-     *\n-     * @return The HTTP request try count.\n-     */\n-    public Integer getTryCount() {\n-        return tryCount;\n-    }\n-}\n"}}, {"oid": "43a0fb835d095eeeed0e823bc3c10423fb02367f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/43a0fb835d095eeeed0e823bc3c10423fb02367f", "message": "Merge branch 'main' into AzCore_AddHttpLoggingHooks", "committedDate": "2021-07-12T19:53:31Z", "type": "commit"}, {"oid": "381ea82f3814f85a0f838c665f7d5ba1da6b57d3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/381ea82f3814f85a0f838c665f7d5ba1da6b57d3", "message": "Merge branch 'AzCore_AddHttpLoggingHooks' of github.com:alzimmermsft/azure-sdk-for-java into AzCore_AddHttpLoggingHooks", "committedDate": "2021-07-12T21:14:42Z", "type": "commit"}, {"oid": "68208e2f35987155670b03572c77d0ca71d183fc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/68208e2f35987155670b03572c77d0ca71d183fc", "message": "Merge branch 'main' into AzCore_AddHttpLoggingHooks", "committedDate": "2021-07-15T21:42:31Z", "type": "commit"}, {"oid": "f907d050169877f1d1878f1aeef6c6b20a4cc018", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f907d050169877f1d1878f1aeef6c6b20a4cc018", "message": "Rename Options to Context", "committedDate": "2021-07-15T21:44:02Z", "type": "commit"}]}