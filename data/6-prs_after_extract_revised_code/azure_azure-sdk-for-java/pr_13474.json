{"pr_number": 13474, "pr_title": "[FR] Added the remaining test scenario coverage cases", "pr_createdAt": "2020-07-24T04:39:25Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/13474", "timeline": [{"oid": "0b72acb1c126434b314a36ac49a5ab0815944b47", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0b72acb1c126434b314a36ac49a5ab0815944b47", "message": "big-endian tiff header test", "committedDate": "2020-07-23T00:50:27Z", "type": "commit"}, {"oid": "36ca9bb10c43f33dfd35e8d962c24420928ccec8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/36ca9bb10c43f33dfd35e8d962c24420928ccec8", "message": "added remaining unsolved tests", "committedDate": "2020-07-24T03:40:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyOTMxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13474#discussion_r461929317", "bodyText": "variable name formRecognizerException", "author": "samvaity", "createdAt": "2020-07-28T22:28:36Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/test/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientTest.java", "diffHunk": "@@ -959,4 +1044,65 @@ public void recognizeCustomFormUrlMultiPageLabeled(HttpClient httpClient,\n                 validateMultiPageDataLabeled(syncPoller.getFinalResult());\n             }));\n     }\n+\n+    /**\n+     * Verifies encoded blank url must stay same when sent to service for a document using invalid source url with \\\n+     * encoded blank space as input data to recognize a custom form from url API.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeCustomFormFromUrlWithEncodedBlankSpaceSourceUrl(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        encodedBlankSpaceSourceUrlRunner(sourceUrl -> {\n+            HttpResponseException errorResponseException = assertThrows(HttpResponseException.class,\n+                () -> client.beginRecognizeCustomFormsFromUrl(sourceUrl, NON_EXIST_MODEL_ID, new RecognizeOptions()\n+                    .setPollInterval(durationTestMode)).getSyncPoller().getFinalResult());\n+            assertEquals(ENCODED_EMPTY_SPACE,\n+                new String(errorResponseException.getResponse().getRequest().getBody().blockFirst().array(),\n+                    StandardCharsets.UTF_8));\n+        });\n+    }\n+\n+    /**\n+     * Verify that custom form with invalid model id.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeCustomFormUrlNonExistModelId(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        urlRunner(fileUrl -> {\n+            HttpResponseException errorResponseException = assertThrows(HttpResponseException.class,\n+                () -> client.beginRecognizeCustomFormsFromUrl(fileUrl, NON_EXIST_MODEL_ID,\n+                    new RecognizeOptions().setPollInterval(durationTestMode)).getSyncPoller().getFinalResult());\n+            ErrorInformation errorInformation = (ErrorInformation) errorResponseException.getValue();\n+            assertEquals(EXPECTED_INVALID_MODEL_ID_ERROR_CODE, errorInformation.getCode());\n+            assertEquals(EXPECTED_INVALID_MODEL_ID_ERROR_MESSAGE, errorInformation.getMessage());\n+        }, FORM_JPG);\n+    }\n+\n+    /**\n+     * Verify that custom form with damaged PDF file.\n+     */\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.ai.formrecognizer.TestUtils#getTestParameters\")\n+    public void recognizeCustomFormDamagedPdf(HttpClient httpClient,\n+        FormRecognizerServiceVersion serviceVersion) {\n+        client = getFormRecognizerAsyncClient(httpClient, serviceVersion);\n+        damagedPdfDataRunner((data, dataLength) ->\n+            beginTrainingUnlabeledRunner((trainingFilesUrl, useTrainingLabels) -> {\n+                SyncPoller<OperationResult, CustomFormModel> trainingPoller =\n+                    getFormTrainingAsyncClient(httpClient, serviceVersion).beginTraining(trainingFilesUrl,\n+                        useTrainingLabels, null, durationTestMode).getSyncPoller();\n+                trainingPoller.waitForCompletion();\n+\n+                FormRecognizerException errorResponseException = assertThrows(FormRecognizerException.class,", "originalCommit": "36ca9bb10c43f33dfd35e8d962c24420928ccec8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "b1729faf34be5adda6a0fce9333c1bc5034f1b5a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b1729faf34be5adda6a0fce9333c1bc5034f1b5a", "message": "resolve conflict", "committedDate": "2020-07-29T06:20:13Z", "type": "commit"}]}