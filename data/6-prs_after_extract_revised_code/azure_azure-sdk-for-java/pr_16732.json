{"pr_number": 16732, "pr_title": "[MetricsAdvisor] API design and renaming updates ", "pr_createdAt": "2020-10-23T04:55:27Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/16732", "timeline": [{"oid": "41e409c5ddf9f999d573cc6f6155b7608bf56349", "url": "https://github.com/Azure/azure-sdk-for-java/commit/41e409c5ddf9f999d573cc6f6155b7608bf56349", "message": "renames", "committedDate": "2020-11-02T00:58:48Z", "type": "forcePushed"}, {"oid": "a66fa4b10a8f6b6a433d1ea41bf26394a4dbf45c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a66fa4b10a8f6b6a433d1ea41bf26394a4dbf45c", "message": "renames", "committedDate": "2020-11-02T03:46:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3MjU2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16732#discussion_r516072560", "bodyText": "Does it make sense to do a null check for params in this method as well? Today if a user calls listIncidentRootCases(null, incidentId,..) the error we throw is incident.detectionConfigurationId is required and cannot be null", "author": "anuchandy", "createdAt": "2020-11-02T15:57:47Z", "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/src/main/java/com/azure/ai/metricsadvisor/MetricsAdvisorAsyncClient.java", "diffHunk": "@@ -776,67 +779,69 @@\n     PagedFlux<IncidentRootCause> listIncidentRootCauses(\n         String detectionConfigurationId,\n         String incidentId, Context context) {\n-        Incident incident = new Incident();\n-        IncidentHelper.setId(incident, incidentId);\n-        IncidentHelper.setDetectionConfigurationId(incident, detectionConfigurationId);\n+        AnomalyIncident anomalyIncident = new AnomalyIncident();\n+        IncidentHelper.setId(anomalyIncident, incidentId);\n+        IncidentHelper.setDetectionConfigurationId(anomalyIncident, detectionConfigurationId);", "originalCommit": "f62fe1dc2d969b3579b014ccacf3d5d422102605", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxNzcyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16732#discussion_r517017727", "bodyText": "yes, updated.", "author": "samvaity", "createdAt": "2020-11-03T23:37:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3MjU2MA=="}], "type": "inlineReview", "revised_code": {"commit": "e6b011718a931d583216f92af57bba7db4c3d416", "chunk": "diff --git a/sdk/metricsadvisor/azure-ai-metricsadvisor/src/main/java/com/azure/ai/metricsadvisor/MetricsAdvisorAsyncClient.java b/sdk/metricsadvisor/azure-ai-metricsadvisor/src/main/java/com/azure/ai/metricsadvisor/MetricsAdvisorAsyncClient.java\nindex 130cb0f4a17..9bacf65f2b9 100644\n--- a/sdk/metricsadvisor/azure-ai-metricsadvisor/src/main/java/com/azure/ai/metricsadvisor/MetricsAdvisorAsyncClient.java\n+++ b/sdk/metricsadvisor/azure-ai-metricsadvisor/src/main/java/com/azure/ai/metricsadvisor/MetricsAdvisorAsyncClient.java\n\n@@ -779,61 +776,59 @@ public class MetricsAdvisorAsyncClient {\n     PagedFlux<IncidentRootCause> listIncidentRootCauses(\n         String detectionConfigurationId,\n         String incidentId, Context context) {\n-        AnomalyIncident anomalyIncident = new AnomalyIncident();\n-        IncidentHelper.setId(anomalyIncident, incidentId);\n-        IncidentHelper.setDetectionConfigurationId(anomalyIncident, detectionConfigurationId);\n+        Incident incident = new Incident();\n+        IncidentHelper.setId(incident, incidentId);\n+        IncidentHelper.setDetectionConfigurationId(incident, detectionConfigurationId);\n         try {\n-            return new PagedFlux<>(() -> listIncidentRootCausesInternal(anomalyIncident, context), null);\n+            return new PagedFlux<>(() -> listIncidentRootCausesInternal(incident, context), null);\n         } catch (RuntimeException ex) {\n             return new PagedFlux<>(() -> monoError(logger, ex));\n         }\n     }\n \n     /**\n-     * List the root causes for an anomalyIncident.\n+     * List the root causes for an incident.\n      *\n      * <p><strong>Code sample</strong></p>\n-     * {@codesnippet com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentRootCauses#AnomalyIncident}\n+     * {@codesnippet com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listIncidentRootCauses#Incident}\n      *\n-     * @param anomalyIncident the anomalyIncident for which you want to query root causes for.\n+     * @param incident the incident for which you want to query root causes for.\n      *\n-     * @return the list of root causes for that anomalyIncident.\n+     * @return the list of root causes for that incident.\n      * @throws IllegalArgumentException thrown if {@code detectionConfigurationId} fail the UUID format validation.\n      * @throws ErrorCodeException thrown if the request is rejected by server.\n      * @throws NullPointerException thrown if the {@code detectionConfigurationId} or {@code incidentId} is null.\n      **/\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedFlux<IncidentRootCause> listIncidentRootCauses(AnomalyIncident anomalyIncident) {\n+    public PagedFlux<IncidentRootCause> listIncidentRootCauses(Incident incident) {\n         try {\n-            return new PagedFlux<>(() -> withContext(context ->\n-                listIncidentRootCausesInternal(anomalyIncident, context)),\n+            return new PagedFlux<>(() -> withContext(context -> listIncidentRootCausesInternal(incident, context)),\n                  null);\n         } catch (RuntimeException ex) {\n             return new PagedFlux<>(() -> monoError(logger, ex));\n         }\n     }\n \n-    PagedFlux<IncidentRootCause> listIncidentRootCauses(AnomalyIncident anomalyIncident, Context context) {\n-        return new PagedFlux<>(() -> listIncidentRootCausesInternal(anomalyIncident, context), null);\n+    PagedFlux<IncidentRootCause> listIncidentRootCauses(Incident incident, Context context) {\n+        return new PagedFlux<>(() -> listIncidentRootCausesInternal(incident, context), null);\n     }\n \n-    private Mono<PagedResponse<IncidentRootCause>> listIncidentRootCausesInternal(AnomalyIncident anomalyIncident,\n-        Context context) {\n-        if (anomalyIncident == null) {\n-            throw logger.logExceptionAsError(new IllegalArgumentException(\"'anomalyIncident' is required.\"));\n+    private Mono<PagedResponse<IncidentRootCause>> listIncidentRootCausesInternal(Incident incident, Context context) {\n+        if (incident == null) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"'incident' is required.\"));\n         }\n-        Objects.requireNonNull(anomalyIncident.getDetectionConfigurationId(),\n-            \"'anomalyIncident.detectionConfigurationId' is required.\");\n-        Objects.requireNonNull(anomalyIncident.getId(), \"'anomalyIncident.id' is required\");\n+        Objects.requireNonNull(incident.getDetectionConfigurationId(),\n+            \"'incident.detectionConfigurationId' is required.\");\n+        Objects.requireNonNull(incident.getId(), \"'incident.id' is required\");\n         final Context withTracing = context.addData(AZ_TRACING_NAMESPACE_KEY, METRICS_ADVISOR_TRACING_NAMESPACE_VALUE);\n         return service.getRootCauseOfIncidentByAnomalyDetectionConfigurationWithResponseAsync(\n-            UUID.fromString(anomalyIncident.getDetectionConfigurationId()),\n-            anomalyIncident.getId(), withTracing)\n+            UUID.fromString(incident.getDetectionConfigurationId()),\n+            incident.getId(), withTracing)\n             .doOnSubscribe(ignoredValue -> logger.info(\"Retrieved the IncidentRootCauses - {}\",\n-                anomalyIncident.getDetectionConfigurationId()))\n+                incident.getDetectionConfigurationId()))\n             .doOnSuccess(response -> logger.info(\"Retrieved the IncidentRootCauses - {}\", response))\n             .doOnError(error -> logger.warning(\"Failed to retrieve the incident root causes - {}\",\n-                anomalyIncident.getDetectionConfigurationId(), error))\n+                incident.getDetectionConfigurationId(), error))\n             .map(res -> IncidentRootCauseTransforms.fromInnerResponse(res));\n     }\n \n"}}, {"oid": "e6b011718a931d583216f92af57bba7db4c3d416", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e6b011718a931d583216f92af57bba7db4c3d416", "message": "renaming quick fixes", "committedDate": "2020-11-02T22:20:23Z", "type": "commit"}, {"oid": "638443269baf547fa4f70daf04d68732ff4a4d3c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/638443269baf547fa4f70daf04d68732ff4a4d3c", "message": "create data feed update", "committedDate": "2020-11-02T22:32:23Z", "type": "commit"}, {"oid": "c4233fa072296eb4ec0961253cc1d74cf69c2f02", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c4233fa072296eb4ec0961253cc1d74cf69c2f02", "message": "update readme", "committedDate": "2020-11-02T22:33:40Z", "type": "commit"}, {"oid": "0e1ac965014adf0078c60b8cd9a5aa8c12fd718f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0e1ac965014adf0078c60b8cd9a5aa8c12fd718f", "message": "renames", "committedDate": "2020-11-02T23:07:41Z", "type": "commit"}, {"oid": "8b94f9a97362363af14c5931d2de9bbc45b3e7f3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8b94f9a97362363af14c5931d2de9bbc45b3e7f3", "message": "swagger rename updates, readme update", "committedDate": "2020-11-02T23:08:11Z", "type": "commit"}, {"oid": "8351117c14717511e6ee337b29f917199cece54a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8351117c14717511e6ee337b29f917199cece54a", "message": "rebase changes", "committedDate": "2020-11-02T23:44:02Z", "type": "forcePushed"}, {"oid": "712b0394138c21be8a37753d51149dd46173a273", "url": "https://github.com/Azure/azure-sdk-for-java/commit/712b0394138c21be8a37753d51149dd46173a273", "message": "rebase changes", "committedDate": "2020-11-03T00:28:47Z", "type": "commit"}, {"oid": "712b0394138c21be8a37753d51149dd46173a273", "url": "https://github.com/Azure/azure-sdk-for-java/commit/712b0394138c21be8a37753d51149dd46173a273", "message": "rebase changes", "committedDate": "2020-11-03T00:28:47Z", "type": "forcePushed"}, {"oid": "8b3a29cb339cf6821b7d48bb1bed917db04d2cf1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8b3a29cb339cf6821b7d48bb1bed917db04d2cf1", "message": "remove tests coverage pom", "committedDate": "2020-11-03T18:59:34Z", "type": "commit"}, {"oid": "022c137c2b34c06ba829b3e7619e34da6150340e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/022c137c2b34c06ba829b3e7619e34da6150340e", "message": "options update", "committedDate": "2020-11-03T23:28:15Z", "type": "commit"}, {"oid": "022c137c2b34c06ba829b3e7619e34da6150340e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/022c137c2b34c06ba829b3e7619e34da6150340e", "message": "options update", "committedDate": "2020-11-03T23:28:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNDA5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16732#discussion_r517024091", "bodyText": "should we also check for whether the option is not null before invoking getFilter", "author": "anuchandy", "createdAt": "2020-11-03T23:58:38Z", "path": "sdk/metricsadvisor/azure-ai-metricsadvisor/src/main/java/com/azure/ai/metricsadvisor/MetricsAdvisorAsyncClient.java", "diffHunk": "@@ -546,55 +553,58 @@\n      * Fetch the anomalies identified by an anomaly detection configuration.\n      *\n      * <p><strong>Code sample</strong></p>\n-     * {@codesnippet com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfiguration#String-ListAnomaliesDetectedOptions}\n+     * {@codesnippet com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfig#String-OffsetDateTime-OffsetDateTime-ListAnomaliesDetectedOptions}\n      *\n      * @param detectionConfigurationId The anomaly detection configuration id.\n+     * @param startTime The start time of the time range within which the anomalies were detected.\n+     * @param endTime The end time of the time range within which the anomalies were detected.\n      * @param options The additional parameters.\n+     *\n      * @return The anomalies.\n      * @throws IllegalArgumentException thrown if {@code detectionConfigurationId} does not conform\n      *     to the UUID format specification\n      *     or {@code options.filter} is used to set severity but either min or max severity is missing.\n      * @throws NullPointerException thrown if the {@code detectionConfigurationId} or {@code options}\n-     *     or {@code options.startTime} or {@code options.endTime} is null.\n+     *     or {@code startTime} or {@code endTime} is null.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedFlux<Anomaly> listAnomaliesForDetectionConfiguration(\n+    public PagedFlux<DataPointAnomaly> listAnomaliesForDetectionConfig(\n         String detectionConfigurationId,\n-        ListAnomaliesDetectedOptions options) {\n+        OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options) {\n         try {\n             return new PagedFlux<>(() ->\n                 withContext(context ->\n-                    listAnomaliesForDetectionConfigurationSinglePageAsync(detectionConfigurationId,\n-                        options, context)),\n+                    listAnomaliesForDetectionConfigSinglePageAsync(detectionConfigurationId,\n+                        startTime, endTime, options, context)),\n                 continuationToken ->\n-                    withContext(context -> listAnomaliesForDetectionConfigurationNextPageAsync(continuationToken,\n-                        options, context)));\n+                    withContext(context -> listAnomaliesForDetectionConfigNextPageAsync(continuationToken,\n+                        startTime, endTime, options, context)));\n         } catch (RuntimeException ex) {\n             return new PagedFlux<>(() -> FluxUtil.monoError(logger, ex));\n         }\n     }\n \n-    PagedFlux<Anomaly> listAnomaliesForDetectionConfiguration(\n+    PagedFlux<DataPointAnomaly> listAnomaliesForDetectionConfig(\n         String detectionConfigurationId,\n-        ListAnomaliesDetectedOptions options, Context context) {\n+        OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options, Context context) {\n         return new PagedFlux<>(() ->\n-            listAnomaliesForDetectionConfigurationSinglePageAsync(detectionConfigurationId, options, context),\n+            listAnomaliesForDetectionConfigSinglePageAsync(detectionConfigurationId, startTime, endTime, options,\n+                context),\n             continuationToken ->\n-                listAnomaliesForDetectionConfigurationNextPageAsync(continuationToken, options, context));\n+                listAnomaliesForDetectionConfigNextPageAsync(continuationToken, startTime, endTime, options, context));\n     }\n \n-    private Mono<PagedResponse<Anomaly>> listAnomaliesForDetectionConfigurationSinglePageAsync(\n+    private Mono<PagedResponse<DataPointAnomaly>> listAnomaliesForDetectionConfigSinglePageAsync(\n         String detectionConfigurationId,\n-        ListAnomaliesDetectedOptions options,\n+        OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options,\n         Context context) {\n         Objects.requireNonNull(detectionConfigurationId, \"'detectionConfigurationId' is required.\");\n-        Objects.requireNonNull(options, \"'options' is required.\");\n-        Objects.requireNonNull(options.getStartTime(), \"'options.startTime' is required.\");\n-        Objects.requireNonNull(options.getEndTime(), \"'options.endTime' is required.\");\n+        Objects.requireNonNull(startTime, \"'startTime' is required.\");\n+        Objects.requireNonNull(endTime, \"'endTime' is required.\");\n \n         DetectionAnomalyResultQuery query = new DetectionAnomalyResultQuery()\n-            .setStartTime(options.getStartTime())\n-            .setEndTime(options.getEndTime());\n+            .setStartTime(startTime)\n+            .setEndTime(endTime);\n \n         if (options.getFilter() != null) {", "originalCommit": "022c137c2b34c06ba829b3e7619e34da6150340e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNDQyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16732#discussion_r517024425", "bodyText": "same comment for listAnomaliesForDetectionConfigNextPageAsync", "author": "anuchandy", "createdAt": "2020-11-03T23:59:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNDA5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c642b3136afa4bd12dff323b6063660339d30b78", "chunk": "diff --git a/sdk/metricsadvisor/azure-ai-metricsadvisor/src/main/java/com/azure/ai/metricsadvisor/MetricsAdvisorAsyncClient.java b/sdk/metricsadvisor/azure-ai-metricsadvisor/src/main/java/com/azure/ai/metricsadvisor/MetricsAdvisorAsyncClient.java\nindex 12b31503620..8a28cec4c5e 100644\n--- a/sdk/metricsadvisor/azure-ai-metricsadvisor/src/main/java/com/azure/ai/metricsadvisor/MetricsAdvisorAsyncClient.java\n+++ b/sdk/metricsadvisor/azure-ai-metricsadvisor/src/main/java/com/azure/ai/metricsadvisor/MetricsAdvisorAsyncClient.java\n\n@@ -606,6 +617,10 @@ public class MetricsAdvisorAsyncClient {\n             .setStartTime(startTime)\n             .setEndTime(endTime);\n \n+        if (options == null) {\n+            options = new ListAnomaliesDetectedOptions();\n+        }\n+\n         if (options.getFilter() != null) {\n             DetectionAnomalyFilterCondition innerFilter = AnomalyTransforms.toInnerFilter(options.getFilter(),\n                 logger);\n"}}, {"oid": "c642b3136afa4bd12dff323b6063660339d30b78", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c642b3136afa4bd12dff323b6063660339d30b78", "message": "update review comments", "committedDate": "2020-11-05T04:23:52Z", "type": "commit"}]}