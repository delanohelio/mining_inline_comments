{"pr_number": 8466, "pr_title": "Making databaseAccount read dynamic after V4 master merge", "pr_createdAt": "2020-02-24T21:47:12Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/8466", "timeline": [{"oid": "1d8856a1dd10b9afa60d3da9baba7096c8256ed6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1d8856a1dd10b9afa60d3da9baba7096c8256ed6", "message": "making databaseAccount update dynamic", "committedDate": "2020-02-24T21:29:06Z", "type": "commit"}, {"oid": "390f8b2ff26e1e49884b860a3d35fdd216442eed", "url": "https://github.com/Azure/azure-sdk-for-java/commit/390f8b2ff26e1e49884b860a3d35fdd216442eed", "message": "Revert \"making databaseAccount update dynamic\"\n\nThis reverts commit 1d8856a1dd10b9afa60d3da9baba7096c8256ed6.", "committedDate": "2020-02-24T21:39:51Z", "type": "commit"}, {"oid": "3864034a967a964eae0768fcac3d37d3fdc38276", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3864034a967a964eae0768fcac3d37d3fdc38276", "message": "making databaseAccount update dynamic", "committedDate": "2020-02-24T21:42:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTUwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384165503", "bodyText": "there is a bug here in refreshLocationAsync(.) invocation", "author": "moderakh", "createdAt": "2020-02-25T22:29:01Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java", "diffHunk": "@@ -159,6 +166,20 @@ public void close() {\n         });\n     }\n \n+    public Mono<DatabaseAccount> getDatabaseAccountFromCache(URI defaultEndpoint) {\n+        return this.databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, () -> this.owner.getDatabaseAccountFromEndpoint(defaultEndpoint).single().doOnSuccess(databaseAccount -> {\n+            if(databaseAccount != null) {\n+                this.latestDatabaseAccount = databaseAccount;\n+            }\n+\n+            this.refreshLocationAsync(databaseAccount, false);", "originalCommit": "3864034a967a964eae0768fcac3d37d3fdc38276", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE3MzE1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384173150", "bodyText": "What bug , please explain . this is same as the code initially doing in RxDocumentClientImpl, via this.globalEndpointManager.refreshLocationAsync(databaseAccount, false).block();", "author": "simplynaveen20", "createdAt": "2020-02-25T22:46:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5MTg3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384191879", "bodyText": "I think i see the bug will fix in next iteration", "author": "simplynaveen20", "createdAt": "2020-02-25T23:33:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU1NDMzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384554339", "bodyText": "Made refreshLocationAsync in async pipeline , added test cases to make sure this method is getting called", "author": "simplynaveen20", "createdAt": "2020-02-26T15:10:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTUwMw=="}], "type": "inlineReview", "revised_code": {"commit": "39fa9221dd222332b74dce47d08ca5e7e4eface3", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java\nindex 0e630b8f84b..ce6231af5b3 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java\n\n@@ -167,13 +166,14 @@ public class GlobalEndpointManager implements AutoCloseable {\n     }\n \n     public Mono<DatabaseAccount> getDatabaseAccountFromCache(URI defaultEndpoint) {\n-        return this.databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, () -> this.owner.getDatabaseAccountFromEndpoint(defaultEndpoint).single().doOnSuccess(databaseAccount -> {\n-            if(databaseAccount != null) {\n+        return this.databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, () -> this.owner.getDatabaseAccountFromEndpoint(defaultEndpoint).flatMap(databaseAccount -> {\n+            if (databaseAccount != null) {\n                 this.latestDatabaseAccount = databaseAccount;\n             }\n \n-            this.refreshLocationAsync(databaseAccount, false);\n-        }));\n+            Mono<Void> refreshLocationCompletable = this.refreshLocationAsync(databaseAccount, false);\n+            return refreshLocationCompletable.then(Mono.just(databaseAccount));\n+        }).single());\n     }\n \n     public DatabaseAccount getLatestDatabaseAccount() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NjUyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384166522", "bodyText": "where are we doing the initialization blocking call now?\nIf the global endpoint manager is not fully initialized with first databaseAccount fetch could this return null?", "author": "moderakh", "createdAt": "2020-02-25T22:31:18Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -250,29 +250,12 @@ private RxDocumentClientImpl(URI serviceEndpoint,\n     }\n \n     private void initializeGatewayConfigurationReader() {\n-        String resourceToken;\n-        if(this.tokenResolver != null) {\n-            resourceToken = this.tokenResolver.getAuthorizationToken(RequestVerb.GET, \"\", CosmosResourceType.System, null);\n-        } else if(!this.hasAuthKeyResourceToken && this.authorizationTokenProvider == null) {\n-            resourceToken = this.firstResourceTokenFromPermissionFeed;\n-        } else {\n-            assert  this.masterKeyOrResourceToken != null || this.cosmosKeyCredential != null;\n-            resourceToken = this.masterKeyOrResourceToken;\n-        }\n-\n-        this.gatewayConfigurationReader = new GatewayServiceConfigurationReader(this.serviceEndpoint,\n-                this.hasAuthKeyResourceToken,\n-                resourceToken,\n-                this.connectionPolicy,\n-                this.authorizationTokenProvider,\n-                this.reactorHttpClient);\n-\n-        DatabaseAccount databaseAccount = this.gatewayConfigurationReader.initializeReaderAsync().block();\n+        this.gatewayConfigurationReader = new GatewayServiceConfigurationReader(this.serviceEndpoint, this.globalEndpointManager);\n+        DatabaseAccount databaseAccount = this.globalEndpointManager.getLatestDatabaseAccount();", "originalCommit": "3864034a967a964eae0768fcac3d37d3fdc38276", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE3MTIyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384171224", "bodyText": "GatewayServiceConfigurationReader constructor is doing blocking call on async cache , so for first time if cache in null it will hit the BE", "author": "simplynaveen20", "createdAt": "2020-02-25T22:41:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NjUyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwODU0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384708547", "bodyText": "could you please add an assert(databaseAccount != null) here. for sanity check and readibility.", "author": "moderakh", "createdAt": "2020-02-26T19:20:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NjUyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwMTE5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384801195", "bodyText": "done", "author": "simplynaveen20", "createdAt": "2020-02-26T22:17:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NjUyMg=="}], "type": "inlineReview", "revised_code": {"commit": "d27cde4738dbe5db8cfa725c732b34bf817f6fe2", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java\nindex e09fb1680f9..7a9b340e4f7 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java\n\n@@ -250,8 +250,12 @@ public class RxDocumentClientImpl implements AsyncDocumentClient, IAuthorization\n     }\n \n     private void initializeGatewayConfigurationReader() {\n-        this.gatewayConfigurationReader = new GatewayServiceConfigurationReader(this.serviceEndpoint, this.globalEndpointManager);\n+        this.gatewayConfigurationReader = new GatewayServiceConfigurationReader(this.globalEndpointManager);\n         DatabaseAccount databaseAccount = this.globalEndpointManager.getLatestDatabaseAccount();\n+        //Database account should not be null here,\n+        // this.globalEndpointManager.init() must have been already called\n+        // hence asserting it\n+        assert(databaseAccount != null);\n         this.useMultipleWriteLocations = this.connectionPolicy.getUsingMultipleWriteLocations() && BridgeInternal.isEnableMultipleWriteLocations(databaseAccount);\n \n         // TODO: add support for openAsync\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NzAzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384167034", "bodyText": "there is a time window where GlobalEndpointManager is instantiated but hasn't fetched DatabaseAccount, within that period how do we ensure this never returns null?", "author": "moderakh", "createdAt": "2020-02-25T22:32:29Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java", "diffHunk": "@@ -159,6 +166,20 @@ public void close() {\n         });\n     }\n \n+    public Mono<DatabaseAccount> getDatabaseAccountFromCache(URI defaultEndpoint) {\n+        return this.databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, () -> this.owner.getDatabaseAccountFromEndpoint(defaultEndpoint).single().doOnSuccess(databaseAccount -> {\n+            if(databaseAccount != null) {\n+                this.latestDatabaseAccount = databaseAccount;\n+            }\n+\n+            this.refreshLocationAsync(databaseAccount, false);\n+        }));\n+    }\n+\n+    public DatabaseAccount getLatestDatabaseAccount() {\n+        return this.latestDatabaseAccount;", "originalCommit": "3864034a967a964eae0768fcac3d37d3fdc38276", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE3MjI0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384172245", "bodyText": "We are calling init on GlobalEndpointManager  from RxDocumentClientImpl which will update this value , any future call if return null due to any exception or error we will not update latestDatabaseAccount and async cahce , they will hold the previous not null value", "author": "simplynaveen20", "createdAt": "2020-02-25T22:44:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NzAzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwNzg2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384707867", "bodyText": "Please document the new API saying what you said above.", "author": "moderakh", "createdAt": "2020-02-26T19:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NzAzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4MTA5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384781096", "bodyText": "done", "author": "simplynaveen20", "createdAt": "2020-02-26T21:36:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NzAzNA=="}], "type": "inlineReview", "revised_code": {"commit": "39fa9221dd222332b74dce47d08ca5e7e4eface3", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java\nindex 0e630b8f84b..ce6231af5b3 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java\n\n@@ -167,13 +166,14 @@ public class GlobalEndpointManager implements AutoCloseable {\n     }\n \n     public Mono<DatabaseAccount> getDatabaseAccountFromCache(URI defaultEndpoint) {\n-        return this.databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, () -> this.owner.getDatabaseAccountFromEndpoint(defaultEndpoint).single().doOnSuccess(databaseAccount -> {\n-            if(databaseAccount != null) {\n+        return this.databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, () -> this.owner.getDatabaseAccountFromEndpoint(defaultEndpoint).flatMap(databaseAccount -> {\n+            if (databaseAccount != null) {\n                 this.latestDatabaseAccount = databaseAccount;\n             }\n \n-            this.refreshLocationAsync(databaseAccount, false);\n-        }));\n+            Mono<Void> refreshLocationCompletable = this.refreshLocationAsync(databaseAccount, false);\n+            return refreshLocationCompletable.then(Mono.just(databaseAccount));\n+        }).single());\n     }\n \n     public DatabaseAccount getLatestDatabaseAccount() {\n"}}, {"oid": "39fa9221dd222332b74dce47d08ca5e7e4eface3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/39fa9221dd222332b74dce47d08ca5e7e4eface3", "message": "resolving comments", "committedDate": "2020-02-26T15:09:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMjYxMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384712612", "bodyText": "as this httpHeaders.set(HttpConstants.HttpHeaders.API_TYPE, Constants.Properties.SQL_API_TYPE); is removed, we are not passing this header to the service in the initialization time.\n\nwhat does .Net do?\nIs that ok not to set SQL_API_TYPE? what happens on non sql type account?", "author": "moderakh", "createdAt": "2020-02-26T19:27:21Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayServiceConfigurationReader.java", "diffHunk": "@@ -42,118 +24,28 @@\n  */\n public class GatewayServiceConfigurationReader {\n \n-    public static final String GATEWAY_READER_NOT_INITIALIZED = \"GatewayServiceConfigurationReader has not been initialized\";\n-\n-    public ReplicationPolicy userReplicationPolicy;\n-    private ReplicationPolicy systemReplicationPolicy;\n-    private ConsistencyLevel consistencyLevel;\n-    private volatile boolean initialized;\n     private URI serviceEndpoint;\n-    private final ConnectionPolicy connectionPolicy;\n-    private Map<String, Object> queryEngineConfiguration;\n-    private final BaseAuthorizationTokenProvider baseAuthorizationTokenProvider;\n-    private final boolean hasAuthKeyResourceToken;\n-    private final String authKeyResourceToken;\n-    private HttpClient httpClient;\n+    private GlobalEndpointManager globalEndpointManager;\n \n-    public GatewayServiceConfigurationReader(URI serviceEndpoint, boolean hasResourceToken, String resourceToken,\n-            ConnectionPolicy connectionPolicy, BaseAuthorizationTokenProvider baseAuthorizationTokenProvider,\n-            HttpClient httpClient) {\n+    public GatewayServiceConfigurationReader(URI serviceEndpoint, GlobalEndpointManager globalEndpointManager) {\n         this.serviceEndpoint = serviceEndpoint;\n-        this.baseAuthorizationTokenProvider = baseAuthorizationTokenProvider;\n-        this.hasAuthKeyResourceToken = hasResourceToken;\n-        this.authKeyResourceToken = resourceToken;\n-        this.connectionPolicy = connectionPolicy;\n-        this.httpClient = httpClient;\n+        this.globalEndpointManager = globalEndpointManager;\n+        this.globalEndpointManager.getDatabaseAccountFromCache(this.serviceEndpoint).block();\n     }\n \n     public ReplicationPolicy getUserReplicationPolicy() {\n-        this.throwIfNotInitialized();\n-        return this.userReplicationPolicy;\n+        return BridgeInternal.getReplicationPolicy(this.globalEndpointManager.getLatestDatabaseAccount());\n     }\n \n     public ReplicationPolicy getSystemReplicationPolicy() {\n-        this.throwIfNotInitialized();\n-        return this.systemReplicationPolicy;\n-    }\n-\n-    public boolean enableAuthorization() {\n-        return true;\n+        return BridgeInternal.getSystemReplicationPolicy(this.globalEndpointManager.getLatestDatabaseAccount());\n     }\n \n     public ConsistencyLevel getDefaultConsistencyLevel() {\n-        this.throwIfNotInitialized();\n-        return this.consistencyLevel;\n-    }\n-\n-    public void setDefaultConsistencyLevel(ConsistencyLevel value) {\n-        this.throwIfNotInitialized();\n-        this.consistencyLevel = value;\n+        return BridgeInternal.getConsistencyPolicy(this.globalEndpointManager.getLatestDatabaseAccount()).getDefaultConsistencyLevel();\n     }\n \n     public Map<String, Object> getQueryEngineConfiguration() {\n-        this.throwIfNotInitialized();\n-        return this.queryEngineConfiguration;\n-    }\n-\n-    private Mono<DatabaseAccount> getDatabaseAccountAsync(URI serviceEndpoint) {\n-\n-        HttpHeaders httpHeaders = new HttpHeaders();\n-        httpHeaders.set(HttpConstants.HttpHeaders.VERSION, HttpConstants.Versions.CURRENT_VERSION);\n-\n-        UserAgentContainer userAgentContainer = new UserAgentContainer();\n-        String userAgentSuffix = this.connectionPolicy.getUserAgentSuffix();\n-        if (userAgentSuffix != null && userAgentSuffix.length() > 0) {\n-            userAgentContainer.setSuffix(userAgentSuffix);\n-        }\n-\n-        httpHeaders.set(HttpConstants.HttpHeaders.USER_AGENT, userAgentContainer.getUserAgent());\n-        httpHeaders.set(HttpConstants.HttpHeaders.API_TYPE, Constants.Properties.SQL_API_TYPE);", "originalCommit": "39fa9221dd222332b74dce47d08ca5e7e4eface3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc4MDgxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384780815", "bodyText": "Checked with Jake , for .NET code is there to send apiType on all gateway calls , but currently it is taking ApiType.None, which is is filtered out when call goes to gateway.\nNow for java we have one place for all gateway calls ,we can include that in common place . We can track this item separately", "author": "simplynaveen20", "createdAt": "2020-02-26T21:35:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMjYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc5ODU4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384798585", "bodyText": "thanks", "author": "moderakh", "createdAt": "2020-02-26T22:11:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMjYxMg=="}], "type": "inlineReview", "revised_code": {"commit": "d27cde4738dbe5db8cfa725c732b34bf817f6fe2", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayServiceConfigurationReader.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayServiceConfigurationReader.java\nindex a9af7d876f3..adb678c0788 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayServiceConfigurationReader.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GatewayServiceConfigurationReader.java\n\n@@ -24,13 +24,10 @@ import java.util.Map;\n  */\n public class GatewayServiceConfigurationReader {\n \n-    private URI serviceEndpoint;\n     private GlobalEndpointManager globalEndpointManager;\n \n-    public GatewayServiceConfigurationReader(URI serviceEndpoint, GlobalEndpointManager globalEndpointManager) {\n-        this.serviceEndpoint = serviceEndpoint;\n+    public GatewayServiceConfigurationReader(GlobalEndpointManager globalEndpointManager) {\n         this.globalEndpointManager = globalEndpointManager;\n-        this.globalEndpointManager.getDatabaseAccountFromCache(this.serviceEndpoint).block();\n     }\n \n     public ReplicationPolicy getUserReplicationPolicy() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxOTQ1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384719458", "bodyText": "does this mean there is a window of time where there is an invalid result in the cache?", "author": "moderakh", "createdAt": "2020-02-26T19:38:44Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java", "diffHunk": "@@ -253,8 +274,27 @@ private void startRefreshLocationTimerAsync() {\n     }\n \n     private Mono<DatabaseAccount> getDatabaseAccountAsync(URI serviceEndpoint) {\n-        return this.owner.getDatabaseAccountFromEndpoint(serviceEndpoint)\n-            .doOnNext(i -> logger.debug(\"account retrieved: {}\", i)).single();\n+        final GlobalEndpointManager that = this;\n+        Callable<Mono<DatabaseAccount>> fetchDatabaseAccount = () -> {\n+            return that.owner.getDatabaseAccountFromEndpoint(serviceEndpoint).doOnNext(databaseAccount -> {\n+                if(databaseAccount != null) {\n+                    this.latestDatabaseAccount = databaseAccount;\n+                }\n+\n+                logger.debug(\"account retrieved: {}\", databaseAccount);\n+            }).single();\n+        };\n+\n+        Mono<DatabaseAccount> obsoleteValueMono = databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, fetchDatabaseAccount);\n+        return obsoleteValueMono.flatMap(obsoleteValue -> {\n+            if (firstTimeDatabaseAccountInitialization.compareAndSet(true, false)) {\n+                return Mono.just(obsoleteValue);\n+            }\n+            return databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, obsoleteValue, fetchDatabaseAccount).doOnError(t -> {\n+                //Putting back the old value in cache, this will avoid cache corruption\n+                databaseAccountAsyncCache.set(StringUtils.EMPTY, obsoleteValue);", "originalCommit": "39fa9221dd222332b74dce47d08ca5e7e4eface3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczMTE0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384731141", "bodyText": "Yes", "author": "simplynaveen20", "createdAt": "2020-02-26T19:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxOTQ1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3ODc2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8466#discussion_r384778763", "bodyText": "Removed cache as per offline discussion", "author": "simplynaveen20", "createdAt": "2020-02-26T21:32:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxOTQ1OA=="}], "type": "inlineReview", "revised_code": {"commit": "d27cde4738dbe5db8cfa725c732b34bf817f6fe2", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java\nindex ce6231af5b3..2bd3e9a6c0d 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/GlobalEndpointManager.java\n\n@@ -274,27 +267,14 @@ public class GlobalEndpointManager implements AutoCloseable {\n     }\n \n     private Mono<DatabaseAccount> getDatabaseAccountAsync(URI serviceEndpoint) {\n-        final GlobalEndpointManager that = this;\n-        Callable<Mono<DatabaseAccount>> fetchDatabaseAccount = () -> {\n-            return that.owner.getDatabaseAccountFromEndpoint(serviceEndpoint).doOnNext(databaseAccount -> {\n+        return this.owner.getDatabaseAccountFromEndpoint(serviceEndpoint)\n+            .doOnNext(databaseAccount -> {\n                 if(databaseAccount != null) {\n                     this.latestDatabaseAccount = databaseAccount;\n                 }\n \n                 logger.debug(\"account retrieved: {}\", databaseAccount);\n             }).single();\n-        };\n-\n-        Mono<DatabaseAccount> obsoleteValueMono = databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, null, fetchDatabaseAccount);\n-        return obsoleteValueMono.flatMap(obsoleteValue -> {\n-            if (firstTimeDatabaseAccountInitialization.compareAndSet(true, false)) {\n-                return Mono.just(obsoleteValue);\n-            }\n-            return databaseAccountAsyncCache.getAsync(StringUtils.EMPTY, obsoleteValue, fetchDatabaseAccount).doOnError(t -> {\n-                //Putting back the old value in cache, this will avoid cache corruption\n-                databaseAccountAsyncCache.set(StringUtils.EMPTY, obsoleteValue);\n-            });\n-        });\n     }\n \n     public boolean isClosed() {\n"}}, {"oid": "d27cde4738dbe5db8cfa725c732b34bf817f6fe2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d27cde4738dbe5db8cfa725c732b34bf817f6fe2", "message": "removing cahce logic", "committedDate": "2020-02-26T21:06:59Z", "type": "commit"}, {"oid": "9b8c10c3c63f73108ecc5c1f17adc7d698ed2968", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9b8c10c3c63f73108ecc5c1f17adc7d698ed2968", "message": "resolving conflicts", "committedDate": "2020-02-27T18:01:57Z", "type": "commit"}, {"oid": "9b74188735e2e9d613924e8885b7c08084caba8a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9b74188735e2e9d613924e8885b7c08084caba8a", "message": "resolving conflicts", "committedDate": "2020-02-27T18:47:14Z", "type": "commit"}]}