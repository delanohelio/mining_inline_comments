{"pr_number": 7628, "pr_title": "Guava Version Downgrade to 25.0-jre", "pr_createdAt": "2020-01-22T21:30:03Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/7628", "timeline": [{"oid": "462f24008d1511adeee3134b7a8624484ea22e2f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/462f24008d1511adeee3134b7a8624484ea22e2f", "message": "Updated pom.xml to use guava version 25.0-jre, and copied lenientFormat method from version 27.0.1-jre", "committedDate": "2020-01-22T21:28:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxNTk3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7628#discussion_r369815976", "bodyText": "Lets please get clarification on required claims context from OSS", "author": "kirankumarkolli", "createdAt": "2020-01-22T21:34:49Z", "path": "sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/Utils.java", "diffHunk": "@@ -552,4 +557,91 @@ public ValueHolder(V v) {\n         holder.v = dictionary.remove(key);\n         return holder.v != null;\n     }\n+", "originalCommit": "462f24008d1511adeee3134b7a8624484ea22e2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxNjgyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7628#discussion_r369816826", "bodyText": "Waiting for PR to be approved, and then will start the OSS process.\nJust want to make sure these changes are good and don't pose any hidden faults before starting the OSS process.", "author": "kushagraThapar", "createdAt": "2020-01-22T21:36:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxNTk3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7a56db6e9b151d519c467e230b9eaa8e25eea6c6", "chunk": "diff --git a/sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/Utils.java b/sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/Utils.java\nindex 5bd32563be9..b102b15edbc 100644\n--- a/sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/Utils.java\n+++ b/sdk/cosmos/microsoft-azure-cosmos/src/main/java/com/azure/data/cosmos/internal/Utils.java\n\n@@ -557,91 +553,4 @@ public class Utils {\n         holder.v = dictionary.remove(key);\n         return holder.v != null;\n     }\n-\n-    /**\n-     * Returns the given {@code template} string with each occurrence of {@code \"%s\"} replaced with\n-     * the corresponding argument value from {@code args}; or, if the placeholder and argument counts\n-     * do not match, returns a best-effort form of that string. Will not throw an exception under\n-     * normal conditions.\n-     *\n-     * <p><b>Note:</b> For most string-formatting needs, use {@link String#format String.format},\n-     * {@link java.io.PrintWriter#format PrintWriter.format}, and related methods. These support the\n-     * full range of <a\n-     * href=\"https://docs.oracle.com/javase/9/docs/api/java/util/Formatter.html#syntax\">format\n-     * specifiers</a>, and alert you to usage errors by throwing {@link\n-     * java.util.IllegalFormatException}.\n-     *\n-     * <p>In certain cases, such as outputting debugging information or constructing a message to be\n-     * used for another unchecked exception, an exception during string formatting would serve little\n-     * purpose except to supplant the real information you were trying to provide. These are the cases\n-     * this method is made for; it instead generates a best-effort string with all supplied argument\n-     * values present. This method is also useful in environments such as GWT where {@code\n-     * String.format} is not available. As an example, method implementations of the {@link\n-     * com.google.common.base.Preconditions} class use this formatter, for both of the reasons just discussed.\n-     *\n-     * <p><b>Warning:</b> Only the exact two-character placeholder sequence {@code \"%s\"} is\n-     * recognized.\n-     *\n-     * @param template a string containing zero or more {@code \"%s\"} placeholder sequences. {@code\n-     *     null} is treated as the four-character string {@code \"null\"}.\n-     * @param args the arguments to be substituted into the message template. The first argument\n-     *     specified is substituted for the first occurrence of {@code \"%s\"} in the template, and so\n-     *     forth. A {@code null} argument is converted to the four-character string {@code \"null\"};\n-     *     non-null values are converted to strings using {@link Object#toString()}.\n-     * @since guava - 25.1\n-     */\n-    // TODO(diamondm) consider using Arrays.toString() for array parameters\n-    public static String lenientFormat(\n-        String template, Object ... args) {\n-        template = String.valueOf(template); // null -> \"null\"\n-\n-        if (args == null) {\n-            args = new Object[] {\"(Object[])null\"};\n-        } else {\n-            for (int i = 0; i < args.length; i++) {\n-                args[i] = lenientToString(args[i]);\n-            }\n-        }\n-\n-        // start substituting the arguments into the '%s' placeholders\n-        StringBuilder builder = new StringBuilder(template.length() + 16 * args.length);\n-        int templateStart = 0;\n-        int i = 0;\n-        while (i < args.length) {\n-            int placeholderStart = template.indexOf(\"%s\", templateStart);\n-            if (placeholderStart == -1) {\n-                break;\n-            }\n-            builder.append(template, templateStart, placeholderStart);\n-            builder.append(args[i++]);\n-            templateStart = placeholderStart + 2;\n-        }\n-        builder.append(template, templateStart, template.length());\n-\n-        // if we run out of placeholders, append the extra args in square braces\n-        if (i < args.length) {\n-            builder.append(\" [\");\n-            builder.append(args[i++]);\n-            while (i < args.length) {\n-                builder.append(\", \");\n-                builder.append(args[i++]);\n-            }\n-            builder.append(']');\n-        }\n-\n-        return builder.toString();\n-    }\n-\n-    private static String lenientToString(Object o) {\n-        try {\n-            return String.valueOf(o);\n-        } catch (Exception e) {\n-            // Default toString() behavior - see Object.toString()\n-            String objectToString =\n-                o.getClass().getName() + '@' + Integer.toHexString(System.identityHashCode(o));\n-            // Logger is created inline with fixed name to avoid forcing Proguard to create another class.\n-            logger.warn(\"Exception during lenientFormat for \" + objectToString, e);\n-            return \"<\" + objectToString + \" threw \" + e.getClass().getName() + \">\";\n-        }\n-    }\n }\n"}}, {"oid": "7a56db6e9b151d519c467e230b9eaa8e25eea6c6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7a56db6e9b151d519c467e230b9eaa8e25eea6c6", "message": "Moved lenientFormat from Utils.java to Strings.java", "committedDate": "2020-01-23T01:28:56Z", "type": "commit"}, {"oid": "97a47ebb4c54e1a791e01e86ea71497048b3dc11", "url": "https://github.com/Azure/azure-sdk-for-java/commit/97a47ebb4c54e1a791e01e86ea71497048b3dc11", "message": "Updated version through external dependencies", "committedDate": "2020-01-23T16:35:30Z", "type": "commit"}, {"oid": "c8e86499d575eaa1e8ebde3708333c74c26f545e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c8e86499d575eaa1e8ebde3708333c74c26f545e", "message": "Created new String.java class in new package guava27", "committedDate": "2020-01-23T18:35:27Z", "type": "commit"}, {"oid": "a32042467194c1ab8fcb521775733b8aab158a31", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a32042467194c1ab8fcb521775733b8aab158a31", "message": "Updated Third party notices.txt and added portions copyright in Strings.java", "committedDate": "2020-01-23T19:42:40Z", "type": "commit"}]}