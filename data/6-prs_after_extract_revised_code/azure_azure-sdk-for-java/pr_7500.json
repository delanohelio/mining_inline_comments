{"pr_number": 7500, "pr_title": "Adding Transport client request life cycle timeline on diagnostics", "pr_createdAt": "2020-01-16T17:16:24Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/7500", "timeline": [{"oid": "8fca1df6d7b616f19f1f287773050ce3b84c144d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8fca1df6d7b616f19f1f287773050ce3b84c144d", "message": "adding transport client granular info to diagnostics", "committedDate": "2020-01-16T17:05:36Z", "type": "commit"}, {"oid": "368756cb2ffdebfeb2ae5986fd6802b269fb94cf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/368756cb2ffdebfeb2ae5986fd6802b269fb94cf", "message": "removing redundant api from RequestTimeline", "committedDate": "2020-01-16T17:26:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NDM1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r373064357", "bodyText": "do we have a specific format for request timeline? is it going to be json?", "author": "moderakh", "createdAt": "2020-01-30T16:44:57Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java", "diffHunk": "@@ -274,6 +280,17 @@ private void printSystemInformation(StringBuilder stringBuilder) {\n         }\n     }\n \n+    private void printTransportRequestTimeline(StringBuilder stringBuilder) {\n+        if (transportRequestTimeline != null) {\n+            stringBuilder.append(\"Transport request timeline -------\").append(System.lineSeparator());\n+            Iterator<RequestTimeline.Event> iterator = transportRequestTimeline.iterator();\n+            while (iterator.hasNext()) {\n+                RequestTimeline.Event event = iterator.next();\n+                stringBuilder.append(\"  eventName = \" + event.getName() + \",  startTime = \" + event.getStartTime() + \",  durationInMicrosec = \" + event.getDuration().toNanos()/1000L).append(System.lineSeparator());", "originalCommit": "368756cb2ffdebfeb2ae5986fd6802b269fb94cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5MzYzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r374893637", "bodyText": "After the latest merge , it will be json , sample is in the PR description for both rntbd and http", "author": "simplynaveen20", "createdAt": "2020-02-04T20:04:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NDM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e33efb174588942202422423c5d92ec6484cd6bc", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java\nindex a0b75698d87..ce24ab0fa3d 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java\n\n@@ -259,96 +200,114 @@ class ClientSideRequestStatistics {\n         this.regionsContacted = regionsContacted;\n     }\n \n-    private void printSystemInformation(StringBuilder stringBuilder) {\n-        try {\n-            long totalMemory = Runtime.getRuntime().totalMemory() / 1024;\n-            long freeMemory = Runtime.getRuntime().freeMemory() / 1024;\n-            long maxMemory = Runtime.getRuntime().maxMemory() / 1024;\n-            String usedMemory = totalMemory - freeMemory + \" KB\";\n-            String availableMemory = (maxMemory - (totalMemory - freeMemory)) + \" KB\";\n-\n-            String processCpuLoad = Double.toString(this.mbean.getProcessCpuLoad());\n-            String systemCpuLoad = Double.toString(this.mbean.getSystemCpuLoad());\n-\n-            stringBuilder.append(\"System State Information -------\").append(System.lineSeparator());\n-            stringBuilder.append(\"Used Memory : \" + usedMemory).append(System.lineSeparator());\n-            stringBuilder.append(\"Available Memory : \" + availableMemory).append(System.lineSeparator());\n-            stringBuilder.append(\"CPU Process Load : \" + processCpuLoad).append(System.lineSeparator());\n-            stringBuilder.append(\"CPU System Load : \" + systemCpuLoad).append(System.lineSeparator());\n-        } catch (Exception e) {\n-            // Error while evaluating system information, do nothing\n+    private static String formatDateTime(ZonedDateTime dateTime) {\n+        if (dateTime == null) {\n+            return null;\n         }\n+        return dateTime.format(RESPONSE_TIME_FORMATTER);\n     }\n \n-    private void printTransportRequestTimeline(StringBuilder stringBuilder) {\n-        if (transportRequestTimeline != null) {\n-            stringBuilder.append(\"Transport request timeline -------\").append(System.lineSeparator());\n-            Iterator<RequestTimeline.Event> iterator = transportRequestTimeline.iterator();\n-            while (iterator.hasNext()) {\n-                RequestTimeline.Event event = iterator.next();\n-                stringBuilder.append(\"  eventName = \" + event.getName() + \",  startTime = \" + event.getStartTime() + \",  durationInMicrosec = \" + event.getDuration().toNanos()/1000L).append(System.lineSeparator());\n-            }\n+    public void recordRetryContext(RxDocumentServiceRequest request) {\n+        if(request.requestContext.retryContext != null) {\n+            request.requestContext.retryContext.retryEndTime =  ZonedDateTime.now(ZoneOffset.UTC);\n+            this.retryContext = new RetryContext(request.requestContext.retryContext);\n         }\n     }\n \n-    private static String formatDateTime(ZonedDateTime dateTime) {\n-        if (dateTime == null) {\n-            return null;\n-        }\n-        return dateTime.format(RESPONSE_TIME_FORMATTER);\n+    static class StoreResponseStatistics {\n+        @JsonSerialize(using = StoreResult.StoreResultSerializer.class)\n+        public StoreResult storeResult;\n+        @JsonSerialize(using = ZonedDateTimeSerializer.class)\n+        public ZonedDateTime requestResponseTime;\n+        public ResourceType requestResourceType;\n+        public OperationType requestOperationType;\n+    }\n+\n+    private class AddressResolutionStatistics {\n+        @JsonSerialize(using = ZonedDateTimeSerializer.class)\n+        public ZonedDateTime startTime;\n+        @JsonSerialize(using = ZonedDateTimeSerializer.class)\n+        public ZonedDateTime endTime;\n+        public String targetEndpoint;\n+    }\n+\n+    private class GatewayStatistics {\n+        public String sessionToken;\n+        public OperationType operationType;\n+        public int statusCode;\n+        public int subStatusCode;\n+        public String requestCharge;\n     }\n \n-    private class StoreResponseStatistics {\n+    private static class SystemInformation {\n+        public String usedMemory;\n+        public String availableMemory;\n+        public String processCpuLoad;\n+        public String systemCpuLoad;\n+    }\n \n-        private ZonedDateTime requestResponseTime;\n-        private StoreResult storeResult;\n-        private ResourceType requestResourceType;\n-        private OperationType requestOperationType;\n+    private static class ZonedDateTimeSerializer extends StdSerializer<ZonedDateTime> {\n+\n+        public ZonedDateTimeSerializer() {\n+            super(ZonedDateTime.class);\n+        }\n \n         @Override\n-        public String toString() {\n-            return \"StoreResponseStatistics{\"\n-                + \"requestResponseTime=\\\"\" + formatDateTime(requestResponseTime) + \"\\\"\" +\n-                \", storeResult=\" + storeResult\n-                + \", requestResourceType=\" + requestResourceType\n-                + \", requestOperationType=\" + requestOperationType\n-                + '}';\n+        public void serialize(ZonedDateTime zonedDateTime,\n+                              JsonGenerator jsonGenerator,\n+                              SerializerProvider serializerProvider) throws IOException {\n+            jsonGenerator.writeObject(formatDateTime(zonedDateTime));\n         }\n     }\n \n-    private class AddressResolutionStatistics {\n-        private ZonedDateTime startTime;\n-        private ZonedDateTime endTime;\n-        private String targetEndpoint;\n+    public static class ClientSideRequestStatisticsSerializer extends StdSerializer<ClientSideRequestStatistics> {\n \n-        AddressResolutionStatistics() {\n+        public ClientSideRequestStatisticsSerializer(){\n+            super(ClientSideRequestStatistics.class);\n         }\n \n         @Override\n-        public String toString() {\n-            return \"AddressResolutionStatistics{\" +\n-                \"startTime=\\\"\" + formatDateTime(startTime) + \"\\\"\" +\n-                \", endTime=\\\"\" + formatDateTime(endTime) + \"\\\"\" +\n-                \", targetEndpoint='\" + targetEndpoint + '\\'' +\n-                '}';\n-        }\n-    }\n+        public void serialize(ClientSideRequestStatistics statistics, JsonGenerator generator, SerializerProvider provider) throws IOException {\n+            generator.writeStartObject();\n+            long requestLatency = statistics.getRequestLatency().toMillis();;\n+            generator.writeNumberField(\"requestLatency\", requestLatency);\n+            generator.writeStringField(\"requestStartTime\", formatDateTime(statistics.requestStartTime));\n+            generator.writeStringField(\"requestEndTime\", formatDateTime(statistics.requestEndTime));\n+            generator.writeObjectField(\"connectionMode\", statistics.connectionMode);\n+            generator.writeObjectField(\"responseStatisticsList\", statistics.responseStatisticsList);\n+            int supplementalResponseStatisticsListCount = statistics.supplementalResponseStatisticsList.size();\n+            int initialIndex =\n+                Math.max(supplementalResponseStatisticsListCount - MAX_SUPPLEMENTAL_REQUESTS_FOR_TO_STRING, 0);\n+            if (initialIndex != 0) {\n+                List<StoreResponseStatistics> subList = statistics.supplementalResponseStatisticsList.subList(initialIndex, supplementalResponseStatisticsListCount);\n+                generator.writeObjectField(\"supplementalResponseStatisticsList\", subList);\n+            } else{\n+                generator.writeObjectField(\"supplementalResponseStatisticsList\", statistics.supplementalResponseStatisticsList);\n+            }\n \n-    private class GatewayStatistic {\n-        private OperationType operationType;\n-        private int statusCode;\n-        private int subStatusCode;\n-        private String sessionToken;\n-        private String requestCharge;\n-\n-        public String toString() {\n-            return \"Gateway statistics{ \" +\n-                \"Operation Type : \" + this.operationType +\n-                \"Status Code : \" + this.statusCode +\n-                \"Substatus Code : \" + this.statusCode +\n-                \"Session Token : \" + this.sessionToken +\n-                \"Request Charge : \" + requestCharge +\n-                '}';\n+            generator.writeObjectField(\"addressResolutionStatistics\", statistics.addressResolutionStatistics);\n+            generator.writeObjectField(\"regionsContacted\", statistics.regionsContacted);\n+            generator.writeObjectField(\"retryContext\", statistics.retryContext);\n+            generator.writeObjectField(\"gatewayStatistics\", statistics.gatewayStatistics);\n+            generator.writeObjectField(\"transportRequestTimeline\", statistics.transportRequestTimeline);\n+\n+            try {\n+                SystemInformation systemInformation = new SystemInformation();\n+                long totalMemory = Runtime.getRuntime().totalMemory() / 1024;\n+                long freeMemory = Runtime.getRuntime().freeMemory() / 1024;\n+                long maxMemory = Runtime.getRuntime().maxMemory() / 1024;\n+                systemInformation.usedMemory = totalMemory - freeMemory + \" KB\";\n+                systemInformation.availableMemory = (maxMemory - (totalMemory - freeMemory)) + \" KB\";\n+\n+                OperatingSystemMXBean mbean = (com.sun.management.OperatingSystemMXBean)\n+                    ManagementFactory.getOperatingSystemMXBean();\n+                systemInformation.processCpuLoad = mbean.getProcessCpuLoad()*100 +  \" %\";\n+                systemInformation.systemCpuLoad = mbean.getSystemCpuLoad()*100 +  \" %\";\n+                generator.writeObjectField(\"systemInformation\", systemInformation);\n+            } catch (Exception e) {\n+                // Error while evaluating system information, do nothing\n+            }\n+            generator.writeEndObject();\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NTA2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r373065068", "bodyText": "I wonder why we have mixture of Duration and Long for representing time.\nIs there a specific reason we are not using the same type?", "author": "moderakh", "createdAt": "2020-01-30T16:46:05Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RequestTimeline.java", "diffHunk": "@@ -148,25 +149,33 @@ public String toString() {\n         return RntbdObjectMapper.toString(this);\n     }\n \n-    @JsonPropertyOrder({ \"name\", \"time\", \"duration\" })\n+    @JsonPropertyOrder({ \"name\", \"startTime\", \"durationInMicroSec\" })\n     public static final class Event {\n \n-        @JsonSerialize(using = ToStringSerializer.class)\n+        @JsonIgnore\n         private final Duration duration;\n \n+        @JsonSerialize(using = ToStringSerializer.class)\n+        private final long durationInMicroSec;", "originalCommit": "368756cb2ffdebfeb2ae5986fd6802b269fb94cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5NDY3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r374894671", "bodyText": "Reason is  these numbers will be so small,  i want to show it in micro sec , and didn't want to introduce new serializer class for this one variable , however i am good with anything , please let me know.", "author": "simplynaveen20", "createdAt": "2020-02-04T20:06:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NTA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "e33efb174588942202422423c5d92ec6484cd6bc", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RequestTimeline.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RequestTimeline.java\nindex 4baa6b73c1d..713277b586e 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RequestTimeline.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RequestTimeline.java\n\n@@ -158,6 +159,7 @@ public final class RequestTimeline implements Iterable<RequestTimeline.Event> {\n         @JsonSerialize(using = ToStringSerializer.class)\n         private final long durationInMicroSec;\n \n+        @JsonProperty(\"eventName\")\n         private final String name;\n \n         @JsonSerialize(using = ToStringSerializer.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NjcxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r373066711", "bodyText": "shouldn't we capture the timeline inside the response instead of the request?\nWhy are capturing the timeline in the request not the response?", "author": "moderakh", "createdAt": "2020-01-30T16:48:55Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java", "diffHunk": "@@ -271,6 +276,14 @@ private String ensureSlashPrefixed(String path) {\n             return contentObservable\n                        .flatMap(content -> {\n                            try {\n+                               //Adding transport client request timeline to diagnostics\n+                               ReactorNettyRequestRecord reactorNettyRequestRecord = httpResponseTuple.getRight();\n+                               if (reactorNettyRequestRecord != null) {\n+                                   reactorNettyRequestRecord.setTimeCompleted(OffsetDateTime.now());", "originalCommit": "368756cb2ffdebfeb2ae5986fd6802b269fb94cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NTc3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r373885774", "bodyText": "this is just a question, please provide the reason why this should go to request not response", "author": "moderakh", "createdAt": "2020-02-02T23:45:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NjcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5NTI4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r374895282", "bodyText": "All the diagnostic we capture in request , as it flows to different pipeline, retries , capturing different data , and once we have the response then we transfer the diagnostic from request to response.", "author": "simplynaveen20", "createdAt": "2020-02-04T20:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NjcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU1MTE0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r375551143", "bodyText": "Moved ReactorNettyRequestRecord into HttpRequest", "author": "simplynaveen20", "createdAt": "2020-02-05T22:46:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NjcxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "ee44a27504a3fa57c61bc67e80dd1048f018ddd5", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java\nindex 6c07267c1cd..5b4e357d8c0 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxGatewayStoreModel.java\n\n@@ -277,7 +274,7 @@ class RxGatewayStoreModel implements RxStoreModel {\n                        .flatMap(content -> {\n                            try {\n                                //Adding transport client request timeline to diagnostics\n-                               ReactorNettyRequestRecord reactorNettyRequestRecord = httpResponseTuple.getRight();\n+                               ReactorNettyRequestRecord reactorNettyRequestRecord = httpResponse.request().getReactorNettyRequestRecord();\n                                if (reactorNettyRequestRecord != null) {\n                                    reactorNettyRequestRecord.setTimeCompleted(OffsetDateTime.now());\n                                    BridgeInternal.setTransportClientRequestTimelineOnDiagnostics(request.requestContext.cosmosResponseDiagnostics,\n"}}, {"oid": "e33efb174588942202422423c5d92ec6484cd6bc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e33efb174588942202422423c5d92ec6484cd6bc", "message": "merge with feature v4", "committedDate": "2020-02-04T20:03:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxNDk5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r375414990", "bodyText": "this will be somewhat a cascading change.\ndue to changing Mono< HttpResponse> to Mono< ReactorNettyRequestRecord>\nHow about making ReactorNettyRequestRecord an entry of HttpResponse? Thought?\nso the method return signature will still be Mono but this HttpResponse will be subclass of HttpResponse which will have ReactorNettyRequestRecord\nthoughts?", "author": "moderakh", "createdAt": "2020-02-05T17:58:35Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java", "diffHunk": "@@ -106,6 +109,34 @@ private void configureChannelPipelineHandlers() {\n                 .single();\n     }\n \n+    @Override\n+    public Mono<Pair<HttpResponse, ReactorNettyRequestRecord>> send(HttpRequest request, ReactorNettyRequestRecord reactorNettyRequestRecord) {", "originalCommit": "e33efb174588942202422423c5d92ec6484cd6bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU1MTQ5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r375551495", "bodyText": "Moved ReactorNettyRequestRecord into HttpRequest , and HttpResponse have the reference of  ReactorNettyRequestRecord  via HttpRequest", "author": "simplynaveen20", "createdAt": "2020-02-05T22:47:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxNDk5MA=="}], "type": "inlineReview", "revised_code": {"commit": "ee44a27504a3fa57c61bc67e80dd1048f018ddd5", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java\nindex 62c64514c8e..e7017d727d1 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java\n\n@@ -109,34 +126,6 @@ class ReactorNettyClient implements HttpClient {\n                 .single();\n     }\n \n-    @Override\n-    public Mono<Pair<HttpResponse, ReactorNettyRequestRecord>> send(HttpRequest request, ReactorNettyRequestRecord reactorNettyRequestRecord) {\n-        Objects.requireNonNull(request.httpMethod());\n-        Objects.requireNonNull(request.uri());\n-        Objects.requireNonNull(this.httpClientConfig);\n-\n-        return this.httpClient\n-            .observe((connection, state) -> {\n-                    OffsetDateTime time = OffsetDateTime.now();\n-                    if(state.equals(HttpClientState.CONNECTED) || state.equals(HttpClientState.ACQUIRED)){\n-                        reactorNettyRequestRecord.setTimeConnected(time);\n-                    } else if(state.equals(HttpClientState.CONFIGURED)){\n-                        reactorNettyRequestRecord.setTimeConfigured(time);\n-                    } else if(state.equals(HttpClientState.REQUEST_SENT)){\n-                        reactorNettyRequestRecord.setTimeSent(time);\n-                    } else if(state.equals(HttpClientState.RESPONSE_RECEIVED)){\n-                        reactorNettyRequestRecord.setTimeReceived(time);\n-                    }\n-            })\n-            .keepAlive(this.httpClientConfig.isConnectionKeepAlive())\n-            .port(request.port())\n-            .request(HttpMethod.valueOf(request.httpMethod().toString()))\n-            .uri(request.uri().toString())\n-            .send(bodySendDelegate(request))\n-            .responseConnection(responseDelegatePair(request, reactorNettyRequestRecord))\n-            .single();\n-    }\n-\n     /**\n      * Delegate to send the request content.\n      *\n"}}, {"oid": "ee44a27504a3fa57c61bc67e80dd1048f018ddd5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ee44a27504a3fa57c61bc67e80dd1048f018ddd5", "message": "moving ReactorNettyRequestRecord inside HttpRequest", "committedDate": "2020-02-05T22:39:27Z", "type": "commit"}, {"oid": "a09e096a084b6eac07d4441083446a40c0c51d1b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a09e096a084b6eac07d4441083446a40c0c51d1b", "message": "clearing unused import", "committedDate": "2020-02-05T22:45:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxMDM2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r376210363", "bodyText": "One argument per line.", "author": "kirankumarkolli", "createdAt": "2020-02-07T04:32:09Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java", "diffHunk": "@@ -418,6 +413,10 @@ public static CosmosResponseDiagnostics createCosmosResponseDiagnostics() {\n         return new CosmosResponseDiagnostics();\n     }\n \n+    public static void setTransportClientRequestTimelineOnDiagnostics(CosmosResponseDiagnostics cosmosResponseDiagnostics, RequestTimeline requestTimeline) {", "originalCommit": "a09e096a084b6eac07d4441083446a40c0c51d1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU4NzM1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r376587352", "bodyText": "Done", "author": "simplynaveen20", "createdAt": "2020-02-07T20:16:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxMDM2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c2b33027b423ec0f64f1ce662c0696c5e44d694d", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java\nindex 5ddc3664904..ed4a74337a9 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java\n\n@@ -413,7 +413,8 @@ public class BridgeInternal {\n         return new CosmosResponseDiagnostics();\n     }\n \n-    public static void setTransportClientRequestTimelineOnDiagnostics(CosmosResponseDiagnostics cosmosResponseDiagnostics, RequestTimeline requestTimeline) {\n+    public static void setTransportClientRequestTimelineOnDiagnostics(CosmosResponseDiagnostics cosmosResponseDiagnostics,\n+                                                                      RequestTimeline requestTimeline) {\n         cosmosResponseDiagnostics.clientSideRequestStatistics().setTransportClientRequestTimeline(requestTimeline);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxMDU4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r376210587", "bodyText": "What's the client stats context/scope?\nIn-case the request is retried will it override existing timeline?", "author": "kirankumarkolli", "createdAt": "2020-02-07T04:33:28Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java", "diffHunk": "@@ -418,6 +413,10 @@ public static CosmosResponseDiagnostics createCosmosResponseDiagnostics() {\n         return new CosmosResponseDiagnostics();\n     }\n \n+    public static void setTransportClientRequestTimelineOnDiagnostics(CosmosResponseDiagnostics cosmosResponseDiagnostics, RequestTimeline requestTimeline) {\n+        cosmosResponseDiagnostics.clientSideRequestStatistics().setTransportClientRequestTimeline(requestTimeline);", "originalCommit": "a09e096a084b6eac07d4441083446a40c0c51d1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwMzMxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r376503316", "bodyText": "It will be the transportclient stats of successful response", "author": "simplynaveen20", "createdAt": "2020-02-07T17:05:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxMDU4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU4ODc5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r376588795", "bodyText": "Handled the scenario where we create multiple sub requests for single  request in case of consistency check on other replica. Now transportRequestTimeline is moved from parent clientSideRequestStatistics to StoreResult", "author": "simplynaveen20", "createdAt": "2020-02-07T20:20:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxMDU4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c2b33027b423ec0f64f1ce662c0696c5e44d694d", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java\nindex 5ddc3664904..ed4a74337a9 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java\n\n@@ -413,7 +413,8 @@ public class BridgeInternal {\n         return new CosmosResponseDiagnostics();\n     }\n \n-    public static void setTransportClientRequestTimelineOnDiagnostics(CosmosResponseDiagnostics cosmosResponseDiagnostics, RequestTimeline requestTimeline) {\n+    public static void setTransportClientRequestTimelineOnDiagnostics(CosmosResponseDiagnostics cosmosResponseDiagnostics,\n+                                                                      RequestTimeline requestTimeline) {\n         cosmosResponseDiagnostics.clientSideRequestStatistics().setTransportClientRequestTimeline(requestTimeline);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE4MDQ5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r376180491", "bodyText": "It is the duration of the sent event that represents the transit time.\nThis has me thinking that giving meaningful names to duration fields would be useful to us and end users in two ways:\n\nCommunicating the meaning of duration\nLabeling charts and graphs with event time on the x axis and duration on the y axis.\n\nExample:\nThe sent event follows message encoding and occurs once it is confirmed that the message is on the wire. The duration of the sent event is the time that it takes for a round-trip to the server to complete and the next event occurs: received. The time between these two events--sent and received-- is the transitTime.\nSomething like this JSON is what we should produce--perhaps word-smithed and simplified for brevity:\n{\n  \"event\": {\n    \"name\": \"sent\", \n    \"time\": \"<time-stamp>\"\n  }, \n  \"duration\": { \n    \"name\": \"transitTime\", \n    \"microseconds\": <microseconds> \n  }\n}\n\nI've discussed this with Naveen and Mo. We agreed that this work should be done on another PR. I've logged this issue to track the work which I will assign to myself for now: #8034", "author": "David-Noble-at-work", "createdAt": "2020-02-07T02:01:19Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestRecord.java", "diffHunk": "@@ -217,7 +217,7 @@ public RequestTimeline takeTimelineSnapshot() {\n                 timeQueued, timePipelined == null ? timeCompletedOrNow : timePipelined),", "originalCommit": "a09e096a084b6eac07d4441083446a40c0c51d1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU4NzMwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7500#discussion_r376587301", "bodyText": "Thanks David", "author": "simplynaveen20", "createdAt": "2020-02-07T20:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE4MDQ5MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "c2b33027b423ec0f64f1ce662c0696c5e44d694d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c2b33027b423ec0f64f1ce662c0696c5e44d694d", "message": "adding rntbd request response on each store response", "committedDate": "2020-02-07T20:13:56Z", "type": "commit"}, {"oid": "50a8859a99354ed9837ea34fbff70b2e7c3a5e1a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/50a8859a99354ed9837ea34fbff70b2e7c3a5e1a", "message": "removing extra import", "committedDate": "2020-02-07T20:28:16Z", "type": "commit"}]}