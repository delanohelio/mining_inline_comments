{"pr_number": 15850, "pr_title": "Add EventGrid distributed tracing", "pr_createdAt": "2020-10-01T00:40:42Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/15850", "timeline": [{"oid": "6c08b4cfc4ee781346279ec2d82421e2b5cd33be", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6c08b4cfc4ee781346279ec2d82421e2b5cd33be", "message": "Add EventGrid distributed tracing", "committedDate": "2020-09-30T23:25:14Z", "type": "commit"}, {"oid": "c7749baf129d9ed6304415794e624ab04b232f2f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c7749baf129d9ed6304415794e624ab04b232f2f", "message": "Change version number from Integer to Long", "committedDate": "2020-09-30T23:56:40Z", "type": "commit"}, {"oid": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/66070e9ecf19c2ac89710f588c7a5b9bfdf3087a", "message": "Test different headers", "committedDate": "2020-10-01T00:40:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5MTg1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497891850", "bodyText": "Make sure to check context for null on the calling function to avoid NPE when doing addData", "author": "samvaity", "createdAt": "2020-10-01T00:51:45Z", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -85,10 +92,12 @@ public EventGridServiceVersion getServiceVersion() {\n     }\n \n     Mono<Void> sendCloudEvents(Iterable<CloudEvent> events, Context context) {\n+        this.addCloudEventTracePlaceHolder(events);\n         return Flux.fromIterable(events)\n             .map(CloudEvent::toImpl)\n             .collectList()\n-            .flatMap(list -> this.impl.publishCloudEventEventsAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishCloudEventEventsAsync(this.hostname, list,\n+                context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));", "originalCommit": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNDM3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498404377", "bodyText": "Does withContext guarantee context to be not null?", "author": "YijunXieMS", "createdAt": "2020-10-01T17:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5MTg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2NzI3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498467274", "bodyText": "In some cases, we end up calling this from the sync client and hence the context could be null. Need a check there when passing.", "author": "samvaity", "createdAt": "2020-10-01T19:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5MTg1MA=="}], "type": "inlineReview", "revised_code": {"commit": "e8f0686594b9fbd006b04db6303a8845754af878", "chunk": "diff --git a/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java b/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java\nindex 0010835f268..96dc3b6a0d9 100644\n--- a/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java\n+++ b/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java\n\n@@ -88,6 +93,9 @@ public final class EventGridPublisherAsyncClient {\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<Void> sendCloudEvents(Iterable<CloudEvent> events) {\n+        if (events == null) {\n+            return monoError(logger, new NullPointerException(\"'events' cannot be null.\"));\n+        }\n         return withContext(context -> sendCloudEvents(events, context));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5MjQ0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497892445", "bodyText": "Do we need both?", "author": "samvaity", "createdAt": "2020-10-01T00:52:39Z", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -158,6 +171,21 @@ public EventGridServiceVersion getServiceVersion() {\n     Mono<Response<Void>> sendCustomEventsWithResponse(Iterable<Object> events, Context context) {\n         return Flux.fromIterable(events)\n             .collectList()\n-            .flatMap(list -> this.impl.publishCustomEventEventsWithResponseAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishCustomEventEventsWithResponseAsync(this.hostname, list,\n+                context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));\n+    }\n+\n+    private void addCloudEventTracePlaceHolder(Iterable<CloudEvent> events) {\n+        if (TracerProxy.isTracingEnabled()) {\n+            for (CloudEvent event : events) {\n+                if (event.getExtensionAttributes() == null ||\n+                    (event.getExtensionAttributes().get(Constants.TRACE_PARENT) == null &&\n+                    event.getExtensionAttributes().get(Constants.TRACE_STATE) == null)) {\n+\n+                    event.addExtensionAttribute(Constants.TRACE_PARENT, Constants.TRACE_PARENT_PLACEHOLDER);\n+                    event.addExtensionAttribute(Constants.TRACE_STATE, Constants.TRACE_STATE_PLACEHOLDER);", "originalCommit": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMDgxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498510815", "bodyText": "I put the two placeholder separately. After placeholder replacement, whatever in the request headers will be put into the body eventually. There won't be two in the header has just one.", "author": "YijunXieMS", "createdAt": "2020-10-01T21:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5MjQ0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e8f0686594b9fbd006b04db6303a8845754af878", "chunk": "diff --git a/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java b/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java\nindex 0010835f268..96dc3b6a0d9 100644\n--- a/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java\n+++ b/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java\n\n@@ -165,6 +182,9 @@ public final class EventGridPublisherAsyncClient {\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<Response<Void>> sendCustomEventsWithResponse(Iterable<Object> events) {\n+        if (events == null) {\n+            return monoError(logger, new NullPointerException(\"'events' cannot be null.\"));\n+        }\n         return withContext(context -> sendCustomEventsWithResponse(events, context));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5MzgyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497893820", "bodyText": "Add this to the Constants file where the value is declared.", "author": "samvaity", "createdAt": "2020-10-01T00:54:47Z", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -33,6 +36,9 @@\n \n     private final EventGridServiceVersion serviceVersion;\n \n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+", "originalCommit": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMDA2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498510067", "bodyText": "I copied the value there but didn't copy the comment ;-(. Corrected.", "author": "YijunXieMS", "createdAt": "2020-10-01T20:59:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5MzgyMA=="}], "type": "inlineReview", "revised_code": {"commit": "e8f0686594b9fbd006b04db6303a8845754af878", "chunk": "diff --git a/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java b/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java\nindex 0010835f268..96dc3b6a0d9 100644\n--- a/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java\n+++ b/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java\n\n@@ -36,8 +38,8 @@ public final class EventGridPublisherAsyncClient {\n \n     private final EventGridServiceVersion serviceVersion;\n \n-    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n-    // for more information on Azure resource provider namespaces.\n+    private final ClientLogger logger = new ClientLogger(EventGridPublisherAsyncClient.class);\n+\n \n     EventGridPublisherAsyncClient(HttpPipeline pipeline, String hostname, SerializerAdapter serializerAdapter,\n                                   EventGridServiceVersion serviceVersion) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5NDcwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497894703", "bodyText": "We shouldn't manually be updating a generated file?", "author": "samvaity", "createdAt": "2020-10-01T00:56:02Z", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/systemevents/AcsChatMessageEventBaseProperties.java", "diffHunk": "@@ -45,7 +45,7 @@\n      * The version of the message\n      */\n     @JsonProperty(value = \"version\")\n-    private Integer version;\n+    private Long version;", "originalCommit": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNTg0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498405841", "bodyText": "This change is because the swagger is changed and code is re-generated. Not a manual change.", "author": "YijunXieMS", "createdAt": "2020-10-01T17:28:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5NDcwMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5Mjg2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497892869", "bodyText": "Not sure how this resource provide namespace link is relevant to the constructor.", "author": "srnagar", "createdAt": "2020-10-01T00:53:17Z", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -33,6 +36,9 @@\n \n     private final EventGridServiceVersion serviceVersion;\n \n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.", "originalCommit": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNjI5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498406294", "bodyText": "It's for a constant, which is copied to Constants.java but I didn't copy this together. Good catch.", "author": "YijunXieMS", "createdAt": "2020-10-01T17:29:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5Mjg2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e8f0686594b9fbd006b04db6303a8845754af878", "chunk": "diff --git a/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java b/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java\nindex 0010835f268..96dc3b6a0d9 100644\n--- a/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java\n+++ b/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java\n\n@@ -36,8 +38,8 @@ public final class EventGridPublisherAsyncClient {\n \n     private final EventGridServiceVersion serviceVersion;\n \n-    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n-    // for more information on Azure resource provider namespaces.\n+    private final ClientLogger logger = new ClientLogger(EventGridPublisherAsyncClient.class);\n+\n \n     EventGridPublisherAsyncClient(HttpPipeline pipeline, String hostname, SerializerAdapter serializerAdapter,\n                                   EventGridServiceVersion serviceVersion) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5Mzk3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497893971", "bodyText": "Should have a null check for context before using it.", "author": "srnagar", "createdAt": "2020-10-01T00:54:58Z", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -70,7 +76,8 @@ public EventGridServiceVersion getServiceVersion() {\n         return Flux.fromIterable(events)\n             .map(EventGridEvent::toImpl)\n             .collectList()\n-            .flatMap(list -> this.impl.publishEventsAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishEventsAsync(this.hostname,\n+                list, context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));", "originalCommit": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMTk3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498511979", "bodyText": "This internal api is called by a public API, which calls FluxUtil.withContext to create a Context. So I assume the context won't be null.\nIn debugging, I see it's an empty Context instance instead of null.", "author": "YijunXieMS", "createdAt": "2020-10-01T21:03:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5Mzk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNjU4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498536584", "bodyText": "@YijunXieMS - this method is also called from sync client and the user can pass a null context.\nUser can call sendEventsWithResponse(events, null)\n    public Response<Void> sendEventsWithResponse(Iterable<EventGridEvent> events, Context context) {\n        return asyncClient.sendEventsWithResponse(events, context).block();\n    }", "author": "srnagar", "createdAt": "2020-10-01T22:07:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5Mzk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e8f0686594b9fbd006b04db6303a8845754af878", "chunk": "diff --git a/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java b/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java\nindex 0010835f268..96dc3b6a0d9 100644\n--- a/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java\n+++ b/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java\n\n@@ -69,6 +71,9 @@ public final class EventGridPublisherAsyncClient {\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<Void> sendEvents(Iterable<EventGridEvent> events) {\n+        if (events == null) {\n+            return monoError(logger, new NullPointerException(\"'events' cannot be null.\"));\n+        }\n         return withContext(context -> sendEvents(events, context));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5NjUxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497896514", "bodyText": "events can be null since the public APIs don't seem to check. It might be better to have the null check and include an error message to indicate that events cannot be null.", "author": "srnagar", "createdAt": "2020-10-01T00:58:47Z", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -158,6 +171,21 @@ public EventGridServiceVersion getServiceVersion() {\n     Mono<Response<Void>> sendCustomEventsWithResponse(Iterable<Object> events, Context context) {\n         return Flux.fromIterable(events)\n             .collectList()\n-            .flatMap(list -> this.impl.publishCustomEventEventsWithResponseAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishCustomEventEventsWithResponseAsync(this.hostname, list,\n+                context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));\n+    }\n+\n+    private void addCloudEventTracePlaceHolder(Iterable<CloudEvent> events) {\n+        if (TracerProxy.isTracingEnabled()) {\n+            for (CloudEvent event : events) {", "originalCommit": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMjExNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498512115", "bodyText": "Added null check like in EventHubs", "author": "YijunXieMS", "createdAt": "2020-10-01T21:03:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5NjUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "e8f0686594b9fbd006b04db6303a8845754af878", "chunk": "diff --git a/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java b/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java\nindex 0010835f268..96dc3b6a0d9 100644\n--- a/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java\n+++ b/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java\n\n@@ -165,6 +182,9 @@ public final class EventGridPublisherAsyncClient {\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<Response<Void>> sendCustomEventsWithResponse(Iterable<Object> events) {\n+        if (events == null) {\n+            return monoError(logger, new NullPointerException(\"'events' cannot be null.\"));\n+        }\n         return withContext(context -> sendCustomEventsWithResponse(events, context));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5NzA2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497897062", "bodyText": "Add javadoc", "author": "srnagar", "createdAt": "2020-10-01T00:59:45Z", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.messaging.eventgrid.implementation;\n+\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.tracing.TracerProxy;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+\n+\n+public class CloudEventTracingPipelinePolicy implements HttpPipelinePolicy {", "originalCommit": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMjE2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498512165", "bodyText": "Added", "author": "YijunXieMS", "createdAt": "2020-10-01T21:03:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg5NzA2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e8f0686594b9fbd006b04db6303a8845754af878", "chunk": "diff --git a/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java b/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java\nindex 38ed9e52b2d..a16e44ce53e 100644\n--- a/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java\n+++ b/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java\n\n@@ -9,38 +9,68 @@ import com.azure.core.http.policy.HttpPipelinePolicy;\n import com.azure.core.util.tracing.TracerProxy;\n import reactor.core.publisher.Mono;\n \n-import java.nio.ByteBuffer;\n import java.nio.charset.StandardCharsets;\n \n-\n+import com.azure.messaging.eventgrid.CloudEvent;\n+/**\n+ * This pipeline policy should be added after OpenTelemetryPolicy in the http pipeline.\n+ *\n+ * It checks whether the {@link HttpRequest} headers have \"traceparent\" or \"tracestate\" and whether the serialized\n+ * http body json string for a list of {@link CloudEvent} instances has place holders\n+ * {@link Constants#TRACE_PARENT_PLACEHOLDER} or {@link Constants#TRACE_STATE_PLACEHOLDER}.\n+ * The place holders will be replaced by the value from headers if the headers have \"traceparent\" or \"tracestate\",\n+ * or be removed if the headers don't have.\n+ *\n+ * The place holders won't exist in the json string if the {@link TracerProxy#isTracingEnabled()} returns false.\n+ */\n public class CloudEventTracingPipelinePolicy implements HttpPipelinePolicy {\n     @Override\n     public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n         final HttpRequest request = context.getHttpRequest();\n         final HttpHeader contentType = request.getHeaders().get(Constants.CONTENT_TYPE);\n+        StringBuilder bodyStringBuilder = new StringBuilder();\n         if (TracerProxy.isTracingEnabled() && contentType != null &&\n             Constants.CLOUD_EVENT_CONTENT_TYPE.equals(contentType.getValue())) {\n-            return request.getBody().map(byteBuffer ->\n-                replaceTracingPlaceHolder(request, byteBuffer)).then(next.process());\n+            return request.getBody().map(byteBuffer -> bodyStringBuilder.append(new String(byteBuffer.array(),\n+                StandardCharsets.UTF_8)))\n+                .then(Mono.fromCallable(() -> replaceTracingPlaceHolder(request, bodyStringBuilder)))\n+                .then(next.process());\n         }\n         else {\n             return next.process();\n         }\n     }\n \n-    static String replaceTracingPlaceHolder(HttpRequest request, ByteBuffer byteBuffer) {\n-        String bodyString = new String(byteBuffer.array(), StandardCharsets.UTF_8);\n-        final HttpHeader traceparentHeader = request.getHeaders().get(Constants.TRACE_PARENT);\n-        final HttpHeader tracestateHeader = request.getHeaders().get(Constants.TRACE_STATE);\n-        bodyString = bodyString.replace(Constants.TRACE_PARENT_REPLACE,\n-            traceparentHeader != null\n-                ? String.format(\",\\\"%s\\\":\\\"%s\\\"\", Constants.TRACE_PARENT,\n-                traceparentHeader.getValue()) : \"\");\n-        bodyString = bodyString.replace(Constants.TRACE_STATE_REPLACE,\n-            tracestateHeader != null\n-                ? String.format(\",\\\"%s\\\":\\\"%s\\\"\", Constants.TRACE_STATE, tracestateHeader.getValue()) : \"\");\n-        request.setHeader(Constants.CONTENT_LENGTH, String.valueOf(bodyString.length()));\n-        request.setBody(bodyString);\n-        return bodyString;\n+    /**\n+     *\n+     * @param request The {@link HttpRequest}, whose body will be mutated by replacing traceparent and tracestate\n+     *                placeholders.\n+     * @param bodyStringBuilder The {@link StringBuilder} that contains the full HttpRequest body string.\n+     * @return The new body string with the place holders replaced (if header has tracing)\n+     * or removed (if header no tracing).\n+     */\n+    static String replaceTracingPlaceHolder(HttpRequest request, StringBuilder bodyStringBuilder) {\n+        final int traceParentPlaceHolderIndex = bodyStringBuilder.indexOf(Constants.TRACE_PARENT_PLACEHOLDER);\n+        if (traceParentPlaceHolderIndex >= 0) { // There is \"traceparent\" placeholder in body, replace it.\n+            final HttpHeader traceparentHeader = request.getHeaders().get(Constants.TRACE_PARENT);\n+            bodyStringBuilder.replace(traceParentPlaceHolderIndex,\n+                Constants.TRACE_PARENT_PLACEHOLDER.length() + traceParentPlaceHolderIndex,\n+                traceparentHeader != null\n+                    ? String.format(\",\\\"%s\\\":\\\"%s\\\"\", Constants.TRACE_PARENT, traceparentHeader.getValue())\n+                    : \"\");\n+        }\n+        final int traceStatePlaceHolderIndex = bodyStringBuilder.indexOf(Constants.TRACE_STATE_PLACEHOLDER);\n+        if (traceStatePlaceHolderIndex >= 0) { // There is \"tracestate\" placeholder in body, replace it.\n+            final HttpHeader tracestateHeader = request.getHeaders().get(Constants.TRACE_STATE);\n+            bodyStringBuilder.replace(traceStatePlaceHolderIndex,\n+                Constants.TRACE_STATE_PLACEHOLDER.length() + traceStatePlaceHolderIndex,\n+                tracestateHeader != null\n+                    ? String.format(\",\\\"%s\\\":\\\"%s\\\"\", Constants.TRACE_STATE, tracestateHeader.getValue())\n+                    : \"\");\n+        }\n+        String newBodyString = bodyStringBuilder.toString();\n+        request.setHeader(Constants.CONTENT_LENGTH, String.valueOf(newBodyString.length()));\n+        request.setBody(newBodyString);\n+        return newBodyString;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkwMjY2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497902661", "bodyText": "Can the Flux stream have strings that are split across multiple ByteBuffer boundaries?", "author": "srnagar", "createdAt": "2020-10-01T01:08:36Z", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.messaging.eventgrid.implementation;\n+\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.tracing.TracerProxy;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+\n+\n+public class CloudEventTracingPipelinePolicy implements HttpPipelinePolicy {\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        final HttpRequest request = context.getHttpRequest();\n+        final HttpHeader contentType = request.getHeaders().get(Constants.CONTENT_TYPE);\n+        if (TracerProxy.isTracingEnabled() && contentType != null &&\n+            Constants.CLOUD_EVENT_CONTENT_TYPE.equals(contentType.getValue())) {\n+            return request.getBody().map(byteBuffer ->\n+                replaceTracingPlaceHolder(request, byteBuffer)).then(next.process());\n+        }\n+        else {\n+            return next.process();\n+        }\n+    }\n+\n+    static String replaceTracingPlaceHolder(HttpRequest request, ByteBuffer byteBuffer) {\n+        String bodyString = new String(byteBuffer.array(), StandardCharsets.UTF_8);", "originalCommit": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMjQ4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498512487", "bodyText": "Changed to use a StringBuilder to take everything from the Flux. Good question.", "author": "YijunXieMS", "createdAt": "2020-10-01T21:04:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkwMjY2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e8f0686594b9fbd006b04db6303a8845754af878", "chunk": "diff --git a/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java b/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java\nindex 38ed9e52b2d..a16e44ce53e 100644\n--- a/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java\n+++ b/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java\n\n@@ -9,38 +9,68 @@ import com.azure.core.http.policy.HttpPipelinePolicy;\n import com.azure.core.util.tracing.TracerProxy;\n import reactor.core.publisher.Mono;\n \n-import java.nio.ByteBuffer;\n import java.nio.charset.StandardCharsets;\n \n-\n+import com.azure.messaging.eventgrid.CloudEvent;\n+/**\n+ * This pipeline policy should be added after OpenTelemetryPolicy in the http pipeline.\n+ *\n+ * It checks whether the {@link HttpRequest} headers have \"traceparent\" or \"tracestate\" and whether the serialized\n+ * http body json string for a list of {@link CloudEvent} instances has place holders\n+ * {@link Constants#TRACE_PARENT_PLACEHOLDER} or {@link Constants#TRACE_STATE_PLACEHOLDER}.\n+ * The place holders will be replaced by the value from headers if the headers have \"traceparent\" or \"tracestate\",\n+ * or be removed if the headers don't have.\n+ *\n+ * The place holders won't exist in the json string if the {@link TracerProxy#isTracingEnabled()} returns false.\n+ */\n public class CloudEventTracingPipelinePolicy implements HttpPipelinePolicy {\n     @Override\n     public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n         final HttpRequest request = context.getHttpRequest();\n         final HttpHeader contentType = request.getHeaders().get(Constants.CONTENT_TYPE);\n+        StringBuilder bodyStringBuilder = new StringBuilder();\n         if (TracerProxy.isTracingEnabled() && contentType != null &&\n             Constants.CLOUD_EVENT_CONTENT_TYPE.equals(contentType.getValue())) {\n-            return request.getBody().map(byteBuffer ->\n-                replaceTracingPlaceHolder(request, byteBuffer)).then(next.process());\n+            return request.getBody().map(byteBuffer -> bodyStringBuilder.append(new String(byteBuffer.array(),\n+                StandardCharsets.UTF_8)))\n+                .then(Mono.fromCallable(() -> replaceTracingPlaceHolder(request, bodyStringBuilder)))\n+                .then(next.process());\n         }\n         else {\n             return next.process();\n         }\n     }\n \n-    static String replaceTracingPlaceHolder(HttpRequest request, ByteBuffer byteBuffer) {\n-        String bodyString = new String(byteBuffer.array(), StandardCharsets.UTF_8);\n-        final HttpHeader traceparentHeader = request.getHeaders().get(Constants.TRACE_PARENT);\n-        final HttpHeader tracestateHeader = request.getHeaders().get(Constants.TRACE_STATE);\n-        bodyString = bodyString.replace(Constants.TRACE_PARENT_REPLACE,\n-            traceparentHeader != null\n-                ? String.format(\",\\\"%s\\\":\\\"%s\\\"\", Constants.TRACE_PARENT,\n-                traceparentHeader.getValue()) : \"\");\n-        bodyString = bodyString.replace(Constants.TRACE_STATE_REPLACE,\n-            tracestateHeader != null\n-                ? String.format(\",\\\"%s\\\":\\\"%s\\\"\", Constants.TRACE_STATE, tracestateHeader.getValue()) : \"\");\n-        request.setHeader(Constants.CONTENT_LENGTH, String.valueOf(bodyString.length()));\n-        request.setBody(bodyString);\n-        return bodyString;\n+    /**\n+     *\n+     * @param request The {@link HttpRequest}, whose body will be mutated by replacing traceparent and tracestate\n+     *                placeholders.\n+     * @param bodyStringBuilder The {@link StringBuilder} that contains the full HttpRequest body string.\n+     * @return The new body string with the place holders replaced (if header has tracing)\n+     * or removed (if header no tracing).\n+     */\n+    static String replaceTracingPlaceHolder(HttpRequest request, StringBuilder bodyStringBuilder) {\n+        final int traceParentPlaceHolderIndex = bodyStringBuilder.indexOf(Constants.TRACE_PARENT_PLACEHOLDER);\n+        if (traceParentPlaceHolderIndex >= 0) { // There is \"traceparent\" placeholder in body, replace it.\n+            final HttpHeader traceparentHeader = request.getHeaders().get(Constants.TRACE_PARENT);\n+            bodyStringBuilder.replace(traceParentPlaceHolderIndex,\n+                Constants.TRACE_PARENT_PLACEHOLDER.length() + traceParentPlaceHolderIndex,\n+                traceparentHeader != null\n+                    ? String.format(\",\\\"%s\\\":\\\"%s\\\"\", Constants.TRACE_PARENT, traceparentHeader.getValue())\n+                    : \"\");\n+        }\n+        final int traceStatePlaceHolderIndex = bodyStringBuilder.indexOf(Constants.TRACE_STATE_PLACEHOLDER);\n+        if (traceStatePlaceHolderIndex >= 0) { // There is \"tracestate\" placeholder in body, replace it.\n+            final HttpHeader tracestateHeader = request.getHeaders().get(Constants.TRACE_STATE);\n+            bodyStringBuilder.replace(traceStatePlaceHolderIndex,\n+                Constants.TRACE_STATE_PLACEHOLDER.length() + traceStatePlaceHolderIndex,\n+                tracestateHeader != null\n+                    ? String.format(\",\\\"%s\\\":\\\"%s\\\"\", Constants.TRACE_STATE, tracestateHeader.getValue())\n+                    : \"\");\n+        }\n+        String newBodyString = bodyStringBuilder.toString();\n+        request.setHeader(Constants.CONTENT_LENGTH, String.valueOf(newBodyString.length()));\n+        request.setBody(newBodyString);\n+        return newBodyString;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkwNjQzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r497906439", "bodyText": "It is not very clear why we are replacing the trace names. It might be good to add some documentation for this method.", "author": "srnagar", "createdAt": "2020-10-01T01:14:21Z", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.azure.messaging.eventgrid.implementation;\n+\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.tracing.TracerProxy;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+\n+\n+public class CloudEventTracingPipelinePolicy implements HttpPipelinePolicy {\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        final HttpRequest request = context.getHttpRequest();\n+        final HttpHeader contentType = request.getHeaders().get(Constants.CONTENT_TYPE);\n+        if (TracerProxy.isTracingEnabled() && contentType != null &&\n+            Constants.CLOUD_EVENT_CONTENT_TYPE.equals(contentType.getValue())) {\n+            return request.getBody().map(byteBuffer ->\n+                replaceTracingPlaceHolder(request, byteBuffer)).then(next.process());\n+        }\n+        else {\n+            return next.process();\n+        }\n+    }\n+\n+    static String replaceTracingPlaceHolder(HttpRequest request, ByteBuffer byteBuffer) {\n+        String bodyString = new String(byteBuffer.array(), StandardCharsets.UTF_8);\n+        final HttpHeader traceparentHeader = request.getHeaders().get(Constants.TRACE_PARENT);\n+        final HttpHeader tracestateHeader = request.getHeaders().get(Constants.TRACE_STATE);\n+        bodyString = bodyString.replace(Constants.TRACE_PARENT_REPLACE,", "originalCommit": "66070e9ecf19c2ac89710f588c7a5b9bfdf3087a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMjc5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498512795", "bodyText": "Added Javadoc and some comments.", "author": "YijunXieMS", "createdAt": "2020-10-01T21:05:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzkwNjQzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "e8f0686594b9fbd006b04db6303a8845754af878", "chunk": "diff --git a/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java b/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java\nindex 38ed9e52b2d..a16e44ce53e 100644\n--- a/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java\n+++ b/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java\n\n@@ -9,38 +9,68 @@ import com.azure.core.http.policy.HttpPipelinePolicy;\n import com.azure.core.util.tracing.TracerProxy;\n import reactor.core.publisher.Mono;\n \n-import java.nio.ByteBuffer;\n import java.nio.charset.StandardCharsets;\n \n-\n+import com.azure.messaging.eventgrid.CloudEvent;\n+/**\n+ * This pipeline policy should be added after OpenTelemetryPolicy in the http pipeline.\n+ *\n+ * It checks whether the {@link HttpRequest} headers have \"traceparent\" or \"tracestate\" and whether the serialized\n+ * http body json string for a list of {@link CloudEvent} instances has place holders\n+ * {@link Constants#TRACE_PARENT_PLACEHOLDER} or {@link Constants#TRACE_STATE_PLACEHOLDER}.\n+ * The place holders will be replaced by the value from headers if the headers have \"traceparent\" or \"tracestate\",\n+ * or be removed if the headers don't have.\n+ *\n+ * The place holders won't exist in the json string if the {@link TracerProxy#isTracingEnabled()} returns false.\n+ */\n public class CloudEventTracingPipelinePolicy implements HttpPipelinePolicy {\n     @Override\n     public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n         final HttpRequest request = context.getHttpRequest();\n         final HttpHeader contentType = request.getHeaders().get(Constants.CONTENT_TYPE);\n+        StringBuilder bodyStringBuilder = new StringBuilder();\n         if (TracerProxy.isTracingEnabled() && contentType != null &&\n             Constants.CLOUD_EVENT_CONTENT_TYPE.equals(contentType.getValue())) {\n-            return request.getBody().map(byteBuffer ->\n-                replaceTracingPlaceHolder(request, byteBuffer)).then(next.process());\n+            return request.getBody().map(byteBuffer -> bodyStringBuilder.append(new String(byteBuffer.array(),\n+                StandardCharsets.UTF_8)))\n+                .then(Mono.fromCallable(() -> replaceTracingPlaceHolder(request, bodyStringBuilder)))\n+                .then(next.process());\n         }\n         else {\n             return next.process();\n         }\n     }\n \n-    static String replaceTracingPlaceHolder(HttpRequest request, ByteBuffer byteBuffer) {\n-        String bodyString = new String(byteBuffer.array(), StandardCharsets.UTF_8);\n-        final HttpHeader traceparentHeader = request.getHeaders().get(Constants.TRACE_PARENT);\n-        final HttpHeader tracestateHeader = request.getHeaders().get(Constants.TRACE_STATE);\n-        bodyString = bodyString.replace(Constants.TRACE_PARENT_REPLACE,\n-            traceparentHeader != null\n-                ? String.format(\",\\\"%s\\\":\\\"%s\\\"\", Constants.TRACE_PARENT,\n-                traceparentHeader.getValue()) : \"\");\n-        bodyString = bodyString.replace(Constants.TRACE_STATE_REPLACE,\n-            tracestateHeader != null\n-                ? String.format(\",\\\"%s\\\":\\\"%s\\\"\", Constants.TRACE_STATE, tracestateHeader.getValue()) : \"\");\n-        request.setHeader(Constants.CONTENT_LENGTH, String.valueOf(bodyString.length()));\n-        request.setBody(bodyString);\n-        return bodyString;\n+    /**\n+     *\n+     * @param request The {@link HttpRequest}, whose body will be mutated by replacing traceparent and tracestate\n+     *                placeholders.\n+     * @param bodyStringBuilder The {@link StringBuilder} that contains the full HttpRequest body string.\n+     * @return The new body string with the place holders replaced (if header has tracing)\n+     * or removed (if header no tracing).\n+     */\n+    static String replaceTracingPlaceHolder(HttpRequest request, StringBuilder bodyStringBuilder) {\n+        final int traceParentPlaceHolderIndex = bodyStringBuilder.indexOf(Constants.TRACE_PARENT_PLACEHOLDER);\n+        if (traceParentPlaceHolderIndex >= 0) { // There is \"traceparent\" placeholder in body, replace it.\n+            final HttpHeader traceparentHeader = request.getHeaders().get(Constants.TRACE_PARENT);\n+            bodyStringBuilder.replace(traceParentPlaceHolderIndex,\n+                Constants.TRACE_PARENT_PLACEHOLDER.length() + traceParentPlaceHolderIndex,\n+                traceparentHeader != null\n+                    ? String.format(\",\\\"%s\\\":\\\"%s\\\"\", Constants.TRACE_PARENT, traceparentHeader.getValue())\n+                    : \"\");\n+        }\n+        final int traceStatePlaceHolderIndex = bodyStringBuilder.indexOf(Constants.TRACE_STATE_PLACEHOLDER);\n+        if (traceStatePlaceHolderIndex >= 0) { // There is \"tracestate\" placeholder in body, replace it.\n+            final HttpHeader tracestateHeader = request.getHeaders().get(Constants.TRACE_STATE);\n+            bodyStringBuilder.replace(traceStatePlaceHolderIndex,\n+                Constants.TRACE_STATE_PLACEHOLDER.length() + traceStatePlaceHolderIndex,\n+                tracestateHeader != null\n+                    ? String.format(\",\\\"%s\\\":\\\"%s\\\"\", Constants.TRACE_STATE, tracestateHeader.getValue())\n+                    : \"\");\n+        }\n+        String newBodyString = bodyStringBuilder.toString();\n+        request.setHeader(Constants.CONTENT_LENGTH, String.valueOf(newBodyString.length()));\n+        request.setBody(newBodyString);\n+        return newBodyString;\n     }\n }\n"}}, {"oid": "e8f0686594b9fbd006b04db6303a8845754af878", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e8f0686594b9fbd006b04db6303a8845754af878", "message": "Update for code review comments", "committedDate": "2020-10-01T20:58:55Z", "type": "commit"}, {"oid": "6cf5d796c03e39094d509d4b06baea8784af7abd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6cf5d796c03e39094d509d4b06baea8784af7abd", "message": "Add profiles", "committedDate": "2020-10-01T22:10:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNjc2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498536769", "bodyText": "I think my comment about user passing null for context applies to this method.", "author": "srnagar", "createdAt": "2020-10-01T22:08:19Z", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java", "diffHunk": "@@ -116,14 +137,18 @@ public EventGridServiceVersion getServiceVersion() {\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<Response<Void>> sendEventsWithResponse(Iterable<EventGridEvent> events) {\n+        if (events == null) {\n+            return monoError(logger, new NullPointerException(\"'events' cannot be null.\"));\n+        }\n         return withContext(context -> sendEventsWithResponse(events, context));\n     }\n \n     Mono<Response<Void>> sendEventsWithResponse(Iterable<EventGridEvent> events, Context context) {\n         return Flux.fromIterable(events)\n             .map(EventGridEvent::toImpl)\n             .collectList()\n-            .flatMap(list -> this.impl.publishEventsWithResponseAsync(this.hostname, list, context));\n+            .flatMap(list -> this.impl.publishEventsWithResponseAsync(this.hostname, list,\n+                context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));", "originalCommit": "e8f0686594b9fbd006b04db6303a8845754af878", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb6b320fea1f7acf62828851646051b4994251ef", "chunk": "diff --git a/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java b/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java\nindex 96dc3b6a0d9..c1c212d340d 100644\n--- a/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java\n+++ b/sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/EventGridPublisherAsyncClient.java\n\n@@ -144,11 +147,12 @@ public final class EventGridPublisherAsyncClient {\n     }\n \n     Mono<Response<Void>> sendEventsWithResponse(Iterable<EventGridEvent> events, Context context) {\n+        final Context finalContext = context != null ? context : Context.NONE;\n         return Flux.fromIterable(events)\n             .map(EventGridEvent::toImpl)\n             .collectList()\n             .flatMap(list -> this.impl.publishEventsWithResponseAsync(this.hostname, list,\n-                context.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));\n+                finalContext.addData(AZ_TRACING_NAMESPACE_KEY, Constants.EVENT_GRID_TRACING_NAMESPACE_VALUE)));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MDQ0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498540446", "bodyText": "Do we want the request headers to have the keys of tracestate and traceparent with empty values ?\n\ntraceparentHeader != null\n? String.format(\",\"%s\":\"%s\"\", Constants.TRACE_PARENT, traceparentHeader.getValue())\n: \"\")\n\nI think we should skip updating the key value if traceparentHeader == null.", "author": "samvaity", "createdAt": "2020-10-01T22:19:43Z", "path": "sdk/eventgrid/azure-messaging-eventgrid/src/main/java/com/azure/messaging/eventgrid/implementation/CloudEventTracingPipelinePolicy.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.azure.messaging.eventgrid.implementation;\n+\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.tracing.TracerProxy;\n+import reactor.core.publisher.Mono;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import com.azure.messaging.eventgrid.CloudEvent;\n+/**\n+ * This pipeline policy should be added after OpenTelemetryPolicy in the http pipeline.\n+ *\n+ * It checks whether the {@link HttpRequest} headers have \"traceparent\" or \"tracestate\" and whether the serialized\n+ * http body json string for a list of {@link CloudEvent} instances has place holders\n+ * {@link Constants#TRACE_PARENT_PLACEHOLDER} or {@link Constants#TRACE_STATE_PLACEHOLDER}.\n+ * The place holders will be replaced by the value from headers if the headers have \"traceparent\" or \"tracestate\",\n+ * or be removed if the headers don't have.\n+ *\n+ * The place holders won't exist in the json string if the {@link TracerProxy#isTracingEnabled()} returns false.\n+ */\n+public class CloudEventTracingPipelinePolicy implements HttpPipelinePolicy {\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        final HttpRequest request = context.getHttpRequest();\n+        final HttpHeader contentType = request.getHeaders().get(Constants.CONTENT_TYPE);\n+        StringBuilder bodyStringBuilder = new StringBuilder();\n+        if (TracerProxy.isTracingEnabled() && contentType != null &&\n+            Constants.CLOUD_EVENT_CONTENT_TYPE.equals(contentType.getValue())) {\n+            return request.getBody().map(byteBuffer -> bodyStringBuilder.append(new String(byteBuffer.array(),\n+                StandardCharsets.UTF_8)))\n+                .then(Mono.fromCallable(() -> replaceTracingPlaceHolder(request, bodyStringBuilder)))\n+                .then(next.process());\n+        }\n+        else {\n+            return next.process();\n+        }\n+    }\n+\n+    /**\n+     *\n+     * @param request The {@link HttpRequest}, whose body will be mutated by replacing traceparent and tracestate\n+     *                placeholders.\n+     * @param bodyStringBuilder The {@link StringBuilder} that contains the full HttpRequest body string.\n+     * @return The new body string with the place holders replaced (if header has tracing)\n+     * or removed (if header no tracing).\n+     */\n+    static String replaceTracingPlaceHolder(HttpRequest request, StringBuilder bodyStringBuilder) {\n+        final int traceParentPlaceHolderIndex = bodyStringBuilder.indexOf(Constants.TRACE_PARENT_PLACEHOLDER);\n+        if (traceParentPlaceHolderIndex >= 0) { // There is \"traceparent\" placeholder in body, replace it.\n+            final HttpHeader traceparentHeader = request.getHeaders().get(Constants.TRACE_PARENT);\n+            bodyStringBuilder.replace(traceParentPlaceHolderIndex,\n+                Constants.TRACE_PARENT_PLACEHOLDER.length() + traceParentPlaceHolderIndex,\n+                traceparentHeader != null\n+                    ? String.format(\",\\\"%s\\\":\\\"%s\\\"\", Constants.TRACE_PARENT, traceparentHeader.getValue())\n+                    : \"\");", "originalCommit": "6cf5d796c03e39094d509d4b06baea8784af7abd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU1NzU0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15850#discussion_r498557541", "bodyText": "Clarified offline, this is not updating the request headers.", "author": "samvaity", "createdAt": "2020-10-01T23:21:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MDQ0Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "823f9e251fe0596c41f178d1508d23fef30a8dbf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/823f9e251fe0596c41f178d1508d23fef30a8dbf", "message": "Correct package name", "committedDate": "2020-10-01T23:16:17Z", "type": "commit"}, {"oid": "fb6b320fea1f7acf62828851646051b4994251ef", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fb6b320fea1f7acf62828851646051b4994251ef", "message": "Add null check for context", "committedDate": "2020-10-01T23:18:10Z", "type": "commit"}, {"oid": "0b52b7b59e5a3b943efc96dbd665f74cc0693d6b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0b52b7b59e5a3b943efc96dbd665f74cc0693d6b", "message": "Disable maven-surefire-plugin parallel", "committedDate": "2020-10-01T23:39:25Z", "type": "commit"}, {"oid": "bb471525987cc08119f580c02751854367083690", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bb471525987cc08119f580c02751854367083690", "message": "Disable maven-surefire-plugin parallel", "committedDate": "2020-10-02T01:05:41Z", "type": "commit"}, {"oid": "42be18843bec43fe815717479de0c0286e127b4d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/42be18843bec43fe815717479de0c0286e127b4d", "message": "opens com.azure.messaging.eventgrid.implementation in module-info.java", "committedDate": "2020-10-02T01:16:05Z", "type": "commit"}]}