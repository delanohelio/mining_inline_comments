{"pr_number": 10431, "pr_title": "Add a convenience API to create poller flux error instance", "pr_createdAt": "2020-04-22T21:01:31Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/10431", "timeline": [{"oid": "c742a3341989cd37dcbd72299f6d72101beda102", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c742a3341989cd37dcbd72299f6d72101beda102", "message": "Add a convenience API to create poller flux error instance", "committedDate": "2020-04-22T20:03:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM0MDU2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10431#discussion_r413340567", "bodyText": "so this is the equivalent of Mono.error or Flux.error in PollerFlux.  The activation will never succeeded so all subscriptions are going to get the error from the activation stage. The other functions (finalResult, Poll) will never get called. lgtm.", "author": "anuchandy", "createdAt": "2020-04-22T21:19:23Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -162,6 +162,22 @@ private PollerFlux(Duration pollInterval,\n         this.syncActivationOperation = cxt -> activationOperation.apply(cxt).block();\n     }\n \n+    /**\n+     * Creates a poller flux instance that returns an error on subscription.\n+     *\n+     * @param ex The exception to be returned on subscription of this {@link PollerFlux}.\n+     * @param <T> The type of poll response value.\n+     * @param <U> The type of the final result of long running operation.\n+     * @return A poller flux instance that returns an error without emitting any data.\n+     *\n+     * @see {@link Mono#error(Throwable)}\n+     * @see {@link Flux#error(Throwable)}\n+     */\n+    public static <T, U> PollerFlux<T, U> error(Exception ex) {\n+        return new PollerFlux<>(Duration.ofMillis(1L), context -> Mono.error(ex), context -> Mono.error(ex),\n+            (context, response) -> Mono.error(ex), context -> Mono.error(ex));\n+    }", "originalCommit": "c742a3341989cd37dcbd72299f6d72101beda102", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM0Mjk1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10431#discussion_r413342957", "bodyText": "Yes, that's correct! This will return the error from activation function. Since poll, finalResult and cancel functions cannot be null, I just add the same error to all of them.", "author": "srnagar", "createdAt": "2020-04-22T21:23:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM0MDU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM4OTE4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10431#discussion_r413389181", "bodyText": "was thinking a little more about this. So if we create the PollerFlux like below then parameter validations are delayed until consumer subscribe.\nnew PollerFlux<Foo, Void>(Duration.ofMillis(3),\n    // The Activation Function\n    new Function<PollingContext<Foo>, Mono<Foo>>() {\n        @Override\n        public Mono<Foo> apply(PollingContext<Foo> pollingContext) {\n            Mono<Foo> initMono = startLro(start_params);\n            return initMono;\n        }\n    },\n    // The Poll Function\n    new Function<PollingContext<Foo>, Mono<PollResponse<Foo>>>() {\n        @Override\n        public Mono<PollResponse<Foo>> apply(PollingContext<Foo> fooPollingContext) {\n            Mono<PollResponse<Foo>> pollMono = doOnePoll(poll_params);\n            return pollMono;\n        }\n    },\n    // The Cancel Function\n    ....,\n    // The final result function\n    ....);\n\nAny such delayed param validation error from the activation function will be bubbled up.\nBut any such delayed param validation error from poll function will not bubbled up since the polling loop continue to poll on error.\n\nThe above behavior of two functions are the same for both local param validation and the server returned an error. The PollerFlux.error cannot be used in this pattern.\nOn the other hand, if we create the PollerFlux like below where we do param validation eagerly in sync path then yes we can use PollerFlux.error to catch and convert to async error.\nBut PollerFlux.error is not to bubble up the error that poller function produce in the async path (e.g. error from service), polling loop will continue to poll like today.  I guess we are aware of this but wanted to ensure.\nnew PollerFlux<Foo, Void>(Duration.ofMillis(3),\n    // The Activation Function\n    getStartMonoFunction(start_params),\n    // The Poll Function\n    getPollMonoFunction(poll_params),\n    // The Cancel Function\n    ...,\n    // The final result function\n    ...);\n\n// The Activation Function\nFunction<PollingContext<Foo>, Mono<Foo>> getStartMonoFunction(start_params) {\n    // validation of \"start_params\" parameters and throwing of error outside reactor path\n    return new Function<PollingContext<Foo>, Mono<Foo>>() {\n        @Override\n        public Mono<Foo> apply(PollingContext<Foo> pollingContext) {\n            Mono<Foo> initMono = startLro(start_params);\n            return initMono;\n        }\n    };\n}\n\n// The Poll Function\nFunction<PollingContext<Foo>, Mono<PollResponse<Foo>>> getPollMonoFunction(poll_params) {\n     // validation of \"poll_params\" and throwing of error outside reactor path\n    return new Function<PollingContext<Foo>, Mono<PollResponse<Foo>>>() {\n        @Override\n        public Mono<PollResponse<Foo>> apply(PollingContext<Foo> fooPollingContext) {\n            Mono<PollResponse<Foo>> pollMono = doOnePoll(poll_params);\n            return pollMono;\n        }\n    };\n}", "author": "anuchandy", "createdAt": "2020-04-22T22:58:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM0MDU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQxMDg3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10431#discussion_r413410877", "bodyText": "Yes, @anuchandy, you are right. The intention of creating this method is to do input validation in our public APIs. For e.g.\npublic PollerFlux<Foo, Bar> beginPollingOperation(String data, Duration interval) {\n    try {\n        // All these input validations need to be done right here but will be surfaced to the user through proper error channel by returning PollerFlux.error()\n         Objects.requireNonNull(data);\n         Objects.requireNonNull(interval);\n         if(interval.isZero()) {\n               throw IllegalArgumentException(\"'interval' cannot be zero\");\n         }\n         return new PollerFlux(.....);\n    }\n    catch (Exception ex) {\n          return PollerFlux.error(ex);\n    }\n}", "author": "srnagar", "createdAt": "2020-04-22T23:54:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM0MDU2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "88da5494934008c745492d175630703050e826f6", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java b/sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java\nindex 2637fc1289..702dfbe3ad 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java\n\n@@ -163,15 +164,15 @@ public final class PollerFlux<T, U> extends Flux<AsyncPollResponse<T, U>> {\n     }\n \n     /**\n-     * Creates a poller flux instance that returns an error on subscription.\n+     * Creates a PollerFlux instance that returns an error on subscription.\n      *\n      * @param ex The exception to be returned on subscription of this {@link PollerFlux}.\n      * @param <T> The type of poll response value.\n      * @param <U> The type of the final result of long running operation.\n      * @return A poller flux instance that returns an error without emitting any data.\n      *\n-     * @see {@link Mono#error(Throwable)}\n-     * @see {@link Flux#error(Throwable)}\n+     * @see Mono#error(Throwable)\n+     * @see Flux#error(Throwable)\n      */\n     public static <T, U> PollerFlux<T, U> error(Exception ex) {\n         return new PollerFlux<>(Duration.ofMillis(1L), context -> Mono.error(ex), context -> Mono.error(ex),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NTk5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10431#discussion_r413365998", "bodyText": "Should this use Throwable instead?", "author": "alzimmermsft", "createdAt": "2020-04-22T22:07:44Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -162,6 +162,22 @@ private PollerFlux(Duration pollInterval,\n         this.syncActivationOperation = cxt -> activationOperation.apply(cxt).block();\n     }\n \n+    /**\n+     * Creates a poller flux instance that returns an error on subscription.\n+     *\n+     * @param ex The exception to be returned on subscription of this {@link PollerFlux}.\n+     * @param <T> The type of poll response value.\n+     * @param <U> The type of the final result of long running operation.\n+     * @return A poller flux instance that returns an error without emitting any data.\n+     *\n+     * @see {@link Mono#error(Throwable)}\n+     * @see {@link Flux#error(Throwable)}\n+     */\n+    public static <T, U> PollerFlux<T, U> error(Exception ex) {", "originalCommit": "c742a3341989cd37dcbd72299f6d72101beda102", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM3NTA3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10431#discussion_r413375078", "bodyText": "Initially, I started with Throwable but it conflicts with Flux's error method.\nSo, cannot use Throwable here:\n'error(Throwable)' in 'com.azure.core.util.polling.PollerFlux' clashes with 'error(Throwable)' in 'reactor.core.publisher.Flux'; both methods have same erasure, yet neither hides the other", "author": "srnagar", "createdAt": "2020-04-22T22:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NTk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "88da5494934008c745492d175630703050e826f6", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java b/sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java\nindex 2637fc1289..702dfbe3ad 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java\n\n@@ -163,15 +164,15 @@ public final class PollerFlux<T, U> extends Flux<AsyncPollResponse<T, U>> {\n     }\n \n     /**\n-     * Creates a poller flux instance that returns an error on subscription.\n+     * Creates a PollerFlux instance that returns an error on subscription.\n      *\n      * @param ex The exception to be returned on subscription of this {@link PollerFlux}.\n      * @param <T> The type of poll response value.\n      * @param <U> The type of the final result of long running operation.\n      * @return A poller flux instance that returns an error without emitting any data.\n      *\n-     * @see {@link Mono#error(Throwable)}\n-     * @see {@link Flux#error(Throwable)}\n+     * @see Mono#error(Throwable)\n+     * @see Flux#error(Throwable)\n      */\n     public static <T, U> PollerFlux<T, U> error(Exception ex) {\n         return new PollerFlux<>(Duration.ofMillis(1L), context -> Mono.error(ex), context -> Mono.error(ex),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NjMwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10431#discussion_r413366304", "bodyText": "Do we want this to take a ClientLogger so the exception can be logged? Or is it expected for the caller to log this exception?", "author": "alzimmermsft", "createdAt": "2020-04-22T22:08:32Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -162,6 +162,22 @@ private PollerFlux(Duration pollInterval,\n         this.syncActivationOperation = cxt -> activationOperation.apply(cxt).block();\n     }\n \n+    /**\n+     * Creates a poller flux instance that returns an error on subscription.\n+     *\n+     * @param ex The exception to be returned on subscription of this {@link PollerFlux}.\n+     * @param <T> The type of poll response value.\n+     * @param <U> The type of the final result of long running operation.\n+     * @return A poller flux instance that returns an error without emitting any data.\n+     *\n+     * @see {@link Mono#error(Throwable)}\n+     * @see {@link Flux#error(Throwable)}\n+     */\n+    public static <T, U> PollerFlux<T, U> error(Exception ex) {", "originalCommit": "c742a3341989cd37dcbd72299f6d72101beda102", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NzY4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10431#discussion_r413367685", "bodyText": "This would follow the pattern when dealing with Mono.error, Flux.error, and PagedFlux.error.", "author": "alzimmermsft", "createdAt": "2020-04-22T22:11:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NjMwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM3NTc1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10431#discussion_r413375756", "bodyText": "Logging is expected to be done by the caller. This is just like Mono.error().\nWhat you are referring to is FluxUtils.monoError().", "author": "srnagar", "createdAt": "2020-04-22T22:28:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NjMwNA=="}], "type": "inlineReview", "revised_code": {"commit": "88da5494934008c745492d175630703050e826f6", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java b/sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java\nindex 2637fc1289..702dfbe3ad 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java\n\n@@ -163,15 +164,15 @@ public final class PollerFlux<T, U> extends Flux<AsyncPollResponse<T, U>> {\n     }\n \n     /**\n-     * Creates a poller flux instance that returns an error on subscription.\n+     * Creates a PollerFlux instance that returns an error on subscription.\n      *\n      * @param ex The exception to be returned on subscription of this {@link PollerFlux}.\n      * @param <T> The type of poll response value.\n      * @param <U> The type of the final result of long running operation.\n      * @return A poller flux instance that returns an error without emitting any data.\n      *\n-     * @see {@link Mono#error(Throwable)}\n-     * @see {@link Flux#error(Throwable)}\n+     * @see Mono#error(Throwable)\n+     * @see Flux#error(Throwable)\n      */\n     public static <T, U> PollerFlux<T, U> error(Exception ex) {\n         return new PollerFlux<>(Duration.ofMillis(1L), context -> Mono.error(ex), context -> Mono.error(ex),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2Njc1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10431#discussion_r413366759", "bodyText": "nit: Consistency with the rest of the Javadocs\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Creates a poller flux instance that returns an error on subscription.\n          \n          \n            \n                 * Creates a PollerFlux instance that returns an error on subscription.", "author": "alzimmermsft", "createdAt": "2020-04-22T22:09:20Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -162,6 +162,22 @@ private PollerFlux(Duration pollInterval,\n         this.syncActivationOperation = cxt -> activationOperation.apply(cxt).block();\n     }\n \n+    /**\n+     * Creates a poller flux instance that returns an error on subscription.", "originalCommit": "c742a3341989cd37dcbd72299f6d72101beda102", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "88da5494934008c745492d175630703050e826f6", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java b/sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java\nindex 2637fc1289..702dfbe3ad 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java\n\n@@ -163,15 +164,15 @@ public final class PollerFlux<T, U> extends Flux<AsyncPollResponse<T, U>> {\n     }\n \n     /**\n-     * Creates a poller flux instance that returns an error on subscription.\n+     * Creates a PollerFlux instance that returns an error on subscription.\n      *\n      * @param ex The exception to be returned on subscription of this {@link PollerFlux}.\n      * @param <T> The type of poll response value.\n      * @param <U> The type of the final result of long running operation.\n      * @return A poller flux instance that returns an error without emitting any data.\n      *\n-     * @see {@link Mono#error(Throwable)}\n-     * @see {@link Flux#error(Throwable)}\n+     * @see Mono#error(Throwable)\n+     * @see Flux#error(Throwable)\n      */\n     public static <T, U> PollerFlux<T, U> error(Exception ex) {\n         return new PollerFlux<>(Duration.ofMillis(1L), context -> Mono.error(ex), context -> Mono.error(ex),\n"}}, {"oid": "88da5494934008c745492d175630703050e826f6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/88da5494934008c745492d175630703050e826f6", "message": "Fix checkstyle", "committedDate": "2020-04-22T22:34:34Z", "type": "commit"}]}