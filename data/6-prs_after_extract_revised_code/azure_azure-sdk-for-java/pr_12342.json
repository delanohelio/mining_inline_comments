{"pr_number": 12342, "pr_title": "Reliable download range error", "pr_createdAt": "2020-06-19T00:20:54Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/12342", "timeline": [{"oid": "7734001189cf844797d44c7ad382d63ebf3f86bd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7734001189cf844797d44c7ad382d63ebf3f86bd", "message": "Better handling for errors thrown by network stream after all the bytes have been consumed", "committedDate": "2020-06-19T00:16:09Z", "type": "commit"}, {"oid": "ad0cbecd20c62b41260c74ddc9a31ae41ef1c231", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ad0cbecd20c62b41260c74ddc9a31ae41ef1c231", "message": "Minor cleanup", "committedDate": "2020-06-19T00:19:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2OTE5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12342#discussion_r443669195", "bodyText": "incomplete", "author": "gapra-msft", "createdAt": "2020-06-22T16:06:15Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/ReliableDownload.java", "diffHunk": "@@ -108,16 +116,25 @@ possible the method call that returns a Single is what throws (like how our apis\n         return data\n             .timeout(TIMEOUT_VALUE)\n             .doOnNext(buffer -> {\n-            /*\n-            Update how much data we have received in case we need to retry and propagate to the user the data we\n-            have received.\n-             */\n+                /*\n+                Update how much data we have received in case we need to retry and propagate to the user the data we\n+                have received.\n+                 */\n                 this.info.setOffset(this.info.getOffset() + buffer.remaining());\n                 if (this.info.getCount() != null) {\n                     this.info.setCount(this.info.getCount() - buffer.remaining());\n                 }\n             }).onErrorResume(t2 -> {\n-            // Increment the retry count and try again with the new exception.\n+                /*\n+                 It is possible that the network stream will throw an error after emitting all data but before\n+                 completing. Issuing a retry at this stage would leave the download in a bad state with incorrect count\n+                 and offset values. Because we have read the intended amount of data, we can ignore the error at the end\n+                 of the stream. If count is null and we", "originalCommit": "ad0cbecd20c62b41260c74ddc9a31ae41ef1c231", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9928df1ff8b437a366525d3899d224e002049c5e", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/ReliableDownload.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/ReliableDownload.java\nindex 808225b6a7e..a7c17da7dbc 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/ReliableDownload.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/ReliableDownload.java\n\n@@ -129,9 +131,12 @@ final class ReliableDownload {\n                  It is possible that the network stream will throw an error after emitting all data but before\n                  completing. Issuing a retry at this stage would leave the download in a bad state with incorrect count\n                  and offset values. Because we have read the intended amount of data, we can ignore the error at the end\n-                 of the stream. If count is null and we\n+                 of the stream.\n                  */\n                 if (this.info.getCount() != null && this.info.getCount() == 0) {\n+                    logger.warning(\"Exception encountered in ReliableDownload after all data read from the network but \"\n+                        + \"but before stream signaled completion. Returning success as all data was downloaded. \"\n+                        + \"Exception message: \" + t2.getMessage());\n                     return Flux.empty();\n                 }\n                 // Increment the retry count and try again with the new exception.\n"}}, {"oid": "36a286d86daea27f93dfafa64fb5aae5e77f7a30", "url": "https://github.com/Azure/azure-sdk-for-java/commit/36a286d86daea27f93dfafa64fb5aae5e77f7a30", "message": "Added recording files", "committedDate": "2020-06-22T16:32:09Z", "type": "commit"}, {"oid": "9928df1ff8b437a366525d3899d224e002049c5e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9928df1ff8b437a366525d3899d224e002049c5e", "message": "PR feedback", "committedDate": "2020-06-22T16:39:40Z", "type": "commit"}, {"oid": "d2d9c1bffa239a1bf30dba6d14eece17af635b9d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d2d9c1bffa239a1bf30dba6d14eece17af635b9d", "message": "CI fix", "committedDate": "2020-06-22T16:57:37Z", "type": "commit"}, {"oid": "499d909f85421a10d6969da2349c0160b473e709", "url": "https://github.com/Azure/azure-sdk-for-java/commit/499d909f85421a10d6969da2349c0160b473e709", "message": "Removed log statement", "committedDate": "2020-06-22T17:28:20Z", "type": "commit"}, {"oid": "d8540b04fc654a6051c81e8c4095033de9f688fd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d8540b04fc654a6051c81e8c4095033de9f688fd", "message": "Attempted CI fix", "committedDate": "2020-06-22T23:18:03Z", "type": "commit"}, {"oid": "5a7fbd29cb653c4bc9d7c1204311ad27be72af72", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5a7fbd29cb653c4bc9d7c1204311ad27be72af72", "message": "Updated recordings", "committedDate": "2020-06-23T00:02:21Z", "type": "commit"}]}