{"pr_number": 13601, "pr_title": "Adding query plan diagnostics context in feed response", "pr_createdAt": "2020-07-29T18:41:53Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/13601", "timeline": [{"oid": "f5a992241b4b4ed004550e96679dfbb224fd57ab", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f5a992241b4b4ed004550e96679dfbb224fd57ab", "message": "Adding query plan diagnostics in feed response", "committedDate": "2020-07-29T18:18:54Z", "type": "commit"}, {"oid": "8053ef37f9c8ea7bbacc07a798b8ba1a1bfdb4f2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8053ef37f9c8ea7bbacc07a798b8ba1a1bfdb4f2", "message": "Correcting the start time for query plan diagnotics", "committedDate": "2020-07-29T18:33:04Z", "type": "commit"}, {"oid": "dbd71395351a5dc2a7415478110114bdeea675e2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dbd71395351a5dc2a7415478110114bdeea675e2", "message": "Merge branch 'latest-master' into users/nakumars/queryPlanInQueryMetrics", "committedDate": "2020-07-29T22:16:48Z", "type": "commit"}, {"oid": "03394fee507c9fa8e3796eee9540d33ef4921944", "url": "https://github.com/Azure/azure-sdk-for-java/commit/03394fee507c9fa8e3796eee9540d33ef4921944", "message": "merging with master", "committedDate": "2020-08-05T15:11:41Z", "type": "commit"}, {"oid": "7472a6ac33d26315dbedee46183891393018eecb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7472a6ac33d26315dbedee46183891393018eecb", "message": "Merge branch 'latest-master' into users/nakumars/queryPlanInQueryMetrics", "committedDate": "2020-08-05T20:04:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2Mjk5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13601#discussion_r466662992", "bodyText": "looks weird to have the tailing space after QueryPlan constant. can we pass the space in the string builder? or define another constant for the \" \" string?", "author": "moderakh", "createdAt": "2020-08-06T20:19:05Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/FeedResponseDiagnostics.java", "diffHunk": "@@ -4,15 +4,21 @@\n package com.azure.cosmos.implementation;\n \n import com.azure.cosmos.implementation.apachecommons.lang.StringUtils;\n+import com.azure.cosmos.implementation.query.QueryInfo;\n+import com.azure.cosmos.implementation.query.metrics.QueryMetricsTextWriter;\n \n+import java.time.Duration;\n import java.util.Map;\n \n /**\n  * The type Feed response diagnostics.\n  */\n public final class FeedResponseDiagnostics {\n \n+    private final static String EQUALS = \"=\";\n+    private final static String QUERY_PLAN = \"QueryPlan \";", "originalCommit": "7472a6ac33d26315dbedee46183891393018eecb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAxMzgwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13601#discussion_r468013801", "bodyText": "Added another constant. Done", "author": "simplynaveen20", "createdAt": "2020-08-10T16:02:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2Mjk5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a5d936838823225e231432cc5be8c15412f2ec2b", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/FeedResponseDiagnostics.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/FeedResponseDiagnostics.java\nindex e2bacc83f6..bd39e5bb18 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/FeedResponseDiagnostics.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/FeedResponseDiagnostics.java\n\n@@ -3,7 +3,6 @@\n \n package com.azure.cosmos.implementation;\n \n-import com.azure.cosmos.implementation.apachecommons.lang.StringUtils;\n import com.azure.cosmos.implementation.query.QueryInfo;\n import com.azure.cosmos.implementation.query.metrics.QueryMetricsTextWriter;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NzA5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13601#discussion_r466667093", "bodyText": "you have a class field with the same name here and this hides the class field.\ncan this be named something like for more clarity in the test?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CosmosClient gatewayClient = null;\n          \n          \n            \n                    CosmosClient testGatewayClient = null;", "author": "moderakh", "createdAt": "2020-08-06T20:27:17Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java", "diffHunk": "@@ -76,38 +79,45 @@ public void afterClass() {\n \n     @Test(groups = {\"simple\"})\n     public void gatewayDiagnostics() {\n-        InternalObjectNode internalObjectNode = getInternalObjectNode();\n-        CosmosItemResponse<InternalObjectNode> createResponse = this.container.createItem(internalObjectNode);\n-        String diagnostics = createResponse.getDiagnostics().toString();\n-        assertThat(diagnostics).contains(\"\\\"connectionMode\\\":\\\"GATEWAY\\\"\");\n-        assertThat(diagnostics).doesNotContain((\"\\\"gatewayStatistics\\\":null\"));\n-        assertThat(diagnostics).contains(\"\\\"operationType\\\":\\\"Create\\\"\");\n-        assertThat(diagnostics).contains(\"\\\"metaDataName\\\":\\\"CONTAINER_LOOK_UP\\\"\");\n-        assertThat(diagnostics).contains(\"\\\"serializationType\\\":\\\"PARTITION_KEY_FETCH_SERIALIZATION\\\"\");\n-        assertThat(diagnostics).contains(\"\\\"userAgent\\\":\\\"\" + Utils.getUserAgent() + \"\\\"\");\n-        assertThat(createResponse.getDiagnostics().getDuration()).isNotNull();\n-        validateTransportRequestTimelineGateway(diagnostics);\n-        validateJson(diagnostics);\n+        CosmosClient gatewayClient = null;", "originalCommit": "7472a6ac33d26315dbedee46183891393018eecb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5d936838823225e231432cc5be8c15412f2ec2b", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java\nindex 2594164c44..f0ef952aac 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java\n\n@@ -79,16 +79,16 @@ public class CosmosDiagnosticsTest extends TestSuiteBase {\n \n     @Test(groups = {\"simple\"})\n     public void gatewayDiagnostics() {\n-        CosmosClient gatewayClient = null;\n+        CosmosClient testGatewayClient = null;\n         try {\n-            gatewayClient = new CosmosClientBuilder()\n+            testGatewayClient = new CosmosClientBuilder()\n                 .endpoint(TestConfigurations.HOST)\n                 .key(TestConfigurations.MASTER_KEY)\n                 .contentResponseOnWriteEnabled(true)\n                 .gatewayMode()\n                 .buildClient();\n             CosmosContainer container =\n-                gatewayClient.getDatabase(cosmosAsyncContainer.getDatabase().getId()).getContainer(cosmosAsyncContainer.getId());\n+                testGatewayClient.getDatabase(cosmosAsyncContainer.getDatabase().getId()).getContainer(cosmosAsyncContainer.getId());\n             InternalObjectNode internalObjectNode = getInternalObjectNode();\n             CosmosItemResponse<InternalObjectNode> createResponse = container.createItem(internalObjectNode);\n             String diagnostics = createResponse.getDiagnostics().toString();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NzMwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13601#discussion_r466667301", "bodyText": "you have a class field with the same name here and this hides the class field.\ncan this be named something like for more clarity in the test?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CosmosClient directClient = null;\n          \n          \n            \n                    CosmosClient testDirectClient = null;", "author": "moderakh", "createdAt": "2020-08-06T20:27:40Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java", "diffHunk": "@@ -145,22 +151,85 @@ public void systemDiagnosticsForSystemStateInformation() {\n \n     @Test(groups = {\"simple\"})\n     public void directDiagnostics() {\n+        CosmosClient directClient = null;", "originalCommit": "7472a6ac33d26315dbedee46183891393018eecb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5d936838823225e231432cc5be8c15412f2ec2b", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java\nindex 2594164c44..f0ef952aac 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java\n\n@@ -151,16 +151,16 @@ public class CosmosDiagnosticsTest extends TestSuiteBase {\n \n     @Test(groups = {\"simple\"})\n     public void directDiagnostics() {\n-        CosmosClient directClient = null;\n+        CosmosClient testDirectClient = null;\n         try {\n-            directClient = new CosmosClientBuilder()\n+            testDirectClient = new CosmosClientBuilder()\n                 .endpoint(TestConfigurations.HOST)\n                 .key(TestConfigurations.MASTER_KEY)\n                 .contentResponseOnWriteEnabled(true)\n                 .directMode()\n                 .buildClient();\n             CosmosContainer cosmosContainer =\n-                directClient.getDatabase(cosmosAsyncContainer.getDatabase().getId()).getContainer(cosmosAsyncContainer.getId());\n+                testDirectClient.getDatabase(cosmosAsyncContainer.getDatabase().getId()).getContainer(cosmosAsyncContainer.getId());\n             InternalObjectNode internalObjectNode = getInternalObjectNode();\n             CosmosItemResponse<InternalObjectNode> createResponse = cosmosContainer.createItem(internalObjectNode);\n             String diagnostics = createResponse.getDiagnostics().toString();\n"}}, {"oid": "9428b5dd0b549216bb6b3a749a84039960e52df1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9428b5dd0b549216bb6b3a749a84039960e52df1", "message": "Merge branch 'latest-master' into users/nakumars/queryPlanInQueryMetrics", "committedDate": "2020-08-10T14:15:10Z", "type": "commit"}, {"oid": "a5d936838823225e231432cc5be8c15412f2ec2b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a5d936838823225e231432cc5be8c15412f2ec2b", "message": "resolving comments and merging with master", "committedDate": "2020-08-10T14:53:39Z", "type": "commit"}, {"oid": "07fba2ee5dfc0646c4b0f076eb077f2b23ef6892", "url": "https://github.com/Azure/azure-sdk-for-java/commit/07fba2ee5dfc0646c4b0f076eb077f2b23ef6892", "message": "resolving merge conflict", "committedDate": "2020-08-11T19:14:56Z", "type": "commit"}, {"oid": "779698cd10a9f2b06db2e5d15c0d1c7eb21a8326", "url": "https://github.com/Azure/azure-sdk-for-java/commit/779698cd10a9f2b06db2e5d15c0d1c7eb21a8326", "message": "Fixing build error after merge", "committedDate": "2020-08-11T20:24:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg0MzU3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13601#discussion_r468843574", "bodyText": "nice. thank you.", "author": "moderakh", "createdAt": "2020-08-11T20:25:32Z", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/EncryptionCosmosAsyncContainer.java", "diffHunk": "@@ -433,7 +433,10 @@ ItemDeserializer getItemDeserializer() {\n                         }\n \n                     ).collectList().map(itemList ->\n-                        ModelBridgeInternal.createFeedResponseWithQueryMetrics(itemList, page.getResponseHeaders(), BridgeInternal.queryMetricsFromFeedResponse(page))\n+                        ModelBridgeInternal.createFeedResponseWithQueryMetrics(itemList,\n+                            page.getResponseHeaders(),\n+                            BridgeInternal.queryMetricsFromFeedResponse(page),\n+                            ModelBridgeInternal.getQueryPlanDiagnosticsContext(page))", "originalCommit": "779698cd10a9f2b06db2e5d15c0d1c7eb21a8326", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8b801644a3df7bc9808b5469a1003435ca4a9160", "chunk": "diff --git a/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/EncryptionCosmosAsyncContainer.java b/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/EncryptionCosmosAsyncContainer.java\nindex b015ed228d..b6f818fecd 100644\n--- a/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/EncryptionCosmosAsyncContainer.java\n+++ b/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/EncryptionCosmosAsyncContainer.java\n\n@@ -417,30 +416,29 @@ public class EncryptionCosmosAsyncContainer {\n \n     private <T> Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> queryDecryptionTransformer(Class<T> classType,\n                                                                                                    Consumer<DecryptionResult> handler,\n-                                                                                                   Function<CosmosPagedFluxOptions, Flux<FeedResponse<ObjectNode>>> func) {\n-        return func.andThen(flux -> {\n-            return flux.flatMap(\n-                page -> {\n-                    List<byte[]> bytesList =\n-                        page.getResults().stream().map(node -> cosmosSerializerToStream(node)).collect(Collectors.toList());\n-\n-                    List<Mono<byte[]>> list =\n-                        bytesList.stream().map(bytes -> decryptResponseAsync(bytes, handler)).collect(Collectors.toList());\n-\n-                    return Flux.merge(list).map(\n-                        item -> {\n-                            return getItemDeserializer().parseFrom(classType, item);\n-                        }\n-\n-                    ).collectList().map(itemList ->\n-                        ModelBridgeInternal.createFeedResponseWithQueryMetrics(itemList,\n-                            page.getResponseHeaders(),\n-                            BridgeInternal.queryMetricsFromFeedResponse(page),\n-                            ModelBridgeInternal.getQueryPlanDiagnosticsContext(page))\n-                    );\n-                }\n-            );\n-        });\n+                                                                                                   Function<CosmosPagedFluxOptions, Flux<FeedResponse<JsonNode>>> func) {\n+        return func.andThen(flux ->\n+            flux.publishOn(encryptionScheduler)\n+                .flatMap(\n+                    page -> {\n+                        List<Mono<byte[]>> byteArrayMonoList = page.getResults().stream()\n+                                .map(node -> cosmosSerializerToStream(node))\n+                                .map(bytes -> decryptResponseAsync(bytes, handler))\n+                                .collect(Collectors.toList());\n+\n+                        return Flux.concat(byteArrayMonoList).map(\n+                            item -> {\n+                                return getItemDeserializer().parseFrom(classType, item);\n+                            }\n+                        ).collectList().map(itemList ->\n+                            ModelBridgeInternal.createFeedResponseWithQueryMetrics(itemList,\n+                                page.getResponseHeaders(),\n+                                BridgeInternal.queryMetricsFromFeedResponse(page),\n+                                ModelBridgeInternal.getQueryPlanDiagnosticsContext(page))\n+                        );\n+                    }\n+                )\n+        );\n     }\n }\n \n"}}, {"oid": "8b801644a3df7bc9808b5469a1003435ca4a9160", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8b801644a3df7bc9808b5469a1003435ca4a9160", "message": "Fixing merge conflict", "committedDate": "2020-08-11T21:57:27Z", "type": "commit"}]}