{"pr_number": 13493, "pr_title": "Consume/drain the inbound in case a cancellation is received before subscription", "pr_createdAt": "2020-07-24T18:16:33Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/13493", "timeline": [{"oid": "5d4c88a23c8717ee84beebcb5bbd80291229bf60", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5d4c88a23c8717ee84beebcb5bbd80291229bf60", "message": "Added logic to release/drain content in case a connection is cancelled before getting subscribed", "committedDate": "2020-07-24T18:11:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzMTY4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13493#discussion_r460231682", "bodyText": "Do 304 classified as non body status code ?", "author": "simplynaveen20", "createdAt": "2020-07-24T18:54:19Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java", "diffHunk": "@@ -215,5 +233,50 @@ private ByteBufFlux bodyIntern() {\n         Connection internConnection() {\n             return reactorNettyConnection;\n         }\n+\n+        private void updateSubscriptionState(Subscription subscription) {\n+            if (this.state.compareAndSet(ReactorNettyResponseState.NOT_SUBSCRIBED, ReactorNettyResponseState.SUBSCRIBED)) {\n+                return;\n+            }\n+            // https://github.com/reactor/reactor-netty/issues/503\n+            // FluxReceive rejects multiple subscribers, but not after a cancel().\n+            // Subsequent subscribers after cancel() will not be rejected, but will hang instead.\n+            // So we need to reject ones in cancelled state.\n+            if (this.state.get() == ReactorNettyResponseState.CANCELLED) {\n+                throw new IllegalStateException(\n+                    \"The client response body has been released already due to cancellation.\");\n+            }\n+        }\n+\n+        /**\n+         * Called by {@link ReactorNettyClient} when a cancellation is detected\n+         * but the content has not been subscribed to. If the subscription never\n+         * materializes then the content will remain not drained. Or it could still\n+         * materialize if the cancellation happened very early, or the response\n+         * reading was delayed for some reason.\n+         */\n+        private void releaseAfterCancel(HttpMethod method) {\n+            if (mayHaveBody(method) && this.state.compareAndSet(ReactorNettyResponseState.NOT_SUBSCRIBED, ReactorNettyResponseState.CANCELLED)) {\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"Releasing body, not yet subscribed\");\n+                }\n+                this.bodyIntern()\n+                    .doOnNext(byteBuf -> {})\n+                    .subscribe(byteBuf -> {}, ex -> {});\n+            }\n+        }\n+\n+        private boolean mayHaveBody(HttpMethod method) {\n+            int code = this.statusCode();\n+            return !((code >= 100 && code < 200) || code == 204 || code == 205 ||", "originalCommit": "5d4c88a23c8717ee84beebcb5bbd80291229bf60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzNzQyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13493#discussion_r460237421", "bodyText": "Yes, 304 will be a non body status code", "author": "kushagraThapar", "createdAt": "2020-07-24T19:06:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzMTY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0NDU1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13493#discussion_r460244552", "bodyText": "So lets add that here", "author": "simplynaveen20", "createdAt": "2020-07-24T19:22:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzMTY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "f691f178161ad8b8b45409a2fda4533ef2160bfc", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java\nindex e9278563be9..54dbf84da1d 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java\n\n@@ -256,7 +256,7 @@ class ReactorNettyClient implements HttpClient {\n          * reading was delayed for some reason.\n          */\n         private void releaseAfterCancel(HttpMethod method) {\n-            if (mayHaveBody(method) && this.state.compareAndSet(ReactorNettyResponseState.NOT_SUBSCRIBED, ReactorNettyResponseState.CANCELLED)) {\n+            if (this.state.compareAndSet(ReactorNettyResponseState.NOT_SUBSCRIBED, ReactorNettyResponseState.CANCELLED)) {\n                 if (logger.isDebugEnabled()) {\n                     logger.debug(\"Releasing body, not yet subscribed\");\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzMjEzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13493#discussion_r460232132", "bodyText": "Do we need mayHaveBody check , what happen if we clear on all cancel irrespective of body, we can avoid extra check ?", "author": "simplynaveen20", "createdAt": "2020-07-24T18:55:17Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java", "diffHunk": "@@ -215,5 +233,50 @@ private ByteBufFlux bodyIntern() {\n         Connection internConnection() {\n             return reactorNettyConnection;\n         }\n+\n+        private void updateSubscriptionState(Subscription subscription) {\n+            if (this.state.compareAndSet(ReactorNettyResponseState.NOT_SUBSCRIBED, ReactorNettyResponseState.SUBSCRIBED)) {\n+                return;\n+            }\n+            // https://github.com/reactor/reactor-netty/issues/503\n+            // FluxReceive rejects multiple subscribers, but not after a cancel().\n+            // Subsequent subscribers after cancel() will not be rejected, but will hang instead.\n+            // So we need to reject ones in cancelled state.\n+            if (this.state.get() == ReactorNettyResponseState.CANCELLED) {\n+                throw new IllegalStateException(\n+                    \"The client response body has been released already due to cancellation.\");\n+            }\n+        }\n+\n+        /**\n+         * Called by {@link ReactorNettyClient} when a cancellation is detected\n+         * but the content has not been subscribed to. If the subscription never\n+         * materializes then the content will remain not drained. Or it could still\n+         * materialize if the cancellation happened very early, or the response\n+         * reading was delayed for some reason.\n+         */\n+        private void releaseAfterCancel(HttpMethod method) {\n+            if (mayHaveBody(method) && this.state.compareAndSet(ReactorNettyResponseState.NOT_SUBSCRIBED, ReactorNettyResponseState.CANCELLED)) {", "originalCommit": "5d4c88a23c8717ee84beebcb5bbd80291229bf60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzODU3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13493#discussion_r460238572", "bodyText": "Since we are draining content here, we want to make sure we drain it under very specific conditions, specially when the body can be present.", "author": "kushagraThapar", "createdAt": "2020-07-24T19:09:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzMjEzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0NjI4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13493#discussion_r460246284", "bodyText": "That is fine ,but my doubt is if some valid response miss mayHaveBody  (due to any missed scenario), then we will still face issue , vs draining non body too along with body response (Its a trade off thing )", "author": "simplynaveen20", "createdAt": "2020-07-24T19:26:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzMjEzMg=="}], "type": "inlineReview", "revised_code": {"commit": "f691f178161ad8b8b45409a2fda4533ef2160bfc", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java\nindex e9278563be9..54dbf84da1d 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java\n\n@@ -256,7 +256,7 @@ class ReactorNettyClient implements HttpClient {\n          * reading was delayed for some reason.\n          */\n         private void releaseAfterCancel(HttpMethod method) {\n-            if (mayHaveBody(method) && this.state.compareAndSet(ReactorNettyResponseState.NOT_SUBSCRIBED, ReactorNettyResponseState.CANCELLED)) {\n+            if (this.state.compareAndSet(ReactorNettyResponseState.NOT_SUBSCRIBED, ReactorNettyResponseState.CANCELLED)) {\n                 if (logger.isDebugEnabled()) {\n                     logger.debug(\"Releasing body, not yet subscribed\");\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzMTk3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13493#discussion_r460231971", "bodyText": "I think some of 4xx error codes from Cosmos (e.g., 400 query plan) also have body.", "author": "moderakh", "createdAt": "2020-07-24T18:54:57Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java", "diffHunk": "@@ -215,5 +233,50 @@ private ByteBufFlux bodyIntern() {\n         Connection internConnection() {\n             return reactorNettyConnection;\n         }\n+\n+        private void updateSubscriptionState(Subscription subscription) {\n+            if (this.state.compareAndSet(ReactorNettyResponseState.NOT_SUBSCRIBED, ReactorNettyResponseState.SUBSCRIBED)) {\n+                return;\n+            }\n+            // https://github.com/reactor/reactor-netty/issues/503\n+            // FluxReceive rejects multiple subscribers, but not after a cancel().\n+            // Subsequent subscribers after cancel() will not be rejected, but will hang instead.\n+            // So we need to reject ones in cancelled state.\n+            if (this.state.get() == ReactorNettyResponseState.CANCELLED) {\n+                throw new IllegalStateException(\n+                    \"The client response body has been released already due to cancellation.\");\n+            }\n+        }\n+\n+        /**\n+         * Called by {@link ReactorNettyClient} when a cancellation is detected\n+         * but the content has not been subscribed to. If the subscription never\n+         * materializes then the content will remain not drained. Or it could still\n+         * materialize if the cancellation happened very early, or the response\n+         * reading was delayed for some reason.\n+         */\n+        private void releaseAfterCancel(HttpMethod method) {\n+            if (mayHaveBody(method) && this.state.compareAndSet(ReactorNettyResponseState.NOT_SUBSCRIBED, ReactorNettyResponseState.CANCELLED)) {\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"Releasing body, not yet subscribed\");\n+                }\n+                this.bodyIntern()\n+                    .doOnNext(byteBuf -> {})\n+                    .subscribe(byteBuf -> {}, ex -> {});\n+            }\n+        }\n+\n+        private boolean mayHaveBody(HttpMethod method) {\n+            int code = this.statusCode();\n+            return !((code >= 100 && code < 200) || code == 204 || code == 205 ||\n+                method.equals(HttpMethod.HEAD) || headers().getContentLength() == 0);", "originalCommit": "5d4c88a23c8717ee84beebcb5bbd80291229bf60", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0MzM1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13493#discussion_r460243350", "bodyText": "Would these be considered as error or success ?", "author": "kushagraThapar", "createdAt": "2020-07-24T19:20:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzMTk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0NDQzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13493#discussion_r460244436", "bodyText": "this condition is already returning true for 4xx, isn't ?", "author": "simplynaveen20", "createdAt": "2020-07-24T19:22:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzMTk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0NzUwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13493#discussion_r460247502", "bodyText": "Yes it is.", "author": "kushagraThapar", "createdAt": "2020-07-24T19:29:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzMTk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f691f178161ad8b8b45409a2fda4533ef2160bfc", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java\nindex e9278563be9..54dbf84da1d 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/http/ReactorNettyClient.java\n\n@@ -256,7 +256,7 @@ class ReactorNettyClient implements HttpClient {\n          * reading was delayed for some reason.\n          */\n         private void releaseAfterCancel(HttpMethod method) {\n-            if (mayHaveBody(method) && this.state.compareAndSet(ReactorNettyResponseState.NOT_SUBSCRIBED, ReactorNettyResponseState.CANCELLED)) {\n+            if (this.state.compareAndSet(ReactorNettyResponseState.NOT_SUBSCRIBED, ReactorNettyResponseState.CANCELLED)) {\n                 if (logger.isDebugEnabled()) {\n                     logger.debug(\"Releasing body, not yet subscribed\");\n                 }\n"}}, {"oid": "f691f178161ad8b8b45409a2fda4533ef2160bfc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f691f178161ad8b8b45409a2fda4533ef2160bfc", "message": "Selecting tradeoff to drain body in all cases when cancellation has happened before subscription", "committedDate": "2020-07-24T20:01:17Z", "type": "commit"}]}