{"pr_number": 10650, "pr_title": "Adding support for autoscale throughput", "pr_createdAt": "2020-05-01T02:17:13Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/10650", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzI2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418427265", "bodyText": "Fixed rebranded as Manual", "author": "kirankumarkolli", "createdAt": "2020-05-01T05:53:29Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NDY2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418774660", "bodyText": "changed", "author": "mbhaskar", "createdAt": "2020-05-01T23:12:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzI2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "2be9d9426979f3e2e8e5926077b6bcb4ded060de", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\nindex ef4aa3a50b9..03da2e8db19 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\n\n@@ -21,32 +21,32 @@ public class ThroughputProperties {\n      * @param throughput the throughput\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createFixedThroughput(int throughput) {\n-        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    public static ThroughputProperties createManualThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createManualOffer(throughput));\n     }\n \n     /**\n      * Create auto scale throughput properties.\n      *\n-     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n      * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n-        int maxAutoScaleThroughput,\n+    static ThroughputProperties createAutoScaledThroughput(\n+        int autoScaleMaxThroughput,\n         int autoUpgradethroughputIncrementPercentage) {\n-        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n                                                                    autoUpgradethroughputIncrementPercentage));\n     }\n \n     /**\n      * Create auto scaled provisioned throughput throughput properties.\n      *\n-     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createAutoScaledProvisionedThroughput(int maxAutoScaleThroughput) {\n-        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+    public static ThroughputProperties createAutoScaledThroughput(int autoScaleMaxThroughput) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n                                                                    0));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418427433", "bodyText": "How about excluding Provisioned from the name?\n@j82w can you please check for consistency with .NET contracts as well.", "author": "kirankumarkolli", "createdAt": "2020-05-01T05:54:18Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODE3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428174", "bodyText": "Its V4 we have a choice to improvise as well.", "author": "kirankumarkolli", "createdAt": "2020-05-01T05:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5MDg5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419190893", "bodyText": "Makes sense. It is createAutoScaledThroughput now.", "author": "mbhaskar", "createdAt": "2020-05-04T02:10:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM2OTM1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419369354", "bodyText": "@deborahc do you agree with this?", "author": "j82w", "createdAt": "2020-05-04T11:27:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUwMjc4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419502784", "bodyText": "How about: createAutoscaleThroughput for consistency. (the official autoscale name doesn't have the S in scale capitalized).", "author": "deborahc", "createdAt": "2020-05-04T15:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5MDY2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419590667", "bodyText": "Oh yeah! I should lowercase the S. createAutoscaleThroughput should be the method name right?", "author": "mbhaskar", "createdAt": "2020-05-04T17:09:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxOTc5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420219790", "bodyText": "changed", "author": "mbhaskar", "createdAt": "2020-05-05T15:56:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzQzMw=="}], "type": "inlineReview", "revised_code": {"commit": "2be9d9426979f3e2e8e5926077b6bcb4ded060de", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\nindex ef4aa3a50b9..03da2e8db19 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\n\n@@ -21,32 +21,32 @@ public class ThroughputProperties {\n      * @param throughput the throughput\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createFixedThroughput(int throughput) {\n-        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    public static ThroughputProperties createManualThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createManualOffer(throughput));\n     }\n \n     /**\n      * Create auto scale throughput properties.\n      *\n-     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n      * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n-        int maxAutoScaleThroughput,\n+    static ThroughputProperties createAutoScaledThroughput(\n+        int autoScaleMaxThroughput,\n         int autoUpgradethroughputIncrementPercentage) {\n-        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n                                                                    autoUpgradethroughputIncrementPercentage));\n     }\n \n     /**\n      * Create auto scaled provisioned throughput throughput properties.\n      *\n-     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createAutoScaledProvisionedThroughput(int maxAutoScaleThroughput) {\n-        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+    public static ThroughputProperties createAutoScaledThroughput(int autoScaleMaxThroughput) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n                                                                    0));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzU0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418427544", "bodyText": "autoScaleMaxThroughput", "author": "kirankumarkolli", "createdAt": "2020-05-01T05:54:48Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NDgyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418774829", "bodyText": "changed", "author": "mbhaskar", "createdAt": "2020-05-01T23:13:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzU0NA=="}], "type": "inlineReview", "revised_code": {"commit": "2be9d9426979f3e2e8e5926077b6bcb4ded060de", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\nindex ef4aa3a50b9..03da2e8db19 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\n\n@@ -21,32 +21,32 @@ public class ThroughputProperties {\n      * @param throughput the throughput\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createFixedThroughput(int throughput) {\n-        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    public static ThroughputProperties createManualThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createManualOffer(throughput));\n     }\n \n     /**\n      * Create auto scale throughput properties.\n      *\n-     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n      * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n-        int maxAutoScaleThroughput,\n+    static ThroughputProperties createAutoScaledThroughput(\n+        int autoScaleMaxThroughput,\n         int autoUpgradethroughputIncrementPercentage) {\n-        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n                                                                    autoUpgradethroughputIncrementPercentage));\n     }\n \n     /**\n      * Create auto scaled provisioned throughput throughput properties.\n      *\n-     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createAutoScaledProvisionedThroughput(int maxAutoScaleThroughput) {\n-        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+    public static ThroughputProperties createAutoScaledThroughput(int autoScaleMaxThroughput) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n                                                                    0));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzk0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418427943", "bodyText": "Need more baking time for autoUpgradethroughputIncrementPercentage. Can it be exlucded from //build scope?", "author": "kirankumarkolli", "createdAt": "2020-05-01T05:56:55Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,\n+        int autoUpgradethroughputIncrementPercentage) {", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NDg2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418774867", "bodyText": "Made this method package private.", "author": "mbhaskar", "createdAt": "2020-05-01T23:13:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyNzk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "2be9d9426979f3e2e8e5926077b6bcb4ded060de", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\nindex ef4aa3a50b9..03da2e8db19 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\n\n@@ -21,32 +21,32 @@ public class ThroughputProperties {\n      * @param throughput the throughput\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createFixedThroughput(int throughput) {\n-        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    public static ThroughputProperties createManualThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createManualOffer(throughput));\n     }\n \n     /**\n      * Create auto scale throughput properties.\n      *\n-     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n      * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n-        int maxAutoScaleThroughput,\n+    static ThroughputProperties createAutoScaledThroughput(\n+        int autoScaleMaxThroughput,\n         int autoUpgradethroughputIncrementPercentage) {\n-        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n                                                                    autoUpgradethroughputIncrementPercentage));\n     }\n \n     /**\n      * Create auto scaled provisioned throughput throughput properties.\n      *\n-     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createAutoScaledProvisionedThroughput(int maxAutoScaleThroughput) {\n-        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+    public static ThroughputProperties createAutoScaledThroughput(int autoScaleMaxThroughput) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n                                                                    0));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODExNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428114", "bodyText": "getManualThrughput", "author": "kirankumarkolli", "createdAt": "2020-05-01T05:58:00Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,\n+        int autoUpgradethroughputIncrementPercentage) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   autoUpgradethroughputIncrementPercentage));\n+    }\n+\n+    /**\n+     * Create auto scaled provisioned throughput throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(int maxAutoScaleThroughput) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   0));\n+    }\n+\n+    /**\n+     * Gets offer throughput.\n+     *\n+     * @return the offer throughput\n+     */\n+    public Integer getOfferThroughput() {", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NDkzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418774939", "bodyText": "Changed", "author": "mbhaskar", "createdAt": "2020-05-01T23:13:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODExNA=="}], "type": "inlineReview", "revised_code": {"commit": "2be9d9426979f3e2e8e5926077b6bcb4ded060de", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\nindex ef4aa3a50b9..03da2e8db19 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\n\n@@ -21,32 +21,32 @@ public class ThroughputProperties {\n      * @param throughput the throughput\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createFixedThroughput(int throughput) {\n-        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    public static ThroughputProperties createManualThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createManualOffer(throughput));\n     }\n \n     /**\n      * Create auto scale throughput properties.\n      *\n-     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n      * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n-        int maxAutoScaleThroughput,\n+    static ThroughputProperties createAutoScaledThroughput(\n+        int autoScaleMaxThroughput,\n         int autoUpgradethroughputIncrementPercentage) {\n-        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n                                                                    autoUpgradethroughputIncrementPercentage));\n     }\n \n     /**\n      * Create auto scaled provisioned throughput throughput properties.\n      *\n-     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createAutoScaledProvisionedThroughput(int maxAutoScaleThroughput) {\n-        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+    public static ThroughputProperties createAutoScaledThroughput(int autoScaleMaxThroughput) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n                                                                    0));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODQ2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428460", "bodyText": "How about inling the auto-scale related entries?\nWhat;s the value of nesting type?", "author": "kirankumarkolli", "createdAt": "2020-05-01T05:59:43Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,\n+        int autoUpgradethroughputIncrementPercentage) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   autoUpgradethroughputIncrementPercentage));\n+    }\n+\n+    /**\n+     * Create auto scaled provisioned throughput throughput properties.\n+     *\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(int maxAutoScaleThroughput) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+                                                                   0));\n+    }\n+\n+    /**\n+     * Gets offer throughput.\n+     *\n+     * @return the offer throughput\n+     */\n+    public Integer getOfferThroughput() {\n+        return offer.getThroughput();\n+    }\n+\n+    /**\n+     * Gets offer autoscale properties.\n+     *\n+     * @return the offer autoscale properties\n+     */\n+    public OfferAutoscaleSettings getOfferAutoscaleProperties() {", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODU2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428562", "bodyText": "It can be non-public for //build as well.", "author": "kirankumarkolli", "createdAt": "2020-05-01T06:00:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODQ2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NTA0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418775042", "bodyText": "Makes sense. Made package private", "author": "mbhaskar", "createdAt": "2020-05-01T23:14:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODQ2MA=="}], "type": "inlineReview", "revised_code": {"commit": "2be9d9426979f3e2e8e5926077b6bcb4ded060de", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\nindex ef4aa3a50b9..03da2e8db19 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\n\n@@ -21,32 +21,32 @@ public class ThroughputProperties {\n      * @param throughput the throughput\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createFixedThroughput(int throughput) {\n-        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    public static ThroughputProperties createManualThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createManualOffer(throughput));\n     }\n \n     /**\n      * Create auto scale throughput properties.\n      *\n-     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n      * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n-        int maxAutoScaleThroughput,\n+    static ThroughputProperties createAutoScaledThroughput(\n+        int autoScaleMaxThroughput,\n         int autoUpgradethroughputIncrementPercentage) {\n-        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n                                                                    autoUpgradethroughputIncrementPercentage));\n     }\n \n     /**\n      * Create auto scaled provisioned throughput throughput properties.\n      *\n-     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createAutoScaledProvisionedThroughput(int maxAutoScaleThroughput) {\n-        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+    public static ThroughputProperties createAutoScaledThroughput(int autoScaleMaxThroughput) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n                                                                    0));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODcxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428718", "bodyText": "How do CX UT?", "author": "kirankumarkolli", "createdAt": "2020-05-01T06:01:16Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5MTEwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419191103", "bodyText": "Will try to redesign to make offer mockable in subsequent PRs.", "author": "mbhaskar", "createdAt": "2020-05-04T02:11:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODcxOA=="}], "type": "inlineReview", "revised_code": {"commit": "2be9d9426979f3e2e8e5926077b6bcb4ded060de", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\nindex ef4aa3a50b9..03da2e8db19 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\n\n@@ -21,32 +21,32 @@ public class ThroughputProperties {\n      * @param throughput the throughput\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createFixedThroughput(int throughput) {\n-        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n+    public static ThroughputProperties createManualThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createManualOffer(throughput));\n     }\n \n     /**\n      * Create auto scale throughput properties.\n      *\n-     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n      * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n-        int maxAutoScaleThroughput,\n+    static ThroughputProperties createAutoScaledThroughput(\n+        int autoScaleMaxThroughput,\n         int autoUpgradethroughputIncrementPercentage) {\n-        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n                                                                    autoUpgradethroughputIncrementPercentage));\n     }\n \n     /**\n      * Create auto scaled provisioned throughput throughput properties.\n      *\n-     * @param maxAutoScaleThroughput the max auto scale throughput\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createAutoScaledProvisionedThroughput(int maxAutoScaleThroughput) {\n-        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n+    public static ThroughputProperties createAutoScaledThroughput(int autoScaleMaxThroughput) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n                                                                    0));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODk3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418428976", "bodyText": "Between choice of ReqeustOptions vs overload: Isn't overload better from experience wise?", "author": "kirankumarkolli", "createdAt": "2020-05-01T06:02:38Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosDatabaseRequestOptions.java", "diffHunk": "@@ -51,10 +53,16 @@ CosmosDatabaseRequestOptions setOfferThroughput(Integer offerThroughput) {\n         return this;\n     }\n \n+    CosmosDatabaseRequestOptions setThroughputProperties(ThroughputProperties throughputProperties) {", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NTE4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418775187", "bodyText": "Yeah, we use an overload. This is not a public method.", "author": "mbhaskar", "createdAt": "2020-05-01T23:14:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyODk3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyOTAzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418429036", "bodyText": "multi lines", "author": "kirankumarkolli", "createdAt": "2020-05-01T06:03:05Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -908,6 +907,31 @@ private static void validateResource(Resource resource) {\n             headers.put(HttpConstants.HttpHeaders.OFFER_TYPE, options.getOfferType());\n         }\n \n+        if (options.getOfferThroughput() == null) {\n+            if (options.getThroughputProperties() != null) {\n+                Offer offer = ModelBridgeInternal.getOfferFromThroughputProperties(options.getThroughputProperties());\n+                final OfferAutoscaleAutoUpgradeProperties autoscaleAutoUpgradeProperties\n+                    = offer.getOfferAutoScaleSettings().getAutoscaleAutoUpgradeProperties();\n+                if (offer.hasOfferThroughput() &&\n+                        (offer.getOfferAutoScaleSettings().getMaxThroughput() >= 0 ||\n+                             autoscaleAutoUpgradeProperties != null &&\n+                                 autoscaleAutoUpgradeProperties\n+                                     .getAutoscaleThroughputProperties()\n+                                     .getIncrementPercent() >= 0)) {\n+                    throw new IllegalArgumentException(\"Autoscale provisioned throughput can not be configured with \"\n+                                                           + \"fixed offer\");\n+                }\n+\n+                if (offer.hasOfferThroughput()) {\n+                    headers.put(HttpConstants.HttpHeaders.OFFER_THROUGHPUT, options.getOfferThroughput().toString());\n+                } else if (offer.getOfferAutoScaleSettings() != null) {\n+                    headers.put(HttpConstants.HttpHeaders.OFFER_AUTOPILOT_SETTINGS,\n+                                ModelBridgeInternal.toJsonFromJsonSerializable(offer.getOfferAutoScaleSettings()));\n+                }\n+            }\n+        }\n+", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NTI4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418775284", "bodyText": "Done", "author": "mbhaskar", "createdAt": "2020-05-01T23:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQyOTAzNg=="}], "type": "inlineReview", "revised_code": {"commit": "2be9d9426979f3e2e8e5926077b6bcb4ded060de", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java\nindex 27be95c6f6d..41d07af5989 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java\n\n@@ -910,10 +907,14 @@ public class RxDocumentClientImpl implements AsyncDocumentClient, IAuthorization\n         if (options.getOfferThroughput() == null) {\n             if (options.getThroughputProperties() != null) {\n                 Offer offer = ModelBridgeInternal.getOfferFromThroughputProperties(options.getThroughputProperties());\n-                final OfferAutoscaleAutoUpgradeProperties autoscaleAutoUpgradeProperties\n-                    = offer.getOfferAutoScaleSettings().getAutoscaleAutoUpgradeProperties();\n+                final OfferAutoscaleSettings offerAutoscaleSettings = offer.getOfferAutoScaleSettings();\n+                OfferAutoscaleAutoUpgradeProperties autoscaleAutoUpgradeProperties = null;\n+                if (offerAutoscaleSettings != null) {\n+                     autoscaleAutoUpgradeProperties\n+                        = offer.getOfferAutoScaleSettings().getAutoscaleAutoUpgradeProperties();\n+                }\n                 if (offer.hasOfferThroughput() &&\n-                        (offer.getOfferAutoScaleSettings().getMaxThroughput() >= 0 ||\n+                        (offerAutoscaleSettings != null && offerAutoscaleSettings.getMaxThroughput() >= 0 ||\n                              autoscaleAutoUpgradeProperties != null &&\n                                  autoscaleAutoUpgradeProperties\n                                      .getAutoscaleThroughputProperties()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzMzI4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418433281", "bodyText": "I would use parametrized SqlQuerySpec instead of concating strings", "author": "moderakh", "createdAt": "2020-05-01T06:24:43Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,69 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(\"select * from c where c.offerResourceId = '\"\n+                                                             + response.getProperties()\n+                                                                   .getResourceId()", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NTM4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418775385", "bodyText": "Changed to use querySpec", "author": "mbhaskar", "createdAt": "2020-05-01T23:15:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzMzI4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "2be9d9426979f3e2e8e5926077b6bcb4ded060de", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\nindex d3245fad83b..f493e58cb1a 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\n\n@@ -672,10 +672,10 @@ public class CosmosAsyncContainer {\n     public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n         return this.read()\n                    .flatMap(response -> this.database.getDocClientWrapper()\n-                                            .queryOffers(\"select * from c where c.offerResourceId = '\"\n-                                                             + response.getProperties()\n-                                                                   .getResourceId()\n-                                                             + \"'\", new FeedOptions())\n+                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n+                                                                                                      .getProperties()\n+                                                                                                      .getResourceId())\n+                                                , new FeedOptions())\n                                             .single()\n                                             .flatMap(offerFeedResponse -> {\n                                                 if (offerFeedResponse.getResults().isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNDE0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418434146", "bodyText": "autopilot is a v2 offer?", "author": "moderakh", "createdAt": "2020-05-01T06:28:49Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Offer.java", "diffHunk": "@@ -26,6 +27,18 @@ public Offer(int offerThroughput) {\n         this.setContent(content);\n     }\n \n+    Offer(OfferAutoscaleSettings offerAutoscaleSettings) {\n+        super();\n+        this.setOfferVersion(Constants.Properties.OFFER_VERSION_V2);", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NTQ5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418775490", "bodyText": "Yes it is according to the offer payload I saw in Autopilot doc.", "author": "mbhaskar", "createdAt": "2020-05-01T23:16:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNDE0Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNjQ4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418436485", "bodyText": "tests should not use static database name to avoid any potential issue with runnings tests in parallel.\nPlease use CosmosDatabaseForTest.generateId()", "author": "moderakh", "createdAt": "2020-05-01T06:40:54Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/CollectionCrudTest.java", "diffHunk": "@@ -367,6 +370,33 @@ public void sessionTokenConsistencyCollectionDeleteCreateSameName() {\n         }\n     }\n \n+    @Test(groups = { \"emulator\" }, timeOut = TIMEOUT)\n+    public void readReplaceAutoscaleThroughput() throws Exception {\n+        safeDeleteDatabase(client.getDatabase(\"newTestDatabase\"));", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5NjM2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418996366", "bodyText": "Done", "author": "mbhaskar", "createdAt": "2020-05-02T19:14:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNjQ4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "2be9d9426979f3e2e8e5926077b6bcb4ded060de", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/CollectionCrudTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/CollectionCrudTest.java\nindex 27416129501..f22557f47e3 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/CollectionCrudTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/CollectionCrudTest.java\n\n@@ -372,11 +371,11 @@ public class CollectionCrudTest extends TestSuiteBase {\n \n     @Test(groups = { \"emulator\" }, timeOut = TIMEOUT)\n     public void readReplaceAutoscaleThroughput() throws Exception {\n-        safeDeleteDatabase(client.getDatabase(\"newTestDatabase\"));\n+        final String databaseName = CosmosDatabaseForTest.generateId();\n         int initalThroughput = 5000;\n         ThroughputProperties throughputProperties =\n-            ThroughputProperties.createAutoScaledProvisionedThroughput(initalThroughput, 50);\n-        CosmosAsyncDatabase database = client.createDatabase(\"newTestDatabase\")\n+            ThroughputProperties.createAutoScaledThroughput(initalThroughput);\n+        CosmosAsyncDatabase database = client.createDatabase(databaseName)\n                                            .block()\n                                            .getDatabase();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNjUwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418436505", "bodyText": "tests should not use static database name to avoid any potential issue with runnings tests in parallel.\nPlease use CosmosDatabaseForTest.generateId()", "author": "moderakh", "createdAt": "2020-05-01T06:41:00Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/DatabaseCrudTest.java", "diffHunk": "@@ -108,6 +114,25 @@ public void deleteDatabase_DoesntExist() throws Exception {\n         validateFailure(deleteObservable, validator);\n     }\n \n+    @Test(groups = { \"emulator\" }, timeOut = TIMEOUT)\n+    public void readReplaceAutoscaleThroughput() throws Exception {\n+        safeDeleteDatabase(client.getDatabase(\"newTestDatabase\"));", "originalCommit": "cc0c48d359a0ac1c7af101de0a2d18db4be0ab4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NTUzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418775530", "bodyText": "Makes sense. Changed", "author": "mbhaskar", "createdAt": "2020-05-01T23:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNjUwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "2be9d9426979f3e2e8e5926077b6bcb4ded060de", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/DatabaseCrudTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/DatabaseCrudTest.java\nindex e37ee6bacca..d6d0fcf4c1a 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/DatabaseCrudTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/DatabaseCrudTest.java\n\n@@ -116,23 +114,46 @@ public class DatabaseCrudTest extends TestSuiteBase {\n \n     @Test(groups = { \"emulator\" }, timeOut = TIMEOUT)\n     public void readReplaceAutoscaleThroughput() throws Exception {\n-        safeDeleteDatabase(client.getDatabase(\"newTestDatabase\"));\n+        final String databaseName = CosmosDatabaseForTest.generateId();\n         int initalThroughput = 5000;\n-        ThroughputProperties properties = ThroughputProperties.createAutoScaledProvisionedThroughput(initalThroughput,\n-                                                                                                     50);\n-        CosmosAsyncDatabase database = client.createDatabase(\"newTestDatabase\", properties)\n+        ThroughputProperties properties = ThroughputProperties.createAutoScaledThroughput(initalThroughput);\n+        CosmosAsyncDatabase database = client.createDatabase(databaseName, properties)\n                                            .block()\n                                            .getDatabase();\n \n         ThroughputResponse readThroughputResponse = database.readThroughput().block();\n-        assertThat(readThroughputResponse.getProperties().getMaxAutoscaleThroughput()).isEqualTo(initalThroughput);\n+        assertThat(readThroughputResponse.getProperties().getAutoscaleMaxThroughput()).isEqualTo(initalThroughput);\n         database.createContainer(\"testCol\", \"/myPk\").block();\n         int tagetThroughput = 6000;\n-        properties = ThroughputProperties.createAutoScaledProvisionedThroughput(tagetThroughput);\n+        properties = ThroughputProperties.createAutoScaledThroughput(tagetThroughput);\n         ThroughputResponse replaceResponse = database.replaceThroughput(properties).block();\n-        assertThat(replaceResponse.getProperties().getMaxAutoscaleThroughput()).isEqualTo(tagetThroughput);\n+        assertThat(replaceResponse.getProperties().getAutoscaleMaxThroughput()).isEqualTo(tagetThroughput);\n+        safeDeleteDatabase(client.getDatabase(databaseName));\n+\n     }\n \n+    @Test(groups = { \"emulator\" }, timeOut = TIMEOUT)\n+    public void readReplaceManualThroughput() throws Exception {\n+        final String databaseName = CosmosDatabaseForTest.generateId();\n+        int initalThroughput = 5000;\n+        ThroughputProperties properties = ThroughputProperties.createManualThroughput(initalThroughput);\n+        CosmosAsyncDatabase database = client.createDatabase(databaseName, properties)\n+                                           .block()\n+                                           .getDatabase();\n+\n+        ThroughputResponse readThroughputResponse = database.readThroughput().block();\n+        assertThat(readThroughputResponse.getProperties().getManualThroughput()).isEqualTo(initalThroughput);\n+        database.createContainer(\"testCol\", \"/myPk\").block();\n+        int tagetThroughput = 6000;\n+        properties = ThroughputProperties.createManualThroughput(tagetThroughput);\n+        ThroughputResponse replaceResponse = database.replaceThroughput(properties).block();\n+        assertThat(replaceResponse.getProperties().getManualThroughput()).isEqualTo(tagetThroughput);\n+        safeDeleteDatabase(client.getDatabase(databaseName));\n+\n+    }\n+\n+\n+\n     @BeforeClass(groups = { \"emulator\" }, timeOut = SETUP_TIMEOUT)\n     public void before_DatabaseCrudTest() {\n         client = getClientBuilder().buildAsyncClient();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTQ4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418999482", "bodyText": "it might worth to include the name of database and container in the sdk generated error message.", "author": "moderakh", "createdAt": "2020-05-02T19:44:01Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,68 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n+                                                                                                      .getProperties()\n+                                                                                                      .getResourceId())\n+                                                , new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));", "originalCommit": "47ea29d1c3a468506efe925c73bc78a55045ab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMDAxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420220018", "bodyText": "Added resource name", "author": "mbhaskar", "createdAt": "2020-05-05T15:56:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTQ4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "571c9df9a6ab1613ea61311ad80be39fe41ff8ec", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\nindex f493e58cb1a..d3245fad83b 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\n\n@@ -672,10 +672,10 @@ public class CosmosAsyncContainer {\n     public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n         return this.read()\n                    .flatMap(response -> this.database.getDocClientWrapper()\n-                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n-                                                                                                      .getProperties()\n-                                                                                                      .getResourceId())\n-                                                , new FeedOptions())\n+                                            .queryOffers(\"select * from c where c.offerResourceId = '\"\n+                                                             + response.getProperties()\n+                                                                   .getResourceId()\n+                                                             + \"'\", new FeedOptions())\n                                             .single()\n                                             .flatMap(offerFeedResponse -> {\n                                                 if (offerFeedResponse.getResults().isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTUzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418999534", "bodyText": "it is worth including the name of the database and container in the sdk generated error message.", "author": "moderakh", "createdAt": "2020-05-02T19:44:28Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,68 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n+                                                                                                      .getProperties()\n+                                                                                                      .getResourceId())\n+                                                , new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));\n+                                                }\n+\n+                                                Offer existingOffer = offerFeedResponse.getResults().get(0);\n+                                                ModelBridgeInternal.updateOfferFromProperties(existingOffer,\n+                                                                                              throughputProperties);\n+                                                return this.database.getDocClientWrapper()\n+                                                           .replaceOffer(existingOffer)\n+                                                           .single();\n+                                            }).map(ModelBridgeInternal::createThroughputRespose));\n+    }\n+\n+    /**\n+     * Read the throughput throughput .\n+     *\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> readThroughput() {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n+                                                                                                      .getProperties()\n+                                                                                                      .getResourceId())\n+                                                , new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the resource\"));", "originalCommit": "47ea29d1c3a468506efe925c73bc78a55045ab97", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "571c9df9a6ab1613ea61311ad80be39fe41ff8ec", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\nindex f493e58cb1a..d3245fad83b 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\n\n@@ -672,10 +672,10 @@ public class CosmosAsyncContainer {\n     public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n         return this.read()\n                    .flatMap(response -> this.database.getDocClientWrapper()\n-                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n-                                                                                                      .getProperties()\n-                                                                                                      .getResourceId())\n-                                                , new FeedOptions())\n+                                            .queryOffers(\"select * from c where c.offerResourceId = '\"\n+                                                             + response.getProperties()\n+                                                                   .getResourceId()\n+                                                             + \"'\", new FeedOptions())\n                                             .single()\n                                             .flatMap(offerFeedResponse -> {\n                                                 if (offerFeedResponse.getResults().isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTY0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418999645", "bodyText": "it is worth including the name of the database in the sdk generated error message.", "author": "moderakh", "createdAt": "2020-05-02T19:45:39Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -663,6 +686,78 @@ public CosmosAsyncUser getUser(String id) {\n                                                                                               .getThroughput()));\n     }\n \n+    /**\n+     * Sets throughput provisioned for a container in measurement of\n+     * Requests-per-Unit in the Azure Cosmos service.\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.getDocClientWrapper()\n+                                            .queryOffers(getOfferQuerySpecFromResourceId(response.getProperties()\n+                                                                                             .getResourceId()),\n+                                                         new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));", "originalCommit": "47ea29d1c3a468506efe925c73bc78a55045ab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MTA2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419781069", "bodyText": "@j82w lets please track it part of diagnostics improvement.", "author": "kirankumarkolli", "createdAt": "2020-05-04T23:10:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTY0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMDE0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420220142", "bodyText": "Added resource name", "author": "mbhaskar", "createdAt": "2020-05-05T15:57:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTY0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "571c9df9a6ab1613ea61311ad80be39fe41ff8ec", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java\nindex d15a9efce00..e88a6ece137 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java\n\n@@ -696,9 +692,10 @@ public class CosmosAsyncDatabase {\n     public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n         return this.read()\n                    .flatMap(response -> this.getDocClientWrapper()\n-                                            .queryOffers(getOfferQuerySpecFromResourceId(response.getProperties()\n-                                                                                             .getResourceId()),\n-                                                         new FeedOptions())\n+                                            .queryOffers(\"select * from c where c.offerResourceId = '\"\n+                                                             + response.getProperties()\n+                                                                   .getResourceId()\n+                                                             + \"'\", new FeedOptions())\n                                             .single()\n                                             .flatMap(offerFeedResponse -> {\n                                                 if (offerFeedResponse.getResults().isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTY2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r418999663", "bodyText": "ditto", "author": "moderakh", "createdAt": "2020-05-02T19:45:54Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java", "diffHunk": "@@ -663,6 +686,78 @@ public CosmosAsyncUser getUser(String id) {\n                                                                                               .getThroughput()));\n     }\n \n+    /**\n+     * Sets throughput provisioned for a container in measurement of\n+     * Requests-per-Unit in the Azure Cosmos service.\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.getDocClientWrapper()\n+                                            .queryOffers(getOfferQuerySpecFromResourceId(response.getProperties()\n+                                                                                             .getResourceId()),\n+                                                         new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));\n+                                                }\n+\n+                                                Offer existingOffer = offerFeedResponse.getResults().get(0);\n+                                                ModelBridgeInternal.updateOfferFromProperties(existingOffer,\n+                                                                                              throughputProperties);\n+\n+                                                return this.getDocClientWrapper()\n+                                                           .replaceOffer(existingOffer)\n+                                                           .single();\n+                                            })\n+                                            .map(ModelBridgeInternal::createThroughputRespose));\n+    }\n+\n+    /**\n+     * Gets the throughput of the database\n+     *\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> readThroughput() {\n+        return this.read()\n+                   .flatMap(response -> getDocClientWrapper()\n+                                            .queryOffers(getOfferQuerySpecFromResourceId(response.getProperties()\n+                                                                                            .getResourceId()),\n+                                                         new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +\n+                                                                                  \"resource\"));", "originalCommit": "47ea29d1c3a468506efe925c73bc78a55045ab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMDI1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420220258", "bodyText": "Added resource name", "author": "mbhaskar", "createdAt": "2020-05-05T15:57:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5OTY2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "571c9df9a6ab1613ea61311ad80be39fe41ff8ec", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java\nindex d15a9efce00..e88a6ece137 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java\n\n@@ -696,9 +692,10 @@ public class CosmosAsyncDatabase {\n     public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n         return this.read()\n                    .flatMap(response -> this.getDocClientWrapper()\n-                                            .queryOffers(getOfferQuerySpecFromResourceId(response.getProperties()\n-                                                                                             .getResourceId()),\n-                                                         new FeedOptions())\n+                                            .queryOffers(\"select * from c where c.offerResourceId = '\"\n+                                                             + response.getProperties()\n+                                                                   .getResourceId()\n+                                                             + \"'\", new FeedOptions())\n                                             .single()\n                                             .flatMap(offerFeedResponse -> {\n                                                 if (offerFeedResponse.getResults().isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMDEwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419000107", "bodyText": "please add code sample snippet.\nsimilar to AnalyticalStorageCodeSnippet or IndexPolicyCodeSnippet as example.", "author": "moderakh", "createdAt": "2020-05-02T19:49:48Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {", "originalCommit": "47ea29d1c3a468506efe925c73bc78a55045ab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMDQ1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420220453", "bodyText": "Added snippet", "author": "mbhaskar", "createdAt": "2020-05-05T15:57:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMDEwNw=="}], "type": "inlineReview", "revised_code": {"commit": "571c9df9a6ab1613ea61311ad80be39fe41ff8ec", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\nindex 03da2e8db19..ef4aa3a50b9 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\n\n@@ -21,32 +21,32 @@ public class ThroughputProperties {\n      * @param throughput the throughput\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createManualThroughput(int throughput) {\n-        return new ThroughputProperties(Offer.createManualOffer(throughput));\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n     }\n \n     /**\n      * Create auto scale throughput properties.\n      *\n-     * @param autoScaleMaxThroughput the max auto scale throughput\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n      * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n      * @return the throughput properties\n      */\n-    static ThroughputProperties createAutoScaledThroughput(\n-        int autoScaleMaxThroughput,\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,\n         int autoUpgradethroughputIncrementPercentage) {\n-        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n                                                                    autoUpgradethroughputIncrementPercentage));\n     }\n \n     /**\n      * Create auto scaled provisioned throughput throughput properties.\n      *\n-     * @param autoScaleMaxThroughput the max auto scale throughput\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createAutoScaledThroughput(int autoScaleMaxThroughput) {\n-        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(int maxAutoScaleThroughput) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n                                                                    0));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNzQzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419007436", "bodyText": "remove second offer", "author": "j82w", "createdAt": "2020-05-02T21:00:29Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Offer.java", "diffHunk": "@@ -34,7 +47,80 @@ public Offer(int offerThroughput) {\n     public Offer(String jsonString) {\n         super(jsonString);\n     }\n-    \n+\n+    /**\n+     * Instantiates a new Offer from object node.\n+     *\n+     * @param objectNode the object node\n+     */\n+    public Offer(ObjectNode objectNode) {\n+        super(objectNode);\n+    }\n+\n+    /**\n+     * Create fixed offer offer.\n+     *\n+     * @param throughput the throughput\n+     * @return the offer\n+     */\n+    public static Offer createManualOffer(int throughput) {\n+        return new Offer(throughput);\n+    }\n+\n+    /**\n+     * Create autoscale offer offer.", "originalCommit": "47ea29d1c3a468506efe925c73bc78a55045ab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMDU2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420220567", "bodyText": "Removed", "author": "mbhaskar", "createdAt": "2020-05-05T15:57:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwNzQzNg=="}], "type": "inlineReview", "revised_code": {"commit": "571c9df9a6ab1613ea61311ad80be39fe41ff8ec", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Offer.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Offer.java\nindex 72da6316295..3190be77536 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Offer.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Offer.java\n\n@@ -48,22 +48,13 @@ public class Offer extends Resource {\n         super(jsonString);\n     }\n \n-    /**\n-     * Instantiates a new Offer from object node.\n-     *\n-     * @param objectNode the object node\n-     */\n-    public Offer(ObjectNode objectNode) {\n-        super(objectNode);\n-    }\n-\n     /**\n      * Create fixed offer offer.\n      *\n      * @param throughput the throughput\n      * @return the offer\n      */\n-    public static Offer createManualOffer(int throughput) {\n+    public static Offer createFixedOffer(int throughput) {\n         return new Offer(throughput);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MTUwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419781500", "bodyText": "Is the indentation right?\nIt looks very nested and deep. @moderakh ?", "author": "kirankumarkolli", "createdAt": "2020-05-04T23:11:27Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,68 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()", "originalCommit": "47ea29d1c3a468506efe925c73bc78a55045ab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3NzQyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420477425", "bodyText": "It looks a bit weird, but this is correct. Also this is the best intellij could do :)", "author": "mbhaskar", "createdAt": "2020-05-06T00:02:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MTUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxNjYwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420516603", "bodyText": "The indentation is correct. The nesting is the result of reactive-stream chaining and lambdas", "author": "moderakh", "createdAt": "2020-05-06T02:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MTUwMA=="}], "type": "inlineReview", "revised_code": {"commit": "571c9df9a6ab1613ea61311ad80be39fe41ff8ec", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\nindex f493e58cb1a..d3245fad83b 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\n\n@@ -672,10 +672,10 @@ public class CosmosAsyncContainer {\n     public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n         return this.read()\n                    .flatMap(response -> this.database.getDocClientWrapper()\n-                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n-                                                                                                      .getProperties()\n-                                                                                                      .getResourceId())\n-                                                , new FeedOptions())\n+                                            .queryOffers(\"select * from c where c.offerResourceId = '\"\n+                                                             + response.getProperties()\n+                                                                   .getResourceId()\n+                                                             + \"'\", new FeedOptions())\n                                             .single()\n                                             .flatMap(offerFeedResponse -> {\n                                                 if (offerFeedResponse.getResults().isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MTc5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419781794", "bodyText": "In practice its only possible if name is invalid right?\nHow about reflecting the same in the exception message.", "author": "kirankumarkolli", "createdAt": "2020-05-04T23:12:19Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -661,6 +663,68 @@ public CosmosAsyncConflict getConflict(String id) {\n                    }).map(offerResourceResponse -> offerResourceResponse.getResource().getThroughput());\n     }\n \n+    /**\n+     * Replace the throughput .\n+     *\n+     * @param throughputProperties the throughput properties\n+     * @return the mono containing throughput response\n+     */\n+    public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n+        return this.read()\n+                   .flatMap(response -> this.database.getDocClientWrapper()\n+                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n+                                                                                                      .getProperties()\n+                                                                                                      .getResourceId())\n+                                                , new FeedOptions())\n+                                            .single()\n+                                            .flatMap(offerFeedResponse -> {\n+                                                if (offerFeedResponse.getResults().isEmpty()) {\n+                                                    return Mono.error(BridgeInternal\n+                                                                          .createCosmosClientException(\n+                                                                              HttpConstants.StatusCodes.BADREQUEST,\n+                                                                              \"No offers found for the \" +", "originalCommit": "47ea29d1c3a468506efe925c73bc78a55045ab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMDc0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r420220747", "bodyText": "Added resource id in the error message which should help.", "author": "mbhaskar", "createdAt": "2020-05-05T15:57:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MTc5NA=="}], "type": "inlineReview", "revised_code": {"commit": "571c9df9a6ab1613ea61311ad80be39fe41ff8ec", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\nindex f493e58cb1a..d3245fad83b 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\n\n@@ -672,10 +672,10 @@ public class CosmosAsyncContainer {\n     public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties) {\n         return this.read()\n                    .flatMap(response -> this.database.getDocClientWrapper()\n-                                            .queryOffers(database.getOfferQuerySpecFromResourceId(response\n-                                                                                                      .getProperties()\n-                                                                                                      .getResourceId())\n-                                                , new FeedOptions())\n+                                            .queryOffers(\"select * from c where c.offerResourceId = '\"\n+                                                             + response.getProperties()\n+                                                                   .getResourceId()\n+                                                             + \"'\", new FeedOptions())\n                                             .single()\n                                             .flatMap(offerFeedResponse -> {\n                                                 if (offerFeedResponse.getResults().isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MjY5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r419782692", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static ThroughputProperties createAutoScaledThroughput(int autoScaleMaxThroughput) {\n          \n          \n            \n                public static ThroughputProperties createAutoscaledThroughput(int autoscaleMaxThroughput) {", "author": "kirankumarkolli", "createdAt": "2020-05-04T23:14:58Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.implementation.Offer;\n+import com.azure.cosmos.implementation.OfferAutoscaleSettings;\n+\n+/**\n+ * Represents throughput of the resources in the Azure Cosmos DB service.\n+ */\n+public class ThroughputProperties {\n+    private final Offer offer;\n+\n+    ThroughputProperties(Offer offer) {\n+        this.offer = offer;\n+    }\n+\n+    /**\n+     * Create fixed throughput properties.\n+     *\n+     * @param throughput the throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createManualThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createManualOffer(throughput));\n+    }\n+\n+    /**\n+     * Create auto scale throughput properties.\n+     *\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n+     * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n+     * @return the throughput properties\n+     */\n+    static ThroughputProperties createAutoScaledThroughput(\n+        int autoScaleMaxThroughput,\n+        int autoUpgradethroughputIncrementPercentage) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n+                                                                   autoUpgradethroughputIncrementPercentage));\n+    }\n+\n+    /**\n+     * Create auto scaled provisioned throughput throughput properties.\n+     *\n+     * @param autoScaleMaxThroughput the max auto scale throughput\n+     * @return the throughput properties\n+     */\n+    public static ThroughputProperties createAutoScaledThroughput(int autoScaleMaxThroughput) {", "originalCommit": "47ea29d1c3a468506efe925c73bc78a55045ab97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4NzYyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r422387623", "bodyText": "Done", "author": "mbhaskar", "createdAt": "2020-05-08T21:37:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MjY5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "571c9df9a6ab1613ea61311ad80be39fe41ff8ec", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\nindex 03da2e8db19..ef4aa3a50b9 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ThroughputProperties.java\n\n@@ -21,32 +21,32 @@ public class ThroughputProperties {\n      * @param throughput the throughput\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createManualThroughput(int throughput) {\n-        return new ThroughputProperties(Offer.createManualOffer(throughput));\n+    public static ThroughputProperties createFixedThroughput(int throughput) {\n+        return new ThroughputProperties(Offer.createFixedOffer(throughput));\n     }\n \n     /**\n      * Create auto scale throughput properties.\n      *\n-     * @param autoScaleMaxThroughput the max auto scale throughput\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n      * @param autoUpgradethroughputIncrementPercentage the auto upgrade max throughput increment percentage\n      * @return the throughput properties\n      */\n-    static ThroughputProperties createAutoScaledThroughput(\n-        int autoScaleMaxThroughput,\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(\n+        int maxAutoScaleThroughput,\n         int autoUpgradethroughputIncrementPercentage) {\n-        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n                                                                    autoUpgradethroughputIncrementPercentage));\n     }\n \n     /**\n      * Create auto scaled provisioned throughput throughput properties.\n      *\n-     * @param autoScaleMaxThroughput the max auto scale throughput\n+     * @param maxAutoScaleThroughput the max auto scale throughput\n      * @return the throughput properties\n      */\n-    public static ThroughputProperties createAutoScaledThroughput(int autoScaleMaxThroughput) {\n-        return new ThroughputProperties(Offer.createAutoscaleOffer(autoScaleMaxThroughput,\n+    public static ThroughputProperties createAutoScaledProvisionedThroughput(int maxAutoScaleThroughput) {\n+        return new ThroughputProperties(Offer.createAutoscaleOffer(maxAutoScaleThroughput,\n                                                                    0));\n     }\n \n"}}, {"oid": "571c9df9a6ab1613ea61311ad80be39fe41ff8ec", "url": "https://github.com/Azure/azure-sdk-for-java/commit/571c9df9a6ab1613ea61311ad80be39fe41ff8ec", "message": "Autoscale/Autopilot support\n- Added ThroughputProperties class which contains factories for creating autoscaled or fixed throughput\n- Added ThroughputResponse class to fetch relevant details of offer response\n- Added overloads for database and container to create using throughput properties\n- Added read and replace overloads for database and container to read or replace throughput response", "committedDate": "2020-05-06T00:54:54Z", "type": "commit"}, {"oid": "6c76f5bcce71d4282c02576af722d2d2197d70bf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6c76f5bcce71d4282c02576af722d2d2197d70bf", "message": "Fixing spotbug issue", "committedDate": "2020-05-06T00:54:54Z", "type": "commit"}, {"oid": "2be9d9426979f3e2e8e5926077b6bcb4ded060de", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2be9d9426979f3e2e8e5926077b6bcb4ded060de", "message": "Adressing PR comments\nAdding additional tests", "committedDate": "2020-05-06T00:54:54Z", "type": "commit"}, {"oid": "bf77a32aca2da6fa5d53553ebb42ec3647bc5aff", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bf77a32aca2da6fa5d53553ebb42ec3647bc5aff", "message": "Implementing PR comments", "committedDate": "2020-05-06T00:54:54Z", "type": "commit"}, {"oid": "bf77a32aca2da6fa5d53553ebb42ec3647bc5aff", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bf77a32aca2da6fa5d53553ebb42ec3647bc5aff", "message": "Implementing PR comments", "committedDate": "2020-05-06T00:54:54Z", "type": "forcePushed"}, {"oid": "7258a7e6d43871be75cde97f736bb00917de1608", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7258a7e6d43871be75cde97f736bb00917de1608", "message": "Rebasing master.\nChanging autopilot tests from emulator to simple", "committedDate": "2020-05-06T01:00:12Z", "type": "commit"}, {"oid": "c9c999e2ed99614f9739b1f86105eaea8f18cfaa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c9c999e2ed99614f9739b1f86105eaea8f18cfaa", "message": "Refactoring some implementation", "committedDate": "2020-05-07T21:38:15Z", "type": "commit"}, {"oid": "191d86f5c2fa3094c5024c985a63ef132913aa62", "url": "https://github.com/Azure/azure-sdk-for-java/commit/191d86f5c2fa3094c5024c985a63ef132913aa62", "message": "Moving throughput tests to a new test class.", "committedDate": "2020-05-08T00:24:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4OTU4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r422389583", "bodyText": "Will it ship out?", "author": "kirankumarkolli", "createdAt": "2020-05-08T21:42:42Z", "path": "sdk/cosmos/azure-cosmos/src/samples/java/com/azure/cosmos/ThroughputPropertiesCodeSnippet.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.TestConfigurations;\n+import com.azure.cosmos.models.ThroughputProperties;\n+\n+public class ThroughputPropertiesCodeSnippet {", "originalCommit": "191d86f5c2fa3094c5024c985a63ef132913aa62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5MTQ1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10650#discussion_r422391455", "bodyText": "Yeah, this is public CodeSnippet", "author": "mbhaskar", "createdAt": "2020-05-08T21:47:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4OTU4Mw=="}], "type": "inlineReview", "revised_code": null}]}