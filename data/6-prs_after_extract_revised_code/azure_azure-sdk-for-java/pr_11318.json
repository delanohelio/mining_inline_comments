{"pr_number": 11318, "pr_title": "[TA] Remove pagination feature", "pr_createdAt": "2020-05-19T23:03:52Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/11318", "timeline": [{"oid": "a43f7cb233f2acf161fa6321e11da92606ccaafe", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a43f7cb233f2acf161fa6321e11da92606ccaafe", "message": "remove pagenation feature", "committedDate": "2020-05-19T23:02:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY3MzY4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r427673686", "bodyText": "Name for TextAnalyticsResultCollection is being discussed in the API view tool.", "author": "srnagar", "createdAt": "2020-05-20T00:23:30Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -60,55 +60,53 @@\n     }\n \n     /**\n-     * Helper function for calling service with max overloaded parameters that a returns {@link TextAnalyticsPagedFlux}\n-     * which is a paged flux that contains {@link AnalyzeSentimentResult}.\n+     * Helper function for calling service with max overloaded parameters that returns a {@link Response}\n+     * which contains {@link TextAnalyticsResultCollection} of {@link AnalyzeSentimentResult}.\n      *\n      * @param documents The list of documents to analyze sentiments for.\n      * @param options The {@link TextAnalyticsRequestOptions} request options.\n      *\n-     * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     * @return A mono {@link Response} contains {@link TextAnalyticsResultCollection} of {@link AnalyzeSentimentResult}.\n      */\n-    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> documents,\n-        TextAnalyticsRequestOptions options) {\n+    public Mono<Response<TextAnalyticsResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatch(", "originalCommit": "a43f7cb233f2acf161fa6321e11da92606ccaafe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3OTA3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r430679070", "bodyText": "outdated. This class no longer needed", "author": "mssfang", "createdAt": "2020-05-26T20:10:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY3MzY4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3d80581a6df0c655207fa661ac3207febccaab77", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\nindex 955f28e736c..1f51ed03a38 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n\n@@ -60,15 +60,15 @@ class AnalyzeSentimentAsyncClient {\n     }\n \n     /**\n-     * Helper function for calling service with max overloaded parameters that returns a {@link Response}\n-     * which contains {@link TextAnalyticsResultCollection} of {@link AnalyzeSentimentResult}.\n+     * Helper function for calling service with max overloaded parameters that returns a mono {@link Response}\n+     * which contains {@link AnalyzeSentimentResultCollection}.\n      *\n      * @param documents The list of documents to analyze sentiments for.\n      * @param options The {@link TextAnalyticsRequestOptions} request options.\n      *\n-     * @return A mono {@link Response} contains {@link TextAnalyticsResultCollection} of {@link AnalyzeSentimentResult}.\n+     * @return A mono {@link Response} contains {@link AnalyzeSentimentResultCollection}.\n      */\n-    public Mono<Response<TextAnalyticsResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatch(\n+    public Mono<Response<AnalyzeSentimentResultCollection>> analyzeSentimentBatch(\n         Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options) {\n         try {\n             inputDocumentsValidation(documents);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY3NjkyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r427676926", "bodyText": "Can this api be removed in favor of recognizeLinkedEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)? Similarly, remove this overload for other operations too.", "author": "srnagar", "createdAt": "2020-05-20T00:35:22Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -572,13 +574,13 @@ public String getDefaultLanguage() {\n      * @param language The 2 letter ISO 639-1 representation of language for the text. If not set, uses \"en\" for\n      * English as default.\n      *\n-     * @return A {@link TextAnalyticsPagedFlux} contains a list of\n-     * {@link LinkedEntity recognized linked entities document result}.\n+     * @return A {@link Mono} contains a {@link TextAnalyticsResultCollection} of\n+     * {@link RecognizeLinkedEntitiesResult recognized linked entities document result}.\n      *\n      * @throws NullPointerException if {@code documents} is {@code null}.\n      */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public TextAnalyticsPagedFlux<RecognizeLinkedEntitiesResult> recognizeLinkedEntitiesBatch(\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<TextAnalyticsResultCollection<RecognizeLinkedEntitiesResult>> recognizeLinkedEntitiesBatch(", "originalCommit": "a43f7cb233f2acf161fa6321e11da92606ccaafe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwOTcyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r427709720", "bodyText": "Yes. We will keep one API which described at the updated PR's description.", "author": "mssfang", "createdAt": "2020-05-20T02:40:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY3NjkyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3OTI4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r430679286", "bodyText": "removed", "author": "mssfang", "createdAt": "2020-05-26T20:10:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY3NjkyNg=="}], "type": "inlineReview", "revised_code": {"commit": "3d80581a6df0c655207fa661ac3207febccaab77", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java\nindex 1855f6d446a..626186bd76f 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java\n\n@@ -574,13 +566,12 @@ public final class TextAnalyticsAsyncClient {\n      * @param language The 2 letter ISO 639-1 representation of language for the text. If not set, uses \"en\" for\n      * English as default.\n      *\n-     * @return A {@link Mono} contains a {@link TextAnalyticsResultCollection} of\n-     * {@link RecognizeLinkedEntitiesResult recognized linked entities document result}.\n+     * @return A {@link Mono} contains a {@link RecognizeLinkedEntitiesResultCollection}.\n      *\n      * @throws NullPointerException if {@code documents} is {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<TextAnalyticsResultCollection<RecognizeLinkedEntitiesResult>> recognizeLinkedEntitiesBatch(\n+    public Mono<RecognizeLinkedEntitiesResultCollection> recognizeLinkedEntitiesBatch(\n         Iterable<String> documents, String language) {\n         return recognizeLinkedEntitiesBatch(documents, language, null);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY3Nzg0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r427677843", "bodyText": "nit: change to \"any type that extends {@link TextAnalyticsResult}.\"", "author": "srnagar", "createdAt": "2020-05-20T00:38:26Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsResultCollection.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.util.IterableStream;\n+\n+/**\n+ * A collection model that contains a list of {@link T} along with model version and batch's statistics\n+ *\n+ * @param <T> any child class of {@link TextAnalyticsResult}.", "originalCommit": "a43f7cb233f2acf161fa6321e11da92606ccaafe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxMDQ2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r427710460", "bodyText": "We are going to follow the same pattern as .NET does, so create a concrete collection type for each endpoint but not a generic type, TextAnalyticsResultCollection. The reason behind it is, in the future, it could be difference between vary ResultCollection types.", "author": "mssfang", "createdAt": "2020-05-20T02:43:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY3Nzg0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3OTc4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r430679780", "bodyText": "Outdated. This generic class no longer exist.", "author": "mssfang", "createdAt": "2020-05-26T20:11:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY3Nzg0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3d80581a6df0c655207fa661ac3207febccaab77", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsResultCollection.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/AnalyzeSentimentResultCollection.java\nsimilarity index 62%\nrename from sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsResultCollection.java\nrename to sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/AnalyzeSentimentResultCollection.java\nindex d4c0a3c2921..a44d3351756 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsResultCollection.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/AnalyzeSentimentResultCollection.java\n\n@@ -6,23 +6,21 @@ package com.azure.ai.textanalytics.models;\n import com.azure.core.util.IterableStream;\n \n /**\n- * A collection model that contains a list of {@link T} along with model version and batch's statistics\n- *\n- * @param <T> any child class of {@link TextAnalyticsResult}.\n+ * A collection model that contains a list of {@link AnalyzeSentimentResult} along with model version and\n+ * batch's statistics.\n  */\n-public final class TextAnalyticsResultCollection<T extends TextAnalyticsResult> extends IterableStream<T> {\n+public class AnalyzeSentimentResultCollection extends IterableStream<AnalyzeSentimentResult> {\n     private final String modelVersion;\n     private final TextDocumentBatchStatistics statistics;\n-\n     /**\n-     * Create a {@link TextAnalyticsResultCollection} model that maintains a list of {@link T} along\n-     * with model version and batch's statistics\n+     * Create a {@link AnalyzeSentimentResultCollection} model that maintains a list of {@link AnalyzeSentimentResult}\n+     * along with model version and batch's statistics.\n      *\n-     * @param documentResults A list of generic type {@link T} that is any child class of {@link TextAnalyticsResult}.\n+     * @param documentResults A list of {@link AnalyzeSentimentResult}.\n      * @param modelVersion The model version trained in service for the request.\n      * @param statistics The batch statistics of response.\n      */\n-    public TextAnalyticsResultCollection(Iterable<T> documentResults, String modelVersion,\n+    public AnalyzeSentimentResultCollection(Iterable<AnalyzeSentimentResult> documentResults, String modelVersion,\n         TextDocumentBatchStatistics statistics) {\n         super(documentResults);\n         this.modelVersion = modelVersion;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5Njc5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r427696799", "bodyText": "Is this something new we are introducing in this PR?\nRather if keyPhraseResultCollection is empty return the same to client-side?\nWhat do other languages do here?", "author": "samvaity", "createdAt": "2020-05-20T01:50:45Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/ExtractKeyPhraseAsyncClient.java", "diffHunk": "@@ -74,73 +75,78 @@\n             Objects.requireNonNull(document, \"'document' cannot be null.\");\n             final TextDocumentInput textDocumentInput = new TextDocumentInput(\"0\", document);\n             textDocumentInput.setLanguage(language);\n-            return extractKeyPhrases(Collections.singletonList(textDocumentInput), null)\n-                    .map(keyPhraseResult -> {\n-                        if (keyPhraseResult.isError()) {\n-                            throw logger.logExceptionAsError(toTextAnalyticsException(keyPhraseResult.getError()));\n+            return extractKeyPhrasesWithResponse(Collections.singletonList(textDocumentInput), null)\n+                    .map(keyPhraseResultCollection -> {\n+                        for (ExtractKeyPhraseResult keyPhraseResult : keyPhraseResultCollection.getValue()) {\n+                            if (keyPhraseResult.isError()) {\n+                                throw logger.logExceptionAsError(toTextAnalyticsException(keyPhraseResult.getError()));\n+                            }\n+                            return new KeyPhrasesCollection(keyPhraseResult.getKeyPhrases(),\n+                                keyPhraseResult.getKeyPhrases().getWarnings());\n                         }\n-                        return new KeyPhrasesCollection(keyPhraseResult.getKeyPhrases(),\n-                            keyPhraseResult.getKeyPhrases().getWarnings());\n-                    }).last();\n+                        // this step should never be executed, if executed, we get an empty collection above.\n+                        throw logger.logExceptionAsError(\n+                            new TextAnalyticsException(\"None key Phrases extracted.\",", "originalCommit": "a43f7cb233f2acf161fa6321e11da92606ccaafe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxNDI5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r427714292", "bodyText": "Yes. I will update it to return empty.", "author": "mssfang", "createdAt": "2020-05-20T02:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5Njc5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3d80581a6df0c655207fa661ac3207febccaab77", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/ExtractKeyPhraseAsyncClient.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/ExtractKeyPhraseAsyncClient.java\nindex 946adf6652b..f4a45373c50 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/ExtractKeyPhraseAsyncClient.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/ExtractKeyPhraseAsyncClient.java\n\n@@ -100,10 +100,9 @@ class ExtractKeyPhraseAsyncClient {\n      * @param documents A list of documents to extract key phrases for.\n      * @param options The {@link TextAnalyticsRequestOptions} request options.\n      *\n-     * @return A mono {@link Response} that contains {@link TextAnalyticsResultCollection} of\n-     *  {@link ExtractKeyPhraseResult}.\n+     * @return A mono {@link Response} that contains {@link ExtractKeyPhrasesResultCollection}.\n      */\n-    Mono<Response<TextAnalyticsResultCollection<ExtractKeyPhraseResult>>> extractKeyPhrasesWithResponse(\n+    Mono<Response<ExtractKeyPhrasesResultCollection>> extractKeyPhrasesWithResponse(\n         Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options) {\n         try {\n             inputDocumentsValidation(documents);\n"}}, {"oid": "3d80581a6df0c655207fa661ac3207febccaab77", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3d80581a6df0c655207fa661ac3207febccaab77", "message": "delete generic type", "committedDate": "2020-05-20T06:16:10Z", "type": "commit"}, {"oid": "7d37f7f2b1d1b4f28e4d4b36aadc7e0d6a40453f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7d37f7f2b1d1b4f28e4d4b36aadc7e0d6a40453f", "message": "remove overload methods", "committedDate": "2020-05-20T06:39:22Z", "type": "commit"}, {"oid": "f5745c265e4c1ffa44f96d8ba0df8801c5b24c46", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f5745c265e4c1ffa44f96d8ba0df8801c5b24c46", "message": "javadoc checkstyle and update changelog", "committedDate": "2020-05-20T06:45:19Z", "type": "commit"}, {"oid": "7b3f104a6a2d77d7dfe1fc90b260bc354730ddcb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b3f104a6a2d77d7dfe1fc90b260bc354730ddcb", "message": "wording", "committedDate": "2020-05-20T06:46:01Z", "type": "commit"}, {"oid": "bb0877ab04c621c107e661c1d30339b550ca246c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bb0877ab04c621c107e661c1d30339b550ca246c", "message": "return an obj with nulls", "committedDate": "2020-05-20T06:56:32Z", "type": "commit"}, {"oid": "0350287c7e2c3c1800a98b5ca615c8ab1e0e81b3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0350287c7e2c3c1800a98b5ca615c8ab1e0e81b3", "message": "remove unused improt", "committedDate": "2020-05-20T06:58:35Z", "type": "commit"}, {"oid": "60f9178f7e3f7fbec7bdfd5556fb35bbe0343816", "url": "https://github.com/Azure/azure-sdk-for-java/commit/60f9178f7e3f7fbec7bdfd5556fb35bbe0343816", "message": "resolve conflict", "committedDate": "2020-05-20T15:53:23Z", "type": "commit"}, {"oid": "7c384beef3d1111c2f3bea95033ed1d388f25629", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7c384beef3d1111c2f3bea95033ed1d388f25629", "message": "resolve conflict", "committedDate": "2020-05-21T22:13:41Z", "type": "commit"}, {"oid": "eb0a5692fab64b8e49b6512223ceb43498acab83", "url": "https://github.com/Azure/azure-sdk-for-java/commit/eb0a5692fab64b8e49b6512223ceb43498acab83", "message": "make fromString() public", "committedDate": "2020-05-22T00:07:57Z", "type": "commit"}, {"oid": "14631012cad850f1e43a0e450e7c28db937ab11b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/14631012cad850f1e43a0e450e7c28db937ab11b", "message": "add collections to util", "committedDate": "2020-05-22T00:52:14Z", "type": "commit"}, {"oid": "ffa221f6731ef5ff38bc615689fef23db229a678", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ffa221f6731ef5ff38bc615689fef23db229a678", "message": "modify TextAnalyticsException", "committedDate": "2020-05-26T18:12:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3NDAwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r430674009", "bodyText": "Is this required?", "author": "srnagar", "createdAt": "2020-05-26T19:59:58Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/ExtractKeyPhraseAsyncClient.java", "diffHunk": "@@ -74,73 +74,73 @@\n             Objects.requireNonNull(document, \"'document' cannot be null.\");\n             final TextDocumentInput textDocumentInput = new TextDocumentInput(\"0\", document);\n             textDocumentInput.setLanguage(language);\n-            return extractKeyPhrases(Collections.singletonList(textDocumentInput), null)\n-                    .map(keyPhraseResult -> {\n-                        if (keyPhraseResult.isError()) {\n-                            throw logger.logExceptionAsError(toTextAnalyticsException(keyPhraseResult.getError()));\n+            return extractKeyPhrasesWithResponse(Collections.singletonList(textDocumentInput), null)\n+                    .map(keyPhraseResultCollection -> {\n+                        for (ExtractKeyPhraseResult keyPhraseResult : keyPhraseResultCollection.getValue()) {\n+                            if (keyPhraseResult.isError()) {\n+                                throw logger.logExceptionAsError(toTextAnalyticsException(keyPhraseResult.getError()));\n+                            }\n+                            return new KeyPhrasesCollection(keyPhraseResult.getKeyPhrases(),\n+                                keyPhraseResult.getKeyPhrases().getWarnings());\n                         }\n-                        return new KeyPhrasesCollection(keyPhraseResult.getKeyPhrases(),\n-                            keyPhraseResult.getKeyPhrases().getWarnings());\n-                    }).last();\n+                        // this step should never be executed, if executed, we get an empty collection above.\n+                        return new KeyPhrasesCollection(null, null);", "originalCommit": "ffa221f6731ef5ff38bc615689fef23db229a678", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0MjQ5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r430742492", "bodyText": "you have to return or throw something. so i just return it. Is there a better way to refactor the code?", "author": "mssfang", "createdAt": "2020-05-26T22:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3NDAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc4NjM5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r430786395", "bodyText": "refactored the code. How is looks now?", "author": "mssfang", "createdAt": "2020-05-27T00:54:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3NDAwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3ad4f4932efb127e1e9f7cc9ad2e50552b530dbd", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/ExtractKeyPhraseAsyncClient.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/ExtractKeyPhraseAsyncClient.java\nindex 36dfdea5edc..448bd3bb315 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/ExtractKeyPhraseAsyncClient.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/ExtractKeyPhraseAsyncClient.java\n\n@@ -75,16 +75,18 @@ class ExtractKeyPhraseAsyncClient {\n             final TextDocumentInput textDocumentInput = new TextDocumentInput(\"0\", document);\n             textDocumentInput.setLanguage(language);\n             return extractKeyPhrasesWithResponse(Collections.singletonList(textDocumentInput), null)\n-                    .map(keyPhraseResultCollection -> {\n-                        for (ExtractKeyPhraseResult keyPhraseResult : keyPhraseResultCollection.getValue()) {\n+                    .map(resultCollectionResponse -> {\n+                        IterableStream<String> keyPhrases = IterableStream.of(null);\n+                        IterableStream<TextAnalyticsWarning> warnings = IterableStream.of(null);\n+                        // for each loop will have only one entry inside\n+                        for (ExtractKeyPhraseResult keyPhraseResult : resultCollectionResponse.getValue()) {\n                             if (keyPhraseResult.isError()) {\n                                 throw logger.logExceptionAsError(toTextAnalyticsException(keyPhraseResult.getError()));\n                             }\n-                            return new KeyPhrasesCollection(keyPhraseResult.getKeyPhrases(),\n-                                keyPhraseResult.getKeyPhrases().getWarnings());\n+                            keyPhrases = keyPhraseResult.getKeyPhrases();\n+                            warnings = keyPhraseResult.getKeyPhrases().getWarnings();\n                         }\n-                        // this step should never be executed, if executed, we get an empty collection above.\n-                        return new KeyPhrasesCollection(null, null);\n+                        return new KeyPhrasesCollection(keyPhrases, warnings);\n                     });\n         } catch (RuntimeException ex) {\n             return monoError(logger, ex);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxMTk2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r430711968", "bodyText": "Can keyPhraseResultCollection.getValue() be null or empty?", "author": "srnagar", "createdAt": "2020-05-26T21:15:13Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/ExtractKeyPhraseAsyncClient.java", "diffHunk": "@@ -74,73 +74,73 @@\n             Objects.requireNonNull(document, \"'document' cannot be null.\");\n             final TextDocumentInput textDocumentInput = new TextDocumentInput(\"0\", document);\n             textDocumentInput.setLanguage(language);\n-            return extractKeyPhrases(Collections.singletonList(textDocumentInput), null)\n-                    .map(keyPhraseResult -> {\n-                        if (keyPhraseResult.isError()) {\n-                            throw logger.logExceptionAsError(toTextAnalyticsException(keyPhraseResult.getError()));\n+            return extractKeyPhrasesWithResponse(Collections.singletonList(textDocumentInput), null)\n+                    .map(keyPhraseResultCollection -> {\n+                        for (ExtractKeyPhraseResult keyPhraseResult : keyPhraseResultCollection.getValue()) {", "originalCommit": "ffa221f6731ef5ff38bc615689fef23db229a678", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0MzIzMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r430743231", "bodyText": "the valuable keyPhraseResultCollection, should change to response, so it will be response.getValue()\nAs I know, response.getValue() should not be empty or null?", "author": "mssfang", "createdAt": "2020-05-26T22:31:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxMTk2OA=="}], "type": "inlineReview", "revised_code": {"commit": "3ad4f4932efb127e1e9f7cc9ad2e50552b530dbd", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/ExtractKeyPhraseAsyncClient.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/ExtractKeyPhraseAsyncClient.java\nindex 36dfdea5edc..448bd3bb315 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/ExtractKeyPhraseAsyncClient.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/ExtractKeyPhraseAsyncClient.java\n\n@@ -75,16 +75,18 @@ class ExtractKeyPhraseAsyncClient {\n             final TextDocumentInput textDocumentInput = new TextDocumentInput(\"0\", document);\n             textDocumentInput.setLanguage(language);\n             return extractKeyPhrasesWithResponse(Collections.singletonList(textDocumentInput), null)\n-                    .map(keyPhraseResultCollection -> {\n-                        for (ExtractKeyPhraseResult keyPhraseResult : keyPhraseResultCollection.getValue()) {\n+                    .map(resultCollectionResponse -> {\n+                        IterableStream<String> keyPhrases = IterableStream.of(null);\n+                        IterableStream<TextAnalyticsWarning> warnings = IterableStream.of(null);\n+                        // for each loop will have only one entry inside\n+                        for (ExtractKeyPhraseResult keyPhraseResult : resultCollectionResponse.getValue()) {\n                             if (keyPhraseResult.isError()) {\n                                 throw logger.logExceptionAsError(toTextAnalyticsException(keyPhraseResult.getError()));\n                             }\n-                            return new KeyPhrasesCollection(keyPhraseResult.getKeyPhrases(),\n-                                keyPhraseResult.getKeyPhrases().getWarnings());\n+                            keyPhrases = keyPhraseResult.getKeyPhrases();\n+                            warnings = keyPhraseResult.getKeyPhrases().getWarnings();\n                         }\n-                        // this step should never be executed, if executed, we get an empty collection above.\n-                        return new KeyPhrasesCollection(null, null);\n+                        return new KeyPhrasesCollection(keyPhrases, warnings);\n                     });\n         } catch (RuntimeException ex) {\n             return monoError(logger, ex);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxMzExMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r430713113", "bodyText": "Why do we have this in all the response mappers? Also, the comment is confusing. Either it gets executed or not. If it is expected to not be executed, then we should throw an exception when it does.", "author": "srnagar", "createdAt": "2020-05-26T21:17:32Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -161,71 +160,21 @@ public String getDefaultLanguage() {\n         try {\n             Objects.requireNonNull(document, \"'document' cannot be null.\");\n             return detectLanguageBatch(Collections.singletonList(document), countryHint, null)\n-                .map(detectLanguageResult -> {\n-                    if (detectLanguageResult.isError()) {\n-                        throw logger.logExceptionAsError(toTextAnalyticsException(detectLanguageResult.getError()));\n+                .map(detectLanguageResultCollection ->  {\n+                    for (DetectLanguageResult detectLanguageResult : detectLanguageResultCollection) {\n+                        if (detectLanguageResult.isError()) {\n+                            throw logger.logExceptionAsError(toTextAnalyticsException(detectLanguageResult.getError()));\n+                        }\n+                        return detectLanguageResult.getPrimaryLanguage();\n                     }\n-                    return detectLanguageResult.getPrimaryLanguage();\n-                }).last();\n+                    // this step should never be executed, if executed, we get an empty collection above.\n+                    return new DetectedLanguage(null, null, -1, null);", "originalCommit": "ffa221f6731ef5ff38bc615689fef23db229a678", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc4NjU3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r430786572", "bodyText": "Throw an exception will make java inconsistency with other languages.", "author": "mssfang", "createdAt": "2020-05-27T00:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxMzExMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzNDU3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r430834572", "bodyText": "could you expand on what the scenario is here? not sure why we need to create this fake object.\nHow will the user consume/use this?", "author": "maririos", "createdAt": "2020-05-27T03:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxMzExMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwNjk4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r430906989", "bodyText": "@maririos  It is what we discussed afternoon. .NET return it as it is.\nThe scenario is when user gives a single input document, internally, it called the batch API.\nAnd then we get the batch output result collection, which in here, DetectLanguageResultCollection, this class extends IterableStream<DetectLanguageResult>,  So the DetectLanguageResultCollection should has only one DetectLanguageResult. but the fake object created here should not be executed, since DetectLanguageResultCollection should has only one.", "author": "mssfang", "createdAt": "2020-05-27T07:20:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxMzExMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwODcyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r430908728", "bodyText": "@mssfang  can be handled similarly https://github.com/Azure/azure-sdk-for-java/pull/11318/files#diff-8d0c97bfcab02df81ac3a72abd26a2a2R78-R89\nUpdate the comment indicating that an empty result is returned when the service returns an empty collection.", "author": "samvaity", "createdAt": "2020-05-27T07:24:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxMzExMw=="}], "type": "inlineReview", "revised_code": {"commit": "f6a5715ab28697b5b1f6d317749ce34bd72e832d", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java\nindex af575823e99..d639d9648da 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java\n\n@@ -167,8 +168,10 @@ public final class TextAnalyticsAsyncClient {\n                         }\n                         return detectLanguageResult.getPrimaryLanguage();\n                     }\n-                    // this step should never be executed, if executed, we get an empty collection above.\n-                    return new DetectedLanguage(null, null, -1, null);\n+\n+                    // When the detected language result collection is empty,\n+                    // return empty result for the empty collection returned by the service.\n+                    return new DetectedLanguage(\"\", \"\", -1, IterableStream.of(null));\n                 });\n         } catch (RuntimeException ex) {\n             return monoError(logger, ex);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxNDk0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r430714943", "bodyText": "Why are these overloads removed?", "author": "srnagar", "createdAt": "2020-05-26T21:21:24Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClient.java", "diffHunk": "@@ -123,60 +123,6 @@ public DetectedLanguage detectLanguage(String document, String countryHint) {\n         return client.detectLanguage(document, countryHint).block();\n     }\n \n-    /**\n-     * Detects Language for a batch of documents.\n-     *\n-     * This method will use the default country hint that sets up in\n-     * {@link TextAnalyticsClientBuilder#defaultCountryHint(String)}. If none is specified, service will use 'US' as\n-     * the country hint.\n-     *\n-     * <p><strong>Code Sample</strong></p>\n-     * <p>Detects the languages in a list of documents.</p>\n-     * {@codesnippet com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch#Iterable}\n-     *\n-     * @param documents The list of documents to detect languages for.\n-     * For text length limits, maximum batch size, and supported text encoding, see\n-     * <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>.\n-     *\n-     * @return A {@link TextAnalyticsPagedIterable} contains a list of\n-     * {@link DetectLanguageResult detected language document result}.\n-     *\n-     * @throws NullPointerException if {@code documents} is {@code null}.\n-     * @throws IllegalArgumentException if {@code documents} is empty.\n-     */\n-    @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public TextAnalyticsPagedIterable<DetectLanguageResult> detectLanguageBatch(Iterable<String> documents) {", "originalCommit": "ffa221f6731ef5ff38bc615689fef23db229a678", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0Nzg3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r430747879", "bodyText": "as discussed offline, we reduce the overload APIs to one", "author": "mssfang", "createdAt": "2020-05-26T22:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxNDk0Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxNjc0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r430716749", "bodyText": "We still need util package to be exported as this package holds the collection types that are returned to the user.", "author": "srnagar", "createdAt": "2020-05-26T21:25:14Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/module-info.java", "diffHunk": "@@ -6,7 +6,6 @@\n \n     exports com.azure.ai.textanalytics;\n     exports com.azure.ai.textanalytics.models;\n-    exports com.azure.ai.textanalytics.util;", "originalCommit": "ffa221f6731ef5ff38bc615689fef23db229a678", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4a579cd92bab814da5be392849c51d7fb2bca52", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/module-info.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/module-info.java\nindex 7fb7778d529..1712b699cae 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/module-info.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/module-info.java\n\n@@ -6,6 +6,7 @@ module com.azure.ai.textanalytics {\n \n     exports com.azure.ai.textanalytics;\n     exports com.azure.ai.textanalytics.models;\n+    exports com.azure.ai.textanalytics.util;\n \n     opens com.azure.ai.textanalytics.implementation to com.fasterxml.jackson.databind;\n     opens com.azure.ai.textanalytics.models to com.fasterxml.jackson.databind;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxODcwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r430718702", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Package containing classes for creating result collections on Azure Text Analytics.\n          \n          \n            \n             * Package containing Azure Text Analytics collection types that contain the results for batch operations.", "author": "srnagar", "createdAt": "2020-05-26T21:29:32Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/util/package-info.java", "diffHunk": "@@ -2,8 +2,6 @@\n // Licensed under the MIT License.\n \n /**\n- * Package containing classes for creating a {@link com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux}\n- * and {@link com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable} to use them to perform operations on\n- * Azure Text Analytics.\n+ * Package containing classes for creating result collections on Azure Text Analytics.", "originalCommit": "ffa221f6731ef5ff38bc615689fef23db229a678", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4a579cd92bab814da5be392849c51d7fb2bca52", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/util/package-info.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/util/package-info.java\nindex f4e69458c2c..4e612dc2404 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/util/package-info.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/util/package-info.java\n\n@@ -2,6 +2,6 @@\n // Licensed under the MIT License.\n \n /**\n- * Package containing classes for creating result collections on Azure Text Analytics.\n+ * Package containing Azure Text Analytics collection types that contain the results for batch operations.\n  */\n package com.azure.ai.textanalytics.util;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3Nzk5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r430677998", "bodyText": "nit: Should be fine to just say A  {@link Response}", "author": "samvaity", "createdAt": "2020-05-26T20:08:00Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/DetectLanguageAsyncClient.java", "diffHunk": "@@ -57,55 +58,51 @@\n     }\n \n     /**\n-     * Helper function for calling service with max overloaded parameters that a returns {@link TextAnalyticsPagedFlux}\n-     * which is a paged flux that contains {@link DetectLanguageResult}.\n+     * Helper function for calling service with max overloaded parameters.\n      *\n      * @param documents The list of documents to detect languages for.\n      * @param options The {@link TextAnalyticsRequestOptions} request options.\n      *\n-     * @return The {@link TextAnalyticsPagedFlux} of {@link DetectLanguageResult}.\n+     * @return A mono {@link Response} that contains {@link DetectLanguageResultCollection}.\n      */\n-    TextAnalyticsPagedFlux<DetectLanguageResult> detectLanguageBatch(Iterable<DetectLanguageInput> documents,\n-        TextAnalyticsRequestOptions options) {\n+    Mono<Response<DetectLanguageResultCollection>> detectLanguageBatch(\n+        Iterable<DetectLanguageInput> documents, TextAnalyticsRequestOptions options) {\n         try {\n             inputDocumentsValidation(documents);\n-            return new TextAnalyticsPagedFlux<>(() -> (continuationToken, pageSize) -> withContext(context ->\n-                getDetectedLanguageResponseInPage(documents, options, context)).flux());\n+            return withContext(context -> getDetectedLanguageResponse(documents, options, context));\n         } catch (RuntimeException ex) {\n-            return new TextAnalyticsPagedFlux<>(() -> (continuationToken, pageSize) -> fluxError(logger, ex));\n+            return monoError(logger, ex);\n         }\n     }\n \n     /**\n-     * Helper function for calling service with max overloaded parameters with {@link Context} that a returns\n-     * {@link TextAnalyticsPagedFlux} which is a paged flux that contains {@link DetectLanguageResult}.\n+     * Helper function for calling service with max overloaded parameters with {@link Context}.\n      *\n      * @param documents The list of documents to detect languages for.\n      * @param options The {@link TextAnalyticsRequestOptions} request options.\n      * @param context Additional context that is passed through the Http pipeline during the service call.\n      *\n-     * @return The {@link TextAnalyticsPagedFlux} of {@link DetectLanguageResult}.\n+     * @return A mono {@link Response} which contains {@link DetectLanguageResultCollection}.", "originalCommit": "ffa221f6731ef5ff38bc615689fef23db229a678", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDczODczMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r430738731", "bodyText": "will remove it", "author": "mssfang", "createdAt": "2020-05-26T22:18:46Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizeEntitiesBatchDocuments.java", "diffHunk": "@@ -29,8 +29,8 @@\n     public static void main(String[] args) {\n         // Instantiate a client that will be used to call the service.\n         TextAnalyticsClient client = new TextAnalyticsClientBuilder()\n-            .credential(new AzureKeyCredential(\"{key}\"))\n-            .endpoint(\"{endpoint}\")\n+            .credential(new AzureKeyCredential(\"184654c847d54432b8301a4b76f63045\"))", "originalCommit": "ffa221f6731ef5ff38bc615689fef23db229a678", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0MTM0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r430741340", "bodyText": "is the endpoint printed somewhere? do we need to rotate this key?", "author": "maririos", "createdAt": "2020-05-26T22:26:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDczODczMQ=="}], "type": "inlineReview", "revised_code": {"commit": "c4a579cd92bab814da5be392849c51d7fb2bca52", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizeEntitiesBatchDocuments.java b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizeEntitiesBatchDocuments.java\nindex 5b2db4ff83a..d537705b18b 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizeEntitiesBatchDocuments.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizeEntitiesBatchDocuments.java\n\n@@ -29,8 +29,8 @@ public class RecognizeEntitiesBatchDocuments {\n     public static void main(String[] args) {\n         // Instantiate a client that will be used to call the service.\n         TextAnalyticsClient client = new TextAnalyticsClientBuilder()\n-            .credential(new AzureKeyCredential(\"184654c847d54432b8301a4b76f63045\"))\n-            .endpoint(\"https://westus2.ppe.cognitiveservices.azure.com\")\n+            .credential(new AzureKeyCredential(\"{key}\"))\n+            .endpoint(\"{endpoint}\")\n             .buildClient();\n \n         // The texts that need be analyzed.\n"}}, {"oid": "c4a579cd92bab814da5be392849c51d7fb2bca52", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c4a579cd92bab814da5be392849c51d7fb2bca52", "message": "address partial feedbacks", "committedDate": "2020-05-26T22:37:18Z", "type": "commit"}, {"oid": "3ad4f4932efb127e1e9f7cc9ad2e50552b530dbd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3ad4f4932efb127e1e9f7cc9ad2e50552b530dbd", "message": "refactor for single document operation", "committedDate": "2020-05-27T00:02:00Z", "type": "commit"}, {"oid": "04a88bd9689046b8edc559602335eba26743e125", "url": "https://github.com/Azure/azure-sdk-for-java/commit/04a88bd9689046b8edc559602335eba26743e125", "message": "make textAnalyticsErrorCode serializable", "committedDate": "2020-05-27T04:33:17Z", "type": "commit"}, {"oid": "ccfbd988d64104ad33e49928c0c1b94b87bf94b8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ccfbd988d64104ad33e49928c0c1b94b87bf94b8", "message": "use AAD credentail instead of key credential and bring back create-as-needed resouces", "committedDate": "2020-05-27T05:39:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg3MDQ5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11318#discussion_r430870498", "bodyText": "It would be good to show these examples with valid TextAnalyticsRequestOptions options now that we don't have the other overload.", "author": "samvaity", "createdAt": "2020-05-27T05:47:36Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizeLinkedEntitiesBatchStringDocuments.java", "diffHunk": "@@ -36,7 +36,7 @@ public static void main(String[] args) {\n \n         // Recognizing linked entities for each document in a batch of documents\n         AtomicInteger counter = new AtomicInteger();\n-        for (RecognizeLinkedEntitiesResult entitiesResult : client.recognizeLinkedEntitiesBatch(documents, \"en\")) {", "originalCommit": "04a88bd9689046b8edc559602335eba26743e125", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "499de5043e0b48aed000b35ef7c97295411b3658", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizeLinkedEntitiesBatchStringDocuments.java b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizeLinkedEntitiesBatchStringDocuments.java\nindex 2f125e945fc..3ec69a623e6 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizeLinkedEntitiesBatchStringDocuments.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizeLinkedEntitiesBatchStringDocuments.java\n\n@@ -34,10 +37,23 @@ public class RecognizeLinkedEntitiesBatchStringDocuments {\n             \"Mount Shasta has lenticular clouds.\"\n         );\n \n+        // Request options: show statistics and model version\n+        TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setIncludeStatistics(true).setModelVersion(\"latest\");\n+\n         // Recognizing linked entities for each document in a batch of documents\n+        RecognizeLinkedEntitiesResultCollection linkedEntitiesResultCollection = client.recognizeLinkedEntitiesBatch(documents, \"en\", requestOptions);\n+\n+        // Model version\n+        System.out.printf(\"Results of Azure Text Analytics \\\"Linked Entities Recognition\\\" Model, version: %s%n\", linkedEntitiesResultCollection.getModelVersion());\n+\n+        // Batch statistics\n+        TextDocumentBatchStatistics batchStatistics = linkedEntitiesResultCollection.getStatistics();\n+        System.out.printf(\"Documents statistics: document count = %s, erroneous document count = %s, transaction count = %s, valid document count = %s.%n\",\n+            batchStatistics.getDocumentCount(), batchStatistics.getInvalidDocumentCount(), batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n+\n+        // Recognized linked entities from a batch of documents\n         AtomicInteger counter = new AtomicInteger();\n-        for (RecognizeLinkedEntitiesResult entitiesResult : client.recognizeLinkedEntitiesBatch(documents, \"en\", null)) {\n-            // Recognized linked entities from a batch of documents\n+        for (RecognizeLinkedEntitiesResult entitiesResult : linkedEntitiesResultCollection) {\n             System.out.printf(\"%nText = %s%n\", documents.get(counter.getAndIncrement()));\n             if (entitiesResult.isError()) {\n                 // Erroneous document\n"}}, {"oid": "499de5043e0b48aed000b35ef7c97295411b3658", "url": "https://github.com/Azure/azure-sdk-for-java/commit/499de5043e0b48aed000b35ef7c97295411b3658", "message": "update samples with requestOptions", "committedDate": "2020-05-27T07:04:52Z", "type": "commit"}, {"oid": "f6a5715ab28697b5b1f6d317749ce34bd72e832d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f6a5715ab28697b5b1f6d317749ce34bd72e832d", "message": "update docs", "committedDate": "2020-05-27T07:42:40Z", "type": "commit"}, {"oid": "c702d44e0baf64c9ec0d9b50e10ab7cbe1e7f540", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c702d44e0baf64c9ec0d9b50e10ab7cbe1e7f540", "message": "refactor code", "committedDate": "2020-05-27T18:05:13Z", "type": "commit"}]}