{"pr_number": 15188, "pr_title": "Add Query Tests", "pr_createdAt": "2020-09-15T00:28:03Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/15188", "timeline": [{"oid": "599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8", "message": "Add Query Tests", "committedDate": "2020-09-15T00:27:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxMjUwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#discussion_r488312507", "bodyText": "XML comments? I know you need to do this but I did not understand why we need this. What are we serializing a string to and why?", "author": "vinagesh", "createdAt": "2020-09-15T00:34:31Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/converters/ContinuationTokenSerializer.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package com.azure.digitaltwins.core.implementation.converters;\n+\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.azure.core.util.serializer.SerializerEncoding;\n+\n+public class ContinuationTokenSerializer {\n+    public static String serialize(String continueationToken) {", "originalCommit": "599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "477956af3fe572bf42484b96479f02d0814f31be", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/converters/ContinuationTokenSerializer.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/converters/ContinuationTokenSerializer.java\nindex 17033317ef0..3fc119b3ebd 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/converters/ContinuationTokenSerializer.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/converters/ContinuationTokenSerializer.java\n\n@@ -3,10 +3,21 @@ package com.azure.digitaltwins.core.implementation.converters;\n import com.azure.core.util.serializer.JacksonAdapter;\n import com.azure.core.util.serializer.SerializerEncoding;\n \n+/**\n+ * Encodes the continuation token as a json encoded string\n+ */\n public class ContinuationTokenSerializer {\n-    public static String serialize(String continueationToken) {\n+    /**\n+     * Encodes the continuation token as a json encoded string that the ADT service expects\n+     * @param continuationToken The continuation token.\n+     * @return Json encoded String\n+     * example:\n+     * Input: {\"_t\":2,\"_s\":null,\"_rc\":\"[{\\\"token\\\":\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\",\\\"range\\\":{\\\"min\\\":\\\"\\\",\\\"max\\\":\\\"05C1DFFFFFFFFC\\\"}}]\",\"_q\":\"SELECT * FROM digitaltwins where IsOccupied = true\"}\n+     * Output: \"{\\\"_t\\\":2,\\\"_s\\\":null,\\\"_rc\\\":\\\"[{\\\\\\\"token\\\\\\\":\\\\\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\\\\\",\\\\\\\"range\\\\\\\":{\\\\\\\"min\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"max\\\\\\\":\\\\\\\"05C1DFFFFFFFFC\\\\\\\"}}]\\\",\\\"_q\\\":\\\"SELECT * FROM digitaltwins where IsOccupied = true\\\"}\"\n+     */\n+    public static String serialize(String continuationToken) {\n         try {\n-            return new JacksonAdapter().serialize(continueationToken, SerializerEncoding.JSON);\n+            return new JacksonAdapter().serialize(continuationToken, SerializerEncoding.JSON);\n         }\n         catch (Exception e){\n             throw new IllegalArgumentException(\"Invalid continuation token\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxMzAxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#discussion_r488313015", "bodyText": "turns\n{\"_t\":2,\"_s\":null,\"_rc\":\"[{\\\"token\\\":\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\",\\\"range\\\":{\\\"min\\\":\\\"\\\",\\\"max\\\":\\\"05C1DFFFFFFFFC\\\"}}]\",\"_q\":\"SELECT * FROM digitaltwins where IsOccupied = true\"}\ninto\n\"{\\\"_t\\\":2,\\\"_s\\\":null,\\\"_rc\\\":\\\"[{\\\\\\\"token\\\\\\\":\\\\\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\\\\\",\\\\\\\"range\\\\\\\":{\\\\\\\"min\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"max\\\\\\\":\\\\\\\"05C1DFFFFFFFFC\\\\\\\"}}]\\\",\\\"_q\\\":\\\"SELECT * FROM digitaltwins where IsOccupied = true\\\"}\"", "author": "azabbasi", "createdAt": "2020-09-15T00:36:21Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/converters/ContinuationTokenSerializer.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package com.azure.digitaltwins.core.implementation.converters;\n+\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.azure.core.util.serializer.SerializerEncoding;\n+\n+public class ContinuationTokenSerializer {", "originalCommit": "599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxMzgzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#discussion_r488313835", "bodyText": "Thanks!", "author": "vinagesh", "createdAt": "2020-09-15T00:39:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxMzAxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "477956af3fe572bf42484b96479f02d0814f31be", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/converters/ContinuationTokenSerializer.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/converters/ContinuationTokenSerializer.java\nindex 17033317ef0..3fc119b3ebd 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/converters/ContinuationTokenSerializer.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/converters/ContinuationTokenSerializer.java\n\n@@ -3,10 +3,21 @@ package com.azure.digitaltwins.core.implementation.converters;\n import com.azure.core.util.serializer.JacksonAdapter;\n import com.azure.core.util.serializer.SerializerEncoding;\n \n+/**\n+ * Encodes the continuation token as a json encoded string\n+ */\n public class ContinuationTokenSerializer {\n-    public static String serialize(String continueationToken) {\n+    /**\n+     * Encodes the continuation token as a json encoded string that the ADT service expects\n+     * @param continuationToken The continuation token.\n+     * @return Json encoded String\n+     * example:\n+     * Input: {\"_t\":2,\"_s\":null,\"_rc\":\"[{\\\"token\\\":\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\",\\\"range\\\":{\\\"min\\\":\\\"\\\",\\\"max\\\":\\\"05C1DFFFFFFFFC\\\"}}]\",\"_q\":\"SELECT * FROM digitaltwins where IsOccupied = true\"}\n+     * Output: \"{\\\"_t\\\":2,\\\"_s\\\":null,\\\"_rc\\\":\\\"[{\\\\\\\"token\\\\\\\":\\\\\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\\\\\",\\\\\\\"range\\\\\\\":{\\\\\\\"min\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"max\\\\\\\":\\\\\\\"05C1DFFFFFFFFC\\\\\\\"}}]\\\",\\\"_q\\\":\\\"SELECT * FROM digitaltwins where IsOccupied = true\\\"}\"\n+     */\n+    public static String serialize(String continuationToken) {\n         try {\n-            return new JacksonAdapter().serialize(continueationToken, SerializerEncoding.JSON);\n+            return new JacksonAdapter().serialize(continuationToken, SerializerEncoding.JSON);\n         }\n         catch (Exception e){\n             throw new IllegalArgumentException(\"Invalid continuation token\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxMzE2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#discussion_r488313167", "bodyText": "In C# you had added a test to be enabled later to test pagination. I think we should add it here as well to ensure next page really goes to the next page.", "author": "vinagesh", "createdAt": "2020-09-15T00:36:59Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/QueryTests.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.models.BasicDigitalTwin;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+public class QueryTests extends QueryTestBase{\n+\n+    private final ClientLogger logger = new ClientLogger(ComponentsTests.class);\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void validQuerySucceeds(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {", "originalCommit": "599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxMzQyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#discussion_r488313421", "bodyText": "Agreed, as I mentioned in the discussions page, we need a bigger task that makes sure all APIs that have paging hit that code path.", "author": "azabbasi", "createdAt": "2020-09-15T00:37:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxMzE2Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNTA5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#discussion_r488315096", "bodyText": "the spelling \"continueationToken\" has a typo", "author": "abhipsaMisra", "createdAt": "2020-09-15T00:43:48Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/converters/ContinuationTokenSerializer.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package com.azure.digitaltwins.core.implementation.converters;\n+\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.azure.core.util.serializer.SerializerEncoding;\n+\n+public class ContinuationTokenSerializer {\n+    public static String serialize(String continueationToken) {", "originalCommit": "599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "477956af3fe572bf42484b96479f02d0814f31be", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/converters/ContinuationTokenSerializer.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/converters/ContinuationTokenSerializer.java\nindex 17033317ef0..3fc119b3ebd 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/converters/ContinuationTokenSerializer.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/converters/ContinuationTokenSerializer.java\n\n@@ -3,10 +3,21 @@ package com.azure.digitaltwins.core.implementation.converters;\n import com.azure.core.util.serializer.JacksonAdapter;\n import com.azure.core.util.serializer.SerializerEncoding;\n \n+/**\n+ * Encodes the continuation token as a json encoded string\n+ */\n public class ContinuationTokenSerializer {\n-    public static String serialize(String continueationToken) {\n+    /**\n+     * Encodes the continuation token as a json encoded string that the ADT service expects\n+     * @param continuationToken The continuation token.\n+     * @return Json encoded String\n+     * example:\n+     * Input: {\"_t\":2,\"_s\":null,\"_rc\":\"[{\\\"token\\\":\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\",\\\"range\\\":{\\\"min\\\":\\\"\\\",\\\"max\\\":\\\"05C1DFFFFFFFFC\\\"}}]\",\"_q\":\"SELECT * FROM digitaltwins where IsOccupied = true\"}\n+     * Output: \"{\\\"_t\\\":2,\\\"_s\\\":null,\\\"_rc\\\":\\\"[{\\\\\\\"token\\\\\\\":\\\\\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\\\\\",\\\\\\\"range\\\\\\\":{\\\\\\\"min\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"max\\\\\\\":\\\\\\\"05C1DFFFFFFFFC\\\\\\\"}}]\\\",\\\"_q\\\":\\\"SELECT * FROM digitaltwins where IsOccupied = true\\\"}\"\n+     */\n+    public static String serialize(String continuationToken) {\n         try {\n-            return new JacksonAdapter().serialize(continueationToken, SerializerEncoding.JSON);\n+            return new JacksonAdapter().serialize(continuationToken, SerializerEncoding.JSON);\n         }\n         catch (Exception e){\n             throw new IllegalArgumentException(\"Invalid continuation token\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNTU2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#discussion_r488315564", "bodyText": "IoT Hub query tests add a buffer or retry to account for any sort of propagation delay between when a twin is created and when query can find it. Does this test pass reliably?", "author": "timtay-microsoft", "createdAt": "2020-09-15T00:45:07Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/QueryAsyncTests.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.models.BasicDigitalTwin;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import reactor.test.StepVerifier;\n+\n+import java.net.HttpURLConnection;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+public class QueryAsyncTests extends QueryTestBase{\n+\n+    private final ClientLogger logger = new ClientLogger(ComponentsTests.class);\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void validQuerySucceeds(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsAsyncClient asyncClient = getAsyncClient(httpClient, serviceVersion);\n+\n+        String floorModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.FLOOR_MODEL_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String roomModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.ROOM_MODEL_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+        String roomTwinId = UniqueIdHelper.getUniqueDigitalTwinId(TestAssetDefaults.ROOM_TWIN_ID_PREFIX, asyncClient, randomIntegerStringGenerator);\n+\n+        try {\n+            String roomModelPayload = TestAssetsHelper.getRoomModelPayload(roomModelId, floorModelId);\n+\n+            StepVerifier.create(asyncClient.createModels(new ArrayList<>(Arrays.asList(roomModelPayload))))\n+                .assertNext(response ->\n+                    assertThat(response.size())\n+                        .as(\"Created models successfully\")\n+                        .isEqualTo(1))\n+                .verifyComplete();\n+\n+            // Create a room twin with property \"IsOccupied\" : true\n+            String roomTwin = TestAssetsHelper.getRoomTwinPayload(roomModelId);\n+\n+            StepVerifier.create(asyncClient.createDigitalTwinWithResponse(roomTwinId, roomTwin))\n+                .assertNext(response ->\n+                    assertThat(response.getStatusCode())\n+                        .as(\"Created digitaltwin successfully\")\n+                        .isEqualTo(HttpURLConnection.HTTP_OK))\n+                .verifyComplete();\n+\n+            String queryString = \"SELECT * FROM digitaltwins where IsOccupied = true\";\n+\n+            StepVerifier.create(asyncClient.query(queryString, BasicDigitalTwin.class))", "originalCommit": "599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNjMyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#discussion_r488316322", "bodyText": "Yes it does. If we see flakiness later we can add some idle time.", "author": "azabbasi", "createdAt": "2020-09-15T00:47:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNTU2NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "477956af3fe572bf42484b96479f02d0814f31be", "url": "https://github.com/Azure/azure-sdk-for-java/commit/477956af3fe572bf42484b96479f02d0814f31be", "message": "Update ContinuationTokenSerializer.java", "committedDate": "2020-09-15T00:48:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNjY0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#discussion_r488316644", "bodyText": "You can move the try down until the digital twin is created successfully. If the finally block executes before the digital twin is created, the thrown exception will just be \"Failed to delete digital twin\" rather than the exception that caused the pre-mature finally block", "author": "timtay-microsoft", "createdAt": "2020-09-15T00:49:01Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/QueryTests.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.models.BasicDigitalTwin;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import static com.azure.digitaltwins.core.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+public class QueryTests extends QueryTestBase{\n+\n+    private final ClientLogger logger = new ClientLogger(ComponentsTests.class);\n+\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.digitaltwins.core.TestHelper#getTestParameters\")\n+    @Override\n+    public void validQuerySucceeds(HttpClient httpClient, DigitalTwinsServiceVersion serviceVersion) {\n+        DigitalTwinsClient client = getClient(httpClient, serviceVersion);\n+\n+        String floorModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.FLOOR_MODEL_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String roomModelId = UniqueIdHelper.getUniqueModelId(TestAssetDefaults.ROOM_MODEL_ID_PREFIX, client, randomIntegerStringGenerator);\n+        String roomTwinId = UniqueIdHelper.getUniqueDigitalTwinId(TestAssetDefaults.ROOM_TWIN_ID_PREFIX, client, randomIntegerStringGenerator);\n+\n+        try {", "originalCommit": "599a4c4f8e75b4f6265e4e2a008df9f66b1c78a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyMTk4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15188#discussion_r488321982", "bodyText": "yes, but then if the digitaltwin fails to create it will not get to the finally block that will delete the model ...", "author": "azabbasi", "createdAt": "2020-09-15T01:07:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNjY0NA=="}], "type": "inlineReview", "revised_code": null}]}