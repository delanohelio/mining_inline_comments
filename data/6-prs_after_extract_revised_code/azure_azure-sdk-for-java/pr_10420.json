{"pr_number": 10420, "pr_title": "[FR] Async API should always return error but not throw error", "pr_createdAt": "2020-04-22T03:21:22Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/10420", "timeline": [{"oid": "e2ffc6d1d912f29555dd7af90245edd6db352f14", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e2ffc6d1d912f29555dd7af90245edd6db352f14", "message": "async api should always return error but not throw error", "committedDate": "2020-04-22T03:19:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY0MTAzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10420#discussion_r412641037", "bodyText": "Should this be in try to be caught and not thrown?", "author": "samvaity", "createdAt": "2020-04-22T03:26:20Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -424,21 +424,21 @@ public FormRecognizerServiceVersion getServiceVersion() {\n         Flux<ByteBuffer> data, long length, FormContentType formContentType, boolean includeTextDetails) {\n         Objects.requireNonNull(data, \"'data' is required and cannot be null.\");", "originalCommit": "e2ffc6d1d912f29555dd7af90245edd6db352f14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc8af5b6bd87f4f4fc7a019dabc7ea00982f0675", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\nindex a8b22c4b487..04a87b3333c 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\n\n@@ -422,9 +422,9 @@ public final class FormRecognizerAsyncClient {\n \n     private Function<PollingContext<OperationResult>, Mono<OperationResult>> receiptStreamActivationOperation(\n         Flux<ByteBuffer> data, long length, FormContentType formContentType, boolean includeTextDetails) {\n-        Objects.requireNonNull(data, \"'data' is required and cannot be null.\");\n         return pollingContext -> {\n             try {\n+                Objects.requireNonNull(data, \"'data' is required and cannot be null.\");\n                 if (formContentType != null) {\n                     return service.analyzeReceiptAsyncWithResponseAsync(\n                         ContentType.fromString(formContentType.toString()), data, length, includeTextDetails)\n"}}, {"oid": "73bbb26126aaa510345bddd25e843f11c2f1f9b2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/73bbb26126aaa510345bddd25e843f11c2f1f9b2", "message": "resolve conflict", "committedDate": "2020-04-22T06:07:05Z", "type": "commit"}, {"oid": "be40b0d7afe8936610eadc841b3cc467a866009e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/be40b0d7afe8936610eadc841b3cc467a866009e", "message": "checkstyle", "committedDate": "2020-04-22T06:19:04Z", "type": "commit"}, {"oid": "fc8af5b6bd87f4f4fc7a019dabc7ea00982f0675", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fc8af5b6bd87f4f4fc7a019dabc7ea00982f0675", "message": "move null check to within try catch block", "committedDate": "2020-04-22T16:36:52Z", "type": "commit"}, {"oid": "c0a03f1a3b0decca6c807d2bba6af2500aa010b8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c0a03f1a3b0decca6c807d2bba6af2500aa010b8", "message": "update release datae", "committedDate": "2020-04-22T17:21:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE3MTEyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10420#discussion_r413171127", "bodyText": "@mssfang\nFollowing sample code will work:\ntoFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\nbut wondering it should be re-playable to support any retry:\ntoFluxByteBuffer(Mono.fromCallable(() -> new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath()))));\nNot high priority, we can create an issue and link to 9716, we should followup post release, I think scope is bigger here and needs to be discussed in this work item #9716", "author": "anuchandy", "createdAt": "2020-04-22T17:21:46Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -333,7 +334,7 @@ public void beginRecognizeReceiptsFromUrlWithOptions() {\n     public void beginRecognizeReceipts() throws IOException {\n         // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts#Flux-long-FormContentType\n         File sourceFile = new File(\"{file_source_url}\");\n-        Flux<ByteBuffer> buffer = Utility.toFluxByteBuffer(\n+        Flux<ByteBuffer> buffer = toFluxByteBuffer(\n             new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));", "originalCommit": "fc8af5b6bd87f4f4fc7a019dabc7ea00982f0675", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "5749c8f54859317f0947e01c457acd5328a1c89e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5749c8f54859317f0947e01c457acd5328a1c89e", "message": "more try catch handling in async client", "committedDate": "2020-04-22T18:10:51Z", "type": "commit"}, {"oid": "49e4f3c7f31356d8a7dabb1ea0dfa1697726586c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/49e4f3c7f31356d8a7dabb1ea0dfa1697726586c", "message": "add javadoc", "committedDate": "2020-04-22T20:14:15Z", "type": "commit"}]}