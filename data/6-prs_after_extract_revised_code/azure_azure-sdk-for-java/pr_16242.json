{"pr_number": 16242, "pr_title": "Upgrades Batch SDK to 2020-09-01.12.0", "pr_createdAt": "2020-10-13T16:43:26Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/16242", "timeline": [{"oid": "c7b81925352483905682263d7734d8920ad810d2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c7b81925352483905682263d7734d8920ad810d2", "message": "Improvements to Batch SDK testing\n\nMore environment variables for recording; documentation for running tests in both Record and Playback mode.", "committedDate": "2020-10-13T19:13:08Z", "type": "commit"}, {"oid": "0dfc163054bbdac9faf27b314973f7d6a0adc656", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0dfc163054bbdac9faf27b314973f7d6a0adc656", "message": "Creates test recordings", "committedDate": "2020-10-13T19:13:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxMzk0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16242#discussion_r504313943", "bodyText": "This should likely either change return types to the TaskCountsResult model or another method should be added exposing taskSlotCounts as well", "author": "bgklein", "createdAt": "2020-10-13T23:24:25Z", "path": "sdk/batch/microsoft-azure-batch/src/main/java/com/microsoft/azure/batch/JobOperations.java", "diffHunk": "@@ -621,7 +621,7 @@ public TaskCounts getTaskCounts(String jobId, Iterable<BatchClientBehavior> addi\n         BehaviorManager bhMgr = new BehaviorManager(this.customBehaviors(), additionalBehaviors);\n         bhMgr.applyRequestBehaviors(options);\n \n-        return this.parentBatchClient.protocolLayer().jobs().getTaskCounts(jobId, options);\n+        return this.parentBatchClient.protocolLayer().jobs().getTaskCounts(jobId, options).taskCounts();", "originalCommit": "0dfc163054bbdac9faf27b314973f7d6a0adc656", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1NjA0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16242#discussion_r504756041", "bodyText": "I added several other methods (getTaskCountsResult(), getTaskSlotCounts()) but kept this return type this intact. Doing otherwise would break the API.\nAlso added some assertions for slot counts in TasksTest:testGetTaskCounts()", "author": "gingi", "createdAt": "2020-10-14T15:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxMzk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "907fd40126d57c3b90ce28a618dbec2cf975902c", "chunk": "diff --git a/sdk/batch/microsoft-azure-batch/src/main/java/com/microsoft/azure/batch/JobOperations.java b/sdk/batch/microsoft-azure-batch/src/main/java/com/microsoft/azure/batch/JobOperations.java\nindex d62a98d2f55..1478a0f9d35 100644\n--- a/sdk/batch/microsoft-azure-batch/src/main/java/com/microsoft/azure/batch/JobOperations.java\n+++ b/sdk/batch/microsoft-azure-batch/src/main/java/com/microsoft/azure/batch/JobOperations.java\n\n@@ -617,11 +619,69 @@ public class JobOperations implements IInheritedBehaviors {\n      * @return the TaskCounts object if successful.\n      */\n     public TaskCounts getTaskCounts(String jobId, Iterable<BatchClientBehavior> additionalBehaviors) throws BatchErrorException, IOException {\n+        return getTaskCountsResult(jobId, additionalBehaviors).taskCounts();\n+\n+    }\n+\n+    /**\n+     * Gets the task slot counts for the specified job.\n+     * Task slot counts provide a count of the tasks by active, running or completed task state, and a count of tasks which succeeded or failed. Tasks in the preparing state are counted as running.\n+     *\n+     * @param jobId The ID of the job.\n+     * @throws BatchErrorException thrown if the request is rejected by server\n+     * @throws IOException Exception thrown when there is an error in serialization/deserialization of data sent to/received from the Batch service.\n+     * @return the TaskSlotCounts object if successful.\n+     */\n+    public TaskSlotCounts getTaskSlotCounts(String jobId) throws BatchErrorException, IOException {\n+        return getTaskSlotCounts(jobId, null);\n+    }\n+\n+    /**\n+     * Gets the task slot counts for the specified job.\n+     * Task slot counts provide a count of the tasks by active, running or completed task state, and a count of tasks which succeeded or failed. Tasks in the preparing state are counted as running.\n+     *\n+     * @param jobId The ID of the job.\n+     * @param additionalBehaviors A collection of {@link BatchClientBehavior} instances that are applied to the Batch service request.\n+     * @throws BatchErrorException thrown if the request is rejected by server\n+     * @throws IOException Exception thrown when there is an error in serialization/deserialization of data sent to/received from the Batch service.\n+     * @return the TaskSlotCounts object if successful.\n+     */\n+    public TaskSlotCounts getTaskSlotCounts(String jobId, Iterable<BatchClientBehavior> additionalBehaviors) throws BatchErrorException, IOException {\n+        return getTaskCountsResult(jobId, additionalBehaviors).taskSlotCounts();\n+\n+    }\n+\n+    /**\n+     * Gets the task counts result for the specified job.\n+     * The result includes both task counts and task slot counts. Each counts object provides a count of the tasks by active, running or completed task state, and a count of tasks which succeeded or failed. Tasks in the preparing state are counted as running.\n+     *\n+     * @param jobId The ID of the job.\n+     * @throws BatchErrorException thrown if the request is rejected by server\n+     * @throws IOException Exception thrown when there is an error in serialization/deserialization of data sent to/received from the Batch service.\n+     * @return the TaskCountsResult object if successful.\n+     */\n+    public TaskCountsResult getTaskCountsResult(String jobId)\n+    throws BatchErrorException, IOException {\n+        return getTaskCountsResult(jobId, null);\n+    }\n+\n+    /**\n+     * Gets the task counts result for the specified job.\n+     * The result includes both task counts and task slot counts. Each counts object provides a count of the tasks by active, running or completed task state, and a count of tasks which succeeded or failed. Tasks in the preparing state are counted as running.\n+     *\n+     * @param jobId The ID of the job.\n+     * @param additionalBehaviors A collection of {@link BatchClientBehavior} instances that are applied to the Batch service request.\n+     * @throws BatchErrorException thrown if the request is rejected by server\n+     * @throws IOException Exception thrown when there is an error in serialization/deserialization of data sent to/received from the Batch service.\n+     * @return the TaskCountsResult object if successful.\n+     */\n+    public TaskCountsResult getTaskCountsResult(\n+        String jobId,\n+        Iterable<BatchClientBehavior> additionalBehaviors\n+    ) throws BatchErrorException, IOException {\n         JobGetTaskCountsOptions options = new JobGetTaskCountsOptions();\n         BehaviorManager bhMgr = new BehaviorManager(this.customBehaviors(), additionalBehaviors);\n         bhMgr.applyRequestBehaviors(options);\n-\n-        return this.parentBatchClient.protocolLayer().jobs().getTaskCounts(jobId, options).taskCounts();\n+        return this.parentBatchClient.protocolLayer().jobs().getTaskCounts(jobId, options);\n     }\n-\n }\n"}}, {"oid": "907fd40126d57c3b90ce28a618dbec2cf975902c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/907fd40126d57c3b90ce28a618dbec2cf975902c", "message": "Updates Batch API to 2020-09-01.12.0", "committedDate": "2020-10-14T15:04:52Z", "type": "commit"}, {"oid": "907fd40126d57c3b90ce28a618dbec2cf975902c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/907fd40126d57c3b90ce28a618dbec2cf975902c", "message": "Updates Batch API to 2020-09-01.12.0", "committedDate": "2020-10-14T15:04:52Z", "type": "forcePushed"}]}