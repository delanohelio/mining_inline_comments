{"pr_number": 10218, "pr_title": "Update Form Recognizer Readme and samples", "pr_createdAt": "2020-04-15T10:32:15Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/10218", "timeline": [{"oid": "236d238b880e46b620db4ad32b26c438dda745af", "url": "https://github.com/Azure/azure-sdk-for-java/commit/236d238b880e46b620db4ad32b26c438dda745af", "message": "update to new design", "committedDate": "2020-04-16T18:16:15Z", "type": "commit"}, {"oid": "4c96acf2bca371f72f5f1a7740ac9fe3a089d175", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4c96acf2bca371f72f5f1a7740ac9fe3a089d175", "message": "checkstyle", "committedDate": "2020-04-16T18:18:21Z", "type": "commit"}, {"oid": "3ccb9efbcee027565c0db52eb12c563d91b0b101", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3ccb9efbcee027565c0db52eb12c563d91b0b101", "message": "Form Training async client test part 1", "committedDate": "2020-04-16T18:20:58Z", "type": "commit"}, {"oid": "e75e673b142f906dd85358187ef42c61f567365a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e75e673b142f906dd85358187ef42c61f567365a", "message": "update form recognizer endpoint models", "committedDate": "2020-04-16T18:23:36Z", "type": "commit"}, {"oid": "18d91a82b533f1d4380fd2a358658dc29c10e653", "url": "https://github.com/Azure/azure-sdk-for-java/commit/18d91a82b533f1d4380fd2a358658dc29c10e653", "message": "update model transforms for fieldMap", "committedDate": "2020-04-16T18:24:12Z", "type": "commit"}, {"oid": "513cae9fc730a3513698dab0b57eddb73bd816e7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/513cae9fc730a3513698dab0b57eddb73bd816e7", "message": "Remove generic fieldvalue instead use generic FormField", "committedDate": "2020-04-16T18:24:36Z", "type": "commit"}, {"oid": "b099537e9dbbeb5665e4c8c694a040105fcc70a1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b099537e9dbbeb5665e4c8c694a040105fcc70a1", "message": "Add form recognizer async tests", "committedDate": "2020-04-16T18:25:17Z", "type": "commit"}, {"oid": "10c3685a8cd6f48fe1bc7cfeaacc5860185a6e46", "url": "https://github.com/Azure/azure-sdk-for-java/commit/10c3685a8cd6f48fe1bc7cfeaacc5860185a6e46", "message": "update sync tests", "committedDate": "2020-04-16T18:26:14Z", "type": "commit"}, {"oid": "b2f076cb5d72613efb4af4745c0b0346d8f008f1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b2f076cb5d72613efb4af4745c0b0346d8f008f1", "message": "review comments", "committedDate": "2020-04-16T18:26:46Z", "type": "commit"}, {"oid": "37b11cd4a8de9bab89dc5a559b3e255089777b0a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/37b11cd4a8de9bab89dc5a559b3e255089777b0a", "message": "review comments", "committedDate": "2020-04-16T18:28:18Z", "type": "commit"}, {"oid": "22e2bc2c5917ec3c3e16f33b18825bbf01d33b62", "url": "https://github.com/Azure/azure-sdk-for-java/commit/22e2bc2c5917ec3c3e16f33b18825bbf01d33b62", "message": "additional tests for custom forms", "committedDate": "2020-04-16T18:28:46Z", "type": "commit"}, {"oid": "b494da5fb2abeb36194ec9d564947c7e8341f665", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b494da5fb2abeb36194ec9d564947c7e8341f665", "message": "rebase changes", "committedDate": "2020-04-16T18:29:39Z", "type": "commit"}, {"oid": "29ad1b90ae35259b86252795d75310ed00de22aa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/29ad1b90ae35259b86252795d75310ed00de22aa", "message": "ModelTrainingStatus rename, deleteModel tests", "committedDate": "2020-04-16T18:30:45Z", "type": "commit"}, {"oid": "c289611406b295acfb02733d25d104b1125804c5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c289611406b295acfb02733d25d104b1125804c5", "message": "model updates, null checks", "committedDate": "2020-04-16T18:31:50Z", "type": "commit"}, {"oid": "cd6dc856f92c7f738d8581a8bf00de9465c80cea", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cd6dc856f92c7f738d8581a8bf00de9465c80cea", "message": "initial", "committedDate": "2020-04-16T18:31:55Z", "type": "commit"}, {"oid": "5cc5119820d94e04811c50d610b7fb7f3837fb1a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5cc5119820d94e04811c50d610b7fb7f3837fb1a", "message": "remaining advanced and readme samples", "committedDate": "2020-04-16T18:31:55Z", "type": "commit"}, {"oid": "7878904bbd8cac1b6c46ce78984c0cbdb7610637", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7878904bbd8cac1b6c46ce78984c0cbdb7610637", "message": "fix ups", "committedDate": "2020-04-16T18:31:56Z", "type": "commit"}, {"oid": "ec302d667d4989d4d855748e9eba0e30d7156c9c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ec302d667d4989d4d855748e9eba0e30d7156c9c", "message": "update", "committedDate": "2020-04-16T18:32:44Z", "type": "commit"}, {"oid": "ec302d667d4989d4d855748e9eba0e30d7156c9c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ec302d667d4989d4d855748e9eba0e30d7156c9c", "message": "update", "committedDate": "2020-04-16T18:32:44Z", "type": "forcePushed"}, {"oid": "06bd8d1cab7b82dd7c5c013d77e54aeb6a3d1bab", "url": "https://github.com/Azure/azure-sdk-for-java/commit/06bd8d1cab7b82dd7c5c013d77e54aeb6a3d1bab", "message": "rebase changes", "committedDate": "2020-04-16T18:42:00Z", "type": "forcePushed"}, {"oid": "8d5bc06c164cf1189106621638df9e2fc105602e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8d5bc06c164cf1189106621638df9e2fc105602e", "message": "rebase changes", "committedDate": "2020-04-16T18:43:12Z", "type": "forcePushed"}, {"oid": "9ed52cdc575a479ad71430a730fcd3beacdf1461", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9ed52cdc575a479ad71430a730fcd3beacdf1461", "message": "rebase changes", "committedDate": "2020-04-16T18:44:57Z", "type": "commit"}, {"oid": "9ed52cdc575a479ad71430a730fcd3beacdf1461", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9ed52cdc575a479ad71430a730fcd3beacdf1461", "message": "rebase changes", "committedDate": "2020-04-16T18:44:57Z", "type": "forcePushed"}, {"oid": "12159894917fd767ea2353777ef71cd415892dd2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/12159894917fd767ea2353777ef71cd415892dd2", "message": "update for async changes", "committedDate": "2020-04-17T01:21:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAwNTk1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410005952", "bodyText": "if possible we can remove this unchecked?", "author": "mssfang", "createdAt": "2020-04-17T05:52:13Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/ReceiptExtensions.java", "diffHunk": "@@ -108,10 +108,9 @@ public static USReceipt asUSReceipt(RecognizedReceipt receipt) {\n     @SuppressWarnings(\"unchecked\")", "originalCommit": "12159894917fd767ea2353777ef71cd415892dd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4NzQ4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410387486", "bodyText": "We cannot, using generics and this will throw error warnings when building the client.\nIt is a common pattern to suppress when using generics.", "author": "samvaity", "createdAt": "2020-04-17T18:07:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAwNTk1Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAwNzcyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410007722", "bodyText": "is possible to just use .subscribe() instead of .last()?", "author": "mssfang", "createdAt": "2020-04-17T05:58:37Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/TrainUnlabeledCustomModelAsync.java", "diffHunk": "@@ -0,0 +1,91 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.CustomFormModel;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollerFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * This sample demonstrates how to train a model with unlabeled data. See RecognizeCustomFormsAsync\n+ * to recognize forms with your created custom model.\n+ */\n+public class TrainUnlabeledCustomModelAsync {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+\n+        FormTrainingAsyncClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildAsyncClient().getFormTrainingAsyncClient();\n+\n+        // Train custom model\n+        String trainingSetSource = \"{training_set_SAS}\";\n+        PollerFlux<OperationResult, CustomFormModel> trainingPoller = client.beginTraining(trainingSetSource, false);\n+\n+        Mono<CustomFormModel> customFormModelResult = trainingPoller\n+            .last()", "originalCommit": "12159894917fd767ea2353777ef71cd415892dd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4ODE3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410388171", "bodyText": ".last() definitely gives better control over the code flow to not continue until a response is received.", "author": "samvaity", "createdAt": "2020-04-17T18:08:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAwNzcyMg=="}], "type": "inlineReview", "revised_code": {"commit": "c8563c2a189c8c22e52fea98c845fb51c7cbef6d", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/TrainUnlabeledCustomModelAsync.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/TrainUnlabeledModelAsync.java\nsimilarity index 94%\nrename from sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/TrainUnlabeledCustomModelAsync.java\nrename to sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/TrainUnlabeledModelAsync.java\nindex fab94a700b8..2abe2995a76 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/TrainUnlabeledCustomModelAsync.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/TrainUnlabeledModelAsync.java\n\n@@ -13,10 +13,10 @@ import reactor.core.publisher.Mono;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * This sample demonstrates how to train a model with unlabeled data. See RecognizeCustomFormsAsync\n- * to recognize forms with your created custom model.\n+ * Async sample to train a model with unlabeled data. See RecognizeCustomFormsAsync to recognize forms with your\n+ * created custom model.\n  */\n-public class TrainUnlabeledCustomModelAsync {\n+public class TrainUnlabeledModelAsync {\n \n     /**\n      * Main method to invoke this demo.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5NzI4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410297282", "bodyText": "I think it'd be best to have the forms also in the samples folder, doesn't look great going into the test folder", "author": "iscai-msft", "createdAt": "2020-04-17T15:26:11Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.RecognizedForm;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+\n+/**\n+ * This sample demonstrates the differences in output that arise when recognize_custom_forms\n+ * is called with custom models trained with labeled and unlabeled data.\n+ */\n+public class AdvancedDiffLabeledUnlabeledData {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused arguments to the program.\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public static void main(String[] args) throws IOException {\n+        // Instantiate a client that will be used to call the service.\n+\n+        FormRecognizerClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_Key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildClient();\n+\n+        File analyzeFile = new File(\"../../test/resources/sample-files/Invoice_1.pdf\");", "originalCommit": "12159894917fd767ea2353777ef71cd415892dd2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8563c2a189c8c22e52fea98c845fb51c7cbef6d", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java\nindex 0f4a9857c05..abf1ec4688a 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java\n\n@@ -14,7 +14,7 @@ import java.io.IOException;\n import java.nio.file.Files;\n \n /**\n- * This sample demonstrates the differences in output that arise when recognize_custom_forms\n+ * Sample to show the differences in output that arise when RecognizeCustomForms\n  * is called with custom models trained with labeled and unlabeled data.\n  */\n public class AdvancedDiffLabeledUnlabeledData {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5ODA2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410298067", "bodyText": "I think the name of this file is different than what you referenced it as in the samples readme", "author": "iscai-msft", "createdAt": "2020-04-17T15:27:25Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.", "originalCommit": "12159894917fd767ea2353777ef71cd415892dd2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8563c2a189c8c22e52fea98c845fb51c7cbef6d", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java\nindex 0f4a9857c05..abf1ec4688a 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java\n\n@@ -14,7 +14,7 @@ import java.io.IOException;\n import java.nio.file.Files;\n \n /**\n- * This sample demonstrates the differences in output that arise when recognize_custom_forms\n+ * Sample to show the differences in output that arise when RecognizeCustomForms\n  * is called with custom models trained with labeled and unlabeled data.\n  */\n public class AdvancedDiffLabeledUnlabeledData {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwMDAzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410300039", "bodyText": "Differences between labeled and unlabeled might be more clear without decomposition. For example, I didn't print label data information for the labeled custom model, while I did for unlabeled", "author": "iscai-msft", "createdAt": "2020-04-17T15:30:44Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.RecognizedForm;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+\n+/**\n+ * This sample demonstrates the differences in output that arise when recognize_custom_forms\n+ * is called with custom models trained with labeled and unlabeled data.\n+ */\n+public class AdvancedDiffLabeledUnlabeledData {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused arguments to the program.\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public static void main(String[] args) throws IOException {\n+        // Instantiate a client that will be used to call the service.\n+\n+        FormRecognizerClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_Key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildClient();\n+\n+        File analyzeFile = new File(\"../../test/resources/sample-files/Invoice_1.pdf\");\n+        byte[] fileContent = Files.readAllBytes(analyzeFile.toPath());\n+\n+        IterableStream<RecognizedForm> formsWithLabeledModel =\n+            client.beginRecognizeCustomForms(new ByteArrayInputStream(fileContent), \"{labeled_model_Id}\", analyzeFile.length(), FormContentType.APPLICATION_PDF, true, null).getFinalResult();\n+        IterableStream<RecognizedForm> formsWithUnlabeledModel =\n+            client.beginRecognizeCustomForms(new ByteArrayInputStream(fileContent), \"{unlabeled_model_Id}\", analyzeFile.length(), FormContentType.APPLICATION_PDF).getFinalResult();\n+\n+        //  The main difference is found in the labels of its fields\n+        // The form recognized with a labeled model will have the labels it was trained with,\n+        // the unlabeled one will be denoted with indices\n+        System.out.println(\"--------Recognizing forms with labeled custom model--------\");\n+        printFieldData(formsWithLabeledModel);", "originalCommit": "12159894917fd767ea2353777ef71cd415892dd2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8563c2a189c8c22e52fea98c845fb51c7cbef6d", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java\nindex 0f4a9857c05..abf1ec4688a 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java\n\n@@ -14,7 +14,7 @@ import java.io.IOException;\n import java.nio.file.Files;\n \n /**\n- * This sample demonstrates the differences in output that arise when recognize_custom_forms\n+ * Sample to show the differences in output that arise when RecognizeCustomForms\n  * is called with custom models trained with labeled and unlabeled data.\n  */\n public class AdvancedDiffLabeledUnlabeledData {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwMTMwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410301309", "bodyText": "Also not the same name as the samples readme", "author": "iscai-msft", "createdAt": "2020-04-17T15:32:44Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java", "diffHunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.", "originalCommit": "12159894917fd767ea2353777ef71cd415892dd2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8563c2a189c8c22e52fea98c845fb51c7cbef6d", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java\nindex 2d6853e0379..0a8733e25f8 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java\n\n@@ -13,8 +13,7 @@ import com.azure.core.util.polling.PollerFlux;\n import reactor.core.publisher.Mono;\n \n /*\n- * This sample demonstrates how to output the information that will help with manually\n- * validating your output from recognize custom forms.\n+ * Sample to output the information that will help with manually validating your output from recognize custom forms.\n  */\n public class AdvancedManualValidationInfo {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwMTgwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410301807", "bodyText": "I think we determined we were going to use recognize custom forms from file for the manual validation sample", "author": "iscai-msft", "createdAt": "2020-04-17T15:33:33Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java", "diffHunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormWord;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedForm;\n+import com.azure.ai.formrecognizer.models.TextContentType;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.PollerFlux;\n+import reactor.core.publisher.Mono;\n+\n+/*\n+ * This sample demonstrates how to output the information that will help with manually\n+ * validating your output from recognize custom forms.\n+ */\n+public class AdvancedManualValidationInfo {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        FormRecognizerAsyncClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildAsyncClient();\n+\n+        String modelId = \"{model_Id}\";\n+        String filePath = \"{analyze_file_path}\";\n+        PollerFlux<OperationResult, IterableStream<RecognizedForm>> trainingPoller =", "originalCommit": "12159894917fd767ea2353777ef71cd415892dd2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8563c2a189c8c22e52fea98c845fb51c7cbef6d", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java\nindex 2d6853e0379..0a8733e25f8 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java\n\n@@ -13,8 +13,7 @@ import com.azure.core.util.polling.PollerFlux;\n import reactor.core.publisher.Mono;\n \n /*\n- * This sample demonstrates how to output the information that will help with manually\n- * validating your output from recognize custom forms.\n+ * Sample to output the information that will help with manually validating your output from recognize custom forms.\n  */\n public class AdvancedManualValidationInfo {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwMjU3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410302579", "bodyText": "I think it'd be good to include the index of the form you're recognizing in this print statement, in case there are multiple returned forms", "author": "iscai-msft", "createdAt": "2020-04-17T15:34:50Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java", "diffHunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormWord;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedForm;\n+import com.azure.ai.formrecognizer.models.TextContentType;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.PollerFlux;\n+import reactor.core.publisher.Mono;\n+\n+/*\n+ * This sample demonstrates how to output the information that will help with manually\n+ * validating your output from recognize custom forms.\n+ */\n+public class AdvancedManualValidationInfo {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        FormRecognizerAsyncClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildAsyncClient();\n+\n+        String modelId = \"{model_Id}\";\n+        String filePath = \"{analyze_file_path}\";\n+        PollerFlux<OperationResult, IterableStream<RecognizedForm>> trainingPoller =\n+            client.beginRecognizeCustomFormsFromUrl(filePath, modelId, true, null);\n+\n+        IterableStream<RecognizedForm> recognizedForms = trainingPoller\n+            .last()\n+            .flatMap(trainingOperationResponse -> {\n+                if (trainingOperationResponse.getStatus().isComplete()) {\n+                    // training completed successfully, retrieving final result.\n+                    return trainingOperationResponse.getFinalResult();\n+                } else {\n+                    return Mono.error(new RuntimeException(\"Polling completed unsuccessfully with status:\"\n+                        + trainingOperationResponse.getStatus()));\n+                }\n+            }).block();\n+\n+        System.out.println(\"--------RECOGNIZING FORM --------\");", "originalCommit": "12159894917fd767ea2353777ef71cd415892dd2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8563c2a189c8c22e52fea98c845fb51c7cbef6d", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java\nindex 2d6853e0379..0a8733e25f8 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java\n\n@@ -13,8 +13,7 @@ import com.azure.core.util.polling.PollerFlux;\n import reactor.core.publisher.Mono;\n \n /*\n- * This sample demonstrates how to output the information that will help with manually\n- * validating your output from recognize custom forms.\n+ * Sample to output the information that will help with manually validating your output from recognize custom forms.\n  */\n public class AdvancedManualValidationInfo {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwNDY0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410304642", "bodyText": "I think it'd be better to just print the model ids of the models you're listing, and then call getCustomModel with a single model id and print out more of that information. That way there's less information being printed and you can highlight lisModels and getCustomModel separately", "author": "iscai-msft", "createdAt": "2020-04-17T15:38:24Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ManageCustomModels.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.AccountProperties;\n+import com.azure.ai.formrecognizer.models.CustomFormModel;\n+import com.azure.ai.formrecognizer.models.CustomFormModelInfo;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.Context;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Sample for demonstrating common custom model management operations.\n+ */\n+public class ManageCustomModels {\n+\n+    /**\n+     * Main program to invoke the demo for performing operations of a custom model.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     */\n+    public static void main(final String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        FormTrainingClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildClient().getFormTrainingClient();\n+\n+        AtomicReference<String> modelId = null;\n+\n+        // First, we see how many custom models we have, and what our limit is\n+        AccountProperties accountProperties = client.getAccountProperties();\n+        System.out.printf(\"The account has %s custom models, and we can have at most %s custom models\",\n+            accountProperties.getCount(), accountProperties.getLimit());\n+\n+        // Next, we get a paged list of all of our custom models\n+        PagedIterable<CustomFormModelInfo> customModels = client.listModels();\n+        System.out.println(\"We have following models in the account:\");\n+        customModels.forEach(customFormModelInfo -> {\n+            System.out.printf(\"Model Id: %s%n\", customFormModelInfo.getModelId());\n+            // get custom model info\n+            modelId.set(customFormModelInfo.getModelId());", "originalCommit": "12159894917fd767ea2353777ef71cd415892dd2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8563c2a189c8c22e52fea98c845fb51c7cbef6d", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ManageCustomModels.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ManageCustomModels.java\nindex 69ba99046e9..67afbb52883 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ManageCustomModels.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ManageCustomModels.java\n\n@@ -14,6 +14,7 @@ import java.util.concurrent.atomic.AtomicReference;\n \n /**\n  * Sample for demonstrating common custom model management operations.\n+ * To learn how to train your own models, look at TrainUnlabeledModel.java and TrainLabeledModel.java.\n  */\n public class ManageCustomModels {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwNTEyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410305121", "bodyText": "It might be nice to include a get of that model after deletion. this way you can show what error is thrown when accessing a custom model that doesn't exist, and how to check that the model is deleted.", "author": "iscai-msft", "createdAt": "2020-04-17T15:39:14Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ManageCustomModels.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.AccountProperties;\n+import com.azure.ai.formrecognizer.models.CustomFormModel;\n+import com.azure.ai.formrecognizer.models.CustomFormModelInfo;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.Context;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Sample for demonstrating common custom model management operations.\n+ */\n+public class ManageCustomModels {\n+\n+    /**\n+     * Main program to invoke the demo for performing operations of a custom model.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     */\n+    public static void main(final String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        FormTrainingClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildClient().getFormTrainingClient();\n+\n+        AtomicReference<String> modelId = null;\n+\n+        // First, we see how many custom models we have, and what our limit is\n+        AccountProperties accountProperties = client.getAccountProperties();\n+        System.out.printf(\"The account has %s custom models, and we can have at most %s custom models\",\n+            accountProperties.getCount(), accountProperties.getLimit());\n+\n+        // Next, we get a paged list of all of our custom models\n+        PagedIterable<CustomFormModelInfo> customModels = client.listModels();\n+        System.out.println(\"We have following models in the account:\");\n+        customModels.forEach(customFormModelInfo -> {\n+            System.out.printf(\"Model Id: %s%n\", customFormModelInfo.getModelId());\n+            // get custom model info\n+            modelId.set(customFormModelInfo.getModelId());\n+            CustomFormModel customModel = client.getCustomModel(customFormModelInfo.getModelId());\n+            System.out.printf(\"Model Id: %s%n\", customModel.getModelId());\n+            System.out.printf(\"Model Status: %s%n\", customModel.getModelStatus());\n+            System.out.printf(\"Created on: %s%n\", customModel.getCreatedOn());\n+            System.out.printf(\"Updated on: %s%n\", customModel.getLastUpdatedOn());\n+            customModel.getSubModels().forEach(customFormSubModel -> {\n+                System.out.printf(\"Custom Model Form type: %s%n\", customFormSubModel.getFormType());\n+                System.out.printf(\"Custom Model Accuracy: %s%n\", customFormSubModel.getAccuracy());\n+                if (customFormSubModel.getFieldMap() != null) {\n+                    customFormSubModel.getFieldMap().forEach((fieldText, customFormModelField) -> {\n+                        System.out.printf(\"Field Text: %s%n\", fieldText);\n+                        System.out.printf(\"Field Accuracy: %s%n\", customFormModelField.getAccuracy());\n+                    });\n+                }\n+\n+            });\n+        });\n+\n+        // Delete Custom Model\n+        System.out.printf(\"Deleted model with model Id: %s operation completed with status: %s%n\", modelId.get(),\n+            client.deleteModelWithResponse(modelId.get(), Context.NONE).getStatusCode());", "originalCommit": "12159894917fd767ea2353777ef71cd415892dd2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8563c2a189c8c22e52fea98c845fb51c7cbef6d", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ManageCustomModels.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ManageCustomModels.java\nindex 69ba99046e9..67afbb52883 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ManageCustomModels.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ManageCustomModels.java\n\n@@ -14,6 +14,7 @@ import java.util.concurrent.atomic.AtomicReference;\n \n /**\n  * Sample for demonstrating common custom model management operations.\n+ * To learn how to train your own models, look at TrainUnlabeledModel.java and TrainLabeledModel.java.\n  */\n public class ManageCustomModels {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwNTc4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410305780", "bodyText": "I thought java had automatic content type detection. If so, can you not pass the content type since that's what most users will be doing", "author": "iscai-msft", "createdAt": "2020-04-17T15:40:22Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeContent.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.FormPage;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+\n+/**\n+ * Sample for extracting layout information using input stream.\n+ */\n+public class RecognizeContent {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public static void main(final String[] args) throws IOException {\n+        // Instantiate a client that will be used to call the service.\n+\n+        FormRecognizerClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildClient();\n+\n+        File sourceFile = new File(\"../../test/resources/sample-files/layout1.jpg\");\n+        byte[] fileContent = Files.readAllBytes(sourceFile.toPath());\n+        InputStream targetStream = new ByteArrayInputStream(fileContent);\n+\n+        SyncPoller<OperationResult, IterableStream<FormPage>> recognizeLayoutPoller =\n+            client.beginRecognizeContent(targetStream, sourceFile.length(), FormContentType.IMAGE_JPEG);", "originalCommit": "12159894917fd767ea2353777ef71cd415892dd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxNjgxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410416810", "bodyText": "Considering the samples might get in before the feature would like to keep it this way and maybe consider updating once we get the feature in.", "author": "samvaity", "createdAt": "2020-04-17T19:06:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwNTc4MA=="}], "type": "inlineReview", "revised_code": {"commit": "c8563c2a189c8c22e52fea98c845fb51c7cbef6d", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeContent.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeContent.java\nindex f12bf3ef31c..abd40fde9e9 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeContent.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeContent.java\n\n@@ -17,7 +17,7 @@ import java.io.InputStream;\n import java.nio.file.Files;\n \n /**\n- * Sample for extracting layout information using input stream.\n+ * Sample for recognizing content information from a document given through a file.\n  */\n public class RecognizeContent {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwNzc3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410307779", "bodyText": "Confused why this file is empty", "author": "iscai-msft", "createdAt": "2020-04-17T15:43:38Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeReceipts.java", "diffHunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedReceipt;\n+import com.azure.ai.formrecognizer.models.USReceipt;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+\n+/**\n+ * Sample for recognizing US receipt information using file source URL.\n+ */\n+public class RecognizeReceipts {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     * @throws IOException from reading file.\n+     */\n+    public static void main(final String[] args) throws IOException {\n+        // Instantiate a client that will be used to call the service.\n+        FormRecognizerClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildClient();\n+\n+        File sourceFile = new File(\"\");", "originalCommit": "12159894917fd767ea2353777ef71cd415892dd2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8563c2a189c8c22e52fea98c845fb51c7cbef6d", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeReceipts.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeReceipts.java\nindex e951a04a646..d4e823d95f9 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeReceipts.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeReceipts.java\n\n@@ -37,7 +37,7 @@ public class RecognizeReceipts {\n             .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n             .buildClient();\n \n-        File sourceFile = new File(\"\");\n+        File sourceFile = new File(\"../../test/resources/sample-files/contoso-allinone.jpg\");\n         byte[] fileContent = Files.readAllBytes(sourceFile.toPath());\n         InputStream targetStream = new ByteArrayInputStream(fileContent);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMxMDE0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410310144", "bodyText": "I know we said Java might diverge on this (doing file for sync, url for async), but I think that because you've added a recognizeReceipts and a recognizeReceipts FromURL, you can have the other sync and async functions call the files functions", "author": "iscai-msft", "createdAt": "2020-04-17T15:47:31Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeContentAsync.java", "diffHunk": "@@ -0,0 +1,79 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormPage;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.PollerFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Sample for extracting layout information using input stream.\n+ */\n+public class RecognizeContentAsync {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     */\n+    public static void main(final String[] args)  {\n+        // Instantiate a client that will be used to call the service.\n+\n+        FormRecognizerAsyncClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildAsyncClient();\n+\n+        PollerFlux<OperationResult, IterableStream<FormPage>> recognizeLayoutPoller =\n+            client.beginRecognizeContentFromUrl(\"file_source_url\");", "originalCommit": "12159894917fd767ea2353777ef71cd415892dd2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8563c2a189c8c22e52fea98c845fb51c7cbef6d", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeContentAsync.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeContentAsync.java\nindex 5d33792758e..c101e653381 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeContentAsync.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeContentAsync.java\n\n@@ -13,7 +13,7 @@ import reactor.core.publisher.Mono;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * Sample for extracting layout information using input stream.\n+ * Async sample for recognizing content information from a document given through a URL.\n  */\n public class RecognizeContentAsync {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMxMTM4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410311384", "bodyText": "I think you should link to the recognizeCustomForms sample.", "author": "iscai-msft", "createdAt": "2020-04-17T15:49:23Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/TrainLabeledCustomModelAsync.java", "diffHunk": "@@ -0,0 +1,90 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.CustomFormModel;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollerFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * This sample demonstrates how to train a model with labeled data. See RecognizeCustomFormsAsync\n+ * to recognize forms with your custom model.\n+ */\n+public class TrainLabeledCustomModelAsync {", "originalCommit": "12159894917fd767ea2353777ef71cd415892dd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxNTk3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410415977", "bodyText": "Already does :)", "author": "samvaity", "createdAt": "2020-04-17T19:04:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMxMTM4NA=="}], "type": "inlineReview", "revised_code": {"commit": "c8563c2a189c8c22e52fea98c845fb51c7cbef6d", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/TrainLabeledCustomModelAsync.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/TrainLabeledModelAsync.java\nsimilarity index 94%\nrename from sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/TrainLabeledCustomModelAsync.java\nrename to sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/TrainLabeledModelAsync.java\nindex c3be8660f75..1be4779eae9 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/TrainLabeledCustomModelAsync.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/TrainLabeledModelAsync.java\n\n@@ -13,10 +13,10 @@ import reactor.core.publisher.Mono;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * This sample demonstrates how to train a model with labeled data. See RecognizeCustomFormsAsync\n- * to recognize forms with your custom model.\n+ * Async sample to train a model with labeled data. See RecognizeCustomFormsAsync to recognize forms with your\n+ * custom model.\n  */\n-public class TrainLabeledCustomModelAsync {\n+public class TrainLabeledModelAsync {\n \n     /**\n      * Main method to invoke this demo.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMxMTY1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410311650", "bodyText": "I think you want to link to the labeled and unlabeled custom model training samples", "author": "iscai-msft", "createdAt": "2020-04-17T15:49:49Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeCustomForms.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedForm;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+\n+/*\n+ *  This sample demonstrates how to analyze a form from a document with a custom", "originalCommit": "12159894917fd767ea2353777ef71cd415892dd2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8563c2a189c8c22e52fea98c845fb51c7cbef6d", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeCustomForms.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeCustomForms.java\nindex d6e2b2c3deb..22c74aa6dc9 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeCustomForms.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeCustomForms.java\n\n@@ -9,9 +9,9 @@ import com.azure.core.credential.AzureKeyCredential;\n import com.azure.core.util.IterableStream;\n import com.azure.core.util.polling.SyncPoller;\n \n-/*\n- *  This sample demonstrates how to analyze a form from a document with a custom\n-    trained model\n+/**\n+ * Sample to analyze a form from a document with a custom trained model. To learn how to train your own models,\n+ * look at TrainUnlabeledModel.java and TrainLabeledModel.java.\n  */\n public class RecognizeCustomForms {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0OTUzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410349534", "bodyText": "In python this is called listModelInfos, are we ok with the languages diverging here?", "author": "iscai-msft", "createdAt": "2020-04-17T16:55:14Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ManageCustomModels.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.AccountProperties;\n+import com.azure.ai.formrecognizer.models.CustomFormModel;\n+import com.azure.ai.formrecognizer.models.CustomFormModelInfo;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.util.Context;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Sample for demonstrating common custom model management operations.\n+ */\n+public class ManageCustomModels {\n+\n+    /**\n+     * Main program to invoke the demo for performing operations of a custom model.\n+     *\n+     * @param args Unused. Arguments to the program.\n+     */\n+    public static void main(final String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        FormTrainingClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildClient().getFormTrainingClient();\n+\n+        AtomicReference<String> modelId = null;\n+\n+        // First, we see how many custom models we have, and what our limit is\n+        AccountProperties accountProperties = client.getAccountProperties();\n+        System.out.printf(\"The account has %s custom models, and we can have at most %s custom models\",\n+            accountProperties.getCount(), accountProperties.getLimit());\n+\n+        // Next, we get a paged list of all of our custom models\n+        PagedIterable<CustomFormModelInfo> customModels = client.listModels();", "originalCommit": "12159894917fd767ea2353777ef71cd415892dd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ2MTM1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410461359", "bodyText": "Updated this to be in sync with .NET at the moment. Also, on the basis on #8299 (comment)", "author": "samvaity", "createdAt": "2020-04-17T20:46:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM0OTUzNA=="}], "type": "inlineReview", "revised_code": {"commit": "c8563c2a189c8c22e52fea98c845fb51c7cbef6d", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ManageCustomModels.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ManageCustomModels.java\nindex 69ba99046e9..67afbb52883 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ManageCustomModels.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/ManageCustomModels.java\n\n@@ -14,6 +14,7 @@ import java.util.concurrent.atomic.AtomicReference;\n \n /**\n  * Sample for demonstrating common custom model management operations.\n+ * To learn how to train your own models, look at TrainUnlabeledModel.java and TrainLabeledModel.java.\n  */\n public class ManageCustomModels {\n \n"}}, {"oid": "c8563c2a189c8c22e52fea98c845fb51c7cbef6d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c8563c2a189c8c22e52fea98c845fb51c7cbef6d", "message": "update doc review changes", "committedDate": "2020-04-17T20:43:51Z", "type": "commit"}, {"oid": "5282757ce9e58e5d8e9a1cb0e1d3f356ddee31fb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5282757ce9e58e5d8e9a1cb0e1d3f356ddee31fb", "message": "rename form training client", "committedDate": "2020-04-17T20:53:15Z", "type": "commit"}, {"oid": "3903317286f443746f11b864fde259d8013be22b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3903317286f443746f11b864fde259d8013be22b", "message": "rename and readme error", "committedDate": "2020-04-17T22:04:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYxNjU5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410616590", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        System.out.printf(\"Field %s has value %s based on %s within bounding box %s with a confidence score \"\n          \n          \n            \n                                + \"of %s.%n\",\n          \n          \n            \n                        System.out.printf(\n          \n          \n            \n                            \"Field %s has value %s based on %s within bounding box %s with a confidence score of %d.%n\",", "author": "mssfang", "createdAt": "2020-04-18T04:36:49Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.RecognizedForm;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+\n+/**\n+ * Sample to show the differences in output that arise when RecognizeCustomForms\n+ * is called with custom models trained with labeled and unlabeled data.\n+ */\n+public class AdvancedDiffLabeledUnlabeledData {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused arguments to the program.\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public static void main(String[] args) throws IOException {\n+        // Instantiate a client that will be used to call the service.\n+\n+        FormRecognizerClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_Key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildClient();\n+\n+        File analyzeFile = new File(\"../../test/resources/sample-files/Invoice_1.pdf\");\n+        byte[] fileContent = Files.readAllBytes(analyzeFile.toPath());\n+\n+        IterableStream<RecognizedForm> formsWithLabeledModel =\n+            client.beginRecognizeCustomForms(new ByteArrayInputStream(fileContent), \"{labeled_model_Id}\", analyzeFile.length(), FormContentType.APPLICATION_PDF, true, null).getFinalResult();\n+        IterableStream<RecognizedForm> formsWithUnlabeledModel =\n+            client.beginRecognizeCustomForms(new ByteArrayInputStream(fileContent), \"{unlabeled_model_Id}\", analyzeFile.length(), FormContentType.APPLICATION_PDF).getFinalResult();\n+\n+        //  The main difference is found in the labels of its fields\n+        // The form recognized with a labeled model will have the labels it was trained with,\n+        // the unlabeled one will be denoted with indices\n+        System.out.println(\"--------Recognizing forms with labeled custom model--------\");\n+        printFieldData(formsWithLabeledModel);\n+\n+        System.out.println(\"-----------------------------------------------------------\");\n+\n+        System.out.println(\"-------Recognizing forms with unlabeled custom model-------\");\n+        printFieldData(formsWithUnlabeledModel);\n+    }\n+\n+    private static void printFieldData(IterableStream<RecognizedForm> recognizedForms) {\n+        recognizedForms.forEach(labeledForm -> labeledForm.getFields().forEach((label, formField) -> {\n+            // With your labeled custom model, you will not get back label data but will get back value data\n+            // This is because your custom model didn't have to use any machine learning to deduce the label,\n+            // the label was directly provided to it.\n+            final StringBuilder boundingBoxStr = new StringBuilder();\n+            if (formField.getValueText().getBoundingBox() != null) {\n+                formField.getValueText().getBoundingBox().getPoints().forEach(point ->\n+                    boundingBoxStr.append(String.format(\"[%s, %s]\", point.getX(), point.getY())));\n+            }\n+            // The unlabeled custom model will also include data about your labels\n+            System.out.printf(\"Field %s has value %s based on %s within bounding box %s with a confidence score \"\n+                    + \"of %s.%n\",", "originalCommit": "3903317286f443746f11b864fde259d8013be22b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bdf325abb09cec97a6907f9231958a721de5d8c", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java\nindex abf1ec4688a..af7dd391566 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java\n\n@@ -8,10 +8,9 @@ import com.azure.ai.formrecognizer.models.RecognizedForm;\n import com.azure.core.credential.AzureKeyCredential;\n import com.azure.core.util.IterableStream;\n \n-import java.io.ByteArrayInputStream;\n import java.io.File;\n+import java.io.FileInputStream;\n import java.io.IOException;\n-import java.nio.file.Files;\n \n /**\n  * Sample to show the differences in output that arise when RecognizeCustomForms\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYxODI5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410618291", "bodyText": "do we want to show user .block()? might be considering mimic the another way of  doing it. Such as .subscribe() and wait a few seconds at the end of file that make sure result has returned.", "author": "mssfang", "createdAt": "2020-04-18T04:40:54Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java", "diffHunk": "@@ -0,0 +1,93 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormWord;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedForm;\n+import com.azure.ai.formrecognizer.models.TextContentType;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.PollerFlux;\n+import reactor.core.publisher.Mono;\n+\n+/*\n+ * Sample to output the information that will help with manually validating your output from recognize custom forms.\n+ */\n+public class AdvancedManualValidationInfo {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused arguments to the program.\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        FormRecognizerAsyncClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildAsyncClient();\n+\n+        String modelId = \"{model_Id}\";\n+        String filePath = \"{analyze_file_path}\";\n+        PollerFlux<OperationResult, IterableStream<RecognizedForm>> trainingPoller =\n+            client.beginRecognizeCustomFormsFromUrl(filePath, modelId, true, null);\n+\n+        IterableStream<RecognizedForm> recognizedForms = trainingPoller\n+            .last()\n+            .flatMap(trainingOperationResponse -> {\n+                if (trainingOperationResponse.getStatus().isComplete()) {\n+                    // training completed successfully, retrieving final result.\n+                    return trainingOperationResponse.getFinalResult();\n+                } else {\n+                    return Mono.error(new RuntimeException(\"Polling completed unsuccessfully with status:\"\n+                        + trainingOperationResponse.getStatus()));\n+                }\n+            }).block();", "originalCommit": "3903317286f443746f11b864fde259d8013be22b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bdf325abb09cec97a6907f9231958a721de5d8c", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java\nindex 0a8733e25f8..495f795623e 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfo.java\n\n@@ -9,8 +9,7 @@ import com.azure.ai.formrecognizer.models.RecognizedForm;\n import com.azure.ai.formrecognizer.models.TextContentType;\n import com.azure.core.credential.AzureKeyCredential;\n import com.azure.core.util.IterableStream;\n-import com.azure.core.util.polling.PollerFlux;\n-import reactor.core.publisher.Mono;\n+import com.azure.core.util.polling.SyncPoller;\n \n /*\n  * Sample to output the information that will help with manually validating your output from recognize custom forms.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYxOTA5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r410619092", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    str.append(String.format(\"[%s, %s]\", point.getX(), point.getY()));\n          \n          \n            \n                                                    str.append(String.format(\"[%d, %d]\", point.getX(), point.getY()));\n          \n      \n    \n    \n  \n\nthere is other places that have using %s for numerical values.", "author": "mssfang", "createdAt": "2020-04-18T04:42:50Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfoAsync.java", "diffHunk": "@@ -0,0 +1,107 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormWord;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedForm;\n+import com.azure.ai.formrecognizer.models.TextContentType;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.PollerFlux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/*\n+ * Async sample to output the information that will help with manually validating your output from recognize custom forms.\n+ */\n+public class AdvancedManualValidationInfoAsync {\n+\n+    /**\n+     * Main method to invoke this demo.\n+     *\n+     * @param args Unused arguments to the program.\n+     *\n+     */\n+    public static void main(String[] args) {\n+        // Instantiate a client that will be used to call the service.\n+        FormRecognizerAsyncClient client = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .buildAsyncClient();\n+\n+        String modelId = \"{model_Id}\";\n+        String filePath = \"{file_source_url}\";\n+        PollerFlux<OperationResult, IterableStream<RecognizedForm>> recognizeFormPoller =\n+            client.beginRecognizeCustomFormsFromUrl(filePath, modelId, true, null);\n+\n+        Mono<IterableStream<RecognizedForm>> recognizeFormResult = recognizeFormPoller\n+            .last()\n+            .flatMap(trainingOperationResponse -> {\n+                if (trainingOperationResponse.getStatus().isComplete()) {\n+                    // training completed successfully, retrieving final result.\n+                    return trainingOperationResponse.getFinalResult();\n+                } else {\n+                    return Mono.error(new RuntimeException(\"Polling completed unsuccessfully with status:\"\n+                        + trainingOperationResponse.getStatus()));\n+                }\n+            });\n+\n+        System.out.println(\"--------RECOGNIZING FORM --------\");\n+        recognizeFormResult.subscribe(recognizedForms -> recognizedForms.forEach(recognizedForm -> {\n+            System.out.printf(\"Form has type: %s%n\", recognizedForm.getFormType());\n+            // each field is of type FormField\n+            //     The value of the field can also be a FormField, or a list of FormFields\n+            //     In our sample, it is not.\n+            recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                System.out.printf(\"Field %s has value %s based on %s within bounding box, with a confidence score \"\n+                        + \"of %s.%n\",\n+                    fieldText, fieldValue.getFieldValue(), fieldValue.getValueText().getText(),\n+                    fieldValue.getConfidence());\n+            });\n+\n+            // Page Information\n+            recognizedForm.getPages().forEach(formPage -> {\n+                System.out.printf(\"-------Recognizing Page %s of Form -------%n\", 1);\n+                System.out.printf(\"Has width %s , angle %s, height %s %n\", formPage.getWidth(),\n+                    formPage.getTextAngle(), formPage.getHeight());\n+                // Table information\n+                System.out.println(\"Recognized Tables: \");\n+                formPage.getTables().forEach(formTable -> {\n+                    formTable.getCells().forEach(formTableCell -> {\n+                        System.out.printf(\"Cell text %s has following words: %n\", formTableCell.getText());\n+                        // text_content only exists if you set include_text_content to True in your\n+                        // function call to recognize_custom_forms\n+                        // It is also a list of FormWords and FormLines, but in this example, we only deal with\n+                        // FormWords\n+                        formTableCell.getElements().forEach(formContent -> {\n+                            if (formContent.getTextContentType().equals(TextContentType.WORD)) {\n+                                FormWord formWordElement = (FormWord) (formContent);\n+                                StringBuilder str = new StringBuilder();\n+                                if (formWordElement.getBoundingBox() != null) {\n+                                    formWordElement.getBoundingBox().getPoints().forEach(point -> {\n+                                        str.append(String.format(\"[%s, %s]\", point.getX(), point.getY()));", "originalCommit": "3903317286f443746f11b864fde259d8013be22b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bdf325abb09cec97a6907f9231958a721de5d8c", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfoAsync.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfoAsync.java\nindex 872eff1a484..daa420bd24e 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfoAsync.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedManualValidationInfoAsync.java\n\n@@ -23,7 +23,6 @@ public class AdvancedManualValidationInfoAsync {\n      * Main method to invoke this demo.\n      *\n      * @param args Unused arguments to the program.\n-     *\n      */\n     public static void main(String[] args) {\n         // Instantiate a client that will be used to call the service.\n"}}, {"oid": "8bdf325abb09cec97a6907f9231958a721de5d8c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8bdf325abb09cec97a6907f9231958a721de5d8c", "message": "float value print update", "committedDate": "2020-04-20T02:27:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA5NjY0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10218#discussion_r411096648", "bodyText": "@samvaity  don't forget to update it without real credential", "author": "mssfang", "createdAt": "2020-04-20T05:09:50Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java", "diffHunk": "@@ -30,24 +29,25 @@ public static void main(String[] args) throws IOException {\n         // Instantiate a client that will be used to call the service.\n \n         FormRecognizerClient client = new FormRecognizerClientBuilder()\n-            .apiKey(new AzureKeyCredential(\"{api_Key}\"))\n-            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n+            .apiKey(new AzureKeyCredential(\"48c9ec5b1c444c899770946defc486c4\"))", "originalCommit": "8bdf325abb09cec97a6907f9231958a721de5d8c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e2d2d4554d9a86b90780a4e0edf7ff6b25c8fc7", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java\nindex af7dd391566..866296a5d6d 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/AdvancedDiffLabeledUnlabeledData.java\n\n@@ -29,8 +29,8 @@ public class AdvancedDiffLabeledUnlabeledData {\n         // Instantiate a client that will be used to call the service.\n \n         FormRecognizerClient client = new FormRecognizerClientBuilder()\n-            .apiKey(new AzureKeyCredential(\"48c9ec5b1c444c899770946defc486c4\"))\n-            .endpoint(\"https://javaformrecognizertestresource.cognitiveservices.azure.com/\")\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n             .buildClient();\n \n         File analyzeFile = new File(\"../../test/resources/sample-files/Invoice_6.pdf\");\n"}}, {"oid": "9e2d2d4554d9a86b90780a4e0edf7ff6b25c8fc7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9e2d2d4554d9a86b90780a4e0edf7ff6b25c8fc7", "message": "remove creds", "committedDate": "2020-04-20T05:12:37Z", "type": "commit"}, {"oid": "36df71f4eb1470390db82426373775b933a9075b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/36df71f4eb1470390db82426373775b933a9075b", "message": "anne review updates", "committedDate": "2020-04-21T02:30:15Z", "type": "commit"}]}