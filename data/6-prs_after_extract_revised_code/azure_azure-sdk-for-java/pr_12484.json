{"pr_number": 12484, "pr_title": "mgmt core fix and unit test for LRO", "pr_createdAt": "2020-06-24T09:13:28Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/12484", "timeline": [{"oid": "c6eb0b6255276d9c756ca3c058c933a63e9c2619", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c6eb0b6255276d9c756ca3c058c933a63e9c2619", "message": "add unit test for AsyncOperation with success", "committedDate": "2020-06-24T08:03:52Z", "type": "commit"}, {"oid": "39896ae5ac87ab1345e25c7508c85de460e1922e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/39896ae5ac87ab1345e25c7508c85de460e1922e", "message": "add unit test for AsyncOperation with fail", "committedDate": "2020-06-24T08:30:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1ODgyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12484#discussion_r444758820", "bodyText": "Here last AsyncPollResponse  will be in FAILED state with error in PollResult. Unlike track1 client-runtime, it will not throw CloudException during the polling.", "author": "weidongxu-microsoft", "createdAt": "2020-06-24T09:16:53Z", "path": "sdk/core/azure-core-management/src/test/java/com/azure/core/management/implementation/polling/LROPollerTests.java", "diffHunk": "@@ -126,6 +126,211 @@ public void lroBasedOnProvisioningState() {\n         }\n     }\n \n+    @Test\n+    public void lroBasedOnAsyncOperation() {\n+        ServerConfigure serverConfigure = new ServerConfigure();\n+\n+        final String resourceEndpoint = \"/resource/1\";\n+        final String operationEndpoint = \"/operations/1\";\n+        ResponseTransformer provisioningStateLroService = new ResponseTransformer() {\n+            private final int[] getCallCount = new int[1];\n+\n+            @Override\n+            public com.github.tomakehurst.wiremock.http.Response transform(Request request,\n+                                                                           com.github.tomakehurst.wiremock.http.Response response,\n+                                                                           FileSource fileSource,\n+                                                                           Parameters parameters) {\n+\n+                if (!request.getUrl().endsWith(resourceEndpoint) && !request.getUrl().endsWith(operationEndpoint)) {\n+                    return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                        .status(500)\n+                        .body(\"Unsupported path:\" + request.getUrl())\n+                        .build();\n+                }\n+                if (request.getMethod().isOneOf(RequestMethod.PUT)) {\n+                    // accept response\n+                    return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                        .headers(new HttpHeaders(\n+                            new HttpHeader(\"Azure-AsyncOperation\", request.getAbsoluteUrl().replace(resourceEndpoint, operationEndpoint))))\n+                        .body(toJson(new FooWithProvisioningState(\"Creating\")))\n+                        .status(201)\n+                        .build();\n+                }\n+                if (request.getMethod().isOneOf(RequestMethod.GET)) {\n+                    if (request.getUrl().endsWith(operationEndpoint)) {\n+                        getCallCount[0]++;\n+                        if (getCallCount[0] < serverConfigure.pollingCountTillSuccess) {\n+                            return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                                .body(\"{\\\"status\\\": \\\"InProgress\\\"}\")\n+                                .build();\n+                        } else if (getCallCount[0] == serverConfigure.pollingCountTillSuccess) {\n+                            return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                                .body(\"{\\\"status\\\": \\\"Succeeded\\\"}\")\n+                                .build();\n+                        }\n+                    } else if (request.getUrl().endsWith(resourceEndpoint) && getCallCount[0] == serverConfigure.pollingCountTillSuccess) {\n+                        // final resource\n+                        return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                            .body(toJson(new FooWithProvisioningState(\"Succeeded\", UUID.randomUUID().toString())))\n+                            .build();\n+                    } else {\n+                        return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                            .status(400)\n+                            .body(\"Invalid state:\" + request.getUrl())\n+                            .build();\n+                    }\n+                }\n+                return response;\n+            }\n+\n+            @Override\n+            public String getName() {\n+                return \"LroService\";\n+            }\n+        };\n+\n+        WireMockServer lroServer = createServer(provisioningStateLroService, resourceEndpoint, operationEndpoint);\n+        lroServer.start();\n+\n+        try {\n+            final ProvisioningStateLroServiceClient client = RestProxy.create(ProvisioningStateLroServiceClient.class,\n+                createHttpPipeline(lroServer.port()),\n+                SERIALIZER);\n+\n+            PollerFlux<PollResult<FooWithProvisioningState>, FooWithProvisioningState> lroFlux\n+                = PollerFactory.create(SERIALIZER,\n+                new HttpPipelineBuilder().build(),\n+                FooWithProvisioningState.class,\n+                FooWithProvisioningState.class,\n+                POLLING_DURATION,\n+                newLroInitFunction(client));\n+\n+            int[] onNextCallCount = new int[1];\n+            AsyncPollResponse<PollResult<FooWithProvisioningState>, FooWithProvisioningState> pollResponse = lroFlux.doOnNext(response -> {\n+                PollResult<FooWithProvisioningState> pollResult = response.getValue();\n+                Assertions.assertNotNull(pollResult);\n+                Assertions.assertNotNull(pollResult.getValue());\n+                onNextCallCount[0]++;\n+                if (onNextCallCount[0] == 1) {\n+                    Assertions.assertEquals(LongRunningOperationStatus.IN_PROGRESS,\n+                        response.getStatus());\n+                } else if (onNextCallCount[0] == 2) {\n+                    Assertions.assertEquals(LongRunningOperationStatus.SUCCESSFULLY_COMPLETED,\n+                        response.getStatus());\n+                } else {\n+                    throw new IllegalStateException(\"Poller emitted more than expected value.\");\n+                }\n+            }).blockLast();\n+\n+            FooWithProvisioningState foo = pollResponse.getFinalResult().block();\n+            Assertions.assertNotNull(foo.getResourceId());\n+            Assertions.assertEquals(\"Succeeded\", foo.getProvisioningState());\n+        } finally {\n+            if (lroServer.isRunning()) {\n+                lroServer.shutdown();\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void lroBasedOnAsyncOperationFailed() {\n+        ServerConfigure serverConfigure = new ServerConfigure();\n+\n+        final String resourceEndpoint = \"/resource/1\";\n+        final String operationEndpoint = \"/operations/1\";\n+        ResponseTransformer provisioningStateLroService = new ResponseTransformer() {\n+            private final int[] getCallCount = new int[1];\n+\n+            @Override\n+            public com.github.tomakehurst.wiremock.http.Response transform(Request request,\n+                                                                           com.github.tomakehurst.wiremock.http.Response response,\n+                                                                           FileSource fileSource,\n+                                                                           Parameters parameters) {\n+\n+                if (!request.getUrl().endsWith(resourceEndpoint) && !request.getUrl().endsWith(operationEndpoint)) {\n+                    return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                        .status(500)\n+                        .body(\"Unsupported path:\" + request.getUrl())\n+                        .build();\n+                }\n+                if (request.getMethod().isOneOf(RequestMethod.PUT)) {\n+                    // accept response\n+                    return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                        .headers(new HttpHeaders(\n+                            new HttpHeader(\"Azure-AsyncOperation\", request.getAbsoluteUrl().replace(resourceEndpoint, operationEndpoint))))\n+                        .body(toJson(new FooWithProvisioningState(\"Creating\")))\n+                        .status(201)\n+                        .build();\n+                }\n+                if (request.getMethod().isOneOf(RequestMethod.GET)) {\n+                    if (request.getUrl().endsWith(operationEndpoint)) {\n+                        getCallCount[0]++;\n+                        if (getCallCount[0] < serverConfigure.pollingCountTillSuccess) {\n+                            return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                                .body(\"{\\\"status\\\": \\\"InProgress\\\"}\")\n+                                .build();\n+                        } else if (getCallCount[0] == serverConfigure.pollingCountTillSuccess) {\n+                            return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                                .body(\"{\\\"status\\\": \\\"Failed\\\"}\")\n+                                .build();\n+                        }\n+                    } else {\n+                        return new com.github.tomakehurst.wiremock.http.Response.Builder()\n+                            .status(400)\n+                            .body(\"Invalid state:\" + request.getUrl())\n+                            .build();\n+                    }\n+                }\n+                return response;\n+            }\n+\n+            @Override\n+            public String getName() {\n+                return \"LroService\";\n+            }\n+        };\n+\n+        WireMockServer lroServer = createServer(provisioningStateLroService, resourceEndpoint, operationEndpoint);\n+        lroServer.start();\n+\n+        try {\n+            final ProvisioningStateLroServiceClient client = RestProxy.create(ProvisioningStateLroServiceClient.class,\n+                createHttpPipeline(lroServer.port()),\n+                SERIALIZER);\n+\n+            PollerFlux<PollResult<FooWithProvisioningState>, FooWithProvisioningState> lroFlux\n+                = PollerFactory.create(SERIALIZER,\n+                new HttpPipelineBuilder().build(),\n+                FooWithProvisioningState.class,\n+                FooWithProvisioningState.class,\n+                POLLING_DURATION,\n+                newLroInitFunction(client));\n+\n+            int[] onNextCallCount = new int[1];\n+            AsyncPollResponse<PollResult<FooWithProvisioningState>, FooWithProvisioningState> pollResponse = lroFlux.doOnNext(response -> {\n+                PollResult<FooWithProvisioningState> pollResult = response.getValue();\n+                Assertions.assertNotNull(pollResult);\n+                onNextCallCount[0]++;\n+                if (onNextCallCount[0] == 1) {\n+                    Assertions.assertNotNull(pollResult.getValue());\n+                    Assertions.assertEquals(LongRunningOperationStatus.IN_PROGRESS,\n+                        response.getStatus());\n+                } else if (onNextCallCount[0] == 2) {\n+                    Assertions.assertEquals(LongRunningOperationStatus.FAILED,\n+                        response.getStatus());\n+                } else {\n+                    throw new IllegalStateException(\"Poller emitted more than expected value.\");\n+                }\n+            }).blockLast();\n+\n+            Assertions.assertEquals(LongRunningOperationStatus.FAILED, pollResponse.getStatus());", "originalCommit": "39896ae5ac87ab1345e25c7508c85de460e1922e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "ae8f1a3609754678eb0fdd246f94ed607bde7f8f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ae8f1a3609754678eb0fdd246f94ed607bde7f8f", "message": "fix typo", "committedDate": "2020-06-24T15:58:18Z", "type": "commit"}, {"oid": "a05db2c8473549f6c30a5a4ad587cb368065b3c5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a05db2c8473549f6c30a5a4ad587cb368065b3c5", "message": "add constructor to ManagementError", "committedDate": "2020-06-29T02:01:43Z", "type": "commit"}]}