{"pr_number": 14527, "pr_title": "Add implementation for relationship APIs", "pr_createdAt": "2020-08-27T19:49:22Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14527", "timeline": [{"oid": "c2389cf503a234fbd81bedc161d707f75f093a79", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c2389cf503a234fbd81bedc161d707f75f093a79", "message": "add code comments", "committedDate": "2020-08-28T00:20:30Z", "type": "forcePushed"}, {"oid": "18daa3c4cc50a8873c08a8513d8a73dedbf9d4d1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/18daa3c4cc50a8873c08a8513d8a73dedbf9d4d1", "message": "feat(adt): Add implementation for async APIs", "committedDate": "2020-08-28T01:11:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNTYzMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r478815631", "bodyText": "We want to convert the item emitted by addWithResponseAsync(digitalTwinId, digitalTwin, context) into json string representation, and return it in a Mono; or return a Mono.error if the serialization fails.\nSo we need to use the Mono.flatMap API: https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html#flatMap-java.util.function.Function-", "author": "abhipsaMisra", "createdAt": "2020-08-28T03:51:04Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -92,67 +94,282 @@ public HttpPipeline getHttpPipeline() {\n         return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context));\n     }\n \n+    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n+            .flatMap(response -> {\n+                try {", "originalCommit": "13dd72c5278af22b16abef4b449d5bb4542c6acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNjYyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r478816629", "bodyText": "flatMap(Function<? super T,? extends Mono<? extends R>> transformer)\nTransform the item emitted by this Mono asynchronously, returning the value emitted by another Mono (possibly changing the value type).", "author": "abhipsaMisra", "createdAt": "2020-08-28T03:55:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNTYzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2MDg0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r479560840", "bodyText": "Thank you for explanation.", "author": "bikamani", "createdAt": "2020-08-28T22:31:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNTYzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "73d41160feacd2d5f6296f6caa656a02d9cd6d62", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\nindex 9aa0fe49b1..5fa4a4a5d0 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\n\n@@ -104,6 +113,7 @@ public final class DigitalTwinsAsyncClient {\n                     DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n                     return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n                 } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while creating a digital twin: \", e);\n                     return Mono.error(e);\n                 }\n             });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNjA4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r478816080", "bodyText": "Here we simply convert the object returned into <T>. There is no checked exception thrown, so nothing needs to be transformed into Mono.error.\nSo we can use the Mono.Map API: https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html#map-java.util.function.Function-", "author": "abhipsaMisra", "createdAt": "2020-08-28T03:52:58Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -92,67 +94,282 @@ public HttpPipeline getHttpPipeline() {\n         return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context));\n     }\n \n+    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n     // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n     // Input is Object and output is Response<T>.\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz) {\n-        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, klazz, context));\n+    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz) {\n+        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, context));\n     }\n \n-    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n             .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n-            .flatMap(\n-                response -> {\n-                    try {\n-                        String jsonResponse = mapper.writeValueAsString(response.getValue());\n-                        DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n-                        return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n-                    } catch (JsonProcessingException e) {\n-                        return Mono.error(e);\n-                    }\n-                });\n-    }\n-\n-    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz, Context context) {\n+            .map(response -> {", "originalCommit": "13dd72c5278af22b16abef4b449d5bb4542c6acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNjcxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r478816714", "bodyText": "map(Function<? super T,? extends R> mapper)\nTransform the item emitted by this Mono by applying a synchronous function to it.", "author": "abhipsaMisra", "createdAt": "2020-08-28T03:55:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNjA4MA=="}], "type": "inlineReview", "revised_code": {"commit": "73d41160feacd2d5f6296f6caa656a02d9cd6d62", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\nindex 9aa0fe49b1..5fa4a4a5d0 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\n\n@@ -104,6 +113,7 @@ public final class DigitalTwinsAsyncClient {\n                     DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n                     return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n                 } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while creating a digital twin: \", e);\n                     return Mono.error(e);\n                 }\n             });\n"}}, {"oid": "912565496d1744420fc6c8de1453034569161656", "url": "https://github.com/Azure/azure-sdk-for-java/commit/912565496d1744420fc6c8de1453034569161656", "message": "feat(adt): Add implementation for relationship APIs", "committedDate": "2020-08-28T05:17:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwNzA0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r479507048", "bodyText": "when we get to the samples code, we will need to read this from the disk.", "author": "azabbasi", "createdAt": "2020-08-28T19:55:55Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/AsyncSample.java", "diffHunk": "@@ -118,5 +120,39 @@ public static void main(String[] args) throws InterruptedException, JsonProcessi\n         boolean created = createTwinsSemaphore.tryAcquire(2, 20, TimeUnit.SECONDS);\n         System.out.println(\"Source twins created: \" + created);\n \n+        String targetTwin1_Id = \"targetTwin_1_\" + random.nextInt();\n+        String targetTwin_1 = \"{\\\"$metadata\\\": {\\\"$model\\\": \\\"dtmi:samples:HVAC;1\\\"}, \\\"Efficiency\\\": 10, \\\"TargetTemperature\\\": 10, \\\"TargetHumidity\\\": 10}\";", "originalCommit": "912565496d1744420fc6c8de1453034569161656", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI1OTgyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r480259821", "bodyText": "Yes, that's correct.", "author": "abhipsaMisra", "createdAt": "2020-08-31T16:54:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwNzA0OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxMTU5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r479511591", "bodyText": "it's not really returning a response", "author": "azabbasi", "createdAt": "2020-08-28T20:07:12Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -92,67 +94,282 @@ public HttpPipeline getHttpPipeline() {\n         return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context));\n     }\n \n+    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n     // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n     // Input is Object and output is Response<T>.\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz) {\n-        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, klazz, context));\n+    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz) {\n+        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, context));\n     }\n \n-    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n             .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n-            .flatMap(\n-                response -> {\n-                    try {\n-                        String jsonResponse = mapper.writeValueAsString(response.getValue());\n-                        DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n-                        return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n-                    } catch (JsonProcessingException e) {\n-                        return Mono.error(e);\n-                    }\n-                });\n-    }\n-\n-    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz, Context context) {\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The application/json relationship to be created.\n+     * @return The application/json relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> createRelationship(String digitalTwinId, String relationshipId, String relationship) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, context))\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The application/json relationship to be created.\n+     * @return A REST response containing the application/json relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> createRelationship(String digitalTwinId, String relationshipId, String relationship, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n-            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n-            .flatMap(\n-                response -> {\n-                    T genericResponse = mapper.convertValue(response.getValue(), klazz);\n+            .addRelationshipWithResponseAsync(digitalTwinId, relationshipId, relationship, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n                     DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n-                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders));\n-                });\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n     }\n \n     /**\n      * Creates a relationship on a digital twin.\n      *\n      * @param digitalTwinId The Id of the source digital twin.\n      * @param relationshipId The Id of the relationship to be created.\n-     * @param relationship The application/json relationship to be created.\n-     * @return A REST response containing the application/json relationship created.\n+     * @param relationship The relationship to be created.\n+     * @param clazz The model class to convert the relationship to.\n+     * @param <T> The generic type to convert the relationship to.\n+     * @return The relationship created.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<Response<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship) {\n-        return withContext(context -> createRelationshipWithResponse(digitalTwinId, relationshipId, relationship, context));\n+    public <T> Mono<T> createRelationship(String digitalTwinId, String relationshipId, Object relationship, Class<T> clazz) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, clazz, context))\n+            .map(DigitalTwinsResponse::getValue);\n     }\n \n-    Mono<Response<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship, Context context) {\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The relationship to be created.\n+     * @param clazz The model class to convert the relationship to.\n+     * @param <T> The generic type to convert the relationship to.\n+     * @return A REST response containing the relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, Object relationship, Class<T> clazz) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> createRelationship(String digitalTwinId, String relationshipId, Object relationship, Class<T> clazz, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n             .addRelationshipWithResponseAsync(digitalTwinId, relationshipId, relationship, context)\n-            .flatMap(\n-                response -> {\n-                    try {\n-                        String jsonResponse = mapper.writeValueAsString(response.getValue());\n-                        return Mono.just(new SimpleResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse));\n-                    } catch (JsonProcessingException e) {\n-                        return Mono.error(e);\n-                    }\n-                });\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Gets a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to retrieve.\n+     * @return The application/json relationship corresponding to the provided relationshipId.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getRelationship(String digitalTwinId, String relationshipId) {\n+        return withContext(context -> getRelationship(digitalTwinId, relationshipId, context))\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to retrieve.\n+     * @return A REST response containing the application/json relationship corresponding to the provided relationshipId.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getRelationshipWithResponse(String digitalTwinId, String relationshipId) {\n+        return withContext(context -> getRelationship(digitalTwinId, relationshipId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getRelationship(String digitalTwinId, String relationshipId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getRelationshipByIdWithResponseAsync(digitalTwinId, relationshipId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n+    /**\n+     * Gets a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to retrieve.\n+     * @param clazz The model class to convert the relationship to.\n+     * @param <T> The generic type to convert the relationship to.\n+     * @return The relationship corresponding to the provided relationshipId.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<T> getRelationship(String digitalTwinId, String relationshipId, Class<T> clazz) {\n+        return withContext(context -> getRelationship(digitalTwinId, relationshipId, clazz, context))\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to retrieve.\n+     * @param clazz The model class to convert the relationship to.\n+     * @param <T> The generic type to convert the relationship to.\n+     * @return A REST response containing the relationship corresponding to the provided relationshipId.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> getRelationshipWithResponse(String digitalTwinId, String relationshipId, Class<T> clazz) {\n+        return withContext(context -> getRelationship(digitalTwinId, relationshipId, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> getRelationship(String digitalTwinId, String relationshipId, Class<T> clazz, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getRelationshipByIdWithResponseAsync(digitalTwinId, relationshipId, context)\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Updates the properties of a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be updated.\n+     * @param relationshipUpdateOperations The application/json-patch+json operations to be performed on the specified digital twin's relationship.\n+     * @return An empty response.", "originalCommit": "912565496d1744420fc6c8de1453034569161656", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2MDIyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r480260227", "bodyText": "True, updated it to \"returns an Empty Mono\"", "author": "abhipsaMisra", "createdAt": "2020-08-31T16:54:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxMTU5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "73d41160feacd2d5f6296f6caa656a02d9cd6d62", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\nindex 9aa0fe49b1..5fa4a4a5d0 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\n\n@@ -104,6 +113,7 @@ public final class DigitalTwinsAsyncClient {\n                     DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n                     return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n                 } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while creating a digital twin: \", e);\n                     return Mono.error(e);\n                 }\n             });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2MjAyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r479562024", "bodyText": "Did we decide Rest or Http? If not yet, I'd go with Http similar to dotnet.", "author": "bikamani", "createdAt": "2020-08-28T22:36:43Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -92,67 +94,282 @@ public HttpPipeline getHttpPipeline() {\n         return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context));\n     }\n \n+    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n     // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n     // Input is Object and output is Response<T>.\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz) {\n-        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, klazz, context));\n+    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz) {\n+        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, context));\n     }\n \n-    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n             .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n-            .flatMap(\n-                response -> {\n-                    try {\n-                        String jsonResponse = mapper.writeValueAsString(response.getValue());\n-                        DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n-                        return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n-                    } catch (JsonProcessingException e) {\n-                        return Mono.error(e);\n-                    }\n-                });\n-    }\n-\n-    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz, Context context) {\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The application/json relationship to be created.\n+     * @return The application/json relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> createRelationship(String digitalTwinId, String relationshipId, String relationship) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, context))\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The application/json relationship to be created.\n+     * @return A REST response containing the application/json relationship created.", "originalCommit": "912565496d1744420fc6c8de1453034569161656", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2MDcyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r480260726", "bodyText": "Sure, I'll use Http.", "author": "abhipsaMisra", "createdAt": "2020-08-31T16:55:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2MjAyNA=="}], "type": "inlineReview", "revised_code": {"commit": "73d41160feacd2d5f6296f6caa656a02d9cd6d62", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\nindex 9aa0fe49b1..5fa4a4a5d0 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\n\n@@ -104,6 +113,7 @@ public final class DigitalTwinsAsyncClient {\n                     DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n                     return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n                 } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while creating a digital twin: \", e);\n                     return Mono.error(e);\n                 }\n             });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2MjI0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r479562243", "bodyText": "should we also log here?", "author": "bikamani", "createdAt": "2020-08-28T22:37:48Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -92,67 +94,282 @@ public HttpPipeline getHttpPipeline() {\n         return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context));\n     }\n \n+    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);", "originalCommit": "912565496d1744420fc6c8de1453034569161656", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2MTk1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r480261954", "bodyText": "Sure, I added a log statement around these Mono.error returning code paths.", "author": "abhipsaMisra", "createdAt": "2020-08-31T16:57:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2MjI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "73d41160feacd2d5f6296f6caa656a02d9cd6d62", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\nindex 9aa0fe49b1..5fa4a4a5d0 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\n\n@@ -104,6 +113,7 @@ public final class DigitalTwinsAsyncClient {\n                     DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n                     return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n                 } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while creating a digital twin: \", e);\n                     return Mono.error(e);\n                 }\n             });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2Mjc2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r479562769", "bodyText": "Is this also required?", "author": "bikamani", "createdAt": "2020-08-28T22:39:57Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -92,67 +94,282 @@ public HttpPipeline getHttpPipeline() {\n         return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context));\n     }\n \n+    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n     // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n     // Input is Object and output is Response<T>.\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz) {\n-        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, klazz, context));\n+    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz) {\n+        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, context));\n     }\n \n-    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n             .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n-            .flatMap(\n-                response -> {\n-                    try {\n-                        String jsonResponse = mapper.writeValueAsString(response.getValue());\n-                        DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n-                        return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n-                    } catch (JsonProcessingException e) {\n-                        return Mono.error(e);\n-                    }\n-                });\n-    }\n-\n-    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz, Context context) {\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The application/json relationship to be created.\n+     * @return The application/json relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> createRelationship(String digitalTwinId, String relationshipId, String relationship) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, context))\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The application/json relationship to be created.\n+     * @return A REST response containing the application/json relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> createRelationship(String digitalTwinId, String relationshipId, String relationship, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n-            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n-            .flatMap(\n-                response -> {\n-                    T genericResponse = mapper.convertValue(response.getValue(), klazz);\n+            .addRelationshipWithResponseAsync(digitalTwinId, relationshipId, relationship, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n                     DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n-                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders));\n-                });\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n     }\n \n     /**\n      * Creates a relationship on a digital twin.\n      *\n      * @param digitalTwinId The Id of the source digital twin.\n      * @param relationshipId The Id of the relationship to be created.\n-     * @param relationship The application/json relationship to be created.\n-     * @return A REST response containing the application/json relationship created.\n+     * @param relationship The relationship to be created.\n+     * @param clazz The model class to convert the relationship to.\n+     * @param <T> The generic type to convert the relationship to.", "originalCommit": "912565496d1744420fc6c8de1453034569161656", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2MjM4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r480262380", "bodyText": "Yes, the javadoc generator reports an error otherwise.", "author": "abhipsaMisra", "createdAt": "2020-08-31T16:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2Mjc2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "73d41160feacd2d5f6296f6caa656a02d9cd6d62", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\nindex 9aa0fe49b1..5fa4a4a5d0 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\n\n@@ -104,6 +113,7 @@ public final class DigitalTwinsAsyncClient {\n                     DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n                     return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n                 } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while creating a digital twin: \", e);\n                     return Mono.error(e);\n                 }\n             });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2MzQ5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r479563497", "bodyText": "How does this work?", "author": "bikamani", "createdAt": "2020-08-28T22:42:58Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -92,67 +94,282 @@ public HttpPipeline getHttpPipeline() {\n         return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context));\n     }\n \n+    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n     // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n     // Input is Object and output is Response<T>.\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz) {\n-        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, klazz, context));\n+    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz) {\n+        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, context));\n     }\n \n-    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n             .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n-            .flatMap(\n-                response -> {\n-                    try {\n-                        String jsonResponse = mapper.writeValueAsString(response.getValue());\n-                        DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n-                        return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n-                    } catch (JsonProcessingException e) {\n-                        return Mono.error(e);\n-                    }\n-                });\n-    }\n-\n-    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz, Context context) {\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The application/json relationship to be created.\n+     * @return The application/json relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> createRelationship(String digitalTwinId, String relationshipId, String relationship) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, context))\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The application/json relationship to be created.\n+     * @return A REST response containing the application/json relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> createRelationship(String digitalTwinId, String relationshipId, String relationship, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n-            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n-            .flatMap(\n-                response -> {\n-                    T genericResponse = mapper.convertValue(response.getValue(), klazz);\n+            .addRelationshipWithResponseAsync(digitalTwinId, relationshipId, relationship, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n                     DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n-                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders));\n-                });\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n     }\n \n     /**\n      * Creates a relationship on a digital twin.\n      *\n      * @param digitalTwinId The Id of the source digital twin.\n      * @param relationshipId The Id of the relationship to be created.\n-     * @param relationship The application/json relationship to be created.\n-     * @return A REST response containing the application/json relationship created.\n+     * @param relationship The relationship to be created.\n+     * @param clazz The model class to convert the relationship to.\n+     * @param <T> The generic type to convert the relationship to.\n+     * @return The relationship created.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<Response<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship) {\n-        return withContext(context -> createRelationshipWithResponse(digitalTwinId, relationshipId, relationship, context));\n+    public <T> Mono<T> createRelationship(String digitalTwinId, String relationshipId, Object relationship, Class<T> clazz) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, clazz, context))\n+            .map(DigitalTwinsResponse::getValue);", "originalCommit": "912565496d1744420fc6c8de1453034569161656", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2NjI1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r480266258", "bodyText": "This is called a method reference; it is useful when you want to use a lambda expression to call an existing method.\nEg. this map operation actually does the following:\n.map(new Function<DigitalTwinsResponse<String>, String>() {\n        @Override\n        public String apply(DigitalTwinsResponse<String> stringDigitalTwinsResponse) {\n            return stringDigitalTwinsResponse.getValue();\n        }\n    });\nSince all we do in this anonymous class is call DigitalTwinsResponse.getValue(), we can replace it by a method reference.", "author": "abhipsaMisra", "createdAt": "2020-08-31T17:05:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2MzQ5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "73d41160feacd2d5f6296f6caa656a02d9cd6d62", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\nindex 9aa0fe49b1..5fa4a4a5d0 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\n\n@@ -104,6 +113,7 @@ public final class DigitalTwinsAsyncClient {\n                     DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n                     return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n                 } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while creating a digital twin: \", e);\n                     return Mono.error(e);\n                 }\n             });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2NzEwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r479567101", "bodyText": "why justOrEmpty?", "author": "bikamani", "createdAt": "2020-08-28T22:58:28Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -92,67 +94,282 @@ public HttpPipeline getHttpPipeline() {\n         return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, context));\n     }\n \n+    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n+    }\n+\n     // TODO: This is a temporary implementation for sample purposes. This should be spruced up/replaced once this API is actually designed.\n     // Input is Object and output is Response<T>.\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz) {\n-        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, klazz, context));\n+    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz) {\n+        return withContext(context -> createDigitalTwinWithResponse(digitalTwinId, digitalTwin, clazz, context));\n     }\n \n-    Mono<DigitalTwinsResponse<String>> createDigitalTwinWithResponse(String digitalTwinId, String digitalTwin, Context context) {\n+    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n             .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n-            .flatMap(\n-                response -> {\n-                    try {\n-                        String jsonResponse = mapper.writeValueAsString(response.getValue());\n-                        DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n-                        return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n-                    } catch (JsonProcessingException e) {\n-                        return Mono.error(e);\n-                    }\n-                });\n-    }\n-\n-    <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> klazz, Context context) {\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The application/json relationship to be created.\n+     * @return The application/json relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> createRelationship(String digitalTwinId, String relationshipId, String relationship) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, context))\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The application/json relationship to be created.\n+     * @return A REST response containing the application/json relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> createRelationship(String digitalTwinId, String relationshipId, String relationship, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n-            .addWithResponseAsync(digitalTwinId, digitalTwin, context)\n-            .flatMap(\n-                response -> {\n-                    T genericResponse = mapper.convertValue(response.getValue(), klazz);\n+            .addRelationshipWithResponseAsync(digitalTwinId, relationshipId, relationship, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n                     DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n-                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders));\n-                });\n+                    return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n+                } catch (JsonProcessingException e) {\n+                    return Mono.error(e);\n+                }\n+            });\n     }\n \n     /**\n      * Creates a relationship on a digital twin.\n      *\n      * @param digitalTwinId The Id of the source digital twin.\n      * @param relationshipId The Id of the relationship to be created.\n-     * @param relationship The application/json relationship to be created.\n-     * @return A REST response containing the application/json relationship created.\n+     * @param relationship The relationship to be created.\n+     * @param clazz The model class to convert the relationship to.\n+     * @param <T> The generic type to convert the relationship to.\n+     * @return The relationship created.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<Response<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship) {\n-        return withContext(context -> createRelationshipWithResponse(digitalTwinId, relationshipId, relationship, context));\n+    public <T> Mono<T> createRelationship(String digitalTwinId, String relationshipId, Object relationship, Class<T> clazz) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, clazz, context))\n+            .map(DigitalTwinsResponse::getValue);\n     }\n \n-    Mono<Response<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship, Context context) {\n+    /**\n+     * Creates a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to be created.\n+     * @param relationship The relationship to be created.\n+     * @param clazz The model class to convert the relationship to.\n+     * @param <T> The generic type to convert the relationship to.\n+     * @return A REST response containing the relationship created.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public <T> Mono<DigitalTwinsResponse<T>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, Object relationship, Class<T> clazz) {\n+        return withContext(context -> createRelationship(digitalTwinId, relationshipId, relationship, clazz, context));\n+    }\n+\n+    <T> Mono<DigitalTwinsResponse<T>> createRelationship(String digitalTwinId, String relationshipId, Object relationship, Class<T> clazz, Context context) {\n         return protocolLayer\n             .getDigitalTwins()\n             .addRelationshipWithResponseAsync(digitalTwinId, relationshipId, relationship, context)\n-            .flatMap(\n-                response -> {\n-                    try {\n-                        String jsonResponse = mapper.writeValueAsString(response.getValue());\n-                        return Mono.just(new SimpleResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse));\n-                    } catch (JsonProcessingException e) {\n-                        return Mono.error(e);\n-                    }\n-                });\n+            .map(response -> {\n+                T genericResponse = mapper.convertValue(response.getValue(), clazz);\n+                DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                return new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), genericResponse, twinHeaders);\n+            });\n+    }\n+\n+    /**\n+     * Gets a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to retrieve.\n+     * @return The application/json relationship corresponding to the provided relationshipId.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> getRelationship(String digitalTwinId, String relationshipId) {\n+        return withContext(context -> getRelationship(digitalTwinId, relationshipId, context))\n+            .map(DigitalTwinsResponse::getValue);\n+    }\n+\n+    /**\n+     * Gets a relationship on a digital twin.\n+     *\n+     * @param digitalTwinId The Id of the source digital twin.\n+     * @param relationshipId The Id of the relationship to retrieve.\n+     * @return A REST response containing the application/json relationship corresponding to the provided relationshipId.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<DigitalTwinsResponse<String>> getRelationshipWithResponse(String digitalTwinId, String relationshipId) {\n+        return withContext(context -> getRelationship(digitalTwinId, relationshipId, context));\n+    }\n+\n+    Mono<DigitalTwinsResponse<String>> getRelationship(String digitalTwinId, String relationshipId, Context context) {\n+        return protocolLayer\n+            .getDigitalTwins()\n+            .getRelationshipByIdWithResponseAsync(digitalTwinId, relationshipId, context)\n+            .flatMap(response -> {\n+                try {\n+                    String jsonResponse = mapper.writeValueAsString(response.getValue());\n+                    DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n+                    return Mono.justOrEmpty(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));", "originalCommit": "912565496d1744420fc6c8de1453034569161656", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5NTc4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14527#discussion_r480295786", "bodyText": "REturns the mono containing the item, or an empty mono, if no item is retrieved.", "author": "abhipsaMisra", "createdAt": "2020-08-31T18:01:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU2NzEwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "73d41160feacd2d5f6296f6caa656a02d9cd6d62", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\nindex 9aa0fe49b1..5fa4a4a5d0 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\n\n@@ -104,6 +113,7 @@ public final class DigitalTwinsAsyncClient {\n                     DigitalTwinsResponseHeaders twinHeaders = mapper.convertValue(response.getDeserializedHeaders(), DigitalTwinsResponseHeaders.class);\n                     return Mono.just(new DigitalTwinsResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(), jsonResponse, twinHeaders));\n                 } catch (JsonProcessingException e) {\n+                    logger.error(\"JsonProcessingException occurred while creating a digital twin: \", e);\n                     return Mono.error(e);\n                 }\n             });\n"}}, {"oid": "560de4392a4d75dd4f1f0c91069126ca9af44177", "url": "https://github.com/Azure/azure-sdk-for-java/commit/560de4392a4d75dd4f1f0c91069126ca9af44177", "message": "feat(adt): Add implementation for relationship APIs", "committedDate": "2020-08-31T17:37:02Z", "type": "commit"}, {"oid": "73d41160feacd2d5f6296f6caa656a02d9cd6d62", "url": "https://github.com/Azure/azure-sdk-for-java/commit/73d41160feacd2d5f6296f6caa656a02d9cd6d62", "message": "CR comments", "committedDate": "2020-08-31T17:37:08Z", "type": "commit"}, {"oid": "73d41160feacd2d5f6296f6caa656a02d9cd6d62", "url": "https://github.com/Azure/azure-sdk-for-java/commit/73d41160feacd2d5f6296f6caa656a02d9cd6d62", "message": "CR comments", "committedDate": "2020-08-31T17:37:08Z", "type": "forcePushed"}, {"oid": "0d3469f2d8b7ab8e5e440306474053de5a67e04a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0d3469f2d8b7ab8e5e440306474053de5a67e04a", "message": "fix rebase issues", "committedDate": "2020-08-31T17:39:42Z", "type": "commit"}, {"oid": "2e3b60c4626e32ecb325f018c1ef6d77725482ff", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2e3b60c4626e32ecb325f018c1ef6d77725482ff", "message": "typo", "committedDate": "2020-08-31T17:41:03Z", "type": "commit"}, {"oid": "9059de4dd1ca0b7d5a89a5f1c8b623db43f5e6c0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9059de4dd1ca0b7d5a89a5f1c8b623db43f5e6c0", "message": "spotcheck errors", "committedDate": "2020-08-31T17:59:25Z", "type": "commit"}]}