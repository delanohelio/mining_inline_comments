{"pr_number": 9665, "pr_title": "support legacy PagedList for convenience of migration", "pr_createdAt": "2020-03-30T02:33:02Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/9665", "timeline": [{"oid": "1ff162e67bb8d96aeadd40d4ef20ec231e391e5f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1ff162e67bb8d96aeadd40d4ef20ec231e391e5f", "message": "add major mgmt libs", "committedDate": "2020-03-26T08:45:23Z", "type": "commit"}, {"oid": "118ce203682b38e208cc705b48cbfb77a195bdac", "url": "https://github.com/Azure/azure-sdk-for-java/commit/118ce203682b38e208cc705b48cbfb77a195bdac", "message": "misc files", "committedDate": "2020-03-26T08:48:32Z", "type": "commit"}, {"oid": "432ed8b2aa5b5c0eb681471aa436af390e429c34", "url": "https://github.com/Azure/azure-sdk-for-java/commit/432ed8b2aa5b5c0eb681471aa436af390e429c34", "message": "rename azure-samples to samples", "committedDate": "2020-03-26T08:50:21Z", "type": "commit"}, {"oid": "6f28f69233ebad2b9662c0f9370f3e7747e18cf5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6f28f69233ebad2b9662c0f9370f3e7747e18cf5", "message": "adapt pom", "committedDate": "2020-03-26T08:52:52Z", "type": "commit"}, {"oid": "0fc87975e4ea2be91870fa4a4c68676e80926dc8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0fc87975e4ea2be91870fa4a4c68676e80926dc8", "message": "fix folder", "committedDate": "2020-03-26T08:55:25Z", "type": "commit"}, {"oid": "6ff2198e91a13ca54db5d406b2d49f95e424d202", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6ff2198e91a13ca54db5d406b2d49f95e424d202", "message": "exclude mgmt from client/data", "committedDate": "2020-03-26T09:30:53Z", "type": "commit"}, {"oid": "12a8967ef6754de79ffdddd92762c1b0b57ca827", "url": "https://github.com/Azure/azure-sdk-for-java/commit/12a8967ef6754de79ffdddd92762c1b0b57ca827", "message": "refresh from vnext", "committedDate": "2020-03-27T01:52:17Z", "type": "commit"}, {"oid": "51723dd245ff7337e88fa7ac671136bfcb8fc515", "url": "https://github.com/Azure/azure-sdk-for-java/commit/51723dd245ff7337e88fa7ac671136bfcb8fc515", "message": "refresh from vnext", "committedDate": "2020-03-27T02:06:34Z", "type": "commit"}, {"oid": "50a0cb48eebc399673c518987dabc7db84b30236", "url": "https://github.com/Azure/azure-sdk-for-java/commit/50a0cb48eebc399673c518987dabc7db84b30236", "message": "update parent pom location", "committedDate": "2020-03-27T04:24:03Z", "type": "commit"}, {"oid": "c965873d599a45bdde65627a0d6455d4f826949e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c965873d599a45bdde65627a0d6455d4f826949e", "message": "refresh from vnext", "committedDate": "2020-03-27T05:26:19Z", "type": "commit"}, {"oid": "ec533e70ed68f6103b027ccc27dc65a64fff2332", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ec533e70ed68f6103b027ccc27dc65a64fff2332", "message": "remove readme", "committedDate": "2020-03-27T05:47:46Z", "type": "commit"}, {"oid": "84e2690298cfc0681c513cdf2f0f75b0c013e9aa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/84e2690298cfc0681c513cdf2f0f75b0c013e9aa", "message": "initial support PagedList", "committedDate": "2020-03-27T11:23:35Z", "type": "commit"}, {"oid": "50b14a5e5fc49dff6f016c74fa322f132875c767", "url": "https://github.com/Azure/azure-sdk-for-java/commit/50b14a5e5fc49dff6f016c74fa322f132875c767", "message": "Merge branch 'master' into support_paged_list", "committedDate": "2020-03-30T01:29:37Z", "type": "commit"}, {"oid": "133721a4de6210edbaa7a129bd88a0a5dbe8d844", "url": "https://github.com/Azure/azure-sdk-for-java/commit/133721a4de6210edbaa7a129bd88a0a5dbe8d844", "message": "Merge branch 'master' into support_paged_list", "committedDate": "2020-03-30T02:30:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5Nzk1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9665#discussion_r399897953", "bodyText": "Annotate as deprecated.", "author": "weidongxu-microsoft", "createdAt": "2020-03-30T02:33:22Z", "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/PagedList.java", "diffHunk": "@@ -0,0 +1,364 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management.resources.fluentcore.utils;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * Defines a list response from a paging operation. The pages are\n+ * lazy initialized when an instance of this class is iterated.\n+ *\n+ * @deprecated Use {@link PagedIterable} instead.\n+ *\n+ * @param <E> the element type.\n+ */\n+@Deprecated", "originalCommit": "133721a4de6210edbaa7a129bd88a0a5dbe8d844", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxOTY1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9665#discussion_r399919657", "bodyText": "what's the deprecation mean? Should v2 still use PagedList or should not?", "author": "yungezz", "createdAt": "2020-03-30T04:22:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5Nzk1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a16fc22b201120949839b04b92e6e3a5d023a34c", "chunk": "diff --git a/sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/PagedList.java b/sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/PagedList.java\nindex 8e3ea53e8a7..43c3275ed5a 100644\n--- a/sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/PagedList.java\n+++ b/sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/PagedList.java\n\n@@ -27,11 +27,13 @@ import java.util.Objects;\n @Deprecated\n public final class PagedList<E> implements List<E> {\n \n+    // The invariant is that before / after read-only method, items + pagedResponseIterator is the complete pagedIterable.\n+\n     /** The items retrieved. */\n     private final List<E> items;\n \n     /** The paged response iterator for not retrieved items. */\n-    private final Iterator<PagedResponse<E>> pagedResponseIterator;\n+    private Iterator<PagedResponse<E>> pagedResponseIterator;\n \n     /**\n      * Creates an instance of PagedList.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5ODAzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9665#discussion_r399898037", "bodyText": "Expect user to create it via the standard PagedIterable.", "author": "weidongxu-microsoft", "createdAt": "2020-03-30T02:33:43Z", "path": "sdk/resources/mgmt/src/test/java/com/azure/management/resources/fluentcore/utils/PagedListTests.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management.resources.fluentcore.utils;\n+\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponseBase;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class PagedListTests {\n+\n+    private PagedList<Integer> list;\n+\n+    @BeforeEach\n+    public void setupList() {\n+        final int pageSize = 10;\n+        final int lastFullPageInt = 50;\n+        final int lastPageSize = 5;\n+\n+        final PagedFlux<Integer> mockedPagedFlux = new PagedFlux<>(\n+            // 1st page 0-9\n+            () -> Mono.just(new PagedResponseBase<>(null, 200, null,\n+                IntStream.range(0, pageSize).boxed().collect(Collectors.toList()), Integer.toString(pageSize),\n+                (Object)null)),\n+            // 2nd page 10-19\n+            // 3rd page 20-29\n+            // ...\n+            // last page 50-55\n+            (continuationToken) -> {\n+                int nextInt = Integer.parseInt(continuationToken);\n+                String nextToken = Integer.toString(nextInt + pageSize);\n+                if (nextInt < lastFullPageInt) {\n+                    return Mono.just(new PagedResponseBase<>(null, 200, null,\n+                        IntStream.range(nextInt, nextInt + pageSize).boxed().collect(Collectors.toList()), nextToken,\n+                        (Object) null));\n+                } else {\n+                    return Mono.just(new PagedResponseBase<>(null, 200, null,\n+                        IntStream.range(nextInt, nextInt + lastPageSize).boxed().collect(Collectors.toList()), null,\n+                        (Object) null));\n+                }\n+            }\n+        );\n+        final PagedIterable<Integer> pagedIterable = new PagedIterable<>(mockedPagedFlux);\n+\n+        list = new PagedList<>(pagedIterable);", "originalCommit": "133721a4de6210edbaa7a129bd88a0a5dbe8d844", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a16fc22b201120949839b04b92e6e3a5d023a34c", "chunk": "diff --git a/sdk/resources/mgmt/src/test/java/com/azure/management/resources/fluentcore/utils/PagedListTests.java b/sdk/resources/mgmt/src/test/java/com/azure/management/resources/fluentcore/utils/PagedListTests.java\nindex e999b14def7..5c79ae47764 100644\n--- a/sdk/resources/mgmt/src/test/java/com/azure/management/resources/fluentcore/utils/PagedListTests.java\n+++ b/sdk/resources/mgmt/src/test/java/com/azure/management/resources/fluentcore/utils/PagedListTests.java\n\n@@ -11,6 +11,10 @@ import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import reactor.core.publisher.Mono;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ListIterator;\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n \n"}}, {"oid": "a16fc22b201120949839b04b92e6e3a5d023a34c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a16fc22b201120949839b04b92e6e3a5d023a34c", "message": "add unit tests", "committedDate": "2020-03-30T02:51:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMDI4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9665#discussion_r399920283", "bodyText": "seems cachedpage removed, any concern on performance etc when original cachedpage adding? Or we may revisit it later when there's complain", "author": "yungezz", "createdAt": "2020-03-30T04:25:18Z", "path": "sdk/resources/mgmt/src/main/java/com/azure/management/resources/fluentcore/utils/PagedList.java", "diffHunk": "@@ -0,0 +1,367 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.management.resources.fluentcore.utils;\n+\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.PagedResponse;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+\n+/**\n+ * Defines a list response from a paging operation. The pages are\n+ * lazy initialized when an instance of this class is iterated.\n+ *\n+ * @deprecated Use {@link PagedIterable} instead.\n+ *\n+ * @param <E> the element type.\n+ */\n+@Deprecated\n+public final class PagedList<E> implements List<E> {\n+\n+    // The invariant is that before / after read-only method, items + pagedResponseIterator is the complete pagedIterable.\n+\n+    /** The items retrieved. */\n+    private final List<E> items;\n+\n+    /** The paged response iterator for not retrieved items. */\n+    private Iterator<PagedResponse<E>> pagedResponseIterator;\n+\n+    /**\n+     * Creates an instance of PagedList.\n+     */\n+    public PagedList() {\n+        items = new ArrayList<>();\n+        pagedResponseIterator = Collections.emptyIterator();\n+    }\n+\n+    /**\n+     * Creates an instance of PagedList from a {@link PagedIterable}.\n+     *\n+     * @param pagedIterable the {@link PagedIterable} object.\n+     */\n+    public PagedList(PagedIterable<E> pagedIterable) {\n+        items = new ArrayList<>();\n+        Objects.requireNonNull(pagedIterable, \"'pagedIterable' cannot be null.\");\n+        this.pagedResponseIterator = pagedIterable.iterableByPage().iterator();\n+    }\n+\n+    /**\n+     * If there are more pages available.\n+     *\n+     * @return true if there are more pages to load. False otherwise.\n+     */\n+    protected boolean hasNextPage() {\n+        return pagedResponseIterator.hasNext();\n+    }\n+\n+    /**\n+     * Loads a page from next page link.\n+     * The exceptions are wrapped into Java Runtime exceptions.\n+     */\n+    protected void loadNextPage() {\n+        this.items.addAll(pagedResponseIterator.next().getValue());", "originalCommit": "a16fc22b201120949839b04b92e6e3a5d023a34c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMDgxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9665#discussion_r399920819", "bodyText": "v2 should not use PagedList. This class is provided since return type in v2 is PagedIterable, which is not compatibly with v1 PagedList.", "author": "weidongxu-microsoft", "createdAt": "2020-03-30T04:27:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMDI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMDk4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9665#discussion_r399920985", "bodyText": "PagedIterable/PagedFlux is already doing what need to be done on paged response. This class is only a wrapper to provide interface compatible with v1.", "author": "weidongxu-microsoft", "createdAt": "2020-03-30T04:28:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMDI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMTI2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9665#discussion_r399921267", "bodyText": "With this, user now have 2 choice when migrate.\n\nUse PagedIterable, and refactor any code that handling it.\nUse PagedList, use it to wrap PagedIterable. Find time later to do all refactor needed in 1.", "author": "weidongxu-microsoft", "createdAt": "2020-03-30T04:30:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMDI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1NTQxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9665#discussion_r401455413", "bodyText": "thanks for clarification. Then in our sample or migration guide, pls use PagedIterable as right and long term way for paging operation.", "author": "yungezz", "createdAt": "2020-04-01T08:51:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMDI4Mw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "90426ff03ef005334b4190349681f11b5b193fdc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/90426ff03ef005334b4190349681f11b5b193fdc", "message": "t Merge branch 'master' into support_paged_list", "committedDate": "2020-04-01T08:55:03Z", "type": "commit"}]}