{"pr_number": 16319, "pr_title": "Binarydata api update - Default json serializer", "pr_createdAt": "2020-10-14T22:19:15Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/16319", "timeline": [{"oid": "d09de6c5b520215e74cfbaea4fe1c79047d3ded5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d09de6c5b520215e74cfbaea4fe1c79047d3ded5", "message": "Adding default json serializer", "committedDate": "2020-10-14T20:43:47Z", "type": "commit"}, {"oid": "138b2a58dcf17197dac507d4161ecdafddcca336", "url": "https://github.com/Azure/azure-sdk-for-java/commit/138b2a58dcf17197dac507d4161ecdafddcca336", "message": "Adding default json serializer", "committedDate": "2020-10-14T22:09:05Z", "type": "commit"}, {"oid": "a70876a564977f21c703c828bceb521de127bede", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a70876a564977f21c703c828bceb521de127bede", "message": "Adding default json serializer", "committedDate": "2020-10-14T22:14:53Z", "type": "commit"}, {"oid": "de98cc4e7fea35c0600eb419afbd63870f9f717f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/de98cc4e7fea35c0600eb419afbd63870f9f717f", "message": "Changed to use JsonSerializerProviders", "committedDate": "2020-10-14T22:41:24Z", "type": "commit"}, {"oid": "5047c7a0eed0ece8f252045b263ede3dd6e022f7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5047c7a0eed0ece8f252045b263ede3dd6e022f7", "message": "Added java doc", "committedDate": "2020-10-14T22:48:07Z", "type": "commit"}, {"oid": "ed4edd8d71ef0421d55d4522f7540f492cc285e3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ed4edd8d71ef0421d55d4522f7540f492cc285e3", "message": "Added changelog", "committedDate": "2020-10-14T22:50:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA0NDAyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r505044029", "bodyText": "@JonathanGiles, @srnagar, I'd like to see us create a guideline around the default serializer to be used when one isn't passed. In some locations we use JsonSerializer/ObjectSerializer and in others we default to using JacksonAdapter. I have a feeling we may need to go down the route of always falling back to JacksonAdapter, except with serialization formats we didn't previously support such as Avro and Protobuf, as using JsonSerializerProviders.createInstance may result in customer applications throwing an exception when they previously didn't. This restriction may only apply to logic in azure-core which could accept an ObjectSerializer/JsonSerializer as it cannot take a dependency on the implementation libraries.", "author": "alzimmermsft", "createdAt": "2020-10-14T22:56:54Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,6 +187,25 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using the provided {@link JsonSerializer}. This will\n+     * require the client to configure Json serializer in classpath.\n+     *\n+     * @param data The {@link Object} which needs to be serialized into bytes.\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws IllegalStateException If cannot find any JSON serializer provider on the classpath.\n+     * @return {@link BinaryData} representing binary data. Or {@code null} if it fails to serialize the data.\n+     *\n+     * @see JsonSerializer\n+     */\n+    public static BinaryData fromObject(Object data) {\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+\n+        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+        JsonSerializerProviders.createInstance().serialize(outputStream, data);", "originalCommit": "ed4edd8d71ef0421d55d4522f7540f492cc285e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA0NjQ0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r505046444", "bodyText": "Possible guidance:\nIf azure-core or retrofitting a library, either we cannot accept a null serializer type or we default to JacksonAdapter. Reasoning is that we may introduce exceptions into a customer's application that weren't previously being thrown.\nIf a new library, leverage JsonSerializerProviders.createInstance(), and other serializer providers that come in the future, as the default and include a dependency for the default implementation. Reasoning is that it is a new library and should adhere to the best practices for allowing customer configuration of serialization.", "author": "alzimmermsft", "createdAt": "2020-10-14T23:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA0NDAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgyMDQ5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r505820492", "bodyText": "Set up a meeting for next week and we can discuss this and work on some guidelines text.", "author": "JonathanGiles", "createdAt": "2020-10-15T20:29:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA0NDAyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "af836cecf9b842bcc144a5e5914f9f76b8595e82", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 6c761950a91..121a835c66a 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -188,13 +161,13 @@ public final class  BinaryData {\n     }\n \n     /**\n-     * Serialize the given {@link Object} into {@link BinaryData} using the provided {@link JsonSerializer}. This will\n-     * require the client to configure Json serializer in classpath.\n+     * Serialize the given {@link Object} into {@link BinaryData} using json serializer which is available in classpath.\n+     * The serializer must implement {@link JsonSerializer} interface.\n      *\n      * @param data The {@link Object} which needs to be serialized into bytes.\n      * @throws NullPointerException if {@code data} is null.\n-     * @throws IllegalStateException If cannot find any JSON serializer provider on the classpath.\n-     * @return {@link BinaryData} representing binary data. Or {@code null} if it fails to serialize the data.\n+     * @throws IllegalStateException If a {@link JsonSerializer} cannot be found on the classpath.\n+     * @return {@link BinaryData} representing binary data.\n      *\n      * @see JsonSerializer\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA0Njk2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r505046961", "bodyText": "This API doesn't accept a JsonSerializer.", "author": "alzimmermsft", "createdAt": "2020-10-14T23:01:43Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,6 +187,25 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using the provided {@link JsonSerializer}. This will", "originalCommit": "ed4edd8d71ef0421d55d4522f7540f492cc285e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af836cecf9b842bcc144a5e5914f9f76b8595e82", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 6c761950a91..121a835c66a 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -188,13 +161,13 @@ public final class  BinaryData {\n     }\n \n     /**\n-     * Serialize the given {@link Object} into {@link BinaryData} using the provided {@link JsonSerializer}. This will\n-     * require the client to configure Json serializer in classpath.\n+     * Serialize the given {@link Object} into {@link BinaryData} using json serializer which is available in classpath.\n+     * The serializer must implement {@link JsonSerializer} interface.\n      *\n      * @param data The {@link Object} which needs to be serialized into bytes.\n      * @throws NullPointerException if {@code data} is null.\n-     * @throws IllegalStateException If cannot find any JSON serializer provider on the classpath.\n-     * @return {@link BinaryData} representing binary data. Or {@code null} if it fails to serialize the data.\n+     * @throws IllegalStateException If a {@link JsonSerializer} cannot be found on the classpath.\n+     * @return {@link BinaryData} representing binary data.\n      *\n      * @see JsonSerializer\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA0ODQxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r505048416", "bodyText": "In the case of a null object do we want to throw or return an empty BinaryData? Do we want to force the caller to handle null checking or return them an object which represents no data.", "author": "alzimmermsft", "createdAt": "2020-10-14T23:03:53Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,6 +187,25 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using the provided {@link JsonSerializer}. This will\n+     * require the client to configure Json serializer in classpath.\n+     *\n+     * @param data The {@link Object} which needs to be serialized into bytes.\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws IllegalStateException If cannot find any JSON serializer provider on the classpath.\n+     * @return {@link BinaryData} representing binary data. Or {@code null} if it fails to serialize the data.\n+     *\n+     * @see JsonSerializer\n+     */\n+    public static BinaryData fromObject(Object data) {\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");", "originalCommit": "ed4edd8d71ef0421d55d4522f7540f492cc285e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af836cecf9b842bcc144a5e5914f9f76b8595e82", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 6c761950a91..121a835c66a 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -188,13 +161,13 @@ public final class  BinaryData {\n     }\n \n     /**\n-     * Serialize the given {@link Object} into {@link BinaryData} using the provided {@link JsonSerializer}. This will\n-     * require the client to configure Json serializer in classpath.\n+     * Serialize the given {@link Object} into {@link BinaryData} using json serializer which is available in classpath.\n+     * The serializer must implement {@link JsonSerializer} interface.\n      *\n      * @param data The {@link Object} which needs to be serialized into bytes.\n      * @throws NullPointerException if {@code data} is null.\n-     * @throws IllegalStateException If cannot find any JSON serializer provider on the classpath.\n-     * @return {@link BinaryData} representing binary data. Or {@code null} if it fails to serialize the data.\n+     * @throws IllegalStateException If a {@link JsonSerializer} cannot be found on the classpath.\n+     * @return {@link BinaryData} representing binary data.\n      *\n      * @see JsonSerializer\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA0OTg1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r505049857", "bodyText": "Do we actually return null if we fail to serialize the object?", "author": "alzimmermsft", "createdAt": "2020-10-14T23:05:52Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,6 +187,25 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using the provided {@link JsonSerializer}. This will\n+     * require the client to configure Json serializer in classpath.\n+     *\n+     * @param data The {@link Object} which needs to be serialized into bytes.\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws IllegalStateException If cannot find any JSON serializer provider on the classpath.\n+     * @return {@link BinaryData} representing binary data. Or {@code null} if it fails to serialize the data.", "originalCommit": "ed4edd8d71ef0421d55d4522f7540f492cc285e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af836cecf9b842bcc144a5e5914f9f76b8595e82", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 6c761950a91..121a835c66a 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -188,13 +161,13 @@ public final class  BinaryData {\n     }\n \n     /**\n-     * Serialize the given {@link Object} into {@link BinaryData} using the provided {@link JsonSerializer}. This will\n-     * require the client to configure Json serializer in classpath.\n+     * Serialize the given {@link Object} into {@link BinaryData} using json serializer which is available in classpath.\n+     * The serializer must implement {@link JsonSerializer} interface.\n      *\n      * @param data The {@link Object} which needs to be serialized into bytes.\n      * @throws NullPointerException if {@code data} is null.\n-     * @throws IllegalStateException If cannot find any JSON serializer provider on the classpath.\n-     * @return {@link BinaryData} representing binary data. Or {@code null} if it fails to serialize the data.\n+     * @throws IllegalStateException If a {@link JsonSerializer} cannot be found on the classpath.\n+     * @return {@link BinaryData} representing binary data.\n      *\n      * @see JsonSerializer\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA1MDEzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r505050139", "bodyText": "nit: Casing\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws NullPointerException if {@code data} is null.\n          \n          \n            \n                 * @throws NullPointerException If {@code data} is null.", "author": "alzimmermsft", "createdAt": "2020-10-14T23:06:18Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,6 +187,25 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using the provided {@link JsonSerializer}. This will\n+     * require the client to configure Json serializer in classpath.\n+     *\n+     * @param data The {@link Object} which needs to be serialized into bytes.\n+     * @throws NullPointerException if {@code data} is null.", "originalCommit": "ed4edd8d71ef0421d55d4522f7540f492cc285e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af836cecf9b842bcc144a5e5914f9f76b8595e82", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 6c761950a91..121a835c66a 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -188,13 +161,13 @@ public final class  BinaryData {\n     }\n \n     /**\n-     * Serialize the given {@link Object} into {@link BinaryData} using the provided {@link JsonSerializer}. This will\n-     * require the client to configure Json serializer in classpath.\n+     * Serialize the given {@link Object} into {@link BinaryData} using json serializer which is available in classpath.\n+     * The serializer must implement {@link JsonSerializer} interface.\n      *\n      * @param data The {@link Object} which needs to be serialized into bytes.\n      * @throws NullPointerException if {@code data} is null.\n-     * @throws IllegalStateException If cannot find any JSON serializer provider on the classpath.\n-     * @return {@link BinaryData} representing binary data. Or {@code null} if it fails to serialize the data.\n+     * @throws IllegalStateException If a {@link JsonSerializer} cannot be found on the classpath.\n+     * @return {@link BinaryData} representing binary data.\n      *\n      * @see JsonSerializer\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA1MDgwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r505050807", "bodyText": "nit: Wording\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws IllegalStateException If cannot find any JSON serializer provider on the classpath.\n          \n          \n            \n                 * @throws IllegalStateException If a {@link JsonSerializer} cannot be found on the classpath.", "author": "alzimmermsft", "createdAt": "2020-10-14T23:07:12Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,6 +187,25 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using the provided {@link JsonSerializer}. This will\n+     * require the client to configure Json serializer in classpath.\n+     *\n+     * @param data The {@link Object} which needs to be serialized into bytes.\n+     * @throws NullPointerException if {@code data} is null.\n+     * @throws IllegalStateException If cannot find any JSON serializer provider on the classpath.", "originalCommit": "ed4edd8d71ef0421d55d4522f7540f492cc285e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af836cecf9b842bcc144a5e5914f9f76b8595e82", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 6c761950a91..121a835c66a 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -188,13 +161,13 @@ public final class  BinaryData {\n     }\n \n     /**\n-     * Serialize the given {@link Object} into {@link BinaryData} using the provided {@link JsonSerializer}. This will\n-     * require the client to configure Json serializer in classpath.\n+     * Serialize the given {@link Object} into {@link BinaryData} using json serializer which is available in classpath.\n+     * The serializer must implement {@link JsonSerializer} interface.\n      *\n      * @param data The {@link Object} which needs to be serialized into bytes.\n      * @throws NullPointerException if {@code data} is null.\n-     * @throws IllegalStateException If cannot find any JSON serializer provider on the classpath.\n-     * @return {@link BinaryData} representing binary data. Or {@code null} if it fails to serialize the data.\n+     * @throws IllegalStateException If a {@link JsonSerializer} cannot be found on the classpath.\n+     * @return {@link BinaryData} representing binary data.\n      *\n      * @see JsonSerializer\n      */\n"}}, {"oid": "af836cecf9b842bcc144a5e5914f9f76b8595e82", "url": "https://github.com/Azure/azure-sdk-for-java/commit/af836cecf9b842bcc144a5e5914f9f76b8595e82", "message": "Api changes based on review comment", "committedDate": "2020-10-15T05:39:04Z", "type": "commit"}, {"oid": "92a611b08523c646c028430e9f7f722a5fe14d93", "url": "https://github.com/Azure/azure-sdk-for-java/commit/92a611b08523c646c028430e9f7f722a5fe14d93", "message": "incorporated review comments", "committedDate": "2020-10-19T16:02:14Z", "type": "commit"}, {"oid": "5bcd6787a97803413015fc009353ba277fb50b63", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5bcd6787a97803413015fc009353ba277fb50b63", "message": "Making JsonSerializer singleton", "committedDate": "2020-10-19T21:09:23Z", "type": "commit"}, {"oid": "7ee660aff0bb5cb8372868414127caa11092595b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7ee660aff0bb5cb8372868414127caa11092595b", "message": "Making JsonSerializer singleton", "committedDate": "2020-10-19T21:13:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MTgxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508071819", "bodyText": "These could be made final and instantiated in a static constructor", "author": "alzimmermsft", "createdAt": "2020-10-19T21:25:30Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -47,15 +48,20 @@\n  */\n public final class  BinaryData {\n     private static final ClientLogger LOGGER = new ClientLogger(BinaryData.class);\n+\n+    private static JsonSerializer defaultJsonSerializer;\n+    private static byte[] EMPTY_DATA = new byte[0];", "originalCommit": "7ee660aff0bb5cb8372868414127caa11092595b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d5e3f5a503dc94f2f6047dfea255d3bc065f04c", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex b15ad9df37e..ea5f65d53bc 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -48,9 +48,9 @@ import java.util.Objects;\n  */\n public final class  BinaryData {\n     private static final ClientLogger LOGGER = new ClientLogger(BinaryData.class);\n+    private static final byte[] EMPTY_DATA = new byte[0];\n \n     private static JsonSerializer defaultJsonSerializer;\n-    private static byte[] EMPTY_DATA = new byte[0];\n     private final byte[] data;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MjA5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508072096", "bodyText": "The property name may not be complying with coding styles.", "author": "alzimmermsft", "createdAt": "2020-10-19T21:26:05Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -47,15 +48,20 @@\n  */\n public final class  BinaryData {\n     private static final ClientLogger LOGGER = new ClientLogger(BinaryData.class);\n+\n+    private static JsonSerializer defaultJsonSerializer;", "originalCommit": "7ee660aff0bb5cb8372868414127caa11092595b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwNTIwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r509105200", "bodyText": "it does not complain.", "author": "hemanttanwar", "createdAt": "2020-10-21T08:53:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MjA5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6d5e3f5a503dc94f2f6047dfea255d3bc065f04c", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex b15ad9df37e..ea5f65d53bc 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -48,9 +48,9 @@ import java.util.Objects;\n  */\n public final class  BinaryData {\n     private static final ClientLogger LOGGER = new ClientLogger(BinaryData.class);\n+    private static final byte[] EMPTY_DATA = new byte[0];\n \n     private static JsonSerializer defaultJsonSerializer;\n-    private static byte[] EMPTY_DATA = new byte[0];\n     private final byte[] data;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MjM5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508072394", "bodyText": "May want to check CoreUtils.isNullOrEmpty, this may end up copying a 0 length array.", "author": "alzimmermsft", "createdAt": "2020-10-19T21:26:41Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -47,15 +48,20 @@\n  */\n public final class  BinaryData {\n     private static final ClientLogger LOGGER = new ClientLogger(BinaryData.class);\n+\n+    private static JsonSerializer defaultJsonSerializer;\n+    private static byte[] EMPTY_DATA = new byte[0];\n     private final byte[] data;\n \n     /**\n-     * Create instance of {@link BinaryData} given the data.\n+     * Create instance of {@link BinaryData} given the data. If {@code null} value is provided , it will be converted\n+     * into empty byte array.\n      * @param data to represent as bytes.\n-     * @throws NullPointerException If {@code data} is null.\n      */\n     BinaryData(byte[] data) {\n-        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        if (Objects.isNull(data)) {", "originalCommit": "7ee660aff0bb5cb8372868414127caa11092595b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwNzgxMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508107812", "bodyText": "we can not use CoreUtils for byte array. But I have added length check.", "author": "hemanttanwar", "createdAt": "2020-10-19T22:51:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MjM5NA=="}], "type": "inlineReview", "revised_code": {"commit": "6d5e3f5a503dc94f2f6047dfea255d3bc065f04c", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex b15ad9df37e..ea5f65d53bc 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -48,9 +48,9 @@ import java.util.Objects;\n  */\n public final class  BinaryData {\n     private static final ClientLogger LOGGER = new ClientLogger(BinaryData.class);\n+    private static final byte[] EMPTY_DATA = new byte[0];\n \n     private static JsonSerializer defaultJsonSerializer;\n-    private static byte[] EMPTY_DATA = new byte[0];\n     private final byte[] data;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MjY2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508072663", "bodyText": "What does getBytes return for a zero length string?", "author": "alzimmermsft", "createdAt": "2020-10-19T21:27:17Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -144,39 +141,26 @@ public static BinaryData fromStream(InputStream inputStream) {\n             .flatMap(bytes -> Mono.just(fromBytes(bytes)));\n     }\n \n-    /**\n-     * Create {@link BinaryData} instance with given data and character set.\n-     *\n-     * <p><strong>Create an instance from String</strong></p>\n-     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n-     *\n-     * @param data to use.\n-     * @param charSet to use.\n-     * @throws NullPointerException if {@code inputStream} is null.\n-     * @return {@link BinaryData} representing the binary data.\n-     */\n-    public static BinaryData fromString(String data, Charset charSet) {\n-        Objects.requireNonNull(data, \"'data' cannot be null.\");\n-\n-        return new BinaryData(data.getBytes(charSet));\n-    }\n-\n     /**\n      * Create {@link BinaryData} instance with given data. The {@link String} is converted into bytes  using\n-     * {@link StandardCharsets#UTF_8} character set.\n+     * {@link StandardCharsets#UTF_8} character set. If {@code null} data is provided , it will be converted into\n+     * empty byte array.\n      *\n      * @param data to use.\n-     * @throws NullPointerException if {@code inputStream} is null.\n      * @return {@link BinaryData} representing binary data.\n      */\n     public static BinaryData fromString(String data) {\n-        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        if (Objects.isNull(data)) {\n+            return new BinaryData(EMPTY_DATA);\n+        } else {\n+            return new BinaryData(data.getBytes(StandardCharsets.UTF_8));", "originalCommit": "7ee660aff0bb5cb8372868414127caa11092595b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODExMzM0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508113343", "bodyText": "a zero length array. I am checking for 0 length also here.", "author": "hemanttanwar", "createdAt": "2020-10-19T23:08:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MjY2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6d5e3f5a503dc94f2f6047dfea255d3bc065f04c", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex b15ad9df37e..ea5f65d53bc 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -150,7 +150,7 @@ public final class  BinaryData {\n      * @return {@link BinaryData} representing binary data.\n      */\n     public static BinaryData fromString(String data) {\n-        if (Objects.isNull(data)) {\n+        if (Objects.isNull(data) || data.length() == 0) {\n             return new BinaryData(EMPTY_DATA);\n         } else {\n             return new BinaryData(data.getBytes(StandardCharsets.UTF_8));\n"}}, {"oid": "6d5e3f5a503dc94f2f6047dfea255d3bc065f04c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6d5e3f5a503dc94f2f6047dfea255d3bc065f04c", "message": "Review comments", "committedDate": "2020-10-19T23:08:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE1NDgxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508154818", "bodyText": "new up a static final instance of this BinaryData so that you don't need to do it every time, and just reuse that.", "author": "JonathanGiles", "createdAt": "2020-10-20T01:29:46Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -144,39 +141,26 @@ public static BinaryData fromStream(InputStream inputStream) {\n             .flatMap(bytes -> Mono.just(fromBytes(bytes)));\n     }\n \n-    /**\n-     * Create {@link BinaryData} instance with given data and character set.\n-     *\n-     * <p><strong>Create an instance from String</strong></p>\n-     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n-     *\n-     * @param data to use.\n-     * @param charSet to use.\n-     * @throws NullPointerException if {@code inputStream} is null.\n-     * @return {@link BinaryData} representing the binary data.\n-     */\n-    public static BinaryData fromString(String data, Charset charSet) {\n-        Objects.requireNonNull(data, \"'data' cannot be null.\");\n-\n-        return new BinaryData(data.getBytes(charSet));\n-    }\n-\n     /**\n      * Create {@link BinaryData} instance with given data. The {@link String} is converted into bytes  using\n-     * {@link StandardCharsets#UTF_8} character set.\n+     * {@link StandardCharsets#UTF_8} character set. If {@code null} data is provided , it will be converted into\n+     * empty byte array.\n      *\n      * @param data to use.\n-     * @throws NullPointerException if {@code inputStream} is null.\n      * @return {@link BinaryData} representing binary data.\n      */\n     public static BinaryData fromString(String data) {\n-        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        if (Objects.isNull(data) || data.length() == 0) {\n+            return new BinaryData(EMPTY_DATA);", "originalCommit": "6d5e3f5a503dc94f2f6047dfea255d3bc065f04c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "62e41b03165380e7eee83c8507e79797e3062fc8", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex ea5f65d53bc..cc42fb9e20c 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -151,7 +167,7 @@ public final class  BinaryData {\n      */\n     public static BinaryData fromString(String data) {\n         if (Objects.isNull(data) || data.length() == 0) {\n-            return new BinaryData(EMPTY_DATA);\n+            return EMPTY_DATA;\n         } else {\n             return new BinaryData(data.getBytes(StandardCharsets.UTF_8));\n         }\n"}}, {"oid": "689fb25cd9f0d0aab7013af01d2121c45be9cff6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/689fb25cd9f0d0aab7013af01d2121c45be9cff6", "message": "review comments", "committedDate": "2020-10-20T06:13:21Z", "type": "commit"}, {"oid": "62e41b03165380e7eee83c8507e79797e3062fc8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/62e41b03165380e7eee83c8507e79797e3062fc8", "message": "Taking review comment into consideration.", "committedDate": "2020-10-20T22:35:46Z", "type": "commit"}, {"oid": "8b56472675c706723afcf725199a8127e1f618b1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8b56472675c706723afcf725199a8127e1f618b1", "message": "Lazy Serialization for json serializer", "committedDate": "2020-10-20T23:12:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMDI4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508900289", "bodyText": "I don't think we need to call out how we store data internally.", "author": "alzimmermsft", "createdAt": "2020-10-20T23:34:07Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -18,18 +20,27 @@\n import java.io.InputStream;\n import java.io.UncheckedIOException;\n import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Objects;\n \n /**\n- * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n- * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n- * array. The data is collected from provided sources and stored into a byte array.\n+ * This class is an abstraction over many different ways that binary data can be represented. The data represented by\n+ * {@link BinaryData} is immutable. The {@link BinaryData} can be created from {@link InputStream}, {@link Flux} of\n+ * {@link ByteBuffer}, {@link String}, {@link Object} and byte array. This type internally store given data in byte\n+ * array.", "originalCommit": "8b56472675c706723afcf725199a8127e1f618b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6dee1b4bc2e84340d7c892779dce012bf2dc522e", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex f44f1620cee..2e2bcdfe231 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -27,8 +27,7 @@ import java.util.Objects;\n /**\n  * This class is an abstraction over many different ways that binary data can be represented. The data represented by\n  * {@link BinaryData} is immutable. The {@link BinaryData} can be created from {@link InputStream}, {@link Flux} of\n- * {@link ByteBuffer}, {@link String}, {@link Object} and byte array. This type internally store given data in byte\n- * array.\n+ * {@link ByteBuffer}, {@link String}, {@link Object}, or byte array.\n  * <p>\n  * It provides a way to serialize {@link Object} into {@link BinaryData} using API\n  * {@link BinaryData#fromObject(Object, ObjectSerializer)} where you can provide your {@link ObjectSerializer}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMDQ4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508900486", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * {@link ByteBuffer}, {@link String}, {@link Object} and byte array. This type internally store given data in byte\n          \n          \n            \n             * {@link ByteBuffer}, {@link String}, {@link Object}, or byte array. This type internally store given data in byte\n          \n      \n    \n    \n  \n\nWe're listing all types we can create BinaryData from, should use an or.", "author": "alzimmermsft", "createdAt": "2020-10-20T23:34:46Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -18,18 +20,27 @@\n import java.io.InputStream;\n import java.io.UncheckedIOException;\n import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Objects;\n \n /**\n- * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n- * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n- * array. The data is collected from provided sources and stored into a byte array.\n+ * This class is an abstraction over many different ways that binary data can be represented. The data represented by\n+ * {@link BinaryData} is immutable. The {@link BinaryData} can be created from {@link InputStream}, {@link Flux} of\n+ * {@link ByteBuffer}, {@link String}, {@link Object} and byte array. This type internally store given data in byte", "originalCommit": "8b56472675c706723afcf725199a8127e1f618b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6dee1b4bc2e84340d7c892779dce012bf2dc522e", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex f44f1620cee..2e2bcdfe231 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -27,8 +27,7 @@ import java.util.Objects;\n /**\n  * This class is an abstraction over many different ways that binary data can be represented. The data represented by\n  * {@link BinaryData} is immutable. The {@link BinaryData} can be created from {@link InputStream}, {@link Flux} of\n- * {@link ByteBuffer}, {@link String}, {@link Object} and byte array. This type internally store given data in byte\n- * array.\n+ * {@link ByteBuffer}, {@link String}, {@link Object}, or byte array.\n  * <p>\n  * It provides a way to serialize {@link Object} into {@link BinaryData} using API\n  * {@link BinaryData#fromObject(Object, ObjectSerializer)} where you can provide your {@link ObjectSerializer}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMDg0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508900841", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Create {@link BinaryData} instance with given data. The {@link String} is converted into bytes  using\n          \n          \n            \n                 * Create {@link BinaryData} instance with given data. The {@link String} is converted into bytes using", "author": "alzimmermsft", "createdAt": "2020-10-20T23:35:51Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -144,39 +159,26 @@ public static BinaryData fromStream(InputStream inputStream) {\n             .flatMap(bytes -> Mono.just(fromBytes(bytes)));\n     }\n \n-    /**\n-     * Create {@link BinaryData} instance with given data and character set.\n-     *\n-     * <p><strong>Create an instance from String</strong></p>\n-     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n-     *\n-     * @param data to use.\n-     * @param charSet to use.\n-     * @throws NullPointerException if {@code inputStream} is null.\n-     * @return {@link BinaryData} representing the binary data.\n-     */\n-    public static BinaryData fromString(String data, Charset charSet) {\n-        Objects.requireNonNull(data, \"'data' cannot be null.\");\n-\n-        return new BinaryData(data.getBytes(charSet));\n-    }\n-\n     /**\n      * Create {@link BinaryData} instance with given data. The {@link String} is converted into bytes  using", "originalCommit": "8b56472675c706723afcf725199a8127e1f618b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6dee1b4bc2e84340d7c892779dce012bf2dc522e", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex f44f1620cee..2e2bcdfe231 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -160,9 +159,9 @@ public final class  BinaryData {\n     }\n \n     /**\n-     * Create {@link BinaryData} instance with given data. The {@link String} is converted into bytes  using\n-     * {@link StandardCharsets#UTF_8} character set. If {@code null} data is provided , it will be converted into\n-     * empty byte array.\n+     * Create {@link BinaryData} instance with given data. The {@link String} is converted into bytes using\n+     * {@link StandardCharsets#UTF_8} character set. If the String is {@code null}, an empty {@link BinaryData} will be\n+     * returned.\n      *\n      * @param data to use.\n      * @return {@link BinaryData} representing binary data.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMTE3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508901173", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * {@link StandardCharsets#UTF_8} character set. If {@code null} data is provided , it will be converted into\n          \n          \n            \n                 * the UTF-8 character set. If {@code null} data is provided , it will be converted into\n          \n      \n    \n    \n  \n\nStandardCharsets#UTF-8 is just an implementation of Charset, don't need to call out implementation handling.", "author": "alzimmermsft", "createdAt": "2020-10-20T23:36:56Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -144,39 +159,26 @@ public static BinaryData fromStream(InputStream inputStream) {\n             .flatMap(bytes -> Mono.just(fromBytes(bytes)));\n     }\n \n-    /**\n-     * Create {@link BinaryData} instance with given data and character set.\n-     *\n-     * <p><strong>Create an instance from String</strong></p>\n-     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n-     *\n-     * @param data to use.\n-     * @param charSet to use.\n-     * @throws NullPointerException if {@code inputStream} is null.\n-     * @return {@link BinaryData} representing the binary data.\n-     */\n-    public static BinaryData fromString(String data, Charset charSet) {\n-        Objects.requireNonNull(data, \"'data' cannot be null.\");\n-\n-        return new BinaryData(data.getBytes(charSet));\n-    }\n-\n     /**\n      * Create {@link BinaryData} instance with given data. The {@link String} is converted into bytes  using\n-     * {@link StandardCharsets#UTF_8} character set.\n+     * {@link StandardCharsets#UTF_8} character set. If {@code null} data is provided , it will be converted into", "originalCommit": "8b56472675c706723afcf725199a8127e1f618b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6dee1b4bc2e84340d7c892779dce012bf2dc522e", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex f44f1620cee..2e2bcdfe231 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -160,9 +159,9 @@ public final class  BinaryData {\n     }\n \n     /**\n-     * Create {@link BinaryData} instance with given data. The {@link String} is converted into bytes  using\n-     * {@link StandardCharsets#UTF_8} character set. If {@code null} data is provided , it will be converted into\n-     * empty byte array.\n+     * Create {@link BinaryData} instance with given data. The {@link String} is converted into bytes using\n+     * {@link StandardCharsets#UTF_8} character set. If the String is {@code null}, an empty {@link BinaryData} will be\n+     * returned.\n      *\n      * @param data to use.\n      * @return {@link BinaryData} representing binary data.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMTMxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508901310", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Create {@link BinaryData} instance with given byte array data. If {@code null} value is provided , it will be\n          \n          \n            \n                 * Create {@link BinaryData} instance with given byte array data. If the byte array is {@code null}, an empty BinaryData will be returned.", "author": "alzimmermsft", "createdAt": "2020-10-20T23:37:23Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -144,39 +159,26 @@ public static BinaryData fromStream(InputStream inputStream) {\n             .flatMap(bytes -> Mono.just(fromBytes(bytes)));\n     }\n \n-    /**\n-     * Create {@link BinaryData} instance with given data and character set.\n-     *\n-     * <p><strong>Create an instance from String</strong></p>\n-     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n-     *\n-     * @param data to use.\n-     * @param charSet to use.\n-     * @throws NullPointerException if {@code inputStream} is null.\n-     * @return {@link BinaryData} representing the binary data.\n-     */\n-    public static BinaryData fromString(String data, Charset charSet) {\n-        Objects.requireNonNull(data, \"'data' cannot be null.\");\n-\n-        return new BinaryData(data.getBytes(charSet));\n-    }\n-\n     /**\n      * Create {@link BinaryData} instance with given data. The {@link String} is converted into bytes  using\n-     * {@link StandardCharsets#UTF_8} character set.\n+     * {@link StandardCharsets#UTF_8} character set. If {@code null} data is provided , it will be converted into\n+     * empty byte array.\n      *\n      * @param data to use.\n-     * @throws NullPointerException if {@code inputStream} is null.\n      * @return {@link BinaryData} representing binary data.\n      */\n     public static BinaryData fromString(String data) {\n-        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        if (Objects.isNull(data) || data.length() == 0) {\n+            return EMPTY_DATA;\n+        } else {\n+            return new BinaryData(data.getBytes(StandardCharsets.UTF_8));\n+        }\n \n-        return new BinaryData(data.getBytes(StandardCharsets.UTF_8));\n     }\n \n     /**\n-     * Create {@link BinaryData} instance with given byte array data.\n+     * Create {@link BinaryData} instance with given byte array data. If {@code null} value is provided , it will be", "originalCommit": "8b56472675c706723afcf725199a8127e1f618b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6dee1b4bc2e84340d7c892779dce012bf2dc522e", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex f44f1620cee..2e2bcdfe231 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -160,9 +159,9 @@ public final class  BinaryData {\n     }\n \n     /**\n-     * Create {@link BinaryData} instance with given data. The {@link String} is converted into bytes  using\n-     * {@link StandardCharsets#UTF_8} character set. If {@code null} data is provided , it will be converted into\n-     * empty byte array.\n+     * Create {@link BinaryData} instance with given data. The {@link String} is converted into bytes using\n+     * {@link StandardCharsets#UTF_8} character set. If the String is {@code null}, an empty {@link BinaryData} will be\n+     * returned.\n      *\n      * @param data to use.\n      * @return {@link BinaryData} representing binary data.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMTczOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508901738", "bodyText": "I think this sentence can be left out. Either an implementation will be in the classpath or an exception will be thrown on how to resolve the issue.", "author": "alzimmermsft", "createdAt": "2020-10-20T23:38:53Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,16 +187,44 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using json serializer which is available in classpath.\n+     * The serializer must implement {@link JsonSerializer} interface. A singleton instance of {@link JsonSerializer}", "originalCommit": "8b56472675c706723afcf725199a8127e1f618b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6dee1b4bc2e84340d7c892779dce012bf2dc522e", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex f44f1620cee..2e2bcdfe231 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -189,12 +188,12 @@ public final class  BinaryData {\n \n     /**\n      * Serialize the given {@link Object} into {@link BinaryData} using json serializer which is available in classpath.\n-     * The serializer must implement {@link JsonSerializer} interface. A singleton instance of {@link JsonSerializer}\n-     * is kept for this class to use. If {@code null} data is provided , it will be converted into empty byte array.\n+     * The serializer on classpath must implement {@link JsonSerializer} interface. If the Object is {@code null}, an\n+     * empty {@link BinaryData} will be returned.\n      *\n      * @param data The {@link Object} which needs to be serialized into bytes.\n      * @throws IllegalStateException If a {@link JsonSerializer} cannot be found on the classpath.\n-     * @return {@link BinaryData} representing binary data.\n+     * @return {@link BinaryData} representing the JSON serialized object.\n      *\n      * @see JsonSerializer\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMjA0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508902047", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * is kept for this class to use. If {@code null} data is provided , it will be converted into empty byte array.\n          \n          \n            \n                 * is kept for this class to use. If the object is {@code null}, an empty BinaryData will be returned.", "author": "alzimmermsft", "createdAt": "2020-10-20T23:39:46Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,16 +187,44 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using json serializer which is available in classpath.\n+     * The serializer must implement {@link JsonSerializer} interface. A singleton instance of {@link JsonSerializer}\n+     * is kept for this class to use. If {@code null} data is provided , it will be converted into empty byte array.", "originalCommit": "8b56472675c706723afcf725199a8127e1f618b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6dee1b4bc2e84340d7c892779dce012bf2dc522e", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex f44f1620cee..2e2bcdfe231 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -189,12 +188,12 @@ public final class  BinaryData {\n \n     /**\n      * Serialize the given {@link Object} into {@link BinaryData} using json serializer which is available in classpath.\n-     * The serializer must implement {@link JsonSerializer} interface. A singleton instance of {@link JsonSerializer}\n-     * is kept for this class to use. If {@code null} data is provided , it will be converted into empty byte array.\n+     * The serializer on classpath must implement {@link JsonSerializer} interface. If the Object is {@code null}, an\n+     * empty {@link BinaryData} will be returned.\n      *\n      * @param data The {@link Object} which needs to be serialized into bytes.\n      * @throws IllegalStateException If a {@link JsonSerializer} cannot be found on the classpath.\n-     * @return {@link BinaryData} representing binary data.\n+     * @return {@link BinaryData} representing the JSON serialized object.\n      *\n      * @see JsonSerializer\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMzYyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508903622", "bodyText": "Given this API is converting into JSON we may want to call it fromObjectJson.", "author": "alzimmermsft", "createdAt": "2020-10-20T23:44:30Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,16 +187,44 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using json serializer which is available in classpath.\n+     * The serializer must implement {@link JsonSerializer} interface. A singleton instance of {@link JsonSerializer}\n+     * is kept for this class to use. If {@code null} data is provided , it will be converted into empty byte array.\n+     *\n+     * @param data The {@link Object} which needs to be serialized into bytes.\n+     * @throws IllegalStateException If a {@link JsonSerializer} cannot be found on the classpath.\n+     * @return {@link BinaryData} representing binary data.\n+     *\n+     * @see JsonSerializer\n+     */\n+    public static BinaryData fromObject(Object data) {", "originalCommit": "8b56472675c706723afcf725199a8127e1f618b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwMzIzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r509103236", "bodyText": "If we change it, we need to sync with .Net. I copied this API name from them.", "author": "hemanttanwar", "createdAt": "2020-10-21T08:50:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwMzYyMg=="}], "type": "inlineReview", "revised_code": {"commit": "6dee1b4bc2e84340d7c892779dce012bf2dc522e", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex f44f1620cee..2e2bcdfe231 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -189,12 +188,12 @@ public final class  BinaryData {\n \n     /**\n      * Serialize the given {@link Object} into {@link BinaryData} using json serializer which is available in classpath.\n-     * The serializer must implement {@link JsonSerializer} interface. A singleton instance of {@link JsonSerializer}\n-     * is kept for this class to use. If {@code null} data is provided , it will be converted into empty byte array.\n+     * The serializer on classpath must implement {@link JsonSerializer} interface. If the Object is {@code null}, an\n+     * empty {@link BinaryData} will be returned.\n      *\n      * @param data The {@link Object} which needs to be serialized into bytes.\n      * @throws IllegalStateException If a {@link JsonSerializer} cannot be found on the classpath.\n-     * @return {@link BinaryData} representing binary data.\n+     * @return {@link BinaryData} representing the JSON serialized object.\n      *\n      * @see JsonSerializer\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwNDAxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508904011", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return {@link BinaryData} representing binary data.\n          \n          \n            \n                 * @return {@link BinaryData} representing the JSON serialized object.", "author": "alzimmermsft", "createdAt": "2020-10-20T23:45:34Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,16 +187,44 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using json serializer which is available in classpath.\n+     * The serializer must implement {@link JsonSerializer} interface. A singleton instance of {@link JsonSerializer}\n+     * is kept for this class to use. If {@code null} data is provided , it will be converted into empty byte array.\n+     *\n+     * @param data The {@link Object} which needs to be serialized into bytes.\n+     * @throws IllegalStateException If a {@link JsonSerializer} cannot be found on the classpath.\n+     * @return {@link BinaryData} representing binary data.", "originalCommit": "8b56472675c706723afcf725199a8127e1f618b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6dee1b4bc2e84340d7c892779dce012bf2dc522e", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex f44f1620cee..2e2bcdfe231 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -189,12 +188,12 @@ public final class  BinaryData {\n \n     /**\n      * Serialize the given {@link Object} into {@link BinaryData} using json serializer which is available in classpath.\n-     * The serializer must implement {@link JsonSerializer} interface. A singleton instance of {@link JsonSerializer}\n-     * is kept for this class to use. If {@code null} data is provided , it will be converted into empty byte array.\n+     * The serializer on classpath must implement {@link JsonSerializer} interface. If the Object is {@code null}, an\n+     * empty {@link BinaryData} will be returned.\n      *\n      * @param data The {@link Object} which needs to be serialized into bytes.\n      * @throws IllegalStateException If a {@link JsonSerializer} cannot be found on the classpath.\n-     * @return {@link BinaryData} representing binary data.\n+     * @return {@link BinaryData} representing the JSON serialized object.\n      *\n      * @see JsonSerializer\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwNDQ3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r508904477", "bodyText": "Should we rename this API to something JSON specific? toJsonObject?\n@JonathanGiles @srnagar", "author": "alzimmermsft", "createdAt": "2020-10-20T23:47:20Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -276,10 +293,55 @@ public String toString(Charset charSet) {\n      * @param clazz representing the type of the Object.\n      * @param serializer to use deserialize data into type.\n      * @param <T> Generic type that the data is deserialized into.\n-     * @throws NullPointerException if {@code clazz} or {@code serializer} is null.\n+     * @throws NullPointerException If {@code clazz} or {@code serializer} is null.\n      * @return The {@link Object} of given type after deserializing the bytes.\n      */\n     public  <T> Mono<T> toObjectAsync(Class<T> clazz, ObjectSerializer serializer) {\n         return Mono.fromCallable(() -> toObject(clazz, serializer));\n     }\n+\n+    /**\n+     * Deserialize the bytes into the {@link Object} of given type by using json serializer which is available in\n+     * classpath. The serializer must implement {@link JsonSerializer} interface. A singleton instance of\n+     * {@link JsonSerializer} is kept for this class to use.\n+     *\n+     * @param clazz representing the type of the Object.\n+     * @param <T> Generic type that the data is deserialized into.\n+     * @return The {@link Object} of given type after deserializing the bytes.\n+     */\n+    public <T> T toObject(Class<T> clazz) {", "originalCommit": "8b56472675c706723afcf725199a8127e1f618b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYyODExNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r509628114", "bodyText": "This might force us, in future,  to add other API for other formats.", "author": "hemanttanwar", "createdAt": "2020-10-21T19:53:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwNDQ3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY1ODc3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r509658776", "bodyText": "JsonObject has a different meaning. So, I think toObject() is fine as we will return a strongly-typed user-defined object here.", "author": "srnagar", "createdAt": "2020-10-21T20:18:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODkwNDQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "dcd54572daf21e3dbf145b9fa1a8291707727756", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex f44f1620cee..8d3fc58b056 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -297,6 +299,10 @@ public final class  BinaryData {\n      * @return The {@link Object} of given type after deserializing the bytes.\n      */\n     public  <T> Mono<T> toObjectAsync(Class<T> clazz, ObjectSerializer serializer) {\n+\n+        if (Objects.isNull(serializer)) {\n+            return monoError(LOGGER, new NullPointerException(\"'serializer' cannot be null.\"));\n+        }\n         return Mono.fromCallable(() -> toObject(clazz, serializer));\n     }\n \n"}}, {"oid": "6dee1b4bc2e84340d7c892779dce012bf2dc522e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6dee1b4bc2e84340d7c892779dce012bf2dc522e", "message": "java doc change", "committedDate": "2020-10-21T08:54:33Z", "type": "commit"}, {"oid": "dcd54572daf21e3dbf145b9fa1a8291707727756", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dcd54572daf21e3dbf145b9fa1a8291707727756", "message": "Updated javadoc", "committedDate": "2020-10-21T16:10:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY2MDcxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r509660710", "bodyText": "The other toObject() overload also checks if the clazz is null. We should add that check here as well.", "author": "srnagar", "createdAt": "2020-10-21T20:19:38Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -276,10 +295,63 @@ public String toString(Charset charSet) {\n      * @param clazz representing the type of the Object.\n      * @param serializer to use deserialize data into type.\n      * @param <T> Generic type that the data is deserialized into.\n-     * @throws NullPointerException if {@code clazz} or {@code serializer} is null.\n+     * @throws NullPointerException If {@code clazz} or {@code serializer} is null.\n      * @return The {@link Object} of given type after deserializing the bytes.\n      */\n     public  <T> Mono<T> toObjectAsync(Class<T> clazz, ObjectSerializer serializer) {\n+\n+        if (Objects.isNull(serializer)) {\n+            return monoError(LOGGER, new NullPointerException(\"'serializer' cannot be null.\"));", "originalCommit": "dcd54572daf21e3dbf145b9fa1a8291707727756", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e12c492017f0253b22f26c0f5745daec01ffdb0", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 8d3fc58b056..72aec1abf9f 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -300,7 +300,9 @@ public final class  BinaryData {\n      */\n     public  <T> Mono<T> toObjectAsync(Class<T> clazz, ObjectSerializer serializer) {\n \n-        if (Objects.isNull(serializer)) {\n+        if (Objects.isNull(clazz)) {\n+            return monoError(LOGGER, new NullPointerException(\"'clazz' cannot be null.\"));\n+        } else if (Objects.isNull(serializer)) {\n             return monoError(LOGGER, new NullPointerException(\"'serializer' cannot be null.\"));\n         }\n         return Mono.fromCallable(() -> toObject(clazz, serializer));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY2MjQxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r509662413", "bodyText": "Is this required?", "author": "srnagar", "createdAt": "2020-10-21T20:21:20Z", "path": "sdk/core/azure-core-experimental/src/samples/java/com/azure/core/experimental/util/BinaryDateJavaDocCodeSnippet.java", "diffHunk": "@@ -191,5 +226,10 @@ public void serialize(OutputStream stream, Object value) {\n             return Mono.fromRunnable(() -> serialize(stream, value));\n         }\n     }\n-}\n \n+    public static void main(String[] args) {\n+\n+        BinaryDateJavaDocCodeSnippet s = new BinaryDateJavaDocCodeSnippet();\n+        s.createFromObject();\n+    }", "originalCommit": "dcd54572daf21e3dbf145b9fa1a8291707727756", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7e12c492017f0253b22f26c0f5745daec01ffdb0", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/samples/java/com/azure/core/experimental/util/BinaryDateJavaDocCodeSnippet.java b/sdk/core/azure-core-experimental/src/samples/java/com/azure/core/experimental/util/BinaryDateJavaDocCodeSnippet.java\nindex b8e4715b2c6..20648ccbc30 100644\n--- a/sdk/core/azure-core-experimental/src/samples/java/com/azure/core/experimental/util/BinaryDateJavaDocCodeSnippet.java\n+++ b/sdk/core/azure-core-experimental/src/samples/java/com/azure/core/experimental/util/BinaryDateJavaDocCodeSnippet.java\n\n@@ -226,10 +226,4 @@ public class BinaryDateJavaDocCodeSnippet {\n             return Mono.fromRunnable(() -> serialize(stream, value));\n         }\n     }\n-\n-    public static void main(String[] args) {\n-\n-        BinaryDateJavaDocCodeSnippet s = new BinaryDateJavaDocCodeSnippet();\n-        s.createFromObject();\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY2NTk1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r509665959", "bodyText": "Update name to DEFAULT_JSON_SERIALIZER.", "author": "srnagar", "createdAt": "2020-10-21T20:25:35Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -43,19 +53,32 @@\n  * <p><strong>Get an Object from {@link BinaryData}</strong></p>\n  * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#ObjectAsync}\n  *\n+ * <p><strong>Create an instance from Object</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Object}\n+ *\n  * @see ObjectSerializer\n  */\n public final class  BinaryData {\n     private static final ClientLogger LOGGER = new ClientLogger(BinaryData.class);\n+    private static final byte[] EMPTY_BYTES = new byte[0];\n+    private static final BinaryData EMPTY_DATA = new BinaryData(new byte[0]);\n+\n+    private static final Object LOCK = new Object();\n+\n     private final byte[] data;\n \n+    private static volatile JsonSerializer defaultJsonSerializer;", "originalCommit": "dcd54572daf21e3dbf145b9fa1a8291707727756", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY4OTI0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r509689243", "bodyText": "CheckStyle complain if I change to this  -> Name 'DEFAULT_JSON_SERIALIZER' must match pattern '^[a-z][a-zA-Z0-9]*$'. [StaticVariableName]", "author": "hemanttanwar", "createdAt": "2020-10-21T20:55:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY2NTk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d61107207ba1c3dd22de155663ad1b2a9f302817", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 8d3fc58b056..0a19879d6d5 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -70,28 +73,12 @@ public final class  BinaryData {\n     private static volatile JsonSerializer defaultJsonSerializer;\n \n     /**\n-     * Create an instance of {@link BinaryData} from  the given data. If {@code null} value is provided , it will be\n-     * converted into empty byte array.\n+     * Create an instance of {@link BinaryData} from the given data.\n      *\n      * @param data to represent as bytes.\n      */\n     BinaryData(byte[] data) {\n-        if (Objects.isNull(data) || data.length == 0) {\n-            data = EMPTY_BYTES;\n-        }\n-        this.data = Arrays.copyOf(data, data.length);\n-    }\n-\n-    /**\n-     * Provides {@link InputStream} for the data represented by this {@link BinaryData} object.\n-     *\n-     * <p><strong>Get InputStream from BinaryData</strong></p>\n-     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#Stream}\n-     *\n-     * @return {@link InputStream} representing the binary data.\n-     */\n-    public InputStream toStream() {\n-        return new ByteArrayInputStream(this.data);\n+        this.data = data;\n     }\n \n     /**\n"}}, {"oid": "7e12c492017f0253b22f26c0f5745daec01ffdb0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7e12c492017f0253b22f26c0f5745daec01ffdb0", "message": "Added validation.", "committedDate": "2020-10-21T20:58:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5NjQ0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r509796446", "bodyText": "\"The data represented by {@link BinaryData} is immutable\" is an odd statement to make? It is taken into BinaryData and presumably copied, but when given back to the user is mutable again. Perhaps clarify what you mean by this statement.", "author": "JonathanGiles", "createdAt": "2020-10-21T23:41:15Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -18,18 +20,26 @@\n import java.io.InputStream;\n import java.io.UncheckedIOException;\n import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Objects;\n \n /**\n- * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n- * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n- * array. The data is collected from provided sources and stored into a byte array.\n+ * This class is an abstraction over many different ways that binary data can be represented. The data represented by\n+ * {@link BinaryData} is immutable. The {@link BinaryData} can be created from {@link InputStream}, {@link Flux} of", "originalCommit": "7e12c492017f0253b22f26c0f5745daec01ffdb0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d61107207ba1c3dd22de155663ad1b2a9f302817", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 72aec1abf9f..0a19879d6d5 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -25,9 +25,12 @@ import java.util.Arrays;\n import java.util.Objects;\n \n /**\n- * This class is an abstraction over many different ways that binary data can be represented. The data represented by\n- * {@link BinaryData} is immutable. The {@link BinaryData} can be created from {@link InputStream}, {@link Flux} of\n- * {@link ByteBuffer}, {@link String}, {@link Object}, or byte array.\n+ * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object}, or byte\n+ * array.\n+ * <p><strong>Immutable data</strong><p/>\n+ * {@link BinaryData} is constructed by coping the give data. Once {@link BinaryData} is instantiated, It's data can not\n+ * be updated.\n  * <p>\n  * It provides a way to serialize {@link Object} into {@link BinaryData} using API\n  * {@link BinaryData#fromObject(Object, ObjectSerializer)} where you can provide your {@link ObjectSerializer}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5ODAxMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r509798012", "bodyText": "There feels like an inconsistency in how you handle null or empty data. Sometimes you turn it into an empty BinaryData, other times you throw an exception. Is there a reason for this?", "author": "JonathanGiles", "createdAt": "2020-10-21T23:46:28Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -72,24 +95,15 @@ public InputStream toStream() {\n     }\n \n     /**\n-     * Provides {@link Mono} of {@link InputStream} for the data represented by this {@link BinaryData} object.\n-     *\n-     * @return {@link InputStream} representation of the {@link BinaryData}.\n-     */\n-    public Mono<InputStream> toStreamAsync() {\n-        return Mono.fromCallable(() -> toStream());\n-    }\n-\n-    /**\n-     * Create {@link BinaryData} instance with given {@link InputStream} as source of data. The {@link InputStream} is\n-     * not closed by this function.\n+     * Creates a {@link BinaryData} instance with given {@link InputStream} as source of data. The {@link InputStream}\n+     * is not closed by this function.\n      *\n      * <p><strong>Create an instance from InputStream</strong></p>\n      * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n      *\n      * @param inputStream to read bytes from.\n      * @throws UncheckedIOException If any error in reading from {@link InputStream}.\n-     * @throws NullPointerException if {@code inputStream} is null.\n+     * @throws NullPointerException If {@code inputStream} is null.", "originalCommit": "7e12c492017f0253b22f26c0f5745daec01ffdb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg4MzExMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r509883113", "bodyText": "I was treating stream/Flux separately. But now , they will behave same.", "author": "hemanttanwar", "createdAt": "2020-10-22T05:10:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5ODAxMg=="}], "type": "inlineReview", "revised_code": {"commit": "d61107207ba1c3dd22de155663ad1b2a9f302817", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 72aec1abf9f..0a19879d6d5 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -70,28 +73,12 @@ public final class  BinaryData {\n     private static volatile JsonSerializer defaultJsonSerializer;\n \n     /**\n-     * Create an instance of {@link BinaryData} from  the given data. If {@code null} value is provided , it will be\n-     * converted into empty byte array.\n+     * Create an instance of {@link BinaryData} from the given data.\n      *\n      * @param data to represent as bytes.\n      */\n     BinaryData(byte[] data) {\n-        if (Objects.isNull(data) || data.length == 0) {\n-            data = EMPTY_BYTES;\n-        }\n-        this.data = Arrays.copyOf(data, data.length);\n-    }\n-\n-    /**\n-     * Provides {@link InputStream} for the data represented by this {@link BinaryData} object.\n-     *\n-     * <p><strong>Get InputStream from BinaryData</strong></p>\n-     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#Stream}\n-     *\n-     * @return {@link InputStream} representing the binary data.\n-     */\n-    public InputStream toStream() {\n-        return new ByteArrayInputStream(this.data);\n+        this.data = data;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5ODY2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r509798666", "bodyText": "Are we not able to handle this in a more efficient manner? As it stands this means that the entire input stream is read into a buffer, converted into a byte array, and then copied into a new byte array? At the very least you can avoid the byte array copy.", "author": "JonathanGiles", "createdAt": "2020-10-21T23:48:43Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -111,11 +125,11 @@ public static BinaryData fromStream(InputStream inputStream) {\n     }", "originalCommit": "7e12c492017f0253b22f26c0f5745daec01ffdb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg4MjgyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r509882828", "bodyText": "Removed the last byte array and same optimization in other from..() API as well.", "author": "hemanttanwar", "createdAt": "2020-10-22T05:09:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc5ODY2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d61107207ba1c3dd22de155663ad1b2a9f302817", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 72aec1abf9f..0a19879d6d5 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -117,45 +106,45 @@ public final class  BinaryData {\n             while ((nRead = inputStream.read(data, 0, data.length)) != -1) {\n                 dataOutputBuffer.write(data, 0, nRead);\n             }\n+            dataOutputBuffer.flush();\n+\n+            return new BinaryData(dataOutputBuffer.toByteArray());\n \n-            return fromBytes(dataOutputBuffer.toByteArray());\n         } catch (IOException ex) {\n             throw LOGGER.logExceptionAsError(new UncheckedIOException(ex));\n         }\n     }\n \n     /**\n-     * Asynchronously create a {@link BinaryData} instance with given {@link InputStream} as source of data. The\n-     * {@link InputStream} is not closed by this function.\n+     * Asynchronously creates a {@link BinaryData} instance with the given {@link InputStream} as source of data. The\n+     * {@link InputStream} is not closed by this function. If the {@link InputStream} is {@code null}, an empty\n+     * {@link BinaryData} will be returned.\n      *\n      * @param inputStream to read bytes from.\n-     * @throws NullPointerException If {@code inputStream} is null.\n      * @return {@link Mono} of {@link BinaryData} representing the binary data.\n      */\n     public static Mono<BinaryData> fromStreamAsync(InputStream inputStream) {\n-        Objects.requireNonNull(inputStream, \"'inputStream' cannot be null.\");\n-\n         return Mono.fromCallable(() -> fromStream(inputStream));\n     }\n \n     /**\n      * Creates a {@link BinaryData} instance with given {@link Flux} of {@link ByteBuffer} as source of data. It will\n-     * collect all the bytes from {@link ByteBuffer} into {@link BinaryData}.\n+     * collect all the bytes from {@link ByteBuffer} into {@link BinaryData}. If the {@link Flux} is {@code null}, an\n+     * empty {@link BinaryData} will be returned.\n      *\n      * <p><strong>Create an instance from String</strong></p>\n      * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Flux}\n      *\n      * @param data to use.\n-     * @throws NullPointerException If {@code data} is null.\n      * @return {@link Mono} of {@link BinaryData} representing binary data.\n      */\n     public static Mono<BinaryData> fromFlux(Flux<ByteBuffer> data) {\n         if (Objects.isNull(data)) {\n-            return monoError(LOGGER, new NullPointerException(\"'data' cannot be null.\"));\n+            return Mono.just(EMPTY_DATA);\n         }\n \n         return FluxUtil.collectBytesInByteBufferStream(data)\n-            .flatMap(bytes -> Mono.just(fromBytes(bytes)));\n+            .flatMap(bytes -> Mono.just(new BinaryData(bytes)));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwMDEyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r509800125", "bodyText": "This documentation should link through an aka.ms link to the appropriate json serializer documentation (which will soon move to docs.microsoft.com, which is why in the meanwhile we will use an aka.ms link)", "author": "JonathanGiles", "createdAt": "2020-10-21T23:53:29Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -185,16 +185,44 @@ public static BinaryData fromBytes(byte[] data) {\n         return new BinaryData(data);\n     }\n \n+    /**\n+     * Serialize the given {@link Object} into {@link BinaryData} using json serializer which is available on classpath.\n+     * The serializer on classpath must implement {@link JsonSerializer} interface. If the given Object is {@code null},\n+     * an empty {@link BinaryData} will be returned.", "originalCommit": "7e12c492017f0253b22f26c0f5745daec01ffdb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0NzE0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r510347143", "bodyText": "Added this link https://aka.ms/azsdk/java/wiki/serialization", "author": "hemanttanwar", "createdAt": "2020-10-22T17:46:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwMDEyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d61107207ba1c3dd22de155663ad1b2a9f302817", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 72aec1abf9f..0a19879d6d5 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -182,7 +170,11 @@ public final class  BinaryData {\n      * @return {@link BinaryData} representing the binary data.\n      */\n     public static BinaryData fromBytes(byte[] data) {\n-        return new BinaryData(data);\n+        if (Objects.isNull(data) || data.length == 0) {\n+            return EMPTY_DATA;\n+        }\n+\n+        return new BinaryData(Arrays.copyOf(data, data.length));\n     }\n \n     /**\n"}}, {"oid": "d61107207ba1c3dd22de155663ad1b2a9f302817", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d61107207ba1c3dd22de155663ad1b2a9f302817", "message": "Review comments", "committedDate": "2020-10-22T05:43:13Z", "type": "commit"}, {"oid": "6576ab5691e5b247576b1e4d86809e4a684390c2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6576ab5691e5b247576b1e4d86809e4a684390c2", "message": "Java doc", "committedDate": "2020-10-22T06:00:49Z", "type": "commit"}, {"oid": "09c4632aa3fca41dd3895aafef146cb146cd62e6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/09c4632aa3fca41dd3895aafef146cb146cd62e6", "message": "Java doc", "committedDate": "2020-10-22T06:13:14Z", "type": "commit"}, {"oid": "9be5791c5bec1e78a2f2091bbda1d0a7b43e2a31", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9be5791c5bec1e78a2f2091bbda1d0a7b43e2a31", "message": "Added aka.ms link for serializer", "committedDate": "2020-10-22T17:45:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxMTE0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r510511147", "bodyText": "typos:\n\ncoping\nit's", "author": "JonathanGiles", "createdAt": "2020-10-22T23:23:19Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -18,18 +20,32 @@\n import java.io.InputStream;\n import java.io.UncheckedIOException;\n import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Objects;\n \n /**\n  * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n- * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n- * array. The data is collected from provided sources and stored into a byte array.\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object}, or byte\n+ * array.\n+ * <p><strong>Immutable data</strong></p>\n+ * {@link BinaryData} is constructed by coping the given data. Once {@link BinaryData} is instantiated, it's data can", "originalCommit": "9be5791c5bec1e78a2f2091bbda1d0a7b43e2a31", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ed8f7df278ef812a003636b224b055769d00235", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 7fee9c07811..0d1bf95d41e 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -29,23 +29,11 @@ import java.util.Objects;\n  * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object}, or byte\n  * array.\n  * <p><strong>Immutable data</strong></p>\n- * {@link BinaryData} is constructed by coping the given data. Once {@link BinaryData} is instantiated, it's data can\n- * not be changed. It provides various convenient APIs to get data out of {@link BinaryData}, they all starts with the\n- * <b>BinaryData.to...()</b>, For example {@link BinaryData#toBytes()}.\n+ * {@link BinaryData} is constructed by copying the given data. Once {@link BinaryData} is instantiated, it can not be\n+ * changed. It provides various convenient APIs to get data out of {@link BinaryData}, they all start with the 'to'\n+ * prefix, for example {@link BinaryData#toBytes()}.\n  * <p>\n- * It provides a way to serialize {@link Object} into {@link BinaryData} using\n- * {@link BinaryData#fromObject(Object, ObjectSerializer)} where you can provide your {@link ObjectSerializer}.\n- * <p>\n- * It provides a way to de-serialize {@link BinaryData} into specified {@link Object} using\n- * {@link BinaryData#toObject(Class, ObjectSerializer)} where you can provide object type and your\n- * {@link ObjectSerializer}.\n- * <p>\n- * It provides API to use default json serializer which is available in classpath. The serializer on classpath must\n- * implement {@link JsonSerializer} interface.\n- * <p>Read more about <a href=\"http://aka.ms/azsdk/java/wiki/serialization\">serialization</a>.\n- *\n- * <p>\n- * Code samples are explained below.\n+ * Code samples are presented below.\n  *\n  * <p><strong>Create an instance from Bytes</strong></p>\n  * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#bytes}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxMTIwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r510511205", "bodyText": "'starts'", "author": "JonathanGiles", "createdAt": "2020-10-22T23:23:31Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -18,18 +20,32 @@\n import java.io.InputStream;\n import java.io.UncheckedIOException;\n import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Objects;\n \n /**\n  * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n- * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n- * array. The data is collected from provided sources and stored into a byte array.\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object}, or byte\n+ * array.\n+ * <p><strong>Immutable data</strong></p>\n+ * {@link BinaryData} is constructed by coping the given data. Once {@link BinaryData} is instantiated, it's data can\n+ * not be changed. It provides various convenient APIs to get data out of {@link BinaryData}, they all starts with the", "originalCommit": "9be5791c5bec1e78a2f2091bbda1d0a7b43e2a31", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ed8f7df278ef812a003636b224b055769d00235", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 7fee9c07811..0d1bf95d41e 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -29,23 +29,11 @@ import java.util.Objects;\n  * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object}, or byte\n  * array.\n  * <p><strong>Immutable data</strong></p>\n- * {@link BinaryData} is constructed by coping the given data. Once {@link BinaryData} is instantiated, it's data can\n- * not be changed. It provides various convenient APIs to get data out of {@link BinaryData}, they all starts with the\n- * <b>BinaryData.to...()</b>, For example {@link BinaryData#toBytes()}.\n+ * {@link BinaryData} is constructed by copying the given data. Once {@link BinaryData} is instantiated, it can not be\n+ * changed. It provides various convenient APIs to get data out of {@link BinaryData}, they all start with the 'to'\n+ * prefix, for example {@link BinaryData#toBytes()}.\n  * <p>\n- * It provides a way to serialize {@link Object} into {@link BinaryData} using\n- * {@link BinaryData#fromObject(Object, ObjectSerializer)} where you can provide your {@link ObjectSerializer}.\n- * <p>\n- * It provides a way to de-serialize {@link BinaryData} into specified {@link Object} using\n- * {@link BinaryData#toObject(Class, ObjectSerializer)} where you can provide object type and your\n- * {@link ObjectSerializer}.\n- * <p>\n- * It provides API to use default json serializer which is available in classpath. The serializer on classpath must\n- * implement {@link JsonSerializer} interface.\n- * <p>Read more about <a href=\"http://aka.ms/azsdk/java/wiki/serialization\">serialization</a>.\n- *\n- * <p>\n- * Code samples are explained below.\n+ * Code samples are presented below.\n  *\n  * <p><strong>Create an instance from Bytes</strong></p>\n  * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#bytes}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxMTQxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r510511411", "bodyText": "\"start with the 'to' prefix, for example\"", "author": "JonathanGiles", "createdAt": "2020-10-22T23:24:13Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -18,18 +20,32 @@\n import java.io.InputStream;\n import java.io.UncheckedIOException;\n import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Objects;\n \n /**\n  * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n- * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n- * array. The data is collected from provided sources and stored into a byte array.\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object}, or byte\n+ * array.\n+ * <p><strong>Immutable data</strong></p>\n+ * {@link BinaryData} is constructed by coping the given data. Once {@link BinaryData} is instantiated, it's data can\n+ * not be changed. It provides various convenient APIs to get data out of {@link BinaryData}, they all starts with the\n+ * <b>BinaryData.to...()</b>, For example {@link BinaryData#toBytes()}.", "originalCommit": "9be5791c5bec1e78a2f2091bbda1d0a7b43e2a31", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ed8f7df278ef812a003636b224b055769d00235", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 7fee9c07811..0d1bf95d41e 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -29,23 +29,11 @@ import java.util.Objects;\n  * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object}, or byte\n  * array.\n  * <p><strong>Immutable data</strong></p>\n- * {@link BinaryData} is constructed by coping the given data. Once {@link BinaryData} is instantiated, it's data can\n- * not be changed. It provides various convenient APIs to get data out of {@link BinaryData}, they all starts with the\n- * <b>BinaryData.to...()</b>, For example {@link BinaryData#toBytes()}.\n+ * {@link BinaryData} is constructed by copying the given data. Once {@link BinaryData} is instantiated, it can not be\n+ * changed. It provides various convenient APIs to get data out of {@link BinaryData}, they all start with the 'to'\n+ * prefix, for example {@link BinaryData#toBytes()}.\n  * <p>\n- * It provides a way to serialize {@link Object} into {@link BinaryData} using\n- * {@link BinaryData#fromObject(Object, ObjectSerializer)} where you can provide your {@link ObjectSerializer}.\n- * <p>\n- * It provides a way to de-serialize {@link BinaryData} into specified {@link Object} using\n- * {@link BinaryData#toObject(Class, ObjectSerializer)} where you can provide object type and your\n- * {@link ObjectSerializer}.\n- * <p>\n- * It provides API to use default json serializer which is available in classpath. The serializer on classpath must\n- * implement {@link JsonSerializer} interface.\n- * <p>Read more about <a href=\"http://aka.ms/azsdk/java/wiki/serialization\">serialization</a>.\n- *\n- * <p>\n- * Code samples are explained below.\n+ * Code samples are presented below.\n  *\n  * <p><strong>Create an instance from Bytes</strong></p>\n  * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#bytes}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxMjI5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r510512294", "bodyText": "This seems to just be restating the API in the class, and is probably unnecessary. I would focus more on pointing users to the appropriate JavaDoc documentation, e.g. JsonSerializer, etc", "author": "JonathanGiles", "createdAt": "2020-10-22T23:27:02Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -18,18 +20,32 @@\n import java.io.InputStream;\n import java.io.UncheckedIOException;\n import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Objects;\n \n /**\n  * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n- * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n- * array. The data is collected from provided sources and stored into a byte array.\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object}, or byte\n+ * array.\n+ * <p><strong>Immutable data</strong></p>\n+ * {@link BinaryData} is constructed by coping the given data. Once {@link BinaryData} is instantiated, it's data can\n+ * not be changed. It provides various convenient APIs to get data out of {@link BinaryData}, they all starts with the\n+ * <b>BinaryData.to...()</b>, For example {@link BinaryData#toBytes()}.\n  * <p>\n- * It also provides a way to serialize and deserialize an {@link Object} into {@link BinaryData} given an\n- * {@link ObjectSerializer}. Code samples are explained below.\n+ * It provides a way to serialize {@link Object} into {@link BinaryData} using\n+ * {@link BinaryData#fromObject(Object, ObjectSerializer)} where you can provide your {@link ObjectSerializer}.\n+ * <p>\n+ * It provides a way to de-serialize {@link BinaryData} into specified {@link Object} using\n+ * {@link BinaryData#toObject(Class, ObjectSerializer)} where you can provide object type and your\n+ * {@link ObjectSerializer}.\n+ * <p>\n+ * It provides API to use default json serializer which is available in classpath. The serializer on classpath must\n+ * implement {@link JsonSerializer} interface.\n+ * <p>Read more about <a href=\"http://aka.ms/azsdk/java/wiki/serialization\">serialization</a>.", "originalCommit": "9be5791c5bec1e78a2f2091bbda1d0a7b43e2a31", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ed8f7df278ef812a003636b224b055769d00235", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 7fee9c07811..0d1bf95d41e 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -29,23 +29,11 @@ import java.util.Objects;\n  * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object}, or byte\n  * array.\n  * <p><strong>Immutable data</strong></p>\n- * {@link BinaryData} is constructed by coping the given data. Once {@link BinaryData} is instantiated, it's data can\n- * not be changed. It provides various convenient APIs to get data out of {@link BinaryData}, they all starts with the\n- * <b>BinaryData.to...()</b>, For example {@link BinaryData#toBytes()}.\n+ * {@link BinaryData} is constructed by copying the given data. Once {@link BinaryData} is instantiated, it can not be\n+ * changed. It provides various convenient APIs to get data out of {@link BinaryData}, they all start with the 'to'\n+ * prefix, for example {@link BinaryData#toBytes()}.\n  * <p>\n- * It provides a way to serialize {@link Object} into {@link BinaryData} using\n- * {@link BinaryData#fromObject(Object, ObjectSerializer)} where you can provide your {@link ObjectSerializer}.\n- * <p>\n- * It provides a way to de-serialize {@link BinaryData} into specified {@link Object} using\n- * {@link BinaryData#toObject(Class, ObjectSerializer)} where you can provide object type and your\n- * {@link ObjectSerializer}.\n- * <p>\n- * It provides API to use default json serializer which is available in classpath. The serializer on classpath must\n- * implement {@link JsonSerializer} interface.\n- * <p>Read more about <a href=\"http://aka.ms/azsdk/java/wiki/serialization\">serialization</a>.\n- *\n- * <p>\n- * Code samples are explained below.\n+ * Code samples are presented below.\n  *\n  * <p><strong>Create an instance from Bytes</strong></p>\n  * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#bytes}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxMjQ2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r510512461", "bodyText": "\"are presented below\".\nCan you also generate the JavaDoc to ensure that this formats correctly?", "author": "JonathanGiles", "createdAt": "2020-10-22T23:27:42Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -18,18 +20,32 @@\n import java.io.InputStream;\n import java.io.UncheckedIOException;\n import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Objects;\n \n /**\n  * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n- * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n- * array. The data is collected from provided sources and stored into a byte array.\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object}, or byte\n+ * array.\n+ * <p><strong>Immutable data</strong></p>\n+ * {@link BinaryData} is constructed by coping the given data. Once {@link BinaryData} is instantiated, it's data can\n+ * not be changed. It provides various convenient APIs to get data out of {@link BinaryData}, they all starts with the\n+ * <b>BinaryData.to...()</b>, For example {@link BinaryData#toBytes()}.\n  * <p>\n- * It also provides a way to serialize and deserialize an {@link Object} into {@link BinaryData} given an\n- * {@link ObjectSerializer}. Code samples are explained below.\n+ * It provides a way to serialize {@link Object} into {@link BinaryData} using\n+ * {@link BinaryData#fromObject(Object, ObjectSerializer)} where you can provide your {@link ObjectSerializer}.\n+ * <p>\n+ * It provides a way to de-serialize {@link BinaryData} into specified {@link Object} using\n+ * {@link BinaryData#toObject(Class, ObjectSerializer)} where you can provide object type and your\n+ * {@link ObjectSerializer}.\n+ * <p>\n+ * It provides API to use default json serializer which is available in classpath. The serializer on classpath must\n+ * implement {@link JsonSerializer} interface.\n+ * <p>Read more about <a href=\"http://aka.ms/azsdk/java/wiki/serialization\">serialization</a>.\n+ *\n+ * <p>\n+ * Code samples are explained below.", "originalCommit": "9be5791c5bec1e78a2f2091bbda1d0a7b43e2a31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3OTQwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r510579402", "bodyText": "I checked java doc", "author": "hemanttanwar", "createdAt": "2020-10-23T03:55:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxMjQ2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ed8f7df278ef812a003636b224b055769d00235", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 7fee9c07811..0d1bf95d41e 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -29,23 +29,11 @@ import java.util.Objects;\n  * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object}, or byte\n  * array.\n  * <p><strong>Immutable data</strong></p>\n- * {@link BinaryData} is constructed by coping the given data. Once {@link BinaryData} is instantiated, it's data can\n- * not be changed. It provides various convenient APIs to get data out of {@link BinaryData}, they all starts with the\n- * <b>BinaryData.to...()</b>, For example {@link BinaryData#toBytes()}.\n+ * {@link BinaryData} is constructed by copying the given data. Once {@link BinaryData} is instantiated, it can not be\n+ * changed. It provides various convenient APIs to get data out of {@link BinaryData}, they all start with the 'to'\n+ * prefix, for example {@link BinaryData#toBytes()}.\n  * <p>\n- * It provides a way to serialize {@link Object} into {@link BinaryData} using\n- * {@link BinaryData#fromObject(Object, ObjectSerializer)} where you can provide your {@link ObjectSerializer}.\n- * <p>\n- * It provides a way to de-serialize {@link BinaryData} into specified {@link Object} using\n- * {@link BinaryData#toObject(Class, ObjectSerializer)} where you can provide object type and your\n- * {@link ObjectSerializer}.\n- * <p>\n- * It provides API to use default json serializer which is available in classpath. The serializer on classpath must\n- * implement {@link JsonSerializer} interface.\n- * <p>Read more about <a href=\"http://aka.ms/azsdk/java/wiki/serialization\">serialization</a>.\n- *\n- * <p>\n- * Code samples are explained below.\n+ * Code samples are presented below.\n  *\n  * <p><strong>Create an instance from Bytes</strong></p>\n  * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#bytes}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxMjU4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r510512586", "bodyText": "should reference JsonSerializer too", "author": "JonathanGiles", "createdAt": "2020-10-22T23:28:05Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -43,57 +59,47 @@\n  * <p><strong>Get an Object from {@link BinaryData}</strong></p>\n  * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#ObjectAsync}\n  *\n+ * <p><strong>Create an instance from Object</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Object}\n+ *\n  * @see ObjectSerializer", "originalCommit": "9be5791c5bec1e78a2f2091bbda1d0a7b43e2a31", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ed8f7df278ef812a003636b224b055769d00235", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 7fee9c07811..0d1bf95d41e 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -63,10 +51,11 @@ import java.util.Objects;\n  * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Object}\n  *\n  * @see ObjectSerializer\n+ * @see JsonSerializer\n+ * @see <a href=\"https://aka.ms/azsdk/java/docs/serialization\" target=\"_blank\">More about serialization</a>\n  */\n public final class  BinaryData {\n     private static final ClientLogger LOGGER = new ClientLogger(BinaryData.class);\n-    private static final byte[] EMPTY_BYTES = new byte[0];\n     private static final BinaryData EMPTY_DATA = new BinaryData(new byte[0]);\n \n     private static final Object LOCK = new Object();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxMzM5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16319#discussion_r510513392", "bodyText": "\"deserializing\"", "author": "JonathanGiles", "createdAt": "2020-10-22T23:31:00Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -276,10 +289,77 @@ public String toString(Charset charSet) {\n      * @param clazz representing the type of the Object.\n      * @param serializer to use deserialize data into type.\n      * @param <T> Generic type that the data is deserialized into.\n-     * @throws NullPointerException if {@code clazz} or {@code serializer} is null.\n+     * @throws NullPointerException If {@code clazz} or {@code serializer} is null.\n      * @return The {@link Object} of given type after deserializing the bytes.\n      */\n     public  <T> Mono<T> toObjectAsync(Class<T> clazz, ObjectSerializer serializer) {\n+\n+        if (Objects.isNull(clazz)) {\n+            return monoError(LOGGER, new NullPointerException(\"'clazz' cannot be null.\"));\n+        } else if (Objects.isNull(serializer)) {\n+            return monoError(LOGGER, new NullPointerException(\"'serializer' cannot be null.\"));\n+        }\n         return Mono.fromCallable(() -> toObject(clazz, serializer));\n     }\n+\n+    /**\n+     * Deserialize the bytes into the {@link Object} of given type by using json serializer which is available in\n+     * classpath. The serializer must implement {@link JsonSerializer} interface. A singleton instance of\n+     * {@link JsonSerializer} is kept for this class to use.\n+     *\n+     * @param clazz representing the type of the Object.\n+     * @param <T> Generic type that the data is deserialized into.\n+     * @throws NullPointerException If {@code clazz} is null.\n+     * @return The {@link Object} of given type after deserializing the bytes.\n+     */\n+    public <T> T toObject(Class<T> clazz) {\n+        Objects.requireNonNull(clazz, \"'clazz' cannot be null.\");\n+\n+        TypeReference<T>  ref = TypeReference.createInstance(clazz);\n+        InputStream jsonStream = new ByteArrayInputStream(this.data);\n+        return getDefaultSerializer().deserialize(jsonStream, ref);\n+    }\n+\n+    /**\n+     * Return a {@link Mono} by deserialize the bytes into the {@link Object} of given type after applying the Json", "originalCommit": "9be5791c5bec1e78a2f2091bbda1d0a7b43e2a31", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ed8f7df278ef812a003636b224b055769d00235", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 7fee9c07811..0d1bf95d41e 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -321,7 +318,7 @@ public final class  BinaryData {\n     }\n \n     /**\n-     * Return a {@link Mono} by deserialize the bytes into the {@link Object} of given type after applying the Json\n+     * Return a {@link Mono} by deserializing the bytes into the {@link Object} of given type after applying the Json\n      * serializer found on classpath.\n      *\n      * <p><strong>Gets the specified object</strong></p>\n"}}, {"oid": "7ed8f7df278ef812a003636b224b055769d00235", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7ed8f7df278ef812a003636b224b055769d00235", "message": "Review comments/javadoc", "committedDate": "2020-10-23T03:54:18Z", "type": "commit"}, {"oid": "32a3ef392e60eda5e8b368f4a95fd06b598b5b5e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/32a3ef392e60eda5e8b368f4a95fd06b598b5b5e", "message": "Review comments/javadoc", "committedDate": "2020-10-23T04:02:44Z", "type": "commit"}, {"oid": "26712550d14f09c93a00b57e6a9f7ab6f2b3cc4a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/26712550d14f09c93a00b57e6a9f7ab6f2b3cc4a", "message": "Checkstyle fix", "committedDate": "2020-10-23T05:27:05Z", "type": "commit"}, {"oid": "a8b5273664fe44b73a4cda91c3340ce9cbd4d1a9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a8b5273664fe44b73a4cda91c3340ce9cbd4d1a9", "message": "More java doc added", "committedDate": "2020-10-23T17:01:03Z", "type": "commit"}]}