{"pr_number": 12380, "pr_title": "FormRecognizer Receipt design update", "pr_createdAt": "2020-06-22T04:42:18Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/12380", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA1NTI3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12380#discussion_r444055278", "bodyText": "Since you are checking instanceof here, it's better to show that you are converting it into Integer type by casting it: Integer quantity = (Integer) formField.getFieldValue(). The printf statement with %d is too subtle to understand why you checked if this was an instanceof an Integer.\nMake the same changes in all places where you are checking for instanceof.", "author": "srnagar", "createdAt": "2020-06-23T08:33:41Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/Authentication.java", "diffHunk": "@@ -81,53 +81,60 @@ private static void authenticationWithAzureActiveDirectoryFormTrainingClient() {\n         getAccountProperties(formTrainingClient);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     private static void beginRecognizeCustomFormsFromUrl(FormRecognizerClient formRecognizerClient) {\n-        String receiptUrl = \"https://raw.githubusercontent.com/Azure/azure-sdk-for-java/master/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/sample-forms/receipts/contoso-allinone.jpg\";\n+        String receiptUrl = \"https://raw.githubusercontent.com/Azure/azure-sdk-for-java/master/sdk/formrecognizer\"\n+            + \"/azure-ai-formrecognizer/src/samples/java/sample-forms/receipts/contoso-allinone.jpg\";\n \n-        SyncPoller<OperationResult, List<RecognizedReceipt>> recognizeReceiptPoller =\n+        SyncPoller<OperationResult, List<RecognizedForm>> recognizeReceiptPoller =\n             formRecognizerClient.beginRecognizeReceiptsFromUrl(receiptUrl);\n \n-        List<RecognizedReceipt> receiptPageResults = recognizeReceiptPoller.getFinalResult();\n+        List<RecognizedForm> receiptPageResults = recognizeReceiptPoller.getFinalResult();\n \n         for (int i = 0; i < receiptPageResults.size(); i++) {\n-            RecognizedReceipt recognizedReceipt = receiptPageResults.get(i);\n-            Map<String, FormField> recognizedFields = recognizedReceipt.getRecognizedForm().getFields();\n+            RecognizedForm recognizedReceipt = receiptPageResults.get(i);\n+            Map<String, FormField<?>> recognizedFields = recognizedReceipt.getFields();\n             System.out.printf(\"----------- Recognized Receipt page %d -----------%n\", i);\n-            FormField merchantNameField = recognizedFields.get(\"MerchantName\");\n-            if (merchantNameField.getFieldValue().getType() == FieldValueType.STRING) {\n+            FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n+            Object merchantNameFieldValue = recognizedFields.get(\"MerchantName\").getFieldValue();\n+            if (merchantNameFieldValue instanceof String) {\n                 System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n-                    merchantNameField.getFieldValue().asString(),\n-                    merchantNameField.getConfidence());\n+                    merchantNameFieldValue, merchantNameField.getConfidence());\n             }\n-            FormField transactionDateField = recognizedFields.get(\"TransactionDate\");\n-            if (transactionDateField.getFieldValue().getType() == FieldValueType.DATE) {\n+\n+            FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n+            Object transactionDateFieldValue = recognizedFields.get(\"MerchantName\").getFieldValue();\n+            if (transactionDateFieldValue instanceof LocalDate) {\n+                LocalDate transactionDate = (LocalDate) transactionDateFieldValue;\n                 System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n-                    transactionDateField.getFieldValue().asDate(),\n-                    transactionDateField.getConfidence());\n+                    transactionDate, transactionDateField.getConfidence());\n             }\n-            FormField receiptItemsField = recognizedFields.get(\"Items\");\n-            System.out.printf(\"Receipt Items: %n\");\n-            if (receiptItemsField.getFieldValue().getType() == FieldValueType.LIST) {\n-                List<FormField> receiptItems = receiptItemsField.getFieldValue().asList();\n-                receiptItems.forEach(receiptItem -> {\n-                    if (receiptItem.getFieldValue().getType() == FieldValueType.MAP) {\n-                        receiptItem.getFieldValue().asMap().forEach((key, formField) -> {\n-                            if (key.equals(\"Name\")) {\n-                                if (formField.getFieldValue().getType() == FieldValueType.STRING) {\n-                                    System.out.printf(\"Name: %s, confidence: %.2fs%n\",\n-                                        formField.getFieldValue().asString(),\n-                                        formField.getConfidence());\n+\n+            FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n+            if (receiptItemsField != null) {\n+                System.out.printf(\"Receipt Items: %n\");\n+                if (receiptItemsField.getFieldValue() instanceof List) {\n+                    List<FormField<?>> receiptItems = (List<FormField<?>>) receiptItemsField.getFieldValue();\n+                    receiptItems.forEach(receiptItem -> {\n+                        if (receiptItem.getFieldValue() instanceof Map) {\n+                            ((Map<String, FormField<?>>) receiptItem.getFieldValue()).forEach((key, formField) -> {\n+                                if (\"Name\".equals(key)) {\n+                                    if (formField.getFieldValue() instanceof String) {\n+                                        System.out.printf(\"Name: %s, confidence: %.2fs%n\",\n+                                            formField.getFieldValue(),\n+                                            formField.getConfidence());\n+                                    }\n                                 }\n-                            }\n-                            if (key.equals(\"Quantity\")) {\n-                                if (formField.getFieldValue().getType() == FieldValueType.INTEGER) {\n-                                    System.out.printf(\"Quantity: %s, confidence: %.2f%n\",\n-                                        formField.getFieldValue().asInteger(), formField.getConfidence());\n+                                if (\"Quantity\".equals(key)) {\n+                                    if (formField.getFieldValue() instanceof Integer) {\n+                                        System.out.printf(\"Quantity: %d, confidence: %.2f%n\",\n+                                            formField.getFieldValue(), formField.getConfidence());\n+                                    }", "originalCommit": "a10a0f0328d32dda6af1f55c0812cb6dbbf56125", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "258ba71b600a05050795fd40d160437bb05bd5b7", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/Authentication.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/Authentication.java\nindex f8bb658c3ee..098ed8121ae 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/Authentication.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/Authentication.java\n\n@@ -96,14 +96,15 @@ public class Authentication {\n             Map<String, FormField<?>> recognizedFields = recognizedReceipt.getFields();\n             System.out.printf(\"----------- Recognized Receipt page %d -----------%n\", i);\n             FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n-            Object merchantNameFieldValue = recognizedFields.get(\"MerchantName\").getFieldValue();\n+            Object merchantNameFieldValue = recognizedFields.get(\"MerchantName\").getValue();\n             if (merchantNameFieldValue instanceof String) {\n+                String merchantName = (String) merchantNameFieldValue;\n                 System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n-                    merchantNameFieldValue, merchantNameField.getConfidence());\n+                    merchantName, merchantNameField.getConfidence());\n             }\n \n             FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n-            Object transactionDateFieldValue = recognizedFields.get(\"MerchantName\").getFieldValue();\n+            Object transactionDateFieldValue = recognizedFields.get(\"MerchantName\").getValue();\n             if (transactionDateFieldValue instanceof LocalDate) {\n                 LocalDate transactionDate = (LocalDate) transactionDateFieldValue;\n                 System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA1NzM2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12380#discussion_r444057363", "bodyText": "This is an example where the check for instanceof made no difference to the code within the if block. So, showing the cast to LocalDate and using some fields of LocalDate object would be a more effective example.", "author": "srnagar", "createdAt": "2020-06-23T08:37:05Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -228,39 +228,40 @@ public void beginRecognizeContentWithOptions() throws IOException {\n     /**\n      * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceiptsFromUrl(String)}\n      */\n+    @SuppressWarnings(\"unchecked\")\n     public void beginRecognizeReceiptsFromUrl() {\n         // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string\n         String receiptUrl = \"{file_source_url}\";\n         formRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(receiptUrl).subscribe(recognizePollingOperation -> {\n             // if training polling operation completed, retrieve the final result.\n             recognizePollingOperation.getFinalResult().subscribe(recognizedReceipts -> {\n                 for (int i = 0; i < recognizedReceipts.size(); i++) {\n-                    RecognizedReceipt recognizedReceipt = recognizedReceipts.get(i);\n-                    Map<String, FormField> recognizedFields = recognizedReceipt.getRecognizedForm().getFields();\n+                    RecognizedForm recognizedReceipt = recognizedReceipts.get(i);\n+                    Map<String, FormField<?>> recognizedFields = recognizedReceipt.getFields();\n                     System.out.printf(\"----------- Recognized Receipt page %s -----------%n\", i);\n-                    FormField merchantNameField = recognizedFields.get(\"MerchantName\");\n-                    if (merchantNameField.getFieldValue().getType() == FieldValueType.STRING) {\n+                    FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n+                    if (merchantNameField.getFieldValue() instanceof String) {\n                         System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n-                            merchantNameField.getFieldValue().asString(),\n+                            merchantNameField.getFieldValue(),\n                             merchantNameField.getConfidence());\n                     }\n-                    FormField transactionDateField = recognizedFields.get(\"TransactionDate\");\n-                    if (transactionDateField.getFieldValue().getType() == FieldValueType.DATE) {\n+                    FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n+                    if (transactionDateField.getFieldValue() instanceof LocalDate) {\n                         System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n-                            transactionDateField.getFieldValue().asDate(),\n+                            transactionDateField.getFieldValue(),\n                             transactionDateField.getConfidence());\n                     }", "originalCommit": "a10a0f0328d32dda6af1f55c0812cb6dbbf56125", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "258ba71b600a05050795fd40d160437bb05bd5b7", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\nindex 826aef9bfb9..d08da6cc8ea 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n\n@@ -240,28 +240,29 @@ public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n                     Map<String, FormField<?>> recognizedFields = recognizedReceipt.getFields();\n                     System.out.printf(\"----------- Recognized Receipt page %s -----------%n\", i);\n                     FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n-                    if (merchantNameField.getFieldValue() instanceof String) {\n+                    if (merchantNameField.getValue() instanceof String) {\n+                        String merchantName = (String) merchantNameField.getValue();\n                         System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n-                            merchantNameField.getFieldValue(),\n-                            merchantNameField.getConfidence());\n+                            merchantName, merchantNameField.getConfidence());\n                     }\n                     FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n-                    if (transactionDateField.getFieldValue() instanceof LocalDate) {\n+                    if (transactionDateField.getValue() instanceof LocalDate) {\n+                        LocalDate transactionDate = (LocalDate) transactionDateField.getValue();\n                         System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n-                            transactionDateField.getFieldValue(),\n-                            transactionDateField.getConfidence());\n+                            transactionDate, transactionDateField.getConfidence());\n                     }\n                     FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n                     System.out.printf(\"Receipt Items: %n\");\n-                    if (receiptItemsField.getFieldValue() instanceof List) {\n-                        List<FormField<?>> receiptItems = (List<FormField<?>>) receiptItemsField.getFieldValue();\n+                    if (receiptItemsField.getValue() instanceof List) {\n+                        List<FormField<?>> receiptItems = (List<FormField<?>>) receiptItemsField.getValue();\n                         receiptItems.forEach(receiptItem -> {\n-                            if (receiptItem.getFieldValue() instanceof Map) {\n-                                ((Map<String, FormField<?>>) receiptItem.getFieldValue()).forEach((key, formField) -> {\n+                            if (receiptItem.getValue() instanceof Map) {\n+                                ((Map<String, FormField<?>>) receiptItem.getValue()).forEach((key, formField) -> {\n                                     if (\"Quantity\".equals(key)) {\n-                                        if (formField.getFieldValue() instanceof Integer) {\n+                                        if (formField.getValue() instanceof Integer) {\n+                                            Integer quantity = (Integer) formField.getValue();\n                                             System.out.printf(\"Quantity: %s, confidence: %.2f%n\",\n-                                                formField.getFieldValue(), formField.getConfidence());\n+                                                quantity, formField.getConfidence());\n                                         }\n                                     }\n                                 });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA2MDE3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12380#discussion_r444060177", "bodyText": "Document this change in changelog too as this is a significant change in API.", "author": "srnagar", "createdAt": "2020-06-23T08:41:39Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -316,23 +314,23 @@\n      * @param receiptUrl The source URL to the input receipt.\n      *\n      * @return A {@link PollerFlux} that polls the recognize receipt operation until it has completed, has failed,\n-     * or has been cancelled. The completed operation returns a List of {@link RecognizedReceipt}.\n+     * or has been cancelled. The completed operation returns a List of {@link RecognizedForm}.\n      * @throws FormRecognizerException If recognize operation fails and the {@link AnalyzeOperationResult} returned with\n      * an {@link OperationStatus#FAILED}.\n      * @throws NullPointerException If {@code receiptUrl} is {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PollerFlux<OperationResult, List<RecognizedReceipt>>\n+    public PollerFlux<OperationResult, List<RecognizedForm>>", "originalCommit": "a10a0f0328d32dda6af1f55c0812cb6dbbf56125", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc42ef7d07a5b0e3c3cf310c829d39a39a49f11c", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\nindex a9fbc67dfc0..4e5fdbd2faa 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\n\n@@ -307,11 +304,12 @@ public final class FormRecognizerAsyncClient {\n      * model.\n      * <p>The service does not support cancellation of the long running operation and returns with an\n      * error message indicating absence of cancellation support.</p>\n+     * See <a href=\"https://aka.ms/azsdk/python/formrecognizer/receiptfields\">here</a> for fields found on a receipt.\n      *\n      * <p><strong>Code sample</strong></p>\n      * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string}\n      *\n-     * @param receiptUrl The source URL to the input receipt.\n+     * @param receiptUrl The URL of the receipt to analyze.\n      *\n      * @return A {@link PollerFlux} that polls the recognize receipt operation until it has completed, has failed,\n      * or has been cancelled. The completed operation returns a List of {@link RecognizedForm}.\n"}}, {"oid": "258ba71b600a05050795fd40d160437bb05bd5b7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/258ba71b600a05050795fd40d160437bb05bd5b7", "message": "update changelog and add casting in samples", "committedDate": "2020-06-23T19:56:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzOTQ5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12380#discussion_r444539490", "bodyText": "I feel like we need to either link to the API ref or somehow communicate the expected types for each receipt field. Sorry if you did this and I missed it", "author": "kristapratico", "createdAt": "2020-06-23T22:17:17Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeReceiptsFromUrl.java", "diffHunk": "@@ -23,80 +23,89 @@\n      *\n      * @param args Unused. Arguments to the program.\n      */\n+    @SuppressWarnings(\"unchecked\")\n     public static void main(final String[] args) {\n         // Instantiate a client that will be used to call the service.\n         FormRecognizerClient client = new FormRecognizerClientBuilder()\n             .credential(new AzureKeyCredential(\"{key}\"))\n             .endpoint(\"https://{endpoint}.cognitiveservices.azure.com/\")\n             .buildClient();\n \n-        String receiptUrl = \"https://raw.githubusercontent.com/Azure/azure-sdk-for-java/master/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/sample-forms/receipts/contoso-allinone.jpg\";\n-        SyncPoller<OperationResult, List<RecognizedReceipt>> recognizeReceiptPoller =\n+        String receiptUrl = \"https://raw.githubusercontent.com/Azure/azure-sdk-for-java/master/sdk/formrecognizer\"\n+            + \"/azure-ai-formrecognizer/src/samples/java/sample-forms/receipts/contoso-allinone.jpg\";\n+        SyncPoller<OperationResult, List<RecognizedForm>> recognizeReceiptPoller =\n             client.beginRecognizeReceiptsFromUrl(receiptUrl);\n \n-        List<RecognizedReceipt> receiptPageResults = recognizeReceiptPoller.getFinalResult();\n+        List<RecognizedForm> receiptPageResults = recognizeReceiptPoller.getFinalResult();\n \n         for (int i = 0; i < receiptPageResults.size(); i++) {\n-            RecognizedReceipt recognizedReceipt = receiptPageResults.get(i);\n-            Map<String, FormField> recognizedFields = recognizedReceipt.getRecognizedForm().getFields();\n+            RecognizedForm recognizedReceipt = receiptPageResults.get(i);\n+            Map<String, FormField<?>> recognizedFields = recognizedReceipt.getFields();\n             System.out.printf(\"----------- Recognized Receipt page %d -----------%n\", i);\n-            FormField merchantNameField = recognizedFields.get(\"MerchantName\");\n+            FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n             if (merchantNameField != null) {\n-                if (merchantNameField.getFieldValue().getType() == FieldValueType.STRING) {\n+                Object merchantNameFieldValue = merchantNameField.getValue();\n+                if (merchantNameFieldValue instanceof String) {", "originalCommit": "258ba71b600a05050795fd40d160437bb05bd5b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1NzM3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12380#discussion_r445257372", "bodyText": "added :)", "author": "samvaity", "createdAt": "2020-06-25T01:23:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzOTQ5MA=="}], "type": "inlineReview", "revised_code": {"commit": "60ce7f457a51a964e94fc59f567887cb73b5722a", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeReceiptsFromUrl.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeReceiptsFromUrl.java\nindex 0aae9d25c46..74f017b95e7 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeReceiptsFromUrl.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/RecognizeReceiptsFromUrl.java\n\n@@ -23,7 +27,6 @@ public class RecognizeReceiptsFromUrl {\n      *\n      * @param args Unused. Arguments to the program.\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public static void main(final String[] args) {\n         // Instantiate a client that will be used to call the service.\n         FormRecognizerClient client = new FormRecognizerClientBuilder()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NDE3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12380#discussion_r447984173", "bodyText": "Should this one be INTEGER == formField.getValueType()?", "author": "kinelski", "createdAt": "2020-06-30T21:16:37Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java", "diffHunk": "@@ -3,62 +3,145 @@\n \n package com.azure.ai.formrecognizer.models;\n \n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonValue;\n+import com.azure.core.util.ExpandableStringEnum;\n+import com.azure.core.util.logging.ClientLogger;\n \n-/** Defines values for FieldValueType. */\n-public enum FieldValueType {\n-    /** Enum value string. */\n-    STRING(\"string\"),\n+import java.util.Objects;\n \n-    /** Enum value date. */\n-    DATE(\"date\"),\n+/**\n+ * Define enum values for FieldValue types.\n+ */\n+public final class FieldValueType extends ExpandableStringEnum<com.azure.ai.formrecognizer.models.FieldValueType> {\n+    private final ClientLogger logger = new ClientLogger(FieldValueType.class);\n \n-    /** Enum value time. */\n-    TIME(\"time\"),\n+    /**\n+     * Static value string for FieldValueType.\n+     */\n+    public static final FieldValueType STRING = fromString(\"string\");\n \n-    /** Enum value phoneNumber. */\n-    PHONE_NUMBER(\"phoneNumber\"),\n+    /**\n+     * Static value date for FieldValueType.\n+     */\n+    public static final FieldValueType DATE = fromString(\"date\");\n \n-    /** Enum value number. */\n-    FLOAT(\"float\"),\n+    /**\n+     * Static value time for FieldValueType.\n+     */\n+    public static final FieldValueType TIME = fromString(\"time\");\n \n-    /** Enum value integer. */\n-    INTEGER(\"integer\"),\n+    /**\n+     * Static value phone number for FieldValueType.\n+     */\n+    public static final FieldValueType PHONE_NUMBER = fromString(\"phoneNumber\");\n \n-    /** Enum value array. */\n-    LIST(\"list\"),\n+    /**\n+     * Static value float for FieldValueType.\n+     */\n+    public static final FieldValueType FLOAT = fromString(\"number\");\n \n-    /** Enum value object. */\n-    MAP(\"map\");\n+    /**\n+     * Static value integer for FieldValueType.\n+     */\n+    public static final FieldValueType INTEGER = fromString(\"integer\");\n \n-    /** The actual serialized value for a FieldValueType instance. */\n-    private final String value;\n+    /**\n+     * Static value list for FieldValueType.\n+     */\n+    public static final FieldValueType LIST = fromString(\"array\");\n \n-    FieldValueType(String value) {\n-        this.value = value;\n-    }\n+    /**\n+     * Static value map for FieldValueType.\n+     */\n+    public static final FieldValueType MAP = fromString(\"object\");\n \n     /**\n-     * Parses a serialized value to a FieldValueType instance.\n+     * Parses a serialized value to a {@link FieldValueType} instance.\n      *\n      * @param value the serialized value to parse.\n+     *\n      * @return the parsed FieldValueType object, or null if unable to parse.\n      */\n-    @JsonCreator\n     public static FieldValueType fromString(String value) {\n-        FieldValueType[] items = FieldValueType.values();\n-        for (FieldValueType item : items) {\n-            if (item.toString().equalsIgnoreCase(value)) {\n-                return item;\n-            }\n-        }\n-        return null;\n+        return fromString(value, FieldValueType.class);\n     }\n \n-    @JsonValue\n-    @Override\n-    public String toString() {\n-        return this.value;\n+    /**\n+     * Converts the form field value to a specific expandable string enum type.\n+     *\n+     * @param formField The recognized field value that needs to be converted.\n+     * @param <T> the class of the field.\n+     *\n+     * @return the converted value of the recognized field.\n+     * @throws UnsupportedOperationException if the {@code formField} type does not match the casting value type.\n+     * @throws NullPointerException if {@code formField} is {@code null}\n+     */\n+    @SuppressWarnings({\"unchecked\"})\n+    public <T> T cast(FormField<?> formField) {\n+        Objects.requireNonNull(formField, \"'formField' cannot be null\");\n+        if (DATE.equals(this)) {\n+            if (DATE == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else {\n+                logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast operation \"\n+                    + \"or field value of type: %s\", formField.getValueType())));\n+            }\n+        }\n+        if (TIME.equals(this)) {\n+            if (TIME == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else {\n+                logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast operation \"\n+                    + \"or field value of type: %s\", formField.getValueType())));\n+            }\n+        }\n+        if (PHONE_NUMBER.equals(this)) {\n+            if (PHONE_NUMBER == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else {\n+                throw logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast \"\n+                    + \"operation for field value of type: %s\", formField.getValueType())));\n+            }\n+        }\n+        if (LIST.equals(this)) {\n+            if (LIST == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else {\n+                throw logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast \"\n+                    + \"operation or field value of type: %s\", formField.getValueType())));\n+            }\n+        }\n+        if (MAP.equals(this)) {\n+            if (MAP == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else {\n+                throw logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast \"\n+                    + \"operation or field value of type: %s\", formField.getValueType())));\n+            }\n+        }\n+        if (FLOAT.equals(this)) {\n+            if (FLOAT == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else {\n+                throw logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast \"\n+                    + \"operation or field value of type: %s\", formField.getValueType())));\n+            }\n+        }\n+        if (INTEGER.equals(this)) {\n+            if (FLOAT == formField.getValueType()) {", "originalCommit": "fe64c42ee10c851edb4d87a1d01a77362631340e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "60ce7f457a51a964e94fc59f567887cb73b5722a", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java\nindex d70ff2a0d08..56d1a016bc0 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java\n\n@@ -127,7 +127,7 @@ public final class FieldValueType extends ExpandableStringEnum<com.azure.ai.form\n             }\n         }\n         if (INTEGER.equals(this)) {\n-            if (FLOAT == formField.getValueType()) {\n+            if (INTEGER == formField.getValueType()) {\n                 return (T) formField.getValue();\n             } else {\n                 throw logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast \"\n"}}, {"oid": "60ce7f457a51a964e94fc59f567887cb73b5722a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/60ce7f457a51a964e94fc59f567887cb73b5722a", "message": "Integer enum", "committedDate": "2020-06-30T21:40:20Z", "type": "forcePushed"}, {"oid": "fa7445b4148824e9fde3d7f9da6009c85a0d6298", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fa7445b4148824e9fde3d7f9da6009c85a0d6298", "message": "Integer enum", "committedDate": "2020-07-01T00:24:29Z", "type": "forcePushed"}, {"oid": "bc42ef7d07a5b0e3c3cf310c829d39a39a49f11c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bc42ef7d07a5b0e3c3cf310c829d39a39a49f11c", "message": "Integer enum", "committedDate": "2020-07-02T00:01:18Z", "type": "forcePushed"}, {"oid": "e0c95aa8d64a049ba0d3b51d0085f69c750828b9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e0c95aa8d64a049ba0d3b51d0085f69c750828b9", "message": "Integer enum", "committedDate": "2020-07-02T02:34:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNTYwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12380#discussion_r449305605", "bodyText": "Is this expected? An object is mapped to a FieldValuteType.MAP?", "author": "srnagar", "createdAt": "2020-07-02T23:16:53Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -254,52 +238,44 @@ private Transforms() {\n      *\n      * @return The strongly typed {@link FormField} for the field input.\n      */\n-    private static FormField setFormField(FieldData labelText, String key, FieldValue fieldValue,\n+    private static FormField<?> setFormField(FieldData labelText, String key, FieldValue fieldValue,\n         FieldData valueText, Integer pageNumber, List<ReadResult> readResults) {\n-        FormField value;\n+        FormField<?> value;\n         switch (fieldValue.getType()) {\n             case PHONE_NUMBER:\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.PHONE_NUMBER).\n-                    setFormFieldPhoneNumber(fieldValue.getValuePhoneNumber()), valueText);\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n+                    key, fieldValue.getValuePhoneNumber(), valueText, FieldValueType.PHONE_NUMBER);\n                 break;\n             case STRING:\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.STRING)\n-                    .setFormFieldString(fieldValue.getValueString()), valueText);\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n+                    key, fieldValue.getValueString(), valueText, FieldValueType.STRING);\n                 break;\n             case TIME:\n                 LocalTime fieldTime = fieldValue.getValueTime() == null ? null : LocalTime\n                     .parse(fieldValue.getValueTime(), DateTimeFormatter.ofPattern(\"HH:mm:ss\"));\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.TIME)\n-                    .setFormFieldTime(fieldTime), valueText);\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n+                    key,  fieldTime, valueText, FieldValueType.TIME);\n                 break;\n             case DATE:\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.DATE)\n-                    .setFormFieldDate(fieldValue.getValueDate()), valueText);\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n+                    key,  fieldValue.getValueDate(), valueText, FieldValueType.DATE);\n                 break;\n             case INTEGER:\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.INTEGER)\n-                    .setFormFieldInteger(fieldValue.getValueInteger()), valueText);\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n+                    key, fieldValue.getValueInteger(), valueText, FieldValueType.INTEGER);\n                 break;\n             case NUMBER:\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.FLOAT)\n-                    .setFormFieldFloat(fieldValue.getValueNumber()), valueText);\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n+                    key, fieldValue.getValueNumber(), valueText, FieldValueType.FLOAT);\n                 break;\n             case ARRAY:\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), null, key,\n-                    new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.LIST)\n-                        .setFormFieldList(toFormFieldArray(fieldValue.getValueArray(), readResults)), null);\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), null, key,\n+                     toFormFieldArray(fieldValue.getValueArray(), readResults), null, FieldValueType.LIST);\n                 break;\n             case OBJECT:\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.MAP)\n-                    .setFormFieldMap(toFormFieldObject(fieldValue.getValueObject(), pageNumber, readResults)), valueText\n-                );\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n+                    key, toFormFieldObject(fieldValue.getValueObject(), pageNumber, readResults), valueText,\n+                    FieldValueType.MAP);", "originalCommit": "e0c95aa8d64a049ba0d3b51d0085f69c750828b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMxNDg4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12380#discussion_r449314886", "bodyText": "Yes, this is mapped correctly. So for a FieldValueType.OBJECT the service returns a it as a Map<String. FieldValue>. So rather than calling this enum Object we expose it as a Map to the user.\nhttps://github.com/Azure/azure-sdk-for-java/blob/master/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/implementation/models/FieldValue.java#L262", "author": "samvaity", "createdAt": "2020-07-02T23:57:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNTYwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "bc1995afd553760d72ffff7799e542171e36f7c8", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java\nindex eef4208bd74..55f7d5e8e21 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java\n\n@@ -238,44 +239,44 @@ final class Transforms {\n      *\n      * @return The strongly typed {@link FormField} for the field input.\n      */\n-    private static FormField<?> setFormField(FieldData labelText, String key, FieldValue fieldValue,\n-        FieldData valueText, Integer pageNumber, List<ReadResult> readResults) {\n+    private static FormField<?> setFormField(FieldText labelText, String key, FieldValue fieldValue,\n+        FieldText valueText, Integer pageNumber, List<ReadResult> readResults) {\n         FormField<?> value;\n         switch (fieldValue.getType()) {\n             case PHONE_NUMBER:\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, fieldValue.getValuePhoneNumber(), valueText, FieldValueType.PHONE_NUMBER);\n+                    key, fieldValue.getValuePhoneNumber(), valueText);\n                 break;\n             case STRING:\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, fieldValue.getValueString(), valueText, FieldValueType.STRING);\n+                    key, fieldValue.getValueString(), valueText);\n                 break;\n             case TIME:\n                 LocalTime fieldTime = fieldValue.getValueTime() == null ? null : LocalTime\n                     .parse(fieldValue.getValueTime(), DateTimeFormatter.ofPattern(\"HH:mm:ss\"));\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key,  fieldTime, valueText, FieldValueType.TIME);\n+                    key, fieldTime, valueText);\n                 break;\n             case DATE:\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key,  fieldValue.getValueDate(), valueText, FieldValueType.DATE);\n+                    key, fieldValue.getValueDate(), valueText);\n                 break;\n             case INTEGER:\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, fieldValue.getValueInteger(), valueText, FieldValueType.INTEGER);\n+                    key, fieldValue.getValueInteger(), valueText);\n                 break;\n             case NUMBER:\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, fieldValue.getValueNumber(), valueText, FieldValueType.FLOAT);\n+                    key, fieldValue.getValueNumber(), valueText);\n                 break;\n             case ARRAY:\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), null, key,\n-                     toFormFieldArray(fieldValue.getValueArray(), readResults), null, FieldValueType.LIST);\n+                    toFormFieldArray(fieldValue.getValueArray(), readResults), null);\n                 break;\n             case OBJECT:\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, toFormFieldObject(fieldValue.getValueObject(), pageNumber, readResults), valueText,\n-                    FieldValueType.MAP);\n+                    key, toFormFieldObject(fieldValue.getValueObject(), pageNumber, readResults), valueText\n+                );\n                 break;\n             default:\n                 throw LOGGER.logExceptionAsError(new RuntimeException(\"FieldValue Type not supported\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNjE0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12380#discussion_r449306140", "bodyText": "Should this be mapped to a DOUBLE instead?", "author": "srnagar", "createdAt": "2020-07-02T23:19:20Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -254,52 +238,44 @@ private Transforms() {\n      *\n      * @return The strongly typed {@link FormField} for the field input.\n      */\n-    private static FormField setFormField(FieldData labelText, String key, FieldValue fieldValue,\n+    private static FormField<?> setFormField(FieldData labelText, String key, FieldValue fieldValue,\n         FieldData valueText, Integer pageNumber, List<ReadResult> readResults) {\n-        FormField value;\n+        FormField<?> value;\n         switch (fieldValue.getType()) {\n             case PHONE_NUMBER:\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.PHONE_NUMBER).\n-                    setFormFieldPhoneNumber(fieldValue.getValuePhoneNumber()), valueText);\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n+                    key, fieldValue.getValuePhoneNumber(), valueText, FieldValueType.PHONE_NUMBER);\n                 break;\n             case STRING:\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.STRING)\n-                    .setFormFieldString(fieldValue.getValueString()), valueText);\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n+                    key, fieldValue.getValueString(), valueText, FieldValueType.STRING);\n                 break;\n             case TIME:\n                 LocalTime fieldTime = fieldValue.getValueTime() == null ? null : LocalTime\n                     .parse(fieldValue.getValueTime(), DateTimeFormatter.ofPattern(\"HH:mm:ss\"));\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.TIME)\n-                    .setFormFieldTime(fieldTime), valueText);\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n+                    key,  fieldTime, valueText, FieldValueType.TIME);\n                 break;\n             case DATE:\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.DATE)\n-                    .setFormFieldDate(fieldValue.getValueDate()), valueText);\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n+                    key,  fieldValue.getValueDate(), valueText, FieldValueType.DATE);\n                 break;\n             case INTEGER:\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.INTEGER)\n-                    .setFormFieldInteger(fieldValue.getValueInteger()), valueText);\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n+                    key, fieldValue.getValueInteger(), valueText, FieldValueType.INTEGER);\n                 break;\n             case NUMBER:\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.FLOAT)\n-                    .setFormFieldFloat(fieldValue.getValueNumber()), valueText);\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n+                    key, fieldValue.getValueNumber(), valueText, FieldValueType.FLOAT);", "originalCommit": "e0c95aa8d64a049ba0d3b51d0085f69c750828b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc1995afd553760d72ffff7799e542171e36f7c8", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java\nindex eef4208bd74..55f7d5e8e21 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java\n\n@@ -238,44 +239,44 @@ final class Transforms {\n      *\n      * @return The strongly typed {@link FormField} for the field input.\n      */\n-    private static FormField<?> setFormField(FieldData labelText, String key, FieldValue fieldValue,\n-        FieldData valueText, Integer pageNumber, List<ReadResult> readResults) {\n+    private static FormField<?> setFormField(FieldText labelText, String key, FieldValue fieldValue,\n+        FieldText valueText, Integer pageNumber, List<ReadResult> readResults) {\n         FormField<?> value;\n         switch (fieldValue.getType()) {\n             case PHONE_NUMBER:\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, fieldValue.getValuePhoneNumber(), valueText, FieldValueType.PHONE_NUMBER);\n+                    key, fieldValue.getValuePhoneNumber(), valueText);\n                 break;\n             case STRING:\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, fieldValue.getValueString(), valueText, FieldValueType.STRING);\n+                    key, fieldValue.getValueString(), valueText);\n                 break;\n             case TIME:\n                 LocalTime fieldTime = fieldValue.getValueTime() == null ? null : LocalTime\n                     .parse(fieldValue.getValueTime(), DateTimeFormatter.ofPattern(\"HH:mm:ss\"));\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key,  fieldTime, valueText, FieldValueType.TIME);\n+                    key, fieldTime, valueText);\n                 break;\n             case DATE:\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key,  fieldValue.getValueDate(), valueText, FieldValueType.DATE);\n+                    key, fieldValue.getValueDate(), valueText);\n                 break;\n             case INTEGER:\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, fieldValue.getValueInteger(), valueText, FieldValueType.INTEGER);\n+                    key, fieldValue.getValueInteger(), valueText);\n                 break;\n             case NUMBER:\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, fieldValue.getValueNumber(), valueText, FieldValueType.FLOAT);\n+                    key, fieldValue.getValueNumber(), valueText);\n                 break;\n             case ARRAY:\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), null, key,\n-                     toFormFieldArray(fieldValue.getValueArray(), readResults), null, FieldValueType.LIST);\n+                    toFormFieldArray(fieldValue.getValueArray(), readResults), null);\n                 break;\n             case OBJECT:\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, toFormFieldObject(fieldValue.getValueObject(), pageNumber, readResults), valueText,\n-                    FieldValueType.MAP);\n+                    key, toFormFieldObject(fieldValue.getValueObject(), pageNumber, readResults), valueText\n+                );\n                 break;\n             default:\n                 throw LOGGER.logExceptionAsError(new RuntimeException(\"FieldValue Type not supported\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNjY2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12380#discussion_r449306663", "bodyText": "Since FieldValueType is an ExpandableStringEnum, should the default be to create a FormField with Object value instead of throwing an exception?", "author": "srnagar", "createdAt": "2020-07-02T23:21:28Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java", "diffHunk": "@@ -254,52 +238,44 @@ private Transforms() {\n      *\n      * @return The strongly typed {@link FormField} for the field input.\n      */\n-    private static FormField setFormField(FieldData labelText, String key, FieldValue fieldValue,\n+    private static FormField<?> setFormField(FieldData labelText, String key, FieldValue fieldValue,\n         FieldData valueText, Integer pageNumber, List<ReadResult> readResults) {\n-        FormField value;\n+        FormField<?> value;\n         switch (fieldValue.getType()) {\n             case PHONE_NUMBER:\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.PHONE_NUMBER).\n-                    setFormFieldPhoneNumber(fieldValue.getValuePhoneNumber()), valueText);\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n+                    key, fieldValue.getValuePhoneNumber(), valueText, FieldValueType.PHONE_NUMBER);\n                 break;\n             case STRING:\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.STRING)\n-                    .setFormFieldString(fieldValue.getValueString()), valueText);\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n+                    key, fieldValue.getValueString(), valueText, FieldValueType.STRING);\n                 break;\n             case TIME:\n                 LocalTime fieldTime = fieldValue.getValueTime() == null ? null : LocalTime\n                     .parse(fieldValue.getValueTime(), DateTimeFormatter.ofPattern(\"HH:mm:ss\"));\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.TIME)\n-                    .setFormFieldTime(fieldTime), valueText);\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n+                    key,  fieldTime, valueText, FieldValueType.TIME);\n                 break;\n             case DATE:\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.DATE)\n-                    .setFormFieldDate(fieldValue.getValueDate()), valueText);\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n+                    key,  fieldValue.getValueDate(), valueText, FieldValueType.DATE);\n                 break;\n             case INTEGER:\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.INTEGER)\n-                    .setFormFieldInteger(fieldValue.getValueInteger()), valueText);\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n+                    key, fieldValue.getValueInteger(), valueText, FieldValueType.INTEGER);\n                 break;\n             case NUMBER:\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.FLOAT)\n-                    .setFormFieldFloat(fieldValue.getValueNumber()), valueText);\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n+                    key, fieldValue.getValueNumber(), valueText, FieldValueType.FLOAT);\n                 break;\n             case ARRAY:\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), null, key,\n-                    new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.LIST)\n-                        .setFormFieldList(toFormFieldArray(fieldValue.getValueArray(), readResults)), null);\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), null, key,\n+                     toFormFieldArray(fieldValue.getValueArray(), readResults), null, FieldValueType.LIST);\n                 break;\n             case OBJECT:\n-                value = new FormField(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, new com.azure.ai.formrecognizer.models.FieldValue(FieldValueType.MAP)\n-                    .setFormFieldMap(toFormFieldObject(fieldValue.getValueObject(), pageNumber, readResults)), valueText\n-                );\n+                value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n+                    key, toFormFieldObject(fieldValue.getValueObject(), pageNumber, readResults), valueText,\n+                    FieldValueType.MAP);\n                 break;\n             default:\n                 throw LOGGER.logExceptionAsError(new RuntimeException(\"FieldValue Type not supported\"));", "originalCommit": "e0c95aa8d64a049ba0d3b51d0085f69c750828b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0MTU0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12380#discussion_r450341544", "bodyText": "Discussed offline, currently, a newer version of FieldValue can only be supported with a swagger update requiring service version update.", "author": "samvaity", "createdAt": "2020-07-06T16:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNjY2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "bc1995afd553760d72ffff7799e542171e36f7c8", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java\nindex eef4208bd74..55f7d5e8e21 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/Transforms.java\n\n@@ -238,44 +239,44 @@ final class Transforms {\n      *\n      * @return The strongly typed {@link FormField} for the field input.\n      */\n-    private static FormField<?> setFormField(FieldData labelText, String key, FieldValue fieldValue,\n-        FieldData valueText, Integer pageNumber, List<ReadResult> readResults) {\n+    private static FormField<?> setFormField(FieldText labelText, String key, FieldValue fieldValue,\n+        FieldText valueText, Integer pageNumber, List<ReadResult> readResults) {\n         FormField<?> value;\n         switch (fieldValue.getType()) {\n             case PHONE_NUMBER:\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, fieldValue.getValuePhoneNumber(), valueText, FieldValueType.PHONE_NUMBER);\n+                    key, fieldValue.getValuePhoneNumber(), valueText);\n                 break;\n             case STRING:\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, fieldValue.getValueString(), valueText, FieldValueType.STRING);\n+                    key, fieldValue.getValueString(), valueText);\n                 break;\n             case TIME:\n                 LocalTime fieldTime = fieldValue.getValueTime() == null ? null : LocalTime\n                     .parse(fieldValue.getValueTime(), DateTimeFormatter.ofPattern(\"HH:mm:ss\"));\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key,  fieldTime, valueText, FieldValueType.TIME);\n+                    key, fieldTime, valueText);\n                 break;\n             case DATE:\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key,  fieldValue.getValueDate(), valueText, FieldValueType.DATE);\n+                    key, fieldValue.getValueDate(), valueText);\n                 break;\n             case INTEGER:\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, fieldValue.getValueInteger(), valueText, FieldValueType.INTEGER);\n+                    key, fieldValue.getValueInteger(), valueText);\n                 break;\n             case NUMBER:\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, fieldValue.getValueNumber(), valueText, FieldValueType.FLOAT);\n+                    key, fieldValue.getValueNumber(), valueText);\n                 break;\n             case ARRAY:\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), null, key,\n-                     toFormFieldArray(fieldValue.getValueArray(), readResults), null, FieldValueType.LIST);\n+                    toFormFieldArray(fieldValue.getValueArray(), readResults), null);\n                 break;\n             case OBJECT:\n                 value = new FormField<>(setDefaultConfidenceValue(fieldValue.getConfidence()), labelText,\n-                    key, toFormFieldObject(fieldValue.getValueObject(), pageNumber, readResults), valueText,\n-                    FieldValueType.MAP);\n+                    key, toFormFieldObject(fieldValue.getValueObject(), pageNumber, readResults), valueText\n+                );\n                 break;\n             default:\n                 throw LOGGER.logExceptionAsError(new RuntimeException(\"FieldValue Type not supported\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNzI3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12380#discussion_r449307270", "bodyText": "Update the error message to include both field type and the attempted cast type.\nString.format(\"Cannot cast from field value of type %s to type %s\", formField.getValueType(), DATE)", "author": "srnagar", "createdAt": "2020-07-02T23:24:04Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java", "diffHunk": "@@ -3,62 +3,145 @@\n \n package com.azure.ai.formrecognizer.models;\n \n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonValue;\n+import com.azure.core.util.ExpandableStringEnum;\n+import com.azure.core.util.logging.ClientLogger;\n \n-/** Defines values for FieldValueType. */\n-public enum FieldValueType {\n-    /** Enum value string. */\n-    STRING(\"string\"),\n+import java.util.Objects;\n \n-    /** Enum value date. */\n-    DATE(\"date\"),\n+/**\n+ * Define enum values for FieldValue types.\n+ */\n+public final class FieldValueType extends ExpandableStringEnum<com.azure.ai.formrecognizer.models.FieldValueType> {\n+    private final ClientLogger logger = new ClientLogger(FieldValueType.class);\n \n-    /** Enum value time. */\n-    TIME(\"time\"),\n+    /**\n+     * Static value string for FieldValueType.\n+     */\n+    public static final FieldValueType STRING = fromString(\"string\");\n \n-    /** Enum value phoneNumber. */\n-    PHONE_NUMBER(\"phoneNumber\"),\n+    /**\n+     * Static value date for FieldValueType.\n+     */\n+    public static final FieldValueType DATE = fromString(\"date\");\n \n-    /** Enum value number. */\n-    FLOAT(\"float\"),\n+    /**\n+     * Static value time for FieldValueType.\n+     */\n+    public static final FieldValueType TIME = fromString(\"time\");\n \n-    /** Enum value integer. */\n-    INTEGER(\"integer\"),\n+    /**\n+     * Static value phone number for FieldValueType.\n+     */\n+    public static final FieldValueType PHONE_NUMBER = fromString(\"phoneNumber\");\n \n-    /** Enum value array. */\n-    LIST(\"list\"),\n+    /**\n+     * Static value float for FieldValueType.\n+     */\n+    public static final FieldValueType FLOAT = fromString(\"number\");\n \n-    /** Enum value object. */\n-    MAP(\"map\");\n+    /**\n+     * Static value integer for FieldValueType.\n+     */\n+    public static final FieldValueType INTEGER = fromString(\"integer\");\n \n-    /** The actual serialized value for a FieldValueType instance. */\n-    private final String value;\n+    /**\n+     * Static value list for FieldValueType.\n+     */\n+    public static final FieldValueType LIST = fromString(\"array\");\n \n-    FieldValueType(String value) {\n-        this.value = value;\n-    }\n+    /**\n+     * Static value map for FieldValueType.\n+     */\n+    public static final FieldValueType MAP = fromString(\"object\");\n \n     /**\n-     * Parses a serialized value to a FieldValueType instance.\n+     * Parses a serialized value to a {@link FieldValueType} instance.\n      *\n      * @param value the serialized value to parse.\n+     *\n      * @return the parsed FieldValueType object, or null if unable to parse.\n      */\n-    @JsonCreator\n     public static FieldValueType fromString(String value) {\n-        FieldValueType[] items = FieldValueType.values();\n-        for (FieldValueType item : items) {\n-            if (item.toString().equalsIgnoreCase(value)) {\n-                return item;\n-            }\n-        }\n-        return null;\n+        return fromString(value, FieldValueType.class);\n     }\n \n-    @JsonValue\n-    @Override\n-    public String toString() {\n-        return this.value;\n+    /**\n+     * Converts the form field value to a specific expandable string enum type.\n+     *\n+     * @param formField The recognized field value that needs to be converted.\n+     * @param <T> the class of the field.\n+     *\n+     * @return the converted value of the recognized field.\n+     * @throws UnsupportedOperationException if the {@code formField} type does not match the casting value type.\n+     * @throws NullPointerException if {@code formField} is {@code null}\n+     */\n+    @SuppressWarnings({\"unchecked\"})\n+    public <T> T cast(FormField<?> formField) {\n+        Objects.requireNonNull(formField, \"'formField' cannot be null\");\n+        if (DATE.equals(this)) {\n+            if (DATE == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else {\n+                logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast operation \"\n+                    + \"or field value of type: %s\", formField.getValueType())));\n+            }", "originalCommit": "e0c95aa8d64a049ba0d3b51d0085f69c750828b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc1995afd553760d72ffff7799e542171e36f7c8", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java\ndeleted file mode 100644\nindex 56d1a016bc0..00000000000\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java\n+++ /dev/null\n\n@@ -1,147 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.ai.formrecognizer.models;\n-\n-import com.azure.core.util.ExpandableStringEnum;\n-import com.azure.core.util.logging.ClientLogger;\n-\n-import java.util.Objects;\n-\n-/**\n- * Define enum values for FieldValue types.\n- */\n-public final class FieldValueType extends ExpandableStringEnum<com.azure.ai.formrecognizer.models.FieldValueType> {\n-    private final ClientLogger logger = new ClientLogger(FieldValueType.class);\n-\n-    /**\n-     * Static value string for FieldValueType.\n-     */\n-    public static final FieldValueType STRING = fromString(\"string\");\n-\n-    /**\n-     * Static value date for FieldValueType.\n-     */\n-    public static final FieldValueType DATE = fromString(\"date\");\n-\n-    /**\n-     * Static value time for FieldValueType.\n-     */\n-    public static final FieldValueType TIME = fromString(\"time\");\n-\n-    /**\n-     * Static value phone number for FieldValueType.\n-     */\n-    public static final FieldValueType PHONE_NUMBER = fromString(\"phoneNumber\");\n-\n-    /**\n-     * Static value float for FieldValueType.\n-     */\n-    public static final FieldValueType FLOAT = fromString(\"number\");\n-\n-    /**\n-     * Static value integer for FieldValueType.\n-     */\n-    public static final FieldValueType INTEGER = fromString(\"integer\");\n-\n-    /**\n-     * Static value list for FieldValueType.\n-     */\n-    public static final FieldValueType LIST = fromString(\"array\");\n-\n-    /**\n-     * Static value map for FieldValueType.\n-     */\n-    public static final FieldValueType MAP = fromString(\"object\");\n-\n-    /**\n-     * Parses a serialized value to a {@link FieldValueType} instance.\n-     *\n-     * @param value the serialized value to parse.\n-     *\n-     * @return the parsed FieldValueType object, or null if unable to parse.\n-     */\n-    public static FieldValueType fromString(String value) {\n-        return fromString(value, FieldValueType.class);\n-    }\n-\n-    /**\n-     * Converts the form field value to a specific expandable string enum type.\n-     *\n-     * @param formField The recognized field value that needs to be converted.\n-     * @param <T> the class of the field.\n-     *\n-     * @return the converted value of the recognized field.\n-     * @throws UnsupportedOperationException if the {@code formField} type does not match the casting value type.\n-     * @throws NullPointerException if {@code formField} is {@code null}\n-     */\n-    @SuppressWarnings({\"unchecked\"})\n-    public <T> T cast(FormField<?> formField) {\n-        Objects.requireNonNull(formField, \"'formField' cannot be null\");\n-        if (DATE.equals(this)) {\n-            if (DATE == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else {\n-                logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast operation \"\n-                    + \"or field value of type: %s\", formField.getValueType())));\n-            }\n-        }\n-        if (TIME.equals(this)) {\n-            if (TIME == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else {\n-                logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast operation \"\n-                    + \"or field value of type: %s\", formField.getValueType())));\n-            }\n-        }\n-        if (PHONE_NUMBER.equals(this)) {\n-            if (PHONE_NUMBER == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else {\n-                throw logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast \"\n-                    + \"operation for field value of type: %s\", formField.getValueType())));\n-            }\n-        }\n-        if (LIST.equals(this)) {\n-            if (LIST == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else {\n-                throw logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast \"\n-                    + \"operation or field value of type: %s\", formField.getValueType())));\n-            }\n-        }\n-        if (MAP.equals(this)) {\n-            if (MAP == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else {\n-                throw logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast \"\n-                    + \"operation or field value of type: %s\", formField.getValueType())));\n-            }\n-        }\n-        if (FLOAT.equals(this)) {\n-            if (FLOAT == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else {\n-                throw logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast \"\n-                    + \"operation or field value of type: %s\", formField.getValueType())));\n-            }\n-        }\n-        if (INTEGER.equals(this)) {\n-            if (INTEGER == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else {\n-                throw logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast \"\n-                    + \"operation or field value of type: %s\", formField.getValueType())));\n-            }\n-        }\n-        if (STRING.equals(this)) {\n-            if (STRING == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else {\n-                throw logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast \"\n-                    + \"operation or field value of type: %s\", formField.getValueType())));\n-            }\n-        }\n-        return (T) formField.getValue();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwODIxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12380#discussion_r449308214", "bodyText": "This code is repeated for each type. Consider removing duplication.", "author": "srnagar", "createdAt": "2020-07-02T23:28:07Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java", "diffHunk": "@@ -3,62 +3,145 @@\n \n package com.azure.ai.formrecognizer.models;\n \n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonValue;\n+import com.azure.core.util.ExpandableStringEnum;\n+import com.azure.core.util.logging.ClientLogger;\n \n-/** Defines values for FieldValueType. */\n-public enum FieldValueType {\n-    /** Enum value string. */\n-    STRING(\"string\"),\n+import java.util.Objects;\n \n-    /** Enum value date. */\n-    DATE(\"date\"),\n+/**\n+ * Define enum values for FieldValue types.\n+ */\n+public final class FieldValueType extends ExpandableStringEnum<com.azure.ai.formrecognizer.models.FieldValueType> {\n+    private final ClientLogger logger = new ClientLogger(FieldValueType.class);\n \n-    /** Enum value time. */\n-    TIME(\"time\"),\n+    /**\n+     * Static value string for FieldValueType.\n+     */\n+    public static final FieldValueType STRING = fromString(\"string\");\n \n-    /** Enum value phoneNumber. */\n-    PHONE_NUMBER(\"phoneNumber\"),\n+    /**\n+     * Static value date for FieldValueType.\n+     */\n+    public static final FieldValueType DATE = fromString(\"date\");\n \n-    /** Enum value number. */\n-    FLOAT(\"float\"),\n+    /**\n+     * Static value time for FieldValueType.\n+     */\n+    public static final FieldValueType TIME = fromString(\"time\");\n \n-    /** Enum value integer. */\n-    INTEGER(\"integer\"),\n+    /**\n+     * Static value phone number for FieldValueType.\n+     */\n+    public static final FieldValueType PHONE_NUMBER = fromString(\"phoneNumber\");\n \n-    /** Enum value array. */\n-    LIST(\"list\"),\n+    /**\n+     * Static value float for FieldValueType.\n+     */\n+    public static final FieldValueType FLOAT = fromString(\"number\");\n \n-    /** Enum value object. */\n-    MAP(\"map\");\n+    /**\n+     * Static value integer for FieldValueType.\n+     */\n+    public static final FieldValueType INTEGER = fromString(\"integer\");\n \n-    /** The actual serialized value for a FieldValueType instance. */\n-    private final String value;\n+    /**\n+     * Static value list for FieldValueType.\n+     */\n+    public static final FieldValueType LIST = fromString(\"array\");\n \n-    FieldValueType(String value) {\n-        this.value = value;\n-    }\n+    /**\n+     * Static value map for FieldValueType.\n+     */\n+    public static final FieldValueType MAP = fromString(\"object\");\n \n     /**\n-     * Parses a serialized value to a FieldValueType instance.\n+     * Parses a serialized value to a {@link FieldValueType} instance.\n      *\n      * @param value the serialized value to parse.\n+     *\n      * @return the parsed FieldValueType object, or null if unable to parse.\n      */\n-    @JsonCreator\n     public static FieldValueType fromString(String value) {\n-        FieldValueType[] items = FieldValueType.values();\n-        for (FieldValueType item : items) {\n-            if (item.toString().equalsIgnoreCase(value)) {\n-                return item;\n-            }\n-        }\n-        return null;\n+        return fromString(value, FieldValueType.class);\n     }\n \n-    @JsonValue\n-    @Override\n-    public String toString() {\n-        return this.value;\n+    /**\n+     * Converts the form field value to a specific expandable string enum type.\n+     *\n+     * @param formField The recognized field value that needs to be converted.\n+     * @param <T> the class of the field.\n+     *\n+     * @return the converted value of the recognized field.\n+     * @throws UnsupportedOperationException if the {@code formField} type does not match the casting value type.\n+     * @throws NullPointerException if {@code formField} is {@code null}\n+     */\n+    @SuppressWarnings({\"unchecked\"})\n+    public <T> T cast(FormField<?> formField) {\n+        Objects.requireNonNull(formField, \"'formField' cannot be null\");\n+        if (DATE.equals(this)) {\n+            if (DATE == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else {\n+                logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast operation \"\n+                    + \"or field value of type: %s\", formField.getValueType())));\n+            }\n+        }\n+        if (TIME.equals(this)) {\n+            if (TIME == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else {\n+                logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast operation \"\n+                    + \"or field value of type: %s\", formField.getValueType())));\n+            }\n+        }\n+        if (PHONE_NUMBER.equals(this)) {\n+            if (PHONE_NUMBER == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else {\n+                throw logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast \"\n+                    + \"operation for field value of type: %s\", formField.getValueType())));\n+            }\n+        }", "originalCommit": "e0c95aa8d64a049ba0d3b51d0085f69c750828b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc1995afd553760d72ffff7799e542171e36f7c8", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java\ndeleted file mode 100644\nindex 56d1a016bc0..00000000000\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java\n+++ /dev/null\n\n@@ -1,147 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.ai.formrecognizer.models;\n-\n-import com.azure.core.util.ExpandableStringEnum;\n-import com.azure.core.util.logging.ClientLogger;\n-\n-import java.util.Objects;\n-\n-/**\n- * Define enum values for FieldValue types.\n- */\n-public final class FieldValueType extends ExpandableStringEnum<com.azure.ai.formrecognizer.models.FieldValueType> {\n-    private final ClientLogger logger = new ClientLogger(FieldValueType.class);\n-\n-    /**\n-     * Static value string for FieldValueType.\n-     */\n-    public static final FieldValueType STRING = fromString(\"string\");\n-\n-    /**\n-     * Static value date for FieldValueType.\n-     */\n-    public static final FieldValueType DATE = fromString(\"date\");\n-\n-    /**\n-     * Static value time for FieldValueType.\n-     */\n-    public static final FieldValueType TIME = fromString(\"time\");\n-\n-    /**\n-     * Static value phone number for FieldValueType.\n-     */\n-    public static final FieldValueType PHONE_NUMBER = fromString(\"phoneNumber\");\n-\n-    /**\n-     * Static value float for FieldValueType.\n-     */\n-    public static final FieldValueType FLOAT = fromString(\"number\");\n-\n-    /**\n-     * Static value integer for FieldValueType.\n-     */\n-    public static final FieldValueType INTEGER = fromString(\"integer\");\n-\n-    /**\n-     * Static value list for FieldValueType.\n-     */\n-    public static final FieldValueType LIST = fromString(\"array\");\n-\n-    /**\n-     * Static value map for FieldValueType.\n-     */\n-    public static final FieldValueType MAP = fromString(\"object\");\n-\n-    /**\n-     * Parses a serialized value to a {@link FieldValueType} instance.\n-     *\n-     * @param value the serialized value to parse.\n-     *\n-     * @return the parsed FieldValueType object, or null if unable to parse.\n-     */\n-    public static FieldValueType fromString(String value) {\n-        return fromString(value, FieldValueType.class);\n-    }\n-\n-    /**\n-     * Converts the form field value to a specific expandable string enum type.\n-     *\n-     * @param formField The recognized field value that needs to be converted.\n-     * @param <T> the class of the field.\n-     *\n-     * @return the converted value of the recognized field.\n-     * @throws UnsupportedOperationException if the {@code formField} type does not match the casting value type.\n-     * @throws NullPointerException if {@code formField} is {@code null}\n-     */\n-    @SuppressWarnings({\"unchecked\"})\n-    public <T> T cast(FormField<?> formField) {\n-        Objects.requireNonNull(formField, \"'formField' cannot be null\");\n-        if (DATE.equals(this)) {\n-            if (DATE == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else {\n-                logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast operation \"\n-                    + \"or field value of type: %s\", formField.getValueType())));\n-            }\n-        }\n-        if (TIME.equals(this)) {\n-            if (TIME == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else {\n-                logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast operation \"\n-                    + \"or field value of type: %s\", formField.getValueType())));\n-            }\n-        }\n-        if (PHONE_NUMBER.equals(this)) {\n-            if (PHONE_NUMBER == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else {\n-                throw logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast \"\n-                    + \"operation for field value of type: %s\", formField.getValueType())));\n-            }\n-        }\n-        if (LIST.equals(this)) {\n-            if (LIST == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else {\n-                throw logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast \"\n-                    + \"operation or field value of type: %s\", formField.getValueType())));\n-            }\n-        }\n-        if (MAP.equals(this)) {\n-            if (MAP == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else {\n-                throw logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast \"\n-                    + \"operation or field value of type: %s\", formField.getValueType())));\n-            }\n-        }\n-        if (FLOAT.equals(this)) {\n-            if (FLOAT == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else {\n-                throw logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast \"\n-                    + \"operation or field value of type: %s\", formField.getValueType())));\n-            }\n-        }\n-        if (INTEGER.equals(this)) {\n-            if (INTEGER == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else {\n-                throw logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast \"\n-                    + \"operation or field value of type: %s\", formField.getValueType())));\n-            }\n-        }\n-        if (STRING.equals(this)) {\n-            if (STRING == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else {\n-                throw logger.logExceptionAsError(new UnsupportedOperationException(String.format(\"Unsupported cast \"\n-                    + \"operation or field value of type: %s\", formField.getValueType())));\n-            }\n-        }\n-        return (T) formField.getValue();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5NTA3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12380#discussion_r450395078", "bodyText": "Call this method isFieldValueNull().", "author": "srnagar", "createdAt": "2020-07-06T18:08:16Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java", "diffHunk": "@@ -3,62 +3,182 @@\n \n package com.azure.ai.formrecognizer.models;\n \n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonValue;\n+import com.azure.core.util.logging.ClientLogger;\n \n-/** Defines values for FieldValueType. */\n+import java.time.LocalDate;\n+import java.time.LocalTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+\n+/**\n+ * Define enum values for FieldValue types.\n+ */\n+@SuppressWarnings(\"unchecked\")\n public enum FieldValueType {\n-    /** Enum value string. */\n-    STRING(\"string\"),\n+    /**\n+     * Static value string for FieldValueType.\n+     */\n+    STRING {\n+        @Override\n+        public <T> T cast(FormField<?> formField) {\n+            if (getDefaultOrNull(formField)) {\n+                return null;\n+            }\n+            return (T) String.valueOf(formField.getValue());\n+        }\n+    },\n \n-    /** Enum value date. */\n-    DATE(\"date\"),\n+    /**\n+     * Static value date for FieldValueType.\n+     */\n+    DATE {\n+        @Override\n+        public <T> T cast(FormField<?> formField) {\n+            if (getDefaultOrNull(formField)) {\n+                return null;\n+            }\n+            if (this == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else if (STRING == formField.getValueType()) {\n+                return (T) LocalDate.parse(formField.getValue().toString(), DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"));\n+            } else {\n+                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n+                    + \"field value of type %s to type %s\", formField.getValueType(), DATE)));\n+            }\n+        }\n+    },\n \n-    /** Enum value time. */\n-    TIME(\"time\"),\n+    /**\n+     * Static value time for FieldValueType.\n+     */\n+    TIME {\n+        @Override\n+        public <T> T cast(FormField<?> formField) {\n+            if (getDefaultOrNull(formField)) {\n+                return null;\n+            }\n+            if (this == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else if (STRING == formField.getValueType()) {\n+                return (T) LocalTime.parse(formField.getValue().toString(), DateTimeFormatter.ofPattern(\"HH:mm:ss\"));\n+            } else {\n+                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n+                    + \"field value of type %s to type %s\", formField.getValueType(), TIME)));\n+            }\n+        }\n+    },\n \n-    /** Enum value phoneNumber. */\n-    PHONE_NUMBER(\"phoneNumber\"),\n+    /**\n+     * Static value phone number for FieldValueType.\n+     */\n+    PHONE_NUMBER {\n+        @Override\n+        public <T> T cast(FormField<?> formField) {\n+            if (getDefaultOrNull(formField)) {\n+                return null;\n+            }\n+            if (this == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else if (STRING == formField.getValueType()) {\n+                return (T) formField.getValue().toString();\n+            } else {\n+                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n+                    + \"field value of type %s to type %s\", formField.getValueType(), PHONE_NUMBER)));\n+            }\n+        }\n+    },\n \n-    /** Enum value number. */\n-    FLOAT(\"float\"),\n+    /**\n+     * Static value double for FieldValueType.\n+     */\n+    DOUBLE {\n+        @Override\n+        public <T> T cast(FormField<?> formField) {\n+            if (getDefaultOrNull(formField)) {\n+                return null;\n+            }\n+            if (this == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else if (STRING == formField.getValueType()) {\n+                return (T) Double.valueOf(formField.getValue().toString());\n+            } else {\n+                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n+                    + \"field value of type %s to type %s\", formField.getValueType(), DOUBLE)));\n+            }\n+        }\n+    },\n \n-    /** Enum value integer. */\n-    INTEGER(\"integer\"),\n+    /**\n+     * Static value long for FieldValueType.\n+     */\n+    LONG {\n+        @Override\n+        public <T> T cast(FormField<?> formField) {\n+            if (getDefaultOrNull(formField)) {\n+                return null;\n+            }\n+            if (this == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else if (STRING == formField.getValueType()) {\n+                return (T) Long.valueOf(formField.getValue().toString());\n+            } else {\n+                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n+                    + \"field value of type %s to type %s\", formField.getValueType(), LONG)));\n+            }\n+        }\n+    },\n \n-    /** Enum value array. */\n-    LIST(\"list\"),\n+    /**\n+     * Static value list for FieldValueType.\n+     */\n+    LIST {\n+        @Override\n+        public <T> T cast(FormField<?> formField) {\n+            return getCollectionTypeCast(formField);\n+        }\n+    },\n \n-    /** Enum value object. */\n-    MAP(\"map\");\n+    /**\n+     * Static value map for FieldValueType.\n+     */\n+    MAP {\n+        @Override\n+        public <T> T cast(FormField<?> formField) {\n+            return getCollectionTypeCast(formField);\n+        }\n+    };\n \n-    /** The actual serialized value for a FieldValueType instance. */\n-    private final String value;\n+    static boolean getDefaultOrNull(FormField<?> formField) {", "originalCommit": "4537617dc7a97596f359ca8b1d9150d50b8a97c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc1995afd553760d72ffff7799e542171e36f7c8", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java\ndeleted file mode 100644\nindex a2c908d1f05..00000000000\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java\n+++ /dev/null\n\n@@ -1,184 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.ai.formrecognizer.models;\n-\n-import com.azure.core.util.logging.ClientLogger;\n-\n-import java.time.LocalDate;\n-import java.time.LocalTime;\n-import java.time.format.DateTimeFormatter;\n-import java.util.Objects;\n-\n-/**\n- * Define enum values for FieldValue types.\n- */\n-@SuppressWarnings(\"unchecked\")\n-public enum FieldValueType {\n-    /**\n-     * Static value string for FieldValueType.\n-     */\n-    STRING {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            if (getDefaultOrNull(formField)) {\n-                return null;\n-            }\n-            return (T) String.valueOf(formField.getValue());\n-        }\n-    },\n-\n-    /**\n-     * Static value date for FieldValueType.\n-     */\n-    DATE {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            if (getDefaultOrNull(formField)) {\n-                return null;\n-            }\n-            if (this == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else if (STRING == formField.getValueType()) {\n-                return (T) LocalDate.parse(formField.getValue().toString(), DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"));\n-            } else {\n-                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n-                    + \"field value of type %s to type %s\", formField.getValueType(), DATE)));\n-            }\n-        }\n-    },\n-\n-    /**\n-     * Static value time for FieldValueType.\n-     */\n-    TIME {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            if (getDefaultOrNull(formField)) {\n-                return null;\n-            }\n-            if (this == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else if (STRING == formField.getValueType()) {\n-                return (T) LocalTime.parse(formField.getValue().toString(), DateTimeFormatter.ofPattern(\"HH:mm:ss\"));\n-            } else {\n-                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n-                    + \"field value of type %s to type %s\", formField.getValueType(), TIME)));\n-            }\n-        }\n-    },\n-\n-    /**\n-     * Static value phone number for FieldValueType.\n-     */\n-    PHONE_NUMBER {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            if (getDefaultOrNull(formField)) {\n-                return null;\n-            }\n-            if (this == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else if (STRING == formField.getValueType()) {\n-                return (T) formField.getValue().toString();\n-            } else {\n-                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n-                    + \"field value of type %s to type %s\", formField.getValueType(), PHONE_NUMBER)));\n-            }\n-        }\n-    },\n-\n-    /**\n-     * Static value double for FieldValueType.\n-     */\n-    DOUBLE {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            if (getDefaultOrNull(formField)) {\n-                return null;\n-            }\n-            if (this == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else if (STRING == formField.getValueType()) {\n-                return (T) Double.valueOf(formField.getValue().toString());\n-            } else {\n-                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n-                    + \"field value of type %s to type %s\", formField.getValueType(), DOUBLE)));\n-            }\n-        }\n-    },\n-\n-    /**\n-     * Static value long for FieldValueType.\n-     */\n-    LONG {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            if (getDefaultOrNull(formField)) {\n-                return null;\n-            }\n-            if (this == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else if (STRING == formField.getValueType()) {\n-                return (T) Long.valueOf(formField.getValue().toString());\n-            } else {\n-                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n-                    + \"field value of type %s to type %s\", formField.getValueType(), LONG)));\n-            }\n-        }\n-    },\n-\n-    /**\n-     * Static value list for FieldValueType.\n-     */\n-    LIST {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            return getCollectionTypeCast(formField);\n-        }\n-    },\n-\n-    /**\n-     * Static value map for FieldValueType.\n-     */\n-    MAP {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            return getCollectionTypeCast(formField);\n-        }\n-    };\n-\n-    static boolean getDefaultOrNull(FormField<?> formField) {\n-        Objects.requireNonNull(formField, \"'formField' cannot be null\");\n-        if (formField.getValue() == null) {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    <T> T getCollectionTypeCast(FormField<?> formField) {\n-        if (getDefaultOrNull(formField)) {\n-            return null;\n-        }\n-        if (this == formField.getValueType()) {\n-            return (T) formField.getValue();\n-        } else {\n-            throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n-                + \"field value of type %s to type %s\", formField.getValueType(), this)));\n-        }\n-    }\n-\n-    private static final ClientLogger LOGGER = new ClientLogger(FieldValueType.class);\n-\n-    /**\n-     * Converts the form field value to a specific enum type.\n-     *\n-     * @param formField The recognized field value that needs to be converted.\n-     * @param <T> the class of the field.\n-     *\n-     * @return the converted value of the recognized field.\n-     * @throws UnsupportedOperationException if the {@code formField} type does not match the casting value type.\n-     * @throws NullPointerException if {@code formField} is {@code null}\n-     */\n-    public abstract <T> T cast(FormField<?> formField);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5NTQxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12380#discussion_r450395413", "bodyText": "This can be replaced by return formField.getValue() == null.", "author": "srnagar", "createdAt": "2020-07-06T18:09:00Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java", "diffHunk": "@@ -3,62 +3,182 @@\n \n package com.azure.ai.formrecognizer.models;\n \n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonValue;\n+import com.azure.core.util.logging.ClientLogger;\n \n-/** Defines values for FieldValueType. */\n+import java.time.LocalDate;\n+import java.time.LocalTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+\n+/**\n+ * Define enum values for FieldValue types.\n+ */\n+@SuppressWarnings(\"unchecked\")\n public enum FieldValueType {\n-    /** Enum value string. */\n-    STRING(\"string\"),\n+    /**\n+     * Static value string for FieldValueType.\n+     */\n+    STRING {\n+        @Override\n+        public <T> T cast(FormField<?> formField) {\n+            if (getDefaultOrNull(formField)) {\n+                return null;\n+            }\n+            return (T) String.valueOf(formField.getValue());\n+        }\n+    },\n \n-    /** Enum value date. */\n-    DATE(\"date\"),\n+    /**\n+     * Static value date for FieldValueType.\n+     */\n+    DATE {\n+        @Override\n+        public <T> T cast(FormField<?> formField) {\n+            if (getDefaultOrNull(formField)) {\n+                return null;\n+            }\n+            if (this == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else if (STRING == formField.getValueType()) {\n+                return (T) LocalDate.parse(formField.getValue().toString(), DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"));\n+            } else {\n+                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n+                    + \"field value of type %s to type %s\", formField.getValueType(), DATE)));\n+            }\n+        }\n+    },\n \n-    /** Enum value time. */\n-    TIME(\"time\"),\n+    /**\n+     * Static value time for FieldValueType.\n+     */\n+    TIME {\n+        @Override\n+        public <T> T cast(FormField<?> formField) {\n+            if (getDefaultOrNull(formField)) {\n+                return null;\n+            }\n+            if (this == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else if (STRING == formField.getValueType()) {\n+                return (T) LocalTime.parse(formField.getValue().toString(), DateTimeFormatter.ofPattern(\"HH:mm:ss\"));\n+            } else {\n+                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n+                    + \"field value of type %s to type %s\", formField.getValueType(), TIME)));\n+            }\n+        }\n+    },\n \n-    /** Enum value phoneNumber. */\n-    PHONE_NUMBER(\"phoneNumber\"),\n+    /**\n+     * Static value phone number for FieldValueType.\n+     */\n+    PHONE_NUMBER {\n+        @Override\n+        public <T> T cast(FormField<?> formField) {\n+            if (getDefaultOrNull(formField)) {\n+                return null;\n+            }\n+            if (this == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else if (STRING == formField.getValueType()) {\n+                return (T) formField.getValue().toString();\n+            } else {\n+                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n+                    + \"field value of type %s to type %s\", formField.getValueType(), PHONE_NUMBER)));\n+            }\n+        }\n+    },\n \n-    /** Enum value number. */\n-    FLOAT(\"float\"),\n+    /**\n+     * Static value double for FieldValueType.\n+     */\n+    DOUBLE {\n+        @Override\n+        public <T> T cast(FormField<?> formField) {\n+            if (getDefaultOrNull(formField)) {\n+                return null;\n+            }\n+            if (this == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else if (STRING == formField.getValueType()) {\n+                return (T) Double.valueOf(formField.getValue().toString());\n+            } else {\n+                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n+                    + \"field value of type %s to type %s\", formField.getValueType(), DOUBLE)));\n+            }\n+        }\n+    },\n \n-    /** Enum value integer. */\n-    INTEGER(\"integer\"),\n+    /**\n+     * Static value long for FieldValueType.\n+     */\n+    LONG {\n+        @Override\n+        public <T> T cast(FormField<?> formField) {\n+            if (getDefaultOrNull(formField)) {\n+                return null;\n+            }\n+            if (this == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else if (STRING == formField.getValueType()) {\n+                return (T) Long.valueOf(formField.getValue().toString());\n+            } else {\n+                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n+                    + \"field value of type %s to type %s\", formField.getValueType(), LONG)));\n+            }\n+        }\n+    },\n \n-    /** Enum value array. */\n-    LIST(\"list\"),\n+    /**\n+     * Static value list for FieldValueType.\n+     */\n+    LIST {\n+        @Override\n+        public <T> T cast(FormField<?> formField) {\n+            return getCollectionTypeCast(formField);\n+        }\n+    },\n \n-    /** Enum value object. */\n-    MAP(\"map\");\n+    /**\n+     * Static value map for FieldValueType.\n+     */\n+    MAP {\n+        @Override\n+        public <T> T cast(FormField<?> formField) {\n+            return getCollectionTypeCast(formField);\n+        }\n+    };\n \n-    /** The actual serialized value for a FieldValueType instance. */\n-    private final String value;\n+    static boolean getDefaultOrNull(FormField<?> formField) {\n+        Objects.requireNonNull(formField, \"'formField' cannot be null\");\n+        if (formField.getValue() == null) {\n+            return true;\n+        }\n+        return false;", "originalCommit": "4537617dc7a97596f359ca8b1d9150d50b8a97c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc1995afd553760d72ffff7799e542171e36f7c8", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java\ndeleted file mode 100644\nindex a2c908d1f05..00000000000\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java\n+++ /dev/null\n\n@@ -1,184 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.ai.formrecognizer.models;\n-\n-import com.azure.core.util.logging.ClientLogger;\n-\n-import java.time.LocalDate;\n-import java.time.LocalTime;\n-import java.time.format.DateTimeFormatter;\n-import java.util.Objects;\n-\n-/**\n- * Define enum values for FieldValue types.\n- */\n-@SuppressWarnings(\"unchecked\")\n-public enum FieldValueType {\n-    /**\n-     * Static value string for FieldValueType.\n-     */\n-    STRING {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            if (getDefaultOrNull(formField)) {\n-                return null;\n-            }\n-            return (T) String.valueOf(formField.getValue());\n-        }\n-    },\n-\n-    /**\n-     * Static value date for FieldValueType.\n-     */\n-    DATE {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            if (getDefaultOrNull(formField)) {\n-                return null;\n-            }\n-            if (this == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else if (STRING == formField.getValueType()) {\n-                return (T) LocalDate.parse(formField.getValue().toString(), DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"));\n-            } else {\n-                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n-                    + \"field value of type %s to type %s\", formField.getValueType(), DATE)));\n-            }\n-        }\n-    },\n-\n-    /**\n-     * Static value time for FieldValueType.\n-     */\n-    TIME {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            if (getDefaultOrNull(formField)) {\n-                return null;\n-            }\n-            if (this == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else if (STRING == formField.getValueType()) {\n-                return (T) LocalTime.parse(formField.getValue().toString(), DateTimeFormatter.ofPattern(\"HH:mm:ss\"));\n-            } else {\n-                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n-                    + \"field value of type %s to type %s\", formField.getValueType(), TIME)));\n-            }\n-        }\n-    },\n-\n-    /**\n-     * Static value phone number for FieldValueType.\n-     */\n-    PHONE_NUMBER {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            if (getDefaultOrNull(formField)) {\n-                return null;\n-            }\n-            if (this == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else if (STRING == formField.getValueType()) {\n-                return (T) formField.getValue().toString();\n-            } else {\n-                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n-                    + \"field value of type %s to type %s\", formField.getValueType(), PHONE_NUMBER)));\n-            }\n-        }\n-    },\n-\n-    /**\n-     * Static value double for FieldValueType.\n-     */\n-    DOUBLE {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            if (getDefaultOrNull(formField)) {\n-                return null;\n-            }\n-            if (this == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else if (STRING == formField.getValueType()) {\n-                return (T) Double.valueOf(formField.getValue().toString());\n-            } else {\n-                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n-                    + \"field value of type %s to type %s\", formField.getValueType(), DOUBLE)));\n-            }\n-        }\n-    },\n-\n-    /**\n-     * Static value long for FieldValueType.\n-     */\n-    LONG {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            if (getDefaultOrNull(formField)) {\n-                return null;\n-            }\n-            if (this == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else if (STRING == formField.getValueType()) {\n-                return (T) Long.valueOf(formField.getValue().toString());\n-            } else {\n-                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n-                    + \"field value of type %s to type %s\", formField.getValueType(), LONG)));\n-            }\n-        }\n-    },\n-\n-    /**\n-     * Static value list for FieldValueType.\n-     */\n-    LIST {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            return getCollectionTypeCast(formField);\n-        }\n-    },\n-\n-    /**\n-     * Static value map for FieldValueType.\n-     */\n-    MAP {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            return getCollectionTypeCast(formField);\n-        }\n-    };\n-\n-    static boolean getDefaultOrNull(FormField<?> formField) {\n-        Objects.requireNonNull(formField, \"'formField' cannot be null\");\n-        if (formField.getValue() == null) {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    <T> T getCollectionTypeCast(FormField<?> formField) {\n-        if (getDefaultOrNull(formField)) {\n-            return null;\n-        }\n-        if (this == formField.getValueType()) {\n-            return (T) formField.getValue();\n-        } else {\n-            throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n-                + \"field value of type %s to type %s\", formField.getValueType(), this)));\n-        }\n-    }\n-\n-    private static final ClientLogger LOGGER = new ClientLogger(FieldValueType.class);\n-\n-    /**\n-     * Converts the form field value to a specific enum type.\n-     *\n-     * @param formField The recognized field value that needs to be converted.\n-     * @param <T> the class of the field.\n-     *\n-     * @return the converted value of the recognized field.\n-     * @throws UnsupportedOperationException if the {@code formField} type does not match the casting value type.\n-     * @throws NullPointerException if {@code formField} is {@code null}\n-     */\n-    public abstract <T> T cast(FormField<?> formField);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5OTAxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12380#discussion_r450399013", "bodyText": "Is toString() required? It's already of STRING type.", "author": "srnagar", "createdAt": "2020-07-06T18:16:26Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java", "diffHunk": "@@ -3,62 +3,182 @@\n \n package com.azure.ai.formrecognizer.models;\n \n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonValue;\n+import com.azure.core.util.logging.ClientLogger;\n \n-/** Defines values for FieldValueType. */\n+import java.time.LocalDate;\n+import java.time.LocalTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+\n+/**\n+ * Define enum values for FieldValue types.\n+ */\n+@SuppressWarnings(\"unchecked\")\n public enum FieldValueType {\n-    /** Enum value string. */\n-    STRING(\"string\"),\n+    /**\n+     * Static value string for FieldValueType.\n+     */\n+    STRING {\n+        @Override\n+        public <T> T cast(FormField<?> formField) {\n+            if (getDefaultOrNull(formField)) {\n+                return null;\n+            }\n+            return (T) String.valueOf(formField.getValue());\n+        }\n+    },\n \n-    /** Enum value date. */\n-    DATE(\"date\"),\n+    /**\n+     * Static value date for FieldValueType.\n+     */\n+    DATE {\n+        @Override\n+        public <T> T cast(FormField<?> formField) {\n+            if (getDefaultOrNull(formField)) {\n+                return null;\n+            }\n+            if (this == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else if (STRING == formField.getValueType()) {\n+                return (T) LocalDate.parse(formField.getValue().toString(), DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"));\n+            } else {\n+                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n+                    + \"field value of type %s to type %s\", formField.getValueType(), DATE)));\n+            }\n+        }\n+    },\n \n-    /** Enum value time. */\n-    TIME(\"time\"),\n+    /**\n+     * Static value time for FieldValueType.\n+     */\n+    TIME {\n+        @Override\n+        public <T> T cast(FormField<?> formField) {\n+            if (getDefaultOrNull(formField)) {\n+                return null;\n+            }\n+            if (this == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else if (STRING == formField.getValueType()) {\n+                return (T) LocalTime.parse(formField.getValue().toString(), DateTimeFormatter.ofPattern(\"HH:mm:ss\"));\n+            } else {\n+                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n+                    + \"field value of type %s to type %s\", formField.getValueType(), TIME)));\n+            }\n+        }\n+    },\n \n-    /** Enum value phoneNumber. */\n-    PHONE_NUMBER(\"phoneNumber\"),\n+    /**\n+     * Static value phone number for FieldValueType.\n+     */\n+    PHONE_NUMBER {\n+        @Override\n+        public <T> T cast(FormField<?> formField) {\n+            if (getDefaultOrNull(formField)) {\n+                return null;\n+            }\n+            if (this == formField.getValueType()) {\n+                return (T) formField.getValue();\n+            } else if (STRING == formField.getValueType()) {\n+                return (T) formField.getValue().toString();", "originalCommit": "4537617dc7a97596f359ca8b1d9150d50b8a97c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc1995afd553760d72ffff7799e542171e36f7c8", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java\ndeleted file mode 100644\nindex a2c908d1f05..00000000000\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FieldValueType.java\n+++ /dev/null\n\n@@ -1,184 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.ai.formrecognizer.models;\n-\n-import com.azure.core.util.logging.ClientLogger;\n-\n-import java.time.LocalDate;\n-import java.time.LocalTime;\n-import java.time.format.DateTimeFormatter;\n-import java.util.Objects;\n-\n-/**\n- * Define enum values for FieldValue types.\n- */\n-@SuppressWarnings(\"unchecked\")\n-public enum FieldValueType {\n-    /**\n-     * Static value string for FieldValueType.\n-     */\n-    STRING {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            if (getDefaultOrNull(formField)) {\n-                return null;\n-            }\n-            return (T) String.valueOf(formField.getValue());\n-        }\n-    },\n-\n-    /**\n-     * Static value date for FieldValueType.\n-     */\n-    DATE {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            if (getDefaultOrNull(formField)) {\n-                return null;\n-            }\n-            if (this == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else if (STRING == formField.getValueType()) {\n-                return (T) LocalDate.parse(formField.getValue().toString(), DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"));\n-            } else {\n-                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n-                    + \"field value of type %s to type %s\", formField.getValueType(), DATE)));\n-            }\n-        }\n-    },\n-\n-    /**\n-     * Static value time for FieldValueType.\n-     */\n-    TIME {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            if (getDefaultOrNull(formField)) {\n-                return null;\n-            }\n-            if (this == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else if (STRING == formField.getValueType()) {\n-                return (T) LocalTime.parse(formField.getValue().toString(), DateTimeFormatter.ofPattern(\"HH:mm:ss\"));\n-            } else {\n-                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n-                    + \"field value of type %s to type %s\", formField.getValueType(), TIME)));\n-            }\n-        }\n-    },\n-\n-    /**\n-     * Static value phone number for FieldValueType.\n-     */\n-    PHONE_NUMBER {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            if (getDefaultOrNull(formField)) {\n-                return null;\n-            }\n-            if (this == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else if (STRING == formField.getValueType()) {\n-                return (T) formField.getValue().toString();\n-            } else {\n-                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n-                    + \"field value of type %s to type %s\", formField.getValueType(), PHONE_NUMBER)));\n-            }\n-        }\n-    },\n-\n-    /**\n-     * Static value double for FieldValueType.\n-     */\n-    DOUBLE {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            if (getDefaultOrNull(formField)) {\n-                return null;\n-            }\n-            if (this == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else if (STRING == formField.getValueType()) {\n-                return (T) Double.valueOf(formField.getValue().toString());\n-            } else {\n-                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n-                    + \"field value of type %s to type %s\", formField.getValueType(), DOUBLE)));\n-            }\n-        }\n-    },\n-\n-    /**\n-     * Static value long for FieldValueType.\n-     */\n-    LONG {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            if (getDefaultOrNull(formField)) {\n-                return null;\n-            }\n-            if (this == formField.getValueType()) {\n-                return (T) formField.getValue();\n-            } else if (STRING == formField.getValueType()) {\n-                return (T) Long.valueOf(formField.getValue().toString());\n-            } else {\n-                throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n-                    + \"field value of type %s to type %s\", formField.getValueType(), LONG)));\n-            }\n-        }\n-    },\n-\n-    /**\n-     * Static value list for FieldValueType.\n-     */\n-    LIST {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            return getCollectionTypeCast(formField);\n-        }\n-    },\n-\n-    /**\n-     * Static value map for FieldValueType.\n-     */\n-    MAP {\n-        @Override\n-        public <T> T cast(FormField<?> formField) {\n-            return getCollectionTypeCast(formField);\n-        }\n-    };\n-\n-    static boolean getDefaultOrNull(FormField<?> formField) {\n-        Objects.requireNonNull(formField, \"'formField' cannot be null\");\n-        if (formField.getValue() == null) {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    <T> T getCollectionTypeCast(FormField<?> formField) {\n-        if (getDefaultOrNull(formField)) {\n-            return null;\n-        }\n-        if (this == formField.getValueType()) {\n-            return (T) formField.getValue();\n-        } else {\n-            throw LOGGER.logExceptionAsError(new UnsupportedOperationException(String.format(\"Cannot cast from \"\n-                + \"field value of type %s to type %s\", formField.getValueType(), this)));\n-        }\n-    }\n-\n-    private static final ClientLogger LOGGER = new ClientLogger(FieldValueType.class);\n-\n-    /**\n-     * Converts the form field value to a specific enum type.\n-     *\n-     * @param formField The recognized field value that needs to be converted.\n-     * @param <T> the class of the field.\n-     *\n-     * @return the converted value of the recognized field.\n-     * @throws UnsupportedOperationException if the {@code formField} type does not match the casting value type.\n-     * @throws NullPointerException if {@code formField} is {@code null}\n-     */\n-    public abstract <T> T cast(FormField<?> formField);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwMDc2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12380#discussion_r450400766", "bodyText": "This line is applicable to the next method.", "author": "srnagar", "createdAt": "2020-07-06T18:20:00Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FormField.java", "diffHunk": "@@ -65,14 +68,26 @@ public String getName() {\n     /**\n      * Get the value of the recognized field.\n      *\n-     * @return Value of the recognized field.\n+     * @return the value of the recognized field.\n      */\n-    public FieldValue getFieldValue() {\n-        return this.fieldValue;\n+    public T getValue() {\n+        return this.value;\n     }\n \n     /**\n      * Get the text, bounding box, and field elements for the field value.", "originalCommit": "4537617dc7a97596f359ca8b1d9150d50b8a97c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc1995afd553760d72ffff7799e542171e36f7c8", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FormField.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FormField.java\nindex ddcf003a53c..fb32c069e93 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FormField.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/FormField.java\n\n@@ -68,26 +65,14 @@ public final class FormField<T> {\n     /**\n      * Get the value of the recognized field.\n      *\n-     * @return the value of the recognized field.\n+     * @return Value of the recognized field.\n      */\n-    public T getValue() {\n-        return this.value;\n+    public T getFieldValue() {\n+        return this.fieldValue;\n     }\n \n     /**\n      * Get the text, bounding box, and field elements for the field value.\n-     * The type of the value of the recognized field.\n-     * Possible types include: 'String',\n-     * 'LocalDate', 'LocalTime', 'Integer', 'Float', 'Map', or 'List'.\n-     *\n-     * @return the type of the value of the field.\n-     */\n-    public FieldValueType getValueType() {\n-        return valueType;\n-    }\n-\n-    /**\n-     * Get the text, bounding box, and text content of the field value.\n      *\n      * @return the text, bounding box, and field elements for the field value.\n      */\n"}}, {"oid": "bc1995afd553760d72ffff7799e542171e36f7c8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bc1995afd553760d72ffff7799e542171e36f7c8", "message": "receipt design update", "committedDate": "2020-07-06T18:46:22Z", "type": "commit"}, {"oid": "6861dedaa5f115f35816902a075ea293058ef3b3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6861dedaa5f115f35816902a075ea293058ef3b3", "message": "update changelog and add casting in samples", "committedDate": "2020-07-06T18:48:20Z", "type": "commit"}, {"oid": "907fa784993a8ab58bbd974ca48bebebca93dc33", "url": "https://github.com/Azure/azure-sdk-for-java/commit/907fa784993a8ab58bbd974ca48bebebca93dc33", "message": "change model names, inner class", "committedDate": "2020-07-06T18:49:23Z", "type": "commit"}, {"oid": "0d391aa411f2efccc68d7b2fc8fc258ae9e29b52", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0d391aa411f2efccc68d7b2fc8fc258ae9e29b52", "message": "add enum casting", "committedDate": "2020-07-06T18:52:23Z", "type": "commit"}, {"oid": "8637588f5f663501a36415078cd9fd2d3ec9c0b2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8637588f5f663501a36415078cd9fd2d3ec9c0b2", "message": "update testing validation", "committedDate": "2020-07-06T18:52:30Z", "type": "commit"}, {"oid": "88364a320496c1acc842ba9703c28a342132f30e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/88364a320496c1acc842ba9703c28a342132f30e", "message": "Integer enum", "committedDate": "2020-07-06T19:07:30Z", "type": "commit"}, {"oid": "b3f9ae47994460dacf2189bd67a294c88357bb14", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b3f9ae47994460dacf2189bd67a294c88357bb14", "message": "add best value conversion", "committedDate": "2020-07-06T19:07:45Z", "type": "commit"}, {"oid": "0d91645c9f4b7c7a7ad0312fccc8a2dbe38fd5f0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0d91645c9f4b7c7a7ad0312fccc8a2dbe38fd5f0", "message": "add readme update", "committedDate": "2020-07-06T19:26:21Z", "type": "commit"}, {"oid": "0d91645c9f4b7c7a7ad0312fccc8a2dbe38fd5f0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0d91645c9f4b7c7a7ad0312fccc8a2dbe38fd5f0", "message": "add readme update", "committedDate": "2020-07-06T19:26:21Z", "type": "forcePushed"}, {"oid": "8bc9e149d5c336bf6bffd07a56a520e465b91e11", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8bc9e149d5c336bf6bffd07a56a520e465b91e11", "message": "review comments", "committedDate": "2020-07-06T19:30:20Z", "type": "commit"}]}