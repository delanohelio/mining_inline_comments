{"pr_number": 12260, "pr_title": "Changefeed - Created an interface and put implementation details in implementation", "pr_createdAt": "2020-06-16T16:23:04Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/12260", "timeline": [{"oid": "b60d748fcd121b42fa1c8bbbfb81a4033f9f0a7d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b60d748fcd121b42fa1c8bbbfb81a4033f9f0a7d", "message": "Created an interface and put implementation details in implementation", "committedDate": "2020-06-16T16:21:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5MjgyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#discussion_r440992829", "bodyText": "Should I call this ...EventImpl? Analyze Step is mad at me for keeping the same name", "author": "gapra-msft", "createdAt": "2020-06-16T16:40:48Z", "path": "sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java", "diffHunk": "@@ -0,0 +1,212 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.changefeed.implementation.models;\n+\n+import com.azure.storage.blob.changefeed.models.BlobChangefeedEventType;\n+import com.azure.storage.internal.avro.implementation.AvroConstants;\n+import com.azure.storage.internal.avro.implementation.schema.AvroSchema;\n+import com.azure.storage.internal.avro.implementation.schema.primitive.AvroNullSchema;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class contains properties of a BlobChangefeedEvent.\n+ */\n+public class BlobChangefeedEvent implements com.azure.storage.blob.changefeed.models.BlobChangefeedEvent {", "originalCommit": "b60d748fcd121b42fa1c8bbbfb81a4033f9f0a7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5NjQyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#discussion_r440996428", "bodyText": "Noooooo https://octoperf.com/blog/2016/10/27/impl-classes-are-evil/ . :)\nMaybe InternalBlobChangefeedEvent ?", "author": "kasobol-msft", "createdAt": "2020-06-16T16:46:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5MjgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwMDU5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#discussion_r441000598", "bodyText": "haha, I'll go with Internal", "author": "gapra-msft", "createdAt": "2020-06-16T16:53:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5MjgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwMjg5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#discussion_r441002890", "bodyText": "renamed to Internal", "author": "gapra-msft", "createdAt": "2020-06-16T16:57:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5MjgyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c98968eb01d250232d782bcd3ddb9822d6fbbb33", "chunk": "diff --git a/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java b/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java\nindex 64904739c47..0957a6d82b7 100644\n--- a/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java\n+++ b/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java\n\n@@ -129,58 +129,41 @@ public class BlobChangefeedEvent implements com.azure.storage.blob.changefeed.mo\n         return (boolean) o;\n     }\n \n-    /**\n-     * @return the topic.\n-     */\n+    @Override\n     public String getTopic() {\n         return topic;\n     }\n \n-    /**\n-     * @return the subject.\n-     */\n+    @Override\n     public String getSubject() {\n         return subject;\n     }\n \n-    /**\n-     * @return {@link BlobChangefeedEventType}\n-     */\n+    @Override\n     public BlobChangefeedEventType getEventType() {\n         return eventType;\n     }\n \n-    /**\n-     * @return The {@link OffsetDateTime event time}.\n-     */\n+    @Override\n     public OffsetDateTime getEventTime() {\n         return eventTime;\n     }\n \n-    /**\n-     * @return the identifer.\n-     */\n+    @Override\n     public String getId() {\n         return id;\n     }\n \n-    /**\n-     * @return {@link BlobChangefeedEventData}.\n-     */\n+    @Override\n     public com.azure.storage.blob.changefeed.models.BlobChangefeedEventData getData() {\n         return data;\n     }\n \n-    /**\n-     * @return the data version.\n-     */\n     public Long getDataVersion() {\n         return dataVersion;\n     }\n \n-    /**\n-     * @return the metadata version.\n-     */\n+    @Override\n     public String getMetadataVersion() {\n         return metadataVersion;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5MTM4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#discussion_r440991386", "bodyText": "all of this could be\nstatic <T> T nullOr(String name, Object o, Class<T> clazz)\n\nSee https://docs.oracle.com/javase/tutorial/extra/generics/methods.html", "author": "kasobol-msft", "createdAt": "2020-06-16T16:38:45Z", "path": "sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java", "diffHunk": "@@ -0,0 +1,212 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.changefeed.implementation.models;\n+\n+import com.azure.storage.blob.changefeed.models.BlobChangefeedEventType;\n+import com.azure.storage.internal.avro.implementation.AvroConstants;\n+import com.azure.storage.internal.avro.implementation.schema.AvroSchema;\n+import com.azure.storage.internal.avro.implementation.schema.primitive.AvroNullSchema;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class contains properties of a BlobChangefeedEvent.\n+ */\n+public class BlobChangefeedEvent implements com.azure.storage.blob.changefeed.models.BlobChangefeedEvent {\n+\n+    private final String topic;\n+    private final String subject;\n+    private final BlobChangefeedEventType eventType;\n+    private final OffsetDateTime eventTime;\n+    private final String id;\n+    private final com.azure.storage.blob.changefeed.models.BlobChangefeedEventData data;\n+    private final Long dataVersion;\n+    private final String metadataVersion;\n+\n+    /**\n+     * Constructs a {@link BlobChangefeedEvent}.\n+     *\n+     * @param topic The topic.\n+     * @param subject The subject.\n+     * @param eventType {@link BlobChangefeedEventType}\n+     * @param eventTime The {@link OffsetDateTime event time}.\n+     * @param id The identifier.\n+     * @param data {@link BlobChangefeedEventData}\n+     * @param dataVersion The data version.\n+     * @param metadataVersion The metadata version.\n+     */\n+    public BlobChangefeedEvent(String topic, String subject, BlobChangefeedEventType eventType,\n+        OffsetDateTime eventTime, String id, com.azure.storage.blob.changefeed.models.BlobChangefeedEventData data,\n+        Long dataVersion, String metadataVersion) {\n+        this.topic = topic;\n+        this.subject = subject;\n+        this.eventType = eventType;\n+        this.eventTime = eventTime;\n+        this.id = id;\n+        this.data = data;\n+        this.dataVersion = dataVersion;\n+        this.metadataVersion = metadataVersion;\n+    }\n+\n+    /**\n+     * Constructs a {@link BlobChangefeedEvent}.\n+     *\n+     * @param record The record.\n+     * @return The {@link BlobChangefeedEvent} representing the record.\n+     * @throws IllegalArgumentException if the record is not valid.\n+     */\n+    public static BlobChangefeedEvent fromRecord(Object record) {\n+        AvroSchema.checkType(\"r\", record, Map.class);\n+        Map<?, ?> r = (Map<?, ?>) record;\n+\n+        if (!r.get(AvroConstants.RECORD).equals(\"BlobChangeEvent\")) {\n+            throw new IllegalArgumentException(\"Not a valid BlobChangefeedEvent.\");\n+        }\n+\n+        Object topic = r.get(\"topic\");\n+        Object subject = r.get(\"subject\");\n+        Object eventType = r.get(\"eventType\");\n+        Object eventTime = r.get(\"eventTime\");\n+        Object id = r.get(\"id\");\n+        Object data = r.get(\"data\");\n+        Object dataVersion = r.get(\"dataVersion\");\n+        Object metadataVersion = r.get(\"metadataVersion\");\n+\n+        return new BlobChangefeedEvent(\n+            nullOrString(\"topic\", topic),\n+            nullOrString(\"subject\", subject),\n+            isNull(eventType) ? null\n+                : BlobChangefeedEventType.fromString(BlobChangefeedEvent.nullOrString(\"eventType\", eventType)),\n+            isNull(eventTime) ? null\n+                : OffsetDateTime.parse(Objects.requireNonNull(nullOrString(\"eventTime\", eventTime))),\n+            nullOrString(\"id\", id),\n+            isNull(data) ? null : BlobChangefeedEventData.fromRecord(data),\n+            nullOrLong(\"dataVersion\", dataVersion),\n+            nullOrString(\"metadataVersion\", metadataVersion)\n+        );\n+    }\n+\n+    /**\n+     * Determines whether or not the object is null in the Avro sense.\n+     */\n+    static boolean isNull(Object o) {\n+        return o == null || o instanceof AvroNullSchema.Null;\n+    }\n+\n+    /**\n+     * Returns either null or a String.\n+     */\n+    static String nullOrString(String name, Object o) {\n+        if (isNull(o)) {\n+            return null;\n+        }\n+        AvroSchema.checkType(name, o, String.class);\n+        return (String) o;\n+    }", "originalCommit": "b60d748fcd121b42fa1c8bbbfb81a4033f9f0a7d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c98968eb01d250232d782bcd3ddb9822d6fbbb33", "chunk": "diff --git a/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java b/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java\nindex 64904739c47..0957a6d82b7 100644\n--- a/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java\n+++ b/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java\n\n@@ -129,58 +129,41 @@ public class BlobChangefeedEvent implements com.azure.storage.blob.changefeed.mo\n         return (boolean) o;\n     }\n \n-    /**\n-     * @return the topic.\n-     */\n+    @Override\n     public String getTopic() {\n         return topic;\n     }\n \n-    /**\n-     * @return the subject.\n-     */\n+    @Override\n     public String getSubject() {\n         return subject;\n     }\n \n-    /**\n-     * @return {@link BlobChangefeedEventType}\n-     */\n+    @Override\n     public BlobChangefeedEventType getEventType() {\n         return eventType;\n     }\n \n-    /**\n-     * @return The {@link OffsetDateTime event time}.\n-     */\n+    @Override\n     public OffsetDateTime getEventTime() {\n         return eventTime;\n     }\n \n-    /**\n-     * @return the identifer.\n-     */\n+    @Override\n     public String getId() {\n         return id;\n     }\n \n-    /**\n-     * @return {@link BlobChangefeedEventData}.\n-     */\n+    @Override\n     public com.azure.storage.blob.changefeed.models.BlobChangefeedEventData getData() {\n         return data;\n     }\n \n-    /**\n-     * @return the data version.\n-     */\n     public Long getDataVersion() {\n         return dataVersion;\n     }\n \n-    /**\n-     * @return the metadata version.\n-     */\n+    @Override\n     public String getMetadataVersion() {\n         return metadataVersion;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5Mjk4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#discussion_r440992988", "bodyText": "we should mark all methods coming from interface with @Override (so that compiler can catch changes).\nSee https://stackoverflow.com/questions/212614/should-we-override-an-interfaces-method-implementation\nWe can also use {@inheritDoc} to not repeat javadocs.\nThis applies to other places so I won't repeat this there.", "author": "kasobol-msft", "createdAt": "2020-06-16T16:41:02Z", "path": "sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java", "diffHunk": "@@ -0,0 +1,212 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.changefeed.implementation.models;\n+\n+import com.azure.storage.blob.changefeed.models.BlobChangefeedEventType;\n+import com.azure.storage.internal.avro.implementation.AvroConstants;\n+import com.azure.storage.internal.avro.implementation.schema.AvroSchema;\n+import com.azure.storage.internal.avro.implementation.schema.primitive.AvroNullSchema;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class contains properties of a BlobChangefeedEvent.\n+ */\n+public class BlobChangefeedEvent implements com.azure.storage.blob.changefeed.models.BlobChangefeedEvent {\n+\n+    private final String topic;\n+    private final String subject;\n+    private final BlobChangefeedEventType eventType;\n+    private final OffsetDateTime eventTime;\n+    private final String id;\n+    private final com.azure.storage.blob.changefeed.models.BlobChangefeedEventData data;\n+    private final Long dataVersion;\n+    private final String metadataVersion;\n+\n+    /**\n+     * Constructs a {@link BlobChangefeedEvent}.\n+     *\n+     * @param topic The topic.\n+     * @param subject The subject.\n+     * @param eventType {@link BlobChangefeedEventType}\n+     * @param eventTime The {@link OffsetDateTime event time}.\n+     * @param id The identifier.\n+     * @param data {@link BlobChangefeedEventData}\n+     * @param dataVersion The data version.\n+     * @param metadataVersion The metadata version.\n+     */\n+    public BlobChangefeedEvent(String topic, String subject, BlobChangefeedEventType eventType,\n+        OffsetDateTime eventTime, String id, com.azure.storage.blob.changefeed.models.BlobChangefeedEventData data,\n+        Long dataVersion, String metadataVersion) {\n+        this.topic = topic;\n+        this.subject = subject;\n+        this.eventType = eventType;\n+        this.eventTime = eventTime;\n+        this.id = id;\n+        this.data = data;\n+        this.dataVersion = dataVersion;\n+        this.metadataVersion = metadataVersion;\n+    }\n+\n+    /**\n+     * Constructs a {@link BlobChangefeedEvent}.\n+     *\n+     * @param record The record.\n+     * @return The {@link BlobChangefeedEvent} representing the record.\n+     * @throws IllegalArgumentException if the record is not valid.\n+     */\n+    public static BlobChangefeedEvent fromRecord(Object record) {\n+        AvroSchema.checkType(\"r\", record, Map.class);\n+        Map<?, ?> r = (Map<?, ?>) record;\n+\n+        if (!r.get(AvroConstants.RECORD).equals(\"BlobChangeEvent\")) {\n+            throw new IllegalArgumentException(\"Not a valid BlobChangefeedEvent.\");\n+        }\n+\n+        Object topic = r.get(\"topic\");\n+        Object subject = r.get(\"subject\");\n+        Object eventType = r.get(\"eventType\");\n+        Object eventTime = r.get(\"eventTime\");\n+        Object id = r.get(\"id\");\n+        Object data = r.get(\"data\");\n+        Object dataVersion = r.get(\"dataVersion\");\n+        Object metadataVersion = r.get(\"metadataVersion\");\n+\n+        return new BlobChangefeedEvent(\n+            nullOrString(\"topic\", topic),\n+            nullOrString(\"subject\", subject),\n+            isNull(eventType) ? null\n+                : BlobChangefeedEventType.fromString(BlobChangefeedEvent.nullOrString(\"eventType\", eventType)),\n+            isNull(eventTime) ? null\n+                : OffsetDateTime.parse(Objects.requireNonNull(nullOrString(\"eventTime\", eventTime))),\n+            nullOrString(\"id\", id),\n+            isNull(data) ? null : BlobChangefeedEventData.fromRecord(data),\n+            nullOrLong(\"dataVersion\", dataVersion),\n+            nullOrString(\"metadataVersion\", metadataVersion)\n+        );\n+    }\n+\n+    /**\n+     * Determines whether or not the object is null in the Avro sense.\n+     */\n+    static boolean isNull(Object o) {\n+        return o == null || o instanceof AvroNullSchema.Null;\n+    }\n+\n+    /**\n+     * Returns either null or a String.\n+     */\n+    static String nullOrString(String name, Object o) {\n+        if (isNull(o)) {\n+            return null;\n+        }\n+        AvroSchema.checkType(name, o, String.class);\n+        return (String) o;\n+    }\n+\n+    /**\n+     * Returns either null or a Long.\n+     */\n+    static Long nullOrLong(String name, Object o) {\n+        if (isNull(o)) {\n+            return null;\n+        }\n+        AvroSchema.checkType(name, o, Long.class);\n+        return (Long) o;\n+    }\n+\n+    /**\n+     * Returns either null or a Boolean.\n+     */\n+    static boolean nullOrBoolean(String name, Object o) {\n+        if (isNull(o)) {\n+            return false;\n+        }\n+        AvroSchema.checkType(name, o, Boolean.class);\n+        return (boolean) o;\n+    }\n+\n+    /**\n+     * @return the topic.\n+     */\n+    public String getTopic() {\n+        return topic;\n+    }\n+\n+    /**\n+     * @return the subject.\n+     */\n+    public String getSubject() {\n+        return subject;\n+    }\n+\n+    /**\n+     * @return {@link BlobChangefeedEventType}\n+     */\n+    public BlobChangefeedEventType getEventType() {\n+        return eventType;\n+    }\n+\n+    /**\n+     * @return The {@link OffsetDateTime event time}.\n+     */\n+    public OffsetDateTime getEventTime() {\n+        return eventTime;\n+    }\n+\n+    /**\n+     * @return the identifer.\n+     */\n+    public String getId() {\n+        return id;\n+    }", "originalCommit": "b60d748fcd121b42fa1c8bbbfb81a4033f9f0a7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5OTQ1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#discussion_r440999455", "bodyText": "Another fun note is Javadoc will walk the hierarchy tree if a method is annotated with @Override and doesn't have Javadocs to use parent Javadocs (won't use them if the parent class is Object).", "author": "alzimmermsft", "createdAt": "2020-06-16T16:51:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5Mjk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzOTkyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#discussion_r441039921", "bodyText": "@alzimmermsft There's a rule in checkstyle to catch Override thing - could you guys enable it ?", "author": "kasobol-msft", "createdAt": "2020-06-16T17:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5Mjk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyODU2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#discussion_r441128563", "bodyText": "Should be easy to add, I'll file an issue for this as it may trigger a lot of new exceptions.", "author": "alzimmermsft", "createdAt": "2020-06-16T20:40:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5Mjk4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyOTQwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#discussion_r441129400", "bodyText": "#12265", "author": "alzimmermsft", "createdAt": "2020-06-16T20:41:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5Mjk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "c98968eb01d250232d782bcd3ddb9822d6fbbb33", "chunk": "diff --git a/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java b/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java\nindex 64904739c47..0957a6d82b7 100644\n--- a/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java\n+++ b/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java\n\n@@ -129,58 +129,41 @@ public class BlobChangefeedEvent implements com.azure.storage.blob.changefeed.mo\n         return (boolean) o;\n     }\n \n-    /**\n-     * @return the topic.\n-     */\n+    @Override\n     public String getTopic() {\n         return topic;\n     }\n \n-    /**\n-     * @return the subject.\n-     */\n+    @Override\n     public String getSubject() {\n         return subject;\n     }\n \n-    /**\n-     * @return {@link BlobChangefeedEventType}\n-     */\n+    @Override\n     public BlobChangefeedEventType getEventType() {\n         return eventType;\n     }\n \n-    /**\n-     * @return The {@link OffsetDateTime event time}.\n-     */\n+    @Override\n     public OffsetDateTime getEventTime() {\n         return eventTime;\n     }\n \n-    /**\n-     * @return the identifer.\n-     */\n+    @Override\n     public String getId() {\n         return id;\n     }\n \n-    /**\n-     * @return {@link BlobChangefeedEventData}.\n-     */\n+    @Override\n     public com.azure.storage.blob.changefeed.models.BlobChangefeedEventData getData() {\n         return data;\n     }\n \n-    /**\n-     * @return the data version.\n-     */\n     public Long getDataVersion() {\n         return dataVersion;\n     }\n \n-    /**\n-     * @return the metadata version.\n-     */\n+    @Override\n     public String getMetadataVersion() {\n         return metadataVersion;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5NDI0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#discussion_r440994244", "bodyText": "If these are used across various models then they should exist in separate class. For example ChangeFeedModelValidator or something like that.", "author": "kasobol-msft", "createdAt": "2020-06-16T16:43:03Z", "path": "sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEventData.java", "diffHunk": "@@ -0,0 +1,228 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.changefeed.implementation.models;\n+\n+import com.azure.storage.blob.models.BlobType;\n+import com.azure.storage.internal.avro.implementation.AvroConstants;\n+import com.azure.storage.internal.avro.implementation.schema.AvroSchema;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class contains properties of a BlobChangefeedEventData.\n+ */\n+public class BlobChangefeedEventData implements com.azure.storage.blob.changefeed.models.BlobChangefeedEventData {\n+\n+    private final String api;\n+    private final String clientRequestId;\n+    private final String requestId;\n+    private final String eTag;\n+    private final String contentType;\n+    private final Long contentLength;\n+    private final BlobType blobType;\n+    private final Long contentOffset;\n+    private final String destinationUrl;\n+    private final String sourceUrl;\n+    private final String blobUrl;\n+    private final boolean recursive;\n+    private final String sequencer;\n+\n+    /**\n+     * Constructs a {@link BlobChangefeedEventData}.\n+     *\n+     * @param api The api.\n+     * @param clientRequestId The client request id.\n+     * @param requestId The request id.\n+     * @param eTag The eTag.\n+     * @param contentType The content type.\n+     * @param contentLength Th4e content length.\n+     * @param blobType {@link BlobType}\n+     * @param contentOffset The content offset.\n+     * @param destinationUrl The destination url.\n+     * @param sourceUrl The source url.\n+     * @param blobUrl The blob url.\n+     * @param recursive Whether or not this operation was recursive.\n+     * @param sequencer The sequencer.\n+     */\n+    public BlobChangefeedEventData(String api, String clientRequestId, String requestId, String eTag,\n+        String contentType, Long contentLength, BlobType blobType, Long contentOffset, String destinationUrl,\n+        String sourceUrl, String blobUrl, boolean recursive, String sequencer) {\n+        this.api = api;\n+        this.clientRequestId = clientRequestId;\n+        this.requestId = requestId;\n+        this.eTag = eTag;\n+        this.contentType = contentType;\n+        this.contentLength = contentLength;\n+        this.blobType = blobType;\n+        this.contentOffset = contentOffset;\n+        this.destinationUrl = destinationUrl;\n+        this.sourceUrl = sourceUrl;\n+        this.blobUrl = blobUrl;\n+        this.recursive = recursive;\n+        this.sequencer = sequencer;\n+    }\n+\n+    static BlobChangefeedEventData fromRecord(Object d) {\n+        AvroSchema.checkType(\"data\", d, Map.class);\n+        Map<?, ?> data = (Map<?, ?>) d;\n+\n+        if (!data.get(AvroConstants.RECORD).equals(\"BlobChangeEventData\")) {\n+            throw new IllegalArgumentException(\"Not a valid BlobChangefeedEventData.\");\n+        }\n+\n+        Object api = data.get(\"api\");\n+        Object clientRequestId = data.get(\"clientRequestId\");\n+        Object requestId = data.get(\"requestId\");\n+        Object eTag = data.get(\"etag\");\n+        Object contentType = data.get(\"contentType\");\n+        Object contentLength = data.get(\"contentLength\");\n+        Object blobType = data.get(\"blobType\");\n+        Object contentOffset = data.get(\"contentOffset\");\n+        Object destinationUrl = data.get(\"destinationUrl\");\n+        Object sourceUrl = data.get(\"sourceUrl\");\n+        Object blobUrl = data.get(\"url\");\n+        Object recursive = data.get(\"recursive\");\n+        Object sequencer = data.get(\"sequencer\");\n+\n+        return new BlobChangefeedEventData(\n+            BlobChangefeedEvent.nullOrString(\"api\", api),", "originalCommit": "b60d748fcd121b42fa1c8bbbfb81a4033f9f0a7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA2ODY1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#discussion_r441068659", "bodyText": "@kasobol-msft Can you take another look?", "author": "gapra-msft", "createdAt": "2020-06-16T18:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5NDI0NA=="}], "type": "inlineReview", "revised_code": {"commit": "c98968eb01d250232d782bcd3ddb9822d6fbbb33", "chunk": "diff --git a/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEventData.java b/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEventData.java\nindex 595393eda19..85d39070f75 100644\n--- a/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEventData.java\n+++ b/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEventData.java\n\n@@ -104,93 +104,67 @@ public class BlobChangefeedEventData implements com.azure.storage.blob.changefee\n         );\n     }\n \n-    /**\n-     * @return The api.\n-     */\n+    @Override\n     public String getApi() {\n         return api;\n     }\n \n-    /**\n-     * @return The client request id.\n-     */\n+    @Override\n     public String getClientRequestId() {\n         return clientRequestId;\n     }\n \n-    /**\n-     * @return The request id.\n-     */\n+    @Override\n     public String getRequestId() {\n         return requestId;\n     }\n \n-    /**\n-     * @return The eTag.\n-     */\n+    @Override\n     public String getETag() {\n         return eTag;\n     }\n \n-    /**\n-     * @return The content type.\n-     */\n+    @Override\n     public String getContentType() {\n         return contentType;\n     }\n \n-    /**\n-     * @return The content length.\n-     */\n+    @Override\n     public Long getContentLength() {\n         return contentLength;\n     }\n \n-    /**\n-     * @return {@link BlobType}.\n-     */\n+    @Override\n     public BlobType getBlobType() {\n         return blobType;\n     }\n \n-    /**\n-     * @return The content offset.\n-     */\n+    @Override\n     public Long getContentOffset() {\n         return contentOffset;\n     }\n \n-    /**\n-     * @return The destination url.\n-     */\n+    @Override\n     public String getDestinationUrl() {\n         return destinationUrl;\n     }\n \n-    /**\n-     * @return The source url.\n-     */\n+    @Override\n     public String getSourceUrl() {\n         return sourceUrl;\n     }\n \n-    /**\n-     * @return The blob url.\n-     */\n+    @Override\n     public String getBlobUrl() {\n         return blobUrl;\n     }\n \n-    /**\n-     * @return Whether or not this operation was recursive.\n-     */\n+    @Override\n     public boolean isRecursive() {\n         return recursive;\n     }\n \n-    /**\n-     * @return The sequencer.\n-     */\n+    @Override\n     public String getSequencer() {\n         return sequencer;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5NjQ1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#discussion_r440996455", "bodyText": "Mind adding @Override to the implementation methods.", "author": "alzimmermsft", "createdAt": "2020-06-16T16:46:41Z", "path": "sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEventData.java", "diffHunk": "@@ -0,0 +1,228 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.changefeed.implementation.models;\n+\n+import com.azure.storage.blob.models.BlobType;\n+import com.azure.storage.internal.avro.implementation.AvroConstants;\n+import com.azure.storage.internal.avro.implementation.schema.AvroSchema;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class contains properties of a BlobChangefeedEventData.\n+ */\n+public class BlobChangefeedEventData implements com.azure.storage.blob.changefeed.models.BlobChangefeedEventData {\n+\n+    private final String api;\n+    private final String clientRequestId;\n+    private final String requestId;\n+    private final String eTag;\n+    private final String contentType;\n+    private final Long contentLength;\n+    private final BlobType blobType;\n+    private final Long contentOffset;\n+    private final String destinationUrl;\n+    private final String sourceUrl;\n+    private final String blobUrl;\n+    private final boolean recursive;\n+    private final String sequencer;\n+\n+    /**\n+     * Constructs a {@link BlobChangefeedEventData}.\n+     *\n+     * @param api The api.\n+     * @param clientRequestId The client request id.\n+     * @param requestId The request id.\n+     * @param eTag The eTag.\n+     * @param contentType The content type.\n+     * @param contentLength Th4e content length.\n+     * @param blobType {@link BlobType}\n+     * @param contentOffset The content offset.\n+     * @param destinationUrl The destination url.\n+     * @param sourceUrl The source url.\n+     * @param blobUrl The blob url.\n+     * @param recursive Whether or not this operation was recursive.\n+     * @param sequencer The sequencer.\n+     */\n+    public BlobChangefeedEventData(String api, String clientRequestId, String requestId, String eTag,\n+        String contentType, Long contentLength, BlobType blobType, Long contentOffset, String destinationUrl,\n+        String sourceUrl, String blobUrl, boolean recursive, String sequencer) {\n+        this.api = api;\n+        this.clientRequestId = clientRequestId;\n+        this.requestId = requestId;\n+        this.eTag = eTag;\n+        this.contentType = contentType;\n+        this.contentLength = contentLength;\n+        this.blobType = blobType;\n+        this.contentOffset = contentOffset;\n+        this.destinationUrl = destinationUrl;\n+        this.sourceUrl = sourceUrl;\n+        this.blobUrl = blobUrl;\n+        this.recursive = recursive;\n+        this.sequencer = sequencer;\n+    }\n+\n+    static BlobChangefeedEventData fromRecord(Object d) {\n+        AvroSchema.checkType(\"data\", d, Map.class);\n+        Map<?, ?> data = (Map<?, ?>) d;\n+\n+        if (!data.get(AvroConstants.RECORD).equals(\"BlobChangeEventData\")) {\n+            throw new IllegalArgumentException(\"Not a valid BlobChangefeedEventData.\");\n+        }\n+\n+        Object api = data.get(\"api\");\n+        Object clientRequestId = data.get(\"clientRequestId\");\n+        Object requestId = data.get(\"requestId\");\n+        Object eTag = data.get(\"etag\");\n+        Object contentType = data.get(\"contentType\");\n+        Object contentLength = data.get(\"contentLength\");\n+        Object blobType = data.get(\"blobType\");\n+        Object contentOffset = data.get(\"contentOffset\");\n+        Object destinationUrl = data.get(\"destinationUrl\");\n+        Object sourceUrl = data.get(\"sourceUrl\");\n+        Object blobUrl = data.get(\"url\");\n+        Object recursive = data.get(\"recursive\");\n+        Object sequencer = data.get(\"sequencer\");\n+\n+        return new BlobChangefeedEventData(\n+            BlobChangefeedEvent.nullOrString(\"api\", api),\n+            BlobChangefeedEvent.nullOrString(\"clientRequestId\", clientRequestId),\n+            BlobChangefeedEvent.nullOrString(\"requestId\", requestId),\n+            BlobChangefeedEvent.nullOrString(\"etag\", eTag),\n+            BlobChangefeedEvent.nullOrString(\"contentType\", contentType),\n+            BlobChangefeedEvent.nullOrLong(\"contentLength\", contentLength),\n+            BlobChangefeedEvent.isNull(blobType) ? null\n+                : BlobType.fromString(BlobChangefeedEvent.nullOrString(\"blobType\", blobType)),\n+            BlobChangefeedEvent.nullOrLong(\"contentOffset\", contentOffset),\n+            BlobChangefeedEvent.nullOrString(\"destinationUrl\", destinationUrl),\n+            BlobChangefeedEvent.nullOrString(\"sourceUrl\", sourceUrl),\n+            BlobChangefeedEvent.nullOrString(\"url\", blobUrl),\n+            BlobChangefeedEvent.nullOrBoolean(\"recursive\", recursive),\n+            BlobChangefeedEvent.nullOrString(\"sequencer\", sequencer)\n+        );\n+    }\n+\n+    /**\n+     * @return The api.\n+     */\n+    public String getApi() {", "originalCommit": "b60d748fcd121b42fa1c8bbbfb81a4033f9f0a7d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c98968eb01d250232d782bcd3ddb9822d6fbbb33", "chunk": "diff --git a/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEventData.java b/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEventData.java\nindex 595393eda19..85d39070f75 100644\n--- a/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEventData.java\n+++ b/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEventData.java\n\n@@ -104,93 +104,67 @@ public class BlobChangefeedEventData implements com.azure.storage.blob.changefee\n         );\n     }\n \n-    /**\n-     * @return The api.\n-     */\n+    @Override\n     public String getApi() {\n         return api;\n     }\n \n-    /**\n-     * @return The client request id.\n-     */\n+    @Override\n     public String getClientRequestId() {\n         return clientRequestId;\n     }\n \n-    /**\n-     * @return The request id.\n-     */\n+    @Override\n     public String getRequestId() {\n         return requestId;\n     }\n \n-    /**\n-     * @return The eTag.\n-     */\n+    @Override\n     public String getETag() {\n         return eTag;\n     }\n \n-    /**\n-     * @return The content type.\n-     */\n+    @Override\n     public String getContentType() {\n         return contentType;\n     }\n \n-    /**\n-     * @return The content length.\n-     */\n+    @Override\n     public Long getContentLength() {\n         return contentLength;\n     }\n \n-    /**\n-     * @return {@link BlobType}.\n-     */\n+    @Override\n     public BlobType getBlobType() {\n         return blobType;\n     }\n \n-    /**\n-     * @return The content offset.\n-     */\n+    @Override\n     public Long getContentOffset() {\n         return contentOffset;\n     }\n \n-    /**\n-     * @return The destination url.\n-     */\n+    @Override\n     public String getDestinationUrl() {\n         return destinationUrl;\n     }\n \n-    /**\n-     * @return The source url.\n-     */\n+    @Override\n     public String getSourceUrl() {\n         return sourceUrl;\n     }\n \n-    /**\n-     * @return The blob url.\n-     */\n+    @Override\n     public String getBlobUrl() {\n         return blobUrl;\n     }\n \n-    /**\n-     * @return Whether or not this operation was recursive.\n-     */\n+    @Override\n     public boolean isRecursive() {\n         return recursive;\n     }\n \n-    /**\n-     * @return The sequencer.\n-     */\n+    @Override\n     public String getSequencer() {\n         return sequencer;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5NzU3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12260#discussion_r440997579", "bodyText": "Should these static helpers go into a separate utility class? These may be related to BlobChangefeedEvent but they also feel very standalone.", "author": "alzimmermsft", "createdAt": "2020-06-16T16:48:31Z", "path": "sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java", "diffHunk": "@@ -0,0 +1,212 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.blob.changefeed.implementation.models;\n+\n+import com.azure.storage.blob.changefeed.models.BlobChangefeedEventType;\n+import com.azure.storage.internal.avro.implementation.AvroConstants;\n+import com.azure.storage.internal.avro.implementation.schema.AvroSchema;\n+import com.azure.storage.internal.avro.implementation.schema.primitive.AvroNullSchema;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * This class contains properties of a BlobChangefeedEvent.\n+ */\n+public class BlobChangefeedEvent implements com.azure.storage.blob.changefeed.models.BlobChangefeedEvent {\n+\n+    private final String topic;\n+    private final String subject;\n+    private final BlobChangefeedEventType eventType;\n+    private final OffsetDateTime eventTime;\n+    private final String id;\n+    private final com.azure.storage.blob.changefeed.models.BlobChangefeedEventData data;\n+    private final Long dataVersion;\n+    private final String metadataVersion;\n+\n+    /**\n+     * Constructs a {@link BlobChangefeedEvent}.\n+     *\n+     * @param topic The topic.\n+     * @param subject The subject.\n+     * @param eventType {@link BlobChangefeedEventType}\n+     * @param eventTime The {@link OffsetDateTime event time}.\n+     * @param id The identifier.\n+     * @param data {@link BlobChangefeedEventData}\n+     * @param dataVersion The data version.\n+     * @param metadataVersion The metadata version.\n+     */\n+    public BlobChangefeedEvent(String topic, String subject, BlobChangefeedEventType eventType,\n+        OffsetDateTime eventTime, String id, com.azure.storage.blob.changefeed.models.BlobChangefeedEventData data,\n+        Long dataVersion, String metadataVersion) {\n+        this.topic = topic;\n+        this.subject = subject;\n+        this.eventType = eventType;\n+        this.eventTime = eventTime;\n+        this.id = id;\n+        this.data = data;\n+        this.dataVersion = dataVersion;\n+        this.metadataVersion = metadataVersion;\n+    }\n+\n+    /**\n+     * Constructs a {@link BlobChangefeedEvent}.\n+     *\n+     * @param record The record.\n+     * @return The {@link BlobChangefeedEvent} representing the record.\n+     * @throws IllegalArgumentException if the record is not valid.\n+     */\n+    public static BlobChangefeedEvent fromRecord(Object record) {\n+        AvroSchema.checkType(\"r\", record, Map.class);\n+        Map<?, ?> r = (Map<?, ?>) record;\n+\n+        if (!r.get(AvroConstants.RECORD).equals(\"BlobChangeEvent\")) {\n+            throw new IllegalArgumentException(\"Not a valid BlobChangefeedEvent.\");\n+        }\n+\n+        Object topic = r.get(\"topic\");\n+        Object subject = r.get(\"subject\");\n+        Object eventType = r.get(\"eventType\");\n+        Object eventTime = r.get(\"eventTime\");\n+        Object id = r.get(\"id\");\n+        Object data = r.get(\"data\");\n+        Object dataVersion = r.get(\"dataVersion\");\n+        Object metadataVersion = r.get(\"metadataVersion\");\n+\n+        return new BlobChangefeedEvent(\n+            nullOrString(\"topic\", topic),\n+            nullOrString(\"subject\", subject),\n+            isNull(eventType) ? null\n+                : BlobChangefeedEventType.fromString(BlobChangefeedEvent.nullOrString(\"eventType\", eventType)),\n+            isNull(eventTime) ? null\n+                : OffsetDateTime.parse(Objects.requireNonNull(nullOrString(\"eventTime\", eventTime))),\n+            nullOrString(\"id\", id),\n+            isNull(data) ? null : BlobChangefeedEventData.fromRecord(data),\n+            nullOrLong(\"dataVersion\", dataVersion),\n+            nullOrString(\"metadataVersion\", metadataVersion)\n+        );\n+    }\n+\n+    /**\n+     * Determines whether or not the object is null in the Avro sense.\n+     */\n+    static boolean isNull(Object o) {", "originalCommit": "b60d748fcd121b42fa1c8bbbfb81a4033f9f0a7d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c98968eb01d250232d782bcd3ddb9822d6fbbb33", "chunk": "diff --git a/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java b/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java\nindex 64904739c47..0957a6d82b7 100644\n--- a/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java\n+++ b/sdk/storage/azure-storage-blob-changefeed/src/main/java/com/azure/storage/blob/changefeed/implementation/models/BlobChangefeedEvent.java\n\n@@ -129,58 +129,41 @@ public class BlobChangefeedEvent implements com.azure.storage.blob.changefeed.mo\n         return (boolean) o;\n     }\n \n-    /**\n-     * @return the topic.\n-     */\n+    @Override\n     public String getTopic() {\n         return topic;\n     }\n \n-    /**\n-     * @return the subject.\n-     */\n+    @Override\n     public String getSubject() {\n         return subject;\n     }\n \n-    /**\n-     * @return {@link BlobChangefeedEventType}\n-     */\n+    @Override\n     public BlobChangefeedEventType getEventType() {\n         return eventType;\n     }\n \n-    /**\n-     * @return The {@link OffsetDateTime event time}.\n-     */\n+    @Override\n     public OffsetDateTime getEventTime() {\n         return eventTime;\n     }\n \n-    /**\n-     * @return the identifer.\n-     */\n+    @Override\n     public String getId() {\n         return id;\n     }\n \n-    /**\n-     * @return {@link BlobChangefeedEventData}.\n-     */\n+    @Override\n     public com.azure.storage.blob.changefeed.models.BlobChangefeedEventData getData() {\n         return data;\n     }\n \n-    /**\n-     * @return the data version.\n-     */\n     public Long getDataVersion() {\n         return dataVersion;\n     }\n \n-    /**\n-     * @return the metadata version.\n-     */\n+    @Override\n     public String getMetadataVersion() {\n         return metadataVersion;\n     }\n"}}, {"oid": "c98968eb01d250232d782bcd3ddb9822d6fbbb33", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c98968eb01d250232d782bcd3ddb9822d6fbbb33", "message": "Added Override to methods", "committedDate": "2020-06-16T16:55:13Z", "type": "commit"}, {"oid": "9d44258f6a68cf79a4e0200d9800121becdd47d4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9d44258f6a68cf79a4e0200d9800121becdd47d4", "message": "Renamed implementation to internal", "committedDate": "2020-06-16T16:57:31Z", "type": "commit"}, {"oid": "b47a5b80a38fa86c85c58c4f1b154727f61541d7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b47a5b80a38fa86c85c58c4f1b154727f61541d7", "message": "Added new class for model type validation", "committedDate": "2020-06-16T18:45:50Z", "type": "commit"}, {"oid": "c796b81449652e1257ecc4fe14cd51b2d67e3d2e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c796b81449652e1257ecc4fe14cd51b2d67e3d2e", "message": "Added copyright header", "committedDate": "2020-06-16T19:13:18Z", "type": "commit"}]}