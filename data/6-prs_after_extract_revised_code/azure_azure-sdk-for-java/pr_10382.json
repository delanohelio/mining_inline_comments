{"pr_number": 10382, "pr_title": "Blob tags", "pr_createdAt": "2020-04-20T22:36:54Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/10382", "timeline": [{"oid": "0ea4f6344d205b97e3d1ffbea939cb537af831a7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0ea4f6344d205b97e3d1ffbea939cb537af831a7", "message": "Generated for tags", "committedDate": "2020-04-08T20:40:20Z", "type": "commit"}, {"oid": "508873be6cee821ced2c41b2dd142392285e79a1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/508873be6cee821ced2c41b2dd142392285e79a1", "message": "Really did it this time", "committedDate": "2020-04-08T20:43:59Z", "type": "commit"}, {"oid": "e6ed6b081c0f33b58dae741be3d91b680f6f7f2a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e6ed6b081c0f33b58dae741be3d91b680f6f7f2a", "message": "Fixed BlobItemProperties", "committedDate": "2020-04-09T21:40:21Z", "type": "commit"}, {"oid": "677679b9a823fc974c91ceba5fa23e087e5ae50a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/677679b9a823fc974c91ceba5fa23e087e5ae50a", "message": "Updated existing apis", "committedDate": "2020-04-09T21:48:05Z", "type": "commit"}, {"oid": "02f7f41c2d9a1972d6c176afd3c3612fc47294eb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/02f7f41c2d9a1972d6c176afd3c3612fc47294eb", "message": "Merge branch 'blobTags' of github.com:rickle-msft/azure-sdk-for-java into blobTags", "committedDate": "2020-04-09T21:48:11Z", "type": "commit"}, {"oid": "d3e4ad546409ecf9715362647e12273a7ff9a000", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d3e4ad546409ecf9715362647e12273a7ff9a000", "message": "Added all new apis", "committedDate": "2020-04-14T18:12:53Z", "type": "commit"}, {"oid": "1a8c9c0393cbc05bab89691a0fb5a4b5e033d545", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1a8c9c0393cbc05bab89691a0fb5a4b5e033d545", "message": "Removed contentLength", "committedDate": "2020-04-14T19:15:18Z", "type": "commit"}, {"oid": "b57c3af27265a81ca561715fb921477c020d5676", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b57c3af27265a81ca561715fb921477c020d5676", "message": "Resolved build issue", "committedDate": "2020-04-14T20:44:14Z", "type": "commit"}, {"oid": "3d11143c4eae6b9274f048ea9d9f2f1a3d3f68ed", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3d11143c4eae6b9274f048ea9d9f2f1a3d3f68ed", "message": "Added javadocs to new methods", "committedDate": "2020-04-14T21:25:32Z", "type": "commit"}, {"oid": "99804695d8ec0cf4e24e48afef91f8bb40cfa66a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/99804695d8ec0cf4e24e48afef91f8bb40cfa66a", "message": "Added code snippets to all new apis", "committedDate": "2020-04-15T17:38:18Z", "type": "commit"}, {"oid": "37af33773ce4e86ca0a7bfe4eb2fcb80395ab888", "url": "https://github.com/Azure/azure-sdk-for-java/commit/37af33773ce4e86ca0a7bfe4eb2fcb80395ab888", "message": "Fixed up code snippets. Started on tests", "committedDate": "2020-04-15T23:31:03Z", "type": "commit"}, {"oid": "b36226f73343b7f49486c0d17d7be437db3da408", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b36226f73343b7f49486c0d17d7be437db3da408", "message": "Fixed up serialization problem", "committedDate": "2020-04-16T17:21:33Z", "type": "commit"}, {"oid": "84f8acc694ac50b0e87391b4d241491198cb1090", "url": "https://github.com/Azure/azure-sdk-for-java/commit/84f8acc694ac50b0e87391b4d241491198cb1090", "message": "Finished just about all tests", "committedDate": "2020-04-20T17:23:05Z", "type": "commit"}, {"oid": "beb124bc461664de474622bded5d38a4d233441f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/beb124bc461664de474622bded5d38a4d233441f", "message": "Added test for tagCount on list", "committedDate": "2020-04-20T20:33:13Z", "type": "commit"}, {"oid": "88d836c579e8247404afbbd55e7acf7e81f9d9e9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/88d836c579e8247404afbbd55e7acf7e81f9d9e9", "message": "Added recordings", "committedDate": "2020-04-20T21:27:07Z", "type": "commit"}, {"oid": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "message": "Merge remote-tracking branch 'upstream/feature/storage/stg73' into blobTags", "committedDate": "2020-04-20T22:31:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczODM1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r411738353", "bodyText": "Need to consider if this is a breaking change and possibly revert", "author": "rickle-msft", "createdAt": "2020-04-20T22:38:02Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/models/BlobFlatListSegment.java", "diffHunk": "@@ -21,14 +21,14 @@\n      * The blobItems property.\n      */\n     @JsonProperty(\"Blob\")\n-    private List<BlobItem> blobItems = new ArrayList<>();\n+    private List<BlobItemInternal> blobItems = new ArrayList<>();", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3MTcxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r412571719", "bodyText": "It is not because we process this type internally and convert the elements into a PagedFlux. Even byPage on the paged flux doesn't use this.", "author": "rickle-msft", "createdAt": "2020-04-21T23:57:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczODM1Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczODUyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r411738523", "bodyText": "Need to consider if this is a breaking change and possibly revert", "author": "rickle-msft", "createdAt": "2020-04-20T22:38:27Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/models/BlobHierarchyListSegment.java", "diffHunk": "@@ -57,7 +57,7 @@ public BlobHierarchyListSegment setBlobPrefixes(List<BlobPrefix> blobPrefixes) {\n      *\n      * @return the blobItems value.\n      */\n-    public List<BlobItem> getBlobItems() {\n+    public List<BlobItemInternal> getBlobItems() {", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3MTgxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r412571811", "bodyText": "See comment on FlatListSegment.", "author": "rickle-msft", "createdAt": "2020-04-21T23:57:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczODUyMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczOTA0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r411739049", "bodyText": "Formatting?", "author": "rickle-msft", "createdAt": "2020-04-20T22:39:38Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobAsyncClientBase.java", "diffHunk": "@@ -1226,8 +1317,9 @@ private void downloadToFileCleanup(AsynchronousFileChannel channel, String fileP\n                     hd.getCopyCompletionTime(), hd.getCopyStatusDescription(), hd.isServerEncrypted(),\n                     hd.isIncrementalCopy(), hd.getDestinationSnapshot(), AccessTier.fromString(hd.getAccessTier()),\n                     hd.isAccessTierInferred(), ArchiveStatus.fromString(hd.getArchiveStatus()),\n-                    hd.getEncryptionKeySha256(), hd.getAccessTierChangeTime(), hd.getMetadata(),\n-                    hd.getBlobCommittedBlockCount(), hd.getVersionId(), hd.isCurrentVersion());\n+                    hd.getEncryptionKeySha256(), hd.getEncryptionScope(), hd.getAccessTierChangeTime(),\n+                        hd.getMetadata(), hd.getBlobCommittedBlockCount(), hd.getVersionId(), hd.isCurrentVersion(),", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb53eb01abdd08ddadbe74f8fcc3717e04473306", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobAsyncClientBase.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobAsyncClientBase.java\nindex e3d4c3dfbd8..710a4888a99 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobAsyncClientBase.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobAsyncClientBase.java\n\n@@ -1318,8 +1317,8 @@ public class BlobAsyncClientBase {\n                     hd.isIncrementalCopy(), hd.getDestinationSnapshot(), AccessTier.fromString(hd.getAccessTier()),\n                     hd.isAccessTierInferred(), ArchiveStatus.fromString(hd.getArchiveStatus()),\n                     hd.getEncryptionKeySha256(), hd.getEncryptionScope(), hd.getAccessTierChangeTime(),\n-                        hd.getMetadata(), hd.getBlobCommittedBlockCount(), hd.getVersionId(), hd.isCurrentVersion(),\n-                        hd.getTagCount());\n+                    hd.getMetadata(), hd.getBlobCommittedBlockCount(), hd.getVersionId(), hd.isCurrentVersion(),\n+                    hd.getTagCount());\n                 return new SimpleResponse<>(rb, properties);\n             });\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MTE0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r411741145", "bodyText": "if possible please use Collections.emptyMap(). It's immutable singleton so less allocation.\n(Same could be applied to metadata I guess.)\n(And other places we do that for metadata and tags).", "author": "kasobol-msft", "createdAt": "2020-04-20T22:44:22Z", "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobAsyncClient.java", "diffHunk": "@@ -241,11 +241,55 @@\n     public Mono<Response<BlockBlobItem>> uploadWithResponse(Flux<ByteBuffer> data,\n         ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String, String> metadata,\n         AccessTier tier, BlobRequestConditions requestConditions) {\n+        return this.uploadWithResponse(data, parallelTransferOptions, headers, metadata, null, tier, requestConditions);\n+    }\n+\n+    /**\n+     * Creates a new block blob, or updates the content of an existing block blob. Updating an existing block blob\n+     * overwrites any existing metadata on the blob. Partial updates are not supported with this method; the content of\n+     * the existing blob is overwritten with the new content. To perform a partial update of a block blob's, use {@link\n+     * BlockBlobAsyncClient#stageBlock(String, Flux, long) stageBlock} and\n+     * {@link BlockBlobAsyncClient#commitBlockList(List)}, which this method uses internally. For more information,\n+     * see the <a href=\"https://docs.microsoft.com/rest/api/storageservices/put-block\">Azure\n+     * Docs for Put Block</a> and the <a href=\"https://docs.microsoft.com/rest/api/storageservices/put-block-list\">Azure\n+     * Docs for Put Block List</a>.\n+     * <p>\n+     * The data passed need not support multiple subscriptions/be replayable as is required in other upload methods when\n+     * retries are enabled, and the length of the data need not be known in advance. Therefore, this method should\n+     * support uploading any arbitrary data source, including network streams. This behavior is possible because this\n+     * method will perform some internal buffering as configured by the blockSize and numBuffers parameters, so while\n+     * this method may offer additional convenience, it will not be as performant as other options, which should be\n+     * preferred when possible.\n+     * <p>\n+     * Typically, the greater the number of buffers used, the greater the possible parallelism when transferring the\n+     * data. Larger buffers means we will have to stage fewer blocks and therefore require fewer IO operations. The\n+     * trade-offs between these values are context-dependent, so some experimentation may be required to optimize inputs\n+     * for a given scenario.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.specialized.cryptography.EncryptedBlobAsyncClient.uploadWithResponse#Flux-ParallelTransferOptions-BlobHttpHeaders-Map-AccessTier-BlobRequestConditions}\n+     *\n+     * @param data The data to write to the blob. Unlike other upload methods, this method does not require that the\n+     * {@code Flux} be replayable. In other words, it does not have to support multiple subscribers and is not expected\n+     * to produce the same values across subscriptions.\n+     * @param parallelTransferOptions {@link ParallelTransferOptions} used to configure buffered uploading.\n+     * @param headers {@link BlobHttpHeaders}\n+     * @param metadata Metadata to associate with the blob.\n+     * @param tags Tags to associate with the destination blob.\n+     * @param tier {@link AccessTier} for the destination blob.\n+     * @param requestConditions {@link BlobRequestConditions}\n+     * @return A reactive response containing the information of the uploaded block blob.\n+     */\n+    public Mono<Response<BlockBlobItem>> uploadWithResponse(Flux<ByteBuffer> data,\n+        ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String, String> metadata,\n+        Map<String, String> tags, AccessTier tier, BlobRequestConditions requestConditions) {\n         try {\n             final Map<String, String> metadataFinal = metadata == null ? new HashMap<>() : metadata;\n+            final Map<String, String> tagsFinal = tags == null ? new HashMap<>() : tags;", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb53eb01abdd08ddadbe74f8fcc3717e04473306", "chunk": "diff --git a/sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobAsyncClient.java b/sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobAsyncClient.java\nindex b6ad11f88dc..67bee245e93 100644\n--- a/sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobAsyncClient.java\n+++ b/sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobAsyncClient.java\n\n@@ -285,8 +286,8 @@ public class EncryptedBlobAsyncClient extends BlobAsyncClient {\n         ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String, String> metadata,\n         Map<String, String> tags, AccessTier tier, BlobRequestConditions requestConditions) {\n         try {\n-            final Map<String, String> metadataFinal = metadata == null ? new HashMap<>() : metadata;\n-            final Map<String, String> tagsFinal = tags == null ? new HashMap<>() : tags;\n+            final Map<String, String> metadataFinal = metadata == null ? Collections.emptyMap() : metadata;\n+            final Map<String, String> tagsFinal = tags == null ? Collections.emptyMap() : tags;\n             Mono<Flux<ByteBuffer>> dataFinal = prepareToSendEncryptedRequest(data, metadataFinal);\n             return dataFinal.flatMap(df -> super.uploadWithResponse(df, parallelTransferOptions, headers, metadataFinal,\n                 tagsFinal, tier, requestConditions));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MzI3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r411743274", "bodyText": "Collections.emptyList() would be better here (and other similar places)", "author": "kasobol-msft", "createdAt": "2020-04-20T22:49:12Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobContainerAsyncClient.java", "diffHunk": "@@ -778,7 +779,9 @@ public String getEncryptionScope() {\n                 .map(response -> {\n                     List<BlobItem> value = response.getValue().getSegment() == null\n                         ? new ArrayList<>(0)", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb53eb01abdd08ddadbe74f8fcc3717e04473306", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobContainerAsyncClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobContainerAsyncClient.java\nindex edf47a5bdf0..71bccb81d6a 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobContainerAsyncClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobContainerAsyncClient.java\n\n@@ -778,7 +778,7 @@ public final class BlobContainerAsyncClient {\n             marker -> listBlobsFlatSegment(marker, options, timeout)\n                 .map(response -> {\n                     List<BlobItem> value = response.getValue().getSegment() == null\n-                        ? new ArrayList<>(0)\n+                        ? Collections.emptyList()\n                         : response.getValue().getSegment().getBlobItems().stream()\n                         .map(BlobItem::new)\n                         .collect(Collectors.toList());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MzU4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r411743589", "bodyText": "Yes.\nThis could have only two overloads findBlobsByTags(query) and findBlobsByTags(query,options)", "author": "kasobol-msft", "createdAt": "2020-04-20T22:50:01Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java", "diffHunk": "@@ -329,6 +331,72 @@ public String getAccountUrl() {\n                 null, Context.NONE), timeout);\n     }\n \n+\n+    /**\n+     * Returns a reactive Publisher emitting the blobs in this account whose tags match the query expression. For more\n+     * information, including information on the query syntax, see the <a href=\"DOC LINK NEEDED\">Azure Docs</a>.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.BlobServiceAsyncClient.filterBlobs#String}\n+     *\n+     * @param query Filters the results to return only blobs whose tags match the specified expression.\n+     * @return A reactive response emitting the list of blobs.\n+     */\n+    public PagedFlux<FilterBlobItem> findBlobsByTags(String query) {\n+        return this.findBlobsByTags(query, null, null);\n+    }\n+\n+    /**\n+     * Returns a reactive Publisher emitting the blobs in this account whose tags match the query expression. For more\n+     * information, including information on the query syntax, see the <a href=\"DOC LINK NEEDED\">Azure Docs</a>.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.BlobAsyncServiceClient.filterBlobs#String-Integer}\n+     *\n+     * @param query Filters the results to return only blobs whose tags match the specified expression.\n+     * @param maxResultsPerPage The maximum number of results to return in a given page.\n+     * @return A reactive response emitting the list of blobs.\n+     */\n+    public PagedFlux<FilterBlobItem> findBlobsByTags(String query, Integer maxResultsPerPage) {\n+        try {\n+            return findBlobsByTags(query, maxResultsPerPage, null);\n+        } catch (RuntimeException ex) {\n+            return pagedFluxError(logger, ex);\n+        }\n+    }\n+\n+    // TODO: options instead of maxResults?", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3ODM4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r411778380", "bodyText": "Yeah I like the idea of making it an Options since that matches what we do with listing in general", "author": "gapra-msft", "createdAt": "2020-04-21T00:16:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MzU4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "fb53eb01abdd08ddadbe74f8fcc3717e04473306", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java\nindex 33e7f3b0b5b..67ef34cf225 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java\n\n@@ -338,7 +340,7 @@ public final class BlobServiceAsyncClient {\n      *\n      * <p><strong>Code Samples</strong></p>\n      *\n-     * {@codesnippet com.azure.storage.blob.BlobServiceAsyncClient.filterBlobs#String}\n+     * {@codesnippet com.azure.storage.blob.BlobServiceAsyncClient.findBlobsByTag#String}\n      *\n      * @param query Filters the results to return only blobs whose tags match the specified expression.\n      * @return A reactive response emitting the list of blobs.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NDc0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r411744745", "bodyText": "If you're doing that please remove TODO.", "author": "kasobol-msft", "createdAt": "2020-04-20T22:52:54Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceVersion.java", "diffHunk": "@@ -11,7 +11,7 @@\n public enum BlobServiceVersion implements ServiceVersion {\n     V2019_02_02(\"2019-02-02\"),\n     V2019_07_07(\"2019-07-07\"),\n-    V2019_12_12(\"2019-10-10\"); // TODO (gapra) : Change this to 12-12 once stage gets to 12-12\n+    V2019_12_12(\"2019-12-12\"); // TODO (gapra) : Change this to 12-12 once stage gets to 12-12", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb53eb01abdd08ddadbe74f8fcc3717e04473306", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceVersion.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceVersion.java\nindex 44996fb4898..aeb54d652a4 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceVersion.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceVersion.java\n\n@@ -11,7 +11,7 @@ import com.azure.core.util.ServiceVersion;\n public enum BlobServiceVersion implements ServiceVersion {\n     V2019_02_02(\"2019-02-02\"),\n     V2019_07_07(\"2019-07-07\"),\n-    V2019_12_12(\"2019-12-12\"); // TODO (gapra) : Change this to 12-12 once stage gets to 12-12\n+    V2019_12_12(\"2019-12-12\");\n \n     private final String version;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NDk0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r411744944", "bodyText": "Do we want to introduce option bag here as well ?", "author": "kasobol-msft", "createdAt": "2020-04-20T22:53:19Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceClient.java", "diffHunk": "@@ -193,6 +194,40 @@ public String getAccountUrl() {\n         return new PagedIterable<>(blobServiceAsyncClient.listBlobContainersWithOptionalTimeout(options, timeout));\n     }\n \n+    /**\n+     * Returns a lazy loaded list of blobs in this account whose tags match the query expression. The returned\n+     * {@link PagedIterable} can be consumed while new items are automatically retrieved as needed. For more\n+     * information, including information on the query syntax, see the <a href=\"DOC LINK NEEDED\">Azure Docs</a>.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.BlobServiceClient.filterBlobs#String}\n+     *\n+     * @param query Filters the results to return only blobs whose tags match the specified expression.\n+     * @return The list of blobs.\n+     */\n+    public PagedIterable<FilterBlobItem> findBlobsByTags(String query) {\n+        return this.findBlobsByTags(query, null, null);\n+    }\n+\n+    /**\n+     * Returns a lazy loaded list of blobs in this account whose tags match the query expression. The returned\n+     * {@link PagedIterable} can be consumed while new items are automatically retrieved as needed. For more\n+     * information, including information on the query syntax, see the <a href=\"DOC LINK NEEDED\">Azure Docs</a>.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.BlobServiceClient.filterBlobs#String-Integer-Duration}\n+     *\n+     * @param query Filters the results to return only blobs whose tags match the specified expression.\n+     * @param maxResultsPerPage The maximum number of results to return in a given page.\n+     * @param timeout An optional timeout value beyond which a {@link RuntimeException} will be raised.\n+     * @return The list of blobs.\n+     */\n+    public PagedIterable<FilterBlobItem> findBlobsByTags(String query, Integer maxResultsPerPage, Duration timeout) {", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE1NDA2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r413154067", "bodyText": "Waiting on confirmation from Jonathan for this one.", "author": "rickle-msft", "createdAt": "2020-04-22T16:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NDk0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5MzcwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r419693701", "bodyText": "Done", "author": "rickle-msft", "createdAt": "2020-05-04T20:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NDk0NA=="}], "type": "inlineReview", "revised_code": {"commit": "fb53eb01abdd08ddadbe74f8fcc3717e04473306", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceClient.java\nindex 6e2b971db02..63e747e0612 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceClient.java\n\n@@ -201,7 +202,7 @@ public final class BlobServiceClient {\n      *\n      * <p><strong>Code Samples</strong></p>\n      *\n-     * {@codesnippet com.azure.storage.blob.BlobServiceClient.filterBlobs#String}\n+     * {@codesnippet com.azure.storage.blob.BlobServiceClient.findBlobsByTag#String}\n      *\n      * @param query Filters the results to return only blobs whose tags match the specified expression.\n      * @return The list of blobs.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NzM1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r411747359", "bodyText": "Should this work with versionID? It's already in stg73 branch.", "author": "kasobol-msft", "createdAt": "2020-04-20T22:59:00Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobAsyncClientBase.java", "diffHunk": "@@ -1348,6 +1440,108 @@ private void downloadToFileCleanup(AsynchronousFileChannel channel, String fileP\n             .map(response -> new SimpleResponse<>(response, null));\n     }\n \n+    /**\n+     * Returns the blob's tags.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.getTags}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"GET DOCS LINK\">Azure Docs</a></p>\n+     *\n+     * @return A reactive response containing the blob's tags.\n+     */\n+    public Mono<Map<String, String>> getTags() {\n+        return this.getTagsWithResponse().map(Response::getValue);\n+    }\n+\n+    /**\n+     * Returns the blob's tags.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.getTagsWithResponse}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"GET DOCS LINK\">Azure Docs</a></p>\n+     *\n+     * @return A reactive response containing the blob's tags.\n+     */\n+    public Mono<Response<Map<String, String>>> getTagsWithResponse() {\n+        try {\n+            return withContext(this::getTagsWithResponse);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    Mono<Response<Map<String, String>>> getTagsWithResponse(Context context) {\n+        return this.azureBlobStorage.blobs().getTagsWithRestResponseAsync(null, null, null, null, snapshot,\n+            null /* versionId */, context)", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxNDUzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r412314534", "bodyText": "What are all the null params in this? are they valid to put on the max overload?", "author": "gapra-msft", "createdAt": "2020-04-21T16:40:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NzM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE1OTA2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r413159066", "bodyText": "Container name, blob name, request id, timeout. I'm pretty sure we set those to null on all calls to the protocol layer", "author": "rickle-msft", "createdAt": "2020-04-22T17:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NzM1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "fb53eb01abdd08ddadbe74f8fcc3717e04473306", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobAsyncClientBase.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobAsyncClientBase.java\nindex e3d4c3dfbd8..710a4888a99 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobAsyncClientBase.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobAsyncClientBase.java\n\n@@ -1478,7 +1477,7 @@ public class BlobAsyncClientBase {\n \n     Mono<Response<Map<String, String>>> getTagsWithResponse(Context context) {\n         return this.azureBlobStorage.blobs().getTagsWithRestResponseAsync(null, null, null, null, snapshot,\n-            null /* versionId */, context)\n+            versionId, context)\n             .map(response -> {\n                 Map<String, String> tags = new HashMap<>();\n                 for(BlobTag tag : response.getValue().getBlobTagSet()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NzUzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r411747533", "bodyText": "same here. however I'm not sure if you can update tags on version. AFAIK version should be immutable and be result of write operations.\nDoes updating/setting tags bump blob version? (updating metadata does that)", "author": "kasobol-msft", "createdAt": "2020-04-20T22:59:23Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobAsyncClientBase.java", "diffHunk": "@@ -1348,6 +1440,108 @@ private void downloadToFileCleanup(AsynchronousFileChannel channel, String fileP\n             .map(response -> new SimpleResponse<>(response, null));\n     }\n \n+    /**\n+     * Returns the blob's tags.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.getTags}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"GET DOCS LINK\">Azure Docs</a></p>\n+     *\n+     * @return A reactive response containing the blob's tags.\n+     */\n+    public Mono<Map<String, String>> getTags() {\n+        return this.getTagsWithResponse().map(Response::getValue);\n+    }\n+\n+    /**\n+     * Returns the blob's tags.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.getTagsWithResponse}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"GET DOCS LINK\">Azure Docs</a></p>\n+     *\n+     * @return A reactive response containing the blob's tags.\n+     */\n+    public Mono<Response<Map<String, String>>> getTagsWithResponse() {\n+        try {\n+            return withContext(this::getTagsWithResponse);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    Mono<Response<Map<String, String>>> getTagsWithResponse(Context context) {\n+        return this.azureBlobStorage.blobs().getTagsWithRestResponseAsync(null, null, null, null, snapshot,\n+            null /* versionId */, context)\n+            .map(response -> {\n+                Map<String, String> tags = new HashMap<>();\n+                for(BlobTag tag : response.getValue().getBlobTagSet()) {\n+                    tags.put(tag.getKey(), tag.getValue());\n+                }\n+                return new SimpleResponse<>(response, tags);\n+            });\n+    }\n+\n+    /**\n+     * Sets user defined tags. The specified tags in this method will replace existing tags. If old values must be\n+     * preserved, they must be downloaded and included in the call to this method.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.setTags#Map}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"ADD DOCS LINK\">Azure Docs</a></p>\n+     *\n+     * @param tags Tags to associate with the blob.\n+     * @return A reactive response signaling completion.\n+     */\n+    public Mono<Void> setTags(Map<String, String> tags) {\n+        return this.setTagsWithResponse(tags).flatMap(FluxUtil::toMono);\n+    }\n+\n+    /**\n+     * Sets user defined tags. The specified tags in this method will replace existing tags. If old values must be\n+     * preserved, they must be downloaded and included in the call to this method.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.specialized.BlobAsyncClientBase.setTagsWithResponse#Map}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"ADD DOCS LINK\">Azure Docs</a></p>\n+     *\n+     * @param tags Tags to associate with the blob.\n+     * @return A reactive response signaling completion.\n+     */\n+    public Mono<Response<Void>> setTagsWithResponse(Map<String, String> tags) {\n+        try {\n+            return withContext(context -> setTagsWithResponse(tags, context));\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    Mono<Response<Void>> setTagsWithResponse(Map<String, String> tags, Context context) {\n+        List<BlobTag> tagList = null;\n+        if (tags != null) {\n+            tagList = new ArrayList<>();\n+            for (String tag : tags.keySet()) {\n+                tagList.add(new BlobTag().setKey(tag).setValue(tags.get(tag)));\n+            }\n+        }\n+        BlobTags t = new BlobTags().setBlobTagSet(tagList);\n+        return this.azureBlobStorage.blobs().setTagsWithRestResponseAsync(null, null, null, snapshot,\n+            null /* versionId */, null, null, null, t, context)", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2NDcwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r412564709", "bodyText": "The spec says you can set tags on a version. It's unclear if it bumps the version number. It is, however, not allowed on a snapshot.\nDo you think we should throw if the client has a snapshot value so that customers don't think we're setting tags on their snapshot when we're really just ignoring it? For the record, we don't throw on setMetadata. We just don't pass the snapshot value.", "author": "rickle-msft", "createdAt": "2020-04-21T23:39:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NzUzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE4NTExMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r413185113", "bodyText": "then we should be passing versionId here (should be available by now).\nI think we can let service do the validation for snapshot (in case they change their mind).", "author": "kasobol-msft", "createdAt": "2020-04-22T17:40:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NzUzMw=="}], "type": "inlineReview", "revised_code": {"commit": "fb53eb01abdd08ddadbe74f8fcc3717e04473306", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobAsyncClientBase.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobAsyncClientBase.java\nindex e3d4c3dfbd8..710a4888a99 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobAsyncClientBase.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobAsyncClientBase.java\n\n@@ -1478,7 +1477,7 @@ public class BlobAsyncClientBase {\n \n     Mono<Response<Map<String, String>>> getTagsWithResponse(Context context) {\n         return this.azureBlobStorage.blobs().getTagsWithRestResponseAsync(null, null, null, null, snapshot,\n-            null /* versionId */, context)\n+            versionId, context)\n             .map(response -> {\n                 Map<String, String> tags = new HashMap<>();\n                 for(BlobTag tag : response.getValue().getBlobTagSet()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0OTQ4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r411749488", "bodyText": "Please use long as block size and don't use deprecated constructor below.", "author": "kasobol-msft", "createdAt": "2020-04-20T23:04:14Z", "path": "sdk/storage/azure-storage-blob/src/samples/java/com/azure/storage/blob/BlobClientJavaDocCodeSnippets.java", "diffHunk": "@@ -429,4 +429,34 @@ public void uploadFromFile2() throws IOException {\n         }\n         // END: com.azure.storage.blob.BlobClient.uploadFromFile#String-ParallelTransferOptions-BlobHttpHeaders-Map-AccessTier-BlobRequestConditions-Duration\n     }\n+\n+    /**\n+     * Code snippet for {@link BlobClient#uploadFromFile(String, ParallelTransferOptions, BlobHttpHeaders, Map, Map, AccessTier, BlobRequestConditions, Duration)}\n+     *\n+     * @throws IOException If an I/O error occurs\n+     */\n+    public void uploadFromFile3() throws IOException {\n+        // BEGIN: com.azure.storage.blob.BlobClient.uploadFromFile#String-ParallelTransferOptions-BlobHttpHeaders-Map-Map-AccessTier-BlobRequestConditions-Duration\n+        BlobHttpHeaders headers = new BlobHttpHeaders()\n+            .setContentMd5(\"data\".getBytes(StandardCharsets.UTF_8))\n+            .setContentLanguage(\"en-US\")\n+            .setContentType(\"binary\");\n+\n+        Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n+        Map<String, String> tags = Collections.singletonMap(\"tag\", \"value\");\n+        BlobRequestConditions requestConditions = new BlobRequestConditions()\n+            .setLeaseId(leaseId)\n+            .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n+        Integer blockSize = 100 * 1024 * 1024; // 100 MB;", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb53eb01abdd08ddadbe74f8fcc3717e04473306", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/samples/java/com/azure/storage/blob/BlobClientJavaDocCodeSnippets.java b/sdk/storage/azure-storage-blob/src/samples/java/com/azure/storage/blob/BlobClientJavaDocCodeSnippets.java\nindex ad80952c3e6..9eb6ffaf99b 100644\n--- a/sdk/storage/azure-storage-blob/src/samples/java/com/azure/storage/blob/BlobClientJavaDocCodeSnippets.java\n+++ b/sdk/storage/azure-storage-blob/src/samples/java/com/azure/storage/blob/BlobClientJavaDocCodeSnippets.java\n\n@@ -447,8 +447,8 @@ public class BlobClientJavaDocCodeSnippets {\n         BlobRequestConditions requestConditions = new BlobRequestConditions()\n             .setLeaseId(leaseId)\n             .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n-        Integer blockSize = 100 * 1024 * 1024; // 100 MB;\n-        ParallelTransferOptions parallelTransferOptions = new ParallelTransferOptions(blockSize, null, null);\n+        Long blockSize = 100 * 1024 * 1024L; // 100 MB;\n+        ParallelTransferOptions parallelTransferOptions = new ParallelTransferOptions().setBlockSizeLong(blockSize);\n \n         try {\n             client.uploadFromFile(filePath, parallelTransferOptions, headers, metadata, tags,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3NzI0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r411777246", "bodyText": "Is this method empty now?", "author": "gapra-msft", "createdAt": "2020-04-21T00:13:32Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java", "diffHunk": "@@ -270,8 +295,34 @@ public void uploadFromFile(String filePath, boolean overwrite) {\n     public void uploadFromFile(String filePath, ParallelTransferOptions parallelTransferOptions,\n         BlobHttpHeaders headers, Map<String, String> metadata, AccessTier tier, BlobRequestConditions requestConditions,\n         Duration timeout) {\n+", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2NTgwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r412565808", "bodyText": "Yikes good catch.", "author": "rickle-msft", "createdAt": "2020-04-21T23:41:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3NzI0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "fb53eb01abdd08ddadbe74f8fcc3717e04473306", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java\nindex 5009422b8ae..e71b1823487 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java\n\n@@ -295,7 +295,7 @@ public class BlobClient extends BlobClientBase {\n     public void uploadFromFile(String filePath, ParallelTransferOptions parallelTransferOptions,\n         BlobHttpHeaders headers, Map<String, String> metadata, AccessTier tier, BlobRequestConditions requestConditions,\n         Duration timeout) {\n-\n+        this.uploadFromFile(filePath, parallelTransferOptions, headers, metadata, null, tier, requestConditions, null);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3ODExMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r411778110", "bodyText": "rename code snippet", "author": "gapra-msft", "createdAt": "2020-04-21T00:16:05Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java", "diffHunk": "@@ -329,6 +331,72 @@ public String getAccountUrl() {\n                 null, Context.NONE), timeout);\n     }\n \n+\n+    /**\n+     * Returns a reactive Publisher emitting the blobs in this account whose tags match the query expression. For more\n+     * information, including information on the query syntax, see the <a href=\"DOC LINK NEEDED\">Azure Docs</a>.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.BlobServiceAsyncClient.filterBlobs#String}", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb53eb01abdd08ddadbe74f8fcc3717e04473306", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java\nindex 33e7f3b0b5b..67ef34cf225 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java\n\n@@ -338,7 +340,7 @@ public final class BlobServiceAsyncClient {\n      *\n      * <p><strong>Code Samples</strong></p>\n      *\n-     * {@codesnippet com.azure.storage.blob.BlobServiceAsyncClient.filterBlobs#String}\n+     * {@codesnippet com.azure.storage.blob.BlobServiceAsyncClient.findBlobsByTag#String}\n      *\n      * @param query Filters the results to return only blobs whose tags match the specified expression.\n      * @return A reactive response emitting the list of blobs.\n"}}, {"oid": "cf9d78ce51220c39a9c697350d12aba47a6b0149", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cf9d78ce51220c39a9c697350d12aba47a6b0149", "message": "Minor change", "committedDate": "2020-04-21T00:17:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3ODgxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r411778816", "bodyText": "could we return like BlobItem? What are the properties we want to expose on this?", "author": "gapra-msft", "createdAt": "2020-04-21T00:18:13Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java", "diffHunk": "@@ -329,6 +331,72 @@ public String getAccountUrl() {\n                 null, Context.NONE), timeout);\n     }\n \n+\n+    /**\n+     * Returns a reactive Publisher emitting the blobs in this account whose tags match the query expression. For more\n+     * information, including information on the query syntax, see the <a href=\"DOC LINK NEEDED\">Azure Docs</a>.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.BlobServiceAsyncClient.filterBlobs#String}\n+     *\n+     * @param query Filters the results to return only blobs whose tags match the specified expression.\n+     * @return A reactive response emitting the list of blobs.\n+     */\n+    public PagedFlux<FilterBlobItem> findBlobsByTags(String query) {\n+        return this.findBlobsByTags(query, null, null);\n+    }\n+\n+    /**\n+     * Returns a reactive Publisher emitting the blobs in this account whose tags match the query expression. For more\n+     * information, including information on the query syntax, see the <a href=\"DOC LINK NEEDED\">Azure Docs</a>.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.BlobAsyncServiceClient.filterBlobs#String-Integer}\n+     *\n+     * @param query Filters the results to return only blobs whose tags match the specified expression.\n+     * @param maxResultsPerPage The maximum number of results to return in a given page.\n+     * @return A reactive response emitting the list of blobs.\n+     */\n+    public PagedFlux<FilterBlobItem> findBlobsByTags(String query, Integer maxResultsPerPage) {\n+        try {\n+            return findBlobsByTags(query, maxResultsPerPage, null);\n+        } catch (RuntimeException ex) {\n+            return pagedFluxError(logger, ex);\n+        }\n+    }\n+\n+    // TODO: options instead of maxResults?\n+    // TODO: Return type?", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2Njc5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r412566798", "bodyText": "Unfortunately the results here only come back with container name, blob name, and tag key/value. Because BlobItem has so many properties, it seemed weird to return it when most of them would be null, also there's no place for the tag key/value to go. But it's also kinda lame that we have a whole different list result type for this.\nI don't really think there's a good alternative, but I left it open in case other people could think of one and because I can't", "author": "rickle-msft", "createdAt": "2020-04-21T23:44:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3ODgxNg=="}], "type": "inlineReview", "revised_code": {"commit": "fb53eb01abdd08ddadbe74f8fcc3717e04473306", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java\nindex 33e7f3b0b5b..67ef34cf225 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java\n\n@@ -338,7 +340,7 @@ public final class BlobServiceAsyncClient {\n      *\n      * <p><strong>Code Samples</strong></p>\n      *\n-     * {@codesnippet com.azure.storage.blob.BlobServiceAsyncClient.filterBlobs#String}\n+     * {@codesnippet com.azure.storage.blob.BlobServiceAsyncClient.findBlobsByTag#String}\n      *\n      * @param query Filters the results to return only blobs whose tags match the specified expression.\n      * @return A reactive response emitting the list of blobs.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc4MDg2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r411780865", "bodyText": "How do the tags get populated in swagger? Is it similar to metadata? Or completely different. Why do we need to do this set thing?", "author": "gapra-msft", "createdAt": "2020-04-21T00:24:28Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobItem.java", "diffHunk": "@@ -15,6 +18,35 @@\n @JacksonXmlRootElement(localName = \"Blob\")\n @Fluent\n public final class BlobItem {\n+\n+\n+    public BlobItem() {\n+\n+    }\n+\n+    /**\n+     * Initializes a new blob item.\n+     *\n+     * @param blobItemInternal The internal structure from which to pull state.\n+     */\n+    public BlobItem(BlobItemInternal blobItemInternal) {\n+        this.name = blobItemInternal.getName();\n+        this.deleted = blobItemInternal.isDeleted();\n+        this.snapshot = blobItemInternal.getSnapshot();\n+        this.properties = blobItemInternal.getProperties();\n+        this.metadata = blobItemInternal.getMetadata();\n+        this.versionId = blobItemInternal.getVersionId();\n+        this.isCurrentVersion = blobItemInternal.isCurrentVersion();\n+        this.isPrefix = blobItemInternal.isPrefix();\n+\n+        this.tags = new HashMap<>();", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2ODg4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r412568885", "bodyText": "Metadata looks like this:\n<Metadata>     \n        <Name>value</Name>  \n</Metadata>  \n\nTags looks like this:\n<Tags> \n    <TagSet> \n        <Tag> \n            <Key>key1</Key> \n            <Value>val1</Value> \n        </Tag> \n        <Tag> \n            <Key>key2</Key> \n            <Value>val2</Value> \n        </Tag> \n    </TagSet> \n</Tags> \n\nSo unfortunately there's a lot more hierarchy in the tags results, which gets generates as this gross object model that you need to call like Tags.getTagSet.getTag(i).getValue as opposed to being able to index into a map.", "author": "rickle-msft", "createdAt": "2020-04-21T23:50:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc4MDg2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fb53eb01abdd08ddadbe74f8fcc3717e04473306", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobItem.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobItem.java\nindex 484302eec48..946c534a102 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobItem.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobItem.java\n\n@@ -19,7 +20,6 @@ import java.util.Map;\n @Fluent\n public final class BlobItem {\n \n-\n     public BlobItem() {\n \n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc4MTEyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r411781123", "bodyText": "If this is internal only, it can go in implementation.", "author": "gapra-msft", "createdAt": "2020-04-21T00:25:20Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobItemInternal.java", "diffHunk": "@@ -0,0 +1,251 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.storage.blob.models;", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb53eb01abdd08ddadbe74f8fcc3717e04473306", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobItemInternal.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/models/BlobItemInternal.java\nsimilarity index 98%\nrename from sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobItemInternal.java\nrename to sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/models/BlobItemInternal.java\nindex cbd48e78590..3da8f82059c 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobItemInternal.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/models/BlobItemInternal.java\n\n@@ -2,9 +2,10 @@\n // Licensed under the MIT License.\n // Code generated by Microsoft (R) AutoRest Code Generator.\n \n-package com.azure.storage.blob.models;\n+package com.azure.storage.blob.implementation.models;\n \n import com.azure.core.annotation.Fluent;\n+import com.azure.storage.blob.models.BlobItemProperties;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc4MTQ5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r411781497", "bodyText": "Do we want to consider deprecating the setters if we no longer want people to use them?", "author": "gapra-msft", "createdAt": "2020-04-21T00:26:35Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobItem.java", "diffHunk": "@@ -124,82 +154,91 @@ public BlobItem setSnapshot(String snapshot) {\n     }\n \n     /**\n-     * Get the versionId property: The versionId property.\n+     * Get the properties property: The properties property.\n      *\n-     * @return the versionId value.\n+     * @return the properties value.\n      */\n-    public String getVersionId() {\n-        return this.versionId;\n+    public BlobItemProperties getProperties() {\n+        return this.properties;\n     }\n \n     /**\n-     * Set the versionId property: The versionId property.\n+     * Set the properties property: The properties property.\n      *\n-     * @param versionId the versionId value to set.\n+     * @param properties the properties value to set.\n      * @return the BlobItem object itself.\n      */\n-    public BlobItem setVersionId(String versionId) {\n-        this.versionId = versionId;\n+    public BlobItem setProperties(BlobItemProperties properties) {\n+        this.properties = properties;\n         return this;\n     }\n \n     /**\n-     * Get the isCurrentVersion property: The isCurrentVersion property.\n+     * Get the metadata property: The metadata property.\n      *\n-     * @return the isCurrentVersion value.\n+     * @return the metadata value.\n      */\n-    public Boolean isCurrentVersion() {\n-        return this.isCurrentVersion;\n+    public Map<String, String> getMetadata() {\n+        return this.metadata;\n     }\n \n     /**\n-     * Set the isCurrentVersion property: The isCurrentVersion property.\n+     * Set the metadata property: The metadata property.\n      *\n-     * @param isCurrentVersion the isCurrentVersion value to set.\n+     * @param metadata the metadata value to set.\n      * @return the BlobItem object itself.\n      */\n-    public BlobItem setIsCurrentVersion(Boolean isCurrentVersion) {\n-        this.isCurrentVersion = isCurrentVersion;\n+    public BlobItem setMetadata(Map<String, String> metadata) {\n+        this.metadata = metadata;\n         return this;\n     }\n \n     /**\n-     * Get the properties property: The properties property.\n+     * Get the tags property: The tag property.\n      *\n-     * @return the properties value.\n+     * @return the metadata value.\n      */\n-    public BlobItemProperties getProperties() {\n-        return this.properties;\n+    public Map<String, String> getTags() {\n+        return this.tags;\n     }\n \n     /**\n-     * Set the properties property: The properties property.\n+     * Get the versionId property: The versionId property.\n      *\n-     * @param properties the properties value to set.\n+     * @return the versionId value.\n+     */\n+    public String getVersionId() {\n+        return this.versionId;\n+    }\n+\n+    /**\n+     * Set the versionId property: The versionId property.\n+     *\n+     * @param versionId the versionId value to set.\n      * @return the BlobItem object itself.\n      */\n-    public BlobItem setProperties(BlobItemProperties properties) {\n-        this.properties = properties;\n+    public BlobItem setVersionId(String versionId) {", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55291e0d192d8c47aeaa4bbbd3ad222c33593944", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobItem.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobItem.java\nindex 484302eec48..19374562441 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobItem.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobItem.java\n\n@@ -242,6 +257,52 @@ public final class BlobItem {\n         return this;\n     }\n \n+    /**\n+     * Get the objectReplicationPolicyId property: The\n+     * objectReplicationPolicyId property.\n+     *\n+     * @return the objectReplicationPolicyId value.\n+     */\n+    public String getObjectReplicationPolicyId() {\n+        return this.objectReplicationPolicyId;\n+    }\n+\n+    /**\n+     * Set the objectReplicationPolicyId property: The\n+     * objectReplicationPolicyId property.\n+     *\n+     * @param objectReplicationPolicyId the objectReplicationPolicyId value to\n+     * set.\n+     * @return the BlobItem object itself.\n+     */\n+    public BlobItem setObjectReplicationPolicyId(String objectReplicationPolicyId) {\n+        this.objectReplicationPolicyId = objectReplicationPolicyId;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the objectReplicationRuleStatus property: The\n+     * objectReplicationRuleStatus property.\n+     *\n+     * @return the objectReplicationRuleStatus value.\n+     */\n+    public Map<String, String> getObjectReplicationRuleStatus() {\n+        return this.objectReplicationRuleStatus;\n+    }\n+\n+    /**\n+     * Set the objectReplicationRuleStatus property: The\n+     * objectReplicationRuleStatus property.\n+     *\n+     * @param objectReplicationRuleStatus the objectReplicationRuleStatus value\n+     * to set.\n+     * @return the BlobItem object itself.\n+     */\n+    public BlobItem setObjectReplicationRuleStatus(Map<String, String> objectReplicationRuleStatus) {\n+        this.objectReplicationRuleStatus = objectReplicationRuleStatus;\n+        return this;\n+    }\n+\n     /**\n      * Get the isPrefix property: The isPrefix property.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI5NzIzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r412297230", "bodyText": "Is this in a public API? If not should probably go in implementation", "author": "gapra-msft", "createdAt": "2020-04-21T16:01:42Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobTagSet.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.storage.blob.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.storage.blob.implementation.models.BlobTag;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * a collection of blob tags.\n+ */\n+@Fluent\n+public final class BlobTagSet {", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb53eb01abdd08ddadbe74f8fcc3717e04473306", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobTagSet.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobTagSet.java\ndeleted file mode 100644\nindex 6e5fa8e7dd6..00000000000\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/models/BlobTagSet.java\n+++ /dev/null\n\n@@ -1,59 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-// Code generated by Microsoft (R) AutoRest Code Generator.\n-\n-package com.azure.storage.blob.models;\n-\n-import com.azure.core.annotation.Fluent;\n-import com.azure.storage.blob.implementation.models.BlobTag;\n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-/**\n- * a collection of blob tags.\n- */\n-@Fluent\n-public final class BlobTagSet {\n-    private static final class TagSetWrapper {\n-        @JacksonXmlProperty(localName = \"Tag\")\n-        private final List<BlobTag> items;\n-\n-        @JsonCreator\n-        private TagSetWrapper(@JacksonXmlProperty(localName = \"Tag\") List<BlobTag> items) {\n-            this.items = items;\n-        }\n-    }\n-\n-    /*\n-     * The blobTagList property.\n-     */\n-    @JsonProperty(value = \"TagSet\", required = true)\n-    private TagSetWrapper blobTagList;\n-\n-    /**\n-     * Get the blobTagList property: The blobTagList property.\n-     *\n-     * @return the blobTagList value.\n-     */\n-    public List<BlobTag> getBlobTagList() {\n-        if (this.blobTagList == null) {\n-            this.blobTagList = new TagSetWrapper(new ArrayList<BlobTag>());\n-        }\n-        return this.blobTagList.items;\n-    }\n-\n-    /**\n-     * Set the blobTagList property: The blobTagList property.\n-     *\n-     * @param blobTagList the blobTagList value to set.\n-     * @return the BlobTagSet object itself.\n-     */\n-    public BlobTagSet setBlobTagList(List<BlobTag> blobTagList) {\n-        this.blobTagList = new TagSetWrapper(blobTagList);\n-        return this;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0MDIxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r412540213", "bodyText": "do we need a snippet for the max overloads too?", "author": "gapra-msft", "createdAt": "2020-04-21T22:40:30Z", "path": "sdk/storage/azure-storage-blob/src/samples/java/com/azure/storage/blob/specialized/BlobAsyncClientBaseJavaDocCodeSnippets.java", "diffHunk": "@@ -198,6 +198,25 @@ public void setMetadataCodeSnippet() {\n         // END: com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadata#Map\n     }\n \n+    /**\n+     * Code snippets for {@link BlobAsyncClientBase#getTags()}", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE4OTExMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r413189110", "bodyText": "There is one on line 463. This file is just structured such that all the min overloads are up top", "author": "rickle-msft", "createdAt": "2020-04-22T17:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0MDIxMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzExMTE2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r413111161", "bodyText": "Would we want to reorder the arguments so tags is at the end to promote an easier upgrade path for current SDK users?", "author": "alzimmermsft", "createdAt": "2020-04-22T16:02:31Z", "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobAsyncClient.java", "diffHunk": "@@ -241,11 +241,55 @@\n     public Mono<Response<BlockBlobItem>> uploadWithResponse(Flux<ByteBuffer> data,\n         ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String, String> metadata,\n         AccessTier tier, BlobRequestConditions requestConditions) {\n+        return this.uploadWithResponse(data, parallelTransferOptions, headers, metadata, null, tier, requestConditions);\n+    }\n+\n+    /**\n+     * Creates a new block blob, or updates the content of an existing block blob. Updating an existing block blob\n+     * overwrites any existing metadata on the blob. Partial updates are not supported with this method; the content of\n+     * the existing blob is overwritten with the new content. To perform a partial update of a block blob's, use {@link\n+     * BlockBlobAsyncClient#stageBlock(String, Flux, long) stageBlock} and\n+     * {@link BlockBlobAsyncClient#commitBlockList(List)}, which this method uses internally. For more information,\n+     * see the <a href=\"https://docs.microsoft.com/rest/api/storageservices/put-block\">Azure\n+     * Docs for Put Block</a> and the <a href=\"https://docs.microsoft.com/rest/api/storageservices/put-block-list\">Azure\n+     * Docs for Put Block List</a>.\n+     * <p>\n+     * The data passed need not support multiple subscriptions/be replayable as is required in other upload methods when\n+     * retries are enabled, and the length of the data need not be known in advance. Therefore, this method should\n+     * support uploading any arbitrary data source, including network streams. This behavior is possible because this\n+     * method will perform some internal buffering as configured by the blockSize and numBuffers parameters, so while\n+     * this method may offer additional convenience, it will not be as performant as other options, which should be\n+     * preferred when possible.\n+     * <p>\n+     * Typically, the greater the number of buffers used, the greater the possible parallelism when transferring the\n+     * data. Larger buffers means we will have to stage fewer blocks and therefore require fewer IO operations. The\n+     * trade-offs between these values are context-dependent, so some experimentation may be required to optimize inputs\n+     * for a given scenario.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.specialized.cryptography.EncryptedBlobAsyncClient.uploadWithResponse#Flux-ParallelTransferOptions-BlobHttpHeaders-Map-AccessTier-BlobRequestConditions}\n+     *\n+     * @param data The data to write to the blob. Unlike other upload methods, this method does not require that the\n+     * {@code Flux} be replayable. In other words, it does not have to support multiple subscribers and is not expected\n+     * to produce the same values across subscriptions.\n+     * @param parallelTransferOptions {@link ParallelTransferOptions} used to configure buffered uploading.\n+     * @param headers {@link BlobHttpHeaders}\n+     * @param metadata Metadata to associate with the blob.\n+     * @param tags Tags to associate with the destination blob.\n+     * @param tier {@link AccessTier} for the destination blob.\n+     * @param requestConditions {@link BlobRequestConditions}\n+     * @return A reactive response containing the information of the uploaded block blob.\n+     */\n+    public Mono<Response<BlockBlobItem>> uploadWithResponse(Flux<ByteBuffer> data,\n+        ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String, String> metadata,\n+        Map<String, String> tags, AccessTier tier, BlobRequestConditions requestConditions) {", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE5MDIyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r413190228", "bodyText": "I get that, but I also think I don't agree with it. I think it's cleaner to have things sort of logically/consistently grouped, and requestConditions are always at the end. And tags and metadata are conceptually similar.\nI can be persuaded to the contrary if other folks agree we should always add new parameters to the end.", "author": "rickle-msft", "createdAt": "2020-04-22T17:47:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzExMTE2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1MzkxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r413353915", "bodyText": "I think its fine to change groupings since we didnt deprecate the old method. If we forced everyone to bump to this new overload, then I could see a case for trying to make it easier to upgrade", "author": "gapra-msft", "createdAt": "2020-04-22T21:43:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzExMTE2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "fb53eb01abdd08ddadbe74f8fcc3717e04473306", "chunk": "diff --git a/sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobAsyncClient.java b/sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobAsyncClient.java\nindex b6ad11f88dc..67bee245e93 100644\n--- a/sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobAsyncClient.java\n+++ b/sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobAsyncClient.java\n\n@@ -285,8 +286,8 @@ public class EncryptedBlobAsyncClient extends BlobAsyncClient {\n         ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String, String> metadata,\n         Map<String, String> tags, AccessTier tier, BlobRequestConditions requestConditions) {\n         try {\n-            final Map<String, String> metadataFinal = metadata == null ? new HashMap<>() : metadata;\n-            final Map<String, String> tagsFinal = tags == null ? new HashMap<>() : tags;\n+            final Map<String, String> metadataFinal = metadata == null ? Collections.emptyMap() : metadata;\n+            final Map<String, String> tagsFinal = tags == null ? Collections.emptyMap() : tags;\n             Mono<Flux<ByteBuffer>> dataFinal = prepareToSendEncryptedRequest(data, metadataFinal);\n             return dataFinal.flatMap(df -> super.uploadWithResponse(df, parallelTransferOptions, headers, metadataFinal,\n                 tagsFinal, tier, requestConditions));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzExOTY5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r413119696", "bodyText": "Collection.singletonList?", "author": "alzimmermsft", "createdAt": "2020-04-22T16:13:47Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java", "diffHunk": "@@ -329,6 +331,72 @@ public String getAccountUrl() {\n                 null, Context.NONE), timeout);\n     }\n \n+\n+    /**\n+     * Returns a reactive Publisher emitting the blobs in this account whose tags match the query expression. For more\n+     * information, including information on the query syntax, see the <a href=\"DOC LINK NEEDED\">Azure Docs</a>.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.BlobServiceAsyncClient.filterBlobs#String}\n+     *\n+     * @param query Filters the results to return only blobs whose tags match the specified expression.\n+     * @return A reactive response emitting the list of blobs.\n+     */\n+    public PagedFlux<FilterBlobItem> findBlobsByTags(String query) {\n+        return this.findBlobsByTags(query, null, null);\n+    }\n+\n+    /**\n+     * Returns a reactive Publisher emitting the blobs in this account whose tags match the query expression. For more\n+     * information, including information on the query syntax, see the <a href=\"DOC LINK NEEDED\">Azure Docs</a>.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.BlobAsyncServiceClient.filterBlobs#String-Integer}\n+     *\n+     * @param query Filters the results to return only blobs whose tags match the specified expression.\n+     * @param maxResultsPerPage The maximum number of results to return in a given page.\n+     * @return A reactive response emitting the list of blobs.\n+     */\n+    public PagedFlux<FilterBlobItem> findBlobsByTags(String query, Integer maxResultsPerPage) {\n+        try {\n+            return findBlobsByTags(query, maxResultsPerPage, null);\n+        } catch (RuntimeException ex) {\n+            return pagedFluxError(logger, ex);\n+        }\n+    }\n+\n+    // TODO: options instead of maxResults?\n+    // TODO: Return type?\n+    PagedFlux<FilterBlobItem> findBlobsByTags(String query, Integer maxResults, Duration timeout) {\n+        throwOnAnonymousAccess();\n+        Function<String, Mono<PagedResponse<FilterBlobItem>>> func =\n+            marker -> findBlobsByTags(query, marker, maxResults, timeout)\n+                .map(response -> {\n+                    List<FilterBlobItem> value = response.getValue().getBlobs() == null\n+                        ? new ArrayList<>(0)", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb53eb01abdd08ddadbe74f8fcc3717e04473306", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java\nindex 33e7f3b0b5b..67ef34cf225 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java\n\n@@ -338,7 +340,7 @@ public final class BlobServiceAsyncClient {\n      *\n      * <p><strong>Code Samples</strong></p>\n      *\n-     * {@codesnippet com.azure.storage.blob.BlobServiceAsyncClient.filterBlobs#String}\n+     * {@codesnippet com.azure.storage.blob.BlobServiceAsyncClient.findBlobsByTag#String}\n      *\n      * @param query Filters the results to return only blobs whose tags match the specified expression.\n      * @return A reactive response emitting the list of blobs.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEyMDQ3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r413120475", "bodyText": "Thoughts on adding some convenience method to build a query?", "author": "alzimmermsft", "createdAt": "2020-04-22T16:14:48Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java", "diffHunk": "@@ -329,6 +331,72 @@ public String getAccountUrl() {\n                 null, Context.NONE), timeout);\n     }\n \n+\n+    /**\n+     * Returns a reactive Publisher emitting the blobs in this account whose tags match the query expression. For more\n+     * information, including information on the query syntax, see the <a href=\"DOC LINK NEEDED\">Azure Docs</a>.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.blob.BlobServiceAsyncClient.filterBlobs#String}\n+     *\n+     * @param query Filters the results to return only blobs whose tags match the specified expression.\n+     * @return A reactive response emitting the list of blobs.\n+     */\n+    public PagedFlux<FilterBlobItem> findBlobsByTags(String query) {", "originalCommit": "cf0edae6d2d0f746f94c0fffe5d6abf91c9838dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE5MTE5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r413191195", "bodyText": "I think this is a part of an ongoing email thread about what sort of object model we want to offer, if any, to support building queries.", "author": "rickle-msft", "createdAt": "2020-04-22T17:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEyMDQ3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fb53eb01abdd08ddadbe74f8fcc3717e04473306", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java\nindex 33e7f3b0b5b..67ef34cf225 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java\n\n@@ -338,7 +340,7 @@ public final class BlobServiceAsyncClient {\n      *\n      * <p><strong>Code Samples</strong></p>\n      *\n-     * {@codesnippet com.azure.storage.blob.BlobServiceAsyncClient.filterBlobs#String}\n+     * {@codesnippet com.azure.storage.blob.BlobServiceAsyncClient.findBlobsByTag#String}\n      *\n      * @param query Filters the results to return only blobs whose tags match the specified expression.\n      * @return A reactive response emitting the list of blobs.\n"}}, {"oid": "fb53eb01abdd08ddadbe74f8fcc3717e04473306", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fb53eb01abdd08ddadbe74f8fcc3717e04473306", "message": "PR feedback", "committedDate": "2020-04-22T18:15:44Z", "type": "commit"}, {"oid": "8622c70fed9854c7258b5259a3b0758700628ac7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8622c70fed9854c7258b5259a3b0758700628ac7", "message": "Removed unnecessary overload on BlobProperties", "committedDate": "2020-04-22T18:30:11Z", "type": "commit"}, {"oid": "251ce94490b09d22f8a1efd90137956e2f9f8a1c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/251ce94490b09d22f8a1efd90137956e2f9f8a1c", "message": "CI fix", "committedDate": "2020-04-22T23:38:44Z", "type": "commit"}, {"oid": "c24b8f6227dc5214fd6edc3feac420d8478c08eb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c24b8f6227dc5214fd6edc3feac420d8478c08eb", "message": "CI fix", "committedDate": "2020-04-22T23:50:39Z", "type": "commit"}, {"oid": "2be4ae88d87cd9453405d2dc446937d3e69dc176", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2be4ae88d87cd9453405d2dc446937d3e69dc176", "message": "Refactored method signatures", "committedDate": "2020-04-24T17:06:25Z", "type": "commit"}, {"oid": "de65545e7f9cba2e31660bebecd21ae216a0b12d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/de65545e7f9cba2e31660bebecd21ae216a0b12d", "message": "CI updates", "committedDate": "2020-04-27T19:17:17Z", "type": "commit"}, {"oid": "de65545e7f9cba2e31660bebecd21ae216a0b12d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/de65545e7f9cba2e31660bebecd21ae216a0b12d", "message": "CI updates", "committedDate": "2020-04-27T19:17:17Z", "type": "forcePushed"}, {"oid": "454580a64019d867da83a8ab6879979c0458b8de", "url": "https://github.com/Azure/azure-sdk-for-java/commit/454580a64019d867da83a8ab6879979c0458b8de", "message": "Added docs to new types", "committedDate": "2020-04-27T21:16:40Z", "type": "commit"}, {"oid": "77268363e07c74cdd3b466da81524e0140599f71", "url": "https://github.com/Azure/azure-sdk-for-java/commit/77268363e07c74cdd3b466da81524e0140599f71", "message": "Fixed code snippet problems", "committedDate": "2020-04-27T21:32:55Z", "type": "commit"}, {"oid": "e230a729b02e041917096b0b82cc39aee8477bbe", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e230a729b02e041917096b0b82cc39aee8477bbe", "message": "CI fixes", "committedDate": "2020-04-27T22:17:08Z", "type": "commit"}, {"oid": "9c360edc6f6ca4b7cd876b15ad5b7a2ac93959ff", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9c360edc6f6ca4b7cd876b15ad5b7a2ac93959ff", "message": "Hopefully fixed sas tests", "committedDate": "2020-04-28T21:06:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyMjQ4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r419722482", "bodyText": "Do we want to deprecate these max overload methods ?", "author": "kasobol-msft", "createdAt": "2020-05-04T20:55:22Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java", "diffHunk": "@@ -270,8 +297,27 @@ public void uploadFromFile(String filePath, boolean overwrite) {\n     public void uploadFromFile(String filePath, ParallelTransferOptions parallelTransferOptions,", "originalCommit": "9c360edc6f6ca4b7cd876b15ad5b7a2ac93959ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1Njc1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r430656755", "bodyText": "I don't think we need to deprecate. There's nothing really wrong with them unless we want to be proactive about trimming older options", "author": "rickle-msft", "createdAt": "2020-05-26T19:33:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyMjQ4Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyNDA1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r419724055", "bodyText": "I think this is regression. Please check generator version you're using with https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/storage/azure-storage-blob/swagger#generation .", "author": "kasobol-msft", "createdAt": "2020-05-04T20:58:20Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/AzureBlobStorageImpl.java", "diffHunk": "@@ -203,7 +203,7 @@ public BlockBlobsImpl blockBlobs() {\n      * Initializes an instance of AzureBlobStorage client.\n      */\n     public AzureBlobStorageImpl() {\n-        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy()).build());\n+        new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy()).build();", "originalCommit": "9c360edc6f6ca4b7cd876b15ad5b7a2ac93959ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4176d725b9e617429be23418babdc9864e9b4e9e", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/AzureBlobStorageImpl.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/AzureBlobStorageImpl.java\nindex 7db61e4d470..3f625647f6f 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/AzureBlobStorageImpl.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/AzureBlobStorageImpl.java\n\n@@ -203,7 +203,7 @@ public final class AzureBlobStorageImpl {\n      * Initializes an instance of AzureBlobStorage client.\n      */\n     public AzureBlobStorageImpl() {\n-        new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy()).build();\n+        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy()).build());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyNTU0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r419725543", "bodyText": "Why this rename is required?", "author": "kasobol-msft", "createdAt": "2020-05-04T21:00:53Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/models/CustomHierarchicalListingDeserializer.java", "diffHunk": "@@ -17,11 +16,11 @@\n \n     @Override\n     public BlobHierarchyListSegment deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n-        ArrayList<BlobItem> blobItems = new ArrayList<>();\n+        ArrayList<BlobItemInternal> blobItems = new ArrayList<>();", "originalCommit": "9c360edc6f6ca4b7cd876b15ad5b7a2ac93959ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1NjM4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r430656385", "bodyText": "Because the BlobItem type produced by the generator has a really bad interface for interacting with tags resulting from how it's structured in the payload/swagger. We want to get rid of that and just return a map, which required renaming the generated type to be internal", "author": "rickle-msft", "createdAt": "2020-05-26T19:32:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyNTU0Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcyNzczMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10382#discussion_r419727731", "bodyText": "we should preserve this comment.", "author": "kasobol-msft", "createdAt": "2020-05-04T21:04:57Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobOutputStream.java", "diffHunk": "@@ -186,9 +204,9 @@ void commit() {\n \n         private BlockBlobOutputStream(final BlobAsyncClient client,\n             final ParallelTransferOptions parallelTransferOptions, final BlobHttpHeaders headers,\n-            final Map<String, String> metadata, final AccessTier tier, final BlobRequestConditions requestConditions,\n-            Context context) {\n-            super(Integer.MAX_VALUE); // writeThreshold is effectively not used by BlockBlobOutputStream.", "originalCommit": "9c360edc6f6ca4b7cd876b15ad5b7a2ac93959ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a39bb6676644d794f22413373dbca56b724aa029", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobOutputStream.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobOutputStream.java\nindex 8371f47bf77..ab79bf32c74 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobOutputStream.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobOutputStream.java\n\n@@ -206,7 +206,7 @@ public abstract class BlobOutputStream extends StorageOutputStream {\n             final ParallelTransferOptions parallelTransferOptions, final BlobHttpHeaders headers,\n             final Map<String, String> metadata, Map<String, String> tags, final AccessTier tier,\n             final BlobRequestConditions requestConditions, Context context) {\n-            super(Integer.MAX_VALUE);\n+            super(Integer.MAX_VALUE); // writeThreshold is effectively not used by BlockBlobOutputStream.\n             // There is a bug in reactor core that does not handle converting Context.NONE to a reactor context.\n             context = context == null || context.equals(Context.NONE) ? null : context;\n \n"}}, {"oid": "55291e0d192d8c47aeaa4bbbd3ad222c33593944", "url": "https://github.com/Azure/azure-sdk-for-java/commit/55291e0d192d8c47aeaa4bbbd3ad222c33593944", "message": "Merged 73 regeneration", "committedDate": "2020-05-06T22:45:53Z", "type": "commit"}, {"oid": "1180c2d9a927b49af2a69ffb61a9125cb5a57cef", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1180c2d9a927b49af2a69ffb61a9125cb5a57cef", "message": "CI fixes", "committedDate": "2020-05-06T22:50:10Z", "type": "commit"}, {"oid": "b4a478db988041e69fdfe0011a8cfeec76e1c8cb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b4a478db988041e69fdfe0011a8cfeec76e1c8cb", "message": "Merge remote-tracking branch 'upstream/feature/storage/stg73' into blobTags", "committedDate": "2020-05-14T20:55:29Z", "type": "commit"}, {"oid": "0b648c5b2ab71fdab6247d0fc2475eb020c63be4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0b648c5b2ab71fdab6247d0fc2475eb020c63be4", "message": "CI fix", "committedDate": "2020-05-14T21:24:53Z", "type": "commit"}, {"oid": "4188ae770289fa1d9592b016337e566758f4b819", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4188ae770289fa1d9592b016337e566758f4b819", "message": "Fixed merge errors", "committedDate": "2020-05-14T22:22:12Z", "type": "commit"}, {"oid": "1dd53abb24fd4e941dd87e9ceb5af1edf478d047", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1dd53abb24fd4e941dd87e9ceb5af1edf478d047", "message": "CI fixes", "committedDate": "2020-05-14T22:54:40Z", "type": "commit"}, {"oid": "c40805ba3c46ee525221daa8a36f37a65161e1e4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c40805ba3c46ee525221daa8a36f37a65161e1e4", "message": "Javadoc fixes", "committedDate": "2020-05-14T23:18:57Z", "type": "commit"}, {"oid": "f37b1322a3d2a8ae86c8d6ffa26520a22b1c57e1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f37b1322a3d2a8ae86c8d6ffa26520a22b1c57e1", "message": "Javadoc fixes", "committedDate": "2020-05-14T23:51:00Z", "type": "commit"}, {"oid": "7ef02ecfc7f05136358fcb728b5f4ef0dd95dbfe", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7ef02ecfc7f05136358fcb728b5f4ef0dd95dbfe", "message": "Unused import", "committedDate": "2020-05-15T00:11:17Z", "type": "commit"}, {"oid": "4176d725b9e617429be23418babdc9864e9b4e9e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4176d725b9e617429be23418babdc9864e9b4e9e", "message": "Fixed generator regression", "committedDate": "2020-05-26T19:16:46Z", "type": "commit"}, {"oid": "a39bb6676644d794f22413373dbca56b724aa029", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a39bb6676644d794f22413373dbca56b724aa029", "message": "added back comment", "committedDate": "2020-05-26T19:34:37Z", "type": "commit"}, {"oid": "627cedd87029814c9ba09524108f379284fcc3c0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/627cedd87029814c9ba09524108f379284fcc3c0", "message": "Merge branch 'feature/storage/stg73' into blobTags", "committedDate": "2020-05-26T21:04:48Z", "type": "commit"}]}