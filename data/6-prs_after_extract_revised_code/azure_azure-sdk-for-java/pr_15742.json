{"pr_number": 15742, "pr_title": "CosmosPagedFlux & CosmosPagedIterable Handler", "pr_createdAt": "2020-09-25T23:56:36Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/15742", "timeline": [{"oid": "95202d43f027dbd12b13244f908946069cfe9b35", "url": "https://github.com/Azure/azure-sdk-for-java/commit/95202d43f027dbd12b13244f908946069cfe9b35", "message": "WIP", "committedDate": "2020-09-25T18:22:20Z", "type": "commit"}, {"oid": "c15d978d21619049bea0fd1798625ca17f11c4ac", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c15d978d21619049bea0fd1798625ca17f11c4ac", "message": "Merge branch 'master' into cosmos_paged_flux_handler", "committedDate": "2020-09-25T20:27:59Z", "type": "commit"}, {"oid": "c135b55aa6b8df4af0dfc269f9743a2a20543dbd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c135b55aa6b8df4af0dfc269f9743a2a20543dbd", "message": "WIP for CosmosPagedFluxHandler", "committedDate": "2020-09-25T21:24:26Z", "type": "commit"}, {"oid": "8ad74ef79cc10631c34233ab10d842703dfa25ad", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8ad74ef79cc10631c34233ab10d842703dfa25ad", "message": "WIP for Cosmos Paged Iterable Handler", "committedDate": "2020-09-25T21:40:07Z", "type": "commit"}, {"oid": "6d5f0dc010d748f953808056f9c955ac22f7ed83", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6d5f0dc010d748f953808056f9c955ac22f7ed83", "message": "Added functionality to provide handler to CosmosPagedFlux and CosmosPagedIterable", "committedDate": "2020-09-25T23:53:25Z", "type": "commit"}, {"oid": "df24d030f3536129da73f60444473ad145dddaa7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/df24d030f3536129da73f60444473ad145dddaa7", "message": "Merged latest master and resolved conflicts", "committedDate": "2020-09-25T23:54:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NDU0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496084541", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Consumer<FeedResponse<T>> feedResponseConsumer;\n          \n          \n            \n                private final Consumer<FeedResponse<T>> feedResponseConsumer;", "author": "moderakh", "createdAt": "2020-09-28T16:34:29Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedFlux.java", "diffHunk": "@@ -36,10 +37,29 @@\n \n     private final Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> optionsFluxFunction;\n \n+    private Consumer<FeedResponse<T>> feedResponseConsumer;", "originalCommit": "df24d030f3536129da73f60444473ad145dddaa7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE0MjIwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r497142204", "bodyText": "It can't be final as this is optional. We only set this in 1 constructor which is invoked by handle() API.", "author": "kushagraThapar", "createdAt": "2020-09-29T23:34:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE0MjczOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r497142739", "bodyText": "you can set it to null in the other constructor.", "author": "moderakh", "createdAt": "2020-09-29T23:35:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NDU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE0NTAwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r497145007", "bodyText": "Yes, that is possible, we can do that.", "author": "kushagraThapar", "createdAt": "2020-09-29T23:38:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NDU0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "98f661d2b5e6af340d4c81a1043f335304cd5221", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedFlux.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedFlux.java\nindex 7710b5a82ff..6d11a07343a 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedFlux.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedFlux.java\n\n@@ -37,10 +37,11 @@ public final class CosmosPagedFlux<T> extends ContinuablePagedFlux<String, T, Fe\n \n     private final Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> optionsFluxFunction;\n \n-    private Consumer<FeedResponse<T>> feedResponseConsumer;\n+    private final Consumer<FeedResponse<T>> feedResponseConsumer;\n \n     CosmosPagedFlux(Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> optionsFluxFunction) {\n         this.optionsFluxFunction = optionsFluxFunction;\n+        this.feedResponseConsumer = null;\n     }\n \n     CosmosPagedFlux(Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> optionsFluxFunction,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5MDA0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496090042", "bodyText": "you will need client builder for session consistency otherwise the test will become flaky.\nperhaps clientBuildersWithDirectSession ?", "author": "moderakh", "createdAt": "2020-09-28T16:43:33Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedFluxTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ *\n+ */\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosPagedFluxTest extends TestSuiteBase {\n+\n+    private static final int NUM_OF_ITEMS = 10;\n+\n+    private CosmosAsyncClient cosmosAsyncClient;\n+    private CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @Factory(dataProvider = \"clientBuilders\")", "originalCommit": "df24d030f3536129da73f60444473ad145dddaa7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98f661d2b5e6af340d4c81a1043f335304cd5221", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedFluxTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedFluxTest.java\nindex 278a903d489..4ca9084b983 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedFluxTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedFluxTest.java\n\n@@ -6,10 +6,12 @@\n \n package com.azure.cosmos;\n \n-import com.azure.cosmos.implementation.InternalObjectNode;\n import com.azure.cosmos.models.CosmosQueryRequestOptions;\n import com.azure.cosmos.rx.TestSuiteBase;\n import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.testng.annotations.AfterClass;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Factory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5MDU4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496090584", "bodyText": "loggger.info is too noisy for the test.", "author": "moderakh", "createdAt": "2020-09-28T16:44:25Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ *\n+ */\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.azure.cosmos.util.CosmosPagedIterable;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosPagedIterableTest extends TestSuiteBase {\n+\n+    private static final int NUM_OF_ITEMS = 10;\n+\n+    private CosmosClient cosmosClient;\n+    private CosmosContainer cosmosContainer;\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public CosmosPagedIterableTest(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    @BeforeClass(groups = { \"simple\" }, timeOut = SETUP_TIMEOUT)\n+    public void before_CosmosPagedIterableTest() {\n+        assertThat(this.cosmosClient).isNull();\n+        this.cosmosClient = getClientBuilder().buildClient();\n+        CosmosAsyncContainer asyncContainer = getSharedMultiPartitionCosmosContainer(this.cosmosClient.asyncClient());\n+        cosmosContainer =\n+            cosmosClient.getDatabase(asyncContainer.getDatabase().getId()).getContainer(asyncContainer.getId());\n+        createItems(NUM_OF_ITEMS);\n+    }\n+\n+    @AfterClass(groups = { \"simple\" }, timeOut = SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    public void afterClass() {\n+        assertThat(this.cosmosClient).isNotNull();\n+        this.cosmosClient.close();\n+    }\n+\n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void readAllItemsByPageWithCosmosPagedIterableHandler() throws Exception {\n+        CosmosQueryRequestOptions cosmosQueryRequestOptions = new CosmosQueryRequestOptions();\n+\n+        CosmosPagedIterable<InternalObjectNode> cosmosPagedIterable =\n+            cosmosContainer.readAllItems(cosmosQueryRequestOptions, InternalObjectNode.class);\n+\n+        AtomicInteger handleCount = new AtomicInteger();\n+        cosmosPagedIterable = cosmosPagedIterable.handle(feedResponse -> {\n+            CosmosDiagnostics cosmosDiagnostics = feedResponse.getCosmosDiagnostics();\n+            logger.info(\"Cosmos Diagnostics : {}\", cosmosDiagnostics);", "originalCommit": "df24d030f3536129da73f60444473ad145dddaa7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98f661d2b5e6af340d4c81a1043f335304cd5221", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java\nindex f114d2ce155..89e7927ebf9 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java\n\n@@ -6,10 +6,12 @@\n \n package com.azure.cosmos;\n \n-import com.azure.cosmos.implementation.InternalObjectNode;\n import com.azure.cosmos.models.CosmosQueryRequestOptions;\n import com.azure.cosmos.rx.TestSuiteBase;\n import com.azure.cosmos.util.CosmosPagedIterable;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.testng.annotations.AfterClass;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Factory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NDExNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496094115", "bodyText": "ditto we should use client builder with at least session, otherwise the test will be flaky.\nperhaps clientBuildersWithDirectSession", "author": "moderakh", "createdAt": "2020-09-28T16:50:28Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ *\n+ */\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.azure.cosmos.util.CosmosPagedIterable;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosPagedIterableTest extends TestSuiteBase {\n+\n+    private static final int NUM_OF_ITEMS = 10;\n+\n+    private CosmosClient cosmosClient;\n+    private CosmosContainer cosmosContainer;\n+\n+    @Factory(dataProvider = \"clientBuilders\")", "originalCommit": "df24d030f3536129da73f60444473ad145dddaa7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98f661d2b5e6af340d4c81a1043f335304cd5221", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java\nindex f114d2ce155..89e7927ebf9 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java\n\n@@ -6,10 +6,12 @@\n \n package com.azure.cosmos;\n \n-import com.azure.cosmos.implementation.InternalObjectNode;\n import com.azure.cosmos.models.CosmosQueryRequestOptions;\n import com.azure.cosmos.rx.TestSuiteBase;\n import com.azure.cosmos.util.CosmosPagedIterable;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.testng.annotations.AfterClass;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Factory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NTQzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496095434", "bodyText": "for the new test please don't use InternalObjectNode this will be used by the end user.\nPlease rely on ObjectNode or a simple POJO.", "author": "moderakh", "createdAt": "2020-09-28T16:52:46Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedFluxTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ *\n+ */\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosPagedFluxTest extends TestSuiteBase {\n+\n+    private static final int NUM_OF_ITEMS = 10;\n+\n+    private CosmosAsyncClient cosmosAsyncClient;\n+    private CosmosAsyncContainer cosmosAsyncContainer;\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public CosmosPagedFluxTest(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    @BeforeClass(groups = { \"simple\" }, timeOut = SETUP_TIMEOUT)\n+    public void before_CosmosPagedFluxTest() {\n+        assertThat(this.cosmosAsyncClient).isNull();\n+        this.cosmosAsyncClient = getClientBuilder().buildAsyncClient();\n+        CosmosAsyncContainer asyncContainer = getSharedMultiPartitionCosmosContainer(this.cosmosAsyncClient);\n+        cosmosAsyncContainer =\n+            cosmosAsyncClient.getDatabase(asyncContainer.getDatabase().getId()).getContainer(asyncContainer.getId());\n+        createItems(NUM_OF_ITEMS);\n+    }\n+\n+    @AfterClass(groups = { \"simple\" }, timeOut = SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    public void afterClass() {\n+        assertThat(this.cosmosAsyncClient).isNotNull();\n+        this.cosmosAsyncClient.close();\n+    }\n+\n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void readAllItemsByPageWithCosmosPagedFluxHandler() throws Exception {\n+        CosmosQueryRequestOptions cosmosQueryRequestOptions = new CosmosQueryRequestOptions();\n+\n+        CosmosPagedFlux<InternalObjectNode> cosmosPagedFlux =", "originalCommit": "df24d030f3536129da73f60444473ad145dddaa7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98f661d2b5e6af340d4c81a1043f335304cd5221", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedFluxTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedFluxTest.java\nindex 278a903d489..4ca9084b983 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedFluxTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedFluxTest.java\n\n@@ -6,10 +6,12 @@\n \n package com.azure.cosmos;\n \n-import com.azure.cosmos.implementation.InternalObjectNode;\n import com.azure.cosmos.models.CosmosQueryRequestOptions;\n import com.azure.cosmos.rx.TestSuiteBase;\n import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.testng.annotations.AfterClass;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Factory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NTUzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496095536", "bodyText": "ditto.\nfor the new test please don't use InternalObjectNode this will be used by the end user.\nPlease rely on ObjectNode or a simple POJO.", "author": "moderakh", "createdAt": "2020-09-28T16:52:56Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ *\n+ */\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.InternalObjectNode;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import com.azure.cosmos.util.CosmosPagedIterable;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class CosmosPagedIterableTest extends TestSuiteBase {\n+\n+    private static final int NUM_OF_ITEMS = 10;\n+\n+    private CosmosClient cosmosClient;\n+    private CosmosContainer cosmosContainer;\n+\n+    @Factory(dataProvider = \"clientBuilders\")\n+    public CosmosPagedIterableTest(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    @BeforeClass(groups = { \"simple\" }, timeOut = SETUP_TIMEOUT)\n+    public void before_CosmosPagedIterableTest() {\n+        assertThat(this.cosmosClient).isNull();\n+        this.cosmosClient = getClientBuilder().buildClient();\n+        CosmosAsyncContainer asyncContainer = getSharedMultiPartitionCosmosContainer(this.cosmosClient.asyncClient());\n+        cosmosContainer =\n+            cosmosClient.getDatabase(asyncContainer.getDatabase().getId()).getContainer(asyncContainer.getId());\n+        createItems(NUM_OF_ITEMS);\n+    }\n+\n+    @AfterClass(groups = { \"simple\" }, timeOut = SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    public void afterClass() {\n+        assertThat(this.cosmosClient).isNotNull();\n+        this.cosmosClient.close();\n+    }\n+\n+    @Test(groups = { \"simple\" }, timeOut = TIMEOUT)\n+    public void readAllItemsByPageWithCosmosPagedIterableHandler() throws Exception {\n+        CosmosQueryRequestOptions cosmosQueryRequestOptions = new CosmosQueryRequestOptions();\n+\n+        CosmosPagedIterable<InternalObjectNode> cosmosPagedIterable =", "originalCommit": "df24d030f3536129da73f60444473ad145dddaa7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98f661d2b5e6af340d4c81a1043f335304cd5221", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java\nindex f114d2ce155..89e7927ebf9 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosPagedIterableTest.java\n\n@@ -6,10 +6,12 @@\n \n package com.azure.cosmos;\n \n-import com.azure.cosmos.implementation.InternalObjectNode;\n import com.azure.cosmos.models.CosmosQueryRequestOptions;\n import com.azure.cosmos.rx.TestSuiteBase;\n import com.azure.cosmos.util.CosmosPagedIterable;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.testng.annotations.AfterClass;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Factory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NTk1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r496095958", "bodyText": "nit: final.", "author": "moderakh", "createdAt": "2020-09-28T16:53:41Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedIterable.java", "diffHunk": "@@ -22,12 +22,27 @@\n  */\n public final class CosmosPagedIterable<T> extends ContinuablePagedIterable<String, T, FeedResponse<T>> {\n \n+    private CosmosPagedFlux<T> cosmosPagedFlux;", "originalCommit": "df24d030f3536129da73f60444473ad145dddaa7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE0NzM0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15742#discussion_r497147346", "bodyText": "This cannot be final, because this is mutable. However, we can change it to be immutable, will try that out.", "author": "kushagraThapar", "createdAt": "2020-09-29T23:42:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NTk1OA=="}], "type": "inlineReview", "revised_code": {"commit": "98f661d2b5e6af340d4c81a1043f335304cd5221", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedIterable.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedIterable.java\nindex cd0f702b195..2e31e030d20 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedIterable.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/CosmosPagedIterable.java\n\n@@ -22,7 +22,7 @@ import java.util.function.Consumer;\n  */\n public final class CosmosPagedIterable<T> extends ContinuablePagedIterable<String, T, FeedResponse<T>> {\n \n-    private CosmosPagedFlux<T> cosmosPagedFlux;\n+    private final CosmosPagedFlux<T> cosmosPagedFlux;\n \n     /**\n      * Creates instance given {@link CosmosPagedFlux}.\n"}}, {"oid": "98f661d2b5e6af340d4c81a1043f335304cd5221", "url": "https://github.com/Azure/azure-sdk-for-java/commit/98f661d2b5e6af340d4c81a1043f335304cd5221", "message": "Updated tests with ObjectNode and other code review comments", "committedDate": "2020-09-30T00:07:53Z", "type": "commit"}]}