{"pr_number": 7593, "pr_title": "Add Support for Environment Proxy Configurations", "pr_createdAt": "2020-01-21T23:15:15Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/7593", "timeline": [{"oid": "93a0c91bd4c979c19cb549ee85a5d47afa8646fa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/93a0c91bd4c979c19cb549ee85a5d47afa8646fa", "message": "Implementation idea to support loading proxy environment variables", "committedDate": "2020-01-07T22:31:25Z", "type": "commit"}, {"oid": "895b3e6567990ea52e750ac3639de7c4ec3736f9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/895b3e6567990ea52e750ac3639de7c4ec3736f9", "message": "Merge branch 'master' into AzCore_SupportJavaProxyProperties", "committedDate": "2020-01-09T21:16:26Z", "type": "commit"}, {"oid": "03cc33fe5aed025b912de93e2057810164cb92da", "url": "https://github.com/Azure/azure-sdk-for-java/commit/03cc33fe5aed025b912de93e2057810164cb92da", "message": "Merge branch 'master' into AzCore_SupportJavaProxyProperties", "committedDate": "2020-01-09T22:33:25Z", "type": "commit"}, {"oid": "66db9e3ba9fbc86b6fb656fe772509058d6824a9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/66db9e3ba9fbc86b6fb656fe772509058d6824a9", "message": "Beginning to add Netty tests", "committedDate": "2020-01-10T18:16:00Z", "type": "commit"}, {"oid": "1c06233ba0ed27c884d4d394d859cc366a799186", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1c06233ba0ed27c884d4d394d859cc366a799186", "message": "Merge branch 'master' into AzCore_SupportJavaProxyProperties", "committedDate": "2020-01-10T22:09:44Z", "type": "commit"}, {"oid": "e3f0f036ec2a121ebe05a59862cdb9aaa9536820", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e3f0f036ec2a121ebe05a59862cdb9aaa9536820", "message": "Added tests for ProxyOptions", "committedDate": "2020-01-13T19:02:25Z", "type": "commit"}, {"oid": "ca9b86c8718380eea4ccbc920bbab223de3cfe3d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ca9b86c8718380eea4ccbc920bbab223de3cfe3d", "message": "Merge branch 'master' into AzCore_SupportJavaProxyProperties", "committedDate": "2020-01-21T23:14:02Z", "type": "commit"}, {"oid": "eceadd9a85bf8d447928d9acf558092880ff5c3a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/eceadd9a85bf8d447928d9acf558092880ff5c3a", "message": "Adding tests, removing classes which are no longer being used", "committedDate": "2020-01-22T01:33:40Z", "type": "commit"}, {"oid": "b3f055d8a9f54efd8e7dd1cdc53a5edfe22ba625", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b3f055d8a9f54efd8e7dd1cdc53a5edfe22ba625", "message": "Fix linting issue", "committedDate": "2020-01-22T02:05:17Z", "type": "commit"}, {"oid": "e74774faf2e891ab32c843fe2e8a594af1550d6b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e74774faf2e891ab32c843fe2e8a594af1550d6b", "message": "Merge branch 'master' into AzCore_SupportJavaProxyProperties", "committedDate": "2020-01-22T02:45:38Z", "type": "commit"}, {"oid": "b7c5c1278ff02d77e2530329451e091fe30deeff", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b7c5c1278ff02d77e2530329451e091fe30deeff", "message": "Fixed failing tests", "committedDate": "2020-01-22T02:54:20Z", "type": "commit"}, {"oid": "fc3cff068d96147f5db17aeed43bdcd9643a400e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fc3cff068d96147f5db17aeed43bdcd9643a400e", "message": "Updating tests to handle configuration that is setup in the environment", "committedDate": "2020-01-22T17:38:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2NzA2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7593#discussion_r370867067", "bodyText": "nit: loadFromConfiguration would be a better name as you are passing the configuration to this method (and configuration can load data from the environment or somewhere else)", "author": "srnagar", "createdAt": "2020-01-24T22:17:03Z", "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java", "diffHunk": "@@ -78,50 +85,55 @@ public NettyAsyncHttpClientBuilder(HttpClient nettyHttpClient) {\n                     tcpConfig = tcpConfig.runOn(nioEventLoopGroup);\n                 }\n \n-                if (proxyOptions != null) {\n-                    ProxyProvider.Proxy nettyProxy;\n-                    switch (proxyOptions.getType()) {\n-                        case HTTP:\n-                            nettyProxy = ProxyProvider.Proxy.HTTP;\n-                            break;\n-                        case SOCKS4:\n-                            nettyProxy = ProxyProvider.Proxy.SOCKS4;\n-                            break;\n-                        case SOCKS5:\n-                            nettyProxy = ProxyProvider.Proxy.SOCKS5;\n-                            break;\n-                        default:\n-                            throw logger.logExceptionAsError(new IllegalStateException(\n-                                String.format(\"Unknown Proxy type '%s' in use. Not configuring Netty proxy.\",\n-                                    proxyOptions.getType())));\n-                    }\n-                    if (proxyOptions.getUsername() != null) {\n-                        // Netty supports only Basic proxy authentication and we default to it.\n-                        return tcpConfig.proxy(ts -> ts.type(nettyProxy)\n-                                .address(proxyOptions.getAddress())\n-                                .username(proxyOptions.getUsername())\n-                                .password(userName -> proxyOptions.getPassword())\n-                                .build());\n-                    } else {\n-                        return tcpConfig.proxy(ts -> ts.type(nettyProxy).address(proxyOptions.getAddress()));\n-                    }\n+                ProxyOptions buildProxyOptions = (proxyOptions == null)\n+                    ? ProxyOptions.loadFromEnvironment(buildConfiguration)", "originalCommit": "fc3cff068d96147f5db17aeed43bdcd9643a400e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3NjMzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7593#discussion_r371976337", "bodyText": "Renamed", "author": "alzimmermsft", "createdAt": "2020-01-28T18:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2NzA2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "228b9ad3382e7be159f13951838b2190c1a6001b", "chunk": "diff --git a/sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java b/sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java\nindex 0693d30955b..3a63e717299 100644\n--- a/sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java\n+++ b/sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java\n\n@@ -86,7 +86,7 @@ public class NettyAsyncHttpClientBuilder {\n                 }\n \n                 ProxyOptions buildProxyOptions = (proxyOptions == null)\n-                    ? ProxyOptions.loadFromEnvironment(buildConfiguration)\n+                    ? ProxyOptions.loadFromConfiguration(buildConfiguration)\n                     : proxyOptions;\n \n                 if (buildProxyOptions != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2ODQwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7593#discussion_r370868400", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Environment configurations are loaded in this oreder:\n          \n          \n            \n                 * Environment configurations are loaded in this order:", "author": "srnagar", "createdAt": "2020-01-24T22:21:43Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java", "diffHunk": "@@ -68,6 +115,125 @@ public String getPassword() {\n         return this.password;\n     }\n \n+    /**\n+     * @return the hosts that bypass the proxy.\n+     */\n+    public String getNonProxyHosts() {\n+        return this.nonProxyHosts;\n+    }\n+\n+    /**\n+     * Attempts to load a proxy from the environment.\n+     *\n+     * <p>\n+     * Environment configurations are loaded in this oreder:", "originalCommit": "fc3cff068d96147f5db17aeed43bdcd9643a400e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3NjQ3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7593#discussion_r371976479", "bodyText": "Fixed typo", "author": "alzimmermsft", "createdAt": "2020-01-28T18:23:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2ODQwMA=="}], "type": "inlineReview", "revised_code": {"commit": "228b9ad3382e7be159f13951838b2190c1a6001b", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java b/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java\nindex c561a046b92..b64f6c0eb28 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java\n\n@@ -126,7 +135,7 @@ public class ProxyOptions {\n      * Attempts to load a proxy from the environment.\n      *\n      * <p>\n-     * Environment configurations are loaded in this oreder:\n+     * Environment configurations are loaded in this order:\n      * <ol>\n      *     <li>Azure HTTPS</li>\n      *     <li>Azure HTTP</li>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3MTI3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7593#discussion_r370871272", "bodyText": "This should be wrapped with logger.logAsError().", "author": "srnagar", "createdAt": "2020-01-24T22:31:36Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java", "diffHunk": "@@ -68,6 +115,125 @@ public String getPassword() {\n         return this.password;\n     }\n \n+    /**\n+     * @return the hosts that bypass the proxy.\n+     */\n+    public String getNonProxyHosts() {\n+        return this.nonProxyHosts;\n+    }\n+\n+    /**\n+     * Attempts to load a proxy from the environment.\n+     *\n+     * <p>\n+     * Environment configurations are loaded in this oreder:\n+     * <ol>\n+     *     <li>Azure HTTPS</li>\n+     *     <li>Azure HTTP</li>\n+     *     <li>Java HTTPS</li>\n+     *     <li>Java HTTP</li>\n+     * </ol>\n+     *\n+     * Azure proxy configurations will be preferred over Java proxy configurations as they are more closely scoped to\n+     * the purpose of the SDK. Additionally, more secure protocols, HTTPS vs HTTP, will be preferred.\n+     *\n+     * <p>\n+     * {@code null} will be returned if no proxy was found in the environment.\n+     *\n+     * @param configuration The {@link Configuration} that is used to load proxy configurations from the environment.\n+     * If {@code null} is passed then {@link Configuration#getGlobalConfiguration()} will be used. If\n+     * {@link Configuration#NONE} is passed {@link IllegalArgumentException} will be thrown.\n+     * @return A {@link ProxyOptions} reflecting a proxy loaded from the environment, if no proxy is found {@code null}\n+     * will be returned.\n+     * @throws IllegalArgumentException If {@code configuration} is {@link Configuration#NONE}.\n+     */\n+    public static ProxyOptions loadFromEnvironment(Configuration configuration) {\n+        if (configuration == Configuration.NONE) {\n+            throw new IllegalArgumentException(\"'configuration' cannot be 'Configuration.NONE'.\");", "originalCommit": "fc3cff068d96147f5db17aeed43bdcd9643a400e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3ODMyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7593#discussion_r371978320", "bodyText": "This will require either adding a static logger or create an instance every time this method is called, instead should this scenario return null? Throwing here was an arbitrary decision since passing no configuration won't return anything reasonable.", "author": "alzimmermsft", "createdAt": "2020-01-28T18:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3MTI3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "228b9ad3382e7be159f13951838b2190c1a6001b", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java b/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java\nindex c561a046b92..b64f6c0eb28 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java\n\n@@ -126,7 +135,7 @@ public class ProxyOptions {\n      * Attempts to load a proxy from the environment.\n      *\n      * <p>\n-     * Environment configurations are loaded in this oreder:\n+     * Environment configurations are loaded in this order:\n      * <ol>\n      *     <li>Azure HTTPS</li>\n      *     <li>Azure HTTP</li>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3Mjg5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7593#discussion_r370872895", "bodyText": "Add a log when there's a malformed url. It helps in debugging issues.", "author": "srnagar", "createdAt": "2020-01-24T22:37:29Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java", "diffHunk": "@@ -68,6 +115,125 @@ public String getPassword() {\n         return this.password;\n     }\n \n+    /**\n+     * @return the hosts that bypass the proxy.\n+     */\n+    public String getNonProxyHosts() {\n+        return this.nonProxyHosts;\n+    }\n+\n+    /**\n+     * Attempts to load a proxy from the environment.\n+     *\n+     * <p>\n+     * Environment configurations are loaded in this oreder:\n+     * <ol>\n+     *     <li>Azure HTTPS</li>\n+     *     <li>Azure HTTP</li>\n+     *     <li>Java HTTPS</li>\n+     *     <li>Java HTTP</li>\n+     * </ol>\n+     *\n+     * Azure proxy configurations will be preferred over Java proxy configurations as they are more closely scoped to\n+     * the purpose of the SDK. Additionally, more secure protocols, HTTPS vs HTTP, will be preferred.\n+     *\n+     * <p>\n+     * {@code null} will be returned if no proxy was found in the environment.\n+     *\n+     * @param configuration The {@link Configuration} that is used to load proxy configurations from the environment.\n+     * If {@code null} is passed then {@link Configuration#getGlobalConfiguration()} will be used. If\n+     * {@link Configuration#NONE} is passed {@link IllegalArgumentException} will be thrown.\n+     * @return A {@link ProxyOptions} reflecting a proxy loaded from the environment, if no proxy is found {@code null}\n+     * will be returned.\n+     * @throws IllegalArgumentException If {@code configuration} is {@link Configuration#NONE}.\n+     */\n+    public static ProxyOptions loadFromEnvironment(Configuration configuration) {\n+        if (configuration == Configuration.NONE) {\n+            throw new IllegalArgumentException(\"'configuration' cannot be 'Configuration.NONE'.\");\n+        }\n+\n+        Configuration proxyConfiguration = (configuration == null)\n+            ? Configuration.getGlobalConfiguration()\n+            : configuration;\n+\n+        for (Function<Configuration, ProxyOptions> loader : ENVIRONMENT_LOAD_ORDER) {\n+            ProxyOptions proxyOptions = loader.apply(proxyConfiguration);\n+            if (proxyOptions != null) {\n+                return proxyOptions;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    private static ProxyOptions attemptToLoadAzureProxy(Configuration configuration, String proxyProperty) {\n+        String proxyConfiguration = configuration.get(proxyProperty);\n+\n+        // No proxy configuration setup.\n+        if (CoreUtils.isNullOrEmpty(proxyConfiguration)) {\n+            return null;\n+        }\n+\n+        try {\n+            URL proxyUrl = new URL(proxyConfiguration);\n+            int port = (proxyUrl.getPort() == -1) ? proxyUrl.getDefaultPort() : proxyUrl.getPort();\n+            ProxyOptions proxyOptions = new ProxyOptions(Type.HTTP, new InetSocketAddress(proxyUrl.getHost(), port))\n+                .setNonProxyHosts(configuration.get(Configuration.PROPERTY_NO_PROXY));\n+\n+            String userInfo = proxyUrl.getUserInfo();\n+            if (userInfo != null) {\n+                String[] usernamePassword = userInfo.split(\":\", 2);\n+                if (usernamePassword.length == 2) {\n+                    try {\n+                        proxyOptions.setCredentials(\n+                            URLDecoder.decode(usernamePassword[0], StandardCharsets.UTF_8.toString()),\n+                            URLDecoder.decode(usernamePassword[1], StandardCharsets.UTF_8.toString())\n+                        );\n+                    } catch (UnsupportedEncodingException e) {\n+                        return null;\n+                    }\n+                }\n+            }\n+\n+            return proxyOptions;\n+        } catch (MalformedURLException ex) {\n+            return null;", "originalCommit": "fc3cff068d96147f5db17aeed43bdcd9643a400e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "228b9ad3382e7be159f13951838b2190c1a6001b", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java b/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java\nindex c561a046b92..b64f6c0eb28 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java\n\n@@ -126,7 +135,7 @@ public class ProxyOptions {\n      * Attempts to load a proxy from the environment.\n      *\n      * <p>\n-     * Environment configurations are loaded in this oreder:\n+     * Environment configurations are loaded in this order:\n      * <ol>\n      *     <li>Azure HTTPS</li>\n      *     <li>Azure HTTP</li>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3MzQ1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7593#discussion_r370873453", "bodyText": "Consider making these named constants DEFAULT_HTTPS_PORT and DEFAULT_HTTP_PORT.", "author": "srnagar", "createdAt": "2020-01-24T22:39:25Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java", "diffHunk": "@@ -68,6 +115,125 @@ public String getPassword() {\n         return this.password;\n     }\n \n+    /**\n+     * @return the hosts that bypass the proxy.\n+     */\n+    public String getNonProxyHosts() {\n+        return this.nonProxyHosts;\n+    }\n+\n+    /**\n+     * Attempts to load a proxy from the environment.\n+     *\n+     * <p>\n+     * Environment configurations are loaded in this oreder:\n+     * <ol>\n+     *     <li>Azure HTTPS</li>\n+     *     <li>Azure HTTP</li>\n+     *     <li>Java HTTPS</li>\n+     *     <li>Java HTTP</li>\n+     * </ol>\n+     *\n+     * Azure proxy configurations will be preferred over Java proxy configurations as they are more closely scoped to\n+     * the purpose of the SDK. Additionally, more secure protocols, HTTPS vs HTTP, will be preferred.\n+     *\n+     * <p>\n+     * {@code null} will be returned if no proxy was found in the environment.\n+     *\n+     * @param configuration The {@link Configuration} that is used to load proxy configurations from the environment.\n+     * If {@code null} is passed then {@link Configuration#getGlobalConfiguration()} will be used. If\n+     * {@link Configuration#NONE} is passed {@link IllegalArgumentException} will be thrown.\n+     * @return A {@link ProxyOptions} reflecting a proxy loaded from the environment, if no proxy is found {@code null}\n+     * will be returned.\n+     * @throws IllegalArgumentException If {@code configuration} is {@link Configuration#NONE}.\n+     */\n+    public static ProxyOptions loadFromEnvironment(Configuration configuration) {\n+        if (configuration == Configuration.NONE) {\n+            throw new IllegalArgumentException(\"'configuration' cannot be 'Configuration.NONE'.\");\n+        }\n+\n+        Configuration proxyConfiguration = (configuration == null)\n+            ? Configuration.getGlobalConfiguration()\n+            : configuration;\n+\n+        for (Function<Configuration, ProxyOptions> loader : ENVIRONMENT_LOAD_ORDER) {\n+            ProxyOptions proxyOptions = loader.apply(proxyConfiguration);\n+            if (proxyOptions != null) {\n+                return proxyOptions;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    private static ProxyOptions attemptToLoadAzureProxy(Configuration configuration, String proxyProperty) {\n+        String proxyConfiguration = configuration.get(proxyProperty);\n+\n+        // No proxy configuration setup.\n+        if (CoreUtils.isNullOrEmpty(proxyConfiguration)) {\n+            return null;\n+        }\n+\n+        try {\n+            URL proxyUrl = new URL(proxyConfiguration);\n+            int port = (proxyUrl.getPort() == -1) ? proxyUrl.getDefaultPort() : proxyUrl.getPort();\n+            ProxyOptions proxyOptions = new ProxyOptions(Type.HTTP, new InetSocketAddress(proxyUrl.getHost(), port))\n+                .setNonProxyHosts(configuration.get(Configuration.PROPERTY_NO_PROXY));\n+\n+            String userInfo = proxyUrl.getUserInfo();\n+            if (userInfo != null) {\n+                String[] usernamePassword = userInfo.split(\":\", 2);\n+                if (usernamePassword.length == 2) {\n+                    try {\n+                        proxyOptions.setCredentials(\n+                            URLDecoder.decode(usernamePassword[0], StandardCharsets.UTF_8.toString()),\n+                            URLDecoder.decode(usernamePassword[1], StandardCharsets.UTF_8.toString())\n+                        );\n+                    } catch (UnsupportedEncodingException e) {\n+                        return null;\n+                    }\n+                }\n+            }\n+\n+            return proxyOptions;\n+        } catch (MalformedURLException ex) {\n+            return null;\n+        }\n+    }\n+\n+    private static ProxyOptions attemptToLoadJavaProxy(Configuration configuration, String type) {\n+        // Not allowed to use Java proxies\n+        if (!Boolean.parseBoolean(configuration.get(JAVA_PROXY_PREREQUISITE))) {\n+            return null;\n+        }\n+\n+        String host = configuration.get(type + \".\" + JAVA_PROXY_HOST);\n+\n+        // No proxy configuration setup.\n+        if (CoreUtils.isNullOrEmpty(host)) {\n+            return null;\n+        }\n+\n+        int port;\n+        try {\n+            port = Integer.parseInt(configuration.get(type + \".\" + JAVA_PROXY_PORT));\n+        } catch (NumberFormatException ex) {\n+            port = HTTPS.equals(type) ? 443 : 80;", "originalCommit": "fc3cff068d96147f5db17aeed43bdcd9643a400e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3NzI4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7593#discussion_r371977280", "bodyText": "Made these constant.", "author": "alzimmermsft", "createdAt": "2020-01-28T18:24:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3MzQ1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "228b9ad3382e7be159f13951838b2190c1a6001b", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java b/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java\nindex c561a046b92..b64f6c0eb28 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java\n\n@@ -126,7 +135,7 @@ public class ProxyOptions {\n      * Attempts to load a proxy from the environment.\n      *\n      * <p>\n-     * Environment configurations are loaded in this oreder:\n+     * Environment configurations are loaded in this order:\n      * <ol>\n      *     <li>Azure HTTPS</li>\n      *     <li>Azure HTTP</li>\n"}}, {"oid": "0e0e915c2493d8f416429f2c73e6b622ea77a15b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0e0e915c2493d8f416429f2c73e6b622ea77a15b", "message": "Merge branch 'master' into AzCore_SupportJavaProxyProperties", "committedDate": "2020-01-28T18:21:53Z", "type": "commit"}, {"oid": "228b9ad3382e7be159f13951838b2190c1a6001b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/228b9ad3382e7be159f13951838b2190c1a6001b", "message": "Updates based on PR comments", "committedDate": "2020-01-28T18:35:25Z", "type": "commit"}, {"oid": "ac8dcc07f66c34adf4c1654467a05475eb8c9016", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ac8dcc07f66c34adf4c1654467a05475eb8c9016", "message": "Suppress static logger check", "committedDate": "2020-01-28T18:48:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxNjg2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7593#discussion_r372016868", "bodyText": "Think of this error message from the users perspective - this will probably require them to do a search for this string and hope they have found a valid result. What additional guidance can you provide in here to help the user solve this without a web search being required?", "author": "JonathanGiles", "createdAt": "2020-01-28T19:42:48Z", "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java", "diffHunk": "@@ -78,50 +85,55 @@ public NettyAsyncHttpClientBuilder(HttpClient nettyHttpClient) {\n                     tcpConfig = tcpConfig.runOn(nioEventLoopGroup);\n                 }\n \n-                if (proxyOptions != null) {\n-                    ProxyProvider.Proxy nettyProxy;\n-                    switch (proxyOptions.getType()) {\n-                        case HTTP:\n-                            nettyProxy = ProxyProvider.Proxy.HTTP;\n-                            break;\n-                        case SOCKS4:\n-                            nettyProxy = ProxyProvider.Proxy.SOCKS4;\n-                            break;\n-                        case SOCKS5:\n-                            nettyProxy = ProxyProvider.Proxy.SOCKS5;\n-                            break;\n-                        default:\n-                            throw logger.logExceptionAsError(new IllegalStateException(\n-                                String.format(\"Unknown Proxy type '%s' in use. Not configuring Netty proxy.\",\n-                                    proxyOptions.getType())));\n-                    }\n-                    if (proxyOptions.getUsername() != null) {\n-                        // Netty supports only Basic proxy authentication and we default to it.\n-                        return tcpConfig.proxy(ts -> ts.type(nettyProxy)\n-                                .address(proxyOptions.getAddress())\n-                                .username(proxyOptions.getUsername())\n-                                .password(userName -> proxyOptions.getPassword())\n-                                .build());\n-                    } else {\n-                        return tcpConfig.proxy(ts -> ts.type(nettyProxy).address(proxyOptions.getAddress()));\n-                    }\n+                ProxyOptions buildProxyOptions = (proxyOptions == null)\n+                    ? ProxyOptions.loadFromConfiguration(buildConfiguration)\n+                    : proxyOptions;\n+\n+                if (buildProxyOptions != null) {\n+                    tcpConfig = tcpConfig.proxy(typeSpec ->\n+                        typeSpec.type(mapProxyType(buildProxyOptions.getType(), logger))\n+                            .address(proxyOptions.getAddress())\n+                            .username(proxyOptions.getUsername())\n+                            .password(user -> proxyOptions.getPassword())\n+                            .nonProxyHosts(proxyOptions.getNonProxyHosts()));\n                 }\n+\n                 return tcpConfig;\n             });\n+\n         return new NettyAsyncHttpClient(nettyHttpClient);\n     }\n \n+    /*\n+     * Maps a 'ProxyOptions.Type' to a 'ProxyProvider.Proxy', if the type is unknown or cannot be mapped an\n+     * IllegalStateException will be thrown.\n+     */\n+    private static ProxyProvider.Proxy mapProxyType(ProxyOptions.Type type, ClientLogger logger) {\n+        switch (type) {\n+            case HTTP:\n+                return ProxyProvider.Proxy.HTTP;\n+            case SOCKS4:\n+                return ProxyProvider.Proxy.SOCKS4;\n+            case SOCKS5:\n+                return ProxyProvider.Proxy.SOCKS5;\n+            default:\n+                throw logger.logExceptionAsError(new IllegalStateException(\n+                    String.format(\"Unknown Proxy type '%s' in use. Not configuring Netty proxy.\", type)));", "originalCommit": "ac8dcc07f66c34adf4c1654467a05475eb8c9016", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyOTk4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7593#discussion_r372029986", "bodyText": "Updated error message", "author": "alzimmermsft", "createdAt": "2020-01-28T20:09:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxNjg2OA=="}], "type": "inlineReview", "revised_code": {"commit": "22041f484ca924f6ed4826d43fb6db3bd3fc70a6", "chunk": "diff --git a/sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java b/sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java\nindex 3a63e717299..d4c97fa63f7 100644\n--- a/sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java\n+++ b/sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/NettyAsyncHttpClientBuilder.java\n\n@@ -86,7 +86,7 @@ public class NettyAsyncHttpClientBuilder {\n                 }\n \n                 ProxyOptions buildProxyOptions = (proxyOptions == null)\n-                    ? ProxyOptions.loadFromConfiguration(buildConfiguration)\n+                    ? ProxyOptions.fromConfiguration(buildConfiguration)\n                     : proxyOptions;\n \n                 if (buildProxyOptions != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxOTM0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7593#discussion_r372019347", "bodyText": "You might want to consider moving the ternary operation inside the method call and doing it on one line?", "author": "JonathanGiles", "createdAt": "2020-01-28T19:47:45Z", "path": "sdk/core/azure-core-http-okhttp/src/main/java/com/azure/core/http/okhttp/OkHttpAsyncHttpClientBuilder.java", "diffHunk": "@@ -153,59 +171,73 @@ public HttpClient build() {\n         OkHttpClient.Builder httpClientBuilder = this.okHttpClient == null\n                 ? new OkHttpClient.Builder()\n                 : this.okHttpClient.newBuilder();\n-        //\n+\n+        // Add each interceptor that has been added.\n         for (Interceptor interceptor : this.networkInterceptors) {\n             httpClientBuilder = httpClientBuilder.addNetworkInterceptor(interceptor);\n         }\n-        if (this.readTimeout != null) {\n-            httpClientBuilder = httpClientBuilder.readTimeout(this.readTimeout);\n-        } else {\n-            httpClientBuilder = httpClientBuilder.readTimeout(DEFAULT_READ_TIMEOUT);\n-        }\n-        if (this.connectionTimeout != null) {\n-            httpClientBuilder = httpClientBuilder.connectTimeout(this.connectionTimeout);\n-        } else {\n-            httpClientBuilder = httpClientBuilder.connectTimeout(DEFAULT_CONNECT_TIMEOUT);\n-        }\n+\n+        // Use the configured read timeout if set, otherwise use the default (120s).\n+        httpClientBuilder = (this.readTimeout != null)\n+            ? httpClientBuilder.readTimeout(this.readTimeout)\n+            : httpClientBuilder.readTimeout(DEFAULT_READ_TIMEOUT);", "originalCommit": "ac8dcc07f66c34adf4c1654467a05475eb8c9016", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzMTQ3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7593#discussion_r372031471", "bodyText": "Done", "author": "alzimmermsft", "createdAt": "2020-01-28T20:13:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxOTM0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "22041f484ca924f6ed4826d43fb6db3bd3fc70a6", "chunk": "diff --git a/sdk/core/azure-core-http-okhttp/src/main/java/com/azure/core/http/okhttp/OkHttpAsyncHttpClientBuilder.java b/sdk/core/azure-core-http-okhttp/src/main/java/com/azure/core/http/okhttp/OkHttpAsyncHttpClientBuilder.java\nindex 3dbd53e31f3..ec01cfbb4df 100644\n--- a/sdk/core/azure-core-http-okhttp/src/main/java/com/azure/core/http/okhttp/OkHttpAsyncHttpClientBuilder.java\n+++ b/sdk/core/azure-core-http-okhttp/src/main/java/com/azure/core/http/okhttp/OkHttpAsyncHttpClientBuilder.java\n\n@@ -178,9 +178,7 @@ public class OkHttpAsyncHttpClientBuilder {\n         }\n \n         // Use the configured read timeout if set, otherwise use the default (120s).\n-        httpClientBuilder = (this.readTimeout != null)\n-            ? httpClientBuilder.readTimeout(this.readTimeout)\n-            : httpClientBuilder.readTimeout(DEFAULT_READ_TIMEOUT);\n+        httpClientBuilder = httpClientBuilder.readTimeout((readTimeout != null) ? readTimeout : DEFAULT_READ_TIMEOUT);\n \n         // Use the configured connection timeout if set, otherwise use the default (60s).\n         httpClientBuilder = (this.connectionTimeout != null)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxOTc5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7593#discussion_r372019799", "bodyText": "Same comment as earlier for here", "author": "JonathanGiles", "createdAt": "2020-01-28T19:48:35Z", "path": "sdk/core/azure-core-http-okhttp/src/main/java/com/azure/core/http/okhttp/OkHttpAsyncHttpClientBuilder.java", "diffHunk": "@@ -153,59 +171,73 @@ public HttpClient build() {\n         OkHttpClient.Builder httpClientBuilder = this.okHttpClient == null\n                 ? new OkHttpClient.Builder()\n                 : this.okHttpClient.newBuilder();\n-        //\n+\n+        // Add each interceptor that has been added.\n         for (Interceptor interceptor : this.networkInterceptors) {\n             httpClientBuilder = httpClientBuilder.addNetworkInterceptor(interceptor);\n         }\n-        if (this.readTimeout != null) {\n-            httpClientBuilder = httpClientBuilder.readTimeout(this.readTimeout);\n-        } else {\n-            httpClientBuilder = httpClientBuilder.readTimeout(DEFAULT_READ_TIMEOUT);\n-        }\n-        if (this.connectionTimeout != null) {\n-            httpClientBuilder = httpClientBuilder.connectTimeout(this.connectionTimeout);\n-        } else {\n-            httpClientBuilder = httpClientBuilder.connectTimeout(DEFAULT_CONNECT_TIMEOUT);\n-        }\n+\n+        // Use the configured read timeout if set, otherwise use the default (120s).\n+        httpClientBuilder = (this.readTimeout != null)\n+            ? httpClientBuilder.readTimeout(this.readTimeout)\n+            : httpClientBuilder.readTimeout(DEFAULT_READ_TIMEOUT);\n+\n+        // Use the configured connection timeout if set, otherwise use the default (60s).\n+        httpClientBuilder = (this.connectionTimeout != null)\n+            ? httpClientBuilder.connectTimeout(this.connectionTimeout)\n+            : httpClientBuilder.connectTimeout(DEFAULT_CONNECT_TIMEOUT);\n+\n+        // If set use the configured connection pool.\n         if (this.connectionPool != null) {\n             httpClientBuilder = httpClientBuilder.connectionPool(connectionPool);\n         }\n+\n+        // If set use the configured dispatcher.\n         if (this.dispatcher != null) {\n             httpClientBuilder = httpClientBuilder.dispatcher(dispatcher);\n         }\n-        if (proxyOptions != null) {\n-            Proxy.Type proxyType;\n-            switch (proxyOptions.getType()) {\n-                case HTTP:\n-                    proxyType = Proxy.Type.HTTP;\n-                    break;\n-                case SOCKS4:\n-                case SOCKS5:\n-                    // JDK Proxy.Type.SOCKS identifies SOCKS V4 and V5 proxy.\n-                    proxyType = Proxy.Type.SOCKS;\n-                    break;\n-                default:\n-                    throw logger.logExceptionAsError(new IllegalStateException(\n-                            String.format(\"Unknown Proxy type '%s' in use. Not configuring OkHttp proxy.\",\n-                                    proxyOptions.getType())));\n-            }\n-            Proxy proxy = new Proxy(proxyType, this.proxyOptions.getAddress());\n-            httpClientBuilder = httpClientBuilder.proxy(proxy);\n+\n+        Configuration buildConfiguration = (configuration == null)\n+            ? Configuration.getGlobalConfiguration()\n+            : configuration;\n+\n+        ProxyOptions buildProxyOptions = (proxyOptions == null)\n+            ? ProxyOptions.loadFromConfiguration(buildConfiguration)\n+            : proxyOptions;\n+\n+        if (buildProxyOptions != null) {\n+            httpClientBuilder = httpClientBuilder.proxySelector(new OkHttpProxySelector(\n+                mapProxyType(buildProxyOptions.getType(), logger), buildProxyOptions.getAddress(),\n+                buildProxyOptions.getNonProxyHosts()));\n+\n             if (proxyOptions.getUsername() != null) {\n-                httpClientBuilder = httpClientBuilder.proxyAuthenticator((route, response) -> {\n-                    // By default azure-core supports only Basic authentication at the moment.\n-                    // If user need other scheme such as Digest then they can use 'configuration'\n-                    // to get access to the underlying builder and can set 'proxyAuthenticator'.\n-                    // In future when we ever support Digest in core-level then we can look at\n-                    // response.challenges and get the scheme from there.\n-                    String credential = Credentials.basic(proxyOptions.getUsername(),\n-                            proxyOptions.getPassword());\n-                    return response.request().newBuilder()\n-                            .header(\"Proxy-Authorization\", credential)\n-                            .build();\n-                });\n+                String basicAuthorizationHeader = Credentials.basic(buildProxyOptions.getUsername(),\n+                    buildProxyOptions.getPassword());\n+\n+                httpClientBuilder = httpClientBuilder.proxyAuthenticator((route, response) ->\n+                    response.request().newBuilder()\n+                        .header(\"Proxy-Authorization\", basicAuthorizationHeader)\n+                        .build());\n             }\n         }\n+\n         return new OkHttpAsyncHttpClient(httpClientBuilder.build());\n     }\n+\n+    /*\n+     * Maps a 'ProxyOptions.Type' to a 'ProxyProvider.Proxy', if the type is unknown or cannot be mapped an\n+     * IllegalStateException will be thrown.\n+     */\n+    private static Proxy.Type mapProxyType(ProxyOptions.Type type, ClientLogger logger) {\n+        switch (type) {\n+            case HTTP:\n+                return Proxy.Type.HTTP;\n+            case SOCKS4:\n+            case SOCKS5:\n+                return Proxy.Type.SOCKS;\n+            default:\n+                throw logger.logExceptionAsError(new IllegalStateException(\n+                    String.format(\"Unknown Proxy type '%s' in use. Not configuring OkHttp proxy.\", type)));", "originalCommit": "ac8dcc07f66c34adf4c1654467a05475eb8c9016", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzMDAzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7593#discussion_r372030035", "bodyText": "Updated", "author": "alzimmermsft", "createdAt": "2020-01-28T20:09:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxOTc5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "22041f484ca924f6ed4826d43fb6db3bd3fc70a6", "chunk": "diff --git a/sdk/core/azure-core-http-okhttp/src/main/java/com/azure/core/http/okhttp/OkHttpAsyncHttpClientBuilder.java b/sdk/core/azure-core-http-okhttp/src/main/java/com/azure/core/http/okhttp/OkHttpAsyncHttpClientBuilder.java\nindex 3dbd53e31f3..ec01cfbb4df 100644\n--- a/sdk/core/azure-core-http-okhttp/src/main/java/com/azure/core/http/okhttp/OkHttpAsyncHttpClientBuilder.java\n+++ b/sdk/core/azure-core-http-okhttp/src/main/java/com/azure/core/http/okhttp/OkHttpAsyncHttpClientBuilder.java\n\n@@ -178,9 +178,7 @@ public class OkHttpAsyncHttpClientBuilder {\n         }\n \n         // Use the configured read timeout if set, otherwise use the default (120s).\n-        httpClientBuilder = (this.readTimeout != null)\n-            ? httpClientBuilder.readTimeout(this.readTimeout)\n-            : httpClientBuilder.readTimeout(DEFAULT_READ_TIMEOUT);\n+        httpClientBuilder = httpClientBuilder.readTimeout((readTimeout != null) ? readTimeout : DEFAULT_READ_TIMEOUT);\n \n         // Use the configured connection timeout if set, otherwise use the default (60s).\n         httpClientBuilder = (this.connectionTimeout != null)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyMTEwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7593#discussion_r372021109", "bodyText": "Is 'non-proxy hosts' common terminology? How does the user work with multiple non-proxy hosts? If it is, e.g. comma-separated, would it be better for the API to be varargs or a List?", "author": "JonathanGiles", "createdAt": "2020-01-28T19:51:12Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java", "diffHunk": "@@ -40,6 +85,17 @@ public ProxyOptions setCredentials(String username, String password) {\n         return this;\n     }\n \n+    /**\n+     * Sets the hosts which bypass the proxy.\n+     *\n+     * @param nonProxyHosts Hosts that bypass the proxy.\n+     * @return the updated ProxyOptions object\n+     */\n+    public ProxyOptions setNonProxyHosts(String nonProxyHosts) {", "originalCommit": "ac8dcc07f66c34adf4c1654467a05475eb8c9016", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzMDA5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7593#discussion_r372030096", "bodyText": "nonProxyHosts is what Java uses for host that should ignore the environment configured proxy, I chose this to stay inline with language specifics.", "author": "alzimmermsft", "createdAt": "2020-01-28T20:10:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyMTEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4OTM5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7593#discussion_r372089391", "bodyText": "This is expected to be a regex based on the documentation for http.nonProxyHosts (the Java environment variable for this). Our AZURE_NO_PROXY environment variable doesn't state the expected format, only statement made is that is must support CIDR annotation.", "author": "alzimmermsft", "createdAt": "2020-01-28T22:15:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyMTEwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "4646a9617e83cf8244a658af344d061791978ab8", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java b/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java\nindex b64f6c0eb28..b4dcef68e8e 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java\n\n@@ -88,6 +88,10 @@ public class ProxyOptions {\n     /**\n      * Sets the hosts which bypass the proxy.\n      *\n+     * <p>\n+     * The expected format of the passed string is a {@code '|'} delimited list of hosts which should bypass the proxy.\n+     * Individual host strings may contain regex characters such as {@code '*'}.\n+     *\n      * @param nonProxyHosts Hosts that bypass the proxy.\n      * @return the updated ProxyOptions object\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyMzE5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7593#discussion_r372023198", "bodyText": "I wonder if we should call this fromConfiguration, that feels a little more Java idiomatic", "author": "JonathanGiles", "createdAt": "2020-01-28T19:55:25Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java", "diffHunk": "@@ -68,6 +124,126 @@ public String getPassword() {\n         return this.password;\n     }\n \n+    /**\n+     * @return the hosts that bypass the proxy.\n+     */\n+    public String getNonProxyHosts() {\n+        return this.nonProxyHosts;\n+    }\n+\n+    /**\n+     * Attempts to load a proxy from the environment.\n+     *\n+     * <p>\n+     * Environment configurations are loaded in this order:\n+     * <ol>\n+     *     <li>Azure HTTPS</li>\n+     *     <li>Azure HTTP</li>\n+     *     <li>Java HTTPS</li>\n+     *     <li>Java HTTP</li>\n+     * </ol>\n+     *\n+     * Azure proxy configurations will be preferred over Java proxy configurations as they are more closely scoped to\n+     * the purpose of the SDK. Additionally, more secure protocols, HTTPS vs HTTP, will be preferred.\n+     *\n+     * <p>\n+     * {@code null} will be returned if no proxy was found in the environment.\n+     *\n+     * @param configuration The {@link Configuration} that is used to load proxy configurations from the environment.\n+     * If {@code null} is passed then {@link Configuration#getGlobalConfiguration()} will be used. If\n+     * {@link Configuration#NONE} is passed {@link IllegalArgumentException} will be thrown.\n+     * @return A {@link ProxyOptions} reflecting a proxy loaded from the environment, if no proxy is found {@code null}\n+     * will be returned.\n+     * @throws IllegalArgumentException If {@code configuration} is {@link Configuration#NONE}.\n+     */\n+    public static ProxyOptions loadFromConfiguration(Configuration configuration) {", "originalCommit": "ac8dcc07f66c34adf4c1654467a05475eb8c9016", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzMDEzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7593#discussion_r372030132", "bodyText": "Done", "author": "alzimmermsft", "createdAt": "2020-01-28T20:10:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyMzE5OA=="}], "type": "inlineReview", "revised_code": {"commit": "22041f484ca924f6ed4826d43fb6db3bd3fc70a6", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java b/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java\nindex b64f6c0eb28..eada1b549bd 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/http/ProxyOptions.java\n\n@@ -156,7 +156,7 @@ public class ProxyOptions {\n      * will be returned.\n      * @throws IllegalArgumentException If {@code configuration} is {@link Configuration#NONE}.\n      */\n-    public static ProxyOptions loadFromConfiguration(Configuration configuration) {\n+    public static ProxyOptions fromConfiguration(Configuration configuration) {\n         if (configuration == Configuration.NONE) {\n             throw LOGGER.logExceptionAsWarning(new IllegalArgumentException(INVALID_CONFIGURATION_MESSAGE));\n         }\n"}}, {"oid": "27eb5af853ca561e1ce8a618f1a27b13e9c44187", "url": "https://github.com/Azure/azure-sdk-for-java/commit/27eb5af853ca561e1ce8a618f1a27b13e9c44187", "message": "Merge branch 'master' into AzCore_SupportJavaProxyProperties", "committedDate": "2020-01-28T20:03:37Z", "type": "commit"}, {"oid": "22041f484ca924f6ed4826d43fb6db3bd3fc70a6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/22041f484ca924f6ed4826d43fb6db3bd3fc70a6", "message": "Updated log messages and internal code", "committedDate": "2020-01-28T20:56:55Z", "type": "commit"}, {"oid": "2ea071f6e3f0d04e750b4a8ad3cd07beaa56365d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2ea071f6e3f0d04e750b4a8ad3cd07beaa56365d", "message": "Merge branch 'master' into AzCore_SupportJavaProxyProperties", "committedDate": "2020-01-28T22:29:10Z", "type": "commit"}, {"oid": "4646a9617e83cf8244a658af344d061791978ab8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4646a9617e83cf8244a658af344d061791978ab8", "message": "Added comment to explain the expected format for nonProxyHosts in ProxyOptions", "committedDate": "2020-01-28T22:32:46Z", "type": "commit"}]}