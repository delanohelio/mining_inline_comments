{"pr_number": 9329, "pr_title": "Add more test and refactor a few old tests", "pr_createdAt": "2020-03-20T17:05:43Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/9329", "timeline": [{"oid": "c2ae3b125b42236af19d1240d8ef66196cd9ec74", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c2ae3b125b42236af19d1240d8ef66196cd9ec74", "message": "add more test and refactor a few old tests", "committedDate": "2020-03-20T17:03:52Z", "type": "commit"}, {"oid": "deddcc73dfd6a34db6bd5064949f9d6efa9657bb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/deddcc73dfd6a34db6bd5064949f9d6efa9657bb", "message": "fix checkstyle", "committedDate": "2020-03-20T17:19:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg1OTU4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9329#discussion_r395859584", "bodyText": "It might be interesting to add a test where there is a default country hint. Then the user sets a different value for country hint in the request.\nThe later should take precedent.", "author": "maririos", "createdAt": "2020-03-20T19:53:23Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java", "diffHunk": "@@ -410,6 +448,86 @@ void analyseBatchSentimentShowStatsRunner(\n         testRunner.accept(textDocumentInputs, options);\n     }\n \n+    // Client builder runner\n+    void clientBuilderWithValidApiKeyCredentialRunner(\n+        Function<TextAnalyticsClientBuilder, BiConsumer<String, DetectedLanguage>> testRunner) {\n+        final TextAnalyticsClientBuilder clientBuilder = createClientBuilder(getEndpoint(),\n+            new TextAnalyticsApiKeyCredential(getApiKey()));\n+        testRunner.apply(clientBuilder).accept(DETECT_LANGUAGE_INPUTS.get(0), DETECTED_LANGUAGE_ENGLISH);\n+    }\n+\n+    void clientBuilderWithInvalidApiKeyCredentialRunner(\n+        Function<TextAnalyticsClientBuilder, BiConsumer<String, HttpResponseException>> testRunner) {\n+        final TextAnalyticsClientBuilder clientBuilder = createClientBuilder(getEndpoint(),\n+            new TextAnalyticsApiKeyCredential(INVALID_KEY));\n+        testRunner.apply(clientBuilder).accept(DETECT_LANGUAGE_INPUTS.get(0), HTTP_RESPONSE_EXCEPTION_CLASS);\n+    }\n+\n+    void clientBuilderWithRotateToInvalidKeyRunner(\n+        Function<TextAnalyticsClientBuilder, BiConsumer<String, HttpResponseException>> testRunner) {\n+        final TextAnalyticsApiKeyCredential credential = new TextAnalyticsApiKeyCredential(getApiKey());\n+        final TextAnalyticsClientBuilder clientBuilder = createClientBuilder(getEndpoint(), credential);\n+        // Update to invalid key\n+        credential.updateCredential(INVALID_KEY);\n+        testRunner.apply(clientBuilder).accept(DETECT_LANGUAGE_INPUTS.get(0), HTTP_RESPONSE_EXCEPTION_CLASS);\n+    }\n+\n+    void clientBuilderWithRotateToValidKeyRunner(\n+        Function<TextAnalyticsClientBuilder, BiConsumer<String, DetectedLanguage>> testRunner) {\n+        final TextAnalyticsApiKeyCredential credential = new TextAnalyticsApiKeyCredential(INVALID_KEY);\n+        final TextAnalyticsClientBuilder clientBuilder = createClientBuilder(getEndpoint(), credential);\n+        // Update to valid key\n+        credential.updateCredential(getApiKey());\n+        testRunner.apply(clientBuilder).accept(DETECT_LANGUAGE_INPUTS.get(0), DETECTED_LANGUAGE_ENGLISH);\n+    }\n+\n+    void clientBuilderWithNullServiceVersionRunner(\n+        Function<TextAnalyticsClientBuilder, BiConsumer<String, DetectedLanguage>> testRunner) {\n+        final TextAnalyticsClientBuilder clientBuilder =\n+            createClientBuilder(getEndpoint(), new TextAnalyticsApiKeyCredential(getApiKey()))\n+            .retryPolicy(new RetryPolicy())\n+            .serviceVersion(null);\n+        testRunner.apply(clientBuilder).accept(DETECT_LANGUAGE_INPUTS.get(0), DETECTED_LANGUAGE_ENGLISH);\n+    }\n+\n+    void clientBuilderWithDefaultPipelineRunner(\n+        Function<TextAnalyticsClientBuilder, BiConsumer<String, DetectedLanguage>> testRunner) {\n+        final TextAnalyticsClientBuilder clientBuilder =\n+            createClientBuilder(getEndpoint(), new TextAnalyticsApiKeyCredential(getApiKey()))\n+            .configuration(Configuration.getGlobalConfiguration())\n+            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS));\n+        testRunner.apply(clientBuilder).accept(DETECT_LANGUAGE_INPUTS.get(0), DETECTED_LANGUAGE_ENGLISH);\n+    }\n+\n+    void clientBuilderWithDefaultCountryHintRunner(", "originalCommit": "deddcc73dfd6a34db6bd5064949f9d6efa9657bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54caeb67dfa11c2b83ae95bf39eb2d18919dd141", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java b/sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java\nindex eeba899a540..12cca304a21 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java\n\n@@ -448,86 +407,6 @@ public abstract class TextAnalyticsClientTestBase extends TestBase {\n         testRunner.accept(textDocumentInputs, options);\n     }\n \n-    // Client builder runner\n-    void clientBuilderWithValidApiKeyCredentialRunner(\n-        Function<TextAnalyticsClientBuilder, BiConsumer<String, DetectedLanguage>> testRunner) {\n-        final TextAnalyticsClientBuilder clientBuilder = createClientBuilder(getEndpoint(),\n-            new TextAnalyticsApiKeyCredential(getApiKey()));\n-        testRunner.apply(clientBuilder).accept(DETECT_LANGUAGE_INPUTS.get(0), DETECTED_LANGUAGE_ENGLISH);\n-    }\n-\n-    void clientBuilderWithInvalidApiKeyCredentialRunner(\n-        Function<TextAnalyticsClientBuilder, BiConsumer<String, HttpResponseException>> testRunner) {\n-        final TextAnalyticsClientBuilder clientBuilder = createClientBuilder(getEndpoint(),\n-            new TextAnalyticsApiKeyCredential(INVALID_KEY));\n-        testRunner.apply(clientBuilder).accept(DETECT_LANGUAGE_INPUTS.get(0), HTTP_RESPONSE_EXCEPTION_CLASS);\n-    }\n-\n-    void clientBuilderWithRotateToInvalidKeyRunner(\n-        Function<TextAnalyticsClientBuilder, BiConsumer<String, HttpResponseException>> testRunner) {\n-        final TextAnalyticsApiKeyCredential credential = new TextAnalyticsApiKeyCredential(getApiKey());\n-        final TextAnalyticsClientBuilder clientBuilder = createClientBuilder(getEndpoint(), credential);\n-        // Update to invalid key\n-        credential.updateCredential(INVALID_KEY);\n-        testRunner.apply(clientBuilder).accept(DETECT_LANGUAGE_INPUTS.get(0), HTTP_RESPONSE_EXCEPTION_CLASS);\n-    }\n-\n-    void clientBuilderWithRotateToValidKeyRunner(\n-        Function<TextAnalyticsClientBuilder, BiConsumer<String, DetectedLanguage>> testRunner) {\n-        final TextAnalyticsApiKeyCredential credential = new TextAnalyticsApiKeyCredential(INVALID_KEY);\n-        final TextAnalyticsClientBuilder clientBuilder = createClientBuilder(getEndpoint(), credential);\n-        // Update to valid key\n-        credential.updateCredential(getApiKey());\n-        testRunner.apply(clientBuilder).accept(DETECT_LANGUAGE_INPUTS.get(0), DETECTED_LANGUAGE_ENGLISH);\n-    }\n-\n-    void clientBuilderWithNullServiceVersionRunner(\n-        Function<TextAnalyticsClientBuilder, BiConsumer<String, DetectedLanguage>> testRunner) {\n-        final TextAnalyticsClientBuilder clientBuilder =\n-            createClientBuilder(getEndpoint(), new TextAnalyticsApiKeyCredential(getApiKey()))\n-            .retryPolicy(new RetryPolicy())\n-            .serviceVersion(null);\n-        testRunner.apply(clientBuilder).accept(DETECT_LANGUAGE_INPUTS.get(0), DETECTED_LANGUAGE_ENGLISH);\n-    }\n-\n-    void clientBuilderWithDefaultPipelineRunner(\n-        Function<TextAnalyticsClientBuilder, BiConsumer<String, DetectedLanguage>> testRunner) {\n-        final TextAnalyticsClientBuilder clientBuilder =\n-            createClientBuilder(getEndpoint(), new TextAnalyticsApiKeyCredential(getApiKey()))\n-            .configuration(Configuration.getGlobalConfiguration())\n-            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS));\n-        testRunner.apply(clientBuilder).accept(DETECT_LANGUAGE_INPUTS.get(0), DETECTED_LANGUAGE_ENGLISH);\n-    }\n-\n-    void clientBuilderWithDefaultCountryHintRunner(\n-        Function<TextAnalyticsClientBuilder, BiConsumer<String, DetectedLanguage>> testRunner) {\n-        testRunner.apply(\n-            createClientBuilder(getEndpoint(), new TextAnalyticsApiKeyCredential(getApiKey())).defaultCountryHint(\"FR\"))\n-            .accept(FRENCH_SAME_AS_ENGLISH_INPUTS.get(0), DETECT_FRENCH_LANGUAGE_RESULTS.get(0));\n-    }\n-\n-    void clientBuilderWithDefaultCountryHintForBatchOperationRunner(\n-        Function<TextAnalyticsClientBuilder, BiConsumer<List<String>, List<DetectedLanguage>>> testRunner) {\n-        testRunner.apply(\n-            createClientBuilder(getEndpoint(), new TextAnalyticsApiKeyCredential(getApiKey())).defaultCountryHint(\"FR\"))\n-            .accept(FRENCH_SAME_AS_ENGLISH_INPUTS, DETECT_FRENCH_LANGUAGE_RESULTS);\n-    }\n-\n-    void clientBuilderWithDefaultLanguageRunner(\n-        Function<TextAnalyticsClientBuilder, BiConsumer<String, String>> testRunner) {\n-        testRunner.apply(\n-            createClientBuilder(getEndpoint(), new TextAnalyticsApiKeyCredential(getApiKey())).defaultLanguage(\"FR\"))\n-            .accept(KEY_PHRASE_FRENCH_INPUTS.get(0), \"monde\");\n-    }\n-\n-    void clientBuilderWithDefaultLanguageForBatchOperationRunner(Function<TextAnalyticsClientBuilder,\n-        BiConsumer<List<String>, List<List<String>>>> testRunner) {\n-        testRunner.apply(\n-            createClientBuilder(getEndpoint(), new TextAnalyticsApiKeyCredential(getApiKey())).defaultLanguage(\"FR\"))\n-            .accept(KEY_PHRASE_FRENCH_INPUTS,\n-                Arrays.asList(Collections.singletonList(\"monde\"), Collections.singletonList(\"Mondly\")));\n-    }\n-\n     String getEndpoint() {\n         return interceptorManager.isPlaybackMode()\n             ? \"http://localhost:8080\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2MjcyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9329#discussion_r396262722", "bodyText": "This will require client builder tests to be implemented in both sync and async clients. Instead, can all these tests be done in TextAnalyticsClientBuilderTest?", "author": "srnagar", "createdAt": "2020-03-23T07:54:39Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java", "diffHunk": "@@ -247,6 +254,37 @@\n     @Test\n     abstract void analyseSentimentForListLanguageHint();\n \n+    // Client builder", "originalCommit": "deddcc73dfd6a34db6bd5064949f9d6efa9657bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54caeb67dfa11c2b83ae95bf39eb2d18919dd141", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java b/sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java\nindex eeba899a540..12cca304a21 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTestBase.java\n\n@@ -254,37 +244,6 @@ public abstract class TextAnalyticsClientTestBase extends TestBase {\n     @Test\n     abstract void analyseSentimentForListLanguageHint();\n \n-    // Client builder\n-    @Test\n-    abstract void clientBuilderWithValidApiKeyCredential();\n-\n-    @Test\n-    abstract void clientBuilderWithInvalidApiKeyCredential();\n-\n-    @Test\n-    abstract void clientBuilderWithRotateToInvalidKey();\n-\n-    @Test\n-    abstract void clientBuilderWithRotateToValidKey();\n-\n-    @Test\n-    abstract void clientBuilderWithNullServiceVersion();\n-\n-    @Test\n-    abstract void clientBuilderWithDefaultPipeline();\n-\n-    @Test\n-    abstract void clientBuilderWithDefaultCountryHint();\n-\n-    @Test\n-    abstract void clientBuilderWithDefaultCountryHintForBatchOperation();\n-\n-    @Test\n-    abstract void clientBuilderWithDefaultLanguage();\n-\n-    @Test\n-    abstract void clientBuilderWithDefaultLanguageForBatchOperation();\n-\n     // Detect Language runner\n     void detectLanguageShowStatisticsRunner(BiConsumer<List<DetectLanguageInput>,\n         TextAnalyticsRequestOptions> testRunner) {\n"}}, {"oid": "54caeb67dfa11c2b83ae95bf39eb2d18919dd141", "url": "https://github.com/Azure/azure-sdk-for-java/commit/54caeb67dfa11c2b83ae95bf39eb2d18919dd141", "message": "refacotor clientBuilder tests", "committedDate": "2020-03-24T21:21:24Z", "type": "commit"}, {"oid": "a88d1c312489c3bc2884b54279bfa747a8caa78e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a88d1c312489c3bc2884b54279bfa747a8caa78e", "message": "using Spanish instread of French in countryHint tests", "committedDate": "2020-03-24T23:32:07Z", "type": "commit"}, {"oid": "bfad62edd08286be627860678e9d1a829a30651b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bfad62edd08286be627860678e9d1a829a30651b", "message": "remove unused import", "committedDate": "2020-03-24T23:50:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYxMjE5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9329#discussion_r397612199", "bodyText": "Since there is just one builder, you can do all the testing in this class itself. Don't need a base class and then extend it to run the tests.", "author": "srnagar", "createdAt": "2020-03-25T05:08:45Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilderTestBase.java", "diffHunk": "@@ -0,0 +1,205 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics;\n+\n+import com.azure.ai.textanalytics.models.DetectedLanguage;\n+import com.azure.ai.textanalytics.models.TextAnalyticsApiKeyCredential;\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.netty.NettyAsyncHttpClientBuilder;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.RetryPolicy;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Configuration;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+\n+import static com.azure.ai.textanalytics.TestUtils.DETECTED_LANGUAGE_ENGLISH;\n+import static com.azure.ai.textanalytics.TestUtils.DETECT_ENGLISH_LANGUAGE_RESULTS;\n+import static com.azure.ai.textanalytics.TestUtils.DETECT_SPANISH_LANGUAGE_RESULTS;\n+import static com.azure.ai.textanalytics.TestUtils.DETECT_LANGUAGE_INPUTS;\n+import static com.azure.ai.textanalytics.TestUtils.SPANISH_SAME_AS_ENGLISH_INPUTS;\n+import static com.azure.ai.textanalytics.TestUtils.HTTP_RESPONSE_EXCEPTION_CLASS;\n+import static com.azure.ai.textanalytics.TestUtils.KEY_PHRASE_FRENCH_INPUTS;\n+\n+public abstract class TextAnalyticsClientBuilderTestBase  extends TestBase {", "originalCommit": "bfad62edd08286be627860678e9d1a829a30651b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd22df3f45228bdea0c114aec8f3faa97a522856", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilderTestBase.java b/sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilderTestBase.java\ndeleted file mode 100644\nindex 7e5c8f2008a..00000000000\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilderTestBase.java\n+++ /dev/null\n\n@@ -1,205 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.ai.textanalytics;\n-\n-import com.azure.ai.textanalytics.models.DetectedLanguage;\n-import com.azure.ai.textanalytics.models.TextAnalyticsApiKeyCredential;\n-import com.azure.core.exception.HttpResponseException;\n-import com.azure.core.http.netty.NettyAsyncHttpClientBuilder;\n-import com.azure.core.http.policy.HttpLogDetailLevel;\n-import com.azure.core.http.policy.HttpLogOptions;\n-import com.azure.core.http.policy.RetryPolicy;\n-import com.azure.core.test.TestBase;\n-import com.azure.core.util.Configuration;\n-import org.junit.jupiter.api.Test;\n-\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.function.BiConsumer;\n-import java.util.function.Function;\n-\n-import static com.azure.ai.textanalytics.TestUtils.DETECTED_LANGUAGE_ENGLISH;\n-import static com.azure.ai.textanalytics.TestUtils.DETECT_ENGLISH_LANGUAGE_RESULTS;\n-import static com.azure.ai.textanalytics.TestUtils.DETECT_SPANISH_LANGUAGE_RESULTS;\n-import static com.azure.ai.textanalytics.TestUtils.DETECT_LANGUAGE_INPUTS;\n-import static com.azure.ai.textanalytics.TestUtils.SPANISH_SAME_AS_ENGLISH_INPUTS;\n-import static com.azure.ai.textanalytics.TestUtils.HTTP_RESPONSE_EXCEPTION_CLASS;\n-import static com.azure.ai.textanalytics.TestUtils.KEY_PHRASE_FRENCH_INPUTS;\n-\n-public abstract class TextAnalyticsClientBuilderTestBase  extends TestBase {\n-    private static final String AZURE_TEXT_ANALYTICS_API_KEY = \"AZURE_TEXT_ANALYTICS_API_KEY\";\n-    private static final String INVALID_KEY = \"invalid key\";\n-\n-    // Client builder\n-    @Test\n-    abstract void clientBuilderWithValidApiKeyCredential();\n-\n-    @Test\n-    abstract void clientBuilderWithInvalidApiKeyCredential();\n-\n-    @Test\n-    abstract void clientBuilderWithRotateToInvalidKey();\n-\n-    @Test\n-    abstract void clientBuilderWithRotateToValidKey();\n-\n-    @Test\n-    abstract void clientBuilderWithNullServiceVersion();\n-\n-    @Test\n-    abstract void clientBuilderWithDefaultPipeline();\n-\n-    @Test\n-    abstract void clientBuilderWithDefaultCountryHint();\n-\n-    @Test\n-    abstract void clientBuilderWithDefaultCountryHintForBatchOperation();\n-\n-    @Test\n-    abstract void clientBuilderWithDefaultLanguage();\n-\n-    @Test\n-    abstract void clientBuilderWithDefaultLanguageForBatchOperation();\n-\n-    // Client builder runner\n-    void clientBuilderWithValidApiKeyCredentialRunner(\n-        Function<TextAnalyticsClientBuilder, BiConsumer<String, DetectedLanguage>> testRunner) {\n-        final TextAnalyticsClientBuilder clientBuilder = createClientBuilder(getEndpoint(),\n-            new TextAnalyticsApiKeyCredential(getApiKey()));\n-        testRunner.apply(clientBuilder).accept(DETECT_LANGUAGE_INPUTS.get(0), DETECTED_LANGUAGE_ENGLISH);\n-    }\n-\n-    void clientBuilderWithInvalidApiKeyCredentialRunner(\n-        Function<TextAnalyticsClientBuilder, BiConsumer<String, HttpResponseException>> testRunner) {\n-        final TextAnalyticsClientBuilder clientBuilder = createClientBuilder(getEndpoint(),\n-            new TextAnalyticsApiKeyCredential(INVALID_KEY));\n-        testRunner.apply(clientBuilder).accept(DETECT_LANGUAGE_INPUTS.get(0), HTTP_RESPONSE_EXCEPTION_CLASS);\n-    }\n-\n-    void clientBuilderWithRotateToInvalidKeyRunner(\n-        Function<TextAnalyticsClientBuilder, BiConsumer<String, HttpResponseException>> testRunner) {\n-        final TextAnalyticsApiKeyCredential credential = new TextAnalyticsApiKeyCredential(getApiKey());\n-        final TextAnalyticsClientBuilder clientBuilder = createClientBuilder(getEndpoint(), credential);\n-        // Update to invalid key\n-        credential.updateCredential(INVALID_KEY);\n-        testRunner.apply(clientBuilder).accept(DETECT_LANGUAGE_INPUTS.get(0), HTTP_RESPONSE_EXCEPTION_CLASS);\n-    }\n-\n-    void clientBuilderWithRotateToValidKeyRunner(\n-        Function<TextAnalyticsClientBuilder, BiConsumer<String, DetectedLanguage>> testRunner) {\n-        final TextAnalyticsApiKeyCredential credential = new TextAnalyticsApiKeyCredential(INVALID_KEY);\n-        final TextAnalyticsClientBuilder clientBuilder = createClientBuilder(getEndpoint(), credential);\n-        // Update to valid key\n-        credential.updateCredential(getApiKey());\n-        testRunner.apply(clientBuilder).accept(DETECT_LANGUAGE_INPUTS.get(0), DETECTED_LANGUAGE_ENGLISH);\n-    }\n-\n-    void clientBuilderWithNullServiceVersionRunner(\n-        Function<TextAnalyticsClientBuilder, BiConsumer<String, DetectedLanguage>> testRunner) {\n-        final TextAnalyticsClientBuilder clientBuilder =\n-            createClientBuilder(getEndpoint(), new TextAnalyticsApiKeyCredential(getApiKey()))\n-                .retryPolicy(new RetryPolicy())\n-                .serviceVersion(null);\n-        testRunner.apply(clientBuilder).accept(DETECT_LANGUAGE_INPUTS.get(0), DETECTED_LANGUAGE_ENGLISH);\n-    }\n-\n-    void clientBuilderWithDefaultPipelineRunner(\n-        Function<TextAnalyticsClientBuilder, BiConsumer<String, DetectedLanguage>> testRunner) {\n-        final TextAnalyticsClientBuilder clientBuilder =\n-            createClientBuilder(getEndpoint(), new TextAnalyticsApiKeyCredential(getApiKey()))\n-                .configuration(Configuration.getGlobalConfiguration())\n-                .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS));\n-        testRunner.apply(clientBuilder).accept(DETECT_LANGUAGE_INPUTS.get(0), DETECTED_LANGUAGE_ENGLISH);\n-    }\n-\n-    void clientBuilderWithDefaultCountryHintRunner(\n-        Function<TextAnalyticsClientBuilder, BiConsumer<String, DetectedLanguage>> testRunner) {\n-        testRunner.apply(\n-            createClientBuilder(getEndpoint(), new TextAnalyticsApiKeyCredential(getApiKey())).defaultCountryHint(\"MX\"))\n-            .accept(SPANISH_SAME_AS_ENGLISH_INPUTS.get(0), DETECT_SPANISH_LANGUAGE_RESULTS.get(0));\n-    }\n-\n-    void clientBuilderWithDefaultCountryHintForBatchOperationRunner(\n-        Function<TextAnalyticsClientBuilder, BiConsumer<List<String>, List<DetectedLanguage>>> testRunner) {\n-        testRunner.apply(\n-            createClientBuilder(getEndpoint(), new TextAnalyticsApiKeyCredential(getApiKey())).defaultCountryHint(\"MX\"))\n-            .accept(SPANISH_SAME_AS_ENGLISH_INPUTS, DETECT_SPANISH_LANGUAGE_RESULTS);\n-    }\n-\n-    void clientBuilderWithNewCountryHintForBatchOperationRunner(\n-        Function<TextAnalyticsClientBuilder, BiConsumer<List<String>, List<DetectedLanguage>>> testRunner) {\n-        testRunner.apply(\n-            createClientBuilder(getEndpoint(), new TextAnalyticsApiKeyCredential(getApiKey())).defaultCountryHint(\"MX\"))\n-            .accept(SPANISH_SAME_AS_ENGLISH_INPUTS, DETECT_ENGLISH_LANGUAGE_RESULTS);\n-    }\n-\n-    void clientBuilderWithDefaultLanguageRunner(\n-        Function<TextAnalyticsClientBuilder, BiConsumer<String, String>> testRunner) {\n-        testRunner.apply(\n-            createClientBuilder(getEndpoint(), new TextAnalyticsApiKeyCredential(getApiKey())).defaultLanguage(\"FR\"))\n-            .accept(KEY_PHRASE_FRENCH_INPUTS.get(1), \"Mondly\");\n-    }\n-\n-    void clientBuilderWithNewLanguageRunner(\n-        Function<TextAnalyticsClientBuilder, BiConsumer<String, String>> testRunner) {\n-        testRunner.apply(\n-            createClientBuilder(getEndpoint(), new TextAnalyticsApiKeyCredential(getApiKey())).defaultLanguage(\"FR\"))\n-            .accept(KEY_PHRASE_FRENCH_INPUTS.get(1), \"Je m'appelle Mondly\");\n-    }\n-\n-    void clientBuilderWithDefaultLanguageForBatchOperationRunner(Function<TextAnalyticsClientBuilder,\n-        BiConsumer<List<String>, List<List<String>>>> testRunner) {\n-        testRunner.apply(\n-            createClientBuilder(getEndpoint(), new TextAnalyticsApiKeyCredential(getApiKey())).defaultLanguage(\"FR\"))\n-            .accept(KEY_PHRASE_FRENCH_INPUTS,\n-                Arrays.asList(Collections.singletonList(\"monde\"), Collections.singletonList(\"Mondly\")));\n-    }\n-\n-    void clientBuilderWithNewLanguageForBatchOperationRunner(Function<TextAnalyticsClientBuilder,\n-        BiConsumer<List<String>, List<List<String>>>> testRunner) {\n-        testRunner.apply(\n-            createClientBuilder(getEndpoint(), new TextAnalyticsApiKeyCredential(getApiKey())).defaultLanguage(\"EN\"))\n-            .accept(KEY_PHRASE_FRENCH_INPUTS,\n-                Arrays.asList(Collections.singletonList(\"monde\"), Collections.singletonList(\"Je m'appelle Mondly\")));\n-    }\n-\n-    String getEndpoint() {\n-        return interceptorManager.isPlaybackMode()\n-            ? \"http://localhost:8080\"\n-            : Configuration.getGlobalConfiguration().get(\"AZURE_TEXT_ANALYTICS_ENDPOINT\");\n-    }\n-\n-    /**\n-     * Create a client builder with endpoint and API key credential.\n-     *\n-     * @param endpoint the given endpoint\n-     * @param credential the given {@link TextAnalyticsApiKeyCredential} credential\n-     * @return {@link TextAnalyticsClientBuilder}\n-     */\n-    TextAnalyticsClientBuilder createClientBuilder(String endpoint, TextAnalyticsApiKeyCredential credential) {\n-        final TextAnalyticsClientBuilder clientBuilder = new TextAnalyticsClientBuilder()\n-            .apiKey(credential)\n-            .endpoint(endpoint);\n-\n-        if (interceptorManager.isPlaybackMode()) {\n-            clientBuilder.httpClient(interceptorManager.getPlaybackClient());\n-        } else {\n-            clientBuilder.httpClient(new NettyAsyncHttpClientBuilder().wiretap(true).build())\n-                .addPolicy(interceptorManager.getRecordPolicy());\n-        }\n-\n-        return clientBuilder;\n-    }\n-\n-    /**\n-     * Get the string of API key value based on what running mode is on.\n-     *\n-     * @return the API key string\n-     */\n-    String getApiKey() {\n-        return interceptorManager.isPlaybackMode() ? \"apiKeyInPlayback\"\n-            : Configuration.getGlobalConfiguration().get(AZURE_TEXT_ANALYTICS_API_KEY);\n-    }\n-}\n"}}, {"oid": "fd22df3f45228bdea0c114aec8f3faa97a522856", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fd22df3f45228bdea0c114aec8f3faa97a522856", "message": "remove BuilderTestBase class", "committedDate": "2020-03-25T05:18:09Z", "type": "commit"}]}