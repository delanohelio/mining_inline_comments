{"pr_number": 17253, "pr_title": "[Communication] -Administration- Renaming the model from PhoneNumberSearch to PhoneNumberReservation", "pr_createdAt": "2020-11-06T06:47:13Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/17253", "timeline": [{"oid": "0ee3a0c43d3d893173d904d74f798c14a55d98c3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0ee3a0c43d3d893173d904d74f798c14a55d98c3", "message": "Renaming from PhoneNumberSearch to PhoneNumberReservation", "committedDate": "2020-11-06T06:36:06Z", "type": "commit"}, {"oid": "ebafcf2ba11501cba1601e1db36ea53270f7b74e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ebafcf2ba11501cba1601e1db36ea53270f7b74e", "message": "Renaming from PhoneNumberSearch to PhoneNumberReservation", "committedDate": "2020-11-06T06:44:19Z", "type": "commit"}, {"oid": "083e60e0cf1e2eef746157515cf339a6d1e0cb52", "url": "https://github.com/Azure/azure-sdk-for-java/commit/083e60e0cf1e2eef746157515cf339a6d1e0cb52", "message": "Renaming from PhoneNumberSearch to PhoneNumberReservation", "committedDate": "2020-11-06T07:24:39Z", "type": "commit"}, {"oid": "eaf8c471b85c2ce2992d9f1e3cb661668799136f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/eaf8c471b85c2ce2992d9f1e3cb661668799136f", "message": "upadating readme samples", "committedDate": "2020-11-06T17:27:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyMjM0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17253#discussion_r518922349", "bodyText": "\"... representing the reservation\"", "author": "jbeauregardb", "createdAt": "2020-11-06T18:14:44Z", "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java", "diffHunk": "@@ -602,10 +602,10 @@\n      * Gets a search by ID.\n      *\n      * @param searchId ID of the search\n-     * @return A {@link Mono} containing a {@link PhoneNumberSearch} representing the search.\n+     * @return A {@link Mono} containing a {@link PhoneNumberReservation} representing the search.", "originalCommit": "eaf8c471b85c2ce2992d9f1e3cb661668799136f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkxNDYxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17253#discussion_r520914615", "bodyText": "fixed please take a look", "author": "paolamvhz", "createdAt": "2020-11-10T22:28:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyMjM0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "017c08b9502011378f8772b1b353ba39fafac847", "chunk": "diff --git a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java\nindex 9f9dd78771b..808c59e01f0 100644\n--- a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java\n+++ b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java\n\n@@ -599,36 +598,36 @@ public final class PhoneNumberAsyncClient {\n     }\n \n     /**\n-     * Gets a search by ID.\n+     * Gets a reservation by ID.\n      *\n-     * @param searchId ID of the search\n-     * @return A {@link Mono} containing a {@link PhoneNumberReservation} representing the search.\n+     * @param reservationId ID of the reservation\n+     * @return A {@link Mono} containing a {@link PhoneNumberReservation} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<PhoneNumberReservation> getSearchById(String searchId) {\n-        return getSearchByIdWithResponse(searchId).flatMap(FluxUtil::toMono);\n+    public Mono<PhoneNumberReservation> getReservationById(String reservationId) {\n+        return getReservationByIdWithResponse(reservationId).flatMap(FluxUtil::toMono);\n     }\n \n     /**\n-     * Gets a search by ID.\n+     * Gets a reservation by ID.\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue()} value returns\n-     * a {@link PhoneNumberReservation} representing the search.\n+     * a {@link PhoneNumberReservation} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<Response<PhoneNumberReservation>> getSearchByIdWithResponse(String searchId) {\n-        return getSearchByIdWithResponse(searchId, null);\n+    public Mono<Response<PhoneNumberReservation>> getReservationByIdWithResponse(String reservationId) {\n+        return getReservationByIdWithResponse(reservationId, null);\n     }\n \n-    Mono<Response<PhoneNumberReservation>> getSearchByIdWithResponse(String searchId, Context context) {\n-        Objects.requireNonNull(searchId, \"'searchId' cannot be null.\");\n+    Mono<Response<PhoneNumberReservation>> getReservationByIdWithResponse(String reservationId, Context context) {\n+        Objects.requireNonNull(reservationId, \"'ReservationId' cannot be null.\");\n \n         try {\n             if (context == null) {\n-                return phoneNumberAdministrations.getSearchByIdWithResponseAsync(searchId);\n+                return phoneNumberAdministrations.getSearchByIdWithResponseAsync(reservationId);\n             } else {\n-                return phoneNumberAdministrations.getSearchByIdWithResponseAsync(searchId, context);\n+                return phoneNumberAdministrations.getSearchByIdWithResponseAsync(reservationId, context);\n             }\n         } catch (RuntimeException ex) {\n             return monoError(logger, ex);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyMjU5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17253#discussion_r518922591", "bodyText": "getReservationById(String reservationId) ?", "author": "turalf", "createdAt": "2020-11-06T18:15:10Z", "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java", "diffHunk": "@@ -391,10 +391,10 @@ public PhoneNumberRelease getReleaseById(String releaseId) {\n      * Gets a search by ID.\n      *\n      * @param searchId ID of the search\n-     * @return A {@link PhoneNumberSearch} representing the search.\n+     * @return A {@link PhoneNumberReservation} representing the search.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public PhoneNumberSearch getSearchById(String searchId) {\n+    public PhoneNumberReservation getSearchById(String searchId) {", "originalCommit": "eaf8c471b85c2ce2992d9f1e3cb661668799136f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "017c08b9502011378f8772b1b353ba39fafac847", "chunk": "diff --git a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\nindex fe4638fc064..183002f4f36 100644\n--- a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\n+++ b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\n\n@@ -388,124 +388,125 @@ public final class PhoneNumberClient {\n     }\n \n     /**\n-     * Gets a search by ID.\n+     * Gets a reservation by ID.\n      *\n-     * @param searchId ID of the search\n-     * @return A {@link PhoneNumberReservation} representing the search.\n+     * @param reservationId ID of the reservation\n+     * @return A {@link PhoneNumberReservation} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public PhoneNumberReservation getSearchById(String searchId) {\n-        return phoneNumberAsyncClient.getSearchById(searchId).block();\n+    public PhoneNumberReservation getReservationById(String reservationId) {\n+        return phoneNumberAsyncClient.getReservationById(reservationId).block();\n     }\n \n     /**\n-     * Gets a search by ID.\n+     * Gets a reservation by ID.\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} whose {@link Response#getValue()} value returns\n-     * a {@link PhoneNumberReservation} representing the search.\n+     * a {@link PhoneNumberReservation} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<PhoneNumberReservation> getSearchByIdWithResponse(String searchId, Context context) {\n-        return phoneNumberAsyncClient.getSearchByIdWithResponse(searchId, context).block();\n+    public Response<PhoneNumberReservation> getReservationByIdWithResponse(String reservationId, Context context) {\n+        return phoneNumberAsyncClient.getReservationByIdWithResponse(reservationId, context).block();\n     }\n \n     /**\n-     * Create a phone number search.\n+     * Create a phone number reservation.\n      *\n-     * @param searchOptions A {@link CreateSearchOptions} with the search options\n-     * @return A {@link CreateSearchResponse} representing the search.\n+     * @param reservationOptions A {@link CreateReservationOptions} with the reservation options\n+     * @return A {@link CreateReservationResponse} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public CreateSearchResponse createSearch(CreateSearchOptions searchOptions) {\n-        return phoneNumberAsyncClient.createSearch(searchOptions).block();\n+    public CreateReservationResponse createReservation(CreateReservationOptions reservationOptions) {\n+        return phoneNumberAsyncClient.createReservation(reservationOptions).block();\n     }\n \n     /**\n-     * Create a phone number search.\n+     * Create a phone number reservation.\n      *\n-     * @param searchOptions A {@link CreateSearchOptions} with the search options\n+     * @param reservationOptions A {@link CreateReservationOptions} with the reservation options\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} whose {@link Response#getValue()} value returns\n-     * a {@link CreateSearchResponse} representing the search.\n+     * a {@link CreateReservationResponse} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<CreateSearchResponse> createSearchWithResponse(CreateSearchOptions searchOptions, Context context) {\n-        return phoneNumberAsyncClient.createSearchWithResponse(searchOptions, context).block();\n+    public Response<CreateReservationResponse> createReservationWithResponse(\n+        CreateReservationOptions reservationOptions, Context context) {\n+        return phoneNumberAsyncClient.createReservationWithResponse(reservationOptions, context).block();\n     }\n \n     /**\n-     * Gets the list of all searches\n+     * Gets the list of all reservationes\n      *\n-     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing searches.\n+     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservationes.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedIterable<PhoneNumberEntity> listAllSearches() {\n-        return new PagedIterable<>(phoneNumberAsyncClient.listAllSearches());\n+    public PagedIterable<PhoneNumberEntity> listAllReservations() {\n+        return new PagedIterable<>(phoneNumberAsyncClient.listAllReservations());\n     }\n \n     /**\n-     * Gets the list of all searches\n+     * Gets the list of all reservationes\n      *\n      * @param context A {@link Context} representing the request context.\n-     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing searches.\n+     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservationes.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedIterable<PhoneNumberEntity> listAllSearches(Context context) {\n-        return new PagedIterable<>(phoneNumberAsyncClient.listAllSearches(context));\n+    public PagedIterable<PhoneNumberEntity> listAllReservations(Context context) {\n+        return new PagedIterable<>(phoneNumberAsyncClient.listAllReservations(context));\n     }\n \n     /**\n-     * Cancels the search. This means existing numbers in the search will be made available.\n+     * Cancels the reservation. This means existing numbers in the reservation will be made available.\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public void cancelSearch(String searchId) {\n-        phoneNumberAsyncClient.cancelSearch(searchId).block();\n+    public void cancelReservation(String reservationId) {\n+        phoneNumberAsyncClient.cancelReservation(reservationId).block();\n     }\n \n     /**\n-     * Cancels the search. This means existing numbers in the search will be made available.\n+     * Cancels the reservation. This means existing numbers in the reservation will be made available.\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} for the operation\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<Void> cancelSearchWithResponse(String searchId, Context context) {\n-        return phoneNumberAsyncClient.cancelSearchWithResponse(searchId, context).block();\n+    public Response<Void> cancelReservationWithResponse(String reservationId, Context context) {\n+        return phoneNumberAsyncClient.cancelReservationWithResponse(reservationId, context).block();\n     }\n \n     /**\n-     * Initiates a search and returns a {@link PhoneNumberReservation} usable by other functions\n+     * Initiates a reservation and returns a {@link PhoneNumberReservation} usable by other functions\n      * This function returns a Long Running Operation poller.\n      *\n-     * @param options A {@link CreateSearchOptions} with the search options\n+     * @param options A {@link CreateReservationOptions} with the reservation options\n      * @param pollInterval The time our long running operation will keep on polling\n      * until it gets a result from the server\n-     * @return A {@link SyncPoller} object with the search result\n+     * @return A {@link SyncPoller} object with the reservation result\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public SyncPoller<PhoneNumberReservation, PhoneNumberReservation> beginCreateSearch(\n-        CreateSearchOptions options, Duration pollInterval) {\n-        return phoneNumberAsyncClient.beginCreateSearch(options, pollInterval).getSyncPoller();\n+    public SyncPoller<PhoneNumberReservation, PhoneNumberReservation> beginCreateReservation(\n+        CreateReservationOptions options, Duration pollInterval) {\n+        return phoneNumberAsyncClient.beginCreateReservation(options, pollInterval).getSyncPoller();\n     }\n \n     /**\n      * Initiates a purchase process and polls until a terminal state is reached\n      * This function returns a Long Running Operation poller\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      * @param pollInterval The time our long running operation will keep on polling\n      * until it gets a result from the server\n-     * @return A {@link SyncPoller} object with the search result\n+     * @return A {@link SyncPoller} object with the reservation result\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public SyncPoller<Void, Void> beginPurchaseSearch(\n-        String searchId, Duration pollInterval) {\n-        return phoneNumberAsyncClient.beginPurchaseSearch(searchId, pollInterval).getSyncPoller();\n+    public SyncPoller<Void, Void> beginPurchaseReservation(\n+        String reservationId, Duration pollInterval) {\n+        return phoneNumberAsyncClient.beginPurchaseReservation(reservationId, pollInterval).getSyncPoller();\n     }\n \n  /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyMzEyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17253#discussion_r518923121", "bodyText": "here too; both method name and param name?", "author": "turalf", "createdAt": "2020-11-06T18:16:09Z", "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java", "diffHunk": "@@ -404,10 +404,10 @@ public PhoneNumberSearch getSearchById(String searchId) {\n      * @param searchId ID of the search\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} whose {@link Response#getValue()} value returns\n-     * a {@link PhoneNumberSearch} representing the search.\n+     * a {@link PhoneNumberReservation} representing the search.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<PhoneNumberSearch> getSearchByIdWithResponse(String searchId, Context context) {\n+    public Response<PhoneNumberReservation> getSearchByIdWithResponse(String searchId, Context context) {", "originalCommit": "eaf8c471b85c2ce2992d9f1e3cb661668799136f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "017c08b9502011378f8772b1b353ba39fafac847", "chunk": "diff --git a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\nindex fe4638fc064..183002f4f36 100644\n--- a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\n+++ b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\n\n@@ -388,124 +388,125 @@ public final class PhoneNumberClient {\n     }\n \n     /**\n-     * Gets a search by ID.\n+     * Gets a reservation by ID.\n      *\n-     * @param searchId ID of the search\n-     * @return A {@link PhoneNumberReservation} representing the search.\n+     * @param reservationId ID of the reservation\n+     * @return A {@link PhoneNumberReservation} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public PhoneNumberReservation getSearchById(String searchId) {\n-        return phoneNumberAsyncClient.getSearchById(searchId).block();\n+    public PhoneNumberReservation getReservationById(String reservationId) {\n+        return phoneNumberAsyncClient.getReservationById(reservationId).block();\n     }\n \n     /**\n-     * Gets a search by ID.\n+     * Gets a reservation by ID.\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} whose {@link Response#getValue()} value returns\n-     * a {@link PhoneNumberReservation} representing the search.\n+     * a {@link PhoneNumberReservation} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<PhoneNumberReservation> getSearchByIdWithResponse(String searchId, Context context) {\n-        return phoneNumberAsyncClient.getSearchByIdWithResponse(searchId, context).block();\n+    public Response<PhoneNumberReservation> getReservationByIdWithResponse(String reservationId, Context context) {\n+        return phoneNumberAsyncClient.getReservationByIdWithResponse(reservationId, context).block();\n     }\n \n     /**\n-     * Create a phone number search.\n+     * Create a phone number reservation.\n      *\n-     * @param searchOptions A {@link CreateSearchOptions} with the search options\n-     * @return A {@link CreateSearchResponse} representing the search.\n+     * @param reservationOptions A {@link CreateReservationOptions} with the reservation options\n+     * @return A {@link CreateReservationResponse} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public CreateSearchResponse createSearch(CreateSearchOptions searchOptions) {\n-        return phoneNumberAsyncClient.createSearch(searchOptions).block();\n+    public CreateReservationResponse createReservation(CreateReservationOptions reservationOptions) {\n+        return phoneNumberAsyncClient.createReservation(reservationOptions).block();\n     }\n \n     /**\n-     * Create a phone number search.\n+     * Create a phone number reservation.\n      *\n-     * @param searchOptions A {@link CreateSearchOptions} with the search options\n+     * @param reservationOptions A {@link CreateReservationOptions} with the reservation options\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} whose {@link Response#getValue()} value returns\n-     * a {@link CreateSearchResponse} representing the search.\n+     * a {@link CreateReservationResponse} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<CreateSearchResponse> createSearchWithResponse(CreateSearchOptions searchOptions, Context context) {\n-        return phoneNumberAsyncClient.createSearchWithResponse(searchOptions, context).block();\n+    public Response<CreateReservationResponse> createReservationWithResponse(\n+        CreateReservationOptions reservationOptions, Context context) {\n+        return phoneNumberAsyncClient.createReservationWithResponse(reservationOptions, context).block();\n     }\n \n     /**\n-     * Gets the list of all searches\n+     * Gets the list of all reservationes\n      *\n-     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing searches.\n+     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservationes.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedIterable<PhoneNumberEntity> listAllSearches() {\n-        return new PagedIterable<>(phoneNumberAsyncClient.listAllSearches());\n+    public PagedIterable<PhoneNumberEntity> listAllReservations() {\n+        return new PagedIterable<>(phoneNumberAsyncClient.listAllReservations());\n     }\n \n     /**\n-     * Gets the list of all searches\n+     * Gets the list of all reservationes\n      *\n      * @param context A {@link Context} representing the request context.\n-     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing searches.\n+     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservationes.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedIterable<PhoneNumberEntity> listAllSearches(Context context) {\n-        return new PagedIterable<>(phoneNumberAsyncClient.listAllSearches(context));\n+    public PagedIterable<PhoneNumberEntity> listAllReservations(Context context) {\n+        return new PagedIterable<>(phoneNumberAsyncClient.listAllReservations(context));\n     }\n \n     /**\n-     * Cancels the search. This means existing numbers in the search will be made available.\n+     * Cancels the reservation. This means existing numbers in the reservation will be made available.\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public void cancelSearch(String searchId) {\n-        phoneNumberAsyncClient.cancelSearch(searchId).block();\n+    public void cancelReservation(String reservationId) {\n+        phoneNumberAsyncClient.cancelReservation(reservationId).block();\n     }\n \n     /**\n-     * Cancels the search. This means existing numbers in the search will be made available.\n+     * Cancels the reservation. This means existing numbers in the reservation will be made available.\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} for the operation\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<Void> cancelSearchWithResponse(String searchId, Context context) {\n-        return phoneNumberAsyncClient.cancelSearchWithResponse(searchId, context).block();\n+    public Response<Void> cancelReservationWithResponse(String reservationId, Context context) {\n+        return phoneNumberAsyncClient.cancelReservationWithResponse(reservationId, context).block();\n     }\n \n     /**\n-     * Initiates a search and returns a {@link PhoneNumberReservation} usable by other functions\n+     * Initiates a reservation and returns a {@link PhoneNumberReservation} usable by other functions\n      * This function returns a Long Running Operation poller.\n      *\n-     * @param options A {@link CreateSearchOptions} with the search options\n+     * @param options A {@link CreateReservationOptions} with the reservation options\n      * @param pollInterval The time our long running operation will keep on polling\n      * until it gets a result from the server\n-     * @return A {@link SyncPoller} object with the search result\n+     * @return A {@link SyncPoller} object with the reservation result\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public SyncPoller<PhoneNumberReservation, PhoneNumberReservation> beginCreateSearch(\n-        CreateSearchOptions options, Duration pollInterval) {\n-        return phoneNumberAsyncClient.beginCreateSearch(options, pollInterval).getSyncPoller();\n+    public SyncPoller<PhoneNumberReservation, PhoneNumberReservation> beginCreateReservation(\n+        CreateReservationOptions options, Duration pollInterval) {\n+        return phoneNumberAsyncClient.beginCreateReservation(options, pollInterval).getSyncPoller();\n     }\n \n     /**\n      * Initiates a purchase process and polls until a terminal state is reached\n      * This function returns a Long Running Operation poller\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      * @param pollInterval The time our long running operation will keep on polling\n      * until it gets a result from the server\n-     * @return A {@link SyncPoller} object with the search result\n+     * @return A {@link SyncPoller} object with the reservation result\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public SyncPoller<Void, Void> beginPurchaseSearch(\n-        String searchId, Duration pollInterval) {\n-        return phoneNumberAsyncClient.beginPurchaseSearch(searchId, pollInterval).getSyncPoller();\n+    public SyncPoller<Void, Void> beginPurchaseReservation(\n+        String reservationId, Duration pollInterval) {\n+        return phoneNumberAsyncClient.beginPurchaseReservation(reservationId, pollInterval).getSyncPoller();\n     }\n \n  /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyMzM0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17253#discussion_r518923347", "bodyText": "beginReservation?", "author": "turalf", "createdAt": "2020-11-06T18:16:37Z", "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java", "diffHunk": "@@ -479,26 +479,26 @@ public void cancelSearch(String searchId) {\n     }\n \n     /**\n-     * Initiates a search and returns a {@link PhoneNumberSearch} usable by other functions\n+     * Initiates a search and returns a {@link PhoneNumberReservation} usable by other functions\n      * This function returns a Long Running Operation poller.\n-     * \n+     *\n      * @param options A {@link CreateSearchOptions} with the search options\n-     * @param pollInterval The time our long running operation will keep on polling \n+     * @param pollInterval The time our long running operation will keep on polling\n      * until it gets a result from the server\n      * @return A {@link SyncPoller} object with the search result\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public SyncPoller<PhoneNumberSearch, PhoneNumberSearch> beginCreateSearch(\n+    public SyncPoller<PhoneNumberReservation, PhoneNumberReservation> beginCreateSearch(", "originalCommit": "eaf8c471b85c2ce2992d9f1e3cb661668799136f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "017c08b9502011378f8772b1b353ba39fafac847", "chunk": "diff --git a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\nindex fe4638fc064..183002f4f36 100644\n--- a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\n+++ b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\n\n@@ -388,124 +388,125 @@ public final class PhoneNumberClient {\n     }\n \n     /**\n-     * Gets a search by ID.\n+     * Gets a reservation by ID.\n      *\n-     * @param searchId ID of the search\n-     * @return A {@link PhoneNumberReservation} representing the search.\n+     * @param reservationId ID of the reservation\n+     * @return A {@link PhoneNumberReservation} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public PhoneNumberReservation getSearchById(String searchId) {\n-        return phoneNumberAsyncClient.getSearchById(searchId).block();\n+    public PhoneNumberReservation getReservationById(String reservationId) {\n+        return phoneNumberAsyncClient.getReservationById(reservationId).block();\n     }\n \n     /**\n-     * Gets a search by ID.\n+     * Gets a reservation by ID.\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} whose {@link Response#getValue()} value returns\n-     * a {@link PhoneNumberReservation} representing the search.\n+     * a {@link PhoneNumberReservation} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<PhoneNumberReservation> getSearchByIdWithResponse(String searchId, Context context) {\n-        return phoneNumberAsyncClient.getSearchByIdWithResponse(searchId, context).block();\n+    public Response<PhoneNumberReservation> getReservationByIdWithResponse(String reservationId, Context context) {\n+        return phoneNumberAsyncClient.getReservationByIdWithResponse(reservationId, context).block();\n     }\n \n     /**\n-     * Create a phone number search.\n+     * Create a phone number reservation.\n      *\n-     * @param searchOptions A {@link CreateSearchOptions} with the search options\n-     * @return A {@link CreateSearchResponse} representing the search.\n+     * @param reservationOptions A {@link CreateReservationOptions} with the reservation options\n+     * @return A {@link CreateReservationResponse} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public CreateSearchResponse createSearch(CreateSearchOptions searchOptions) {\n-        return phoneNumberAsyncClient.createSearch(searchOptions).block();\n+    public CreateReservationResponse createReservation(CreateReservationOptions reservationOptions) {\n+        return phoneNumberAsyncClient.createReservation(reservationOptions).block();\n     }\n \n     /**\n-     * Create a phone number search.\n+     * Create a phone number reservation.\n      *\n-     * @param searchOptions A {@link CreateSearchOptions} with the search options\n+     * @param reservationOptions A {@link CreateReservationOptions} with the reservation options\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} whose {@link Response#getValue()} value returns\n-     * a {@link CreateSearchResponse} representing the search.\n+     * a {@link CreateReservationResponse} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<CreateSearchResponse> createSearchWithResponse(CreateSearchOptions searchOptions, Context context) {\n-        return phoneNumberAsyncClient.createSearchWithResponse(searchOptions, context).block();\n+    public Response<CreateReservationResponse> createReservationWithResponse(\n+        CreateReservationOptions reservationOptions, Context context) {\n+        return phoneNumberAsyncClient.createReservationWithResponse(reservationOptions, context).block();\n     }\n \n     /**\n-     * Gets the list of all searches\n+     * Gets the list of all reservationes\n      *\n-     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing searches.\n+     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservationes.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedIterable<PhoneNumberEntity> listAllSearches() {\n-        return new PagedIterable<>(phoneNumberAsyncClient.listAllSearches());\n+    public PagedIterable<PhoneNumberEntity> listAllReservations() {\n+        return new PagedIterable<>(phoneNumberAsyncClient.listAllReservations());\n     }\n \n     /**\n-     * Gets the list of all searches\n+     * Gets the list of all reservationes\n      *\n      * @param context A {@link Context} representing the request context.\n-     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing searches.\n+     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservationes.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedIterable<PhoneNumberEntity> listAllSearches(Context context) {\n-        return new PagedIterable<>(phoneNumberAsyncClient.listAllSearches(context));\n+    public PagedIterable<PhoneNumberEntity> listAllReservations(Context context) {\n+        return new PagedIterable<>(phoneNumberAsyncClient.listAllReservations(context));\n     }\n \n     /**\n-     * Cancels the search. This means existing numbers in the search will be made available.\n+     * Cancels the reservation. This means existing numbers in the reservation will be made available.\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public void cancelSearch(String searchId) {\n-        phoneNumberAsyncClient.cancelSearch(searchId).block();\n+    public void cancelReservation(String reservationId) {\n+        phoneNumberAsyncClient.cancelReservation(reservationId).block();\n     }\n \n     /**\n-     * Cancels the search. This means existing numbers in the search will be made available.\n+     * Cancels the reservation. This means existing numbers in the reservation will be made available.\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} for the operation\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<Void> cancelSearchWithResponse(String searchId, Context context) {\n-        return phoneNumberAsyncClient.cancelSearchWithResponse(searchId, context).block();\n+    public Response<Void> cancelReservationWithResponse(String reservationId, Context context) {\n+        return phoneNumberAsyncClient.cancelReservationWithResponse(reservationId, context).block();\n     }\n \n     /**\n-     * Initiates a search and returns a {@link PhoneNumberReservation} usable by other functions\n+     * Initiates a reservation and returns a {@link PhoneNumberReservation} usable by other functions\n      * This function returns a Long Running Operation poller.\n      *\n-     * @param options A {@link CreateSearchOptions} with the search options\n+     * @param options A {@link CreateReservationOptions} with the reservation options\n      * @param pollInterval The time our long running operation will keep on polling\n      * until it gets a result from the server\n-     * @return A {@link SyncPoller} object with the search result\n+     * @return A {@link SyncPoller} object with the reservation result\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public SyncPoller<PhoneNumberReservation, PhoneNumberReservation> beginCreateSearch(\n-        CreateSearchOptions options, Duration pollInterval) {\n-        return phoneNumberAsyncClient.beginCreateSearch(options, pollInterval).getSyncPoller();\n+    public SyncPoller<PhoneNumberReservation, PhoneNumberReservation> beginCreateReservation(\n+        CreateReservationOptions options, Duration pollInterval) {\n+        return phoneNumberAsyncClient.beginCreateReservation(options, pollInterval).getSyncPoller();\n     }\n \n     /**\n      * Initiates a purchase process and polls until a terminal state is reached\n      * This function returns a Long Running Operation poller\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      * @param pollInterval The time our long running operation will keep on polling\n      * until it gets a result from the server\n-     * @return A {@link SyncPoller} object with the search result\n+     * @return A {@link SyncPoller} object with the reservation result\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public SyncPoller<Void, Void> beginPurchaseSearch(\n-        String searchId, Duration pollInterval) {\n-        return phoneNumberAsyncClient.beginPurchaseSearch(searchId, pollInterval).getSyncPoller();\n+    public SyncPoller<Void, Void> beginPurchaseReservation(\n+        String reservationId, Duration pollInterval) {\n+        return phoneNumberAsyncClient.beginPurchaseReservation(reservationId, pollInterval).getSyncPoller();\n     }\n \n  /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyMzY5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17253#discussion_r518923696", "bodyText": "are we changing this to ReservationOptions too?", "author": "turalf", "createdAt": "2020-11-06T18:17:13Z", "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java", "diffHunk": "@@ -479,26 +479,26 @@ public void cancelSearch(String searchId) {\n     }\n \n     /**\n-     * Initiates a search and returns a {@link PhoneNumberSearch} usable by other functions\n+     * Initiates a search and returns a {@link PhoneNumberReservation} usable by other functions\n      * This function returns a Long Running Operation poller.\n-     * \n+     *\n      * @param options A {@link CreateSearchOptions} with the search options\n-     * @param pollInterval The time our long running operation will keep on polling \n+     * @param pollInterval The time our long running operation will keep on polling\n      * until it gets a result from the server\n      * @return A {@link SyncPoller} object with the search result\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public SyncPoller<PhoneNumberSearch, PhoneNumberSearch> beginCreateSearch(\n+    public SyncPoller<PhoneNumberReservation, PhoneNumberReservation> beginCreateSearch(\n         CreateSearchOptions options, Duration pollInterval) {", "originalCommit": "eaf8c471b85c2ce2992d9f1e3cb661668799136f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzMjU5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17253#discussion_r520932597", "bodyText": "Yes it is now changed", "author": "paolamvhz", "createdAt": "2020-11-10T23:10:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyMzY5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "017c08b9502011378f8772b1b353ba39fafac847", "chunk": "diff --git a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\nindex fe4638fc064..183002f4f36 100644\n--- a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\n+++ b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\n\n@@ -388,124 +388,125 @@ public final class PhoneNumberClient {\n     }\n \n     /**\n-     * Gets a search by ID.\n+     * Gets a reservation by ID.\n      *\n-     * @param searchId ID of the search\n-     * @return A {@link PhoneNumberReservation} representing the search.\n+     * @param reservationId ID of the reservation\n+     * @return A {@link PhoneNumberReservation} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public PhoneNumberReservation getSearchById(String searchId) {\n-        return phoneNumberAsyncClient.getSearchById(searchId).block();\n+    public PhoneNumberReservation getReservationById(String reservationId) {\n+        return phoneNumberAsyncClient.getReservationById(reservationId).block();\n     }\n \n     /**\n-     * Gets a search by ID.\n+     * Gets a reservation by ID.\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} whose {@link Response#getValue()} value returns\n-     * a {@link PhoneNumberReservation} representing the search.\n+     * a {@link PhoneNumberReservation} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<PhoneNumberReservation> getSearchByIdWithResponse(String searchId, Context context) {\n-        return phoneNumberAsyncClient.getSearchByIdWithResponse(searchId, context).block();\n+    public Response<PhoneNumberReservation> getReservationByIdWithResponse(String reservationId, Context context) {\n+        return phoneNumberAsyncClient.getReservationByIdWithResponse(reservationId, context).block();\n     }\n \n     /**\n-     * Create a phone number search.\n+     * Create a phone number reservation.\n      *\n-     * @param searchOptions A {@link CreateSearchOptions} with the search options\n-     * @return A {@link CreateSearchResponse} representing the search.\n+     * @param reservationOptions A {@link CreateReservationOptions} with the reservation options\n+     * @return A {@link CreateReservationResponse} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public CreateSearchResponse createSearch(CreateSearchOptions searchOptions) {\n-        return phoneNumberAsyncClient.createSearch(searchOptions).block();\n+    public CreateReservationResponse createReservation(CreateReservationOptions reservationOptions) {\n+        return phoneNumberAsyncClient.createReservation(reservationOptions).block();\n     }\n \n     /**\n-     * Create a phone number search.\n+     * Create a phone number reservation.\n      *\n-     * @param searchOptions A {@link CreateSearchOptions} with the search options\n+     * @param reservationOptions A {@link CreateReservationOptions} with the reservation options\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} whose {@link Response#getValue()} value returns\n-     * a {@link CreateSearchResponse} representing the search.\n+     * a {@link CreateReservationResponse} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<CreateSearchResponse> createSearchWithResponse(CreateSearchOptions searchOptions, Context context) {\n-        return phoneNumberAsyncClient.createSearchWithResponse(searchOptions, context).block();\n+    public Response<CreateReservationResponse> createReservationWithResponse(\n+        CreateReservationOptions reservationOptions, Context context) {\n+        return phoneNumberAsyncClient.createReservationWithResponse(reservationOptions, context).block();\n     }\n \n     /**\n-     * Gets the list of all searches\n+     * Gets the list of all reservationes\n      *\n-     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing searches.\n+     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservationes.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedIterable<PhoneNumberEntity> listAllSearches() {\n-        return new PagedIterable<>(phoneNumberAsyncClient.listAllSearches());\n+    public PagedIterable<PhoneNumberEntity> listAllReservations() {\n+        return new PagedIterable<>(phoneNumberAsyncClient.listAllReservations());\n     }\n \n     /**\n-     * Gets the list of all searches\n+     * Gets the list of all reservationes\n      *\n      * @param context A {@link Context} representing the request context.\n-     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing searches.\n+     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservationes.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedIterable<PhoneNumberEntity> listAllSearches(Context context) {\n-        return new PagedIterable<>(phoneNumberAsyncClient.listAllSearches(context));\n+    public PagedIterable<PhoneNumberEntity> listAllReservations(Context context) {\n+        return new PagedIterable<>(phoneNumberAsyncClient.listAllReservations(context));\n     }\n \n     /**\n-     * Cancels the search. This means existing numbers in the search will be made available.\n+     * Cancels the reservation. This means existing numbers in the reservation will be made available.\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public void cancelSearch(String searchId) {\n-        phoneNumberAsyncClient.cancelSearch(searchId).block();\n+    public void cancelReservation(String reservationId) {\n+        phoneNumberAsyncClient.cancelReservation(reservationId).block();\n     }\n \n     /**\n-     * Cancels the search. This means existing numbers in the search will be made available.\n+     * Cancels the reservation. This means existing numbers in the reservation will be made available.\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} for the operation\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<Void> cancelSearchWithResponse(String searchId, Context context) {\n-        return phoneNumberAsyncClient.cancelSearchWithResponse(searchId, context).block();\n+    public Response<Void> cancelReservationWithResponse(String reservationId, Context context) {\n+        return phoneNumberAsyncClient.cancelReservationWithResponse(reservationId, context).block();\n     }\n \n     /**\n-     * Initiates a search and returns a {@link PhoneNumberReservation} usable by other functions\n+     * Initiates a reservation and returns a {@link PhoneNumberReservation} usable by other functions\n      * This function returns a Long Running Operation poller.\n      *\n-     * @param options A {@link CreateSearchOptions} with the search options\n+     * @param options A {@link CreateReservationOptions} with the reservation options\n      * @param pollInterval The time our long running operation will keep on polling\n      * until it gets a result from the server\n-     * @return A {@link SyncPoller} object with the search result\n+     * @return A {@link SyncPoller} object with the reservation result\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public SyncPoller<PhoneNumberReservation, PhoneNumberReservation> beginCreateSearch(\n-        CreateSearchOptions options, Duration pollInterval) {\n-        return phoneNumberAsyncClient.beginCreateSearch(options, pollInterval).getSyncPoller();\n+    public SyncPoller<PhoneNumberReservation, PhoneNumberReservation> beginCreateReservation(\n+        CreateReservationOptions options, Duration pollInterval) {\n+        return phoneNumberAsyncClient.beginCreateReservation(options, pollInterval).getSyncPoller();\n     }\n \n     /**\n      * Initiates a purchase process and polls until a terminal state is reached\n      * This function returns a Long Running Operation poller\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      * @param pollInterval The time our long running operation will keep on polling\n      * until it gets a result from the server\n-     * @return A {@link SyncPoller} object with the search result\n+     * @return A {@link SyncPoller} object with the reservation result\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public SyncPoller<Void, Void> beginPurchaseSearch(\n-        String searchId, Duration pollInterval) {\n-        return phoneNumberAsyncClient.beginPurchaseSearch(searchId, pollInterval).getSyncPoller();\n+    public SyncPoller<Void, Void> beginPurchaseReservation(\n+        String reservationId, Duration pollInterval) {\n+        return phoneNumberAsyncClient.beginPurchaseReservation(reservationId, pollInterval).getSyncPoller();\n     }\n \n  /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyMzg4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17253#discussion_r518923889", "bodyText": "nit: pollingInterval might be better name", "author": "turalf", "createdAt": "2020-11-06T18:17:39Z", "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java", "diffHunk": "@@ -479,26 +479,26 @@ public void cancelSearch(String searchId) {\n     }\n \n     /**\n-     * Initiates a search and returns a {@link PhoneNumberSearch} usable by other functions\n+     * Initiates a search and returns a {@link PhoneNumberReservation} usable by other functions\n      * This function returns a Long Running Operation poller.\n-     * \n+     *\n      * @param options A {@link CreateSearchOptions} with the search options\n-     * @param pollInterval The time our long running operation will keep on polling \n+     * @param pollInterval The time our long running operation will keep on polling\n      * until it gets a result from the server\n      * @return A {@link SyncPoller} object with the search result\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public SyncPoller<PhoneNumberSearch, PhoneNumberSearch> beginCreateSearch(\n+    public SyncPoller<PhoneNumberReservation, PhoneNumberReservation> beginCreateSearch(\n         CreateSearchOptions options, Duration pollInterval) {", "originalCommit": "eaf8c471b85c2ce2992d9f1e3cb661668799136f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "017c08b9502011378f8772b1b353ba39fafac847", "chunk": "diff --git a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\nindex fe4638fc064..183002f4f36 100644\n--- a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\n+++ b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\n\n@@ -388,124 +388,125 @@ public final class PhoneNumberClient {\n     }\n \n     /**\n-     * Gets a search by ID.\n+     * Gets a reservation by ID.\n      *\n-     * @param searchId ID of the search\n-     * @return A {@link PhoneNumberReservation} representing the search.\n+     * @param reservationId ID of the reservation\n+     * @return A {@link PhoneNumberReservation} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public PhoneNumberReservation getSearchById(String searchId) {\n-        return phoneNumberAsyncClient.getSearchById(searchId).block();\n+    public PhoneNumberReservation getReservationById(String reservationId) {\n+        return phoneNumberAsyncClient.getReservationById(reservationId).block();\n     }\n \n     /**\n-     * Gets a search by ID.\n+     * Gets a reservation by ID.\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} whose {@link Response#getValue()} value returns\n-     * a {@link PhoneNumberReservation} representing the search.\n+     * a {@link PhoneNumberReservation} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<PhoneNumberReservation> getSearchByIdWithResponse(String searchId, Context context) {\n-        return phoneNumberAsyncClient.getSearchByIdWithResponse(searchId, context).block();\n+    public Response<PhoneNumberReservation> getReservationByIdWithResponse(String reservationId, Context context) {\n+        return phoneNumberAsyncClient.getReservationByIdWithResponse(reservationId, context).block();\n     }\n \n     /**\n-     * Create a phone number search.\n+     * Create a phone number reservation.\n      *\n-     * @param searchOptions A {@link CreateSearchOptions} with the search options\n-     * @return A {@link CreateSearchResponse} representing the search.\n+     * @param reservationOptions A {@link CreateReservationOptions} with the reservation options\n+     * @return A {@link CreateReservationResponse} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public CreateSearchResponse createSearch(CreateSearchOptions searchOptions) {\n-        return phoneNumberAsyncClient.createSearch(searchOptions).block();\n+    public CreateReservationResponse createReservation(CreateReservationOptions reservationOptions) {\n+        return phoneNumberAsyncClient.createReservation(reservationOptions).block();\n     }\n \n     /**\n-     * Create a phone number search.\n+     * Create a phone number reservation.\n      *\n-     * @param searchOptions A {@link CreateSearchOptions} with the search options\n+     * @param reservationOptions A {@link CreateReservationOptions} with the reservation options\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} whose {@link Response#getValue()} value returns\n-     * a {@link CreateSearchResponse} representing the search.\n+     * a {@link CreateReservationResponse} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<CreateSearchResponse> createSearchWithResponse(CreateSearchOptions searchOptions, Context context) {\n-        return phoneNumberAsyncClient.createSearchWithResponse(searchOptions, context).block();\n+    public Response<CreateReservationResponse> createReservationWithResponse(\n+        CreateReservationOptions reservationOptions, Context context) {\n+        return phoneNumberAsyncClient.createReservationWithResponse(reservationOptions, context).block();\n     }\n \n     /**\n-     * Gets the list of all searches\n+     * Gets the list of all reservationes\n      *\n-     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing searches.\n+     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservationes.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedIterable<PhoneNumberEntity> listAllSearches() {\n-        return new PagedIterable<>(phoneNumberAsyncClient.listAllSearches());\n+    public PagedIterable<PhoneNumberEntity> listAllReservations() {\n+        return new PagedIterable<>(phoneNumberAsyncClient.listAllReservations());\n     }\n \n     /**\n-     * Gets the list of all searches\n+     * Gets the list of all reservationes\n      *\n      * @param context A {@link Context} representing the request context.\n-     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing searches.\n+     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservationes.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedIterable<PhoneNumberEntity> listAllSearches(Context context) {\n-        return new PagedIterable<>(phoneNumberAsyncClient.listAllSearches(context));\n+    public PagedIterable<PhoneNumberEntity> listAllReservations(Context context) {\n+        return new PagedIterable<>(phoneNumberAsyncClient.listAllReservations(context));\n     }\n \n     /**\n-     * Cancels the search. This means existing numbers in the search will be made available.\n+     * Cancels the reservation. This means existing numbers in the reservation will be made available.\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public void cancelSearch(String searchId) {\n-        phoneNumberAsyncClient.cancelSearch(searchId).block();\n+    public void cancelReservation(String reservationId) {\n+        phoneNumberAsyncClient.cancelReservation(reservationId).block();\n     }\n \n     /**\n-     * Cancels the search. This means existing numbers in the search will be made available.\n+     * Cancels the reservation. This means existing numbers in the reservation will be made available.\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} for the operation\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<Void> cancelSearchWithResponse(String searchId, Context context) {\n-        return phoneNumberAsyncClient.cancelSearchWithResponse(searchId, context).block();\n+    public Response<Void> cancelReservationWithResponse(String reservationId, Context context) {\n+        return phoneNumberAsyncClient.cancelReservationWithResponse(reservationId, context).block();\n     }\n \n     /**\n-     * Initiates a search and returns a {@link PhoneNumberReservation} usable by other functions\n+     * Initiates a reservation and returns a {@link PhoneNumberReservation} usable by other functions\n      * This function returns a Long Running Operation poller.\n      *\n-     * @param options A {@link CreateSearchOptions} with the search options\n+     * @param options A {@link CreateReservationOptions} with the reservation options\n      * @param pollInterval The time our long running operation will keep on polling\n      * until it gets a result from the server\n-     * @return A {@link SyncPoller} object with the search result\n+     * @return A {@link SyncPoller} object with the reservation result\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public SyncPoller<PhoneNumberReservation, PhoneNumberReservation> beginCreateSearch(\n-        CreateSearchOptions options, Duration pollInterval) {\n-        return phoneNumberAsyncClient.beginCreateSearch(options, pollInterval).getSyncPoller();\n+    public SyncPoller<PhoneNumberReservation, PhoneNumberReservation> beginCreateReservation(\n+        CreateReservationOptions options, Duration pollInterval) {\n+        return phoneNumberAsyncClient.beginCreateReservation(options, pollInterval).getSyncPoller();\n     }\n \n     /**\n      * Initiates a purchase process and polls until a terminal state is reached\n      * This function returns a Long Running Operation poller\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      * @param pollInterval The time our long running operation will keep on polling\n      * until it gets a result from the server\n-     * @return A {@link SyncPoller} object with the search result\n+     * @return A {@link SyncPoller} object with the reservation result\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public SyncPoller<Void, Void> beginPurchaseSearch(\n-        String searchId, Duration pollInterval) {\n-        return phoneNumberAsyncClient.beginPurchaseSearch(searchId, pollInterval).getSyncPoller();\n+    public SyncPoller<Void, Void> beginPurchaseReservation(\n+        String reservationId, Duration pollInterval) {\n+        return phoneNumberAsyncClient.beginPurchaseReservation(reservationId, pollInterval).getSyncPoller();\n     }\n \n  /**\n"}}, {"oid": "3dc26295e15a7a617bf3580f192fb50e5fab4c54", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3dc26295e15a7a617bf3580f192fb50e5fab4c54", "message": "Merge remote-tracking branch 'upstream/master' into renameNew", "committedDate": "2020-11-10T01:03:10Z", "type": "commit"}, {"oid": "017c08b9502011378f8772b1b353ba39fafac847", "url": "https://github.com/Azure/azure-sdk-for-java/commit/017c08b9502011378f8772b1b353ba39fafac847", "message": "Renaming the model CreateSearchReponse and CreateSearchOptions", "committedDate": "2020-11-10T22:11:42Z", "type": "commit"}, {"oid": "4492314cfcf48c4f8cddc8946ed76765932af116", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4492314cfcf48c4f8cddc8946ed76765932af116", "message": "Fixing tests", "committedDate": "2020-11-12T23:43:31Z", "type": "commit"}, {"oid": "8370590fedb1b1902804c871f08789b9e5b8052d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8370590fedb1b1902804c871f08789b9e5b8052d", "message": "Fixing tests", "committedDate": "2020-11-13T00:00:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzNjkwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17253#discussion_r523036908", "bodyText": "reservations", "author": "jbeauregardb", "createdAt": "2020-11-13T15:49:21Z", "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java", "diffHunk": "@@ -388,134 +388,135 @@ public PhoneNumberRelease getReleaseById(String releaseId) {\n     }\n \n     /**\n-     * Gets a search by ID.\n+     * Gets a reservation by ID.\n      *\n-     * @param searchId ID of the search\n-     * @return A {@link PhoneNumberSearch} representing the search.\n+     * @param reservationId ID of the reservation\n+     * @return A {@link PhoneNumberReservation} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public PhoneNumberSearch getSearchById(String searchId) {\n-        return phoneNumberAsyncClient.getSearchById(searchId).block();\n+    public PhoneNumberReservation getReservationById(String reservationId) {\n+        return phoneNumberAsyncClient.getReservationById(reservationId).block();\n     }\n \n     /**\n-     * Gets a search by ID.\n+     * Gets a reservation by ID.\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} whose {@link Response#getValue()} value returns\n-     * a {@link PhoneNumberSearch} representing the search.\n+     * a {@link PhoneNumberReservation} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<PhoneNumberSearch> getSearchByIdWithResponse(String searchId, Context context) {\n-        return phoneNumberAsyncClient.getSearchByIdWithResponse(searchId, context).block();\n+    public Response<PhoneNumberReservation> getReservationByIdWithResponse(String reservationId, Context context) {\n+        return phoneNumberAsyncClient.getReservationByIdWithResponse(reservationId, context).block();\n     }\n \n     /**\n-     * Create a phone number search.\n+     * Create a phone number reservation.\n      *\n-     * @param searchOptions A {@link CreateSearchOptions} with the search options\n-     * @return A {@link CreateSearchResponse} representing the search.\n+     * @param reservationOptions A {@link CreateReservationOptions} with the reservation options\n+     * @return A {@link CreateReservationResponse} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public CreateSearchResponse createSearch(CreateSearchOptions searchOptions) {\n-        return phoneNumberAsyncClient.createSearch(searchOptions).block();\n+    public CreateReservationResponse createReservation(CreateReservationOptions reservationOptions) {\n+        return phoneNumberAsyncClient.createReservation(reservationOptions).block();\n     }\n \n     /**\n-     * Create a phone number search.\n+     * Create a phone number reservation.\n      *\n-     * @param searchOptions A {@link CreateSearchOptions} with the search options\n+     * @param reservationOptions A {@link CreateReservationOptions} with the reservation options\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} whose {@link Response#getValue()} value returns\n-     * a {@link CreateSearchResponse} representing the search.\n+     * a {@link CreateReservationResponse} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<CreateSearchResponse> createSearchWithResponse(CreateSearchOptions searchOptions, Context context) {\n-        return phoneNumberAsyncClient.createSearchWithResponse(searchOptions, context).block();\n+    public Response<CreateReservationResponse> createReservationWithResponse(\n+        CreateReservationOptions reservationOptions, Context context) {\n+        return phoneNumberAsyncClient.createReservationWithResponse(reservationOptions, context).block();\n     }\n \n     /**\n-     * Gets the list of all searches\n+     * Gets the list of all reservationes", "originalCommit": "8370590fedb1b1902804c871f08789b9e5b8052d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d66060851676cb1a6170a45f48affeb6cbd6412", "chunk": "diff --git a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\nindex 183002f4f36..09bc5ae8eeb 100644\n--- a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\n+++ b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\n\n@@ -437,9 +437,9 @@ public final class PhoneNumberClient {\n     }\n \n     /**\n-     * Gets the list of all reservationes\n+     * Gets the list of all reservations\n      *\n-     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservationes.\n+     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservations.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n     public PagedIterable<PhoneNumberEntity> listAllReservations() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzNzAwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17253#discussion_r523037008", "bodyText": "same here", "author": "jbeauregardb", "createdAt": "2020-11-13T15:49:29Z", "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java", "diffHunk": "@@ -388,134 +388,135 @@ public PhoneNumberRelease getReleaseById(String releaseId) {\n     }\n \n     /**\n-     * Gets a search by ID.\n+     * Gets a reservation by ID.\n      *\n-     * @param searchId ID of the search\n-     * @return A {@link PhoneNumberSearch} representing the search.\n+     * @param reservationId ID of the reservation\n+     * @return A {@link PhoneNumberReservation} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public PhoneNumberSearch getSearchById(String searchId) {\n-        return phoneNumberAsyncClient.getSearchById(searchId).block();\n+    public PhoneNumberReservation getReservationById(String reservationId) {\n+        return phoneNumberAsyncClient.getReservationById(reservationId).block();\n     }\n \n     /**\n-     * Gets a search by ID.\n+     * Gets a reservation by ID.\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} whose {@link Response#getValue()} value returns\n-     * a {@link PhoneNumberSearch} representing the search.\n+     * a {@link PhoneNumberReservation} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<PhoneNumberSearch> getSearchByIdWithResponse(String searchId, Context context) {\n-        return phoneNumberAsyncClient.getSearchByIdWithResponse(searchId, context).block();\n+    public Response<PhoneNumberReservation> getReservationByIdWithResponse(String reservationId, Context context) {\n+        return phoneNumberAsyncClient.getReservationByIdWithResponse(reservationId, context).block();\n     }\n \n     /**\n-     * Create a phone number search.\n+     * Create a phone number reservation.\n      *\n-     * @param searchOptions A {@link CreateSearchOptions} with the search options\n-     * @return A {@link CreateSearchResponse} representing the search.\n+     * @param reservationOptions A {@link CreateReservationOptions} with the reservation options\n+     * @return A {@link CreateReservationResponse} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public CreateSearchResponse createSearch(CreateSearchOptions searchOptions) {\n-        return phoneNumberAsyncClient.createSearch(searchOptions).block();\n+    public CreateReservationResponse createReservation(CreateReservationOptions reservationOptions) {\n+        return phoneNumberAsyncClient.createReservation(reservationOptions).block();\n     }\n \n     /**\n-     * Create a phone number search.\n+     * Create a phone number reservation.\n      *\n-     * @param searchOptions A {@link CreateSearchOptions} with the search options\n+     * @param reservationOptions A {@link CreateReservationOptions} with the reservation options\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} whose {@link Response#getValue()} value returns\n-     * a {@link CreateSearchResponse} representing the search.\n+     * a {@link CreateReservationResponse} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<CreateSearchResponse> createSearchWithResponse(CreateSearchOptions searchOptions, Context context) {\n-        return phoneNumberAsyncClient.createSearchWithResponse(searchOptions, context).block();\n+    public Response<CreateReservationResponse> createReservationWithResponse(\n+        CreateReservationOptions reservationOptions, Context context) {\n+        return phoneNumberAsyncClient.createReservationWithResponse(reservationOptions, context).block();\n     }\n \n     /**\n-     * Gets the list of all searches\n+     * Gets the list of all reservationes\n      *\n-     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing searches.\n+     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservationes.", "originalCommit": "8370590fedb1b1902804c871f08789b9e5b8052d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d66060851676cb1a6170a45f48affeb6cbd6412", "chunk": "diff --git a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\nindex 183002f4f36..09bc5ae8eeb 100644\n--- a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\n+++ b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\n\n@@ -437,9 +437,9 @@ public final class PhoneNumberClient {\n     }\n \n     /**\n-     * Gets the list of all reservationes\n+     * Gets the list of all reservations\n      *\n-     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservationes.\n+     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservations.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n     public PagedIterable<PhoneNumberEntity> listAllReservations() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzNzU4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17253#discussion_r523037582", "bodyText": "same here", "author": "jbeauregardb", "createdAt": "2020-11-13T15:50:17Z", "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java", "diffHunk": "@@ -388,134 +388,135 @@ public PhoneNumberRelease getReleaseById(String releaseId) {\n     }\n \n     /**\n-     * Gets a search by ID.\n+     * Gets a reservation by ID.\n      *\n-     * @param searchId ID of the search\n-     * @return A {@link PhoneNumberSearch} representing the search.\n+     * @param reservationId ID of the reservation\n+     * @return A {@link PhoneNumberReservation} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public PhoneNumberSearch getSearchById(String searchId) {\n-        return phoneNumberAsyncClient.getSearchById(searchId).block();\n+    public PhoneNumberReservation getReservationById(String reservationId) {\n+        return phoneNumberAsyncClient.getReservationById(reservationId).block();\n     }\n \n     /**\n-     * Gets a search by ID.\n+     * Gets a reservation by ID.\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} whose {@link Response#getValue()} value returns\n-     * a {@link PhoneNumberSearch} representing the search.\n+     * a {@link PhoneNumberReservation} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<PhoneNumberSearch> getSearchByIdWithResponse(String searchId, Context context) {\n-        return phoneNumberAsyncClient.getSearchByIdWithResponse(searchId, context).block();\n+    public Response<PhoneNumberReservation> getReservationByIdWithResponse(String reservationId, Context context) {\n+        return phoneNumberAsyncClient.getReservationByIdWithResponse(reservationId, context).block();\n     }\n \n     /**\n-     * Create a phone number search.\n+     * Create a phone number reservation.\n      *\n-     * @param searchOptions A {@link CreateSearchOptions} with the search options\n-     * @return A {@link CreateSearchResponse} representing the search.\n+     * @param reservationOptions A {@link CreateReservationOptions} with the reservation options\n+     * @return A {@link CreateReservationResponse} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public CreateSearchResponse createSearch(CreateSearchOptions searchOptions) {\n-        return phoneNumberAsyncClient.createSearch(searchOptions).block();\n+    public CreateReservationResponse createReservation(CreateReservationOptions reservationOptions) {\n+        return phoneNumberAsyncClient.createReservation(reservationOptions).block();\n     }\n \n     /**\n-     * Create a phone number search.\n+     * Create a phone number reservation.\n      *\n-     * @param searchOptions A {@link CreateSearchOptions} with the search options\n+     * @param reservationOptions A {@link CreateReservationOptions} with the reservation options\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} whose {@link Response#getValue()} value returns\n-     * a {@link CreateSearchResponse} representing the search.\n+     * a {@link CreateReservationResponse} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<CreateSearchResponse> createSearchWithResponse(CreateSearchOptions searchOptions, Context context) {\n-        return phoneNumberAsyncClient.createSearchWithResponse(searchOptions, context).block();\n+    public Response<CreateReservationResponse> createReservationWithResponse(\n+        CreateReservationOptions reservationOptions, Context context) {\n+        return phoneNumberAsyncClient.createReservationWithResponse(reservationOptions, context).block();\n     }\n \n     /**\n-     * Gets the list of all searches\n+     * Gets the list of all reservationes\n      *\n-     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing searches.\n+     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservationes.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedIterable<PhoneNumberEntity> listAllSearches() {\n-        return new PagedIterable<>(phoneNumberAsyncClient.listAllSearches());\n+    public PagedIterable<PhoneNumberEntity> listAllReservations() {\n+        return new PagedIterable<>(phoneNumberAsyncClient.listAllReservations());\n     }\n \n     /**\n-     * Gets the list of all searches\n+     * Gets the list of all reservationes", "originalCommit": "8370590fedb1b1902804c871f08789b9e5b8052d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d66060851676cb1a6170a45f48affeb6cbd6412", "chunk": "diff --git a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\nindex 183002f4f36..09bc5ae8eeb 100644\n--- a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\n+++ b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\n\n@@ -437,9 +437,9 @@ public final class PhoneNumberClient {\n     }\n \n     /**\n-     * Gets the list of all reservationes\n+     * Gets the list of all reservations\n      *\n-     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservationes.\n+     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservations.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n     public PagedIterable<PhoneNumberEntity> listAllReservations() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAzNzY4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17253#discussion_r523037688", "bodyText": "and here", "author": "jbeauregardb", "createdAt": "2020-11-13T15:50:27Z", "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java", "diffHunk": "@@ -388,134 +388,135 @@ public PhoneNumberRelease getReleaseById(String releaseId) {\n     }\n \n     /**\n-     * Gets a search by ID.\n+     * Gets a reservation by ID.\n      *\n-     * @param searchId ID of the search\n-     * @return A {@link PhoneNumberSearch} representing the search.\n+     * @param reservationId ID of the reservation\n+     * @return A {@link PhoneNumberReservation} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public PhoneNumberSearch getSearchById(String searchId) {\n-        return phoneNumberAsyncClient.getSearchById(searchId).block();\n+    public PhoneNumberReservation getReservationById(String reservationId) {\n+        return phoneNumberAsyncClient.getReservationById(reservationId).block();\n     }\n \n     /**\n-     * Gets a search by ID.\n+     * Gets a reservation by ID.\n      *\n-     * @param searchId ID of the search\n+     * @param reservationId ID of the reservation\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} whose {@link Response#getValue()} value returns\n-     * a {@link PhoneNumberSearch} representing the search.\n+     * a {@link PhoneNumberReservation} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<PhoneNumberSearch> getSearchByIdWithResponse(String searchId, Context context) {\n-        return phoneNumberAsyncClient.getSearchByIdWithResponse(searchId, context).block();\n+    public Response<PhoneNumberReservation> getReservationByIdWithResponse(String reservationId, Context context) {\n+        return phoneNumberAsyncClient.getReservationByIdWithResponse(reservationId, context).block();\n     }\n \n     /**\n-     * Create a phone number search.\n+     * Create a phone number reservation.\n      *\n-     * @param searchOptions A {@link CreateSearchOptions} with the search options\n-     * @return A {@link CreateSearchResponse} representing the search.\n+     * @param reservationOptions A {@link CreateReservationOptions} with the reservation options\n+     * @return A {@link CreateReservationResponse} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public CreateSearchResponse createSearch(CreateSearchOptions searchOptions) {\n-        return phoneNumberAsyncClient.createSearch(searchOptions).block();\n+    public CreateReservationResponse createReservation(CreateReservationOptions reservationOptions) {\n+        return phoneNumberAsyncClient.createReservation(reservationOptions).block();\n     }\n \n     /**\n-     * Create a phone number search.\n+     * Create a phone number reservation.\n      *\n-     * @param searchOptions A {@link CreateSearchOptions} with the search options\n+     * @param reservationOptions A {@link CreateReservationOptions} with the reservation options\n      * @param context A {@link Context} representing the request context.\n      * @return A {@link Response} whose {@link Response#getValue()} value returns\n-     * a {@link CreateSearchResponse} representing the search.\n+     * a {@link CreateReservationResponse} representing the reservation.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Response<CreateSearchResponse> createSearchWithResponse(CreateSearchOptions searchOptions, Context context) {\n-        return phoneNumberAsyncClient.createSearchWithResponse(searchOptions, context).block();\n+    public Response<CreateReservationResponse> createReservationWithResponse(\n+        CreateReservationOptions reservationOptions, Context context) {\n+        return phoneNumberAsyncClient.createReservationWithResponse(reservationOptions, context).block();\n     }\n \n     /**\n-     * Gets the list of all searches\n+     * Gets the list of all reservationes\n      *\n-     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing searches.\n+     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservationes.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedIterable<PhoneNumberEntity> listAllSearches() {\n-        return new PagedIterable<>(phoneNumberAsyncClient.listAllSearches());\n+    public PagedIterable<PhoneNumberEntity> listAllReservations() {\n+        return new PagedIterable<>(phoneNumberAsyncClient.listAllReservations());\n     }\n \n     /**\n-     * Gets the list of all searches\n+     * Gets the list of all reservationes\n      *\n      * @param context A {@link Context} representing the request context.\n-     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing searches.\n+     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservationes.", "originalCommit": "8370590fedb1b1902804c871f08789b9e5b8052d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d66060851676cb1a6170a45f48affeb6cbd6412", "chunk": "diff --git a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\nindex 183002f4f36..09bc5ae8eeb 100644\n--- a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\n+++ b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberClient.java\n\n@@ -437,9 +437,9 @@ public final class PhoneNumberClient {\n     }\n \n     /**\n-     * Gets the list of all reservationes\n+     * Gets the list of all reservations\n      *\n-     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservationes.\n+     * @return A {@link PagedIterable} of {@link PhoneNumberEntity} instances representing reservations.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n     public PagedIterable<PhoneNumberEntity> listAllReservations() {\n"}}, {"oid": "2d66060851676cb1a6170a45f48affeb6cbd6412", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2d66060851676cb1a6170a45f48affeb6cbd6412", "message": "fixing typo un reservations", "committedDate": "2020-11-13T18:35:27Z", "type": "commit"}]}