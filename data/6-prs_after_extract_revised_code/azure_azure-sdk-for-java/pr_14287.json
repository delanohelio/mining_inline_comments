{"pr_number": 14287, "pr_title": "Added support to lease shares", "pr_createdAt": "2020-08-19T22:29:19Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14287", "timeline": [{"oid": "03f77acd51d5b6937681acceaba215a4ea4e7c5c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/03f77acd51d5b6937681acceaba215a4ea4e7c5c", "message": "Added ability to create share client for lease", "committedDate": "2020-08-18T16:34:18Z", "type": "commit"}, {"oid": "08868470780ff5d5b64fd40497a905b59ca35328", "url": "https://github.com/Azure/azure-sdk-for-java/commit/08868470780ff5d5b64fd40497a905b59ca35328", "message": "Added code that touch leases for share client", "committedDate": "2020-08-18T22:56:17Z", "type": "commit"}, {"oid": "e1e14e64c45c52826e4be119610213d830b628a3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e1e14e64c45c52826e4be119610213d830b628a3", "message": "Added tests for lease APIs", "committedDate": "2020-08-19T00:47:04Z", "type": "commit"}, {"oid": "6e3ac6d65fe4efda68ce3a6c0eafb01d2ee2efe8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6e3ac6d65fe4efda68ce3a6c0eafb01d2ee2efe8", "message": "Added code for lease share and rerecorded tests", "committedDate": "2020-08-19T17:35:17Z", "type": "commit"}, {"oid": "819c4a7228408df4e805a31ad0fe052601aef30b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/819c4a7228408df4e805a31ad0fe052601aef30b", "message": "Added snapshot tests", "committedDate": "2020-08-19T20:09:01Z", "type": "commit"}, {"oid": "ed8debb2430f42690810f11fdc278ef5fcb4e494", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ed8debb2430f42690810f11fdc278ef5fcb4e494", "message": "Added share tests", "committedDate": "2020-08-19T22:11:03Z", "type": "commit"}, {"oid": "f8212ecd00a63904cd3e891c7201dfc0fe07da46", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f8212ecd00a63904cd3e891c7201dfc0fe07da46", "message": "Added last few code snippets", "committedDate": "2020-08-19T22:16:54Z", "type": "commit"}, {"oid": "4b3b76ec4d73b08fe594fcbb438fdd00ce28833a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4b3b76ec4d73b08fe594fcbb438fdd00ce28833a", "message": "Merge branch 'feature/storage/stg74' into storage/shareLease", "committedDate": "2020-08-19T22:27:47Z", "type": "commit"}, {"oid": "04898c9a2ab1e2c2a82f3fa5dcd88c1e90628962", "url": "https://github.com/Azure/azure-sdk-for-java/commit/04898c9a2ab1e2c2a82f3fa5dcd88c1e90628962", "message": "Added changelog and java 8 map", "committedDate": "2020-08-19T22:41:15Z", "type": "commit"}, {"oid": "dbbf311bc220b8687cc99ae81218fd846d8ea493", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dbbf311bc220b8687cc99ae81218fd846d8ea493", "message": "Fixed build", "committedDate": "2020-08-19T23:23:36Z", "type": "commit"}, {"oid": "f925352643f429db80e476a9cfd4b52a87df68f2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f925352643f429db80e476a9cfd4b52a87df68f2", "message": "Analyze", "committedDate": "2020-08-20T00:05:22Z", "type": "commit"}, {"oid": "1c4a1f928d875eb06d7d3358b8b83002ede8a759", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1c4a1f928d875eb06d7d3358b8b83002ede8a759", "message": "long line", "committedDate": "2020-08-20T00:45:24Z", "type": "commit"}, {"oid": "be9b4d9f9eaecacc9caffa2e33f2e86ca8025e3f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/be9b4d9f9eaecacc9caffa2e33f2e86ca8025e3f", "message": "Merged with latest swagger", "committedDate": "2020-08-20T03:05:45Z", "type": "commit"}, {"oid": "5c547dbd681d590e011be12a0c63eace3297e267", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5c547dbd681d590e011be12a0c63eace3297e267", "message": "Fix test failures", "committedDate": "2020-08-20T03:22:11Z", "type": "commit"}, {"oid": "3117a7cb35f1b04d48a6d4f92241da8babec20d7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3117a7cb35f1b04d48a6d4f92241da8babec20d7", "message": "Fix get access policy", "committedDate": "2020-08-20T15:26:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA4NDU3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r474084571", "bodyText": "TODO: Add tests for getSnapshot client", "author": "gapra-msft", "createdAt": "2020-08-20T15:43:48Z", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareClient.java", "diffHunk": "@@ -107,6 +114,17 @@ public ShareFileClient getFileClient(String filePath) {\n         return new ShareFileClient(client.getFileClient(filePath));\n     }\n \n+\n+    /**\n+     * Creates a new {@link ShareAsyncClient} linked to the {@code snapshot} of this share resource.\n+     *\n+     * @param snapshot the identifier for a specific snapshot of this share\n+     * @return a {@link ShareClient} used to interact with the specific snapshot.\n+     */\n+    public ShareClient getSnapshotClient(String snapshot) {", "originalCommit": "3117a7cb35f1b04d48a6d4f92241da8babec20d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA4ODM2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r474088367", "bodyText": "Change this to ShareRequestConditions", "author": "gapra-msft", "createdAt": "2020-08-20T15:49:28Z", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/options/ShareDeleteOptions.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.share.options;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.storage.file.share.models.DeleteSnapshotsOptionType;\n+\n+/**\n+ * Extended options that may be passed when deleting a share.\n+ */\n+@Fluent\n+public class ShareDeleteOptions {\n+\n+    private DeleteSnapshotsOptionType deleteSnapshotsOptions;\n+    private String leaseId;\n+\n+    /**\n+     * @return The lease id that the share must match.\n+     */\n+    public String getLeaseId() {", "originalCommit": "3117a7cb35f1b04d48a6d4f92241da8babec20d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "384d154fd02d32af90bb97606d8e2d8753459e21", "chunk": "diff --git a/sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/options/ShareDeleteOptions.java b/sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/options/ShareDeleteOptions.java\nindex 5c1e75accad..d11265f6df9 100644\n--- a/sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/options/ShareDeleteOptions.java\n+++ b/sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/options/ShareDeleteOptions.java\n\n@@ -5,6 +5,7 @@ package com.azure.storage.file.share.options;\n \n import com.azure.core.annotation.Fluent;\n import com.azure.storage.file.share.models.DeleteSnapshotsOptionType;\n+import com.azure.storage.file.share.models.ShareRequestConditions;\n \n /**\n  * Extended options that may be passed when deleting a share.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA5NzQ4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r474097480", "bodyText": "was that a bug ?", "author": "kasobol-msft", "createdAt": "2020-08-20T16:03:13Z", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "diffHunk": "@@ -102,7 +110,7 @@\n     public String getShareUrl() {\n         StringBuilder shareUrlString = new StringBuilder(azureFileStorageClient.getUrl()).append(\"/\").append(shareName);\n         if (snapshot != null) {\n-            shareUrlString.append(\"?snapshot=\").append(snapshot);\n+            shareUrlString.append(\"?sharesnapshot=\").append(snapshot);", "originalCommit": "3117a7cb35f1b04d48a6d4f92241da8babec20d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMjc0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r474102744", "bodyText": "Yeah, I need to add it to the changelog", "author": "gapra-msft", "createdAt": "2020-08-20T16:11:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA5NzQ4MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "384d154fd02d32af90bb97606d8e2d8753459e21", "url": "https://github.com/Azure/azure-sdk-for-java/commit/384d154fd02d32af90bb97606d8e2d8753459e21", "message": "Added ShareRequestConditions", "committedDate": "2020-08-20T16:35:48Z", "type": "commit"}, {"oid": "ad277fd24104b6ac1fac5d266252783fa3be36a0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ad277fd24104b6ac1fac5d266252783fa3be36a0", "message": "Added one more test", "committedDate": "2020-08-20T16:45:08Z", "type": "commit"}, {"oid": "6d51f0844c33a9c59482ca1629e0a6ec17173882", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6d51f0844c33a9c59482ca1629e0a6ec17173882", "message": "Added analyze fixes", "committedDate": "2020-08-20T17:30:26Z", "type": "commit"}, {"oid": "fac9132dc5e992a74a7dda333cd88b17a24bfae2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fac9132dc5e992a74a7dda333cd88b17a24bfae2", "message": "analyze", "committedDate": "2020-08-20T21:23:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNDU0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r481434548", "bodyText": "I think this should call the max public overload rather than the internal one", "author": "rickle-msft", "createdAt": "2020-09-01T21:12:34Z", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "diffHunk": "@@ -415,16 +462,45 @@ public ShareFileAsyncClient getFileClient(String filePath) {\n      */\n     public Mono<Response<ShareProperties>> getPropertiesWithResponse() {\n         try {\n-            return withContext(context -> getPropertiesWithResponse(context));\n+            return withContext(context -> getPropertiesWithResponse(new ShareGetPropertiesOptions(), context));", "originalCommit": "fac9132dc5e992a74a7dda333cd88b17a24bfae2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3NjM5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r482176393", "bodyText": "fixed", "author": "gapra-msft", "createdAt": "2020-09-02T15:47:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNDU0OA=="}], "type": "inlineReview", "revised_code": {"commit": "5682838094570428f6b776e819c01ba00ac85970", "chunk": "diff --git a/sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java b/sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java\nindex 2c054d57edf..803b8cdef46 100644\n--- a/sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java\n+++ b/sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java\n\n@@ -462,14 +462,14 @@ public class ShareAsyncClient {\n      */\n     public Mono<Response<ShareProperties>> getPropertiesWithResponse() {\n         try {\n-            return withContext(context -> getPropertiesWithResponse(new ShareGetPropertiesOptions(), context));\n+            return getPropertiesWithResponse(new ShareGetPropertiesOptions());\n         } catch (RuntimeException ex) {\n             return monoError(logger, ex);\n         }\n     }\n \n     /**\n-     * Retrieves the properties of the share, these include the metadata associated to it and the quota that the share\n+     * Retrieves the properties of the share, these include the metadata associated with it and the quota that the share\n      * is restricted to.\n      *\n      * <p><strong>Code Samples</strong></p>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNTM2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r481435368", "bodyText": "\"metadata associated with it\"", "author": "rickle-msft", "createdAt": "2020-09-01T21:14:06Z", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java", "diffHunk": "@@ -415,16 +462,45 @@ public ShareFileAsyncClient getFileClient(String filePath) {\n      */\n     public Mono<Response<ShareProperties>> getPropertiesWithResponse() {\n         try {\n-            return withContext(context -> getPropertiesWithResponse(context));\n+            return withContext(context -> getPropertiesWithResponse(new ShareGetPropertiesOptions(), context));\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Retrieves the properties of the share, these include the metadata associated to it and the quota that the share", "originalCommit": "fac9132dc5e992a74a7dda333cd88b17a24bfae2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3NjEwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r482176100", "bodyText": "fixed", "author": "gapra-msft", "createdAt": "2020-09-02T15:47:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNTM2OA=="}], "type": "inlineReview", "revised_code": {"commit": "5682838094570428f6b776e819c01ba00ac85970", "chunk": "diff --git a/sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java b/sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java\nindex 2c054d57edf..803b8cdef46 100644\n--- a/sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java\n+++ b/sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/ShareAsyncClient.java\n\n@@ -462,14 +462,14 @@ public class ShareAsyncClient {\n      */\n     public Mono<Response<ShareProperties>> getPropertiesWithResponse() {\n         try {\n-            return withContext(context -> getPropertiesWithResponse(new ShareGetPropertiesOptions(), context));\n+            return getPropertiesWithResponse(new ShareGetPropertiesOptions());\n         } catch (RuntimeException ex) {\n             return monoError(logger, ex);\n         }\n     }\n \n     /**\n-     * Retrieves the properties of the share, these include the metadata associated to it and the quota that the share\n+     * Retrieves the properties of the share, these include the metadata associated with it and the quota that the share\n      * is restricted to.\n      *\n      * <p><strong>Code Samples</strong></p>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2ODM1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r481468354", "bodyText": "Do we need to make it an unmodifiableMap in both the setter and getter?", "author": "rickle-msft", "createdAt": "2020-09-01T22:31:31Z", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/options/ShareSetMetadataOptions.java", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.share.options;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.storage.file.share.models.ShareRequestConditions;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+/**\n+ * Extended options that may be passed when setting metadata on a share.\n+ */\n+@Fluent\n+public class ShareSetMetadataOptions {\n+\n+    private Map<String, String> metadata;\n+    private ShareRequestConditions requestConditions;\n+\n+    /**\n+     * @return Metadata to set on the share, if null is passed the metadata for the share is cleared.\n+     */\n+    public Map<String, String> getMetadata() {\n+        return metadata == null ? null : Collections.unmodifiableMap(metadata);", "originalCommit": "fac9132dc5e992a74a7dda333cd88b17a24bfae2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2ODY1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r481468655", "bodyText": "I think yes cause otherwise a user could get the map and then modify it and theyd be modifying the map we care about", "author": "gapra-msft", "createdAt": "2020-09-01T22:32:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2ODM1NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3NTg5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r481475896", "bodyText": "This is only true of files, right? Shares will respect the break period", "author": "rickle-msft", "createdAt": "2020-09-01T22:53:57Z", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/specialized/ShareLeaseAsyncClient.java", "diffHunk": "@@ -193,17 +242,46 @@ public String getLeaseId() {\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<Response<Void>> breakLeaseWithResponse() {\n         try {\n-            return withContext(this::breakLeaseWithResponse);\n+            return breakLeaseWithResponse(new ShareBreakLeaseOptions());\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Breaks the previously acquired lease, if it exists. Leases will break immediately.", "originalCommit": "fac9132dc5e992a74a7dda333cd88b17a24bfae2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3NTc2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r482175760", "bodyText": "yep, broke it up into behavior for shares and files.", "author": "gapra-msft", "createdAt": "2020-09-02T15:46:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3NTg5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5682838094570428f6b776e819c01ba00ac85970", "chunk": "diff --git a/sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/specialized/ShareLeaseAsyncClient.java b/sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/specialized/ShareLeaseAsyncClient.java\nindex bb8cce3a3be..1ed19390dd5 100644\n--- a/sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/specialized/ShareLeaseAsyncClient.java\n+++ b/sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/specialized/ShareLeaseAsyncClient.java\n\n@@ -249,7 +251,9 @@ public final class ShareLeaseAsyncClient {\n     }\n \n     /**\n-     * Breaks the previously acquired lease, if it exists. Leases will break immediately.\n+     * Breaks the previously acquired lease, if it exists.\n+     * <p>For files, leases will break immediately.</p>\n+     * <p>For shares, leases will break after the specified duration.</p>\n      *\n      * <p><strong>Code Samples</strong></p>\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3NjU3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r481476571", "bodyText": "Should this be an UnsupportedOperationException?", "author": "rickle-msft", "createdAt": "2020-09-01T22:55:51Z", "path": "sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/specialized/ShareLeaseAsyncClient.java", "diffHunk": "@@ -246,9 +324,62 @@ public String getLeaseId() {\n \n     Mono<Response<String>> changeLeaseWithResponse(String proposedId, Context context) {\n         context = context == null ? Context.NONE : context;\n-        return this.client.files().changeLeaseWithRestResponseAsync(null, null, this.leaseId, null, proposedId,\n-            null, context.addData(AZ_TRACING_NAMESPACE_KEY, STORAGE_TRACING_NAMESPACE_VALUE))\n-            .map(rb -> new SimpleResponse<>(rb, rb.getDeserializedHeaders().getLeaseId()));\n+        if (this.isShareFile) {\n+            return this.client.files().changeLeaseWithRestResponseAsync(null, null, this.leaseId, null, proposedId,\n+                null, context.addData(AZ_TRACING_NAMESPACE_KEY, STORAGE_TRACING_NAMESPACE_VALUE))\n+                .map(rb -> new SimpleResponse<>(rb, rb.getDeserializedHeaders().getLeaseId()));\n+        } else {\n+            return this.client.shares().changeLeaseWithRestResponseAsync(null, this.leaseId, null, proposedId, null,\n+                null, context.addData(AZ_TRACING_NAMESPACE_KEY, STORAGE_TRACING_NAMESPACE_VALUE))\n+                .map(rb -> new SimpleResponse<>(rb, rb.getDeserializedHeaders().getLeaseId()));\n+        }\n+    }\n+\n+    /**\n+     * Renews the previously acquired lease on a share.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.renewLease}\n+     *\n+     * @return A reactive response containing the renewed lease ID.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<String> renewLease() {\n+        try {\n+            return renewLeaseWithResponse().flatMap(FluxUtil::toMono);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    /**\n+     * Renews the previously acquired lease on a share.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.renewLeaseWithResponse}\n+     *\n+     * @return A reactive response containing the renewed lease ID.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<String>> renewLeaseWithResponse() {\n+        try {\n+            return withContext(this::renewLeaseWithResponse);\n+        } catch (RuntimeException ex) {\n+            return monoError(logger, ex);\n+        }\n+    }\n+\n+    Mono<Response<String>> renewLeaseWithResponse(Context context) {\n+        context = context == null ? Context.NONE : context;\n+        if (this.isShareFile) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"Cannot renew a lease on a share file.\"));", "originalCommit": "fac9132dc5e992a74a7dda333cd88b17a24bfae2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE3NDI0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14287#discussion_r482174249", "bodyText": "Yeah youre right. I will change this", "author": "gapra-msft", "createdAt": "2020-09-02T15:44:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3NjU3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5682838094570428f6b776e819c01ba00ac85970", "chunk": "diff --git a/sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/specialized/ShareLeaseAsyncClient.java b/sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/specialized/ShareLeaseAsyncClient.java\nindex bb8cce3a3be..1ed19390dd5 100644\n--- a/sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/specialized/ShareLeaseAsyncClient.java\n+++ b/sdk/storage/azure-storage-file-share/src/main/java/com/azure/storage/file/share/specialized/ShareLeaseAsyncClient.java\n\n@@ -374,7 +378,8 @@ public final class ShareLeaseAsyncClient {\n     Mono<Response<String>> renewLeaseWithResponse(Context context) {\n         context = context == null ? Context.NONE : context;\n         if (this.isShareFile) {\n-            throw logger.logExceptionAsError(new IllegalArgumentException(\"Cannot renew a lease on a share file.\"));\n+            throw logger.logExceptionAsError(new UnsupportedOperationException(\n+                \"Cannot renew a lease on a share file.\"));\n         } else {\n             return this.client.shares().renewLeaseWithRestResponseAsync(null, this.leaseId, null,\n                 null, null, context.addData(AZ_TRACING_NAMESPACE_KEY, STORAGE_TRACING_NAMESPACE_VALUE))\n"}}, {"oid": "5682838094570428f6b776e819c01ba00ac85970", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5682838094570428f6b776e819c01ba00ac85970", "message": "comments from review", "committedDate": "2020-09-02T15:47:43Z", "type": "commit"}]}