{"pr_number": 7162, "pr_title": "Text Analytics doc snippets async client", "pr_createdAt": "2020-01-06T23:35:47Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/7162", "timeline": [{"oid": "32dd65ef253546290c209f15776df87fa2c73def", "url": "https://github.com/Azure/azure-sdk-for-java/commit/32dd65ef253546290c209f15776df87fa2c73def", "message": "adding code snippets for async methods", "committedDate": "2020-01-06T23:34:20Z", "type": "commit"}, {"oid": "7a2b8aa7c41f4d5741cf82f5a01d14d199368f10", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7a2b8aa7c41f4d5741cf82f5a01d14d199368f10", "message": "remove javadoc suppression", "committedDate": "2020-01-06T23:34:20Z", "type": "commit"}, {"oid": "d4918160ab6116dd217ff63d8faf6bbee7569071", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d4918160ab6116dd217ff63d8faf6bbee7569071", "message": "make snippets shorter", "committedDate": "2020-01-06T23:49:06Z", "type": "commit"}, {"oid": "d4918160ab6116dd217ff63d8faf6bbee7569071", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d4918160ab6116dd217ff63d8faf6bbee7569071", "message": "make snippets shorter", "committedDate": "2020-01-06T23:49:06Z", "type": "forcePushed"}, {"oid": "912a658c8e26af675d11a34faff78d835810fdc1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/912a658c8e26af675d11a34faff78d835810fdc1", "message": "extra lines", "committedDate": "2020-01-06T23:52:47Z", "type": "commit"}, {"oid": "690f4f215b87cfd0daee58bbb9638e198fde94b2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/690f4f215b87cfd0daee58bbb9638e198fde94b2", "message": "skip logging pii", "committedDate": "2020-01-07T00:19:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NjE1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363576155", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                System.out.printf(\"Another detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n          \n          \n            \n                                System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",", "author": "mssfang", "createdAt": "2020-01-07T03:13:01Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Another detected language: %s, ISO 6391 name: %s, score: %s.%n\",", "originalCommit": "690f4f215b87cfd0daee58bbb9638e198fde94b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "201698c063761925a34241bc9e366b90b20f49a1", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\nindex fd2da0ccb40..0bf48cb8ace 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\n\n@@ -45,6 +45,7 @@ public class TextAnalyticsAsyncClientJavaDocCodeSnippets {\n     }\n \n     // Languages\n+\n     /**\n      * Code snippet for detecting Language\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NjIxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363576211", "bodyText": "System.out.printf(\"Document ID: %s%n\", detectLanguageResult.getId());", "author": "mssfang", "createdAt": "2020-01-07T03:13:21Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {", "originalCommit": "690f4f215b87cfd0daee58bbb9638e198fde94b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU5MjkxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363592915", "bodyText": "we need erroneous documents as well. Otherwise, if detectLanguageResult is error, detectLanguageResult.getDetectedLanguages() will have NPE\n            // Erroneous document\n            if (detectLanguageResult.isError()) {\n                System.out.printf(\"Cannot detect language. Error: %s%n\", detectLanguageResult.getError().getMessage());\n                continue;\n            }", "author": "mssfang", "createdAt": "2020-01-07T05:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NjIxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg4MTc3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363881779", "bodyText": "These are code snippets that would be inserted in the method java docs. I think we should keep them shorter and to the point, that shows how to use the method. We don't need to handle all the fail through scenarios here, samples should be a good place to do that. What do you think?", "author": "samvaity", "createdAt": "2020-01-07T18:16:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NjIxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5NDg3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363894873", "bodyText": "Ya. Let's keep this codesnippet shorter.", "author": "mssfang", "createdAt": "2020-01-07T18:47:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NjIxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "201698c063761925a34241bc9e366b90b20f49a1", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\nindex fd2da0ccb40..0bf48cb8ace 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\n\n@@ -45,6 +45,7 @@ public class TextAnalyticsAsyncClientJavaDocCodeSnippets {\n     }\n \n     // Languages\n+\n     /**\n      * Code snippet for detecting Language\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NjU4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363576580", "bodyText": "since it only shows detectLangues list, the message should need to update as well.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n          \n          \n            \n                        System.out.printf(\"Batch statistics, document count: %s,\"", "author": "mssfang", "createdAt": "2020-01-07T03:15:47Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"", "originalCommit": "690f4f215b87cfd0daee58bbb9638e198fde94b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "201698c063761925a34241bc9e366b90b20f49a1", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\nindex fd2da0ccb40..0bf48cb8ace 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\n\n@@ -45,6 +45,7 @@ public class TextAnalyticsAsyncClientJavaDocCodeSnippets {\n     }\n \n     // Languages\n+\n     /**\n      * Code snippet for detecting Language\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU3NjYyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363576624", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            batchStatistics.getTransactionCount(),\n          \n          \n            \n                            batchStatistics.getDocumentCount(),", "author": "mssfang", "createdAt": "2020-01-07T03:16:05Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),", "originalCommit": "690f4f215b87cfd0daee58bbb9638e198fde94b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "201698c063761925a34241bc9e366b90b20f49a1", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\nindex fd2da0ccb40..0bf48cb8ace 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\n\n@@ -45,6 +45,7 @@ public class TextAnalyticsAsyncClientJavaDocCodeSnippets {\n     }\n \n     // Languages\n+\n     /**\n      * Code snippet for detecting Language\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4MTg3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363581870", "bodyText": "entity.getSubtype() == null || entity.getSubtype().isEmpty() ? \"N/A\" : entity.getSubtype(),", "author": "mssfang", "createdAt": "2020-01-07T03:50:43Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Another detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+        final List<String> listInputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguagesWithResponse(listInputs, \"US\").subscribe(response -> {\n+            DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics,transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+        List<DetectLanguageInput> detectLanguageInputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+        textAnalyticsAsyncClient.detectBatchLanguages(detectLanguageInputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+        List<DetectLanguageInput> detectLanguageInputs1 = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+\n+        // Request options: show statistics and model version\n+        final TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setShowStatistics(true);\n+\n+        textAnalyticsAsyncClient.detectBatchLanguagesWithResponse(detectLanguageInputs1, requestOptions)\n+            .subscribe(response -> {\n+                final DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+                System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+                // Batch statistics\n+                final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+                System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                    batchStatistics.getTransactionCount(),\n+                    batchStatistics.getValidDocumentCount());\n+\n+                for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                    for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                        System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                            detectedLanguage.getName(),\n+                            detectedLanguage.getIso6391Name(),\n+                            detectedLanguage.getScore());\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+    }\n+\n+    // Entity\n+    /**\n+     * Code snippet for recognizing entities\n+     */\n+    public void recognizeEntitiesCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+        String inputText = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntities(inputText).subscribe(recognizeEntitiesResult -> {\n+            for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                System.out.printf(\n+                    \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                    entity.getText(),\n+                    entity.getType(),\n+                    entity.getSubtype(),", "originalCommit": "690f4f215b87cfd0daee58bbb9638e198fde94b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4MjA3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363582071", "bodyText": "missing  entity.getLength()", "author": "mssfang", "createdAt": "2020-01-07T03:51:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4MTg3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg4MjQwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363882405", "bodyText": "trying to keep the code snippets shorter. Length probably is something that can be skipped here.", "author": "samvaity", "createdAt": "2020-01-07T18:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4MTg3MA=="}], "type": "inlineReview", "revised_code": {"commit": "201698c063761925a34241bc9e366b90b20f49a1", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\nindex fd2da0ccb40..0bf48cb8ace 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\n\n@@ -45,6 +45,7 @@ public class TextAnalyticsAsyncClientJavaDocCodeSnippets {\n     }\n \n     // Languages\n+\n     /**\n      * Code snippet for detecting Language\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4NDMwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363584304", "bodyText": "inputs would be too general, textInputs could be a better one", "author": "mssfang", "createdAt": "2020-01-07T04:07:17Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Another detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+        final List<String> listInputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguagesWithResponse(listInputs, \"US\").subscribe(response -> {\n+            DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics,transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+        List<DetectLanguageInput> detectLanguageInputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+        textAnalyticsAsyncClient.detectBatchLanguages(detectLanguageInputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+        List<DetectLanguageInput> detectLanguageInputs1 = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+\n+        // Request options: show statistics and model version\n+        final TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setShowStatistics(true);\n+\n+        textAnalyticsAsyncClient.detectBatchLanguagesWithResponse(detectLanguageInputs1, requestOptions)\n+            .subscribe(response -> {\n+                final DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+                System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+                // Batch statistics\n+                final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+                System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                    batchStatistics.getTransactionCount(),\n+                    batchStatistics.getValidDocumentCount());\n+\n+                for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                    for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                        System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                            detectedLanguage.getName(),\n+                            detectedLanguage.getIso6391Name(),\n+                            detectedLanguage.getScore());\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+    }\n+\n+    // Entity\n+    /**\n+     * Code snippet for recognizing entities\n+     */\n+    public void recognizeEntitiesCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+        String inputText = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntities(inputText).subscribe(recognizeEntitiesResult -> {\n+            for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                System.out.printf(\n+                    \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                    entity.getText(),\n+                    entity.getType(),\n+                    entity.getSubtype(),\n+                    entity.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#string-string\n+        String inputText1 = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntitiesWithResponse(inputText1, \"en\")\n+            .subscribe(recognizeEntitiesResult -> {\n+                for (NamedEntity entity : recognizeEntitiesResult.getValue().getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getSubtype(),\n+                        entity.getScore());\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#List\n+        List<String> inputs = Arrays.asList(", "originalCommit": "690f4f215b87cfd0daee58bbb9638e198fde94b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "201698c063761925a34241bc9e366b90b20f49a1", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\nindex fd2da0ccb40..0bf48cb8ace 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\n\n@@ -45,6 +45,7 @@ public class TextAnalyticsAsyncClientJavaDocCodeSnippets {\n     }\n \n     // Languages\n+\n     /**\n      * Code snippet for detecting Language\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4NzM4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363587381", "bodyText": "input text is not PII related", "author": "mssfang", "createdAt": "2020-01-07T04:29:18Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(inputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, document count: %s, erroneous document count: %s,\"\n+                    + \" transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Another detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+        final List<String> listInputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguagesWithResponse(listInputs, \"US\").subscribe(response -> {\n+            DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics,transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+        List<DetectLanguageInput> detectLanguageInputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+        textAnalyticsAsyncClient.detectBatchLanguages(detectLanguageInputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+        List<DetectLanguageInput> detectLanguageInputs1 = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+\n+        // Request options: show statistics and model version\n+        final TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setShowStatistics(true);\n+\n+        textAnalyticsAsyncClient.detectBatchLanguagesWithResponse(detectLanguageInputs1, requestOptions)\n+            .subscribe(response -> {\n+                final DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+                System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+                // Batch statistics\n+                final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+                System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                    batchStatistics.getTransactionCount(),\n+                    batchStatistics.getValidDocumentCount());\n+\n+                for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                    for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                        System.out.printf(\"Other detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                            detectedLanguage.getName(),\n+                            detectedLanguage.getIso6391Name(),\n+                            detectedLanguage.getScore());\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+    }\n+\n+    // Entity\n+    /**\n+     * Code snippet for recognizing entities\n+     */\n+    public void recognizeEntitiesCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+        String inputText = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntities(inputText).subscribe(recognizeEntitiesResult -> {\n+            for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                System.out.printf(\n+                    \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                    entity.getText(),\n+                    entity.getType(),\n+                    entity.getSubtype(),\n+                    entity.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#string-string\n+        String inputText1 = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntitiesWithResponse(inputText1, \"en\")\n+            .subscribe(recognizeEntitiesResult -> {\n+                for (NamedEntity entity : recognizeEntitiesResult.getValue().getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getSubtype(),\n+                        entity.getScore());\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#List\n+        List<String> inputs = Arrays.asList(\n+            \"I had a wonderful trip to Seattle last week.\", \"I work at Microsoft.\");\n+\n+        textAnalyticsAsyncClient.recognizeEntities(inputs).subscribe(recognizeEntitiesResults -> {\n+            System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = recognizeEntitiesResults.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (RecognizeEntitiesResult recognizeEntitiesResult : recognizeEntitiesResults) {\n+                for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getSubtype(),\n+                        entity.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#List-String\n+        List<String> inputs1 = Arrays.asList(\n+            \"I had a wonderful trip to Seattle last week.\", \"I work at Microsoft.\");\n+\n+        textAnalyticsAsyncClient.recognizeEntitiesWithResponse(inputs1, \"en\").subscribe(response -> {\n+            DocumentResultCollection<RecognizeEntitiesResult> recognizeEntitiesResults = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = recognizeEntitiesResults.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (RecognizeEntitiesResult recognizeEntitiesResult : recognizeEntitiesResults) {\n+                for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getSubtype(),\n+                        entity.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#List-String\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeBatchEntities#List\n+        List<TextDocumentInput> textDocumentInputs = Arrays.asList(\n+            new TextDocumentInput(\"0\", \"I had a wonderful trip to Seattle last week.\"),\n+            new TextDocumentInput(\"1\", \"I work at Microsoft.\"));\n+\n+        textAnalyticsAsyncClient.recognizeBatchEntities(textDocumentInputs).subscribe(recognizeEntitiesResults -> {\n+            System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = recognizeEntitiesResults.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (RecognizeEntitiesResult recognizeEntitiesResult : recognizeEntitiesResults) {\n+                for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getSubtype(),\n+                        entity.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeBatchEntities#List\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeBatchEntitiesWithResponse#List-TextAnalyticsRequestOptions\n+        List<TextDocumentInput> textDocumentInputs1 = Arrays.asList(\n+            new TextDocumentInput(\"0\", \"I had a wonderful trip to Seattle last week.\"),\n+            new TextDocumentInput(\"1\", \"I work at Microsoft.\"));\n+\n+        // Request options: show statistics and model version\n+        final TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setShowStatistics(true);\n+\n+        textAnalyticsAsyncClient.recognizeBatchEntitiesWithResponse(textDocumentInputs1, requestOptions)\n+            .subscribe(response -> {\n+                final DocumentResultCollection<RecognizeEntitiesResult> recognizeEntitiesResults = response.getValue();\n+                System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());\n+\n+                // Batch statistics\n+                final TextDocumentBatchStatistics batchStatistics = recognizeEntitiesResults.getStatistics();\n+                System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                    batchStatistics.getTransactionCount(),\n+                    batchStatistics.getValidDocumentCount());\n+\n+                for (RecognizeEntitiesResult recognizeEntitiesResult : recognizeEntitiesResults) {\n+                    for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                        System.out.printf(\n+                            \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                            entity.getText(),\n+                            entity.getType(),\n+                            entity.getSubtype(),\n+                            entity.getScore());\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeBatchEntitiesWithResponse#List-TextAnalyticsRequestOptions\n+    }\n+\n+    // Pii Entity\n+    /**\n+     * Code snippet for recognizing entities\n+     */\n+    public void recognizePiiEntitiesCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntities#string\n+        String inputText = \"My SSN is 555-55-5555\";\n+        textAnalyticsAsyncClient.recognizePiiEntities(inputText).subscribe(recognizeEntitiesResult -> {\n+            for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                System.out.printf(\n+                    \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                    entity.getText(),\n+                    entity.getType(),\n+                    entity.getSubtype(),\n+                    entity.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntities#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntitiesWithResponse#string-string\n+        String inputText1 = \"My SSN is 555-55-5555\";\n+        textAnalyticsAsyncClient.recognizePiiEntitiesWithResponse(inputText1, \"en\")\n+            .subscribe(recognizeEntitiesResult -> {\n+                for (NamedEntity entity : recognizeEntitiesResult.getValue().getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Subtype: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getSubtype(),\n+                        entity.getScore());\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntitiesWithResponse#string-string\n+\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizePiiEntities#list-string\n+        List<String> inputs = Arrays.asList(\n+            \"I had a wonderful trip to Seattle last week.\", \"I work at Microsoft.\");", "originalCommit": "690f4f215b87cfd0daee58bbb9638e198fde94b2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "201698c063761925a34241bc9e366b90b20f49a1", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\nindex fd2da0ccb40..0bf48cb8ace 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\n\n@@ -45,6 +45,7 @@ public class TextAnalyticsAsyncClientJavaDocCodeSnippets {\n     }\n \n     // Languages\n+\n     /**\n      * Code snippet for detecting Language\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxMTM2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363911364", "bodyText": "let's exclude the data. What do you think?", "author": "mssfang", "createdAt": "2020-01-07T19:27:32Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,892 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for detecting Language\n+     */\n+    public void detectLanguageCodeSnippets() {\n+        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> inputs = Arrays.asList(", "originalCommit": "690f4f215b87cfd0daee58bbb9638e198fde94b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkyMjI0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363922249", "bodyText": "It needs to be compile-able, so we will have to provide valid inputs.", "author": "samvaity", "createdAt": "2020-01-07T19:52:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxMTM2NA=="}], "type": "inlineReview", "revised_code": {"commit": "201698c063761925a34241bc9e366b90b20f49a1", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\nindex fd2da0ccb40..0bf48cb8ace 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\n\n@@ -45,6 +45,7 @@ public class TextAnalyticsAsyncClientJavaDocCodeSnippets {\n     }\n \n     // Languages\n+\n     /**\n      * Code snippet for detecting Language\n      */\n"}}, {"oid": "201698c063761925a34241bc9e366b90b20f49a1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/201698c063761925a34241bc9e366b90b20f49a1", "message": "update feedback", "committedDate": "2020-01-07T21:43:09Z", "type": "commit"}, {"oid": "201698c063761925a34241bc9e366b90b20f49a1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/201698c063761925a34241bc9e366b90b20f49a1", "message": "update feedback", "committedDate": "2020-01-07T21:43:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4ODc5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363988795", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Code snippet for detecting Language\n          \n          \n            \n                 * Code snippet for {@link TextAnalyticsAsyncClient #detectLanguage(String)}", "author": "mssfang", "createdAt": "2020-01-07T22:45:40Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +43,868 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+\n+    /**\n+     * Code snippet for detecting Language", "originalCommit": "201698c063761925a34241bc9e366b90b20f49a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4ODk4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363988985", "bodyText": "And same pattern for rest of the file", "author": "mssfang", "createdAt": "2020-01-07T22:46:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4ODc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4OTEyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363989120", "bodyText": "This block stands for all overloads of detect language endpoint so keeping it generic.", "author": "samvaity", "createdAt": "2020-01-07T22:46:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4ODc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4OTc0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r363989747", "bodyText": "we should keep each BEGIN and END for a separate method. So It is easier to maintain. You could refer to AzConfig or Storage", "author": "mssfang", "createdAt": "2020-01-07T22:48:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4ODc5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a96ca2e759c87f870c0401bcc10b331cbc7f6cef", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\nindex 0bf48cb8ace..8917d939537 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\n\n@@ -45,13 +46,10 @@ public class TextAnalyticsAsyncClientJavaDocCodeSnippets {\n     }\n \n     // Languages\n-\n     /**\n-     * Code snippet for detecting Language\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectLanguage(String)}\n      */\n-    public void detectLanguageCodeSnippets() {\n-        TextAnalyticsAsyncClient textAnalyticsAsyncClient = createTextAnalyticsAsyncClient();\n-\n+    public void detectLanguages() {\n         // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n         String inputText = \"Bonjour tout le monde\";\n         textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n"}}, {"oid": "a96ca2e759c87f870c0401bcc10b331cbc7f6cef", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a96ca2e759c87f870c0401bcc10b331cbc7f6cef", "message": "refactor methods to seperate snippets", "committedDate": "2020-01-08T00:02:38Z", "type": "commit"}, {"oid": "a96ca2e759c87f870c0401bcc10b331cbc7f6cef", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a96ca2e759c87f870c0401bcc10b331cbc7f6cef", "message": "refactor methods to seperate snippets", "committedDate": "2020-01-08T00:02:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxMTM5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r364011398", "bodyText": "should we also remove the Model version log? Let us keep the codesnippet focus on the more valuable infor.", "author": "mssfang", "createdAt": "2020-01-08T00:07:51Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -24,4 +44,1014 @@ public TextAnalyticsAsyncClient createTextAnalyticsAsyncClient() {\n         // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.instantiation\n         return textAnalyticsAsyncClient;\n     }\n+\n+    // Languages\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectLanguage(String)}\n+     */\n+    public void detectLanguages() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+        String inputText = \"Bonjour tout le monde\";\n+        textAnalyticsAsyncClient.detectLanguage(inputText).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectLanguageWithResponse(String, String)}\n+     */\n+    public void detectLanguageWithResponse() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+        String input = \"This text is in English\";\n+        String countryHint = \"US\";\n+        textAnalyticsAsyncClient.detectLanguageWithResponse(input, countryHint).subscribe(detectLanguageResult -> {\n+            for (DetectedLanguage detectedLanguage : detectLanguageResult.getValue().getDetectedLanguages()) {\n+                System.out.printf(\"Detected languages name: %s, ISO 6391 Name: %s, Score: %s.%n\",\n+                    detectedLanguage.getName(),\n+                    detectedLanguage.getIso6391Name(),\n+                    detectedLanguage.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageWithResponse#string-string\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectLanguages(List)}\n+     */\n+    public void detectLanguagesStringList() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+        final List<String> textInputs = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguages(textInputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics,transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguages#List\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectLanguagesWithResponse(List, String)}\n+     */\n+    public void detectLanguagesWithResponse() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+        final List<String> textInputs1 = Arrays.asList(\n+            \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n+        textAnalyticsAsyncClient.detectLanguagesWithResponse(textInputs1, \"US\").subscribe(response -> {\n+            DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics,transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguagesWithResponse#List-String\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectBatchLanguages(List)} )}\n+     */\n+    public void detectLanguagesBatch() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+        List<DetectLanguageInput> detectLanguageInputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"ES\")\n+        );\n+        textAnalyticsAsyncClient.detectBatchLanguages(detectLanguageInputs).subscribe(detectedBatchResult -> {\n+            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                    System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                        detectedLanguage.getName(),\n+                        detectedLanguage.getIso6391Name(),\n+                        detectedLanguage.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguages#List\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#detectBatchLanguagesWithResponse(List,\n+     * TextAnalyticsRequestOptions)}\n+     */\n+    public void detectBatchLanguagesWithResponse() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+        List<DetectLanguageInput> detectLanguageInputs1 = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n+            new DetectLanguageInput(\"2\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+\n+        // Request options: show statistics and model version\n+        final TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setShowStatistics(true);\n+\n+        textAnalyticsAsyncClient.detectBatchLanguagesWithResponse(detectLanguageInputs1, requestOptions)\n+            .subscribe(response -> {\n+                final DocumentResultCollection<DetectLanguageResult> detectedBatchResult = response.getValue();\n+                System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n+\n+                // Batch statistics\n+                final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n+                System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                    batchStatistics.getTransactionCount(),\n+                    batchStatistics.getValidDocumentCount());\n+\n+                for (DetectLanguageResult detectLanguageResult : detectedBatchResult) {\n+                    for (DetectedLanguage detectedLanguage : detectLanguageResult.getDetectedLanguages()) {\n+                        System.out.printf(\"Detected language: %s, ISO 6391 name: %s, score: %s.%n\",\n+                            detectedLanguage.getName(),\n+                            detectedLanguage.getIso6391Name(),\n+                            detectedLanguage.getScore());\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectBatchLanguagesWithResponse#List-TextAnalyticsRequestOptions\n+    }\n+\n+    // Entity\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizeEntities(String)}\n+     */\n+    public void recognizeEntities() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+        String inputText = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntities(inputText).subscribe(recognizeEntitiesResult -> {\n+            for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                System.out.printf(\n+                    \"Recognized Named Entity: %s, Type: %s, Score: %s.%n\",\n+                    entity.getText(),\n+                    entity.getType(),\n+                    entity.getScore());\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizeEntitiesWithResponse(String, String)}\n+     */\n+    public void recognizeEntitiesWithResponse() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#string-string\n+        String inputText1 = \"Satya Nadella is the CEO of Microsoft\";\n+        textAnalyticsAsyncClient.recognizeEntitiesWithResponse(inputText1, \"en\")\n+            .subscribe(recognizeEntitiesResult -> {\n+                for (NamedEntity entity : recognizeEntitiesResult.getValue().getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getScore());\n+                }\n+            });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#string-string\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizeEntities(List)}\n+     */\n+    public void recognizeEntitiesStringList() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#List\n+        List<String> textInputs = Arrays.asList(\n+            \"I had a wonderful trip to Seattle last week.\", \"I work at Microsoft.\");\n+\n+        textAnalyticsAsyncClient.recognizeEntities(textInputs).subscribe(recognizeEntitiesResults -> {\n+            System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = recognizeEntitiesResults.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (RecognizeEntitiesResult recognizeEntitiesResult : recognizeEntitiesResults) {\n+                for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities#List\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizeEntitiesWithResponse(List, String)}\n+     */\n+    public void recognizeEntitiesWithResponseStringList() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#List-String\n+        List<String> textInputs1 = Arrays.asList(\n+            \"I had a wonderful trip to Seattle last week.\", \"I work at Microsoft.\");\n+\n+        textAnalyticsAsyncClient.recognizeEntitiesWithResponse(textInputs1, \"en\").subscribe(response -> {\n+            DocumentResultCollection<RecognizeEntitiesResult> recognizeEntitiesResults = response.getValue();\n+            System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());\n+\n+            // Batch statistics\n+            final TextDocumentBatchStatistics batchStatistics = recognizeEntitiesResults.getStatistics();\n+            System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n+                batchStatistics.getTransactionCount(),\n+                batchStatistics.getValidDocumentCount());\n+\n+            for (RecognizeEntitiesResult recognizeEntitiesResult : recognizeEntitiesResults) {\n+                for (NamedEntity entity : recognizeEntitiesResult.getNamedEntities()) {\n+                    System.out.printf(\n+                        \"Recognized Named Entity: %s, Type: %s, Score: %s.%n\",\n+                        entity.getText(),\n+                        entity.getType(),\n+                        entity.getScore());\n+                }\n+            }\n+        });\n+        // END: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesWithResponse#List-String\n+    }\n+\n+    /**\n+     * Code snippet for {@link TextAnalyticsAsyncClient#recognizeBatchEntities(List)}\n+     */\n+    public void recognizeBatchEntities() {\n+        // BEGIN: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeBatchEntities#List\n+        List<TextDocumentInput> textDocumentInputs = Arrays.asList(\n+            new TextDocumentInput(\"0\", \"I had a wonderful trip to Seattle last week.\"),\n+            new TextDocumentInput(\"1\", \"I work at Microsoft.\"));\n+\n+        textAnalyticsAsyncClient.recognizeBatchEntities(textDocumentInputs).subscribe(recognizeEntitiesResults -> {\n+            System.out.printf(\"Model version: %s%n\", recognizeEntitiesResults.getModelVersion());", "originalCommit": "a96ca2e759c87f870c0401bcc10b331cbc7f6cef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxMjIyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7162#discussion_r364012227", "bodyText": "removed", "author": "samvaity", "createdAt": "2020-01-08T00:11:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxMTM5OA=="}], "type": "inlineReview", "revised_code": {"commit": "8b62a177204d968e603be30d88980fdf36fd34a4", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\nindex 8917d939537..7a13f73091a 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClientJavaDocCodeSnippets.java\n\n@@ -89,8 +89,6 @@ public class TextAnalyticsAsyncClientJavaDocCodeSnippets {\n         final List<String> textInputs = Arrays.asList(\n             \"This is written in English\", \"Este es un document escrito en Espa\u00f1ol.\");\n         textAnalyticsAsyncClient.detectLanguages(textInputs).subscribe(detectedBatchResult -> {\n-            System.out.printf(\"Model version: %s%n\", detectedBatchResult.getModelVersion());\n-\n             // Batch statistics\n             final TextDocumentBatchStatistics batchStatistics = detectedBatchResult.getStatistics();\n             System.out.printf(\"Batch statistics,transaction count: %s, valid document count: %s.%n\",\n"}}, {"oid": "8b62a177204d968e603be30d88980fdf36fd34a4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8b62a177204d968e603be30d88980fdf36fd34a4", "message": "remove model versions sysout", "committedDate": "2020-01-08T00:11:00Z", "type": "commit"}, {"oid": "df5faab563a34fd4be2303ead02f19bd0f5056ce", "url": "https://github.com/Azure/azure-sdk-for-java/commit/df5faab563a34fd4be2303ead02f19bd0f5056ce", "message": "pii -> PII", "committedDate": "2020-01-08T01:00:11Z", "type": "commit"}]}