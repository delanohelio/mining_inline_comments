{"pr_number": 15157, "pr_title": "Fix for RNTBDChannelPool task queue starvation", "pr_createdAt": "2020-09-14T05:25:20Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/15157", "timeline": [{"oid": "966a2024a44c52cb126c4b63a9a47a0c15cf0c04", "url": "https://github.com/Azure/azure-sdk-for-java/commit/966a2024a44c52cb126c4b63a9a47a0c15cf0c04", "message": "rntbd improvements", "committedDate": "2020-09-13T06:34:34Z", "type": "commit"}, {"oid": "d2d586efd129b5b76a68766cc51c84727a93b4ec", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d2d586efd129b5b76a68766cc51c84727a93b4ec", "message": "fixed latency issue and a race condition on close", "committedDate": "2020-09-13T18:43:51Z", "type": "commit"}, {"oid": "9c8ff08638ad0b705b4db2949fe4b0b87b9683c3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9c8ff08638ad0b705b4db2949fe4b0b87b9683c3", "message": "fixed race condition in connection management resulting in creating more connections, fixed a infinite loop issue", "committedDate": "2020-09-14T01:54:23Z", "type": "commit"}, {"oid": "beb5fef10c2a3489f5a4ed28359936703de12df6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/beb5fef10c2a3489f5a4ed28359936703de12df6", "message": "fixed compilation warning", "committedDate": "2020-09-14T01:58:21Z", "type": "commit"}, {"oid": "2330f9d09f994ac1f1612bbd1e69eefc1e047b7a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2330f9d09f994ac1f1612bbd1e69eefc1e047b7a", "message": "ensure the channel is servicable", "committedDate": "2020-09-14T02:37:30Z", "type": "commit"}, {"oid": "065b4929f13b0f5f8ce61387faa68a1f29d2d54d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/065b4929f13b0f5f8ce61387faa68a1f29d2d54d", "message": "increase monitoring period", "committedDate": "2020-09-14T02:39:30Z", "type": "commit"}, {"oid": "4385fa967c5886c126329563885a611d42f748de", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4385fa967c5886c126329563885a611d42f748de", "message": "removed info debug logs", "committedDate": "2020-09-14T02:43:53Z", "type": "commit"}, {"oid": "6a23badb7a9f86f7d5f158053322203549674606", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6a23badb7a9f86f7d5f158053322203549674606", "message": "cleanup", "committedDate": "2020-09-14T04:37:21Z", "type": "commit"}, {"oid": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "message": "update condition", "committedDate": "2020-09-14T05:00:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc1NDM5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487754390", "bodyText": "Both metrics below are not consistent right?", "author": "kirankumarkolli", "createdAt": "2020-09-14T08:53:40Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdServiceEndpoint.java", "diffHunk": "@@ -111,12 +111,12 @@ private RntbdServiceEndpoint(\n \n     @Override\n     public int channelsAcquired() {\n-        return this.channelPool.channelsAcquired();", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4NTM1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487985357", "bodyText": "ACK - renamed to *metric and added explanation", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T14:40:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc1NDM5MA=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdServiceEndpoint.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdServiceEndpoint.java\nindex 3b261330638..3647d8b9b07 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdServiceEndpoint.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdServiceEndpoint.java\n\n@@ -110,12 +110,18 @@ public final class RntbdServiceEndpoint implements RntbdEndpoint {\n     // region Accessors\n \n     @Override\n-    public int channelsAcquired() {\n+    /**\n+     * @return approximate number of acquired channels.\n+     */\n+    public int channelsAcquiredMetric() {\n         return this.channelPool.channelsAcquiredMetrics();\n     }\n \n+    /**\n+     * @return approximate number of available channels.\n+     */\n     @Override\n-    public int channelsAvailable() {\n+    public int channelsAvailableMetric() {\n         return this.channelPool.channelsAvailableMetrics();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc1NTY3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487755674", "bodyText": "requestExpirator [](start = 39, length = 16)\n\nnaming: suffix executor", "author": "kirankumarkolli", "createdAt": "2020-09-14T08:55:41Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -81,6 +84,11 @@\n     private static final ClosedChannelException ON_DEREGISTER =\n         ThrowableUtil.unknownStackTrace(new ClosedChannelException(), RntbdRequestManager.class, \"deregister\");\n \n+    private static final EventExecutor requestExpirator = new DefaultEventExecutor(new RntbdThreadFactory(", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4MjIxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487982211", "bodyText": "Fixed", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T14:36:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc1NTY3NA=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java\nindex 16113526699..000c6698612 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java\n\n@@ -84,7 +84,7 @@ public final class RntbdRequestManager implements ChannelHandler, ChannelInbound\n     private static final ClosedChannelException ON_DEREGISTER =\n         ThrowableUtil.unknownStackTrace(new ClosedChannelException(), RntbdRequestManager.class, \"deregister\");\n \n-    private static final EventExecutor requestExpirator = new DefaultEventExecutor(new RntbdThreadFactory(\n+    private static final EventExecutor requestExpirationExecutor = new DefaultEventExecutor(new RntbdThreadFactory(\n         \"request-expirator\",\n         true,\n         Thread.NORM_PRIORITY));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc2NjkxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487766919", "bodyText": "New requestManager is created per channel. #ThreadFactorys ~ #channels.\nIs this intentional?\nFor large outbound channels (ex: 6K parttions, how does it manifest?", "author": "kirankumarkolli", "createdAt": "2020-09-14T09:14:37Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -81,6 +84,11 @@\n     private static final ClosedChannelException ON_DEREGISTER =\n         ThrowableUtil.unknownStackTrace(new ClosedChannelException(), RntbdRequestManager.class, \"deregister\");\n \n+    private static final EventExecutor requestExpirator = new DefaultEventExecutor(new RntbdThreadFactory(", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4MTI1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487981258", "bodyText": "Not sure I understand the question - all new event loops are static - so independent of instance count, correct?", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T14:34:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc2NjkxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAyNzk3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r488027977", "bodyText": "Its static please ignore it.", "author": "kirankumarkolli", "createdAt": "2020-09-14T15:33:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc2NjkxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java\nindex 16113526699..000c6698612 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java\n\n@@ -84,7 +84,7 @@ public final class RntbdRequestManager implements ChannelHandler, ChannelInbound\n     private static final ClosedChannelException ON_DEREGISTER =\n         ThrowableUtil.unknownStackTrace(new ClosedChannelException(), RntbdRequestManager.class, \"deregister\");\n \n-    private static final EventExecutor requestExpirator = new DefaultEventExecutor(new RntbdThreadFactory(\n+    private static final EventExecutor requestExpirationExecutor = new DefaultEventExecutor(new RntbdThreadFactory(\n         \"request-expirator\",\n         true,\n         Thread.NORM_PRIORITY));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NTAwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487785005", "bodyText": "Clarification: Scheduling is to unblock timer-wheel right?\nThought: Leaving the choice to consumers is error prone, is it possible to force timer wheel it-self own and schedule on them (Of-course follow-up)?", "author": "kirankumarkolli", "createdAt": "2020-09-14T09:45:16Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -567,13 +575,7 @@ private RntbdRequestRecord addPendingRequestRecord(final ChannelHandlerContext c\n             final Timeout pendingRequestTimeout = record.newTimeout(timeout -> {\n \n                 // We don't wish to complete on the timeout thread, but rather on a thread doled out by our executor", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4MTQ2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487981462", "bodyText": "Correct", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T14:35:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NTAwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java\nindex 16113526699..000c6698612 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java\n\n@@ -575,7 +575,7 @@ public final class RntbdRequestManager implements ChannelHandler, ChannelInbound\n             final Timeout pendingRequestTimeout = record.newTimeout(timeout -> {\n \n                 // We don't wish to complete on the timeout thread, but rather on a thread doled out by our executor\n-                requestExpirator.execute(record::expire);\n+                requestExpirationExecutor.execute(record::expire);\n             });\n \n             record.whenComplete((response, error) -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4OTg0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487789848", "bodyText": "BacklogItem: gate the validation and detect future regressions.\nIts a generic comments not just spcific to this change.", "author": "kirankumarkolli", "createdAt": "2020-09-14T09:53:18Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -567,13 +575,7 @@ private RntbdRequestRecord addPendingRequestRecord(final ChannelHandlerContext c\n             final Timeout pendingRequestTimeout = record.newTimeout(timeout -> {\n \n                 // We don't wish to complete on the timeout thread, but rather on a thread doled out by our executor\n-                final EventExecutor executor = context.executor();\n-\n-                if (executor.inEventLoop()) {\n-                    record.expire();\n-                } else {\n-                    executor.next().execute(record::expire);\n-                }\n+                requestExpirator.execute(record::expire);", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3NjU1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487976557", "bodyText": "ACK - but let's please track this in work items - not in this PR. We need to make progress on this PR quickly to ship the hotfix.", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T14:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4OTg0OA=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java\nindex 16113526699..000c6698612 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java\n\n@@ -575,7 +575,7 @@ public final class RntbdRequestManager implements ChannelHandler, ChannelInbound\n             final Timeout pendingRequestTimeout = record.newTimeout(timeout -> {\n \n                 // We don't wish to complete on the timeout thread, but rather on a thread doled out by our executor\n-                requestExpirator.execute(record::expire);\n+                requestExpirationExecutor.execute(record::expire);\n             });\n \n             record.whenComplete((response, error) -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NzM2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487797366", "bodyText": "Is the move to do-while for readability?", "author": "kirankumarkolli", "createdAt": "2020-09-14T10:05:44Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1108,7 +1206,7 @@ private void runTasksInPendingAcquisitionQueue() {\n \n             task.acquired(true);\n             this.acquire(task.promise);\n-        }\n+        } while (--channelsAvailable> 0);", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3ODQ5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487978498", "bodyText": "No - it is intentionally executing at least once (even if no channels available to allow for more eager connection initiation. Worst case we pull one pendingAcquisition task from the head and re-enqueue it at the tail. Can result in some unfairness - but from test tests we ran and the discussions/analysis in the last couple of days that trade-off is reasonable. Mo's comment above explains the possible unfairness - so I think we are good here?", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T14:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NzM2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\nindex 55d031bf823..92c1208cba8 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n\n@@ -1206,7 +1204,7 @@ public final class RntbdClientChannelPool implements ChannelPool {\n \n             task.acquired(true);\n             this.acquire(task.promise);\n-        } while (--channelsAvailable> 0);\n+        } while (--channelsAvailable > 0);\n     }\n \n     private void throwIfClosed() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NzU0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487797542", "bodyText": "nit: (style) space before >", "author": "kirankumarkolli", "createdAt": "2020-09-14T10:06:03Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1108,7 +1206,7 @@ private void runTasksInPendingAcquisitionQueue() {\n \n             task.acquired(true);\n             this.acquire(task.promise);\n-        }\n+        } while (--channelsAvailable> 0);", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4ODEwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487988103", "bodyText": "Fixed", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T14:43:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5NzU0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\nindex 55d031bf823..92c1208cba8 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n\n@@ -1206,7 +1204,7 @@ public final class RntbdClientChannelPool implements ChannelPool {\n \n             task.acquired(true);\n             this.acquire(task.promise);\n-        } while (--channelsAvailable> 0);\n+        } while (--channelsAvailable > 0);\n     }\n \n     private void throwIfClosed() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5ODg0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487798849", "bodyText": "Is this same as above ensureInEventLoop?", "author": "kirankumarkolli", "createdAt": "2020-09-14T10:08:24Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1088,14 +1180,20 @@ private void releaseChannel(final Channel channel, final Promise<Void> promise)\n      * {@link #acquire}.\n      */\n     private void runTasksInPendingAcquisitionQueue() {\n+        ensureInEventLoop();\n \n         this.ensureInEventLoop();", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4Nzg0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487987843", "bodyText": "Fixed", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T14:43:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5ODg0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\nindex 55d031bf823..92c1208cba8 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n\n@@ -1180,8 +1180,6 @@ public final class RntbdClientChannelPool implements ChannelPool {\n      * {@link #acquire}.\n      */\n     private void runTasksInPendingAcquisitionQueue() {\n-        ensureInEventLoop();\n-\n         this.ensureInEventLoop();\n         int channelsAvailable = this.availableChannels.size();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMDQxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487800413", "bodyText": "Its very easy to slip stream changes violating the assumptions.\nWe need a mechanism to guard/detect (in order of preference) for these critical aspects.\nHow about fail in our gates/CTL/perf runs at-least?\nHow about doing all our current validations with fail semantics?", "author": "kirankumarkolli", "createdAt": "2020-09-14T10:11:04Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1088,14 +1180,20 @@ private void releaseChannel(final Channel channel, final Promise<Void> promise)\n      * {@link #acquire}.\n      */\n     private void runTasksInPendingAcquisitionQueue() {\n+        ensureInEventLoop();\n \n         this.ensureInEventLoop();", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxMDA0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487810043", "bodyText": "its error trace and I am not seeing them at-least in my runs.\n\nIn reply to: 487800413 [](ancestors = 487800413)", "author": "kirankumarkolli", "createdAt": "2020-09-14T10:28:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMDQxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkzMTEwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487931108", "bodyText": "ACK - but I think we all agree that making the changes to fail fast will result in additional risk and need for validation (probably with changes to test infrastructure) - so IMO this is something we should do after releasing the hot fix. Makes sense?", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T13:47:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMDQxMw=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\nindex 55d031bf823..92c1208cba8 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n\n@@ -1180,8 +1180,6 @@ public final class RntbdClientChannelPool implements ChannelPool {\n      * {@link #acquire}.\n      */\n     private void runTasksInPendingAcquisitionQueue() {\n-        ensureInEventLoop();\n-\n         this.ensureInEventLoop();\n         int channelsAvailable = this.availableChannels.size();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMTg3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487801872", "bodyText": "In my runs instrumented to include the remoteendpoint and it was super useful too.", "author": "kirankumarkolli", "createdAt": "2020-09-14T10:13:33Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1332,4 +1430,36 @@ public synchronized Throwable fillInStackTrace() {\n     }\n \n     // endregion\n+\n+    // TODO: remove when we are confident of RNTBD OOM bug\n+    @SuppressWarnings(\"unchecked\")\n+    private ScheduledFuture<?> startMonitoring() {\n+        return monitoringRntbdChannelPool.scheduleAtFixedRate(() -> {\n+            int i = getTaskCount();\n+            if (isInterestingEndpoint()) {\n+                logger.debug(\"{} total number of tasks on the executor [{}], connecting [{}], acquiredChannel [{}], availableChannel [{}], pending acquisition [{}]\",\n+                    this.hashCode(), i, connecting.get(), acquiredChannels.size(), availableChannels.size(), pendingAcquisitions.size());", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4NzU2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487987567", "bodyText": "Added", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T14:43:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMTg3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\nindex 55d031bf823..92c1208cba8 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n\n@@ -1437,8 +1435,8 @@ public final class RntbdClientChannelPool implements ChannelPool {\n         return monitoringRntbdChannelPool.scheduleAtFixedRate(() -> {\n             int i = getTaskCount();\n             if (isInterestingEndpoint()) {\n-                logger.debug(\"{} total number of tasks on the executor [{}], connecting [{}], acquiredChannel [{}], availableChannel [{}], pending acquisition [{}]\",\n-                    this.hashCode(), i, connecting.get(), acquiredChannels.size(), availableChannels.size(), pendingAcquisitions.size());\n+                logger.debug(\"{} total number of tasks on the executor [{}], remote address: [{}], connecting [{}], acquiredChannel [{}], availableChannel [{}], pending acquisition [{}]\",\n+                    this.hashCode(), i, this.remoteAddress(), connecting.get(), acquiredChannels.size(), availableChannels.size(), pendingAcquisitions.size());\n             }\n         }, 0, 60, TimeUnit.SECONDS);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMjcyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487802727", "bodyText": "One more I found useful is to list the channels and their interesting states (specifically the pendingoperations on channel was super useful).\nIt can be filtered on some threshold.\nMay be isInterestingEndpoint() can even be based on that threshold.", "author": "kirankumarkolli", "createdAt": "2020-09-14T10:15:00Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1332,4 +1430,36 @@ public synchronized Throwable fillInStackTrace() {\n     }\n \n     // endregion\n+\n+    // TODO: remove when we are confident of RNTBD OOM bug\n+    @SuppressWarnings(\"unchecked\")\n+    private ScheduledFuture<?> startMonitoring() {\n+        return monitoringRntbdChannelPool.scheduleAtFixedRate(() -> {\n+            int i = getTaskCount();\n+            if (isInterestingEndpoint()) {\n+                logger.debug(\"{} total number of tasks on the executor [{}], connecting [{}], acquiredChannel [{}], availableChannel [{}], pending acquisition [{}]\",\n+                    this.hashCode(), i, connecting.get(), acquiredChannels.size(), availableChannels.size(), pendingAcquisitions.size());\n+            }\n+        }, 0, 60, TimeUnit.SECONDS);\n+    }", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3NTk5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487975999", "bodyText": "ACK - But i think we can decide that when we want to remove this additional logging. IMO for now we should leave it in here until we have confirmation that the hotfix addressed all scenarios.", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T14:27:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMjcyNw=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\nindex 55d031bf823..92c1208cba8 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n\n@@ -1437,8 +1435,8 @@ public final class RntbdClientChannelPool implements ChannelPool {\n         return monitoringRntbdChannelPool.scheduleAtFixedRate(() -> {\n             int i = getTaskCount();\n             if (isInterestingEndpoint()) {\n-                logger.debug(\"{} total number of tasks on the executor [{}], connecting [{}], acquiredChannel [{}], availableChannel [{}], pending acquisition [{}]\",\n-                    this.hashCode(), i, connecting.get(), acquiredChannels.size(), availableChannels.size(), pendingAcquisitions.size());\n+                logger.debug(\"{} total number of tasks on the executor [{}], remote address: [{}], connecting [{}], acquiredChannel [{}], availableChannel [{}], pending acquisition [{}]\",\n+                    this.hashCode(), i, this.remoteAddress(), connecting.get(), acquiredChannels.size(), availableChannels.size(), pendingAcquisitions.size());\n             }\n         }, 0, 60, TimeUnit.SECONDS);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyMDE1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487820154", "bodyText": "Clarification(non-blocking): Any idea if netty duplex channel support timeout OOB?", "author": "kirankumarkolli", "createdAt": "2020-09-14T10:47:47Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -567,13 +575,7 @@ private RntbdRequestRecord addPendingRequestRecord(final ChannelHandlerContext c\n             final Timeout pendingRequestTimeout = record.newTimeout(timeout -> {\n \n                 // We don't wish to complete on the timeout thread, but rather on a thread doled out by our executor\n-                final EventExecutor executor = context.executor();\n-\n-                if (executor.inEventLoop()) {\n-                    record.expire();\n-                } else {\n-                    executor.next().execute(record::expire);\n-                }\n+                requestExpirator.execute(record::expire);", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3NDM2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487974362", "bodyText": "Can be discussed offline.", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T14:26:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyMDE1NA=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java\nindex 16113526699..000c6698612 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java\n\n@@ -575,7 +575,7 @@ public final class RntbdRequestManager implements ChannelHandler, ChannelInbound\n             final Timeout pendingRequestTimeout = record.newTimeout(timeout -> {\n \n                 // We don't wish to complete on the timeout thread, but rather on a thread doled out by our executor\n-                requestExpirator.execute(record::expire);\n+                requestExpirationExecutor.execute(record::expire);\n             });\n \n             record.whenComplete((response, error) -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MzM2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487893362", "bodyText": "RntbdClientChannelPool is a ChannelPool.\nSo far my understanding is its an abstraction facilitating the pooling mechanism. Haven't seen it coupled with the core netty Channels or handlers.\nThe attribute is a way of correlating it with the pool. Below mechanism is to purely ensure that release done on the same pool.\nelse case is interesting. Closing on this channel will only release the underlying channel but the associated pool state will be in-consistent.\nMi-targeting can happen if there are multiple ServcieEndpints for the same remote address, which means idle-time handling.\nLets not gate these fixes on it.\nPlease remove this comment.", "author": "kirankumarkolli", "createdAt": "2020-09-14T13:01:20Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -1044,9 +1136,9 @@ private void releaseAndOfferChannelIfHealthy(\n      * promise} completes with an {@link IllegalStateException}.\n      */\n     private void releaseChannel(final Channel channel, final Promise<Void> promise) {\n-\n         checkState(channel.eventLoop().inEventLoop());\n \n+        // TODO: moderakh what is ChannelPool", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkzMzE3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487933177", "bodyText": "Agreed. Removed the TODO.", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T13:49:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MzM2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\nindex 55d031bf823..92c1208cba8 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n\n@@ -1138,7 +1139,6 @@ public final class RntbdClientChannelPool implements ChannelPool {\n     private void releaseChannel(final Channel channel, final Promise<Void> promise) {\n         checkState(channel.eventLoop().inEventLoop());\n \n-        // TODO: moderakh what is ChannelPool\n         final ChannelPool pool = channel.attr(POOL_KEY).getAndSet(null);\n         final boolean acquired = this.acquiredChannels.get(channel) != null;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwMjA3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487902073", "bodyText": "Did it help in any scenario or is it a defensive programming?", "author": "kirankumarkolli", "createdAt": "2020-09-14T13:14:40Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -980,6 +1069,9 @@ private Channel pollChannel() {\n     private void releaseAndOfferChannel(final Channel channel, final Promise<Void> promise) {\n         this.ensureInEventLoop();\n         try {\n+\n+            // TODO: moderakh is this right?!!!!!\n+            this.acquiredChannels.remove(channel);", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3NDA0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487974040", "bodyText": "Yes - removed the comment. There was one scenario where we ended up leaving a channel in acquiredChannels and availableChannels. This was part of the fix to make sure we don't establish more connections than MaxChannels...", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T14:25:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwMjA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\nindex 55d031bf823..92c1208cba8 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n\n@@ -1069,8 +1072,6 @@ public final class RntbdClientChannelPool implements ChannelPool {\n     private void releaseAndOfferChannel(final Channel channel, final Promise<Void> promise) {\n         this.ensureInEventLoop();\n         try {\n-\n-            // TODO: moderakh is this right?!!!!!\n             this.acquiredChannels.remove(channel);\n             if (this.offerChannel(channel)) {\n                 this.poolHandler.channelReleased(channel);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwMzM0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487903340", "bodyText": "Please add comments on reason for \"false' choice.", "author": "kirankumarkolli", "createdAt": "2020-09-14T13:16:24Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -947,19 +1038,17 @@ private Channel pollChannel() {\n             return first;  // because this.close -> this.close0 -> this.pollChannel\n         }\n \n-        if (this.isChannelServiceable(first)) {\n+        if (this.isChannelServiceable(first, false)) {", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk0NTA2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487945065", "bodyText": "Added comments", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T14:00:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwMzM0MA=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\nindex 55d031bf823..92c1208cba8 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n\n@@ -1038,6 +1036,8 @@ public final class RntbdClientChannelPool implements ChannelPool {\n             return first;  // because this.close -> this.close0 -> this.pollChannel\n         }\n \n+        // Only return channels as servicable here if less than maxPendingRequests \n+        // are queued on them\n         if (this.isChannelServiceable(first, false)) {\n             return first;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwNDA3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487904077", "bodyText": "Clarification: Any idea on why the first channel short circuit has a different pre-condition (isClosed())?\nOr why can't it be a simple loop and pick the one which is available?", "author": "kirankumarkolli", "createdAt": "2020-09-14T13:17:31Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -947,19 +1038,17 @@ private Channel pollChannel() {\n             return first;  // because this.close -> this.close0 -> this.pollChannel\n         }\n \n-        if (this.isChannelServiceable(first)) {\n+        if (this.isChannelServiceable(first, false)) {\n             return first;\n         }\n \n         this.availableChannels.offer(first);  // because we need a non-null sentinel to stop the search for a channel\n \n-        for (Channel next = this.availableChannels.pollLast(); next != first; next =\n-            this.availableChannels.pollLast()) {\n-\n+        for (Channel next = this.availableChannels.pollLast(); next != first; next = this.availableChannels.pollLast()) {\n             assert next != null : \"impossible\";\n \n             if (next.isActive()) {", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk0NzE2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487947160", "bodyText": "The is a comment in the short-circuit above already - to avoid an infinite loop in the close code sequence.", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T14:02:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwNDA3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\nindex 55d031bf823..92c1208cba8 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n\n@@ -1038,6 +1036,8 @@ public final class RntbdClientChannelPool implements ChannelPool {\n             return first;  // because this.close -> this.close0 -> this.pollChannel\n         }\n \n+        // Only return channels as servicable here if less than maxPendingRequests \n+        // are queued on them\n         if (this.isChannelServiceable(first, false)) {\n             return first;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwNTc4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487905789", "bodyText": "pollChannel [](start = 20, length = 11)\n\nI like the 'safe' naming convention used for new code.\nWorth adding that prefix for the same for other existing safe methods as well.", "author": "kirankumarkolli", "createdAt": "2020-09-14T13:20:02Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -936,6 +1026,7 @@ private boolean offerChannel(final Channel channel) {\n      * @see #acquire(Promise)\n      */\n     private Channel pollChannel() {", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwNzA0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487907044", "bodyText": "nit: remove extra line", "author": "kirankumarkolli", "createdAt": "2020-09-14T13:21:48Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -884,8 +974,8 @@ private void notifyChannelHealthCheck(\n                 try {\n                     channel.attr(POOL_KEY).set(this);\n                     this.poolHandler.channelAcquired(channel);\n-                    this.acquiredChannels.put(channel, channel);\n                     promise.setSuccess(channel);\n+\n                 } catch (Throwable cause) {", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk0ODM4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487948386", "bodyText": "Fixed", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T14:03:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkwNzA0NA=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\nindex 55d031bf823..92c1208cba8 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n\n@@ -975,7 +974,6 @@ public final class RntbdClientChannelPool implements ChannelPool {\n                     channel.attr(POOL_KEY).set(this);\n                     this.poolHandler.channelAcquired(channel);\n                     promise.setSuccess(channel);\n-\n                 } catch (Throwable cause) {\n                     if (this.executor.inEventLoop()) {\n                         this.closeChannelAndFail(channel, cause, promise);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxNTU4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487915588", "bodyText": "Why is it pulled out of EventLoop ?", "author": "kirankumarkolli", "createdAt": "2020-09-14T13:32:17Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -661,6 +707,7 @@ private double computeLoadFactor() {\n     }\n \n     private void doAcquireChannel(final Promise<Channel> promise, final Channel candidate) {\n+        acquiredChannels.put(candidate, candidate);", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk1NDA5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487954092", "bodyText": "doChannelHealthChecks interacts with the Channel and needs to be executed on the channel's eventLoop thread. This usually is a different thread than the channel pool's event loop thread - technically could be the same thought as well.\nFor clarity added a this.ensureInEventLoop (which happened already before - so just to make it more robust)", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T14:07:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxNTU4OA=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\nindex 55d031bf823..92c1208cba8 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n\n@@ -707,6 +705,7 @@ public final class RntbdClientChannelPool implements ChannelPool {\n     }\n \n     private void doAcquireChannel(final Promise<Channel> promise, final Channel candidate) {\n+        this.ensureInEventLoop();\n         acquiredChannels.put(candidate, candidate);\n \n         final Promise<Channel> anotherPromise = this.newChannelPromise(promise);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxODA4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487918088", "bodyText": "Can these be made fully deterministic (like do either in the EventLoop or !EventLoop)?", "author": "kirankumarkolli", "createdAt": "2020-09-14T13:34:40Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -561,15 +608,15 @@ private void acquireChannel(final Promise<Channel> promise) {\n      */\n     private void addTaskToPendingAcquisitionQueue(Promise<Channel> promise) {\n \n-        this.ensureInEventLoop();\n+//        this.ensureInEventLoop();", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk1OTUxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487959510", "bodyText": "There is simply no need for this to run on the event loop's thread - but no harm in doing so either - actually for perf it is better to do this inline to eagerly pump pending acquisitions.", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T14:11:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxODA4OA=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\nindex 55d031bf823..92c1208cba8 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n\n@@ -607,9 +611,6 @@ public final class RntbdClientChannelPool implements ChannelPool {\n      * @see #runTasksInPendingAcquisitionQueue\n      */\n     private void addTaskToPendingAcquisitionQueue(Promise<Channel> promise) {\n-\n-//        this.ensureInEventLoop();\n-\n         if (logger.isDebugEnabled()) {\n             logger.debug(\"{}, {}, {}, {}, {}, {}\",\n                 Instant.now(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxOTkxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487919910", "bodyText": "Much of troubleshooting/investigation context is fresh in minds but will have a high decay factor.\nThoughts on capturing that fully context in the code.", "author": "kirankumarkolli", "createdAt": "2020-09-14T13:36:22Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -495,7 +531,7 @@ private void acquireChannel(final Promise<Channel> promise) {\n                 return;\n             }\n \n-            final int channelCount = this.channels();\n+            final int channelCount = this.channels(false);", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk2MTczMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487961730", "bodyText": "Added comment", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T14:13:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxOTkxMA=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\nindex 55d031bf823..92c1208cba8 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n\n@@ -531,6 +527,8 @@ public final class RntbdClientChannelPool implements ChannelPool {\n                 return;\n             }\n \n+            // make sure to retrieve the actual channel count to avoid establishing more\n+            // TCP connections than allowed. \n             final int channelCount = this.channels(false);\n \n             if (channelCount < this.maxChannels) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyNjkzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487926933", "bodyText": "Tracing the remoteendpint of channel will be quite useful during troubleshooting.", "author": "kirankumarkolli", "createdAt": "2020-09-14T13:43:03Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -525,20 +561,31 @@ private void acquireChannel(final Promise<Channel> promise) {\n                 for (Channel channel : this.availableChannels) {\n \n                     final RntbdRequestManager manager = channel.pipeline().get(RntbdRequestManager.class);\n-                    final long pendingRequestCount = manager.pendingRequestCount();\n \n-                    if (pendingRequestCount < pendingRequestCountMin) {\n-                        pendingRequestCountMin = pendingRequestCount;\n-                        candidate = channel;\n+                    if (manager == null) {\n+                        logger.warn(\"Channel({}) closed\", channel);", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3MDQ3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487970471", "bodyText": "Fixed", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T14:21:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyNjkzMw=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\nindex 55d031bf823..92c1208cba8 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n\n@@ -563,9 +561,12 @@ public final class RntbdClientChannelPool implements ChannelPool {\n                     final RntbdRequestManager manager = channel.pipeline().get(RntbdRequestManager.class);\n \n                     if (manager == null) {\n-                        logger.warn(\"Channel({}) closed\", channel);\n+                        logger.warn(\"Channel({} --> {}) closed\", channel, this.remoteAddress());\n                     } else {\n                         final long pendingRequestCount = manager.pendingRequestCount();\n+\n+                        // we accept the risk of reusing the channel even if more than maxPendingRequests are queued - by picking\n+                        // the channel with the least number of outstanding requests we load balance reasonably\n                         if (isChannelServiceable(channel, true) && pendingRequestCount < pendingRequestCountMin) {\n                             pendingRequestCountMin = pendingRequestCount;\n                             candidate = channel;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk0ODQwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487948408", "bodyText": "Concurrent select of a channel is fine right?\nIf so will there be multple release calls for the channel as well?\nWill this looped over long time lead to un-intended overload of channels?\nMy assumption is the channel usage is guarded by the EvetnLoop so even the same channel is given back multiple timeback then it should be okey right?\nWith the same assumption and assuming that uneven load-balacing with-in limits is acceptable, then will a single queue and linear check of availability work?", "author": "kirankumarkolli", "createdAt": "2020-09-14T14:03:24Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -525,20 +561,31 @@ private void acquireChannel(final Promise<Channel> promise) {\n                 for (Channel channel : this.availableChannels) {\n \n                     final RntbdRequestManager manager = channel.pipeline().get(RntbdRequestManager.class);\n-                    final long pendingRequestCount = manager.pendingRequestCount();\n \n-                    if (pendingRequestCount < pendingRequestCountMin) {\n-                        pendingRequestCountMin = pendingRequestCount;\n-                        candidate = channel;\n+                    if (manager == null) {\n+                        logger.warn(\"Channel({}) closed\", channel);\n+                    } else {\n+                        final long pendingRequestCount = manager.pendingRequestCount();\n+                        if (isChannelServiceable(channel, true) && pendingRequestCount < pendingRequestCountMin) {\n+                            pendingRequestCountMin = pendingRequestCount;\n+                            candidate = channel;\n+                        }\n                     }\n                 }\n \n-                assert candidate != null;\n-\n-                this.availableChannels.remove(candidate);\n-                doAcquireChannel(promise, candidate);\n-\n-                return;\n+                if (candidate != null && this.availableChannels.remove(candidate)) {\n+                    this.doAcquireChannel(promise, candidate);\n+                    return;\n+                }\n+            } else {\n+                for (Channel channel : this.availableChannels) {", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk2NjA1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487966057", "bodyText": "Added comment with explanation", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T14:17:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk0ODQwOA=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\nindex 55d031bf823..92c1208cba8 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n\n@@ -563,9 +561,12 @@ public final class RntbdClientChannelPool implements ChannelPool {\n                     final RntbdRequestManager manager = channel.pipeline().get(RntbdRequestManager.class);\n \n                     if (manager == null) {\n-                        logger.warn(\"Channel({}) closed\", channel);\n+                        logger.warn(\"Channel({} --> {}) closed\", channel, this.remoteAddress());\n                     } else {\n                         final long pendingRequestCount = manager.pendingRequestCount();\n+\n+                        // we accept the risk of reusing the channel even if more than maxPendingRequests are queued - by picking\n+                        // the channel with the least number of outstanding requests we load balance reasonably\n                         if (isChannelServiceable(channel, true) && pendingRequestCount < pendingRequestCountMin) {\n                             pendingRequestCountMin = pendingRequestCount;\n                             candidate = channel;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk2MjA4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487962080", "bodyText": "+1 to this pattern.\nearlier might look okey as poolHandler notification is very light weight and almost doesn't fail, but this is a pattern we should force in reviews.\nThanks,", "author": "kirankumarkolli", "createdAt": "2020-09-14T14:14:17Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -839,43 +902,70 @@ private void newTimeout(\n             }, requestTimerResolutionInNanos, TimeUnit.NANOSECONDS));\n     }\n \n+    private void safeNotifyChannelConnect(final ChannelFuture future, final Promise<Channel> promise) {\n+        if (this.executor.inEventLoop()) {\n+            notifyChannelConnect(future, promise);\n+        } else {\n+            this.executor.submit(() ->  notifyChannelConnect(future, promise));\n+        }\n+    }\n+\n     private void notifyChannelConnect(final ChannelFuture future, final Promise<Channel> promise) {\n+        ensureInEventLoop();\n \n         reportIssueUnless(logger, this.connecting.get(), this, \"connecting: false\");\n \n-        if (future.isSuccess()) {\n+        try {\n+            if (future.isSuccess()) {\n+                final Channel channel = future.channel();\n \n-            final Channel channel = future.channel();\n+                try {\n+                    this.poolHandler.channelAcquired(channel);\n+                } catch (Throwable error) {\n+                    this.closeChannelAndFail(channel, error, promise);\n+                    return;\n+                }\n \n-            try {\n-                this.poolHandler.channelAcquired(channel);\n-            } catch (Throwable error) {\n-                this.closeChannelAndFail(channel, error, promise);\n-                return;\n-            }\n+                if (promise.trySuccess(channel)) {\n+\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"established a channel local {}, remote {}\", channel.localAddress(), channel.remoteAddress());\n+                    }\n+                    this.acquiredChannels.compute(channel, (ignored, acquiredChannel) -> {\n+                        //                    reportIssueUnless(logger, v == null, this, \"expected null channel, not {}\", v);\n+\n+                        reportIssueUnless(logger, acquiredChannel == null, this,\n+                            \"Channel({}) to be acquired has already been acquired\",\n+                            channel);\n+                        reportIssueUnless(logger, !this.availableChannels.remove(channel), this,\n+                            \"Channel({}) to be acquired is still in the list of available channels\",\n+                            channel);\n+\n+                        return channel;\n+                    });\n+                } else {\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"notifyChannelConnect promise.trySuccess(channel)=false\");\n+                    }\n+                    // Promise was completed in the meantime (like cancelled), just close the channel\n+                    this.closeChannel(channel);\n+                }\n \n-            if (promise.trySuccess(channel)) {\n-                this.acquiredChannels.compute(channel, (k, v) -> {\n-                    reportIssueUnless(logger, v == null, this, \"expected null channel, not {}\", v);\n-                    this.connecting.set(false);\n-                    return channel;\n-                });\n             } else {\n-                // Promise was completed in the meantime (like cancelled), just close the channel\n-                this.closeChannel(channel);\n-                this.connecting.set(false);\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"notifyChannelConnect future was not successful\");\n+                }\n+                promise.tryFailure(future.cause());\n             }\n-\n-        } else {\n-            promise.tryFailure(future.cause());\n+        } finally {\n+            this.connecting.set(false);", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\nindex 55d031bf823..92c1208cba8 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n\n@@ -931,9 +930,8 @@ public final class RntbdClientChannelPool implements ChannelPool {\n                     if (logger.isDebugEnabled()) {\n                         logger.debug(\"established a channel local {}, remote {}\", channel.localAddress(), channel.remoteAddress());\n                     }\n-                    this.acquiredChannels.compute(channel, (ignored, acquiredChannel) -> {\n-                        //                    reportIssueUnless(logger, v == null, this, \"expected null channel, not {}\", v);\n \n+                    this.acquiredChannels.compute(channel, (ignored, acquiredChannel) -> {\n                         reportIssueUnless(logger, acquiredChannel == null, this,\n                             \"Channel({}) to be acquired has already been acquired\",\n                             channel);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk2MzM5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487963399", "bodyText": "nit: new line before.", "author": "kirankumarkolli", "createdAt": "2020-09-14T14:15:29Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -839,43 +902,70 @@ private void newTimeout(\n             }, requestTimerResolutionInNanos, TimeUnit.NANOSECONDS));\n     }\n \n+    private void safeNotifyChannelConnect(final ChannelFuture future, final Promise<Channel> promise) {\n+        if (this.executor.inEventLoop()) {\n+            notifyChannelConnect(future, promise);\n+        } else {\n+            this.executor.submit(() ->  notifyChannelConnect(future, promise));\n+        }\n+    }\n+\n     private void notifyChannelConnect(final ChannelFuture future, final Promise<Channel> promise) {\n+        ensureInEventLoop();\n \n         reportIssueUnless(logger, this.connecting.get(), this, \"connecting: false\");\n \n-        if (future.isSuccess()) {\n+        try {\n+            if (future.isSuccess()) {\n+                final Channel channel = future.channel();\n \n-            final Channel channel = future.channel();\n+                try {\n+                    this.poolHandler.channelAcquired(channel);\n+                } catch (Throwable error) {\n+                    this.closeChannelAndFail(channel, error, promise);\n+                    return;\n+                }\n \n-            try {\n-                this.poolHandler.channelAcquired(channel);\n-            } catch (Throwable error) {\n-                this.closeChannelAndFail(channel, error, promise);\n-                return;\n-            }\n+                if (promise.trySuccess(channel)) {\n+\n+                    if (logger.isDebugEnabled()) {\n+                        logger.debug(\"established a channel local {}, remote {}\", channel.localAddress(), channel.remoteAddress());\n+                    }\n+                    this.acquiredChannels.compute(channel, (ignored, acquiredChannel) -> {", "originalCommit": "e8a1e50363c62aa37e2b9d17689444d5cd932bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk2NzM5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r487967395", "bodyText": "Fixed", "author": "FabianMeiswinkel", "createdAt": "2020-09-14T14:19:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk2MzM5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\nindex 55d031bf823..92c1208cba8 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java\n\n@@ -931,9 +930,8 @@ public final class RntbdClientChannelPool implements ChannelPool {\n                     if (logger.isDebugEnabled()) {\n                         logger.debug(\"established a channel local {}, remote {}\", channel.localAddress(), channel.remoteAddress());\n                     }\n-                    this.acquiredChannels.compute(channel, (ignored, acquiredChannel) -> {\n-                        //                    reportIssueUnless(logger, v == null, this, \"expected null channel, not {}\", v);\n \n+                    this.acquiredChannels.compute(channel, (ignored, acquiredChannel) -> {\n                         reportIssueUnless(logger, acquiredChannel == null, this,\n                             \"Channel({}) to be acquired has already been acquired\",\n                             channel);\n"}}, {"oid": "05ac2e23020cffa4dcd9fc8a1b975084151e4842", "url": "https://github.com/Azure/azure-sdk-for-java/commit/05ac2e23020cffa4dcd9fc8a1b975084151e4842", "message": "Reacting to code review comments", "committedDate": "2020-09-14T14:45:08Z", "type": "commit"}, {"oid": "1757a02530c54281794416b121d26ad92f1d502b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1757a02530c54281794416b121d26ad92f1d502b", "message": "Merge branch 'master' into users/moderakh/20200912T2019-rntbd-fixes", "committedDate": "2020-09-14T15:01:38Z", "type": "commit"}, {"oid": "d3d199264101350194f742c12ef632d044fff4e5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d3d199264101350194f742c12ef632d044fff4e5", "message": "Merge branch 'users/moderakh/20200912T2019-rntbd-fixes' of https://github.com/moderakh/azure-sdk-for-java into users/fabianm/RntbdMetricsToDiagnostics", "committedDate": "2020-09-14T15:06:04Z", "type": "commit"}, {"oid": "08879489d58638a7e4ca4cc4bb77184b8c16cdeb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/08879489d58638a7e4ca4cc4bb77184b8c16cdeb", "message": "Merge pull request #1 from FabianMeiswinkel/users/fabianm/RntbdMetricsToDiagnostics\n\nUsers/fabianm/rntbd metrics to diagnostics", "committedDate": "2020-09-14T15:18:04Z", "type": "commit"}, {"oid": "342d085195ab2354aef241dfc07ea1ad1d47f863", "url": "https://github.com/Azure/azure-sdk-for-java/commit/342d085195ab2354aef241dfc07ea1ad1d47f863", "message": "improved queue pending task monitoring, fixed spotbug complain", "committedDate": "2020-09-14T16:14:42Z", "type": "commit"}, {"oid": "04f020a2f70984e9fc520d09e450d63bf6c695c6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/04f020a2f70984e9fc520d09e450d63bf6c695c6", "message": "Defense in-depth against releaseChannel race condition", "committedDate": "2020-09-14T18:24:55Z", "type": "commit"}, {"oid": "d611df90c1a689865cd5f6e69579aeddff438adc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d611df90c1a689865cd5f6e69579aeddff438adc", "message": "Merge pull request #3 from FabianMeiswinkel/users/fabianm/RntbdMetricsToDiagnostics\n\n Defense in-depth against race condition if releaseChannel would be called concurrently for the same channel instance", "committedDate": "2020-09-14T18:31:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI1NDg3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r488254870", "bodyText": "Do we need to repeat finding channel if this.availableChannels.remove(candidate)  is false . The way we are going to next channel in else block ?", "author": "simplynaveen20", "createdAt": "2020-09-14T22:12:19Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -525,20 +560,38 @@ private void acquireChannel(final Promise<Channel> promise) {\n                 for (Channel channel : this.availableChannels) {\n \n                     final RntbdRequestManager manager = channel.pipeline().get(RntbdRequestManager.class);\n-                    final long pendingRequestCount = manager.pendingRequestCount();\n \n-                    if (pendingRequestCount < pendingRequestCountMin) {\n-                        pendingRequestCountMin = pendingRequestCount;\n-                        candidate = channel;\n+                    if (manager == null) {\n+                        logger.warn(\"Channel({} --> {}) closed\", channel, this.remoteAddress());\n+                    } else {\n+                        final long pendingRequestCount = manager.pendingRequestCount();\n+\n+                        // we accept the risk of reusing the channel even if more than maxPendingRequests are\n+                        // queued - by picking the channel with the least number of outstanding requests we load\n+                        // balance reasonably\n+                        if (isChannelServiceable(channel, true) && pendingRequestCount < pendingRequestCountMin) {\n+                            pendingRequestCountMin = pendingRequestCount;\n+                            candidate = channel;\n+                        }\n                     }\n                 }\n \n-                assert candidate != null;\n-\n-                this.availableChannels.remove(candidate);\n-                doAcquireChannel(promise, candidate);\n+                if (candidate != null && this.availableChannels.remove(candidate)) {", "originalCommit": "d611df90c1a689865cd5f6e69579aeddff438adc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM1MDE2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r488350160", "bodyText": "Talked through this offline - current behavior when loadFactor is above 90% is intentional.", "author": "FabianMeiswinkel", "createdAt": "2020-09-15T02:47:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI1NDg3MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "cf2a6c297c6213555d3f898ac5bbdb71eaf6f9fd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cf2a6c297c6213555d3f898ac5bbdb71eaf6f9fd", "message": "cancels pending acquisition tasks which are expired", "committedDate": "2020-09-15T02:11:00Z", "type": "commit"}, {"oid": "b251d07038e86ddb4f697eed8ef07d1a5b4b5f31", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b251d07038e86ddb4f697eed8ef07d1a5b4b5f31", "message": "cancels pending acquisition tasks which are expired", "committedDate": "2020-09-15T02:12:09Z", "type": "commit"}, {"oid": "9fab1c4a3493e220e5a51c87fb891696813cd15b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9fab1c4a3493e220e5a51c87fb891696813cd15b", "message": "Merge pull request #4 from moderakh/users/moderakh/20200913T1219-rntbd-fixes\n\nUsers/moderakh/20200913 t1219 rntbd fixes", "committedDate": "2020-09-15T02:30:57Z", "type": "commit"}, {"oid": "c0fc71c987acd3057f4de13ca7664404ef071d4e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c0fc71c987acd3057f4de13ca7664404ef071d4e", "message": "Fixing compiler warnings", "committedDate": "2020-09-15T03:20:06Z", "type": "commit"}, {"oid": "ac6a984d77a66bd7c2033d096de8b28fe89a26e3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ac6a984d77a66bd7c2033d096de8b28fe89a26e3", "message": "Merge pull request #6 from FabianMeiswinkel/users/fabianm/RntbdMetricsToDiagnostics\n\nFixing compiler warnings", "committedDate": "2020-09-15T03:29:47Z", "type": "commit"}, {"oid": "fa91cf47ef383a33b0f2df3d33b9ea54a702fdf2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fa91cf47ef383a33b0f2df3d33b9ea54a702fdf2", "message": "Fixing SpotBug warning", "committedDate": "2020-09-15T04:40:46Z", "type": "commit"}, {"oid": "8c585e0649e0efd81b2fa0ba0d5df225424e245c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8c585e0649e0efd81b2fa0ba0d5df225424e245c", "message": "Merge pull request #7 from FabianMeiswinkel/users/fabianm/RntbdMetricsToDiagnostics\n\nFixing SpotBug warning", "committedDate": "2020-09-15T04:42:58Z", "type": "commit"}, {"oid": "90aeea4274006e7025684c2465fa5c0f156a2242", "url": "https://github.com/Azure/azure-sdk-for-java/commit/90aeea4274006e7025684c2465fa5c0f156a2242", "message": "Fixing build issue", "committedDate": "2020-09-15T05:14:50Z", "type": "commit"}, {"oid": "b5d184bcf3752f6fc2fdbee94eacb88d9466ed4d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b5d184bcf3752f6fc2fdbee94eacb88d9466ed4d", "message": "Merge pull request #8 from FabianMeiswinkel/users/fabianm/RntbdMetricsToDiagnostics\n\nFixing build issue", "committedDate": "2020-09-15T05:18:14Z", "type": "commit"}, {"oid": "ee0696a9ae4b885bf115d602ca301a860637ddd0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ee0696a9ae4b885bf115d602ca301a860637ddd0", "message": "Fixing SpotBug issue", "committedDate": "2020-09-15T05:42:02Z", "type": "commit"}, {"oid": "0aaa7f208ea46b86e348cf11a032aa30b8eb88a7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0aaa7f208ea46b86e348cf11a032aa30b8eb88a7", "message": "Merge pull request #9 from FabianMeiswinkel/users/fabianm/RntbdMetricsToDiagnostics\n\nFixing SpotBug issue", "committedDate": "2020-09-15T05:44:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2MTg4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r488761884", "bodyText": "Can it be connectionTimeout?", "author": "kirankumarkolli", "createdAt": "2020-09-15T15:31:00Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -340,7 +340,7 @@ private Options(final Builder builder) {\n \n         private Options(final ConnectionPolicy connectionPolicy) {\n             this.bufferPageSize = 8192;\n-            this.connectionAcquisitionTimeout = Duration.ZERO;\n+            this.connectionAcquisitionTimeout = Duration.ofSeconds(5L);", "originalCommit": "0aaa7f208ea46b86e348cf11a032aa30b8eb88a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2NjQ4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15157#discussion_r488766480", "bodyText": "Lets discuss the static executors thread-pooling impact.", "author": "kirankumarkolli", "createdAt": "2020-09-15T15:37:29Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestManager.java", "diffHunk": "@@ -81,6 +84,11 @@\n     private static final ClosedChannelException ON_DEREGISTER =\n         ThrowableUtil.unknownStackTrace(new ClosedChannelException(), RntbdRequestManager.class, \"deregister\");\n \n+    private static final EventExecutor requestExpirationExecutor = new DefaultEventExecutor(new RntbdThreadFactory(", "originalCommit": "0aaa7f208ea46b86e348cf11a032aa30b8eb88a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}