{"pr_number": 11599, "pr_title": "JSON Serializer Streaming Interfaces", "pr_createdAt": "2020-05-29T23:52:05Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/11599", "timeline": [{"oid": "acdd83b0970dca919fd091ba0a699f05b7ef8f66", "url": "https://github.com/Azure/azure-sdk-for-java/commit/acdd83b0970dca919fd091ba0a699f05b7ef8f66", "message": "Prototype of streaming interface for JSON serializer", "committedDate": "2020-05-29T23:50:00Z", "type": "commit"}, {"oid": "f6a6b6d339e659fe7a12463588417bdce8b53486", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f6a6b6d339e659fe7a12463588417bdce8b53486", "message": "Added Javadocs and tests", "committedDate": "2020-06-01T20:18:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5ODQ0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r434098443", "bodyText": "thoughts on INSTANCE public final static property of type GsonJsonNull?", "author": "anuchandy", "createdAt": "2020-06-02T18:39:28Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonNull.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonNull;\n+\n+import java.util.Objects;\n+\n+/**\n+ * GSON specific implementation of {@link JsonNull}.\n+ */\n+public final class GsonJsonNull implements JsonNull {\n+    private final com.google.gson.JsonNull jsonNull;", "originalCommit": "f6a6b6d339e659fe7a12463588417bdce8b53486", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNDQ1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435624453", "bodyText": "Added INSTANCE.", "author": "alzimmermsft", "createdAt": "2020-06-05T00:14:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5ODQ0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9f8b5382d42bfecd471a09283de154ba3bca2b46", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonNull.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonNull.java\nindex c82859bab40..587a71b8f53 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonNull.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonNull.java\n\n@@ -14,19 +14,15 @@ public final class GsonJsonNull implements JsonNull {\n     private final com.google.gson.JsonNull jsonNull;\n \n     /**\n-     * Constructs a {@link JsonNull} backed by GSON {@link com.google.gson.JsonNull#INSTANCE}\n+     * Constant instance of {@link JsonNull}.\n      */\n-    public GsonJsonNull() {\n-        this.jsonNull = com.google.gson.JsonNull.INSTANCE;\n-    }\n+    public static final GsonJsonNull INSTANCE = new GsonJsonNull();\n \n     /**\n-     * Constructs a {@link JsonNull} backed by the passed GSON {@link com.google.gson.JsonNull}.\n-     *\n-     * @param jsonNull The backing GSON {@link com.google.gson.JsonNull}.\n+     * Constructs a {@link JsonNull} backed by GSON {@link com.google.gson.JsonNull#INSTANCE}\n      */\n-    public GsonJsonNull(com.google.gson.JsonNull jsonNull) {\n-        this.jsonNull = jsonNull;\n+    private GsonJsonNull() {\n+        this.jsonNull = com.google.gson.JsonNull.INSTANCE;\n     }\n \n     com.google.gson.JsonNull getJsonNull() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5ODcwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r434098700", "bodyText": "if we can have an INSTANCE property, do we need this \"public\" ctr ?", "author": "anuchandy", "createdAt": "2020-06-02T18:39:59Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonNull.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonNull;\n+\n+import java.util.Objects;\n+\n+/**\n+ * GSON specific implementation of {@link JsonNull}.\n+ */\n+public final class GsonJsonNull implements JsonNull {\n+    private final com.google.gson.JsonNull jsonNull;\n+\n+    /**\n+     * Constructs a {@link JsonNull} backed by GSON {@link com.google.gson.JsonNull#INSTANCE}\n+     */\n+    public GsonJsonNull() {\n+        this.jsonNull = com.google.gson.JsonNull.INSTANCE;\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonNull} backed by the passed GSON {@link com.google.gson.JsonNull}.\n+     *\n+     * @param jsonNull The backing GSON {@link com.google.gson.JsonNull}.\n+     */\n+    public GsonJsonNull(com.google.gson.JsonNull jsonNull) {", "originalCommit": "f6a6b6d339e659fe7a12463588417bdce8b53486", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExMTEwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r434111109", "bodyText": "Probably not, I added a lot of constructors so cover a bunch of cases when transitioning between external library type and Azure Core types. There are places where these can be reduced, also potentially transitioned to factory methods.", "author": "alzimmermsft", "createdAt": "2020-06-02T19:02:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5ODcwMA=="}], "type": "inlineReview", "revised_code": {"commit": "9f8b5382d42bfecd471a09283de154ba3bca2b46", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonNull.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonNull.java\nindex c82859bab40..587a71b8f53 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonNull.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonNull.java\n\n@@ -14,19 +14,15 @@ public final class GsonJsonNull implements JsonNull {\n     private final com.google.gson.JsonNull jsonNull;\n \n     /**\n-     * Constructs a {@link JsonNull} backed by GSON {@link com.google.gson.JsonNull#INSTANCE}\n+     * Constant instance of {@link JsonNull}.\n      */\n-    public GsonJsonNull() {\n-        this.jsonNull = com.google.gson.JsonNull.INSTANCE;\n-    }\n+    public static final GsonJsonNull INSTANCE = new GsonJsonNull();\n \n     /**\n-     * Constructs a {@link JsonNull} backed by the passed GSON {@link com.google.gson.JsonNull}.\n-     *\n-     * @param jsonNull The backing GSON {@link com.google.gson.JsonNull}.\n+     * Constructs a {@link JsonNull} backed by GSON {@link com.google.gson.JsonNull#INSTANCE}\n      */\n-    public GsonJsonNull(com.google.gson.JsonNull jsonNull) {\n-        this.jsonNull = jsonNull;\n+    private GsonJsonNull() {\n+        this.jsonNull = com.google.gson.JsonNull.INSTANCE;\n     }\n \n     com.google.gson.JsonNull getJsonNull() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwMjk1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r434102953", "bodyText": "We default to StandardCharsets.UTF_8, wondering whether we should take charset as input param in case  the over the wire bytes are in a different charset https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type", "author": "anuchandy", "createdAt": "2020-06-02T18:48:00Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java", "diffHunk": "@@ -29,8 +31,28 @@\n         return gson.fromJson(CoreUtils.bomAwareToString(input, null), clazz);\n     }\n \n+    @Override\n+    public <T> T deserializeTree(JsonNode jsonNode, Class<T> clazz) {\n+        return gson.fromJson(JsonNodeUtils.toGsonElement(jsonNode), clazz);\n+    }\n+\n     @Override\n     public byte[] serialize(Object value) {\n         return gson.toJson(value).getBytes(StandardCharsets.UTF_8);\n     }\n+\n+    @Override\n+    public byte[] serializeTree(JsonNode jsonNode) {\n+        return gson.toJson(JsonNodeUtils.toGsonElement(jsonNode)).getBytes(StandardCharsets.UTF_8);\n+    }\n+\n+    @Override\n+    public JsonNode toTree(byte[] input) {\n+        return JsonNodeUtils.fromGsonElement(new JsonParser().parse(new String(input, StandardCharsets.UTF_8)));", "originalCommit": "f6a6b6d339e659fe7a12463588417bdce8b53486", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzMjcyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435632724", "bodyText": "Could use FluxUtil.bomAwareToString in this case, though I believe the GSON and Jackson parsers will handle this conversion properly when dealing with a raw byte array. (I believe the issue we were seeing in Azure Core a few months back was due to a naive string conversion before passing into the serializer).", "author": "alzimmermsft", "createdAt": "2020-06-05T00:48:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwMjk1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "733b205237d450b22a80d437263a55107c00f0ca", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java\nindex e7fdaeaaeed..a09643f85e1 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java\n\n@@ -27,32 +32,39 @@ public final class GsonJsonSerializer implements JsonSerializer {\n     }\n \n     @Override\n-    public <T> T deserialize(byte[] input, Class<T> clazz) {\n-        return gson.fromJson(CoreUtils.bomAwareToString(input, null), clazz);\n+    public <T> Mono<T> deserialize(InputStream stream, Class<T> clazz) {\n+        return Mono.fromCallable(() -> gson.fromJson(new InputStreamReader(stream, StandardCharsets.UTF_8), clazz));\n     }\n \n     @Override\n-    public <T> T deserializeTree(JsonNode jsonNode, Class<T> clazz) {\n-        return gson.fromJson(JsonNodeUtils.toGsonElement(jsonNode), clazz);\n+    public <T> Mono<T> deserializeTree(JsonNode jsonNode, Class<T> clazz) {\n+        return Mono.fromCallable(() -> gson.fromJson(JsonNodeUtils.toGsonElement(jsonNode), clazz));\n     }\n \n     @Override\n-    public byte[] serialize(Object value) {\n-        return gson.toJson(value).getBytes(StandardCharsets.UTF_8);\n+    public Mono<OutputStream> serialize(OutputStream stream, Object value) {\n+        return Mono.fromCallable(() -> {\n+            Writer writer = new OutputStreamWriter(stream, StandardCharsets.UTF_8);\n+            gson.toJson(value, writer);\n+            writer.flush();\n+\n+            return stream;\n+        });\n     }\n \n     @Override\n-    public byte[] serializeTree(JsonNode jsonNode) {\n-        return gson.toJson(JsonNodeUtils.toGsonElement(jsonNode)).getBytes(StandardCharsets.UTF_8);\n+    public Mono<OutputStream> serializeTree(OutputStream stream, JsonNode jsonNode) {\n+        return serialize(stream, JsonNodeUtils.toGsonElement(jsonNode));\n     }\n \n     @Override\n-    public JsonNode toTree(byte[] input) {\n-        return JsonNodeUtils.fromGsonElement(new JsonParser().parse(new String(input, StandardCharsets.UTF_8)));\n+    public Mono<JsonNode> toTree(InputStream stream) {\n+        return Mono.fromCallable(() -> JsonNodeUtils.fromGsonElement(\n+            new JsonParser().parse(new InputStreamReader(stream, StandardCharsets.UTF_8))));\n     }\n \n     @Override\n-    public JsonNode toTree(Object value) {\n-        return JsonNodeUtils.fromGsonElement(gson.toJsonTree(value));\n+    public Mono<JsonNode> toTree(Object value) {\n+        return Mono.fromCallable(() -> JsonNodeUtils.fromGsonElement(gson.toJsonTree(value)));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwNDMyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r434104324", "bodyText": "wondering which one is a more descriptive name for this \"core\" contract -  JsonValue or JsonPrimitive", "author": "anuchandy", "createdAt": "2020-06-02T18:50:35Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonValue.java", "diffHunk": "@@ -0,0 +1,164 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonValue;\n+import com.google.gson.JsonPrimitive;\n+\n+import java.util.Objects;\n+\n+/**\n+ * GSON specific implementation of {@link JsonValue}.\n+ */\n+public final class GsonJsonValue implements JsonValue {", "originalCommit": "f6a6b6d339e659fe7a12463588417bdce8b53486", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ2OTY1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435469652", "bodyText": "JsonPrimitive is more descriptive", "author": "srnagar", "createdAt": "2020-06-04T18:36:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwNDMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUzOTIyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435539221", "bodyText": "Will change to JsonPrimitive", "author": "alzimmermsft", "createdAt": "2020-06-04T20:47:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwNDMyNA=="}], "type": "inlineReview", "revised_code": {"commit": "9f8b5382d42bfecd471a09283de154ba3bca2b46", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonValue.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonValue.java\ndeleted file mode 100644\nindex 9776a557aab..00000000000\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonValue.java\n+++ /dev/null\n\n@@ -1,164 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.core.serializer.json.gson;\n-\n-import com.azure.core.util.serializer.JsonValue;\n-import com.google.gson.JsonPrimitive;\n-\n-import java.util.Objects;\n-\n-/**\n- * GSON specific implementation of {@link JsonValue}.\n- */\n-public final class GsonJsonValue implements JsonValue {\n-    private final JsonPrimitive jsonPrimitive;\n-\n-    /**\n-     * Constructs a {@link JsonValue} wrapping the passed boolean.\n-     *\n-     * @param value Boolean value to wrap.\n-     */\n-    public GsonJsonValue(boolean value) {\n-        this.jsonPrimitive = new JsonPrimitive(value);\n-    }\n-\n-    /**\n-     * Constructs a {@link JsonValue} wrapping the passed double.\n-     *\n-     * @param value Double value to wrap.\n-     */\n-    public GsonJsonValue(double value) {\n-        this((Number) value);\n-    }\n-\n-    /**\n-     * Constructs a {@link JsonValue} wrapping the passed float.\n-     *\n-     * @param value Float value to wrap.\n-     */\n-    public GsonJsonValue(float value) {\n-        this((Number) value);\n-    }\n-\n-    /**\n-     * Constructs a {@link JsonValue} wrapping the passed int.\n-     *\n-     * @param value Int value to wrap.\n-     */\n-    public GsonJsonValue(int value) {\n-        this((Number) value);\n-    }\n-\n-    /**\n-     * Constructs a {@link JsonValue} wrapping the passed long.\n-     *\n-     * @param value Long value to wrap.\n-     */\n-    public GsonJsonValue(long value) {\n-        this((Number) value);\n-    }\n-\n-    /**\n-     * Constructs a {@link JsonValue} wrapping the passed short.\n-     *\n-     * @param value Short value to wrap.\n-     */\n-    public GsonJsonValue(short value) {\n-        this((Number) value);\n-    }\n-\n-    private GsonJsonValue(Number number) {\n-        this.jsonPrimitive = new JsonPrimitive(number);\n-    }\n-\n-    /**\n-     * Constructs a {@link JsonValue} wrapping the passed string.\n-     *\n-     * @param value String value to wrap.\n-     */\n-    public GsonJsonValue(String value) {\n-        this.jsonPrimitive = new JsonPrimitive(value);\n-    }\n-\n-    /**\n-     * Constructs a {@link JsonValue} backed by the passed GSON {@link JsonPrimitive}.\n-     *\n-     * @param jsonPrimitive The backing GSON {@link JsonPrimitive}.\n-     */\n-    public GsonJsonValue(JsonPrimitive jsonPrimitive) {\n-        this.jsonPrimitive = jsonPrimitive;\n-    }\n-\n-    JsonPrimitive getJsonPrimitive() {\n-        return jsonPrimitive;\n-    }\n-\n-    @Override\n-    public boolean isBoolean() {\n-        return jsonPrimitive.isBoolean();\n-    }\n-\n-    @Override\n-    public boolean getBoolean() {\n-        return jsonPrimitive.isBoolean();\n-    }\n-\n-    @Override\n-    public boolean isNumber() {\n-        return jsonPrimitive.isNumber();\n-    }\n-\n-    @Override\n-    public double getDouble() {\n-        return jsonPrimitive.getAsDouble();\n-    }\n-\n-    @Override\n-    public float getFloat() {\n-        return jsonPrimitive.getAsFloat();\n-    }\n-\n-    @Override\n-    public int getInteger() {\n-        return jsonPrimitive.getAsInt();\n-    }\n-\n-    @Override\n-    public long getLong() {\n-        return jsonPrimitive.getAsLong();\n-    }\n-\n-    @Override\n-    public short getShort() {\n-        return jsonPrimitive.getAsShort();\n-    }\n-\n-    @Override\n-    public boolean isString() {\n-        return jsonPrimitive.isString();\n-    }\n-\n-    @Override\n-    public String getString() {\n-        return jsonPrimitive.getAsString();\n-    }\n-\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (obj == this) {\n-            return true;\n-        }\n-\n-        if (!(obj instanceof GsonJsonValue)) {\n-            return false;\n-        }\n-\n-        return Objects.equals(jsonPrimitive, ((GsonJsonValue) obj).jsonPrimitive);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return jsonPrimitive.hashCode();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwNjIwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r434106207", "bodyText": "I wish there is a good place to have these convertor util methods so that it's more discoverable. Not sure, may be as static in GsonJsonSerializer type, just a thought.", "author": "anuchandy", "createdAt": "2020-06-02T18:53:53Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/JsonNodeUtils.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonNode;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * Helper methods for converting between Azure Core and GSON types.\n+ */\n+final class JsonNodeUtils {\n+\n+    /**\n+     * Converts an Azure Core {@link JsonNode} into a GSON {@link JsonElement}.\n+     *\n+     * @param jsonNode The Azure Core {@link JsonNode}.\n+     * @return The corresponding GSON {@link JsonElement}.\n+     * @throws IllegalArgumentException If the {@link JsonNode} cannot be converted to a {@link JsonElement}.\n+     */\n+    public static JsonElement toGsonElement(JsonNode jsonNode) {", "originalCommit": "f6a6b6d339e659fe7a12463588417bdce8b53486", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNzczOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435627739", "bodyText": "This makes sense to me, right now these are package private. This could also be added to the interface in a more generic way, such as taking Object as the value type.", "author": "alzimmermsft", "createdAt": "2020-06-05T00:27:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwNjIwNw=="}], "type": "inlineReview", "revised_code": {"commit": "9f8b5382d42bfecd471a09283de154ba3bca2b46", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/JsonNodeUtils.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/JsonNodeUtils.java\nindex cc3f8654541..d62150476ac 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/JsonNodeUtils.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/JsonNodeUtils.java\n\n@@ -3,6 +3,7 @@\n \n package com.azure.core.serializer.json.gson;\n \n+import com.azure.core.util.logging.ClientLogger;\n import com.azure.core.util.serializer.JsonNode;\n import com.google.gson.JsonElement;\n \n"}}, {"oid": "6df9fcbe72124f64ea3c965b1f1ff7ea5392d7d3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6df9fcbe72124f64ea3c965b1f1ff7ea5392d7d3", "message": "Merge branch 'master' into AzCore_JSONStreamingInterface", "committedDate": "2020-06-02T22:07:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ2NzcwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435467707", "bodyText": "Not sure if these overridden methods will inherit JavaDoc automatically. Safe to add @inheritdoc explicitly.", "author": "srnagar", "createdAt": "2020-06-04T18:34:09Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonNode;\n+import com.azure.core.util.serializer.JsonObject;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+/**\n+ * GSON specific implementation of {@link JsonObject}.\n+ */\n+public final class GsonJsonObject implements JsonObject {\n+    private final com.google.gson.JsonObject jsonObject;\n+\n+    /**\n+     * Constructs a {@link JsonObject} backed by an empty GSON {@link com.google.gson.JsonObject}.\n+     */\n+    public GsonJsonObject() {\n+        this.jsonObject = new com.google.gson.JsonObject();\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonObject} backed by the passed GSON {@link com.google.gson.JsonObject}.\n+     *\n+     * @param jsonObject The backing GSON {@link com.google.gson.JsonObject}.\n+     */\n+    public GsonJsonObject(com.google.gson.JsonObject jsonObject) {\n+        this.jsonObject = jsonObject;\n+    }\n+\n+    com.google.gson.JsonObject getJsonObject() {\n+        return jsonObject;\n+    }\n+\n+    @Override\n+    public Stream<Map.Entry<String, JsonNode>> fields() {\n+        return jsonObject.entrySet().stream().map(entry ->\n+            new AbstractMap.SimpleEntry<>(entry.getKey(), JsonNodeUtils.fromGsonElement(entry.getValue())));\n+    }\n+\n+    @Override\n+    public Stream<String> fieldNames() {", "originalCommit": "f6a6b6d339e659fe7a12463588417bdce8b53486", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNzA4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435627087", "bodyText": "Javadocs are implicitly inherited except from Object.", "author": "alzimmermsft", "createdAt": "2020-06-05T00:24:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ2NzcwNw=="}], "type": "inlineReview", "revised_code": {"commit": "038abf5962b9a2e94cb2b0745fb0ba00fbeea804", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java\nindex dbc6b519488..d41c8b603ad 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java\n\n@@ -5,6 +5,7 @@ package com.azure.core.serializer.json.gson;\n \n import com.azure.core.util.serializer.JsonNode;\n import com.azure.core.util.serializer.JsonObject;\n+import com.google.gson.JsonElement;\n \n import java.util.AbstractMap;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3MjQwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435472409", "bodyText": "These exceptions should be logged before throwing.", "author": "srnagar", "createdAt": "2020-06-04T18:40:22Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/JsonNodeUtils.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonNode;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * Helper methods for converting between Azure Core and GSON types.\n+ */\n+final class JsonNodeUtils {\n+\n+    /**\n+     * Converts an Azure Core {@link JsonNode} into a GSON {@link JsonElement}.\n+     *\n+     * @param jsonNode The Azure Core {@link JsonNode}.\n+     * @return The corresponding GSON {@link JsonElement}.\n+     * @throws IllegalArgumentException If the {@link JsonNode} cannot be converted to a {@link JsonElement}.\n+     */\n+    public static JsonElement toGsonElement(JsonNode jsonNode) {\n+        if (jsonNode.isArray()) {\n+            if (jsonNode instanceof GsonJsonArray) {\n+                return ((GsonJsonArray) jsonNode).getJsonArray();\n+            }\n+\n+            throw new IllegalArgumentException(\"JsonNode is an array but isn't GsonJsonArray.\");\n+        } else if (jsonNode.isNull()) {\n+            if (jsonNode instanceof GsonJsonNull) {\n+                return ((GsonJsonNull) jsonNode).getJsonNull();\n+            }\n+\n+            throw new IllegalArgumentException(\"JsonNode is a null but isn't GsonJsonNull.\");\n+        } else if (jsonNode.isObject()) {\n+            if (jsonNode instanceof GsonJsonObject) {\n+                return ((GsonJsonObject) jsonNode).getJsonObject();\n+            }\n+\n+            throw new IllegalArgumentException(\"JsonNode is an array but isn't GsonJsonObject.\");", "originalCommit": "f6a6b6d339e659fe7a12463588417bdce8b53486", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyMDUzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435620539", "bodyText": "Will add logging before throwing.", "author": "alzimmermsft", "createdAt": "2020-06-04T23:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3MjQwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "9f8b5382d42bfecd471a09283de154ba3bca2b46", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/JsonNodeUtils.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/JsonNodeUtils.java\nindex cc3f8654541..d62150476ac 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/JsonNodeUtils.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/JsonNodeUtils.java\n\n@@ -3,6 +3,7 @@\n \n package com.azure.core.serializer.json.gson;\n \n+import com.azure.core.util.logging.ClientLogger;\n import com.azure.core.util.serializer.JsonNode;\n import com.google.gson.JsonElement;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3Mzk4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435473988", "bodyText": "Add some tests to include UTF-8 chars.", "author": "srnagar", "createdAt": "2020-06-04T18:42:13Z", "path": "sdk/core/azure-core-serializer-json-gson/src/test/java/com/azure/core/serializer/json/gson/JsonNodeUtilsTests.java", "diffHunk": "@@ -0,0 +1,170 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonNode;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonPrimitive;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.mockito.Mockito;\n+\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Tests {@link JsonNodeUtils}.\n+ */\n+public class JsonNodeUtilsTests {\n+    @AfterEach\n+    public void cleanupInlineMocks() {\n+        Mockito.framework().clearInlineMocks();\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"toGsonElementSupplier\")\n+    public void toGsonElement(JsonNode jsonNode, JsonElement expected) {\n+        assertEquals(expected, JsonNodeUtils.toGsonElement(jsonNode));\n+    }\n+\n+    private static Stream<Arguments> toGsonElementSupplier() {\n+        JsonArray jsonArray = new JsonArray();\n+        JsonNull jsonNull = JsonNull.INSTANCE;\n+        JsonObject jsonObject = new JsonObject();\n+        JsonPrimitive booleanNode = new JsonPrimitive(true);\n+        JsonPrimitive doubleNode = new JsonPrimitive(42D);\n+        JsonPrimitive floatNode = new JsonPrimitive(42F);\n+        JsonPrimitive intNode = new JsonPrimitive(42);\n+        JsonPrimitive longNode = new JsonPrimitive(42L);\n+        JsonPrimitive shortNode = new JsonPrimitive((short) 42);\n+        JsonPrimitive textNode = new JsonPrimitive(\"42\");\n+\n+        return Stream.of(\n+            Arguments.of(new GsonJsonArray(jsonArray), jsonArray),\n+            Arguments.of(new GsonJsonArray(), jsonArray),\n+            Arguments.of(new GsonJsonNull(jsonNull), jsonNull),\n+            Arguments.of(new GsonJsonNull(), jsonNull),\n+            Arguments.of(new GsonJsonObject(jsonObject), jsonObject),\n+            Arguments.of(new GsonJsonObject(), jsonObject),\n+            Arguments.of(new GsonJsonValue(booleanNode), booleanNode),\n+            Arguments.of(new GsonJsonValue(true), booleanNode),\n+            Arguments.of(new GsonJsonValue(doubleNode), doubleNode),\n+            Arguments.of(new GsonJsonValue(42D), doubleNode),\n+            Arguments.of(new GsonJsonValue(floatNode), floatNode),\n+            Arguments.of(new GsonJsonValue(42F), floatNode),\n+            Arguments.of(new GsonJsonValue(intNode), intNode),\n+            Arguments.of(new GsonJsonValue(42), intNode),\n+            Arguments.of(new GsonJsonValue(longNode), longNode),\n+            Arguments.of(new GsonJsonValue(42L), longNode),\n+            Arguments.of(new GsonJsonValue(shortNode), shortNode),\n+            Arguments.of(new GsonJsonValue((short) 42), shortNode),\n+            Arguments.of(new GsonJsonValue(textNode), textNode),\n+            Arguments.of(new GsonJsonValue(\"42\"), textNode)", "originalCommit": "f6a6b6d339e659fe7a12463588417bdce8b53486", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzNjIyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435636224", "bodyText": "Added", "author": "alzimmermsft", "createdAt": "2020-06-05T01:03:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3Mzk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "9f8b5382d42bfecd471a09283de154ba3bca2b46", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/test/java/com/azure/core/serializer/json/gson/JsonNodeUtilsTests.java b/sdk/core/azure-core-serializer-json-gson/src/test/java/com/azure/core/serializer/json/gson/JsonNodeUtilsTests.java\nindex b86b339fd5e..08ed3df0bb2 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/test/java/com/azure/core/serializer/json/gson/JsonNodeUtilsTests.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/test/java/com/azure/core/serializer/json/gson/JsonNodeUtilsTests.java\n\n@@ -53,24 +53,23 @@ public class JsonNodeUtilsTests {\n         return Stream.of(\n             Arguments.of(new GsonJsonArray(jsonArray), jsonArray),\n             Arguments.of(new GsonJsonArray(), jsonArray),\n-            Arguments.of(new GsonJsonNull(jsonNull), jsonNull),\n-            Arguments.of(new GsonJsonNull(), jsonNull),\n+            Arguments.of(GsonJsonNull.INSTANCE, jsonNull),\n             Arguments.of(new GsonJsonObject(jsonObject), jsonObject),\n             Arguments.of(new GsonJsonObject(), jsonObject),\n-            Arguments.of(new GsonJsonValue(booleanNode), booleanNode),\n-            Arguments.of(new GsonJsonValue(true), booleanNode),\n-            Arguments.of(new GsonJsonValue(doubleNode), doubleNode),\n-            Arguments.of(new GsonJsonValue(42D), doubleNode),\n-            Arguments.of(new GsonJsonValue(floatNode), floatNode),\n-            Arguments.of(new GsonJsonValue(42F), floatNode),\n-            Arguments.of(new GsonJsonValue(intNode), intNode),\n-            Arguments.of(new GsonJsonValue(42), intNode),\n-            Arguments.of(new GsonJsonValue(longNode), longNode),\n-            Arguments.of(new GsonJsonValue(42L), longNode),\n-            Arguments.of(new GsonJsonValue(shortNode), shortNode),\n-            Arguments.of(new GsonJsonValue((short) 42), shortNode),\n-            Arguments.of(new GsonJsonValue(textNode), textNode),\n-            Arguments.of(new GsonJsonValue(\"42\"), textNode)\n+            Arguments.of(new GsonJsonPrimitive(booleanNode), booleanNode),\n+            Arguments.of(new GsonJsonPrimitive(true), booleanNode),\n+            Arguments.of(new GsonJsonPrimitive(doubleNode), doubleNode),\n+            Arguments.of(new GsonJsonPrimitive(42D), doubleNode),\n+            Arguments.of(new GsonJsonPrimitive(floatNode), floatNode),\n+            Arguments.of(new GsonJsonPrimitive(42F), floatNode),\n+            Arguments.of(new GsonJsonPrimitive(intNode), intNode),\n+            Arguments.of(new GsonJsonPrimitive(42), intNode),\n+            Arguments.of(new GsonJsonPrimitive(longNode), longNode),\n+            Arguments.of(new GsonJsonPrimitive(42L), longNode),\n+            Arguments.of(new GsonJsonPrimitive(shortNode), shortNode),\n+            Arguments.of(new GsonJsonPrimitive((short) 42), shortNode),\n+            Arguments.of(new GsonJsonPrimitive(textNode), textNode),\n+            Arguments.of(new GsonJsonPrimitive(\"42\"), textNode)\n         );\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NDQyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435484420", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return {@link Iterator} for all elements in the array.\n          \n          \n            \n                 * @return {@link Stream} for all elements in the array.", "author": "srnagar", "createdAt": "2020-06-04T18:59:40Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonArray.java", "diffHunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.serializer;\n+\n+import java.util.Iterator;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Interface that represents a JSON array.\n+ */\n+public interface JsonArray extends JsonNode {\n+    @Override\n+    default boolean isArray() {\n+        return true;\n+    }\n+\n+    /**\n+     * Adds a {@link JsonNode} to the end of this array.\n+     *\n+     * @param jsonNode The {@link JsonNode} to add to the array.\n+     * @return The updated {@link JsonArray} object.\n+     */\n+    JsonArray add(JsonNode jsonNode);\n+\n+    /**\n+     * Clears all values in the array.\n+     *\n+     * @return The updated {@link JsonArray} object.\n+     */\n+    JsonArray clear();\n+\n+    /**\n+     * @return {@link Iterator} for all elements in the array.", "originalCommit": "f6a6b6d339e659fe7a12463588417bdce8b53486", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0NTIwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435545202", "bodyText": "Good catch, I originally had this as an Iterator API but found it difficult to work with, will update docs.", "author": "alzimmermsft", "createdAt": "2020-06-04T20:58:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NDQyMA=="}], "type": "inlineReview", "revised_code": {"commit": "9f8b5382d42bfecd471a09283de154ba3bca2b46", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonArray.java b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonArray.java\nindex db941764569..3709a319d5d 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonArray.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonArray.java\n\n@@ -3,7 +3,6 @@\n \n package com.azure.core.util.serializer;\n \n-import java.util.Iterator;\n import java.util.stream.Stream;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NTEzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435485133", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return {@link Iterator} for all field names in the object.\n          \n          \n            \n                 * @return {@link Stream} for all field names in the object.", "author": "srnagar", "createdAt": "2020-06-04T19:00:55Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonObject.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.serializer;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Interface that represents a JSON object.\n+ */\n+public interface JsonObject extends JsonNode {\n+    @Override\n+    default boolean isObject() {\n+        return true;\n+    }\n+\n+    /**\n+     * @return {@link Iterator} for all fields in the object.\n+     */\n+    Stream<Map.Entry<String, JsonNode>> fields();\n+\n+    /**\n+     * @return {@link Iterator} for all field names in the object.", "originalCommit": "f6a6b6d339e659fe7a12463588417bdce8b53486", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f8b5382d42bfecd471a09283de154ba3bca2b46", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonObject.java b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonObject.java\nindex 088bd4272fd..7805ec94fdf 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonObject.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonObject.java\n\n@@ -3,7 +3,6 @@\n \n package com.azure.core.util.serializer;\n \n-import java.util.Iterator;\n import java.util.Map;\n import java.util.stream.Stream;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NTIzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435485234", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return {@link Iterator} for all fields in the object.\n          \n          \n            \n                 * @return {@link Stream} for all fields in the object.", "author": "srnagar", "createdAt": "2020-06-04T19:01:04Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonObject.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.serializer;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Interface that represents a JSON object.\n+ */\n+public interface JsonObject extends JsonNode {\n+    @Override\n+    default boolean isObject() {\n+        return true;\n+    }\n+\n+    /**\n+     * @return {@link Iterator} for all fields in the object.", "originalCommit": "f6a6b6d339e659fe7a12463588417bdce8b53486", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f8b5382d42bfecd471a09283de154ba3bca2b46", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonObject.java b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonObject.java\nindex 088bd4272fd..7805ec94fdf 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonObject.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonObject.java\n\n@@ -3,7 +3,6 @@\n \n package com.azure.core.util.serializer;\n \n-import java.util.Iterator;\n import java.util.Map;\n import java.util.stream.Stream;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NjQ5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435486490", "bodyText": "Do we need these *Tree methods?", "author": "srnagar", "createdAt": "2020-06-04T19:03:29Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializer.java", "diffHunk": "@@ -0,0 +1,63 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.serializer;\n+\n+/**\n+ * Generic interface covering basic JSON serialization and deserialization methods.\n+ */\n+public interface JsonSerializer extends ObjectSerializer {\n+    /**\n+     * Reads a JSON byte array into its object representation.\n+     *\n+     * @param input JSON byte array.\n+     * @param clazz {@link Class} representing the object.\n+     * @param <T> Type of the object.\n+     * @return The object represented by the deserialized JSON byte array.\n+     */\n+    @Override\n+    <T> T deserialize(byte[] input, Class<T> clazz);\n+\n+    /**\n+     * Reads a JSON tree into its object representation.\n+     *\n+     * @param jsonNode The JSON tree.\n+     * @param clazz {@link Class} representing the object.\n+     * @param <T> Type of the object.\n+     * @return The object represented by the deserialized JSON tree.\n+     */\n+    <T> T deserializeTree(JsonNode jsonNode, Class<T> clazz);", "originalCommit": "f6a6b6d339e659fe7a12463588417bdce8b53486", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyMTQ1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435621454", "bodyText": "They aren't explicitly needed but serializing our JsonNode won't work too cleanly as it is a wrapper around an implementation node.", "author": "alzimmermsft", "createdAt": "2020-06-05T00:01:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NjQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1MTQ5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r436151498", "bodyText": "I don't know if this has to be part of the interface yet. I also don't understand how users would use this method. So, if there's no strong reason to keep it, we can remove it from the interface to keep it as focused as possible.", "author": "srnagar", "createdAt": "2020-06-05T20:34:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NjQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzODUzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r444438532", "bodyText": "The node/tree APIs will be required in a few scenarios, Cosmos and Search have known examples. In the Cosmos and Search scenarios customer object JSON is a property within a service response type. Handling for using the pluggable serialization layer would roughly be the following:\n\nRead the service response into a tree representation.\nExtract the known property that contains customer object JSON.\nConvert the node back into JSON.\nRead the JSON using the pluggable serialization layer.\n\nThis may require additional changes to response deserialization in other areas in Azure Core. There also may be the opportunity to bypass this step if we are known to be using the default implementation or if it is possible to extract the JSON element directly without the need to read the entire tree.", "author": "alzimmermsft", "createdAt": "2020-06-23T18:54:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NjQ5MA=="}], "type": "inlineReview", "revised_code": {"commit": "733b205237d450b22a80d437263a55107c00f0ca", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializer.java b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializer.java\nindex a934581b1a3..8da2af94638 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializer.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializer.java\n\n@@ -3,20 +3,25 @@\n \n package com.azure.core.util.serializer;\n \n+import reactor.core.publisher.Mono;\n+\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n /**\n  * Generic interface covering basic JSON serialization and deserialization methods.\n  */\n public interface JsonSerializer extends ObjectSerializer {\n     /**\n-     * Reads a JSON byte array into its object representation.\n+     * Reads a JSON stream into its object representation.\n      *\n-     * @param input JSON byte array.\n+     * @param stream JSON stream.\n      * @param clazz {@link Class} representing the object.\n      * @param <T> Type of the object.\n-     * @return The object represented by the deserialized JSON byte array.\n+     * @return The object represented by the deserialized JSON stream.\n      */\n     @Override\n-    <T> T deserialize(byte[] input, Class<T> clazz);\n+    <T> Mono<T> deserialize(InputStream stream, Class<T> clazz);\n \n     /**\n      * Reads a JSON tree into its object representation.\n"}}, {"oid": "ce3937d57b22077e610c622aff23ec4d57af4890", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ce3937d57b22077e610c622aff23ec4d57af4890", "message": "Merge branch 'master' into AzCore_JSONStreamingInterface", "committedDate": "2020-06-05T00:11:43Z", "type": "commit"}, {"oid": "9f8b5382d42bfecd471a09283de154ba3bca2b46", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9f8b5382d42bfecd471a09283de154ba3bca2b46", "message": "Renamed JsonValue to JsonPrimitive, removed JsonNull implementation constructors for constants, added exception logging, fixed Javadocs", "committedDate": "2020-06-05T00:42:44Z", "type": "commit"}, {"oid": "49ef0c09fb26591eb96801623654ba65b750f2a2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/49ef0c09fb26591eb96801623654ba65b750f2a2", "message": "Add UTF-8 string tests", "committedDate": "2020-06-05T00:59:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzODYwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435638602", "bodyText": "jsonObject.get(name) can return null if element does not exist , we might want to ensure it's not causing NPE in JsonNodeUtils", "author": "anuchandy", "createdAt": "2020-06-05T01:12:56Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonNode;\n+import com.azure.core.util.serializer.JsonObject;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+/**\n+ * GSON specific implementation of {@link JsonObject}.\n+ */\n+public final class GsonJsonObject implements JsonObject {\n+    private final com.google.gson.JsonObject jsonObject;\n+\n+    /**\n+     * Constructs a {@link JsonObject} backed by an empty GSON {@link com.google.gson.JsonObject}.\n+     */\n+    public GsonJsonObject() {\n+        this.jsonObject = new com.google.gson.JsonObject();\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonObject} backed by the passed GSON {@link com.google.gson.JsonObject}.\n+     *\n+     * @param jsonObject The backing GSON {@link com.google.gson.JsonObject}.\n+     */\n+    public GsonJsonObject(com.google.gson.JsonObject jsonObject) {\n+        this.jsonObject = jsonObject;\n+    }\n+\n+    com.google.gson.JsonObject getJsonObject() {\n+        return jsonObject;\n+    }\n+\n+    @Override\n+    public Stream<Map.Entry<String, JsonNode>> fields() {\n+        return jsonObject.entrySet().stream().map(entry ->\n+            new AbstractMap.SimpleEntry<>(entry.getKey(), JsonNodeUtils.fromGsonElement(entry.getValue())));\n+    }\n+\n+    @Override\n+    public Stream<String> fieldNames() {\n+        return jsonObject.keySet().stream();\n+    }\n+\n+    @Override\n+    public JsonNode get(String name) {\n+        return JsonNodeUtils.fromGsonElement(jsonObject.get(name));", "originalCommit": "9f8b5382d42bfecd471a09283de154ba3bca2b46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA1NDE3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r436054177", "bodyText": "Will update locations where the underlying implementation could return null and will return null in those spots.", "author": "alzimmermsft", "createdAt": "2020-06-05T17:14:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzODYwMg=="}], "type": "inlineReview", "revised_code": {"commit": "038abf5962b9a2e94cb2b0745fb0ba00fbeea804", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java\nindex dbc6b519488..d41c8b603ad 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java\n\n@@ -5,6 +5,7 @@ package com.azure.core.serializer.json.gson;\n \n import com.azure.core.util.serializer.JsonNode;\n import com.azure.core.util.serializer.JsonObject;\n+import com.google.gson.JsonElement;\n \n import java.util.AbstractMap;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0MDI3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435640273", "bodyText": "looking at the gson code base, remove also could return null if element not exists hence we might want to guard aganist NPE here as well.", "author": "anuchandy", "createdAt": "2020-06-05T01:20:32Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonNode;\n+import com.azure.core.util.serializer.JsonObject;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+/**\n+ * GSON specific implementation of {@link JsonObject}.\n+ */\n+public final class GsonJsonObject implements JsonObject {\n+    private final com.google.gson.JsonObject jsonObject;\n+\n+    /**\n+     * Constructs a {@link JsonObject} backed by an empty GSON {@link com.google.gson.JsonObject}.\n+     */\n+    public GsonJsonObject() {\n+        this.jsonObject = new com.google.gson.JsonObject();\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonObject} backed by the passed GSON {@link com.google.gson.JsonObject}.\n+     *\n+     * @param jsonObject The backing GSON {@link com.google.gson.JsonObject}.\n+     */\n+    public GsonJsonObject(com.google.gson.JsonObject jsonObject) {\n+        this.jsonObject = jsonObject;\n+    }\n+\n+    com.google.gson.JsonObject getJsonObject() {\n+        return jsonObject;\n+    }\n+\n+    @Override\n+    public Stream<Map.Entry<String, JsonNode>> fields() {\n+        return jsonObject.entrySet().stream().map(entry ->\n+            new AbstractMap.SimpleEntry<>(entry.getKey(), JsonNodeUtils.fromGsonElement(entry.getValue())));\n+    }\n+\n+    @Override\n+    public Stream<String> fieldNames() {\n+        return jsonObject.keySet().stream();\n+    }\n+\n+    @Override\n+    public JsonNode get(String name) {\n+        return JsonNodeUtils.fromGsonElement(jsonObject.get(name));\n+    }\n+\n+    @Override\n+    public boolean has(String name) {\n+        return jsonObject.has(name);\n+    }\n+\n+    @Override\n+    public JsonObject put(String name, JsonNode jsonNode) {\n+        jsonObject.add(name, JsonNodeUtils.toGsonElement(jsonNode));\n+        return this;\n+    }\n+\n+    @Override\n+    public JsonNode remove(String name) {\n+        return JsonNodeUtils.fromGsonElement(jsonObject.remove(name));", "originalCommit": "49ef0c09fb26591eb96801623654ba65b750f2a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "038abf5962b9a2e94cb2b0745fb0ba00fbeea804", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java\nindex dbc6b519488..d41c8b603ad 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java\n\n@@ -5,6 +5,7 @@ package com.azure.core.serializer.json.gson;\n \n import com.azure.core.util.serializer.JsonNode;\n import com.azure.core.util.serializer.JsonObject;\n+import com.google.gson.JsonElement;\n \n import java.util.AbstractMap;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0MDQ4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435640482", "bodyText": "see the previous comment about JsonObject::remove.", "author": "anuchandy", "createdAt": "2020-06-05T01:21:29Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonNode;\n+import com.azure.core.util.serializer.JsonObject;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+/**\n+ * GSON specific implementation of {@link JsonObject}.\n+ */\n+public final class GsonJsonObject implements JsonObject {\n+    private final com.google.gson.JsonObject jsonObject;\n+\n+    /**\n+     * Constructs a {@link JsonObject} backed by an empty GSON {@link com.google.gson.JsonObject}.\n+     */\n+    public GsonJsonObject() {\n+        this.jsonObject = new com.google.gson.JsonObject();\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonObject} backed by the passed GSON {@link com.google.gson.JsonObject}.\n+     *\n+     * @param jsonObject The backing GSON {@link com.google.gson.JsonObject}.\n+     */\n+    public GsonJsonObject(com.google.gson.JsonObject jsonObject) {\n+        this.jsonObject = jsonObject;\n+    }\n+\n+    com.google.gson.JsonObject getJsonObject() {\n+        return jsonObject;\n+    }\n+\n+    @Override\n+    public Stream<Map.Entry<String, JsonNode>> fields() {\n+        return jsonObject.entrySet().stream().map(entry ->\n+            new AbstractMap.SimpleEntry<>(entry.getKey(), JsonNodeUtils.fromGsonElement(entry.getValue())));\n+    }\n+\n+    @Override\n+    public Stream<String> fieldNames() {\n+        return jsonObject.keySet().stream();\n+    }\n+\n+    @Override\n+    public JsonNode get(String name) {\n+        return JsonNodeUtils.fromGsonElement(jsonObject.get(name));\n+    }\n+\n+    @Override\n+    public boolean has(String name) {\n+        return jsonObject.has(name);\n+    }\n+\n+    @Override\n+    public JsonObject put(String name, JsonNode jsonNode) {\n+        jsonObject.add(name, JsonNodeUtils.toGsonElement(jsonNode));\n+        return this;\n+    }\n+\n+    @Override\n+    public JsonNode remove(String name) {\n+        return JsonNodeUtils.fromGsonElement(jsonObject.remove(name));\n+    }\n+\n+    @Override\n+    public JsonNode set(String name, JsonNode jsonNode) {\n+        JsonNode oldValue = JsonNodeUtils.fromGsonElement(jsonObject.remove(name));", "originalCommit": "49ef0c09fb26591eb96801623654ba65b750f2a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "038abf5962b9a2e94cb2b0745fb0ba00fbeea804", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java\nindex dbc6b519488..d41c8b603ad 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonObject.java\n\n@@ -5,6 +5,7 @@ package com.azure.core.serializer.json.gson;\n \n import com.azure.core.util.serializer.JsonNode;\n import com.azure.core.util.serializer.JsonObject;\n+import com.google.gson.JsonElement;\n \n import java.util.AbstractMap;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0MDk2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435640964", "bodyText": "Should we do a null check on all ctrs of all core.json type that takes gson types (same for jackson)? later methods in these types assume the instance it wraps is not null", "author": "anuchandy", "createdAt": "2020-06-05T01:23:45Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonArray.java", "diffHunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonArray;\n+import com.azure.core.util.serializer.JsonNode;\n+import com.google.gson.JsonElement;\n+\n+import java.util.Objects;\n+import java.util.Spliterator;\n+import java.util.Spliterators;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * GSON specific implementation of {@link JsonArray}.\n+ */\n+public final class GsonJsonArray implements JsonArray {\n+    private final com.google.gson.JsonArray jsonArray;\n+\n+    /**\n+     * Constructs a {@link JsonArray} backed by an empty GSON {@link com.google.gson.JsonArray}.\n+     */\n+    public GsonJsonArray() {\n+        this.jsonArray = new com.google.gson.JsonArray();\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonArray} backed by the passed GSON {@link com.google.gson.JsonArray}.\n+     *\n+     * @param jsonArray The backing GSON {@link com.google.gson.JsonArray}.\n+     */\n+    public GsonJsonArray(com.google.gson.JsonArray jsonArray) {\n+        this.jsonArray = jsonArray;", "originalCommit": "49ef0c09fb26591eb96801623654ba65b750f2a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA1NDQ1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r436054453", "bodyText": "Will add Objects.requireNonNull checks to the constructors.", "author": "alzimmermsft", "createdAt": "2020-06-05T17:14:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0MDk2NA=="}], "type": "inlineReview", "revised_code": {"commit": "b7f8aefda60419e0ff1500a31df7bb8926127a75", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonArray.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonArray.java\nindex a159cdca222..5d5fc8280db 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonArray.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonArray.java\n\n@@ -3,6 +3,7 @@\n \n package com.azure.core.serializer.json.gson;\n \n+import com.azure.core.util.logging.ClientLogger;\n import com.azure.core.util.serializer.JsonArray;\n import com.azure.core.util.serializer.JsonNode;\n import com.google.gson.JsonElement;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0MzQ3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435643479", "bodyText": "I guess getAsBoolean?", "author": "anuchandy", "createdAt": "2020-06-05T01:34:31Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonPrimitive.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.serializer.JsonPrimitive;\n+\n+import java.util.Objects;\n+\n+/**\n+ * GSON specific implementation of {@link JsonPrimitive}.\n+ */\n+public final class GsonJsonPrimitive implements JsonPrimitive {\n+    private final com.google.gson.JsonPrimitive jsonPrimitive;\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} wrapping the passed boolean.\n+     *\n+     * @param value Boolean value to wrap.\n+     */\n+    public GsonJsonPrimitive(boolean value) {\n+        this.jsonPrimitive = new com.google.gson.JsonPrimitive(value);\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} wrapping the passed double.\n+     *\n+     * @param value Double value to wrap.\n+     */\n+    public GsonJsonPrimitive(double value) {\n+        this((Number) value);\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} wrapping the passed float.\n+     *\n+     * @param value Float value to wrap.\n+     */\n+    public GsonJsonPrimitive(float value) {\n+        this((Number) value);\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} wrapping the passed int.\n+     *\n+     * @param value Int value to wrap.\n+     */\n+    public GsonJsonPrimitive(int value) {\n+        this((Number) value);\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} wrapping the passed long.\n+     *\n+     * @param value Long value to wrap.\n+     */\n+    public GsonJsonPrimitive(long value) {\n+        this((Number) value);\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} wrapping the passed short.\n+     *\n+     * @param value Short value to wrap.\n+     */\n+    public GsonJsonPrimitive(short value) {\n+        this((Number) value);\n+    }\n+\n+    private GsonJsonPrimitive(Number number) {\n+        this.jsonPrimitive = new com.google.gson.JsonPrimitive(number);\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} wrapping the passed string.\n+     *\n+     * @param value String value to wrap.\n+     */\n+    public GsonJsonPrimitive(String value) {\n+        this.jsonPrimitive = new com.google.gson.JsonPrimitive(value);\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonPrimitive} backed by the passed GSON {@link com.google.gson.JsonPrimitive}.\n+     *\n+     * @param jsonPrimitive The backing GSON {@link com.google.gson.JsonPrimitive}.\n+     */\n+    public GsonJsonPrimitive(com.google.gson.JsonPrimitive jsonPrimitive) {\n+        this.jsonPrimitive = jsonPrimitive;\n+    }\n+\n+    com.google.gson.JsonPrimitive getJsonPrimitive() {\n+        return jsonPrimitive;\n+    }\n+\n+    @Override\n+    public boolean isBoolean() {\n+        return jsonPrimitive.isBoolean();\n+    }\n+\n+    @Override\n+    public boolean getBoolean() {\n+        return jsonPrimitive.isBoolean();", "originalCommit": "49ef0c09fb26591eb96801623654ba65b750f2a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA1NDcwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r436054703", "bodyText": "I'm indifferent on getAsBoolean or asBoolean. Both are better than getBoolean.", "author": "alzimmermsft", "createdAt": "2020-06-05T17:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0MzQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxNDY3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r436214673", "bodyText": "actually I mean the concrete method we're calling inside the GsonJsonPrimitive::getBoolean() method\nwe do return jsonPrimitive.isBoolean(); but should it be return jsonPrimitive.getAsBoolean();? like other getDouble, getFloat methods or I'm missing some context?", "author": "anuchandy", "createdAt": "2020-06-06T00:24:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0MzQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNDM0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r436224342", "bodyText": "never mind, I see this is addressed in the latest commit.", "author": "anuchandy", "createdAt": "2020-06-06T01:21:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0MzQ3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ac4c7e91cbd82c647a13579bea5547c58a8c3f4", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonPrimitive.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonPrimitive.java\nindex ebe6f59a18f..ac417c6260c 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonPrimitive.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonPrimitive.java\n\n@@ -84,9 +84,10 @@ public final class GsonJsonPrimitive implements JsonPrimitive {\n      * Constructs a {@link JsonPrimitive} backed by the passed GSON {@link com.google.gson.JsonPrimitive}.\n      *\n      * @param jsonPrimitive The backing GSON {@link com.google.gson.JsonPrimitive}.\n+     * @throws NullPointerException If {@code jsonPrimitive} is {@code null}.\n      */\n     public GsonJsonPrimitive(com.google.gson.JsonPrimitive jsonPrimitive) {\n-        this.jsonPrimitive = jsonPrimitive;\n+        this.jsonPrimitive = Objects.requireNonNull(jsonPrimitive, \"'jsonPrimitive' cannot be null.\");\n     }\n \n     com.google.gson.JsonPrimitive getJsonPrimitive() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0MzkwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435643902", "bodyText": "nit; GsonJsonValue -> GsonJsonPrimitive", "author": "anuchandy", "createdAt": "2020-06-05T01:36:19Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/JsonNodeUtils.java", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.JsonNode;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * Helper methods for converting between Azure Core and GSON types.\n+ */\n+final class JsonNodeUtils {\n+    private static final ClientLogger LOGGER = new ClientLogger(JsonNodeUtils.class);\n+\n+    /**\n+     * Converts an Azure Core {@link JsonNode} into a GSON {@link JsonElement}.\n+     *\n+     * @param jsonNode The Azure Core {@link JsonNode}.\n+     * @return The corresponding GSON {@link JsonElement}.\n+     * @throws IllegalArgumentException If the {@link JsonNode} cannot be converted to a {@link JsonElement}.\n+     */\n+    public static JsonElement toGsonElement(JsonNode jsonNode) {\n+        if (jsonNode.isArray()) {\n+            if (jsonNode instanceof GsonJsonArray) {\n+                return ((GsonJsonArray) jsonNode).getJsonArray();\n+            }\n+\n+            throw LOGGER.logExceptionAsError(\n+                new IllegalArgumentException(\"JsonNode is an array but isn't GsonJsonArray.\"));\n+        } else if (jsonNode.isNull()) {\n+            if (jsonNode instanceof GsonJsonNull) {\n+                return ((GsonJsonNull) jsonNode).getJsonNull();\n+            }\n+\n+            throw LOGGER.logExceptionAsError(\n+                new IllegalArgumentException(\"JsonNode is a null but isn't GsonJsonNull.\"));\n+        } else if (jsonNode.isObject()) {\n+            if (jsonNode instanceof GsonJsonObject) {\n+                return ((GsonJsonObject) jsonNode).getJsonObject();\n+            }\n+\n+            throw LOGGER.logExceptionAsError(\n+                new IllegalArgumentException(\"JsonNode is an array but isn't GsonJsonObject.\"));\n+        } else if (jsonNode.isValue()) {\n+            if (jsonNode instanceof GsonJsonPrimitive) {\n+                return ((GsonJsonPrimitive) jsonNode).getJsonPrimitive();\n+            }\n+\n+            throw LOGGER.logExceptionAsError(\n+                new IllegalArgumentException(\"JsonNode is a value but isn't GsonJsonValue.\"));", "originalCommit": "49ef0c09fb26591eb96801623654ba65b750f2a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA1NDc2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r436054767", "bodyText": "Good catch", "author": "alzimmermsft", "createdAt": "2020-06-05T17:15:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0MzkwMg=="}], "type": "inlineReview", "revised_code": {"commit": "b7f8aefda60419e0ff1500a31df7bb8926127a75", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/JsonNodeUtils.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/JsonNodeUtils.java\nindex d62150476ac..aaf0c4d13ee 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/JsonNodeUtils.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/JsonNodeUtils.java\n\n@@ -48,7 +48,7 @@ final class JsonNodeUtils {\n             }\n \n             throw LOGGER.logExceptionAsError(\n-                new IllegalArgumentException(\"JsonNode is a value but isn't GsonJsonValue.\"));\n+                new IllegalArgumentException(\"JsonNode is a value but isn't GsonJsonPrimitive.\"));\n         }\n \n         throw LOGGER.logExceptionAsError(new IllegalArgumentException(\"Unknown JsonNode type.\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0NDY5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r435644694", "bodyText": "possible NPE, since replace can return null", "author": "anuchandy", "createdAt": "2020-06-05T01:39:23Z", "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonObject.java", "diffHunk": "@@ -0,0 +1,105 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.util.serializer.JsonNode;\n+import com.azure.core.util.serializer.JsonObject;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Spliterator;\n+import java.util.Spliterators;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * Jackson specific implementation of {@link JsonObject}.\n+ */\n+public class JacksonJsonObject implements JsonObject {\n+    private final ObjectNode objectNode;\n+\n+    /**\n+     * Constructs a {@link JsonObject} backed by an empty {@link ObjectNode}.\n+     */\n+    public JacksonJsonObject() {\n+        this.objectNode = JsonNodeFactory.instance.objectNode();\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonObject} backed by the passed Jackson {@link ObjectNode}.\n+     *\n+     * @param objectNode The backing Jackson {@link ObjectNode}.\n+     */\n+    public JacksonJsonObject(ObjectNode objectNode) {\n+        this.objectNode = objectNode;\n+    }\n+\n+    ObjectNode getObjectNode() {\n+        return objectNode;\n+    }\n+\n+    @Override\n+    public Stream<Map.Entry<String, JsonNode>> fields() {\n+        Spliterator<Map.Entry<String, com.fasterxml.jackson.databind.JsonNode>> spliterator = Spliterators\n+            .spliteratorUnknownSize(objectNode.fields(), Spliterator.ORDERED);\n+\n+        return StreamSupport.stream(spliterator, false).map(entry ->\n+            new AbstractMap.SimpleEntry<>(entry.getKey(), JsonNodeUtils.fromJacksonNode(entry.getValue())));\n+    }\n+\n+    @Override\n+    public Stream<String> fieldNames() {\n+        Spliterator<String> spliterator = Spliterators\n+            .spliteratorUnknownSize(objectNode.fieldNames(), Spliterator.ORDERED);\n+\n+        return StreamSupport.stream(spliterator, false);\n+    }\n+\n+    @Override\n+    public JsonNode get(String name) {\n+        return JsonNodeUtils.fromJacksonNode(objectNode.get(name));\n+    }\n+\n+    @Override\n+    public boolean has(String name) {\n+        return objectNode.has(name);\n+    }\n+\n+    @Override\n+    public JsonObject put(String name, JsonNode jsonNode) {\n+        objectNode.set(name, JsonNodeUtils.toJacksonNode(jsonNode));\n+        return this;\n+    }\n+\n+    @Override\n+    public JsonNode remove(String name) {\n+        return JsonNodeUtils.fromJacksonNode(objectNode.remove(name));\n+    }\n+\n+    @Override\n+    public JsonNode set(String name, JsonNode jsonNode) {\n+        return JsonNodeUtils.fromJacksonNode(objectNode.replace(name, JsonNodeUtils.toJacksonNode(jsonNode)));", "originalCommit": "49ef0c09fb26591eb96801623654ba65b750f2a2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "038abf5962b9a2e94cb2b0745fb0ba00fbeea804", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonObject.java b/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonObject.java\nindex cc484fe5c72..e23816fcac1 100644\n--- a/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonObject.java\n+++ b/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonObject.java\n\n@@ -33,9 +33,10 @@ public class JacksonJsonObject implements JsonObject {\n      * Constructs a {@link JsonObject} backed by the passed Jackson {@link ObjectNode}.\n      *\n      * @param objectNode The backing Jackson {@link ObjectNode}.\n+     * @throws NullPointerException If {@code objectNode} is {@code null}.\n      */\n     public JacksonJsonObject(ObjectNode objectNode) {\n-        this.objectNode = objectNode;\n+        this.objectNode = Objects.requireNonNull(objectNode, \"'objectNode' cannot be null.\");\n     }\n \n     ObjectNode getObjectNode() {\n"}}, {"oid": "038abf5962b9a2e94cb2b0745fb0ba00fbeea804", "url": "https://github.com/Azure/azure-sdk-for-java/commit/038abf5962b9a2e94cb2b0745fb0ba00fbeea804", "message": "Added tests for JsonObject implementations", "committedDate": "2020-06-05T20:06:37Z", "type": "commit"}, {"oid": "b7f8aefda60419e0ff1500a31df7bb8926127a75", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b7f8aefda60419e0ff1500a31df7bb8926127a75", "message": "Add JsonArray implementation tests", "committedDate": "2020-06-05T23:40:58Z", "type": "commit"}, {"oid": "7ac4c7e91cbd82c647a13579bea5547c58a8c3f4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7ac4c7e91cbd82c647a13579bea5547c58a8c3f4", "message": "JsonPrimitive implementation tests", "committedDate": "2020-06-06T01:07:37Z", "type": "commit"}, {"oid": "8ad0f8a757ac45b7d9387f19d3f5dca0536fc232", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8ad0f8a757ac45b7d9387f19d3f5dca0536fc232", "message": "Rename JsonPrimitive APIs from get to getAs", "committedDate": "2020-06-06T01:10:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMTExOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11599#discussion_r436221119", "bodyText": "Ok, com.google.gson.JsonArray::get return JsonNull.INSTANCE  for null value. In azure-core JacksonJsonArray::has we use native Jackson::JsonArray::has(int). As per doc that native method return true even if the stored value is null. So our impls has the same behavior, which is good.", "author": "anuchandy", "createdAt": "2020-06-06T00:52:45Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonArray.java", "diffHunk": "@@ -0,0 +1,131 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.JsonArray;\n+import com.azure.core.util.serializer.JsonNode;\n+import com.google.gson.JsonElement;\n+\n+import java.util.Objects;\n+import java.util.Spliterator;\n+import java.util.Spliterators;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * GSON specific implementation of {@link JsonArray}.\n+ */\n+public final class GsonJsonArray implements JsonArray {\n+    private final ClientLogger logger = new ClientLogger(GsonJsonArray.class);\n+\n+    private final com.google.gson.JsonArray jsonArray;\n+\n+    /**\n+     * Constructs a {@link JsonArray} backed by an empty GSON {@link com.google.gson.JsonArray}.\n+     */\n+    public GsonJsonArray() {\n+        this.jsonArray = new com.google.gson.JsonArray();\n+    }\n+\n+    /**\n+     * Constructs a {@link JsonArray} backed by the passed GSON {@link com.google.gson.JsonArray}.\n+     *\n+     * @param jsonArray The backing GSON {@link com.google.gson.JsonArray}.\n+     * @throws NullPointerException If {@code jsonArray} is {@code null}.\n+     */\n+    public GsonJsonArray(com.google.gson.JsonArray jsonArray) {\n+        this.jsonArray = Objects.requireNonNull(jsonArray, \"'jsonArray' cannot be null.\");\n+    }\n+\n+    com.google.gson.JsonArray getJsonArray() {\n+        return jsonArray;\n+    }\n+\n+    @Override\n+    public JsonArray add(JsonNode jsonNode) {\n+        jsonArray.add(JsonNodeUtils.toGsonElement(jsonNode));\n+        return this;\n+    }\n+\n+    @Override\n+    public JsonArray clear() {\n+        int size = jsonArray.size();\n+        for (int i = 0; i < size; i++) {\n+            jsonArray.remove(0);\n+        }\n+\n+        return this;\n+    }\n+\n+    @Override\n+    public Stream<JsonNode> elements() {\n+        Spliterator<JsonElement> spliterator = Spliterators\n+            .spliteratorUnknownSize(jsonArray.iterator(), Spliterator.ORDERED);\n+\n+        return StreamSupport.stream(spliterator, false).map(JsonNodeUtils::fromGsonElement);\n+    }\n+\n+    @Override\n+    public JsonNode get(int index) {\n+        checkBounds(index);\n+\n+        JsonElement jsonElement = jsonArray.get(index);\n+        return (jsonElement == null) ? null :  JsonNodeUtils.fromGsonElement(jsonElement);\n+    }\n+\n+    @Override\n+    public boolean has(int index) {\n+        if (index < 0 || index >= jsonArray.size()) {\n+            return false;\n+        }\n+\n+        return jsonArray.get(index) != null;", "originalCommit": "b7f8aefda60419e0ff1500a31df7bb8926127a75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "2c2a9a4ae0c0775fb173343834048ccb5976b479", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2c2a9a4ae0c0775fb173343834048ccb5976b479", "message": "Merge branch 'master' into AzCore_JSONStreamingInterface", "committedDate": "2020-06-10T23:29:50Z", "type": "commit"}, {"oid": "7b6720153e7f55c4769655e2e5e70a0e79b68bb4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b6720153e7f55c4769655e2e5e70a0e79b68bb4", "message": "Merge branch 'master' into AzCore_JSONStreamingInterface", "committedDate": "2020-06-12T22:33:55Z", "type": "commit"}, {"oid": "733b205237d450b22a80d437263a55107c00f0ca", "url": "https://github.com/Azure/azure-sdk-for-java/commit/733b205237d450b22a80d437263a55107c00f0ca", "message": "Changed APIs to use streams instead of byte arrays, made serialization APIs asynchronous", "committedDate": "2020-06-13T00:02:17Z", "type": "commit"}, {"oid": "01803655101cdd82f19f29f4627c3d53cb35b45e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/01803655101cdd82f19f29f4627c3d53cb35b45e", "message": "Merge branch 'release/azurecore-1.6.0-beta.1' of https://github.com/Azure/azure-sdk-for-java into AzCore_JSONStreamingInterface", "committedDate": "2020-06-16T21:58:54Z", "type": "commit"}, {"oid": "1e202dae8e7b34ff7f7e86aec8e48000c15dbf3c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1e202dae8e7b34ff7f7e86aec8e48000c15dbf3c", "message": "Merge branch 'release/azurecore-1.6.0-beta.1' of https://github.com/Azure/azure-sdk-for-java into AzCore_JSONStreamingInterface", "committedDate": "2020-06-19T21:09:41Z", "type": "commit"}, {"oid": "e83fa8d1f9fac55df1f07d284c66e5df62e0c776", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e83fa8d1f9fac55df1f07d284c66e5df62e0c776", "message": "Merge branch 'release/azurecore-1.6.0-beta.1' of https://github.com/Azure/azure-sdk-for-java into AzCore_JSONStreamingInterface", "committedDate": "2020-06-19T21:15:27Z", "type": "commit"}, {"oid": "3236db5d222f1e45b99db87d1dad15c9756971a7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3236db5d222f1e45b99db87d1dad15c9756971a7", "message": "Add service provider interfaces for JSON serializers", "committedDate": "2020-06-19T21:33:16Z", "type": "commit"}, {"oid": "ea8fd6a71d60233dfcd118e408eb176953268dc2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ea8fd6a71d60233dfcd118e408eb176953268dc2", "message": "Fix linting issue", "committedDate": "2020-06-20T00:25:00Z", "type": "commit"}, {"oid": "d406c3ca0e3ef85cc127b4847706f4861ccdb760", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d406c3ca0e3ef85cc127b4847706f4861ccdb760", "message": "Merge branch 'release/azurecore-1.6.0-beta.1' of https://github.com/Azure/azure-sdk-for-java into AzCore_JSONStreamingInterface", "committedDate": "2020-06-22T22:19:48Z", "type": "commit"}]}