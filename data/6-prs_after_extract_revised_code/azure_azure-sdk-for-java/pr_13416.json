{"pr_number": 13416, "pr_title": "support multiple database for azure-spring-data-cosmos", "pr_createdAt": "2020-07-22T14:24:22Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/13416", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxNzUzMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459017531", "bodyText": "We can make this inline.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return suffix;\n          \n          \n            \n                    return \";\" + USER_AGENT_SUFFIX;", "author": "kushagraThapar", "createdAt": "2020-07-22T19:02:34Z", "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/CosmosFactory.java", "diffHunk": "@@ -26,70 +21,73 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CosmosFactory.class);\n \n-    private final CosmosConfig config;\n+    private final CosmosAsyncClient cosmosAsyncClient;\n \n-    private static final boolean IS_TELEMETRY_ALLOWED =\n-        PropertyLoader.isApplicationTelemetryAllowed();\n+    private final String databaseName;\n \n     private static final String USER_AGENT_SUFFIX =\n         Constants.USER_AGENT_SUFFIX + PropertyLoader.getProjectVersion();\n \n-    private String getUserAgentSuffix() {\n+    private static String getUserAgentSuffix() {\n         String suffix = \";\" + USER_AGENT_SUFFIX;\n-\n-        if (IS_TELEMETRY_ALLOWED || config.isAllowTelemetry()) {\n-            suffix += \";\" + MacAddress.getHashMac();\n-        }\n-\n         return suffix;", "originalCommit": "30d40a71e3eb69e3c7e5f74b203856d5941f8766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c88980cd29b7146e677108ea3409d270e103643", "chunk": "diff --git a/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/CosmosFactory.java b/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/CosmosFactory.java\nindex d330f034c0c..2207a3f5e1d 100644\n--- a/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/CosmosFactory.java\n+++ b/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/CosmosFactory.java\n\n@@ -29,8 +29,7 @@ public class CosmosFactory {\n         Constants.USER_AGENT_SUFFIX + PropertyLoader.getProjectVersion();\n \n     private static String getUserAgentSuffix() {\n-        String suffix = \";\" + USER_AGENT_SUFFIX;\n-        return suffix;\n+        return \";\" + USER_AGENT_SUFFIX;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxNzgwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459017805", "bodyText": "Rename this method to getCosmosAsyncClient()", "author": "kushagraThapar", "createdAt": "2020-07-22T19:03:05Z", "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/CosmosFactory.java", "diffHunk": "@@ -26,70 +21,73 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CosmosFactory.class);\n \n-    private final CosmosConfig config;\n+    private final CosmosAsyncClient cosmosAsyncClient;\n \n-    private static final boolean IS_TELEMETRY_ALLOWED =\n-        PropertyLoader.isApplicationTelemetryAllowed();\n+    private final String databaseName;\n \n     private static final String USER_AGENT_SUFFIX =\n         Constants.USER_AGENT_SUFFIX + PropertyLoader.getProjectVersion();\n \n-    private String getUserAgentSuffix() {\n+    private static String getUserAgentSuffix() {\n         String suffix = \";\" + USER_AGENT_SUFFIX;\n-\n-        if (IS_TELEMETRY_ALLOWED || config.isAllowTelemetry()) {\n-            suffix += \";\" + MacAddress.getHashMac();\n-        }\n-\n         return suffix;\n     }\n \n     /**\n      * Validate config and initialization\n      *\n-     * @param cosmosConfig cosmosConfig\n+     * @param cosmosAsyncClient cosmosAsyncClient\n+     * @param databaseName databaseName\n      */\n-    public CosmosFactory(@NonNull CosmosConfig cosmosConfig) {\n-        validateConfig(cosmosConfig);\n+    public CosmosFactory(CosmosAsyncClient cosmosAsyncClient, String databaseName) {\n+        Assert.notNull(cosmosAsyncClient, \"cosmosAsyncClient must not be null!\");\n+        Assert.notNull(databaseName, \"databaseName must not be null!\");\n \n-        this.config = cosmosConfig;\n+        this.cosmosAsyncClient = cosmosAsyncClient;\n+        this.databaseName = databaseName;\n     }\n \n     /**\n      * To create a CosmosAsyncClient\n      *\n-     * @return CosmosClient\n+     * @return CosmosAsyncClient\n      */\n-    public CosmosAsyncClient getCosmosAsyncClient() {\n-        final CosmosClientBuilder cosmosClientBuilderFromConfig =\n-            getCosmosClientBuilderFromConfig(config);\n-        return cosmosClientBuilderFromConfig.buildAsyncClient();\n+    public CosmosAsyncClient getCosmosClient() {", "originalCommit": "30d40a71e3eb69e3c7e5f74b203856d5941f8766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE3OTM2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459179368", "bodyText": "updated", "author": "zhoufenqin", "createdAt": "2020-07-23T02:06:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxNzgwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "2c88980cd29b7146e677108ea3409d270e103643", "chunk": "diff --git a/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/CosmosFactory.java b/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/CosmosFactory.java\nindex d330f034c0c..2207a3f5e1d 100644\n--- a/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/CosmosFactory.java\n+++ b/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/CosmosFactory.java\n\n@@ -29,8 +29,7 @@ public class CosmosFactory {\n         Constants.USER_AGENT_SUFFIX + PropertyLoader.getProjectVersion();\n \n     private static String getUserAgentSuffix() {\n-        String suffix = \";\" + USER_AGENT_SUFFIX;\n-        return suffix;\n+        return \";\" + USER_AGENT_SUFFIX;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxODA4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459018084", "bodyText": "Thanks for getting rid of this \ud83d\udc4d", "author": "kushagraThapar", "createdAt": "2020-07-22T19:03:35Z", "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/CosmosFactory.java", "diffHunk": "@@ -100,27 +98,4 @@ private String getUserAgentSuffixValue(CosmosClientBuilder cosmosClientBuilder)\n         }\n         return \"\";\n     }\n-\n-    private void validateConfig(@NonNull CosmosConfig config) {\n-        Assert.hasText(config.getDatabase(), \"cosmos database should have text!\");\n-    }\n-\n-    @PostConstruct\n-    private void sendTelemetry() {", "originalCommit": "30d40a71e3eb69e3c7e5f74b203856d5941f8766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxODI0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459018241", "bodyText": "\ud83d\udc4d", "author": "kushagraThapar", "createdAt": "2020-07-22T19:03:52Z", "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/common/PropertyLoader.java", "diffHunk": "@@ -19,8 +19,6 @@\n \n     private static final String APPLICATION_YML_FILE = \"/application.yml\";\n \n-    private static final String TELEMETRY_CONFIG_FILE = \"/telemetry.config\";", "originalCommit": "30d40a71e3eb69e3c7e5f74b203856d5941f8766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxODI4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459018283", "bodyText": "\ud83d\udc4d", "author": "kushagraThapar", "createdAt": "2020-07-22T19:03:58Z", "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/common/PropertyLoader.java", "diffHunk": "@@ -33,35 +31,6 @@ public static String getProjectVersion() {\n         return getPropertyByName(\"project.version\", PROJECT_PROPERTY_FILE);\n     }\n \n-    /**", "originalCommit": "30d40a71e3eb69e3c7e5f74b203856d5941f8766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxODk3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459018974", "bodyText": "I guess I missed this when rebranding, but we should rename this API to -> cosmosFactory()\nWe don't want cosmosDB", "author": "kushagraThapar", "createdAt": "2020-07-22T19:05:09Z", "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/config/AbstractCosmosConfiguration.java", "diffHunk": "@@ -26,12 +25,12 @@\n     /**\n      * Declare CosmosDbFactory bean.\n      *\n-     * @param config of cosmosDbFactory\n+     * @param cosmosAsyncClient of cosmosDbFactory\n      * @return CosmosDbFactory bean\n      */\n     @Bean\n-    public CosmosFactory cosmosDBFactory(CosmosConfig config) {\n-        return new CosmosFactory(config);\n+    public CosmosFactory cosmosDBFactory(CosmosAsyncClient cosmosAsyncClient) {", "originalCommit": "30d40a71e3eb69e3c7e5f74b203856d5941f8766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c88980cd29b7146e677108ea3409d270e103643", "chunk": "diff --git a/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/config/AbstractCosmosConfiguration.java b/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/config/AbstractCosmosConfiguration.java\nindex 98714edbd06..cfb7aa79200 100644\n--- a/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/config/AbstractCosmosConfiguration.java\n+++ b/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/config/AbstractCosmosConfiguration.java\n\n@@ -23,13 +23,13 @@ import org.springframework.context.annotation.Configuration;\n public abstract class AbstractCosmosConfiguration extends CosmosConfigurationSupport {\n \n     /**\n-     * Declare CosmosDbFactory bean.\n+     * Declare CosmosFactory bean.\n      *\n-     * @param cosmosAsyncClient of cosmosDbFactory\n-     * @return CosmosDbFactory bean\n+     * @param cosmosAsyncClient of cosmosFactory\n+     * @return CosmosFactory bean\n      */\n     @Bean\n-    public CosmosFactory cosmosDBFactory(CosmosAsyncClient cosmosAsyncClient) {\n+    public CosmosFactory cosmosFactory(CosmosAsyncClient cosmosAsyncClient) {\n         return new CosmosFactory(cosmosAsyncClient, getDatabaseName());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxOTgxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459019817", "bodyText": "We can make these two instance variables final", "author": "kushagraThapar", "createdAt": "2020-07-22T19:06:40Z", "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/config/CosmosClientConfig.java", "diffHunk": "@@ -0,0 +1,105 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.data.cosmos.config;\n+\n+import com.azure.cosmos.CosmosClientBuilder;\n+\n+import java.beans.ConstructorProperties;\n+\n+/**\n+ * Config properties of CosmosDB\n+ */\n+public class CosmosClientConfig {\n+\n+    private String database;\n+\n+    private CosmosClientBuilder cosmosClientBuilder;", "originalCommit": "30d40a71e3eb69e3c7e5f74b203856d5941f8766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c88980cd29b7146e677108ea3409d270e103643", "chunk": "diff --git a/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/config/CosmosClientConfig.java b/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/config/CosmosClientConfig.java\nindex 994cbc286f1..9b4906f6bea 100644\n--- a/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/config/CosmosClientConfig.java\n+++ b/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/config/CosmosClientConfig.java\n\n@@ -11,9 +11,9 @@ import java.beans.ConstructorProperties;\n  */\n public class CosmosClientConfig {\n \n-    private String database;\n+    private final String database;\n \n-    private CosmosClientBuilder cosmosClientBuilder;\n+    private final CosmosClientBuilder cosmosClientBuilder;\n \n     /**\n      * Initialization\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyMzg5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459023895", "bodyText": "We can keep these three instance variables and populate them in the constructor instead of getting them from CosmosFactory and CosmosConfig - that way, throughout CosmosTemplate we can just use these instance variables and not get them every time using the APIs.", "author": "kushagraThapar", "createdAt": "2020-07-22T19:14:19Z", "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java", "diffHunk": "@@ -58,34 +59,42 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(CosmosTemplate.class);\n \n     private final MappingCosmosConverter mappingCosmosConverter;\n-    private final String databaseName;\n-    private final ResponseDiagnosticsProcessor responseDiagnosticsProcessor;\n-    private final boolean enableQueryMetrics;", "originalCommit": "30d40a71e3eb69e3c7e5f74b203856d5941f8766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c88980cd29b7146e677108ea3409d270e103643", "chunk": "diff --git a/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java b/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java\nindex 39dd08976d2..d091bf1451c 100644\n--- a/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java\n+++ b/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java\n\n@@ -88,13 +88,13 @@ public class CosmosTemplate implements CosmosOperations, ApplicationContextAware\n     public CosmosTemplate(CosmosFactory cosmosFactory,\n                           CosmosConfig cosmosConfig,\n                           MappingCosmosConverter mappingCosmosConverter) {\n-        Assert.notNull(cosmosFactory, \"CosmosDbFactory must not be null!\");\n+        Assert.notNull(cosmosFactory, \"CosmosFactory must not be null!\");\n         Assert.notNull(mappingCosmosConverter, \"MappingCosmosConverter must not be null!\");\n \n         this.cosmosFactory = cosmosFactory;\n         this.cosmosConfig = cosmosConfig;\n         this.mappingCosmosConverter = mappingCosmosConverter;\n-        this.cosmosAsyncClient = cosmosFactory.getCosmosClient();\n+        this.cosmosAsyncClient = cosmosFactory.getCosmosAsyncClient();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNDcxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459024713", "bodyText": "Same here, please keep the variables, and populate them in the constructor.\nAlso, I missed it in my earlier PR, but can you please rename isPopulateQueryMetrics -> enableQueryMetrics", "author": "kushagraThapar", "createdAt": "2020-07-22T19:15:40Z", "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java", "diffHunk": "@@ -46,35 +47,42 @@\n public class ReactiveCosmosTemplate implements ReactiveCosmosOperations, ApplicationContextAware {\n \n     private final MappingCosmosConverter mappingCosmosConverter;\n-    private final String databaseName;\n-\n+    private final CosmosFactory cosmosFactory;\n+    private final CosmosConfig cosmosConfig;\n     private final CosmosAsyncClient cosmosAsyncClient;\n-    private final ResponseDiagnosticsProcessor responseDiagnosticsProcessor;\n-    private final boolean isPopulateQueryMetrics;", "originalCommit": "30d40a71e3eb69e3c7e5f74b203856d5941f8766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE3OTkxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459179914", "bodyText": "I delete these variables in ReactiveCosmosTemplate, we can get these variables from CosmosConfig variable directly.", "author": "zhoufenqin", "createdAt": "2020-07-23T02:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNDcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NTIyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459185220", "bodyText": "Yes, you are right, but the reason I am suggesting to bring back these variables is because of two reasons.\n\nIt will improve the performance of the application - since these are final variables, they will be only calculated once and JVM will optimize the runtime code by replacing their actual values.\nIt will be much easier to read the code that way - as it is much simpler to read the instance variables as compared to calling APIs.\n\nIn my opinion, we should bring them back in CosmosTemplate and ReactiveCosmosTemplate\n    private final String databaseName;\n    private final ResponseDiagnosticsProcessor responseDiagnosticsProcessor;\n    private final boolean enableQueryMetrics;\n\nWhat are your thoughts on the above reasons?", "author": "kushagraThapar", "createdAt": "2020-07-23T02:33:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNDcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxODU1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459218551", "bodyText": "I delete these variables before because I think these variables can be got from CosmosConfig or CosmosFactory, so there is no need to define the variables again, it's more clear. and JVM won't affect a lot of performance. But I think your consider is good, I'm not very familiar with it before. Now I bring back these variables", "author": "zhoufenqin", "createdAt": "2020-07-23T05:15:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNDcxMw=="}], "type": "inlineReview", "revised_code": {"commit": "2c88980cd29b7146e677108ea3409d270e103643", "chunk": "diff --git a/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java b/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java\nindex acd595863aa..a68acf83c2f 100644\n--- a/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java\n+++ b/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java\n\n@@ -76,13 +76,13 @@ public class ReactiveCosmosTemplate implements ReactiveCosmosOperations, Applica\n     public ReactiveCosmosTemplate(CosmosFactory cosmosFactory,\n                                   CosmosConfig cosmosConfig,\n                                   MappingCosmosConverter mappingCosmosConverter) {\n-        Assert.notNull(cosmosFactory, \"CosmosDbFactory must not be null!\");\n+        Assert.notNull(cosmosFactory, \"CosmosFactory must not be null!\");\n         Assert.notNull(cosmosConfig, \"CosmosConfig must not be null!\");\n         Assert.notNull(mappingCosmosConverter, \"MappingCosmosConverter must not be null!\");\n         this.cosmosFactory = cosmosFactory;\n         this.cosmosConfig = cosmosConfig;\n         this.mappingCosmosConverter = mappingCosmosConverter;\n-        this.cosmosAsyncClient = cosmosFactory.getCosmosClient();\n+        this.cosmosAsyncClient = cosmosFactory.getCosmosAsyncClient();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNDk1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459024952", "bodyText": "Rename -> CosmosDbFactory to CosmosFactory", "author": "kushagraThapar", "createdAt": "2020-07-22T19:16:12Z", "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java", "diffHunk": "@@ -46,35 +47,42 @@\n public class ReactiveCosmosTemplate implements ReactiveCosmosOperations, ApplicationContextAware {\n \n     private final MappingCosmosConverter mappingCosmosConverter;\n-    private final String databaseName;\n-\n+    private final CosmosFactory cosmosFactory;\n+    private final CosmosConfig cosmosConfig;\n     private final CosmosAsyncClient cosmosAsyncClient;\n-    private final ResponseDiagnosticsProcessor responseDiagnosticsProcessor;\n-    private final boolean isPopulateQueryMetrics;\n-\n     private final Function<Class<?>, CosmosEntityInformation<?, ?>> entityInfoCreator =\n         Memoizer.memoize(this::getCosmosEntityInformation);\n \n+    /**\n+     * Initialization\n+     *\n+     * @param client must not be {@literal null}\n+     * @param databaseName must not be {@literal null}\n+     * @param cosmosConfig must not be {@literal null}\n+     * @param mappingCosmosConverter must not be {@literal null}\n+     */\n+    public ReactiveCosmosTemplate(CosmosAsyncClient client, String databaseName,\n+                                  CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter) {\n+        this(new CosmosFactory(client, databaseName), cosmosConfig, mappingCosmosConverter);\n+    }\n+\n     /**\n      * Constructor\n      *\n      * @param cosmosFactory the cosmos db factory\n+     * @param cosmosConfig the cosmos config\n      * @param mappingCosmosConverter the mappingCosmosConverter\n-     * @param dbName database name\n      */\n     public ReactiveCosmosTemplate(CosmosFactory cosmosFactory,\n-                                  MappingCosmosConverter mappingCosmosConverter,\n-                                  String dbName) {\n+                                  CosmosConfig cosmosConfig,\n+                                  MappingCosmosConverter mappingCosmosConverter) {\n         Assert.notNull(cosmosFactory, \"CosmosDbFactory must not be null!\");", "originalCommit": "30d40a71e3eb69e3c7e5f74b203856d5941f8766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c88980cd29b7146e677108ea3409d270e103643", "chunk": "diff --git a/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java b/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java\nindex acd595863aa..a68acf83c2f 100644\n--- a/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java\n+++ b/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/ReactiveCosmosTemplate.java\n\n@@ -76,13 +76,13 @@ public class ReactiveCosmosTemplate implements ReactiveCosmosOperations, Applica\n     public ReactiveCosmosTemplate(CosmosFactory cosmosFactory,\n                                   CosmosConfig cosmosConfig,\n                                   MappingCosmosConverter mappingCosmosConverter) {\n-        Assert.notNull(cosmosFactory, \"CosmosDbFactory must not be null!\");\n+        Assert.notNull(cosmosFactory, \"CosmosFactory must not be null!\");\n         Assert.notNull(cosmosConfig, \"CosmosConfig must not be null!\");\n         Assert.notNull(mappingCosmosConverter, \"MappingCosmosConverter must not be null!\");\n         this.cosmosFactory = cosmosFactory;\n         this.cosmosConfig = cosmosConfig;\n         this.mappingCosmosConverter = mappingCosmosConverter;\n-        this.cosmosAsyncClient = cosmosFactory.getCosmosClient();\n+        this.cosmosAsyncClient = cosmosFactory.getCosmosAsyncClient();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNTEyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459025122", "bodyText": "Rename -> CosmosDbFactory to CosmosFactory", "author": "kushagraThapar", "createdAt": "2020-07-22T19:16:30Z", "path": "sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java", "diffHunk": "@@ -58,34 +59,42 @@\n     private static final Logger LOGGER = LoggerFactory.getLogger(CosmosTemplate.class);\n \n     private final MappingCosmosConverter mappingCosmosConverter;\n-    private final String databaseName;\n-    private final ResponseDiagnosticsProcessor responseDiagnosticsProcessor;\n-    private final boolean enableQueryMetrics;\n-\n+    private final CosmosFactory cosmosFactory;\n+    private final CosmosConfig cosmosConfig;\n     private final CosmosAsyncClient cosmosAsyncClient;\n     private final Function<Class<?>, CosmosEntityInformation<?, ?>> entityInfoCreator =\n         Memoizer.memoize(this::getCosmosEntityInformation);\n \n+    /**\n+     * Initialization\n+     *\n+     * @param client must not be {@literal null}\n+     * @param databaseName must not be {@literal null}\n+     * @param cosmosConfig must not be {@literal null}\n+     * @param mappingCosmosConverter must not be {@literal null}\n+     */\n+    public CosmosTemplate(CosmosAsyncClient client, String databaseName,\n+                          CosmosConfig cosmosConfig, MappingCosmosConverter mappingCosmosConverter) {\n+        this(new CosmosFactory(client, databaseName), cosmosConfig, mappingCosmosConverter);\n+    }\n+\n     /**\n      * Initialization\n      *\n      * @param cosmosFactory must not be {@literal null}\n+     * @param cosmosConfig must not be {@literal null}\n      * @param mappingCosmosConverter must not be {@literal null}\n-     * @param dbName must not be {@literal null}\n      */\n     public CosmosTemplate(CosmosFactory cosmosFactory,\n-                          MappingCosmosConverter mappingCosmosConverter,\n-                          String dbName) {\n+                          CosmosConfig cosmosConfig,\n+                          MappingCosmosConverter mappingCosmosConverter) {\n         Assert.notNull(cosmosFactory, \"CosmosDbFactory must not be null!\");", "originalCommit": "30d40a71e3eb69e3c7e5f74b203856d5941f8766", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c88980cd29b7146e677108ea3409d270e103643", "chunk": "diff --git a/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java b/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java\nindex 39dd08976d2..d091bf1451c 100644\n--- a/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java\n+++ b/sdk/cosmos/azure-spring-data-cosmos/src/main/java/com/azure/spring/data/cosmos/core/CosmosTemplate.java\n\n@@ -88,13 +88,13 @@ public class CosmosTemplate implements CosmosOperations, ApplicationContextAware\n     public CosmosTemplate(CosmosFactory cosmosFactory,\n                           CosmosConfig cosmosConfig,\n                           MappingCosmosConverter mappingCosmosConverter) {\n-        Assert.notNull(cosmosFactory, \"CosmosDbFactory must not be null!\");\n+        Assert.notNull(cosmosFactory, \"CosmosFactory must not be null!\");\n         Assert.notNull(mappingCosmosConverter, \"MappingCosmosConverter must not be null!\");\n \n         this.cosmosFactory = cosmosFactory;\n         this.cosmosConfig = cosmosConfig;\n         this.mappingCosmosConverter = mappingCosmosConverter;\n-        this.cosmosAsyncClient = cosmosFactory.getCosmosClient();\n+        this.cosmosAsyncClient = cosmosFactory.getCosmosAsyncClient();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNTYyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459025623", "bodyText": "We should get this import from springframework\nPlease use this and everywhere else -> import org.springframework.lang.Nullable;\nSpring should not take a dependency on micrometer module as it is not required.", "author": "kushagraThapar", "createdAt": "2020-07-22T19:17:31Z", "path": "sdk/cosmos/azure-spring-data-cosmos/src/samples/java/com/azure/cosmos/multidatasource/DatabaseConfiguration.java", "diffHunk": "@@ -2,14 +2,22 @@\n // Licensed under the MIT License.\n package com.azure.cosmos.multidatasource;\n \n+import com.azure.cosmos.CosmosAsyncClient;\n import com.azure.cosmos.CosmosClientBuilder;\n import com.azure.cosmos.CosmosProperties;\n import com.azure.spring.data.cosmos.CosmosFactory;\n import com.azure.spring.data.cosmos.config.AbstractCosmosConfiguration;\n+import com.azure.spring.data.cosmos.config.CosmosClientConfig;\n import com.azure.spring.data.cosmos.config.CosmosConfig;\n+import com.azure.spring.data.cosmos.core.CosmosTemplate;\n import com.azure.spring.data.cosmos.core.ReactiveCosmosTemplate;\n+import com.azure.spring.data.cosmos.core.ResponseDiagnostics;\n+import com.azure.spring.data.cosmos.core.ResponseDiagnosticsProcessor;\n import com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter;\n import com.azure.spring.data.cosmos.repository.config.EnableReactiveCosmosRepositories;\n+import io.micrometer.core.lang.Nullable;", "originalCommit": "30d40a71e3eb69e3c7e5f74b203856d5941f8766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyODMxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13416#discussion_r459028310", "bodyText": "There is also one more place where this is used -> AppConfiguration.java - please update that one as well.", "author": "kushagraThapar", "createdAt": "2020-07-22T19:22:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAyNTYyMw=="}], "type": "inlineReview", "revised_code": {"commit": "2c88980cd29b7146e677108ea3409d270e103643", "chunk": "diff --git a/sdk/cosmos/azure-spring-data-cosmos/src/samples/java/com/azure/cosmos/multidatasource/DatabaseConfiguration.java b/sdk/cosmos/azure-spring-data-cosmos/src/samples/java/com/azure/cosmos/multidatasource/DatabaseConfiguration.java\nindex afe9eacf197..20ab77758d5 100644\n--- a/sdk/cosmos/azure-spring-data-cosmos/src/samples/java/com/azure/cosmos/multidatasource/DatabaseConfiguration.java\n+++ b/sdk/cosmos/azure-spring-data-cosmos/src/samples/java/com/azure/cosmos/multidatasource/DatabaseConfiguration.java\n\n@@ -15,7 +15,6 @@ import com.azure.spring.data.cosmos.core.ResponseDiagnostics;\n import com.azure.spring.data.cosmos.core.ResponseDiagnosticsProcessor;\n import com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter;\n import com.azure.spring.data.cosmos.repository.config.EnableReactiveCosmosRepositories;\n-import io.micrometer.core.lang.Nullable;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"oid": "2c88980cd29b7146e677108ea3409d270e103643", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2c88980cd29b7146e677108ea3409d270e103643", "message": "support multiple database for azure-spring-data-cosmos", "committedDate": "2020-07-23T02:05:12Z", "type": "forcePushed"}, {"oid": "a8e03b066e49d8335b9900ef297e344cfbdf6492", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a8e03b066e49d8335b9900ef297e344cfbdf6492", "message": "support multiple database for azure-spring-data-cosmos", "committedDate": "2020-07-23T05:06:00Z", "type": "commit"}, {"oid": "a8e03b066e49d8335b9900ef297e344cfbdf6492", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a8e03b066e49d8335b9900ef297e344cfbdf6492", "message": "support multiple database for azure-spring-data-cosmos", "committedDate": "2020-07-23T05:06:00Z", "type": "forcePushed"}]}