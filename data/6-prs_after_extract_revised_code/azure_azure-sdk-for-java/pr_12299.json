{"pr_number": 12299, "pr_title": "Sb track2 deadletter receiver 12063", "pr_createdAt": "2020-06-17T23:05:03Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/12299", "timeline": [{"oid": "5c3cf988ac1c65cb1c4d14e6105d1d05fcc47648", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5c3cf988ac1c65cb1c4d14e6105d1d05fcc47648", "message": "Increment package version after release of com.azure azure-messaging-servicebus", "committedDate": "2020-05-08T21:29:37Z", "type": "commit"}, {"oid": "39b9a1a6d1bfd9adf54c91fea1a90144cb02f288", "url": "https://github.com/Azure/azure-sdk-for-java/commit/39b9a1a6d1bfd9adf54c91fea1a90144cb02f288", "message": "resolve merge conflict", "committedDate": "2020-05-12T19:40:58Z", "type": "commit"}, {"oid": "f9cc7d2d82c36e62ea253071a1ec5ae29b4f1848", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f9cc7d2d82c36e62ea253071a1ec5ae29b4f1848", "message": "Merge branch 'azure-sdk-increment-package-version-servicebus-386162'", "committedDate": "2020-05-12T19:50:47Z", "type": "commit"}, {"oid": "3a4b16fd9cc42f7dbc5d746e81ffc8de94e55b6b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3a4b16fd9cc42f7dbc5d746e81ffc8de94e55b6b", "message": "merge master", "committedDate": "2020-05-13T00:26:33Z", "type": "commit"}, {"oid": "b67ac9b65651a41709584818e2c3417b6aed44ca", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b67ac9b65651a41709584818e2c3417b6aed44ca", "message": "Merge branch 'master' of github.com:hemanttanwar/azure-sdk-for-java", "committedDate": "2020-05-13T04:02:38Z", "type": "commit"}, {"oid": "510e76c7ffb58e006a09779558d7b01246f054a9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/510e76c7ffb58e006a09779558d7b01246f054a9", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-05-20T05:17:51Z", "type": "commit"}, {"oid": "663dac49d053f1cb7e6d0bb7664a551b68dab004", "url": "https://github.com/Azure/azure-sdk-for-java/commit/663dac49d053f1cb7e6d0bb7664a551b68dab004", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-05T21:43:35Z", "type": "commit"}, {"oid": "2962fabdb5ada06fba88a10c18091f9721eeb302", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2962fabdb5ada06fba88a10c18091f9721eeb302", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-08T04:37:42Z", "type": "commit"}, {"oid": "d418224ef3addb68105e241776d19e70aca32bd0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d418224ef3addb68105e241776d19e70aca32bd0", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-09T03:45:55Z", "type": "commit"}, {"oid": "6a9dc359ca5e3ba7b40fe71ab0fa2c33d0e5e91b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6a9dc359ca5e3ba7b40fe71ab0fa2c33d0e5e91b", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-09T21:00:31Z", "type": "commit"}, {"oid": "d0d0d88de524992f7e211400d2b8724691310817", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d0d0d88de524992f7e211400d2b8724691310817", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-10T04:36:54Z", "type": "commit"}, {"oid": "80bcfd7bb9cd94cb966e71532fb1b8c39831db32", "url": "https://github.com/Azure/azure-sdk-for-java/commit/80bcfd7bb9cd94cb966e71532fb1b8c39831db32", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-11T16:59:10Z", "type": "commit"}, {"oid": "136c66a13eacd2e49be05cef94879048c57115c9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/136c66a13eacd2e49be05cef94879048c57115c9", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-17T00:33:06Z", "type": "commit"}, {"oid": "5fdda79aa2d4072d6de625e8045043cccb1ca785", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5fdda79aa2d4072d6de625e8045043cccb1ca785", "message": "Continue implementation", "committedDate": "2020-06-17T17:29:31Z", "type": "commit"}, {"oid": "f9a79b9d98cd2f06d1dcae980b33433d52da9712", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f9a79b9d98cd2f06d1dcae980b33433d52da9712", "message": "receive from deadletter queue", "committedDate": "2020-06-17T23:03:42Z", "type": "commit"}, {"oid": "e2c7ecbf22a5c7b5d92f85089e0b2de55b67d5d8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e2c7ecbf22a5c7b5d92f85089e0b2de55b67d5d8", "message": "cleanup", "committedDate": "2020-06-17T23:23:00Z", "type": "commit"}, {"oid": "111720871d89d521a68aaf571968eaf08cbbe96f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/111720871d89d521a68aaf571968eaf08cbbe96f", "message": "Added test for subscription deadletter queue", "committedDate": "2020-06-17T23:39:37Z", "type": "commit"}, {"oid": "6868bd83ac640798410b1145783d299688e475e1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6868bd83ac640798410b1145783d299688e475e1", "message": " cleanup in test", "committedDate": "2020-06-17T23:50:12Z", "type": "commit"}, {"oid": "fb5dff8b5f4797b6621119c2c87970c75094840c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fb5dff8b5f4797b6621119c2c87970c75094840c", "message": "test spot bugs cleanup", "committedDate": "2020-06-18T00:31:58Z", "type": "commit"}, {"oid": "ed8488ac12c07af9e1bab02403aa35b0de90456b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ed8488ac12c07af9e1bab02403aa35b0de90456b", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-18T00:32:39Z", "type": "commit"}, {"oid": "874767a0ec4e8dbc72dce623ef701c96ff74c743", "url": "https://github.com/Azure/azure-sdk-for-java/commit/874767a0ec4e8dbc72dce623ef701c96ff74c743", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-24T08:19:24Z", "type": "commit"}, {"oid": "e4c98cc4508a84d9d1537d7cdc3826cf7fb57c7a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e4c98cc4508a84d9d1537d7cdc3826cf7fb57c7a", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-26T23:12:20Z", "type": "commit"}, {"oid": "964c1b6891567dc1ebfe9a54aecf9de1acb58fe1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/964c1b6891567dc1ebfe9a54aecf9de1acb58fe1", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-28T05:54:20Z", "type": "commit"}, {"oid": "4aa1fcc3ae90257f9882053d27e59d72d77a7de9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4aa1fcc3ae90257f9882053d27e59d72d77a7de9", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-28T16:18:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMTE0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447131141", "bodyText": "format this.", "author": "conniey", "createdAt": "2020-06-29T17:21:39Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -441,6 +451,12 @@ private static String getEntityPath(ClientLogger logger, MessagingEntityType ent\n         return entityPath;\n     }\n \n+    private static String getDeadLetterEntityPath(ClientLogger logger, MessagingEntityType entityType, String queueName,\n+        String topicName, String subscriptionName) {\n+        String entityPath = getEntityPath(logger, entityType, queueName, topicName, subscriptionName);\n+        return  entityPath + \"/$deadletterqueue\";", "originalCommit": "fb5dff8b5f4797b6621119c2c87970c75094840c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a962a85527d88b6994e2460abef7a44035596d2", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\nindex 0a5690a82d1..563bfa3dc1a 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\n\n@@ -451,12 +441,6 @@ public final class ServiceBusClientBuilder {\n         return entityPath;\n     }\n \n-    private static String getDeadLetterEntityPath(ClientLogger logger, MessagingEntityType entityType, String queueName,\n-        String topicName, String subscriptionName) {\n-        String entityPath = getEntityPath(logger, entityType, queueName, topicName, subscriptionName);\n-        return  entityPath + \"/$deadletterqueue\";\n-    }\n-\n     /**\n      * Builder for creating {@link ServiceBusSenderClient} and {@link ServiceBusSenderAsyncClient} to publish messages\n      * to Service Bus.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMTY4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447131685", "bodyText": "I don't think this matches what it does. It doesn't just read messages from a queue or topic.", "author": "conniey", "createdAt": "2020-06-29T17:22:37Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -897,4 +913,162 @@ public ServiceBusReceiverClient buildClient() {\n             return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n         }\n     }\n+\n+    /**\n+     * Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ).\n+     * The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed\n+     * independent of the main entity.\n+     *\n+     * This is builder for creating {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to\n+     * consume dead-letter messages from Service Bus entity.\n+     *\n+     * @see ServiceBusReceiverAsyncClient\n+     * @see ServiceBusReceiverClient\n+     */\n+    @ServiceClientBuilder(serviceClients = {ServiceBusReceiverClient.class, ServiceBusReceiverAsyncClient.class})\n+    public final class ServiceBusDeadLetterReceiverClientBuilder {\n+        private int prefetchCount = DEFAULT_PREFETCH_COUNT;\n+        private String queueName;\n+        private ReceiveMode receiveMode = ReceiveMode.PEEK_LOCK;\n+        private String subscriptionName;\n+        private String topicName;\n+        private Duration maxAutoLockRenewalDuration;\n+\n+        private ServiceBusDeadLetterReceiverClientBuilder() {\n+        }\n+\n+        /**\n+         * Enables auto-lock renewal by renewing each message lock renewal until the {@code maxAutoLockRenewalDuration}\n+         * has elapsed.\n+         *\n+         * @param maxAutoLockRenewalDuration Maximum amount of time to renew the session lock.\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder maxAutoLockRenewalDuration(\n+            Duration maxAutoLockRenewalDuration) {\n+            this.maxAutoLockRenewalDuration = maxAutoLockRenewalDuration;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the prefetch count of the receiver. For both {@link ReceiveMode#PEEK_LOCK PEEK_LOCK} and {@link\n+         * ReceiveMode#RECEIVE_AND_DELETE RECEIVE_AND_DELETE} modes the default value is 1.\n+         *\n+         * Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when\n+         * and before the application asks for one using {@link ServiceBusReceiverAsyncClient#receive()}. Setting a\n+         * non-zero value will prefetch that number of messages. Setting the value to zero turns prefetch off.\n+         *\n+         * @param prefetchCount The prefetch count.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder prefetchCount(int prefetchCount) {\n+            this.prefetchCount = prefetchCount;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the queue to create a receiver for.\n+         *\n+         * @param queueName Name of the queue.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder queueName(String queueName) {\n+            this.queueName = queueName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the receive mode for the receiver.\n+         *\n+         * @param receiveMode Mode for receiving messages.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder receiveMode(ReceiveMode receiveMode) {\n+            this.receiveMode = receiveMode;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the subscription in the topic to listen to. <b>{@link #topicName(String)} must also be set.\n+         * </b>\n+         *\n+         * @param subscriptionName Name of the subscription.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         * @see #topicName A topic name should be set as well.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder subscriptionName(String subscriptionName) {\n+            this.subscriptionName = subscriptionName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the topic. <b>{@link #subscriptionName(String)} must also be set.</b>\n+         *\n+         * @param topicName Name of the topic.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         * @see #subscriptionName A subscription name should be set as well.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder topicName(String topicName) {\n+            this.topicName = topicName;\n+            return this;\n+        }\n+\n+        /**\n+         * Creates an <b>asynchronous</b> Service Bus receiver responsible for reading {@link ServiceBusMessage", "originalCommit": "fb5dff8b5f4797b6621119c2c87970c75094840c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a962a85527d88b6994e2460abef7a44035596d2", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\nindex 0a5690a82d1..563bfa3dc1a 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\n\n@@ -913,162 +897,4 @@ public final class ServiceBusClientBuilder {\n             return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n         }\n     }\n-\n-    /**\n-     * Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ).\n-     * The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed\n-     * independent of the main entity.\n-     *\n-     * This is builder for creating {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to\n-     * consume dead-letter messages from Service Bus entity.\n-     *\n-     * @see ServiceBusReceiverAsyncClient\n-     * @see ServiceBusReceiverClient\n-     */\n-    @ServiceClientBuilder(serviceClients = {ServiceBusReceiverClient.class, ServiceBusReceiverAsyncClient.class})\n-    public final class ServiceBusDeadLetterReceiverClientBuilder {\n-        private int prefetchCount = DEFAULT_PREFETCH_COUNT;\n-        private String queueName;\n-        private ReceiveMode receiveMode = ReceiveMode.PEEK_LOCK;\n-        private String subscriptionName;\n-        private String topicName;\n-        private Duration maxAutoLockRenewalDuration;\n-\n-        private ServiceBusDeadLetterReceiverClientBuilder() {\n-        }\n-\n-        /**\n-         * Enables auto-lock renewal by renewing each message lock renewal until the {@code maxAutoLockRenewalDuration}\n-         * has elapsed.\n-         *\n-         * @param maxAutoLockRenewalDuration Maximum amount of time to renew the session lock.\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder maxAutoLockRenewalDuration(\n-            Duration maxAutoLockRenewalDuration) {\n-            this.maxAutoLockRenewalDuration = maxAutoLockRenewalDuration;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the prefetch count of the receiver. For both {@link ReceiveMode#PEEK_LOCK PEEK_LOCK} and {@link\n-         * ReceiveMode#RECEIVE_AND_DELETE RECEIVE_AND_DELETE} modes the default value is 1.\n-         *\n-         * Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when\n-         * and before the application asks for one using {@link ServiceBusReceiverAsyncClient#receive()}. Setting a\n-         * non-zero value will prefetch that number of messages. Setting the value to zero turns prefetch off.\n-         *\n-         * @param prefetchCount The prefetch count.\n-         *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder prefetchCount(int prefetchCount) {\n-            this.prefetchCount = prefetchCount;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the name of the queue to create a receiver for.\n-         *\n-         * @param queueName Name of the queue.\n-         *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder queueName(String queueName) {\n-            this.queueName = queueName;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the receive mode for the receiver.\n-         *\n-         * @param receiveMode Mode for receiving messages.\n-         *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder receiveMode(ReceiveMode receiveMode) {\n-            this.receiveMode = receiveMode;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the name of the subscription in the topic to listen to. <b>{@link #topicName(String)} must also be set.\n-         * </b>\n-         *\n-         * @param subscriptionName Name of the subscription.\n-         *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         * @see #topicName A topic name should be set as well.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder subscriptionName(String subscriptionName) {\n-            this.subscriptionName = subscriptionName;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the name of the topic. <b>{@link #subscriptionName(String)} must also be set.</b>\n-         *\n-         * @param topicName Name of the topic.\n-         *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         * @see #subscriptionName A subscription name should be set as well.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder topicName(String topicName) {\n-            this.topicName = topicName;\n-            return this;\n-        }\n-\n-        /**\n-         * Creates an <b>asynchronous</b> Service Bus receiver responsible for reading {@link ServiceBusMessage\n-         * messages} from a specific queue or topic.\n-         *\n-         * @return An new {@link ServiceBusReceiverAsyncClient} that receives messages from a queue or topic.\n-         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n-         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n-         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n-         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n-         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n-         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n-         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n-         */\n-        public ServiceBusReceiverAsyncClient buildAsyncClient() {\n-            final MessagingEntityType entityType = validateEntityPaths(logger, connectionStringEntityName, topicName,\n-                queueName);\n-            final String entityPath = getDeadLetterEntityPath(logger, entityType, queueName, topicName,\n-                subscriptionName);\n-\n-            if (prefetchCount < 1) {\n-                throw logger.logExceptionAsError(new IllegalArgumentException(String.format(\n-                    \"prefetchCount (%s) cannot be less than 1.\", prefetchCount)));\n-            } else if (maxAutoLockRenewalDuration != null && maxAutoLockRenewalDuration.isNegative()) {\n-                throw logger.logExceptionAsError(new IllegalArgumentException(String.format(\n-                    \"maxAutoLockRenewalDuration (%s) cannot be negative.\", maxAutoLockRenewalDuration)));\n-            }\n-\n-            final ServiceBusConnectionProcessor connectionProcessor = getOrCreateConnectionProcessor(messageSerializer);\n-            final ReceiverOptions receiverOptions = new ReceiverOptions(receiveMode, prefetchCount,\n-                maxAutoLockRenewalDuration);\n-\n-            return new ServiceBusReceiverAsyncClient(connectionProcessor.getFullyQualifiedNamespace(), entityPath,\n-                entityType, receiverOptions, connectionProcessor, ServiceBusConstants.OPERATION_TIMEOUT,\n-                tracerProvider, messageSerializer, ServiceBusClientBuilder.this::onClientClose);\n-        }\n-\n-        /**\n-         * Creates <b>synchronous</b> Service Bus receiver responsible for reading {@link ServiceBusMessage messages}\n-         * from a specific queue or topic.\n-         *\n-         * @return An new {@link ServiceBusReceiverClient} that receives messages from a queue or topic.\n-         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n-         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n-         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n-         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n-         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n-         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n-         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n-         */\n-        public ServiceBusReceiverClient buildClient() {\n-            return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMjI4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447132286", "bodyText": "We're cluttering IntegrationTestBase. I was hoping it was a space where every test case needed logic, so it goes here. Not where one or two required this. It can live in the actual class itself.", "author": "conniey", "createdAt": "2020-06-29T17:23:43Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java", "diffHunk": "@@ -273,6 +273,31 @@ protected ServiceBusSenderClientBuilder getSenderBuilder(boolean useCredentials,\n \n     }\n \n+    protected ServiceBusClientBuilder.ServiceBusDeadLetterReceiverClientBuilder getDeadLetterReceiverBuilder(boolean useCredentials, MessagingEntityType entityType,", "originalCommit": "fb5dff8b5f4797b6621119c2c87970c75094840c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a962a85527d88b6994e2460abef7a44035596d2", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java\nindex 4bed501b121..6d34fd64255 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/IntegrationTestBase.java\n\n@@ -273,31 +256,6 @@ public abstract class IntegrationTestBase extends TestBase {\n \n     }\n \n-    protected ServiceBusClientBuilder.ServiceBusDeadLetterReceiverClientBuilder getDeadLetterReceiverBuilder(boolean useCredentials, MessagingEntityType entityType,\n-        int entityIndex, Function<ServiceBusClientBuilder, ServiceBusClientBuilder> onBuilderCreate, boolean sharedConnection) {\n-\n-        ServiceBusClientBuilder builder = getBuilder(useCredentials, sharedConnection);\n-        builder = onBuilderCreate.apply(builder);\n-\n-        switch (entityType) {\n-            case QUEUE:\n-                final String queueName = getQueueName(entityIndex);\n-                assertNotNull(queueName, \"'queueName' cannot be null.\");\n-\n-                return builder.deadLetterReceiver().queueName(queueName);\n-            case SUBSCRIPTION:\n-                final String topicName = getTopicName();\n-                final String subscriptionName = getSubscriptionName(entityIndex);\n-                assertNotNull(topicName, \"'topicName' cannot be null.\");\n-                assertNotNull(subscriptionName, \"'subscriptionName' cannot be null.\");\n-\n-                return builder.deadLetterReceiver().topicName(topicName).subscriptionName(subscriptionName);\n-            default:\n-                throw logger.logExceptionAsError(new IllegalArgumentException(\"Unknown entity type: \" + entityType));\n-        }\n-\n-    }\n-\n     protected ServiceBusReceiverClientBuilder getReceiverBuilder(boolean useCredentials, MessagingEntityType entityType,\n         int entityIndex, Function<ServiceBusClientBuilder, ServiceBusClientBuilder> onBuilderCreate, boolean sharedConnection) {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzMjgxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447132819", "bodyText": "The amount of duplicated logic we're amassing is concerning. This is going to be painful from a maintenance standpoint.", "author": "conniey", "createdAt": "2020-06-29T17:24:38Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -897,4 +913,162 @@ public ServiceBusReceiverClient buildClient() {\n             return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n         }\n     }\n+\n+    /**\n+     * Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ).\n+     * The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed\n+     * independent of the main entity.\n+     *\n+     * This is builder for creating {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to\n+     * consume dead-letter messages from Service Bus entity.\n+     *\n+     * @see ServiceBusReceiverAsyncClient\n+     * @see ServiceBusReceiverClient\n+     */\n+    @ServiceClientBuilder(serviceClients = {ServiceBusReceiverClient.class, ServiceBusReceiverAsyncClient.class})\n+    public final class ServiceBusDeadLetterReceiverClientBuilder {\n+        private int prefetchCount = DEFAULT_PREFETCH_COUNT;\n+        private String queueName;\n+        private ReceiveMode receiveMode = ReceiveMode.PEEK_LOCK;\n+        private String subscriptionName;\n+        private String topicName;\n+        private Duration maxAutoLockRenewalDuration;\n+\n+        private ServiceBusDeadLetterReceiverClientBuilder() {\n+        }\n+\n+        /**\n+         * Enables auto-lock renewal by renewing each message lock renewal until the {@code maxAutoLockRenewalDuration}\n+         * has elapsed.\n+         *\n+         * @param maxAutoLockRenewalDuration Maximum amount of time to renew the session lock.\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder maxAutoLockRenewalDuration(\n+            Duration maxAutoLockRenewalDuration) {\n+            this.maxAutoLockRenewalDuration = maxAutoLockRenewalDuration;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the prefetch count of the receiver. For both {@link ReceiveMode#PEEK_LOCK PEEK_LOCK} and {@link\n+         * ReceiveMode#RECEIVE_AND_DELETE RECEIVE_AND_DELETE} modes the default value is 1.\n+         *\n+         * Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when\n+         * and before the application asks for one using {@link ServiceBusReceiverAsyncClient#receive()}. Setting a\n+         * non-zero value will prefetch that number of messages. Setting the value to zero turns prefetch off.\n+         *\n+         * @param prefetchCount The prefetch count.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder prefetchCount(int prefetchCount) {\n+            this.prefetchCount = prefetchCount;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the queue to create a receiver for.\n+         *\n+         * @param queueName Name of the queue.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder queueName(String queueName) {\n+            this.queueName = queueName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the receive mode for the receiver.\n+         *\n+         * @param receiveMode Mode for receiving messages.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder receiveMode(ReceiveMode receiveMode) {\n+            this.receiveMode = receiveMode;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the subscription in the topic to listen to. <b>{@link #topicName(String)} must also be set.\n+         * </b>\n+         *\n+         * @param subscriptionName Name of the subscription.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         * @see #topicName A topic name should be set as well.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder subscriptionName(String subscriptionName) {\n+            this.subscriptionName = subscriptionName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the topic. <b>{@link #subscriptionName(String)} must also be set.</b>\n+         *\n+         * @param topicName Name of the topic.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         * @see #subscriptionName A subscription name should be set as well.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder topicName(String topicName) {\n+            this.topicName = topicName;\n+            return this;\n+        }\n+\n+        /**\n+         * Creates an <b>asynchronous</b> Service Bus receiver responsible for reading {@link ServiceBusMessage\n+         * messages} from a specific queue or topic.\n+         *\n+         * @return An new {@link ServiceBusReceiverAsyncClient} that receives messages from a queue or topic.\n+         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n+         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n+         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n+         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n+         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n+         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n+         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n+         */\n+        public ServiceBusReceiverAsyncClient buildAsyncClient() {\n+            final MessagingEntityType entityType = validateEntityPaths(logger, connectionStringEntityName, topicName,\n+                queueName);\n+            final String entityPath = getDeadLetterEntityPath(logger, entityType, queueName, topicName,\n+                subscriptionName);\n+\n+            if (prefetchCount < 1) {", "originalCommit": "fb5dff8b5f4797b6621119c2c87970c75094840c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a962a85527d88b6994e2460abef7a44035596d2", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\nindex 0a5690a82d1..563bfa3dc1a 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\n\n@@ -913,162 +897,4 @@ public final class ServiceBusClientBuilder {\n             return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n         }\n     }\n-\n-    /**\n-     * Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ).\n-     * The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed\n-     * independent of the main entity.\n-     *\n-     * This is builder for creating {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to\n-     * consume dead-letter messages from Service Bus entity.\n-     *\n-     * @see ServiceBusReceiverAsyncClient\n-     * @see ServiceBusReceiverClient\n-     */\n-    @ServiceClientBuilder(serviceClients = {ServiceBusReceiverClient.class, ServiceBusReceiverAsyncClient.class})\n-    public final class ServiceBusDeadLetterReceiverClientBuilder {\n-        private int prefetchCount = DEFAULT_PREFETCH_COUNT;\n-        private String queueName;\n-        private ReceiveMode receiveMode = ReceiveMode.PEEK_LOCK;\n-        private String subscriptionName;\n-        private String topicName;\n-        private Duration maxAutoLockRenewalDuration;\n-\n-        private ServiceBusDeadLetterReceiverClientBuilder() {\n-        }\n-\n-        /**\n-         * Enables auto-lock renewal by renewing each message lock renewal until the {@code maxAutoLockRenewalDuration}\n-         * has elapsed.\n-         *\n-         * @param maxAutoLockRenewalDuration Maximum amount of time to renew the session lock.\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder maxAutoLockRenewalDuration(\n-            Duration maxAutoLockRenewalDuration) {\n-            this.maxAutoLockRenewalDuration = maxAutoLockRenewalDuration;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the prefetch count of the receiver. For both {@link ReceiveMode#PEEK_LOCK PEEK_LOCK} and {@link\n-         * ReceiveMode#RECEIVE_AND_DELETE RECEIVE_AND_DELETE} modes the default value is 1.\n-         *\n-         * Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when\n-         * and before the application asks for one using {@link ServiceBusReceiverAsyncClient#receive()}. Setting a\n-         * non-zero value will prefetch that number of messages. Setting the value to zero turns prefetch off.\n-         *\n-         * @param prefetchCount The prefetch count.\n-         *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder prefetchCount(int prefetchCount) {\n-            this.prefetchCount = prefetchCount;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the name of the queue to create a receiver for.\n-         *\n-         * @param queueName Name of the queue.\n-         *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder queueName(String queueName) {\n-            this.queueName = queueName;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the receive mode for the receiver.\n-         *\n-         * @param receiveMode Mode for receiving messages.\n-         *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder receiveMode(ReceiveMode receiveMode) {\n-            this.receiveMode = receiveMode;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the name of the subscription in the topic to listen to. <b>{@link #topicName(String)} must also be set.\n-         * </b>\n-         *\n-         * @param subscriptionName Name of the subscription.\n-         *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         * @see #topicName A topic name should be set as well.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder subscriptionName(String subscriptionName) {\n-            this.subscriptionName = subscriptionName;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the name of the topic. <b>{@link #subscriptionName(String)} must also be set.</b>\n-         *\n-         * @param topicName Name of the topic.\n-         *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         * @see #subscriptionName A subscription name should be set as well.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder topicName(String topicName) {\n-            this.topicName = topicName;\n-            return this;\n-        }\n-\n-        /**\n-         * Creates an <b>asynchronous</b> Service Bus receiver responsible for reading {@link ServiceBusMessage\n-         * messages} from a specific queue or topic.\n-         *\n-         * @return An new {@link ServiceBusReceiverAsyncClient} that receives messages from a queue or topic.\n-         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n-         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n-         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n-         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n-         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n-         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n-         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n-         */\n-        public ServiceBusReceiverAsyncClient buildAsyncClient() {\n-            final MessagingEntityType entityType = validateEntityPaths(logger, connectionStringEntityName, topicName,\n-                queueName);\n-            final String entityPath = getDeadLetterEntityPath(logger, entityType, queueName, topicName,\n-                subscriptionName);\n-\n-            if (prefetchCount < 1) {\n-                throw logger.logExceptionAsError(new IllegalArgumentException(String.format(\n-                    \"prefetchCount (%s) cannot be less than 1.\", prefetchCount)));\n-            } else if (maxAutoLockRenewalDuration != null && maxAutoLockRenewalDuration.isNegative()) {\n-                throw logger.logExceptionAsError(new IllegalArgumentException(String.format(\n-                    \"maxAutoLockRenewalDuration (%s) cannot be negative.\", maxAutoLockRenewalDuration)));\n-            }\n-\n-            final ServiceBusConnectionProcessor connectionProcessor = getOrCreateConnectionProcessor(messageSerializer);\n-            final ReceiverOptions receiverOptions = new ReceiverOptions(receiveMode, prefetchCount,\n-                maxAutoLockRenewalDuration);\n-\n-            return new ServiceBusReceiverAsyncClient(connectionProcessor.getFullyQualifiedNamespace(), entityPath,\n-                entityType, receiverOptions, connectionProcessor, ServiceBusConstants.OPERATION_TIMEOUT,\n-                tracerProvider, messageSerializer, ServiceBusClientBuilder.this::onClientClose);\n-        }\n-\n-        /**\n-         * Creates <b>synchronous</b> Service Bus receiver responsible for reading {@link ServiceBusMessage messages}\n-         * from a specific queue or topic.\n-         *\n-         * @return An new {@link ServiceBusReceiverClient} that receives messages from a queue or topic.\n-         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n-         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n-         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n-         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n-         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n-         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n-         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n-         */\n-        public ServiceBusReceiverClient buildClient() {\n-            return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n-        }\n-    }\n }\n"}}, {"oid": "9a962a85527d88b6994e2460abef7a44035596d2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9a962a85527d88b6994e2460abef7a44035596d2", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-06-29T19:27:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxODM4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447318384", "bodyText": "This documentation is incorrect.", "author": "conniey", "createdAt": "2020-06-29T23:35:23Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -897,4 +913,162 @@ public ServiceBusReceiverClient buildClient() {\n             return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n         }\n     }\n+\n+    /**\n+     * Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ).\n+     * The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed\n+     * independent of the main entity.\n+     *\n+     * This is builder for creating {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to", "originalCommit": "fb5dff8b5f4797b6621119c2c87970c75094840c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc0ODAyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447748026", "bodyText": "How do you want to change it ? The end of this sentence indicate consume dead-letter messages from Service Bus entity . That's what we do here, we create these client which point to dead letter queue.", "author": "hemanttanwar", "createdAt": "2020-06-30T14:54:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxODM4NA=="}], "type": "inlineReview", "revised_code": {"commit": "b0587e34ee0e1b3633a7626775e6987919f6637c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\nindex 0a5690a82d1..45fa9cda044 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\n\n@@ -918,10 +904,9 @@ public final class ServiceBusClientBuilder {\n      * Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ).\n      * The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed\n      * independent of the main entity.\n-     *\n-     * This is builder for creating {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to\n+     * <p>\n+     * This is builder for creating  {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to\n      * consume dead-letter messages from Service Bus entity.\n-     *\n      * @see ServiceBusReceiverAsyncClient\n      * @see ServiceBusReceiverClient\n      */\n"}}, {"oid": "35af861e4671c67b685a4b8e5b069f74c38864cd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/35af861e4671c67b685a4b8e5b069f74c38864cd", "message": "Merge branch 'master' into sb-track2-deadletter-receiver-12063", "committedDate": "2020-06-30T14:36:32Z", "type": "commit"}, {"oid": "b0587e34ee0e1b3633a7626775e6987919f6637c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b0587e34ee0e1b3633a7626775e6987919f6637c", "message": "review comments", "committedDate": "2020-06-30T15:34:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NDE2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447844169", "bodyText": "Does this need to be a method? It is only used once.", "author": "conniey", "createdAt": "2020-06-30T17:06:49Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -441,6 +450,12 @@ private static String getEntityPath(ClientLogger logger, MessagingEntityType ent\n         return entityPath;\n     }\n \n+    private static String getDeadLetterEntityPath(ClientLogger logger, MessagingEntityType entityType, String queueName,", "originalCommit": "b0587e34ee0e1b3633a7626775e6987919f6637c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0bf58e60e5342f5d65ef64b42e9d5e8b4092c1a", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\nindex 45fa9cda044..666f73a3288 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\n\n@@ -450,12 +441,6 @@ public final class ServiceBusClientBuilder {\n         return entityPath;\n     }\n \n-    private static String getDeadLetterEntityPath(ClientLogger logger, MessagingEntityType entityType, String queueName,\n-        String topicName, String subscriptionName) {\n-        String entityPath = getEntityPath(logger, entityType, queueName, topicName, subscriptionName);\n-        return entityPath + \"/$deadletterqueue\";\n-    }\n-\n     /**\n      * Builder for creating {@link ServiceBusSenderClient} and {@link ServiceBusSenderAsyncClient} to publish messages\n      * to Service Bus.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NTE2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447845164", "bodyText": "Does this link work? The see seems wrong.", "author": "conniey", "createdAt": "2020-06-30T17:08:11Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -897,4 +899,161 @@ public ServiceBusReceiverClient buildClient() {\n             return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n         }\n     }\n+\n+    /**\n+     * Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ).\n+     * The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed\n+     * independent of the main entity.\n+     * <p>\n+     * This is builder for creating  {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to\n+     * consume dead-letter messages from Service Bus entity.\n+     * @see ServiceBusReceiverAsyncClient\n+     * @see ServiceBusReceiverClient\n+     */\n+    @ServiceClientBuilder(serviceClients = {ServiceBusReceiverClient.class, ServiceBusReceiverAsyncClient.class})\n+    public final class ServiceBusDeadLetterReceiverClientBuilder {\n+        private int prefetchCount = DEFAULT_PREFETCH_COUNT;\n+        private String queueName;\n+        private ReceiveMode receiveMode = ReceiveMode.PEEK_LOCK;\n+        private String subscriptionName;\n+        private String topicName;\n+        private Duration maxAutoLockRenewalDuration;\n+\n+        private ServiceBusDeadLetterReceiverClientBuilder() {\n+        }\n+\n+        /**\n+         * Enables auto-lock renewal by renewing each message lock renewal until the {@code maxAutoLockRenewalDuration}\n+         * has elapsed.\n+         * @param maxAutoLockRenewalDuration Maximum amount of time to renew the session lock.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder maxAutoLockRenewalDuration(\n+            Duration maxAutoLockRenewalDuration) {\n+            this.maxAutoLockRenewalDuration = maxAutoLockRenewalDuration;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the prefetch count of the receiver. For both {@link ReceiveMode#PEEK_LOCK PEEK_LOCK} and {@link\n+         * ReceiveMode#RECEIVE_AND_DELETE RECEIVE_AND_DELETE} modes the default value is 1.\n+         * <p>\n+         * Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when\n+         * and before the application asks for one using {@link ServiceBusReceiverAsyncClient#receive()}. Setting a\n+         * non-zero value will prefetch that number of messages. Setting the value to zero turns prefetch off.\n+         * @param prefetchCount The prefetch count.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder prefetchCount(int prefetchCount) {\n+            this.prefetchCount = prefetchCount;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the queue to create a receiver for.\n+         * @param queueName Name of the queue.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder queueName(String queueName) {\n+            this.queueName = queueName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the receive mode for the receiver.\n+         * @param receiveMode Mode for receiving messages.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder receiveMode(ReceiveMode receiveMode) {\n+            this.receiveMode = receiveMode;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the subscription in the topic to listen to. <b>{@link #topicName(String)} must also be set.\n+         * </b>\n+         * @param subscriptionName Name of the subscription.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         * @see #topicName A topic name should be set as well.", "originalCommit": "b0587e34ee0e1b3633a7626775e6987919f6637c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0bf58e60e5342f5d65ef64b42e9d5e8b4092c1a", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\nindex 45fa9cda044..666f73a3288 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\n\n@@ -886,154 +883,8 @@ public final class ServiceBusClientBuilder {\n         /**\n          * Creates <b>synchronous</b> Service Bus receiver responsible for reading {@link ServiceBusMessage messages}\n          * from a specific queue or topic.\n-         * @return An new {@link ServiceBusReceiverClient} that receives messages from a queue or topic.\n-         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n-         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n-         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n-         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n-         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n-         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n-         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n-         */\n-        public ServiceBusReceiverClient buildClient() {\n-            return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n-        }\n-    }\n-\n-    /**\n-     * Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ).\n-     * The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed\n-     * independent of the main entity.\n-     * <p>\n-     * This is builder for creating  {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to\n-     * consume dead-letter messages from Service Bus entity.\n-     * @see ServiceBusReceiverAsyncClient\n-     * @see ServiceBusReceiverClient\n-     */\n-    @ServiceClientBuilder(serviceClients = {ServiceBusReceiverClient.class, ServiceBusReceiverAsyncClient.class})\n-    public final class ServiceBusDeadLetterReceiverClientBuilder {\n-        private int prefetchCount = DEFAULT_PREFETCH_COUNT;\n-        private String queueName;\n-        private ReceiveMode receiveMode = ReceiveMode.PEEK_LOCK;\n-        private String subscriptionName;\n-        private String topicName;\n-        private Duration maxAutoLockRenewalDuration;\n-\n-        private ServiceBusDeadLetterReceiverClientBuilder() {\n-        }\n-\n-        /**\n-         * Enables auto-lock renewal by renewing each message lock renewal until the {@code maxAutoLockRenewalDuration}\n-         * has elapsed.\n-         * @param maxAutoLockRenewalDuration Maximum amount of time to renew the session lock.\n-         *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder maxAutoLockRenewalDuration(\n-            Duration maxAutoLockRenewalDuration) {\n-            this.maxAutoLockRenewalDuration = maxAutoLockRenewalDuration;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the prefetch count of the receiver. For both {@link ReceiveMode#PEEK_LOCK PEEK_LOCK} and {@link\n-         * ReceiveMode#RECEIVE_AND_DELETE RECEIVE_AND_DELETE} modes the default value is 1.\n-         * <p>\n-         * Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when\n-         * and before the application asks for one using {@link ServiceBusReceiverAsyncClient#receive()}. Setting a\n-         * non-zero value will prefetch that number of messages. Setting the value to zero turns prefetch off.\n-         * @param prefetchCount The prefetch count.\n-         *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder prefetchCount(int prefetchCount) {\n-            this.prefetchCount = prefetchCount;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the name of the queue to create a receiver for.\n-         * @param queueName Name of the queue.\n          *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder queueName(String queueName) {\n-            this.queueName = queueName;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the receive mode for the receiver.\n-         * @param receiveMode Mode for receiving messages.\n-         *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder receiveMode(ReceiveMode receiveMode) {\n-            this.receiveMode = receiveMode;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the name of the subscription in the topic to listen to. <b>{@link #topicName(String)} must also be set.\n-         * </b>\n-         * @param subscriptionName Name of the subscription.\n-         *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         * @see #topicName A topic name should be set as well.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder subscriptionName(String subscriptionName) {\n-            this.subscriptionName = subscriptionName;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the name of the topic. <b>{@link #subscriptionName(String)} must also be set.</b>\n-         * @param topicName Name of the topic.\n-         *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         * @see #subscriptionName A subscription name should be set as well.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder topicName(String topicName) {\n-            this.topicName = topicName;\n-            return this;\n-        }\n-\n-        /**\n-         * Creates an <b>asynchronous</b> Service Bus receiver responsible for reading {@link ServiceBusMessage\n-         * messages} from secondary subqueue, called a dead-letter queue (DLQ).\n-         * @return An new {@link ServiceBusReceiverAsyncClient} that receives messages from secondary subqueue, called\n-         * a dead-letter queue (DLQ).\n-         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n-         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n-         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n-         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n-         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n-         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n-         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n-         */\n-        public ServiceBusReceiverAsyncClient buildAsyncClient() {\n-            final MessagingEntityType entityType = validateEntityPaths(logger, connectionStringEntityName, topicName,\n-                queueName);\n-            final String entityPath = getDeadLetterEntityPath(logger, entityType, queueName, topicName,\n-                subscriptionName);\n-\n-            validateAndThrow(prefetchCount, maxAutoLockRenewalDuration);\n-\n-            final ServiceBusConnectionProcessor connectionProcessor = getOrCreateConnectionProcessor(messageSerializer);\n-            final ReceiverOptions receiverOptions = new ReceiverOptions(receiveMode, prefetchCount,\n-                maxAutoLockRenewalDuration);\n-\n-            return new ServiceBusReceiverAsyncClient(connectionProcessor.getFullyQualifiedNamespace(), entityPath,\n-                entityType, receiverOptions, connectionProcessor, ServiceBusConstants.OPERATION_TIMEOUT,\n-                tracerProvider, messageSerializer, ServiceBusClientBuilder.this::onClientClose);\n-        }\n-\n-        /**\n-         * Creates <b>synchronous</b> Service Bus receiver responsible for reading {@link ServiceBusMessage messages}\n-         * from secondary subqueue, called a dead-letter queue (DLQ).\n-         *\n-         * @return An new {@link ServiceBusReceiverClient} that receives messages from secondary subqueue, called a\n-         * dead-letter queue (DLQ).\n+         * @return An new {@link ServiceBusReceiverClient} that receives messages from a queue or topic.\n          * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n          *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n          *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NTM3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447845379", "bodyText": "Does this work? the see", "author": "conniey", "createdAt": "2020-06-30T17:08:30Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -897,4 +899,161 @@ public ServiceBusReceiverClient buildClient() {\n             return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n         }\n     }\n+\n+    /**\n+     * Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ).\n+     * The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed\n+     * independent of the main entity.\n+     * <p>\n+     * This is builder for creating  {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to\n+     * consume dead-letter messages from Service Bus entity.\n+     * @see ServiceBusReceiverAsyncClient\n+     * @see ServiceBusReceiverClient\n+     */\n+    @ServiceClientBuilder(serviceClients = {ServiceBusReceiverClient.class, ServiceBusReceiverAsyncClient.class})\n+    public final class ServiceBusDeadLetterReceiverClientBuilder {\n+        private int prefetchCount = DEFAULT_PREFETCH_COUNT;\n+        private String queueName;\n+        private ReceiveMode receiveMode = ReceiveMode.PEEK_LOCK;\n+        private String subscriptionName;\n+        private String topicName;\n+        private Duration maxAutoLockRenewalDuration;\n+\n+        private ServiceBusDeadLetterReceiverClientBuilder() {\n+        }\n+\n+        /**\n+         * Enables auto-lock renewal by renewing each message lock renewal until the {@code maxAutoLockRenewalDuration}\n+         * has elapsed.\n+         * @param maxAutoLockRenewalDuration Maximum amount of time to renew the session lock.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder maxAutoLockRenewalDuration(\n+            Duration maxAutoLockRenewalDuration) {\n+            this.maxAutoLockRenewalDuration = maxAutoLockRenewalDuration;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the prefetch count of the receiver. For both {@link ReceiveMode#PEEK_LOCK PEEK_LOCK} and {@link\n+         * ReceiveMode#RECEIVE_AND_DELETE RECEIVE_AND_DELETE} modes the default value is 1.\n+         * <p>\n+         * Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when\n+         * and before the application asks for one using {@link ServiceBusReceiverAsyncClient#receive()}. Setting a\n+         * non-zero value will prefetch that number of messages. Setting the value to zero turns prefetch off.\n+         * @param prefetchCount The prefetch count.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder prefetchCount(int prefetchCount) {\n+            this.prefetchCount = prefetchCount;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the queue to create a receiver for.\n+         * @param queueName Name of the queue.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder queueName(String queueName) {\n+            this.queueName = queueName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the receive mode for the receiver.\n+         * @param receiveMode Mode for receiving messages.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder receiveMode(ReceiveMode receiveMode) {\n+            this.receiveMode = receiveMode;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the subscription in the topic to listen to. <b>{@link #topicName(String)} must also be set.\n+         * </b>\n+         * @param subscriptionName Name of the subscription.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         * @see #topicName A topic name should be set as well.\n+         */\n+        public ServiceBusDeadLetterReceiverClientBuilder subscriptionName(String subscriptionName) {\n+            this.subscriptionName = subscriptionName;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the name of the topic. <b>{@link #subscriptionName(String)} must also be set.</b>\n+         * @param topicName Name of the topic.\n+         *\n+         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n+         * @see #subscriptionName A subscription name should be set as well.", "originalCommit": "b0587e34ee0e1b3633a7626775e6987919f6637c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0bf58e60e5342f5d65ef64b42e9d5e8b4092c1a", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\nindex 45fa9cda044..666f73a3288 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\n\n@@ -886,154 +883,8 @@ public final class ServiceBusClientBuilder {\n         /**\n          * Creates <b>synchronous</b> Service Bus receiver responsible for reading {@link ServiceBusMessage messages}\n          * from a specific queue or topic.\n-         * @return An new {@link ServiceBusReceiverClient} that receives messages from a queue or topic.\n-         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n-         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n-         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n-         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n-         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n-         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n-         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n-         */\n-        public ServiceBusReceiverClient buildClient() {\n-            return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n-        }\n-    }\n-\n-    /**\n-     * Azure Service Bus queues and topic subscriptions provide a secondary subqueue, called a dead-letter queue (DLQ).\n-     * The dead-letter queue doesn't need to be explicitly created and can't be deleted or otherwise managed\n-     * independent of the main entity.\n-     * <p>\n-     * This is builder for creating  {@link ServiceBusReceiverClient} and {@link ServiceBusReceiverAsyncClient} to\n-     * consume dead-letter messages from Service Bus entity.\n-     * @see ServiceBusReceiverAsyncClient\n-     * @see ServiceBusReceiverClient\n-     */\n-    @ServiceClientBuilder(serviceClients = {ServiceBusReceiverClient.class, ServiceBusReceiverAsyncClient.class})\n-    public final class ServiceBusDeadLetterReceiverClientBuilder {\n-        private int prefetchCount = DEFAULT_PREFETCH_COUNT;\n-        private String queueName;\n-        private ReceiveMode receiveMode = ReceiveMode.PEEK_LOCK;\n-        private String subscriptionName;\n-        private String topicName;\n-        private Duration maxAutoLockRenewalDuration;\n-\n-        private ServiceBusDeadLetterReceiverClientBuilder() {\n-        }\n-\n-        /**\n-         * Enables auto-lock renewal by renewing each message lock renewal until the {@code maxAutoLockRenewalDuration}\n-         * has elapsed.\n-         * @param maxAutoLockRenewalDuration Maximum amount of time to renew the session lock.\n-         *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder maxAutoLockRenewalDuration(\n-            Duration maxAutoLockRenewalDuration) {\n-            this.maxAutoLockRenewalDuration = maxAutoLockRenewalDuration;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the prefetch count of the receiver. For both {@link ReceiveMode#PEEK_LOCK PEEK_LOCK} and {@link\n-         * ReceiveMode#RECEIVE_AND_DELETE RECEIVE_AND_DELETE} modes the default value is 1.\n-         * <p>\n-         * Prefetch speeds up the message flow by aiming to have a message readily available for local retrieval when\n-         * and before the application asks for one using {@link ServiceBusReceiverAsyncClient#receive()}. Setting a\n-         * non-zero value will prefetch that number of messages. Setting the value to zero turns prefetch off.\n-         * @param prefetchCount The prefetch count.\n-         *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder prefetchCount(int prefetchCount) {\n-            this.prefetchCount = prefetchCount;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the name of the queue to create a receiver for.\n-         * @param queueName Name of the queue.\n          *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder queueName(String queueName) {\n-            this.queueName = queueName;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the receive mode for the receiver.\n-         * @param receiveMode Mode for receiving messages.\n-         *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder receiveMode(ReceiveMode receiveMode) {\n-            this.receiveMode = receiveMode;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the name of the subscription in the topic to listen to. <b>{@link #topicName(String)} must also be set.\n-         * </b>\n-         * @param subscriptionName Name of the subscription.\n-         *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         * @see #topicName A topic name should be set as well.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder subscriptionName(String subscriptionName) {\n-            this.subscriptionName = subscriptionName;\n-            return this;\n-        }\n-\n-        /**\n-         * Sets the name of the topic. <b>{@link #subscriptionName(String)} must also be set.</b>\n-         * @param topicName Name of the topic.\n-         *\n-         * @return The modified {@link ServiceBusDeadLetterReceiverClientBuilder} object.\n-         * @see #subscriptionName A subscription name should be set as well.\n-         */\n-        public ServiceBusDeadLetterReceiverClientBuilder topicName(String topicName) {\n-            this.topicName = topicName;\n-            return this;\n-        }\n-\n-        /**\n-         * Creates an <b>asynchronous</b> Service Bus receiver responsible for reading {@link ServiceBusMessage\n-         * messages} from secondary subqueue, called a dead-letter queue (DLQ).\n-         * @return An new {@link ServiceBusReceiverAsyncClient} that receives messages from secondary subqueue, called\n-         * a dead-letter queue (DLQ).\n-         * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n-         *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n-         *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n-         *     {@link #queueName(String) queueName} or {@link #topicName(String) topicName}. Lastly, if a {@link\n-         *     #topicName(String) topicName} is set, but {@link #subscriptionName(String) subscriptionName} is not.\n-         * @throws IllegalArgumentException Queue or topic name are not set via {@link #queueName(String)\n-         *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n-         */\n-        public ServiceBusReceiverAsyncClient buildAsyncClient() {\n-            final MessagingEntityType entityType = validateEntityPaths(logger, connectionStringEntityName, topicName,\n-                queueName);\n-            final String entityPath = getDeadLetterEntityPath(logger, entityType, queueName, topicName,\n-                subscriptionName);\n-\n-            validateAndThrow(prefetchCount, maxAutoLockRenewalDuration);\n-\n-            final ServiceBusConnectionProcessor connectionProcessor = getOrCreateConnectionProcessor(messageSerializer);\n-            final ReceiverOptions receiverOptions = new ReceiverOptions(receiveMode, prefetchCount,\n-                maxAutoLockRenewalDuration);\n-\n-            return new ServiceBusReceiverAsyncClient(connectionProcessor.getFullyQualifiedNamespace(), entityPath,\n-                entityType, receiverOptions, connectionProcessor, ServiceBusConstants.OPERATION_TIMEOUT,\n-                tracerProvider, messageSerializer, ServiceBusClientBuilder.this::onClientClose);\n-        }\n-\n-        /**\n-         * Creates <b>synchronous</b> Service Bus receiver responsible for reading {@link ServiceBusMessage messages}\n-         * from secondary subqueue, called a dead-letter queue (DLQ).\n-         *\n-         * @return An new {@link ServiceBusReceiverClient} that receives messages from secondary subqueue, called a\n-         * dead-letter queue (DLQ).\n+         * @return An new {@link ServiceBusReceiverClient} that receives messages from a queue or topic.\n          * @throws IllegalStateException if {@link #queueName(String) queueName} or {@link #topicName(String)\n          *     topicName} are not set or, both of these fields are set. It is also thrown if the Service Bus {@link\n          *     #connectionString(String) connectionString} contains an {@code EntityPath} that does not match one set in\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0NjkwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12299#discussion_r447846901", "bodyText": "This doesn't need to be a function. We use this once.", "author": "conniey", "createdAt": "2020-06-30T17:11:02Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -1035,4 +1079,28 @@ private void completeDeferredMessages(ServiceBusReceiverAsyncClient client, Serv\n         receiver.complete(receivedDeferredMessage).block(TIMEOUT);\n     }\n \n+    private ServiceBusClientBuilder.ServiceBusDeadLetterReceiverClientBuilder getDeadLetterReceiverBuilder(boolean useCredentials,", "originalCommit": "b0587e34ee0e1b3633a7626775e6987919f6637c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0bf58e60e5342f5d65ef64b42e9d5e8b4092c1a", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\nindex 53994aff1fd..7e51ec3386e 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n\n@@ -1076,31 +1032,7 @@ class ServiceBusReceiverAsyncClientIntegrationTest extends IntegrationTestBase {\n         final ServiceBusReceivedMessage receivedDeferredMessage = client\n             .receiveDeferredMessage(receivedMessage.getSequenceNumber())\n             .block(TIMEOUT);\n-        receiver.complete(receivedDeferredMessage).block(TIMEOUT);\n+        receiver.complete(receivedDeferredMessage.getLockToken()).block(TIMEOUT);\n     }\n \n-    private ServiceBusClientBuilder.ServiceBusDeadLetterReceiverClientBuilder getDeadLetterReceiverBuilder(boolean useCredentials,\n-        MessagingEntityType entityType, int entityIndex, Function<ServiceBusClientBuilder, ServiceBusClientBuilder> onBuilderCreate) {\n-\n-        ServiceBusClientBuilder builder = getBuilder(useCredentials);\n-        builder = onBuilderCreate.apply(builder);\n-\n-        switch (entityType) {\n-            case QUEUE:\n-                final String queueName = getQueueName(entityIndex);\n-                assertNotNull(queueName, \"'queueName' cannot be null.\");\n-\n-                return builder.deadLetterReceiver().queueName(queueName);\n-            case SUBSCRIPTION:\n-                final String topicName = getTopicName(entityIndex);\n-                final String subscriptionName = getSubscriptionBaseName();\n-                assertNotNull(topicName, \"'topicName' cannot be null.\");\n-                assertNotNull(subscriptionName, \"'subscriptionName' cannot be null.\");\n-\n-                return builder.deadLetterReceiver().topicName(topicName).subscriptionName(subscriptionName);\n-            default:\n-                throw logger.logExceptionAsError(new IllegalArgumentException(\"Unknown entity type: \" + entityType));\n-        }\n-\n-    }\n }\n"}}, {"oid": "b0bf58e60e5342f5d65ef64b42e9d5e8b4092c1a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b0bf58e60e5342f5d65ef64b42e9d5e8b4092c1a", "message": "Merge branch 'master' of github.com:Azure/azure-sdk-for-java", "committedDate": "2020-07-01T18:19:03Z", "type": "commit"}, {"oid": "1a923d24f6e7e6e8defe0547902038f717e37724", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1a923d24f6e7e6e8defe0547902038f717e37724", "message": "Merge branch 'master' into sb-track2-deadletter-receiver-12063", "committedDate": "2020-07-01T19:00:03Z", "type": "commit"}, {"oid": "e942bd22e25f996a698bf94ba617711b370a6dd1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e942bd22e25f996a698bf94ba617711b370a6dd1", "message": "Review comments", "committedDate": "2020-07-01T21:24:43Z", "type": "commit"}]}