{"pr_number": 8391, "pr_title": "TA PagedFlux, PagedIterable, PagedResponse class", "pr_createdAt": "2020-02-21T21:52:20Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/8391", "timeline": [{"oid": "a228b8194d6f5a89166415b9f3de7452f8eee6ba", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a228b8194d6f5a89166415b9f3de7452f8eee6ba", "message": "add only TA PagedFlux, PagedIterable, PagedResponse class and samples", "committedDate": "2020-02-21T21:49:39Z", "type": "commit"}, {"oid": "be1473382a37a0ec3bace1a093b60d2edaf73767", "url": "https://github.com/Azure/azure-sdk-for-java/commit/be1473382a37a0ec3bace1a093b60d2edaf73767", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into TextAnalyticsPagedFlux", "committedDate": "2020-02-23T06:56:35Z", "type": "commit"}, {"oid": "9838984723fda2dfeb16cadbf4200a005b6541cc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9838984723fda2dfeb16cadbf4200a005b6541cc", "message": "inputText in document result along with ID", "committedDate": "2020-02-24T00:03:25Z", "type": "commit"}, {"oid": "d4c8ed7db93e30b75dff3de6e09f5ecceeb42fdf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d4c8ed7db93e30b75dff3de6e09f5ecceeb42fdf", "message": "iterabel stream and EntitiesResult", "committedDate": "2020-02-24T08:55:40Z", "type": "commit"}, {"oid": "e9f7c0e31ebae35dd73a69e115f1ecbc07ba60dd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e9f7c0e31ebae35dd73a69e115f1ecbc07ba60dd", "message": "add more samples", "committedDate": "2020-02-24T16:18:21Z", "type": "commit"}, {"oid": "e0c3a246f24b388c9f5ed76401825a28756edc80", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e0c3a246f24b388c9f5ed76401825a28756edc80", "message": "before arch board", "committedDate": "2020-02-24T21:07:16Z", "type": "commit"}, {"oid": "55fbace5fa4e40d56ec021b8e9c93c7e599ead33", "url": "https://github.com/Azure/azure-sdk-for-java/commit/55fbace5fa4e40d56ec021b8e9c93c7e599ead33", "message": "before arch board 2", "committedDate": "2020-02-24T21:07:30Z", "type": "commit"}, {"oid": "ee6d6fb55a3c72abd6ce35a3114ee283d3e62587", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ee6d6fb55a3c72abd6ce35a3114ee283d3e62587", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into TextAnalyticsPagedFlux", "committedDate": "2020-03-02T19:00:56Z", "type": "commit"}, {"oid": "2cd7d000b52f4d41d8864b2cddf3a4dfdff45feb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2cd7d000b52f4d41d8864b2cddf3a4dfdff45feb", "message": "address feedbacks", "committedDate": "2020-03-02T19:06:56Z", "type": "commit"}, {"oid": "9ecb2980d7b64bad89d6ab6717566849a5217acb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9ecb2980d7b64bad89d6ab6717566849a5217acb", "message": "resolve conflict after merge from another branch", "committedDate": "2020-03-02T19:24:39Z", "type": "commit"}, {"oid": "4499d0a12bba37dd366d0f4a4b98516afe2ebdb7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4499d0a12bba37dd366d0f4a4b98516afe2ebdb7", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into TextAnalyticsPagedFlux", "committedDate": "2020-03-02T21:30:40Z", "type": "commit"}, {"oid": "9fd45b565aa0f9faf87a017d5df6fd86252808be", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9fd45b565aa0f9faf87a017d5df6fd86252808be", "message": "before arch board", "committedDate": "2020-03-03T06:12:13Z", "type": "commit"}, {"oid": "749281454f38fc49bccf0b3cab312e586d36633e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/749281454f38fc49bccf0b3cab312e586d36633e", "message": "readme updates", "committedDate": "2020-03-03T17:52:21Z", "type": "commit"}, {"oid": "221c3c4331fd982d5ab109dcabdcc24f40d07c68", "url": "https://github.com/Azure/azure-sdk-for-java/commit/221c3c4331fd982d5ab109dcabdcc24f40d07c68", "message": "feedbaak 0303 part 1", "committedDate": "2020-03-04T02:03:49Z", "type": "commit"}, {"oid": "a70e66591aebf2087ffc00be2b8496c53a16b0e3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a70e66591aebf2087ffc00be2b8496c53a16b0e3", "message": "add an overload api and codesnippet but need to add tests as well", "committedDate": "2020-03-04T07:53:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4Mzg2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r387683862", "bodyText": "if the method takes the Context parameter, shouldn't it be withResponse?", "author": "samvaity", "createdAt": "2020-03-04T14:01:12Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java", "diffHunk": "@@ -71,6 +66,46 @@ public void useAadAsyncClient() {\n             .buildAsyncClient();\n     }\n \n+    /**\n+     * Code snippet for rotating API key of the client\n+     */\n+    public void rotatingApiKey() {\n+        TextAnalyticsApiKeyCredential credential = new TextAnalyticsApiKeyCredential(\"{api_key}\");\n+        TextAnalyticsClient textAnalyticsClient = new TextAnalyticsClientBuilder()\n+            .apiKey(credential)\n+            .endpoint(\"{endpoint}\")\n+            .buildClient();\n+\n+        credential.updateCredential(\"{new_api_key}\");\n+    }\n+\n+    /**\n+     * Code snippet for handling exception\n+     */\n+    public void handlingException() {\n+        List<DetectLanguageInput> inputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"us\"),\n+            new DetectLanguageInput(\"1\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+        );\n+\n+        try {\n+            textAnalyticsClient.detectLanguageBatch(inputs, null, Context.NONE);", "originalCommit": "a70e66591aebf2087ffc00be2b8496c53a16b0e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMTA5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r387901090", "bodyText": "There will be no \"withResponse\" for pagination. See the pagination example: https://azure.github.io/azure-sdk/java_design.html#pagination", "author": "mssfang", "createdAt": "2020-03-04T19:57:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4Mzg2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "66e1585ef9d7dd8a6f0b4c005728f7e1753eff1f", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java\nindex 157f3dca918..9d1adcc49bd 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java\n\n@@ -85,7 +85,7 @@ public class ReadmeSamples {\n     public void handlingException() {\n         List<DetectLanguageInput> inputs = Arrays.asList(\n             new DetectLanguageInput(\"1\", \"This is written in English.\", \"us\"),\n-            new DetectLanguageInput(\"1\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+            new DetectLanguageInput(\"1\", \"Este es un documento  escrito en Espa\u00f1ol.\", \"es\")\n         );\n \n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4NDk3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r387684978", "bodyText": "nit : containing", "author": "samvaity", "createdAt": "2020-03-04T14:03:11Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +51,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.", "originalCommit": "a70e66591aebf2087ffc00be2b8496c53a16b0e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "53492122a5b92a96455620cc4fc757292087bc4b", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\nindex 9df5e670f14..01e37aceb2d 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n\n@@ -153,7 +153,7 @@ class AnalyzeSentimentAsyncClient {\n      */\n     private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment documentSentiment) {\n         // Document text sentiment\n-        final DocumentSentimentLabel documentSentimentLabel = DocumentSentimentLabel.fromString(\n+        final TextSentimentLabel documentSentimentLabel = TextSentimentLabel.fromString(\n             documentSentiment.getSentiment().toString());\n         if (documentSentimentLabel == null) {\n             // Not throw exception for an invalid Sentiment type because we should not skip processing the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4NzgzMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r387687831", "bodyText": "Need to make sure that the naming is consistent for this one. Either documents, inputs or textInputs etc.", "author": "samvaity", "createdAt": "2020-03-04T14:07:58Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +51,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.", "originalCommit": "a70e66591aebf2087ffc00be2b8496c53a16b0e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "53492122a5b92a96455620cc4fc757292087bc4b", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\nindex 9df5e670f14..01e37aceb2d 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n\n@@ -153,7 +153,7 @@ class AnalyzeSentimentAsyncClient {\n      */\n     private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment documentSentiment) {\n         // Document text sentiment\n-        final DocumentSentimentLabel documentSentimentLabel = DocumentSentimentLabel.fromString(\n+        final TextSentimentLabel documentSentimentLabel = TextSentimentLabel.fromString(\n             documentSentiment.getSentiment().toString());\n         if (documentSentimentLabel == null) {\n             // Not throw exception for an invalid Sentiment type because we should not skip processing the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4OTUwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r387689505", "bodyText": "Can combine analyzeSentimentBatch and anlayzeSentimentBatchWithContext to be a single method.", "author": "samvaity", "createdAt": "2020-03-04T14:10:46Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +51,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.\n+     *\n+     * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     */\n+    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> textInputs,", "originalCommit": "a70e66591aebf2087ffc00be2b8496c53a16b0e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3MTg2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388471864", "bodyText": "analyzeSentimentBatchWithContext takes context and but analyzeSentimentBatch doesn't. Not found a way to make them be a single method. Do you have a suggestion on how?", "author": "mssfang", "createdAt": "2020-03-05T18:13:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4OTUwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMTAyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388511027", "bodyText": "Can't we call analyzeSentimentBatchWithContext from analyzeSentimentBatch and pass Context as Context.NONE, rather than repeating the same code block?", "author": "samvaity", "createdAt": "2020-03-05T19:23:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4OTUwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzNDQ5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388534497", "bodyText": "See line 67.\nreturn new TextAnalyticsPagedFlux<>(() -> (continuationToken, pageSize) -> withContext(context ->\n\nDoes passing Context.None helps here?", "author": "mssfang", "createdAt": "2020-03-05T20:07:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4OTUwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "53492122a5b92a96455620cc4fc757292087bc4b", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\nindex 9df5e670f14..01e37aceb2d 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n\n@@ -153,7 +153,7 @@ class AnalyzeSentimentAsyncClient {\n      */\n     private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment documentSentiment) {\n         // Document text sentiment\n-        final DocumentSentimentLabel documentSentimentLabel = DocumentSentimentLabel.fromString(\n+        final TextSentimentLabel documentSentimentLabel = TextSentimentLabel.fromString(\n             documentSentiment.getSentiment().toString());\n         if (documentSentimentLabel == null) {\n             // Not throw exception for an invalid Sentiment type because we should not skip processing the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5NDI3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r387694274", "bodyText": "do we need this in a variable here?", "author": "samvaity", "createdAt": "2020-03-04T14:18:36Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +51,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.\n+     *\n+     * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     */\n+    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> textInputs,\n+        TextAnalyticsRequestOptions options) {\n+        Objects.requireNonNull(textInputs, \"'textInputs' cannot be null.\");\n+        try {\n+            return new TextAnalyticsPagedFlux<>(() -> (continuationToken, pageSize) -> withContext(context ->\n+                service.sentimentWithRestResponseAsync(\n+                    new MultiLanguageBatchInput().setDocuments(Transforms.toMultiLanguageInput(textInputs)),\n+                    options == null ? null : options.getModelVersion(),\n+                    options == null ? null : options.isStatisticsShown(), context)\n+                    .doOnSubscribe(ignoredValue ->\n+                        logger.info(\"A batch of text sentiment input - {}\", textInputs.toString()))\n+                    .doOnSuccess(response -> logger.info(\"A batch of text sentiment output - {}\", response))\n+                    .doOnError(error -> logger.warning(\"Failed to analyze text sentiment - {}\", error))\n+                    .map(this::toTextAnalyticsPagedResponse))\n+                    .flux());\n+        } catch (RuntimeException ex) {\n+            return new TextAnalyticsPagedFlux<>(() ->\n+                (continuationToken, pageSize) -> fluxError(logger, ex));\n+        }\n+    }\n+\n+    /**\n+     * Helper function that calling service with max overloaded parameters and returns {@link TextAnalyticsPagedFlux}\n+     * that is a paged flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     *\n+     * @return The {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     */\n+    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatchWithContext(\n         Iterable<TextDocumentInput> textInputs, TextAnalyticsRequestOptions options, Context context) {\n+\n         Objects.requireNonNull(textInputs, \"'textInputs' cannot be null.\");\n \n-        final MultiLanguageBatchInput batchInput = new MultiLanguageBatchInput()\n-            .setDocuments(toMultiLanguageInput(textInputs));\n-        return service.sentimentWithRestResponseAsync(\n-            batchInput,\n-            options == null ? null : options.getModelVersion(),\n-            options == null ? null : options.showStatistics(), context)\n-            .doOnSubscribe(ignoredValue -> logger.info(\"A batch of text sentiment input - {}\", textInputs.toString()))\n-            .doOnSuccess(response -> logger.info(\"A batch of text sentiment output - {}\", response))\n-            .doOnError(error -> logger.warning(\"Failed to analyze text sentiment - {}\", error))\n-            .map(response -> new SimpleResponse<>(response, toDocumentResultCollection(response.getValue())));\n+        return new TextAnalyticsPagedFlux<>(() -> (continuationToken, pageSize) ->\n+            service.sentimentWithRestResponseAsync(\n+                new MultiLanguageBatchInput().setDocuments(Transforms.toMultiLanguageInput(textInputs)),\n+                options == null ? null : options.getModelVersion(),\n+                options == null ? null : options.isStatisticsShown(), context)\n+                .doOnSubscribe(ignoredValue ->\n+                    logger.info(\"A batch of text sentiment input - {}\", textInputs.toString()))\n+                .doOnSuccess(response -> logger.info(\"A batch of text sentiment output - {}\", response))\n+                .doOnError(error -> logger.warning(\"Failed to analyze text sentiment - {}\", error))\n+                .map(response -> toTextAnalyticsPagedResponse(response))\n+                .flux());\n     }\n \n     /**\n-     * Helper method to convert the service response of {@link SentimentResponse} to {@link DocumentResultCollection}.\n+     * Helper method to convert the service response of {@link SentimentResponse} to {@link TextAnalyticsPagedResponse}\n+     * of {@link AnalyzeSentimentResult}.\n      *\n-     * @param sentimentResponse the {@link SentimentResponse} returned by the service.\n+     * @param response The {@link SimpleResponse} of {@link SentimentResponse} returned by the service.\n      *\n-     * @return the {@link DocumentResultCollection} of {@link AnalyzeSentimentResult} to be returned by the SDK.\n+     * @return The {@link TextAnalyticsPagedResponse} of {@link AnalyzeSentimentResult} returned by the SDK.\n      */\n-    private DocumentResultCollection<AnalyzeSentimentResult> toDocumentResultCollection(\n-        final SentimentResponse sentimentResponse) {\n+    private TextAnalyticsPagedResponse<AnalyzeSentimentResult> toTextAnalyticsPagedResponse(\n+        final SimpleResponse<SentimentResponse> response) {\n+        SentimentResponse sentimentResponse = response.getValue();\n         List<AnalyzeSentimentResult> analyzeSentimentResults = new ArrayList<>();\n         for (DocumentSentiment documentSentiment : sentimentResponse.getDocuments()) {\n-            analyzeSentimentResults.add(convertToAnalyzeSentimentResult(documentSentiment));\n+\n+            analyzeSentimentResults.add(\n+                convertToAnalyzeSentimentResult(documentSentiment));\n         }\n         for (DocumentError documentError : sentimentResponse.getErrors()) {\n             final com.azure.ai.textanalytics.models.TextAnalyticsError error =\n                 toTextAnalyticsError(documentError.getError());\n-            analyzeSentimentResults.add(new AnalyzeSentimentResult(documentError.getId(), null,\n+\n+            final String documentId = documentError.getId();\n+            analyzeSentimentResults.add(new AnalyzeSentimentResult(documentId, null,", "originalCommit": "a70e66591aebf2087ffc00be2b8496c53a16b0e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "53492122a5b92a96455620cc4fc757292087bc4b", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\nindex 9df5e670f14..01e37aceb2d 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n\n@@ -153,7 +153,7 @@ class AnalyzeSentimentAsyncClient {\n      */\n     private AnalyzeSentimentResult convertToAnalyzeSentimentResult(DocumentSentiment documentSentiment) {\n         // Document text sentiment\n-        final DocumentSentimentLabel documentSentimentLabel = DocumentSentimentLabel.fromString(\n+        final TextSentimentLabel documentSentimentLabel = TextSentimentLabel.fromString(\n             documentSentiment.getSentiment().toString());\n         if (documentSentimentLabel == null) {\n             // Not throw exception for an invalid Sentiment type because we should not skip processing the\n"}}, {"oid": "6cfafea8a49387849ce59dd86fe9b212c44d4010", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6cfafea8a49387849ce59dd86fe9b212c44d4010", "message": "update tests", "committedDate": "2020-03-04T23:47:01Z", "type": "commit"}, {"oid": "21af44c8a4381448ec5e48cd18246d91a7df6439", "url": "https://github.com/Azure/azure-sdk-for-java/commit/21af44c8a4381448ec5e48cd18246d91a7df6439", "message": "renaming without categorized word", "committedDate": "2020-03-05T00:22:46Z", "type": "commit"}, {"oid": "53492122a5b92a96455620cc4fc757292087bc4b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/53492122a5b92a96455620cc4fc757292087bc4b", "message": "merge SentenceSentimentLabel and DocumentSentimentLabel to TextSentimentLabel", "committedDate": "2020-03-05T00:31:29Z", "type": "commit"}, {"oid": "b667a5d5e43a7c2e30fba3c4dc1936f676bee1df", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b667a5d5e43a7c2e30fba3c4dc1936f676bee1df", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into TextAnalyticsPagedFlux", "committedDate": "2020-03-05T05:22:27Z", "type": "commit"}, {"oid": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1ec36e2b64a26f3f9248bbb750b9f1e4ca368126", "message": "correct warning and remove redundant", "committedDate": "2020-03-05T05:40:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzNzYyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388437628", "bodyText": "should we include a link to TextAnalyticsRequestOptions  instead of listing the properties?", "author": "maririos", "createdAt": "2020-03-05T17:11:14Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +50,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.", "originalCommit": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2fa1b57fcf3cb57d76fa930543c136458125cac9", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\nindex 78c5ebcc9e3..a7aa429325e 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n\n@@ -52,9 +53,9 @@ class AnalyzeSentimentAsyncClient {\n \n     /**\n      * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n-     * flux contains {@link AnalyzeSentimentResult}.\n+     * flux containing {@link AnalyzeSentimentResult}.\n      *\n-     * @param textInputs A batch of input texts.\n+     * @param textInputs A batch of documents.\n      * @param options The request options, such as the training model version and to show statistics.\n      *\n      * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MTk2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388441968", "bodyText": "Is the idea that when the user activates logging, it will see all of this?\nDo we really need to print all the input?\nAlso, text sentiment input sounds weird. The text doesn't include the sentiment, the service is going to analyze the text to get a sentiment. So maybe, Batch of documents to analyze", "author": "maririos", "createdAt": "2020-03-05T17:18:40Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +50,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.\n+     *\n+     * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     */\n+    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> textInputs,\n+        TextAnalyticsRequestOptions options) {\n+        Objects.requireNonNull(textInputs, \"'textInputs' cannot be null.\");\n+        try {\n+            return new TextAnalyticsPagedFlux<>(() -> (continuationToken, pageSize) -> withContext(context ->\n+                service.sentimentWithRestResponseAsync(\n+                    new MultiLanguageBatchInput().setDocuments(Transforms.toMultiLanguageInput(textInputs)),\n+                    options == null ? null : options.getModelVersion(),\n+                    options == null ? null : options.isStatisticsShown(), context)\n+                    .doOnSubscribe(ignoredValue ->\n+                        logger.info(\"A batch of text sentiment input - {}\", textInputs.toString()))", "originalCommit": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU0ODQxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388548417", "bodyText": "It is a code style for using the reactor. When subscribe happens, we want to know the inputs.\nwill change to A batch of documents to analyze", "author": "mssfang", "createdAt": "2020-03-05T20:33:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MTk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MTMzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388591333", "bodyText": "I see.\nThanks for explaining all the Java-isms to me :)", "author": "maririos", "createdAt": "2020-03-05T21:58:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0MTk2OA=="}], "type": "inlineReview", "revised_code": {"commit": "2fa1b57fcf3cb57d76fa930543c136458125cac9", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\nindex 78c5ebcc9e3..a7aa429325e 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n\n@@ -52,9 +53,9 @@ class AnalyzeSentimentAsyncClient {\n \n     /**\n      * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n-     * flux contains {@link AnalyzeSentimentResult}.\n+     * flux containing {@link AnalyzeSentimentResult}.\n      *\n-     * @param textInputs A batch of input texts.\n+     * @param textInputs A batch of documents.\n      * @param options The request options, such as the training model version and to show statistics.\n      *\n      * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0NDIyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388444227", "bodyText": "maybe Analyzed sentiment for a batch of documents?", "author": "maririos", "createdAt": "2020-03-05T17:22:42Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +50,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.\n+     *\n+     * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     */\n+    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> textInputs,\n+        TextAnalyticsRequestOptions options) {\n+        Objects.requireNonNull(textInputs, \"'textInputs' cannot be null.\");\n+        try {\n+            return new TextAnalyticsPagedFlux<>(() -> (continuationToken, pageSize) -> withContext(context ->\n+                service.sentimentWithRestResponseAsync(\n+                    new MultiLanguageBatchInput().setDocuments(Transforms.toMultiLanguageInput(textInputs)),\n+                    options == null ? null : options.getModelVersion(),\n+                    options == null ? null : options.isStatisticsShown(), context)\n+                    .doOnSubscribe(ignoredValue ->\n+                        logger.info(\"A batch of text sentiment input - {}\", textInputs.toString()))\n+                    .doOnSuccess(response -> logger.info(\"A batch of text sentiment output - {}\", response))", "originalCommit": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2fa1b57fcf3cb57d76fa930543c136458125cac9", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\nindex 78c5ebcc9e3..a7aa429325e 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n\n@@ -52,9 +53,9 @@ class AnalyzeSentimentAsyncClient {\n \n     /**\n      * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n-     * flux contains {@link AnalyzeSentimentResult}.\n+     * flux containing {@link AnalyzeSentimentResult}.\n      *\n-     * @param textInputs A batch of input texts.\n+     * @param textInputs A batch of documents.\n      * @param options The request options, such as the training model version and to show statistics.\n      *\n      * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0NDM4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388444388", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .doOnError(error -> logger.warning(\"Failed to analyze text sentiment - {}\", error))\n          \n          \n            \n                                .doOnError(error -> logger.warning(\"Failed to analyze sentiment - {}\", error))", "author": "maririos", "createdAt": "2020-03-05T17:22:57Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +50,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.\n+     *\n+     * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     */\n+    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> textInputs,\n+        TextAnalyticsRequestOptions options) {\n+        Objects.requireNonNull(textInputs, \"'textInputs' cannot be null.\");\n+        try {\n+            return new TextAnalyticsPagedFlux<>(() -> (continuationToken, pageSize) -> withContext(context ->\n+                service.sentimentWithRestResponseAsync(\n+                    new MultiLanguageBatchInput().setDocuments(Transforms.toMultiLanguageInput(textInputs)),\n+                    options == null ? null : options.getModelVersion(),\n+                    options == null ? null : options.isStatisticsShown(), context)\n+                    .doOnSubscribe(ignoredValue ->\n+                        logger.info(\"A batch of text sentiment input - {}\", textInputs.toString()))\n+                    .doOnSuccess(response -> logger.info(\"A batch of text sentiment output - {}\", response))\n+                    .doOnError(error -> logger.warning(\"Failed to analyze text sentiment - {}\", error))", "originalCommit": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2fa1b57fcf3cb57d76fa930543c136458125cac9", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\nindex 78c5ebcc9e3..a7aa429325e 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n\n@@ -52,9 +53,9 @@ class AnalyzeSentimentAsyncClient {\n \n     /**\n      * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n-     * flux contains {@link AnalyzeSentimentResult}.\n+     * flux containing {@link AnalyzeSentimentResult}.\n      *\n-     * @param textInputs A batch of input texts.\n+     * @param textInputs A batch of documents.\n      * @param options The request options, such as the training model version and to show statistics.\n      *\n      * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0NjAzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388446038", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Helper function that calling service with max overloaded parameters and returns {@link TextAnalyticsPagedFlux}\n          \n          \n            \n                 * that is a paged flux contains {@link AnalyzeSentimentResult}.\n          \n          \n            \n                 * Helper function for calling service with max overloaded parameters that a returns {@link TextAnalyticsPagedFlux}\n          \n          \n            \n                 * which is a paged flux that contains {@link AnalyzeSentimentResult}.\n          \n      \n    \n    \n  \n\nor something like that", "author": "maririos", "createdAt": "2020-03-05T17:25:52Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +50,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.\n+     *\n+     * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     */\n+    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> textInputs,\n+        TextAnalyticsRequestOptions options) {\n+        Objects.requireNonNull(textInputs, \"'textInputs' cannot be null.\");\n+        try {\n+            return new TextAnalyticsPagedFlux<>(() -> (continuationToken, pageSize) -> withContext(context ->\n+                service.sentimentWithRestResponseAsync(\n+                    new MultiLanguageBatchInput().setDocuments(Transforms.toMultiLanguageInput(textInputs)),\n+                    options == null ? null : options.getModelVersion(),\n+                    options == null ? null : options.isStatisticsShown(), context)\n+                    .doOnSubscribe(ignoredValue ->\n+                        logger.info(\"A batch of text sentiment input - {}\", textInputs.toString()))\n+                    .doOnSuccess(response -> logger.info(\"A batch of text sentiment output - {}\", response))\n+                    .doOnError(error -> logger.warning(\"Failed to analyze text sentiment - {}\", error))\n+                    .map(this::toTextAnalyticsPagedResponse))\n+                    .flux());\n+        } catch (RuntimeException ex) {\n+            return new TextAnalyticsPagedFlux<>(() ->\n+                (continuationToken, pageSize) -> fluxError(logger, ex));\n+        }\n+    }\n+\n+    /**\n+     * Helper function that calling service with max overloaded parameters and returns {@link TextAnalyticsPagedFlux}\n+     * that is a paged flux contains {@link AnalyzeSentimentResult}.", "originalCommit": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2fa1b57fcf3cb57d76fa930543c136458125cac9", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\nindex 78c5ebcc9e3..a7aa429325e 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n\n@@ -52,9 +53,9 @@ class AnalyzeSentimentAsyncClient {\n \n     /**\n      * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n-     * flux contains {@link AnalyzeSentimentResult}.\n+     * flux containing {@link AnalyzeSentimentResult}.\n      *\n-     * @param textInputs A batch of input texts.\n+     * @param textInputs A batch of documents.\n      * @param options The request options, such as the training model version and to show statistics.\n      *\n      * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0NjM0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388446344", "bodyText": "same comment here", "author": "maririos", "createdAt": "2020-03-05T17:26:24Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java", "diffHunk": "@@ -50,57 +50,110 @@\n         this.service = service;\n     }\n \n-    Mono<Response<DocumentResultCollection<AnalyzeSentimentResult>>> analyzeSentimentBatchWithResponse(\n+    /**\n+     * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n+     * flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.\n+     *\n+     * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n+     */\n+    TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> textInputs,\n+        TextAnalyticsRequestOptions options) {\n+        Objects.requireNonNull(textInputs, \"'textInputs' cannot be null.\");\n+        try {\n+            return new TextAnalyticsPagedFlux<>(() -> (continuationToken, pageSize) -> withContext(context ->\n+                service.sentimentWithRestResponseAsync(\n+                    new MultiLanguageBatchInput().setDocuments(Transforms.toMultiLanguageInput(textInputs)),\n+                    options == null ? null : options.getModelVersion(),\n+                    options == null ? null : options.isStatisticsShown(), context)\n+                    .doOnSubscribe(ignoredValue ->\n+                        logger.info(\"A batch of text sentiment input - {}\", textInputs.toString()))\n+                    .doOnSuccess(response -> logger.info(\"A batch of text sentiment output - {}\", response))\n+                    .doOnError(error -> logger.warning(\"Failed to analyze text sentiment - {}\", error))\n+                    .map(this::toTextAnalyticsPagedResponse))\n+                    .flux());\n+        } catch (RuntimeException ex) {\n+            return new TextAnalyticsPagedFlux<>(() ->\n+                (continuationToken, pageSize) -> fluxError(logger, ex));\n+        }\n+    }\n+\n+    /**\n+     * Helper function that calling service with max overloaded parameters and returns {@link TextAnalyticsPagedFlux}\n+     * that is a paged flux contains {@link AnalyzeSentimentResult}.\n+     *\n+     * @param textInputs A batch of input texts.\n+     * @param options The request options, such as the training model version and to show statistics.", "originalCommit": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2fa1b57fcf3cb57d76fa930543c136458125cac9", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\nindex 78c5ebcc9e3..a7aa429325e 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/AnalyzeSentimentAsyncClient.java\n\n@@ -52,9 +53,9 @@ class AnalyzeSentimentAsyncClient {\n \n     /**\n      * Helper function that analyzes a batch of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n-     * flux contains {@link AnalyzeSentimentResult}.\n+     * flux containing {@link AnalyzeSentimentResult}.\n      *\n-     * @param textInputs A batch of input texts.\n+     * @param textInputs A batch of documents.\n      * @param options The request options, such as the training model version and to show statistics.\n      *\n      * @return {@link TextAnalyticsPagedFlux} of {@link AnalyzeSentimentResult}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0Nzk4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388447980", "bodyText": "Consider changing to IncludeStatistics.\nisStatisticsShown sounds like the service already returns them and we just want to show them, when in reality we are asking the service for those values so we can show them", "author": "maririos", "createdAt": "2020-03-05T17:29:24Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsRequestOptions.java", "diffHunk": "@@ -11,7 +11,7 @@\n @Fluent\n public final class TextAnalyticsRequestOptions {\n     private String modelVersion;\n-    private boolean showStatistics;\n+    private boolean isStatisticsShown;", "originalCommit": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyNzUyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388527527", "bodyText": "I can change the private variable to includeStatistics but method name need to include is* as prefix. How is that sounds to you? So the method name is isIncludeStatistics.\nhttps://azure.github.io/azure-sdk/java_design.html#model-classes\n\u2705 DO use the JavaBean naming convention of get*, set*, and is*.", "author": "mssfang", "createdAt": "2020-03-05T19:54:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0Nzk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MTYwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388591601", "bodyText": "Cool! Java-ism :)\nThanks for the explanation Shawn", "author": "maririos", "createdAt": "2020-03-05T21:58:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0Nzk4MA=="}], "type": "inlineReview", "revised_code": {"commit": "2fa1b57fcf3cb57d76fa930543c136458125cac9", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsRequestOptions.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsRequestOptions.java\nindex 350317ee78c..a18be8359bc 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsRequestOptions.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsRequestOptions.java\n\n@@ -6,7 +6,7 @@ package com.azure.ai.textanalytics.models;\n import com.azure.core.annotation.Fluent;\n \n /**\n- * The TextAnalyticsRequestOptions model.\n+ * The {@link TextAnalyticsRequestOptions} model.\n  */\n @Fluent\n public final class TextAnalyticsRequestOptions {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0OTIwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388449208", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        new DetectLanguageInput(\"1\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n          \n          \n            \n                        new DetectLanguageInput(\"1\", \"Este es un documento escrito en Espa\u00f1ol.\", \"es\")", "author": "maririos", "createdAt": "2020-03-05T17:31:35Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java", "diffHunk": "@@ -71,6 +66,46 @@ public void useAadAsyncClient() {\n             .buildAsyncClient();\n     }\n \n+    /**\n+     * Code snippet for rotating API key of the client\n+     */\n+    public void rotatingApiKey() {\n+        TextAnalyticsApiKeyCredential credential = new TextAnalyticsApiKeyCredential(\"{api_key}\");\n+        TextAnalyticsClient textAnalyticsClient = new TextAnalyticsClientBuilder()\n+            .apiKey(credential)\n+            .endpoint(\"{endpoint}\")\n+            .buildClient();\n+\n+        credential.updateCredential(\"{new_api_key}\");\n+    }\n+\n+    /**\n+     * Code snippet for handling exception\n+     */\n+    public void handlingException() {\n+        List<DetectLanguageInput> inputs = Arrays.asList(\n+            new DetectLanguageInput(\"1\", \"This is written in English.\", \"us\"),\n+            new DetectLanguageInput(\"1\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")", "originalCommit": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66e1585ef9d7dd8a6f0b4c005728f7e1753eff1f", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java\nindex b556e4756ff..9d1adcc49bd 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/ReadmeSamples.java\n\n@@ -85,7 +85,7 @@ public class ReadmeSamples {\n     public void handlingException() {\n         List<DetectLanguageInput> inputs = Arrays.asList(\n             new DetectLanguageInput(\"1\", \"This is written in English.\", \"us\"),\n-            new DetectLanguageInput(\"1\", \"Este es un document escrito en Espa\u00f1ol.\", \"es\")\n+            new DetectLanguageInput(\"1\", \"Este es un documento  escrito en Espa\u00f1ol.\", \"es\")\n         );\n \n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1MTMzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388451339", "bodyText": "looks like this string is copied in multiple places. Make sure to replace document to documento everywhere", "author": "maririos", "createdAt": "2020-03-05T17:35:31Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsClientJavaDocCodeSnippets.java", "diffHunk": "@@ -123,50 +145,52 @@ public void detectLanguageStringListWithOptions() {\n             \"This is written in English\",\n             \"Este es un document escrito en Espa\u00f1ol.\"", "originalCommit": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2fa1b57fcf3cb57d76fa930543c136458125cac9", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsClientJavaDocCodeSnippets.java b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsClientJavaDocCodeSnippets.java\nindex 0ac929b2a50..fa97fb5c356 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsClientJavaDocCodeSnippets.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/TextAnalyticsClientJavaDocCodeSnippets.java\n\n@@ -150,7 +150,7 @@ public class TextAnalyticsClientJavaDocCodeSnippets {\n             response -> {\n                 // Batch statistics\n                 TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n-                System.out.printf(\"A batch of document statistics, transaction count: %s, valid document count: %s.%n\",\n+                System.out.printf(\"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n                     batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n                 // Batch result of languages\n                 response.getElements().forEach(detectLanguageResult -> {\n"}}, {"oid": "2fa1b57fcf3cb57d76fa930543c136458125cac9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2fa1b57fcf3cb57d76fa930543c136458125cac9", "message": "rename fixes", "committedDate": "2020-03-05T19:28:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMjgwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388512800", "bodyText": "Shouldn't this still be text?", "author": "samvaity", "createdAt": "2020-03-05T19:27:08Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsAsyncClient.java", "diffHunk": "@@ -123,18 +118,18 @@ public TextAnalyticsServiceVersion getServiceVersion() {\n      * the country hint.\n      *\n      * <p><strong>Code sample</strong></p>\n-     * <p>Detects language in a text. Subscribes to the call asynchronously and prints out the detected language\n+     * <p>Detects language in a document. Subscribes to the call asynchronously and prints out the detected language", "originalCommit": "1ec36e2b64a26f3f9248bbb750b9f1e4ca368126", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyMTU3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388521572", "bodyText": "We are all using document instead of text.", "author": "mssfang", "createdAt": "2020-03-05T19:43:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMjgwMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNTU2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388515564", "bodyText": "Seemed to be missing a few values mentioned here - https://docs.microsoft.com/en-us/azure/cognitive-services/Text-Analytics/named-entity-types", "author": "samvaity", "createdAt": "2020-03-05T19:32:19Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/EntityCategory.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+import com.azure.core.util.ExpandableStringEnum;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+\n+/**\n+ * Gets the entity category inferred by the text analytics service's named entity recognition model.\n+ * The list of available categories is described at\n+ * See <a href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/Text-Analytics/named-entity-types\"></a>.\n+ */\n+@Immutable\n+public final class EntityCategory extends ExpandableStringEnum<EntityCategory> {", "originalCommit": "2fa1b57fcf3cb57d76fa930543c136458125cac9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5Mjc2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388592769", "bodyText": "Thanks for pointing this out! I need to update .NET with the new values too", "author": "maririos", "createdAt": "2020-03-05T22:01:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNTU2NA=="}], "type": "inlineReview", "revised_code": {"commit": "66e1585ef9d7dd8a6f0b4c005728f7e1753eff1f", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/EntityCategory.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/EntityCategory.java\nindex 5e35ef39d6c..5a624871b10 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/EntityCategory.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/EntityCategory.java\n\n@@ -16,10 +16,15 @@ import com.fasterxml.jackson.annotation.JsonCreator;\n public final class EntityCategory extends ExpandableStringEnum<EntityCategory> {\n \n     /**\n-     * Specifies that the entity corresponds to a Person.\n+     * Specifies that the entity corresponds to a person.\n      */\n     public static final EntityCategory PERSON = fromString(\"Person\");\n \n+    /**\n+     * Specifies that the entity corresponds to a person type.\n+     */\n+    public static final EntityCategory PERSON_TYPE = fromString(\"PersonType\");\n+\n     /**\n      * Specifies that entity contains natural or human-made landmarks, structures, or geographical features.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNjkyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388516926", "bodyText": "Don't need the . in the end of line here.", "author": "samvaity", "createdAt": "2020-03-05T19:35:10Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/LinkedEntityMatch.java", "diffHunk": "@@ -22,23 +22,23 @@\n     private final String text;\n \n     /*\n-     * Start position (in Unicode characters) for the entity match text.\n+     * Grapheme start position for the entity match text.\n      */\n     private final int offset;\n \n     /*\n-     * Length (in Unicode characters) for the entity match text.\n+     * Grapheme length for the entity match text.\n      */\n     private final int length;\n \n     /**\n-     * Creates a {@code LinkedEntityMatch} model that describes linked entity match.\n+     * Creates a {@link LinkedEntityMatch} model that describes linked entity match.\n      *\n-     * @param text entity text as appears in the request\n-     * @param score if a well-known item is recognized, a decimal number denoting the\n-     * confidence level between 0 and 1 will be returned\n-     * @param offset start position (in Unicode characters) for the entity match text\n-     * @param length length (in Unicode characters) for the entity match text\n+     * @param text The entity text as appears in the request.\n+     * @param score If a well-known item is recognized, a decimal number denoting the.", "originalCommit": "2fa1b57fcf3cb57d76fa930543c136458125cac9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66e1585ef9d7dd8a6f0b4c005728f7e1753eff1f", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/LinkedEntityMatch.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/LinkedEntityMatch.java\nindex 6b1f00b631a..319ff5078e4 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/LinkedEntityMatch.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/LinkedEntityMatch.java\n\n@@ -24,27 +24,27 @@ public final class LinkedEntityMatch {\n     /*\n      * Grapheme start position for the entity match text.\n      */\n-    private final int offset;\n+    private final int graphemeOffset;\n \n     /*\n      * Grapheme length for the entity match text.\n      */\n-    private final int length;\n+    private final int graphemeLength;\n \n     /**\n      * Creates a {@link LinkedEntityMatch} model that describes linked entity match.\n      *\n      * @param text The entity text as appears in the request.\n-     * @param score If a well-known item is recognized, a decimal number denoting the.\n+     * @param score If a well-known item is recognized, a decimal number denoting the\n      * confidence level between 0 and 1 will be returned.\n-     * @param offset Grapheme start position for the entity match text.\n-     * @param length Grapheme length for the entity match text.\n+     * @param graphemeOffset Grapheme start position for the entity match text.\n+     * @param graphemeLength Grapheme length for the entity match text.\n      */\n-    public LinkedEntityMatch(String text, double score, int offset, int length) {\n+    public LinkedEntityMatch(String text, double score, int graphemeOffset, int graphemeLength) {\n         this.text = text;\n         this.score = score;\n-        this.offset = offset;\n-        this.length = length;\n+        this.graphemeOffset = graphemeOffset;\n+        this.graphemeLength = graphemeLength;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5NTUxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388595518", "bodyText": "Looks like we are missing the option to pass None in this PR", "author": "maririos", "createdAt": "2020-03-05T22:07:25Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/DetectLanguageInput.java", "diffHunk": "@@ -40,9 +40,11 @@ public DetectLanguageInput(String id, String text) {\n     /**\n      * Creates an input for detect language that will takes {@code id}, {@code text} and {@code countryHint}.\n      *\n-     * @param id unique, non-empty document identifier\n-     * @param text the text property\n-     * @param countryHint the country hint\n+     * @param id Unique, non-empty document identifier.\n+     * @param text The text property.\n+     * @param countryHint Accepts two letter country codes specified by ISO 3166-1 alpha-2. Defaults to \"US\" if not", "originalCommit": "2fa1b57fcf3cb57d76fa930543c136458125cac9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66e1585ef9d7dd8a6f0b4c005728f7e1753eff1f", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/DetectLanguageInput.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/DetectLanguageInput.java\nindex 33ef6f1a7e0..a08b8f03c4f 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/DetectLanguageInput.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/DetectLanguageInput.java\n\n@@ -44,7 +44,7 @@ public final class DetectLanguageInput {\n      * @param text The text property.\n      * @param countryHint Accepts two letter country codes specified by ISO 3166-1 alpha-2. Defaults to \"US\" if not\n      * specified. To remove this behavior you can reset this parameter by setting this value to empty string\n-     * {@code countryHint} = \"\".\n+     * {@code countryHint} = \"\" or \"none\".\n      */\n     public DetectLanguageInput(String id, String text, String countryHint) {\n         this.id = id;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5OTAxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388599015", "bodyText": "Consider changing to documents or batch of documents,\nSame across this and other documents", "author": "maririos", "createdAt": "2020-03-05T22:15:23Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizedCategorizedEntitiesBatchStringDocuments.java", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.batch;\n+\n+import com.azure.ai.textanalytics.TextAnalyticsClient;\n+import com.azure.ai.textanalytics.TextAnalyticsClientBuilder;\n+import com.azure.ai.textanalytics.models.TextAnalyticsApiKeyCredential;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * Sample demonstrates how to recognize the entities of a batch input text.", "originalCommit": "2fa1b57fcf3cb57d76fa930543c136458125cac9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66e1585ef9d7dd8a6f0b4c005728f7e1753eff1f", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizedCategorizedEntitiesBatchStringDocuments.java b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizeEntitiesBatchStringDocuments.java\nsimilarity index 80%\nrename from sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizedCategorizedEntitiesBatchStringDocuments.java\nrename to sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizeEntitiesBatchStringDocuments.java\nindex 6a478b66278..15b5d46668e 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizedCategorizedEntitiesBatchStringDocuments.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/batch/RecognizeEntitiesBatchStringDocuments.java\n\n@@ -11,11 +11,11 @@ import java.util.Arrays;\n import java.util.List;\n \n /**\n- * Sample demonstrates how to recognize the entities of a batch input text.\n+ * Sample demonstrates how to recognize the entities of documents.\n  */\n-public class RecognizedCategorizedEntitiesBatchStringDocuments {\n+public class RecognizeEntitiesBatchStringDocuments {\n     /**\n-     * Main method to invoke this demo about how to recognize the entities of a batch input text.\n+     * Main method to invoke this demo about how to recognize the entities of documents.\n      *\n      * @param args Unused arguments to the program.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMzA1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388603056", "bodyText": "I see the rename happened in the docs, but not in the class itself", "author": "maririos", "createdAt": "2020-03-05T22:25:30Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/models/SentimentConfidenceScorePerLabel.java", "diffHunk": "@@ -44,7 +44,7 @@ public double getPositive() {\n      * Set the positive property: The positive property.\n      *\n      * @param positive the positive value to set.\n-     * @return the SentimentConfidenceScorePerLabel object itself.\n+     * @return the SentimentConfidenceScores object itself.", "originalCommit": "2fa1b57fcf3cb57d76fa930543c136458125cac9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMzE5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388603190", "bodyText": "Is this another of those Java things that I am looking wrong? :p", "author": "maririos", "createdAt": "2020-03-05T22:25:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMzA1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwNjMzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388606338", "bodyText": "Yeah, NV. I found the right one", "author": "maririos", "createdAt": "2020-03-05T22:34:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMzA1Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMzUzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388603536", "bodyText": "we should drop the 'Labelhere too, so justTextSentiment`", "author": "maririos", "createdAt": "2020-03-05T22:26:35Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextSentimentLabel.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+import com.azure.core.annotation.Immutable;\n+import com.azure.core.util.ExpandableStringEnum;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+\n+/**\n+ * Defines values for {@link TextSentimentLabel}.", "originalCommit": "2fa1b57fcf3cb57d76fa930543c136458125cac9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66e1585ef9d7dd8a6f0b4c005728f7e1753eff1f", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextSentimentLabel.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextSentimentLabel.java\ndeleted file mode 100644\nindex ef20bad556d..00000000000\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextSentimentLabel.java\n+++ /dev/null\n\n@@ -1,45 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.ai.textanalytics.models;\n-\n-import com.azure.core.annotation.Immutable;\n-import com.azure.core.util.ExpandableStringEnum;\n-import com.fasterxml.jackson.annotation.JsonCreator;\n-\n-/**\n- * Defines values for {@link TextSentimentLabel}.\n- */\n-@Immutable\n-public final class TextSentimentLabel extends ExpandableStringEnum<TextSentimentLabel> {\n-    /**\n-     * Static value Positive for {@link TextSentimentLabel}.\n-     */\n-    public static final TextSentimentLabel POSITIVE = fromString(\"positive\");\n-\n-    /**\n-     * Static value Neutral for {@link TextSentimentLabel}.\n-     */\n-    public static final TextSentimentLabel NEUTRAL = fromString(\"neutral\");\n-\n-    /**\n-     * Static value Negative for {@link TextSentimentLabel}.\n-     */\n-    public static final TextSentimentLabel NEGATIVE = fromString(\"negative\");\n-\n-    /**\n-     * Static value Mixed for {@link TextSentimentLabel}.\n-     */\n-    public static final TextSentimentLabel MIXED = fromString(\"mixed\");\n-\n-    /**\n-     * Creates or finds a {@link TextSentimentLabel} from its string representation.\n-     *\n-     * @param name A name to look for.\n-     * @return The corresponding {@link TextSentimentLabel}.\n-     */\n-    @JsonCreator\n-    public static TextSentimentLabel fromString(String name) {\n-        return fromString(name, TextSentimentLabel.class);\n-    }\n-}\n"}}, {"oid": "66e1585ef9d7dd8a6f0b4c005728f7e1753eff1f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/66e1585ef9d7dd8a6f0b4c005728f7e1753eff1f", "message": "address feedbacks", "committedDate": "2020-03-06T02:33:50Z", "type": "commit"}, {"oid": "9d9353b08fd0f81182eaac3e93d82b1bf955f7cb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9d9353b08fd0f81182eaac3e93d82b1bf955f7cb", "message": "add playbacks files to pass build", "committedDate": "2020-03-06T03:48:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcwODUzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8391#discussion_r388708532", "bodyText": "hint", "author": "maririos", "createdAt": "2020-03-06T04:31:24Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizeLinkedEntityAsyncClient.java", "diffHunk": "@@ -52,8 +53,10 @@\n     /**\n      * Helper function that recognize a single of documents and returns {@link TextAnalyticsPagedFlux} that is a paged\n      * flux containing {@link LinkedEntity}.\n+     * Helper function for calling service with max overloaded parameters that a returns {@link TextAnalyticsPagedFlux}\n+     * which is a paged flux that contains {@link AnalyzeSentimentResult}.\n      *\n-     * @param text A single input text.\n+     * @param text A single document.\n      * @param language The language hint.", "originalCommit": "66e1585ef9d7dd8a6f0b4c005728f7e1753eff1f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9b100f7053e4cbd39986202d6e67c52ff9af7a6d", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizeLinkedEntityAsyncClient.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizeLinkedEntityAsyncClient.java\nindex 07e8d079aa0..74b2a17f22f 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizeLinkedEntityAsyncClient.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/RecognizeLinkedEntityAsyncClient.java\n\n@@ -57,7 +57,7 @@ class RecognizeLinkedEntityAsyncClient {\n      * which is a paged flux that contains {@link AnalyzeSentimentResult}.\n      *\n      * @param text A single document.\n-     * @param language The language hint.\n+     * @param language The language code.\n      *\n      * @return The {@link TextAnalyticsPagedFlux} of {@link LinkedEntity}.\n      */\n"}}, {"oid": "9b100f7053e4cbd39986202d6e67c52ff9af7a6d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9b100f7053e4cbd39986202d6e67c52ff9af7a6d", "message": "update changelog and address wording feedbacks", "committedDate": "2020-03-06T06:19:08Z", "type": "commit"}, {"oid": "dbeafc2a48b1a4bae81377e6212d80d60821effc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dbeafc2a48b1a4bae81377e6212d80d60821effc", "message": "run npx comment to update readme java code", "committedDate": "2020-03-06T06:24:19Z", "type": "commit"}, {"oid": "3fb89b2917e2feb8228019697ed09bc65d7a3d8c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3fb89b2917e2feb8228019697ed09bc65d7a3d8c", "message": "remove duplicate javadoc", "committedDate": "2020-03-06T18:25:44Z", "type": "commit"}, {"oid": "934b5682a32e090a7b7fcc00afe1de9888b9b003", "url": "https://github.com/Azure/azure-sdk-for-java/commit/934b5682a32e090a7b7fcc00afe1de9888b9b003", "message": "remove unused import", "committedDate": "2020-03-06T19:35:29Z", "type": "commit"}, {"oid": "9b25f8194658bf5271dbeed976b71b435ac27002", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9b25f8194658bf5271dbeed976b71b435ac27002", "message": "refactor to simplify some duplication code", "committedDate": "2020-03-06T21:29:27Z", "type": "commit"}, {"oid": "b7216747c391ec08e3fcdbfd21fba316fc85641d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b7216747c391ec08e3fcdbfd21fba316fc85641d", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into TextAnalyticsPagedFlux", "committedDate": "2020-03-06T21:33:57Z", "type": "commit"}, {"oid": "7f93898a7d29ac20423b8b7543592f63e43236c6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7f93898a7d29ac20423b8b7543592f63e43236c6", "message": "update azure core and netty version", "committedDate": "2020-03-06T21:39:30Z", "type": "commit"}, {"oid": "7afd5c746b994679f1880be016b688f28ee808f2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7afd5c746b994679f1880be016b688f28ee808f2", "message": "update TA version in readme", "committedDate": "2020-03-06T21:59:06Z", "type": "commit"}]}