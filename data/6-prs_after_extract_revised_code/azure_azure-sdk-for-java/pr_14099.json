{"pr_number": 14099, "pr_title": "Mgmt: Migrate Redis", "pr_createdAt": "2020-08-14T05:36:36Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14099", "timeline": [{"oid": "bb1a3e6bceca7aa71bd0c5e66ec80dc720bab25c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bb1a3e6bceca7aa71bd0c5e66ec80dc720bab25c", "message": "move redis", "committedDate": "2020-08-10T02:08:11Z", "type": "commit"}, {"oid": "7aabf98b75e80dc17eb360ad3d115f5dc188ccb3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7aabf98b75e80dc17eb360ad3d115f5dc188ccb3", "message": "update pom", "committedDate": "2020-08-10T02:11:01Z", "type": "commit"}, {"oid": "65ed007157dcf03525b3e6ff52c7a005618d61c9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/65ed007157dcf03525b3e6ff52c7a005618d61c9", "message": "add versioning", "committedDate": "2020-08-10T02:12:50Z", "type": "commit"}, {"oid": "f8e0518ee7304db04a40f50a7dc74a8f94ce91f0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f8e0518ee7304db04a40f50a7dc74a8f94ce91f0", "message": "move to models", "committedDate": "2020-08-10T02:13:38Z", "type": "commit"}, {"oid": "3fdc84270615a655888240b27bd9d1d31ea93d20", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3fdc84270615a655888240b27bd9d1d31ea93d20", "message": "update api-specs", "committedDate": "2020-08-10T02:16:23Z", "type": "commit"}, {"oid": "55b2077f80e84cebf879db9d26f496d198bfaa8c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/55b2077f80e84cebf879db9d26f496d198bfaa8c", "message": "rename package", "committedDate": "2020-08-10T02:23:49Z", "type": "commit"}, {"oid": "805d34f29b3177233af5da074fb767d4acbc90f0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/805d34f29b3177233af5da074fb767d4acbc90f0", "message": "generate", "committedDate": "2020-08-10T02:25:31Z", "type": "commit"}, {"oid": "76fad3b5203971a53496524fa844474a205a1666", "url": "https://github.com/Azure/azure-sdk-for-java/commit/76fad3b5203971a53496524fa844474a205a1666", "message": "move manager", "committedDate": "2020-08-10T02:26:14Z", "type": "commit"}, {"oid": "3aa731d1f617fad3f7fc96a86c1547a0d804f872", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3aa731d1f617fad3f7fc96a86c1547a0d804f872", "message": "update redis manager", "committedDate": "2020-08-10T02:31:27Z", "type": "commit"}, {"oid": "da1d9717ea7148550ec35fda786a59989053d3cf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/da1d9717ea7148550ec35fda786a59989053d3cf", "message": "remove Beta and Method", "committedDate": "2020-08-10T02:40:08Z", "type": "commit"}, {"oid": "b9b42589e891416ca9cfeb381f0263bb1ca07f48", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b9b42589e891416ca9cfeb381f0263bb1ca07f48", "message": "fix name error", "committedDate": "2020-08-10T02:42:47Z", "type": "commit"}, {"oid": "e31a135b8d14492208f4976dc5409f0ae8a2120d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e31a135b8d14492208f4976dc5409f0ae8a2120d", "message": "fix models compile", "committedDate": "2020-08-10T02:44:31Z", "type": "commit"}, {"oid": "37ac2d03f598d31715e856e64d99d7f0f12494ac", "url": "https://github.com/Azure/azure-sdk-for-java/commit/37ac2d03f598d31715e856e64d99d7f0f12494ac", "message": "fix some compile error", "committedDate": "2020-08-10T03:03:16Z", "type": "commit"}, {"oid": "fb4d4b24b9a318aceb483da94304033684ba3a2d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fb4d4b24b9a318aceb483da94304033684ba3a2d", "message": "fix impl compile error", "committedDate": "2020-08-10T03:17:56Z", "type": "commit"}, {"oid": "d27bf65ebe623c27c06b5fea4637dca814280635", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d27bf65ebe623c27c06b5fea4637dca814280635", "message": "fix test compile", "committedDate": "2020-08-10T05:25:22Z", "type": "commit"}, {"oid": "c9d86b98cd572062137a5b81a0dc19875cb17d83", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c9d86b98cd572062137a5b81a0dc19875cb17d83", "message": "ChildResourcesCached to flux", "committedDate": "2020-08-10T06:02:33Z", "type": "commit"}, {"oid": "d13a2cdcdadfc0893fa02c9c156bff1274e16d81", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d13a2cdcdadfc0893fa02c9c156bff1274e16d81", "message": "remove redundant", "committedDate": "2020-08-10T06:03:04Z", "type": "commit"}, {"oid": "200017748795aa63824775adb3084bc586afcd34", "url": "https://github.com/Azure/azure-sdk-for-java/commit/200017748795aa63824775adb3084bc586afcd34", "message": "fix some checkstyle", "committedDate": "2020-08-10T06:10:33Z", "type": "commit"}, {"oid": "9f86b798d41aa6ad1c4e9e0aca9696109186dbe1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9f86b798d41aa6ad1c4e9e0aca9696109186dbe1", "message": "update impl of child resource", "committedDate": "2020-08-10T06:17:33Z", "type": "commit"}, {"oid": "f26f0b871d64630753d75c1c7044ec61384cb590", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f26f0b871d64630753d75c1c7044ec61384cb590", "message": "fix map with null", "committedDate": "2020-08-10T06:42:05Z", "type": "commit"}, {"oid": "c894d491662925517fd688398aa3cb446fe1283b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c894d491662925517fd688398aa3cb446fe1283b", "message": "use lazy load for extern child resources", "committedDate": "2020-08-12T02:37:26Z", "type": "commit"}, {"oid": "8d31aa1a63e1ad118631d75bc33e334c3d681a11", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8d31aa1a63e1ad118631d75bc33e334c3d681a11", "message": "update redis cache LRO", "committedDate": "2020-08-12T10:15:04Z", "type": "commit"}, {"oid": "17aac58aa526afb5ac7ec46981fef0f30080d0a1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/17aac58aa526afb5ac7ec46981fef0f30080d0a1", "message": "update session-records", "committedDate": "2020-08-12T10:15:47Z", "type": "commit"}, {"oid": "b045e84702d49303f790f07c8207fd13ba723517", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b045e84702d49303f790f07c8207fd13ba723517", "message": "regen redis", "committedDate": "2020-08-13T05:09:18Z", "type": "commit"}, {"oid": "85d8ca86dd006e3f8d0c489405b52b4fb892e026", "url": "https://github.com/Azure/azure-sdk-for-java/commit/85d8ca86dd006e3f8d0c489405b52b4fb892e026", "message": "format code", "committedDate": "2020-08-13T05:11:26Z", "type": "commit"}, {"oid": "370c5d5179f65cd36b553b7929fbd788157cc99b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/370c5d5179f65cd36b553b7929fbd788157cc99b", "message": "Merge branch 'master' into redis", "committedDate": "2020-08-13T05:19:56Z", "type": "commit"}, {"oid": "23db43335c358422a3ebc9d3607183d4c704807b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/23db43335c358422a3ebc9d3607183d4c704807b", "message": "add redis to azure", "committedDate": "2020-08-13T07:59:10Z", "type": "commit"}, {"oid": "a059625b6f29213835f8044730f2d745270e5f23", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a059625b6f29213835f8044730f2d745270e5f23", "message": "update session-records", "committedDate": "2020-08-13T07:59:44Z", "type": "commit"}, {"oid": "dcbe46284e9b832048df4573788bbb0fb07227f5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dcbe46284e9b832048df4573788bbb0fb07227f5", "message": "move samples", "committedDate": "2020-08-13T08:03:22Z", "type": "commit"}, {"oid": "1e70706b195ef2cd097e19fb506dcfab58434703", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1e70706b195ef2cd097e19fb506dcfab58434703", "message": "fix compile error", "committedDate": "2020-08-13T08:09:18Z", "type": "commit"}, {"oid": "257df00719312414c704196e477bb537724b0418", "url": "https://github.com/Azure/azure-sdk-for-java/commit/257df00719312414c704196e477bb537724b0418", "message": "update session-records", "committedDate": "2020-08-13T09:18:59Z", "type": "commit"}, {"oid": "64bd6203b00c3d2bba50323cc8549261a079a412", "url": "https://github.com/Azure/azure-sdk-for-java/commit/64bd6203b00c3d2bba50323cc8549261a079a412", "message": "add non async listChildResources", "committedDate": "2020-08-14T02:06:02Z", "type": "commit"}, {"oid": "b6e3ea3d189b6394ed8af251039acbbd818260ff", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b6e3ea3d189b6394ed8af251039acbbd818260ff", "message": "revert 9f86b798 in vm impl", "committedDate": "2020-08-14T02:06:08Z", "type": "commit"}, {"oid": "b579efab038659940d140c05f484adb53fe0094b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b579efab038659940d140c05f484adb53fe0094b", "message": "update lincense", "committedDate": "2020-08-14T02:06:09Z", "type": "commit"}, {"oid": "26b74c9eaf25095dea8241ff1a52419d5ffad464", "url": "https://github.com/Azure/azure-sdk-for-java/commit/26b74c9eaf25095dea8241ff1a52419d5ffad464", "message": "fix checkstyle", "committedDate": "2020-08-14T05:35:38Z", "type": "commit"}, {"oid": "11d300705626d244748463c253d137b7511f6df6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/11d300705626d244748463c253d137b7511f6df6", "message": "Merge branch 'master' into redis", "committedDate": "2020-08-14T05:47:36Z", "type": "commit"}, {"oid": "7a488fc5d2af2bd06a0d94f361e6126d5f0db9e3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7a488fc5d2af2bd06a0d94f361e6126d5f0db9e3", "message": "update version", "committedDate": "2020-08-14T05:48:16Z", "type": "commit"}, {"oid": "6d5d06e4216a8d57fd76a04fa4c492be4fefd86a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6d5d06e4216a8d57fd76a04fa4c492be4fefd86a", "message": "add readme and changelog", "committedDate": "2020-08-14T06:07:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0MDUyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14099#discussion_r470440521", "bodyText": "Seems better to put to a shared method like ensureCollectionLoaded etc.", "author": "weidongxu-microsoft", "createdAt": "2020-08-14T06:46:08Z", "path": "sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisPatchSchedulesImpl.java", "diffHunk": "@@ -25,15 +26,17 @@\n         RedisCache> {\n     // Currently Redis Cache has one PatchSchedule\n     private final String patchScheduleName = \"default\";\n+    private boolean load = false;\n \n     RedisPatchSchedulesImpl(RedisCacheImpl parent) {\n         super(parent, parent.taskGroup(), \"PatchSchedule\");\n-        if (parent.id() != null) {\n-            this.cacheCollection();\n-        }\n     }\n \n     Map<String, RedisPatchSchedule> patchSchedulesAsMap() {\n+        if (!load) {\n+            load = true;\n+            cacheCollection();\n+        }\n         Map<String, RedisPatchSchedule> result = new HashMap<>();", "originalCommit": "c894d491662925517fd688398aa3cb446fe1283b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3NzY0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14099#discussion_r470477643", "bodyText": "done", "author": "ChenTanyi", "createdAt": "2020-08-14T08:14:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0MDUyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "6eab09e50b668c5c520534c459eca5bee0b7e620", "chunk": "diff --git a/sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisPatchSchedulesImpl.java b/sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisPatchSchedulesImpl.java\nindex d928e7d8f86..40c632a46e4 100644\n--- a/sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisPatchSchedulesImpl.java\n+++ b/sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisPatchSchedulesImpl.java\n\n@@ -13,30 +12,30 @@ import reactor.core.publisher.Mono;\n \n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n \n-/**\n- * Represents a Redis patch schedule collection associated with a Redis cache instance.\n- */\n-class RedisPatchSchedulesImpl extends\n-    ExternalChildResourcesCachedImpl<RedisPatchScheduleImpl,\n-        RedisPatchSchedule,\n-        RedisPatchScheduleInner,\n-                RedisCacheImpl,\n-        RedisCache> {\n+/** Represents a Redis patch schedule collection associated with a Redis cache instance. */\n+class RedisPatchSchedulesImpl\n+    extends ExternalChildResourcesCachedImpl<\n+        RedisPatchScheduleImpl, RedisPatchSchedule, RedisPatchScheduleInner, RedisCacheImpl, RedisCache> {\n     // Currently Redis Cache has one PatchSchedule\n-    private final String patchScheduleName = \"default\";\n+    private static final String PATCH_SCHEDULE_NAME = \"default\";\n     private boolean load = false;\n \n     RedisPatchSchedulesImpl(RedisCacheImpl parent) {\n         super(parent, parent.taskGroup(), \"PatchSchedule\");\n     }\n \n-    Map<String, RedisPatchSchedule> patchSchedulesAsMap() {\n+    void ensureCollectionLoaded() {\n         if (!load) {\n             load = true;\n             cacheCollection();\n         }\n+    }\n+\n+    Map<String, RedisPatchSchedule> patchSchedulesAsMap() {\n+        ensureCollectionLoaded();\n         Map<String, RedisPatchSchedule> result = new HashMap<>();\n         for (Map.Entry<String, RedisPatchScheduleImpl> entry : this.collection().entrySet()) {\n             RedisPatchScheduleImpl patchSchedule = entry.getValue();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0MTA5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14099#discussion_r470441091", "bodyText": "Is these method guaranteed to be called only by sync method (at least from us)?", "author": "weidongxu-microsoft", "createdAt": "2020-08-14T06:47:48Z", "path": "sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisFirewallRulesImpl.java", "diffHunk": "@@ -41,14 +44,26 @@\n     }\n \n     public void addRule(RedisFirewallRuleImpl rule) {", "originalCommit": "c894d491662925517fd688398aa3cb446fe1283b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1Nzg3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14099#discussion_r470457874", "bodyText": "We didn't use it in async method. But it can't be guaranteed when using by customer.\nAfter discussion, the ExternalChildResourcesCachedImpl implementation would be removed later, due to the cache is blocking.", "author": "ChenTanyi", "createdAt": "2020-08-14T07:30:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0MTA5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ2MDQ0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14099#discussion_r470460440", "bodyText": "Issue add Azure/azure-libraries-for-java#1261", "author": "ChenTanyi", "createdAt": "2020-08-14T07:36:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0MTA5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6eab09e50b668c5c520534c459eca5bee0b7e620", "chunk": "diff --git a/sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisFirewallRulesImpl.java b/sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisFirewallRulesImpl.java\nindex 4dd82a82f50..790a7b77c89 100644\n--- a/sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisFirewallRulesImpl.java\n+++ b/sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisFirewallRulesImpl.java\n\n@@ -44,38 +43,39 @@ class RedisFirewallRulesImpl extends\n     }\n \n     public void addRule(RedisFirewallRuleImpl rule) {\n-        if (!load) {\n-            load = true;\n-            cacheCollection();\n-        }\n+        ensureCollectionLoaded();\n         this.addChildResource(rule);\n     }\n \n     public void removeRule(String name) {\n-        if (!load) {\n-            load = true;\n-            cacheCollection();\n-        }\n+        ensureCollectionLoaded();\n         this.prepareInlineRemove(name);\n     }\n \n     public RedisFirewallRuleImpl defineInlineFirewallRule(String name) {\n-        if (!load) {\n-            load = true;\n-            cacheCollection();\n-        }\n+        ensureCollectionLoaded();\n         return prepareInlineDefine(name);\n     }\n \n     @Override\n     protected Flux<RedisFirewallRuleImpl> listChildResourcesAsync() {\n-        return this.getParent().manager().inner().getFirewallRules().listByRedisResourceAsync(\n-                this.getParent().resourceGroupName(),\n-                this.getParent().name())\n-            .map(firewallRuleInner -> new RedisFirewallRuleImpl(firewallRuleInner.name(), this.getParent(), firewallRuleInner))\n+        return this\n+            .getParent()\n+            .manager()\n+            .inner()\n+            .getFirewallRules()\n+            .listByRedisResourceAsync(this.getParent().resourceGroupName(), this.getParent().name())\n+            .map(\n+                firewallRuleInner ->\n+                    new RedisFirewallRuleImpl(firewallRuleInner.name(), this.getParent(), firewallRuleInner))\n             .onErrorResume(e -> Mono.empty());\n     }\n \n+    @Override\n+    protected List<RedisFirewallRuleImpl> listChildResources() {\n+        return listChildResourcesAsync().collectList().block();\n+    }\n+\n     @Override\n     protected RedisFirewallRuleImpl newChildResource(String name) {\n         return new RedisFirewallRuleImpl(name, this.getParent(), new RedisFirewallRuleInner());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0NDIxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14099#discussion_r470444215", "bodyText": "Another fake LRO?", "author": "weidongxu-microsoft", "createdAt": "2020-08-14T06:56:38Z", "path": "sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisCacheImpl.java", "diffHunk": "@@ -568,23 +568,27 @@ public RedisCacheImpl update() {\n \n     @Override\n     public Mono<RedisCache> updateResourceAsync() {\n-        final RedisCacheImpl self = this;\n+        updateParameters.withTags(this.inner().tags());\n         return this.manager().inner().getRedis().updateAsync(resourceGroupName(), name(), updateParameters)\n                 .map(innerToFluentMap(this))\n-                .doOnNext(redisCache -> {\n-                    while (!redisCache.provisioningState().equalsIgnoreCase(\"Succeeded\")) {\n-                        SdkContext.sleep(30 * 1000);\n-\n-                        RedisResourceInner innerResource = self.manager().inner().getRedis().getByResourceGroup(resourceGroupName(), name());\n-                        ((RedisCacheImpl) redisCache).setInner(innerResource);\n-                        self.setInner(innerResource);\n-                        self.patchScheduleAdded = false;\n+                .filter(redisCache -> !redisCache.provisioningState().equalsIgnoreCase(ProvisioningState.SUCCEEDED.toString()))\n+                .flatMap(redisCache -> {\n+                    SdkContext.sleep(30 * 1000);\n+                    this.patchScheduleAdded = false;\n+                    return this.manager().inner().getRedis().getByResourceGroupAsync(resourceGroupName(), name())", "originalCommit": "8d31aa1a63e1ad118631d75bc33e334c3d681a11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0NTA1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14099#discussion_r470445052", "bodyText": "Yes, the redis doesn't go through official LRO, like cosmos", "author": "ChenTanyi", "createdAt": "2020-08-14T06:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0NDIxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6eab09e50b668c5c520534c459eca5bee0b7e620", "chunk": "diff --git a/sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisCacheImpl.java b/sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisCacheImpl.java\nindex 38b61e53747..e613599c137 100644\n--- a/sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisCacheImpl.java\n+++ b/sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisCacheImpl.java\n\n@@ -569,26 +523,38 @@ class RedisCacheImpl\n     @Override\n     public Mono<RedisCache> updateResourceAsync() {\n         updateParameters.withTags(this.inner().tags());\n-        return this.manager().inner().getRedis().updateAsync(resourceGroupName(), name(), updateParameters)\n-                .map(innerToFluentMap(this))\n-                .filter(redisCache -> !redisCache.provisioningState().equalsIgnoreCase(ProvisioningState.SUCCEEDED.toString()))\n-                .flatMap(redisCache -> {\n+        return this\n+            .manager()\n+            .inner()\n+            .getRedis()\n+            .updateAsync(resourceGroupName(), name(), updateParameters)\n+            .map(innerToFluentMap(this))\n+            .filter(\n+                redisCache -> !redisCache.provisioningState().equalsIgnoreCase(ProvisioningState.SUCCEEDED.toString()))\n+            .flatMap(\n+                redisCache -> {\n                     SdkContext.sleep(30 * 1000);\n                     this.patchScheduleAdded = false;\n-                    return this.manager().inner().getRedis().getByResourceGroupAsync(resourceGroupName(), name())\n-                        .doOnNext( this::setInner)\n-                        .filter(redisResourceInner -> redisResourceInner.provisioningState().toString()\n-                            .equalsIgnoreCase(ProvisioningState.SUCCEEDED.toString()))\n+                    return this\n+                        .manager()\n+                        .inner()\n+                        .getRedis()\n+                        .getByResourceGroupAsync(resourceGroupName(), name())\n+                        .doOnNext(this::setInner)\n+                        .filter(\n+                            redisResourceInner ->\n+                                redisResourceInner\n+                                    .provisioningState()\n+                                    .toString()\n+                                    .equalsIgnoreCase(ProvisioningState.SUCCEEDED.toString()))\n                         .repeatWhenEmpty(\n-                            longFlux -> longFlux.flatMap(\n-                                index -> Mono.delay(SdkContext.getDelayDuration(Duration.ofSeconds(30)))\n-                            )\n-                        );\n-                    }\n-                )\n-                .then(this.patchSchedules.commitAndGetAllAsync())\n-                .then(this.firewallRules.commitAndGetAllAsync())\n-                .then(Mono.just(this));\n+                            longFlux ->\n+                                longFlux\n+                                    .flatMap(index -> Mono.delay(SdkContext.getDelayDuration(Duration.ofSeconds(30)))));\n+                })\n+            .then(this.patchSchedules.commitAndGetAllAsync())\n+            .then(this.firewallRules.commitAndGetAllAsync())\n+            .then(Mono.just(this));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0NTMwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14099#discussion_r470445309", "bodyText": "Should we use delaySubscription + repeat?\nhttps://github.com/Azure/azure-sdk-for-java/blob/master/sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java#L214-L238", "author": "weidongxu-microsoft", "createdAt": "2020-08-14T06:59:29Z", "path": "sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisCacheImpl.java", "diffHunk": "@@ -568,23 +568,27 @@ public RedisCacheImpl update() {\n \n     @Override\n     public Mono<RedisCache> updateResourceAsync() {\n-        final RedisCacheImpl self = this;\n+        updateParameters.withTags(this.inner().tags());\n         return this.manager().inner().getRedis().updateAsync(resourceGroupName(), name(), updateParameters)\n                 .map(innerToFluentMap(this))\n-                .doOnNext(redisCache -> {\n-                    while (!redisCache.provisioningState().equalsIgnoreCase(\"Succeeded\")) {\n-                        SdkContext.sleep(30 * 1000);\n-\n-                        RedisResourceInner innerResource = self.manager().inner().getRedis().getByResourceGroup(resourceGroupName(), name());\n-                        ((RedisCacheImpl) redisCache).setInner(innerResource);\n-                        self.setInner(innerResource);\n-                        self.patchScheduleAdded = false;\n+                .filter(redisCache -> !redisCache.provisioningState().equalsIgnoreCase(ProvisioningState.SUCCEEDED.toString()))\n+                .flatMap(redisCache -> {\n+                    SdkContext.sleep(30 * 1000);", "originalCommit": "8d31aa1a63e1ad118631d75bc33e334c3d681a11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3NzU4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14099#discussion_r470477588", "bodyText": "done", "author": "ChenTanyi", "createdAt": "2020-08-14T08:14:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0NTMwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6eab09e50b668c5c520534c459eca5bee0b7e620", "chunk": "diff --git a/sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisCacheImpl.java b/sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisCacheImpl.java\nindex 38b61e53747..e613599c137 100644\n--- a/sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisCacheImpl.java\n+++ b/sdk/resourcemanager/azure-resourcemanager-redis/src/main/java/com/azure/resourcemanager/redis/implementation/RedisCacheImpl.java\n\n@@ -569,26 +523,38 @@ class RedisCacheImpl\n     @Override\n     public Mono<RedisCache> updateResourceAsync() {\n         updateParameters.withTags(this.inner().tags());\n-        return this.manager().inner().getRedis().updateAsync(resourceGroupName(), name(), updateParameters)\n-                .map(innerToFluentMap(this))\n-                .filter(redisCache -> !redisCache.provisioningState().equalsIgnoreCase(ProvisioningState.SUCCEEDED.toString()))\n-                .flatMap(redisCache -> {\n+        return this\n+            .manager()\n+            .inner()\n+            .getRedis()\n+            .updateAsync(resourceGroupName(), name(), updateParameters)\n+            .map(innerToFluentMap(this))\n+            .filter(\n+                redisCache -> !redisCache.provisioningState().equalsIgnoreCase(ProvisioningState.SUCCEEDED.toString()))\n+            .flatMap(\n+                redisCache -> {\n                     SdkContext.sleep(30 * 1000);\n                     this.patchScheduleAdded = false;\n-                    return this.manager().inner().getRedis().getByResourceGroupAsync(resourceGroupName(), name())\n-                        .doOnNext( this::setInner)\n-                        .filter(redisResourceInner -> redisResourceInner.provisioningState().toString()\n-                            .equalsIgnoreCase(ProvisioningState.SUCCEEDED.toString()))\n+                    return this\n+                        .manager()\n+                        .inner()\n+                        .getRedis()\n+                        .getByResourceGroupAsync(resourceGroupName(), name())\n+                        .doOnNext(this::setInner)\n+                        .filter(\n+                            redisResourceInner ->\n+                                redisResourceInner\n+                                    .provisioningState()\n+                                    .toString()\n+                                    .equalsIgnoreCase(ProvisioningState.SUCCEEDED.toString()))\n                         .repeatWhenEmpty(\n-                            longFlux -> longFlux.flatMap(\n-                                index -> Mono.delay(SdkContext.getDelayDuration(Duration.ofSeconds(30)))\n-                            )\n-                        );\n-                    }\n-                )\n-                .then(this.patchSchedules.commitAndGetAllAsync())\n-                .then(this.firewallRules.commitAndGetAllAsync())\n-                .then(Mono.just(this));\n+                            longFlux ->\n+                                longFlux\n+                                    .flatMap(index -> Mono.delay(SdkContext.getDelayDuration(Duration.ofSeconds(30)))));\n+                })\n+            .then(this.patchSchedules.commitAndGetAllAsync())\n+            .then(this.firewallRules.commitAndGetAllAsync())\n+            .then(Mono.just(this));\n     }\n \n     @Override\n"}}, {"oid": "6eab09e50b668c5c520534c459eca5bee0b7e620", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6eab09e50b668c5c520534c459eca5bee0b7e620", "message": "add ensureCollectionLoaded", "committedDate": "2020-08-14T07:53:31Z", "type": "commit"}, {"oid": "c2d7de1c034a2200cb3d177910f1e0de631fe42a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c2d7de1c034a2200cb3d177910f1e0de631fe42a", "message": "delete first sleep in LRO", "committedDate": "2020-08-14T08:13:04Z", "type": "commit"}, {"oid": "22625df4e6bcd641f8267ac5c5f9e9c51724f6e1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/22625df4e6bcd641f8267ac5c5f9e9c51724f6e1", "message": "set inner in LRO", "committedDate": "2020-08-14T09:07:54Z", "type": "commit"}, {"oid": "5d9ec6517f97b22cd9a9487cac95d3c0977706e2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5d9ec6517f97b22cd9a9487cac95d3c0977706e2", "message": "Merge branch 'master' into redis", "committedDate": "2020-08-17T05:05:27Z", "type": "commit"}]}