{"pr_number": 8983, "pr_title": "ServiceBus Track 2 Peek operation on Management channel  ( Include $cbs channel for auth)", "pr_createdAt": "2020-03-11T20:28:38Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/8983", "timeline": [{"oid": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ebbe25d3fb4980aba7f7ace884301e7aedac05fd", "message": "peek and management channel with $cbs channel", "committedDate": "2020-03-11T20:26:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1MTcxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391251714", "bodyText": "This already exists in RequestResponseChannel.java. Is there a reason it is here?", "author": "conniey", "createdAt": "2020-03-11T20:33:02Z", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/AmqpConstants.java", "diffHunk": "@@ -19,4 +19,8 @@\n \n     static final int AMQP_BATCH_MESSAGE_FORMAT = 0x80013700; // 2147563264L;\n \n+    public static final String REQUEST_RESPONSE_LEGACY_STATUS_CODE = \"status-code\";", "originalCommit": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1bb4c013c29e1d068a6a12282117dd0f72072d5", "chunk": "diff --git a/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/AmqpConstants.java b/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/AmqpConstants.java\nindex b1d06443bdf..d9a823ec6cc 100644\n--- a/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/AmqpConstants.java\n+++ b/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/AmqpConstants.java\n\n@@ -18,9 +18,4 @@ public final class AmqpConstants {\n     public static final Symbol STRING_FILTER = Symbol.getSymbol(APACHE + \":selector-filter:string\");\n \n     static final int AMQP_BATCH_MESSAGE_FORMAT = 0x80013700; // 2147563264L;\n-\n-    public static final String REQUEST_RESPONSE_LEGACY_STATUS_CODE = \"status-code\";\n-    public static final String REQUEST_RESPONSE_STATUS_CODE = \"statusCode\";\n-\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1MjQxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391252414", "bodyText": "Access modifier and using final instead. Consider setting Collections.emptyList instead.", "author": "conniey", "createdAt": "2020-03-11T20:34:22Z", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/MessageSerializerResult.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.implementation;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/***\n+ * This will hole additional data which can not be stored in AMQP Message.\n+ * Example last  serial number.\n+ */\n+public class MessageSerializerResult<T> {\n+    List<T> messages = null;", "originalCommit": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0NDczMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391344732", "bodyText": "removed this class.", "author": "hemanttanwar", "createdAt": "2020-03-12T00:34:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1MjQxNA=="}], "type": "inlineReview", "revised_code": {"commit": "e1bb4c013c29e1d068a6a12282117dd0f72072d5", "chunk": "diff --git a/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/MessageSerializerResult.java b/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/MessageSerializerResult.java\ndeleted file mode 100644\nindex 68a951b5989..00000000000\n--- a/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/MessageSerializerResult.java\n+++ /dev/null\n\n@@ -1,39 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.core.amqp.implementation;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-/***\n- * This will hole additional data which can not be stored in AMQP Message.\n- * Example last  serial number.\n- */\n-public class MessageSerializerResult<T> {\n-    List<T> messages = null;\n-    long lastSequenceNumber;\n-\n-    /**\n-     * Ctor\n-     * @param listOfMessages after serialization.\n-     * @param lastSequenceNumber serial number of the last message.\n-     */\n-    public MessageSerializerResult(List<T> listOfMessages, long lastSequenceNumber) {\n-\n-        this.messages = listOfMessages;\n-        this.lastSequenceNumber = lastSequenceNumber;\n-        // Make sure array is not null.\n-        if (messages == null) {\n-            messages = new ArrayList<>();\n-        }\n-    }\n-\n-    public List<T> getMessages() {\n-        return messages;\n-    }\n-\n-    public long getLastSequenceNumber() {\n-        return lastSequenceNumber;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1MjYyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391252623", "bodyText": "This class isn't used anywhere?", "author": "conniey", "createdAt": "2020-03-11T20:34:49Z", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/MessageSerializerResult.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.", "originalCommit": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzNTUwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391335505", "bodyText": "I have deleted it.  I thought of using it but survived without it.  Will Make sure to remove it", "author": "hemanttanwar", "createdAt": "2020-03-11T23:58:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1MjYyMw=="}], "type": "inlineReview", "revised_code": {"commit": "e1bb4c013c29e1d068a6a12282117dd0f72072d5", "chunk": "diff --git a/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/MessageSerializerResult.java b/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/MessageSerializerResult.java\ndeleted file mode 100644\nindex 68a951b5989..00000000000\n--- a/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/MessageSerializerResult.java\n+++ /dev/null\n\n@@ -1,39 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.core.amqp.implementation;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-/***\n- * This will hole additional data which can not be stored in AMQP Message.\n- * Example last  serial number.\n- */\n-public class MessageSerializerResult<T> {\n-    List<T> messages = null;\n-    long lastSequenceNumber;\n-\n-    /**\n-     * Ctor\n-     * @param listOfMessages after serialization.\n-     * @param lastSequenceNumber serial number of the last message.\n-     */\n-    public MessageSerializerResult(List<T> listOfMessages, long lastSequenceNumber) {\n-\n-        this.messages = listOfMessages;\n-        this.lastSequenceNumber = lastSequenceNumber;\n-        // Make sure array is not null.\n-        if (messages == null) {\n-            messages = new ArrayList<>();\n-        }\n-    }\n-\n-    public List<T> getMessages() {\n-        return messages;\n-    }\n-\n-    public long getLastSequenceNumber() {\n-        return lastSequenceNumber;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1MjgxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391252819", "bodyText": "Why does a connection know about these modes? I'd expect them to be parameters when creating a receiver or sender or when creating the management node itself.", "author": "conniey", "createdAt": "2020-03-11T20:35:16Z", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ReactorConnection.java", "diffHunk": "@@ -77,10 +81,13 @@\n      * @param messageSerializer Serializer to translate objects to and from proton-j {@link Message messages}.\n      * @param product The name of the product this connection is created for.\n      * @param clientVersion The version of the client library creating the connection.\n+     * @param senderSettleMode to set as {@link SenderSettleMode} on sender.\n+     * @param receiverSettleMode to set as {@link ReceiverSettleMode} on receiver.\n      */\n     public ReactorConnection(String connectionId, ConnectionOptions connectionOptions, ReactorProvider reactorProvider,\n         ReactorHandlerProvider handlerProvider, TokenManagerProvider tokenManagerProvider,\n-        MessageSerializer messageSerializer, String product, String clientVersion) {\n+        MessageSerializer messageSerializer, String product, String clientVersion,\n+        SenderSettleMode senderSettleMode, ReceiverSettleMode receiverSettleMode) {", "originalCommit": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1MzkwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391253906", "bodyText": "Can this live as a private static method in RequestResponseChannel.", "author": "conniey", "createdAt": "2020-03-11T20:37:29Z", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/RequestResponseUtils.java", "diffHunk": "@@ -0,0 +1,36 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.amqp.implementation;\n+\n+import org.apache.qpid.proton.message.Message;\n+\n+/**\n+ * This consists of various utilities needed to manage Request/Response  channel.\n+ */\n+public class RequestResponseUtils {\n+    public static final int REQUEST_RESPONSE_UNDEFINED_STATUS_CODE = -1;", "originalCommit": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NTUwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391255500", "bodyText": "Since this is related to reading the status code from AmqpMessages, a better place would be to put it in MessageUtils. There should be a class already", "author": "conniey", "createdAt": "2020-03-11T20:40:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1MzkwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0NDQ0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391344440", "bodyText": "RequestResponseUtils.getResponseStatusCode( is used by )  RequestResponseChannel  and also by  ServiceBusMessageSerializer and shared. Thuis I put it in amqp-core and  there is no MessageUtils in amqp-core  .", "author": "hemanttanwar", "createdAt": "2020-03-12T00:33:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1MzkwNg=="}], "type": "inlineReview", "revised_code": {"commit": "e1bb4c013c29e1d068a6a12282117dd0f72072d5", "chunk": "diff --git a/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/RequestResponseUtils.java b/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/RequestResponseUtils.java\nindex 95b82fbf2fa..fd9695b8456 100644\n--- a/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/RequestResponseUtils.java\n+++ b/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/RequestResponseUtils.java\n\n@@ -9,7 +9,10 @@ import org.apache.qpid.proton.message.Message;\n  * This consists of various utilities needed to manage Request/Response  channel.\n  */\n public class RequestResponseUtils {\n-    public static final int REQUEST_RESPONSE_UNDEFINED_STATUS_CODE = -1;\n+    private static final int REQUEST_RESPONSE_UNDEFINED_STATUS_CODE = -1;\n+    private static final String REQUEST_RESPONSE_STATUS_CODE = \"statusCode\";\n+    private static final String REQUEST_RESPONSE_LEGACY_STATUS_CODE = \"status-code\";\n+\n \n     /**\n      * There are different status code string returned by Service bus in response.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NDA3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391254072", "bodyText": "nit:  empty line", "author": "conniey", "createdAt": "2020-03-11T20:37:51Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "diffHunk": "@@ -48,6 +53,7 @@\n     private static final String VIA_PARTITION_KEY_NAME = \"x-opt-via-partition-key\";\n     private static final String DEAD_LETTER_SOURCE_NAME = \"x-opt-deadletter-source\";\n \n+", "originalCommit": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1bb4c013c29e1d068a6a12282117dd0f72072d5", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java\nindex f26bf85ca66..fd2ed2b86e9 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java\n\n@@ -52,7 +51,9 @@ class ServiceBusMessageSerializer implements MessageSerializer {\n     private static final String PARTITION_KEY_NAME = \"x-opt-partition-key\";\n     private static final String VIA_PARTITION_KEY_NAME = \"x-opt-via-partition-key\";\n     private static final String DEAD_LETTER_SOURCE_NAME = \"x-opt-deadletter-source\";\n-\n+    private static final String REQUEST_RESPONSE_MESSAGES = \"messages\";\n+    private static final String REQUEST_RESPONSE_MESSAGE = \"message\";\n+    private static final int REQUEST_RESPONSE_OK_STATUS_CODE = 200;\n \n     private final ClientLogger logger = new ClientLogger(ServiceBusMessageSerializer.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NTU4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391255580", "bodyText": "nit: new line", "author": "conniey", "createdAt": "2020-03-11T20:40:58Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "diffHunk": "@@ -164,20 +170,37 @@ public int getSize(org.apache.qpid.proton.message.Message amqpMessage) {\n \n         if (clazz == ServiceBusReceivedMessage.class) {\n             return (T) deserializeMessage(message);\n+        } else if (clazz == List.class) {\n+            return (T) deserializeListOfMessages(message);\n         } else {\n             throw logger.logExceptionAsError(new IllegalArgumentException(\n                 \"Deserialization only supports ServiceBusReceivedMessage.\"));\n         }\n     }\n \n+    private List<ServiceBusReceivedMessage> deserializeListOfMessages(Message amqpMessage) {\n+        //maintain the order of elements because last sequence number needs to be maintain.\n+        List<Message> listAmqpMessages = convertAMQPValueMessageToBrokeredMessage(amqpMessage);\n+\n+        List<ServiceBusReceivedMessage> receivedMessageList = new ArrayList<>();\n+        for (Message oneAmqpMessage:listAmqpMessages\n+             ) {", "originalCommit": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1bb4c013c29e1d068a6a12282117dd0f72072d5", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java\nindex f26bf85ca66..fd2ed2b86e9 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java\n\n@@ -183,8 +184,7 @@ class ServiceBusMessageSerializer implements MessageSerializer {\n         List<Message> listAmqpMessages = convertAMQPValueMessageToBrokeredMessage(amqpMessage);\n \n         List<ServiceBusReceivedMessage> receivedMessageList = new ArrayList<>();\n-        for (Message oneAmqpMessage:listAmqpMessages\n-             ) {\n+        for (Message oneAmqpMessage:listAmqpMessages) {\n             ServiceBusReceivedMessage serviceBusReceivedMessage = deserializeMessage(oneAmqpMessage);\n             receivedMessageList.add(serviceBusReceivedMessage);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NzQxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391257411", "bodyText": "Why do we pass in the TokenManager here. iirc, before we create the ManagementChannel, we already create a token manager that authorizes with it. We shouldn't need to manually authorize ourselves.", "author": "conniey", "createdAt": "2020-03-11T20:44:50Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -59,9 +62,17 @@\n     private final MessageSerializer messageSerializer;\n     private final TokenManagerProvider tokenManagerProvider;\n \n+    /*This is to maintain cbs node and get authorization.*/\n+    private final TokenManager cbsBasedTokenManager;\n+\n+    // Maintain last peek sequence number\n+    private AtomicReference<Long>  lastPeekedSequenceNumber = new AtomicReference<>(0L);\n+\n+\n     ManagementChannel(Mono<RequestResponseChannel> responseChannelMono, String topicOrQueueName,\n                       TokenCredential credential, TokenManagerProvider tokenManagerProvider,\n-                      MessageSerializer messageSerializer, Scheduler scheduler) {\n+                      MessageSerializer messageSerializer, Scheduler scheduler, TokenManager cbsBasedTokenManager", "originalCommit": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1Njc1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391356750", "bodyText": "The TokenManager instance is created before ManagementChannel is created but does not call TokenManager.authorize(). So we pass this instance in ManagementChannel  because  it knows when user makes first call to peek. First call to authorize() should happen when user does peek operation, So  we call it once only just before peek is called.", "author": "hemanttanwar", "createdAt": "2020-03-12T01:26:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NzQxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "589482feff2603c5e06bb37d0019ae6c7ad2e213", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\nindex ebf4c9a2a46..6d9b89cb4fc 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n\n@@ -49,40 +49,32 @@ public class ManagementChannel implements  ServiceBusManagementNode {\n     private static final String MANAGEMENT_SECURITY_TOKEN_KEY = \"security_token\";\n \n     // Well-known values for the service request.\n-    private static final String READ_OPERATION_VALUE = \"READ\";\n     private static final String PEEK_OPERATION_VALUE = AmqpConstants.VENDOR + \":peek-message\";\n     private static final String MANAGEMENT_SERVICEBUS_ENTITY_TYPE = AmqpConstants.VENDOR + \":servicebus\";\n     private static final String MANAGEMENT_SERVER_TIMEOUT = AmqpConstants.VENDOR + \":server-timeout\";\n \n-\n-    private final TokenCredential tokenProvider;\n     private final Mono<RequestResponseChannel> channelMono;\n     private final Scheduler scheduler;\n-    private final String topicOrQueueName;\n     private final MessageSerializer messageSerializer;\n-    private final TokenManagerProvider tokenManagerProvider;\n \n     /*This is to maintain cbs node and get authorization.*/\n     private final TokenManager cbsBasedTokenManager;\n \n     // Maintain last peek sequence number\n     private AtomicReference<Long>  lastPeekedSequenceNumber = new AtomicReference<>(0L);\n+    private AtomicReference<Boolean> cbsBasedTokenManagerCalled = new AtomicReference<>(false);\n+\n \n \n-    ManagementChannel(Mono<RequestResponseChannel> responseChannelMono, String topicOrQueueName,\n-                      TokenCredential credential, TokenManagerProvider tokenManagerProvider,\n+    ManagementChannel(Mono<RequestResponseChannel> responseChannelMono,\n                       MessageSerializer messageSerializer, Scheduler scheduler, TokenManager cbsBasedTokenManager\n     ) {\n-\n-        this.tokenManagerProvider = Objects.requireNonNull(tokenManagerProvider,\n-            \"'tokenManagerProvider' cannot be null.\");\n-        this.tokenProvider = Objects.requireNonNull(credential, \"'credential' cannot be null.\");\n-        this.topicOrQueueName = Objects.requireNonNull(topicOrQueueName, \"'eventHubName' cannot be null.\");\n         this.messageSerializer = Objects.requireNonNull(messageSerializer, \"'messageSerializer' cannot be null.\");\n         this.channelMono = Objects.requireNonNull(responseChannelMono, \"'responseChannelMono' cannot be null.\");\n         this.scheduler = Objects.requireNonNull(scheduler, \"'scheduler' cannot be null.\");\n-        this.cbsBasedTokenManager = Objects.requireNonNull(cbsBasedTokenManager, \"'cbsBasedTokenManager' cannot be null.\");\n-       }\n+        this.cbsBasedTokenManager = Objects.requireNonNull(cbsBasedTokenManager,\n+            \"'cbsBasedTokenManager' cannot be null.\");\n+    }\n \n     /**\n      * {@inheritDoc}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1NzYyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391257629", "bodyText": "This doesn't need to be public", "author": "conniey", "createdAt": "2020-03-11T20:45:21Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementConstants.java", "diffHunk": "@@ -0,0 +1,32 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.implementation;\n+\n+import com.azure.core.amqp.implementation.AmqpConstants;\n+\n+/**\n+ * Constants which is used for management calls to support operations for example renewlock, schedule, defer etc.\n+ */\n+public class ManagementConstants {", "originalCommit": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1bb4c013c29e1d068a6a12282117dd0f72072d5", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementConstants.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementConstants.java\nindex 6159f1d3ae4..f2e0008e88f 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementConstants.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementConstants.java\n\n@@ -8,7 +8,7 @@ import com.azure.core.amqp.implementation.AmqpConstants;\n /**\n  * Constants which is used for management calls to support operations for example renewlock, schedule, defer etc.\n  */\n-public class ManagementConstants {\n+class ManagementConstants {\n     public static final String REQUEST_RESPONSE_FROM_SEQUENCE_NUMBER = \"from-sequence-number\";\n     public static final String REQUEST_RESPONSE_MESSAGE_COUNT = \"message-count\";\n     public static final String REQUEST_RESPONSE_SESSION_ID = \"session-id\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1ODgzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391258836", "bodyText": "Every time a peek operation is called, it'll create another management channel node.  This is a bit wasteful if we keep getting the management node and have to recreate it.", "author": "conniey", "createdAt": "2020-03-11T20:47:48Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorAmqpConnection.java", "diffHunk": "@@ -101,10 +117,14 @@ public ServiceBusReactorAmqpConnection(String connectionId, ConnectionOptions co\n                     logger.info(\"Creating management node. entityPath: [{}]. address: [{}]. linkName: [{}]\",\n                         entityPath, address, linkName);\n \n+                    TokenManager cbsBasedTokenManager =  new AzureTokenManagerProvider(", "originalCommit": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1NDA2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391354060", "bodyText": "I have tested with 4 peek() calls from one client , since we are storing ServiceBusManagementNode in ConcurrentHashMap  and return cached managementNode after once created using managementNodes.computeIfAbsent . So it creates ServiceBusManagementNode only once.\nhttps://github.com/Azure/azure-sdk-for-java/pull/8983/files#diff-6460b86560d643d02d2e58af8b6213cfL96", "author": "hemanttanwar", "createdAt": "2020-03-12T01:14:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1ODgzNg=="}], "type": "inlineReview", "revised_code": {"commit": "589482feff2603c5e06bb37d0019ae6c7ad2e213", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorAmqpConnection.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorAmqpConnection.java\nindex cb2d74a1ce9..19e25868f0c 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorAmqpConnection.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorAmqpConnection.java\n\n@@ -119,12 +119,12 @@ public class ServiceBusReactorAmqpConnection extends ReactorConnection implement\n \n                     TokenManager cbsBasedTokenManager =  new AzureTokenManagerProvider(\n                         CbsAuthorizationType.SHARED_ACCESS_SIGNATURE, fullyQualifiedNamespace, entityPath)\n-                        .getTokenManager(getClaimsBasedSecurityNode(), entityPath) ;\n+                        .getTokenManager(getClaimsBasedSecurityNode(), entityPath);\n \n                     final Mono<RequestResponseChannel> requestResponseChannel =\n                         createRequestResponseChannel(sessionName, linkName, address);\n-                    return new ManagementChannel(requestResponseChannel, entityPath, tokenCredential,\n-                        tokenManagerProvider, messageSerializer, scheduler, cbsBasedTokenManager);\n+                    return new ManagementChannel(requestResponseChannel, messageSerializer, scheduler,\n+                        cbsBasedTokenManager);\n                 });\n \n                 return node;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1OTAxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391259018", "bodyText": "Move these to tests and use stepverifier.", "author": "conniey", "createdAt": "2020-03-11T20:48:10Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientPeek.java", "diffHunk": "@@ -143,7 +143,7 @@ public void peekOneMessage() {\n                 });\n \n         try {\n-            Thread.sleep(5000);\n+            Thread.sleep(90000);", "originalCommit": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1bb4c013c29e1d068a6a12282117dd0f72072d5", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientPeek.java b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientPeek.java\nindex 5ae381648d6..bdc728291da 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientPeek.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientPeek.java\n\n@@ -121,33 +120,15 @@ public class ServiceBusReceiverAsyncClientPeek {\n     public void peekOneMessage() {\n         // Arrange\n         final int numberOfEvents = 1;\n-        String connectionString = System.getenv(\"AZURE_SERVICEBUS_CONNECTION_STRING\")\n-            + \";EntityPath=hemant-test1\";\n-        log(connectionString);\n-        // Instantiate a client that will be used to call the service.\n+        // Act & Assert\n+        StepVerifier.create(consumer.peek())\n+            .then(() -> sendMessages(numberOfEvents))\n+            .expectNextCount(numberOfEvents)\n+            .verifyComplete();\n \n-        ServiceBusReceiverAsyncClient queueReceiverAsyncClient = new ServiceBusClientBuilder()\n-            .connectionString(connectionString)\n-            .scheduler(Schedulers.parallel())\n-            .buildAsyncReceiverClient();\n+        verify(amqpReceiveLink, times(1));\n \n-        queueReceiverAsyncClient.peek()\n-            .doOnNext(receivedMessage -> {\n-                System.out.println(\"!!!!!! doOnNext Got message from queue: \" + receivedMessage.getBodyAsString());\n-            })\n-            .subscribe(receivedMessage -> {\n-                System.out.println(\"!!!!!! subscribe Got message from queue: \" + receivedMessage.getBodyAsString());\n-            },\n-                error -> {\n-                    System.err.println(\"!!!!!! Error occurred while consuming messages: \" + error);\n-                });\n-\n-        try {\n-            Thread.sleep(90000);\n-        } catch (Exception ex) {\n \n-        }\n-        System.out.println(\"!!!!!! Completed.\");\n     }\n \n     private void sendMessages(int numberOfEvents) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1OTYwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391259600", "bodyText": "sender.send(message).then(receiver.peek()) is probably what you want. thenMany suggests it returns a flux.", "author": "conniey", "createdAt": "2020-03-11T20:49:20Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -54,4 +54,28 @@ void receiveMessageAutoComplete() {\n             })\n             .verifyComplete();\n     }\n+\n+    /**\n+     * Verifies that we can send and peek a message.\n+     */\n+    @Test\n+    void peekMessage() {\n+        // Arrange\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId, 0);\n+        final ReceiveMessageOptions options = new ReceiveMessageOptions().setAutoComplete(true);\n+        receiver = createBuilder()\n+            .receiveMessageOptions(options)\n+            .buildAsyncReceiverClient();\n+\n+        // Assert & Act\n+        StepVerifier.create(sender.send(message).thenMany(receiver.peek()))", "originalCommit": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MDgzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391340837", "bodyText": "Good catch...", "author": "hemanttanwar", "createdAt": "2020-03-12T00:19:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1OTYwMA=="}], "type": "inlineReview", "revised_code": {"commit": "589482feff2603c5e06bb37d0019ae6c7ad2e213", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\nindex 22106b2c10e..c0bd81c78bf 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n\n@@ -78,4 +78,29 @@ class ServiceBusReceiverAsyncClientIntegrationTest extends IntegrationTestBase {\n             })\n             .verifyComplete();\n     }\n+\n+    /**\n+     * Verifies that we can send and peek a message.\n+     */\n+    @Test\n+    void peekFromSequencenumberMessage() {\n+        // Arrange\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId, 0);\n+        final ReceiveMessageOptions options = new ReceiveMessageOptions().setAutoComplete(true);\n+        final long fromSequenceNumber = 1;\n+        receiver = createBuilder()\n+            .receiveMessageOptions(options)\n+            .buildAsyncReceiverClient();\n+\n+        // Assert & Act\n+        StepVerifier.create(sender.send(message).thenMany(receiver.peek(fromSequenceNumber)))\n+            .assertNext(receivedMessage -> {\n+                Assertions.assertEquals(contents, receivedMessage.getBodyAsString());\n+                Assertions.assertTrue(receivedMessage.getProperties().containsKey(MESSAGE_TRACKING_ID));\n+                Assertions.assertEquals(messageId, receivedMessage.getProperties().get(MESSAGE_TRACKING_ID));\n+            })\n+            .verifyComplete();\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1OTg1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391259857", "bodyText": "When you return inline mocks like this, you need to add the Mockito.clearInlinMocks() or else it won't be garbage collected.", "author": "conniey", "createdAt": "2020-03-11T20:49:54Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "diffHunk": "@@ -122,6 +131,41 @@ void teardown() {\n         consumer.close();\n     }\n \n+    /**\n+     * Verifies that this peek one messages.\n+     */\n+    @Test\n+    void peekOneMessage() {\n+        // Arrange\n+        final int numberOfEvents = 1;\n+        when(managementNode.peek())\n+            .thenReturn(Mono.just(mock(ServiceBusReceivedMessage.class)));\n+\n+        // Act & Assert\n+        StepVerifier.create(consumer.peek())\n+            .expectNextCount(numberOfEvents)\n+            .verifyComplete();\n+\n+    }\n+\n+    /**\n+     * Verifies that this peek one messages from a sequence Number.\n+     */\n+    @Test\n+    void peekWithSequenceOneMessage() {\n+        // Arrange\n+        final int numberOfEvents = 1;\n+        final int fromSequenceNumber = 10;\n+\n+        when(managementNode.peek(fromSequenceNumber))\n+            .thenReturn(Mono.just(mock(ServiceBusReceivedMessage.class)));", "originalCommit": "ebbe25d3fb4980aba7f7ace884301e7aedac05fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e1bb4c013c29e1d068a6a12282117dd0f72072d5", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\nindex 097d7b65341..96bc3501ce7 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\n\n@@ -164,6 +163,8 @@ public class ServiceBusReceiverAsyncClientTest {\n         StepVerifier.create(consumer.peek(fromSequenceNumber))\n             .expectNextCount(numberOfEvents)\n             .verifyComplete();\n+\n+        Mockito.framework().clearInlineMocks();\n     }\n \n     /**\n"}}, {"oid": "589482feff2603c5e06bb37d0019ae6c7ad2e213", "url": "https://github.com/Azure/azure-sdk-for-java/commit/589482feff2603c5e06bb37d0019ae6c7ad2e213", "message": "spot bugs fixes", "committedDate": "2020-03-11T21:56:06Z", "type": "commit"}, {"oid": "e1bb4c013c29e1d068a6a12282117dd0f72072d5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e1bb4c013c29e1d068a6a12282117dd0f72072d5", "message": "took care of review comments", "committedDate": "2020-03-12T00:52:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM4OTQ1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391389453", "bodyText": "casing should be Amqp rather than AMQP", "author": "conniey", "createdAt": "2020-03-12T03:56:48Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "diffHunk": "@@ -407,4 +430,31 @@ private static int sizeof(Object obj) {\n         throw new IllegalArgumentException(String.format(Locale.US,\n             \"Encoding Type: %s is not supported\", obj.getClass()));\n     }\n+\n+    private List<Message> convertAMQPValueMessageToBrokeredMessage(Message amqpResponseMessage) {", "originalCommit": "e1bb4c013c29e1d068a6a12282117dd0f72072d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d103c4673b363d11d266e2145ed7cb7ca238624c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java\nindex fd2ed2b86e9..f864f65c887 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java\n\n@@ -431,7 +431,7 @@ class ServiceBusMessageSerializer implements MessageSerializer {\n             \"Encoding Type: %s is not supported\", obj.getClass()));\n     }\n \n-    private List<Message> convertAMQPValueMessageToBrokeredMessage(Message amqpResponseMessage) {\n+    private List<Message> convertAmqpValueMessageToBrokeredMessage(Message amqpResponseMessage) {\n         List<Message> messageList = new ArrayList<>();\n         int statusCode = RequestResponseUtils.getResponseStatusCode(amqpResponseMessage);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM4OTg1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391389857", "bodyText": "This is a hack to maintain state.", "author": "conniey", "createdAt": "2020-03-12T03:58:51Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -46,79 +47,107 @@\n     private static final String MANAGEMENT_SECURITY_TOKEN_KEY = \"security_token\";\n \n     // Well-known values for the service request.\n-    private static final String READ_OPERATION_VALUE = \"READ\";\n     private static final String PEEK_OPERATION_VALUE = AmqpConstants.VENDOR + \":peek-message\";\n-    private static final String MANAGEMENT_EVENTHUB_ENTITY_TYPE = AmqpConstants.VENDOR + \":servicebus\";\n+    private static final String MANAGEMENT_SERVICEBUS_ENTITY_TYPE = AmqpConstants.VENDOR + \":servicebus\";\n     private static final String MANAGEMENT_SERVER_TIMEOUT = AmqpConstants.VENDOR + \":server-timeout\";\n \n-\n-    private final TokenCredential tokenProvider;\n     private final Mono<RequestResponseChannel> channelMono;\n     private final Scheduler scheduler;\n-    private final String topicOrQueueName;\n     private final MessageSerializer messageSerializer;\n-    private final TokenManagerProvider tokenManagerProvider;\n \n-    ManagementChannel(Mono<RequestResponseChannel> responseChannelMono, String topicOrQueueName,\n-                      TokenCredential credential, TokenManagerProvider tokenManagerProvider,\n-                      MessageSerializer messageSerializer, Scheduler scheduler) {\n+    /*This is to maintain cbs node and get authorization.*/\n+    private final TokenManager cbsBasedTokenManager;\n+\n+    // Maintain last peek sequence number\n+    private AtomicReference<Long>  lastPeekedSequenceNumber = new AtomicReference<>(0L);\n+    private AtomicReference<Boolean> cbsBasedTokenManagerCalled = new AtomicReference<>(false);\n+\n \n-        this.tokenManagerProvider = Objects.requireNonNull(tokenManagerProvider,\n-            \"'tokenManagerProvider' cannot be null.\");\n-        this.tokenProvider = Objects.requireNonNull(credential, \"'credential' cannot be null.\");\n-        this.topicOrQueueName = Objects.requireNonNull(topicOrQueueName, \"'eventHubName' cannot be null.\");\n+\n+    ManagementChannel(Mono<RequestResponseChannel> responseChannelMono,\n+                      MessageSerializer messageSerializer, Scheduler scheduler, TokenManager cbsBasedTokenManager\n+    ) {\n         this.messageSerializer = Objects.requireNonNull(messageSerializer, \"'messageSerializer' cannot be null.\");\n         this.channelMono = Objects.requireNonNull(responseChannelMono, \"'responseChannelMono' cannot be null.\");\n         this.scheduler = Objects.requireNonNull(scheduler, \"'scheduler' cannot be null.\");\n+        this.cbsBasedTokenManager = Objects.requireNonNull(cbsBasedTokenManager,\n+            \"'cbsBasedTokenManager' cannot be null.\");\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n-    public Mono<ServiceBusReceivedMessage> peek() {\n+    public Mono<ServiceBusReceivedMessage> peek(long fromSequenceNumber) {\n \n-        int maxMessages = 2;\n-        long fromSequenceNumber = 1;\n-        final Map<String, Object> properties = new HashMap<>();\n-        properties.put(MANAGEMENT_ENTITY_TYPE_KEY, MANAGEMENT_EVENTHUB_ENTITY_TYPE);\n-        properties.put(MANAGEMENT_ENTITY_NAME_KEY, topicOrQueueName);\n-        properties.put(MANAGEMENT_OPERATION_KEY, READ_OPERATION_VALUE);\n-\n-        return peek(properties, ServiceBusReceivedMessage.class, maxMessages, fromSequenceNumber, null)\n+        return peek(new HashMap<>(), ServiceBusReceivedMessage.class, 1, fromSequenceNumber, null)\n+            .last()\n             .publishOn(scheduler);\n     }\n \n-    private <T> Mono<T> peek(Map<String, Object> appProperties, Class<T> responseType,\n-                             int maxMessages, long fromSequenceNumber, UUID sessionId) {\n-\n-        final String tokenAudience = tokenManagerProvider.getScopesFromResource(topicOrQueueName);\n-\n-        return tokenProvider.getToken(new TokenRequestContext().addScopes(tokenAudience)).flatMap(accessToken -> {\n-            appProperties.put(MANAGEMENT_SECURITY_TOKEN_KEY, accessToken.getToken());\n-\n-            // set mandatory application properties for AMQP message.\n-            appProperties.put(MANAGEMENT_OPERATION_KEY, PEEK_OPERATION_VALUE);\n-            appProperties.put(MANAGEMENT_SERVER_TIMEOUT, \"\" + 1000 * 30);\n-\n-            final Message request = Proton.message();\n-            final ApplicationProperties applicationProperties = new ApplicationProperties(appProperties);\n-            request.setApplicationProperties(applicationProperties);\n-\n-            // set mandatory properties on AMQP message body\n-            HashMap<String, Object> requestBodyMap = new HashMap<>();\n-            requestBodyMap.put(ServiceBusConstants.REQUEST_RESPONSE_FROM_SEQUENCE_NUMBER, fromSequenceNumber);\n-            requestBodyMap.put(ServiceBusConstants.REQUEST_RESPONSE_MESSAGE_COUNT, maxMessages);\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Mono<ServiceBusReceivedMessage> peek() {\n \n-            if (!Objects.isNull(sessionId)) {\n-                requestBodyMap.put(ServiceBusConstants.REQUEST_RESPONSE_SESSION_ID, sessionId);\n-            }\n+        return peek(this.lastPeekedSequenceNumber.get() + 1);\n+    }\n \n-            request.setBody(new AmqpValue(requestBodyMap));\n+    private <T> Flux<T> peek(Map<String, Object> appProperties, Class<T> responseType,\n+                             int maxMessages, long fromSequenceNumber, UUID sessionId) {\n \n-            return channelMono.flatMap(requestResponseChannel -> requestResponseChannel.sendWithAck(request))\n-                .map(message -> messageSerializer.deserialize(message, responseType));\n-        });\n+        return\n+            Mono.defer(() -> {\n+                if (!cbsBasedTokenManagerCalled.get()) {", "originalCommit": "e1bb4c013c29e1d068a6a12282117dd0f72072d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxNTExNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391415115", "bodyText": "We can look into it in more detail and make it better.", "author": "hemanttanwar", "createdAt": "2020-03-12T05:58:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM4OTg1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "d103c4673b363d11d266e2145ed7cb7ca238624c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\nindex 58eab33bba7..ce327430967 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n\n@@ -80,7 +80,7 @@ public class ManagementChannel implements  ServiceBusManagementNode {\n     @Override\n     public Mono<ServiceBusReceivedMessage> peek(long fromSequenceNumber) {\n \n-        return peek(new HashMap<>(), ServiceBusReceivedMessage.class, 1, fromSequenceNumber, null)\n+        return peek(ServiceBusReceivedMessage.class, 1, fromSequenceNumber, null)\n             .last()\n             .publishOn(scheduler);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM4OTkxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391389918", "bodyText": "These don't need to be public because the class is not public.", "author": "conniey", "createdAt": "2020-03-12T03:59:15Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementConstants.java", "diffHunk": "@@ -0,0 +1,27 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.implementation;\n+\n+import com.azure.core.amqp.implementation.AmqpConstants;\n+\n+/**\n+ * Constants which is used for management calls to support operations for example renewlock, schedule, defer etc.\n+ */\n+class ManagementConstants {\n+    public static final String REQUEST_RESPONSE_FROM_SEQUENCE_NUMBER = \"from-sequence-number\";", "originalCommit": "e1bb4c013c29e1d068a6a12282117dd0f72072d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d103c4673b363d11d266e2145ed7cb7ca238624c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementConstants.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementConstants.java\nindex f2e0008e88f..e17c6d8aa86 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementConstants.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementConstants.java\n\n@@ -9,19 +9,19 @@ import com.azure.core.amqp.implementation.AmqpConstants;\n  * Constants which is used for management calls to support operations for example renewlock, schedule, defer etc.\n  */\n class ManagementConstants {\n-    public static final String REQUEST_RESPONSE_FROM_SEQUENCE_NUMBER = \"from-sequence-number\";\n-    public static final String REQUEST_RESPONSE_MESSAGE_COUNT = \"message-count\";\n-    public static final String REQUEST_RESPONSE_SESSION_ID = \"session-id\";\n-    public static final String LOCKEDUNTILNAME = \"x-opt-locked-until\";\n-    public static final String PARTITIONKEYNAME = \"x-opt-partition-key\";\n-    public static final String VIAPARTITIONKEYNAME = \"x-opt-via-partition-key\";\n-    public static final String DEADLETTERSOURCENAME = \"x-opt-deadletter-source\";\n-    public static final String REQUEST_RESPONSE_MESSAGE_ID = \"message-id\";\n-    public static final String REQUEST_RESPONSE_PARTITION_KEY = \"partition-key\";\n-    public static final String REQUEST_RESPONSE_VIA_PARTITION_KEY = \"via-partition-key\";\n-    public static final String REQUEST_RESPONSE_SCHEDULE_MESSAGE_OPERATION = AmqpConstants.VENDOR + \":schedule-message\";\n-    public static final String REQUEST_RESPONSE_OPERATION_NAME = \"operation\";\n-    public static final String REQUEST_RESPONSE_TIMEOUT = AmqpConstants.VENDOR + \":server-timeout\";\n-    public static final String REQUEST_RESPONSE_ASSOCIATED_LINK_NAME = \"associated-link-name\";\n+    static final String REQUEST_RESPONSE_FROM_SEQUENCE_NUMBER = \"from-sequence-number\";\n+    static final String REQUEST_RESPONSE_MESSAGE_COUNT = \"message-count\";\n+    static final String REQUEST_RESPONSE_SESSION_ID = \"session-id\";\n+    static final String LOCKEDUNTILNAME = \"x-opt-locked-until\";\n+    static final String PARTITIONKEYNAME = \"x-opt-partition-key\";\n+    static final String VIAPARTITIONKEYNAME = \"x-opt-via-partition-key\";\n+    static final String DEADLETTERSOURCENAME = \"x-opt-deadletter-source\";\n+    static final String REQUEST_RESPONSE_MESSAGE_ID = \"message-id\";\n+    static final String REQUEST_RESPONSE_PARTITION_KEY = \"partition-key\";\n+    static final String REQUEST_RESPONSE_VIA_PARTITION_KEY = \"via-partition-key\";\n+    static final String REQUEST_RESPONSE_SCHEDULE_MESSAGE_OPERATION = AmqpConstants.VENDOR + \":schedule-message\";\n+    static final String REQUEST_RESPONSE_OPERATION_NAME = \"operation\";\n+    static final String REQUEST_RESPONSE_TIMEOUT = AmqpConstants.VENDOR + \":server-timeout\";\n+    static final String REQUEST_RESPONSE_ASSOCIATED_LINK_NAME = \"associated-link-name\";\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM4OTk4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391389983", "bodyText": "Why does this need to be public?", "author": "conniey", "createdAt": "2020-03-12T03:59:36Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorAmqpConnection.java", "diffHunk": "@@ -36,6 +41,11 @@\n     private static final String MANAGEMENT_LINK_NAME = \"mgmt\";\n     private static final String MANAGEMENT_ADDRESS = \"$management\";\n \n+    /** This is used in setting up management chhannel and it is always fixed.\n+     * This is not used by sdk user trying to receive/send messages.*/\n+    public static final SenderSettleMode MANAGEMENT_SEND_SETTLE_MODE = SenderSettleMode.SETTLED;", "originalCommit": "e1bb4c013c29e1d068a6a12282117dd0f72072d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MDA3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391390079", "bodyText": "It doesn't need to be a variable because enums are basically static. You can pass the values in as-is in the constructor.", "author": "conniey", "createdAt": "2020-03-12T04:00:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM4OTk4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d103c4673b363d11d266e2145ed7cb7ca238624c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorAmqpConnection.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorAmqpConnection.java\nindex 19e25868f0c..4ed51fb040f 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorAmqpConnection.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReactorAmqpConnection.java\n\n@@ -41,11 +41,6 @@ public class ServiceBusReactorAmqpConnection extends ReactorConnection implement\n     private static final String MANAGEMENT_LINK_NAME = \"mgmt\";\n     private static final String MANAGEMENT_ADDRESS = \"$management\";\n \n-    /** This is used in setting up management chhannel and it is always fixed.\n-     * This is not used by sdk user trying to receive/send messages.*/\n-    public static final SenderSettleMode MANAGEMENT_SEND_SETTLE_MODE = SenderSettleMode.SETTLED;\n-    public static final ReceiverSettleMode MANAGEMENT_RECEIVE_SETTLE_MODE = ReceiverSettleMode.FIRST;\n-\n     private final ClientLogger logger = new ClientLogger(ServiceBusReactorAmqpConnection.class);\n     /**\n      * Keeps track of the opened send links. Links are key'd by their entityPath. The send link for allowing the service\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MDk1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391390956", "bodyText": "AppProperties as a parameter isn't necessary, you always pass the same parameter.", "author": "conniey", "createdAt": "2020-03-12T04:04:55Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -46,79 +47,107 @@\n     private static final String MANAGEMENT_SECURITY_TOKEN_KEY = \"security_token\";\n \n     // Well-known values for the service request.\n-    private static final String READ_OPERATION_VALUE = \"READ\";\n     private static final String PEEK_OPERATION_VALUE = AmqpConstants.VENDOR + \":peek-message\";\n-    private static final String MANAGEMENT_EVENTHUB_ENTITY_TYPE = AmqpConstants.VENDOR + \":servicebus\";\n+    private static final String MANAGEMENT_SERVICEBUS_ENTITY_TYPE = AmqpConstants.VENDOR + \":servicebus\";\n     private static final String MANAGEMENT_SERVER_TIMEOUT = AmqpConstants.VENDOR + \":server-timeout\";\n \n-\n-    private final TokenCredential tokenProvider;\n     private final Mono<RequestResponseChannel> channelMono;\n     private final Scheduler scheduler;\n-    private final String topicOrQueueName;\n     private final MessageSerializer messageSerializer;\n-    private final TokenManagerProvider tokenManagerProvider;\n \n-    ManagementChannel(Mono<RequestResponseChannel> responseChannelMono, String topicOrQueueName,\n-                      TokenCredential credential, TokenManagerProvider tokenManagerProvider,\n-                      MessageSerializer messageSerializer, Scheduler scheduler) {\n+    /*This is to maintain cbs node and get authorization.*/\n+    private final TokenManager cbsBasedTokenManager;\n+\n+    // Maintain last peek sequence number\n+    private AtomicReference<Long>  lastPeekedSequenceNumber = new AtomicReference<>(0L);\n+    private AtomicReference<Boolean> cbsBasedTokenManagerCalled = new AtomicReference<>(false);\n+\n \n-        this.tokenManagerProvider = Objects.requireNonNull(tokenManagerProvider,\n-            \"'tokenManagerProvider' cannot be null.\");\n-        this.tokenProvider = Objects.requireNonNull(credential, \"'credential' cannot be null.\");\n-        this.topicOrQueueName = Objects.requireNonNull(topicOrQueueName, \"'eventHubName' cannot be null.\");\n+\n+    ManagementChannel(Mono<RequestResponseChannel> responseChannelMono,\n+                      MessageSerializer messageSerializer, Scheduler scheduler, TokenManager cbsBasedTokenManager\n+    ) {\n         this.messageSerializer = Objects.requireNonNull(messageSerializer, \"'messageSerializer' cannot be null.\");\n         this.channelMono = Objects.requireNonNull(responseChannelMono, \"'responseChannelMono' cannot be null.\");\n         this.scheduler = Objects.requireNonNull(scheduler, \"'scheduler' cannot be null.\");\n+        this.cbsBasedTokenManager = Objects.requireNonNull(cbsBasedTokenManager,\n+            \"'cbsBasedTokenManager' cannot be null.\");\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n-    public Mono<ServiceBusReceivedMessage> peek() {\n+    public Mono<ServiceBusReceivedMessage> peek(long fromSequenceNumber) {\n \n-        int maxMessages = 2;\n-        long fromSequenceNumber = 1;\n-        final Map<String, Object> properties = new HashMap<>();\n-        properties.put(MANAGEMENT_ENTITY_TYPE_KEY, MANAGEMENT_EVENTHUB_ENTITY_TYPE);\n-        properties.put(MANAGEMENT_ENTITY_NAME_KEY, topicOrQueueName);\n-        properties.put(MANAGEMENT_OPERATION_KEY, READ_OPERATION_VALUE);\n-\n-        return peek(properties, ServiceBusReceivedMessage.class, maxMessages, fromSequenceNumber, null)\n+        return peek(new HashMap<>(), ServiceBusReceivedMessage.class, 1, fromSequenceNumber, null)\n+            .last()\n             .publishOn(scheduler);\n     }\n \n-    private <T> Mono<T> peek(Map<String, Object> appProperties, Class<T> responseType,\n-                             int maxMessages, long fromSequenceNumber, UUID sessionId) {\n-\n-        final String tokenAudience = tokenManagerProvider.getScopesFromResource(topicOrQueueName);\n-\n-        return tokenProvider.getToken(new TokenRequestContext().addScopes(tokenAudience)).flatMap(accessToken -> {\n-            appProperties.put(MANAGEMENT_SECURITY_TOKEN_KEY, accessToken.getToken());\n-\n-            // set mandatory application properties for AMQP message.\n-            appProperties.put(MANAGEMENT_OPERATION_KEY, PEEK_OPERATION_VALUE);\n-            appProperties.put(MANAGEMENT_SERVER_TIMEOUT, \"\" + 1000 * 30);\n-\n-            final Message request = Proton.message();\n-            final ApplicationProperties applicationProperties = new ApplicationProperties(appProperties);\n-            request.setApplicationProperties(applicationProperties);\n-\n-            // set mandatory properties on AMQP message body\n-            HashMap<String, Object> requestBodyMap = new HashMap<>();\n-            requestBodyMap.put(ServiceBusConstants.REQUEST_RESPONSE_FROM_SEQUENCE_NUMBER, fromSequenceNumber);\n-            requestBodyMap.put(ServiceBusConstants.REQUEST_RESPONSE_MESSAGE_COUNT, maxMessages);\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Mono<ServiceBusReceivedMessage> peek() {\n \n-            if (!Objects.isNull(sessionId)) {\n-                requestBodyMap.put(ServiceBusConstants.REQUEST_RESPONSE_SESSION_ID, sessionId);\n-            }\n+        return peek(this.lastPeekedSequenceNumber.get() + 1);\n+    }\n \n-            request.setBody(new AmqpValue(requestBodyMap));\n+    private <T> Flux<T> peek(Map<String, Object> appProperties, Class<T> responseType,", "originalCommit": "e1bb4c013c29e1d068a6a12282117dd0f72072d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d103c4673b363d11d266e2145ed7cb7ca238624c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\nindex 58eab33bba7..ce327430967 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n\n@@ -80,7 +80,7 @@ public class ManagementChannel implements  ServiceBusManagementNode {\n     @Override\n     public Mono<ServiceBusReceivedMessage> peek(long fromSequenceNumber) {\n \n-        return peek(new HashMap<>(), ServiceBusReceivedMessage.class, 1, fromSequenceNumber, null)\n+        return peek(ServiceBusReceivedMessage.class, 1, fromSequenceNumber, null)\n             .last()\n             .publishOn(scheduler);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MTE0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391391147", "bodyText": "You should dispose of the existing one (created in BeforeEach) if you are going to recreate it. It'll still consume resources.", "author": "conniey", "createdAt": "2020-03-12T04:05:53Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -54,4 +54,53 @@ void receiveMessageAutoComplete() {\n             })\n             .verifyComplete();\n     }\n+\n+    /**\n+     * Verifies that we can send and peek a message.\n+     */\n+    @Test\n+    void peekMessage() {\n+        // Arrange\n+        final String messageId = UUID.randomUUID().toString();\n+        final String contents = \"Some-contents\";\n+        final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId, 0);\n+        final ReceiveMessageOptions options = new ReceiveMessageOptions().setAutoComplete(true);\n+        receiver = createBuilder()", "originalCommit": "e1bb4c013c29e1d068a6a12282117dd0f72072d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d103c4673b363d11d266e2145ed7cb7ca238624c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\nindex 0c77bc660eb..6d28f4286f1 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n\n@@ -64,10 +65,6 @@ class ServiceBusReceiverAsyncClientIntegrationTest extends IntegrationTestBase {\n         final String messageId = UUID.randomUUID().toString();\n         final String contents = \"Some-contents\";\n         final ServiceBusMessage message = TestUtils.getServiceBusMessage(contents, messageId, 0);\n-        final ReceiveMessageOptions options = new ReceiveMessageOptions().setAutoComplete(true);\n-        receiver = createBuilder()\n-            .receiveMessageOptions(options)\n-            .buildAsyncReceiverClient();\n \n         // Assert & Act\n         StepVerifier.create(sender.send(message).then(receiver.peek()))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MTI5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391391297", "bodyText": "Should put this in AfterEach, if the test fails at line 163, it'll never be run.", "author": "conniey", "createdAt": "2020-03-12T04:06:34Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "diffHunk": "@@ -122,6 +130,43 @@ void teardown() {\n         consumer.close();\n     }\n \n+    /**\n+     * Verifies that this peek one messages.\n+     */\n+    @Test\n+    void peekOneMessage() {\n+        // Arrange\n+        final int numberOfEvents = 1;\n+        when(managementNode.peek())\n+            .thenReturn(Mono.just(mock(ServiceBusReceivedMessage.class)));\n+\n+        // Act & Assert\n+        StepVerifier.create(consumer.peek())\n+            .expectNextCount(numberOfEvents)\n+            .verifyComplete();\n+\n+    }\n+\n+    /**\n+     * Verifies that this peek one messages from a sequence Number.\n+     */\n+    @Test\n+    void peekWithSequenceOneMessage() {\n+        // Arrange\n+        final int numberOfEvents = 1;\n+        final int fromSequenceNumber = 10;\n+\n+        when(managementNode.peek(fromSequenceNumber))\n+            .thenReturn(Mono.just(mock(ServiceBusReceivedMessage.class)));\n+\n+        // Act & Assert\n+        StepVerifier.create(consumer.peek(fromSequenceNumber))\n+            .expectNextCount(numberOfEvents)\n+            .verifyComplete();\n+\n+        Mockito.framework().clearInlineMocks();", "originalCommit": "e1bb4c013c29e1d068a6a12282117dd0f72072d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNjA2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391406066", "bodyText": "It is already there in @AfterEach", "author": "hemanttanwar", "createdAt": "2020-03-12T05:18:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MTI5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "d103c4673b363d11d266e2145ed7cb7ca238624c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\nindex 96bc3501ce7..c35ba70c14d 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\n\n@@ -130,6 +132,29 @@ public class ServiceBusReceiverAsyncClientTest {\n         consumer.close();\n     }\n \n+    /**\n+     * Verifies that when user calls peek more than one time, It returns different object.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    void peekTwoMessages() {\n+\n+        /* Arrange */\n+        final int numberOfEvents = 1;\n+        when(managementNode.peek())\n+            .thenReturn(just(message1), just(message2));\n+\n+        // Act & Assert\n+        StepVerifier.create(consumer.peek())\n+            .expectNext(message1)\n+            .verifyComplete();\n+\n+        // Act & Assert\n+        StepVerifier.create(consumer.peek())\n+            .expectNext(message2)\n+            .verifyComplete();\n+    }\n+\n     /**\n      * Verifies that this peek one messages.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MTM1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391391353", "bodyText": "Do you have a test that peeks the next sequence number?", "author": "conniey", "createdAt": "2020-03-12T04:06:48Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "diffHunk": "@@ -122,6 +130,43 @@ void teardown() {\n         consumer.close();\n     }\n \n+    /**\n+     * Verifies that this peek one messages.\n+     */\n+    @Test\n+    void peekOneMessage() {\n+        // Arrange\n+        final int numberOfEvents = 1;\n+        when(managementNode.peek())\n+            .thenReturn(Mono.just(mock(ServiceBusReceivedMessage.class)));\n+\n+        // Act & Assert\n+        StepVerifier.create(consumer.peek())", "originalCommit": "e1bb4c013c29e1d068a6a12282117dd0f72072d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxNTE2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8983#discussion_r391415165", "bodyText": "added this test", "author": "hemanttanwar", "createdAt": "2020-03-12T05:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MTM1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d103c4673b363d11d266e2145ed7cb7ca238624c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\nindex 96bc3501ce7..c35ba70c14d 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\n\n@@ -130,6 +132,29 @@ public class ServiceBusReceiverAsyncClientTest {\n         consumer.close();\n     }\n \n+    /**\n+     * Verifies that when user calls peek more than one time, It returns different object.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    void peekTwoMessages() {\n+\n+        /* Arrange */\n+        final int numberOfEvents = 1;\n+        when(managementNode.peek())\n+            .thenReturn(just(message1), just(message2));\n+\n+        // Act & Assert\n+        StepVerifier.create(consumer.peek())\n+            .expectNext(message1)\n+            .verifyComplete();\n+\n+        // Act & Assert\n+        StepVerifier.create(consumer.peek())\n+            .expectNext(message2)\n+            .verifyComplete();\n+    }\n+\n     /**\n      * Verifies that this peek one messages.\n      */\n"}}, {"oid": "d103c4673b363d11d266e2145ed7cb7ca238624c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d103c4673b363d11d266e2145ed7cb7ca238624c", "message": "More review comments", "committedDate": "2020-03-12T05:56:48Z", "type": "commit"}, {"oid": "c395b849f3c44758c20b0ebbb09784e456eca30d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c395b849f3c44758c20b0ebbb09784e456eca30d", "message": "trigger pipeline", "committedDate": "2020-03-12T06:20:31Z", "type": "commit"}]}