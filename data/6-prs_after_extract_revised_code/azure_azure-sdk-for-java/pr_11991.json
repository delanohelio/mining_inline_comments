{"pr_number": 11991, "pr_title": "Address the issue of not using the retry-after delay from the latest response", "pr_createdAt": "2020-06-09T19:02:42Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/11991", "timeline": [{"oid": "9f7cfdded00f6a1c2679731a0060972aacf27804", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9f7cfdded00f6a1c2679731a0060972aacf27804", "message": "Address the issue of not using the retry-after delay from the latest response.", "committedDate": "2020-06-09T19:00:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY5MTM1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11991#discussion_r437691354", "bodyText": "The issue was incorrect scoping of getDelay method.\nThe getDelay() method called once subscription on outer Flux is applied. This result in whatever value that call to getDelay returns (say 3 sec)  gets hardcoded in delaySubscription, it looks like:\nMono.defer(() -> this.pollOperation.apply(cxt))\n    .delaySubscription(3)\n    .switchIfEmpty(Mono.error(new IllegalStateException(\"PollOperation returned Mono.empty().\")))\n    .repeat()\nthen when we repeat, this fixed value applied instead of a new call to getDelay to retrieve the new value.", "author": "anuchandy", "createdAt": "2020-06-09T20:14:59Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/polling/PollerFlux.java", "diffHunk": "@@ -217,8 +217,12 @@ public void subscribe(CoreSubscriber<? super AsyncPollResponse<T, U>> actual) {\n             () -> this.rootContext.copy(),\n             // Do polling\n             // set|read to|from context as needed, reactor guarantee thread-safety of cxt object.\n-            cxt -> Mono.defer(() -> this.pollOperation.apply(cxt))\n-                .delaySubscription(getDelay(cxt.getLatestResponse()))\n+            cxt -> Mono.defer(() -> {\n+                final Mono<PollResponse<T>> pollOnceMono = this.pollOperation.apply(cxt);\n+                // Execute (subscribe to) the pollOnceMono after the default poll-interval\n+                // or duration specified in the last retry-after response header elapses.\n+                return pollOnceMono.delaySubscription(getDelay(cxt.getLatestResponse()));\n+            })", "originalCommit": "9f7cfdded00f6a1c2679731a0060972aacf27804", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}