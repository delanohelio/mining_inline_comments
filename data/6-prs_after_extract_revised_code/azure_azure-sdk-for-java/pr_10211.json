{"pr_number": 10211, "pr_title": "[FR] Codesnippest for all client's APIs", "pr_createdAt": "2020-04-15T05:38:29Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/10211", "timeline": [{"oid": "8d5b01b07c8c31acdbf4e90d2f19818a279f4136", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8d5b01b07c8c31acdbf4e90d2f19818a279f4136", "message": "update to new design", "committedDate": "2020-04-14T16:57:28Z", "type": "commit"}, {"oid": "77d8b4487ba5d15a4b246ab6c11f007fa87e5fb5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/77d8b4487ba5d15a4b246ab6c11f007fa87e5fb5", "message": "checkstyle", "committedDate": "2020-04-14T16:57:34Z", "type": "commit"}, {"oid": "1db662e4cc0e27c43b6ba847855ce8e4a1b22e53", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1db662e4cc0e27c43b6ba847855ce8e4a1b22e53", "message": "Form Training async client test part 1", "committedDate": "2020-04-14T16:57:56Z", "type": "commit"}, {"oid": "aa9264e4caad13c487e19fe6612ceaeb8b70cc04", "url": "https://github.com/Azure/azure-sdk-for-java/commit/aa9264e4caad13c487e19fe6612ceaeb8b70cc04", "message": "update form recognizer endpoint models", "committedDate": "2020-04-14T16:58:30Z", "type": "commit"}, {"oid": "8576463b55913dbeacabd9f2ff07d36b33f478b4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8576463b55913dbeacabd9f2ff07d36b33f478b4", "message": "update model transforms for fieldMap", "committedDate": "2020-04-14T16:58:34Z", "type": "commit"}, {"oid": "6db06c5bbf07f93122c97732e265fe1d6f6ae732", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6db06c5bbf07f93122c97732e265fe1d6f6ae732", "message": "Remove generic fieldvalue instead use generic FormField", "committedDate": "2020-04-14T17:00:02Z", "type": "commit"}, {"oid": "a1432425a544135a7edfd940dd496746d29e25d6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a1432425a544135a7edfd940dd496746d29e25d6", "message": "Add form recognizer async tests", "committedDate": "2020-04-14T17:00:11Z", "type": "commit"}, {"oid": "5f22d8e381300a333c4d815a6bd7a59c1afa6084", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5f22d8e381300a333c4d815a6bd7a59c1afa6084", "message": "update sync tests", "committedDate": "2020-04-14T17:00:35Z", "type": "commit"}, {"oid": "181b7885a4c0e13ec6748abbb65e4421f1360986", "url": "https://github.com/Azure/azure-sdk-for-java/commit/181b7885a4c0e13ec6748abbb65e4421f1360986", "message": "review comments", "committedDate": "2020-04-14T17:00:40Z", "type": "commit"}, {"oid": "434bdaf8655af0ec832374bbdffd92c2de0216e6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/434bdaf8655af0ec832374bbdffd92c2de0216e6", "message": "review comments", "committedDate": "2020-04-14T17:01:15Z", "type": "commit"}, {"oid": "5dee66b6bda4859850f98e71f4fe6762d15b7d23", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5dee66b6bda4859850f98e71f4fe6762d15b7d23", "message": "additional tests for custom forms", "committedDate": "2020-04-14T17:01:20Z", "type": "commit"}, {"oid": "31db43cfbbcde31e291f240be50b00a01490dc13", "url": "https://github.com/Azure/azure-sdk-for-java/commit/31db43cfbbcde31e291f240be50b00a01490dc13", "message": "rebase changes", "committedDate": "2020-04-14T18:56:26Z", "type": "commit"}, {"oid": "045af61fb937f554ea05fcfad70561bc72944faa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/045af61fb937f554ea05fcfad70561bc72944faa", "message": "ModelTrainingStatus rename, deleteModel tests", "committedDate": "2020-04-14T20:57:49Z", "type": "commit"}, {"oid": "c0b7b553c1c8ea6d0447ba26b126e8339ba46faa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c0b7b553c1c8ea6d0447ba26b126e8339ba46faa", "message": "add codesnippet for fr recognization endpoints", "committedDate": "2020-04-15T05:11:10Z", "type": "commit"}, {"oid": "62122784152733d060c3bfbe3aca3d0633ad1eaa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/62122784152733d060c3bfbe3aca3d0633ad1eaa", "message": "added training client codesnippet", "committedDate": "2020-04-16T00:06:14Z", "type": "commit"}, {"oid": "410814d66bf47fef64a8e3f437caaabb87dac69d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/410814d66bf47fef64a8e3f437caaabb87dac69d", "message": "wording", "committedDate": "2020-04-16T00:08:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwNjYxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409206618", "bodyText": "Could probably write as, // if training polling operation completed, retrieve the final result ?", "author": "samvaity", "createdAt": "2020-04-16T00:14:32Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,453 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.FormPage;\n+import com.azure.ai.formrecognizer.models.FormTableCell;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedReceipt;\n+import com.azure.ai.formrecognizer.models.USReceipt;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.Optional;\n+\n+/**\n+ * Code snippet for {@link FormRecognizerAsyncClient}\n+ */\n+public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n+    FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient();\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient}\n+     */\n+    public void createFormRecognizerAsyncClient() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+    }\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient} with pipeline\n+     */\n+    public void createFormRecognizerAsyncClientWithPipeline() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(/* add policies */)\n+            .build();\n+\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .pipeline(pipeline)\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+    }\n+\n+    // Recognize Custom Form\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl}\n+     */\n+    public void beginRecognizeCustomFormsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).subscribe(\n+            trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.", "originalCommit": "410814d66bf47fef64a8e3f437caaabb87dac69d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\nindex 1f56e194e5a..5c8d73b0b44 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n\n@@ -233,7 +233,7 @@ public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n      * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl} with options\n      */\n     public void beginRecognizeContentFromUrlWithOptions() {\n-        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#String-Duration\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string-Duration\n         String sourceFilePath = \"{file_source_url}\";\n         formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath, Duration.ofSeconds(5)).subscribe(\n             trainingOperationResponse ->\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwOTI5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409209297", "bodyText": "lets call this trainingPollOperationResponse indicating that it will return a poller instance.", "author": "samvaity", "createdAt": "2020-04-16T00:23:46Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,453 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.FormPage;\n+import com.azure.ai.formrecognizer.models.FormTableCell;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedReceipt;\n+import com.azure.ai.formrecognizer.models.USReceipt;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.Optional;\n+\n+/**\n+ * Code snippet for {@link FormRecognizerAsyncClient}\n+ */\n+public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n+    FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient();\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient}\n+     */\n+    public void createFormRecognizerAsyncClient() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+    }\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient} with pipeline\n+     */\n+    public void createFormRecognizerAsyncClientWithPipeline() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(/* add policies */)\n+            .build();\n+\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .pipeline(pipeline)\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+    }\n+\n+    // Recognize Custom Form\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl}\n+     */\n+    public void beginRecognizeCustomFormsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).subscribe(\n+            trainingOperationResponse ->", "originalCommit": "410814d66bf47fef64a8e3f437caaabb87dac69d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\nindex 1f56e194e5a..5c8d73b0b44 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n\n@@ -233,7 +233,7 @@ public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n      * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl} with options\n      */\n     public void beginRecognizeContentFromUrlWithOptions() {\n-        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#String-Duration\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string-Duration\n         String sourceFilePath = \"{file_source_url}\";\n         formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath, Duration.ofSeconds(5)).subscribe(\n             trainingOperationResponse ->\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwOTM5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409209394", "bodyText": "extractedForm --> recognizedForm\nupdate this for all customForms endpoint.", "author": "samvaity", "createdAt": "2020-04-16T00:24:05Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,453 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.FormPage;\n+import com.azure.ai.formrecognizer.models.FormTableCell;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedReceipt;\n+import com.azure.ai.formrecognizer.models.USReceipt;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.Optional;\n+\n+/**\n+ * Code snippet for {@link FormRecognizerAsyncClient}\n+ */\n+public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n+    FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient();\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient}\n+     */\n+    public void createFormRecognizerAsyncClient() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+    }\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient} with pipeline\n+     */\n+    public void createFormRecognizerAsyncClientWithPipeline() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(/* add policies */)\n+            .build();\n+\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .pipeline(pipeline)\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+    }\n+\n+    // Recognize Custom Form\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl}\n+     */\n+    public void beginRecognizeCustomFormsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).subscribe(\n+            trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {", "originalCommit": "410814d66bf47fef64a8e3f437caaabb87dac69d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\nindex 1f56e194e5a..5c8d73b0b44 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n\n@@ -233,7 +233,7 @@ public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n      * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl} with options\n      */\n     public void beginRecognizeContentFromUrlWithOptions() {\n-        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#String-Duration\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string-Duration\n         String sourceFilePath = \"{file_source_url}\";\n         formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath, Duration.ofSeconds(5)).subscribe(\n             trainingOperationResponse ->\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxMjczMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409212731", "bodyText": "don't need this.\nupdate this for all customForms eendpoint.", "author": "samvaity", "createdAt": "2020-04-16T00:36:02Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,453 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.FormPage;\n+import com.azure.ai.formrecognizer.models.FormTableCell;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedReceipt;\n+import com.azure.ai.formrecognizer.models.USReceipt;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.Optional;\n+\n+/**\n+ * Code snippet for {@link FormRecognizerAsyncClient}\n+ */\n+public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n+    FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient();\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient}\n+     */\n+    public void createFormRecognizerAsyncClient() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+    }\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient} with pipeline\n+     */\n+    public void createFormRecognizerAsyncClientWithPipeline() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(/* add policies */)\n+            .build();\n+\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .pipeline(pipeline)\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+    }\n+\n+    // Recognize Custom Form\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl}\n+     */\n+    public void beginRecognizeCustomFormsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).subscribe(\n+            trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                        });\n+", "originalCommit": "410814d66bf47fef64a8e3f437caaabb87dac69d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\nindex 1f56e194e5a..5c8d73b0b44 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n\n@@ -233,7 +233,7 @@ public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n      * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl} with options\n      */\n     public void beginRecognizeContentFromUrlWithOptions() {\n-        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#String-Duration\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string-Duration\n         String sourceFilePath = \"{file_source_url}\";\n         formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath, Duration.ofSeconds(5)).subscribe(\n             trainingOperationResponse ->\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxMjc4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409212785", "bodyText": "lets add confidence here too.\nupdate this for all customForms endpoint.", "author": "samvaity", "createdAt": "2020-04-16T00:36:15Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,453 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.FormPage;\n+import com.azure.ai.formrecognizer.models.FormTableCell;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedReceipt;\n+import com.azure.ai.formrecognizer.models.USReceipt;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.Optional;\n+\n+/**\n+ * Code snippet for {@link FormRecognizerAsyncClient}\n+ */\n+public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n+    FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient();\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient}\n+     */\n+    public void createFormRecognizerAsyncClient() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+    }\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient} with pipeline\n+     */\n+    public void createFormRecognizerAsyncClientWithPipeline() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(/* add policies */)\n+            .build();\n+\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .pipeline(pipeline)\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+    }\n+\n+    // Recognize Custom Form\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl}\n+     */\n+    public void beginRecognizeCustomFormsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).subscribe(\n+            trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());", "originalCommit": "410814d66bf47fef64a8e3f437caaabb87dac69d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\nindex 1f56e194e5a..5c8d73b0b44 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n\n@@ -233,7 +233,7 @@ public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n      * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl} with options\n      */\n     public void beginRecognizeContentFromUrlWithOptions() {\n-        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#String-Duration\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string-Duration\n         String sourceFilePath = \"{file_source_url}\";\n         formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath, Duration.ofSeconds(5)).subscribe(\n             trainingOperationResponse ->\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxMzAxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409213016", "bodyText": "boolean includeTextDetails = true;\nand send that value in the call below.", "author": "samvaity", "createdAt": "2020-04-16T00:37:05Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,453 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.FormPage;\n+import com.azure.ai.formrecognizer.models.FormTableCell;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedReceipt;\n+import com.azure.ai.formrecognizer.models.USReceipt;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.Optional;\n+\n+/**\n+ * Code snippet for {@link FormRecognizerAsyncClient}\n+ */\n+public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n+    FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient();\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient}\n+     */\n+    public void createFormRecognizerAsyncClient() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+    }\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient} with pipeline\n+     */\n+    public void createFormRecognizerAsyncClientWithPipeline() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(/* add policies */)\n+            .build();\n+\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .pipeline(pipeline)\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+    }\n+\n+    // Recognize Custom Form\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl}\n+     */\n+    public void beginRecognizeCustomFormsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).subscribe(\n+            trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                        });\n+\n+                        // Page Information\n+                        extractedForm.getPages().forEach(formPage -> {\n+                            System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                            System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                            System.out.println();\n+                        });\n+                    })\n+                )\n+            );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl} with options\n+     */\n+    public void beginRecognizeCustomFormsFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string-boolean-Duration\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+", "originalCommit": "410814d66bf47fef64a8e3f437caaabb87dac69d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\nindex 1f56e194e5a..5c8d73b0b44 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n\n@@ -233,7 +233,7 @@ public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n      * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl} with options\n      */\n     public void beginRecognizeContentFromUrlWithOptions() {\n-        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#String-Duration\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string-Duration\n         String sourceFilePath = \"{file_source_url}\";\n         formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath, Duration.ofSeconds(5)).subscribe(\n             trainingOperationResponse ->\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxMzM2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409213361", "bodyText": "instead of this print the text content information on field.\nAdd a comment\n// set of reference elements found, when includeTextDetails is set to true.", "author": "samvaity", "createdAt": "2020-04-16T00:38:10Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,453 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.FormPage;\n+import com.azure.ai.formrecognizer.models.FormTableCell;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedReceipt;\n+import com.azure.ai.formrecognizer.models.USReceipt;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.Optional;\n+\n+/**\n+ * Code snippet for {@link FormRecognizerAsyncClient}\n+ */\n+public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n+    FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient();\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient}\n+     */\n+    public void createFormRecognizerAsyncClient() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+    }\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient} with pipeline\n+     */\n+    public void createFormRecognizerAsyncClientWithPipeline() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(/* add policies */)\n+            .build();\n+\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .pipeline(pipeline)\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+    }\n+\n+    // Recognize Custom Form\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl}\n+     */\n+    public void beginRecognizeCustomFormsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).subscribe(\n+            trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                        });\n+\n+                        // Page Information\n+                        extractedForm.getPages().forEach(formPage -> {\n+                            System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                            System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                            System.out.println();\n+                        });\n+                    })\n+                )\n+            );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl} with options\n+     */\n+    public void beginRecognizeCustomFormsFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string-boolean-Duration\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId, true,\n+            Duration.ofSeconds(5)).subscribe(trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                        });\n+\n+                        // Page Information\n+                        extractedForm.getPages().forEach(formPage -> {", "originalCommit": "410814d66bf47fef64a8e3f437caaabb87dac69d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAwMTczNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r410001736", "bodyText": "not sure about this. Can you give more info here?", "author": "mssfang", "createdAt": "2020-04-17T05:36:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxMzM2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\nindex 1f56e194e5a..5c8d73b0b44 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n\n@@ -233,7 +233,7 @@ public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n      * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl} with options\n      */\n     public void beginRecognizeContentFromUrlWithOptions() {\n-        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#String-Duration\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string-Duration\n         String sourceFilePath = \"{file_source_url}\";\n         formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath, Duration.ofSeconds(5)).subscribe(\n             trainingOperationResponse ->\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxNDM1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409214353", "bodyText": "No need to check for header in code snippets just print out the text if present for content endpoints.", "author": "samvaity", "createdAt": "2020-04-16T00:41:37Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,453 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.FormPage;\n+import com.azure.ai.formrecognizer.models.FormTableCell;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedReceipt;\n+import com.azure.ai.formrecognizer.models.USReceipt;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.Optional;\n+\n+/**\n+ * Code snippet for {@link FormRecognizerAsyncClient}\n+ */\n+public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n+    FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient();\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient}\n+     */\n+    public void createFormRecognizerAsyncClient() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+    }\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient} with pipeline\n+     */\n+    public void createFormRecognizerAsyncClientWithPipeline() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(/* add policies */)\n+            .build();\n+\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .pipeline(pipeline)\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+    }\n+\n+    // Recognize Custom Form\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl}\n+     */\n+    public void beginRecognizeCustomFormsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).subscribe(\n+            trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                        });\n+\n+                        // Page Information\n+                        extractedForm.getPages().forEach(formPage -> {\n+                            System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                            System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                            System.out.println();\n+                        });\n+                    })\n+                )\n+            );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl} with options\n+     */\n+    public void beginRecognizeCustomFormsFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string-boolean-Duration\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId, true,\n+            Duration.ofSeconds(5)).subscribe(trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                        });\n+\n+                        // Page Information\n+                        extractedForm.getPages().forEach(formPage -> {\n+                            System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                            System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                            System.out.println();\n+                        });\n+                    })\n+                )\n+        );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string-boolean-Duration\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomForms}\n+     */\n+    public void beginRecognizeCustomForms() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType\n+        File sourceFile = new File(\"{file_source_url}\");\n+        String modelId = \"{model_id}\";\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomForms(buffer, modelId, sourceFile.length(),\n+            FormContentType.IMAGE_JPEG).subscribe(trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                        });\n+\n+                        // Page Information\n+                        extractedForm.getPages().forEach(formPage -> {\n+                            System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                            System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                            System.out.println();\n+                        });\n+                    })\n+                )\n+        );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomForms} with options\n+     */\n+    public void beginRecognizeCustomFormsWithOptions() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType-boolean-Duration\n+        File sourceFile = new File(\"{file_source_url}\");\n+        String modelId = \"{model_id}\";\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomForms(buffer, modelId, sourceFile.length(),\n+            FormContentType.IMAGE_JPEG, true, Duration.ofSeconds(5))\n+            .subscribe(trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                        });\n+\n+                        // Page Information\n+                        extractedForm.getPages().forEach(formPage -> {\n+                            System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                            System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                            System.out.println();\n+                        });\n+                    })\n+                )\n+        );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType-boolean-Duration\n+    }\n+\n+    // Recognize Content\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl}\n+     */\n+    public void beginRecognizeContentFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string\n+        String sourceFilePath = \"{file_source_url}\";\n+        formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath).subscribe(trainingOperationResponse ->\n+            trainingOperationResponse.getFinalResult().subscribe(layoutPageResults ->\n+                layoutPageResults.forEach(formPage -> {\n+                    System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                    System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                    // Table information\n+                    System.out.println(\"Recognized Tables: \");\n+                    formPage.getTables().forEach(formTable -> {\n+                        for (int i = 0; i < formTable.getRowCount(); i++) {\n+                            for (int j = 0; j < formTable.getColumnCount(); j++) {\n+                                int finalJ = j;\n+                                int finalI = i;\n+                                Optional<FormTableCell> optionalFormTableCell =\n+                                    formTable.getCells().stream().filter(formTableCell ->\n+                                        formTableCell.getRowIndex() == finalI\n+                                            && formTableCell.getColumnIndex() == finalJ)\n+                                        .findFirst();\n+                                FormTableCell recognizedTableCell = optionalFormTableCell.get();\n+                                if (recognizedTableCell.isHeader()) {\n+                                    System.out.println(recognizedTableCell.getText());\n+                                } else {\n+                                    System.out.printf(\"%s || \", recognizedTableCell.getText());\n+                                }", "originalCommit": "410814d66bf47fef64a8e3f437caaabb87dac69d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\nindex 1f56e194e5a..5c8d73b0b44 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n\n@@ -233,7 +233,7 @@ public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n      * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl} with options\n      */\n     public void beginRecognizeContentFromUrlWithOptions() {\n-        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#String-Duration\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string-Duration\n         String sourceFilePath = \"{file_source_url}\";\n         formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath, Duration.ofSeconds(5)).subscribe(\n             trainingOperationResponse ->\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxNDY0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409214646", "bodyText": "Don't need to print this in a table. A simple for loop on all cell text printing text and bounding box should be enough.", "author": "samvaity", "createdAt": "2020-04-16T00:42:42Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,453 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.FormPage;\n+import com.azure.ai.formrecognizer.models.FormTableCell;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedReceipt;\n+import com.azure.ai.formrecognizer.models.USReceipt;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.Optional;\n+\n+/**\n+ * Code snippet for {@link FormRecognizerAsyncClient}\n+ */\n+public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n+    FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient();\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient}\n+     */\n+    public void createFormRecognizerAsyncClient() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+    }\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient} with pipeline\n+     */\n+    public void createFormRecognizerAsyncClientWithPipeline() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(/* add policies */)\n+            .build();\n+\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .pipeline(pipeline)\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+    }\n+\n+    // Recognize Custom Form\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl}\n+     */\n+    public void beginRecognizeCustomFormsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).subscribe(\n+            trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                        });\n+\n+                        // Page Information\n+                        extractedForm.getPages().forEach(formPage -> {\n+                            System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                            System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                            System.out.println();\n+                        });\n+                    })\n+                )\n+            );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl} with options\n+     */\n+    public void beginRecognizeCustomFormsFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string-boolean-Duration\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId, true,\n+            Duration.ofSeconds(5)).subscribe(trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                        });\n+\n+                        // Page Information\n+                        extractedForm.getPages().forEach(formPage -> {\n+                            System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                            System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                            System.out.println();\n+                        });\n+                    })\n+                )\n+        );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string-boolean-Duration\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomForms}\n+     */\n+    public void beginRecognizeCustomForms() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType\n+        File sourceFile = new File(\"{file_source_url}\");\n+        String modelId = \"{model_id}\";\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomForms(buffer, modelId, sourceFile.length(),\n+            FormContentType.IMAGE_JPEG).subscribe(trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                        });\n+\n+                        // Page Information\n+                        extractedForm.getPages().forEach(formPage -> {\n+                            System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                            System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                            System.out.println();\n+                        });\n+                    })\n+                )\n+        );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomForms} with options\n+     */\n+    public void beginRecognizeCustomFormsWithOptions() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType-boolean-Duration\n+        File sourceFile = new File(\"{file_source_url}\");\n+        String modelId = \"{model_id}\";\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomForms(buffer, modelId, sourceFile.length(),\n+            FormContentType.IMAGE_JPEG, true, Duration.ofSeconds(5))\n+            .subscribe(trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                        });\n+\n+                        // Page Information\n+                        extractedForm.getPages().forEach(formPage -> {\n+                            System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                            System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                            System.out.println();\n+                        });\n+                    })\n+                )\n+        );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType-boolean-Duration\n+    }\n+\n+    // Recognize Content\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl}\n+     */\n+    public void beginRecognizeContentFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string\n+        String sourceFilePath = \"{file_source_url}\";\n+        formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath).subscribe(trainingOperationResponse ->\n+            trainingOperationResponse.getFinalResult().subscribe(layoutPageResults ->\n+                layoutPageResults.forEach(formPage -> {\n+                    System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                    System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                    // Table information\n+                    System.out.println(\"Recognized Tables: \");\n+                    formPage.getTables().forEach(formTable -> {\n+                        for (int i = 0; i < formTable.getRowCount(); i++) {\n+                            for (int j = 0; j < formTable.getColumnCount(); j++) {\n+                                int finalJ = j;\n+                                int finalI = i;\n+                                Optional<FormTableCell> optionalFormTableCell =\n+                                    formTable.getCells().stream().filter(formTableCell ->\n+                                        formTableCell.getRowIndex() == finalI\n+                                            && formTableCell.getColumnIndex() == finalJ)\n+                                        .findFirst();\n+                                FormTableCell recognizedTableCell = optionalFormTableCell.get();\n+                                if (recognizedTableCell.isHeader()) {\n+                                    System.out.println(recognizedTableCell.getText());\n+                                } else {\n+                                    System.out.printf(\"%s || \", recognizedTableCell.getText());\n+                                }", "originalCommit": "410814d66bf47fef64a8e3f437caaabb87dac69d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\nindex 1f56e194e5a..5c8d73b0b44 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n\n@@ -233,7 +233,7 @@ public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n      * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl} with options\n      */\n     public void beginRecognizeContentFromUrlWithOptions() {\n-        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#String-Duration\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string-Duration\n         String sourceFilePath = \"{file_source_url}\";\n         formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath, Duration.ofSeconds(5)).subscribe(\n             trainingOperationResponse ->\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxNDc3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409214773", "bodyText": "remove?", "author": "samvaity", "createdAt": "2020-04-16T00:43:10Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,453 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.FormPage;\n+import com.azure.ai.formrecognizer.models.FormTableCell;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedReceipt;\n+import com.azure.ai.formrecognizer.models.USReceipt;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.Optional;\n+\n+/**\n+ * Code snippet for {@link FormRecognizerAsyncClient}\n+ */\n+public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n+    FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient();\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient}\n+     */\n+    public void createFormRecognizerAsyncClient() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+    }\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient} with pipeline\n+     */\n+    public void createFormRecognizerAsyncClientWithPipeline() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(/* add policies */)\n+            .build();\n+\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .pipeline(pipeline)\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+    }\n+\n+    // Recognize Custom Form\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl}\n+     */\n+    public void beginRecognizeCustomFormsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).subscribe(\n+            trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                        });\n+\n+                        // Page Information\n+                        extractedForm.getPages().forEach(formPage -> {\n+                            System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                            System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                            System.out.println();\n+                        });\n+                    })\n+                )\n+            );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl} with options\n+     */\n+    public void beginRecognizeCustomFormsFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string-boolean-Duration\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId, true,\n+            Duration.ofSeconds(5)).subscribe(trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                        });\n+\n+                        // Page Information\n+                        extractedForm.getPages().forEach(formPage -> {\n+                            System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                            System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                            System.out.println();\n+                        });\n+                    })\n+                )\n+        );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string-boolean-Duration\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomForms}\n+     */\n+    public void beginRecognizeCustomForms() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType\n+        File sourceFile = new File(\"{file_source_url}\");\n+        String modelId = \"{model_id}\";\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomForms(buffer, modelId, sourceFile.length(),\n+            FormContentType.IMAGE_JPEG).subscribe(trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                        });\n+\n+                        // Page Information\n+                        extractedForm.getPages().forEach(formPage -> {\n+                            System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                            System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                            System.out.println();\n+                        });\n+                    })\n+                )\n+        );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomForms} with options\n+     */\n+    public void beginRecognizeCustomFormsWithOptions() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType-boolean-Duration\n+        File sourceFile = new File(\"{file_source_url}\");\n+        String modelId = \"{model_id}\";\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomForms(buffer, modelId, sourceFile.length(),\n+            FormContentType.IMAGE_JPEG, true, Duration.ofSeconds(5))\n+            .subscribe(trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                        });\n+\n+                        // Page Information\n+                        extractedForm.getPages().forEach(formPage -> {\n+                            System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                            System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                            System.out.println();\n+                        });\n+                    })\n+                )\n+        );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType-boolean-Duration\n+    }\n+\n+    // Recognize Content\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl}\n+     */\n+    public void beginRecognizeContentFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string\n+        String sourceFilePath = \"{file_source_url}\";\n+        formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath).subscribe(trainingOperationResponse ->\n+            trainingOperationResponse.getFinalResult().subscribe(layoutPageResults ->\n+                layoutPageResults.forEach(formPage -> {\n+                    System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                    System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                    // Table information\n+                    System.out.println(\"Recognized Tables: \");\n+                    formPage.getTables().forEach(formTable -> {\n+                        for (int i = 0; i < formTable.getRowCount(); i++) {\n+                            for (int j = 0; j < formTable.getColumnCount(); j++) {\n+                                int finalJ = j;\n+                                int finalI = i;\n+                                Optional<FormTableCell> optionalFormTableCell =\n+                                    formTable.getCells().stream().filter(formTableCell ->\n+                                        formTableCell.getRowIndex() == finalI\n+                                            && formTableCell.getColumnIndex() == finalJ)\n+                                        .findFirst();\n+                                FormTableCell recognizedTableCell = optionalFormTableCell.get();\n+                                if (recognizedTableCell.isHeader()) {\n+                                    System.out.println(recognizedTableCell.getText());\n+                                } else {\n+                                    System.out.printf(\"%s || \", recognizedTableCell.getText());\n+                                }\n+                            }}\n+                    });\n+                })\n+            ));\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl} with options\n+     */\n+    public void beginRecognizeContentFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#String-Duration\n+        String sourceFilePath = \"{file_source_url}\";\n+        formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath, Duration.ofSeconds(5)).subscribe(\n+            trainingOperationResponse ->\n+                trainingOperationResponse.getFinalResult().subscribe(layoutPageResults ->\n+                    layoutPageResults.forEach(formPage -> {\n+                        System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                        System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                        // Table information\n+                        System.out.println(\"Recognized Tables: \");\n+                        formPage.getTables().forEach(formTable -> {\n+                            for (int i = 0; i < formTable.getRowCount(); i++) {\n+                                for (int j = 0; j < formTable.getColumnCount(); j++) {\n+                                    int finalJ = j;\n+                                    int finalI = i;\n+                                    Optional<FormTableCell> optionalFormTableCell =\n+                                        formTable.getCells().stream().filter(formTableCell ->\n+                                            formTableCell.getRowIndex() == finalI\n+                                                && formTableCell.getColumnIndex() == finalJ)\n+                                            .findFirst();\n+                                    FormTableCell recognizedTableCell = optionalFormTableCell.get();\n+                                    if (recognizedTableCell.isHeader()) {\n+                                        System.out.println(recognizedTableCell.getText());\n+                                    } else {\n+                                        System.out.printf(\"%s || \", recognizedTableCell.getText());\n+                                    }\n+                                }}\n+                        });\n+                    })\n+                ));\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#String-Duration\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContent}\n+     */\n+    public void beginRecognizeContent() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#Flux-long-FormContentType\n+        File sourceFile = new File(\"{file_source_url}\");\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeContent(buffer, sourceFile.length(), FormContentType.APPLICATION_PDF)\n+            .subscribe(trainingOperationResponse ->\n+                trainingOperationResponse.getFinalResult().subscribe(layoutPageResults ->\n+                    layoutPageResults.forEach(formPage -> {\n+                        System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                        System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                        // Table information\n+                        System.out.println(\"Recognized Tables: \");\n+                        formPage.getTables().forEach(formTable -> {\n+                            for (int i = 0; i < formTable.getRowCount(); i++) {\n+                                for (int j = 0; j < formTable.getColumnCount(); j++) {\n+                                    int finalJ = j;\n+                                    int finalI = i;\n+                                    Optional<FormTableCell> optionalFormTableCell =\n+                                        formTable.getCells().stream().filter(formTableCell ->\n+                                            formTableCell.getRowIndex() == finalI\n+                                                && formTableCell.getColumnIndex() == finalJ)\n+                                            .findFirst();\n+                                    FormTableCell recognizedTableCell = optionalFormTableCell.get();\n+                                    if (recognizedTableCell.isHeader()) {\n+                                        System.out.println(recognizedTableCell.getText());\n+                                    } else {\n+                                        System.out.printf(\"%s || \", recognizedTableCell.getText());\n+                                    }\n+                                }}\n+                        });\n+                    })\n+            ));\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#Flux-long-FormContentType\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContent} with options\n+     */\n+    public void beginRecognizeContentWithOptions() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#Flux-FormContentType-long-Duration\n+        File sourceFile = new File(\"{file_source_url}\");\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeContent(buffer, FormContentType.APPLICATION_PDF, sourceFile.length(),\n+            Duration.ofSeconds(5)).subscribe(trainingOperationResponse ->\n+                trainingOperationResponse.getFinalResult().subscribe(layoutPageResults ->\n+                    layoutPageResults.forEach(formPage -> {\n+                        System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                        System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                        // Table information\n+                        System.out.println(\"Recognized Tables: \");\n+                        formPage.getTables().forEach(formTable -> {\n+                            for (int i = 0; i < formTable.getRowCount(); i++) {\n+                                for (int j = 0; j < formTable.getColumnCount(); j++) {\n+                                    int finalJ = j;\n+                                    int finalI = i;\n+                                    Optional<FormTableCell> optionalFormTableCell =\n+                                        formTable.getCells().stream().filter(formTableCell ->\n+                                            formTableCell.getRowIndex() == finalI\n+                                                && formTableCell.getColumnIndex() == finalJ)\n+                                            .findFirst();\n+                                    FormTableCell recognizedTableCell = optionalFormTableCell.get();\n+                                    if (recognizedTableCell.isHeader()) {\n+                                        System.out.println(recognizedTableCell.getText());\n+                                    } else {\n+                                        System.out.printf(\"%s || \", recognizedTableCell.getText());\n+                                    }\n+                                }}\n+                        });\n+                    })\n+                ));\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#Flux-FormContentType-long-Duration\n+    }\n+\n+    // Recognize Receipts\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceiptsFromUrl}\n+     */\n+    public void beginRecognizeReceiptsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string\n+        String receiptUrl = \"{file_source_url}\";\n+        formRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(receiptUrl).subscribe(trainingOperationResponse -> {\n+            System.out.println(\"Polling completed successfully\");", "originalCommit": "410814d66bf47fef64a8e3f437caaabb87dac69d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\nindex 1f56e194e5a..5c8d73b0b44 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n\n@@ -233,7 +233,7 @@ public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n      * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl} with options\n      */\n     public void beginRecognizeContentFromUrlWithOptions() {\n-        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#String-Duration\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string-Duration\n         String sourceFilePath = \"{file_source_url}\";\n         formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath, Duration.ofSeconds(5)).subscribe(\n             trainingOperationResponse ->\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxNTAxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409215015", "bodyText": "whenever passing includeTextDetails as true show in the code where they can access form content.", "author": "samvaity", "createdAt": "2020-04-16T00:44:01Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,453 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.FormPage;\n+import com.azure.ai.formrecognizer.models.FormTableCell;\n+import com.azure.ai.formrecognizer.models.OperationResult;\n+import com.azure.ai.formrecognizer.models.RecognizedReceipt;\n+import com.azure.ai.formrecognizer.models.USReceipt;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.polling.SyncPoller;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.Optional;\n+\n+/**\n+ * Code snippet for {@link FormRecognizerAsyncClient}\n+ */\n+public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n+    FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient();\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient}\n+     */\n+    public void createFormRecognizerAsyncClient() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+    }\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient} with pipeline\n+     */\n+    public void createFormRecognizerAsyncClientWithPipeline() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(/* add policies */)\n+            .build();\n+\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .pipeline(pipeline)\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+    }\n+\n+    // Recognize Custom Form\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl}\n+     */\n+    public void beginRecognizeCustomFormsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).subscribe(\n+            trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                        });\n+\n+                        // Page Information\n+                        extractedForm.getPages().forEach(formPage -> {\n+                            System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                            System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                            System.out.println();\n+                        });\n+                    })\n+                )\n+            );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl} with options\n+     */\n+    public void beginRecognizeCustomFormsFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string-boolean-Duration\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId, true,\n+            Duration.ofSeconds(5)).subscribe(trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                        });\n+\n+                        // Page Information\n+                        extractedForm.getPages().forEach(formPage -> {\n+                            System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                            System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                            System.out.println();\n+                        });\n+                    })\n+                )\n+        );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string-boolean-Duration\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomForms}\n+     */\n+    public void beginRecognizeCustomForms() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType\n+        File sourceFile = new File(\"{file_source_url}\");\n+        String modelId = \"{model_id}\";\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomForms(buffer, modelId, sourceFile.length(),\n+            FormContentType.IMAGE_JPEG).subscribe(trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                        });\n+\n+                        // Page Information\n+                        extractedForm.getPages().forEach(formPage -> {\n+                            System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                            System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                            System.out.println();\n+                        });\n+                    })\n+                )\n+        );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomForms} with options\n+     */\n+    public void beginRecognizeCustomFormsWithOptions() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType-boolean-Duration\n+        File sourceFile = new File(\"{file_source_url}\");\n+        String modelId = \"{model_id}\";\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomForms(buffer, modelId, sourceFile.length(),\n+            FormContentType.IMAGE_JPEG, true, Duration.ofSeconds(5))\n+            .subscribe(trainingOperationResponse ->\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(extractedForm -> {\n+                        extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                        });\n+\n+                        // Page Information\n+                        extractedForm.getPages().forEach(formPage -> {\n+                            System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                            System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                            System.out.println();\n+                        });\n+                    })\n+                )\n+        );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType-boolean-Duration\n+    }\n+\n+    // Recognize Content\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl}\n+     */\n+    public void beginRecognizeContentFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string\n+        String sourceFilePath = \"{file_source_url}\";\n+        formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath).subscribe(trainingOperationResponse ->\n+            trainingOperationResponse.getFinalResult().subscribe(layoutPageResults ->\n+                layoutPageResults.forEach(formPage -> {\n+                    System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                    System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                    // Table information\n+                    System.out.println(\"Recognized Tables: \");\n+                    formPage.getTables().forEach(formTable -> {\n+                        for (int i = 0; i < formTable.getRowCount(); i++) {\n+                            for (int j = 0; j < formTable.getColumnCount(); j++) {\n+                                int finalJ = j;\n+                                int finalI = i;\n+                                Optional<FormTableCell> optionalFormTableCell =\n+                                    formTable.getCells().stream().filter(formTableCell ->\n+                                        formTableCell.getRowIndex() == finalI\n+                                            && formTableCell.getColumnIndex() == finalJ)\n+                                        .findFirst();\n+                                FormTableCell recognizedTableCell = optionalFormTableCell.get();\n+                                if (recognizedTableCell.isHeader()) {\n+                                    System.out.println(recognizedTableCell.getText());\n+                                } else {\n+                                    System.out.printf(\"%s || \", recognizedTableCell.getText());\n+                                }\n+                            }}\n+                    });\n+                })\n+            ));\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl} with options\n+     */\n+    public void beginRecognizeContentFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#String-Duration\n+        String sourceFilePath = \"{file_source_url}\";\n+        formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath, Duration.ofSeconds(5)).subscribe(\n+            trainingOperationResponse ->\n+                trainingOperationResponse.getFinalResult().subscribe(layoutPageResults ->\n+                    layoutPageResults.forEach(formPage -> {\n+                        System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                        System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                        // Table information\n+                        System.out.println(\"Recognized Tables: \");\n+                        formPage.getTables().forEach(formTable -> {\n+                            for (int i = 0; i < formTable.getRowCount(); i++) {\n+                                for (int j = 0; j < formTable.getColumnCount(); j++) {\n+                                    int finalJ = j;\n+                                    int finalI = i;\n+                                    Optional<FormTableCell> optionalFormTableCell =\n+                                        formTable.getCells().stream().filter(formTableCell ->\n+                                            formTableCell.getRowIndex() == finalI\n+                                                && formTableCell.getColumnIndex() == finalJ)\n+                                            .findFirst();\n+                                    FormTableCell recognizedTableCell = optionalFormTableCell.get();\n+                                    if (recognizedTableCell.isHeader()) {\n+                                        System.out.println(recognizedTableCell.getText());\n+                                    } else {\n+                                        System.out.printf(\"%s || \", recognizedTableCell.getText());\n+                                    }\n+                                }}\n+                        });\n+                    })\n+                ));\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#String-Duration\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContent}\n+     */\n+    public void beginRecognizeContent() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#Flux-long-FormContentType\n+        File sourceFile = new File(\"{file_source_url}\");\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeContent(buffer, sourceFile.length(), FormContentType.APPLICATION_PDF)\n+            .subscribe(trainingOperationResponse ->\n+                trainingOperationResponse.getFinalResult().subscribe(layoutPageResults ->\n+                    layoutPageResults.forEach(formPage -> {\n+                        System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                        System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                        // Table information\n+                        System.out.println(\"Recognized Tables: \");\n+                        formPage.getTables().forEach(formTable -> {\n+                            for (int i = 0; i < formTable.getRowCount(); i++) {\n+                                for (int j = 0; j < formTable.getColumnCount(); j++) {\n+                                    int finalJ = j;\n+                                    int finalI = i;\n+                                    Optional<FormTableCell> optionalFormTableCell =\n+                                        formTable.getCells().stream().filter(formTableCell ->\n+                                            formTableCell.getRowIndex() == finalI\n+                                                && formTableCell.getColumnIndex() == finalJ)\n+                                            .findFirst();\n+                                    FormTableCell recognizedTableCell = optionalFormTableCell.get();\n+                                    if (recognizedTableCell.isHeader()) {\n+                                        System.out.println(recognizedTableCell.getText());\n+                                    } else {\n+                                        System.out.printf(\"%s || \", recognizedTableCell.getText());\n+                                    }\n+                                }}\n+                        });\n+                    })\n+            ));\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#Flux-long-FormContentType\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContent} with options\n+     */\n+    public void beginRecognizeContentWithOptions() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#Flux-FormContentType-long-Duration\n+        File sourceFile = new File(\"{file_source_url}\");\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeContent(buffer, FormContentType.APPLICATION_PDF, sourceFile.length(),\n+            Duration.ofSeconds(5)).subscribe(trainingOperationResponse ->\n+                trainingOperationResponse.getFinalResult().subscribe(layoutPageResults ->\n+                    layoutPageResults.forEach(formPage -> {\n+                        System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                        System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                        // Table information\n+                        System.out.println(\"Recognized Tables: \");\n+                        formPage.getTables().forEach(formTable -> {\n+                            for (int i = 0; i < formTable.getRowCount(); i++) {\n+                                for (int j = 0; j < formTable.getColumnCount(); j++) {\n+                                    int finalJ = j;\n+                                    int finalI = i;\n+                                    Optional<FormTableCell> optionalFormTableCell =\n+                                        formTable.getCells().stream().filter(formTableCell ->\n+                                            formTableCell.getRowIndex() == finalI\n+                                                && formTableCell.getColumnIndex() == finalJ)\n+                                            .findFirst();\n+                                    FormTableCell recognizedTableCell = optionalFormTableCell.get();\n+                                    if (recognizedTableCell.isHeader()) {\n+                                        System.out.println(recognizedTableCell.getText());\n+                                    } else {\n+                                        System.out.printf(\"%s || \", recognizedTableCell.getText());\n+                                    }\n+                                }}\n+                        });\n+                    })\n+                ));\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#Flux-FormContentType-long-Duration\n+    }\n+\n+    // Recognize Receipts\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceiptsFromUrl}\n+     */\n+    public void beginRecognizeReceiptsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string\n+        String receiptUrl = \"{file_source_url}\";\n+        formRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(receiptUrl).subscribe(trainingOperationResponse -> {\n+            System.out.println(\"Polling completed successfully\");\n+            // training completed successfully, retrieving final result.\n+            trainingOperationResponse.getFinalResult().subscribe(recognizedReceipts ->\n+                recognizedReceipts.forEach(recognizedReceipt -> {\n+                    USReceipt usReceipt = ReceiptExtensions.asUSReceipt(recognizedReceipt);\n+                    System.out.printf(\"Page Number: %s%n\", usReceipt.getMerchantName().getPageNumber());\n+                    System.out.printf(\"Merchant Name %s%n\", usReceipt.getMerchantName().getName());\n+                    System.out.printf(\"Merchant Name Value: %s%n\", usReceipt.getMerchantName().getFieldValue());\n+                    System.out.printf(\"Merchant Address %s%n\", usReceipt.getMerchantAddress().getName());\n+                    System.out.printf(\"Merchant Address Value: %s%n\", usReceipt.getMerchantAddress().getFieldValue());\n+                    System.out.printf(\"Total: %s%n\", usReceipt.getTotal().getName());\n+                    System.out.printf(\"Total Value: %s%n\", usReceipt.getTotal().getFieldValue());\n+                }));\n+        });\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceiptsFromUrl} with options\n+     */\n+    public void beginRecognizeReceiptsFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string-boolean-Duration\n+        String receiptUrl = \"{file_source_url}\";\n+        formRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(receiptUrl, true, Duration.ofSeconds(5))\n+            .subscribe(trainingOperationResponse -> {\n+                System.out.println(\"Polling completed successfully\");\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedReceipts ->\n+                    recognizedReceipts.forEach(recognizedReceipt -> {\n+                        USReceipt usReceipt = ReceiptExtensions.asUSReceipt(recognizedReceipt);\n+                        System.out.printf(\"Page Number: %s%n\", usReceipt.getMerchantName().getPageNumber());\n+                        System.out.printf(\"Merchant Name %s%n\", usReceipt.getMerchantName().getName());\n+                        System.out.printf(\"Merchant Name Value: %s%n\", usReceipt.getMerchantName().getFieldValue());\n+                        System.out.printf(\"Merchant Address %s%n\", usReceipt.getMerchantAddress().getName());\n+                        System.out.printf(\"Merchant Address Value: %s%n\", usReceipt.getMerchantAddress().getFieldValue());\n+                        System.out.printf(\"Total: %s%n\", usReceipt.getTotal().getName());\n+                        System.out.printf(\"Total Value: %s%n\", usReceipt.getTotal().getFieldValue());\n+                    }));\n+            });\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string-boolean-Duration\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceipts}\n+     */\n+    public void beginRecognizeReceipts() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts#Flux-long-FormContentType\n+        File sourceFile = new File(\"{file_source_url}\");\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+        formRecognizerAsyncClient.beginRecognizeReceipts(buffer, sourceFile.length(), FormContentType.IMAGE_JPEG)\n+            .subscribe(trainingOperationResponse -> {\n+                System.out.println(\"Polling completed successfully\");\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(recognizedReceipts ->\n+                    recognizedReceipts.forEach(recognizedReceipt -> {\n+                        USReceipt usReceipt = ReceiptExtensions.asUSReceipt(recognizedReceipt);\n+                        System.out.printf(\"Page Number: %s%n\", usReceipt.getMerchantName().getPageNumber());\n+                        System.out.printf(\"Merchant Name %s%n\", usReceipt.getMerchantName().getName());\n+                        System.out.printf(\"Merchant Name Value: %s%n\", usReceipt.getMerchantName().getFieldValue());\n+                        System.out.printf(\"Merchant Address %s%n\", usReceipt.getMerchantAddress().getName());\n+                        System.out.printf(\"Merchant Address Value: %s%n\", usReceipt.getMerchantAddress().getFieldValue());\n+                        System.out.printf(\"Total: %s%n\", usReceipt.getTotal().getName());\n+                        System.out.printf(\"Total Value: %s%n\", usReceipt.getTotal().getFieldValue());\n+                    }));\n+            });\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts#Flux-long-FormContentType\n+\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceipts} with options\n+     */\n+    public void beginRecognizeReceiptsWithOptions() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts#Flux-long-FormContentType-boolean-Duration\n+        File sourceFile = new File(\"{file_source_url}\");\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+        formRecognizerAsyncClient.beginRecognizeReceipts(buffer, sourceFile.length(), FormContentType.IMAGE_JPEG, true,", "originalCommit": "410814d66bf47fef64a8e3f437caaabb87dac69d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\nindex 1f56e194e5a..5c8d73b0b44 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n\n@@ -233,7 +233,7 @@ public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n      * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl} with options\n      */\n     public void beginRecognizeContentFromUrlWithOptions() {\n-        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#String-Duration\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string-Duration\n         String sourceFilePath = \"{file_source_url}\";\n         formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath, Duration.ofSeconds(5)).subscribe(\n             trainingOperationResponse ->\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxODgzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409218836", "bodyText": "Can we reuse these code snippets for the Readme too rather than a duplicate ReadmeSamples.java?\nJust a thought.", "author": "samvaity", "createdAt": "2020-04-16T00:57:38Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,396 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.FormTableCell;\n+import com.azure.ai.formrecognizer.models.USReceipt;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.Optional;\n+\n+/**\n+ * Code snippet for {@link FormRecognizerClient}\n+ */\n+public class FormRecognizerClientJavaDocCodeSnippets {\n+    private FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder().buildClient();\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerClient}\n+     */\n+    public void createFormRecognizerClient() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.instantiation\n+        FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .buildClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerClient.instantiation\n+    }\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerClient} with pipeline\n+     */\n+    public void createFormRecognizerClientWithPipeline() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.pipeline.instantiation", "originalCommit": "410814d66bf47fef64a8e3f437caaabb87dac69d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5MzUzMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409993531", "bodyText": "Yes. It can.", "author": "mssfang", "createdAt": "2020-04-17T05:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxODgzNg=="}], "type": "inlineReview", "revised_code": {"commit": "1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java\nindex 48923cc9dca..15fac528e55 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java\n\n@@ -204,7 +204,7 @@ public class FormRecognizerClientJavaDocCodeSnippets {\n      * Code snippet for {@link FormRecognizerClient#beginRecognizeContentFromUrl} with options\n      */\n     public void beginRecognizeContentFromUrlWithOptions() {\n-        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl#String-Duration\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl#string-Duration\n         String sourceFilePath = \"{file_source_url}\";\n         formRecognizerClient.beginRecognizeContentFromUrl(sourceFilePath, Duration.ofSeconds(5)).getFinalResult()\n             .forEach(formPage -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxOTE4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409219186", "bodyText": "same as async comments.\nDon't need this, add confidence. use recognizedForm variable name.", "author": "samvaity", "createdAt": "2020-04-16T00:58:48Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,396 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.FormTableCell;\n+import com.azure.ai.formrecognizer.models.USReceipt;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.Optional;\n+\n+/**\n+ * Code snippet for {@link FormRecognizerClient}\n+ */\n+public class FormRecognizerClientJavaDocCodeSnippets {\n+    private FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder().buildClient();\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerClient}\n+     */\n+    public void createFormRecognizerClient() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.instantiation\n+        FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .buildClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerClient.instantiation\n+    }\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerClient} with pipeline\n+     */\n+    public void createFormRecognizerClientWithPipeline() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.pipeline.instantiation\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(/* add policies */)\n+            .build();\n+\n+        FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .pipeline(pipeline)\n+            .buildClient();\n+        // END:  com.azure.ai.formrecognizer.FormRecognizerClient.pipeline.instantiation\n+    }\n+\n+\n+    // Recognize Custom Form\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerClient#beginRecognizeCustomFormsFromUrl}\n+     */\n+    public void beginRecognizeCustomFormsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl#string-string\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).getFinalResult()\n+            .forEach(extractedForm -> {\n+                extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                    System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                    System.out.printf(\"Field text: %s%n\", fieldText);\n+                    System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                });\n+\n+                // Page Information\n+                extractedForm.getPages().forEach(formPage -> {", "originalCommit": "410814d66bf47fef64a8e3f437caaabb87dac69d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java\nindex 48923cc9dca..15fac528e55 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java\n\n@@ -204,7 +204,7 @@ public class FormRecognizerClientJavaDocCodeSnippets {\n      * Code snippet for {@link FormRecognizerClient#beginRecognizeContentFromUrl} with options\n      */\n     public void beginRecognizeContentFromUrlWithOptions() {\n-        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl#String-Duration\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl#string-Duration\n         String sourceFilePath = \"{file_source_url}\";\n         formRecognizerClient.beginRecognizeContentFromUrl(sourceFilePath, Duration.ofSeconds(5)).getFinalResult()\n             .forEach(formPage -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxOTYwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409219603", "bodyText": "In general, follow the same comments from Async and should be good for sync.", "author": "samvaity", "createdAt": "2020-04-16T01:00:23Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,396 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.FormTableCell;\n+import com.azure.ai.formrecognizer.models.USReceipt;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+import java.util.Optional;\n+\n+/**\n+ * Code snippet for {@link FormRecognizerClient}\n+ */\n+public class FormRecognizerClientJavaDocCodeSnippets {\n+    private FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder().buildClient();\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerClient}\n+     */\n+    public void createFormRecognizerClient() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.instantiation\n+        FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .buildClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerClient.instantiation\n+    }\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerClient} with pipeline\n+     */\n+    public void createFormRecognizerClientWithPipeline() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.pipeline.instantiation\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(/* add policies */)\n+            .build();\n+\n+        FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .pipeline(pipeline)\n+            .buildClient();\n+        // END:  com.azure.ai.formrecognizer.FormRecognizerClient.pipeline.instantiation\n+    }\n+\n+\n+    // Recognize Custom Form\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerClient#beginRecognizeCustomFormsFromUrl}\n+     */\n+    public void beginRecognizeCustomFormsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl#string-string\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).getFinalResult()\n+            .forEach(extractedForm -> {\n+                extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                    System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                    System.out.printf(\"Field text: %s%n\", fieldText);\n+                    System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                });\n+\n+                // Page Information\n+                extractedForm.getPages().forEach(formPage -> {\n+                    System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                    System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                    System.out.println();\n+                });\n+            });\n+        // END: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl#string-string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerClient#beginRecognizeCustomFormsFromUrl} with options\n+     */\n+    public void beginRecognizeCustomFormsFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl#string-string-boolean-Duration\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId, true,\n+            Duration.ofSeconds(5)).getFinalResult().forEach(extractedForm -> {\n+                extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                    System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                    System.out.printf(\"Field text: %s%n\", fieldText);\n+                    System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                });\n+\n+                // Page Information\n+                extractedForm.getPages().forEach(formPage -> {\n+                    System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                    System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                    System.out.println();\n+                });\n+            });\n+        // END: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl#string-string-boolean-Duration\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerClient#beginRecognizeCustomForms}\n+     */\n+    public void beginRecognizeCustomForms() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms#InputStream-string-long-FormContentType\n+        File sourceFile = new File(\"{file_source_url}\");\n+        String modelId = \"{model_id}\";\n+        byte[] fileContent = Files.readAllBytes(sourceFile.toPath());\n+        InputStream targetStream = new ByteArrayInputStream(fileContent);\n+\n+        formRecognizerClient.beginRecognizeCustomForms(targetStream, modelId, sourceFile.length(),\n+            FormContentType.IMAGE_JPEG).getFinalResult().forEach(extractedForm -> {\n+                extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                    System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                    System.out.printf(\"Field text: %s%n\", fieldText);\n+                    System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                });\n+\n+                // Page Information\n+                extractedForm.getPages().forEach(formPage -> {\n+                    System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                    System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                    System.out.println();\n+                });\n+            });\n+        // END: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms#InputStream-string-long-FormContentType\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerClient#beginRecognizeCustomForms} with options\n+     */\n+    public void beginRecognizeCustomFormsWithOptions() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms#InputStream-string-long-FormContentType-boolean-Duration\n+        File sourceFile = new File(\"{file_source_url}\");\n+        String modelId = \"{model_id}\";\n+        byte[] fileContent = Files.readAllBytes(sourceFile.toPath());\n+        InputStream targetStream = new ByteArrayInputStream(fileContent);\n+\n+        formRecognizerClient.beginRecognizeCustomForms(targetStream, modelId, sourceFile.length(),\n+            FormContentType.IMAGE_JPEG, true, Duration.ofSeconds(5)).getFinalResult()\n+                .forEach(extractedForm -> {\n+                    extractedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                        System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                        System.out.printf(\"Field text: %s%n\", fieldText);\n+                        System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                    });\n+\n+                    // Page Information\n+                    extractedForm.getPages().forEach(formPage -> {\n+                        System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                        System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                        System.out.println();\n+                    });\n+                });\n+        // END: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms#InputStream-string-long-FormContentType-boolean-Duration\n+    }\n+\n+    // Recognize Content\n+    /**\n+     * Code snippet for {@link FormRecognizerClient#beginRecognizeContentFromUrl}\n+     */\n+    public void beginRecognizeContentFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl#string\n+        String sourceFilePath = \"{file_source_url}\";\n+        formRecognizerClient.beginRecognizeContentFromUrl(sourceFilePath).getFinalResult()\n+            .forEach(formPage -> {\n+                System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n+                System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n+                // Table information\n+                System.out.println(\"Recognized Tables: \");\n+                formPage.getTables().forEach(formTable -> {\n+                    for (int i = 0; i < formTable.getRowCount(); i++) {\n+                        for (int j = 0; j < formTable.getColumnCount(); j++) {\n+                            int finalJ = j;\n+                            int finalI = i;", "originalCommit": "410814d66bf47fef64a8e3f437caaabb87dac69d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java\nindex 48923cc9dca..15fac528e55 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerClientJavaDocCodeSnippets.java\n\n@@ -204,7 +204,7 @@ public class FormRecognizerClientJavaDocCodeSnippets {\n      * Code snippet for {@link FormRecognizerClient#beginRecognizeContentFromUrl} with options\n      */\n     public void beginRecognizeContentFromUrlWithOptions() {\n-        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl#String-Duration\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl#string-Duration\n         String sourceFilePath = \"{file_source_url}\";\n         formRecognizerClient.beginRecognizeContentFromUrl(sourceFilePath, Duration.ofSeconds(5)).getFinalResult()\n             .forEach(formPage -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxOTg4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409219883", "bodyText": "\"Model Type Id: --> Form type:", "author": "samvaity", "createdAt": "2020-04-16T01:01:35Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,168 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.AccountProperties;\n+import com.azure.ai.formrecognizer.models.CustomFormModel;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Code snippet for {@link FormTrainingAsyncClient}\n+ */\n+public class FormTrainingAsyncClientJavaDocCodeSnippets {\n+    private FormTrainingAsyncClient formTrainingAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient()\n+        .getFormTrainingAsyncClient();\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient} initialization\n+     */\n+    public void formTrainingAsyncClientInInitialization() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.initialization\n+        FormTrainingAsyncClient formTrainingAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient()\n+            .getFormTrainingAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.initialization\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#beginTraining}\n+     */\n+    public void beginTraining() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean\n+        String trainingSetSource = \"{training-set-SAS-URL}\";\n+        formTrainingAsyncClient.beginTraining(trainingSetSource, true).subscribe(\n+            trainingOperationResponse -> {\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(customFormModel -> {\n+                    System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+                    System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+                    customFormModel.getSubModels().forEach(customFormSubModel ->\n+                        customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                            System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                                key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+                    });\n+            });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#beginTraining} with options\n+     */\n+    public void beginTrainingWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean-boolean-string-Duration\n+        String trainingSetSource = \"{training-set-SAS-URL}\";\n+        boolean isIncludeSubFolders = false; // {is-include-subfolders}\n+        String filePrefix = \"{file-prefix}\";\n+        formTrainingAsyncClient.beginTraining(trainingSetSource, true, isIncludeSubFolders, filePrefix,\n+            Duration.ofSeconds(5)).subscribe(trainingOperationResponse -> {\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(customFormModel -> {\n+                    System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+                    System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+                    customFormModel.getSubModels().forEach(customFormSubModel ->\n+                        customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                            System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                                key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+                });\n+            });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean-boolean-string-Duration\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getCustomModel}\n+     */\n+    public void getCustomModel() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModel#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.getCustomModel(modelId).subscribe(customFormModel -> {\n+            System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+            System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+            customFormModel.getSubModels().forEach(customFormSubModel ->\n+                customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                    System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                        key, customFormModelField.getName(), customFormModelField.getAccuracy())));", "originalCommit": "410814d66bf47fef64a8e3f437caaabb87dac69d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ2NzIyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r410467226", "bodyText": "remove Id from the form type.", "author": "samvaity", "createdAt": "2020-04-17T21:00:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxOTg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2NTcwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r411765707", "bodyText": "\"Form Type Id\" -> Form Type\nIt is not an Id", "author": "samvaity", "createdAt": "2020-04-20T23:41:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxOTg4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\nindex e220e7bdaee..f767a4f7937 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\n\n@@ -149,7 +149,7 @@ public class FormTrainingAsyncClientJavaDocCodeSnippets {\n         String modelId = \"{model_id}\";\n         formTrainingAsyncClient.deleteModelWithResponse(modelId).subscribe(val ->\n             System.out.printf(\"Model ID = %s is deleted%n\", modelId));\n-        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModelWithResponse#string-string\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModelWithResponse#string\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyMDExMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409220113", "bodyText": "\"Max number of models that can be trained for this account\"", "author": "samvaity", "createdAt": "2020-04-16T01:02:24Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,168 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.AccountProperties;\n+import com.azure.ai.formrecognizer.models.CustomFormModel;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Code snippet for {@link FormTrainingAsyncClient}\n+ */\n+public class FormTrainingAsyncClientJavaDocCodeSnippets {\n+    private FormTrainingAsyncClient formTrainingAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient()\n+        .getFormTrainingAsyncClient();\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient} initialization\n+     */\n+    public void formTrainingAsyncClientInInitialization() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.initialization\n+        FormTrainingAsyncClient formTrainingAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient()\n+            .getFormTrainingAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.initialization\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#beginTraining}\n+     */\n+    public void beginTraining() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean\n+        String trainingSetSource = \"{training-set-SAS-URL}\";\n+        formTrainingAsyncClient.beginTraining(trainingSetSource, true).subscribe(\n+            trainingOperationResponse -> {\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(customFormModel -> {\n+                    System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+                    System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+                    customFormModel.getSubModels().forEach(customFormSubModel ->\n+                        customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                            System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                                key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+                    });\n+            });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#beginTraining} with options\n+     */\n+    public void beginTrainingWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean-boolean-string-Duration\n+        String trainingSetSource = \"{training-set-SAS-URL}\";\n+        boolean isIncludeSubFolders = false; // {is-include-subfolders}\n+        String filePrefix = \"{file-prefix}\";\n+        formTrainingAsyncClient.beginTraining(trainingSetSource, true, isIncludeSubFolders, filePrefix,\n+            Duration.ofSeconds(5)).subscribe(trainingOperationResponse -> {\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(customFormModel -> {\n+                    System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+                    System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+                    customFormModel.getSubModels().forEach(customFormSubModel ->\n+                        customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                            System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                                key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+                });\n+            });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean-boolean-string-Duration\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getCustomModel}\n+     */\n+    public void getCustomModel() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModel#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.getCustomModel(modelId).subscribe(customFormModel -> {\n+            System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+            System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+            customFormModel.getSubModels().forEach(customFormSubModel ->\n+                customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                    System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                        key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModel#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getCustomModelWithResponse}\n+     */\n+    public void getCustomModelWithResponse() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModelWithResponse#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.getCustomModelWithResponse(modelId).subscribe(response -> {\n+            CustomFormModel customFormModel = response.getValue();\n+            System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+            System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+            customFormModel.getSubModels().forEach(customFormSubModel ->\n+                customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                    System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                        key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModelWithResponse#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getAccountProperties}\n+     */\n+    public void getAccountProperties() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getAccountProperties\n+        formTrainingAsyncClient.getAccountProperties().subscribe(accountProperties -> {\n+            System.out.printf(\"Account properties limit: %s%n\", accountProperties.getLimit());", "originalCommit": "410814d66bf47fef64a8e3f437caaabb87dac69d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\nindex e220e7bdaee..f767a4f7937 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\n\n@@ -149,7 +149,7 @@ public class FormTrainingAsyncClientJavaDocCodeSnippets {\n         String modelId = \"{model_id}\";\n         formTrainingAsyncClient.deleteModelWithResponse(modelId).subscribe(val ->\n             System.out.printf(\"Model ID = %s is deleted%n\", modelId));\n-        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModelWithResponse#string-string\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModelWithResponse#string\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyMDQ1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409220455", "bodyText": "Current count of trained custom models:", "author": "samvaity", "createdAt": "2020-04-16T01:03:42Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,168 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.AccountProperties;\n+import com.azure.ai.formrecognizer.models.CustomFormModel;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Code snippet for {@link FormTrainingAsyncClient}\n+ */\n+public class FormTrainingAsyncClientJavaDocCodeSnippets {\n+    private FormTrainingAsyncClient formTrainingAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient()\n+        .getFormTrainingAsyncClient();\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient} initialization\n+     */\n+    public void formTrainingAsyncClientInInitialization() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.initialization\n+        FormTrainingAsyncClient formTrainingAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient()\n+            .getFormTrainingAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.initialization\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#beginTraining}\n+     */\n+    public void beginTraining() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean\n+        String trainingSetSource = \"{training-set-SAS-URL}\";\n+        formTrainingAsyncClient.beginTraining(trainingSetSource, true).subscribe(\n+            trainingOperationResponse -> {\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(customFormModel -> {\n+                    System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+                    System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+                    customFormModel.getSubModels().forEach(customFormSubModel ->\n+                        customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                            System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                                key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+                    });\n+            });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#beginTraining} with options\n+     */\n+    public void beginTrainingWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean-boolean-string-Duration\n+        String trainingSetSource = \"{training-set-SAS-URL}\";\n+        boolean isIncludeSubFolders = false; // {is-include-subfolders}\n+        String filePrefix = \"{file-prefix}\";\n+        formTrainingAsyncClient.beginTraining(trainingSetSource, true, isIncludeSubFolders, filePrefix,\n+            Duration.ofSeconds(5)).subscribe(trainingOperationResponse -> {\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(customFormModel -> {\n+                    System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+                    System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+                    customFormModel.getSubModels().forEach(customFormSubModel ->\n+                        customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                            System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                                key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+                });\n+            });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean-boolean-string-Duration\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getCustomModel}\n+     */\n+    public void getCustomModel() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModel#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.getCustomModel(modelId).subscribe(customFormModel -> {\n+            System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+            System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+            customFormModel.getSubModels().forEach(customFormSubModel ->\n+                customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                    System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                        key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModel#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getCustomModelWithResponse}\n+     */\n+    public void getCustomModelWithResponse() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModelWithResponse#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.getCustomModelWithResponse(modelId).subscribe(response -> {\n+            CustomFormModel customFormModel = response.getValue();\n+            System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+            System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+            customFormModel.getSubModels().forEach(customFormSubModel ->\n+                customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                    System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                        key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModelWithResponse#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getAccountProperties}\n+     */\n+    public void getAccountProperties() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getAccountProperties\n+        formTrainingAsyncClient.getAccountProperties().subscribe(accountProperties -> {\n+            System.out.printf(\"Account properties limit: %s%n\", accountProperties.getLimit());\n+            System.out.printf(\"Account properties count: %d%n\", accountProperties.getCount());", "originalCommit": "410814d66bf47fef64a8e3f437caaabb87dac69d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\nindex e220e7bdaee..f767a4f7937 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\n\n@@ -149,7 +149,7 @@ public class FormTrainingAsyncClientJavaDocCodeSnippets {\n         String modelId = \"{model_id}\";\n         formTrainingAsyncClient.deleteModelWithResponse(modelId).subscribe(val ->\n             System.out.printf(\"Model ID = %s is deleted%n\", modelId));\n-        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModelWithResponse#string-string\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModelWithResponse#string\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyMDc3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409220775", "bodyText": "No need to subscribe on void.\njust update this to formTrainingAsyncClient.deleteModel(\"{modelId}\")", "author": "samvaity", "createdAt": "2020-04-16T01:04:51Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,168 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.AccountProperties;\n+import com.azure.ai.formrecognizer.models.CustomFormModel;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Code snippet for {@link FormTrainingAsyncClient}\n+ */\n+public class FormTrainingAsyncClientJavaDocCodeSnippets {\n+    private FormTrainingAsyncClient formTrainingAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient()\n+        .getFormTrainingAsyncClient();\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient} initialization\n+     */\n+    public void formTrainingAsyncClientInInitialization() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.initialization\n+        FormTrainingAsyncClient formTrainingAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient()\n+            .getFormTrainingAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.initialization\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#beginTraining}\n+     */\n+    public void beginTraining() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean\n+        String trainingSetSource = \"{training-set-SAS-URL}\";\n+        formTrainingAsyncClient.beginTraining(trainingSetSource, true).subscribe(\n+            trainingOperationResponse -> {\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(customFormModel -> {\n+                    System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+                    System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+                    customFormModel.getSubModels().forEach(customFormSubModel ->\n+                        customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                            System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                                key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+                    });\n+            });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#beginTraining} with options\n+     */\n+    public void beginTrainingWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean-boolean-string-Duration\n+        String trainingSetSource = \"{training-set-SAS-URL}\";\n+        boolean isIncludeSubFolders = false; // {is-include-subfolders}\n+        String filePrefix = \"{file-prefix}\";\n+        formTrainingAsyncClient.beginTraining(trainingSetSource, true, isIncludeSubFolders, filePrefix,\n+            Duration.ofSeconds(5)).subscribe(trainingOperationResponse -> {\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(customFormModel -> {\n+                    System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+                    System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+                    customFormModel.getSubModels().forEach(customFormSubModel ->\n+                        customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                            System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                                key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+                });\n+            });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean-boolean-string-Duration\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getCustomModel}\n+     */\n+    public void getCustomModel() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModel#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.getCustomModel(modelId).subscribe(customFormModel -> {\n+            System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+            System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+            customFormModel.getSubModels().forEach(customFormSubModel ->\n+                customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                    System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                        key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModel#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getCustomModelWithResponse}\n+     */\n+    public void getCustomModelWithResponse() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModelWithResponse#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.getCustomModelWithResponse(modelId).subscribe(response -> {\n+            CustomFormModel customFormModel = response.getValue();\n+            System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+            System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+            customFormModel.getSubModels().forEach(customFormSubModel ->\n+                customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                    System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                        key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModelWithResponse#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getAccountProperties}\n+     */\n+    public void getAccountProperties() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getAccountProperties\n+        formTrainingAsyncClient.getAccountProperties().subscribe(accountProperties -> {\n+            System.out.printf(\"Account properties limit: %s%n\", accountProperties.getLimit());\n+            System.out.printf(\"Account properties count: %d%n\", accountProperties.getCount());\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getAccountProperties\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getAccountPropertiesWithResponse}\n+     */\n+    public void getAccountPropertiesWithResponse() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getAccountPropertiesWithResponse\n+        formTrainingAsyncClient.getAccountPropertiesWithResponse().subscribe(response -> {\n+            AccountProperties accountProperties = response.getValue();\n+            System.out.printf(\"Account properties limit: %s%n\", accountProperties.getLimit());\n+            System.out.printf(\"Account properties count: %d%n\", accountProperties.getCount());\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getAccountPropertiesWithResponse\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#deleteModel}\n+     */\n+    public void deleteModel() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModel#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.deleteModel(modelId).subscribe(val ->\n+            System.out.printf(\"Model ID = %s is deleted%n\", modelId));", "originalCommit": "410814d66bf47fef64a8e3f437caaabb87dac69d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5NjEwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409996104", "bodyText": "FYI, when app config do deletion, like deleting a configuration, we do return object to user.\ndoes method call trigger if without subscribe?", "author": "mssfang", "createdAt": "2020-04-17T05:12:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyMDc3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\nindex e220e7bdaee..f767a4f7937 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\n\n@@ -149,7 +149,7 @@ public class FormTrainingAsyncClientJavaDocCodeSnippets {\n         String modelId = \"{model_id}\";\n         formTrainingAsyncClient.deleteModelWithResponse(modelId).subscribe(val ->\n             System.out.printf(\"Model ID = %s is deleted%n\", modelId));\n-        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModelWithResponse#string-string\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModelWithResponse#string\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyMDk2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409220962", "bodyText": "subscribe and print the response status", "author": "samvaity", "createdAt": "2020-04-16T01:05:35Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,168 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.AccountProperties;\n+import com.azure.ai.formrecognizer.models.CustomFormModel;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Code snippet for {@link FormTrainingAsyncClient}\n+ */\n+public class FormTrainingAsyncClientJavaDocCodeSnippets {\n+    private FormTrainingAsyncClient formTrainingAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient()\n+        .getFormTrainingAsyncClient();\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient} initialization\n+     */\n+    public void formTrainingAsyncClientInInitialization() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.initialization\n+        FormTrainingAsyncClient formTrainingAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient()\n+            .getFormTrainingAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.initialization\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#beginTraining}\n+     */\n+    public void beginTraining() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean\n+        String trainingSetSource = \"{training-set-SAS-URL}\";\n+        formTrainingAsyncClient.beginTraining(trainingSetSource, true).subscribe(\n+            trainingOperationResponse -> {\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(customFormModel -> {\n+                    System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+                    System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+                    customFormModel.getSubModels().forEach(customFormSubModel ->\n+                        customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                            System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                                key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+                    });\n+            });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#beginTraining} with options\n+     */\n+    public void beginTrainingWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean-boolean-string-Duration\n+        String trainingSetSource = \"{training-set-SAS-URL}\";\n+        boolean isIncludeSubFolders = false; // {is-include-subfolders}\n+        String filePrefix = \"{file-prefix}\";\n+        formTrainingAsyncClient.beginTraining(trainingSetSource, true, isIncludeSubFolders, filePrefix,\n+            Duration.ofSeconds(5)).subscribe(trainingOperationResponse -> {\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(customFormModel -> {\n+                    System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+                    System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+                    customFormModel.getSubModels().forEach(customFormSubModel ->\n+                        customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                            System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                                key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+                });\n+            });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean-boolean-string-Duration\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getCustomModel}\n+     */\n+    public void getCustomModel() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModel#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.getCustomModel(modelId).subscribe(customFormModel -> {\n+            System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+            System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+            customFormModel.getSubModels().forEach(customFormSubModel ->\n+                customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                    System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                        key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModel#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getCustomModelWithResponse}\n+     */\n+    public void getCustomModelWithResponse() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModelWithResponse#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.getCustomModelWithResponse(modelId).subscribe(response -> {\n+            CustomFormModel customFormModel = response.getValue();\n+            System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+            System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+            customFormModel.getSubModels().forEach(customFormSubModel ->\n+                customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                    System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                        key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModelWithResponse#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getAccountProperties}\n+     */\n+    public void getAccountProperties() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getAccountProperties\n+        formTrainingAsyncClient.getAccountProperties().subscribe(accountProperties -> {\n+            System.out.printf(\"Account properties limit: %s%n\", accountProperties.getLimit());\n+            System.out.printf(\"Account properties count: %d%n\", accountProperties.getCount());\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getAccountProperties\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getAccountPropertiesWithResponse}\n+     */\n+    public void getAccountPropertiesWithResponse() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getAccountPropertiesWithResponse\n+        formTrainingAsyncClient.getAccountPropertiesWithResponse().subscribe(response -> {\n+            AccountProperties accountProperties = response.getValue();\n+            System.out.printf(\"Account properties limit: %s%n\", accountProperties.getLimit());\n+            System.out.printf(\"Account properties count: %d%n\", accountProperties.getCount());\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getAccountPropertiesWithResponse\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#deleteModel}\n+     */\n+    public void deleteModel() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModel#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.deleteModel(modelId).subscribe(val ->\n+            System.out.printf(\"Model ID = %s is deleted%n\", modelId));\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModel#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#deleteModelWithResponse}\n+     */\n+    public void deleteModelWithResponse() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModelWithResponse#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.deleteModelWithResponse(modelId).subscribe(val ->\n+            System.out.printf(\"Model ID = %s is deleted%n\", modelId));", "originalCommit": "410814d66bf47fef64a8e3f437caaabb87dac69d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\nindex e220e7bdaee..f767a4f7937 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\n\n@@ -149,7 +149,7 @@ public class FormTrainingAsyncClientJavaDocCodeSnippets {\n         String modelId = \"{model_id}\";\n         formTrainingAsyncClient.deleteModelWithResponse(modelId).subscribe(val ->\n             System.out.printf(\"Model ID = %s is deleted%n\", modelId));\n-        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModelWithResponse#string-string\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModelWithResponse#string\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyMTExOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409221119", "bodyText": "ID --> Id\nuse : instead of =, just to be consistent with other snippets.", "author": "samvaity", "createdAt": "2020-04-16T01:06:07Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,168 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.AccountProperties;\n+import com.azure.ai.formrecognizer.models.CustomFormModel;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Code snippet for {@link FormTrainingAsyncClient}\n+ */\n+public class FormTrainingAsyncClientJavaDocCodeSnippets {\n+    private FormTrainingAsyncClient formTrainingAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient()\n+        .getFormTrainingAsyncClient();\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient} initialization\n+     */\n+    public void formTrainingAsyncClientInInitialization() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.initialization\n+        FormTrainingAsyncClient formTrainingAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient()\n+            .getFormTrainingAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.initialization\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#beginTraining}\n+     */\n+    public void beginTraining() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean\n+        String trainingSetSource = \"{training-set-SAS-URL}\";\n+        formTrainingAsyncClient.beginTraining(trainingSetSource, true).subscribe(\n+            trainingOperationResponse -> {\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(customFormModel -> {\n+                    System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+                    System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+                    customFormModel.getSubModels().forEach(customFormSubModel ->\n+                        customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                            System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                                key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+                    });\n+            });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#beginTraining} with options\n+     */\n+    public void beginTrainingWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean-boolean-string-Duration\n+        String trainingSetSource = \"{training-set-SAS-URL}\";\n+        boolean isIncludeSubFolders = false; // {is-include-subfolders}\n+        String filePrefix = \"{file-prefix}\";\n+        formTrainingAsyncClient.beginTraining(trainingSetSource, true, isIncludeSubFolders, filePrefix,\n+            Duration.ofSeconds(5)).subscribe(trainingOperationResponse -> {\n+                // training completed successfully, retrieving final result.\n+                trainingOperationResponse.getFinalResult().subscribe(customFormModel -> {\n+                    System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+                    System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+                    customFormModel.getSubModels().forEach(customFormSubModel ->\n+                        customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                            System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                                key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+                });\n+            });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean-boolean-string-Duration\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getCustomModel}\n+     */\n+    public void getCustomModel() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModel#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.getCustomModel(modelId).subscribe(customFormModel -> {\n+            System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+            System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+            customFormModel.getSubModels().forEach(customFormSubModel ->\n+                customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                    System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                        key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModel#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getCustomModelWithResponse}\n+     */\n+    public void getCustomModelWithResponse() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModelWithResponse#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.getCustomModelWithResponse(modelId).subscribe(response -> {\n+            CustomFormModel customFormModel = response.getValue();\n+            System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+            System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+            customFormModel.getSubModels().forEach(customFormSubModel ->\n+                customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                    System.out.printf(\"Model Type Id: %s Field Text: %s Field Accuracy: %s%n\",\n+                        key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModelWithResponse#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getAccountProperties}\n+     */\n+    public void getAccountProperties() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getAccountProperties\n+        formTrainingAsyncClient.getAccountProperties().subscribe(accountProperties -> {\n+            System.out.printf(\"Account properties limit: %s%n\", accountProperties.getLimit());\n+            System.out.printf(\"Account properties count: %d%n\", accountProperties.getCount());\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getAccountProperties\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getAccountPropertiesWithResponse}\n+     */\n+    public void getAccountPropertiesWithResponse() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getAccountPropertiesWithResponse\n+        formTrainingAsyncClient.getAccountPropertiesWithResponse().subscribe(response -> {\n+            AccountProperties accountProperties = response.getValue();\n+            System.out.printf(\"Account properties limit: %s%n\", accountProperties.getLimit());\n+            System.out.printf(\"Account properties count: %d%n\", accountProperties.getCount());\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getAccountPropertiesWithResponse\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#deleteModel}\n+     */\n+    public void deleteModel() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModel#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.deleteModel(modelId).subscribe(val ->\n+            System.out.printf(\"Model ID = %s is deleted%n\", modelId));\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModel#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#deleteModelWithResponse}\n+     */\n+    public void deleteModelWithResponse() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModelWithResponse#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.deleteModelWithResponse(modelId).subscribe(val ->\n+            System.out.printf(\"Model ID = %s is deleted%n\", modelId));\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModelWithResponse#string-string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#listModels}\n+     */\n+    public void listModels() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.listModels\n+        formTrainingAsyncClient.listModels().subscribe(result ->\n+            System.out.printf(\"Model ID = %s, model status = %s, created on = %s, last updated on = %s.%n\",", "originalCommit": "410814d66bf47fef64a8e3f437caaabb87dac69d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\nindex e220e7bdaee..f767a4f7937 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\n\n@@ -149,7 +149,7 @@ public class FormTrainingAsyncClientJavaDocCodeSnippets {\n         String modelId = \"{model_id}\";\n         formTrainingAsyncClient.deleteModelWithResponse(modelId).subscribe(val ->\n             System.out.printf(\"Model ID = %s is deleted%n\", modelId));\n-        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModelWithResponse#string-string\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModelWithResponse#string\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyMTM2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r409221360", "bodyText": "Similar updates as Async client", "author": "samvaity", "createdAt": "2020-04-16T01:06:53Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,173 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.AccountProperties;\n+import com.azure.ai.formrecognizer.models.CustomFormModel;\n+import com.azure.core.util.Context;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Code snippet for {@link FormTrainingClient}\n+ */\n+public class FormTrainingClientJavaDocCodeSnippets {\n+    private FormTrainingClient formTrainingClient = new FormRecognizerClientBuilder().buildClient()\n+        .getFormTrainingClient();\n+\n+    /**\n+     * Code snippet for {@link FormTrainingClient} initialization\n+     */\n+    public void formTrainingClientInInitialization() {", "originalCommit": "410814d66bf47fef64a8e3f437caaabb87dac69d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAwMTgyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r410001829", "bodyText": "Not sure about this. Can you give more info?", "author": "mssfang", "createdAt": "2020-04-17T05:36:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyMTM2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ2NzU3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r410467573", "bodyText": "I meant to say follow the same comments as given in Async client file for this file changes.", "author": "samvaity", "createdAt": "2020-04-17T21:00:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyMTM2MA=="}], "type": "inlineReview", "revised_code": {"commit": "eec49a342b6af1a0802b18a38520c9d1cfc5ccc7", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingClientJavaDocCodeSnippets.java\nindex cb951600446..00e9ecebb03 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingClientJavaDocCodeSnippets.java\n\n@@ -5,6 +5,7 @@ package com.azure.ai.formrecognizer;\n \n import com.azure.ai.formrecognizer.models.AccountProperties;\n import com.azure.ai.formrecognizer.models.CustomFormModel;\n+import com.azure.core.http.rest.Response;\n import com.azure.core.util.Context;\n \n import java.time.Duration;\n"}}, {"oid": "1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1e49e02c983fb7c06779a3b25ce571a0fdf283cf", "message": "resolved conflict", "committedDate": "2020-04-17T03:58:45Z", "type": "commit"}, {"oid": "eec49a342b6af1a0802b18a38520c9d1cfc5ccc7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/eec49a342b6af1a0802b18a38520c9d1cfc5ccc7", "message": "address feedbacks", "committedDate": "2020-04-17T05:35:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2MzAwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r411763009", "bodyText": "extra * at the end of the line.", "author": "samvaity", "createdAt": "2020-04-20T23:34:22Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -161,6 +173,9 @@ public FormRecognizerServiceVersion getServiceVersion() {\n      * <p>The service does not support cancellation of the long running operation and returns with an\n      * error message indicating absence of cancellation support.</p>\n      *\n+     * <p><strong>Code sample</strong></p>*", "originalCommit": "eec49a342b6af1a0802b18a38520c9d1cfc5ccc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c06f5f17911a68ddb18e9063b27f50164e42e040", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\nindex 4db74cb1936..55af1f2dd92 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\n\n@@ -173,7 +173,7 @@ public final class FormRecognizerAsyncClient {\n      * <p>The service does not support cancellation of the long running operation and returns with an\n      * error message indicating absence of cancellation support.</p>\n      *\n-     * <p><strong>Code sample</strong></p>*\n+     * <p><strong>Code sample</strong></p>\n      * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType-boolean-Duration}\n      *\n      * @param data The data of the document to be extract receipt information from.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2MzA0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r411763046", "bodyText": "extra * at the end of the line.", "author": "samvaity", "createdAt": "2020-04-20T23:34:27Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -191,6 +206,9 @@ public FormRecognizerServiceVersion getServiceVersion() {\n      * <p>The service does not support cancellation of the long running operation and returns with an\n      * error message indicating absence of cancellation support.</p>\n      *\n+     * <p><strong>Code sample</strong></p>*", "originalCommit": "eec49a342b6af1a0802b18a38520c9d1cfc5ccc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c06f5f17911a68ddb18e9063b27f50164e42e040", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\nindex 4db74cb1936..55af1f2dd92 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\n\n@@ -206,7 +206,7 @@ public final class FormRecognizerAsyncClient {\n      * <p>The service does not support cancellation of the long running operation and returns with an\n      * error message indicating absence of cancellation support.</p>\n      *\n-     * <p><strong>Code sample</strong></p>*\n+     * <p><strong>Code sample</strong></p>\n      * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string}\n      *\n      * @param fileSourceUrl The source URL to the input document. Size of the file must be less than 50 MB.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2MzA5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r411763090", "bodyText": "extra * at the end of the line.", "author": "samvaity", "createdAt": "2020-04-20T23:34:35Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -207,6 +225,9 @@ public FormRecognizerServiceVersion getServiceVersion() {\n      * <p>The service does not support cancellation of the long running operation and returns with an\n      * error message indicating absence of cancellation support.</p>\n      *\n+     * <p><strong>Code sample</strong></p>*", "originalCommit": "eec49a342b6af1a0802b18a38520c9d1cfc5ccc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2MzQwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r411763409", "bodyText": "and rest of the file.", "author": "samvaity", "createdAt": "2020-04-20T23:35:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2MzA5MA=="}], "type": "inlineReview", "revised_code": {"commit": "c06f5f17911a68ddb18e9063b27f50164e42e040", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\nindex 4db74cb1936..55af1f2dd92 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\n\n@@ -225,7 +225,7 @@ public final class FormRecognizerAsyncClient {\n      * <p>The service does not support cancellation of the long running operation and returns with an\n      * error message indicating absence of cancellation support.</p>\n      *\n-     * <p><strong>Code sample</strong></p>*\n+     * <p><strong>Code sample</strong></p>\n      * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string-Duration}\n      *\n      * @param sourceUrl The source URL to the input document. Size of the file must be less than 50 MB.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2MzgzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r411763832", "bodyText": "trainingPollOperationResponse -> recognizePollingOperation.", "author": "samvaity", "createdAt": "2020-04-20T23:36:31Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,375 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.USReceipt;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+\n+/**\n+ * Code snippet for {@link FormRecognizerAsyncClient}\n+ */\n+public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n+    FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient();\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient}\n+     */\n+    public void createFormRecognizerAsyncClient() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+    }\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient} with pipeline\n+     */\n+    public void createFormRecognizerAsyncClientWithPipeline() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(/* add policies */)\n+            .build();\n+\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .pipeline(pipeline)\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+    }\n+\n+    // Recognize Custom Form\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl}\n+     */\n+    public void beginRecognizeCustomFormsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).subscribe(\n+            trainingPollOperationResponse ->", "originalCommit": "eec49a342b6af1a0802b18a38520c9d1cfc5ccc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2Mzk0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r411763940", "bodyText": "everywhere applicable.", "author": "samvaity", "createdAt": "2020-04-20T23:36:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2MzgzMg=="}], "type": "inlineReview", "revised_code": {"commit": "c06f5f17911a68ddb18e9063b27f50164e42e040", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\nindex b95350458ad..bcabddbcb85 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n\n@@ -64,15 +64,15 @@ public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n         String modelId = \"{model_id}\";\n \n         formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).subscribe(\n-            trainingPollOperationResponse ->\n+            recognizePollingOperation ->\n                 // if training polling operation completed, retrieve the final result.\n-                trainingPollOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                recognizePollingOperation.getFinalResult().subscribe(recognizedForms ->\n                     recognizedForms.forEach(recognizedForm -> {\n                         recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n                             System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n                             System.out.printf(\"Field text: %s%n\", fieldText);\n                             System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n-                            System.out.printf(\"Confidence score: %s%n\", fieldValue.getConfidence());\n+                            System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n                         });\n                     })\n                 )\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2NDE2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r411764165", "bodyText": "remove || from all content print statements.", "author": "samvaity", "createdAt": "2020-04-20T23:37:31Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,375 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.USReceipt;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+\n+/**\n+ * Code snippet for {@link FormRecognizerAsyncClient}\n+ */\n+public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n+    FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient();\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient}\n+     */\n+    public void createFormRecognizerAsyncClient() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+    }\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient} with pipeline\n+     */\n+    public void createFormRecognizerAsyncClientWithPipeline() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(/* add policies */)\n+            .build();\n+\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .pipeline(pipeline)\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+    }\n+\n+    // Recognize Custom Form\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl}\n+     */\n+    public void beginRecognizeCustomFormsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).subscribe(\n+            trainingPollOperationResponse ->\n+                // if training polling operation completed, retrieve the final result.\n+                trainingPollOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(recognizedForm -> {\n+                        recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                            System.out.printf(\"Confidence score: %s%n\", fieldValue.getConfidence());\n+                        });\n+                    })\n+                )\n+        );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl} with options\n+     */\n+    public void beginRecognizeCustomFormsFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string-boolean-Duration\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+        boolean includeTextDetails = true;\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId, includeTextDetails,\n+            Duration.ofSeconds(5)).subscribe(trainingPollOperationResponse ->\n+                // if training polling operation completed, retrieve the final result.\n+                trainingPollOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(recognizedForm -> {\n+                        recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                            System.out.printf(\"Confidence score: %s%n\", fieldValue.getConfidence());\n+                        });\n+                    })\n+                )\n+        );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string-boolean-Duration\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomForms}\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public void beginRecognizeCustomForms() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType\n+        File sourceFile = new File(\"{file_source_url}\");\n+        String modelId = \"{model_id}\";\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomForms(buffer, modelId, sourceFile.length(),\n+            FormContentType.IMAGE_JPEG).subscribe(trainingPollOperationResponse ->\n+                // if training polling operation completed, retrieve the final result.\n+                trainingPollOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(recognizedForm -> {\n+                        recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                            System.out.printf(\"Confidence score: %s%n\", fieldValue.getConfidence());\n+                        });\n+                    })\n+                )\n+        );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomForms} with options\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public void beginRecognizeCustomFormsWithOptions() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType-boolean-Duration\n+        File sourceFile = new File(\"{file_source_url}\");\n+        String modelId = \"{model_id}\";\n+        boolean includeTextDetails = true;\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomForms(buffer, modelId, sourceFile.length(),\n+            FormContentType.IMAGE_JPEG, includeTextDetails, Duration.ofSeconds(5))\n+            .subscribe(trainingPollOperationResponse ->\n+                // if training polling operation completed, retrieve the final result.\n+                trainingPollOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(recognizedForm -> {\n+                        recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                            System.out.printf(\"Confidence score: %s%n\", fieldValue.getConfidence());\n+                        });\n+                    })\n+                )\n+            );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType-boolean-Duration\n+    }\n+\n+    // Recognize Content\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl}\n+     */\n+    public void beginRecognizeContentFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string\n+        String sourceFilePath = \"{file_source_url}\";\n+        formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath).subscribe(\n+            trainingPollOperationResponse ->\n+                trainingPollOperationResponse.getFinalResult().subscribe(layoutPageResults ->\n+                    layoutPageResults.forEach(recognizedForm -> {\n+                        System.out.printf(\"Page Angle: %s%n\", recognizedForm.getTextAngle());\n+                        System.out.printf(\"Page Dimension unit: %s%n\", recognizedForm.getUnit());\n+                        // Table information\n+                        System.out.println(\"Recognized Tables: \");\n+                        recognizedForm.getTables().forEach(formTable ->\n+                            formTable.getCells().forEach(recognizedTableCell ->\n+                                System.out.printf(\"%s || \", recognizedTableCell.getText())));", "originalCommit": "eec49a342b6af1a0802b18a38520c9d1cfc5ccc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c06f5f17911a68ddb18e9063b27f50164e42e040", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\nindex b95350458ad..bcabddbcb85 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n\n@@ -64,15 +64,15 @@ public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n         String modelId = \"{model_id}\";\n \n         formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).subscribe(\n-            trainingPollOperationResponse ->\n+            recognizePollingOperation ->\n                 // if training polling operation completed, retrieve the final result.\n-                trainingPollOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                recognizePollingOperation.getFinalResult().subscribe(recognizedForms ->\n                     recognizedForms.forEach(recognizedForm -> {\n                         recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n                             System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n                             System.out.printf(\"Field text: %s%n\", fieldText);\n                             System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n-                            System.out.printf(\"Confidence score: %s%n\", fieldValue.getConfidence());\n+                            System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n                         });\n                     })\n                 )\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2NDUzMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r411764531", "bodyText": "delete these value lines.\nand just update the above line to\n\nSystem.out.printf(\"Merchant Name: %s%n\", usReceipt.getMerchantName().getFieldValue());", "author": "samvaity", "createdAt": "2020-04-20T23:38:31Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,375 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.USReceipt;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+\n+/**\n+ * Code snippet for {@link FormRecognizerAsyncClient}\n+ */\n+public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n+    FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient();\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient}\n+     */\n+    public void createFormRecognizerAsyncClient() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+    }\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient} with pipeline\n+     */\n+    public void createFormRecognizerAsyncClientWithPipeline() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(/* add policies */)\n+            .build();\n+\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .pipeline(pipeline)\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+    }\n+\n+    // Recognize Custom Form\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl}\n+     */\n+    public void beginRecognizeCustomFormsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).subscribe(\n+            trainingPollOperationResponse ->\n+                // if training polling operation completed, retrieve the final result.\n+                trainingPollOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(recognizedForm -> {\n+                        recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                            System.out.printf(\"Confidence score: %s%n\", fieldValue.getConfidence());\n+                        });\n+                    })\n+                )\n+        );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl} with options\n+     */\n+    public void beginRecognizeCustomFormsFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string-boolean-Duration\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+        boolean includeTextDetails = true;\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId, includeTextDetails,\n+            Duration.ofSeconds(5)).subscribe(trainingPollOperationResponse ->\n+                // if training polling operation completed, retrieve the final result.\n+                trainingPollOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(recognizedForm -> {\n+                        recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                            System.out.printf(\"Confidence score: %s%n\", fieldValue.getConfidence());\n+                        });\n+                    })\n+                )\n+        );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string-boolean-Duration\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomForms}\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public void beginRecognizeCustomForms() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType\n+        File sourceFile = new File(\"{file_source_url}\");\n+        String modelId = \"{model_id}\";\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomForms(buffer, modelId, sourceFile.length(),\n+            FormContentType.IMAGE_JPEG).subscribe(trainingPollOperationResponse ->\n+                // if training polling operation completed, retrieve the final result.\n+                trainingPollOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(recognizedForm -> {\n+                        recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                            System.out.printf(\"Confidence score: %s%n\", fieldValue.getConfidence());\n+                        });\n+                    })\n+                )\n+        );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomForms} with options\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public void beginRecognizeCustomFormsWithOptions() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType-boolean-Duration\n+        File sourceFile = new File(\"{file_source_url}\");\n+        String modelId = \"{model_id}\";\n+        boolean includeTextDetails = true;\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomForms(buffer, modelId, sourceFile.length(),\n+            FormContentType.IMAGE_JPEG, includeTextDetails, Duration.ofSeconds(5))\n+            .subscribe(trainingPollOperationResponse ->\n+                // if training polling operation completed, retrieve the final result.\n+                trainingPollOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(recognizedForm -> {\n+                        recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                            System.out.printf(\"Confidence score: %s%n\", fieldValue.getConfidence());\n+                        });\n+                    })\n+                )\n+            );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType-boolean-Duration\n+    }\n+\n+    // Recognize Content\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl}\n+     */\n+    public void beginRecognizeContentFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string\n+        String sourceFilePath = \"{file_source_url}\";\n+        formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath).subscribe(\n+            trainingPollOperationResponse ->\n+                trainingPollOperationResponse.getFinalResult().subscribe(layoutPageResults ->\n+                    layoutPageResults.forEach(recognizedForm -> {\n+                        System.out.printf(\"Page Angle: %s%n\", recognizedForm.getTextAngle());\n+                        System.out.printf(\"Page Dimension unit: %s%n\", recognizedForm.getUnit());\n+                        // Table information\n+                        System.out.println(\"Recognized Tables: \");\n+                        recognizedForm.getTables().forEach(formTable ->\n+                            formTable.getCells().forEach(recognizedTableCell ->\n+                                System.out.printf(\"%s || \", recognizedTableCell.getText())));\n+                    })\n+                ));\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl} with options\n+     */\n+    public void beginRecognizeContentFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string-Duration\n+        String sourceFilePath = \"{file_source_url}\";\n+        formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath, Duration.ofSeconds(5)).subscribe(\n+            trainingPollOperationResponse ->\n+                trainingPollOperationResponse.getFinalResult().subscribe(layoutPageResults ->\n+                    layoutPageResults.forEach(recognizedForm -> {\n+                        System.out.printf(\"Page Angle: %s%n\", recognizedForm.getTextAngle());\n+                        System.out.printf(\"Page Dimension unit: %s%n\", recognizedForm.getUnit());\n+                        // Table information\n+                        System.out.println(\"Recognized Tables: \");\n+                        recognizedForm.getTables().forEach(formTable ->\n+                            formTable.getCells().forEach(recognizedTableCell ->\n+                                System.out.printf(\"%s || \", recognizedTableCell.getText())));\n+                    })\n+                ));\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string-Duration\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContent}\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public void beginRecognizeContent() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#Flux-long-FormContentType\n+        File sourceFile = new File(\"{file_source_url}\");\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeContent(buffer, sourceFile.length(), FormContentType.APPLICATION_PDF)\n+            .subscribe(trainingPollOperationResponse ->\n+                trainingPollOperationResponse.getFinalResult().subscribe(layoutPageResults ->\n+                    layoutPageResults.forEach(recognizedForm -> {\n+                        System.out.printf(\"Page Angle: %s%n\", recognizedForm.getTextAngle());\n+                        System.out.printf(\"Page Dimension unit: %s%n\", recognizedForm.getUnit());\n+                        // Table information\n+                        System.out.println(\"Recognized Tables: \");\n+                        recognizedForm.getTables().forEach(formTable ->\n+                            formTable.getCells().forEach(recognizedTableCell ->\n+                                System.out.printf(\"%s || \", recognizedTableCell.getText())));\n+                    })\n+            ));\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#Flux-long-FormContentType\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContent} with options\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public void beginRecognizeContentWithOptions() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#Flux-FormContentType-long-Duration\n+        File sourceFile = new File(\"{file_source_url}\");\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeContent(buffer, FormContentType.APPLICATION_PDF, sourceFile.length(),\n+            Duration.ofSeconds(5)).subscribe(trainingPollOperationResponse ->\n+                trainingPollOperationResponse.getFinalResult().subscribe(layoutPageResults ->\n+                    layoutPageResults.forEach(recognizedForm -> {\n+                        System.out.printf(\"Page Angle: %s%n\", recognizedForm.getTextAngle());\n+                        System.out.printf(\"Page Dimension unit: %s%n\", recognizedForm.getUnit());\n+                        // Table information\n+                        System.out.println(\"Recognized Tables: \");\n+                        recognizedForm.getTables().forEach(formTable ->\n+                            formTable.getCells().forEach(recognizedTableCell ->\n+                                System.out.printf(\"%s || \", recognizedTableCell.getText())));\n+                    })\n+                ));\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#Flux-FormContentType-long-Duration\n+    }\n+\n+    // Recognize Receipts\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceiptsFromUrl}\n+     */\n+    public void beginRecognizeReceiptsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string\n+        String receiptUrl = \"{file_source_url}\";\n+        formRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(receiptUrl).subscribe(trainingPollOperationResponse -> {\n+            // if training polling operation completed, retrieve the final result.\n+            trainingPollOperationResponse.getFinalResult().subscribe(recognizedReceipts ->\n+                recognizedReceipts.forEach(recognizedReceipt -> {\n+                    USReceipt usReceipt = ReceiptExtensions.asUSReceipt(recognizedReceipt);\n+                    System.out.printf(\"Page Number: %s%n\", usReceipt.getMerchantName().getPageNumber());\n+                    System.out.printf(\"Merchant Name %s%n\", usReceipt.getMerchantName().getName());\n+                    System.out.printf(\"Merchant Name Value: %s%n\", usReceipt.getMerchantName().getFieldValue());", "originalCommit": "eec49a342b6af1a0802b18a38520c9d1cfc5ccc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2NDg4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r411764884", "bodyText": "applicable to all receipt recognize examples", "author": "samvaity", "createdAt": "2020-04-20T23:39:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2NDUzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "c06f5f17911a68ddb18e9063b27f50164e42e040", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\nindex b95350458ad..bcabddbcb85 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n\n@@ -64,15 +64,15 @@ public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n         String modelId = \"{model_id}\";\n \n         formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).subscribe(\n-            trainingPollOperationResponse ->\n+            recognizePollingOperation ->\n                 // if training polling operation completed, retrieve the final result.\n-                trainingPollOperationResponse.getFinalResult().subscribe(recognizedForms ->\n+                recognizePollingOperation.getFinalResult().subscribe(recognizedForms ->\n                     recognizedForms.forEach(recognizedForm -> {\n                         recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n                             System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n                             System.out.printf(\"Field text: %s%n\", fieldText);\n                             System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n-                            System.out.printf(\"Confidence score: %s%n\", fieldValue.getConfidence());\n+                            System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n                         });\n                     })\n                 )\n"}}, {"oid": "c06f5f17911a68ddb18e9063b27f50164e42e040", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c06f5f17911a68ddb18e9063b27f50164e42e040", "message": "address feedbacks", "committedDate": "2020-04-21T04:56:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg4MzA0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r411883049", "bodyText": "Need to print merchant address and tax and phone number just to show various us receipt items.", "author": "samvaity", "createdAt": "2020-04-21T05:37:44Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,353 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.implementation.Utility;\n+import com.azure.ai.formrecognizer.models.FormContentType;\n+import com.azure.ai.formrecognizer.models.USReceipt;\n+import com.azure.core.credential.AzureKeyCredential;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import reactor.core.publisher.Flux;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.time.Duration;\n+\n+/**\n+ * Code snippet for {@link FormRecognizerAsyncClient}\n+ */\n+public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n+    FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient();\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient}\n+     */\n+    public void createFormRecognizerAsyncClient() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.instantiation\n+    }\n+\n+    /**\n+     * Code snippet for creating a {@link FormRecognizerAsyncClient} with pipeline\n+     */\n+    public void createFormRecognizerAsyncClientWithPipeline() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+        HttpPipeline pipeline = new HttpPipelineBuilder()\n+            .policies(/* add policies */)\n+            .build();\n+\n+        FormRecognizerAsyncClient formRecognizerAsyncClient = new FormRecognizerClientBuilder()\n+            .apiKey(new AzureKeyCredential(\"{api_key}\"))\n+            .endpoint(\"{endpoint}\")\n+            .pipeline(pipeline)\n+            .buildAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.pipeline.instantiation\n+    }\n+\n+    // Recognize Custom Form\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl}\n+     */\n+    public void beginRecognizeCustomFormsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).subscribe(\n+            recognizePollingOperation ->\n+                // if training polling operation completed, retrieve the final result.\n+                recognizePollingOperation.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(recognizedForm -> {\n+                        recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                            System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n+                        });\n+                    })\n+                )\n+        );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomFormsFromUrl} with options\n+     */\n+    public void beginRecognizeCustomFormsFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string-boolean-Duration\n+        String analyzeFilePath = \"{file_source_url}\";\n+        String modelId = \"{model_id}\";\n+        boolean includeTextDetails = true;\n+        formRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId, includeTextDetails,\n+            Duration.ofSeconds(5)).subscribe(recognizePollingOperation ->\n+                // if training polling operation completed, retrieve the final result.\n+                recognizePollingOperation.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(recognizedForm -> {\n+                        recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                            System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n+                        });\n+                    })\n+                )\n+        );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomFormsFromUrl#string-string-boolean-Duration\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomForms}\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public void beginRecognizeCustomForms() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType\n+        File sourceFile = new File(\"{file_source_url}\");\n+        String modelId = \"{model_id}\";\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomForms(buffer, modelId, sourceFile.length(),\n+            FormContentType.IMAGE_JPEG).subscribe(recognizePollingOperation ->\n+                // if training polling operation completed, retrieve the final result.\n+                recognizePollingOperation.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(recognizedForm -> {\n+                        recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                            System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n+                        });\n+                    })\n+                )\n+        );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeCustomForms} with options\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public void beginRecognizeCustomFormsWithOptions() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType-boolean-Duration\n+        File sourceFile = new File(\"{file_source_url}\");\n+        String modelId = \"{model_id}\";\n+        boolean includeTextDetails = true;\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeCustomForms(buffer, modelId, sourceFile.length(),\n+            FormContentType.IMAGE_JPEG, includeTextDetails, Duration.ofSeconds(5))\n+            .subscribe(recognizePollingOperation ->\n+                // if training polling operation completed, retrieve the final result.\n+                recognizePollingOperation.getFinalResult().subscribe(recognizedForms ->\n+                    recognizedForms.forEach(recognizedForm -> {\n+                        recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n+                            System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n+                            System.out.printf(\"Field text: %s%n\", fieldText);\n+                            System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n+                            System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n+                        });\n+                    })\n+                )\n+            );\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms#Flux-string-long-FormContentType-boolean-Duration\n+    }\n+\n+    // Recognize Content\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl}\n+     */\n+    public void beginRecognizeContentFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string\n+        String sourceFilePath = \"{file_source_url}\";\n+        formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath).subscribe(\n+            recognizePollingOperation ->\n+                recognizePollingOperation.getFinalResult().subscribe(layoutPageResults ->\n+                    layoutPageResults.forEach(recognizedForm -> {\n+                        System.out.printf(\"Page Angle: %s%n\", recognizedForm.getTextAngle());\n+                        System.out.printf(\"Page Dimension unit: %s%n\", recognizedForm.getUnit());\n+                        // Table information\n+                        System.out.println(\"Recognized Tables: \");\n+                        recognizedForm.getTables().forEach(formTable ->\n+                            formTable.getCells().forEach(recognizedTableCell ->\n+                                System.out.printf(\"%s \", recognizedTableCell.getText())));\n+                    })\n+                ));\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContentFromUrl} with options\n+     */\n+    public void beginRecognizeContentFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string-Duration\n+        String sourceFilePath = \"{file_source_url}\";\n+        formRecognizerAsyncClient.beginRecognizeContentFromUrl(sourceFilePath, Duration.ofSeconds(5)).subscribe(\n+            recognizePollingOperation ->\n+                recognizePollingOperation.getFinalResult().subscribe(layoutPageResults ->\n+                    layoutPageResults.forEach(recognizedForm -> {\n+                        System.out.printf(\"Page Angle: %s%n\", recognizedForm.getTextAngle());\n+                        System.out.printf(\"Page Dimension unit: %s%n\", recognizedForm.getUnit());\n+                        // Table information\n+                        System.out.println(\"Recognized Tables: \");\n+                        recognizedForm.getTables().forEach(formTable ->\n+                            formTable.getCells().forEach(recognizedTableCell ->\n+                                System.out.printf(\"%s \", recognizedTableCell.getText())));\n+                    })\n+                ));\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContentFromUrl#string-Duration\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContent}\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public void beginRecognizeContent() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#Flux-long-FormContentType\n+        File sourceFile = new File(\"{file_source_url}\");\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeContent(buffer, sourceFile.length(), FormContentType.APPLICATION_PDF)\n+            .subscribe(recognizePollingOperation ->\n+                recognizePollingOperation.getFinalResult().subscribe(layoutPageResults ->\n+                    layoutPageResults.forEach(recognizedForm -> {\n+                        System.out.printf(\"Page Angle: %s%n\", recognizedForm.getTextAngle());\n+                        System.out.printf(\"Page Dimension unit: %s%n\", recognizedForm.getUnit());\n+                        // Table information\n+                        System.out.println(\"Recognized Tables: \");\n+                        recognizedForm.getTables().forEach(formTable ->\n+                            formTable.getCells().forEach(recognizedTableCell ->\n+                                System.out.printf(\"%s \", recognizedTableCell.getText())));\n+                    })\n+            ));\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#Flux-long-FormContentType\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeContent} with options\n+     *\n+     * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n+     */\n+    public void beginRecognizeContentWithOptions() throws IOException {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#Flux-FormContentType-long-Duration\n+        File sourceFile = new File(\"{file_source_url}\");\n+        Flux<ByteBuffer> buffer = Utility.convertStreamToByteBuffer(\n+            new ByteArrayInputStream(Files.readAllBytes(sourceFile.toPath())));\n+\n+        formRecognizerAsyncClient.beginRecognizeContent(buffer, FormContentType.APPLICATION_PDF, sourceFile.length(),\n+            Duration.ofSeconds(5)).subscribe(recognizePollingOperation ->\n+                recognizePollingOperation.getFinalResult().subscribe(layoutPageResults ->\n+                    layoutPageResults.forEach(recognizedForm -> {\n+                        System.out.printf(\"Page Angle: %s%n\", recognizedForm.getTextAngle());\n+                        System.out.printf(\"Page Dimension unit: %s%n\", recognizedForm.getUnit());\n+                        // Table information\n+                        System.out.println(\"Recognized Tables: \");\n+                        recognizedForm.getTables().forEach(formTable ->\n+                            formTable.getCells().forEach(recognizedTableCell ->\n+                                System.out.printf(\"%s \", recognizedTableCell.getText())));\n+                    })\n+                ));\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#Flux-FormContentType-long-Duration\n+    }\n+\n+    // Recognize Receipts\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceiptsFromUrl}\n+     */\n+    public void beginRecognizeReceiptsFromUrl() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string\n+        String receiptUrl = \"{file_source_url}\";\n+        formRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(receiptUrl).subscribe(recognizePollingOperation -> {\n+            // if training polling operation completed, retrieve the final result.\n+            recognizePollingOperation.getFinalResult().subscribe(recognizedReceipts ->\n+                recognizedReceipts.forEach(recognizedReceipt -> {\n+                    USReceipt usReceipt = ReceiptExtensions.asUSReceipt(recognizedReceipt);\n+                    System.out.printf(\"Page Number: %s%n\", usReceipt.getMerchantName().getPageNumber());\n+                    System.out.printf(\"Merchant Name: %s%n\", usReceipt.getMerchantName().getFieldValue());", "originalCommit": "c06f5f17911a68ddb18e9063b27f50164e42e040", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg4MzIzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r411883230", "bodyText": "we need only the values , not so much name.", "author": "samvaity", "createdAt": "2020-04-21T05:38:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg4MzA0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2d1e247ee4d437b614a6357df32aea78031882a8", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\nindex bcabddbcb85..7bb43cae548 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n\n@@ -277,7 +277,18 @@ public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n                 recognizedReceipts.forEach(recognizedReceipt -> {\n                     USReceipt usReceipt = ReceiptExtensions.asUSReceipt(recognizedReceipt);\n                     System.out.printf(\"Page Number: %s%n\", usReceipt.getMerchantName().getPageNumber());\n-                    System.out.printf(\"Merchant Name: %s%n\", usReceipt.getMerchantName().getFieldValue());\n+                    System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n+                        usReceipt.getMerchantName().getFieldValue(),\n+                        usReceipt.getMerchantName().getConfidence());\n+                    System.out.printf(\"Merchant Address: %s, confidence: %.2f%n\",\n+                        usReceipt.getMerchantAddress().getFieldValue(),\n+                        usReceipt.getMerchantAddress().getConfidence());\n+                    System.out.printf(\"Merchant Phone Number %s, confidence: %.2f%n\",\n+                        usReceipt.getMerchantPhoneNumber().getFieldValue(),\n+                        usReceipt.getMerchantPhoneNumber().getConfidence());\n+                    System.out.printf(\"Total: %.2f, confidence: %.2f%n\",\n+                        usReceipt.getTotal().getFieldValue(),\n+                        usReceipt.getTotal().getConfidence());\n                 }));\n         });\n         // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg4MzYxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r411883610", "bodyText": "print status code may be to show difference between with and without response?", "author": "samvaity", "createdAt": "2020-04-21T05:39:12Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,175 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.AccountProperties;\n+import com.azure.ai.formrecognizer.models.CustomFormModel;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Code snippet for {@link FormTrainingAsyncClient}\n+ */\n+public class FormTrainingAsyncClientJavaDocCodeSnippets {\n+    private FormTrainingAsyncClient formTrainingAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient()\n+        .getFormTrainingAsyncClient();\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient} initialization\n+     */\n+    public void formTrainingAsyncClientInInitialization() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.initialization\n+        FormTrainingAsyncClient formTrainingAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient()\n+            .getFormTrainingAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.initialization\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#beginTraining}\n+     */\n+    public void beginTraining() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean\n+        String trainingSetSource = \"{training-set-SAS-URL}\";\n+        boolean useLabelFile = true;\n+        formTrainingAsyncClient.beginTraining(trainingSetSource, useLabelFile).subscribe(\n+            recognizePollingOperation -> {\n+                // if training polling operation completed, retrieve the final result.\n+                recognizePollingOperation.getFinalResult().subscribe(customFormModel -> {\n+                    System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+                    System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+                    customFormModel.getSubModels().forEach(customFormSubModel ->\n+                        customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                            System.out.printf(\"Form type: %s Field Text: %s Field Accuracy: %s%n\",\n+                                key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+                });\n+            });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#beginTraining} with options\n+     */\n+    public void beginTrainingWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean-boolean-string-Duration\n+        String trainingSetSource = \"{training-set-SAS-URL}\";\n+        boolean isIncludeSubFolders = false; // {is-include-subfolders}\n+        String filePrefix = \"{file-prefix}\";\n+        boolean useLabelFile = true;\n+\n+        formTrainingAsyncClient.beginTraining(trainingSetSource, useLabelFile, isIncludeSubFolders, filePrefix,\n+            Duration.ofSeconds(5)).subscribe(recognizePollingOperation -> {\n+                // if training polling operation completed, retrieve the final result.\n+                recognizePollingOperation.getFinalResult().subscribe(customFormModel -> {\n+                    System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+                    System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+                    customFormModel.getSubModels().forEach(customFormSubModel ->\n+                        customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                            System.out.printf(\"Form Type: %s Field Text: %s Field Accuracy: %s%n\",\n+                                key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+                });\n+            });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean-boolean-string-Duration\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getCustomModel}\n+     */\n+    public void getCustomModel() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModel#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.getCustomModel(modelId).subscribe(customFormModel -> {\n+            System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+            System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+            customFormModel.getSubModels().forEach(customFormSubModel ->\n+                customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                    System.out.printf(\"Form Type: %s Field Text: %s Field Accuracy: %s%n\",\n+                        key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModel#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getCustomModelWithResponse}\n+     */\n+    public void getCustomModelWithResponse() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModelWithResponse#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.getCustomModelWithResponse(modelId).subscribe(response -> {\n+            CustomFormModel customFormModel = response.getValue();\n+            System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+            System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+            customFormModel.getSubModels().forEach(customFormSubModel ->\n+                customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                    System.out.printf(\"Form Type: %s Field Text: %s Field Accuracy: %s%n\",\n+                        key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModelWithResponse#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getAccountProperties}\n+     */\n+    public void getAccountProperties() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getAccountProperties\n+        formTrainingAsyncClient.getAccountProperties().subscribe(accountProperties -> {\n+            System.out.printf(\"Max number of models that can be trained for this account: %s%n\",\n+                accountProperties.getLimit());\n+            System.out.printf(\"Current count of trained custom models: %d%n\", accountProperties.getCount());\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getAccountProperties\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getAccountPropertiesWithResponse}\n+     */\n+    public void getAccountPropertiesWithResponse() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getAccountPropertiesWithResponse\n+        formTrainingAsyncClient.getAccountPropertiesWithResponse().subscribe(response -> {\n+            AccountProperties accountProperties = response.getValue();", "originalCommit": "c06f5f17911a68ddb18e9063b27f50164e42e040", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg4MzcyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r411883729", "bodyText": "like delteModelWithResponse", "author": "samvaity", "createdAt": "2020-04-21T05:39:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg4MzYxMA=="}], "type": "inlineReview", "revised_code": {"commit": "2d1e247ee4d437b614a6357df32aea78031882a8", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\nindex a2b2712c31d..a31f69b80f0 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\n\n@@ -97,6 +97,7 @@ public class FormTrainingAsyncClientJavaDocCodeSnippets {\n         // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModelWithResponse#string\n         String modelId = \"{model_id}\";\n         formTrainingAsyncClient.getCustomModelWithResponse(modelId).subscribe(response -> {\n+            System.out.printf(\"Response Status Code: %d.\", response.getStatusCode());\n             CustomFormModel customFormModel = response.getValue();\n             System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n             System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg4MzgyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10211#discussion_r411883825", "bodyText": "result -> customModel", "author": "samvaity", "createdAt": "2020-04-21T05:39:46Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -0,0 +1,175 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.formrecognizer;\n+\n+import com.azure.ai.formrecognizer.models.AccountProperties;\n+import com.azure.ai.formrecognizer.models.CustomFormModel;\n+\n+import java.time.Duration;\n+\n+/**\n+ * Code snippet for {@link FormTrainingAsyncClient}\n+ */\n+public class FormTrainingAsyncClientJavaDocCodeSnippets {\n+    private FormTrainingAsyncClient formTrainingAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient()\n+        .getFormTrainingAsyncClient();\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient} initialization\n+     */\n+    public void formTrainingAsyncClientInInitialization() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.initialization\n+        FormTrainingAsyncClient formTrainingAsyncClient = new FormRecognizerClientBuilder().buildAsyncClient()\n+            .getFormTrainingAsyncClient();\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.initialization\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#beginTraining}\n+     */\n+    public void beginTraining() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean\n+        String trainingSetSource = \"{training-set-SAS-URL}\";\n+        boolean useLabelFile = true;\n+        formTrainingAsyncClient.beginTraining(trainingSetSource, useLabelFile).subscribe(\n+            recognizePollingOperation -> {\n+                // if training polling operation completed, retrieve the final result.\n+                recognizePollingOperation.getFinalResult().subscribe(customFormModel -> {\n+                    System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+                    System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+                    customFormModel.getSubModels().forEach(customFormSubModel ->\n+                        customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                            System.out.printf(\"Form type: %s Field Text: %s Field Accuracy: %s%n\",\n+                                key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+                });\n+            });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#beginTraining} with options\n+     */\n+    public void beginTrainingWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean-boolean-string-Duration\n+        String trainingSetSource = \"{training-set-SAS-URL}\";\n+        boolean isIncludeSubFolders = false; // {is-include-subfolders}\n+        String filePrefix = \"{file-prefix}\";\n+        boolean useLabelFile = true;\n+\n+        formTrainingAsyncClient.beginTraining(trainingSetSource, useLabelFile, isIncludeSubFolders, filePrefix,\n+            Duration.ofSeconds(5)).subscribe(recognizePollingOperation -> {\n+                // if training polling operation completed, retrieve the final result.\n+                recognizePollingOperation.getFinalResult().subscribe(customFormModel -> {\n+                    System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+                    System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+                    customFormModel.getSubModels().forEach(customFormSubModel ->\n+                        customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                            System.out.printf(\"Form Type: %s Field Text: %s Field Accuracy: %s%n\",\n+                                key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+                });\n+            });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.beginTraining#string-boolean-boolean-string-Duration\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getCustomModel}\n+     */\n+    public void getCustomModel() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModel#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.getCustomModel(modelId).subscribe(customFormModel -> {\n+            System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+            System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+            customFormModel.getSubModels().forEach(customFormSubModel ->\n+                customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                    System.out.printf(\"Form Type: %s Field Text: %s Field Accuracy: %s%n\",\n+                        key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModel#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getCustomModelWithResponse}\n+     */\n+    public void getCustomModelWithResponse() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModelWithResponse#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.getCustomModelWithResponse(modelId).subscribe(response -> {\n+            CustomFormModel customFormModel = response.getValue();\n+            System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n+            System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n+            customFormModel.getSubModels().forEach(customFormSubModel ->\n+                customFormSubModel.getFieldMap().forEach((key, customFormModelField) ->\n+                    System.out.printf(\"Form Type: %s Field Text: %s Field Accuracy: %s%n\",\n+                        key, customFormModelField.getName(), customFormModelField.getAccuracy())));\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModelWithResponse#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getAccountProperties}\n+     */\n+    public void getAccountProperties() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getAccountProperties\n+        formTrainingAsyncClient.getAccountProperties().subscribe(accountProperties -> {\n+            System.out.printf(\"Max number of models that can be trained for this account: %s%n\",\n+                accountProperties.getLimit());\n+            System.out.printf(\"Current count of trained custom models: %d%n\", accountProperties.getCount());\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getAccountProperties\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#getAccountPropertiesWithResponse}\n+     */\n+    public void getAccountPropertiesWithResponse() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getAccountPropertiesWithResponse\n+        formTrainingAsyncClient.getAccountPropertiesWithResponse().subscribe(response -> {\n+            AccountProperties accountProperties = response.getValue();\n+            System.out.printf(\"Max number of models that can be trained for this account: %s%n\",\n+                accountProperties.getLimit());\n+            System.out.printf(\"Current count of trained custom models: %d%n\", accountProperties.getCount());\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getAccountPropertiesWithResponse\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#deleteModel}\n+     */\n+    public void deleteModel() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModel#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.deleteModel(modelId).subscribe(val ->\n+            System.out.printf(\"Model Id: %s is deleted%n\", modelId));\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModel#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#deleteModelWithResponse}\n+     */\n+    public void deleteModelWithResponse() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModelWithResponse#string\n+        String modelId = \"{model_id}\";\n+        formTrainingAsyncClient.deleteModelWithResponse(modelId).subscribe(response -> {\n+            System.out.printf(\"Response Status Code: %d.\", response.getStatusCode());\n+            System.out.printf(\"Model Id: %s is deleted%n\", modelId);\n+        });\n+        // END: com.azure.ai.formrecognizer.FormTrainingAsyncClient.deleteModelWithResponse#string\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormTrainingAsyncClient#listModels}\n+     */\n+    public void listModels() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.listModels\n+        formTrainingAsyncClient.listModels().subscribe(result ->", "originalCommit": "c06f5f17911a68ddb18e9063b27f50164e42e040", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d1e247ee4d437b614a6357df32aea78031882a8", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\nindex a2b2712c31d..a31f69b80f0 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormTrainingAsyncClientJavaDocCodeSnippets.java\n\n@@ -97,6 +97,7 @@ public class FormTrainingAsyncClientJavaDocCodeSnippets {\n         // BEGIN: com.azure.ai.formrecognizer.FormTrainingAsyncClient.getCustomModelWithResponse#string\n         String modelId = \"{model_id}\";\n         formTrainingAsyncClient.getCustomModelWithResponse(modelId).subscribe(response -> {\n+            System.out.printf(\"Response Status Code: %d.\", response.getStatusCode());\n             CustomFormModel customFormModel = response.getValue();\n             System.out.printf(\"Model Id: %s%n\", customFormModel.getModelId());\n             System.out.printf(\"Model Status: %s%n\", customFormModel.getModelStatus());\n"}}, {"oid": "f0447adeb31733d85591d713f641560924ed3275", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f0447adeb31733d85591d713f641560924ed3275", "message": "resolve conlifct", "committedDate": "2020-04-21T19:54:09Z", "type": "commit"}, {"oid": "2d1e247ee4d437b614a6357df32aea78031882a8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2d1e247ee4d437b614a6357df32aea78031882a8", "message": "final feedbacks", "committedDate": "2020-04-21T20:39:11Z", "type": "commit"}, {"oid": "87088173b1cea7535b9c13dfe69f251a43a9bf21", "url": "https://github.com/Azure/azure-sdk-for-java/commit/87088173b1cea7535b9c13dfe69f251a43a9bf21", "message": "revert the intellij auto indentation", "committedDate": "2020-04-21T21:21:39Z", "type": "commit"}]}