{"pr_number": 12923, "pr_title": "Writing the Tables SDK for Java ", "pr_createdAt": "2020-07-08T20:39:27Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/12923", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxMzM3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12923#discussion_r451813377", "bodyText": "please revert this change (i mean just this change to this file)", "author": "amishra-dev", "createdAt": "2020-07-08T20:42:04Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java", "diffHunk": "@@ -504,7 +504,7 @@ public String getAccountUrl() {\n      * @param properties Configures the service.\n      * @return A {@link Mono} containing the storage account properties.\n      */\n-    public Mono<Void> setProperties(BlobServiceProperties properties) {\n+    public Mono<Void> setProperties(BlobServiceProperties properties){", "originalCommit": "8c0346d3953a1b49b8bd3f662e9918956235cad4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyNTA4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12923#discussion_r452225084", "bodyText": "So sorry, must have miss-clicked! Fixed now.", "author": "eboyd23", "createdAt": "2020-07-09T13:40:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxMzM3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b2477250b38c1ff7b8874642803c30ffe242473a", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java\nindex 70a2a0c0f76..8e412393564 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobServiceAsyncClient.java\n\n@@ -504,7 +502,7 @@ public final class BlobServiceAsyncClient {\n      * @param properties Configures the service.\n      * @return A {@link Mono} containing the storage account properties.\n      */\n-    public Mono<Void> setProperties(BlobServiceProperties properties){\n+    public Mono<Void> setProperties(BlobServiceProperties properties) {\n         try {\n             return setPropertiesWithResponse(properties).flatMap(FluxUtil::toMono);\n         } catch (RuntimeException ex) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzMTEyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12923#discussion_r451831127", "bodyText": "This will be set as some point, correct?", "author": "alzimmermsft", "createdAt": "2020-07-08T21:18:29Z", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/AzureTable.java", "diffHunk": "@@ -0,0 +1,32 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+/**\n+ * class for a table object\n+ */\n+public class AzureTable {\n+    private final String name;\n+    private TableClient tableClient;", "originalCommit": "8c0346d3953a1b49b8bd3f662e9918956235cad4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2477250b38c1ff7b8874642803c30ffe242473a", "chunk": "diff --git a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/AzureTable.java b/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/AzureTable.java\nindex e18ef73889c..98cbc859820 100644\n--- a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/AzureTable.java\n+++ b/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/AzureTable.java\n\n@@ -7,7 +7,6 @@ package com.azure.data.tables;\n  */\n public class AzureTable {\n     private final String name;\n-    private TableClient tableClient;\n \n     AzureTable(String name) {\n         this.name = name;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzNzU5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12923#discussion_r451837599", "bodyText": "Missing license and documentation.", "author": "alzimmermsft", "createdAt": "2020-07-08T21:32:37Z", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/ContinuationToken.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.azure.data.tables;", "originalCommit": "8c0346d3953a1b49b8bd3f662e9918956235cad4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2477250b38c1ff7b8874642803c30ffe242473a", "chunk": "diff --git a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/ContinuationToken.java b/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/ContinuationToken.java\ndeleted file mode 100644\nindex 2d8a7d8768a..00000000000\n--- a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/ContinuationToken.java\n+++ /dev/null\n\n@@ -1,19 +0,0 @@\n-package com.azure.data.tables;\n-\n-public class ContinuationToken {\n-    String nextPartitionKey;\n-\n-    public String getNextPartitionKey() {\n-        return nextPartitionKey;\n-    }\n-\n-    public String getNextRowKey() {\n-        return nextRowKey;\n-    }\n-\n-    String nextRowKey;\n-    public ContinuationToken (String nextPartitionKey, String nextRowKey) {\n-        this.nextPartitionKey = nextPartitionKey;\n-        this.nextRowKey = nextRowKey;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzNzc0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12923#discussion_r451837741", "bodyText": "Should this and nextRowKey be private final", "author": "alzimmermsft", "createdAt": "2020-07-08T21:32:55Z", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/ContinuationToken.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.azure.data.tables;\n+\n+public class ContinuationToken {\n+    String nextPartitionKey;", "originalCommit": "8c0346d3953a1b49b8bd3f662e9918956235cad4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2477250b38c1ff7b8874642803c30ffe242473a", "chunk": "diff --git a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/ContinuationToken.java b/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/ContinuationToken.java\ndeleted file mode 100644\nindex 2d8a7d8768a..00000000000\n--- a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/ContinuationToken.java\n+++ /dev/null\n\n@@ -1,19 +0,0 @@\n-package com.azure.data.tables;\n-\n-public class ContinuationToken {\n-    String nextPartitionKey;\n-\n-    public String getNextPartitionKey() {\n-        return nextPartitionKey;\n-    }\n-\n-    public String getNextRowKey() {\n-        return nextRowKey;\n-    }\n-\n-    String nextRowKey;\n-    public ContinuationToken (String nextPartitionKey, String nextRowKey) {\n-        this.nextPartitionKey = nextPartitionKey;\n-        this.nextRowKey = nextRowKey;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzODMwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12923#discussion_r451838301", "bodyText": "Should this be a synchronous method as it is returning a property about the client?\npublic String getTableName() {\n  return tableName;\n}", "author": "alzimmermsft", "createdAt": "2020-07-08T21:34:13Z", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "diffHunk": "@@ -0,0 +1,484 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.TablesImpl;\n+import com.azure.data.tables.implementation.models.ResponseFormat;\n+import com.azure.data.tables.implementation.models.TableEntityQueryResponse;\n+import com.azure.data.tables.implementation.models.TablesQueryEntitiesResponse;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import static com.azure.core.util.FluxUtil.collectBytesInByteBufferStream;\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+\n+\n+/**\n+ * class for the table async client\n+ */\n+@ServiceClient(\n+    builder = TableClientBuilder.class,\n+    isAsync = true)\n+public class TableAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(TableAsyncClient.class);\n+    private final String tableName;\n+    private final TablesImpl impl = null;\n+    private final Integer TIMEOUT = 400;\n+\n+    TableAsyncClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * returns the table name associated with the client\n+     *\n+     * @return table name\n+     */\n+    public Mono<String> getTableName() {", "originalCommit": "8c0346d3953a1b49b8bd3f662e9918956235cad4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2477250b38c1ff7b8874642803c30ffe242473a", "chunk": "diff --git a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java b/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java\nindex fa09e636e15..cad13bcb564 100644\n--- a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java\n+++ b/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java\n\n@@ -2,28 +2,46 @@\n // Licensed under the MIT License.\n package com.azure.data.tables;\n \n+import com.azure.core.annotation.ReturnType;\n import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n import com.azure.core.http.rest.PagedFlux;\n import com.azure.core.http.rest.PagedResponse;\n import com.azure.core.http.rest.Response;\n import com.azure.core.http.rest.SimpleResponse;\n import com.azure.core.util.Context;\n+import com.azure.core.util.IterableStream;\n import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.AzureTableImplBuilder;\n+import com.azure.data.tables.implementation.EntityHelper;\n+import com.azure.data.tables.implementation.TableConstants;\n import com.azure.data.tables.implementation.TablesImpl;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.implementation.models.QueryOptions;\n import com.azure.data.tables.implementation.models.ResponseFormat;\n import com.azure.data.tables.implementation.models.TableEntityQueryResponse;\n-import com.azure.data.tables.implementation.models.TablesQueryEntitiesResponse;\n-import java.util.ArrayList;\n+import com.azure.data.tables.implementation.models.TableProperties;\n+import com.azure.data.tables.models.Entity;\n+import com.azure.data.tables.models.QueryParams;\n+import com.azure.data.tables.models.Table;\n+import com.azure.data.tables.models.UpdateMode;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URI;\n+import java.time.Duration;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n-import reactor.core.publisher.Flux;\n-import reactor.core.publisher.Mono;\n \n-import static com.azure.core.util.FluxUtil.collectBytesInByteBufferStream;\n import static com.azure.core.util.FluxUtil.monoError;\n import static com.azure.core.util.FluxUtil.withContext;\n-\n+import static com.azure.data.tables.implementation.TableConstants.PARTITION_KEY;\n+import static com.azure.data.tables.implementation.TableConstants.ROW_KEY;\n \n /**\n  * class for the table async client\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzODU0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12923#discussion_r451838545", "bodyText": "Missing a ;", "author": "alzimmermsft", "createdAt": "2020-07-08T21:34:49Z", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "diffHunk": "@@ -0,0 +1,484 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.TablesImpl;\n+import com.azure.data.tables.implementation.models.ResponseFormat;\n+import com.azure.data.tables.implementation.models.TableEntityQueryResponse;\n+import com.azure.data.tables.implementation.models.TablesQueryEntitiesResponse;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import static com.azure.core.util.FluxUtil.collectBytesInByteBufferStream;\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+\n+\n+/**\n+ * class for the table async client\n+ */\n+@ServiceClient(\n+    builder = TableClientBuilder.class,\n+    isAsync = true)\n+public class TableAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(TableAsyncClient.class);\n+    private final String tableName;\n+    private final TablesImpl impl = null;\n+    private final Integer TIMEOUT = 400;\n+\n+    TableAsyncClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * returns the table name associated with the client\n+     *\n+     * @return table name\n+     */\n+    public Mono<String> getTableName() {\n+        return Mono.empty();\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table using the select and filter strings\n+     *\n+     * @param queryOptions the odata query object\n+     * @return a paged flux of all the entity which fit this criteria\n+     */\n+    public PagedFlux<TableEntity> queryEntities(QueryOptions queryOptions) {\n+\n+        //ContinuationToken continuationToken;\n+        return new PagedFlux<TableEntity>(\n+            () -> withContext(context -> queryFistPageEntities(queryOptions, context)),\n+            continuationToken -> withContext(context -> queryNextPageEntities(context, continuationToken.getNextPartitionKey(), nextRowKey))\n+        );\n+\n+    }\n+\n+    private Mono<PagedResponse<TableEntity>> queryFirstPageEntities(QueryOptions queryOptions, Context context) {\n+        String requestID = \"\";\n+        return impl.queryEntitiesWithResponseAsync(tableName, TIMEOUT, requestID, null, null,\n+            null, context).flatMap(response -> {\n+            TableEntityQueryResponse value = response.getValue();\n+            if (value == null) {\n+                return Mono.empty();\n+            }\n+\n+            final entities = value.getValue().stream()\n+                .map(e ->  {\n+                    return new TableEntity(e);\n+                })\n+                .collect(Collectors.toList());\n+\n+            try {\n+                return Mono.just();\n+                FeedPage\n+            }\n+\n+        })", "originalCommit": "8c0346d3953a1b49b8bd3f662e9918956235cad4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2477250b38c1ff7b8874642803c30ffe242473a", "chunk": "diff --git a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java b/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java\nindex fa09e636e15..cad13bcb564 100644\n--- a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java\n+++ b/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java\n\n@@ -2,28 +2,46 @@\n // Licensed under the MIT License.\n package com.azure.data.tables;\n \n+import com.azure.core.annotation.ReturnType;\n import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n import com.azure.core.http.rest.PagedFlux;\n import com.azure.core.http.rest.PagedResponse;\n import com.azure.core.http.rest.Response;\n import com.azure.core.http.rest.SimpleResponse;\n import com.azure.core.util.Context;\n+import com.azure.core.util.IterableStream;\n import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.AzureTableImplBuilder;\n+import com.azure.data.tables.implementation.EntityHelper;\n+import com.azure.data.tables.implementation.TableConstants;\n import com.azure.data.tables.implementation.TablesImpl;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.implementation.models.QueryOptions;\n import com.azure.data.tables.implementation.models.ResponseFormat;\n import com.azure.data.tables.implementation.models.TableEntityQueryResponse;\n-import com.azure.data.tables.implementation.models.TablesQueryEntitiesResponse;\n-import java.util.ArrayList;\n+import com.azure.data.tables.implementation.models.TableProperties;\n+import com.azure.data.tables.models.Entity;\n+import com.azure.data.tables.models.QueryParams;\n+import com.azure.data.tables.models.Table;\n+import com.azure.data.tables.models.UpdateMode;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URI;\n+import java.time.Duration;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n-import reactor.core.publisher.Flux;\n-import reactor.core.publisher.Mono;\n \n-import static com.azure.core.util.FluxUtil.collectBytesInByteBufferStream;\n import static com.azure.core.util.FluxUtil.monoError;\n import static com.azure.core.util.FluxUtil.withContext;\n-\n+import static com.azure.data.tables.implementation.TableConstants.PARTITION_KEY;\n+import static com.azure.data.tables.implementation.TableConstants.ROW_KEY;\n \n /**\n  * class for the table async client\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzODgzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12923#discussion_r451838836", "bodyText": "Should be safe passing null instead of \"\" for request ID.", "author": "alzimmermsft", "createdAt": "2020-07-08T21:35:31Z", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "diffHunk": "@@ -0,0 +1,484 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.TablesImpl;\n+import com.azure.data.tables.implementation.models.ResponseFormat;\n+import com.azure.data.tables.implementation.models.TableEntityQueryResponse;\n+import com.azure.data.tables.implementation.models.TablesQueryEntitiesResponse;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import static com.azure.core.util.FluxUtil.collectBytesInByteBufferStream;\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+\n+\n+/**\n+ * class for the table async client\n+ */\n+@ServiceClient(\n+    builder = TableClientBuilder.class,\n+    isAsync = true)\n+public class TableAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(TableAsyncClient.class);\n+    private final String tableName;\n+    private final TablesImpl impl = null;\n+    private final Integer TIMEOUT = 400;\n+\n+    TableAsyncClient(String tableName) {\n+        this.tableName = tableName;\n+    }\n+\n+    /**\n+     * returns the table name associated with the client\n+     *\n+     * @return table name\n+     */\n+    public Mono<String> getTableName() {\n+        return Mono.empty();\n+    }\n+\n+    /**\n+     * Queries and returns entities in the given table using the select and filter strings\n+     *\n+     * @param queryOptions the odata query object\n+     * @return a paged flux of all the entity which fit this criteria\n+     */\n+    public PagedFlux<TableEntity> queryEntities(QueryOptions queryOptions) {\n+\n+        //ContinuationToken continuationToken;\n+        return new PagedFlux<TableEntity>(\n+            () -> withContext(context -> queryFistPageEntities(queryOptions, context)),\n+            continuationToken -> withContext(context -> queryNextPageEntities(context, continuationToken.getNextPartitionKey(), nextRowKey))\n+        );\n+\n+    }\n+\n+    private Mono<PagedResponse<TableEntity>> queryFirstPageEntities(QueryOptions queryOptions, Context context) {\n+        String requestID = \"\";\n+        return impl.queryEntitiesWithResponseAsync(tableName, TIMEOUT, requestID, null, null,", "originalCommit": "8c0346d3953a1b49b8bd3f662e9918956235cad4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2477250b38c1ff7b8874642803c30ffe242473a", "chunk": "diff --git a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java b/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java\nindex fa09e636e15..cad13bcb564 100644\n--- a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java\n+++ b/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java\n\n@@ -2,28 +2,46 @@\n // Licensed under the MIT License.\n package com.azure.data.tables;\n \n+import com.azure.core.annotation.ReturnType;\n import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n import com.azure.core.http.rest.PagedFlux;\n import com.azure.core.http.rest.PagedResponse;\n import com.azure.core.http.rest.Response;\n import com.azure.core.http.rest.SimpleResponse;\n import com.azure.core.util.Context;\n+import com.azure.core.util.IterableStream;\n import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.AzureTableImplBuilder;\n+import com.azure.data.tables.implementation.EntityHelper;\n+import com.azure.data.tables.implementation.TableConstants;\n import com.azure.data.tables.implementation.TablesImpl;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.implementation.models.QueryOptions;\n import com.azure.data.tables.implementation.models.ResponseFormat;\n import com.azure.data.tables.implementation.models.TableEntityQueryResponse;\n-import com.azure.data.tables.implementation.models.TablesQueryEntitiesResponse;\n-import java.util.ArrayList;\n+import com.azure.data.tables.implementation.models.TableProperties;\n+import com.azure.data.tables.models.Entity;\n+import com.azure.data.tables.models.QueryParams;\n+import com.azure.data.tables.models.Table;\n+import com.azure.data.tables.models.UpdateMode;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URI;\n+import java.time.Duration;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n-import reactor.core.publisher.Flux;\n-import reactor.core.publisher.Mono;\n \n-import static com.azure.core.util.FluxUtil.collectBytesInByteBufferStream;\n import static com.azure.core.util.FluxUtil.monoError;\n import static com.azure.core.util.FluxUtil.withContext;\n-\n+import static com.azure.data.tables.implementation.TableConstants.PARTITION_KEY;\n+import static com.azure.data.tables.implementation.TableConstants.ROW_KEY;\n \n /**\n  * class for the table async client\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzOTIwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12923#discussion_r451839201", "bodyText": "Should this be a configuration value passed by a customer? I'm guessing if nothing is passed the operation has no timeout. Also is this in seconds, milliseconds, etc?", "author": "alzimmermsft", "createdAt": "2020-07-08T21:36:18Z", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "diffHunk": "@@ -0,0 +1,484 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.tables;\n+\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.TablesImpl;\n+import com.azure.data.tables.implementation.models.ResponseFormat;\n+import com.azure.data.tables.implementation.models.TableEntityQueryResponse;\n+import com.azure.data.tables.implementation.models.TablesQueryEntitiesResponse;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import static com.azure.core.util.FluxUtil.collectBytesInByteBufferStream;\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+\n+\n+/**\n+ * class for the table async client\n+ */\n+@ServiceClient(\n+    builder = TableClientBuilder.class,\n+    isAsync = true)\n+public class TableAsyncClient {\n+    private final ClientLogger logger = new ClientLogger(TableAsyncClient.class);\n+    private final String tableName;\n+    private final TablesImpl impl = null;\n+    private final Integer TIMEOUT = 400;", "originalCommit": "8c0346d3953a1b49b8bd3f662e9918956235cad4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2477250b38c1ff7b8874642803c30ffe242473a", "chunk": "diff --git a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java b/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java\nindex fa09e636e15..cad13bcb564 100644\n--- a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java\n+++ b/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java\n\n@@ -2,28 +2,46 @@\n // Licensed under the MIT License.\n package com.azure.data.tables;\n \n+import com.azure.core.annotation.ReturnType;\n import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n import com.azure.core.http.rest.PagedFlux;\n import com.azure.core.http.rest.PagedResponse;\n import com.azure.core.http.rest.Response;\n import com.azure.core.http.rest.SimpleResponse;\n import com.azure.core.util.Context;\n+import com.azure.core.util.IterableStream;\n import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.AzureTableImplBuilder;\n+import com.azure.data.tables.implementation.EntityHelper;\n+import com.azure.data.tables.implementation.TableConstants;\n import com.azure.data.tables.implementation.TablesImpl;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.implementation.models.QueryOptions;\n import com.azure.data.tables.implementation.models.ResponseFormat;\n import com.azure.data.tables.implementation.models.TableEntityQueryResponse;\n-import com.azure.data.tables.implementation.models.TablesQueryEntitiesResponse;\n-import java.util.ArrayList;\n+import com.azure.data.tables.implementation.models.TableProperties;\n+import com.azure.data.tables.models.Entity;\n+import com.azure.data.tables.models.QueryParams;\n+import com.azure.data.tables.models.Table;\n+import com.azure.data.tables.models.UpdateMode;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URI;\n+import java.time.Duration;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n-import reactor.core.publisher.Flux;\n-import reactor.core.publisher.Mono;\n \n-import static com.azure.core.util.FluxUtil.collectBytesInByteBufferStream;\n import static com.azure.core.util.FluxUtil.monoError;\n import static com.azure.core.util.FluxUtil.withContext;\n-\n+import static com.azure.data.tables.implementation.TableConstants.PARTITION_KEY;\n+import static com.azure.data.tables.implementation.TableConstants.ROW_KEY;\n \n /**\n  * class for the table async client\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyNzQwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12923#discussion_r455927404", "bodyText": "I'm not a fan of aligning parameters with the method name. You can turn this feature off in IntelliJ. It makes a lot of text cramped against the right margin.", "author": "conniey", "createdAt": "2020-07-16T16:47:31Z", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/BuilderHelper.java", "diffHunk": "@@ -0,0 +1,157 @@\n+package com.azure.data.tables;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.common.implementation.Constants;\n+import com.azure.storage.common.implementation.credentials.SasTokenCredential;\n+import com.azure.storage.common.implementation.policy.SasTokenCredentialPolicy;\n+import com.azure.storage.common.policy.RequestRetryOptions;\n+import com.azure.storage.common.policy.RequestRetryPolicy;\n+import com.azure.storage.common.policy.ResponseValidationPolicyBuilder;\n+import com.azure.storage.common.policy.ScrubEtagPolicy;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class BuilderHelper {\n+    private static final Map<String, String> PROPERTIES =\n+        CoreUtils.getProperties(\"azure-storage-blob.properties\");\n+    private static final String SDK_NAME = \"name\";\n+    private static final String SDK_VERSION = \"version\";\n+\n+    static HttpPipeline buildPipeline(TablesSharedKeyCredential tablesSharedKeyCredential,\n+                                      TokenCredential tokenCredential, SasTokenCredential sasTokenCredential,", "originalCommit": "b3a69656ceebbc04d519acba62e9db45c590bd94", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2477250b38c1ff7b8874642803c30ffe242473a", "chunk": "diff --git a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/BuilderHelper.java b/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/BuilderHelper.java\nindex 38166850f23..1258c08ca89 100644\n--- a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/BuilderHelper.java\n+++ b/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/BuilderHelper.java\n\n@@ -1,10 +1,15 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n package com.azure.data.tables;\n \n import com.azure.core.credential.TokenCredential;\n import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n import com.azure.core.http.HttpPipeline;\n import com.azure.core.http.HttpPipelineBuilder;\n import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;\n import com.azure.core.http.policy.HttpLogOptions;\n import com.azure.core.http.policy.HttpLoggingPolicy;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3NDU5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12923#discussion_r461074595", "bodyText": "@conniey here is the part which I was not sure how to do without a get.", "author": "eboyd23", "createdAt": "2020-07-27T18:08:03Z", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java", "diffHunk": "@@ -2,105 +2,566 @@\n // Licensed under the MIT License.\n package com.azure.data.tables;\n \n+import com.azure.core.annotation.ReturnType;\n import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.http.rest.SimpleResponse;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.AzureTableImpl;\n+import com.azure.data.tables.implementation.AzureTableImplBuilder;\n+import com.azure.data.tables.implementation.TablesImpl;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.implementation.models.QueryOptions;\n+import com.azure.data.tables.implementation.models.ResponseFormat;\n+import com.azure.data.tables.implementation.models.TableEntityQueryResponse;\n+import com.azure.data.tables.implementation.models.TableProperties;\n+import com.azure.data.tables.models.Entity;\n+import com.azure.data.tables.models.QueryParams;\n+import com.azure.data.tables.models.Table;\n+import com.azure.data.tables.models.UpdateMode;\n+import java.net.URI;\n+import java.time.Duration;\n+import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n import reactor.core.publisher.Mono;\n \n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+\n /**\n  * class for the table async client\n  */\n @ServiceClient(\n     builder = TableClientBuilder.class,\n     isAsync = true)\n public class TableAsyncClient {\n+    private static final String DELIMITER_CONTINUATION_TOKEN = \";\";\n+    private final ClientLogger logger = new ClientLogger(TableAsyncClient.class);\n     private final String tableName;\n+    private final AzureTableImpl implementation;\n+    private final TablesImpl tableImplementation;\n+    private final String accountName;\n+    private final String tableUrl;\n+    private final TablesServiceVersion apiVersion;\n+\n+    TableAsyncClient(String tableName, HttpPipeline pipeline, String url, TablesServiceVersion serviceVersion) {\n+        try {\n+            final URI uri = URI.create(url);\n+            logger.verbose(\"Table Service URI: {}\", uri);\n+        } catch (IllegalArgumentException ex) {\n+            throw logger.logExceptionAsError(ex);\n+        }\n \n-    TableAsyncClient(String tableName) {\n+        this.implementation = new AzureTableImplBuilder()\n+            .url(url)\n+            .pipeline(pipeline)\n+            .version(serviceVersion.getVersion())\n+            .buildClient();\n+        this.tableImplementation = implementation.getTables();\n         this.tableName = tableName;\n+        this.accountName = null;\n+        this.tableUrl = null;\n+        this.apiVersion = null;\n+\n     }\n \n     /**\n-     * Queries and returns entities in the given table using the select and filter strings\n+     * returns the table name associated with the client\n      *\n-     * @param queryOptions the odata query object\n-     * @return a paged flux of all the entity which fit this criteria\n+     * @return table name\n+     */\n+    public String getTableName() {\n+        return tableName;\n+    }\n+\n+    /**\n+     * returns the account for this table\n+     *\n+     * @return returns the account name\n+     */\n+    public String getAccountName() {\n+        return this.accountName;\n+    }\n+\n+    /**\n+     * returns Url of this service\n+     *\n+     * @return Url\n+     */\n+    public String getTableUrl() {\n+        return this.tableUrl;\n+    }\n+\n+    /**\n+     * returns the version\n+     *\n+     * @return the version\n+     */\n+    public TablesServiceVersion getApiVersion() {\n+        return this.apiVersion;\n+    }\n+\n+    /**\n+     * creates new table with the name of this client\n+     *\n+     * @return a table\n+     */\n+    public Mono<Table> create() {\n+        return createWithResponse().flatMap(response -> Mono.justOrEmpty(response.getValue()));\n+    }\n+\n+    /**\n+     * creates a new table with the name of this client\n+     *\n+     * @return a table\n      */\n-    public PagedFlux<TableEntity> queryEntities(QueryOptions queryOptions) {\n-        return null;\n+    public Mono<Response<Table>> createWithResponse() {\n+        return withContext(context -> createWithResponse(context));\n     }\n \n     /**\n-     * returns the entity with the given rowKey and ParitionKey\n+     * creates a new table with the name of this client\n      *\n-     * @param rowKey the given row key\n-     * @param partitionKey the given partition key\n-     * @return an entity that fits the criteria\n+     * @param context the context of the query\n+     * @return a table\n      */\n-    public Mono<TableEntity> get(String rowKey, String partitionKey) {\n-        return null;\n+    public Mono<Response<Table>> createWithResponse(Context context) {\n+        return tableImplementation.createWithResponseAsync(new TableProperties().setTableName(tableName), null,\n+                ResponseFormat.RETURN_CONTENT, null, context).map(response -> {\n+                    Table table = response.getValue() == null ? null : new Table(response.getValue().getTableName());\n+                    return new SimpleResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(),\n+                        table);\n+                });\n     }\n \n     /**\n      * insert a TableEntity with the given properties and return that TableEntity. Property map must include\n      * rowKey and partitionKey\n      *\n-     * @param tableEntityProperties a map of properties for the TableEntity\n+     * @param entity the entity\n      * @return the created TableEntity\n      */\n-    public Mono<TableEntity> createEntity(Map<String, Object> tableEntityProperties) {\n-        return Mono.empty();\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Entity> createEntity(Entity entity) {\n+        return createEntityWithResponse(entity).flatMap(response -> Mono.justOrEmpty(response.getValue()));\n+    }\n+\n+    /**\n+     * insert a TableEntity with the given properties and return that TableEntity. Property map must include\n+     * rowKey and partitionKey\n+     *\n+     * @param entity the entity\n+     * @return a mono of the response with the TableEntity\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<Entity>> createEntityWithResponse(Entity entity) {\n+        return withContext(context -> createEntityWithResponse(entity, null, context));\n+    }\n+\n+    Mono<Response<Entity>> createEntityWithResponse(Entity tableEntity, Duration timeout, Context context) {\n+        Integer timeoutInt = timeout != null ? (int) timeout.getSeconds() : null;\n+        return tableImplementation.insertEntityWithResponseAsync(tableName, timeoutInt, null,\n+                ResponseFormat.RETURN_CONTENT, tableEntity.getProperties(),\n+                null, context).map(response -> {\n+                    tableEntity.setEtag(response.getValue().get(\"odata.etag\").toString());\n+                    tableEntity.setPartitionKey(response.getValue().get(\"PartitionKey\"));\n+                    tableEntity.setRowKey(response.getValue().get(\"RowKey\"));\n+                    return new SimpleResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(),\n+                tableEntity);\n+                });\n+    }\n+\n+    /**\n+     * based on Mode it either inserts or merges if exists or inserts or merges if exists\n+     *\n+     * @param entity entity to upsert\n+     * @return void\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> upsertEntity(Entity entity) {\n+        return upsertEntityWithResponse(entity, null).flatMap(response -> Mono.justOrEmpty(response.getValue()));\n     }\n \n     /**\n      * based on Mode it either inserts or merges if exists or inserts or merges if exists\n      *\n+     * @param entity entity to upsert\n      * @param updateMode type of upsert\n-     * @param tableEntity entity to upsert\n      * @return void\n      */\n-    public Mono<Void> upsertEntity(UpdateMode updateMode, TableEntity tableEntity) {\n-        return Mono.empty();\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> upsertEntity(Entity entity, UpdateMode updateMode) {\n+        return upsertEntityWithResponse(entity, updateMode).flatMap(response -> Mono.justOrEmpty(response.getValue()));\n+    }\n+\n+    /**\n+     * based on Mode it either inserts or merges if exists or inserts or merges if exists\n+     *\n+     * @param updateMode type of upsert\n+     * @param entity entity to upsert\n+     * @return a response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<Void>> upsertEntityWithResponse(Entity entity, UpdateMode updateMode) {\n+        return withContext(context -> upsertEntityWithResponse(entity, updateMode, null, context));\n+    }\n+\n+    Mono<Response<Void>> upsertEntityWithResponse(Entity entity, UpdateMode updateMode, Duration timeout,\n+        Context context) {\n+        if (entity == null) {\n+            monoError(logger, new NullPointerException(\"TableEntity cannot be null\"));\n+        }\n+        if (updateMode == UpdateMode.REPLACE) {\n+            return tableImplementation.updateEntityWithResponseAsync(tableName, entity.getPartitionKey().toString(),\n+                entity.getRowKey().toString(), (int) timeout.getSeconds(), null, \"*\",\n+                entity.getProperties(), null, context).map(response -> {\n+                    return new SimpleResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(),\n+                    null);\n+                });\n+        } else {\n+            return tableImplementation.mergeEntityWithResponseAsync(tableName, entity.getPartitionKey().toString(),\n+                entity.getRowKey().toString(), (int) timeout.getSeconds(), null, \"*\",\n+                entity.getProperties(), null, context).map(response -> {\n+                    return new SimpleResponse<>(response.getRequest(), response.getStatusCode(), response.getHeaders(),\n+                       null);\n+                });\n+        }\n     }\n \n     /**\n-     * based on Mode it either updates or fails if it does exists or replaces or fails if it does exists\n+     * if UpdateMode is MERGE, merges or fails if the entity doesn't exist. If UpdateMode is REPLACE replaces or\n+     * fails if the entity doesn't exist\n      *\n-     * @param updateMode type of update\n-     * @param tableEntity entity to update\n+     * @param entity the entity to update\n      * @return void\n      */\n-    public Mono<Void> updateEntity(UpdateMode updateMode, TableEntity tableEntity) {\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateEntity(Entity entity) {\n+        //TODO: merge or throw an error if it cannot be found\n         return Mono.empty();\n     }\n \n+    /**\n+     * updates the entity\n+     * @param entity the entity to update\n+     * @param updateMode which type of mode to execute\n+     * @return void\n+     */\n+    public Mono<Void> updateEntity(Entity entity, UpdateMode updateMode) {\n+        return updateEntity(entity, false, updateMode);\n+    }\n+\n+    /**\n+     * if UpdateMode is MERGE, merges or fails if the entity doesn't exist. If UpdateMode is REPLACE replaces or\n+     * fails if the entity doesn't exist\n+     *\n+     * @param updateMode which type of update to execute\n+     * @param entity the entity to update\n+     * @param ifUnchanged if the eTag of the entity must match the entity in the service or not\n+     * @return void\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Void> updateEntity(Entity entity, boolean ifUnchanged, UpdateMode updateMode) {\n+        return updateEntityWithResponse(entity, ifUnchanged, updateMode).flatMap(response ->\n+            Mono.justOrEmpty(response.getValue()));\n+    }\n+\n+    /**\n+     * if UpdateMode is MERGE, merges or fails if the entity doesn't exist. If UpdateMode is REPLACE replaces or\n+     * fails if the entity doesn't exist\n+     *\n+     * @param updateMode which type of update to execute\n+     * @param entity the entity to update\n+     * @param ifUnchanged if the eTag of the entity must match the entity in the service or not\n+     * @return a response\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<Void>> updateEntityWithResponse(Entity entity, boolean ifUnchanged, UpdateMode updateMode) {\n+        return withContext(context -> updateEntityWithResponse(entity, ifUnchanged, updateMode, null, context));\n+    }\n+\n+    Mono<Response<Void>> updateEntityWithResponse(Entity entity, boolean ifUnchanged, UpdateMode updateMode,\n+        Duration timeout, Context context) {\n+        Integer timeoutInt = timeout == null ? null : (int) timeout.getSeconds();\n+        if (updateMode == null || updateMode == UpdateMode.MERGE) {\n+            if (ifUnchanged) {\n+                return tableImplementation.mergeEntityWithResponseAsync(tableName, entity.getPartitionKey().toString(),\n+                    entity.getRowKey().toString(), timeoutInt, null, entity.getETag(), entity.getProperties(), null,\n+                    context).map(response -> {\n+                        return new SimpleResponse<>(response.getRequest(), response.getStatusCode(),\n+                            response.getHeaders(), null);\n+                    });\n+            } else {\n+                return getEntity(entity.getPartitionKey().toString(), entity.getRowKey().toString())\n+                    .flatMap(entityReturned -> {\n+                        return tableImplementation.mergeEntityWithResponseAsync(tableName,\n+                        entity.getPartitionKey().toString(), entity.getRowKey().toString(), timeoutInt, null,\n+                        \"*\", entity.getProperties(), null, context);\n+                    }).map(response -> {\n+                        return new SimpleResponse<>(response.getRequest(), response.getStatusCode(),\n+                            response.getHeaders(), null);\n+                    });\n+            }\n+        } else {\n+            if (ifUnchanged) {\n+                return tableImplementation.updateEntityWithResponseAsync(tableName, entity.getPartitionKey().toString(),\n+                    entity.getRowKey().toString(), timeoutInt, null, entity.getETag(), entity.getProperties(),\n+                    null, context).map(response -> {\n+                        return new SimpleResponse<>(response.getRequest(), response.getStatusCode(),\n+                            response.getHeaders(), null);\n+                    });\n+            } else {\n+                return getEntity(entity.getPartitionKey().toString(), entity.getRowKey().toString())", "originalCommit": "e52e2acb5561b28bd940495d4f0df47fea17dcf7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2477250b38c1ff7b8874642803c30ffe242473a", "chunk": "diff --git a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java b/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java\nindex a86066ef391..cad13bcb564 100644\n--- a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java\n+++ b/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/TableAsyncClient.java\n\n@@ -15,8 +15,11 @@ import com.azure.core.http.rest.SimpleResponse;\n import com.azure.core.util.Context;\n import com.azure.core.util.IterableStream;\n import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.SerializerAdapter;\n import com.azure.data.tables.implementation.AzureTableImpl;\n import com.azure.data.tables.implementation.AzureTableImplBuilder;\n+import com.azure.data.tables.implementation.EntityHelper;\n+import com.azure.data.tables.implementation.TableConstants;\n import com.azure.data.tables.implementation.TablesImpl;\n import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n import com.azure.data.tables.implementation.models.QueryOptions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3NTg5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12923#discussion_r461075890", "bodyText": "@conniey This test is failing because the get isn't working, I could delete these tests until we get it fixed?", "author": "eboyd23", "createdAt": "2020-07-27T18:10:26Z", "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/TablesAsyncClientTest.java", "diffHunk": "@@ -0,0 +1,337 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.implementation.models.QueryOptions;\n+import com.azure.data.tables.models.Entity;\n+import com.azure.data.tables.models.QueryParams;\n+import com.azure.data.tables.models.UpdateMode;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.test.StepVerifier;\n+\n+public class TablesAsyncClientTest extends TestBase {\n+    private String connectionString = System.getenv(\"AZURE_TABLES_CONNECTION_STRING\");\n+    private final ClientLogger logger = new ClientLogger(TableServiceAsyncClientTest.class);\n+    private final String sas = System.getenv(\"AZURE_TABLES_SAS\");\n+    private String tableName = null;\n+\n+\n+    private TableAsyncClient asyncClient;\n+\n+\n+    private static final String PARTITION_KEY = \"PartitionKey\";\n+    private static final String ROW_KEY = \"RowKey\";\n+\n+\n+    @Override\n+    protected void beforeTest() {\n+        tableName = testResourceNamer.randomName(\"tableName\", 20);\n+        asyncClient = new TableClientBuilder()\n+            .connectionString(connectionString)\n+            .addPolicy(new AddHeadersPolicy(new HttpHeaders().put(\"Accept\",\n+                OdataMetadataFormat.APPLICATION_JSON_ODATA_FULLMETADATA.toString())))\n+            .addPolicy(new HttpLoggingPolicy(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS)))\n+            .addPolicy(interceptorManager.getRecordPolicy())\n+            .tableName(tableName)\n+            .buildAsyncClient();\n+\n+        asyncClient.create().block();\n+\n+    }\n+\n+    @Test\n+    void createTableAsync() {\n+        //Arrange\n+        String tableName2 = testResourceNamer.randomName(\"tableName\", 20);\n+        TableAsyncClient asyncClient2 = new TableClientBuilder()\n+            .connectionString(connectionString)\n+            .addPolicy(new AddHeadersPolicy(new HttpHeaders().put(\"Accept\",\n+                OdataMetadataFormat.APPLICATION_JSON_ODATA_FULLMETADATA.toString())))\n+            .addPolicy(new HttpLoggingPolicy(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS)))\n+            .addPolicy(interceptorManager.getRecordPolicy())\n+            .tableName(tableName2)\n+            .buildAsyncClient();\n+\n+        //Act & Assert\n+        StepVerifier.create(asyncClient2.create())\n+            .assertNext(response -> {\n+                Assertions.assertEquals(tableName2, response.getName());\n+\n+            })\n+            .expectComplete()\n+            .verify();\n+    }\n+\n+    @Test\n+    void createEntityAsync() {\n+        //Arrange\n+        String partitionKeyValue = testResourceNamer.randomName(\"partitionKey\", 20);\n+        String rowKeyValue = testResourceNamer.randomName(\"rowKey\", 20);\n+        Entity tableEntity = new Entity(partitionKeyValue, rowKeyValue);\n+        //Act & Assert\n+        StepVerifier.create(asyncClient.createEntity(tableEntity))\n+            .assertNext(response -> {\n+                Assertions.assertEquals(response.getPartitionKey(), partitionKeyValue);\n+                Assertions.assertEquals(response.getRowKey(), rowKeyValue);\n+                Assertions.assertNotNull(response.getETag());\n+\n+            })\n+            .expectComplete()\n+            .verify();\n+    }\n+\n+    @Test\n+    void createEntityWithResponse() {\n+        // Arrange\n+        String partitionKeyValue = testResourceNamer.randomName(\"partitionKey\", 20);\n+        String rowKeyValue = testResourceNamer.randomName(\"rowKey\", 20);\n+        Entity entity = new Entity(partitionKeyValue, rowKeyValue);\n+        int expectedStatusCode = 201;\n+\n+        // Act & Assert\n+        StepVerifier.create(asyncClient.createEntityWithResponse(entity))\n+            .assertNext(response -> {\n+                Assertions.assertEquals(response.getValue().getPartitionKey(), partitionKeyValue);\n+                Assertions.assertEquals(response.getValue().getRowKey(), rowKeyValue);\n+                Assertions.assertNotNull(response.getValue().getETag());\n+                Assertions.assertEquals(expectedStatusCode, response.getStatusCode());\n+            })\n+            .expectComplete()\n+            .verify();\n+    }\n+\n+    @Test\n+    void deleteEntityAsync() {\n+        //Arrange\n+        String partitionKeyValue = testResourceNamer.randomName(\"partitionKey\", 20);\n+        String rowKeyValue = testResourceNamer.randomName(\"rowKey\", 20);\n+        Entity tableEntity = new Entity(partitionKeyValue, rowKeyValue);\n+        asyncClient.createEntity(tableEntity).block();\n+\n+        //Act & Assert\n+        StepVerifier.create(asyncClient.deleteEntity(tableEntity))\n+            .expectComplete()\n+            .verify();\n+    }\n+\n+    @Test\n+    void deleteEntityWithResponse() {\n+        // Arrange\n+        String partitionKeyValue = testResourceNamer.randomName(\"partitionKey\", 20);\n+        String rowKeyValue = testResourceNamer.randomName(\"rowKey\", 20);\n+        Entity tableEntity = new Entity(partitionKeyValue, rowKeyValue);\n+        asyncClient.createEntity(tableEntity).block();\n+        int expectedStatusCode = 204;\n+\n+        // Act & Assert\n+        StepVerifier.create(asyncClient.deleteEntityWithResponse(tableEntity, false))\n+            .assertNext(response -> {\n+                Assertions.assertEquals(expectedStatusCode, response.getStatusCode());\n+            })\n+            .expectComplete()\n+            .verify();\n+    }\n+\n+    @Test\n+    void deleteEntityWithResponseMatchEtag() {\n+        // Arrange\n+        String partitionKeyValue = testResourceNamer.randomName(\"partitionKey\", 20);\n+        String rowKeyValue = testResourceNamer.randomName(\"rowKey\", 20);\n+        Entity tableEntity = new Entity(partitionKeyValue, rowKeyValue);\n+        tableEntity = asyncClient.createEntity(tableEntity).block();\n+        int expectedStatusCode = 204;\n+\n+        // Act & Assert\n+        StepVerifier.create(asyncClient.deleteEntityWithResponse(tableEntity, true))\n+            .assertNext(response -> {\n+                Assertions.assertEquals(expectedStatusCode, response.getStatusCode());\n+            })\n+            .expectComplete()\n+            .verify();\n+    }\n+\n+    @Test\n+    void getEntityWithResponseTHIS() {\n+        // Arrange\n+        String partitionKeyValue = testResourceNamer.randomName(\"partitionKey\", 20);\n+        String rowKeyValue = testResourceNamer.randomName(\"rowKey\", 20);\n+        Entity tableEntity = new Entity(partitionKeyValue, rowKeyValue);\n+        tableEntity = asyncClient.createEntity(tableEntity).block();\n+        int expectedStatusCode = 200;\n+        System.out.println(\"HERE \" + tableEntity.getETag());\n+\n+        // Act & Assert\n+        StepVerifier.create(asyncClient.getEntityWithResponse(tableEntity.getPartitionKey().toString(), tableEntity.getRowKey().toString()))\n+            .assertNext(response -> {\n+                Assertions.assertEquals(expectedStatusCode, response.getStatusCode());\n+                System.out.println(\"ODATA \" + response.getHeaders().get(\"etag\"));\n+            })\n+            .expectComplete()\n+            .verify();\n+    }\n+\n+    /**\n+     * expect to see both propertyA and propertyB since the UpdateMode is MERGE\n+     */\n+    @Test\n+    void updateEntityWithResponseMerge() {\n+        // Arrange\n+        String partitionKeyValue = testResourceNamer.randomName(\"ApartitionKey\", 20);\n+        String rowKeyValue = testResourceNamer.randomName(\"ArowKey\", 20);\n+        Entity tableEntity = new Entity(partitionKeyValue, rowKeyValue);\n+        tableEntity.addProperties(\"propertyA\", \"valueA\");\n+        tableEntity = asyncClient.createEntity(tableEntity).block();\n+        tableEntity.getProperties().remove(\"propertyA\");\n+        tableEntity.addProperties(\"propertyB\", \"valueB\");\n+        int expectedStatusCode = 204;\n+\n+        // Act & Assert\n+        StepVerifier.create(asyncClient.updateEntityWithResponse(tableEntity, true, UpdateMode.MERGE))\n+            .assertNext(response -> {\n+                Assertions.assertEquals(expectedStatusCode, response.getStatusCode());\n+            })\n+            .expectComplete()\n+            .verify();\n+    }\n+\n+    /**\n+     * expect to see both propertyA and propertyB since the UpdateMode is MERGE\n+     */\n+    @Test\n+    void updateEntityWithResponseMergeUnconditional() {", "originalCommit": "e52e2acb5561b28bd940495d4f0df47fea17dcf7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2477250b38c1ff7b8874642803c30ffe242473a", "chunk": "diff --git a/sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/TablesAsyncClientTest.java b/sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/TablesAsyncClientTest.java\nindex d1adcdc568b..0a463edbea3 100644\n--- a/sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/TablesAsyncClientTest.java\n+++ b/sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/TablesAsyncClientTest.java\n\n@@ -3,91 +3,100 @@\n \n package com.azure.data.tables;\n \n-import com.azure.core.http.HttpHeaders;\n-import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.HttpClient;\n import com.azure.core.http.policy.HttpLogDetailLevel;\n import com.azure.core.http.policy.HttpLogOptions;\n-import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n import com.azure.core.test.TestBase;\n-import com.azure.core.util.Context;\n-import com.azure.core.util.logging.ClientLogger;\n-import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n-import com.azure.data.tables.implementation.models.QueryOptions;\n import com.azure.data.tables.models.Entity;\n import com.azure.data.tables.models.QueryParams;\n import com.azure.data.tables.models.UpdateMode;\n-import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n-import reactor.core.publisher.Flux;\n-import reactor.core.publisher.Mono;\n import reactor.test.StepVerifier;\n \n-public class TablesAsyncClientTest extends TestBase {\n-    private String connectionString = System.getenv(\"AZURE_TABLES_CONNECTION_STRING\");\n-    private final ClientLogger logger = new ClientLogger(TableServiceAsyncClientTest.class);\n-    private final String sas = System.getenv(\"AZURE_TABLES_SAS\");\n-    private String tableName = null;\n-\n+import java.time.Duration;\n+import java.util.Map;\n \n-    private TableAsyncClient asyncClient;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * Tests {@link TableAsyncClient}.\n+ */\n+public class TablesAsyncClientTest extends TestBase {\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n \n-    private static final String PARTITION_KEY = \"PartitionKey\";\n-    private static final String ROW_KEY = \"RowKey\";\n-\n+    private TableAsyncClient asyncClient;\n+    private HttpPipelinePolicy recordPolicy;\n+    private HttpClient playbackClient;\n \n     @Override\n     protected void beforeTest() {\n-        tableName = testResourceNamer.randomName(\"tableName\", 20);\n-        asyncClient = new TableClientBuilder()\n+        final String tableName = testResourceNamer.randomName(\"tableName\", 20);\n+        final String connectionString = TestUtils.getConnectionString(interceptorManager.isPlaybackMode());\n+        final TableClientBuilder builder = new TableClientBuilder()\n             .connectionString(connectionString)\n-            .addPolicy(new AddHeadersPolicy(new HttpHeaders().put(\"Accept\",\n-                OdataMetadataFormat.APPLICATION_JSON_ODATA_FULLMETADATA.toString())))\n-            .addPolicy(new HttpLoggingPolicy(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS)))\n-            .addPolicy(interceptorManager.getRecordPolicy())\n-            .tableName(tableName)\n-            .buildAsyncClient();\n-\n-        asyncClient.create().block();\n-\n+            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n+            .tableName(tableName);\n+\n+        if (interceptorManager.isPlaybackMode()) {\n+            playbackClient = interceptorManager.getPlaybackClient();\n+            builder.httpClient(playbackClient);\n+        } else {\n+            recordPolicy = interceptorManager.getRecordPolicy();\n+            builder.httpClient(HttpClient.createDefault())\n+                .addPolicy(recordPolicy)\n+                .addPolicy(new RetryPolicy());\n+        }\n+\n+        asyncClient = builder.buildAsyncClient();\n+\n+        asyncClient.create().block(TIMEOUT);\n     }\n \n     @Test\n     void createTableAsync() {\n-        //Arrange\n-        String tableName2 = testResourceNamer.randomName(\"tableName\", 20);\n-        TableAsyncClient asyncClient2 = new TableClientBuilder()\n+        // Arrange\n+        final String tableName2 = testResourceNamer.randomName(\"tableName\", 20);\n+        final String connectionString = TestUtils.getConnectionString(interceptorManager.isPlaybackMode());\n+        final TableClientBuilder builder = new TableClientBuilder()\n             .connectionString(connectionString)\n-            .addPolicy(new AddHeadersPolicy(new HttpHeaders().put(\"Accept\",\n-                OdataMetadataFormat.APPLICATION_JSON_ODATA_FULLMETADATA.toString())))\n-            .addPolicy(new HttpLoggingPolicy(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS)))\n-            .addPolicy(interceptorManager.getRecordPolicy())\n-            .tableName(tableName2)\n-            .buildAsyncClient();\n-\n-        //Act & Assert\n-        StepVerifier.create(asyncClient2.create())\n-            .assertNext(response -> {\n-                Assertions.assertEquals(tableName2, response.getName());\n+            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n+            .tableName(tableName2);\n \n-            })\n+        if (interceptorManager.isPlaybackMode()) {\n+            builder.httpClient(playbackClient);\n+        } else {\n+            builder.httpClient(HttpClient.createDefault())\n+                .addPolicy(recordPolicy)\n+                .addPolicy(new RetryPolicy());\n+        }\n+\n+        final TableAsyncClient asyncClient2 = builder.buildAsyncClient();\n+\n+        // Act & Assert\n+        StepVerifier.create(asyncClient2.create())\n+            .assertNext(response -> assertEquals(tableName2, response.getName()))\n             .expectComplete()\n             .verify();\n     }\n \n     @Test\n     void createEntityAsync() {\n-        //Arrange\n-        String partitionKeyValue = testResourceNamer.randomName(\"partitionKey\", 20);\n-        String rowKeyValue = testResourceNamer.randomName(\"rowKey\", 20);\n-        Entity tableEntity = new Entity(partitionKeyValue, rowKeyValue);\n-        //Act & Assert\n+        // Arrange\n+        final String partitionKeyValue = testResourceNamer.randomName(\"partitionKey\", 20);\n+        final String rowKeyValue = testResourceNamer.randomName(\"rowKey\", 20);\n+        final Entity tableEntity = new Entity(partitionKeyValue, rowKeyValue);\n+\n+        // Act & Assert\n         StepVerifier.create(asyncClient.createEntity(tableEntity))\n             .assertNext(response -> {\n-                Assertions.assertEquals(response.getPartitionKey(), partitionKeyValue);\n-                Assertions.assertEquals(response.getRowKey(), rowKeyValue);\n-                Assertions.assertNotNull(response.getETag());\n-\n+                assertEquals(response.getPartitionKey(), partitionKeyValue);\n+                assertEquals(response.getRowKey(), rowKeyValue);\n+                assertNotNull(response.getETag());\n             })\n             .expectComplete()\n             .verify();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3ODY1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12923#discussion_r461078652", "bodyText": "@conniey having trouble getting this filter to work", "author": "eboyd23", "createdAt": "2020-07-27T18:15:21Z", "path": "sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/TableServiceAsyncClientTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.policy.HttpLogDetailLevel;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n+import com.azure.data.tables.models.QueryParams;\n+import com.azure.storage.common.implementation.connectionstring.StorageConnectionString;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import reactor.test.StepVerifier;\n+\n+\n+public class TableServiceAsyncClientTest extends TestBase {\n+    private String connectionString = System.getenv(\"AZURE_TABLES_CONNECTION_STRING\");\n+    private final ClientLogger logger = new ClientLogger(TableServiceAsyncClientTest.class);\n+\n+    private TableServiceClient client;\n+    private TableServiceClient clientEndpoint;\n+    private TableServiceAsyncClient asyncClient;\n+    private TableAsyncClient asyncClientTable;\n+\n+    private static final String PARTITION_KEY = \"PartitionKey\";\n+    private static final String ROW_KEY = \"RowKey\";\n+\n+\n+    @Override\n+    protected void beforeTest() {\n+        client = new TableServiceClientBuilder()\n+            .connectionString(connectionString)\n+            .addPolicy(new HttpLoggingPolicy(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS)))\n+            .buildClient();\n+\n+        asyncClient = new TableServiceClientBuilder()\n+            .connectionString(connectionString)\n+            .addPolicy(new AddHeadersPolicy(new HttpHeaders().put(\"Accept\",\n+                OdataMetadataFormat.APPLICATION_JSON_ODATA_MINIMALMETADATA.toString())))\n+            .addPolicy(new HttpLoggingPolicy(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS)))\n+            .buildAsyncClient();\n+\n+        StorageConnectionString storageConnectionString\n+            = StorageConnectionString.create(connectionString, logger);\n+\n+        clientEndpoint = new TableServiceClientBuilder()\n+            .endpoint(storageConnectionString.getTableEndpoint().getPrimaryUri())\n+            .addPolicy(new HttpLoggingPolicy(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS)))\n+            .buildClient();\n+\n+\n+    }\n+\n+    @Test\n+    void createTableAsync() {\n+        // Arrange\n+        String tableName = testResourceNamer.randomName(\"test\", 20);\n+\n+        //Act & Assert\n+        StepVerifier.create(asyncClient.createTable(tableName))\n+            .assertNext(response -> {\n+                Assertions.assertEquals(tableName, response.getName());\n+\n+            })\n+            .expectComplete()\n+            .verify();\n+    }\n+\n+    @Test\n+    void createTableWithResponseAsync() {\n+        // Arrange\n+        String tableName = testResourceNamer.randomName(\"test\", 20);\n+        int expectedStatusCode = 201;\n+\n+        //Act & Assert\n+        StepVerifier.create(asyncClient.createTableWithResponse(tableName))\n+            .assertNext(response -> {\n+                Assertions.assertEquals(expectedStatusCode, response.getStatusCode());\n+\n+            })\n+            .expectComplete()\n+            .verify();\n+    }\n+\n+    @Test\n+    void deleteTableAsync() {\n+        // Arrange\n+        String tableName = testResourceNamer.randomName(\"test\", 20);\n+        asyncClient.createTable(tableName).block();\n+\n+        //Act & Assert\n+        StepVerifier.create(asyncClient.deleteTable(tableName))\n+            .expectComplete()\n+            .verify();\n+    }\n+\n+    @Test\n+    void deleteTableWithResponseAsync() {\n+        // Arrange\n+        String tableName = testResourceNamer.randomName(\"test\", 20);\n+        int expectedStatusCode = 204;\n+        asyncClient.createTable(tableName).block();\n+\n+        //Act & Assert\n+        StepVerifier.create(asyncClient.deleteTableWithResponse(tableName))\n+            .assertNext(response -> {\n+                Assertions.assertEquals(expectedStatusCode, response.getStatusCode());\n+            })\n+            .expectComplete()\n+            .verify();\n+    }\n+\n+    @Test\n+    void listTableWithResponse() {\n+        // Arrange\n+\n+        //Act & Assert\n+        StepVerifier.create(asyncClient.listTables())\n+            .assertNext(table -> {\n+                System.out.print(table);\n+            })\n+            .expectComplete()\n+            .verify();\n+\n+    }\n+\n+    @Test\n+    void listTableWithResponseWithParams() {\n+        // Arrange\n+        QueryParams queryParams = new QueryParams().setFilter(\"TableName eq SampleTable\");", "originalCommit": "e52e2acb5561b28bd940495d4f0df47fea17dcf7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2477250b38c1ff7b8874642803c30ffe242473a", "chunk": "diff --git a/sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/TableServiceAsyncClientTest.java b/sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/TableServiceAsyncClientTest.java\nindex 2ece0db5d93..c22be23c6af 100644\n--- a/sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/TableServiceAsyncClientTest.java\n+++ b/sdk/tables/azure-data-tables/src/test/java/com/azure/data/tables/TableServiceAsyncClientTest.java\n\n@@ -3,61 +3,58 @@\n \n package com.azure.data.tables;\n \n-import com.azure.core.http.HttpHeaders;\n-import com.azure.core.http.policy.AddHeadersPolicy;\n+import com.azure.core.http.HttpClient;\n import com.azure.core.http.policy.HttpLogDetailLevel;\n import com.azure.core.http.policy.HttpLogOptions;\n-import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.RetryPolicy;\n import com.azure.core.test.TestBase;\n-import com.azure.core.util.logging.ClientLogger;\n-import com.azure.data.tables.implementation.models.OdataMetadataFormat;\n import com.azure.data.tables.models.QueryParams;\n-import com.azure.storage.common.implementation.connectionstring.StorageConnectionString;\n+import org.junit.jupiter.api.AfterAll;\n import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n import reactor.test.StepVerifier;\n \n+import java.time.Duration;\n \n+/**\n+ * Tests methods for {@link TableServiceAsyncClient}.\n+ */\n public class TableServiceAsyncClientTest extends TestBase {\n-    private String connectionString = System.getenv(\"AZURE_TABLES_CONNECTION_STRING\");\n-    private final ClientLogger logger = new ClientLogger(TableServiceAsyncClientTest.class);\n-\n-    private TableServiceClient client;\n-    private TableServiceClient clientEndpoint;\n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n     private TableServiceAsyncClient asyncClient;\n-    private TableAsyncClient asyncClientTable;\n \n-    private static final String PARTITION_KEY = \"PartitionKey\";\n-    private static final String ROW_KEY = \"RowKey\";\n+    @BeforeAll\n+    static void beforeAll() {\n+        StepVerifier.setDefaultTimeout(TIMEOUT);\n+    }\n \n+    @AfterAll\n+    static void afterAll() {\n+        StepVerifier.resetDefaultTimeout();\n+    }\n \n     @Override\n     protected void beforeTest() {\n-        client = new TableServiceClientBuilder()\n+        final String connectionString = TestUtils.getConnectionString(interceptorManager.isPlaybackMode());\n+        final TableServiceClientBuilder builder = new TableServiceClientBuilder()\n             .connectionString(connectionString)\n-            .addPolicy(new HttpLoggingPolicy(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS)))\n-            .buildClient();\n-\n-        asyncClient = new TableServiceClientBuilder()\n-            .connectionString(connectionString)\n-            .addPolicy(new AddHeadersPolicy(new HttpHeaders().put(\"Accept\",\n-                OdataMetadataFormat.APPLICATION_JSON_ODATA_MINIMALMETADATA.toString())))\n-            .addPolicy(new HttpLoggingPolicy(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS)))\n-            .buildAsyncClient();\n-\n-        StorageConnectionString storageConnectionString\n-            = StorageConnectionString.create(connectionString, logger);\n-\n-        clientEndpoint = new TableServiceClientBuilder()\n-            .endpoint(storageConnectionString.getTableEndpoint().getPrimaryUri())\n-            .addPolicy(new HttpLoggingPolicy(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS)))\n-            .buildClient();\n+            .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS));\n \n+        if (interceptorManager.isPlaybackMode()) {\n+            builder.httpClient(interceptorManager.getPlaybackClient());\n+        } else {\n+            builder.httpClient(HttpClient.createDefault())\n+                .addPolicy(interceptorManager.getRecordPolicy())\n+                .addPolicy(new RetryPolicy());\n+        }\n \n+        asyncClient = builder.buildAsyncClient();\n     }\n \n     @Test\n-    void createTableAsync() {\n+    void serviceCreateTableAsync() {\n         // Arrange\n         String tableName = testResourceNamer.randomName(\"test\", 20);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3OTA3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12923#discussion_r461079070", "bodyText": "@conniey Need to get this to be private but accessible to the service client", "author": "eboyd23", "createdAt": "2020-07-27T18:16:03Z", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/models/Entity.java", "diffHunk": "@@ -0,0 +1,114 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * table entity class\n+ */\n+@Fluent\n+public class Entity {\n+    private Object rowKey;\n+    private Object partitionKey;\n+    private final Map<String, Object> properties;\n+    private String etag;\n+    //tableName\n+    //etag\n+\n+    /**\n+     * creates a new TableEntity\n+     *\n+     * @param partitionKey the partition key\n+     * @param rowKey the row key\n+     */\n+    public Entity(Object partitionKey, Object rowKey) {\n+        properties = new HashMap<>();\n+        setPartitionKey(partitionKey);\n+        setRowKey(rowKey);\n+        properties.put(\"PartitionKey\", partitionKey);\n+        properties.put(\"RowKey\", rowKey);\n+    }\n+\n+    private Entity(Map<String, Object> properties) {\n+        this.properties = properties;\n+    }\n+\n+    /**\n+     * returns a map of properties\n+     *\n+     * @return map of properties of thsi entity\n+     */\n+    public Map<String, Object> getProperties() {\n+        return properties;\n+    }\n+\n+    /**\n+     * add a property to an entity\n+     *\n+     * @param key the key of the value\n+     * @param value the value to add\n+     * @return the updated Entity\n+     */\n+    public Entity addProperties(String key, Object value) {\n+        properties.put(key, value);\n+        return this;\n+    }\n+\n+    /**\n+     * gets the row key\n+     *\n+     * @return the row key for the given entity\n+     */\n+    public Object getRowKey() {\n+        return rowKey;\n+    }\n+\n+    /**\n+     * gets the partition key\n+     *\n+     * @return the partition key for the given entity\n+     */\n+    public Object getPartitionKey() {\n+        return partitionKey;\n+    }\n+\n+    /**\n+     * gets the etag\n+     *\n+     * @return the etag for the entity\n+     */\n+    public String getETag() {\n+        return etag;\n+    }\n+\n+    public Entity setEtag(String etag) {", "originalCommit": "e52e2acb5561b28bd940495d4f0df47fea17dcf7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2477250b38c1ff7b8874642803c30ffe242473a", "chunk": "diff --git a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/models/Entity.java b/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/models/Entity.java\nindex fce7506a7f9..2f3bed527e9 100644\n--- a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/models/Entity.java\n+++ b/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/models/Entity.java\n\n@@ -4,56 +4,77 @@\n package com.azure.data.tables.models;\n \n import com.azure.core.annotation.Fluent;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.data.tables.implementation.EntityHelper;\n+import com.azure.data.tables.implementation.TableConstants;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Objects;\n+\n+import static com.azure.data.tables.implementation.TableConstants.PARTITION_KEY;\n+import static com.azure.data.tables.implementation.TableConstants.ROW_KEY;\n \n /**\n  * table entity class\n  */\n @Fluent\n public class Entity {\n-    private Object rowKey;\n-    private Object partitionKey;\n-    private final Map<String, Object> properties;\n-    private String etag;\n-    //tableName\n-    //etag\n+    private final ClientLogger logger = new ClientLogger(Entity.class);\n+    private final String partitionKey;\n+    private final String rowKey;\n+    private final Map<String, Object> properties = new HashMap<>();\n+\n+    private String eTag;\n+\n+    static {\n+        // This is used by classes in different packages to get access to private and package-private methods.\n+        EntityHelper.setEntityAccessor((entity, name) -> entity.setETag(name));\n+    }\n \n     /**\n-     * creates a new TableEntity\n+     * Create a new instance.\n      *\n      * @param partitionKey the partition key\n      * @param rowKey the row key\n      */\n-    public Entity(Object partitionKey, Object rowKey) {\n-        properties = new HashMap<>();\n-        setPartitionKey(partitionKey);\n-        setRowKey(rowKey);\n-        properties.put(\"PartitionKey\", partitionKey);\n-        properties.put(\"RowKey\", rowKey);\n-    }\n+    public Entity(String partitionKey, String rowKey) {\n+        this.rowKey = Objects.requireNonNull(rowKey, \"'rowKey' cannot be null.\");\n+        this.partitionKey = Objects.requireNonNull(partitionKey, \"'partitionKey' cannot be null.\");\n+        Objects.requireNonNull(properties, \"'properties' cannot be null.\");\n \n-    private Entity(Map<String, Object> properties) {\n-        this.properties = properties;\n+        properties.put(PARTITION_KEY, partitionKey);\n+        properties.put(TableConstants.ROW_KEY, rowKey);\n     }\n \n     /**\n-     * returns a map of properties\n+     * Gets the map of properties\n      *\n-     * @return map of properties of thsi entity\n+     * @return map of properties representing this entity\n      */\n     public Map<String, Object> getProperties() {\n         return properties;\n     }\n \n     /**\n-     * add a property to an entity\n+     * Adds a property to the entity.\n      *\n-     * @param key the key of the value\n-     * @param value the value to add\n-     * @return the updated Entity\n+     * @param key Key to for the property.\n+     * @param value Value of the property.\n+     *\n+     * @return The updated {@link Entity} object.\n+     * @throws NullPointerException if {@code key} is null.\n      */\n-    public Entity addProperties(String key, Object value) {\n+    public Entity addProperty(String key, Object value) {\n+        Objects.requireNonNull(key, \"'key' cannot be null.\");\n+\n+        if (PARTITION_KEY.equals(key)) {\n+            throw logger.logExceptionAsError(\n+                new IllegalArgumentException(PARTITION_KEY + \" cannot be set after object creation.\"));\n+        } else if (ROW_KEY.equals(key)) {\n+            throw logger.logExceptionAsError(\n+                new IllegalArgumentException(ROW_KEY + \" cannot be set after object creation.\"));\n+        }\n+\n         properties.put(key, value);\n         return this;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5MjA0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12923#discussion_r461092046", "bodyText": "This should be azure-data-tables.properties", "author": "conniey", "createdAt": "2020-07-27T18:39:25Z", "path": "sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/BuilderHelper.java", "diffHunk": "@@ -0,0 +1,160 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.data.tables;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpPipelineBuilder;\n+import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.core.http.policy.HttpLoggingPolicy;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.http.policy.HttpPolicyProviders;\n+import com.azure.core.http.policy.RequestIdPolicy;\n+import com.azure.core.http.policy.UserAgentPolicy;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.common.implementation.Constants;\n+import com.azure.storage.common.implementation.credentials.SasTokenCredential;\n+import com.azure.storage.common.implementation.policy.SasTokenCredentialPolicy;\n+import com.azure.storage.common.policy.RequestRetryOptions;\n+import com.azure.storage.common.policy.RequestRetryPolicy;\n+import com.azure.storage.common.policy.ResponseValidationPolicyBuilder;\n+import com.azure.storage.common.policy.ScrubEtagPolicy;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+class BuilderHelper {\n+    private static final Map<String, String> PROPERTIES =\n+        CoreUtils.getProperties(\"azure-storage-blob.properties\");", "originalCommit": "1804aa433cd42ec86d1f78147ed7e1675dcc2fb4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2477250b38c1ff7b8874642803c30ffe242473a", "chunk": "diff --git a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/BuilderHelper.java b/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/BuilderHelper.java\nindex 2c3b4f9ca84..1258c08ca89 100644\n--- a/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/BuilderHelper.java\n+++ b/sdk/tables/azure-data-tables/src/main/java/com/azure/data/tables/BuilderHelper.java\n\n@@ -5,9 +5,11 @@ package com.azure.data.tables;\n \n import com.azure.core.credential.TokenCredential;\n import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeaders;\n import com.azure.core.http.HttpPipeline;\n import com.azure.core.http.HttpPipelineBuilder;\n import com.azure.core.http.policy.AddDatePolicy;\n+import com.azure.core.http.policy.AddHeadersPolicy;\n import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;\n import com.azure.core.http.policy.HttpLogOptions;\n import com.azure.core.http.policy.HttpLoggingPolicy;\n"}}, {"oid": "b2477250b38c1ff7b8874642803c30ffe242473a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b2477250b38c1ff7b8874642803c30ffe242473a", "message": "Creating client and tests.", "committedDate": "2020-07-28T18:01:25Z", "type": "commit"}, {"oid": "b2477250b38c1ff7b8874642803c30ffe242473a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b2477250b38c1ff7b8874642803c30ffe242473a", "message": "Creating client and tests.", "committedDate": "2020-07-28T18:01:25Z", "type": "forcePushed"}, {"oid": "8af933f559eb04aa7d85be99837e39de6a1aa11c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8af933f559eb04aa7d85be99837e39de6a1aa11c", "message": "fixing tests", "committedDate": "2020-07-28T19:19:55Z", "type": "commit"}, {"oid": "2b71f40a90b1fb9e9318a17f7e145195c1c759ba", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2b71f40a90b1fb9e9318a17f7e145195c1c759ba", "message": "fixing checkstyles", "committedDate": "2020-07-28T19:25:42Z", "type": "commit"}]}