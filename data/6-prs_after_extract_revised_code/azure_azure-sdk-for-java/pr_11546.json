{"pr_number": 11546, "pr_title": "Fixed exceptions thrown for KeyVault's KeyClient.listPropertiesOfKeyVersions()", "pr_createdAt": "2020-05-29T02:26:40Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/11546", "timeline": [{"oid": "1d1e19aa8ff7eb31661ee97156e422462dcb6612", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1d1e19aa8ff7eb31661ee97156e422462dcb6612", "message": "Fixed keyClient.listPropertiesOfKeyVersions() to throw a ResourceNotFoundException when a given key cannot be found. Also fixed the @throws section of its Javadoc.", "committedDate": "2020-05-29T02:22:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyNzAwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11546#discussion_r432727002", "bodyText": "Resource Not Found exception is used to indicate 404 response from the service.\nif service doesn't throw 404, we should not alter it here as that will result in SDK overriding service behavior and will need to do it manually everywhere in an endless cycle.\nrather change the javadocs to reflect the actual behavior and follow up with the service if this behaviour feels inconsistent or is a bug.", "author": "g2vinay", "createdAt": "2020-05-29T20:46:13Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyAsyncClient.java", "diffHunk": "@@ -1228,8 +1228,14 @@ public String getVaultUrl() {\n             return service.getKeyVersions(vaultUrl, name, DEFAULT_MAX_PAGE_RESULTS, apiVersion, ACCEPT_LANGUAGE,\n                 CONTENT_TYPE_HEADER_VALUE, context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n                 .doOnRequest(ignored -> logger.info(\"Listing key versions - {}\", name))\n-                .doOnSuccess(response -> logger.info(\"Listed key versions - {}\", name))\n-                .doOnError(error -> logger.warning(String.format(\"Failed to list key versions - {}\", name), error));\n+                .doOnSuccess(response -> {\n+                    if (response.getValue().size() == 0) {\n+                        throw new ResourceNotFoundException(String.format(\"Key with name: %s not found\", name), null);", "originalCommit": "1d1e19aa8ff7eb31661ee97156e422462dcb6612", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczNDM0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11546#discussion_r432734345", "bodyText": "Thanks @g2vinay, I will talk to the service team about this then.", "author": "vcolin7", "createdAt": "2020-05-29T21:04:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyNzAwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczNjEzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11546#discussion_r432736136", "bodyText": "Before following up with the service, we should check the service response.\nIf they're already sending 404, then we need to properly map that in KeyService.class.", "author": "g2vinay", "createdAt": "2020-05-29T21:08:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyNzAwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc1NzQ5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11546#discussion_r432757497", "bodyText": "The service does not respond with a 404, its response instead has a status code 200 and a body like this:\n{ \"value\": [], \"nextLink\": null }\nWhich has the same structure as any response where the given key name was found.", "author": "vcolin7", "createdAt": "2020-05-29T21:57:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyNzAwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NDQ5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11546#discussion_r432764491", "bodyText": "The stack trace posted on the linked issue above:\n#11033\nThe issue says 404 is sent by the service.", "author": "g2vinay", "createdAt": "2020-05-29T22:19:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyNzAwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk3OTkxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11546#discussion_r432979918", "bodyText": "In this this comment I outlined how I could not get a 404 unless I send an empty or null key name, anything else returns 200, so unless there was a bug with the service at the time or they changed what the behavior is, the issue is not reproducible with a non-empty key name.", "author": "vcolin7", "createdAt": "2020-05-31T20:12:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyNzAwMg=="}], "type": "inlineReview", "revised_code": {"commit": "d4a2d859b90556ae176c98f7e643ae6a57494f9d", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyAsyncClient.java b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyAsyncClient.java\nindex cf5727ffe43..c629108bd3a 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyAsyncClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyAsyncClient.java\n\n@@ -1228,13 +1228,7 @@ public final class KeyAsyncClient {\n             return service.getKeyVersions(vaultUrl, name, DEFAULT_MAX_PAGE_RESULTS, apiVersion, ACCEPT_LANGUAGE,\n                 CONTENT_TYPE_HEADER_VALUE, context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n                 .doOnRequest(ignored -> logger.info(\"Listing key versions - {}\", name))\n-                .doOnSuccess(response -> {\n-                    if (response.getValue().size() == 0) {\n-                        throw new ResourceNotFoundException(String.format(\"Key with name: %s not found\", name), null);\n-                    } else {\n-                        logger.info(\"Listed key versions - {}\", name);\n-                    }\n-                })\n+                .doOnSuccess(response -> logger.info(\"Listed key versions - {}\", name))\n                 .doOnError(error -> logger.warning(String.format(\"Failed to list key versions - %s\", name), error));\n         } catch (RuntimeException ex) {\n             return monoError(logger, ex);\n"}}, {"oid": "d4a2d859b90556ae176c98f7e643ae6a57494f9d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d4a2d859b90556ae176c98f7e643ae6a57494f9d", "message": "Reverted changes on KeyAsyncClient. Changed KeyService's getKeyVersions() to return a ResourceNotFoundException when the service returns a response with status code 404. Changed KeyClient's javadoc to reflect this change.", "committedDate": "2020-05-31T20:19:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNzIxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11546#discussion_r434137217", "bodyText": "This doesn't abide guidelines: https://azure.github.io/azure-sdk/general_implementation.html#error-handling\n\nThe server error is not exposed, which is reuqired.\nWe shouldn't create derived types when the user has mitigation, like they can check for 404 themselves, which is what we do in other languages.\n\nI think the documentation should be fixed instead of wrapping the service exception (which you're not currently doing anyway) in another one.", "author": "heaths", "createdAt": "2020-06-02T19:50:20Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyService.java", "diffHunk": "@@ -115,6 +115,7 @@\n \n     @Get(\"keys/{key-name}/versions\")\n     @ExpectedResponses({200})\n+    @UnexpectedResponseExceptionType(code = {404}, value = ResourceNotFoundException.class)", "originalCommit": "d4a2d859b90556ae176c98f7e643ae6a57494f9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNzQ2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11546#discussion_r434137467", "bodyText": "You can check my interpretation with architects.", "author": "heaths", "createdAt": "2020-06-02T19:50:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNzIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzODc5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11546#discussion_r434238799", "bodyText": "Thanks for the feedback Heath! About the points you raise:\n\n\nWe do include the server error in both HttpResponseException and ResourceNotFoundException.\n\n\nBoth exceptions mentioned above are a part of azure-core for Java, so we would not be creating a new derived type, just using a different one that is more specific to the case. In any case, since there are not\n\n\nI do agree the documentation should be fixed since it doesn't reflect current behavior.\nOne thing I'm not sure about, is the use of exceptions for server errors that are not specified in a service's swagger: in this case, it specifies that a successful response will only have a status code 200. Since the guidelines say that we should produce an error for all other cases, it seems ok to me to produce an exception like the ones I mentioned, we even do it for endpoints like /keys/{key-name}/backup where there is no specific mention of a 404 status code.\nI will also be bringing this up with an architect like you suggested :)", "author": "vcolin7", "createdAt": "2020-06-03T00:03:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNzIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzOTI3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11546#discussion_r434239273", "bodyText": "as per java guidelines, we should throw ResourceNotFoundException when service sends back 404.", "author": "g2vinay", "createdAt": "2020-06-03T00:05:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNzIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2OTI4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11546#discussion_r434269286", "bodyText": "Should we then add this same exception to the other endpoints that don't have it?", "author": "vcolin7", "createdAt": "2020-06-03T02:08:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNzIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwOTA5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11546#discussion_r434309099", "bodyText": "All these would be breaking changes, I assume, including this PR.", "author": "vcolin7", "createdAt": "2020-06-03T05:02:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNzIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMDgwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11546#discussion_r434320805", "bodyText": "Yes, this would be a breaking change. To note, we don't throw an exception for .NET, and I don't believe Python or TS do as well. I think the code needs to be left as-is and the documentation fixed to reflect reality.", "author": "heaths", "createdAt": "2020-06-03T05:44:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNzIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMTYxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11546#discussion_r434321618", "bodyText": "This would not be a breaking change, I believe.\nFor 404, We currently throw HttpResponseException.\nThis change will throw ResourceNotFoundException which extends HttpResponseException.", "author": "g2vinay", "createdAt": "2020-06-03T05:47:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNzIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0Nzg5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11546#discussion_r434447890", "bodyText": "Except the discussion in the issue was about not returning a 404, but instead a 200 with an empty list. In what cases are you getting a 404 where you didn't during your investigation? If an empty list was returned before, and not you throw an exception - any exception - that is a breaking change.", "author": "heaths", "createdAt": "2020-06-03T09:52:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNzIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1MTYzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11546#discussion_r434451635", "bodyText": "For example, .NET doesn't throw - it just gets an empty enumerable. Is that desirable? Probably not, but it's what the server returned to us. So I'm not even sure this fix would do anything since the service is not returning a 404 (proved with Postman earlier as well).", "author": "heaths", "createdAt": "2020-06-03T09:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNzIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ2NTQyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11546#discussion_r434465421", "bodyText": "JS and Python also return an empty list / don't throw. My point, though, is that if you're not already throwing - and it seems you wouldn't be, given the conversation Tuesday morning with @vcolin7 - this would be a breaking change. If you are already throwing, then since you derive the extension class that does seem fine to have something more specific.", "author": "heaths", "createdAt": "2020-06-03T10:24:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNzIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3ODM0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11546#discussion_r434878347", "bodyText": "So, my understanding of all this is:\n\nDon't throw when we get a server response with an empty list and status code 200\nIt is ok to throw a more specific exception that extends from the one we already throw today.\n\nIs this correct?", "author": "vcolin7", "createdAt": "2020-06-03T21:51:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNzIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3OTgxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11546#discussion_r434879818", "bodyText": "If the response is 200, we don't throw any exceptions currently and return the empty list already.\nWhen we get 404, as the user reported issue #11033  mentions, we should throw the more specific exception.", "author": "g2vinay", "createdAt": "2020-06-03T21:55:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNzIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkyMjg2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11546#discussion_r434922865", "bodyText": "If they get a 404, yes, but @vcolin7 was unable to reproduce that. That said, I guess I don't see a harm in this as long as you're sure you're not throwing when an empty result is returned (i.e. 200).", "author": "heaths", "createdAt": "2020-06-04T00:10:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNzIxNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkzMDAxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11546#discussion_r434930018", "bodyText": "we need to update KeyAsyncClient doc too.", "author": "g2vinay", "createdAt": "2020-06-04T00:39:09Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/main/java/com/azure/security/keyvault/keys/KeyClient.java", "diffHunk": "@@ -757,8 +757,7 @@ public KeyVaultKey restoreKeyBackup(byte[] backup) {\n      * @param name The name of the key.\n      * @return {@link PagedIterable} of {@link KeyProperties key} of all the versions of the specified key in the vault. List\n      *     is empty if key with {@code name} does not exist in key vault.\n-     * @throws ResourceNotFoundException when a key with {@code name} doesn't exist in the key vault.\n-     * @throws HttpResponseException when a key with {@code name} is empty string.\n+     * @throws ResourceNotFoundException when a given key {@code name} is null or an empty string.", "originalCommit": "d4a2d859b90556ae176c98f7e643ae6a57494f9d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "598e2f1b31809f2393ada361a03c9c80fd1e1b78", "url": "https://github.com/Azure/azure-sdk-for-java/commit/598e2f1b31809f2393ada361a03c9c80fd1e1b78", "message": "Updated the @throws section on KeyAsyncClient.listPropertiesOfKeyVersions' Javadoc.", "committedDate": "2020-06-04T04:01:39Z", "type": "commit"}]}