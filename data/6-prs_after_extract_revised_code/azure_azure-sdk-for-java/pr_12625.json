{"pr_number": 12625, "pr_title": "Update RecognizeOptions to take only optional params", "pr_createdAt": "2020-06-29T21:38:30Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/12625", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3MTc5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447271797", "bodyText": "why do we make a copy of the user-provided options here?", "author": "srnagar", "createdAt": "2020-06-29T21:44:13Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -687,13 +726,14 @@ private void throwIfAnalyzeStatusInvalid(AnalyzeOperationResult analyzeResponse)\n         return Mono.just(new PollResponse<>(status, operationResultPollResponse.getValue()));\n     }\n \n-    private static Flux<ByteBuffer> getByteBufferFlux(InputStream form, Flux<ByteBuffer> formData) {\n-        Flux<ByteBuffer> buffer;\n-        if (form != null) {\n-            buffer = Utility.toFluxByteBuffer(form);\n+    private RecognizeOptions getRecognizeOptionsProperties(RecognizeOptions userProvidedOptions) {\n+        if (userProvidedOptions != null) {\n+            return new RecognizeOptions()\n+                .setPollInterval(userProvidedOptions.getPollInterval())\n+                .setFormContentType(userProvidedOptions.getFormContentType())\n+                .setIncludeTextContent(userProvidedOptions.isIncludeTextContent());", "originalCommit": "a5e13b90389d9abfa857967ee7e75089f4089600", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e408233821e1a7a0504ae5976ab78fffea16d22", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\nindex d778f9fe9ac..e4f4b28a22a 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\n\n@@ -728,10 +728,7 @@ public final class FormRecognizerAsyncClient {\n \n     private RecognizeOptions getRecognizeOptionsProperties(RecognizeOptions userProvidedOptions) {\n         if (userProvidedOptions != null) {\n-            return new RecognizeOptions()\n-                .setPollInterval(userProvidedOptions.getPollInterval())\n-                .setFormContentType(userProvidedOptions.getFormContentType())\n-                .setIncludeTextContent(userProvidedOptions.isIncludeTextContent());\n+            return userProvidedOptions;\n         } else {\n             return new RecognizeOptions();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3Nzk1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447277952", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param length The exact length of the data. Size of the file must be less than 50 MB.\n          \n          \n            \n                 * @param length The exact length of the data. Size of the bytebuffer flux must be less than 50 MB.", "author": "srnagar", "createdAt": "2020-06-29T21:58:27Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -271,10 +299,12 @@\n      * {@code Flux} must produce the same data each time it is subscribed to.\n      *\n      * <p><strong>Code sample</strong></p>\n-     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#recognizeOptions}\n+     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#Flux-long-recognizeOptions}\n      *\n-     * @param recognizeOptions The configurable {@code RecognizeOptions options} that may be passed when recognizing\n-     * content on a form.\n+     * @param form The data of the form to recognize content information from.\n+     * @param length The exact length of the data. Size of the file must be less than 50 MB.", "originalCommit": "a5e13b90389d9abfa857967ee7e75089f4089600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3ODY1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447278654", "bodyText": "Actually, we should just remove this limit from the javadoc as the limit is controlled by the service and an error will be thrown from the service if the limit exceeds. This allows service to increase or decrease the limit dynamically.", "author": "srnagar", "createdAt": "2020-06-29T22:00:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3Nzk1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6e408233821e1a7a0504ae5976ab78fffea16d22", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\nindex d778f9fe9ac..e4f4b28a22a 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\n\n@@ -302,7 +302,7 @@ public final class FormRecognizerAsyncClient {\n      * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent#Flux-long-recognizeOptions}\n      *\n      * @param form The data of the form to recognize content information from.\n-     * @param length The exact length of the data. Size of the file must be less than 50 MB.\n+     * @param length The exact length of the data.\n      * @param recognizeOptions The additional configurable {@link RecognizeOptions options} that may be passed when\n      * recognizing content/layout on a form.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MDM4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447280387", "bodyText": "Change file to flux of bytebuffer.", "author": "srnagar", "createdAt": "2020-06-29T22:04:12Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java", "diffHunk": "@@ -383,10 +425,12 @@\n      * {@code Flux} must produce the same data each time it is subscribed to.\n      *\n      * <p><strong>Code sample</strong></p>\n-     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts#recognizeOptions}\n+     * {@codesnippet com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts#Flux-long-recognizeOptions}\n      *\n-     * @param recognizeOptions The configurable {@code RecognizeOptions options} that may be passed when recognizing\n-     * receipt data on the provided receipt document.\n+     * @param receipt The data of the document to recognize receipt information from.\n+     * @param length The exact length of the data. Size of the file must be less than 50 MB", "originalCommit": "a5e13b90389d9abfa857967ee7e75089f4089600", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "135dd4c46f61dc516099a0e9183f6349f541aac9", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\nindex d778f9fe9ac..5fe711a3058 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClient.java\n\n@@ -420,6 +419,7 @@ public final class FormRecognizerAsyncClient {\n      * and a prebuilt receipt trained model.\n      * <p>The service does not support cancellation of the long running operation and returns with an\n      * error message indicating absence of cancellation support.</p>\n+     * See <a href=\"https://aka.ms/azsdk/python/formrecognizer/receiptfields\">here</a> for fields found on a receipt.\n      *\n      * Note that the {@code data} passed must be replayable if retries are enabled (the default). In other words, the\n      * {@code Flux} must produce the same data each time it is subscribed to.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI5MzM2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447293366", "bodyText": "subscribe inside another subscribe looks a bit odd. Can we instead use reactor pattern here?\nformRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(...)\n        .flatMap(recognizePollingOperation -> recognizePollingOperation.getFinalResult())\n        .subscribe(recognizedReceipts -> {...});", "author": "srnagar", "createdAt": "2020-06-29T22:25:51Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -274,16 +329,68 @@ public void beginRecognizeReceiptsFromUrl() {\n     }\n \n     /**\n-     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceipts(Flux, long, FormContentType)}\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceiptsFromUrl(String, RecognizeOptions)}\n+     */\n+    public void beginRecognizeReceiptsFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string-recognizeOptions\n+        String receiptUrl = \"{file_source_url}\";\n+        boolean includeTextContent = true;\n+        formRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(receiptUrl,\n+            new RecognizeOptions()\n+                .setIncludeTextContent(includeTextContent)\n+                .setPollInterval(Duration.ofSeconds(5)))\n+            .subscribe(recognizePollingOperation -> {\n+                // if training polling operation completed, retrieve the final result.\n+                recognizePollingOperation.getFinalResult().subscribe(recognizedReceipts -> {\n+                    for (int i = 0; i < recognizedReceipts.size(); i++) {\n+                        RecognizedReceipt recognizedReceipt = recognizedReceipts.get(i);", "originalCommit": "a5e13b90389d9abfa857967ee7e75089f4089600", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e408233821e1a7a0504ae5976ab78fffea16d22", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\nindex c7f55ba6127..fc0208f0e02 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java\n\n@@ -324,7 +325,6 @@ public class FormRecognizerAsyncClientJavaDocCodeSnippets {\n                     }\n                 }\n             });\n-        });\n         // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgxMjExNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447812115", "bodyText": "In .NET we call this field ContentType only (without the Form prefix). Are we concerned about consistency in fields names? If formContentType feels more idiomatic to Java, I believe that's not a big concern on the .NET side and can be easily updated.", "author": "kinelski", "createdAt": "2020-06-30T16:20:46Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/RecognizeOptions.java", "diffHunk": "@@ -3,64 +3,19 @@\n package com.azure.ai.formrecognizer.models;\n \n import com.azure.core.annotation.Fluent;\n-import reactor.core.publisher.Flux;\n \n-import java.io.InputStream;\n-import java.nio.ByteBuffer;\n import java.time.Duration;\n \n /**\n  * Options that may be passed when using recognize APIs on Form Recognizer client.\n  */\n @Fluent\n public class RecognizeOptions {\n-    private final InputStream form;\n-    private final Flux<ByteBuffer> formData;\n-    private final long length;\n-    private final String formUrl;\n     private FormContentType formContentType;", "originalCommit": "f577718a56cdb0c08c186632cd02004cec6fa2f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwMDM3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447900371", "bodyText": "I think we agreed to keep this model named FormContentType.\n@kristapratico and @jeremymeng can you confirm what Python and JS have?", "author": "samvaity", "createdAt": "2020-06-30T18:39:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgxMjExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNTE2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447905164", "bodyText": "The model is called FormContentType as well in .NET. I'm talking about the formContentType, which is simply ContentType in .NET. I know it's private, but since you have the public getFormContentType method, I was wondering whether we should update its name in .NET.", "author": "kinelski", "createdAt": "2020-06-30T18:48:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgxMjExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxNTYxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447915611", "bodyText": "We renamed the type to FormContentType to differentiate from general content type as only a handful content types are supported.", "author": "jeremymeng", "createdAt": "2020-06-30T19:04:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgxMjExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyNDgwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447924808", "bodyText": "We are all in the same page with the name of the type.\nI think what @kinelski is pointing out is the name of the property. Currently .NET, JS, and Python have Content Type for the property name.", "author": "maririos", "createdAt": "2020-06-30T19:22:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgxMjExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk0MTU3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r447941577", "bodyText": "we don't have this in an option bag in JS.  for parameters it's just contentType", "author": "jeremymeng", "createdAt": "2020-06-30T19:54:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgxMjExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0OTY0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r448049642", "bodyText": "I am inclined to keep it consistent with the property name unless we have any strong objections.", "author": "samvaity", "createdAt": "2020-07-01T00:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgxMjExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2ODA2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r448068066", "bodyText": "I am not against it, although I will like to understand why the deviation from the other languages though", "author": "maririos", "createdAt": "2020-07-01T01:36:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgxMjExNQ=="}], "type": "inlineReview", "revised_code": {"commit": "dd30d74e367b57cd12ea938d1980e1e216d65165", "chunk": "diff --git a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/RecognizeOptions.java b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/RecognizeOptions.java\nindex b3e02a86907..5ca81222681 100644\n--- a/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/RecognizeOptions.java\n+++ b/sdk/formrecognizer/azure-ai-formrecognizer/src/main/java/com/azure/ai/formrecognizer/models/RecognizeOptions.java\n\n@@ -12,7 +12,7 @@ import java.time.Duration;\n @Fluent\n public class RecognizeOptions {\n     private FormContentType formContentType;\n-    private boolean includeTextContent;\n+    private boolean includeFieldElements;\n     private Duration pollInterval = DEFAULT_POLL_INTERVAL;\n     private static final Duration DEFAULT_POLL_INTERVAL = Duration.ofSeconds(5);\n \n"}}, {"oid": "6e408233821e1a7a0504ae5976ab78fffea16d22", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6e408233821e1a7a0504ae5976ab78fffea16d22", "message": "review comments", "committedDate": "2020-07-01T00:39:30Z", "type": "forcePushed"}, {"oid": "135dd4c46f61dc516099a0e9183f6349f541aac9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/135dd4c46f61dc516099a0e9183f6349f541aac9", "message": "review comments", "committedDate": "2020-07-01T21:26:11Z", "type": "forcePushed"}, {"oid": "3a328d17f91dd1e682c2591d926d8b980ee37694", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3a328d17f91dd1e682c2591d926d8b980ee37694", "message": "review comments", "committedDate": "2020-07-01T21:32:26Z", "type": "forcePushed"}, {"oid": "dd30d74e367b57cd12ea938d1980e1e216d65165", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dd30d74e367b57cd12ea938d1980e1e216d65165", "message": "update options to take optional params", "committedDate": "2020-07-02T02:48:28Z", "type": "commit"}, {"oid": "392d12999fb4a0100d4818f134311ef719552931", "url": "https://github.com/Azure/azure-sdk-for-java/commit/392d12999fb4a0100d4818f134311ef719552931", "message": "review comments", "committedDate": "2020-07-02T02:48:59Z", "type": "commit"}, {"oid": "e93d5fff08151176765039411f066c87ccffd6e6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e93d5fff08151176765039411f066c87ccffd6e6", "message": "rebase changes", "committedDate": "2020-07-02T03:46:45Z", "type": "commit"}, {"oid": "e93d5fff08151176765039411f066c87ccffd6e6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e93d5fff08151176765039411f066c87ccffd6e6", "message": "rebase changes", "committedDate": "2020-07-02T03:46:45Z", "type": "forcePushed"}, {"oid": "8af7125bed7abbc115af554f4cd7677a29e0ad0c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8af7125bed7abbc115af554f4cd7677a29e0ad0c", "message": "rename formContentType", "committedDate": "2020-07-02T18:27:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzMjg5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r449232890", "bodyText": "Use forEach() instead or you can also show the reactor pattern here:\nformRecognizerAsyncClient.beginRecognizeReceipts(buffer, receipt.length())\n     .flatMap(recognizePollingOperation -> recognizePollingOperation.getFinalResult())\n     .flatMap(recognizedReceipts -> Flux.fromIterable(recognizedReceipts))\n     .subscribe(recognizedReceipt -> {...});", "author": "srnagar", "createdAt": "2020-07-02T19:46:15Z", "path": "sdk/formrecognizer/azure-ai-formrecognizer/src/samples/java/com/azure/ai/formrecognizer/FormRecognizerAsyncClientJavaDocCodeSnippets.java", "diffHunk": "@@ -264,115 +323,170 @@ public void beginRecognizeReceiptsFromUrl() {\n                     }\n                 }\n             });\n-        });\n         // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string\n     }\n \n     /**\n-     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceipts(Flux, long, FormContentType)}\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceiptsFromUrl(String, RecognizeOptions)}\n+     */\n+    public void beginRecognizeReceiptsFromUrlWithOptions() {\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string-recognizeOptions\n+        String receiptUrl = \"{receiptUrl}\";\n+        boolean includeTextContent = true;\n+        formRecognizerAsyncClient.beginRecognizeReceiptsFromUrl(receiptUrl,\n+            new RecognizeOptions()\n+                .setIncludeFieldElements(includeTextContent)\n+                .setPollInterval(Duration.ofSeconds(5)))\n+            .flatMap(recognizePollingOperation ->\n+                // if training polling operation completed, retrieve the final result.\n+                recognizePollingOperation.getFinalResult())\n+            .subscribe(recognizedReceipts -> {\n+                for (int i = 0; i < recognizedReceipts.size(); i++) {\n+                    RecognizedReceipt recognizedReceipt = recognizedReceipts.get(i);\n+                    Map<String, FormField> recognizedFields = recognizedReceipt.getRecognizedForm().getFields();\n+                    System.out.printf(\"----------- Recognized Receipt page %s -----------%n\", i);\n+                    FormField merchantNameField = recognizedFields.get(\"MerchantName\");\n+                    if (merchantNameField.getFieldValue().getType() == FieldValueType.STRING) {\n+                        System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n+                            merchantNameField.getFieldValue().asString(),\n+                            merchantNameField.getConfidence());\n+                    }\n+                    FormField transactionDateField = recognizedFields.get(\"TransactionDate\");\n+                    if (transactionDateField.getFieldValue().getType() == FieldValueType.DATE) {\n+                        System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n+                            transactionDateField.getFieldValue().asDate(),\n+                            transactionDateField.getConfidence());\n+                    }\n+                    FormField receiptItemsField = recognizedFields.get(\"Items\");\n+                    System.out.printf(\"Receipt Items: %n\");\n+                    if (receiptItemsField.getFieldValue().getType() == FieldValueType.LIST) {\n+                        List<FormField> receiptItems = receiptItemsField.getFieldValue().asList();\n+                        receiptItems.forEach(receiptItem -> {\n+                            if (receiptItem.getFieldValue().getType() == FieldValueType.MAP) {\n+                                receiptItem.getFieldValue().asMap().forEach((key, formField) -> {\n+                                    if (key.equals(\"Quantity\")) {\n+                                        if (formField.getFieldValue().getType() == FieldValueType.INTEGER) {\n+                                            System.out.printf(\"Quantity: %s, confidence: %.2f%n\",\n+                                                formField.getFieldValue().asInteger(), formField.getConfidence());\n+                                        }\n+                                    }\n+                                });\n+                            }\n+                        });\n+                    }\n+                }\n+            });\n+        // END: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceiptsFromUrl#string-recognizeOptions\n+    }\n+\n+    /**\n+     * Code snippet for {@link FormRecognizerAsyncClient#beginRecognizeReceipts(Flux, long)}\n      *\n      * @throws IOException Exception thrown when there is an error in reading all the bytes from the File.\n      */\n     public void beginRecognizeReceipts() throws IOException {\n-        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts#Flux-long-FormContentType\n-        File receipt = new File(\"{local/file_path/fileName.jpg}\");\n-        // Utility method to convert input stream to Byte buffer\n+        // BEGIN: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeReceipts#Flux-long\n+        File receipt = new File(\"{file_source_url}\");\n         Flux<ByteBuffer> buffer = toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(receipt.toPath())));\n-        formRecognizerAsyncClient.beginRecognizeReceipts(buffer, receipt.length(), FormContentType.IMAGE_JPEG)\n-            .subscribe(recognizePollingOperation -> {\n+        formRecognizerAsyncClient.beginRecognizeReceipts(buffer, receipt.length())\n+            .flatMap(recognizePollingOperation ->\n                 // if training polling operation completed, retrieve the final result.\n-                recognizePollingOperation.getFinalResult().subscribe(recognizedReceipts -> {\n-                    for (int i = 0; i < recognizedReceipts.size(); i++) {\n-                        RecognizedReceipt recognizedReceipt = recognizedReceipts.get(i);\n-                        Map<String, FormField> recognizedFields = recognizedReceipt.getRecognizedForm().getFields();\n-                        System.out.printf(\"----------- Recognized Receipt page %s -----------%n\", i);\n-                        FormField merchantNameField = recognizedFields.get(\"MerchantName\");\n-                        if (merchantNameField.getFieldValue().getType() == FieldValueType.STRING) {\n-                            System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n-                                merchantNameField.getFieldValue().asString(),\n-                                merchantNameField.getConfidence());\n-                        }\n-                        FormField transactionDateField = recognizedFields.get(\"TransactionDate\");\n-                        if (transactionDateField.getFieldValue().getType() == FieldValueType.DATE) {\n-                            System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n-                                transactionDateField.getFieldValue().asDate(),\n-                                transactionDateField.getConfidence());\n-                        }\n-                        FormField receiptItemsField = recognizedFields.get(\"Items\");\n-                        System.out.printf(\"Receipt Items: %n\");\n-                        if (receiptItemsField.getFieldValue().getType() == FieldValueType.LIST) {\n-                            List<FormField> receiptItems = receiptItemsField.getFieldValue().asList();\n-                            receiptItems.forEach(receiptItem -> {\n-                                if (receiptItem.getFieldValue().getType() == FieldValueType.MAP) {\n-                                    receiptItem.getFieldValue().asMap().forEach((key, formField) -> {\n-                                        if (key.equals(\"Quantity\")) {\n-                                            if (formField.getFieldValue().getType() == FieldValueType.INTEGER) {\n-                                                System.out.printf(\"Quantity: %s, confidence: %.2f%n\",\n-                                                    formField.getFieldValue().asInteger(), formField.getConfidence());\n-                                            }\n+                recognizePollingOperation.getFinalResult())\n+            .subscribe(recognizedReceipts -> {\n+                for (int i = 0; i < recognizedReceipts.size(); i++) {", "originalCommit": "8af7125bed7abbc115af554f4cd7677a29e0ad0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI0MTMzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12625#discussion_r449241336", "bodyText": "Yep, I am preparing a follow-up PR for sample and snippets update to follow reactor pattern more!", "author": "samvaity", "createdAt": "2020-07-02T20:06:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzMjg5MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "110ab12e942bbb7fcf7173ff78d449fa71173e0d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/110ab12e942bbb7fcf7173ff78d449fa71173e0d", "message": "checkstyle update", "committedDate": "2020-07-02T22:42:55Z", "type": "commit"}]}