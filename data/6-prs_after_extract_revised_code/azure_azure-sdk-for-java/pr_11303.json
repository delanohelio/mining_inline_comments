{"pr_number": 11303, "pr_title": "Adding new query features", "pr_createdAt": "2020-05-19T09:27:54Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/11303", "timeline": [{"oid": "fe59f9b11abebff6b01924226c67bfb2f831cf05", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fe59f9b11abebff6b01924226c67bfb2f831cf05", "message": "Working groupby implementation.Needs cleanup", "committedDate": "2020-05-17T04:29:50Z", "type": "commit"}, {"oid": "b12b3a98f0e742954342db13ebd51c7e827e4d49", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b12b3a98f0e742954342db13ebd51c7e827e4d49", "message": "Adding support for Nonvalue and Multiple Aggregates.", "committedDate": "2020-05-18T17:13:20Z", "type": "commit"}, {"oid": "46807ea1d07493298a2d424a809d67b6ad7e03ba", "url": "https://github.com/Azure/azure-sdk-for-java/commit/46807ea1d07493298a2d424a809d67b6ad7e03ba", "message": "Fixing aggregates an groupby\nAdding tests for non value and multi aggregates and group by.", "committedDate": "2020-05-19T09:13:12Z", "type": "commit"}, {"oid": "7264e31dca4ccf03597c270d5f3354bc4ce90e66", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7264e31dca4ccf03597c270d5f3354bc4ce90e66", "message": "cleanup", "committedDate": "2020-05-19T09:20:34Z", "type": "commit"}, {"oid": "e945839c8d285bc3a38aa66afcf9c03bb466d037", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e945839c8d285bc3a38aa66afcf9c03bb466d037", "message": "Merge remote-tracking branch 'upstream/master' into groupby-query-feature-support\n\n# Conflicts:\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ModelBridgeInternal.java", "committedDate": "2020-05-19T09:24:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxNzUwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r427517502", "bodyText": "POJO end user type is not expected to extend JsonSerializable. Why are we extending the POJO test classes from POJOSerializable?", "author": "moderakh", "createdAt": "2020-05-19T18:36:50Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/TestSuiteBase.java", "diffHunk": "@@ -1125,4 +1127,88 @@ protected int expectedNumberOfPages(int totalExpectedResult, int maxPageSize) {\n     public static CosmosClientBuilder copyCosmosClientBuilder(CosmosClientBuilder builder) {\n         return CosmosBridgeInternal.cloneCosmosClientBuilder(builder);\n     }\n+\n+\n+    public enum City {\n+        NEW_YORK,\n+        LOS_ANGELES,\n+        SEATTLE\n+    }\n+\n+    public final class Pet extends JsonSerializable {", "originalCommit": "e945839c8d285bc3a38aa66afcf9c03bb466d037", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyNzE4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r427627184", "bodyText": "Yup these will be refactored", "author": "mbhaskar", "createdAt": "2020-05-19T22:04:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxNzUwMg=="}], "type": "inlineReview", "revised_code": {"commit": "e8cee8db224096b62a71fc633cdc86507b5efc20", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/TestSuiteBase.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/TestSuiteBase.java\nindex 6fe73934612..2cbc66353ea 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/TestSuiteBase.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/TestSuiteBase.java\n\n@@ -1135,7 +1138,7 @@ public class TestSuiteBase extends CosmosAsyncClientTest {\n         SEATTLE\n     }\n \n-    public final class Pet extends JsonSerializable {\n+    public final class Pet {\n         @JsonProperty(\"name\")\n         public String name;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxNzg2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r427517863", "bodyText": "please move the test POJO types to standalone files outside of TestSuiteBase. Same as Pet class, etc.", "author": "moderakh", "createdAt": "2020-05-19T18:37:23Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/TestSuiteBase.java", "diffHunk": "@@ -1125,4 +1127,88 @@ protected int expectedNumberOfPages(int totalExpectedResult, int maxPageSize) {\n     public static CosmosClientBuilder copyCosmosClientBuilder(CosmosClientBuilder builder) {\n         return CosmosBridgeInternal.cloneCosmosClientBuilder(builder);\n     }\n+\n+\n+    public enum City {", "originalCommit": "e945839c8d285bc3a38aa66afcf9c03bb466d037", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyNzI0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r427627247", "bodyText": "Sure will move", "author": "mbhaskar", "createdAt": "2020-05-19T22:04:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxNzg2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e8cee8db224096b62a71fc633cdc86507b5efc20", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/TestSuiteBase.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/TestSuiteBase.java\nindex 6fe73934612..2cbc66353ea 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/TestSuiteBase.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/TestSuiteBase.java\n\n@@ -1135,7 +1138,7 @@ public class TestSuiteBase extends CosmosAsyncClientTest {\n         SEATTLE\n     }\n \n-    public final class Pet extends JsonSerializable {\n+    public final class Pet {\n         @JsonProperty(\"name\")\n         public String name;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxOTg3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r427519871", "bodyText": "I think as per central SDK guideline we should avoid protected access modifier. @kushagraThapar please comment if protected is fine here.", "author": "moderakh", "createdAt": "2020-05-19T18:40:49Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/JsonSerializable.java", "diffHunk": "@@ -159,6 +161,15 @@ public void populatePropertyBag() {\n         return getMapper().convertValue(this.propertyBag, HashMap.class);\n     }\n \n+    protected <T> Map<String, T> getMap(String propertyKey) {", "originalCommit": "e945839c8d285bc3a38aa66afcf9c03bb466d037", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyNzQ4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r427627481", "bodyText": "JsonSerializable is an implementation type now. These methods could be public too :)", "author": "mbhaskar", "createdAt": "2020-05-19T22:05:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxOTg3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a76178859a161ae2f23a0c524a87bd50dcd39b6b", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/JsonSerializable.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/JsonSerializable.java\nindex 8bd383147ee..d9d431afe12 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/JsonSerializable.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/JsonSerializable.java\n\n@@ -161,11 +159,11 @@ public class JsonSerializable {\n         return getMapper().convertValue(this.propertyBag, HashMap.class);\n     }\n \n-    protected <T> Map<String, T> getMap(String propertyKey) {\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> Map<String, T> getMap(String propertyKey) {\n         if (this.propertyBag.has(propertyKey)) {\n             Object value = this.get(propertyKey);\n-            return getMapper().convertValue(value, new TypeReference<Map<String, T>>() {\n-            });\n+            return (Map<String, T>) getMapper().convertValue(value, HashMap.class);\n         }\n         return null;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyMjExMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r427522112", "bodyText": "license file header here and in other new files.", "author": "moderakh", "createdAt": "2020-05-19T18:44:38Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.azure.cosmos.implementation.query;", "originalCommit": "e945839c8d285bc3a38aa66afcf9c03bb466d037", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a76178859a161ae2f23a0c524a87bd50dcd39b6b", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\nindex dd6d71a982a..9fcd27ef99a 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n\n@@ -11,7 +11,6 @@ import com.fasterxml.jackson.databind.SerializationFeature;\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n-import java.security.NoSuchAlgorithmException;\n import java.util.List;\n \n public class DistinctHash {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyMjkwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r427522900", "bodyText": "if this is fatal, wrap in approprate RuntimeException and rethrow.", "author": "moderakh", "createdAt": "2020-05-19T18:45:52Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.query.aggregation.AggregateOperator;\n+import com.azure.cosmos.implementation.routing.UInt128;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import java.io.IOException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class GroupingTable {\n+    private static final List<AggregateOperator> EmptyAggregateOperators = new ArrayList<>();\n+\n+    private final Map<UInt128, SingleGroupAggregator> table;\n+    private final Map<String, AggregateOperator> groupByAliasToAggregateType;\n+    private final List<String> orderedAliases;\n+    private final boolean hasSelectValue;\n+\n+    public GroupingTable(\n+        Map<String, AggregateOperator> groupByAliasToAggregateType, List<String> orderedAliases,\n+        boolean hasSelectValue) {\n+        this.table = new HashMap<>();\n+        this.groupByAliasToAggregateType = groupByAliasToAggregateType;\n+        this.orderedAliases = orderedAliases;\n+        this.hasSelectValue = hasSelectValue;\n+    }\n+\n+    public void addPayLoad(GroupByDocumentQueryExecutionContext.RewrittenGroupByProjection rewrittenGroupByProjection) {\n+        try {\n+            final UInt128 groupByKeysHash = DistinctHash.getHash(rewrittenGroupByProjection.getGroupByItems());\n+            SingleGroupAggregator singleGroupAggregator;\n+            if (!this.table.containsKey(groupByKeysHash)) {\n+                singleGroupAggregator = SingleGroupAggregator.create(EmptyAggregateOperators,\n+                                                                     this.groupByAliasToAggregateType,\n+                                                                     this.orderedAliases,\n+                                                                     this.hasSelectValue,\n+                                                                      null);\n+                this.table.put(groupByKeysHash, singleGroupAggregator);\n+            } else {\n+                singleGroupAggregator = table.get(groupByKeysHash);\n+            }\n+\n+            singleGroupAggregator.addValues(rewrittenGroupByProjection.getPayload());\n+\n+        } catch (JsonProcessingException | NoSuchAlgorithmException e) {\n+            //TODO: User logger instead\n+            e.printStackTrace();", "originalCommit": "e945839c8d285bc3a38aa66afcf9c03bb466d037", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a76178859a161ae2f23a0c524a87bd50dcd39b6b", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java\nindex fdb568b6c69..3b49e7ed5b3 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java\n\n@@ -1,12 +1,12 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n package com.azure.cosmos.implementation.query;\n \n import com.azure.cosmos.implementation.Document;\n import com.azure.cosmos.implementation.query.aggregation.AggregateOperator;\n import com.azure.cosmos.implementation.routing.UInt128;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n \n import java.io.IOException;\n-import java.security.NoSuchAlgorithmException;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n"}}, {"oid": "a76178859a161ae2f23a0c524a87bd50dcd39b6b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a76178859a161ae2f23a0c524a87bd50dcd39b6b", "message": "Refactoring and cleanup", "committedDate": "2020-05-20T07:32:09Z", "type": "commit"}, {"oid": "9af0737ef69b75ee9026db1efd040946e6b4be19", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9af0737ef69b75ee9026db1efd040946e6b4be19", "message": "Refactoring and cleanup", "committedDate": "2020-05-20T23:24:22Z", "type": "commit"}, {"oid": "7c792b2deb225c437663f80ea99f86ec5d7edc22", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7c792b2deb225c437663f80ea99f86ec5d7edc22", "message": "Merge remote-tracking branch 'upstream/master' into groupby-query-feature-support\n\n# Conflicts:\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\n#\tsdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AggregateQueryTests.java\n#\tsdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/DistinctQueryTests.java", "committedDate": "2020-06-02T20:30:58Z", "type": "commit"}, {"oid": "e8cee8db224096b62a71fc633cdc86507b5efc20", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e8cee8db224096b62a71fc633cdc86507b5efc20", "message": "Merging latest master\nEnabling the DistinctQueryTests validation\nCleanup and refactoring", "committedDate": "2020-06-02T22:58:37Z", "type": "commit"}, {"oid": "a8fb5d19d9920dfaa039eda6f90dd9bb29313d0c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a8fb5d19d9920dfaa039eda6f90dd9bb29313d0c", "message": "Moving Pojos out of TestSuiteBase\nRefactoring groupby and distinct tests", "committedDate": "2020-06-03T01:00:21Z", "type": "commit"}, {"oid": "f0e7164455ac740c61e4e3265a082d20a0c2d344", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f0e7164455ac740c61e4e3265a082d20a0c2d344", "message": "Cleanup", "committedDate": "2020-06-03T05:27:25Z", "type": "commit"}, {"oid": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bcc778fa80f1ccea27fff4f6f22abea5065da728", "message": "Increasing timeout for distinct test\nfixing multiple aggregate test", "committedDate": "2020-06-03T08:04:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwMDk5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434700994", "bodyText": "hmm, maybe can use recursion? so I think the following can be changed to:\n   private ParallelDocumentQueryExecutionContextBase<T> getContext(IDocumentQueryExecutionComponent<T> component) {\n    if (component instanceof GroupByDocumentQueryExecutionContext) {\n        return this.getContext(((GroupByDocumentQueryExecutionContext<T>) component).getComponent());\n    } if (component instanceof DistinctDocumentQueryExecutionContext) {\n        return this.getContext(((DistinctDocumentQueryExecutionContext<T>) component).getComponent());\n    } else if (component instanceof AggregateDocumentQueryExecutionContext) {\n        return this.getContext(((AggregateDocumentQueryExecutionContext<T>) component).getComponent());\n    } else if (component instanceof SkipDocumentQueryExecutionContext) {\n        return this.getContext(((SkipDocumentQueryExecutionContext<T>) component).getComponent());\n    } else {\n        return (ParallelDocumentQueryExecutionContextBase<T>) component;\n    }\n}", "author": "xinlian12", "createdAt": "2020-06-03T16:31:12Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/TopDocumentQueryExecutionContext.java", "diffHunk": "@@ -138,4 +124,45 @@ public boolean test(FeedResponse<T> frp) {\n             }\n         });\n     }\n+\n+    // TODO: This could be restructured eventually with better design to avoid these many checks", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3MzMxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435773311", "bodyText": "Wanted to avoid recursion deliberately to avoid the extra cost involved in recursion vs few lines of code. Also, we need to redesign the to avoid these checks all together.", "author": "mbhaskar", "createdAt": "2020-06-05T08:36:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwMDk5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0MzYxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r436043615", "bodyText": "I see, thanks for the explanation~", "author": "xinlian12", "createdAt": "2020-06-05T16:52:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwMDk5NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NTMwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434685300", "bodyText": "Error check  if value is not map ?", "author": "simplynaveen20", "createdAt": "2020-06-03T16:07:32Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/JsonSerializable.java", "diffHunk": "@@ -154,6 +154,15 @@ public void populatePropertyBag() {\n         return getMapper().convertValue(this.propertyBag, HashMap.class);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    public <T> Map<String, T> getMap(String propertyKey) {\n+        if (this.propertyBag.has(propertyKey)) {\n+            Object value = this.get(propertyKey);\n+            return (Map<String, T>) getMapper().convertValue(value, HashMap.class);", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2MDE3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435760179", "bodyText": "Done by the convertValue. It throws IllegalArgumentException, and thats what we would throw even if we check.", "author": "mbhaskar", "createdAt": "2020-06-05T08:12:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NTMwMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NzM2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434687367", "bodyText": "Should we close the stream  ?", "author": "simplynaveen20", "createdAt": "2020-06-03T16:10:43Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/Utils.java", "diffHunk": "@@ -646,4 +648,11 @@ public static String toJson(ObjectMapper mapper, ObjectNode object) {\n             throw new IllegalStateException(\"Unable to convert JSON to STRING\", e);\n         }\n     }\n+\n+    public static byte[] serializeObjectToByteArray(Object obj) throws IOException {\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        ObjectOutputStream os = new ObjectOutputStream(out);\n+        os.writeObject(obj);\n+        return out.toByteArray();", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0MDM2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r436040362", "bodyText": "The objects should get destroyed once out of the function", "author": "mbhaskar", "createdAt": "2020-06-05T16:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NzM2Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5MTE5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434691193", "bodyText": "nit: formatting , aligning all parameters", "author": "simplynaveen20", "createdAt": "2020-06-03T16:16:30Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java", "diffHunk": "@@ -31,37 +25,28 @@\n \n public class AggregateDocumentQueryExecutionContext<T extends Resource> implements IDocumentQueryExecutionComponent<T>{\n \n+    private final boolean isValueAggregateQuery;\n     private IDocumentQueryExecutionComponent<T> component;\n-    private Aggregator aggregator;\n     private ConcurrentMap<String, QueryMetrics> queryMetricsMap = new ConcurrentHashMap<>();\n+    private SingleGroupAggregator singleGroupAggregator;\n \n     //QueryInfo class used in PipelinedDocumentQueryExecutionContext returns a Collection of AggregateOperators\n-    //while Multiple aggregates are allowed in queries targeted at a single partition, only a single aggregate is allowed in x-partition queries (currently)\n-    public AggregateDocumentQueryExecutionContext (IDocumentQueryExecutionComponent<T> component, Collection<AggregateOperator> aggregateOperators) {\n+    public AggregateDocumentQueryExecutionContext(IDocumentQueryExecutionComponent<T> component,\n+                                                  List<AggregateOperator> aggregateOperators,\n+                                                  Map<String, AggregateOperator> groupByAliasToAggregateType,\n+                                                  List<String> orderedAliases,\n+                                                  boolean hasSelectValue,\n+                                                  String continuationToken) {\n \n         this.component = component;\n-        AggregateOperator aggregateOperator = aggregateOperators.iterator().next();\n-\n-        switch (aggregateOperator) {\n-            case Average:\n-                this.aggregator = new AverageAggregator();\n-                break;\n-            case Count:\n-                this.aggregator = new CountAggregator();\n-                break;\n-            case Max:\n-                this.aggregator = new MaxAggregator();\n-                break;\n-            case Min:\n-                this.aggregator = new MinAggregator();\n-                break;\n-            case Sum:\n-                this.aggregator = new SumAggregator();\n-                break;\n-            default:\n-                throw new IllegalStateException(\"Unexpected value: \" + aggregateOperator.toString());\n-            }\n-        }\n+        this.isValueAggregateQuery = hasSelectValue;\n+\n+        this.singleGroupAggregator = SingleGroupAggregator.create(aggregateOperators,\n+                                                                                   groupByAliasToAggregateType,\n+                                                                                   orderedAliases,", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2MDI1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435760257", "bodyText": "done", "author": "mbhaskar", "createdAt": "2020-06-05T08:12:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5MTE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java\nindex c31d5017340..6c253ba3857 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java\n\n@@ -25,6 +24,7 @@ import java.util.function.Function;\n \n public class AggregateDocumentQueryExecutionContext<T extends Resource> implements IDocumentQueryExecutionComponent<T>{\n \n+    public static final String PAYLOAD_PROPERTY_NAME = \"payload\";\n     private final boolean isValueAggregateQuery;\n     private IDocumentQueryExecutionComponent<T> component;\n     private ConcurrentMap<String, QueryMetrics> queryMetricsMap = new ConcurrentHashMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5MzgwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434693802", "bodyText": "nit: space after if", "author": "simplynaveen20", "createdAt": "2020-06-03T16:20:25Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java", "diffHunk": "@@ -114,18 +103,49 @@ public AggregateDocumentQueryExecutionContext (IDocumentQueryExecutionComponent<\n                 }).flux();\n     }\n \n-    public static <T extends Resource>  Flux<IDocumentQueryExecutionComponent<T>> createAsync(\n-            Function<String, Flux<IDocumentQueryExecutionComponent<T>>> createSourceComponentFunction,\n-            Collection<AggregateOperator> aggregates,\n-            String continuationToken) {\n+    public static <T extends Resource> Flux<IDocumentQueryExecutionComponent<T>> createAsync(\n+        Function<String, Flux<IDocumentQueryExecutionComponent<T>>> createSourceComponentFunction,\n+        Collection<AggregateOperator> aggregates,\n+        Map<String, AggregateOperator> groupByAliasToAggregateType,\n+        List<String> groupByAliases,\n+        boolean hasSelectValue,\n+        String continuationToken) {\n \n         return createSourceComponentFunction\n-                .apply(continuationToken)\n-                .map( component -> { return new AggregateDocumentQueryExecutionContext<T>(component, aggregates);});\n+                   .apply(continuationToken)\n+                   .map(component -> {\n+                       return new AggregateDocumentQueryExecutionContext<T>(component,\n+                                                                            new ArrayList<>(aggregates),\n+                                                                            groupByAliasToAggregateType,\n+                                                                            groupByAliases,\n+                                                                            hasSelectValue,\n+                                                                            continuationToken);\n+                   });\n     }\n \n     public IDocumentQueryExecutionComponent<T> getComponent() {\n         return this.component;\n     }\n \n+    class RewrittenAggregateProjections {\n+        private Document payload;\n+\n+        public RewrittenAggregateProjections(boolean isValueAggregateQuery, Document document) {\n+            if (document == null) {\n+                throw new IllegalArgumentException(\"document cannot be null\");\n+            }", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0MDQyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r436040424", "bodyText": "done", "author": "mbhaskar", "createdAt": "2020-06-05T16:46:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5MzgwMg=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java\nindex c31d5017340..6c253ba3857 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java\n\n@@ -134,11 +134,16 @@ public class AggregateDocumentQueryExecutionContext<T extends Resource> implemen\n             if (document == null) {\n                 throw new IllegalArgumentException(\"document cannot be null\");\n             }\n+\n             if (isValueAggregateQuery) {\n                 this.payload = new Document(document.getPropertyBag());\n             } else {\n-                if (document.get(\"payload\") instanceof ObjectNode) {\n-                    this.payload = new Document((ObjectNode) document.get(\"payload\"));\n+                if (!document.has(PAYLOAD_PROPERTY_NAME)) {\n+                    throw new IllegalStateException(\"Underlying object does not have an 'payload' field.\");\n+                }\n+\n+                if (document.get(PAYLOAD_PROPERTY_NAME) instanceof ObjectNode) {\n+                    this.payload = new Document((ObjectNode) document.get(PAYLOAD_PROPERTY_NAME));\n                 }\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5NDQzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434694437", "bodyText": "nit: return can be removed , implicit lambda", "author": "simplynaveen20", "createdAt": "2020-06-03T16:21:19Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java", "diffHunk": "@@ -114,18 +103,49 @@ public AggregateDocumentQueryExecutionContext (IDocumentQueryExecutionComponent<\n                 }).flux();\n     }\n \n-    public static <T extends Resource>  Flux<IDocumentQueryExecutionComponent<T>> createAsync(\n-            Function<String, Flux<IDocumentQueryExecutionComponent<T>>> createSourceComponentFunction,\n-            Collection<AggregateOperator> aggregates,\n-            String continuationToken) {\n+    public static <T extends Resource> Flux<IDocumentQueryExecutionComponent<T>> createAsync(\n+        Function<String, Flux<IDocumentQueryExecutionComponent<T>>> createSourceComponentFunction,\n+        Collection<AggregateOperator> aggregates,\n+        Map<String, AggregateOperator> groupByAliasToAggregateType,\n+        List<String> groupByAliases,\n+        boolean hasSelectValue,\n+        String continuationToken) {\n \n         return createSourceComponentFunction\n-                .apply(continuationToken)\n-                .map( component -> { return new AggregateDocumentQueryExecutionContext<T>(component, aggregates);});\n+                   .apply(continuationToken)\n+                   .map(component -> {\n+                       return new AggregateDocumentQueryExecutionContext<T>(component,", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2MDY1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435760657", "bodyText": "Wrote it like this Just to be consistent with other QueryExecutionContexts. Will eventually clean up all of them together", "author": "mbhaskar", "createdAt": "2020-06-05T08:13:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5NDQzNw=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java\nindex c31d5017340..6c253ba3857 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java\n\n@@ -134,11 +134,16 @@ public class AggregateDocumentQueryExecutionContext<T extends Resource> implemen\n             if (document == null) {\n                 throw new IllegalArgumentException(\"document cannot be null\");\n             }\n+\n             if (isValueAggregateQuery) {\n                 this.payload = new Document(document.getPropertyBag());\n             } else {\n-                if (document.get(\"payload\") instanceof ObjectNode) {\n-                    this.payload = new Document((ObjectNode) document.get(\"payload\"));\n+                if (!document.has(PAYLOAD_PROPERTY_NAME)) {\n+                    throw new IllegalStateException(\"Underlying object does not have an 'payload' field.\");\n+                }\n+\n+                if (document.get(PAYLOAD_PROPERTY_NAME) instanceof ObjectNode) {\n+                    this.payload = new Document((ObjectNode) document.get(PAYLOAD_PROPERTY_NAME));\n                 }\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5NTM3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434695373", "bodyText": "\"payload\" spread across few files , can we centralize it with constant ?", "author": "simplynaveen20", "createdAt": "2020-06-03T16:22:44Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java", "diffHunk": "@@ -114,18 +103,49 @@ public AggregateDocumentQueryExecutionContext (IDocumentQueryExecutionComponent<\n                 }).flux();\n     }\n \n-    public static <T extends Resource>  Flux<IDocumentQueryExecutionComponent<T>> createAsync(\n-            Function<String, Flux<IDocumentQueryExecutionComponent<T>>> createSourceComponentFunction,\n-            Collection<AggregateOperator> aggregates,\n-            String continuationToken) {\n+    public static <T extends Resource> Flux<IDocumentQueryExecutionComponent<T>> createAsync(\n+        Function<String, Flux<IDocumentQueryExecutionComponent<T>>> createSourceComponentFunction,\n+        Collection<AggregateOperator> aggregates,\n+        Map<String, AggregateOperator> groupByAliasToAggregateType,\n+        List<String> groupByAliases,\n+        boolean hasSelectValue,\n+        String continuationToken) {\n \n         return createSourceComponentFunction\n-                .apply(continuationToken)\n-                .map( component -> { return new AggregateDocumentQueryExecutionContext<T>(component, aggregates);});\n+                   .apply(continuationToken)\n+                   .map(component -> {\n+                       return new AggregateDocumentQueryExecutionContext<T>(component,\n+                                                                            new ArrayList<>(aggregates),\n+                                                                            groupByAliasToAggregateType,\n+                                                                            groupByAliases,\n+                                                                            hasSelectValue,\n+                                                                            continuationToken);\n+                   });\n     }\n \n     public IDocumentQueryExecutionComponent<T> getComponent() {\n         return this.component;\n     }\n \n+    class RewrittenAggregateProjections {\n+        private Document payload;\n+\n+        public RewrittenAggregateProjections(boolean isValueAggregateQuery, Document document) {\n+            if (document == null) {\n+                throw new IllegalArgumentException(\"document cannot be null\");\n+            }\n+            if (isValueAggregateQuery) {\n+                this.payload = new Document(document.getPropertyBag());\n+            } else {\n+                if (document.get(\"payload\") instanceof ObjectNode) {", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java\nindex c31d5017340..6c253ba3857 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java\n\n@@ -134,11 +134,16 @@ public class AggregateDocumentQueryExecutionContext<T extends Resource> implemen\n             if (document == null) {\n                 throw new IllegalArgumentException(\"document cannot be null\");\n             }\n+\n             if (isValueAggregateQuery) {\n                 this.payload = new Document(document.getPropertyBag());\n             } else {\n-                if (document.get(\"payload\") instanceof ObjectNode) {\n-                    this.payload = new Document((ObjectNode) document.get(\"payload\"));\n+                if (!document.has(PAYLOAD_PROPERTY_NAME)) {\n+                    throw new IllegalStateException(\"Underlying object does not have an 'payload' field.\");\n+                }\n+\n+                if (document.get(PAYLOAD_PROPERTY_NAME) instanceof ObjectNode) {\n+                    this.payload = new Document((ObjectNode) document.get(PAYLOAD_PROPERTY_NAME));\n                 }\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5Njk2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434696964", "bodyText": "nit: space after else", "author": "simplynaveen20", "createdAt": "2020-06-03T16:24:54Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateItem.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.Document;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+public class AggregateItem {\n+    private static final String ITEM_NAME_1 = \"item\";\n+    private static final String ITEM_NAME_2 = \"item2\";\n+\n+    private final Object document;\n+\n+    public AggregateItem(Object document) {\n+        this.document = document;\n+    }\n+\n+    public Object getItem() {\n+        Object object = null;\n+        if (document instanceof Document || document instanceof ObjectNode) {\n+            ObjectNode documentNode = null;\n+            if (document instanceof Document) {\n+                documentNode = ((Document)document).getPropertyBag();\n+            } else{", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5Nzk5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434697992", "bodyText": "nit: empty line after if", "author": "simplynaveen20", "createdAt": "2020-06-03T16:26:28Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctContinuationToken.java", "diffHunk": "@@ -60,17 +64,25 @@ public void setSourceToken(String sourceToken) {\n         BridgeInternal.setProperty(this, SOURCE_TOKEN_PROPERTY_NAME, sourceToken);\n     }\n \n-    String getLastHash() {\n-        return super.getString(LAST_HASH_PROPERTY_NAME);\n+    UInt128 getLastHash() {\n+        ByteBuffer byteBuffer = super.getObject(LAST_HASH_PROPERTY_NAME, ByteBuffer.class);\n+        if (byteBuffer != null) {\n+            return new UInt128(byteBuffer);\n+        }", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5OTg4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434699884", "bodyText": "do we need else, wouldn't it by default null ?", "author": "simplynaveen20", "createdAt": "2020-06-03T16:29:31Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctContinuationToken.java", "diffHunk": "@@ -60,17 +64,25 @@ public void setSourceToken(String sourceToken) {\n         BridgeInternal.setProperty(this, SOURCE_TOKEN_PROPERTY_NAME, sourceToken);\n     }\n \n-    String getLastHash() {\n-        return super.getString(LAST_HASH_PROPERTY_NAME);\n+    UInt128 getLastHash() {\n+        ByteBuffer byteBuffer = super.getObject(LAST_HASH_PROPERTY_NAME, ByteBuffer.class);\n+        if (byteBuffer != null) {\n+            return new UInt128(byteBuffer);\n+        }\n+        return null;\n     }\n \n     /**\n      * Setter for property 'lastHash'.\n      *\n      * @param lastHash Value to set for property 'lastHash'.\n      */\n-    public void setLastHash(String lastHash) {\n-        BridgeInternal.setProperty(this, LAST_HASH_PROPERTY_NAME, lastHash);\n+    public void setLastHash(UInt128 lastHash) {\n+        if (lastHash != null) {\n+            BridgeInternal.setProperty(this, LAST_HASH_PROPERTY_NAME, lastHash.toByteBuffer());\n+        } else {\n+            this.set(LAST_HASH_PROPERTY_NAME, null);", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwMjA2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434702062", "bodyText": "final string can be avoided", "author": "simplynaveen20", "createdAt": "2020-06-03T16:32:52Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctMap.java", "diffHunk": "@@ -31,17 +28,18 @@ public static DistinctMap create(DistinctQueryType distinctQueryType, String pre\n         }\n     }\n \n-    public abstract boolean add(Resource object, Utils.ValueHolder<String> outHash);\n+    public abstract boolean add(Object object, Utils.ValueHolder<UInt128> outHash);\n \n-    String getHash(Resource resource) throws JsonProcessingException,\n-                                                 NoSuchAlgorithmException {\n-        final Object obj = OBJECT_MAPPER.treeToValue(ModelBridgeInternal.getPropertyBagFromJsonSerializable(resource)\n-            , Object.class);\n-        final String sortedJson =\n-            OBJECT_MAPPER.writeValueAsString(obj);\n-        MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n-        byte[] digest = md.digest(sortedJson.getBytes(Charset.defaultCharset()));\n-        return Base64.getEncoder().encodeToString(digest);\n+    String getSortedJsonStringValueFromResource(Resource resource) {\n+        final Object obj;\n+        try {\n+            obj = OBJECT_MAPPER.treeToValue(resource.getPropertyBag()\n+                , Object.class);\n+            final String sortedJson = OBJECT_MAPPER.writeValueAsString(obj);", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0MDUxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r436040515", "bodyText": "done", "author": "mbhaskar", "createdAt": "2020-06-05T16:46:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwMjA2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctMap.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctMap.java\nindex 57f99a219fe..7d6a29f3c8c 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctMap.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctMap.java\n\n@@ -33,10 +33,8 @@ public abstract class DistinctMap {\n     String getSortedJsonStringValueFromResource(Resource resource) {\n         final Object obj;\n         try {\n-            obj = OBJECT_MAPPER.treeToValue(resource.getPropertyBag()\n-                , Object.class);\n-            final String sortedJson = OBJECT_MAPPER.writeValueAsString(obj);\n-            return sortedJson;\n+            obj = OBJECT_MAPPER.treeToValue(resource.getPropertyBag(), Object.class);\n+            return OBJECT_MAPPER.writeValueAsString(obj);\n         } catch (JsonProcessingException e) {\n             throw new IllegalStateException(\"Failed to obtain serialized sorted json\");\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwMzYzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434703632", "bodyText": "nit: extra line after if", "author": "simplynaveen20", "createdAt": "2020-06-03T16:35:16Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java", "diffHunk": "@@ -0,0 +1,151 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.implementation.BadRequestException;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.Resource;\n+import com.azure.cosmos.implementation.query.aggregation.AggregateOperator;\n+import com.azure.cosmos.models.FeedResponse;\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.models.ModelBridgeInternal;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public class GroupByDocumentQueryExecutionContext<T extends Resource> implements IDocumentQueryExecutionComponent<T> {\n+\n+    public static final String CONTINUATION_TOKEN_NOT_SUPPORTED_WITH_GROUP_BY = \"Continuation token is not supported \" +\n+                                                                                    \"for queries with GROUP BY.\" +\n+                                                                                    \"Do not use FeedResponse#\" +\n+                                                                                    \"responseContinuation\" +\n+                                                                                    \" or remove the GROUP BY \" +\n+                                                                                    \"from the query.\";\n+    private final IDocumentQueryExecutionComponent<T> component;\n+    private final GroupingTable groupingTable;\n+\n+    GroupByDocumentQueryExecutionContext(\n+        IDocumentQueryExecutionComponent<T> component,\n+        GroupingTable groupingTable) {\n+        this.component = component;\n+        this.groupingTable = groupingTable;\n+    }\n+\n+    public static <T extends Resource> Flux<IDocumentQueryExecutionComponent<T>> createAsync(\n+        Function<String, Flux<IDocumentQueryExecutionComponent<T>>> createSourceComponentFunction,\n+        String continuationToken,\n+        Map<String, AggregateOperator> groupByAliasToAggregateType,\n+        List<String> orderedAliases,\n+        boolean hasSelectValue) {\n+        if (continuationToken != null) {\n+            CosmosException dce = new BadRequestException(CONTINUATION_TOKEN_NOT_SUPPORTED_WITH_GROUP_BY);\n+            return Flux.error(dce);\n+        }\n+        GroupingTable table = new GroupingTable(groupByAliasToAggregateType, orderedAliases, hasSelectValue);\n+        // Have to pass non-null continuation token once supported\n+        return createSourceComponentFunction.apply(null)\n+                   .map(component -> new GroupByDocumentQueryExecutionContext<>(component,\n+                                                                                table));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public Flux<FeedResponse<T>> drainAsync(int maxPageSize) {\n+        return this.component.drainAsync(maxPageSize)\n+                   .collectList()\n+                   .map(superList -> {\n+                       double requestCharge = 0;\n+                       HashMap<String, String> headers = new HashMap<>();\n+                       List<Document> documentList = new ArrayList<>();\n+                       /* Do groupby stuff here */\n+                       // Stage 1:\n+                       // Drain the groupings fully from all continuation and all partitions\n+                       for (FeedResponse<T> page : superList) {\n+                           List<Document> results = (List<Document>) page.getResults();\n+                           documentList.addAll(results);\n+                       }\n+\n+                       this.aggregateGroupings(documentList);\n+\n+                       // Stage 2:\n+                       // Emit the results from the grouping table page by page\n+\n+                       List<Document> groupByResults = this.groupingTable.drain(maxPageSize);\n+\n+                       headers.put(HttpConstants.HttpHeaders.REQUEST_CHARGE, Double.toString(requestCharge));\n+                       FeedResponse<Document> frp =\n+                           BridgeInternal.createFeedResponse(groupByResults, headers);\n+\n+                       return (FeedResponse<T>) frp;\n+                   }).flux();\n+    }\n+\n+    private void aggregateGroupings(List<Document> superList) {\n+        for (Document d : superList) {\n+            RewrittenGroupByProjection rewrittenGroupByProjection =\n+                new RewrittenGroupByProjection(ModelBridgeInternal.getPropertyBagFromJsonSerializable(d));\n+            this.groupingTable.addPayLoad(rewrittenGroupByProjection);\n+        }\n+    }\n+\n+    IDocumentQueryExecutionComponent<T> getComponent() {\n+        return this.component;\n+    }\n+\n+    /**\n+     * When a group by query gets rewritten the projection looks like:\n+     * <p>\n+     * SELECT\n+     * [{\"item\": c.age}, {\"item\": c.name}] AS groupByItems,\n+     * {\"age\": c.age, \"name\": c.name} AS payload\n+     * <p>\n+     * This class just lets us easily access the \"groupByItems\" and \"payload\" property.\n+     */\n+    public class RewrittenGroupByProjection extends JsonSerializable {\n+        private static final String GroupByItemsPropertyName = \"groupByItems\";\n+        private static final String PayloadPropertyName = \"payload\";\n+\n+        private List<Document> groupByItems;\n+\n+        public RewrittenGroupByProjection(ObjectNode objectNode) {\n+            super(objectNode);\n+            if (objectNode == null) {\n+                throw new IllegalArgumentException(\"objectNode can not be null\");\n+            }\n+        }\n+\n+        /**\n+         * Getter for property 'groupByItems'.\n+         *\n+         * @return Value for property 'groupByItems'.\n+         */\n+        public List<Document> getGroupByItems() {\n+            groupByItems = this.getList(GroupByItemsPropertyName, Document.class);\n+            if (groupByItems == null) {\n+                throw new IllegalStateException(\"Underlying object does not have an 'groupByItems' field.\");\n+            }\n+            return groupByItems;\n+        }\n+\n+        /**\n+         * Getter for property 'payload'.\n+         *\n+         * @return Value for property 'payload'.\n+         */\n+        public Document getPayload() {\n+            Document document = new Document((ObjectNode) this.get(PayloadPropertyName));\n+            if (document == null) {\n+                throw new IllegalStateException(\"Underlying object does not have an 'payload' field.\");\n+            }", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2MDcyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435760722", "bodyText": "done", "author": "mbhaskar", "createdAt": "2020-06-05T08:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwMzYzMg=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java\nindex 78f3a6009ff..83bf12d464f 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java\n\n@@ -21,12 +21,12 @@ import java.util.List;\n import java.util.Map;\n import java.util.function.Function;\n \n-public class GroupByDocumentQueryExecutionContext<T extends Resource> implements IDocumentQueryExecutionComponent<T> {\n+public final class GroupByDocumentQueryExecutionContext<T extends Resource> implements\n+    IDocumentQueryExecutionComponent<T> {\n \n     public static final String CONTINUATION_TOKEN_NOT_SUPPORTED_WITH_GROUP_BY = \"Continuation token is not supported \" +\n                                                                                     \"for queries with GROUP BY.\" +\n-                                                                                    \"Do not use FeedResponse#\" +\n-                                                                                    \"responseContinuation\" +\n+                                                                                    \"Do not use continuation token\" +\n                                                                                     \" or remove the GROUP BY \" +\n                                                                                     \"from the query.\";\n     private final IDocumentQueryExecutionComponent<T> component;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwNDU2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434704569", "bodyText": "can keys be null ?", "author": "simplynaveen20", "createdAt": "2020-06-03T16:36:40Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.query.aggregation.AggregateOperator;\n+import com.azure.cosmos.implementation.routing.UInt128;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class GroupingTable {\n+    private static final List<AggregateOperator> EmptyAggregateOperators = new ArrayList<>();\n+\n+    private final Map<UInt128, SingleGroupAggregator> table;\n+    private final Map<String, AggregateOperator> groupByAliasToAggregateType;\n+    private final List<String> orderedAliases;\n+    private final boolean hasSelectValue;\n+\n+    GroupingTable(Map<String, AggregateOperator> groupByAliasToAggregateType, List<String> orderedAliases,\n+        boolean hasSelectValue) {\n+        this.table = new HashMap<>();\n+        this.groupByAliasToAggregateType = groupByAliasToAggregateType;\n+        this.orderedAliases = orderedAliases;\n+        this.hasSelectValue = hasSelectValue;\n+    }\n+\n+    public void addPayLoad(GroupByDocumentQueryExecutionContext<?>.RewrittenGroupByProjection rewrittenGroupByProjection) {\n+        try {\n+            final UInt128 groupByKeysHash = DistinctHash.getHash(rewrittenGroupByProjection.getGroupByItems());\n+            SingleGroupAggregator singleGroupAggregator;\n+            if (!this.table.containsKey(groupByKeysHash)) {\n+                singleGroupAggregator = SingleGroupAggregator.create(EmptyAggregateOperators,\n+                                                                     this.groupByAliasToAggregateType,\n+                                                                     this.orderedAliases,\n+                                                                     this.hasSelectValue,\n+                                                                      /*continuationtoken*/ null);\n+                this.table.put(groupByKeysHash, singleGroupAggregator);\n+            } else {\n+                singleGroupAggregator = table.get(groupByKeysHash);\n+            }\n+\n+            singleGroupAggregator.addValues(rewrittenGroupByProjection.getPayload());\n+\n+        } catch (IOException e) {\n+            throw new IllegalStateException(\"Failed to add payload to groupby projection\", e);\n+        }\n+    }\n+\n+    public List<Document> drain(int maxItemCount) {\n+        Collection<UInt128> keys = this.table.keySet().stream().limit(maxItemCount).collect(Collectors.toList());", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2MTAzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435761036", "bodyText": "collect will always initialize the list, so can never be null even when stream is empty", "author": "mbhaskar", "createdAt": "2020-06-05T08:14:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwNDU2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java\nindex 9a70f7081b7..4849bb6c0d7 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java\n\n@@ -15,7 +15,7 @@ import java.util.Map;\n import java.util.stream.Collectors;\n \n public class GroupingTable {\n-    private static final List<AggregateOperator> EmptyAggregateOperators = new ArrayList<>();\n+    private static final List<AggregateOperator> EMPTY_AGGREGATE_OPERATORS = new ArrayList<>();\n \n     private final Map<UInt128, SingleGroupAggregator> table;\n     private final Map<String, AggregateOperator> groupByAliasToAggregateType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwNjQ4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434706483", "bodyText": "these two if can be merged", "author": "simplynaveen20", "createdAt": "2020-06-03T16:39:51Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java", "diffHunk": "@@ -0,0 +1,316 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.implementation.Constants;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.Undefined;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.query.aggregation.AggregateOperator;\n+import com.azure.cosmos.implementation.query.aggregation.Aggregator;\n+import com.azure.cosmos.implementation.query.aggregation.AverageAggregator;\n+import com.azure.cosmos.implementation.query.aggregation.CountAggregator;\n+import com.azure.cosmos.implementation.query.aggregation.MaxAggregator;\n+import com.azure.cosmos.implementation.query.aggregation.MinAggregator;\n+import com.azure.cosmos.implementation.query.aggregation.SumAggregator;\n+import com.azure.cosmos.implementation.Resource;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Aggregates all the projections for a single grouping.\n+ */\n+public abstract class SingleGroupAggregator {\n+\n+    public static SingleGroupAggregator create(List<AggregateOperator> aggregates,\n+                                               Map<String, AggregateOperator> aggregateAliasToAggregateType,\n+                                               List<String> orderedAliases,\n+                                               boolean hasSelectValue,\n+                                               String continuationToken) {\n+\n+        if (aggregates == null) {\n+            throw new IllegalArgumentException(\"aggregates\");\n+        }\n+\n+        if (aggregateAliasToAggregateType == null) {", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5Mjc4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434792780", "bodyText": "You want to keep them separate so you know which one was null.", "author": "bchong95", "createdAt": "2020-06-03T19:09:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwNjQ4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java\nindex 2bd1bca5c23..8900e7b20f7 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java\n\n@@ -83,7 +83,7 @@ public abstract class SingleGroupAggregator {\n      * For SELECT VALUE queries there is only one value for each grouping.\n      * This class just helps maintain that and captures the first value across all continuations.\n      */\n-    public static class SelectValueAggregateValues extends SingleGroupAggregator {\n+    public static final class SelectValueAggregateValues extends SingleGroupAggregator {\n         private final AggregateValue aggregateValue;\n \n         public SelectValueAggregateValues(AggregateValue aggregateValue) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwODUyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434708521", "bodyText": "What is the use of map here ?", "author": "simplynaveen20", "createdAt": "2020-06-03T16:42:58Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java", "diffHunk": "@@ -0,0 +1,316 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.implementation.Constants;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.Undefined;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.query.aggregation.AggregateOperator;\n+import com.azure.cosmos.implementation.query.aggregation.Aggregator;\n+import com.azure.cosmos.implementation.query.aggregation.AverageAggregator;\n+import com.azure.cosmos.implementation.query.aggregation.CountAggregator;\n+import com.azure.cosmos.implementation.query.aggregation.MaxAggregator;\n+import com.azure.cosmos.implementation.query.aggregation.MinAggregator;\n+import com.azure.cosmos.implementation.query.aggregation.SumAggregator;\n+import com.azure.cosmos.implementation.Resource;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Aggregates all the projections for a single grouping.\n+ */\n+public abstract class SingleGroupAggregator {\n+\n+    public static SingleGroupAggregator create(List<AggregateOperator> aggregates,\n+                                               Map<String, AggregateOperator> aggregateAliasToAggregateType,\n+                                               List<String> orderedAliases,\n+                                               boolean hasSelectValue,\n+                                               String continuationToken) {\n+\n+        if (aggregates == null) {\n+            throw new IllegalArgumentException(\"aggregates\");\n+        }\n+\n+        if (aggregateAliasToAggregateType == null) {\n+            throw new IllegalArgumentException(\"aggregates\");\n+        }\n+\n+        SingleGroupAggregator singleGroupAggregator;\n+\n+        if (hasSelectValue) {\n+            if (!aggregates.isEmpty()) {\n+                // SELECT VALUE <AGGREGATE>\n+                singleGroupAggregator = SelectValueAggregateValues.create(\n+                    aggregates.get(0),\n+                    continuationToken);\n+            } else {\n+                // SELECT VALUE <NON AGGREGATE>\n+                singleGroupAggregator = SelectValueAggregateValues.create(\n+                    null, continuationToken);\n+            }\n+        } else {\n+            singleGroupAggregator = SelectListAggregateValues.create(\n+                aggregateAliasToAggregateType,\n+                orderedAliases,\n+                continuationToken);\n+        }\n+\n+        return singleGroupAggregator;\n+    }\n+\n+    /**\n+     * Adds the payload for group by values\n+     * @param values\n+     */\n+    public abstract void addValues(Document values);\n+\n+    /**\n+     * Forms the final result of the grouping.\n+     * @return Document\n+     */\n+    public abstract Document getResult();\n+\n+    public abstract Resource getDocumentContinuationToken();\n+\n+    /**\n+     * For SELECT VALUE queries there is only one value for each grouping.\n+     * This class just helps maintain that and captures the first value across all continuations.\n+     */\n+    public static class SelectValueAggregateValues extends SingleGroupAggregator {\n+        private final AggregateValue aggregateValue;\n+\n+        public SelectValueAggregateValues(AggregateValue aggregateValue) {\n+            //TODO: null check\n+            this.aggregateValue = aggregateValue;\n+        }\n+\n+        public static SingleGroupAggregator create(AggregateOperator aggregateOperator, String continuationToken) {\n+            AggregateValue aggregateValue = AggregateValue.create(aggregateOperator, continuationToken);\n+            return new SelectValueAggregateValues(aggregateValue);\n+        }\n+\n+        @Override\n+        public void addValues(Document values) {\n+            this.aggregateValue.addValue(values);\n+        }\n+\n+        @Override\n+        public Document getResult() {\n+            Document document;\n+            Object result = aggregateValue.getResult();\n+            if (result instanceof Document) {\n+                document = (Document) aggregateValue.getResult();\n+            } else {\n+                document = new Document();\n+                if (result instanceof Undefined) {\n+                    result = null;\n+                }\n+                // This is for value queries.Need to append value property for scalar values (non key value pairs)\n+                // to make them a key value pair document as our impl is based on Document.\n+                document.set(Constants.Properties.VALUE, result);\n+            }\n+            return document;\n+        }\n+\n+        @Override\n+        public Resource getDocumentContinuationToken() {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * For select list queries we need to create a dictionary of alias to group by value.\n+     * For each grouping drained from the backend we merge it with the results here.\n+     * At the end this class will form a JSON object with the correct aliases and grouping result.\n+     */\n+    public static class SelectListAggregateValues extends SingleGroupAggregator {\n+        Map<String, AggregateValue> aliasToValue;\n+        List<String> orderedAliases;\n+\n+        private SelectListAggregateValues(\n+            Map<String, AggregateValue> aliasToValue,\n+            List<String> orderedAliases) {\n+            this.aliasToValue = aliasToValue;\n+            this.orderedAliases = orderedAliases;\n+        }\n+\n+        public static SingleGroupAggregator create(\n+            Map<String, AggregateOperator> aggregateAliasToAggregateType, List<String> orderedAliases,\n+            String continuationToken) {\n+            if (aggregateAliasToAggregateType == null) {\n+                throw new IllegalArgumentException(\"aggregateAliasToAggregateType cannot be null\");\n+            }\n+\n+            if (orderedAliases == null) {\n+                throw new IllegalArgumentException(\"orderedAliases cannot be null\");\n+            }\n+\n+            Map<String, AggregateValue> groupingTable = new HashMap<>();\n+\n+            for (Map.Entry<String, AggregateOperator> aliasToAggregate : aggregateAliasToAggregateType.entrySet()) {\n+                String alias = aliasToAggregate.getKey();\n+                AggregateOperator aggregateOperator = null;\n+                if (aliasToAggregate.getValue() != null) {\n+                    aggregateOperator = AggregateOperator.valueOf(String.valueOf(aliasToAggregate.getValue()));\n+                }\n+                AggregateValue aggregateValue = AggregateValue.create(aggregateOperator, continuationToken);\n+                groupingTable.put(alias, aggregateValue);\n+\n+            }\n+            return new SelectListAggregateValues(groupingTable, orderedAliases);\n+        }\n+\n+        @Override\n+        public void addValues(Document values) {\n+            for (Map.Entry<String, AggregateValue> aliasAndValue : this.aliasToValue.entrySet()) {\n+                String alias = aliasAndValue.getKey();\n+                AggregateValue aggregateValue = aliasAndValue.getValue();\n+                aggregateValue.addValue(values.get(alias));\n+            }\n+        }\n+\n+        @Override\n+        public Document getResult() {\n+            Document aggregateDocument = new Document();\n+            for (String alias : this.orderedAliases) {\n+                AggregateValue aggregateValue = this.aliasToValue.get(alias);\n+                if (aggregateValue.getResult() != null) {\n+                    Map<String, Object> map = new HashMap<>();\n+                    map.put(alias,  aggregateValue.getResult());", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2MTI1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435761259", "bodyText": "Stale code, removed.", "author": "mbhaskar", "createdAt": "2020-06-05T08:14:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwODUyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java\nindex 2bd1bca5c23..8900e7b20f7 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java\n\n@@ -83,7 +83,7 @@ public abstract class SingleGroupAggregator {\n      * For SELECT VALUE queries there is only one value for each grouping.\n      * This class just helps maintain that and captures the first value across all continuations.\n      */\n-    public static class SelectValueAggregateValues extends SingleGroupAggregator {\n+    public static final class SelectValueAggregateValues extends SingleGroupAggregator {\n         private final AggregateValue aggregateValue;\n \n         public SelectValueAggregateValues(AggregateValue aggregateValue) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMDEyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434720123", "bodyText": "why is this needed?", "author": "moderakh", "createdAt": "2020-06-03T17:01:14Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "diffHunk": "@@ -0,0 +1,63 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.routing.MurmurHash3_128;\n+import com.azure.cosmos.implementation.routing.UInt128;\n+import com.azure.cosmos.models.ModelBridgeInternal;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.List;\n+\n+public class DistinctHash {\n+\n+    private static final UInt128 ArrayHashSeed = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+\n+    private static final ObjectMapper OBJECT_MAPPER =\n+        new ObjectMapper()\n+            .configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true)\n+            .configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4MzU5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434783591", "bodyText": "I think it's so that two json objects whose properties are the same, but ordered differently hash to the same value", "author": "bchong95", "createdAt": "2020-06-03T18:52:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMDEyMw=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\nindex c6016f83979..03b3cb193b0 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n\n@@ -15,9 +15,9 @@ import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.util.List;\n \n-public class DistinctHash {\n+public final class DistinctHash {\n \n-    private static final UInt128 ArrayHashSeed = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+    private static final UInt128 ARRAY_HASH_SEED = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n \n     private static final ObjectMapper OBJECT_MAPPER =\n         new ObjectMapper()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMjUwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434722503", "bodyText": "you may loose the root cause exception this way\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalStateException(\"Failed to add value to distinct map\" +e);\n          \n          \n            \n                        throw new IllegalStateException(\"Failed to add value to distinct map\", e);", "author": "moderakh", "createdAt": "2020-06-03T17:05:25Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/OrderedDistinctMap.java", "diffHunk": "@@ -2,30 +2,36 @@\n // Licensed under the MIT License.\n package com.azure.cosmos.implementation.query;\n \n-import com.azure.cosmos.implementation.Utils;\n-import com.azure.cosmos.implementation.apachecommons.lang.StringUtils;\n import com.azure.cosmos.implementation.Resource;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.routing.UInt128;\n \n-import java.security.NoSuchAlgorithmException;\n+import java.io.IOException;\n \n public class OrderedDistinctMap extends DistinctMap {\n-    private volatile String lastHash;\n+    private volatile UInt128 lastHash;\n \n-    public OrderedDistinctMap(String lastHash) {\n+    public OrderedDistinctMap(UInt128 lastHash) {\n         this.lastHash = lastHash;\n     }\n \n     @Override\n-    public boolean add(Resource resource, Utils.ValueHolder<String> outHash) {\n+    public boolean add(Object resource, Utils.ValueHolder<UInt128> outHash) {\n         try {\n-            outHash.v = getHash(resource);\n+            if (resource instanceof Resource) {\n+                // We do this to ensure the property order in document should not effect the hash\n+                resource = getSortedJsonStringValueFromResource((Resource)resource);\n+            }\n+            outHash.v = DistinctHash.getHash(resource);\n             // value should be true if hashes are not equal\n-            final boolean value = !StringUtils.equals(lastHash, outHash.v);\n+            boolean value = true;\n+            if (lastHash != null) {\n+                value = !(outHash.v.equals(lastHash));\n+            }\n             lastHash = outHash.v;\n             return value;\n-        } catch (JsonProcessingException | NoSuchAlgorithmException e) {\n-            throw new IllegalStateException(e);\n+        } catch (IOException e) {\n+            throw new IllegalStateException(\"Failed to add value to distinct map\" +e);", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2MjEzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435762135", "bodyText": "Intention was to add , but did + some how. Cleaned up. Thanks", "author": "mbhaskar", "createdAt": "2020-06-05T08:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMjUwMw=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/OrderedDistinctMap.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/OrderedDistinctMap.java\nindex c4f64a3adb1..522ac044c2d 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/OrderedDistinctMap.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/OrderedDistinctMap.java\n\n@@ -31,7 +31,7 @@ public class OrderedDistinctMap extends DistinctMap {\n             lastHash = outHash.v;\n             return value;\n         } catch (IOException e) {\n-            throw new IllegalStateException(\"Failed to add value to distinct map\" +e);\n+            throw new IllegalStateException(\"Failed to add value to distinct map\", e);\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMzA4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434723081", "bodyText": "why continuation token is null here?", "author": "moderakh", "createdAt": "2020-06-03T17:06:23Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java", "diffHunk": "@@ -0,0 +1,316 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.implementation.Constants;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.Undefined;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.query.aggregation.AggregateOperator;\n+import com.azure.cosmos.implementation.query.aggregation.Aggregator;\n+import com.azure.cosmos.implementation.query.aggregation.AverageAggregator;\n+import com.azure.cosmos.implementation.query.aggregation.CountAggregator;\n+import com.azure.cosmos.implementation.query.aggregation.MaxAggregator;\n+import com.azure.cosmos.implementation.query.aggregation.MinAggregator;\n+import com.azure.cosmos.implementation.query.aggregation.SumAggregator;\n+import com.azure.cosmos.implementation.Resource;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Aggregates all the projections for a single grouping.\n+ */\n+public abstract class SingleGroupAggregator {\n+\n+    public static SingleGroupAggregator create(List<AggregateOperator> aggregates,\n+                                               Map<String, AggregateOperator> aggregateAliasToAggregateType,\n+                                               List<String> orderedAliases,\n+                                               boolean hasSelectValue,\n+                                               String continuationToken) {\n+\n+        if (aggregates == null) {\n+            throw new IllegalArgumentException(\"aggregates\");\n+        }\n+\n+        if (aggregateAliasToAggregateType == null) {\n+            throw new IllegalArgumentException(\"aggregates\");\n+        }\n+\n+        SingleGroupAggregator singleGroupAggregator;\n+\n+        if (hasSelectValue) {\n+            if (!aggregates.isEmpty()) {\n+                // SELECT VALUE <AGGREGATE>\n+                singleGroupAggregator = SelectValueAggregateValues.create(\n+                    aggregates.get(0),\n+                    continuationToken);\n+            } else {\n+                // SELECT VALUE <NON AGGREGATE>\n+                singleGroupAggregator = SelectValueAggregateValues.create(\n+                    null, continuationToken);\n+            }\n+        } else {\n+            singleGroupAggregator = SelectListAggregateValues.create(\n+                aggregateAliasToAggregateType,\n+                orderedAliases,\n+                continuationToken);\n+        }\n+\n+        return singleGroupAggregator;\n+    }\n+\n+    /**\n+     * Adds the payload for group by values\n+     * @param values\n+     */\n+    public abstract void addValues(Document values);\n+\n+    /**\n+     * Forms the final result of the grouping.\n+     * @return Document\n+     */\n+    public abstract Document getResult();\n+\n+    public abstract Resource getDocumentContinuationToken();\n+\n+    /**\n+     * For SELECT VALUE queries there is only one value for each grouping.\n+     * This class just helps maintain that and captures the first value across all continuations.\n+     */\n+    public static class SelectValueAggregateValues extends SingleGroupAggregator {\n+        private final AggregateValue aggregateValue;\n+\n+        public SelectValueAggregateValues(AggregateValue aggregateValue) {\n+            //TODO: null check\n+            this.aggregateValue = aggregateValue;\n+        }\n+\n+        public static SingleGroupAggregator create(AggregateOperator aggregateOperator, String continuationToken) {\n+            AggregateValue aggregateValue = AggregateValue.create(aggregateOperator, continuationToken);\n+            return new SelectValueAggregateValues(aggregateValue);\n+        }\n+\n+        @Override\n+        public void addValues(Document values) {\n+            this.aggregateValue.addValue(values);\n+        }\n+\n+        @Override\n+        public Document getResult() {\n+            Document document;\n+            Object result = aggregateValue.getResult();\n+            if (result instanceof Document) {\n+                document = (Document) aggregateValue.getResult();\n+            } else {\n+                document = new Document();\n+                if (result instanceof Undefined) {\n+                    result = null;\n+                }\n+                // This is for value queries.Need to append value property for scalar values (non key value pairs)\n+                // to make them a key value pair document as our impl is based on Document.\n+                document.set(Constants.Properties.VALUE, result);\n+            }\n+            return document;\n+        }\n+\n+        @Override\n+        public Resource getDocumentContinuationToken() {\n+            return null;", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2MjQ1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435762452", "bodyText": "Continuation token is not yet supported for this, this method not referenced yet. Will change this when implementing cont.token.", "author": "mbhaskar", "createdAt": "2020-06-05T08:17:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMzA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java\nindex 2bd1bca5c23..8900e7b20f7 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java\n\n@@ -83,7 +83,7 @@ public abstract class SingleGroupAggregator {\n      * For SELECT VALUE queries there is only one value for each grouping.\n      * This class just helps maintain that and captures the first value across all continuations.\n      */\n-    public static class SelectValueAggregateValues extends SingleGroupAggregator {\n+    public static final class SelectValueAggregateValues extends SingleGroupAggregator {\n         private final AggregateValue aggregateValue;\n \n         public SelectValueAggregateValues(AggregateValue aggregateValue) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMzY4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434723689", "bodyText": "we should make these constants. here and elsewhere", "author": "moderakh", "createdAt": "2020-06-03T17:07:28Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/aggregation/MinAggregator.java", "diffHunk": "@@ -15,6 +16,30 @@ public MinAggregator() {\n \n     @Override\n     public void aggregate(Object item) {\n+\n+        if (item instanceof ObjectNode) {\n+            ObjectNode objectNode = (ObjectNode) item;\n+            if (objectNode.hasNonNull(\"count\")) {", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0MDk3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r436040974", "bodyText": "done", "author": "mbhaskar", "createdAt": "2020-06-05T16:47:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMzY4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/aggregation/MinAggregator.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/aggregation/MinAggregator.java\nindex 2b156676616..49a4ac0e538 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/aggregation/MinAggregator.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/aggregation/MinAggregator.java\n\n@@ -19,16 +21,16 @@ public class MinAggregator implements Aggregator {\n \n         if (item instanceof ObjectNode) {\n             ObjectNode objectNode = (ObjectNode) item;\n-            if (objectNode.hasNonNull(\"count\")) {\n-                long count = objectNode.get(\"count\").asLong();\n+            if (objectNode.hasNonNull(COUNT_PROPERTY_NAME)) {\n+                long count = objectNode.get(COUNT_PROPERTY_NAME).asLong();\n                 if (count == 0) {\n                     // Ignore the value since the continuation / partition had no results that matched the filter\n                     // so min/max is undefined.\n                     return;\n                 }\n \n-                if (objectNode.has(\"min\")) {\n-                    item = MaxAggregator.getValue(objectNode.get(\"min\"));\n+                if (objectNode.has(MIN_PROPERTY_NAME)) {\n+                    item = MaxAggregator.getValue(objectNode.get(MIN_PROPERTY_NAME));\n                 } else {\n                     item = Undefined.value();\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMzgxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434723817", "bodyText": "we should make this constants, ditto. here and elsewhere", "author": "moderakh", "createdAt": "2020-06-03T17:07:40Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/aggregation/MinAggregator.java", "diffHunk": "@@ -15,6 +16,30 @@ public MinAggregator() {\n \n     @Override\n     public void aggregate(Object item) {\n+\n+        if (item instanceof ObjectNode) {\n+            ObjectNode objectNode = (ObjectNode) item;\n+            if (objectNode.hasNonNull(\"count\")) {\n+                long count = objectNode.get(\"count\").asLong();\n+                if (count == 0) {\n+                    // Ignore the value since the continuation / partition had no results that matched the filter\n+                    // so min/max is undefined.\n+                    return;\n+                }\n+\n+                if (objectNode.has(\"min\")) {", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2MjUzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435762537", "bodyText": "Done", "author": "mbhaskar", "createdAt": "2020-06-05T08:17:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMzgxNw=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/aggregation/MinAggregator.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/aggregation/MinAggregator.java\nindex 2b156676616..49a4ac0e538 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/aggregation/MinAggregator.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/aggregation/MinAggregator.java\n\n@@ -19,16 +21,16 @@ public class MinAggregator implements Aggregator {\n \n         if (item instanceof ObjectNode) {\n             ObjectNode objectNode = (ObjectNode) item;\n-            if (objectNode.hasNonNull(\"count\")) {\n-                long count = objectNode.get(\"count\").asLong();\n+            if (objectNode.hasNonNull(COUNT_PROPERTY_NAME)) {\n+                long count = objectNode.get(COUNT_PROPERTY_NAME).asLong();\n                 if (count == 0) {\n                     // Ignore the value since the continuation / partition had no results that matched the filter\n                     // so min/max is undefined.\n                     return;\n                 }\n \n-                if (objectNode.has(\"min\")) {\n-                    item = MaxAggregator.getValue(objectNode.get(\"min\"));\n+                if (objectNode.has(MIN_PROPERTY_NAME)) {\n+                    item = MaxAggregator.getValue(objectNode.get(MIN_PROPERTY_NAME));\n                 } else {\n                     item = Undefined.value();\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyNTg2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434725866", "bodyText": "can any of the public APIs of GroupingTable be invoked on different email threads. if so you will have race condition on updating these internal states.", "author": "moderakh", "createdAt": "2020-06-03T17:11:23Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.query.aggregation.AggregateOperator;\n+import com.azure.cosmos.implementation.routing.UInt128;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class GroupingTable {\n+    private static final List<AggregateOperator> EmptyAggregateOperators = new ArrayList<>();\n+\n+    private final Map<UInt128, SingleGroupAggregator> table;\n+    private final Map<String, AggregateOperator> groupByAliasToAggregateType;\n+    private final List<String> orderedAliases;", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0MTMyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r436041325", "bodyText": "grouping will be sequential after collecting records from all the producers, so I dont see issue of multiple threads here.", "author": "mbhaskar", "createdAt": "2020-06-05T16:47:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyNTg2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java\nindex 9a70f7081b7..4849bb6c0d7 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java\n\n@@ -15,7 +15,7 @@ import java.util.Map;\n import java.util.stream.Collectors;\n \n public class GroupingTable {\n-    private static final List<AggregateOperator> EmptyAggregateOperators = new ArrayList<>();\n+    private static final List<AggregateOperator> EMPTY_AGGREGATE_OPERATORS = new ArrayList<>();\n \n     private final Map<UInt128, SingleGroupAggregator> table;\n     private final Map<String, AggregateOperator> groupByAliasToAggregateType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwMTM5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434701399", "bodyText": "Constant names should be all upper case with underscores.\nARRAY_HASH_SEED", "author": "kushagraThapar", "createdAt": "2020-06-03T16:31:49Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "diffHunk": "@@ -0,0 +1,63 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.routing.MurmurHash3_128;\n+import com.azure.cosmos.implementation.routing.UInt128;\n+import com.azure.cosmos.models.ModelBridgeInternal;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.List;\n+\n+public class DistinctHash {\n+\n+    private static final UInt128 ArrayHashSeed = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2MjY2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435762665", "bodyText": "Corrected.", "author": "mbhaskar", "createdAt": "2020-06-05T08:17:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwMTM5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\nindex c6016f83979..03b3cb193b0 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n\n@@ -15,9 +15,9 @@ import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.util.List;\n \n-public class DistinctHash {\n+public final class DistinctHash {\n \n-    private static final UInt128 ArrayHashSeed = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+    private static final UInt128 ARRAY_HASH_SEED = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n \n     private static final ObjectMapper OBJECT_MAPPER =\n         new ObjectMapper()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwMzIyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434703229", "bodyText": "There is no API in FeedResponse#responseContinuation\nDid you mean getContinuationToken() ?", "author": "kushagraThapar", "createdAt": "2020-06-03T16:34:39Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java", "diffHunk": "@@ -0,0 +1,151 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.implementation.BadRequestException;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.Resource;\n+import com.azure.cosmos.implementation.query.aggregation.AggregateOperator;\n+import com.azure.cosmos.models.FeedResponse;\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.models.ModelBridgeInternal;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public class GroupByDocumentQueryExecutionContext<T extends Resource> implements IDocumentQueryExecutionComponent<T> {\n+\n+    public static final String CONTINUATION_TOKEN_NOT_SUPPORTED_WITH_GROUP_BY = \"Continuation token is not supported \" +\n+                                                                                    \"for queries with GROUP BY.\" +\n+                                                                                    \"Do not use FeedResponse#\" +\n+                                                                                    \"responseContinuation\" +", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2MzIyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435763221", "bodyText": "Changed the text to just continuation token, so should function names should not matter anymore", "author": "mbhaskar", "createdAt": "2020-06-05T08:18:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcwMzIyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java\nindex 78f3a6009ff..83bf12d464f 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java\n\n@@ -21,12 +21,12 @@ import java.util.List;\n import java.util.Map;\n import java.util.function.Function;\n \n-public class GroupByDocumentQueryExecutionContext<T extends Resource> implements IDocumentQueryExecutionComponent<T> {\n+public final class GroupByDocumentQueryExecutionContext<T extends Resource> implements\n+    IDocumentQueryExecutionComponent<T> {\n \n     public static final String CONTINUATION_TOKEN_NOT_SUPPORTED_WITH_GROUP_BY = \"Continuation token is not supported \" +\n                                                                                     \"for queries with GROUP BY.\" +\n-                                                                                    \"Do not use FeedResponse#\" +\n-                                                                                    \"responseContinuation\" +\n+                                                                                    \"Do not use continuation token\" +\n                                                                                     \" or remove the GROUP BY \" +\n                                                                                     \"from the query.\";\n     private final IDocumentQueryExecutionComponent<T> component;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxMjIzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434712235", "bodyText": "Please follow java naming conventions here.", "author": "kushagraThapar", "createdAt": "2020-06-03T16:48:34Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java", "diffHunk": "@@ -0,0 +1,151 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.implementation.BadRequestException;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.Resource;\n+import com.azure.cosmos.implementation.query.aggregation.AggregateOperator;\n+import com.azure.cosmos.models.FeedResponse;\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.models.ModelBridgeInternal;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public class GroupByDocumentQueryExecutionContext<T extends Resource> implements IDocumentQueryExecutionComponent<T> {\n+\n+    public static final String CONTINUATION_TOKEN_NOT_SUPPORTED_WITH_GROUP_BY = \"Continuation token is not supported \" +\n+                                                                                    \"for queries with GROUP BY.\" +\n+                                                                                    \"Do not use FeedResponse#\" +\n+                                                                                    \"responseContinuation\" +\n+                                                                                    \" or remove the GROUP BY \" +\n+                                                                                    \"from the query.\";\n+    private final IDocumentQueryExecutionComponent<T> component;\n+    private final GroupingTable groupingTable;\n+\n+    GroupByDocumentQueryExecutionContext(\n+        IDocumentQueryExecutionComponent<T> component,\n+        GroupingTable groupingTable) {\n+        this.component = component;\n+        this.groupingTable = groupingTable;\n+    }\n+\n+    public static <T extends Resource> Flux<IDocumentQueryExecutionComponent<T>> createAsync(\n+        Function<String, Flux<IDocumentQueryExecutionComponent<T>>> createSourceComponentFunction,\n+        String continuationToken,\n+        Map<String, AggregateOperator> groupByAliasToAggregateType,\n+        List<String> orderedAliases,\n+        boolean hasSelectValue) {\n+        if (continuationToken != null) {\n+            CosmosException dce = new BadRequestException(CONTINUATION_TOKEN_NOT_SUPPORTED_WITH_GROUP_BY);\n+            return Flux.error(dce);\n+        }\n+        GroupingTable table = new GroupingTable(groupByAliasToAggregateType, orderedAliases, hasSelectValue);\n+        // Have to pass non-null continuation token once supported\n+        return createSourceComponentFunction.apply(null)\n+                   .map(component -> new GroupByDocumentQueryExecutionContext<>(component,\n+                                                                                table));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public Flux<FeedResponse<T>> drainAsync(int maxPageSize) {\n+        return this.component.drainAsync(maxPageSize)\n+                   .collectList()\n+                   .map(superList -> {\n+                       double requestCharge = 0;\n+                       HashMap<String, String> headers = new HashMap<>();\n+                       List<Document> documentList = new ArrayList<>();\n+                       /* Do groupby stuff here */\n+                       // Stage 1:\n+                       // Drain the groupings fully from all continuation and all partitions\n+                       for (FeedResponse<T> page : superList) {\n+                           List<Document> results = (List<Document>) page.getResults();\n+                           documentList.addAll(results);\n+                       }\n+\n+                       this.aggregateGroupings(documentList);\n+\n+                       // Stage 2:\n+                       // Emit the results from the grouping table page by page\n+\n+                       List<Document> groupByResults = this.groupingTable.drain(maxPageSize);\n+\n+                       headers.put(HttpConstants.HttpHeaders.REQUEST_CHARGE, Double.toString(requestCharge));\n+                       FeedResponse<Document> frp =\n+                           BridgeInternal.createFeedResponse(groupByResults, headers);\n+\n+                       return (FeedResponse<T>) frp;\n+                   }).flux();\n+    }\n+\n+    private void aggregateGroupings(List<Document> superList) {\n+        for (Document d : superList) {\n+            RewrittenGroupByProjection rewrittenGroupByProjection =\n+                new RewrittenGroupByProjection(ModelBridgeInternal.getPropertyBagFromJsonSerializable(d));\n+            this.groupingTable.addPayLoad(rewrittenGroupByProjection);\n+        }\n+    }\n+\n+    IDocumentQueryExecutionComponent<T> getComponent() {\n+        return this.component;\n+    }\n+\n+    /**\n+     * When a group by query gets rewritten the projection looks like:\n+     * <p>\n+     * SELECT\n+     * [{\"item\": c.age}, {\"item\": c.name}] AS groupByItems,\n+     * {\"age\": c.age, \"name\": c.name} AS payload\n+     * <p>\n+     * This class just lets us easily access the \"groupByItems\" and \"payload\" property.\n+     */\n+    public class RewrittenGroupByProjection extends JsonSerializable {\n+        private static final String GroupByItemsPropertyName = \"groupByItems\";\n+        private static final String PayloadPropertyName = \"payload\";", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2Mjc4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435762784", "bodyText": "Done", "author": "mbhaskar", "createdAt": "2020-06-05T08:17:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxMjIzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java\nindex 78f3a6009ff..83bf12d464f 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java\n\n@@ -21,12 +21,12 @@ import java.util.List;\n import java.util.Map;\n import java.util.function.Function;\n \n-public class GroupByDocumentQueryExecutionContext<T extends Resource> implements IDocumentQueryExecutionComponent<T> {\n+public final class GroupByDocumentQueryExecutionContext<T extends Resource> implements\n+    IDocumentQueryExecutionComponent<T> {\n \n     public static final String CONTINUATION_TOKEN_NOT_SUPPORTED_WITH_GROUP_BY = \"Continuation token is not supported \" +\n                                                                                     \"for queries with GROUP BY.\" +\n-                                                                                    \"Do not use FeedResponse#\" +\n-                                                                                    \"responseContinuation\" +\n+                                                                                    \"Do not use continuation token\" +\n                                                                                     \" or remove the GROUP BY \" +\n                                                                                     \"from the query.\";\n     private final IDocumentQueryExecutionComponent<T> component;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxNDU5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434714594", "bodyText": "Here as well - naming.", "author": "kushagraThapar", "createdAt": "2020-06-03T16:52:24Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.query.aggregation.AggregateOperator;\n+import com.azure.cosmos.implementation.routing.UInt128;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class GroupingTable {\n+    private static final List<AggregateOperator> EmptyAggregateOperators = new ArrayList<>();", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2Mjg0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435762846", "bodyText": "done", "author": "mbhaskar", "createdAt": "2020-06-05T08:17:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxNDU5NA=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java\nindex 9a70f7081b7..4849bb6c0d7 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java\n\n@@ -15,7 +15,7 @@ import java.util.Map;\n import java.util.stream.Collectors;\n \n public class GroupingTable {\n-    private static final List<AggregateOperator> EmptyAggregateOperators = new ArrayList<>();\n+    private static final List<AggregateOperator> EMPTY_AGGREGATE_OPERATORS = new ArrayList<>();\n \n     private final Map<UInt128, SingleGroupAggregator> table;\n     private final Map<String, AggregateOperator> groupByAliasToAggregateType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczMTQyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434731428", "bodyText": "Since there is no ordering in the keySet() API - are we just limiting with maxItemCount randomly on the keys in this.table map ?", "author": "kushagraThapar", "createdAt": "2020-06-03T17:21:09Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.query.aggregation.AggregateOperator;\n+import com.azure.cosmos.implementation.routing.UInt128;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class GroupingTable {\n+    private static final List<AggregateOperator> EmptyAggregateOperators = new ArrayList<>();\n+\n+    private final Map<UInt128, SingleGroupAggregator> table;\n+    private final Map<String, AggregateOperator> groupByAliasToAggregateType;\n+    private final List<String> orderedAliases;\n+    private final boolean hasSelectValue;\n+\n+    GroupingTable(Map<String, AggregateOperator> groupByAliasToAggregateType, List<String> orderedAliases,\n+        boolean hasSelectValue) {\n+        this.table = new HashMap<>();\n+        this.groupByAliasToAggregateType = groupByAliasToAggregateType;\n+        this.orderedAliases = orderedAliases;\n+        this.hasSelectValue = hasSelectValue;\n+    }\n+\n+    public void addPayLoad(GroupByDocumentQueryExecutionContext<?>.RewrittenGroupByProjection rewrittenGroupByProjection) {\n+        try {\n+            final UInt128 groupByKeysHash = DistinctHash.getHash(rewrittenGroupByProjection.getGroupByItems());\n+            SingleGroupAggregator singleGroupAggregator;\n+            if (!this.table.containsKey(groupByKeysHash)) {\n+                singleGroupAggregator = SingleGroupAggregator.create(EmptyAggregateOperators,\n+                                                                     this.groupByAliasToAggregateType,\n+                                                                     this.orderedAliases,\n+                                                                     this.hasSelectValue,\n+                                                                      /*continuationtoken*/ null);\n+                this.table.put(groupByKeysHash, singleGroupAggregator);\n+            } else {\n+                singleGroupAggregator = table.get(groupByKeysHash);\n+            }\n+\n+            singleGroupAggregator.addValues(rewrittenGroupByProjection.getPayload());\n+\n+        } catch (IOException e) {\n+            throw new IllegalStateException(\"Failed to add payload to groupby projection\", e);\n+        }\n+    }\n+\n+    public List<Document> drain(int maxItemCount) {\n+        Collection<UInt128> keys = this.table.keySet().stream().limit(maxItemCount).collect(Collectors.toList());", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5MjIxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434792211", "bodyText": "The ordering doesn't matter in this scenario. The user is just getting back some subset of the keys. It's never defined what order that would be.", "author": "bchong95", "createdAt": "2020-06-03T19:08:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczMTQyOA=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java\nindex 9a70f7081b7..4849bb6c0d7 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java\n\n@@ -15,7 +15,7 @@ import java.util.Map;\n import java.util.stream.Collectors;\n \n public class GroupingTable {\n-    private static final List<AggregateOperator> EmptyAggregateOperators = new ArrayList<>();\n+    private static final List<AggregateOperator> EMPTY_AGGREGATE_OPERATORS = new ArrayList<>();\n \n     private final Map<UInt128, SingleGroupAggregator> table;\n     private final Map<String, AggregateOperator> groupByAliasToAggregateType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczNDY5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434734699", "bodyText": "Please use this constructor instead of concatenation of error :\npublic IllegalStateException(String message, Throwable cause)", "author": "kushagraThapar", "createdAt": "2020-06-03T17:26:41Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/OrderedDistinctMap.java", "diffHunk": "@@ -2,30 +2,36 @@\n // Licensed under the MIT License.\n package com.azure.cosmos.implementation.query;\n \n-import com.azure.cosmos.implementation.Utils;\n-import com.azure.cosmos.implementation.apachecommons.lang.StringUtils;\n import com.azure.cosmos.implementation.Resource;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.routing.UInt128;\n \n-import java.security.NoSuchAlgorithmException;\n+import java.io.IOException;\n \n public class OrderedDistinctMap extends DistinctMap {\n-    private volatile String lastHash;\n+    private volatile UInt128 lastHash;\n \n-    public OrderedDistinctMap(String lastHash) {\n+    public OrderedDistinctMap(UInt128 lastHash) {\n         this.lastHash = lastHash;\n     }\n \n     @Override\n-    public boolean add(Resource resource, Utils.ValueHolder<String> outHash) {\n+    public boolean add(Object resource, Utils.ValueHolder<UInt128> outHash) {\n         try {\n-            outHash.v = getHash(resource);\n+            if (resource instanceof Resource) {\n+                // We do this to ensure the property order in document should not effect the hash\n+                resource = getSortedJsonStringValueFromResource((Resource)resource);\n+            }\n+            outHash.v = DistinctHash.getHash(resource);\n             // value should be true if hashes are not equal\n-            final boolean value = !StringUtils.equals(lastHash, outHash.v);\n+            boolean value = true;\n+            if (lastHash != null) {\n+                value = !(outHash.v.equals(lastHash));\n+            }\n             lastHash = outHash.v;\n             return value;\n-        } catch (JsonProcessingException | NoSuchAlgorithmException e) {\n-            throw new IllegalStateException(e);\n+        } catch (IOException e) {\n+            throw new IllegalStateException(\"Failed to add value to distinct map\" +e);", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2MzQ0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435763446", "bodyText": "That was the intention, ended up with this. Corrected.", "author": "mbhaskar", "createdAt": "2020-06-05T08:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczNDY5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/OrderedDistinctMap.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/OrderedDistinctMap.java\nindex c4f64a3adb1..522ac044c2d 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/OrderedDistinctMap.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/OrderedDistinctMap.java\n\n@@ -31,7 +31,7 @@ public class OrderedDistinctMap extends DistinctMap {\n             lastHash = outHash.v;\n             return value;\n         } catch (IOException e) {\n-            throw new IllegalStateException(\"Failed to add value to distinct map\" +e);\n+            throw new IllegalStateException(\"Failed to add value to distinct map\", e);\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczNTI4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434735288", "bodyText": "Nit : Extra comma at the end.", "author": "kushagraThapar", "createdAt": "2020-06-03T17:27:39Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/QueryFeature.java", "diffHunk": "@@ -12,5 +12,6 @@\n     MultipleOrderBy,\n     OffsetAndLimit,\n     OrderBy,\n-    Top\n+    Top,\n+    NonValueAggregate,", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2MzUyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435763525", "bodyText": "Removed", "author": "mbhaskar", "createdAt": "2020-06-05T08:19:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczNTI4OA=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/QueryFeature.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/QueryFeature.java\nindex e71858826c8..d5ebd45222a 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/QueryFeature.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/QueryFeature.java\n\n@@ -13,5 +13,5 @@ public enum QueryFeature {\n     OffsetAndLimit,\n     OrderBy,\n     Top,\n-    NonValueAggregate,\n+    NonValueAggregate\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3OTkxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434779910", "bodyText": "Don't return in an if else. Predeclare the variablee and return at the end.", "author": "bchong95", "createdAt": "2020-06-03T18:45:44Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -397,7 +397,13 @@ public String getId() {\n         if (queryInfo != null && queryInfo.hasSelectValue()) {\n             List<T> transformedResults = response.getResults()\n                                              .stream()\n-                                             .map(d -> d.get(Constants.Properties.VALUE))\n+                                             .map(d -> {\n+                                                 if (d.has(Constants.Properties.VALUE)) {\n+                                                     return d.get(Constants.Properties.VALUE);", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2MzYxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435763611", "bodyText": "changed", "author": "mbhaskar", "createdAt": "2020-06-05T08:19:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3OTkxMA=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\nindex 8dd65d2c4b6..b68b4377897 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\n\n@@ -398,11 +398,13 @@ public class CosmosAsyncContainer {\n             List<T> transformedResults = response.getResults()\n                                              .stream()\n                                              .map(d -> {\n+                                                 Object result;\n                                                  if (d.has(Constants.Properties.VALUE)) {\n-                                                     return d.get(Constants.Properties.VALUE);\n+                                                     result = d.get(Constants.Properties.VALUE);\n                                                  } else {\n-                                                     return d;\n+                                                     result = d;\n                                                  }\n+                                                 return result;\n                                              })\n                                              .map(object -> transform(object, classType))\n                                              .collect(Collectors.toList());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4MDE4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434780183", "bodyText": "returning null is a soft contract. Is there a TryGet equivalent in Java?", "author": "bchong95", "createdAt": "2020-06-03T18:46:14Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/JsonSerializable.java", "diffHunk": "@@ -154,6 +154,15 @@ public void populatePropertyBag() {\n         return getMapper().convertValue(this.propertyBag, HashMap.class);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    public <T> Map<String, T> getMap(String propertyKey) {\n+        if (this.propertyBag.has(propertyKey)) {\n+            Object value = this.get(propertyKey);\n+            return (Map<String, T>) getMapper().convertValue(value, HashMap.class);\n+        }\n+        return null;", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NDM1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435764353", "bodyText": "Have a tryget in utils for getting values from maps, but this is otherwise not as widely used pattern in our code as .NET.", "author": "mbhaskar", "createdAt": "2020-06-05T08:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4MDE4Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4MTgwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434781804", "bodyText": "if \"payload\" does not exist, then this should throw an exception.", "author": "bchong95", "createdAt": "2020-06-03T18:49:15Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java", "diffHunk": "@@ -114,18 +103,49 @@ public AggregateDocumentQueryExecutionContext (IDocumentQueryExecutionComponent<\n                 }).flux();\n     }\n \n-    public static <T extends Resource>  Flux<IDocumentQueryExecutionComponent<T>> createAsync(\n-            Function<String, Flux<IDocumentQueryExecutionComponent<T>>> createSourceComponentFunction,\n-            Collection<AggregateOperator> aggregates,\n-            String continuationToken) {\n+    public static <T extends Resource> Flux<IDocumentQueryExecutionComponent<T>> createAsync(\n+        Function<String, Flux<IDocumentQueryExecutionComponent<T>>> createSourceComponentFunction,\n+        Collection<AggregateOperator> aggregates,\n+        Map<String, AggregateOperator> groupByAliasToAggregateType,\n+        List<String> groupByAliases,\n+        boolean hasSelectValue,\n+        String continuationToken) {\n \n         return createSourceComponentFunction\n-                .apply(continuationToken)\n-                .map( component -> { return new AggregateDocumentQueryExecutionContext<T>(component, aggregates);});\n+                   .apply(continuationToken)\n+                   .map(component -> {\n+                       return new AggregateDocumentQueryExecutionContext<T>(component,\n+                                                                            new ArrayList<>(aggregates),\n+                                                                            groupByAliasToAggregateType,\n+                                                                            groupByAliases,\n+                                                                            hasSelectValue,\n+                                                                            continuationToken);\n+                   });\n     }\n \n     public IDocumentQueryExecutionComponent<T> getComponent() {\n         return this.component;\n     }\n \n+    class RewrittenAggregateProjections {\n+        private Document payload;\n+\n+        public RewrittenAggregateProjections(boolean isValueAggregateQuery, Document document) {\n+            if (document == null) {\n+                throw new IllegalArgumentException(\"document cannot be null\");\n+            }\n+            if (isValueAggregateQuery) {\n+                this.payload = new Document(document.getPropertyBag());\n+            } else {\n+                if (document.get(\"payload\") instanceof ObjectNode) {", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NDQ4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435764481", "bodyText": "Added check", "author": "mbhaskar", "createdAt": "2020-06-05T08:20:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4MTgwNA=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java\nindex c31d5017340..6c253ba3857 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/AggregateDocumentQueryExecutionContext.java\n\n@@ -134,11 +134,16 @@ public class AggregateDocumentQueryExecutionContext<T extends Resource> implemen\n             if (document == null) {\n                 throw new IllegalArgumentException(\"document cannot be null\");\n             }\n+\n             if (isValueAggregateQuery) {\n                 this.payload = new Document(document.getPropertyBag());\n             } else {\n-                if (document.get(\"payload\") instanceof ObjectNode) {\n-                    this.payload = new Document((ObjectNode) document.get(\"payload\"));\n+                if (!document.has(PAYLOAD_PROPERTY_NAME)) {\n+                    throw new IllegalStateException(\"Underlying object does not have an 'payload' field.\");\n+                }\n+\n+                if (document.get(PAYLOAD_PROPERTY_NAME) instanceof ObjectNode) {\n+                    this.payload = new Document((ObjectNode) document.get(PAYLOAD_PROPERTY_NAME));\n                 }\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4MjQ2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434782466", "bodyText": "sealed (which I think is final in Java).", "author": "bchong95", "createdAt": "2020-06-03T18:50:26Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "diffHunk": "@@ -0,0 +1,63 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.routing.MurmurHash3_128;\n+import com.azure.cosmos.implementation.routing.UInt128;\n+import com.azure.cosmos.models.ModelBridgeInternal;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.List;\n+\n+public class DistinctHash {", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4MjYxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434782616", "bodyText": "actually this could be a static class.", "author": "bchong95", "createdAt": "2020-06-03T18:50:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4MjQ2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NDU3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435764573", "bodyText": "made final", "author": "mbhaskar", "createdAt": "2020-06-05T08:21:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4MjQ2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\nindex c6016f83979..03b3cb193b0 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n\n@@ -15,9 +15,9 @@ import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.util.List;\n \n-public class DistinctHash {\n+public final class DistinctHash {\n \n-    private static final UInt128 ArrayHashSeed = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+    private static final UInt128 ARRAY_HASH_SEED = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n \n     private static final ObjectMapper OBJECT_MAPPER =\n         new ObjectMapper()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4MzMxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434783316", "bodyText": "This class is missing a lot of the hash seeds.", "author": "bchong95", "createdAt": "2020-06-03T18:51:57Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "diffHunk": "@@ -0,0 +1,63 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.routing.MurmurHash3_128;\n+import com.azure.cosmos.implementation.routing.UInt128;\n+import com.azure.cosmos.models.ModelBridgeInternal;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.List;\n+\n+public class DistinctHash {\n+\n+    private static final UInt128 ArrayHashSeed = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NDk1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435764953", "bodyText": "At the moment, hashing all types as just Object, and not doing it at the granular level of .NET. Should be improved.", "author": "mbhaskar", "createdAt": "2020-06-05T08:21:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4MzMxNg=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\nindex c6016f83979..03b3cb193b0 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n\n@@ -15,9 +15,9 @@ import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.util.List;\n \n-public class DistinctHash {\n+public final class DistinctHash {\n \n-    private static final UInt128 ArrayHashSeed = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+    private static final UInt128 ARRAY_HASH_SEED = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n \n     private static final ObjectMapper OBJECT_MAPPER =\n         new ObjectMapper()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4Mzk2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434783963", "bodyText": "This isn't going to work, since 1.0 and 1.00 need to hash to the same value. Also strings and their different escaped variants.", "author": "bchong95", "createdAt": "2020-06-03T18:53:11Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "diffHunk": "@@ -0,0 +1,63 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.routing.MurmurHash3_128;\n+import com.azure.cosmos.implementation.routing.UInt128;\n+import com.azure.cosmos.models.ModelBridgeInternal;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.List;\n+\n+public class DistinctHash {\n+\n+    private static final UInt128 ArrayHashSeed = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+\n+    private static final ObjectMapper OBJECT_MAPPER =\n+        new ObjectMapper()\n+            .configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true)\n+            .configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static UInt128 getHash(Object resource) throws IOException {\n+\n+        if (resource instanceof List) {\n+            return getHashFromList((List<Object>) resource);\n+        }\n+\n+        if (resource instanceof JsonSerializable) {\n+            return getHashFromJsonSerializable((JsonSerializable) resource);\n+        }\n+\n+        final byte[] bytes = Utils.serializeObjectToByteArray(resource);", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NTI2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435765262", "bodyText": "Have tests for checking 1.0 vs 1 and they pass", "author": "mbhaskar", "createdAt": "2020-06-05T08:22:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4Mzk2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\nindex c6016f83979..03b3cb193b0 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n\n@@ -15,9 +15,9 @@ import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.util.List;\n \n-public class DistinctHash {\n+public final class DistinctHash {\n \n-    private static final UInt128 ArrayHashSeed = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+    private static final UInt128 ARRAY_HASH_SEED = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n \n     private static final ObjectMapper OBJECT_MAPPER =\n         new ObjectMapper()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4NDM0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434784340", "bodyText": "sealed.", "author": "bchong95", "createdAt": "2020-06-03T18:53:57Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java", "diffHunk": "@@ -0,0 +1,151 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.implementation.BadRequestException;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.Resource;\n+import com.azure.cosmos.implementation.query.aggregation.AggregateOperator;\n+import com.azure.cosmos.models.FeedResponse;\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.models.ModelBridgeInternal;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public class GroupByDocumentQueryExecutionContext<T extends Resource> implements IDocumentQueryExecutionComponent<T> {", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NTM5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435765390", "bodyText": "done", "author": "mbhaskar", "createdAt": "2020-06-05T08:22:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4NDM0MA=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java\nindex 78f3a6009ff..83bf12d464f 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java\n\n@@ -21,12 +21,12 @@ import java.util.List;\n import java.util.Map;\n import java.util.function.Function;\n \n-public class GroupByDocumentQueryExecutionContext<T extends Resource> implements IDocumentQueryExecutionComponent<T> {\n+public final class GroupByDocumentQueryExecutionContext<T extends Resource> implements\n+    IDocumentQueryExecutionComponent<T> {\n \n     public static final String CONTINUATION_TOKEN_NOT_SUPPORTED_WITH_GROUP_BY = \"Continuation token is not supported \" +\n                                                                                     \"for queries with GROUP BY.\" +\n-                                                                                    \"Do not use FeedResponse#\" +\n-                                                                                    \"responseContinuation\" +\n+                                                                                    \"Do not use continuation token\" +\n                                                                                     \" or remove the GROUP BY \" +\n                                                                                     \"from the query.\";\n     private final IDocumentQueryExecutionComponent<T> component;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4NDU5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434784596", "bodyText": "null check the other argumetns.", "author": "bchong95", "createdAt": "2020-06-03T18:54:30Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java", "diffHunk": "@@ -0,0 +1,151 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.CosmosException;\n+import com.azure.cosmos.implementation.BadRequestException;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.Resource;\n+import com.azure.cosmos.implementation.query.aggregation.AggregateOperator;\n+import com.azure.cosmos.models.FeedResponse;\n+import com.azure.cosmos.implementation.JsonSerializable;\n+import com.azure.cosmos.models.ModelBridgeInternal;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import reactor.core.publisher.Flux;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public class GroupByDocumentQueryExecutionContext<T extends Resource> implements IDocumentQueryExecutionComponent<T> {\n+\n+    public static final String CONTINUATION_TOKEN_NOT_SUPPORTED_WITH_GROUP_BY = \"Continuation token is not supported \" +\n+                                                                                    \"for queries with GROUP BY.\" +\n+                                                                                    \"Do not use FeedResponse#\" +\n+                                                                                    \"responseContinuation\" +\n+                                                                                    \" or remove the GROUP BY \" +\n+                                                                                    \"from the query.\";\n+    private final IDocumentQueryExecutionComponent<T> component;\n+    private final GroupingTable groupingTable;\n+\n+    GroupByDocumentQueryExecutionContext(\n+        IDocumentQueryExecutionComponent<T> component,\n+        GroupingTable groupingTable) {\n+        this.component = component;\n+        this.groupingTable = groupingTable;\n+    }\n+\n+    public static <T extends Resource> Flux<IDocumentQueryExecutionComponent<T>> createAsync(\n+        Function<String, Flux<IDocumentQueryExecutionComponent<T>>> createSourceComponentFunction,\n+        String continuationToken,\n+        Map<String, AggregateOperator> groupByAliasToAggregateType,\n+        List<String> orderedAliases,\n+        boolean hasSelectValue) {\n+        if (continuationToken != null) {\n+            CosmosException dce = new BadRequestException(CONTINUATION_TOKEN_NOT_SUPPORTED_WITH_GROUP_BY);\n+            return Flux.error(dce);\n+        }\n+        GroupingTable table = new GroupingTable(groupByAliasToAggregateType, orderedAliases, hasSelectValue);", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NTQ1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435765457", "bodyText": "done", "author": "mbhaskar", "createdAt": "2020-06-05T08:22:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4NDU5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java\nindex 78f3a6009ff..83bf12d464f 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java\n\n@@ -21,12 +21,12 @@ import java.util.List;\n import java.util.Map;\n import java.util.function.Function;\n \n-public class GroupByDocumentQueryExecutionContext<T extends Resource> implements IDocumentQueryExecutionComponent<T> {\n+public final class GroupByDocumentQueryExecutionContext<T extends Resource> implements\n+    IDocumentQueryExecutionComponent<T> {\n \n     public static final String CONTINUATION_TOKEN_NOT_SUPPORTED_WITH_GROUP_BY = \"Continuation token is not supported \" +\n                                                                                     \"for queries with GROUP BY.\" +\n-                                                                                    \"Do not use FeedResponse#\" +\n-                                                                                    \"responseContinuation\" +\n+                                                                                    \"Do not use continuation token\" +\n                                                                                     \" or remove the GROUP BY \" +\n                                                                                     \"from the query.\";\n     private final IDocumentQueryExecutionComponent<T> component;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4NTYwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434785608", "bodyText": "readonly list", "author": "bchong95", "createdAt": "2020-06-03T18:56:24Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.query.aggregation.AggregateOperator;\n+import com.azure.cosmos.implementation.routing.UInt128;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class GroupingTable {\n+    private static final List<AggregateOperator> EmptyAggregateOperators = new ArrayList<>();", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NjI5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435766290", "bodyText": "list is final. Do yo mean immutable?", "author": "mbhaskar", "createdAt": "2020-06-05T08:24:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4NTYwOA=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java\nindex 9a70f7081b7..4849bb6c0d7 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java\n\n@@ -15,7 +15,7 @@ import java.util.Map;\n import java.util.stream.Collectors;\n \n public class GroupingTable {\n-    private static final List<AggregateOperator> EmptyAggregateOperators = new ArrayList<>();\n+    private static final List<AggregateOperator> EMPTY_AGGREGATE_OPERATORS = new ArrayList<>();\n \n     private final Map<UInt128, SingleGroupAggregator> table;\n     private final Map<String, AggregateOperator> groupByAliasToAggregateType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4NTczNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434785735", "bodyText": "null checks.", "author": "bchong95", "createdAt": "2020-06-03T18:56:40Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.query.aggregation.AggregateOperator;\n+import com.azure.cosmos.implementation.routing.UInt128;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class GroupingTable {\n+    private static final List<AggregateOperator> EmptyAggregateOperators = new ArrayList<>();\n+\n+    private final Map<UInt128, SingleGroupAggregator> table;\n+    private final Map<String, AggregateOperator> groupByAliasToAggregateType;\n+    private final List<String> orderedAliases;\n+    private final boolean hasSelectValue;\n+\n+    GroupingTable(Map<String, AggregateOperator> groupByAliasToAggregateType, List<String> orderedAliases,\n+        boolean hasSelectValue) {\n+        this.table = new HashMap<>();", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NTU1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435765556", "bodyText": "Added", "author": "mbhaskar", "createdAt": "2020-06-05T08:22:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4NTczNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java\nindex 9a70f7081b7..4849bb6c0d7 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupingTable.java\n\n@@ -15,7 +15,7 @@ import java.util.Map;\n import java.util.stream.Collectors;\n \n public class GroupingTable {\n-    private static final List<AggregateOperator> EmptyAggregateOperators = new ArrayList<>();\n+    private static final List<AggregateOperator> EMPTY_AGGREGATE_OPERATORS = new ArrayList<>();\n \n     private final Map<UInt128, SingleGroupAggregator> table;\n     private final Map<String, AggregateOperator> groupByAliasToAggregateType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5Mjk1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434792958", "bodyText": "there is a typo here.", "author": "bchong95", "createdAt": "2020-06-03T19:10:05Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java", "diffHunk": "@@ -0,0 +1,316 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.implementation.Constants;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.Undefined;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.query.aggregation.AggregateOperator;\n+import com.azure.cosmos.implementation.query.aggregation.Aggregator;\n+import com.azure.cosmos.implementation.query.aggregation.AverageAggregator;\n+import com.azure.cosmos.implementation.query.aggregation.CountAggregator;\n+import com.azure.cosmos.implementation.query.aggregation.MaxAggregator;\n+import com.azure.cosmos.implementation.query.aggregation.MinAggregator;\n+import com.azure.cosmos.implementation.query.aggregation.SumAggregator;\n+import com.azure.cosmos.implementation.Resource;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Aggregates all the projections for a single grouping.\n+ */\n+public abstract class SingleGroupAggregator {\n+\n+    public static SingleGroupAggregator create(List<AggregateOperator> aggregates,\n+                                               Map<String, AggregateOperator> aggregateAliasToAggregateType,\n+                                               List<String> orderedAliases,\n+                                               boolean hasSelectValue,\n+                                               String continuationToken) {\n+\n+        if (aggregates == null) {\n+            throw new IllegalArgumentException(\"aggregates\");\n+        }\n+\n+        if (aggregateAliasToAggregateType == null) {\n+            throw new IllegalArgumentException(\"aggregates\");", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java\nindex 2bd1bca5c23..8900e7b20f7 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java\n\n@@ -83,7 +83,7 @@ public abstract class SingleGroupAggregator {\n      * For SELECT VALUE queries there is only one value for each grouping.\n      * This class just helps maintain that and captures the first value across all continuations.\n      */\n-    public static class SelectValueAggregateValues extends SingleGroupAggregator {\n+    public static final class SelectValueAggregateValues extends SingleGroupAggregator {\n         private final AggregateValue aggregateValue;\n \n         public SelectValueAggregateValues(AggregateValue aggregateValue) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NjA2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434796065", "bodyText": "final", "author": "bchong95", "createdAt": "2020-06-03T19:15:52Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java", "diffHunk": "@@ -0,0 +1,316 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.BridgeInternal;\n+import com.azure.cosmos.implementation.Constants;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.Undefined;\n+import com.azure.cosmos.implementation.Utils;\n+import com.azure.cosmos.implementation.query.aggregation.AggregateOperator;\n+import com.azure.cosmos.implementation.query.aggregation.Aggregator;\n+import com.azure.cosmos.implementation.query.aggregation.AverageAggregator;\n+import com.azure.cosmos.implementation.query.aggregation.CountAggregator;\n+import com.azure.cosmos.implementation.query.aggregation.MaxAggregator;\n+import com.azure.cosmos.implementation.query.aggregation.MinAggregator;\n+import com.azure.cosmos.implementation.query.aggregation.SumAggregator;\n+import com.azure.cosmos.implementation.Resource;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Aggregates all the projections for a single grouping.\n+ */\n+public abstract class SingleGroupAggregator {\n+\n+    public static SingleGroupAggregator create(List<AggregateOperator> aggregates,\n+                                               Map<String, AggregateOperator> aggregateAliasToAggregateType,\n+                                               List<String> orderedAliases,\n+                                               boolean hasSelectValue,\n+                                               String continuationToken) {\n+\n+        if (aggregates == null) {\n+            throw new IllegalArgumentException(\"aggregates\");\n+        }\n+\n+        if (aggregateAliasToAggregateType == null) {\n+            throw new IllegalArgumentException(\"aggregates\");\n+        }\n+\n+        SingleGroupAggregator singleGroupAggregator;\n+\n+        if (hasSelectValue) {\n+            if (!aggregates.isEmpty()) {\n+                // SELECT VALUE <AGGREGATE>\n+                singleGroupAggregator = SelectValueAggregateValues.create(\n+                    aggregates.get(0),\n+                    continuationToken);\n+            } else {\n+                // SELECT VALUE <NON AGGREGATE>\n+                singleGroupAggregator = SelectValueAggregateValues.create(\n+                    null, continuationToken);\n+            }\n+        } else {\n+            singleGroupAggregator = SelectListAggregateValues.create(\n+                aggregateAliasToAggregateType,\n+                orderedAliases,\n+                continuationToken);\n+        }\n+\n+        return singleGroupAggregator;\n+    }\n+\n+    /**\n+     * Adds the payload for group by values\n+     * @param values\n+     */\n+    public abstract void addValues(Document values);\n+\n+    /**\n+     * Forms the final result of the grouping.\n+     * @return Document\n+     */\n+    public abstract Document getResult();\n+\n+    public abstract Resource getDocumentContinuationToken();\n+\n+    /**\n+     * For SELECT VALUE queries there is only one value for each grouping.\n+     * This class just helps maintain that and captures the first value across all continuations.\n+     */\n+    public static class SelectValueAggregateValues extends SingleGroupAggregator {\n+        private final AggregateValue aggregateValue;\n+\n+        public SelectValueAggregateValues(AggregateValue aggregateValue) {\n+            //TODO: null check\n+            this.aggregateValue = aggregateValue;\n+        }\n+\n+        public static SingleGroupAggregator create(AggregateOperator aggregateOperator, String continuationToken) {\n+            AggregateValue aggregateValue = AggregateValue.create(aggregateOperator, continuationToken);\n+            return new SelectValueAggregateValues(aggregateValue);\n+        }\n+\n+        @Override\n+        public void addValues(Document values) {\n+            this.aggregateValue.addValue(values);\n+        }\n+\n+        @Override\n+        public Document getResult() {\n+            Document document;\n+            Object result = aggregateValue.getResult();\n+            if (result instanceof Document) {\n+                document = (Document) aggregateValue.getResult();\n+            } else {\n+                document = new Document();\n+                if (result instanceof Undefined) {\n+                    result = null;\n+                }\n+                // This is for value queries.Need to append value property for scalar values (non key value pairs)\n+                // to make them a key value pair document as our impl is based on Document.\n+                document.set(Constants.Properties.VALUE, result);\n+            }\n+            return document;\n+        }\n+\n+        @Override\n+        public Resource getDocumentContinuationToken() {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * For select list queries we need to create a dictionary of alias to group by value.\n+     * For each grouping drained from the backend we merge it with the results here.\n+     * At the end this class will form a JSON object with the correct aliases and grouping result.\n+     */\n+    public static class SelectListAggregateValues extends SingleGroupAggregator {\n+        Map<String, AggregateValue> aliasToValue;", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java\nindex 2bd1bca5c23..8900e7b20f7 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SingleGroupAggregator.java\n\n@@ -83,7 +83,7 @@ public abstract class SingleGroupAggregator {\n      * For SELECT VALUE queries there is only one value for each grouping.\n      * This class just helps maintain that and captures the first value across all continuations.\n      */\n-    public static class SelectValueAggregateValues extends SingleGroupAggregator {\n+    public static final class SelectValueAggregateValues extends SingleGroupAggregator {\n         private final AggregateValue aggregateValue;\n \n         public SelectValueAggregateValues(AggregateValue aggregateValue) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5ODQ4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434798486", "bodyText": "usually smaller cases are handled first:\nif(other not instanceof UInt128)\n{\n    return false;\n}\n\nreturn this.low == ((UInt128) other).low && this.high == ((UInt128) other).high;", "author": "bchong95", "createdAt": "2020-06-03T19:20:37Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java", "diffHunk": "@@ -3,12 +3,55 @@\n \n package com.azure.cosmos.implementation.routing;\n \n-class UInt128 {\n-    long low;\n-    long high;\n+import java.nio.ByteBuffer;\n+import java.util.Objects;\n \n-    UInt128(long x, long y) {\n+public class UInt128 {\n+    private static final int SIZE  = Long.SIZE + Long.SIZE;\n+    public static final int BYTES = SIZE / Byte.SIZE;\n+    final long low;\n+    final long high;\n+\n+    public UInt128(long x, long y) {\n         this.low = x;\n         this.high = y;\n     }\n+\n+    public UInt128 (ByteBuffer byteBuffer) {\n+        byteBuffer.rewind();\n+        this.low = byteBuffer.getLong();\n+        this.high = byteBuffer.getLong();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object other) {\n+        if (other instanceof UInt128) {", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3MDI2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435770260", "bodyText": "I see similar style being used in java boxed types like Integer", "author": "mbhaskar", "createdAt": "2020-06-05T08:31:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5ODQ4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java\nindex 35d45f7a450..92a7a618d05 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java\n\n@@ -26,7 +26,8 @@ public class UInt128 {\n     @Override\n     public boolean equals(final Object other) {\n         if (other instanceof UInt128) {\n-            return this.low == ((UInt128) other).low && this.high == ((UInt128) other).high;\n+            final UInt128 uInt128Other = (UInt128) other;\n+            return this.low == uInt128Other.low && this.high == uInt128Other.high;\n         }\n         return false;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5ODY2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434798665", "bodyText": "avoid the cast multiple times", "author": "bchong95", "createdAt": "2020-06-03T19:20:56Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java", "diffHunk": "@@ -3,12 +3,55 @@\n \n package com.azure.cosmos.implementation.routing;\n \n-class UInt128 {\n-    long low;\n-    long high;\n+import java.nio.ByteBuffer;\n+import java.util.Objects;\n \n-    UInt128(long x, long y) {\n+public class UInt128 {\n+    private static final int SIZE  = Long.SIZE + Long.SIZE;\n+    public static final int BYTES = SIZE / Byte.SIZE;\n+    final long low;\n+    final long high;\n+\n+    public UInt128(long x, long y) {\n         this.low = x;\n         this.high = y;\n     }\n+\n+    public UInt128 (ByteBuffer byteBuffer) {\n+        byteBuffer.rewind();\n+        this.low = byteBuffer.getLong();\n+        this.high = byteBuffer.getLong();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object other) {\n+        if (other instanceof UInt128) {\n+            return this.low == ((UInt128) other).low && this.high == ((UInt128) other).high;", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3MDM1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435770358", "bodyText": "Done", "author": "mbhaskar", "createdAt": "2020-06-05T08:31:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5ODY2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java\nindex 35d45f7a450..92a7a618d05 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java\n\n@@ -26,7 +26,8 @@ public class UInt128 {\n     @Override\n     public boolean equals(final Object other) {\n         if (other instanceof UInt128) {\n-            return this.low == ((UInt128) other).low && this.high == ((UInt128) other).high;\n+            final UInt128 uInt128Other = (UInt128) other;\n+            return this.low == uInt128Other.low && this.high == uInt128Other.high;\n         }\n         return false;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5OTIxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434799211", "bodyText": "Add tests for 1 vs 1.0 and escaped string", "author": "bchong95", "createdAt": "2020-06-03T19:21:55Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/DistinctMapTest.java", "diffHunk": "@@ -6,6 +6,7 @@\n import com.azure.cosmos.implementation.Utils;\n import com.azure.cosmos.implementation.query.DistinctMap;\n import com.azure.cosmos.implementation.query.DistinctQueryType;\n+import com.azure.cosmos.implementation.routing.UInt128;\n import org.testng.annotations.DataProvider;\n import org.testng.annotations.Test;\n ", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3MTEyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435771128", "bodyText": "Added integration test for this already in DistinctQueryTests#queryDocumentsForDistinctIntValues", "author": "mbhaskar", "createdAt": "2020-06-05T08:32:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5OTIxMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgwMDU0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434800541", "bodyText": "There are a lot of other cases that need to be covered.", "author": "bchong95", "createdAt": "2020-06-03T19:24:31Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/GroupByQueryTests.java", "diffHunk": "@@ -0,0 +1,170 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.cosmos.rx;\n+\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosClientBuilder;\n+import com.azure.cosmos.implementation.CosmosItemProperties;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.models.FeedResponse;\n+import com.azure.cosmos.models.ModelBridgeInternal;\n+import com.azure.cosmos.models.QueryRequestOptions;\n+import com.azure.cosmos.rx.pojos.City;\n+import com.azure.cosmos.rx.pojos.Person;\n+import com.azure.cosmos.rx.pojos.Pet;\n+import com.azure.cosmos.util.CosmosPagedFlux;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class GroupByQueryTests extends TestSuiteBase {\n+    List<Person> personList;\n+    private CosmosAsyncContainer createdCollection;\n+    private ArrayList<CosmosItemProperties> docs = new ArrayList<>();\n+    private CosmosAsyncClient client;\n+\n+    @Factory(dataProvider = \"clientBuildersWithDirect\")\n+    public GroupByQueryTests(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    private static String getRandomName(Random rand) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        stringBuilder.append(\"name_\" + rand.nextInt(100));\n+\n+        return stringBuilder.toString();\n+    }\n+\n+    private static City getRandomCity(Random rand) {\n+        int index = rand.nextInt(3);\n+        switch (index) {\n+            case 0:\n+                return City.LOS_ANGELES;\n+            case 1:\n+                return City.NEW_YORK;\n+            case 2:\n+                return City.SEATTLE;\n+        }\n+\n+        return City.LOS_ANGELES;\n+    }\n+\n+    private static double getRandomIncome(Random rand) {\n+        return rand.nextDouble() * Double.MAX_VALUE;\n+    }\n+\n+    private static int getRandomAge(Random rand) {\n+        return rand.nextInt(100);\n+    }\n+\n+    @Test(groups = {\"simple\"}, timeOut = TIMEOUT)\n+    public void queryDocuments() {\n+        boolean qmEnabled = true;\n+\n+        String query = \"SELECT sum(c.age) as sum_age, c.city FROM c group by c.city\";", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3MTQ1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435771457", "bodyText": "Yup, need to add more tests for groupby. Plan is to get this in and run the Queryoracle. In the mean time will also try to add more tests", "author": "mbhaskar", "createdAt": "2020-06-05T08:33:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgwMDU0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4ca8537ce5a1742fe45290944017cec85c2e7f31", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/GroupByQueryTests.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/GroupByQueryTests.java\nindex dea14f73f52..27580f411e7 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/GroupByQueryTests.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/GroupByQueryTests.java\n\n@@ -7,9 +7,9 @@ import com.azure.cosmos.CosmosAsyncContainer;\n import com.azure.cosmos.CosmosClientBuilder;\n import com.azure.cosmos.implementation.CosmosItemProperties;\n import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.models.CosmosQueryRequestOptions;\n import com.azure.cosmos.models.FeedResponse;\n import com.azure.cosmos.models.ModelBridgeInternal;\n-import com.azure.cosmos.models.QueryRequestOptions;\n import com.azure.cosmos.rx.pojos.City;\n import com.azure.cosmos.rx.pojos.Person;\n import com.azure.cosmos.rx.pojos.Pet;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgwMDk3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r434800978", "bodyText": "We need to add tests for this if you are going to turn the flag on.", "author": "bchong95", "createdAt": "2020-06-03T19:25:20Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/QueryPlanRetriever.java", "diffHunk": "@@ -23,10 +23,13 @@\n     private static final String SUPPORTED_QUERY_FEATURES = QueryFeature.Aggregate.name() + \", \" +\n                                                                QueryFeature.CompositeAggregate.name() + \", \" +\n                                                                QueryFeature.MultipleOrderBy.name() + \", \" +\n+                                                               QueryFeature.MultipleAggregates.name() + \", \" +\n                                                                QueryFeature.OrderBy.name() + \", \" +\n                                                                QueryFeature.OffsetAndLimit.name() + \", \" +\n                                                                QueryFeature.Distinct.name() + \", \" +\n-                                                               QueryFeature.Top.name();\n+                                                               QueryFeature.GroupBy.name() + \", \" +\n+                                                               QueryFeature.Top.name() + \", \" +\n+                                                               QueryFeature.NonValueAggregate.name();", "originalCommit": "bcc778fa80f1ccea27fff4f6f22abea5065da728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3MTY3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r435771674", "bodyText": "Yeah, already added tests for NonValue and Multi Aggregates in AggregateQueryTests", "author": "mbhaskar", "createdAt": "2020-06-05T08:33:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgwMDk3OA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "message": "Implementing PR comments", "committedDate": "2020-06-05T08:10:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NjE2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r437566161", "bodyText": "we should use constant for all of these \"count\", \"max\" etc, here and other places.", "author": "moderakh", "createdAt": "2020-06-09T16:33:38Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/aggregation/MaxAggregator.java", "diffHunk": "@@ -13,8 +19,47 @@ public MaxAggregator() {\n         this.value = Undefined.value();\n     }\n \n+    static Object getValue(Object value) {\n+\n+        if (value instanceof TextNode) {\n+            return ((JsonNode) value).asText();\n+        } else if (value instanceof NumericNode) {\n+            return ((JsonNode) value).numberValue();\n+        } else if (value instanceof BooleanNode) {\n+            return ((JsonNode) value).asBoolean();\n+        } else if (value instanceof NullNode) {\n+            return null;\n+        } else {\n+            return value;\n+        }\n+    }\n+\n     @Override\n     public void aggregate(Object item) {\n+\n+        if (item instanceof ObjectNode) {\n+            ObjectNode objectNode = (ObjectNode) item;\n+            if (objectNode.hasNonNull(\"count\")) {", "originalCommit": "0c9c7ac582ed6547e19b4374159ed0a61e9f3975", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4Nzc2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11303#discussion_r438987769", "bodyText": "done", "author": "mbhaskar", "createdAt": "2020-06-11T18:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NjE2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4ca8537ce5a1742fe45290944017cec85c2e7f31", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/aggregation/MaxAggregator.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/aggregation/MaxAggregator.java\nindex d484322bc5f..ce72d553869 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/aggregation/MaxAggregator.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/aggregation/MaxAggregator.java\n\n@@ -13,6 +13,7 @@ import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.node.TextNode;\n \n public class MaxAggregator implements Aggregator {\n+    private static final String MAX_PROPERTY_NAME = \"max\";\n     private Object value;\n \n     public MaxAggregator() {\n"}}, {"oid": "1c0f21bd341310ccb1469e80c47a4d1b630e5f4a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1c0f21bd341310ccb1469e80c47a4d1b630e5f4a", "message": "Merge remote-tracking branch 'upstream/master' into groupby-query-feature-support\n\n# Conflicts:\n#\tsdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/AggregateQueryTests.java\n#\tsdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/DistinctQueryTests.java", "committedDate": "2020-06-11T17:43:00Z", "type": "commit"}, {"oid": "4ca8537ce5a1742fe45290944017cec85c2e7f31", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4ca8537ce5a1742fe45290944017cec85c2e7f31", "message": "Implementing PR comments\nMerging with latest master", "committedDate": "2020-06-11T18:22:57Z", "type": "commit"}, {"oid": "c81faf2b8529bc55accb6e0922cff5bac7d65269", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c81faf2b8529bc55accb6e0922cff5bac7d65269", "message": "merge and resolve conflicts", "committedDate": "2020-06-18T15:41:07Z", "type": "commit"}, {"oid": "43d9a70b23fcc12f7ff1b40d1b49ec4f700a9b98", "url": "https://github.com/Azure/azure-sdk-for-java/commit/43d9a70b23fcc12f7ff1b40d1b49ec4f700a9b98", "message": "merge and resolve conflicts", "committedDate": "2020-06-18T15:52:34Z", "type": "commit"}, {"oid": "95ee3b0a48af7d12219023de81e8630c15fb5d00", "url": "https://github.com/Azure/azure-sdk-for-java/commit/95ee3b0a48af7d12219023de81e8630c15fb5d00", "message": "merge and resolve conflicts", "committedDate": "2020-06-23T18:12:11Z", "type": "commit"}, {"oid": "cedc396174faef24412d3fca677ce68f09abb36b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cedc396174faef24412d3fca677ce68f09abb36b", "message": "fix", "committedDate": "2020-06-23T18:49:33Z", "type": "commit"}, {"oid": "acd6909daff6e02de312cba72a9f62974e7d8068", "url": "https://github.com/Azure/azure-sdk-for-java/commit/acd6909daff6e02de312cba72a9f62974e7d8068", "message": "fix for replaceCollectionWithSecondaryKey", "committedDate": "2020-06-25T16:46:47Z", "type": "commit"}, {"oid": "11f9d81f339b169687fcf44c680751828c30748b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/11f9d81f339b169687fcf44c680751828c30748b", "message": "Fix more tests about lazy index mode check", "committedDate": "2020-06-25T16:54:53Z", "type": "commit"}, {"oid": "ad6be20f1bf02bef939a47dd75c1f4776595e67b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ad6be20f1bf02bef939a47dd75c1f4776595e67b", "message": "fix tests", "committedDate": "2020-06-25T17:50:15Z", "type": "commit"}, {"oid": "cbce9bbc4fd641e043e0fe985dbf42a4f2d3ffa6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cbce9bbc4fd641e043e0fe985dbf42a4f2d3ffa6", "message": "oops, missed one more test", "committedDate": "2020-06-25T18:45:06Z", "type": "commit"}]}