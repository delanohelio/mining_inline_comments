{"pr_number": 16710, "pr_title": "API ServiceBusErrorSource to  represent source of error", "pr_createdAt": "2020-10-22T23:44:42Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/16710", "timeline": [{"oid": "b0c8562544e3b80cb6aad92098f76b345972165c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b0c8562544e3b80cb6aad92098f76b345972165c", "message": "Designing ErrorSource options", "committedDate": "2020-10-22T18:20:14Z", "type": "commit"}, {"oid": "b9a83efe1d9d9b84205979e5374738782c2d2a0c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b9a83efe1d9d9b84205979e5374738782c2d2a0c", "message": "Merge branch 'master' into sb-t2-errorsource-api", "committedDate": "2020-10-22T18:21:12Z", "type": "commit"}, {"oid": "aba06d0aa48166f4dad6d6a5852308d1fc5782eb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/aba06d0aa48166f4dad6d6a5852308d1fc5782eb", "message": "Error source structure.", "committedDate": "2020-10-22T23:40:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MTUyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r511191523", "bodyText": "Why do need this?", "author": "conniey", "createdAt": "2020-10-23T23:07:23Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessageContext.java", "diffHunk": "@@ -53,6 +79,27 @@ public Throwable getThrowable() {\n         return error;\n     }\n \n+    /**\n+     * Gets the {@link ServiceBusErrorSource} of the error where it occurred.\n+     *\n+     * @return The {@link ServiceBusErrorSource} of the error or message.\n+     */\n+    public ServiceBusErrorSource getErrorSource() {\n+        return errorSource;\n+    }\n+\n+    /**\n+     * Gets the {@link ServiceBusErrorSource} of the error where it occurred.\n+     *\n+     * @param errorSource {@link ServiceBusErrorSource} where error occurred.\n+     *\n+     * @return The updated {@link ServiceBusReceivedMessageContext} of the error.\n+     */\n+    ServiceBusReceivedMessageContext setErrorSource(ServiceBusErrorSource errorSource) {", "originalCommit": "aba06d0aa48166f4dad6d6a5852308d1fc5782eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd05bfe86aa5b0fef94ce357325eebff4c0905d6", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessageContext.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessageContext.java\nindex fba2abfb897..8d54ec717fb 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessageContext.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessageContext.java\n\n@@ -79,27 +53,6 @@ public class ServiceBusReceivedMessageContext {\n         return error;\n     }\n \n-    /**\n-     * Gets the {@link ServiceBusErrorSource} of the error where it occurred.\n-     *\n-     * @return The {@link ServiceBusErrorSource} of the error or message.\n-     */\n-    public ServiceBusErrorSource getErrorSource() {\n-        return errorSource;\n-    }\n-\n-    /**\n-     * Gets the {@link ServiceBusErrorSource} of the error where it occurred.\n-     *\n-     * @param errorSource {@link ServiceBusErrorSource} where error occurred.\n-     *\n-     * @return The updated {@link ServiceBusReceivedMessageContext} of the error.\n-     */\n-    ServiceBusReceivedMessageContext setErrorSource(ServiceBusErrorSource errorSource) {\n-        this.errorSource = errorSource;\n-        return this;\n-    }\n-\n     /**\n      * Gets the message received from Service Bus.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MTU1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r511191555", "bodyText": "Why do need this?", "author": "conniey", "createdAt": "2020-10-23T23:07:31Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessageContext.java", "diffHunk": "@@ -35,6 +36,31 @@\n         this.message = null;\n     }\n \n+    /**\n+     * Creates an instance where an error occurred such as session-lock-lost.\n+     *\n+     * @param sessionId Session id that the error occurred in.\n+     * @param error AMQP exception that occurred in session.\n+     * @param errorSource the source of the error.\n+     */\n+    ServiceBusReceivedMessageContext(String sessionId, Throwable error, ServiceBusErrorSource errorSource) {\n+        this(sessionId,error);\n+        this.errorSource = Objects.requireNonNull(errorSource, \"'errorSource' cannot be null.\");\n+    }\n+\n+    /**\n+     * Creates an instance where an error occurred such as session-lock-lost.\n+     *\n+     * @param error AMQP exception that occurred in session.\n+     * @param errorSource the source of the error.\n+     */\n+    ServiceBusReceivedMessageContext(Throwable error, ServiceBusErrorSource errorSource) {", "originalCommit": "aba06d0aa48166f4dad6d6a5852308d1fc5782eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MTY0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r511191646", "bodyText": "We can just use the maximal overload because this is internal.\nAlso, optional arguments should be at the end, like sessionId.", "author": "conniey", "createdAt": "2020-10-23T23:07:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MTU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxNzE4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r512317188", "bodyText": "moved this to ServiceBusException as we discussed.", "author": "hemanttanwar", "createdAt": "2020-10-26T22:54:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MTU1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "28fea7b588c690eeecd97f064f2f64aa426136ed", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessageContext.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessageContext.java\nindex fba2abfb897..95906edb422 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessageContext.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessageContext.java\n\n@@ -44,7 +44,7 @@ public class ServiceBusReceivedMessageContext {\n      * @param errorSource the source of the error.\n      */\n     ServiceBusReceivedMessageContext(String sessionId, Throwable error, ServiceBusErrorSource errorSource) {\n-        this(sessionId,error);\n+        this(sessionId, error);\n         this.errorSource = Objects.requireNonNull(errorSource, \"'errorSource' cannot be null.\");\n     }\n \n"}}, {"oid": "28fea7b588c690eeecd97f064f2f64aa426136ed", "url": "https://github.com/Azure/azure-sdk-for-java/commit/28fea7b588c690eeecd97f064f2f64aa426136ed", "message": "Adding error handling for Error source", "committedDate": "2020-10-26T22:53:28Z", "type": "commit"}, {"oid": "d01190a50674acfb431452c33ad261596a6e538b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d01190a50674acfb431452c33ad261596a6e538b", "message": "Adding error handling for Error source", "committedDate": "2020-10-26T22:56:19Z", "type": "commit"}, {"oid": "1ec13b505ab58db7d139949e3bc5ff70f1a0b4cc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1ec13b505ab58db7d139949e3bc5ff70f1a0b4cc", "message": "Adding error handling for Error source", "committedDate": "2020-10-26T23:01:03Z", "type": "commit"}, {"oid": "bd05bfe86aa5b0fef94ce357325eebff4c0905d6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bd05bfe86aa5b0fef94ce357325eebff4c0905d6", "message": "Removed error source from SBM context", "committedDate": "2020-10-26T23:02:17Z", "type": "commit"}, {"oid": "3ce0cb37c6fab0872c2e6ed321ab21fff197a4b3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3ce0cb37c6fab0872c2e6ed321ab21fff197a4b3", "message": "Removed unwanted changes", "committedDate": "2020-10-26T23:04:42Z", "type": "commit"}, {"oid": "36106a31aec946eaab35f7dbd5121f920e4131b9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/36106a31aec946eaab35f7dbd5121f920e4131b9", "message": "Added  test case for sending and receiving the messages.", "committedDate": "2020-10-27T08:08:10Z", "type": "commit"}, {"oid": "1d498aed3217a1a534419cfd998c4e91eabab985", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1d498aed3217a1a534419cfd998c4e91eabab985", "message": "merge master into branch", "committedDate": "2020-10-27T08:20:06Z", "type": "commit"}, {"oid": "46f7d2c27d235a47982b3e93367f05fea7788bca", "url": "https://github.com/Azure/azure-sdk-for-java/commit/46f7d2c27d235a47982b3e93367f05fea7788bca", "message": "Added java doc", "committedDate": "2020-10-27T08:24:38Z", "type": "commit"}, {"oid": "e8d7e1fec2179577cf39f133b3a451dbe1a5e05a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e8d7e1fec2179577cf39f133b3a451dbe1a5e05a", "message": "updated module info", "committedDate": "2020-10-27T18:08:21Z", "type": "commit"}, {"oid": "cbc6f554059c8434a6ef29b40e6986a9d729d08c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cbc6f554059c8434a6ef29b40e6986a9d729d08c", "message": "updated code to pass error source in updateDisposition", "committedDate": "2020-10-27T18:15:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzMDYwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r512930601", "bodyText": "Needed for test ServiceBusManagementSerializerTest.deserializeNamespace\naccessible: module com.azure.messaging.servicebus does not \"exports com.azure.messaging.servicebus.implementation.models\" to module com.fasterxml.jackson.databind", "author": "hemanttanwar", "createdAt": "2020-10-27T18:24:58Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/module-info.java", "diffHunk": "@@ -9,12 +9,8 @@\n     exports com.azure.messaging.servicebus.administration.models;\n     exports com.azure.messaging.servicebus.models;\n \n-    opens com.azure.messaging.servicebus;\n-    opens com.azure.messaging.servicebus.administration;\n-    opens com.azure.messaging.servicebus.administration.models;\n-    opens com.azure.messaging.servicebus.implementation;\n-    opens com.azure.messaging.servicebus.implementation.models;\n-    opens com.azure.messaging.servicebus.models;\n+    opens com.azure.messaging.servicebus.administration.models to com.fasterxml.jackson.databind;\n+    opens com.azure.messaging.servicebus.implementation.models to com.fasterxml.jackson.databind;", "originalCommit": "cbc6f554059c8434a6ef29b40e6986a9d729d08c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32aae8d553d40351497524d332e28674d7176787", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/module-info.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/module-info.java\nindex c5af07b339e..4b49efec749 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/module-info.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/module-info.java\n\n@@ -9,8 +9,12 @@ module com.azure.messaging.servicebus {\n     exports com.azure.messaging.servicebus.administration.models;\n     exports com.azure.messaging.servicebus.models;\n \n-    opens com.azure.messaging.servicebus.administration.models to com.fasterxml.jackson.databind;\n-    opens com.azure.messaging.servicebus.implementation.models to com.fasterxml.jackson.databind;\n+    opens com.azure.messaging.servicebus;\n+    opens com.azure.messaging.servicebus.administration;\n+    opens com.azure.messaging.servicebus.administration.models;\n+    opens com.azure.messaging.servicebus.implementation;\n+    opens com.azure.messaging.servicebus.implementation.models;\n+    opens com.azure.messaging.servicebus.models;\n \n     uses com.azure.core.util.tracing.Tracer;\n }\n"}}, {"oid": "32aae8d553d40351497524d332e28674d7176787", "url": "https://github.com/Azure/azure-sdk-for-java/commit/32aae8d553d40351497524d332e28674d7176787", "message": "module info changes will be in separate PR", "committedDate": "2020-10-27T19:14:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3MjE5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513072197", "bodyText": "Why do we need the error source parameter? It can be inferred from the Disposition status.", "author": "conniey", "createdAt": "2020-10-27T22:32:15Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1008,8 +1015,21 @@ private boolean isManagementToken(String lockToken) {\n \n     private Mono<Void> updateDisposition(ServiceBusReceivedMessage message, DispositionStatus dispositionStatus,\n         String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify,\n-        ServiceBusTransactionContext transactionContext) {\n+        ServiceBusTransactionContext transactionContext, ServiceBusErrorSource errorSource) {", "originalCommit": "32aae8d553d40351497524d332e28674d7176787", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e34a23e9c5eec22e288cacaef784e7d3bb88d7c0", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex ce8b629ea3e..803c1bf4fc2 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -1014,22 +1014,9 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n     }\n \n     private Mono<Void> updateDisposition(ServiceBusReceivedMessage message, DispositionStatus dispositionStatus,\n-        String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify,\n-        ServiceBusTransactionContext transactionContext, ServiceBusErrorSource errorSource) {\n-        return updateDispositionInternal(message, dispositionStatus, deadLetterReason, deadLetterErrorDescription,\n-            propertiesToModify, transactionContext)\n-            .onErrorMap(throwable -> {\n-                if (throwable instanceof AmqpException) {\n-                    return new ServiceBusException((AmqpException) throwable, errorSource);\n-                }\n-                return throwable;\n-\n-            });\n-    }\n-\n-    private Mono<Void> updateDispositionInternal(ServiceBusReceivedMessage message, DispositionStatus dispositionStatus,\n         String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify,\n         ServiceBusTransactionContext transactionContext) {\n+\n         if (isDisposed.get()) {\n             return monoError(logger, new IllegalStateException(\n                 String.format(INVALID_OPERATION_DISPOSED_RECEIVER, dispositionStatus.getValue())));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3MjM5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513072397", "bodyText": "I don't understand why we created a function here. The method itself is already private.", "author": "conniey", "createdAt": "2020-10-27T22:32:44Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1008,8 +1015,21 @@ private boolean isManagementToken(String lockToken) {\n \n     private Mono<Void> updateDisposition(ServiceBusReceivedMessage message, DispositionStatus dispositionStatus,\n         String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify,\n-        ServiceBusTransactionContext transactionContext) {\n+        ServiceBusTransactionContext transactionContext, ServiceBusErrorSource errorSource) {\n+        return updateDispositionInternal(message, dispositionStatus, deadLetterReason, deadLetterErrorDescription,\n+            propertiesToModify, transactionContext)\n+            .onErrorMap(throwable -> {\n+                if (throwable instanceof AmqpException) {\n+                    return new ServiceBusException((AmqpException) throwable, errorSource);\n+                }\n+                return throwable;\n \n+            });\n+    }\n+\n+    private Mono<Void> updateDispositionInternal(ServiceBusReceivedMessage message, DispositionStatus dispositionStatus,", "originalCommit": "32aae8d553d40351497524d332e28674d7176787", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e34a23e9c5eec22e288cacaef784e7d3bb88d7c0", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex ce8b629ea3e..803c1bf4fc2 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -1014,22 +1014,9 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n     }\n \n     private Mono<Void> updateDisposition(ServiceBusReceivedMessage message, DispositionStatus dispositionStatus,\n-        String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify,\n-        ServiceBusTransactionContext transactionContext, ServiceBusErrorSource errorSource) {\n-        return updateDispositionInternal(message, dispositionStatus, deadLetterReason, deadLetterErrorDescription,\n-            propertiesToModify, transactionContext)\n-            .onErrorMap(throwable -> {\n-                if (throwable instanceof AmqpException) {\n-                    return new ServiceBusException((AmqpException) throwable, errorSource);\n-                }\n-                return throwable;\n-\n-            });\n-    }\n-\n-    private Mono<Void> updateDispositionInternal(ServiceBusReceivedMessage message, DispositionStatus dispositionStatus,\n         String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify,\n         ServiceBusTransactionContext transactionContext) {\n+\n         if (isDisposed.get()) {\n             return monoError(logger, new IllegalStateException(\n                 String.format(INVALID_OPERATION_DISPOSED_RECEIVER, dispositionStatus.getValue())));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3Mjc0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513072749", "bodyText": "This mapping logic is in many places. It would be better to have a static method that this calls into which maps a throwable into the corresponding ServiceBusErrorSource.", "author": "conniey", "createdAt": "2020-10-27T22:33:45Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -503,6 +503,12 @@ public void close() {\n         return createMessageBatch().flatMap(messageBatch -> {\n             messages.forEach(message -> messageBatch.tryAddMessage(message));\n             return sendInternal(messageBatch, transaction);\n+        }).onErrorMap(throwable -> {", "originalCommit": "32aae8d553d40351497524d332e28674d7176787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI1NTc1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513255752", "bodyText": "Moved this into same class for reuse. I did not wanted to introduce a utility classes just for this.", "author": "hemanttanwar", "createdAt": "2020-10-28T08:24:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3Mjc0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e34a23e9c5eec22e288cacaef784e7d3bb88d7c0", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\nindex a3e425c9c7a..46c81690cbd 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n\n@@ -503,13 +503,8 @@ public final class ServiceBusSenderAsyncClient implements AutoCloseable {\n         return createMessageBatch().flatMap(messageBatch -> {\n             messages.forEach(message -> messageBatch.tryAddMessage(message));\n             return sendInternal(messageBatch, transaction);\n-        }).onErrorMap(throwable -> {\n-            if (throwable instanceof AmqpException) {\n-                return new ServiceBusException((AmqpException) throwable, ServiceBusErrorSource.SEND);\n-            } else {\n-                return throwable;\n-            }\n-        });\n+        })\n+            .onErrorMap(throwable -> mapError(throwable, ServiceBusErrorSource.SEND));\n     }\n \n \n"}}, {"oid": "e34a23e9c5eec22e288cacaef784e7d3bb88d7c0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e34a23e9c5eec22e288cacaef784e7d3bb88d7c0", "message": "Updated based on review comments.", "committedDate": "2020-10-28T08:22:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcwNjIyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513706223", "bodyText": "Are we using this exception for the sender client too?", "author": "srnagar", "createdAt": "2020-10-28T19:28:13Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java", "diffHunk": "@@ -0,0 +1,27 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+/**\n+ * Represent the operation user was performing when the error happened.\n+ */\n+public enum ServiceBusErrorSource {\n+    /** Error while sending the message(s).*/\n+    SEND,", "originalCommit": "e34a23e9c5eec22e288cacaef784e7d3bb88d7c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcyMzEyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513723129", "bodyText": "I confirmed it from .Net and they are not doing for send, so I am also removing it. This is only needed for processor.", "author": "hemanttanwar", "createdAt": "2020-10-28T19:58:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcwNjIyMw=="}], "type": "inlineReview", "revised_code": {"commit": "d9cd7c0afedb77ca11208e7dcc5248f9f2241ff4", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\nindex f51fddf4ab8..ec3b6cdfb48 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\n\n@@ -3,25 +3,36 @@\n \n package com.azure.messaging.servicebus;\n \n+import com.azure.core.util.ExpandableStringEnum;\n+\n+import java.io.Serializable;\n+\n /**\n  * Represent the operation user was performing when the error happened.\n  */\n-public enum ServiceBusErrorSource {\n+public final class ServiceBusErrorSource extends ExpandableStringEnum<ServiceBusErrorSource> implements Serializable {\n+\n+    private static final long serialVersionUID = -2819764417333954922L;\n+\n     /** Error while sending the message(s).*/\n-    SEND,\n+    public static final ServiceBusErrorSource SEND = fromString(\"SEND\", ServiceBusErrorSource.class);\n \n     /** Error while receiving the message(s).*/\n-    RECEIVE,\n+    public static final ServiceBusErrorSource RECEIVE = fromString(\"RECEIVE\", ServiceBusErrorSource.class);\n \n     /** Error while abandoning the message.*/\n-    ABANDONED,\n+    public static final ServiceBusErrorSource ABANDONED = fromString(\"ABANDONED\", ServiceBusErrorSource.class);\n \n     /** Error while completing the message.*/\n-    COMPLETE,\n+    public static final ServiceBusErrorSource COMPLETE = fromString(\"COMPLETE\", ServiceBusErrorSource.class);\n \n     /** Error while deferring the message.*/\n-    DEFER,\n+    public static final ServiceBusErrorSource DEFER = fromString(\"DEFER\", ServiceBusErrorSource.class);\n \n     /** Error while dead-lettering the message.*/\n-    DEAD_LETTER;\n+    public static final ServiceBusErrorSource DEAD_LETTER = fromString(\"DEAD_LETTER\",\n+        ServiceBusErrorSource.class);\n+\n+    /** Error when we could not determine the source.*/\n+    public static final ServiceBusErrorSource UNKNOWN = fromString(\"UNKNOWN\", ServiceBusErrorSource.class);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcwNzMxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513707313", "bodyText": "We need an enum for user code. Also, this must be ExpandableStringEnum so that we can add more sources later.", "author": "srnagar", "createdAt": "2020-10-28T19:30:11Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java", "diffHunk": "@@ -0,0 +1,27 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+/**\n+ * Represent the operation user was performing when the error happened.\n+ */\n+public enum ServiceBusErrorSource {", "originalCommit": "e34a23e9c5eec22e288cacaef784e7d3bb88d7c0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9cd7c0afedb77ca11208e7dcc5248f9f2241ff4", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\nindex f51fddf4ab8..ec3b6cdfb48 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\n\n@@ -3,25 +3,36 @@\n \n package com.azure.messaging.servicebus;\n \n+import com.azure.core.util.ExpandableStringEnum;\n+\n+import java.io.Serializable;\n+\n /**\n  * Represent the operation user was performing when the error happened.\n  */\n-public enum ServiceBusErrorSource {\n+public final class ServiceBusErrorSource extends ExpandableStringEnum<ServiceBusErrorSource> implements Serializable {\n+\n+    private static final long serialVersionUID = -2819764417333954922L;\n+\n     /** Error while sending the message(s).*/\n-    SEND,\n+    public static final ServiceBusErrorSource SEND = fromString(\"SEND\", ServiceBusErrorSource.class);\n \n     /** Error while receiving the message(s).*/\n-    RECEIVE,\n+    public static final ServiceBusErrorSource RECEIVE = fromString(\"RECEIVE\", ServiceBusErrorSource.class);\n \n     /** Error while abandoning the message.*/\n-    ABANDONED,\n+    public static final ServiceBusErrorSource ABANDONED = fromString(\"ABANDONED\", ServiceBusErrorSource.class);\n \n     /** Error while completing the message.*/\n-    COMPLETE,\n+    public static final ServiceBusErrorSource COMPLETE = fromString(\"COMPLETE\", ServiceBusErrorSource.class);\n \n     /** Error while deferring the message.*/\n-    DEFER,\n+    public static final ServiceBusErrorSource DEFER = fromString(\"DEFER\", ServiceBusErrorSource.class);\n \n     /** Error while dead-lettering the message.*/\n-    DEAD_LETTER;\n+    public static final ServiceBusErrorSource DEAD_LETTER = fromString(\"DEAD_LETTER\",\n+        ServiceBusErrorSource.class);\n+\n+    /** Error when we could not determine the source.*/\n+    public static final ServiceBusErrorSource UNKNOWN = fromString(\"UNKNOWN\", ServiceBusErrorSource.class);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcwODIxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513708211", "bodyText": "There's an administration aspect to SB as well and we will want to differentiate between an exception coming from the HTTP admin client vs the exception coming from AMQP. So, we should consider naming this exception accordingly.", "author": "srnagar", "createdAt": "2020-10-28T19:31:49Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+\n+/**\n+ * Defines {@link ServiceBusException} which has addition properties. You can {@link ServiceBusErrorSource} to\n+ * determine source of error.\n+ *\n+ * @see ServiceBusErrorSource\n+ */\n+public class ServiceBusException extends AmqpException {", "originalCommit": "e34a23e9c5eec22e288cacaef784e7d3bb88d7c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2NzE0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513767144", "bodyText": "ServiceBusAmqpException ? : Putting  Amqp   in class name, is telling normal user complexity of protocol which they only need to know if they are dealing with amqp message. I still think it will be fine with ServiceBusException\nServiceBusAdministrationException  could be another name for admin, when we need to do it.", "author": "hemanttanwar", "createdAt": "2020-10-28T21:18:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcwODIxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1OTQ1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513859450", "bodyText": "Renamed.", "author": "hemanttanwar", "createdAt": "2020-10-29T01:27:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcwODIxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "c90eb0ecff9e073f1fec4a1490728e425f4c1338", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusAmqpException.java\nsimilarity index 74%\nrename from sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java\nrename to sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusAmqpException.java\nindex cc5d81d4b5f..9ac10b46f31 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusAmqpException.java\n\n@@ -6,19 +6,19 @@ package com.azure.messaging.servicebus;\n import com.azure.core.amqp.exception.AmqpException;\n \n /**\n- * Defines {@link ServiceBusException} which has addition properties. You can {@link ServiceBusErrorSource} to\n+ * Defines {@link ServiceBusAmqpException} which has addition properties. You can {@link ServiceBusErrorSource} to\n  * determine source of error.\n  *\n  * @see ServiceBusErrorSource\n  */\n-public class ServiceBusException extends AmqpException {\n+public class ServiceBusAmqpException extends AmqpException {\n     private final ServiceBusErrorSource errorSource;\n \n     /**\n      * @param amqpException for the error hapened.\n      * @param errorSource indicating which api caused the error.\n      */\n-    ServiceBusException(AmqpException amqpException, ServiceBusErrorSource errorSource) {\n+    ServiceBusAmqpException(AmqpException amqpException, ServiceBusErrorSource errorSource) {\n         super(amqpException.isTransient(), amqpException.getErrorCondition(), amqpException.getMessage(),\n             amqpException.getCause(), amqpException.getContext());\n         this.errorSource = errorSource;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcxMjk0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r513712944", "bodyText": "Don't need to throw another exception here. If the dispositionStatus is unknown, we should just mark that as unknown and use that as the source.", "author": "srnagar", "createdAt": "2020-10-28T19:40:42Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1060,20 +1068,49 @@ private boolean isManagementToken(String lockToken) {\n                     logger.info(\"Could not perform on session manger. Performing on management node.\");\n                     return performOnManagement;\n                 });\n-        }\n-\n-        final ServiceBusAsyncConsumer existingConsumer = consumer.get();\n-        if (isManagementToken(lockToken) || existingConsumer == null) {\n-            return performOnManagement;\n         } else {\n-            return existingConsumer.updateDisposition(lockToken, dispositionStatus, deadLetterReason,\n-                deadLetterErrorDescription, propertiesToModify, transactionContext)\n-                .then(Mono.fromRunnable(() -> {\n-                    logger.info(\"{}: Update completed. Disposition: {}. Lock: {}.\",\n-                        entityPath, dispositionStatus, lockToken);\n-                    renewalContainer.remove(lockToken);\n-                }));\n+            final ServiceBusAsyncConsumer existingConsumer = consumer.get();\n+            if (isManagementToken(lockToken) || existingConsumer == null) {\n+                updateDispositionOperation = performOnManagement;\n+            } else {\n+                updateDispositionOperation = existingConsumer.updateDisposition(lockToken, dispositionStatus,\n+                    deadLetterReason, deadLetterErrorDescription, propertiesToModify, transactionContext)\n+                    .then(Mono.fromRunnable(() -> {\n+                        logger.info(\"{}: Update completed. Disposition: {}. Lock: {}.\",\n+                            entityPath, dispositionStatus, lockToken);\n+                        renewalContainer.remove(lockToken);\n+                    }));\n+            }\n         }\n+        return updateDispositionOperation\n+            .onErrorMap(throwable -> {\n+                ServiceBusErrorSource errorSource;\n+                if (throwable instanceof AmqpException) {\n+                    switch (dispositionStatus) {\n+                        case COMPLETED:\n+                            errorSource = ServiceBusErrorSource.COMPLETE;\n+                            break;\n+                        case DEFERRED:\n+                            errorSource = ServiceBusErrorSource.DEFER;\n+                            break;\n+                        case SUSPENDED:\n+                            errorSource = ServiceBusErrorSource.DEAD_LETTER;\n+                            break;\n+                        case ABANDONED:\n+                            errorSource = ServiceBusErrorSource.ABANDONED;\n+                            break;\n+                        default:\n+                            throw logger.logExceptionAsError(new UnsupportedOperationException(String.format(", "originalCommit": "e34a23e9c5eec22e288cacaef784e7d3bb88d7c0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9cd7c0afedb77ca11208e7dcc5248f9f2241ff4", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex 803c1bf4fc2..188177d3d9d 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -1100,8 +1100,7 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n                             errorSource = ServiceBusErrorSource.ABANDONED;\n                             break;\n                         default:\n-                            throw logger.logExceptionAsError(new UnsupportedOperationException(String.format(\n-                                \"'%s' is not supported.\", dispositionStatus)));\n+                            errorSource = ServiceBusErrorSource.UNKNOWN;\n                     }\n \n                     return new ServiceBusException((AmqpException) throwable, errorSource);\n"}}, {"oid": "d9cd7c0afedb77ca11208e7dcc5248f9f2241ff4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d9cd7c0afedb77ca11208e7dcc5248f9f2241ff4", "message": "changes based on review comments", "committedDate": "2020-10-28T22:05:25Z", "type": "commit"}, {"oid": "fce6f5561b3a457173ad95f513a8301e1a031925", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fce6f5561b3a457173ad95f513a8301e1a031925", "message": "changes based on review comments", "committedDate": "2020-10-28T22:18:05Z", "type": "commit"}, {"oid": "f84f896eeb164cc8ffd11107995cf80fc2efb16d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f84f896eeb164cc8ffd11107995cf80fc2efb16d", "message": "changes based on review comments", "committedDate": "2020-10-28T22:29:03Z", "type": "commit"}, {"oid": "2d004d8c6dafe3284970d87f3f870c9cca2f5774", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2d004d8c6dafe3284970d87f3f870c9cca2f5774", "message": "Removed Error source from Sender as  dotnet is also not doing it", "committedDate": "2020-10-28T22:55:07Z", "type": "commit"}, {"oid": "5a52a8d0121a82903c8192ba08b719bedaccc8ca", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5a52a8d0121a82903c8192ba08b719bedaccc8ca", "message": "Removed Error source from Sender as  dotnet is also not doing it", "committedDate": "2020-10-28T22:55:33Z", "type": "commit"}, {"oid": "578a0dde08dc04112e3a0bc39c5b560d86584f89", "url": "https://github.com/Azure/azure-sdk-for-java/commit/578a0dde08dc04112e3a0bc39c5b560d86584f89", "message": "added error source for renew lock", "committedDate": "2020-10-28T23:12:04Z", "type": "commit"}, {"oid": "eda86d168b8b7ffa854e7fd69413b8d5e8fa6381", "url": "https://github.com/Azure/azure-sdk-for-java/commit/eda86d168b8b7ffa854e7fd69413b8d5e8fa6381", "message": "added error source for renew lock", "committedDate": "2020-10-28T23:12:59Z", "type": "commit"}, {"oid": "d24f339da759943673c96c4e77e9e9d05ef02013", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d24f339da759943673c96c4e77e9e9d05ef02013", "message": "added error source for renew lock", "committedDate": "2020-10-28T23:18:37Z", "type": "commit"}, {"oid": "6e3b5d8a95227bf23c24779efc79109c010aad70", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6e3b5d8a95227bf23c24779efc79109c010aad70", "message": "added docs for unit test", "committedDate": "2020-10-28T23:21:15Z", "type": "commit"}, {"oid": "c90eb0ecff9e073f1fec4a1490728e425f4c1338", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c90eb0ecff9e073f1fec4a1490728e425f4c1338", "message": "Renamed Exception", "committedDate": "2020-10-29T01:27:14Z", "type": "commit"}, {"oid": "3286f4c4a0a5e407c36e08e71285e536bbe45ee1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3286f4c4a0a5e407c36e08e71285e536bbe45ee1", "message": "Renamed Exception", "committedDate": "2020-10-29T02:03:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAyODk5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514028993", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Defines {@link ServiceBusAmqpException} which has addition properties. You can {@link ServiceBusErrorSource} to\n          \n          \n            \n             * Defines {@link ServiceBusAmqpException} which has additional information about the operation that caused the error.", "author": "srnagar", "createdAt": "2020-10-29T06:45:55Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusAmqpException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+\n+/**\n+ * Defines {@link ServiceBusAmqpException} which has addition properties. You can {@link ServiceBusErrorSource} to", "originalCommit": "3286f4c4a0a5e407c36e08e71285e536bbe45ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b61551fa0443e35d8147d39ed79c9370c8adddc8", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusAmqpException.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusAmqpException.java\nindex f77b69133a7..9b94470a939 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusAmqpException.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusAmqpException.java\n\n@@ -6,12 +6,11 @@ package com.azure.messaging.servicebus;\n import com.azure.core.amqp.exception.AmqpException;\n \n /**\n- * Defines {@link ServiceBusAmqpException} which has addition properties. You can {@link ServiceBusErrorSource} to\n- * determine source of error.\n+ * Defines {@link ServiceBusAmqpException} which has additional information about the operation that caused the error.\n  *\n  * @see ServiceBusErrorSource\n  */\n-public class ServiceBusAmqpException extends AmqpException {\n+public final class ServiceBusAmqpException extends AmqpException {\n     private final ServiceBusErrorSource errorSource;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAyOTk0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514029942", "bodyText": "Some of the operations may not be performed by the user. For e.g autocomplete, autorenew or even abandoning a message.", "author": "srnagar", "createdAt": "2020-10-29T06:47:15Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Represent the operation user was performing when the error happened.", "originalCommit": "3286f4c4a0a5e407c36e08e71285e536bbe45ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b61551fa0443e35d8147d39ed79c9370c8adddc8", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\nindex 31b8098bcaa..61d195fc5d4 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\n\n@@ -8,7 +8,7 @@ import com.azure.core.util.ExpandableStringEnum;\n import java.io.Serializable;\n \n /**\n- * Represent the operation user was performing when the error happened.\n+ * Represent the operation this sdk was performing when the error happened.\n  */\n public final class ServiceBusErrorSource extends ExpandableStringEnum<ServiceBusErrorSource> implements Serializable {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAzMDUwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514030500", "bodyText": "ServiceBusAmqpException", "author": "srnagar", "createdAt": "2020-10-29T06:48:09Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1136,4 +1172,15 @@ private String getLinkName(String sessionId) {\n             return existing != null ? existing.getLinkName() : null;\n         }\n     }\n+\n+    /**\n+     * Map the error to ServiceBusException", "originalCommit": "3286f4c4a0a5e407c36e08e71285e536bbe45ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b61551fa0443e35d8147d39ed79c9370c8adddc8", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex e1ca88bd2ac..b2c295109fe 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -1174,7 +1174,7 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n     }\n \n     /**\n-     * Map the error to ServiceBusException\n+     * Map the error to {@link ServiceBusAmqpException}\n      */\n     private Throwable mapError(Throwable throwable, ServiceBusErrorSource errorSource) {\n         if (throwable instanceof AmqpException) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAzMDc1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514030757", "bodyText": "Make this final", "author": "srnagar", "createdAt": "2020-10-29T06:48:41Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusAmqpException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.exception.AmqpException;\n+\n+/**\n+ * Defines {@link ServiceBusAmqpException} which has addition properties. You can {@link ServiceBusErrorSource} to\n+ * determine source of error.\n+ *\n+ * @see ServiceBusErrorSource\n+ */\n+public class ServiceBusAmqpException extends AmqpException {", "originalCommit": "3286f4c4a0a5e407c36e08e71285e536bbe45ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b61551fa0443e35d8147d39ed79c9370c8adddc8", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusAmqpException.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusAmqpException.java\nindex f77b69133a7..9b94470a939 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusAmqpException.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusAmqpException.java\n\n@@ -6,12 +6,11 @@ package com.azure.messaging.servicebus;\n import com.azure.core.amqp.exception.AmqpException;\n \n /**\n- * Defines {@link ServiceBusAmqpException} which has addition properties. You can {@link ServiceBusErrorSource} to\n- * determine source of error.\n+ * Defines {@link ServiceBusAmqpException} which has additional information about the operation that caused the error.\n  *\n  * @see ServiceBusErrorSource\n  */\n-public class ServiceBusAmqpException extends AmqpException {\n+public final class ServiceBusAmqpException extends AmqpException {\n     private final ServiceBusErrorSource errorSource;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAzMjgxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514032818", "bodyText": "We'll need error sources for session-related operations too.", "author": "srnagar", "createdAt": "2020-10-29T06:52:31Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Represent the operation user was performing when the error happened.\n+ */\n+public final class ServiceBusErrorSource extends ExpandableStringEnum<ServiceBusErrorSource> implements Serializable {\n+\n+    private static final long serialVersionUID = -2819764417333954922L;\n+\n+    /** Error while abandoning the message.*/\n+    public static final ServiceBusErrorSource ABANDONED = fromString(\"ABANDONED\", ServiceBusErrorSource.class);\n+\n+    /** Error while completing the message.*/\n+    public static final ServiceBusErrorSource COMPLETE = fromString(\"COMPLETE\", ServiceBusErrorSource.class);\n+\n+    /** Error while deferring the message.*/\n+    public static final ServiceBusErrorSource DEFER = fromString(\"DEFER\", ServiceBusErrorSource.class);\n+\n+    /** Error while dead-lettering the message.*/\n+    public static final ServiceBusErrorSource DEAD_LETTER = fromString(\"DEAD_LETTER\",\n+        ServiceBusErrorSource.class);\n+\n+    /** Error while receiving the message(s).*/\n+    public static final ServiceBusErrorSource RECEIVE = fromString(\"RECEIVE\", ServiceBusErrorSource.class);\n+\n+    /** Error while renewing lock.*/\n+    public static final ServiceBusErrorSource RENEW_LOCK = fromString(\"RENEW_LOCK\", ServiceBusErrorSource.class);", "originalCommit": "3286f4c4a0a5e407c36e08e71285e536bbe45ee1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5Njc5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514096796", "bodyText": "https://github.com/Azure/azure-sdk-for-net/blob/93739d8ef58c6a2d3d5263a043461a36481b270d/sdk/servicebus/Azure.Messaging.ServiceBus/api/Azure.Messaging.ServiceBus.netstandard2.0.cs#L109   Is this what  you want accept, close session ?", "author": "hemanttanwar", "createdAt": "2020-10-29T08:55:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAzMjgxOA=="}], "type": "inlineReview", "revised_code": {"commit": "b61551fa0443e35d8147d39ed79c9370c8adddc8", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\nindex 31b8098bcaa..61d195fc5d4 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\n\n@@ -8,7 +8,7 @@ import com.azure.core.util.ExpandableStringEnum;\n import java.io.Serializable;\n \n /**\n- * Represent the operation user was performing when the error happened.\n+ * Represent the operation this sdk was performing when the error happened.\n  */\n public final class ServiceBusErrorSource extends ExpandableStringEnum<ServiceBusErrorSource> implements Serializable {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAzNDYyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514034626", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final String lockToken1 = UUID.randomUUID().toString();\n          \n          \n            \n                    final String lockToken = UUID.randomUUID().toString();", "author": "srnagar", "createdAt": "2020-10-29T06:55:47Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "diffHunk": "@@ -443,6 +448,135 @@ void deadLetterWithDescription() {\n         verify(amqpReceiveLink).updateDisposition(eq(lockToken1), isA(Rejected.class));\n     }\n \n+    /**\n+     * Verifies that error source is populated when any error happened while renewing lock.\n+     */\n+    @Test\n+    void errorSourceOnRenewMessageLock() {\n+        // Arrange\n+        final Duration maxDuration = Duration.ofSeconds(8);\n+        final String lockToken = \"some-token\";\n+\n+        when(receivedMessage.getLockToken()).thenReturn(lockToken);\n+        when(managementNode.renewMessageLock(lockToken, null))\n+            .thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(receiver.renewMessageLock(receivedMessage, maxDuration))\n+            .verifyErrorMatches(throwable -> {\n+                Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n+                final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n+                Assertions.assertEquals(ServiceBusErrorSource.RENEW_LOCK, actual);\n+                return true;\n+            });\n+\n+        verify(managementNode, times(1)).renewMessageLock(lockToken, null);\n+    }\n+\n+    /**\n+     * Verifies that error source is populated when any error happened while renewing lock.\n+     */\n+    @Test\n+    void errorSourceOnSessionLock() {\n+        // Arrange\n+        when(managementNode.renewSessionLock(SESSION_ID, null)).thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(sessionReceiver.renewSessionLock(SESSION_ID))\n+            .verifyErrorMatches(throwable -> {\n+                Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n+                final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n+                Assertions.assertEquals(ServiceBusErrorSource.RENEW_LOCK, actual);\n+                return true;\n+            });\n+    }\n+\n+    /**\n+     * Verifies that error source is populated when there is any error during message settlement.\n+     */\n+    @ParameterizedTest\n+    @MethodSource\n+    void errorSourceOnSettlement(DispositionStatus dispositionStatus, ServiceBusErrorSource expectedErrorSource,\n+        DeliveryStateType expectedDeliveryState) {\n+        final String lockToken1 = UUID.randomUUID().toString();\n+\n+        final OffsetDateTime expiration = OffsetDateTime.now().plus(Duration.ofMinutes(5));\n+\n+        final MessageWithLockToken message = mock(MessageWithLockToken.class);\n+\n+        when(messageSerializer.deserialize(message, ServiceBusReceivedMessage.class)).thenReturn(receivedMessage);\n+\n+        when(receivedMessage.getLockToken()).thenReturn(lockToken1);\n+        when(receivedMessage.getLockedUntil()).thenReturn(expiration);\n+\n+        when(amqpReceiveLink.updateDisposition(eq(lockToken1), argThat(e -> e.getType() == expectedDeliveryState)))\n+            .thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(receiver.receiveMessages().take(1)\n+            .flatMap(context -> {\n+                final Mono<Void> operation;\n+                switch (dispositionStatus) {\n+                    case DEFERRED:\n+                        operation = receiver.defer(receivedMessage);\n+                        break;\n+                    case ABANDONED:\n+                        operation = receiver.abandon(receivedMessage);\n+                        break;\n+                    case COMPLETED:\n+                        operation = receiver.complete(receivedMessage);\n+                        break;\n+                    case SUSPENDED:\n+                        operation = receiver.deadLetter(receivedMessage);\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unrecognized operation: \" + dispositionStatus);\n+                }\n+                return operation;\n+            }))\n+            .then(() -> messageSink.next(message))\n+            .expectNext()\n+            .verifyErrorMatches(throwable -> {\n+                Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n+                final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n+                Assertions.assertEquals(expectedErrorSource, actual);\n+                return true;\n+            });\n+\n+        verify(amqpReceiveLink).updateDisposition(eq(lockToken1), any(DeliveryState.class));\n+    }\n+\n+    /**\n+     * Verifies that error source is populated when there is any error during receiving of message.\n+     */\n+    @Test\n+    void errorSourceOnReceiveMessage() {\n+        final String lockToken1 = UUID.randomUUID().toString();", "originalCommit": "3286f4c4a0a5e407c36e08e71285e536bbe45ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b61551fa0443e35d8147d39ed79c9370c8adddc8", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\nindex ddbe34e91a4..eb103bd9315 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\n\n@@ -551,7 +551,7 @@ class ServiceBusReceiverAsyncClientTest {\n      */\n     @Test\n     void errorSourceOnReceiveMessage() {\n-        final String lockToken1 = UUID.randomUUID().toString();\n+        final String lockToken = UUID.randomUUID().toString();\n \n         final OffsetDateTime expiration = OffsetDateTime.now().plus(Duration.ofMinutes(5));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAzNDkyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514034923", "bodyText": "Can we also have tests for error source UNKNOWN?", "author": "srnagar", "createdAt": "2020-10-29T06:56:23Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "diffHunk": "@@ -443,6 +448,135 @@ void deadLetterWithDescription() {\n         verify(amqpReceiveLink).updateDisposition(eq(lockToken1), isA(Rejected.class));\n     }\n \n+    /**\n+     * Verifies that error source is populated when any error happened while renewing lock.\n+     */\n+    @Test\n+    void errorSourceOnRenewMessageLock() {\n+        // Arrange\n+        final Duration maxDuration = Duration.ofSeconds(8);\n+        final String lockToken = \"some-token\";\n+\n+        when(receivedMessage.getLockToken()).thenReturn(lockToken);\n+        when(managementNode.renewMessageLock(lockToken, null))\n+            .thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(receiver.renewMessageLock(receivedMessage, maxDuration))\n+            .verifyErrorMatches(throwable -> {\n+                Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n+                final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n+                Assertions.assertEquals(ServiceBusErrorSource.RENEW_LOCK, actual);\n+                return true;\n+            });\n+\n+        verify(managementNode, times(1)).renewMessageLock(lockToken, null);\n+    }\n+\n+    /**\n+     * Verifies that error source is populated when any error happened while renewing lock.\n+     */\n+    @Test\n+    void errorSourceOnSessionLock() {\n+        // Arrange\n+        when(managementNode.renewSessionLock(SESSION_ID, null)).thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(sessionReceiver.renewSessionLock(SESSION_ID))\n+            .verifyErrorMatches(throwable -> {\n+                Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n+                final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n+                Assertions.assertEquals(ServiceBusErrorSource.RENEW_LOCK, actual);\n+                return true;\n+            });\n+    }\n+\n+    /**\n+     * Verifies that error source is populated when there is any error during message settlement.\n+     */\n+    @ParameterizedTest\n+    @MethodSource\n+    void errorSourceOnSettlement(DispositionStatus dispositionStatus, ServiceBusErrorSource expectedErrorSource,\n+        DeliveryStateType expectedDeliveryState) {\n+        final String lockToken1 = UUID.randomUUID().toString();\n+\n+        final OffsetDateTime expiration = OffsetDateTime.now().plus(Duration.ofMinutes(5));\n+\n+        final MessageWithLockToken message = mock(MessageWithLockToken.class);\n+\n+        when(messageSerializer.deserialize(message, ServiceBusReceivedMessage.class)).thenReturn(receivedMessage);\n+\n+        when(receivedMessage.getLockToken()).thenReturn(lockToken1);\n+        when(receivedMessage.getLockedUntil()).thenReturn(expiration);\n+\n+        when(amqpReceiveLink.updateDisposition(eq(lockToken1), argThat(e -> e.getType() == expectedDeliveryState)))\n+            .thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(receiver.receiveMessages().take(1)\n+            .flatMap(context -> {\n+                final Mono<Void> operation;\n+                switch (dispositionStatus) {\n+                    case DEFERRED:\n+                        operation = receiver.defer(receivedMessage);\n+                        break;\n+                    case ABANDONED:\n+                        operation = receiver.abandon(receivedMessage);\n+                        break;\n+                    case COMPLETED:\n+                        operation = receiver.complete(receivedMessage);\n+                        break;\n+                    case SUSPENDED:\n+                        operation = receiver.deadLetter(receivedMessage);\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unrecognized operation: \" + dispositionStatus);\n+                }\n+                return operation;\n+            }))\n+            .then(() -> messageSink.next(message))\n+            .expectNext()\n+            .verifyErrorMatches(throwable -> {\n+                Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n+                final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n+                Assertions.assertEquals(expectedErrorSource, actual);\n+                return true;\n+            });\n+\n+        verify(amqpReceiveLink).updateDisposition(eq(lockToken1), any(DeliveryState.class));\n+    }\n+\n+    /**\n+     * Verifies that error source is populated when there is any error during receiving of message.\n+     */\n+    @Test\n+    void errorSourceOnReceiveMessage() {\n+        final String lockToken1 = UUID.randomUUID().toString();\n+\n+        final OffsetDateTime expiration = OffsetDateTime.now().plus(Duration.ofMinutes(5));\n+\n+        final MessageWithLockToken message = mock(MessageWithLockToken.class);\n+\n+        when(messageSerializer.deserialize(message, ServiceBusReceivedMessage.class)).thenReturn(receivedMessage);\n+\n+        when(receivedMessage.getLockToken()).thenReturn(lockToken1);\n+        when(receivedMessage.getLockedUntil()).thenReturn(expiration);\n+\n+        when(connection.createReceiveLink(anyString(), anyString(), any(ReceiveMode.class), any(),\n+            any(MessagingEntityType.class))).thenReturn(Mono.error(new AmqpException(false, \"some receive link Error.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(receiver.receiveMessages().take(1))\n+            .verifyErrorMatches(throwable -> {\n+                Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n+                final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n+                Assertions.assertEquals(ServiceBusErrorSource.RECEIVE, actual);", "originalCommit": "3286f4c4a0a5e407c36e08e71285e536bbe45ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b61551fa0443e35d8147d39ed79c9370c8adddc8", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\nindex ddbe34e91a4..eb103bd9315 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\n\n@@ -551,7 +551,7 @@ class ServiceBusReceiverAsyncClientTest {\n      */\n     @Test\n     void errorSourceOnReceiveMessage() {\n-        final String lockToken1 = UUID.randomUUID().toString();\n+        final String lockToken = UUID.randomUUID().toString();\n \n         final OffsetDateTime expiration = OffsetDateTime.now().plus(Duration.ofMinutes(5));\n \n"}}, {"oid": "b61551fa0443e35d8147d39ed79c9370c8adddc8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b61551fa0443e35d8147d39ed79c9370c8adddc8", "message": "review comments incorporated", "committedDate": "2020-10-29T09:02:44Z", "type": "commit"}, {"oid": "204fd28389bc8417768e1c35c0a33642a670239f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/204fd28389bc8417768e1c35c0a33642a670239f", "message": "Fixing checkstyle", "committedDate": "2020-10-29T15:29:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyNDQzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514424436", "bodyText": "This is going to mask an autocomplete/Renew exception. iirc, we pass it downstream. it would not be a receive error, it would be a complete error.\nThis should be different in that we check the exception type, if it's ServiceBusErrorSource already and if so, not map it.\nWould be nice to have a test for this.", "author": "conniey", "createdAt": "2020-10-29T17:07:07Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -611,7 +611,8 @@ public String getEntityPath() {\n             withAutoComplete = withAutoLockRenewal;\n         }\n \n-        return withAutoComplete;\n+        return withAutoComplete\n+            .onErrorMap(throwable -> mapError(throwable, ServiceBusErrorSource.RECEIVE));", "originalCommit": "204fd28389bc8417768e1c35c0a33642a670239f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyOTQwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514429402", "bodyText": "verifyErrorSatisfies is the correct one. Same with the other ones.", "author": "conniey", "createdAt": "2020-10-29T17:14:18Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "diffHunk": "@@ -443,6 +448,135 @@ void deadLetterWithDescription() {\n         verify(amqpReceiveLink).updateDisposition(eq(lockToken1), isA(Rejected.class));\n     }\n \n+    /**\n+     * Verifies that error source is populated when any error happened while renewing lock.\n+     */\n+    @Test\n+    void errorSourceOnRenewMessageLock() {\n+        // Arrange\n+        final Duration maxDuration = Duration.ofSeconds(8);\n+        final String lockToken = \"some-token\";\n+\n+        when(receivedMessage.getLockToken()).thenReturn(lockToken);\n+        when(managementNode.renewMessageLock(lockToken, null))\n+            .thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(receiver.renewMessageLock(receivedMessage, maxDuration))\n+            .verifyErrorMatches(throwable -> {\n+                Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n+                final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n+                Assertions.assertEquals(ServiceBusErrorSource.RENEW_LOCK, actual);\n+                return true;\n+            });\n+\n+        verify(managementNode, times(1)).renewMessageLock(lockToken, null);\n+    }\n+\n+    /**\n+     * Verifies that error source is populated when any error happened while renewing lock.\n+     */\n+    @Test\n+    void errorSourceOnSessionLock() {\n+        // Arrange\n+        when(managementNode.renewSessionLock(SESSION_ID, null)).thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(sessionReceiver.renewSessionLock(SESSION_ID))\n+            .verifyErrorMatches(throwable -> {", "originalCommit": "204fd28389bc8417768e1c35c0a33642a670239f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "47bfc0b5bf2c8fe71435151dd3c0c13c6165881c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\nindex eb103bd9315..fbebc4f4bb0 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\n\n@@ -546,6 +546,46 @@ class ServiceBusReceiverAsyncClientTest {\n         verify(amqpReceiveLink).updateDisposition(eq(lockToken1), any(DeliveryState.class));\n     }\n \n+    /**\n+     * Ensure that we throw right error source when there is any issue during autocomplete. Error source should be\n+     * {@link ServiceBusErrorSource#COMPLETE}\n+     */\n+    @Test\n+    void errorSourceAutoCompleteMessage() {\n+        // Arrange\n+        final int numberOfEvents = 2;\n+        final int messagesToReceive = 1;\n+        final List<Message> messages = getMessages();\n+        final String lockToken = UUID.randomUUID().toString();\n+        final ReceiverOptions receiverOptions = new ReceiverOptions(ReceiveMode.PEEK_LOCK, PREFETCH, null, true);\n+        final ServiceBusReceiverAsyncClient receiver2 = new ServiceBusReceiverAsyncClient(NAMESPACE, ENTITY_PATH,\n+            MessagingEntityType.QUEUE, receiverOptions, connectionProcessor, CLEANUP_INTERVAL, tracerProvider,\n+            messageSerializer, onClientClose);\n+\n+        when(receivedMessage.getLockToken()).thenReturn(lockToken);\n+        when(messageSerializer.deserialize(any(Message.class), eq(ServiceBusReceivedMessage.class)))\n+            .thenReturn(receivedMessage);\n+\n+        when(amqpReceiveLink.updateDisposition(lockToken, Accepted.getInstance())).thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        try {\n+            // Act & Assert\n+            StepVerifier.create(receiver2.receiveMessages().take(numberOfEvents))\n+                .then(() -> messages.forEach(m -> messageSink.next(m)))\n+                .expectNextCount(messagesToReceive)\n+                .verifyErrorMatches(throwable -> {\n+                    Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n+                    final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n+                    Assertions.assertEquals(ServiceBusErrorSource.COMPLETE, actual);\n+                    return true;\n+                });\n+        } finally {\n+            receiver2.close();\n+        }\n+\n+        verify(amqpReceiveLink, times(messagesToReceive)).updateDisposition(lockToken, Accepted.getInstance());\n+    }\n+\n     /**\n      * Verifies that error source is populated when there is any error during receiving of message.\n      */\n"}}, {"oid": "47bfc0b5bf2c8fe71435151dd3c0c13c6165881c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/47bfc0b5bf2c8fe71435151dd3c0c13c6165881c", "message": "Incorporated  review comments", "committedDate": "2020-10-29T18:59:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzMDMxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514530310", "bodyText": "Is there a reason we need to implement Serializable? Is this a thing? \ud83e\udd14  @JonathanGiles", "author": "conniey", "createdAt": "2020-10-29T20:01:24Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Represent the operation this sdk was performing when the error happened.\n+ */\n+public final class ServiceBusErrorSource extends ExpandableStringEnum<ServiceBusErrorSource> implements Serializable {\n+\n+    private static final long serialVersionUID = -2819764417333954922L;", "originalCommit": "47bfc0b5bf2c8fe71435151dd3c0c13c6165881c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwNTQwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514605401", "bodyText": "Connie is right - we shouldn't be making everything serializable by default.", "author": "JonathanGiles", "createdAt": "2020-10-29T22:33:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzMDMxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyMjk4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514622986", "bodyText": "We are getting this error in spotbug at build time.\n[ERROR] Class com.azure.messaging.servicebus.ServiceBusAmqpException defines non-transient non-serializable instance field errorSource [com.azure.messaging.servicebus.ServiceBusAmqpException] In ServiceBusAmqpException.java SE_BAD_FIELD", "author": "hemanttanwar", "createdAt": "2020-10-29T23:23:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzMDMxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY2NTI4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514665285", "bodyText": "changed it to transient.", "author": "hemanttanwar", "createdAt": "2020-10-30T01:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzMDMxMA=="}], "type": "inlineReview", "revised_code": {"commit": "59ff15f844981e0e3831fa897ac0800d9beb1fcf", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\nindex 3765fc690c3..5871b14cd57 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\n\n@@ -5,14 +5,10 @@ package com.azure.messaging.servicebus;\n \n import com.azure.core.util.ExpandableStringEnum;\n \n-import java.io.Serializable;\n-\n /**\n  * Represent the operation this sdk was performing when the error happened.\n  */\n-public final class ServiceBusErrorSource extends ExpandableStringEnum<ServiceBusErrorSource> implements Serializable {\n-\n-    private static final long serialVersionUID = -2819764417333954922L;\n+public final class ServiceBusErrorSource extends ExpandableStringEnum<ServiceBusErrorSource> {\n \n     /** Error while abandoning the message.*/\n     public static final ServiceBusErrorSource ABANDONED = fromString(\"ABANDONED\", ServiceBusErrorSource.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzMTY0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514531647", "bodyText": "This can be condensed.\nif ((throwable instanceof ServiceBusAmqpException) || !(throwable instanceof AmqpException)) {\n    return throwable;\n}\n\nreturn new ServiceBusAmqpException((AmqpException) throwable, errorSource);", "author": "conniey", "createdAt": "2020-10-29T20:03:07Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1136,4 +1172,19 @@ private String getLinkName(String sessionId) {\n             return existing != null ? existing.getLinkName() : null;\n         }\n     }\n+\n+    /**\n+     * Map the error to {@link ServiceBusAmqpException}\n+     */\n+    private Throwable mapError(Throwable throwable, ServiceBusErrorSource errorSource) {\n+        if (throwable instanceof ServiceBusAmqpException) {", "originalCommit": "47bfc0b5bf2c8fe71435151dd3c0c13c6165881c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e62f7f5d44c26d72ea640f4e61d6a01011e3e6d0", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex 39c8bcb277b..ff92c24604c 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -1177,14 +1177,10 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n      * Map the error to {@link ServiceBusAmqpException}\n      */\n     private Throwable mapError(Throwable throwable, ServiceBusErrorSource errorSource) {\n-        if (throwable instanceof ServiceBusAmqpException) {\n+        if ((throwable instanceof ServiceBusAmqpException) || !(throwable instanceof AmqpException)) {\n             return throwable;\n-        }\n-\n-        if (throwable instanceof AmqpException) {\n-            return new ServiceBusAmqpException((AmqpException) throwable, errorSource);\n         } else {\n-            return throwable;\n+            return new ServiceBusAmqpException((AmqpException) throwable, errorSource);\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzNDUzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514534532", "bodyText": "These should all be: verifyErrorSatisfies.  verifyErrorMatches should be taking a predicate. This predicate ALWAYS returns true because you've done assertions. So this should be a consumer.\nhttps://projectreactor.io/docs/test/release/api/reactor/test/StepVerifier.LastStep.html#verifyErrorSatisfies-java.util.function.Consumer-", "author": "conniey", "createdAt": "2020-10-29T20:06:40Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "diffHunk": "@@ -443,6 +448,175 @@ void deadLetterWithDescription() {\n         verify(amqpReceiveLink).updateDisposition(eq(lockToken1), isA(Rejected.class));\n     }\n \n+    /**\n+     * Verifies that error source is populated when any error happened while renewing lock.\n+     */\n+    @Test\n+    void errorSourceOnRenewMessageLock() {\n+        // Arrange\n+        final Duration maxDuration = Duration.ofSeconds(8);\n+        final String lockToken = \"some-token\";\n+\n+        when(receivedMessage.getLockToken()).thenReturn(lockToken);\n+        when(managementNode.renewMessageLock(lockToken, null))\n+            .thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(receiver.renewMessageLock(receivedMessage, maxDuration))\n+            .verifyErrorMatches(throwable -> {\n+                Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n+                final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n+                Assertions.assertEquals(ServiceBusErrorSource.RENEW_LOCK, actual);\n+                return true;\n+            });\n+\n+        verify(managementNode, times(1)).renewMessageLock(lockToken, null);\n+    }\n+\n+    /**\n+     * Verifies that error source is populated when any error happened while renewing lock.\n+     */\n+    @Test\n+    void errorSourceOnSessionLock() {\n+        // Arrange\n+        when(managementNode.renewSessionLock(SESSION_ID, null)).thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(sessionReceiver.renewSessionLock(SESSION_ID))\n+            .verifyErrorMatches(throwable -> {\n+                Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n+                final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n+                Assertions.assertEquals(ServiceBusErrorSource.RENEW_LOCK, actual);\n+                return true;\n+            });\n+    }\n+\n+    /**\n+     * Verifies that error source is populated when there is any error during message settlement.\n+     */\n+    @ParameterizedTest\n+    @MethodSource\n+    void errorSourceOnSettlement(DispositionStatus dispositionStatus, ServiceBusErrorSource expectedErrorSource,\n+        DeliveryStateType expectedDeliveryState) {\n+        final String lockToken1 = UUID.randomUUID().toString();\n+\n+        final OffsetDateTime expiration = OffsetDateTime.now().plus(Duration.ofMinutes(5));\n+\n+        final MessageWithLockToken message = mock(MessageWithLockToken.class);\n+\n+        when(messageSerializer.deserialize(message, ServiceBusReceivedMessage.class)).thenReturn(receivedMessage);\n+\n+        when(receivedMessage.getLockToken()).thenReturn(lockToken1);\n+        when(receivedMessage.getLockedUntil()).thenReturn(expiration);\n+\n+        when(amqpReceiveLink.updateDisposition(eq(lockToken1), argThat(e -> e.getType() == expectedDeliveryState)))\n+            .thenReturn(Mono.error(new AmqpException(false, \"some error occurred.\", null)));\n+\n+        // Act & Assert\n+        StepVerifier.create(receiver.receiveMessages().take(1)\n+            .flatMap(context -> {\n+                final Mono<Void> operation;\n+                switch (dispositionStatus) {\n+                    case DEFERRED:\n+                        operation = receiver.defer(receivedMessage);\n+                        break;\n+                    case ABANDONED:\n+                        operation = receiver.abandon(receivedMessage);\n+                        break;\n+                    case COMPLETED:\n+                        operation = receiver.complete(receivedMessage);\n+                        break;\n+                    case SUSPENDED:\n+                        operation = receiver.deadLetter(receivedMessage);\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unrecognized operation: \" + dispositionStatus);\n+                }\n+                return operation;\n+            }))\n+            .then(() -> messageSink.next(message))\n+            .expectNext()\n+            .verifyErrorMatches(throwable -> {", "originalCommit": "47bfc0b5bf2c8fe71435151dd3c0c13c6165881c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e62f7f5d44c26d72ea640f4e61d6a01011e3e6d0", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\nindex fbebc4f4bb0..042cbfcaf1d 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\n\n@@ -463,11 +463,10 @@ class ServiceBusReceiverAsyncClientTest {\n \n         // Act & Assert\n         StepVerifier.create(receiver.renewMessageLock(receivedMessage, maxDuration))\n-            .verifyErrorMatches(throwable -> {\n+            .verifyErrorSatisfies(throwable -> {\n                 Assertions.assertTrue(throwable instanceof ServiceBusAmqpException);\n                 final ServiceBusErrorSource actual = ((ServiceBusAmqpException) throwable).getErrorSource();\n                 Assertions.assertEquals(ServiceBusErrorSource.RENEW_LOCK, actual);\n-                return true;\n             });\n \n         verify(managementNode, times(1)).renewMessageLock(lockToken, null);\n"}}, {"oid": "e62f7f5d44c26d72ea640f4e61d6a01011e3e6d0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e62f7f5d44c26d72ea640f4e61d6a01011e3e6d0", "message": "Review comments", "committedDate": "2020-10-29T23:27:09Z", "type": "commit"}, {"oid": "4c11eb445e1fa76465189c8e1ea31d3bc7a14a7a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4c11eb445e1fa76465189c8e1ea31d3bc7a14a7a", "message": "Review comments", "committedDate": "2020-10-29T23:29:53Z", "type": "commit"}, {"oid": "59ff15f844981e0e3831fa897ac0800d9beb1fcf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/59ff15f844981e0e3831fa897ac0800d9beb1fcf", "message": "Review comments", "committedDate": "2020-10-29T23:59:09Z", "type": "commit"}, {"oid": "5b0d16a63c7d471f44715fa57e852b59ec2da31e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5b0d16a63c7d471f44715fa57e852b59ec2da31e", "message": "Removed unwanted error source types", "committedDate": "2020-10-30T01:28:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg3OTI2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514879261", "bodyText": "Why do we need MESSAGE here in this enum? Can this be named ACCEPT_SESSION and CLOSE_SESSION for the next one?", "author": "srnagar", "createdAt": "2020-10-30T05:27:59Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+\n+/**\n+ * Represent the operation this sdk was performing when the error happened.\n+ */\n+public final class ServiceBusErrorSource extends ExpandableStringEnum<ServiceBusErrorSource> {\n+\n+    /** Error while abandoning the message.*/\n+    public static final ServiceBusErrorSource ABANDONED = fromString(\"ABANDONED\", ServiceBusErrorSource.class);\n+\n+    /** Error while completing the message.*/\n+    public static final ServiceBusErrorSource COMPLETE = fromString(\"COMPLETE\", ServiceBusErrorSource.class);\n+\n+    /** Error while receiving the message(s).*/\n+    public static final ServiceBusErrorSource RECEIVE = fromString(\"RECEIVE\", ServiceBusErrorSource.class);\n+\n+    /** Error while renewing lock.*/\n+    public static final ServiceBusErrorSource RENEW_LOCK = fromString(\"RENEW_LOCK\", ServiceBusErrorSource.class);\n+\n+    /** Error when we could not determine the source.*/\n+    public static final ServiceBusErrorSource UNKNOWN = fromString(\"UNKNOWN\", ServiceBusErrorSource.class);\n+\n+    /** Error while user's code is running for a message.*/\n+    public static final ServiceBusErrorSource USER_CALLBACK = fromString(\"USER_CALLBACK\",\n+        ServiceBusErrorSource.class);\n+\n+    /** Error while session is accepted.*/\n+    public static final ServiceBusErrorSource ACCEPT_MESSAGE_SESSION = fromString(\"ACCEPT_MESSAGE_SESSION\",", "originalCommit": "5b0d16a63c7d471f44715fa57e852b59ec2da31e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwNDk2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514904965", "bodyText": "I copied from dotnet, but I will change it.", "author": "hemanttanwar", "createdAt": "2020-10-30T07:04:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg3OTI2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "62510bdfeee20cbd41ec3e6a393fdaff4b75d505", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\nindex 18a0810c9c1..43f3be2609a 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\n\n@@ -30,10 +30,10 @@ public final class ServiceBusErrorSource extends ExpandableStringEnum<ServiceBus\n         ServiceBusErrorSource.class);\n \n     /** Error while session is accepted.*/\n-    public static final ServiceBusErrorSource ACCEPT_MESSAGE_SESSION = fromString(\"ACCEPT_MESSAGE_SESSION\",\n+    public static final ServiceBusErrorSource ACCEPT_SESSION = fromString(\"ACCEPT_SESSION\",\n         ServiceBusErrorSource.class);\n \n     /** Error while session is closed.*/\n-    public static final ServiceBusErrorSource CLOSE_MESSAGE_SESSION = fromString(\"CLOSE_MESSAGE_SESSION\",\n+    public static final ServiceBusErrorSource CLOSE_SESSION = fromString(\"CLOSE_SESSION\",\n         ServiceBusErrorSource.class);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg3OTYwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514879609", "bodyText": "DEFER is not in ServiceBusErrorSource", "author": "srnagar", "createdAt": "2020-10-30T05:29:35Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1060,20 +1068,48 @@ private boolean isManagementToken(String lockToken) {\n                     logger.info(\"Could not perform on session manger. Performing on management node.\");\n                     return performOnManagement;\n                 });\n-        }\n-\n-        final ServiceBusAsyncConsumer existingConsumer = consumer.get();\n-        if (isManagementToken(lockToken) || existingConsumer == null) {\n-            return performOnManagement;\n         } else {\n-            return existingConsumer.updateDisposition(lockToken, dispositionStatus, deadLetterReason,\n-                deadLetterErrorDescription, propertiesToModify, transactionContext)\n-                .then(Mono.fromRunnable(() -> {\n-                    logger.info(\"{}: Update completed. Disposition: {}. Lock: {}.\",\n-                        entityPath, dispositionStatus, lockToken);\n-                    renewalContainer.remove(lockToken);\n-                }));\n+            final ServiceBusAsyncConsumer existingConsumer = consumer.get();\n+            if (isManagementToken(lockToken) || existingConsumer == null) {\n+                updateDispositionOperation = performOnManagement;\n+            } else {\n+                updateDispositionOperation = existingConsumer.updateDisposition(lockToken, dispositionStatus,\n+                    deadLetterReason, deadLetterErrorDescription, propertiesToModify, transactionContext)\n+                    .then(Mono.fromRunnable(() -> {\n+                        logger.info(\"{}: Update completed. Disposition: {}. Lock: {}.\",\n+                            entityPath, dispositionStatus, lockToken);\n+                        renewalContainer.remove(lockToken);\n+                    }));\n+            }\n         }\n+        return updateDispositionOperation\n+            .onErrorMap(throwable -> {\n+                ServiceBusErrorSource errorSource;\n+                if (throwable instanceof AmqpException) {\n+                    switch (dispositionStatus) {\n+                        case COMPLETED:\n+                            errorSource = ServiceBusErrorSource.COMPLETE;\n+                            break;\n+                        case DEFERRED:\n+                            errorSource = ServiceBusErrorSource.DEFER;", "originalCommit": "5b0d16a63c7d471f44715fa57e852b59ec2da31e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "205fbfef94069c968b9b3509e08bb960e831de3c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex ff92c24604c..3efab934189 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -1084,30 +1084,20 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n         }\n         return updateDispositionOperation\n             .onErrorMap(throwable -> {\n-                ServiceBusErrorSource errorSource;\n-                if (throwable instanceof AmqpException) {\n+                // We only populate ErrorSource only when AutoComplete is enabled.\n+                if (receiverOptions.isEnableAutoComplete() && throwable instanceof AmqpException) {\n                     switch (dispositionStatus) {\n                         case COMPLETED:\n-                            errorSource = ServiceBusErrorSource.COMPLETE;\n-                            break;\n-                        case DEFERRED:\n-                            errorSource = ServiceBusErrorSource.DEFER;\n-                            break;\n-                        case SUSPENDED:\n-                            errorSource = ServiceBusErrorSource.DEAD_LETTER;\n-                            break;\n+                            return new ServiceBusAmqpException((AmqpException) throwable,\n+                                ServiceBusErrorSource.COMPLETE);\n                         case ABANDONED:\n-                            errorSource = ServiceBusErrorSource.ABANDONED;\n-                            break;\n+                            return new ServiceBusAmqpException((AmqpException) throwable,\n+                                ServiceBusErrorSource.ABANDONED);\n                         default:\n-                            errorSource = ServiceBusErrorSource.UNKNOWN;\n+                            // Do nothing\n                     }\n-\n-                    return new ServiceBusAmqpException((AmqpException) throwable, errorSource);\n-\n-                } else {\n-                    return throwable;\n                 }\n+                return throwable;\n \n             });\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg3OTgxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16710#discussion_r514879819", "bodyText": "DEAD_LETTER too is removed from ServiceBusErrorSource.", "author": "srnagar", "createdAt": "2020-10-30T05:30:22Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1060,20 +1068,48 @@ private boolean isManagementToken(String lockToken) {\n                     logger.info(\"Could not perform on session manger. Performing on management node.\");\n                     return performOnManagement;\n                 });\n-        }\n-\n-        final ServiceBusAsyncConsumer existingConsumer = consumer.get();\n-        if (isManagementToken(lockToken) || existingConsumer == null) {\n-            return performOnManagement;\n         } else {\n-            return existingConsumer.updateDisposition(lockToken, dispositionStatus, deadLetterReason,\n-                deadLetterErrorDescription, propertiesToModify, transactionContext)\n-                .then(Mono.fromRunnable(() -> {\n-                    logger.info(\"{}: Update completed. Disposition: {}. Lock: {}.\",\n-                        entityPath, dispositionStatus, lockToken);\n-                    renewalContainer.remove(lockToken);\n-                }));\n+            final ServiceBusAsyncConsumer existingConsumer = consumer.get();\n+            if (isManagementToken(lockToken) || existingConsumer == null) {\n+                updateDispositionOperation = performOnManagement;\n+            } else {\n+                updateDispositionOperation = existingConsumer.updateDisposition(lockToken, dispositionStatus,\n+                    deadLetterReason, deadLetterErrorDescription, propertiesToModify, transactionContext)\n+                    .then(Mono.fromRunnable(() -> {\n+                        logger.info(\"{}: Update completed. Disposition: {}. Lock: {}.\",\n+                            entityPath, dispositionStatus, lockToken);\n+                        renewalContainer.remove(lockToken);\n+                    }));\n+            }\n         }\n+        return updateDispositionOperation\n+            .onErrorMap(throwable -> {\n+                ServiceBusErrorSource errorSource;\n+                if (throwable instanceof AmqpException) {\n+                    switch (dispositionStatus) {\n+                        case COMPLETED:\n+                            errorSource = ServiceBusErrorSource.COMPLETE;\n+                            break;\n+                        case DEFERRED:\n+                            errorSource = ServiceBusErrorSource.DEFER;\n+                            break;\n+                        case SUSPENDED:\n+                            errorSource = ServiceBusErrorSource.DEAD_LETTER;", "originalCommit": "5b0d16a63c7d471f44715fa57e852b59ec2da31e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "205fbfef94069c968b9b3509e08bb960e831de3c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex ff92c24604c..3efab934189 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -1084,30 +1084,20 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n         }\n         return updateDispositionOperation\n             .onErrorMap(throwable -> {\n-                ServiceBusErrorSource errorSource;\n-                if (throwable instanceof AmqpException) {\n+                // We only populate ErrorSource only when AutoComplete is enabled.\n+                if (receiverOptions.isEnableAutoComplete() && throwable instanceof AmqpException) {\n                     switch (dispositionStatus) {\n                         case COMPLETED:\n-                            errorSource = ServiceBusErrorSource.COMPLETE;\n-                            break;\n-                        case DEFERRED:\n-                            errorSource = ServiceBusErrorSource.DEFER;\n-                            break;\n-                        case SUSPENDED:\n-                            errorSource = ServiceBusErrorSource.DEAD_LETTER;\n-                            break;\n+                            return new ServiceBusAmqpException((AmqpException) throwable,\n+                                ServiceBusErrorSource.COMPLETE);\n                         case ABANDONED:\n-                            errorSource = ServiceBusErrorSource.ABANDONED;\n-                            break;\n+                            return new ServiceBusAmqpException((AmqpException) throwable,\n+                                ServiceBusErrorSource.ABANDONED);\n                         default:\n-                            errorSource = ServiceBusErrorSource.UNKNOWN;\n+                            // Do nothing\n                     }\n-\n-                    return new ServiceBusAmqpException((AmqpException) throwable, errorSource);\n-\n-                } else {\n-                    return throwable;\n                 }\n+                return throwable;\n \n             });\n     }\n"}}, {"oid": "205fbfef94069c968b9b3509e08bb960e831de3c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/205fbfef94069c968b9b3509e08bb960e831de3c", "message": "Fix unit test and ErrorSource only for AutoComplete on", "committedDate": "2020-10-30T07:01:44Z", "type": "commit"}, {"oid": "62510bdfeee20cbd41ec3e6a393fdaff4b75d505", "url": "https://github.com/Azure/azure-sdk-for-java/commit/62510bdfeee20cbd41ec3e6a393fdaff4b75d505", "message": "Review Comments", "committedDate": "2020-10-30T07:05:32Z", "type": "commit"}, {"oid": "6d79df0c6fd251fa8cfefcea3a52cdba716abb6b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6d79df0c6fd251fa8cfefcea3a52cdba716abb6b", "message": " Fix unit test", "committedDate": "2020-10-30T08:40:56Z", "type": "commit"}, {"oid": "0a6fea9c71f12b4e89542133caeca79f5e664a99", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0a6fea9c71f12b4e89542133caeca79f5e664a99", "message": "merge conflict resolution", "committedDate": "2020-10-30T09:46:19Z", "type": "commit"}]}