{"pr_number": 14849, "pr_title": "Add Sync samples for Model Lifecycle.", "pr_createdAt": "2020-09-04T21:21:26Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14849", "timeline": [{"oid": "fa22aef2833303bcf53a6858285b9f6a8bf1f910", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fa22aef2833303bcf53a6858285b9f6a8bf1f910", "message": "Add Sync samples for Model Lifecycle.", "committedDate": "2020-09-04T21:21:10Z", "type": "commit"}, {"oid": "bb711e2acc0ed2bcd3f90338c9017c965aa429da", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bb711e2acc0ed2bcd3f90338c9017c965aa429da", "message": "Update ModelsLifecycleSyncSamples.java", "committedDate": "2020-09-04T21:23:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2MjUyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483862524", "bodyText": "Thanks for adding this!", "author": "timtay-microsoft", "createdAt": "2020-09-04T22:04:31Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -454,6 +454,16 @@ public void deleteRelationship(String digitalTwinId, String relationshipId) {\n     // Models APIs\n     //==================================================================================================================================================\n \n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A {@link PagedIterable} of created models and the http response.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedIterable<ModelData> createModels(List<String> models) {", "originalCommit": "bb711e2acc0ed2bcd3f90338c9017c965aa429da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2NDY0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483864643", "bodyText": "I will be changing it back to List ...", "author": "azabbasi", "createdAt": "2020-09-04T22:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2MjUyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2NTU2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483865565", "bodyText": "Good to know. I'll update the e2e tests accordingly", "author": "timtay-microsoft", "createdAt": "2020-09-04T22:16:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2MjUyNA=="}], "type": "inlineReview", "revised_code": {"commit": "ea35ff7e152222546b00e64996af513c8db9e76c", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java\nindex f768b39e9dc..d8455a16e9e 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java\n\n@@ -457,22 +457,22 @@ public final class DigitalTwinsClient {\n     /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return A {@link PagedIterable} of created models and the http response.\n+     * @return A List of created models.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedIterable<ModelData> createModels(List<String> models) {\n-        return new PagedIterable<>(digitalTwinsAsyncClient.createModels(models));\n+    public List<ModelData> createModels(List<String> models) {\n+        return digitalTwinsAsyncClient.createModels(models).block();\n     }\n \n     /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n      * @param context Additional context that is passed through the Http pipeline during the service call.\n-     * @return A {@link PagedIterable} of created models and the http response.\n+     * @return A List of created models and the http response.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedIterable<ModelData> createModels(List<String> models, Context context) {\n-        return new PagedIterable<>(digitalTwinsAsyncClient.createModels(models, context));\n+    public Response<List<ModelData>> createModelsWithResponse(List<String> models, Context context) {\n+        return digitalTwinsAsyncClient.createModelsWithResponse(models, context).block();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2MjkzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483862933", "bodyText": "Java methods should be lowercase Camelcase", "author": "timtay-microsoft", "createdAt": "2020-09-04T22:06:18Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+import org.apache.http.HttpStatus;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+/**\n+ * Creates a component with a random Id.\n+ * Creates a new model with a random Id that uses the previously created component.\n+ * Decommission the newly created models (model and component) and check for success.\n+ * Delete all created models and components.\n+ */\n+public class ModelsLifecycleSyncSamples {\n+\n+    private static DigitalTwinsClient client;\n+\n+    public static void main(String[] args) throws IOException, InterruptedException {\n+\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .tokenCredential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        RunModelLifecycleSample();\n+    }\n+\n+    public static void RunModelLifecycleSample() {", "originalCommit": "bb711e2acc0ed2bcd3f90338c9017c965aa429da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2NDcxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483864715", "bodyText": "yeah ... old habits", "author": "azabbasi", "createdAt": "2020-09-04T22:13:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2MjkzMw=="}], "type": "inlineReview", "revised_code": {"commit": "ea35ff7e152222546b00e64996af513c8db9e76c", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java\nindex 85376ecb127..fb5af9d9900 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java\n\n@@ -41,10 +41,10 @@ public class ModelsLifecycleSyncSamples {\n                     .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n             .buildClient();\n \n-        RunModelLifecycleSample();\n+        runModelLifecycleSample();\n     }\n \n-    public static void RunModelLifecycleSample() {\n+    public static void runModelLifecycleSample() {\n         // For the purpose of this sample we will create temporary models using random model Ids and then decommission a model.\n         // We have to make sure these model Ids are unique within the DigitalTwin instance.\n         String componentModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryComponentModelPrefix, client);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2MzM1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483863352", "bodyText": "\"Some string \" + ex  doesn't give the full stack trace. That's fine since this is a sample, but for future reference, most loggers take the exception as a parameter after the string like log.error(\"Something bad happened!\", someException)", "author": "timtay-microsoft", "createdAt": "2020-09-04T22:08:00Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+import org.apache.http.HttpStatus;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+/**\n+ * Creates a component with a random Id.\n+ * Creates a new model with a random Id that uses the previously created component.\n+ * Decommission the newly created models (model and component) and check for success.\n+ * Delete all created models and components.\n+ */\n+public class ModelsLifecycleSyncSamples {\n+\n+    private static DigitalTwinsClient client;\n+\n+    public static void main(String[] args) throws IOException, InterruptedException {\n+\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .tokenCredential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        RunModelLifecycleSample();\n+    }\n+\n+    public static void RunModelLifecycleSample() {\n+        // For the purpose of this sample we will create temporary models using random model Ids and then decommission a model.\n+        // We have to make sure these model Ids are unique within the DigitalTwin instance.\n+        String componentModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryComponentModelPrefix, client);\n+        String sampleModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryModelPrefix, client);\n+\n+        String newComponentModelPayload = SamplesConstants.TemporaryComponentModelPayload\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        String newModelPayload = SamplesConstants.TemporaryModelWithComponentPayload\n+            .replace(SamplesConstants.ModelId, sampleModelId)\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        ConsoleLogger.PrintHeader(\"Create models\");\n+\n+        try {\n+            // Create the model\n+            // TODO: azabbasi: Discuss the usability of this API with SDK team and change the return type if possible\n+            // Currently we have to iterate through the response for the lazy method invocation to run.\n+            client.createModels(new ArrayList<String>(Arrays.asList(newComponentModelPayload, newModelPayload)))\n+                .forEach((modelData -> {\n+                    System.out.println(\"Created model \" + modelData.getId());\n+                }));\n+\n+            ConsoleLogger.PrintSuccess(\"Created models \" + componentModelId + \" and \" + sampleModelId);\n+        }\n+        catch (ErrorResponseException ex){\n+            if (ex.getResponse().getStatusCode() == HttpStatus.SC_CONFLICT) {\n+                ConsoleLogger.PrintWarning(\"One or more models already existed\");\n+            }\n+        }\n+        catch (Exception ex) {\n+            ConsoleLogger.PrintFatal(\"Failed to create models due to: \\n\" + ex);", "originalCommit": "bb711e2acc0ed2bcd3f90338c9017c965aa429da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea35ff7e152222546b00e64996af513c8db9e76c", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java\nindex 85376ecb127..fb5af9d9900 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java\n\n@@ -41,10 +41,10 @@ public class ModelsLifecycleSyncSamples {\n                     .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n             .buildClient();\n \n-        RunModelLifecycleSample();\n+        runModelLifecycleSample();\n     }\n \n-    public static void RunModelLifecycleSample() {\n+    public static void runModelLifecycleSample() {\n         // For the purpose of this sample we will create temporary models using random model Ids and then decommission a model.\n         // We have to make sure these model Ids are unique within the DigitalTwin instance.\n         String componentModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryComponentModelPrefix, client);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2MzcwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483863700", "bodyText": "I get the impression that we'll need this logic in the e2e tests and in the samples. If this PR goes in first, I'll try to rewrite my tests to leverage this helper class instead of writing a similar one", "author": "timtay-microsoft", "createdAt": "2020-09-04T22:09:16Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/UniqueIdHelper.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.azure.digitaltwins.core.helpers;\n+\n+import com.azure.digitaltwins.core.DigitalTwinsClient;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import org.apache.http.HttpStatus;\n+\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+public class UniqueIdHelper {", "originalCommit": "bb711e2acc0ed2bcd3f90338c9017c965aa429da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea35ff7e152222546b00e64996af513c8db9e76c", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/UniqueIdHelper.java b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/UniqueIdHelper.java\nindex e6abe554688..4f0214413b5 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/UniqueIdHelper.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/helpers/UniqueIdHelper.java\n\n@@ -2,8 +2,8 @@ package com.azure.digitaltwins.core.helpers;\n \n import com.azure.digitaltwins.core.DigitalTwinsClient;\n import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n-import org.apache.http.HttpStatus;\n \n+import java.net.HttpURLConnection;\n import java.util.Random;\n import java.util.function.Function;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg2NTE2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483865162", "bodyText": "Typically the Java SDKs use HttpsUrlConnection class to get http status codes. See here", "author": "timtay-microsoft", "createdAt": "2020-09-04T22:15:23Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+import org.apache.http.HttpStatus;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+/**\n+ * Creates a component with a random Id.\n+ * Creates a new model with a random Id that uses the previously created component.\n+ * Decommission the newly created models (model and component) and check for success.\n+ * Delete all created models and components.\n+ */\n+public class ModelsLifecycleSyncSamples {\n+\n+    private static DigitalTwinsClient client;\n+\n+    public static void main(String[] args) throws IOException, InterruptedException {\n+\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .tokenCredential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        RunModelLifecycleSample();\n+    }\n+\n+    public static void RunModelLifecycleSample() {\n+        // For the purpose of this sample we will create temporary models using random model Ids and then decommission a model.\n+        // We have to make sure these model Ids are unique within the DigitalTwin instance.\n+        String componentModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryComponentModelPrefix, client);\n+        String sampleModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryModelPrefix, client);\n+\n+        String newComponentModelPayload = SamplesConstants.TemporaryComponentModelPayload\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        String newModelPayload = SamplesConstants.TemporaryModelWithComponentPayload\n+            .replace(SamplesConstants.ModelId, sampleModelId)\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        ConsoleLogger.PrintHeader(\"Create models\");\n+\n+        try {\n+            // Create the model\n+            // TODO: azabbasi: Discuss the usability of this API with SDK team and change the return type if possible\n+            // Currently we have to iterate through the response for the lazy method invocation to run.\n+            client.createModels(new ArrayList<String>(Arrays.asList(newComponentModelPayload, newModelPayload)))\n+                .forEach((modelData -> {\n+                    System.out.println(\"Created model \" + modelData.getId());\n+                }));\n+\n+            ConsoleLogger.PrintSuccess(\"Created models \" + componentModelId + \" and \" + sampleModelId);\n+        }\n+        catch (ErrorResponseException ex){\n+            if (ex.getResponse().getStatusCode() == HttpStatus.SC_CONFLICT) {", "originalCommit": "bb711e2acc0ed2bcd3f90338c9017c965aa429da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea35ff7e152222546b00e64996af513c8db9e76c", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java\nindex 85376ecb127..fb5af9d9900 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java\n\n@@ -41,10 +41,10 @@ public class ModelsLifecycleSyncSamples {\n                     .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n             .buildClient();\n \n-        RunModelLifecycleSample();\n+        runModelLifecycleSample();\n     }\n \n-    public static void RunModelLifecycleSample() {\n+    public static void runModelLifecycleSample() {\n         // For the purpose of this sample we will create temporary models using random model Ids and then decommission a model.\n         // We have to make sure these model Ids are unique within the DigitalTwin instance.\n         String componentModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryComponentModelPrefix, client);\n"}}, {"oid": "ea35ff7e152222546b00e64996af513c8db9e76c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ea35ff7e152222546b00e64996af513c8db9e76c", "message": "Address comments", "committedDate": "2020-09-04T22:40:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MjU1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483872556", "bodyText": "Nice! A list for create response is so much better than a pageable!", "author": "abhipsaMisra", "createdAt": "2020-09-04T22:50:08Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -747,23 +747,25 @@ public HttpPipeline getHttpPipeline() {\n     /**\n      * Creates one or many models.\n      * @param models The list of models to create. Each string corresponds to exactly one model.\n-     * @return A {@link PagedFlux} of created models and the http response.\n+     * @return A List of created models.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedFlux<ModelData> createModels(List<String> models) {\n-        return new PagedFlux<>(\n-            () -> withContext(context -> createModelsSinglePageAsync(models, context)),\n-            nextLink -> withContext(context -> Mono.empty()));\n+    public Mono<List<ModelData>> createModels(List<String> models) {", "originalCommit": "ea35ff7e152222546b00e64996af513c8db9e76c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MzE4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483873189", "bodyText": "yes, Srikanta wasn't the happiest about this decision, but he agreed that for the time being if the service team is not planning to start paginating the response of this request, this is the only way going forward.", "author": "azabbasi", "createdAt": "2020-09-04T22:53:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MjU1Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MzE3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483873178", "bodyText": "nit: we've been following the pattern where each sync API calls its max arg overload, and the max arg overload calls into the async API; so this could call createModelsWithResponse(List<String> models, Context context) sync API with Context.None.", "author": "abhipsaMisra", "createdAt": "2020-09-04T22:53:16Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -454,15 +454,25 @@ public void deleteRelationship(String digitalTwinId, String relationshipId) {\n     // Models APIs\n     //==================================================================================================================================================\n \n+    /**\n+     * Creates one or many models.\n+     * @param models The list of models to create. Each string corresponds to exactly one model.\n+     * @return A List of created models.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public List<ModelData> createModels(List<String> models) {\n+        return digitalTwinsAsyncClient.createModels(models).block();", "originalCommit": "ea35ff7e152222546b00e64996af513c8db9e76c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MzY4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483873680", "bodyText": "return digitalTwinsAsyncClient.createModelsWithResponse(models, Context.NONE)\n            .map(Response::getValue).block();", "author": "azabbasi", "createdAt": "2020-09-04T22:55:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MzE3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MzY5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483873693", "bodyText": "?", "author": "azabbasi", "createdAt": "2020-09-04T22:55:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MzE3OA=="}], "type": "inlineReview", "revised_code": {"commit": "d51e167cf5419ed49ce77c977165a333b363df25", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java\nindex d8455a16e9e..75aa1ec6770 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java\n\n@@ -461,7 +461,7 @@ public final class DigitalTwinsClient {\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n     public List<ModelData> createModels(List<String> models) {\n-        return digitalTwinsAsyncClient.createModels(models).block();\n+        return createModelsWithResponse(models, Context.NONE).getValue();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MzMwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483873308", "bodyText": "\ud83d\udc4d", "author": "abhipsaMisra", "createdAt": "2020-09-04T22:54:06Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleAsyncSample.java", "diffHunk": "@@ -236,7 +238,7 @@ public static void createAllModels() throws IOException, InterruptedException {\n \n         // Call API to create the models. For each async operation, once the operation is completed successfully, a latch is counted down.\n         client.createModels(modelsToCreate)\n-            .doOnNext(modelData -> System.out.println(\"Created model: \" + modelData.getId()))\n+            .doOnNext(listOfModelData -> System.out.println(\"Count of created models: \" + listOfModelData.size()))", "originalCommit": "ea35ff7e152222546b00e64996af513c8db9e76c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MzU4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483873589", "bodyText": "Does the model use the component, or define the \"model\" for the component?", "author": "abhipsaMisra", "createdAt": "2020-09-04T22:55:12Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+import org.apache.http.HttpStatus;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+/**\n+ * Creates a component with a random Id.\n+ * Creates a new model with a random Id that uses the previously created component.", "originalCommit": "ea35ff7e152222546b00e64996af513c8db9e76c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3Mzc4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483873784", "bodyText": "technically they are both models, one is sort of like an interface that can be used in other models.", "author": "azabbasi", "createdAt": "2020-09-04T22:56:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MzU4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d51e167cf5419ed49ce77c977165a333b363df25", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java\nindex fb5af9d9900..11325f3865b 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java\n\n@@ -60,9 +60,6 @@ public class ModelsLifecycleSyncSamples {\n         ConsoleLogger.PrintHeader(\"Create models\");\n \n         try {\n-            // Create the model\n-            // TODO: azabbasi: Discuss the usability of this API with SDK team and change the return type if possible\n-            // Currently we have to iterate through the response for the lazy method invocation to run.\n             client.createModels(new ArrayList<String>(Arrays.asList(newComponentModelPayload, newModelPayload)));\n \n             ConsoleLogger.PrintSuccess(\"Created models \" + componentModelId + \" and \" + sampleModelId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MzgwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483873807", "bodyText": "Are we checking in with this TODO? \ud83d\ude2e", "author": "abhipsaMisra", "createdAt": "2020-09-04T22:56:19Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+import org.apache.http.HttpStatus;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+/**\n+ * Creates a component with a random Id.\n+ * Creates a new model with a random Id that uses the previously created component.\n+ * Decommission the newly created models (model and component) and check for success.\n+ * Delete all created models and components.\n+ */\n+public class ModelsLifecycleSyncSamples {\n+\n+    private static DigitalTwinsClient client;\n+\n+    public static void main(String[] args) throws IOException, InterruptedException {\n+\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .tokenCredential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        runModelLifecycleSample();\n+    }\n+\n+    public static void runModelLifecycleSample() {\n+        // For the purpose of this sample we will create temporary models using random model Ids and then decommission a model.\n+        // We have to make sure these model Ids are unique within the DigitalTwin instance.\n+        String componentModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryComponentModelPrefix, client);\n+        String sampleModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryModelPrefix, client);\n+\n+        String newComponentModelPayload = SamplesConstants.TemporaryComponentModelPayload\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        String newModelPayload = SamplesConstants.TemporaryModelWithComponentPayload\n+            .replace(SamplesConstants.ModelId, sampleModelId)\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        ConsoleLogger.PrintHeader(\"Create models\");\n+\n+        try {\n+            // Create the model\n+            // TODO: azabbasi: Discuss the usability of this API with SDK team and change the return type if possible", "originalCommit": "ea35ff7e152222546b00e64996af513c8db9e76c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MzkxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483873917", "bodyText": ":D removed.", "author": "azabbasi", "createdAt": "2020-09-04T22:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MzgwNw=="}], "type": "inlineReview", "revised_code": {"commit": "d51e167cf5419ed49ce77c977165a333b363df25", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java\nindex fb5af9d9900..11325f3865b 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java\n\n@@ -60,9 +60,6 @@ public class ModelsLifecycleSyncSamples {\n         ConsoleLogger.PrintHeader(\"Create models\");\n \n         try {\n-            // Create the model\n-            // TODO: azabbasi: Discuss the usability of this API with SDK team and change the return type if possible\n-            // Currently we have to iterate through the response for the lazy method invocation to run.\n             client.createModels(new ArrayList<String>(Arrays.asList(newComponentModelPayload, newModelPayload)));\n \n             ConsoleLogger.PrintSuccess(\"Created models \" + componentModelId + \" and \" + sampleModelId);\n"}}, {"oid": "d51e167cf5419ed49ce77c977165a333b363df25", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d51e167cf5419ed49ce77c977165a333b363df25", "message": "Address more comments.", "committedDate": "2020-09-04T23:02:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3NTE5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14849#discussion_r483875194", "bodyText": "I am updating the sample to use status code from here: https://docs.oracle.com/javase/7/docs/api/java/net/HttpURLConnection.html\nThis is what Tim used in the e2e tests, and what other sdks are using as well.", "author": "abhipsaMisra", "createdAt": "2020-09-04T23:03:04Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package com.azure.digitaltwins.core;\n+\n+import com.azure.core.http.policy.HttpLogOptions;\n+import com.azure.digitaltwins.core.helpers.ConsoleLogger;\n+import com.azure.digitaltwins.core.helpers.SamplesArguments;\n+import com.azure.digitaltwins.core.helpers.UniqueIdHelper;\n+import com.azure.digitaltwins.core.implementation.models.ErrorResponseException;\n+import com.azure.digitaltwins.core.models.ModelData;\n+import com.azure.identity.ClientSecretCredentialBuilder;\n+import org.apache.http.HttpStatus;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+/**\n+ * Creates a component with a random Id.\n+ * Creates a new model with a random Id that uses the previously created component.\n+ * Decommission the newly created models (model and component) and check for success.\n+ * Delete all created models and components.\n+ */\n+public class ModelsLifecycleSyncSamples {\n+\n+    private static DigitalTwinsClient client;\n+\n+    public static void main(String[] args) throws IOException, InterruptedException {\n+\n+        SamplesArguments parsedArguments = new SamplesArguments(args);\n+\n+        client = new DigitalTwinsClientBuilder()\n+            .tokenCredential(\n+                new ClientSecretCredentialBuilder()\n+                    .tenantId(parsedArguments.getTenantId())\n+                    .clientId(parsedArguments.getClientId())\n+                    .clientSecret(parsedArguments.getClientSecret())\n+                    .build()\n+            )\n+            .endpoint(parsedArguments.getDigitalTwinEndpoint())\n+            .httpLogOptions(\n+                new HttpLogOptions()\n+                    .setLogLevel(parsedArguments.getHttpLogDetailLevel()))\n+            .buildClient();\n+\n+        runModelLifecycleSample();\n+    }\n+\n+    public static void runModelLifecycleSample() {\n+        // For the purpose of this sample we will create temporary models using random model Ids and then decommission a model.\n+        // We have to make sure these model Ids are unique within the DigitalTwin instance.\n+        String componentModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryComponentModelPrefix, client);\n+        String sampleModelId = UniqueIdHelper.getUniqueModelId(SamplesConstants.TemporaryModelPrefix, client);\n+\n+        String newComponentModelPayload = SamplesConstants.TemporaryComponentModelPayload\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        String newModelPayload = SamplesConstants.TemporaryModelWithComponentPayload\n+            .replace(SamplesConstants.ModelId, sampleModelId)\n+            .replace(SamplesConstants.ComponentId, componentModelId);\n+\n+        ConsoleLogger.PrintHeader(\"Create models\");\n+\n+        try {\n+            // Create the model\n+            // TODO: azabbasi: Discuss the usability of this API with SDK team and change the return type if possible\n+            // Currently we have to iterate through the response for the lazy method invocation to run.\n+            client.createModels(new ArrayList<String>(Arrays.asList(newComponentModelPayload, newModelPayload)));\n+\n+            ConsoleLogger.PrintSuccess(\"Created models \" + componentModelId + \" and \" + sampleModelId);\n+        }\n+        catch (ErrorResponseException ex){\n+            if (ex.getResponse().getStatusCode() == HttpStatus.SC_CONFLICT) {", "originalCommit": "ea35ff7e152222546b00e64996af513c8db9e76c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ffb64b059e390d40ac6cb5e46a73629a76a38d51", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java\nindex fb5af9d9900..311ebd465d1 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/ModelsLifecycleSyncSamples.java\n\n@@ -10,6 +10,7 @@ import com.azure.identity.ClientSecretCredentialBuilder;\n import org.apache.http.HttpStatus;\n \n import java.io.IOException;\n+import java.net.HttpURLConnection;\n import java.util.ArrayList;\n import java.util.Arrays;\n \n"}}, {"oid": "ffb64b059e390d40ac6cb5e46a73629a76a38d51", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ffb64b059e390d40ac6cb5e46a73629a76a38d51", "message": "Update ModelsLifecycleSyncSamples.java", "committedDate": "2020-09-04T23:04:01Z", "type": "commit"}, {"oid": "c3b94e656ff0d98e47a7ac861ff58b04c038ca29", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c3b94e656ff0d98e47a7ac861ff58b04c038ca29", "message": "Update ModelsLifecycleSyncSamples.java", "committedDate": "2020-09-04T23:11:32Z", "type": "commit"}]}