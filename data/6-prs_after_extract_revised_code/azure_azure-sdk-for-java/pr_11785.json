{"pr_number": 11785, "pr_title": "Identity synchronization fix", "pr_createdAt": "2020-06-04T20:53:17Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/11785", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwOTQ2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r435609462", "bodyText": "This setter probably better belongs in IdentityClientBuilder. After all, this is just an implementation detail instead of an \"option\" users can configure.", "author": "jianghaolu", "createdAt": "2020-06-04T23:34:39Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClientOptions.java", "diffHunk": "@@ -286,4 +287,14 @@ public IdentityClientOptions enablePersistentCache(boolean enabled) {\n     public String getIntelliJKeePassDatabasePath() {\n         return keePassDatabasePath;\n     }\n+\n+\n+    public IdentityClientOptions sharedTokenCacheCredential(boolean isSharedTokenCacheCred) {", "originalCommit": "4227c03298e6ad7581e381f44f6a2001a9cd78d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYxMDAxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r435610014", "bodyText": "It does require an extra parameter to IdentityClient's constructor that way.", "author": "jianghaolu", "createdAt": "2020-06-04T23:35:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwOTQ2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3MzQxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r436073414", "bodyText": "agreed and refactored.", "author": "g2vinay", "createdAt": "2020-06-05T17:51:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwOTQ2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "fbb9e093c3b15bc9ff9d941da8296b8e2117d032", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClientOptions.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClientOptions.java\nindex d59c093c476..78c23ecddd4 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClientOptions.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClientOptions.java\n\n@@ -287,14 +286,4 @@ public final class IdentityClientOptions {\n     public String getIntelliJKeePassDatabasePath() {\n         return keePassDatabasePath;\n     }\n-\n-\n-    public IdentityClientOptions sharedTokenCacheCredential(boolean isSharedTokenCacheCred) {\n-        this.sharedTokenCacheCred = isSharedTokenCacheCred;\n-        return this;\n-    }\n-\n-    public boolean isSharedTokenCacheCredential() {\n-        return sharedTokenCacheCred;\n-    }\n }\n"}}, {"oid": "fbb9e093c3b15bc9ff9d941da8296b8e2117d032", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fbb9e093c3b15bc9ff9d941da8296b8e2117d032", "message": "update synchronization", "committedDate": "2020-06-06T01:42:33Z", "type": "commit"}, {"oid": "fbb9e093c3b15bc9ff9d941da8296b8e2117d032", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fbb9e093c3b15bc9ff9d941da8296b8e2117d032", "message": "update synchronization", "committedDate": "2020-06-06T01:42:33Z", "type": "forcePushed"}, {"oid": "5dada00bf5905a7ba6d0c2328b3da421ab9b47b3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5dada00bf5905a7ba6d0c2328b3da421ab9b47b3", "message": "test update", "committedDate": "2020-06-06T02:21:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMjU3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r436232574", "bodyText": "Should have default value \u201cfalse\u201d", "author": "jianghaolu", "createdAt": "2020-06-06T03:15:33Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClientBuilder.java", "diffHunk": "@@ -15,6 +17,7 @@\n     private String clientSecret;\n     private String certificatePath;\n     private String certificatePassword;\n+    private boolean sharedTokenCacheCred;", "originalCommit": "5dada00bf5905a7ba6d0c2328b3da421ab9b47b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMjgwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r436232800", "bodyText": "its a primitive.\nIts default value is false.", "author": "g2vinay", "createdAt": "2020-06-06T03:19:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzMjU3NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM5NzE2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r436397169", "bodyText": "Why is it called emitterProcessor? It should be replayProcessor. EmitterProcessor is different from ReplayProcessor.", "author": "srnagar", "createdAt": "2020-06-07T20:06:28Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ReplayProcessor;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Synchronizes reactor threads accessing/instantiating a common value {@code T}.\n+ *\n+ * @param <T> The value being instantiated / accessed.\n+ */\n+public class SynchronizedAccessor<T> {\n+    private final AtomicBoolean wip;\n+    private T cache;\n+    private final ReplayProcessor<T> emitterProcessor = ReplayProcessor.create(1);", "originalCommit": "5dada00bf5905a7ba6d0c2328b3da421ab9b47b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c2bc110378c9c9dfbae4b4d531ca37c86ed5e74", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java\nindex 9d0d25d0d1c..52233600664 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java\n\n@@ -17,9 +17,9 @@ import java.util.function.Supplier;\n  */\n public class SynchronizedAccessor<T> {\n     private final AtomicBoolean wip;\n-    private T cache;\n-    private final ReplayProcessor<T> emitterProcessor = ReplayProcessor.create(1);\n-    private final FluxSink<T> sink = emitterProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n+    private volatile T cache;\n+    private final ReplayProcessor<T> replayProcessor = ReplayProcessor.create(1);\n+    private final FluxSink<T> sink = replayProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n     private final Supplier<T> supplier;\n \n     public SynchronizedAccessor(Supplier<T> supplier) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4OTk2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r436489962", "bodyText": "If the first thread that runs supplier.get() throws an error, then all subsequent getValue() calls will return an error. Instead, if the first attempt failed, should the next call to getValue() again attempt to get from the supplier?", "author": "srnagar", "createdAt": "2020-06-08T06:55:57Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ReplayProcessor;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Synchronizes reactor threads accessing/instantiating a common value {@code T}.\n+ *\n+ * @param <T> The value being instantiated / accessed.\n+ */\n+public class SynchronizedAccessor<T> {\n+    private final AtomicBoolean wip;\n+    private T cache;\n+    private final ReplayProcessor<T> emitterProcessor = ReplayProcessor.create(1);\n+    private final FluxSink<T> sink = emitterProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n+    private final Supplier<T> supplier;\n+\n+    public SynchronizedAccessor(Supplier<T> supplier) {\n+        this.wip = new AtomicBoolean(false);\n+        this.supplier = supplier;\n+    }\n+\n+    /**\n+     * Get the value from the configured supplier.\n+     *\n+     * @return the output {@code T}\n+     */\n+    public Mono<T> getValue() {\n+        if (cache != null) {\n+            return Mono.just(cache);\n+        }\n+        return Mono.defer(() -> {\n+            if (!wip.getAndSet(true)) {\n+                try {\n+                    cache = supplier.get();\n+                    sink.next(cache);\n+                } catch (Exception e) {\n+                    sink.error(e);", "originalCommit": "5dada00bf5905a7ba6d0c2328b3da421ab9b47b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0NjM0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r436846340", "bodyText": "as discussed.\nThe supplier will use the same user config locked in at construction time, so a new instance of Identity client will need to be created to fix the issue with the passed in user configuration.", "author": "g2vinay", "createdAt": "2020-06-08T16:43:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4OTk2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4c2bc110378c9c9dfbae4b4d531ca37c86ed5e74", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java\nindex 9d0d25d0d1c..52233600664 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java\n\n@@ -17,9 +17,9 @@ import java.util.function.Supplier;\n  */\n public class SynchronizedAccessor<T> {\n     private final AtomicBoolean wip;\n-    private T cache;\n-    private final ReplayProcessor<T> emitterProcessor = ReplayProcessor.create(1);\n-    private final FluxSink<T> sink = emitterProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n+    private volatile T cache;\n+    private final ReplayProcessor<T> replayProcessor = ReplayProcessor.create(1);\n+    private final FluxSink<T> sink = replayProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n     private final Supplier<T> supplier;\n \n     public SynchronizedAccessor(Supplier<T> supplier) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5MDc1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r436490753", "bodyText": "Add unit tests for this class.", "author": "srnagar", "createdAt": "2020-06-08T06:57:57Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ReplayProcessor;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Synchronizes reactor threads accessing/instantiating a common value {@code T}.\n+ *\n+ * @param <T> The value being instantiated / accessed.\n+ */\n+public class SynchronizedAccessor<T> {", "originalCommit": "5dada00bf5905a7ba6d0c2328b3da421ab9b47b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0NjQwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r436846402", "bodyText": "added", "author": "g2vinay", "createdAt": "2020-06-08T16:44:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5MDc1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4c2bc110378c9c9dfbae4b4d531ca37c86ed5e74", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java\nindex 9d0d25d0d1c..52233600664 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java\n\n@@ -17,9 +17,9 @@ import java.util.function.Supplier;\n  */\n public class SynchronizedAccessor<T> {\n     private final AtomicBoolean wip;\n-    private T cache;\n-    private final ReplayProcessor<T> emitterProcessor = ReplayProcessor.create(1);\n-    private final FluxSink<T> sink = emitterProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n+    private volatile T cache;\n+    private final ReplayProcessor<T> replayProcessor = ReplayProcessor.create(1);\n+    private final FluxSink<T> sink = replayProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n     private final Supplier<T> supplier;\n \n     public SynchronizedAccessor(Supplier<T> supplier) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5MzQzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r436493435", "bodyText": "There's still a chance of race condition here when a thread marks wip as false and then another thread enters the if block and calls supplier.get() again updating the reference to cache. How critical is the need to call the supplier only once?", "author": "srnagar", "createdAt": "2020-06-08T07:04:46Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ReplayProcessor;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Synchronizes reactor threads accessing/instantiating a common value {@code T}.\n+ *\n+ * @param <T> The value being instantiated / accessed.\n+ */\n+public class SynchronizedAccessor<T> {\n+    private final AtomicBoolean wip;\n+    private T cache;\n+    private final ReplayProcessor<T> emitterProcessor = ReplayProcessor.create(1);\n+    private final FluxSink<T> sink = emitterProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n+    private final Supplier<T> supplier;\n+\n+    public SynchronizedAccessor(Supplier<T> supplier) {\n+        this.wip = new AtomicBoolean(false);\n+        this.supplier = supplier;\n+    }\n+\n+    /**\n+     * Get the value from the configured supplier.\n+     *\n+     * @return the output {@code T}\n+     */\n+    public Mono<T> getValue() {\n+        if (cache != null) {\n+            return Mono.just(cache);\n+        }\n+        return Mono.defer(() -> {\n+            if (!wip.getAndSet(true)) {\n+                try {\n+                    cache = supplier.get();\n+                    sink.next(cache);\n+                } catch (Exception e) {\n+                    sink.error(e);\n+                } finally {\n+                    wip.set(false);", "originalCommit": "5dada00bf5905a7ba6d0c2328b3da421ab9b47b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0OTcxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r436849710", "bodyText": "moved it to the defer block.", "author": "g2vinay", "createdAt": "2020-06-08T16:49:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5MzQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkwNDA1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r436904059", "bodyText": "If the expectation is to create a new IdentityClient in case of errors, there's no need to reset wip to false.\nOnly one thread ever has to enter the wip block and should either get value from supplier or throw an error. There's no need for another thread to re-enter this block.", "author": "srnagar", "createdAt": "2020-06-08T18:20:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5MzQzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c2bc110378c9c9dfbae4b4d531ca37c86ed5e74", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java\nindex 9d0d25d0d1c..52233600664 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java\n\n@@ -17,9 +17,9 @@ import java.util.function.Supplier;\n  */\n public class SynchronizedAccessor<T> {\n     private final AtomicBoolean wip;\n-    private T cache;\n-    private final ReplayProcessor<T> emitterProcessor = ReplayProcessor.create(1);\n-    private final FluxSink<T> sink = emitterProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n+    private volatile T cache;\n+    private final ReplayProcessor<T> replayProcessor = ReplayProcessor.create(1);\n+    private final FluxSink<T> sink = replayProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n     private final Supplier<T> supplier;\n \n     public SynchronizedAccessor(Supplier<T> supplier) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5Mzk3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r436493978", "bodyText": "This should be volatile.", "author": "srnagar", "createdAt": "2020-06-08T07:06:05Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ReplayProcessor;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Synchronizes reactor threads accessing/instantiating a common value {@code T}.\n+ *\n+ * @param <T> The value being instantiated / accessed.\n+ */\n+public class SynchronizedAccessor<T> {\n+    private final AtomicBoolean wip;\n+    private T cache;", "originalCommit": "5dada00bf5905a7ba6d0c2328b3da421ab9b47b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c2bc110378c9c9dfbae4b4d531ca37c86ed5e74", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java\nindex 9d0d25d0d1c..52233600664 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java\n\n@@ -17,9 +17,9 @@ import java.util.function.Supplier;\n  */\n public class SynchronizedAccessor<T> {\n     private final AtomicBoolean wip;\n-    private T cache;\n-    private final ReplayProcessor<T> emitterProcessor = ReplayProcessor.create(1);\n-    private final FluxSink<T> sink = emitterProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n+    private volatile T cache;\n+    private final ReplayProcessor<T> replayProcessor = ReplayProcessor.create(1);\n+    private final FluxSink<T> sink = replayProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n     private final Supplier<T> supplier;\n \n     public SynchronizedAccessor(Supplier<T> supplier) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxMjQxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/11785#discussion_r436512415", "bodyText": "This should also be inside defer(). The check should happen when there is a subscriber.", "author": "srnagar", "createdAt": "2020-06-08T07:48:11Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.identity.implementation;\n+\n+import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ReplayProcessor;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Synchronizes reactor threads accessing/instantiating a common value {@code T}.\n+ *\n+ * @param <T> The value being instantiated / accessed.\n+ */\n+public class SynchronizedAccessor<T> {\n+    private final AtomicBoolean wip;\n+    private T cache;\n+    private final ReplayProcessor<T> emitterProcessor = ReplayProcessor.create(1);\n+    private final FluxSink<T> sink = emitterProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n+    private final Supplier<T> supplier;\n+\n+    public SynchronizedAccessor(Supplier<T> supplier) {\n+        this.wip = new AtomicBoolean(false);\n+        this.supplier = supplier;\n+    }\n+\n+    /**\n+     * Get the value from the configured supplier.\n+     *\n+     * @return the output {@code T}\n+     */\n+    public Mono<T> getValue() {\n+        if (cache != null) {\n+            return Mono.just(cache);\n+        }", "originalCommit": "5dada00bf5905a7ba6d0c2328b3da421ab9b47b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c2bc110378c9c9dfbae4b4d531ca37c86ed5e74", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java\nindex 9d0d25d0d1c..52233600664 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/SynchronizedAccessor.java\n\n@@ -17,9 +17,9 @@ import java.util.function.Supplier;\n  */\n public class SynchronizedAccessor<T> {\n     private final AtomicBoolean wip;\n-    private T cache;\n-    private final ReplayProcessor<T> emitterProcessor = ReplayProcessor.create(1);\n-    private final FluxSink<T> sink = emitterProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n+    private volatile T cache;\n+    private final ReplayProcessor<T> replayProcessor = ReplayProcessor.create(1);\n+    private final FluxSink<T> sink = replayProcessor.sink(FluxSink.OverflowStrategy.BUFFER);\n     private final Supplier<T> supplier;\n \n     public SynchronizedAccessor(Supplier<T> supplier) {\n"}}, {"oid": "b9b88c5ebc059bc11c75a02629935f5045e8958b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b9b88c5ebc059bc11c75a02629935f5045e8958b", "message": "merge master", "committedDate": "2020-06-08T14:56:31Z", "type": "commit"}, {"oid": "4c2bc110378c9c9dfbae4b4d531ca37c86ed5e74", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4c2bc110378c9c9dfbae4b4d531ca37c86ed5e74", "message": "fix checkstyle isse", "committedDate": "2020-06-08T16:17:48Z", "type": "commit"}, {"oid": "3048f923d0e5f2bb311ba22c0268b87d1ea072e3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3048f923d0e5f2bb311ba22c0268b87d1ea072e3", "message": "update the accessor", "committedDate": "2020-06-08T22:16:41Z", "type": "commit"}]}