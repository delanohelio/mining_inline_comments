{"pr_number": 9202, "pr_title": "Refactoring perf tests", "pr_createdAt": "2020-03-18T21:32:45Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/9202", "timeline": [{"oid": "d77b3b7effd0299252b37c5d6437aacc33d7f89e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d77b3b7effd0299252b37c5d6437aacc33d7f89e", "message": "Initial set of refactoring", "committedDate": "2020-03-17T18:25:41Z", "type": "commit"}, {"oid": "dad2df39b8b5c0af710f64eac76b58a50ff15205", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dad2df39b8b5c0af710f64eac76b58a50ff15205", "message": "Refactoring storage perf tests", "committedDate": "2020-03-18T21:31:15Z", "type": "commit"}, {"oid": "c41b8d6dac20baf13fc3b225c87061040c2c6e33", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c41b8d6dac20baf13fc3b225c87061040c2c6e33", "message": "Fix checkstyle", "committedDate": "2020-03-18T21:51:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MjU2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9202#discussion_r394662564", "bodyText": "It's not a huge deal, but I would prefer to keep the size and count options on separate classes since they will not be relevant to every perf test.  The root base class PerfStressOptions should only contain options which apply to every perf test.", "author": "mikeharder", "createdAt": "2020-03-18T21:56:44Z", "path": "common/perf-test-core/src/main/java/com/azure/perf/test/core/PerfStressOptions.java", "diffHunk": "@@ -38,6 +38,28 @@\n     @Parameter(names = { \"--sync\" }, description = \"Runs sync version of test\")\n     private boolean sync = false;\n \n+    @Parameter(names = { \"-s\", \"--size\" }, description = \"Size of payload (in bytes)\")", "originalCommit": "c41b8d6dac20baf13fc3b225c87061040c2c6e33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MjcyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9202#discussion_r394662725", "bodyText": "I would also like to keep .NET and Java as consistent as possible, and these are on separate classes in .NET.", "author": "mikeharder", "createdAt": "2020-03-18T21:57:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MjU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3ODAxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9202#discussion_r394678013", "bodyText": "I was looking to keep all the options in one class so that users can find all available options in one place. Options that don't apply to a test can have appropriate error messages or just simply not use them.", "author": "srnagar", "createdAt": "2020-03-18T22:33:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MjU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3OTkxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9202#discussion_r394679919", "bodyText": "Also, if a test needs both size and count options, then a third class has to be created to include both options as the PerfStressTest ctor takes a single PerfTestOptions instance.", "author": "srnagar", "createdAt": "2020-03-18T22:39:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MjU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4MTgwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9202#discussion_r394681809", "bodyText": "Discussed offline, I slightly prefer separate classes to avoid having options which don't apply to all tests, but extra options aren't a big deal.", "author": "mikeharder", "createdAt": "2020-03-18T22:45:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MjU2NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MzI3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9202#discussion_r394663276", "bodyText": "I assume this is better for perf since we don't allocate a new array every time?", "author": "mikeharder", "createdAt": "2020-03-18T21:58:14Z", "path": "sdk/storage/perf-test/src/main/java/com/azure/storage/blob/perf/DownloadBlobTest.java", "diffHunk": "@@ -49,7 +48,9 @@ public void write(int b) throws IOException {\n     public Mono<Void> runAsync() {\n         return blobAsyncClient.download()\n             .map(b -> {\n-                b.get(new byte[b.remaining()]);\n+                for (int i = 0; i < b.remaining(); i++) {", "originalCommit": "c41b8d6dac20baf13fc3b225c87061040c2c6e33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3MTE4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9202#discussion_r394671186", "bodyText": "yep, memory pressure is reduced.", "author": "g2vinay", "createdAt": "2020-03-18T22:17:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MzI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3MTYyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9202#discussion_r394671622", "bodyText": "Yes, this reduces memory pressure as we don't really need to copy the data, just reading is sufficient.", "author": "srnagar", "createdAt": "2020-03-18T22:18:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MzI3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NzA1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9202#discussion_r394667054", "bodyText": "Should be better for perf since we don't create new flux every iteration.", "author": "mikeharder", "createdAt": "2020-03-18T22:07:28Z", "path": "sdk/storage/perf-test/src/main/java/com/azure/storage/blob/perf/UploadBlobTest.java", "diffHunk": "@@ -21,6 +27,6 @@ public void run() {\n \n     @Override\n     public Mono<Void> runAsync() {\n-        return blobAsyncClient.upload(RandomFlux.create(options.getSize()), null, true).then();\n+        return blobAsyncClient.upload(randomByteBufferFlux, null, true).then();", "originalCommit": "c41b8d6dac20baf13fc3b225c87061040c2c6e33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2OTMzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9202#discussion_r394669330", "bodyText": "Though is it safe to reuse the same flux for each iteration?  Or is the flux \"used up\" after the first upload so we would need to create a new one every time?", "author": "mikeharder", "createdAt": "2020-03-18T22:12:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NzA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NDQ3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9202#discussion_r394674478", "bodyText": "Yeah, tested it by using the same flux to read multiple times. Same data was returned each time.", "author": "srnagar", "createdAt": "2020-03-18T22:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NzA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4MjU0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9202#discussion_r394682545", "bodyText": "Would it also work with a static flux, if multiple instances were reading in parallel?  Or does it need to be an instance flux, so it can be reused across iterations, but each instance needs its own copy?  Shouldn't matter much for perf either way, but I like to scope variables correctly to increase understanding of the minimal test requirements.", "author": "mikeharder", "createdAt": "2020-03-18T22:47:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NzA1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMyNzg5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9202#discussion_r395327893", "bodyText": "It could have been static if the since of the buffer was fixed. Since the size is determined by the options provided in the constructor, I have made this an instance flux. However, as we discussed, we could make this static and initialize in globalSetup() as the options are not going to change for a run and all instances share the same option. I didn't want to make that assumption here as it didn't matter to the performance of the test itself.", "author": "srnagar", "createdAt": "2020-03-19T21:23:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NzA1NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NzY5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9202#discussion_r394667696", "bodyText": "Why move from static to instance?  All instances of this test should be able to upload from the same file on disk, right?", "author": "mikeharder", "createdAt": "2020-03-18T22:08:55Z", "path": "sdk/storage/perf-test/src/main/java/com/azure/storage/blob/perf/UploadFromFileTest.java", "diffHunk": "@@ -3,33 +3,31 @@\n \n package com.azure.storage.blob.perf;\n \n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomInputStream;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n+import com.azure.storage.blob.perf.core.BlobTestBase;\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-\n-import com.azure.perf.test.core.RandomStream;\n-import com.azure.perf.test.core.SizeOptions;\n-import com.azure.storage.blob.perf.core.BlobTestBase;\n import reactor.core.publisher.Mono;\n \n-public class UploadFromFileTest extends BlobTestBase<SizeOptions> {\n+public class UploadFromFileTest extends BlobTestBase<PerfStressOptions> {\n+\n+    private final Path tempFile;", "originalCommit": "c41b8d6dac20baf13fc3b225c87061040c2c6e33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2ODA2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9202#discussion_r394668068", "bodyText": "Either way would work, but my preference is to share the same file unless each test needs its own file.  It may also be slightly faster since the OS disk cache only needs to cache one file, not N files.", "author": "mikeharder", "createdAt": "2020-03-18T22:09:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NzY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2ODU2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9202#discussion_r394668566", "bodyText": "Moving this from static to instance actually breaks the test, since the file is only created and deleted in globalSetup, not per-instance setup.", "author": "mikeharder", "createdAt": "2020-03-18T22:10:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NzY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NzQxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9202#discussion_r394677414", "bodyText": "Yes, I was about to update globalSetup to per instance setup but yeah, it makes sense to have a single file. I will switch this back to static.", "author": "srnagar", "createdAt": "2020-03-18T22:32:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NzY5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2a870372c5dda584bf13603a589b02ff715da355", "chunk": "diff --git a/sdk/storage/perf-test/src/main/java/com/azure/storage/blob/perf/UploadFromFileTest.java b/sdk/storage/perf-test/src/main/java/com/azure/storage/blob/perf/UploadFromFileTest.java\nindex 76b8188d3ea..5d355749106 100644\n--- a/sdk/storage/perf-test/src/main/java/com/azure/storage/blob/perf/UploadFromFileTest.java\n+++ b/sdk/storage/perf-test/src/main/java/com/azure/storage/blob/perf/UploadFromFileTest.java\n\n@@ -17,17 +17,20 @@ import reactor.core.publisher.Mono;\n \n public class UploadFromFileTest extends BlobTestBase<PerfStressOptions> {\n \n-    private final Path tempFile;\n+    private static final Path TEMP_FILE;\n \n-    public UploadFromFileTest(PerfStressOptions options) {\n-        super(options);\n+    static {\n         try {\n-            tempFile = Files.createTempFile(null, null);\n+            TEMP_FILE = Files.createTempFile(null, null);\n         } catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n     }\n \n+    public UploadFromFileTest(PerfStressOptions options) {\n+        super(options);\n+    }\n+\n     @Override\n     public Mono<Void> globalSetupAsync() {\n         return super.globalSetupAsync().then(createTempFile());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2OTAxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9202#discussion_r394669017", "bodyText": "Could a single InputStream or Flux<ByteBuffer> be used for all test instances?  If so these should be static.", "author": "mikeharder", "createdAt": "2020-03-18T22:12:09Z", "path": "sdk/storage/perf-test/src/main/java/com/azure/storage/blob/perf/UploadBlockBlobTest.java", "diffHunk": "@@ -3,24 +3,33 @@\n \n package com.azure.storage.blob.perf;\n \n-import com.azure.perf.test.core.RandomFlux;\n-import com.azure.perf.test.core.RandomStream;\n-import com.azure.perf.test.core.SizeOptions;\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomByteBufferFlux;\n+import static com.azure.perf.test.core.TestDataCreationHelper.createRandomInputStream;\n+\n+import com.azure.perf.test.core.PerfStressOptions;\n import com.azure.storage.blob.perf.core.BlobTestBase;\n+import java.io.InputStream;\n+import java.nio.ByteBuffer;\n+import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n \n-public class UploadBlockBlobTest extends BlobTestBase<SizeOptions> {\n-    public UploadBlockBlobTest(SizeOptions options) {\n+public class UploadBlockBlobTest extends BlobTestBase<PerfStressOptions> {\n+    private final InputStream randomInputStream;", "originalCommit": "c41b8d6dac20baf13fc3b225c87061040c2c6e33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3ODE1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9202#discussion_r394678158", "bodyText": "Agree. Will make this static,", "author": "srnagar", "createdAt": "2020-03-18T22:34:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2OTAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY4Mjc1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9202#discussion_r394682756", "bodyText": "Just realized that to create this input stream and flux, we need PerfStressOptions which is per-instance. So, can't make this static.", "author": "srnagar", "createdAt": "2020-03-18T22:47:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2OTAxNw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "2a870372c5dda584bf13603a589b02ff715da355", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2a870372c5dda584bf13603a589b02ff715da355", "message": "Use single temp file for upload tests", "committedDate": "2020-03-19T06:31:04Z", "type": "commit"}]}