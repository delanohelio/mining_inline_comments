{"pr_number": 17988, "pr_title": "Updated docs for metadata to indicate no trailing or leading whitespace is allowed", "pr_createdAt": "2020-12-05T00:52:11Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/17988", "timeline": [{"oid": "b726f6ff4af1fa20036e874dceb7e86efffbd857", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b726f6ff4af1fa20036e874dceb7e86efffbd857", "message": "Changed documentation around metadata", "committedDate": "2020-12-04T23:26:40Z", "type": "commit"}, {"oid": "c0893ddc3ca8f06193a43cd497be29291a751b47", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c0893ddc3ca8f06193a43cd497be29291a751b47", "message": "Added doc change", "committedDate": "2020-12-05T00:50:27Z", "type": "commit"}, {"oid": "24e12d01cc364436dcaae687d4f03747855f875c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/24e12d01cc364436dcaae687d4f03747855f875c", "message": "Added policy to check metadata whitespace", "committedDate": "2020-12-07T20:37:10Z", "type": "commit"}, {"oid": "c6d93ed9112262d797e628bbe2a338244146be86", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c6d93ed9112262d797e628bbe2a338244146be86", "message": "Updated the metadata whitespace policy", "committedDate": "2020-12-07T21:26:55Z", "type": "commit"}, {"oid": "5a3f6815db9f2cfff5531cfdd345712432750352", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5a3f6815db9f2cfff5531cfdd345712432750352", "message": "Removed print, addressed comments", "committedDate": "2020-12-07T21:37:46Z", "type": "commit"}, {"oid": "0db5b8e61e40922bf87b49af3d97d408d1388e34", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0db5b8e61e40922bf87b49af3d97d408d1388e34", "message": "Removed crypto metadata header const", "committedDate": "2020-12-07T21:39:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2MDc0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17988#discussion_r537860742", "bodyText": "Thoughts on MetadataValidationPolicy? A little more generic and if we need to add more logic in the future the name will still be representative of what it does.", "author": "alzimmermsft", "createdAt": "2020-12-07T21:53:51Z", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.common.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.common.implementation.Constants;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Locale;\n+\n+/**\n+ * This is a request policy in an {@link com.azure.core.http.HttpPipeline} to validate that metadata does not contain\n+ * leading or trailing whitespace characters.\n+ * We do this since the service trims whitespace for the string to sign, but the client does not, resulting in an auth\n+ * failure.\n+ */\n+public class MetadataWhitespacePolicy implements HttpPipelinePolicy {", "originalCommit": "0db5b8e61e40922bf87b49af3d97d408d1388e34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NjI3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17988#discussion_r537866275", "bodyText": "That sounds good to me", "author": "gapra-msft", "createdAt": "2020-12-07T22:02:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2MDc0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "09be7af50f76013a199b2ad6fc7436275fcae9a1", "chunk": "diff --git a/sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java b/sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java\ndeleted file mode 100644\nindex 5b88ca02960..00000000000\n--- a/sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java\n+++ /dev/null\n\n@@ -1,45 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.storage.common.policy;\n-\n-import com.azure.core.http.HttpPipelineCallContext;\n-import com.azure.core.http.HttpPipelineNextPolicy;\n-import com.azure.core.http.HttpResponse;\n-import com.azure.core.http.policy.HttpPipelinePolicy;\n-import com.azure.core.util.logging.ClientLogger;\n-import com.azure.storage.common.implementation.Constants;\n-import reactor.core.publisher.Mono;\n-\n-import java.util.Locale;\n-\n-/**\n- * This is a request policy in an {@link com.azure.core.http.HttpPipeline} to validate that metadata does not contain\n- * leading or trailing whitespace characters.\n- * We do this since the service trims whitespace for the string to sign, but the client does not, resulting in an auth\n- * failure.\n- */\n-public class MetadataWhitespacePolicy implements HttpPipelinePolicy {\n-\n-    private final ClientLogger logger = new ClientLogger(MetadataWhitespacePolicy.class);\n-\n-    @Override\n-    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n-        context.getHttpRequest().getHeaders().stream()\n-            .filter(header -> header.getName().toLowerCase(Locale.ROOT).startsWith(Constants.HeaderConstants.X_MS_META))\n-            .forEach(header -> {\n-                String name = header.getName().substring(Constants.HeaderConstants.X_MS_META.length());\n-                boolean foundWhitespace = Character.isWhitespace(name.charAt(0))\n-                    || Character.isWhitespace(name.charAt(name.length() - 1));\n-                for (String value: header.getValues()) {\n-                    foundWhitespace |= Character.isWhitespace(value.charAt(0))\n-                        || Character.isWhitespace(value.charAt(value.length() - 1));\n-                }\n-                if (foundWhitespace) {\n-                    throw logger.logExceptionAsError(new IllegalArgumentException(\"Metadata keys and values can \"\n-                        + \"not contain leading or trailing whitespace. Please remove or encode them.\"));\n-                }\n-            });\n-        return next.process();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2Mzk5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17988#discussion_r537863995", "bodyText": "Do we need to substring here? We aren't using the metadata key in the error message and we could just check:\nboolean foundWhitespace = Character.isWhitespace(name.charAt(Constants.HeaderContants.X_MS_META.length())) || Character.isWhitespace(name.charAt(name.length() -1));", "author": "alzimmermsft", "createdAt": "2020-12-07T21:58:44Z", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.common.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.common.implementation.Constants;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Locale;\n+\n+/**\n+ * This is a request policy in an {@link com.azure.core.http.HttpPipeline} to validate that metadata does not contain\n+ * leading or trailing whitespace characters.\n+ * We do this since the service trims whitespace for the string to sign, but the client does not, resulting in an auth\n+ * failure.\n+ */\n+public class MetadataWhitespacePolicy implements HttpPipelinePolicy {\n+\n+    private final ClientLogger logger = new ClientLogger(MetadataWhitespacePolicy.class);\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        context.getHttpRequest().getHeaders().stream()\n+            .filter(header -> header.getName().toLowerCase(Locale.ROOT).startsWith(Constants.HeaderConstants.X_MS_META))\n+            .forEach(header -> {\n+                String name = header.getName().substring(Constants.HeaderConstants.X_MS_META.length());", "originalCommit": "0db5b8e61e40922bf87b49af3d97d408d1388e34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NjUyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17988#discussion_r537866528", "bodyText": "Yeah we can do this", "author": "gapra-msft", "createdAt": "2020-12-07T22:02:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2Mzk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "09be7af50f76013a199b2ad6fc7436275fcae9a1", "chunk": "diff --git a/sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java b/sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java\ndeleted file mode 100644\nindex 5b88ca02960..00000000000\n--- a/sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java\n+++ /dev/null\n\n@@ -1,45 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.storage.common.policy;\n-\n-import com.azure.core.http.HttpPipelineCallContext;\n-import com.azure.core.http.HttpPipelineNextPolicy;\n-import com.azure.core.http.HttpResponse;\n-import com.azure.core.http.policy.HttpPipelinePolicy;\n-import com.azure.core.util.logging.ClientLogger;\n-import com.azure.storage.common.implementation.Constants;\n-import reactor.core.publisher.Mono;\n-\n-import java.util.Locale;\n-\n-/**\n- * This is a request policy in an {@link com.azure.core.http.HttpPipeline} to validate that metadata does not contain\n- * leading or trailing whitespace characters.\n- * We do this since the service trims whitespace for the string to sign, but the client does not, resulting in an auth\n- * failure.\n- */\n-public class MetadataWhitespacePolicy implements HttpPipelinePolicy {\n-\n-    private final ClientLogger logger = new ClientLogger(MetadataWhitespacePolicy.class);\n-\n-    @Override\n-    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n-        context.getHttpRequest().getHeaders().stream()\n-            .filter(header -> header.getName().toLowerCase(Locale.ROOT).startsWith(Constants.HeaderConstants.X_MS_META))\n-            .forEach(header -> {\n-                String name = header.getName().substring(Constants.HeaderConstants.X_MS_META.length());\n-                boolean foundWhitespace = Character.isWhitespace(name.charAt(0))\n-                    || Character.isWhitespace(name.charAt(name.length() - 1));\n-                for (String value: header.getValues()) {\n-                    foundWhitespace |= Character.isWhitespace(value.charAt(0))\n-                        || Character.isWhitespace(value.charAt(value.length() - 1));\n-                }\n-                if (foundWhitespace) {\n-                    throw logger.logExceptionAsError(new IllegalArgumentException(\"Metadata keys and values can \"\n-                        + \"not contain leading or trailing whitespace. Please remove or encode them.\"));\n-                }\n-            });\n-        return next.process();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NTY0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17988#discussion_r537865645", "bodyText": "Do we want to use header.getValues() or header.getValue()? \n  \n    \n      azure-sdk-for-java/sdk/core/azure-core/src/main/java/com/azure/core/util/Header.java\n    \n    \n         Line 55\n      in\n      07c54ba\n    \n    \n    \n    \n\n        \n          \n           return value == null ? null : value.split(\",\"); \n        \n    \n  \n\n\nHow does the service handle coma separated header values?", "author": "alzimmermsft", "createdAt": "2020-12-07T22:01:32Z", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.common.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.common.implementation.Constants;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Locale;\n+\n+/**\n+ * This is a request policy in an {@link com.azure.core.http.HttpPipeline} to validate that metadata does not contain\n+ * leading or trailing whitespace characters.\n+ * We do this since the service trims whitespace for the string to sign, but the client does not, resulting in an auth\n+ * failure.\n+ */\n+public class MetadataWhitespacePolicy implements HttpPipelinePolicy {\n+\n+    private final ClientLogger logger = new ClientLogger(MetadataWhitespacePolicy.class);\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        context.getHttpRequest().getHeaders().stream()\n+            .filter(header -> header.getName().toLowerCase(Locale.ROOT).startsWith(Constants.HeaderConstants.X_MS_META))\n+            .forEach(header -> {\n+                String name = header.getName().substring(Constants.HeaderConstants.X_MS_META.length());\n+                boolean foundWhitespace = Character.isWhitespace(name.charAt(0))\n+                    || Character.isWhitespace(name.charAt(name.length() - 1));\n+                for (String value: header.getValues()) {", "originalCommit": "0db5b8e61e40922bf87b49af3d97d408d1388e34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4MTgzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17988#discussion_r537881837", "bodyText": "It looks like you can set metadata with comma delimited values\nI was able to set x-ms-meta-foo: bar,bar2", "author": "gapra-msft", "createdAt": "2020-12-07T22:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NTY0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4MzQ5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17988#discussion_r537883499", "bodyText": "this also worked\nx-ms-meta-foo: bar,bar2", "author": "gapra-msft", "createdAt": "2020-12-07T22:32:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NTY0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4NDE3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17988#discussion_r537884173", "bodyText": "Based off that, I think we should use header.getValue()", "author": "gapra-msft", "createdAt": "2020-12-07T22:33:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NTY0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "09be7af50f76013a199b2ad6fc7436275fcae9a1", "chunk": "diff --git a/sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java b/sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java\ndeleted file mode 100644\nindex 5b88ca02960..00000000000\n--- a/sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java\n+++ /dev/null\n\n@@ -1,45 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.storage.common.policy;\n-\n-import com.azure.core.http.HttpPipelineCallContext;\n-import com.azure.core.http.HttpPipelineNextPolicy;\n-import com.azure.core.http.HttpResponse;\n-import com.azure.core.http.policy.HttpPipelinePolicy;\n-import com.azure.core.util.logging.ClientLogger;\n-import com.azure.storage.common.implementation.Constants;\n-import reactor.core.publisher.Mono;\n-\n-import java.util.Locale;\n-\n-/**\n- * This is a request policy in an {@link com.azure.core.http.HttpPipeline} to validate that metadata does not contain\n- * leading or trailing whitespace characters.\n- * We do this since the service trims whitespace for the string to sign, but the client does not, resulting in an auth\n- * failure.\n- */\n-public class MetadataWhitespacePolicy implements HttpPipelinePolicy {\n-\n-    private final ClientLogger logger = new ClientLogger(MetadataWhitespacePolicy.class);\n-\n-    @Override\n-    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n-        context.getHttpRequest().getHeaders().stream()\n-            .filter(header -> header.getName().toLowerCase(Locale.ROOT).startsWith(Constants.HeaderConstants.X_MS_META))\n-            .forEach(header -> {\n-                String name = header.getName().substring(Constants.HeaderConstants.X_MS_META.length());\n-                boolean foundWhitespace = Character.isWhitespace(name.charAt(0))\n-                    || Character.isWhitespace(name.charAt(name.length() - 1));\n-                for (String value: header.getValues()) {\n-                    foundWhitespace |= Character.isWhitespace(value.charAt(0))\n-                        || Character.isWhitespace(value.charAt(value.length() - 1));\n-                }\n-                if (foundWhitespace) {\n-                    throw logger.logExceptionAsError(new IllegalArgumentException(\"Metadata keys and values can \"\n-                        + \"not contain leading or trailing whitespace. Please remove or encode them.\"));\n-                }\n-            });\n-        return next.process();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NzU5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17988#discussion_r537867598", "bodyText": "We should return Mono.error here instead of throwing the error as it'll force asynchronous clients to have an additional location where it has to try/catch", "author": "alzimmermsft", "createdAt": "2020-12-07T22:04:49Z", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.common.policy;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.storage.common.implementation.Constants;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.Locale;\n+\n+/**\n+ * This is a request policy in an {@link com.azure.core.http.HttpPipeline} to validate that metadata does not contain\n+ * leading or trailing whitespace characters.\n+ * We do this since the service trims whitespace for the string to sign, but the client does not, resulting in an auth\n+ * failure.\n+ */\n+public class MetadataWhitespacePolicy implements HttpPipelinePolicy {\n+\n+    private final ClientLogger logger = new ClientLogger(MetadataWhitespacePolicy.class);\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        context.getHttpRequest().getHeaders().stream()\n+            .filter(header -> header.getName().toLowerCase(Locale.ROOT).startsWith(Constants.HeaderConstants.X_MS_META))\n+            .forEach(header -> {\n+                String name = header.getName().substring(Constants.HeaderConstants.X_MS_META.length());\n+                boolean foundWhitespace = Character.isWhitespace(name.charAt(0))\n+                    || Character.isWhitespace(name.charAt(name.length() - 1));\n+                for (String value: header.getValues()) {\n+                    foundWhitespace |= Character.isWhitespace(value.charAt(0))\n+                        || Character.isWhitespace(value.charAt(value.length() - 1));\n+                }\n+                if (foundWhitespace) {\n+                    throw logger.logExceptionAsError(new IllegalArgumentException(\"Metadata keys and values can \"", "originalCommit": "0db5b8e61e40922bf87b49af3d97d408d1388e34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "09be7af50f76013a199b2ad6fc7436275fcae9a1", "chunk": "diff --git a/sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java b/sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java\ndeleted file mode 100644\nindex 5b88ca02960..00000000000\n--- a/sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/policy/MetadataWhitespacePolicy.java\n+++ /dev/null\n\n@@ -1,45 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.storage.common.policy;\n-\n-import com.azure.core.http.HttpPipelineCallContext;\n-import com.azure.core.http.HttpPipelineNextPolicy;\n-import com.azure.core.http.HttpResponse;\n-import com.azure.core.http.policy.HttpPipelinePolicy;\n-import com.azure.core.util.logging.ClientLogger;\n-import com.azure.storage.common.implementation.Constants;\n-import reactor.core.publisher.Mono;\n-\n-import java.util.Locale;\n-\n-/**\n- * This is a request policy in an {@link com.azure.core.http.HttpPipeline} to validate that metadata does not contain\n- * leading or trailing whitespace characters.\n- * We do this since the service trims whitespace for the string to sign, but the client does not, resulting in an auth\n- * failure.\n- */\n-public class MetadataWhitespacePolicy implements HttpPipelinePolicy {\n-\n-    private final ClientLogger logger = new ClientLogger(MetadataWhitespacePolicy.class);\n-\n-    @Override\n-    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n-        context.getHttpRequest().getHeaders().stream()\n-            .filter(header -> header.getName().toLowerCase(Locale.ROOT).startsWith(Constants.HeaderConstants.X_MS_META))\n-            .forEach(header -> {\n-                String name = header.getName().substring(Constants.HeaderConstants.X_MS_META.length());\n-                boolean foundWhitespace = Character.isWhitespace(name.charAt(0))\n-                    || Character.isWhitespace(name.charAt(name.length() - 1));\n-                for (String value: header.getValues()) {\n-                    foundWhitespace |= Character.isWhitespace(value.charAt(0))\n-                        || Character.isWhitespace(value.charAt(value.length() - 1));\n-                }\n-                if (foundWhitespace) {\n-                    throw logger.logExceptionAsError(new IllegalArgumentException(\"Metadata keys and values can \"\n-                        + \"not contain leading or trailing whitespace. Please remove or encode them.\"));\n-                }\n-            });\n-        return next.process();\n-    }\n-}\n"}}, {"oid": "09be7af50f76013a199b2ad6fc7436275fcae9a1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/09be7af50f76013a199b2ad6fc7436275fcae9a1", "message": "Comments", "committedDate": "2020-12-07T22:25:39Z", "type": "commit"}, {"oid": "2261d75b91e2c88ac94ccd97d336f076d6b3d83a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2261d75b91e2c88ac94ccd97d336f076d6b3d83a", "message": "User header.getValue instead", "committedDate": "2020-12-07T22:33:50Z", "type": "commit"}, {"oid": "0dd1d6457be9dec2a7d99f84fdac43a8e2e13afd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0dd1d6457be9dec2a7d99f84fdac43a8e2e13afd", "message": "Added a test for comma separated metadata", "committedDate": "2020-12-07T22:47:22Z", "type": "commit"}, {"oid": "a8168a9be7147e86ef00c9780efb8847f9eff137", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a8168a9be7147e86ef00c9780efb8847f9eff137", "message": "Updated test so it works in playback", "committedDate": "2020-12-07T23:14:23Z", "type": "commit"}, {"oid": "c31d3505e2e8e76034983b047d2f4deb88d10e6f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c31d3505e2e8e76034983b047d2f4deb88d10e6f", "message": "Added to Changelog", "committedDate": "2020-12-07T23:19:36Z", "type": "commit"}, {"oid": "96c238f7031d0a26ba6dabdc842da2a9b5113493", "url": "https://github.com/Azure/azure-sdk-for-java/commit/96c238f7031d0a26ba6dabdc842da2a9b5113493", "message": "Ci failures", "committedDate": "2020-12-07T23:36:36Z", "type": "commit"}]}