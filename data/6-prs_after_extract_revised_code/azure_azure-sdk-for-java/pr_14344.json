{"pr_number": 14344, "pr_title": "Cosmos encryption AKV integration initial version", "pr_createdAt": "2020-08-21T23:16:08Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14344", "timeline": [{"oid": "ee6f32ffa6dfa467b47cd0947156925af7811503", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ee6f32ffa6dfa467b47cd0947156925af7811503", "message": "cosmos akv integration", "committedDate": "2020-08-21T23:11:33Z", "type": "commit"}, {"oid": "3a5d02472cb29485e7a9f88546a1994e8271fc61", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3a5d02472cb29485e7a9f88546a1994e8271fc61", "message": "fixed a few CI code style issues", "committedDate": "2020-08-22T04:52:06Z", "type": "commit"}, {"oid": "b71122016dcbfeb32e6e8dfbff578c5299935a4a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b71122016dcbfeb32e6e8dfbff578c5299935a4a", "message": "updated pom", "committedDate": "2020-08-24T16:03:32Z", "type": "commit"}, {"oid": "003e7e859d0d5a0cca2d019350d6dae955eaf7af", "url": "https://github.com/Azure/azure-sdk-for-java/commit/003e7e859d0d5a0cca2d019350d6dae955eaf7af", "message": "remove transitive dependency on tcnative", "committedDate": "2020-08-24T16:57:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3NTA1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14344#discussion_r475775050", "bodyText": "We should add some description to these class.", "author": "kushagraThapar", "createdAt": "2020-08-24T17:21:07Z", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/AzureKeyVaultKeyWrapProvider.java", "diffHunk": "@@ -0,0 +1,94 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.encryption;\n+\n+import com.azure.cosmos.implementation.apachecommons.lang.StringUtils;\n+import com.azure.cosmos.implementation.encryption.EncryptionUtils;\n+\n+import java.time.Duration;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+// TODO: moderakh remove blocking calls\n+public class AzureKeyVaultKeyWrapProvider implements EncryptionKeyWrapProvider {", "originalCommit": "003e7e859d0d5a0cca2d019350d6dae955eaf7af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxNzIyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14344#discussion_r476217223", "bodyText": "thanks. addressed.", "author": "moderakh", "createdAt": "2020-08-25T06:53:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3NTA1MA=="}], "type": "inlineReview", "revised_code": {"commit": "706fefc4dbcac5e16e85828e5f5ad6eabb228342", "chunk": "diff --git a/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/AzureKeyVaultKeyWrapProvider.java b/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/AzureKeyVaultKeyWrapProvider.java\nindex 8b027dc1de1..fa3ee399f9d 100644\n--- a/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/AzureKeyVaultKeyWrapProvider.java\n+++ b/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/AzureKeyVaultKeyWrapProvider.java\n\n@@ -10,6 +10,10 @@ import java.time.Duration;\n import java.util.concurrent.atomic.AtomicReference;\n \n // TODO: moderakh remove blocking calls\n+/**\n+ * Provides functionality to wrap (encrypt) and unwrap (decrypt) data encryption keys using master keys stored in Azure Key Vault.\n+ * Unwrapped data encryption keys will be cached within the client SDK for a period of 1 hour.\n+ */\n public class AzureKeyVaultKeyWrapProvider implements EncryptionKeyWrapProvider {\n     private final KeyVaultAccessClient keyVaultAccessClient;\n     private final Duration rawDekCacheTimeToLive;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3NjE2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14344#discussion_r475776160", "bodyText": "logger ?", "author": "kushagraThapar", "createdAt": "2020-08-24T17:22:57Z", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/KeyVaultAccessClient.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.encryption;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.exception.AzureException;\n+import com.azure.cosmos.implementation.caches.AsyncCache;\n+import com.azure.security.keyvault.keys.KeyAsyncClient;\n+import com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient;\n+import com.azure.security.keyvault.keys.cryptography.models.UnwrapResult;\n+import com.azure.security.keyvault.keys.cryptography.models.WrapResult;\n+import com.azure.security.keyvault.keys.models.KeyVaultKey;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URI;\n+\n+/**\n+ * Implements Core KeyVault access methods that uses the TODO: moderakh this doesn't need to be public. it is public due\n+ * to tests. FIXME\n+ * TODO: methods should be async moderakh\n+ */\n+public class KeyVaultAccessClient {\n+    private final AsyncCache<URI, KeyAsyncClient> akvClientCache;\n+    private final AsyncCache<URI, CryptographyAsyncClient> akvCryptoClientCache;\n+    private final KeyVaultTokenCredentialFactory keyVaultTokenCredentialFactory;\n+    private final KeyClientFactory keyClientFactory;\n+    private final CryptographyClientFactory cryptographyClientFactory;\n+\n+    /**\n+     * Initializes a new instance of the {@link KeyVaultAccessClient}\n+     *\n+     * @param keyVaultTokenCredentialFactory TokenCredentials factory\n+     */\n+    public KeyVaultAccessClient(KeyVaultTokenCredentialFactory keyVaultTokenCredentialFactory) {\n+        this.keyVaultTokenCredentialFactory = keyVaultTokenCredentialFactory;\n+        this.akvClientCache = new AsyncCache<>();\n+        this.akvCryptoClientCache = new AsyncCache<>();\n+        this.keyClientFactory = new KeyClientFactory();\n+        this.cryptographyClientFactory = new CryptographyClientFactory();\n+    }\n+\n+    /**\n+     * TODO: this doesn't need to be public moderakh Initializes a new instance of the {@link KeyVaultAccessClient}\n+     * class Invokes internal factory Methods.\n+     *\n+     * @param keyVaultTokenCredentialFactory TokenCredential\n+     * @param keyClientFactory KeyClient Factory\n+     * @param cryptographyClientFactory KeyClient Factory\n+     */\n+    public KeyVaultAccessClient(KeyVaultTokenCredentialFactory keyVaultTokenCredentialFactory,\n+                                KeyClientFactory keyClientFactory,\n+                                CryptographyClientFactory cryptographyClientFactory) {\n+        this.keyVaultTokenCredentialFactory = keyVaultTokenCredentialFactory;\n+        this.akvClientCache = new AsyncCache<>();\n+        this.akvCryptoClientCache = new AsyncCache<>();\n+        this.keyClientFactory = keyClientFactory;\n+        this.cryptographyClientFactory = cryptographyClientFactory;\n+    }\n+\n+    /**\n+     * Unwrap the encrypted Key. Only supports encrypted bytes in base64 format.\n+     *\n+     * Note: this may return an empty Mono if cryptoClient returns empty/null\n+     *\n+     * @param wrappedKey encrypted bytes.\n+     * @param keyVaultUriProperties Parsed key Vault Uri Properties.Properties as in sample Format:\n+     * https://{keyvault-name}.vault.azure.net/keys/{key-name}/{key-version}\n+     * @return Mono of Result including KeyIdentifier and decrypted bytes in base64 string format, can be convert to\n+     * bytes using Convert.FromBase64String().\n+     */\n+    public Mono<byte[]> unwrapKeyAsync(\n+        byte[] wrappedKey,\n+        KeyVaultKeyUriProperties keyVaultUriProperties) {\n+        UnwrapResult keyOpResult;\n+\n+        // Get a Crypto Client for Wrap and UnWrap,this gets init per Key ID\n+        Mono<CryptographyAsyncClient> cryptoClientMono = this.getCryptoClientAsync(keyVaultUriProperties);\n+\n+        // TODO: moderakh change to async\n+        CryptographyAsyncClient cryptoClient = cryptoClientMono.block();\n+        if (cryptoClient == null) {\n+            // this never be empty Mono and hence never null\n+            // TODO: remove this once moved to async and removed blocking call\n+            return Mono.error(new IllegalStateException(\"avk cannot be null\"));\n+        }\n+\n+        try {\n+            keyOpResult = cryptoClient.unwrapKey(KeyVaultConstants.RsaOaep256, wrappedKey).block();\n+        } catch (AzureException ex) {\n+\n+            throw new KeyVaultAccessException();\n+            // TODO: set proper exception moderakh\n+            //            throw new KeyVaultAccessException(\n+            //                ex.Status,\n+            //                ex.ErrorCode,\n+            //                \"UnwrapKeyAsync:Failed to Unwrap the encrypted key.\",\n+            //                ex);\n+        }\n+\n+        if (keyOpResult == null) {\n+            // this never be empty Mono and hence never null\n+            // TODO: remove this once moved to async and removed blocking call\n+            return Mono.error(new IllegalStateException(\"keyOpResult cannot be null\"));\n+        }\n+\n+        // may return null\n+        return Mono.justOrEmpty(keyOpResult.getKey());\n+    }\n+\n+    /**\n+     * Wrap the Key with latest Key version. Only supports bytes in base64 format.\n+     *\n+     * @param key plain text key.\n+     * @param keyVaultUriProperties Parsed key Vault Uri Properties.Properties as in sample Format:\n+     * https://{keyvault-name}.vault.azure.net/keys/{key-name}/{key-version}\n+     * @return Mono of Result including KeyIdentifier and encrypted bytes in base64 string format.\n+     */\n+    public Mono<byte[]> wrapKeyAsync(\n+        byte[] key,\n+        KeyVaultKeyUriProperties keyVaultUriProperties) {\n+        WrapResult keyOpResult;\n+\n+        // Get a Crypto Client for Wrap and UnWrap,this gets init per Key ID\n+        CryptographyAsyncClient cryptoClient = this.getCryptoClientAsync(keyVaultUriProperties).block();\n+        if (cryptoClient == null) {\n+            // this never be empty Mono and hence never null\n+            // TODO: remove this once moved to async and removed blocking call\n+            return Mono.error(new IllegalStateException(\"avk cannot be null\"));\n+        }\n+\n+        try {\n+            keyOpResult = cryptoClient.wrapKey(KeyVaultConstants.RsaOaep256, key).block();\n+        }\n+        // TODO: set proper exception moderakh moderakh\n+        //        catch (RequestFailedException ex)\n+        //        {\n+        //            throw new KeyVaultAccessException(\n+        //                ex.Status,\n+        //                ex.ErrorCode,\n+        //                \"WrapKeyAsync: Failed to Wrap the data encryption key.\",\n+        //                ex);\n+        //        }\n+        catch (Exception ex) {\n+            ex.printStackTrace();", "originalCommit": "003e7e859d0d5a0cca2d019350d6dae955eaf7af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxNzM1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14344#discussion_r476217354", "bodyText": "thanks addressed.", "author": "moderakh", "createdAt": "2020-08-25T06:53:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3NjE2MA=="}], "type": "inlineReview", "revised_code": {"commit": "706fefc4dbcac5e16e85828e5f5ad6eabb228342", "chunk": "diff --git a/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/KeyVaultAccessClient.java b/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/KeyVaultAccessClient.java\nindex f5dd6aeaa74..532f45de083 100644\n--- a/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/KeyVaultAccessClient.java\n+++ b/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/KeyVaultAccessClient.java\n\n@@ -11,6 +11,8 @@ import com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient;\n import com.azure.security.keyvault.keys.cryptography.models.UnwrapResult;\n import com.azure.security.keyvault.keys.cryptography.models.WrapResult;\n import com.azure.security.keyvault.keys.models.KeyVaultKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import reactor.core.publisher.Mono;\n \n import java.net.URI;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3NjI4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14344#discussion_r475776285", "bodyText": "logger ?", "author": "kushagraThapar", "createdAt": "2020-08-24T17:23:12Z", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/KeyVaultAccessClient.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.encryption;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.exception.AzureException;\n+import com.azure.cosmos.implementation.caches.AsyncCache;\n+import com.azure.security.keyvault.keys.KeyAsyncClient;\n+import com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient;\n+import com.azure.security.keyvault.keys.cryptography.models.UnwrapResult;\n+import com.azure.security.keyvault.keys.cryptography.models.WrapResult;\n+import com.azure.security.keyvault.keys.models.KeyVaultKey;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URI;\n+\n+/**\n+ * Implements Core KeyVault access methods that uses the TODO: moderakh this doesn't need to be public. it is public due\n+ * to tests. FIXME\n+ * TODO: methods should be async moderakh\n+ */\n+public class KeyVaultAccessClient {\n+    private final AsyncCache<URI, KeyAsyncClient> akvClientCache;\n+    private final AsyncCache<URI, CryptographyAsyncClient> akvCryptoClientCache;\n+    private final KeyVaultTokenCredentialFactory keyVaultTokenCredentialFactory;\n+    private final KeyClientFactory keyClientFactory;\n+    private final CryptographyClientFactory cryptographyClientFactory;\n+\n+    /**\n+     * Initializes a new instance of the {@link KeyVaultAccessClient}\n+     *\n+     * @param keyVaultTokenCredentialFactory TokenCredentials factory\n+     */\n+    public KeyVaultAccessClient(KeyVaultTokenCredentialFactory keyVaultTokenCredentialFactory) {\n+        this.keyVaultTokenCredentialFactory = keyVaultTokenCredentialFactory;\n+        this.akvClientCache = new AsyncCache<>();\n+        this.akvCryptoClientCache = new AsyncCache<>();\n+        this.keyClientFactory = new KeyClientFactory();\n+        this.cryptographyClientFactory = new CryptographyClientFactory();\n+    }\n+\n+    /**\n+     * TODO: this doesn't need to be public moderakh Initializes a new instance of the {@link KeyVaultAccessClient}\n+     * class Invokes internal factory Methods.\n+     *\n+     * @param keyVaultTokenCredentialFactory TokenCredential\n+     * @param keyClientFactory KeyClient Factory\n+     * @param cryptographyClientFactory KeyClient Factory\n+     */\n+    public KeyVaultAccessClient(KeyVaultTokenCredentialFactory keyVaultTokenCredentialFactory,\n+                                KeyClientFactory keyClientFactory,\n+                                CryptographyClientFactory cryptographyClientFactory) {\n+        this.keyVaultTokenCredentialFactory = keyVaultTokenCredentialFactory;\n+        this.akvClientCache = new AsyncCache<>();\n+        this.akvCryptoClientCache = new AsyncCache<>();\n+        this.keyClientFactory = keyClientFactory;\n+        this.cryptographyClientFactory = cryptographyClientFactory;\n+    }\n+\n+    /**\n+     * Unwrap the encrypted Key. Only supports encrypted bytes in base64 format.\n+     *\n+     * Note: this may return an empty Mono if cryptoClient returns empty/null\n+     *\n+     * @param wrappedKey encrypted bytes.\n+     * @param keyVaultUriProperties Parsed key Vault Uri Properties.Properties as in sample Format:\n+     * https://{keyvault-name}.vault.azure.net/keys/{key-name}/{key-version}\n+     * @return Mono of Result including KeyIdentifier and decrypted bytes in base64 string format, can be convert to\n+     * bytes using Convert.FromBase64String().\n+     */\n+    public Mono<byte[]> unwrapKeyAsync(\n+        byte[] wrappedKey,\n+        KeyVaultKeyUriProperties keyVaultUriProperties) {\n+        UnwrapResult keyOpResult;\n+\n+        // Get a Crypto Client for Wrap and UnWrap,this gets init per Key ID\n+        Mono<CryptographyAsyncClient> cryptoClientMono = this.getCryptoClientAsync(keyVaultUriProperties);\n+\n+        // TODO: moderakh change to async\n+        CryptographyAsyncClient cryptoClient = cryptoClientMono.block();\n+        if (cryptoClient == null) {\n+            // this never be empty Mono and hence never null\n+            // TODO: remove this once moved to async and removed blocking call\n+            return Mono.error(new IllegalStateException(\"avk cannot be null\"));\n+        }\n+\n+        try {\n+            keyOpResult = cryptoClient.unwrapKey(KeyVaultConstants.RsaOaep256, wrappedKey).block();\n+        } catch (AzureException ex) {\n+\n+            throw new KeyVaultAccessException();\n+            // TODO: set proper exception moderakh\n+            //            throw new KeyVaultAccessException(\n+            //                ex.Status,\n+            //                ex.ErrorCode,\n+            //                \"UnwrapKeyAsync:Failed to Unwrap the encrypted key.\",\n+            //                ex);\n+        }\n+\n+        if (keyOpResult == null) {\n+            // this never be empty Mono and hence never null\n+            // TODO: remove this once moved to async and removed blocking call\n+            return Mono.error(new IllegalStateException(\"keyOpResult cannot be null\"));\n+        }\n+\n+        // may return null\n+        return Mono.justOrEmpty(keyOpResult.getKey());\n+    }\n+\n+    /**\n+     * Wrap the Key with latest Key version. Only supports bytes in base64 format.\n+     *\n+     * @param key plain text key.\n+     * @param keyVaultUriProperties Parsed key Vault Uri Properties.Properties as in sample Format:\n+     * https://{keyvault-name}.vault.azure.net/keys/{key-name}/{key-version}\n+     * @return Mono of Result including KeyIdentifier and encrypted bytes in base64 string format.\n+     */\n+    public Mono<byte[]> wrapKeyAsync(\n+        byte[] key,\n+        KeyVaultKeyUriProperties keyVaultUriProperties) {\n+        WrapResult keyOpResult;\n+\n+        // Get a Crypto Client for Wrap and UnWrap,this gets init per Key ID\n+        CryptographyAsyncClient cryptoClient = this.getCryptoClientAsync(keyVaultUriProperties).block();\n+        if (cryptoClient == null) {\n+            // this never be empty Mono and hence never null\n+            // TODO: remove this once moved to async and removed blocking call\n+            return Mono.error(new IllegalStateException(\"avk cannot be null\"));\n+        }\n+\n+        try {\n+            keyOpResult = cryptoClient.wrapKey(KeyVaultConstants.RsaOaep256, key).block();\n+        }\n+        // TODO: set proper exception moderakh moderakh\n+        //        catch (RequestFailedException ex)\n+        //        {\n+        //            throw new KeyVaultAccessException(\n+        //                ex.Status,\n+        //                ex.ErrorCode,\n+        //                \"WrapKeyAsync: Failed to Wrap the data encryption key.\",\n+        //                ex);\n+        //        }\n+        catch (Exception ex) {\n+            ex.printStackTrace();\n+            throw new KeyVaultAccessException();\n+        }\n+\n+        // key vault may return null\n+        return Mono.justOrEmpty(keyOpResult.getEncryptedKey());\n+    }\n+\n+    /**\n+     * Validate the Purge Protection AndSoft Delete Settings.\n+     *\n+     * @param keyVaultUriProperties Parsed key Vault Uri Properties.\n+     * @return Whether The Customer has the correct Deletion Level.\n+     */\n+    public Mono<Boolean> validatePurgeProtectionAndSoftDeleteSettingsAsync(\n+        KeyVaultKeyUriProperties keyVaultUriProperties) {\n+        KeyAsyncClient akvClient = this.getAkvClientAsync(keyVaultUriProperties).block();\n+        if (akvClient == null) {\n+            // this never be empty Mono and hence never null\n+            // TODO: remove this once moved to async and removed blocking call\n+            return Mono.error(new IllegalStateException(\"avk cannot be null\"));\n+        }\n+        try {\n+            KeyVaultKey getKeyResponse = akvClient.getKey(keyVaultUriProperties.getKeyName()).block();\n+\n+            String keyDeletionRecoveryLevel = null;\n+            if (getKeyResponse != null && getKeyResponse.getProperties() != null) {\n+                keyDeletionRecoveryLevel = getKeyResponse.getProperties().getRecoveryLevel();\n+            }\n+\n+            return Mono.just(keyDeletionRecoveryLevel != null && (\n+                keyDeletionRecoveryLevel.contains(KeyVaultConstants.DeletionRecoveryLevel.Recoverable)\n+                    || keyDeletionRecoveryLevel.contains(KeyVaultConstants.DeletionRecoveryLevel.RecoverableProtectedSubscription)\n+                    || keyDeletionRecoveryLevel.contains(KeyVaultConstants.DeletionRecoveryLevel.CustomizedRecoverable)\n+                    || keyDeletionRecoveryLevel.contains(KeyVaultConstants.DeletionRecoveryLevel.CustomizedRecoverableProtectedSubscription)));\n+        }\n+        //        catch (RequestFailedException ex)\n+        //        {\n+        //            throw new KeyVaultAccessException(\n+        //                ex.Status,\n+        //                ex.ErrorCode,\n+        //                \"ValidatePurgeProtectionAndSoftDeleteSettingsAsync: Failed to fetch Key from Key Vault.\",\n+        //                ex);\n+        //        }\n+        catch (Exception ex) {\n+            ex.printStackTrace();", "originalCommit": "003e7e859d0d5a0cca2d019350d6dae955eaf7af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxNzI5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14344#discussion_r476217298", "bodyText": "thanks. addressed.", "author": "moderakh", "createdAt": "2020-08-25T06:53:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3NjI4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "706fefc4dbcac5e16e85828e5f5ad6eabb228342", "chunk": "diff --git a/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/KeyVaultAccessClient.java b/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/KeyVaultAccessClient.java\nindex f5dd6aeaa74..532f45de083 100644\n--- a/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/KeyVaultAccessClient.java\n+++ b/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/KeyVaultAccessClient.java\n\n@@ -11,6 +11,8 @@ import com.azure.security.keyvault.keys.cryptography.CryptographyAsyncClient;\n import com.azure.security.keyvault.keys.cryptography.models.UnwrapResult;\n import com.azure.security.keyvault.keys.cryptography.models.WrapResult;\n import com.azure.security.keyvault.keys.models.KeyVaultKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import reactor.core.publisher.Mono;\n \n import java.net.URI;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3NjQ0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14344#discussion_r475776448", "bodyText": "new line at the end of file.", "author": "kushagraThapar", "createdAt": "2020-08-24T17:23:30Z", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/KeyVaultAccessException.java", "diffHunk": "@@ -0,0 +1,22 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.encryption;\n+\n+import com.azure.core.exception.AzureException;\n+\n+// TODO: moderakh we should extend CosmosException. dotnet has problem too\n+// TODO also we should set proper error message, status code\n+class KeyVaultAccessException extends AzureException {\n+    public KeyVaultAccessException() {\n+        // TODO: remove this\n+    }\n+\n+    public KeyVaultAccessException(int statusCode,\n+                                   String keyVaultErrorCode,\n+                                   String errorMessage,\n+                                   Exception innerException) {\n+        // TODO: CosmosException as super class?\n+        //super(statusCode, keyVaultErrorCode, errorMessage, innerException)\n+    }\n+}", "originalCommit": "003e7e859d0d5a0cca2d019350d6dae955eaf7af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxNzQ1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14344#discussion_r476217452", "bodyText": "thanks addressed.", "author": "moderakh", "createdAt": "2020-08-25T06:54:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3NjQ0OA=="}], "type": "inlineReview", "revised_code": {"commit": "706fefc4dbcac5e16e85828e5f5ad6eabb228342", "chunk": "diff --git a/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/KeyVaultAccessException.java b/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/KeyVaultAccessException.java\nindex 125c760e686..053a2ef8ca6 100644\n--- a/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/KeyVaultAccessException.java\n+++ b/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/KeyVaultAccessException.java\n\n@@ -19,4 +19,4 @@ class KeyVaultAccessException extends AzureException {\n         // TODO: CosmosException as super class?\n         //super(statusCode, keyVaultErrorCode, errorMessage, innerException)\n     }\n-}\n\\ No newline at end of file\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3NzA5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14344#discussion_r475777093", "bodyText": "Do we need some sort of debug / warn error level logging here ?", "author": "kushagraThapar", "createdAt": "2020-08-24T17:24:40Z", "path": "sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/KeyVaultKeyUriProperties.java", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.encryption;\n+\n+import com.azure.cosmos.implementation.apachecommons.lang.StringUtils;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+\n+//  TODO: this also doesn't need to be public, it is public because of test FIXME\n+public class KeyVaultKeyUriProperties {\n+    private final URI keyUri;\n+    private String keyName;\n+    private URI keyVaultUri;\n+    private String keyVersion;\n+\n+    /**\n+     * Initializes a new instance of the {@link KeyVaultKeyUriProperties} Helper Class to fetch frequently used Uri\n+     * parsed information for KeyVault.\n+     *\n+     * @param keyUri\n+     */\n+    private KeyVaultKeyUriProperties(URI keyUri) {\n+        this.keyUri = keyUri;\n+    }\n+\n+    public URI getKeyUri() {\n+        return keyUri;\n+    }\n+\n+    public String getKeyName() {\n+        return keyName;\n+    }\n+\n+    public String getKeyVersion() {\n+        return keyVersion;\n+    }\n+\n+    public URI getKeyVaultUri() {\n+        return keyVaultUri;\n+    }\n+\n+    private static String[] getSegments(URI uri) {\n+        return StringUtils.split(uri.getPath(), \"/\");\n+    }\n+\n+    public static boolean tryParse(URI keyUri,\n+                                   AtomicReference<KeyVaultKeyUriProperties> keyVaultUriPropertiesReference) {\n+        KeyVaultKeyUriProperties keyVaultUriProperties = null;\n+\n+        String[] segments = getSegments(keyUri);\n+        // https://testdemo1.vault.azure.net/keys/testkey1/47d306aeaae74baab294672354603ca3\n+\n+        // https://testdemo1.vault.azure.net/keys/testkey1/47d306aeaae74baab294672354603ca3\n+        if (!((segments.length == 3) && StringUtils.equalsIgnoreCase(segments[0], KeyVaultConstants.KeysSegment))) {\n+            return false;\n+        }\n+\n+        try {\n+            // TODO: shifted the index wrt dot net and keyName is \"testKey1 instead of testkey1/\n+            keyVaultUriProperties = new KeyVaultKeyUriProperties(keyUri);\n+            keyVaultUriProperties.keyName = segments[1]; // \"testKey1/\"\n+            keyVaultUriProperties.keyVersion = segments[2]; // \"47d306aeaae74baab294672354603ca3\"\n+            //keyVaultUriProperties.keyVaultUri = new URI(keyVaultUriProperties.KeyUri.GetLeftPart(UriPartial.Scheme\n+            // | UriPartial.Authority)); // https://testdemo1.vault.azure.net/\n+            keyVaultUriProperties.keyVaultUri = new URI(keyUri.getScheme(), keyUri.getAuthority(), null, null, null); // https://testdemo1.vault.azure.net/\n+\n+            keyVaultUriPropertiesReference.set(keyVaultUriProperties);\n+        } catch (URISyntaxException e) {\n+            return false;", "originalCommit": "003e7e859d0d5a0cca2d019350d6dae955eaf7af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxNzUyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14344#discussion_r476217529", "bodyText": "thanks. addressed.", "author": "moderakh", "createdAt": "2020-08-25T06:54:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3NzA5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "706fefc4dbcac5e16e85828e5f5ad6eabb228342", "chunk": "diff --git a/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/KeyVaultKeyUriProperties.java b/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/KeyVaultKeyUriProperties.java\nindex 7ac7d24f3be..fecf3d838db 100644\n--- a/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/KeyVaultKeyUriProperties.java\n+++ b/sdk/cosmos/azure-cosmos-encryption/src/main/java/com/azure/cosmos/encryption/KeyVaultKeyUriProperties.java\n\n@@ -4,6 +4,8 @@\n package com.azure.cosmos.encryption;\n \n import com.azure.cosmos.implementation.apachecommons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.net.URI;\n import java.net.URISyntaxException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3NzUyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14344#discussion_r475777521", "bodyText": "Please add public description of the class.", "author": "kushagraThapar", "createdAt": "2020-08-24T17:25:23Z", "path": "sdk/cosmos/azure-cosmos-encryption/src/test/java/com/azure/cosmos/encryption/KeyModelFactory.java", "diffHunk": "@@ -0,0 +1,111 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.encryption;\n+\n+import com.azure.cosmos.implementation.guava25.base.Function;\n+import com.azure.security.keyvault.keys.models.JsonWebKey;\n+import com.azure.security.keyvault.keys.models.KeyOperation;\n+import com.azure.security.keyvault.keys.models.KeyProperties;\n+import com.azure.security.keyvault.keys.models.KeyType;\n+import com.azure.security.keyvault.keys.models.KeyVaultKey;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.util.List;\n+\n+public class KeyModelFactory {", "originalCommit": "003e7e859d0d5a0cca2d019350d6dae955eaf7af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxNzU4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14344#discussion_r476217584", "bodyText": "thanks addressed.", "author": "moderakh", "createdAt": "2020-08-25T06:54:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3NzUyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "706fefc4dbcac5e16e85828e5f5ad6eabb228342", "chunk": "diff --git a/sdk/cosmos/azure-cosmos-encryption/src/test/java/com/azure/cosmos/encryption/KeyModelFactory.java b/sdk/cosmos/azure-cosmos-encryption/src/test/java/com/azure/cosmos/encryption/KeyModelFactory.java\nindex 7dd972530e4..e81166ebbb0 100644\n--- a/sdk/cosmos/azure-cosmos-encryption/src/test/java/com/azure/cosmos/encryption/KeyModelFactory.java\n+++ b/sdk/cosmos/azure-cosmos-encryption/src/test/java/com/azure/cosmos/encryption/KeyModelFactory.java\n\n@@ -15,6 +15,9 @@ import org.apache.commons.lang3.StringUtils;\n \n import java.util.List;\n \n+/**\n+ * Test Utils factory class for mocking Keys.\n+ */\n public class KeyModelFactory {\n     public static class KeyVaultKeyBuilder {\n         private static ObjectMapper objectMapper = new ObjectMapper();\n"}}, {"oid": "706fefc4dbcac5e16e85828e5f5ad6eabb228342", "url": "https://github.com/Azure/azure-sdk-for-java/commit/706fefc4dbcac5e16e85828e5f5ad6eabb228342", "message": "addressed code review comments", "committedDate": "2020-08-24T17:50:37Z", "type": "commit"}, {"oid": "b4eddeeca10fbcdcafa290b42a252817683546fd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b4eddeeca10fbcdcafa290b42a252817683546fd", "message": "added sample", "committedDate": "2020-08-25T06:51:15Z", "type": "commit"}, {"oid": "268af5c8742ee9149b3f8f18ad96d12ca8c9846e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/268af5c8742ee9149b3f8f18ad96d12ca8c9846e", "message": "update azure-identity dependency version", "committedDate": "2020-08-25T07:00:36Z", "type": "commit"}]}