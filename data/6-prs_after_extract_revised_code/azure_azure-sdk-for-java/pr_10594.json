{"pr_number": 10594, "pr_title": "Fixes backpressure for AmqpReceiveLink and Service Bus equivalent", "pr_createdAt": "2020-04-29T06:55:30Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/10594", "timeline": [{"oid": "30bee878f6405e7105b9f699945de04d0eabec99", "url": "https://github.com/Azure/azure-sdk-for-java/commit/30bee878f6405e7105b9f699945de04d0eabec99", "message": "Adding support for backpressure and tests in Event Hubs.", "committedDate": "2020-04-29T06:37:23Z", "type": "commit"}, {"oid": "c1045d0e395969f6d887b1d67ef29fcb265b19e7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c1045d0e395969f6d887b1d67ef29fcb265b19e7", "message": "Adding support for backpressure and tests in Service Bus.", "committedDate": "2020-04-29T06:37:32Z", "type": "commit"}, {"oid": "9799dc34864e2616a0e471aefd8977b9da3c8fac", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9799dc34864e2616a0e471aefd8977b9da3c8fac", "message": "Adding delay for tests.", "committedDate": "2020-04-29T06:52:07Z", "type": "commit"}, {"oid": "1ea0f41c3ef7059e531ff45f6a4295efe94a3b96", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1ea0f41c3ef7059e531ff45f6a4295efe94a3b96", "message": "Fixing cancellation.", "committedDate": "2020-04-29T07:56:20Z", "type": "commit"}, {"oid": "0471b89496bd022a568a2ba1013c9d50e4cf7cba", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0471b89496bd022a568a2ba1013c9d50e4cf7cba", "message": "Fixing cancellation for Service Bus.", "committedDate": "2020-04-29T07:56:44Z", "type": "commit"}, {"oid": "e69a2cfb3755fb0755a2d70264fb6e8b0430efdf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e69a2cfb3755fb0755a2d70264fb6e8b0430efdf", "message": "Fixes reactor connection to close. Also fixes verification on CBS node.", "committedDate": "2020-04-29T17:21:56Z", "type": "commit"}, {"oid": "93558d96e904f0e6bb217274b52fdd0f30388346", "url": "https://github.com/Azure/azure-sdk-for-java/commit/93558d96e904f0e6bb217274b52fdd0f30388346", "message": "Fix tests.", "committedDate": "2020-04-29T17:23:20Z", "type": "commit"}, {"oid": "706af29349de0631b4ff8d32a0df565cd434c895", "url": "https://github.com/Azure/azure-sdk-for-java/commit/706af29349de0631b4ff8d32a0df565cd434c895", "message": "Cleaning up.", "committedDate": "2020-04-29T17:34:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxODU1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10594#discussion_r417518552", "bodyText": "This didn't have to change. The error message should use the name of the param instead of the instance variable name.", "author": "srnagar", "createdAt": "2020-04-29T18:19:32Z", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ClaimsBasedSecurityChannel.java", "diffHunk": "@@ -37,7 +45,7 @@ public ClaimsBasedSecurityChannel(Mono<RequestResponseChannel> responseChannelMo\n         this.authorizationType = Objects.requireNonNull(authorizationType, \"'authorizationType' cannot be null.\");\n         this.retryOptions = Objects.requireNonNull(retryOptions, \"'retryOptions' cannot be null.\");\n         this.credential = Objects.requireNonNull(tokenCredential, \"'tokenCredential' cannot be null.\");\n-        this.cbsChannelMono = Objects.requireNonNull(responseChannelMono, \"'responseChannelMono' cannot be null.\");\n+        this.cbsChannelMono = Objects.requireNonNull(responseChannelMono, \"'cbsChannelMono' cannot be null.\");", "originalCommit": "706af29349de0631b4ff8d32a0df565cd434c895", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzMjg4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10594#discussion_r417532889", "bodyText": "Good catch. I didn't check the actual parameter name.", "author": "conniey", "createdAt": "2020-04-29T18:44:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxODU1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "5c95fa03d5412b0683cd83a924889099389002c0", "chunk": "diff --git a/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ClaimsBasedSecurityChannel.java b/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ClaimsBasedSecurityChannel.java\nindex 9ef2d354a74..a64240b0eb3 100644\n--- a/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ClaimsBasedSecurityChannel.java\n+++ b/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ClaimsBasedSecurityChannel.java\n\n@@ -45,7 +45,7 @@ public class ClaimsBasedSecurityChannel implements ClaimsBasedSecurityNode {\n         this.authorizationType = Objects.requireNonNull(authorizationType, \"'authorizationType' cannot be null.\");\n         this.retryOptions = Objects.requireNonNull(retryOptions, \"'retryOptions' cannot be null.\");\n         this.credential = Objects.requireNonNull(tokenCredential, \"'tokenCredential' cannot be null.\");\n-        this.cbsChannelMono = Objects.requireNonNull(responseChannelMono, \"'cbsChannelMono' cannot be null.\");\n+        this.cbsChannelMono = Objects.requireNonNull(responseChannelMono, \"'responseChannelMono' cannot be null.\");\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUyOTYyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10594#discussion_r417529628", "bodyText": "Can we use AtomicReference here instead of AtomicReferenceFieldUpdater? I don't think we'll have too many instances of AmqpReceiveLinkProcessor for memory being an issue. The reflection-based update can cause issues if the name of the volatile var is changed and the field updater is not updated.", "author": "srnagar", "createdAt": "2020-04-29T18:38:19Z", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/AmqpReceiveLinkProcessor.java", "diffHunk": "@@ -25,40 +24,50 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n \n /**\n  * Processes AMQP receive links into a stream of AMQP messages.\n  */\n public class AmqpReceiveLinkProcessor extends FluxProcessor<AmqpReceiveLink, Message> implements Subscription {\n-    // We don't want to dump too many credits on the link at once. It's easy enough to ask for more.\n-    private static final int MINIMUM_REQUEST = 0;\n-    private static final int MAXIMUM_REQUEST = 100;\n-\n     private final ClientLogger logger = new ClientLogger(AmqpReceiveLinkProcessor.class);\n     private final Object lock = new Object();\n     private final AtomicBoolean isTerminated = new AtomicBoolean();\n-    private final AtomicBoolean hasDownstream = new AtomicBoolean();\n     private final AtomicInteger retryAttempts = new AtomicInteger();\n-    private final AtomicInteger linkCreditRequest = new AtomicInteger(1);\n     private final Deque<Message> messageQueue = new ConcurrentLinkedDeque<>();\n+    private final AtomicBoolean hasFirstLink = new AtomicBoolean();\n+    private final AtomicBoolean linkCreditsAdded = new AtomicBoolean();\n \n     private final int prefetch;\n     private final AmqpRetryPolicy retryPolicy;\n-    private Disposable parentConnection;\n-\n-    private volatile Subscription upstream;\n-    private volatile CoreSubscriber<? super Message> downstream;\n-    private volatile boolean isCancelled;\n+    private final Disposable parentConnection;\n \n     private volatile Throwable lastError;\n+    private volatile boolean isCancelled;\n     private volatile AmqpReceiveLink currentLink;\n     private volatile Disposable currentLinkSubscriptions;\n     private volatile Disposable retrySubscription;\n \n-    volatile int wip;\n-    static final AtomicIntegerFieldUpdater<AmqpReceiveLinkProcessor> WIP =\n+    private volatile CoreSubscriber<? super Message> downstream;\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<AmqpReceiveLinkProcessor, CoreSubscriber> DOWNSTREAM =", "originalCommit": "706af29349de0631b4ff8d32a0df565cd434c895", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzMzY5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10594#discussion_r417533698", "bodyText": "Makes sense. I was thinking of those EHs that have 1k partitions. I can revert it.", "author": "conniey", "createdAt": "2020-04-29T18:45:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUyOTYyOA=="}], "type": "inlineReview", "revised_code": {"commit": "c960a9055ce1a312292ea49eb38bfedfa1ab408b", "chunk": "diff --git a/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/AmqpReceiveLinkProcessor.java b/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/AmqpReceiveLinkProcessor.java\nindex 5bbf60c53c2..9d5d6c3b08c 100644\n--- a/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/AmqpReceiveLinkProcessor.java\n+++ b/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/AmqpReceiveLinkProcessor.java\n\n@@ -23,8 +23,8 @@ import java.util.Objects;\n import java.util.concurrent.ConcurrentLinkedDeque;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReference;\n import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzMDMwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10594#discussion_r417530305", "bodyText": "Same here - prefer to use AtomicReference.", "author": "srnagar", "createdAt": "2020-04-29T18:39:33Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReceiveLinkProcessor.java", "diffHunk": "@@ -14,47 +14,69 @@\n import reactor.core.CoreSubscriber;\n import reactor.core.Disposable;\n import reactor.core.Disposables;\n+import reactor.core.Exceptions;\n import reactor.core.publisher.FluxProcessor;\n import reactor.core.publisher.Mono;\n import reactor.core.publisher.Operators;\n import reactor.core.scheduler.Schedulers;\n \n import java.time.Duration;\n+import java.util.Deque;\n import java.util.Objects;\n+import java.util.concurrent.ConcurrentLinkedDeque;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n \n import static com.azure.core.util.FluxUtil.monoError;\n \n /**\n  * Processes AMQP receive links into a stream of AMQP messages.\n+ *\n+ * This is almost a carbon copy of AmqpReceiveLinkProcessor. When we can abstract it from proton-j, it would be nice to\n+ * unify this.\n  */\n public class ServiceBusReceiveLinkProcessor extends FluxProcessor<AmqpReceiveLink, Message> implements Subscription {\n-    // We don't want to dump too many credits on the link at once. It's easy enough to ask for more.\n-    private static final int MINIMUM_REQUEST = 0;\n-    private static final int MAXIMUM_REQUEST = 100;\n-\n     private final ClientLogger logger = new ClientLogger(ServiceBusReceiveLinkProcessor.class);\n     private final Object lock = new Object();\n     private final AtomicBoolean isTerminated = new AtomicBoolean();\n-    private final AtomicBoolean hasDownstream = new AtomicBoolean();\n     private final AtomicInteger retryAttempts = new AtomicInteger();\n-    private final AtomicBoolean isRequested = new AtomicBoolean();\n-    private final AtomicInteger linkCreditRequest = new AtomicInteger(1);\n+    private final Deque<Message> messageQueue = new ConcurrentLinkedDeque<>();\n+    private final AtomicBoolean hasFirstLink = new AtomicBoolean();\n+    private final AtomicBoolean linkCreditsAdded = new AtomicBoolean();\n \n     private final int prefetch;\n     private final AmqpRetryPolicy retryPolicy;\n-    private Disposable parentConnection;\n+    private final Disposable parentConnection;\n     private final AmqpErrorContext errorContext;\n \n-    private volatile Subscription upstream;\n-    private volatile CoreSubscriber<? super Message> downstream;\n-\n     private volatile Throwable lastError;\n+    private volatile boolean isCancelled;\n     private volatile AmqpReceiveLink currentLink;\n     private volatile Disposable currentLinkSubscriptions;\n     private volatile Disposable retrySubscription;\n \n+    private volatile CoreSubscriber<? super Message> downstream;\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<ServiceBusReceiveLinkProcessor, CoreSubscriber> DOWNSTREAM =\n+        AtomicReferenceFieldUpdater.newUpdater(ServiceBusReceiveLinkProcessor.class, CoreSubscriber.class,\n+            \"downstream\");", "originalCommit": "706af29349de0631b4ff8d32a0df565cd434c895", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzNDU0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10594#discussion_r417534548", "bodyText": "For SB, I'm not sure, because they create a separate receive link for each session and non-session receiver. But I guess at any given time, they'll have at most maxConcurrentSessions. \ud83e\udd14", "author": "conniey", "createdAt": "2020-04-29T18:46:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzMDMwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "c960a9055ce1a312292ea49eb38bfedfa1ab408b", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReceiveLinkProcessor.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReceiveLinkProcessor.java\nindex e0a7e003335..24e5cfbec92 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReceiveLinkProcessor.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusReceiveLinkProcessor.java\n\n@@ -26,8 +26,8 @@ import java.util.Objects;\n import java.util.concurrent.ConcurrentLinkedDeque;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReference;\n import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n \n import static com.azure.core.util.FluxUtil.monoError;\n"}}, {"oid": "49cf0ebdd3a98428b7e7fc509e7155789fe4c17c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/49cf0ebdd3a98428b7e7fc509e7155789fe4c17c", "message": "Fix consumption downstream.", "committedDate": "2020-04-29T19:36:51Z", "type": "commit"}, {"oid": "c960a9055ce1a312292ea49eb38bfedfa1ab408b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c960a9055ce1a312292ea49eb38bfedfa1ab408b", "message": "Replacing with AtomicReferences.", "committedDate": "2020-04-29T20:01:42Z", "type": "commit"}, {"oid": "5c95fa03d5412b0683cd83a924889099389002c0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5c95fa03d5412b0683cd83a924889099389002c0", "message": "Fix name.", "committedDate": "2020-04-29T20:07:27Z", "type": "commit"}, {"oid": "9a7fe5ecf0cff41c34e550146544f9ee1b7165b7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9a7fe5ecf0cff41c34e550146544f9ee1b7165b7", "message": "Fix broken tests.", "committedDate": "2020-04-29T21:53:13Z", "type": "commit"}, {"oid": "3de1c0cfaa5d45b362b9283e91257562c4593fb2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3de1c0cfaa5d45b362b9283e91257562c4593fb2", "message": "Fixing imports.", "committedDate": "2020-04-29T23:33:56Z", "type": "commit"}, {"oid": "7ebf61a4b238453106af218f621152eb54c9d572", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7ebf61a4b238453106af218f621152eb54c9d572", "message": "Fixing test case.", "committedDate": "2020-04-30T00:04:53Z", "type": "commit"}]}