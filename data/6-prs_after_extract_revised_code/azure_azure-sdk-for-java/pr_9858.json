{"pr_number": 9858, "pr_title": "Cosmos CFP: fix for handling partition splits or partition not found", "pr_createdAt": "2020-04-03T21:54:13Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/9858", "timeline": [{"oid": "3228f94f4c8fecddb1e3872ccb606b688da07412", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3228f94f4c8fecddb1e3872ccb606b688da07412", "message": "Bug fix when handling partition splits or partition not found.\n  The cause of the bug is a typo in the call to log the current partition information such as the partition ID.\nBug fix when syncronizing lease updates across different threads.\nAdd test case for handling partition splits.", "committedDate": "2020-04-03T21:50:29Z", "type": "commit"}, {"oid": "e51cd135d58167203bfca1872e35cee76235709d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e51cd135d58167203bfca1872e35cee76235709d", "message": "Undo module related changes", "committedDate": "2020-04-03T21:55:28Z", "type": "commit"}, {"oid": "120219bc1078b8b4c683d1ba676a5bfd30993457", "url": "https://github.com/Azure/azure-sdk-for-java/commit/120219bc1078b8b4c683d1ba676a5bfd30993457", "message": "Merge branch 'master' into milismsft-v4-cfp-fixSplit", "committedDate": "2020-04-03T21:58:06Z", "type": "commit"}, {"oid": "89fadf09b17f3b23574394854291f44e35441347", "url": "https://github.com/Azure/azure-sdk-for-java/commit/89fadf09b17f3b23574394854291f44e35441347", "message": "disable the split test in order to rule it out as causing the CI failure. Splits are not properly handled when tests are run against the public emulator.", "committedDate": "2020-04-03T23:34:25Z", "type": "commit"}, {"oid": "cfed2526a1a897ae11832382960b93f6130d8185", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cfed2526a1a897ae11832382960b93f6130d8185", "message": "change new test group and default timings for CFP tests", "committedDate": "2020-04-04T08:29:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNDEzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r404234137", "bodyText": "when a class is annotated with jackson annotation, jackson uses reflection for serialization/deserialization to json.\nreflection is expensive and that being said, If there are pre existing classes in the code which needs to be serialized/deserialized to json we should ideally use a jackson serializer rather than annotating the class with jackson annotation.\n(not necessarily in the scope of this PR, but something to be addressed outside of this PR).", "author": "moderakh", "createdAt": "2020-04-06T16:40:53Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java", "diffHunk": "@@ -63,7 +63,8 @@ public ServiceItemLease withId(String id) {\n         return this;\n     }\n \n-    @JsonIgnore\n+//    @JsonIgnore\n+    @JsonProperty(\"_etag\")", "originalCommit": "cfed2526a1a897ae11832382960b93f6130d8185", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1ODU1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r404258552", "bodyText": "n this case the \"_etag\" field was not passed through the serialization and that resulted in \"IF MATCH\" condition to fail when updating the lease document.", "author": "milismsft", "createdAt": "2020-04-06T17:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNDEzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2MzEzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r404263139", "bodyText": "The ask is to add something similar to this:\nhttps://github.com/Azure/azure-sdk-for-java/blob/master/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/PartitionKeyInternal.java#L35-L36\nThe internal types should not rely on reflection for serialization/deserialization.", "author": "moderakh", "createdAt": "2020-04-06T17:26:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNDEzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDI5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r407030295", "bodyText": "Fixed. We only need a serializer here, the de-serialization is done at the Document/CosmosItemProperties level and that instance it is later used to create a Lease instance.", "author": "milismsft", "createdAt": "2020-04-11T07:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNDEzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzOTgxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r407939811", "bodyText": "If you have a serializer you need a deserializer too.\nDocument/CosmosItemProperties should call to the custom deserializer for deserialization. no?", "author": "moderakh", "createdAt": "2020-04-14T07:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNDEzNw=="}], "type": "inlineReview", "revised_code": {"commit": "29eb83a7735a3a5d54f58d6b815eafe80dcf6a48", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java\nindex 2ed1a8d5fed..6109844e81e 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java\n\n@@ -63,8 +66,6 @@ public class ServiceItemLease implements Lease {\n         return this;\n     }\n \n-//    @JsonIgnore\n-    @JsonProperty(\"_etag\")\n     public String getETag() {\n         return this._etag;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNzY3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r404237671", "bodyText": "partition split normally takes 10-20 min to complete. how are we ensuring that the test sees partition split completing within its life time?", "author": "moderakh", "createdAt": "2020-04-06T16:46:12Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java", "diffHunk": "@@ -332,10 +315,136 @@ public void staledLeaseAcquiring() {\n         receivedDocuments.clear();\n     }\n \n+    @Test(groups = { \"simple\" }, timeOut = 50 * CHANGE_FEED_PROCESSOR_TIMEOUT)\n+    public void readFeedDocumentsAfterSplit() {\n+        createdFeedCollectionForSplit = createFeedCollection(FEED_COLLECTION_THROUGHPUT_FOR_SPLIT);\n+\n+        // generate a first batch of documents\n+        setupReadFeedDocuments(createdFeedCollectionForSplit, FEED_COUNT);\n+\n+        changeFeedProcessor = ChangeFeedProcessor.changeFeedProcessorBuilder()\n+            .hostName(hostName)\n+            .handleChanges(changeFeedProcessorHandler())\n+            .feedContainer(createdFeedCollectionForSplit)\n+            .leaseContainer(createdLeaseCollection)\n+            .options(new ChangeFeedProcessorOptions()\n+                .setLeasePrefix(\"TEST\")\n+                .setStartFromBeginning(true)\n+                .setMaxItemCount(10)\n+            )\n+            .build();\n+\n+        changeFeedProcessor.start().subscribeOn(Schedulers.elastic())\n+            .timeout(Duration.ofMillis(2 * CHANGE_FEED_PROCESSOR_TIMEOUT))\n+            .onErrorResume(throwable -> {\n+                log.error(\"Change feed processor did not start in the expected time\", throwable);\n+                return Mono.error(throwable);\n+            })\n+            .doOnSuccess(aVoid -> {\n+                // Wait for the feed processor to receive and process the first batch of documents.\n+                waitToReceiveDocuments(2 * CHANGE_FEED_PROCESSOR_TIMEOUT, FEED_COUNT);\n+            })\n+            .then(\n+                // increase throughput to force a single partition collection to go through a split\n+                createdFeedCollectionForSplit.readProvisionedThroughput().subscribeOn(Schedulers.elastic())\n+                    .flatMap(currentThroughput ->\n+                        createdFeedCollectionForSplit.replaceProvisionedThroughput(FEED_COLLECTION_THROUGHPUT).subscribeOn(Schedulers.elastic())", "originalCommit": "cfed2526a1a897ae11832382960b93f6130d8185", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI1OTg5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r404259892", "bodyText": "There's a check later to ensure that we see at least 2 partitions. In regular case it takes couple minutes (not 10 minutes) to detect the split.", "author": "milismsft", "createdAt": "2020-04-06T17:20:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNzY3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ce2d3d238e26673d430d940d7e311b6d3789e6c", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\nindex b4432812ee5..ce9a7a902a9 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\n\n@@ -417,6 +427,46 @@ public class ChangeFeedProcessorTest extends TestSuiteBase {\n         receivedDocuments.clear();\n     }\n \n+    @Test(groups = { \"simple\" }, timeOut = CHANGE_FEED_PROCESSOR_TIMEOUT)\n+    public void testServiceItemLeaseSerialization() {\n+        ZonedDateTime timeNow = ZonedDateTime.now();\n+        String timeNowValue = timeNow.toString();\n+\n+        Lease lease1 = new ServiceItemLease()\n+            .withId(\"id1\")\n+            .withLeaseToken(\"1\")\n+            .withETag(\"etag1\")\n+            .withOwner(\"Owner1\")\n+            .withContinuationToken(\"12\")\n+            .withTimestamp(timeNow)\n+            .withTs(\"122311231\");\n+\n+        Lease lease2 = new ServiceItemLease()\n+            .withId(\"id2\")\n+            .withLeaseToken(\"2\")\n+            .withETag(\"etag2\")\n+            .withContinuationToken(\"22\")\n+            .withTimestamp(timeNow)\n+            .withTs(\"122311232\");\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        try {\n+            assertThat(mapper.writeValueAsString(lease1)).isEqualTo(\n+                String.format(\"%s%s%s\",\n+                    \"{\\\"id\\\":\\\"id1\\\",\\\"_etag\\\":\\\"etag1\\\",\\\"LeaseToken\\\":\\\"1\\\",\\\"ContinuationToken\\\":\\\"12\\\",\\\"timestamp\\\":\\\"\",\n+                    timeNowValue,\n+                    \"\\\",\\\"Owner\\\":\\\"Owner1\\\"}\"));\n+            assertThat(mapper.writeValueAsString(lease2)).isEqualTo(\n+                String.format(\"%s%s%s\",\n+                    \"{\\\"id\\\":\\\"id2\\\",\\\"_etag\\\":\\\"etag2\\\",\\\"LeaseToken\\\":\\\"2\\\",\\\"ContinuationToken\\\":\\\"22\\\",\\\"timestamp\\\":\\\"\",\n+                    timeNowValue,\n+                    \"\\\",\\\"Owner\\\":null}\"));\n+        } catch(Exception ex) {\n+            ex.printStackTrace();\n+        }\n+    }\n+\n     private Consumer<List<JsonNode>> changeFeedProcessorHandler() {\n         return docs -> {\n             ChangeFeedProcessorTest.log.info(\"START processing from thread in test {}\", Thread.currentThread().getId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzODIwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r404238209", "bodyText": "don't catch InterruptedException if that's thrown, we can fail the test.", "author": "moderakh", "createdAt": "2020-04-06T16:47:01Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java", "diffHunk": "@@ -332,10 +315,136 @@ public void staledLeaseAcquiring() {\n         receivedDocuments.clear();\n     }\n \n+    @Test(groups = { \"simple\" }, timeOut = 50 * CHANGE_FEED_PROCESSOR_TIMEOUT)\n+    public void readFeedDocumentsAfterSplit() {\n+        createdFeedCollectionForSplit = createFeedCollection(FEED_COLLECTION_THROUGHPUT_FOR_SPLIT);\n+\n+        // generate a first batch of documents\n+        setupReadFeedDocuments(createdFeedCollectionForSplit, FEED_COUNT);\n+\n+        changeFeedProcessor = ChangeFeedProcessor.changeFeedProcessorBuilder()\n+            .hostName(hostName)\n+            .handleChanges(changeFeedProcessorHandler())\n+            .feedContainer(createdFeedCollectionForSplit)\n+            .leaseContainer(createdLeaseCollection)\n+            .options(new ChangeFeedProcessorOptions()\n+                .setLeasePrefix(\"TEST\")\n+                .setStartFromBeginning(true)\n+                .setMaxItemCount(10)\n+            )\n+            .build();\n+\n+        changeFeedProcessor.start().subscribeOn(Schedulers.elastic())\n+            .timeout(Duration.ofMillis(2 * CHANGE_FEED_PROCESSOR_TIMEOUT))\n+            .onErrorResume(throwable -> {\n+                log.error(\"Change feed processor did not start in the expected time\", throwable);\n+                return Mono.error(throwable);\n+            })\n+            .doOnSuccess(aVoid -> {\n+                // Wait for the feed processor to receive and process the first batch of documents.\n+                waitToReceiveDocuments(2 * CHANGE_FEED_PROCESSOR_TIMEOUT, FEED_COUNT);\n+            })\n+            .then(\n+                // increase throughput to force a single partition collection to go through a split\n+                createdFeedCollectionForSplit.readProvisionedThroughput().subscribeOn(Schedulers.elastic())\n+                    .flatMap(currentThroughput ->\n+                        createdFeedCollectionForSplit.replaceProvisionedThroughput(FEED_COLLECTION_THROUGHPUT).subscribeOn(Schedulers.elastic())\n+                    )\n+                .then()\n+            )\n+            .subscribe();\n+\n+        // Wait for the feed processor to receive and process the first batch of documents and apply throughput change.\n+        try {\n+            Thread.sleep(4 * CHANGE_FEED_PROCESSOR_TIMEOUT);\n+        } catch (InterruptedException e) {\n+            log.error(e.getMessage());", "originalCommit": "cfed2526a1a897ae11832382960b93f6130d8185", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2MzAyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r404263029", "bodyText": "We need to in this case, in order to avoid compilation errors...", "author": "milismsft", "createdAt": "2020-04-06T17:26:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzODIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NTE3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r404265179", "bodyText": "why can't we add exception to the test method signature?", "author": "moderakh", "createdAt": "2020-04-06T17:29:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzODIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3NjE2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r404276161", "bodyText": "replied on a similar comment below...", "author": "milismsft", "createdAt": "2020-04-06T17:47:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzODIwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ce2d3d238e26673d430d940d7e311b6d3789e6c", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\nindex b4432812ee5..ce9a7a902a9 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\n\n@@ -417,6 +427,46 @@ public class ChangeFeedProcessorTest extends TestSuiteBase {\n         receivedDocuments.clear();\n     }\n \n+    @Test(groups = { \"simple\" }, timeOut = CHANGE_FEED_PROCESSOR_TIMEOUT)\n+    public void testServiceItemLeaseSerialization() {\n+        ZonedDateTime timeNow = ZonedDateTime.now();\n+        String timeNowValue = timeNow.toString();\n+\n+        Lease lease1 = new ServiceItemLease()\n+            .withId(\"id1\")\n+            .withLeaseToken(\"1\")\n+            .withETag(\"etag1\")\n+            .withOwner(\"Owner1\")\n+            .withContinuationToken(\"12\")\n+            .withTimestamp(timeNow)\n+            .withTs(\"122311231\");\n+\n+        Lease lease2 = new ServiceItemLease()\n+            .withId(\"id2\")\n+            .withLeaseToken(\"2\")\n+            .withETag(\"etag2\")\n+            .withContinuationToken(\"22\")\n+            .withTimestamp(timeNow)\n+            .withTs(\"122311232\");\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        try {\n+            assertThat(mapper.writeValueAsString(lease1)).isEqualTo(\n+                String.format(\"%s%s%s\",\n+                    \"{\\\"id\\\":\\\"id1\\\",\\\"_etag\\\":\\\"etag1\\\",\\\"LeaseToken\\\":\\\"1\\\",\\\"ContinuationToken\\\":\\\"12\\\",\\\"timestamp\\\":\\\"\",\n+                    timeNowValue,\n+                    \"\\\",\\\"Owner\\\":\\\"Owner1\\\"}\"));\n+            assertThat(mapper.writeValueAsString(lease2)).isEqualTo(\n+                String.format(\"%s%s%s\",\n+                    \"{\\\"id\\\":\\\"id2\\\",\\\"_etag\\\":\\\"etag2\\\",\\\"LeaseToken\\\":\\\"2\\\",\\\"ContinuationToken\\\":\\\"22\\\",\\\"timestamp\\\":\\\"\",\n+                    timeNowValue,\n+                    \"\\\",\\\"Owner\\\":null}\"));\n+        } catch(Exception ex) {\n+            ex.printStackTrace();\n+        }\n+    }\n+\n     private Consumer<List<JsonNode>> changeFeedProcessorHandler() {\n         return docs -> {\n             ChangeFeedProcessorTest.log.info(\"START processing from thread in test {}\", Thread.currentThread().getId());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzODMwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r404238303", "bodyText": "don't catch InterruptedException if that's thrown, we can fail the test.", "author": "moderakh", "createdAt": "2020-04-06T16:47:09Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java", "diffHunk": "@@ -332,10 +315,136 @@ public void staledLeaseAcquiring() {\n         receivedDocuments.clear();\n     }\n \n+    @Test(groups = { \"simple\" }, timeOut = 50 * CHANGE_FEED_PROCESSOR_TIMEOUT)\n+    public void readFeedDocumentsAfterSplit() {\n+        createdFeedCollectionForSplit = createFeedCollection(FEED_COLLECTION_THROUGHPUT_FOR_SPLIT);\n+\n+        // generate a first batch of documents\n+        setupReadFeedDocuments(createdFeedCollectionForSplit, FEED_COUNT);\n+\n+        changeFeedProcessor = ChangeFeedProcessor.changeFeedProcessorBuilder()\n+            .hostName(hostName)\n+            .handleChanges(changeFeedProcessorHandler())\n+            .feedContainer(createdFeedCollectionForSplit)\n+            .leaseContainer(createdLeaseCollection)\n+            .options(new ChangeFeedProcessorOptions()\n+                .setLeasePrefix(\"TEST\")\n+                .setStartFromBeginning(true)\n+                .setMaxItemCount(10)\n+            )\n+            .build();\n+\n+        changeFeedProcessor.start().subscribeOn(Schedulers.elastic())\n+            .timeout(Duration.ofMillis(2 * CHANGE_FEED_PROCESSOR_TIMEOUT))\n+            .onErrorResume(throwable -> {\n+                log.error(\"Change feed processor did not start in the expected time\", throwable);\n+                return Mono.error(throwable);\n+            })\n+            .doOnSuccess(aVoid -> {\n+                // Wait for the feed processor to receive and process the first batch of documents.\n+                waitToReceiveDocuments(2 * CHANGE_FEED_PROCESSOR_TIMEOUT, FEED_COUNT);\n+            })\n+            .then(\n+                // increase throughput to force a single partition collection to go through a split\n+                createdFeedCollectionForSplit.readProvisionedThroughput().subscribeOn(Schedulers.elastic())\n+                    .flatMap(currentThroughput ->\n+                        createdFeedCollectionForSplit.replaceProvisionedThroughput(FEED_COLLECTION_THROUGHPUT).subscribeOn(Schedulers.elastic())\n+                    )\n+                .then()\n+            )\n+            .subscribe();\n+\n+        // Wait for the feed processor to receive and process the first batch of documents and apply throughput change.\n+        try {\n+            Thread.sleep(4 * CHANGE_FEED_PROCESSOR_TIMEOUT);\n+        } catch (InterruptedException e) {\n+            log.error(e.getMessage());\n+        }\n+\n+        // Loop through reading the current partition count until we get a split\n+        //   This can take up to two minute or more.\n+        String partitionKeyRangesPath = extractContainerSelfLink(createdFeedCollectionForSplit);\n+        FeedOptions feedOptions = new FeedOptions();\n+        feedOptions.setRequestContinuation(null);\n+\n+        AsyncDocumentClient contextClient = getContextClient(createdDatabase);\n+        Flux.just(1).subscribeOn(Schedulers.elastic())\n+            .flatMap( value -> {\n+                log.warn(\"Reading current hroughput change.\");\n+                return contextClient.readPartitionKeyRanges(partitionKeyRangesPath, feedOptions);\n+            })\n+            .map(partitionKeyRangeFeedResponse -> {\n+                int count = partitionKeyRangeFeedResponse.getResults().size();\n+\n+                if ( count < 2) {\n+                    log.warn(\"Throughput change is pending.\");\n+                    throw new RuntimeException(\"Throughput change is not done.\");\n+                }\n+                return count;\n+            })\n+            // this will timeout approximately after 3 minutes\n+            .retry(40, throwable -> {\n+                try {\n+                    log.warn(\"Retrying...\");\n+                    Thread.sleep(CHANGE_FEED_PROCESSOR_TIMEOUT);\n+                } catch (InterruptedException e) {", "originalCommit": "cfed2526a1a897ae11832382960b93f6130d8185", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzODU1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r404238555", "bodyText": "here and elsewhere please. we don't need to catch this, let it get thrown", "author": "moderakh", "createdAt": "2020-04-06T16:47:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzODMwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2MjE1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r404262154", "bodyText": "The try/catch is needed to avoid compilation errors such as: \"Error:(440, 29) java: unreported exception java.lang.InterruptedException; must be caught or declared to be thrown\"", "author": "milismsft", "createdAt": "2020-04-06T17:24:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzODMwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2NTcyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r404265724", "bodyText": "makes sense here.\nso please use this instead to translate checked to unchecked exception.\nhttps://projectreactor.io/docs/core/release/api/reactor/core/Exceptions.html#propagate-java.lang.Throwable-\nif InterruptedException we should error out.", "author": "moderakh", "createdAt": "2020-04-06T17:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzODMwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3NTkwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r404275903", "bodyText": "Good suggestion, but it goes way beyond what we need to address at this time which is to release a fix for the CFP ASAP.\nFeel free to open an issue and assign it to me to refactor these tests and remove the handling of the exception.", "author": "milismsft", "createdAt": "2020-04-06T17:46:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzODMwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4ODg4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r404288883", "bodyText": "@milismsft I have already signed off on v3, and I agree with you on v3 as this is hotfix for v3 it should go out as soon as possible.\nIMO, on v4 we should do the right thing (this is not in prod yet) rather than introducing technical debt.", "author": "moderakh", "createdAt": "2020-04-06T18:08:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzODMwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxOTI3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r404319275", "bodyText": "V4 latest release is currently used by couple customers a preview.", "author": "milismsft", "createdAt": "2020-04-06T19:00:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzODMwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyMDc2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r404320761", "bodyText": "I'll deal with the debt later; the changes you're requesting go beyond what this PR/work item should address. IMHO et's keep things simple enough in case we need to review this later and use a different PR to address  other things.", "author": "milismsft", "createdAt": "2020-04-06T19:02:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzODMwMw=="}], "type": "inlineReview", "revised_code": {"commit": "7ce2d3d238e26673d430d940d7e311b6d3789e6c", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\nindex b4432812ee5..ce9a7a902a9 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\n\n@@ -417,6 +427,46 @@ public class ChangeFeedProcessorTest extends TestSuiteBase {\n         receivedDocuments.clear();\n     }\n \n+    @Test(groups = { \"simple\" }, timeOut = CHANGE_FEED_PROCESSOR_TIMEOUT)\n+    public void testServiceItemLeaseSerialization() {\n+        ZonedDateTime timeNow = ZonedDateTime.now();\n+        String timeNowValue = timeNow.toString();\n+\n+        Lease lease1 = new ServiceItemLease()\n+            .withId(\"id1\")\n+            .withLeaseToken(\"1\")\n+            .withETag(\"etag1\")\n+            .withOwner(\"Owner1\")\n+            .withContinuationToken(\"12\")\n+            .withTimestamp(timeNow)\n+            .withTs(\"122311231\");\n+\n+        Lease lease2 = new ServiceItemLease()\n+            .withId(\"id2\")\n+            .withLeaseToken(\"2\")\n+            .withETag(\"etag2\")\n+            .withContinuationToken(\"22\")\n+            .withTimestamp(timeNow)\n+            .withTs(\"122311232\");\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        try {\n+            assertThat(mapper.writeValueAsString(lease1)).isEqualTo(\n+                String.format(\"%s%s%s\",\n+                    \"{\\\"id\\\":\\\"id1\\\",\\\"_etag\\\":\\\"etag1\\\",\\\"LeaseToken\\\":\\\"1\\\",\\\"ContinuationToken\\\":\\\"12\\\",\\\"timestamp\\\":\\\"\",\n+                    timeNowValue,\n+                    \"\\\",\\\"Owner\\\":\\\"Owner1\\\"}\"));\n+            assertThat(mapper.writeValueAsString(lease2)).isEqualTo(\n+                String.format(\"%s%s%s\",\n+                    \"{\\\"id\\\":\\\"id2\\\",\\\"_etag\\\":\\\"etag2\\\",\\\"LeaseToken\\\":\\\"2\\\",\\\"ContinuationToken\\\":\\\"22\\\",\\\"timestamp\\\":\\\"\",\n+                    timeNowValue,\n+                    \"\\\",\\\"Owner\\\":null}\"));\n+        } catch(Exception ex) {\n+            ex.printStackTrace();\n+        }\n+    }\n+\n     private Consumer<List<JsonNode>> changeFeedProcessorHandler() {\n         return docs -> {\n             ChangeFeedProcessorTest.log.info(\"START processing from thread in test {}\", Thread.currentThread().getId());\n"}}, {"oid": "9706a8344d13bfe2f86a8d2e23befde72e16e738", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9706a8344d13bfe2f86a8d2e23befde72e16e738", "message": "Adjust CFP tests timeouts.", "committedDate": "2020-04-06T17:16:25Z", "type": "commit"}, {"oid": "29eb83a7735a3a5d54f58d6b815eafe80dcf6a48", "url": "https://github.com/Azure/azure-sdk-for-java/commit/29eb83a7735a3a5d54f58d6b815eafe80dcf6a48", "message": "Implement its own Json serializer for the Lease class.", "committedDate": "2020-04-11T07:25:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0MDI1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r407940251", "bodyText": "Please add unit test scoped to serialization.", "author": "moderakh", "createdAt": "2020-04-14T08:00:02Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java", "diffHunk": "@@ -20,6 +22,7 @@\n /**\n  * Document service lease.\n  */\n+@JsonSerialize(using = ServiceItemLease.ServiceItemLeaseJsonSerializer.class)", "originalCommit": "29eb83a7735a3a5d54f58d6b815eafe80dcf6a48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0MzczNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r408243735", "bodyText": "Test added.", "author": "milismsft", "createdAt": "2020-04-14T15:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0MDI1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ce2d3d238e26673d430d940d7e311b6d3789e6c", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java\nindex 6109844e81e..03560133a78 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java\n\n@@ -17,16 +17,17 @@ import java.util.Date;\n import java.util.HashMap;\n import java.util.Map;\n \n-//import com.azure.cosmos.internal.changefeed.internal.Constants;\n-\n /**\n  * Document service lease.\n  */\n @JsonSerialize(using = ServiceItemLease.ServiceItemLeaseJsonSerializer.class)\n public class ServiceItemLease implements Lease {\n     private static final ZonedDateTime UNIX_START_TIME = ZonedDateTime.parse(\"1970-01-01T00:00:00.0Z[UTC]\");\n+    private static final String PROPERTY_NAME_LEASE_TOKEN = \"LeaseToken\";\n+    private static final String PROPERTY_NAME_CONTINUATION_TOKEN = \"ContinuationToken\";\n+    private static final String PROPERTY_NAME_TIMESTAMP = \"timestamp\";\n+    private static final String PROPERTY_NAME_OWNER = \"Owner\";\n \n-    // TODO: add JSON annotations and rename the item.\n     private String id;\n     private String _etag;\n     private String LeaseToken;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0Njg1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r407946859", "bodyText": "stale code. remove", "author": "moderakh", "createdAt": "2020-04-14T08:11:22Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java", "diffHunk": "@@ -181,34 +182,17 @@ public ServiceItemLease withTimestamp(ZonedDateTime timestamp) {\n         return this;\n     }\n \n-    @JsonIgnore\n+//    @JsonIgnore", "originalCommit": "29eb83a7735a3a5d54f58d6b815eafe80dcf6a48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0MzkzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r408243936", "bodyText": "removed", "author": "milismsft", "createdAt": "2020-04-14T15:48:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0Njg1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ce2d3d238e26673d430d940d7e311b6d3789e6c", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java\nindex 6109844e81e..03560133a78 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java\n\n@@ -182,12 +183,10 @@ public class ServiceItemLease implements Lease {\n         return this;\n     }\n \n-//    @JsonIgnore\n     public String getExplicitTimestamp() {\n         return this.timestamp;\n     }\n \n-//    @JsonIgnore\n     @Override\n     public String getConcurrencyToken() {\n         return this.getETag();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0NjkyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r407946928", "bodyText": "ditto", "author": "moderakh", "createdAt": "2020-04-14T08:11:28Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java", "diffHunk": "@@ -181,34 +182,17 @@ public ServiceItemLease withTimestamp(ZonedDateTime timestamp) {\n         return this;\n     }\n \n-    @JsonIgnore\n+//    @JsonIgnore\n     public String getExplicitTimestamp() {\n         return this.timestamp;\n     }\n \n-    @JsonIgnore\n+//    @JsonIgnore", "originalCommit": "29eb83a7735a3a5d54f58d6b815eafe80dcf6a48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0NDA1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r408244057", "bodyText": "removed", "author": "milismsft", "createdAt": "2020-04-14T15:49:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0NjkyOA=="}], "type": "inlineReview", "revised_code": {"commit": "7ce2d3d238e26673d430d940d7e311b6d3789e6c", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java\nindex 6109844e81e..03560133a78 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java\n\n@@ -182,12 +183,10 @@ public class ServiceItemLease implements Lease {\n         return this;\n     }\n \n-//    @JsonIgnore\n     public String getExplicitTimestamp() {\n         return this.timestamp;\n     }\n \n-//    @JsonIgnore\n     @Override\n     public String getConcurrencyToken() {\n         return this.getETag();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0ODc1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r407948753", "bodyText": "LeaseToken, ContinuationToken, Owner are Camel case, but timestamp, id, etag are not is that expected?\nalso for Owner, timestamp, ContinuationToken, LeaseToken we probably should define constants.", "author": "moderakh", "createdAt": "2020-04-14T08:14:25Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java", "diffHunk": "@@ -236,4 +235,32 @@ public String toString() {\n             this.getTimestamp(),\n             UNIX_START_TIME.plusSeconds(Long.parseLong(this.getTs())));\n     }\n+\n+    @SuppressWarnings(\"serial\")\n+    static final class ServiceItemLeaseJsonSerializer extends StdSerializer<ServiceItemLease> {\n+        // this value should be incremented if changes are made to the ServiceItemLease class members\n+        private static final long serialVersionUID = 1L;\n+\n+        protected ServiceItemLeaseJsonSerializer() { this(null); }\n+\n+        protected ServiceItemLeaseJsonSerializer(Class<ServiceItemLease> t) {\n+            super(t);\n+        }\n+\n+        @Override\n+        public void serialize(ServiceItemLease lease, JsonGenerator writer, SerializerProvider serializerProvider) {\n+            try {\n+                writer.writeStartObject();\n+                writer.writeStringField(Constants.Properties.ID, lease.getId());\n+                writer.writeStringField(Constants.Properties.E_TAG, lease.getETag());\n+                writer.writeStringField(\"LeaseToken\", lease.getLeaseToken());\n+                writer.writeStringField(\"ContinuationToken\", lease.getContinuationToken());\n+                writer.writeStringField(\"timestamp\", lease.getTimestamp());\n+                writer.writeStringField(\"Owner\", lease.getOwner());", "originalCommit": "29eb83a7735a3a5d54f58d6b815eafe80dcf6a48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwNTM0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r408205343", "bodyText": "The current naming convention follows .Net and the content of a lease document as written from that code. The idea behind this design is that you can have CFP instances resuming work from both platforms, Java and .NET.\nThe ServiceItemLease is internal only (not exposed to the user); for the easy of debugging keeping the same names for members and the content of the lease document as written in Cosmos is actually beneficial.", "author": "milismsft", "createdAt": "2020-04-14T14:58:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0ODc1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7ce2d3d238e26673d430d940d7e311b6d3789e6c", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java\nindex 6109844e81e..03560133a78 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java\n\n@@ -253,10 +252,10 @@ public class ServiceItemLease implements Lease {\n                 writer.writeStartObject();\n                 writer.writeStringField(Constants.Properties.ID, lease.getId());\n                 writer.writeStringField(Constants.Properties.E_TAG, lease.getETag());\n-                writer.writeStringField(\"LeaseToken\", lease.getLeaseToken());\n-                writer.writeStringField(\"ContinuationToken\", lease.getContinuationToken());\n-                writer.writeStringField(\"timestamp\", lease.getTimestamp());\n-                writer.writeStringField(\"Owner\", lease.getOwner());\n+                writer.writeStringField(PROPERTY_NAME_LEASE_TOKEN, lease.getLeaseToken());\n+                writer.writeStringField(PROPERTY_NAME_CONTINUATION_TOKEN, lease.getContinuationToken());\n+                writer.writeStringField(PROPERTY_NAME_TIMESTAMP, lease.getTimestamp());\n+                writer.writeStringField(PROPERTY_NAME_OWNER, lease.getOwner());\n                 writer.writeEndObject();\n             } catch (IOException e) {\n                 throw new IllegalStateException(e);\n"}}, {"oid": "7ce2d3d238e26673d430d940d7e311b6d3789e6c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7ce2d3d238e26673d430d940d7e311b6d3789e6c", "message": "Clean-up and add unit test for lease serialization.", "committedDate": "2020-04-14T15:46:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0MzI1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r408243253", "bodyText": "thank you for the test. as a code style rule we don't add \"test\" as prefix.\nPlease drop the \"test\" prefix to be consistent with other tests.", "author": "moderakh", "createdAt": "2020-04-14T15:48:03Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java", "diffHunk": "@@ -424,6 +427,46 @@ public void readFeedDocumentsAfterSplit() {\n         receivedDocuments.clear();\n     }\n \n+    @Test(groups = { \"simple\" }, timeOut = CHANGE_FEED_PROCESSOR_TIMEOUT)\n+    public void testServiceItemLeaseSerialization() {", "originalCommit": "7ce2d3d238e26673d430d940d7e311b6d3789e6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0NTkzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r408245938", "bodyText": "done", "author": "milismsft", "createdAt": "2020-04-14T15:51:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0MzI1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7952a341834a954266246d317f3b437f80ea1502", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\nindex ce9a7a902a9..062fcc6585e 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\n\n@@ -428,7 +428,7 @@ public class ChangeFeedProcessorTest extends TestSuiteBase {\n     }\n \n     @Test(groups = { \"simple\" }, timeOut = CHANGE_FEED_PROCESSOR_TIMEOUT)\n-    public void testServiceItemLeaseSerialization() {\n+    public void serviceItemLeaseSerialization() {\n         ZonedDateTime timeNow = ZonedDateTime.now();\n         String timeNowValue = timeNow.toString();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0MzkyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r408243920", "bodyText": "please drop the try/catch block here. if there is a failure the failure should get thrown and the exception needs to be added to the test method signature.", "author": "moderakh", "createdAt": "2020-04-14T15:48:54Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java", "diffHunk": "@@ -424,6 +427,46 @@ public void readFeedDocumentsAfterSplit() {\n         receivedDocuments.clear();\n     }\n \n+    @Test(groups = { \"simple\" }, timeOut = CHANGE_FEED_PROCESSOR_TIMEOUT)\n+    public void testServiceItemLeaseSerialization() {\n+        ZonedDateTime timeNow = ZonedDateTime.now();\n+        String timeNowValue = timeNow.toString();\n+\n+        Lease lease1 = new ServiceItemLease()\n+            .withId(\"id1\")\n+            .withLeaseToken(\"1\")\n+            .withETag(\"etag1\")\n+            .withOwner(\"Owner1\")\n+            .withContinuationToken(\"12\")\n+            .withTimestamp(timeNow)\n+            .withTs(\"122311231\");\n+\n+        Lease lease2 = new ServiceItemLease()\n+            .withId(\"id2\")\n+            .withLeaseToken(\"2\")\n+            .withETag(\"etag2\")\n+            .withContinuationToken(\"22\")\n+            .withTimestamp(timeNow)\n+            .withTs(\"122311232\");\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        try {\n+            assertThat(mapper.writeValueAsString(lease1)).isEqualTo(\n+                String.format(\"%s%s%s\",\n+                    \"{\\\"id\\\":\\\"id1\\\",\\\"_etag\\\":\\\"etag1\\\",\\\"LeaseToken\\\":\\\"1\\\",\\\"ContinuationToken\\\":\\\"12\\\",\\\"timestamp\\\":\\\"\",\n+                    timeNowValue,\n+                    \"\\\",\\\"Owner\\\":\\\"Owner1\\\"}\"));\n+            assertThat(mapper.writeValueAsString(lease2)).isEqualTo(\n+                String.format(\"%s%s%s\",\n+                    \"{\\\"id\\\":\\\"id2\\\",\\\"_etag\\\":\\\"etag2\\\",\\\"LeaseToken\\\":\\\"2\\\",\\\"ContinuationToken\\\":\\\"22\\\",\\\"timestamp\\\":\\\"\",\n+                    timeNowValue,\n+                    \"\\\",\\\"Owner\\\":null}\"));\n+        } catch(Exception ex) {", "originalCommit": "7ce2d3d238e26673d430d940d7e311b6d3789e6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0ODY2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r408248669", "bodyText": "done", "author": "milismsft", "createdAt": "2020-04-14T15:55:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0MzkyMA=="}], "type": "inlineReview", "revised_code": {"commit": "7952a341834a954266246d317f3b437f80ea1502", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\nindex ce9a7a902a9..062fcc6585e 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\n\n@@ -428,7 +428,7 @@ public class ChangeFeedProcessorTest extends TestSuiteBase {\n     }\n \n     @Test(groups = { \"simple\" }, timeOut = CHANGE_FEED_PROCESSOR_TIMEOUT)\n-    public void testServiceItemLeaseSerialization() {\n+    public void serviceItemLeaseSerialization() {\n         ZonedDateTime timeNow = ZonedDateTime.now();\n         String timeNowValue = timeNow.toString();\n \n"}}, {"oid": "7952a341834a954266246d317f3b437f80ea1502", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7952a341834a954266246d317f3b437f80ea1502", "message": "minor change to rename test", "committedDate": "2020-04-14T15:51:04Z", "type": "commit"}, {"oid": "cb9a8f6dab209235b8b2641bccc086d1b7effd57", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cb9a8f6dab209235b8b2641bccc086d1b7effd57", "message": "update test signature and remove try/catch", "committedDate": "2020-04-14T15:54:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1MjQ2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r408252469", "bodyText": "we should add a deserializer as well. Document/CosmosItemProperties can use the custom deserializer.\nYou can take a look at PartitionKeyInternal.java as example.", "author": "moderakh", "createdAt": "2020-04-14T16:00:25Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/ServiceItemLease.java", "diffHunk": "@@ -236,4 +234,32 @@ public String toString() {\n             this.getTimestamp(),\n             UNIX_START_TIME.plusSeconds(Long.parseLong(this.getTs())));\n     }\n+\n+    @SuppressWarnings(\"serial\")\n+    static final class ServiceItemLeaseJsonSerializer extends StdSerializer<ServiceItemLease> {", "originalCommit": "cb9a8f6dab209235b8b2641bccc086d1b7effd57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1OTkwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r408259906", "bodyText": "Won't fix.", "author": "milismsft", "createdAt": "2020-04-14T16:10:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1MjQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MTQ0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r408261440", "bodyText": "Won't fix.\n\nwhy?", "author": "moderakh", "createdAt": "2020-04-14T16:13:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1MjQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2Nzc0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r408267744", "bodyText": "already explained \"why\"; you're asking to add dead code because there's no direct Json deserialization that is needed for ServiceItemLease at this time. The \"deserialization\" is done via fromDocument() method call.", "author": "milismsft", "createdAt": "2020-04-14T16:22:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1MjQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3MDQwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r408270401", "bodyText": "the explanation on fromDocument() makes sense. so that acts as the deserializer, that's what needed. thanks.", "author": "moderakh", "createdAt": "2020-04-14T16:25:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1MjQ2OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NTQ4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r408255489", "bodyText": "\"simple\" test group is only invoked as integration test in the presence of a cosmosdb endpoint.\nas this is unit test, not integration test, the group needs to be \"unit\".  (groups = { \"unit\" })\nalso the unit tests should go in a separate class, e.g.,  please move the test to  the new class ServiceItemLeaseTest.java", "author": "moderakh", "createdAt": "2020-04-14T16:04:32Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java", "diffHunk": "@@ -332,10 +325,172 @@ public void staledLeaseAcquiring() {\n         receivedDocuments.clear();\n     }\n \n+    @Test(groups = { \"simple\" }, timeOut = 50 * CHANGE_FEED_PROCESSOR_TIMEOUT)\n+    public void readFeedDocumentsAfterSplit() {\n+        createdFeedCollectionForSplit = createFeedCollection(FEED_COLLECTION_THROUGHPUT_FOR_SPLIT);\n+\n+        // generate a first batch of documents\n+        setupReadFeedDocuments(createdFeedCollectionForSplit, FEED_COUNT);\n+\n+        changeFeedProcessor = ChangeFeedProcessor.changeFeedProcessorBuilder()\n+            .hostName(hostName)\n+            .handleChanges(changeFeedProcessorHandler())\n+            .feedContainer(createdFeedCollectionForSplit)\n+            .leaseContainer(createdLeaseCollection)\n+            .options(new ChangeFeedProcessorOptions()\n+                .setLeasePrefix(\"TEST\")\n+                .setStartFromBeginning(true)\n+                .setMaxItemCount(10)\n+            )\n+            .build();\n+\n+        changeFeedProcessor.start().subscribeOn(Schedulers.elastic())\n+            .timeout(Duration.ofMillis(2 * CHANGE_FEED_PROCESSOR_TIMEOUT))\n+            .onErrorResume(throwable -> {\n+                log.error(\"Change feed processor did not start in the expected time\", throwable);\n+                return Mono.error(throwable);\n+            })\n+            .doOnSuccess(aVoid -> {\n+                // Wait for the feed processor to receive and process the first batch of documents.\n+                waitToReceiveDocuments(2 * CHANGE_FEED_PROCESSOR_TIMEOUT, FEED_COUNT);\n+            })\n+            .then(\n+                // increase throughput to force a single partition collection to go through a split\n+                createdFeedCollectionForSplit.readProvisionedThroughput().subscribeOn(Schedulers.elastic())\n+                    .flatMap(currentThroughput ->\n+                        createdFeedCollectionForSplit.replaceProvisionedThroughput(FEED_COLLECTION_THROUGHPUT).subscribeOn(Schedulers.elastic())\n+                    )\n+                .then()\n+            )\n+            .subscribe();\n+\n+        // Wait for the feed processor to receive and process the first batch of documents and apply throughput change.\n+        try {\n+            Thread.sleep(4 * CHANGE_FEED_PROCESSOR_TIMEOUT);\n+        } catch (InterruptedException e) {\n+            log.error(e.getMessage());\n+        }\n+\n+        // Loop through reading the current partition count until we get a split\n+        //   This can take up to two minute or more.\n+        String partitionKeyRangesPath = extractContainerSelfLink(createdFeedCollectionForSplit);\n+        FeedOptions feedOptions = new FeedOptions();\n+        feedOptions.setRequestContinuation(null);\n+\n+        AsyncDocumentClient contextClient = getContextClient(createdDatabase);\n+        Flux.just(1).subscribeOn(Schedulers.elastic())\n+            .flatMap( value -> {\n+                log.warn(\"Reading current hroughput change.\");\n+                return contextClient.readPartitionKeyRanges(partitionKeyRangesPath, feedOptions);\n+            })\n+            .map(partitionKeyRangeFeedResponse -> {\n+                int count = partitionKeyRangeFeedResponse.getResults().size();\n+\n+                if ( count < 2) {\n+                    log.warn(\"Throughput change is pending.\");\n+                    throw new RuntimeException(\"Throughput change is not done.\");\n+                }\n+                return count;\n+            })\n+            // this will timeout approximately after 3 minutes\n+            .retry(40, throwable -> {\n+                try {\n+                    log.warn(\"Retrying...\");\n+                    Thread.sleep(CHANGE_FEED_PROCESSOR_TIMEOUT);\n+                } catch (InterruptedException e) {\n+                    log.error(e.getMessage());\n+                }\n+                return true;\n+            })\n+            .last().block();\n+\n+        assertThat(changeFeedProcessor.isStarted()).as(\"Change Feed Processor instance is running\").isTrue();\n+\n+        // generate the second batch of documents\n+        createReadFeedDocuments(createdFeedCollectionForSplit, FEED_COUNT);\n+\n+        // Wait for the feed processor to receive and process the second batch of documents.\n+        waitToReceiveDocuments(2 * CHANGE_FEED_PROCESSOR_TIMEOUT, FEED_COUNT * 2);\n+\n+        changeFeedProcessor.stop().subscribeOn(Schedulers.elastic()).timeout(Duration.ofMillis(CHANGE_FEED_PROCESSOR_TIMEOUT)).subscribe();\n+\n+        for (CosmosItemProperties item : createdDocuments) {\n+            assertThat(receivedDocuments.containsKey(item.getId())).as(\"Document with getId: \" + item.getId()).isTrue();\n+        }\n+\n+        // Wait for the feed processor to shutdown.\n+        try {\n+            Thread.sleep(CHANGE_FEED_PROCESSOR_TIMEOUT);\n+        } catch (InterruptedException e) {\n+            log.error(e.getMessage());\n+        }\n+        receivedDocuments.clear();\n+    }\n+\n+    @Test(groups = { \"simple\" }, timeOut = CHANGE_FEED_PROCESSOR_TIMEOUT)", "originalCommit": "cb9a8f6dab209235b8b2641bccc086d1b7effd57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2OTE0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r408269144", "bodyText": "Won't fix.", "author": "milismsft", "createdAt": "2020-04-14T16:24:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NTQ4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3MDkwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r408270905", "bodyText": "Won't fix.\n\nwhy?", "author": "moderakh", "createdAt": "2020-04-14T16:26:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NTQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d60f1e96aa6a7f19df6a0be9d9ed81cc696e0f4f", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\nindex 959d1c96afe..21cae232ffd 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\n\n@@ -427,42 +425,6 @@ public class ChangeFeedProcessorTest extends TestSuiteBase {\n         receivedDocuments.clear();\n     }\n \n-    @Test(groups = { \"simple\" }, timeOut = CHANGE_FEED_PROCESSOR_TIMEOUT)\n-    public void serviceItemLeaseSerialization() throws JsonProcessingException {\n-        ZonedDateTime timeNow = ZonedDateTime.now();\n-        String timeNowValue = timeNow.toString();\n-\n-        Lease lease1 = new ServiceItemLease()\n-            .withId(\"id1\")\n-            .withLeaseToken(\"1\")\n-            .withETag(\"etag1\")\n-            .withOwner(\"Owner1\")\n-            .withContinuationToken(\"12\")\n-            .withTimestamp(timeNow)\n-            .withTs(\"122311231\");\n-\n-        Lease lease2 = new ServiceItemLease()\n-            .withId(\"id2\")\n-            .withLeaseToken(\"2\")\n-            .withETag(\"etag2\")\n-            .withContinuationToken(\"22\")\n-            .withTimestamp(timeNow)\n-            .withTs(\"122311232\");\n-\n-        ObjectMapper mapper = new ObjectMapper();\n-\n-        assertThat(mapper.writeValueAsString(lease1)).isEqualTo(\n-            String.format(\"%s%s%s\",\n-                \"{\\\"id\\\":\\\"id1\\\",\\\"_etag\\\":\\\"etag1\\\",\\\"LeaseToken\\\":\\\"1\\\",\\\"ContinuationToken\\\":\\\"12\\\",\\\"timestamp\\\":\\\"\",\n-                timeNowValue,\n-                \"\\\",\\\"Owner\\\":\\\"Owner1\\\"}\"));\n-        assertThat(mapper.writeValueAsString(lease2)).isEqualTo(\n-            String.format(\"%s%s%s\",\n-                \"{\\\"id\\\":\\\"id2\\\",\\\"_etag\\\":\\\"etag2\\\",\\\"LeaseToken\\\":\\\"2\\\",\\\"ContinuationToken\\\":\\\"22\\\",\\\"timestamp\\\":\\\"\",\n-                timeNowValue,\n-                \"\\\",\\\"Owner\\\":null}\"));\n-    }\n-\n     private Consumer<List<JsonNode>> changeFeedProcessorHandler() {\n         return docs -> {\n             ChangeFeedProcessorTest.log.info(\"START processing from thread in test {}\", Thread.currentThread().getId());\n"}}, {"oid": "d60f1e96aa6a7f19df6a0be9d9ed81cc696e0f4f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d60f1e96aa6a7f19df6a0be9d9ed81cc696e0f4f", "message": "test refactoring...", "committedDate": "2020-04-14T16:36:57Z", "type": "commit"}, {"oid": "0f749df84d510947a31b17605b720086132e26c1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0f749df84d510947a31b17605b720086132e26c1", "message": "test refactoring; each test will use it's own instance of the received document map.", "committedDate": "2020-04-14T21:34:37Z", "type": "commit"}, {"oid": "269b21236e39ab80242214e518b3ee397fdf1ef1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/269b21236e39ab80242214e518b3ee397fdf1ef1", "message": "Refactoring to create test related resources within each test.\nRemove try/catch on InterruptedExceptions calls.", "committedDate": "2020-04-16T00:38:30Z", "type": "commit"}, {"oid": "a0ff8d96b32f5d37031899c6c6534c08b4a00744", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a0ff8d96b32f5d37031899c6c6534c08b4a00744", "message": "Merge branch 'master' into milismsft-v4-cfp-fixSplit", "committedDate": "2020-04-16T04:10:08Z", "type": "commit"}, {"oid": "935a1c3958070d375115593d391bf7f0c0fd6d36", "url": "https://github.com/Azure/azure-sdk-for-java/commit/935a1c3958070d375115593d391bf7f0c0fd6d36", "message": "fix merge related conflict.", "committedDate": "2020-04-16T04:19:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NTk3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r409275970", "bodyText": "I suspect you have client leak in your test class. this might cause CI test issues later.\nthe afterClass is annotated as part of emulator test group. But your partition split test is in a different test group, i.e., simple test group. Due to that the afterClass may not get invoked for the partition split test.\nOur test pattern is to not mix different test groups in the same class for simplicity.\nDifferent test group go to different test classes, otherwise you need to be very cautious in the cleaning logic.", "author": "moderakh", "createdAt": "2020-04-16T04:34:23Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java", "diffHunk": "@@ -360,27 +493,18 @@ public void before_ChangeFeedProcessorTest() {\n //            log.warn(\"Database delete\", e);\n //        }\n //        createdDatabase = createDatabase(client, databaseId);\n-        createdDatabase = getSharedCosmosDatabase(client);\n     }\n \n     @AfterMethod(groups = { \"emulator\" }, timeOut = 3 * SHUTDOWN_TIMEOUT, alwaysRun = true)\n     public void afterMethod() {\n-        safeDeleteCollection(createdFeedCollection);\n-        safeDeleteCollection(createdLeaseCollection);\n-\n-        // Allow some time for the collections and the database to be deleted before exiting.\n-        try {\n-            Thread.sleep(500);\n-        } catch (Exception e){ }\n     }\n \n     @AfterClass(groups = { \"emulator\" }, timeOut = 2 * SHUTDOWN_TIMEOUT, alwaysRun = true)\n     public void afterClass() {", "originalCommit": "935a1c3958070d375115593d391bf7f0c0fd6d36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3ODUyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r409278527", "bodyText": "@kushagraThapar FYI", "author": "moderakh", "createdAt": "2020-04-16T04:44:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NTk3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4Mzg0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9858#discussion_r409783843", "bodyText": "Fixed", "author": "milismsft", "createdAt": "2020-04-16T19:03:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NTk3MA=="}], "type": "inlineReview", "revised_code": {"commit": "05eb07af7264c3bd29fde71956a1da7e649c2633", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\nindex c563474ca82..a68cdefeb62 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\n\n@@ -495,11 +495,11 @@ public class ChangeFeedProcessorTest extends TestSuiteBase {\n //        createdDatabase = createDatabase(client, databaseId);\n     }\n \n-    @AfterMethod(groups = { \"emulator\" }, timeOut = 3 * SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    @AfterMethod(groups = { \"emulator\", \"simple\" }, timeOut = 3 * SHUTDOWN_TIMEOUT, alwaysRun = true)\n     public void afterMethod() {\n     }\n \n-    @AfterClass(groups = { \"emulator\" }, timeOut = 2 * SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    @AfterClass(groups = { \"emulator\", \"simple\" }, timeOut = 2 * SHUTDOWN_TIMEOUT, alwaysRun = true)\n     public void afterClass() {\n //        try {\n //            client.readAllDatabases()\n"}}, {"oid": "05eb07af7264c3bd29fde71956a1da7e649c2633", "url": "https://github.com/Azure/azure-sdk-for-java/commit/05eb07af7264c3bd29fde71956a1da7e649c2633", "message": "Add missing group for before and after related test methods", "committedDate": "2020-04-16T19:03:00Z", "type": "commit"}]}