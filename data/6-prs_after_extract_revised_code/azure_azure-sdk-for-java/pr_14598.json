{"pr_number": 14598, "pr_title": "[Service Bus] Misc API changes from API review", "pr_createdAt": "2020-08-28T23:50:30Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14598", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI1MDAwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480250009", "bodyText": "nit: Do not need space This line would align with line below.", "author": "hemanttanwar", "createdAt": "2020-08-31T16:37:23Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -286,8 +287,8 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public Mono<Long> schedule(ServiceBusMessage message, Instant scheduledEnqueueTime, int maxLinkSize,\n-        String associatedLinkName, ServiceBusTransactionContext transactionContext) {\n+    public Mono<Long> schedule(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime, int maxLinkSize,\n+                               String associatedLinkName, ServiceBusTransactionContext transactionContext) {", "originalCommit": "afb24fa522ff4be9bac79d83ed6d4677d0e749e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5MTQwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480391404", "bodyText": "Updated", "author": "YijunXieMS", "createdAt": "2020-08-31T20:50:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI1MDAwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "fe7cf2a0443f1fb881a2386d7ce881d429879e1a", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\nindex a3d00d8a9e7..2c611bed435 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n\n@@ -288,7 +288,7 @@ public class ManagementChannel implements ServiceBusManagementNode {\n      */\n     @Override\n     public Mono<Long> schedule(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime, int maxLinkSize,\n-                               String associatedLinkName, ServiceBusTransactionContext transactionContext) {\n+       String associatedLinkName, ServiceBusTransactionContext transactionContext) {\n         message.setScheduledEnqueueTime(scheduledEnqueueTime);\n \n         return isAuthorized(OPERATION_SCHEDULE_MESSAGE).then(createChannel.flatMap(channel -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI1MzE2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480253166", "bodyText": "via-queue  -> via-topic", "author": "hemanttanwar", "createdAt": "2020-08-31T16:43:20Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientIntegrationTest.java", "diffHunk": "@@ -205,7 +206,82 @@ void viaMessageSendTest() {\n             })\n             .verifyComplete();\n \n-        // Verify, intermediate-via queue has is delivered to intermediate Entity.\n+        // Verify, intermediate-via queue has it delivered to intermediate Entity.\n+        StepVerifier.create(intermediateReceiver.receiveMessages().take(total).timeout(shortTimeout))\n+            .assertNext(receivedMessage -> {\n+                assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+                messagesPending.decrementAndGet();\n+            })\n+            .verifyComplete();\n+    }\n+\n+    /**\n+     * Verifies that we can send message to final destination using via-queue.\n+     */", "originalCommit": "afb24fa522ff4be9bac79d83ed6d4677d0e749e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5MTUyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480391523", "bodyText": "good catch! updated", "author": "YijunXieMS", "createdAt": "2020-08-31T20:50:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI1MzE2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d9737de0def900a7ef52ff43c9e517ce3e6567d9", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientIntegrationTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientIntegrationTest.java\nindex b18dc85324b..59d1f33236b 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientIntegrationTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientIntegrationTest.java\n\n@@ -206,82 +205,7 @@ class ServiceBusSenderAsyncClientIntegrationTest extends IntegrationTestBase {\n             })\n             .verifyComplete();\n \n-        // Verify, intermediate-via queue has it delivered to intermediate Entity.\n-        StepVerifier.create(intermediateReceiver.receiveMessages().take(total).timeout(shortTimeout))\n-            .assertNext(receivedMessage -> {\n-                assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                messagesPending.decrementAndGet();\n-            })\n-            .verifyComplete();\n-    }\n-\n-    /**\n-     * Verifies that we can send message to final destination using via-queue.\n-     */\n-    @Test\n-    void viaTopicMessageSendTest() {\n-        // Arrange\n-        final Duration shortTimeout = Duration.ofSeconds(15);\n-        final int viaIntermediateEntity = TestUtils.USE_CASE_SEND_VIA_TOPIC_1;\n-        final int destinationEntity = TestUtils.USE_CASE_SEND_VIA_TOPIC_2;\n-        final boolean shareConnection = true;\n-        final MessagingEntityType entityType = MessagingEntityType.SUBSCRIPTION;\n-        final boolean isSessionEnabled =  false;\n-        final String messageId = UUID.randomUUID().toString();\n-        final int total = 1;\n-        final int totalToDestination = 2;\n-        final List<ServiceBusMessage> messages = TestUtils.getServiceBusMessages(total, messageId, CONTENTS_BYTES);\n-        final String viaTopicName = getTopicName(viaIntermediateEntity);\n-\n-\n-        setSenderAndReceiver(entityType, viaIntermediateEntity, false, false, shareConnection);\n-        final ServiceBusReceiverAsyncClient intermediateReceiver =  receiver;\n-        final ServiceBusSenderAsyncClient intermediateSender = sender;\n-\n-        final ServiceBusSenderAsyncClient destination1ViaSender = getSenderBuilder(false, entityType,\n-            destinationEntity, false, shareConnection)\n-            .viaTopicName(viaTopicName)\n-            .buildAsyncClient();\n-\n-        final ServiceBusReceiverAsyncClient destination1Receiver = getReceiverBuilder(false, entityType, destinationEntity, Function.identity(), shareConnection)\n-            .receiveMode(ReceiveMode.RECEIVE_AND_DELETE)\n-            .buildAsyncClient();\n-\n-        final AtomicReference<ServiceBusTransactionContext> transaction = new AtomicReference<>();\n-\n-        // Act\n-        StepVerifier.create(destination1ViaSender.createTransaction())\n-            .assertNext(transactionContext -> {\n-                transaction.set(transactionContext);\n-                assertNotNull(transaction);\n-            })\n-            .verifyComplete();\n-        assertNotNull(transaction.get());\n-\n-        StepVerifier.create(intermediateSender.sendMessages(messages, transaction.get()))\n-            .verifyComplete();\n-        StepVerifier.create(destination1ViaSender.sendMessages(messages, transaction.get()))\n-            .verifyComplete();\n-        StepVerifier.create(destination1ViaSender.sendMessages(messages, transaction.get()))\n-            .verifyComplete();\n-\n-        StepVerifier.create(destination1ViaSender.commitTransaction(transaction.get()).delaySubscription(Duration.ofSeconds(1)))\n-            .verifyComplete();\n-\n-        // Assert\n-        // Verify message is received by final destination Entity\n-        StepVerifier.create(destination1Receiver.receiveMessages().take(totalToDestination).timeout(shortTimeout))\n-            .assertNext(receivedMessage -> {\n-                assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                messagesPending.decrementAndGet();\n-            })\n-            .assertNext(receivedMessage -> {\n-                assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                messagesPending.decrementAndGet();\n-            })\n-            .verifyComplete();\n-\n-        // Verify, intermediate-via topic has it delivered to intermediate Entity.\n+        // Verify, intermediate-via queue has is delivered to intermediate Entity.\n         StepVerifier.create(intermediateReceiver.receiveMessages().take(total).timeout(shortTimeout))\n             .assertNext(receivedMessage -> {\n                 assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI1ODQ3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480258472", "bodyText": "Same as above: space  not needed.", "author": "hemanttanwar", "createdAt": "2020-08-31T16:53:05Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementNode.java", "diffHunk": "@@ -93,14 +94,14 @@\n      * the message.\n      *\n      * @param message The message to be sent to the entity.\n-     * @param scheduledEnqueueTime The {@link Instant} at which the message should be enqueued in the entity.\n+     * @param scheduledEnqueueTime The {@link OffsetDateTime} at which the message should be enqueued in the entity.\n      * @param transactionContext to be set on message before sending to Service Bus.\n      *\n      * @return The sequence number representing the pending send, which returns the sequence number of the scheduled\n      *     message. This sequence number can be used to cancel the scheduling of the message.\n      */\n-    Mono<Long> schedule(ServiceBusMessage message, Instant scheduledEnqueueTime, int maxSendLinkSize,\n-        String associatedLinkName, ServiceBusTransactionContext transactionContext);\n+    Mono<Long> schedule(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime, int maxSendLinkSize,\n+                        String associatedLinkName, ServiceBusTransactionContext transactionContext);", "originalCommit": "afb24fa522ff4be9bac79d83ed6d4677d0e749e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5MTU1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480391559", "bodyText": "updated", "author": "YijunXieMS", "createdAt": "2020-08-31T20:50:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI1ODQ3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "fe7cf2a0443f1fb881a2386d7ce881d429879e1a", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementNode.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementNode.java\nindex 539fbf5860c..2e9013600bd 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementNode.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementNode.java\n\n@@ -101,7 +101,7 @@ public interface ServiceBusManagementNode extends AutoCloseable {\n      *     message. This sequence number can be used to cancel the scheduling of the message.\n      */\n     Mono<Long> schedule(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime, int maxSendLinkSize,\n-                        String associatedLinkName, ServiceBusTransactionContext transactionContext);\n+        String associatedLinkName, ServiceBusTransactionContext transactionContext);\n \n     /**\n      * Updates the session state.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2MTA2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480261067", "bodyText": "May be we can add one more validation that \"By adding 'viaTopicNamedid not change thetopicName.  You can use client.getEntityPath()`  to validate that.", "author": "hemanttanwar", "createdAt": "2020-08-31T16:56:12Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusClientBuilderTest.java", "diffHunk": "@@ -75,6 +89,22 @@ void queueClientWithViaQueueName() {\n         assertNotNull(client);\n     }\n \n+    @Test\n+    void topicClientWithViaTopicName() {\n+        // Arrange\n+        final ServiceBusSenderClientBuilder builder = new ServiceBusClientBuilder()\n+            .connectionString(NAMESPACE_CONNECTION_STRING)\n+            .sender()\n+            .topicName(TOPIC_NAME)\n+            .viaTopicName(TOPIC_NAME);\n+\n+        // Act\n+        final ServiceBusSenderAsyncClient client = builder.buildAsyncClient();\n+\n+        // Assert\n+        assertNotNull(client);", "originalCommit": "afb24fa522ff4be9bac79d83ed6d4677d0e749e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5MTc4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480391782", "bodyText": "Added assertion", "author": "YijunXieMS", "createdAt": "2020-08-31T20:51:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2MTA2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "d9737de0def900a7ef52ff43c9e517ce3e6567d9", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusClientBuilderTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusClientBuilderTest.java\nindex 12be5e06ac8..996a668fd84 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusClientBuilderTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusClientBuilderTest.java\n\n@@ -61,48 +64,51 @@ class ServiceBusClientBuilderTest {\n     }\n \n     @Test\n-    void viaTopicNameWithQueueNotAllowed() {\n+    void queueClientWithViaQueueName() {\n         // Arrange\n-        ServiceBusSenderClientBuilder builder = new ServiceBusClientBuilder()\n+        final ServiceBusSenderClientBuilder builder = new ServiceBusClientBuilder()\n             .connectionString(NAMESPACE_CONNECTION_STRING)\n             .sender()\n             .queueName(QUEUE_NAME)\n-            .viaTopicName(VIA_TOPIC_NAME);\n+            .viaQueueName(VIA_QUEUE_NAME);\n \n-        // Act & Assert\n-        assertThrows(IllegalStateException.class, () -> builder.buildAsyncClient());\n+        // Act\n+        final ServiceBusSenderAsyncClient client = builder.buildAsyncClient();\n+\n+        // Assert\n+        assertNotNull(client);\n     }\n \n     @Test\n-    void queueClientWithViaQueueName() {\n+    void deadLetterqueueClient() {\n         // Arrange\n-        final ServiceBusSenderClientBuilder builder = new ServiceBusClientBuilder()\n+        final ServiceBusReceiverClientBuilder builder = new ServiceBusClientBuilder()\n             .connectionString(NAMESPACE_CONNECTION_STRING)\n-            .sender()\n+            .receiver()\n             .queueName(QUEUE_NAME)\n-            .viaQueueName(VIA_QUEUE_NAME);\n+            .subQueue(SubQueue.DEAD_LETTER_QUEUE);\n \n         // Act\n-        final ServiceBusSenderAsyncClient client = builder.buildAsyncClient();\n+        final ServiceBusReceiverAsyncClient client = builder.buildAsyncClient();\n \n         // Assert\n-        assertNotNull(client);\n+        assertTrue(client.getEntityPath().endsWith(DEAD_LETTER_QUEUE_NAME_SUFFIX));\n     }\n \n     @Test\n-    void topicClientWithViaTopicName() {\n+    void transferDeadLetterqueueClient() {\n         // Arrange\n-        final ServiceBusSenderClientBuilder builder = new ServiceBusClientBuilder()\n+        final ServiceBusReceiverClientBuilder builder = new ServiceBusClientBuilder()\n             .connectionString(NAMESPACE_CONNECTION_STRING)\n-            .sender()\n-            .topicName(TOPIC_NAME)\n-            .viaTopicName(TOPIC_NAME);\n+            .receiver()\n+            .queueName(QUEUE_NAME)\n+            .subQueue(SubQueue.TRANSFER_DEAD_LETTER_QUEUE);\n \n         // Act\n-        final ServiceBusSenderAsyncClient client = builder.buildAsyncClient();\n+        final ServiceBusReceiverAsyncClient client = builder.buildAsyncClient();\n \n         // Assert\n-        assertNotNull(client);\n+        assertTrue(client.getEntityPath().endsWith(TRANSFER_DEAD_LETTER_QUEUE_NAME_SUFFIX));\n     }\n \n     @Test\n"}}, {"oid": "d9737de0def900a7ef52ff43c9e517ce3e6567d9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d9737de0def900a7ef52ff43c9e517ce3e6567d9", "message": "Instant -> OffsetDateTime", "committedDate": "2020-08-31T21:13:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMTcxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480401715", "bodyText": "What happens if both viaQueueName and viaTopicName are set.", "author": "conniey", "createdAt": "2020-08-31T21:11:57Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -530,9 +544,13 @@ public ServiceBusSenderAsyncClient buildAsyncClient() {\n             if (!CoreUtils.isNullOrEmpty(viaQueueName) && entityType == MessagingEntityType.SUBSCRIPTION) {\n                 throw logger.logExceptionAsError(new IllegalStateException(String.format(\n                     \"(%s), Via queue feature work only with a queue.\", viaQueueName)));\n+            } else if (!CoreUtils.isNullOrEmpty(viaTopicName) && entityType == MessagingEntityType.QUEUE) {\n+                throw logger.logExceptionAsError(new IllegalStateException(String.format(\n+                    \"(%s), Via topic feature work only with a topic.\", viaTopicName)));\n             }", "originalCommit": "f6da02438b53653bb4f40922d3a3cafb0fcf5d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzNTE5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480435196", "bodyText": "validateEntityPaths rules out that both topicName and queueName are provided.\nIf both viaQueueName and viaTopicName are set, one of the above two validations will throw an error.", "author": "YijunXieMS", "createdAt": "2020-08-31T22:29:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMTcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d9737de0def900a7ef52ff43c9e517ce3e6567d9", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\nindex 3ee8677a1aa..a97ef33132c 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\n\n@@ -544,13 +536,9 @@ public final class ServiceBusClientBuilder {\n             if (!CoreUtils.isNullOrEmpty(viaQueueName) && entityType == MessagingEntityType.SUBSCRIPTION) {\n                 throw logger.logExceptionAsError(new IllegalStateException(String.format(\n                     \"(%s), Via queue feature work only with a queue.\", viaQueueName)));\n-            } else if (!CoreUtils.isNullOrEmpty(viaTopicName) && entityType == MessagingEntityType.QUEUE) {\n-                throw logger.logExceptionAsError(new IllegalStateException(String.format(\n-                    \"(%s), Via topic feature work only with a topic.\", viaTopicName)));\n             }\n \n             final String entityName;\n-            final String viaEntityName = !CoreUtils.isNullOrEmpty(viaQueueName) ? viaQueueName : viaTopicName;\n             switch (entityType) {\n                 case QUEUE:\n                     entityName = queueName;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMjc0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480402748", "bodyText": "This looks very similar to the instant one, can you just do another transformation rather than duplicating this logic.", "author": "conniey", "createdAt": "2020-08-31T21:14:05Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java", "diffHunk": "@@ -219,8 +223,25 @@ public int getSize(Message amqpMessage) {\n         return Collections.emptyList();\n     }\n \n-    private List<Instant> deserializeListOfInstant(Message amqpMessage) {\n+    private List<OffsetDateTime> deserializeListOfOffsetDateTime(Message amqpMessage) {\n+        if (amqpMessage.getBody() instanceof AmqpValue) {\n+            AmqpValue amqpValue = ((AmqpValue) amqpMessage.getBody());\n+            if (amqpValue.getValue() instanceof  Map) {", "originalCommit": "f6da02438b53653bb4f40922d3a3cafb0fcf5d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMzQ4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480403484", "bodyText": "In addition, can you flatten this logic? The multiple nested ifs loops are hard to read.\nFor example:\nif (!(amqpMessage.getBody() instanceof AmqpValue)) {\n    return Collections.emptyList();\n}\n\nfinal AmqpValue amqpValue = ((AmqpValue) amqpMessage.getBody());\nif (!(amqpValue.getValue() instanceof Map)) {\n    return Collections.emptyList();\n}\n\n... stuff.", "author": "conniey", "createdAt": "2020-08-31T21:15:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMjc0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyNDM2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r481324366", "bodyText": "Created a new issue to refactor all Instant related stuffs. #14691", "author": "YijunXieMS", "createdAt": "2020-09-01T17:48:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMjc0OA=="}], "type": "inlineReview", "revised_code": {"commit": "b11e0cb16e2494219e6275025197e4a485aba366", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java\nindex 9e06ac82c67..1f4877dbf56 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusMessageSerializer.java\n\n@@ -223,25 +220,8 @@ class ServiceBusMessageSerializer implements MessageSerializer {\n         return Collections.emptyList();\n     }\n \n-    private List<OffsetDateTime> deserializeListOfOffsetDateTime(Message amqpMessage) {\n-        if (amqpMessage.getBody() instanceof AmqpValue) {\n-            AmqpValue amqpValue = ((AmqpValue) amqpMessage.getBody());\n-            if (amqpValue.getValue() instanceof  Map) {\n-                @SuppressWarnings(\"unchecked\")\n-                Map<String, Object> responseBody = (Map<String, Object>) amqpValue.getValue();\n-                Object expirationListObj = responseBody.get(ManagementConstants.EXPIRATIONS);\n+    private List<OffsetDateTime> deserializeListOfInstant(Message amqpMessage) {\n \n-                if (expirationListObj instanceof Date[]) {\n-                    return Arrays.stream((Date[]) expirationListObj)\n-                        .map(date -> date.toInstant().atOffset(ZoneOffset.UTC))\n-                        .collect(Collectors.toList());\n-                }\n-            }\n-        }\n-        return Collections.emptyList();\n-    }\n-\n-    private List<Instant> deserializeListOfInstant(Message amqpMessage) {\n         if (amqpMessage.getBody() instanceof AmqpValue) {\n             AmqpValue amqpValue = ((AmqpValue) amqpMessage.getBody());\n             if (amqpValue.getValue() instanceof  Map) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDEzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480404136", "bodyText": "Is this logic correct? I don't remember making such large transformations like this.", "author": "conniey", "createdAt": "2020-08-31T21:17:03Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1085,7 +1089,8 @@ public LockRenewalOperation getAutoRenewSessionLock(String sessionId, Duration m\n             .flatMap(connection -> connection.getManagementNode(entityPath, entityType))\n             .flatMap(serviceBusManagementNode ->\n                 serviceBusManagementNode.renewMessageLock(lockToken, getLinkName(null)))\n-            .map(instant -> managementNodeLocks.addOrUpdate(lockToken, instant, instant));\n+            .map(instant -> managementNodeLocks.addOrUpdate(lockToken, instant,\n+                instant.atOffset(ZoneOffset.UTC)).atOffset(ZoneOffset.UTC));", "originalCommit": "f6da02438b53653bb4f40922d3a3cafb0fcf5d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNTM5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480405390", "bodyText": "You can change the LockContainer to take OffsetDateTime so you don't have to do all these method invocations.", "author": "conniey", "createdAt": "2020-08-31T21:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDEzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyNTkwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r481325902", "bodyText": "I think it's correct. It's just conversion back and forth.\nWill refactor it with issue #14691", "author": "YijunXieMS", "createdAt": "2020-09-01T17:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDEzNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDc0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r480404747", "bodyText": "I thought we made managementNode.renewSessionLock return OffsetDateTime. You had changed one operation in there.", "author": "conniey", "createdAt": "2020-08-31T21:18:35Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/UnnamedSessionManager.java", "diffHunk": "@@ -160,18 +161,18 @@ String getLinkName(String sessionId) {\n      * @return The next expiration time for the session lock.\n      * @throws IllegalStateException if the receiver is a non-session receiver.\n      */\n-    Mono<Instant> renewSessionLock(String sessionId) {\n+    Mono<OffsetDateTime> renewSessionLock(String sessionId) {\n         return validateParameter(sessionId, \"sessionId\", \"renewSessionLock\").then(\n             getManagementNode().flatMap(channel -> {\n                 final UnnamedSessionReceiver receiver = sessionReceivers.get(sessionId);\n                 final String associatedLinkName = receiver != null ? receiver.getLinkName() : null;\n \n                 return channel.renewSessionLock(sessionId, associatedLinkName).handle((instant, sink) -> {\n                     if (receiver != null) {\n-                        receiver.setSessionLockedUntil(instant);\n+                        receiver.setSessionLockedUntil(instant.atOffset(ZoneOffset.UTC));", "originalCommit": "f6da02438b53653bb4f40922d3a3cafb0fcf5d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyNTczNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14598#discussion_r481325734", "bodyText": "Will refactor it with issue #14691", "author": "YijunXieMS", "createdAt": "2020-09-01T17:50:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNDc0Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "b11e0cb16e2494219e6275025197e4a485aba366", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b11e0cb16e2494219e6275025197e4a485aba366", "message": "Remove ServiceBusReceiverClientBuilder.maxAutoLockRenewalDuration", "committedDate": "2020-08-31T21:33:17Z", "type": "commit"}, {"oid": "7eb5119b0f777972bb84b0f15e09f9cb30f40af3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7eb5119b0f777972bb84b0f15e09f9cb30f40af3", "message": "Add viaTopicName", "committedDate": "2020-08-31T21:35:41Z", "type": "commit"}, {"oid": "818af29d7e3a2835b1f0694b8279444f13313754", "url": "https://github.com/Azure/azure-sdk-for-java/commit/818af29d7e3a2835b1f0694b8279444f13313754", "message": "Change from RuntimeInfo -> RuntimeProperties\nRemove ScheduledMessageCount from the SubscriptionRuntimeProperties.\nAdd ScheduledMessageCount to the TopicRuntimeProperties", "committedDate": "2020-08-31T21:35:43Z", "type": "commit"}, {"oid": "1b6f79d27119938459cd5a7db4851868a72427cd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1b6f79d27119938459cd5a7db4851868a72427cd", "message": "Update recorded file name to Properties", "committedDate": "2020-08-31T21:35:43Z", "type": "commit"}, {"oid": "af73f7342a72e20d02829956d4961449dd6bb9cf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/af73f7342a72e20d02829956d4961449dd6bb9cf", "message": "Small fixes", "committedDate": "2020-08-31T21:35:43Z", "type": "commit"}, {"oid": "41bfa46ebd1b2b57f2ba4b0e470ad66ac6f54d67", "url": "https://github.com/Azure/azure-sdk-for-java/commit/41bfa46ebd1b2b57f2ba4b0e470ad66ac6f54d67", "message": "add send via topic", "committedDate": "2020-08-31T21:35:43Z", "type": "commit"}, {"oid": "69b93ed6983d257fe4129dffb3b8695b87b996e8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/69b93ed6983d257fe4129dffb3b8695b87b996e8", "message": "Add back serialize Instant", "committedDate": "2020-08-31T21:35:44Z", "type": "commit"}, {"oid": "fe7cf2a0443f1fb881a2386d7ce881d429879e1a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fe7cf2a0443f1fb881a2386d7ce881d429879e1a", "message": "Small fixes", "committedDate": "2020-08-31T21:37:01Z", "type": "commit"}, {"oid": "11af79bef7571ee9d43b952e5875d0f678ee11f2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/11af79bef7571ee9d43b952e5875d0f678ee11f2", "message": "Fix recorded file", "committedDate": "2020-08-31T21:37:02Z", "type": "commit"}, {"oid": "11af79bef7571ee9d43b952e5875d0f678ee11f2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/11af79bef7571ee9d43b952e5875d0f678ee11f2", "message": "Fix recorded file", "committedDate": "2020-08-31T21:37:02Z", "type": "forcePushed"}, {"oid": "8a73687900824ec1aac273ad071deb049af1c246", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8a73687900824ec1aac273ad071deb049af1c246", "message": "Fix checkstyle", "committedDate": "2020-08-31T22:12:03Z", "type": "commit"}, {"oid": "8ba5135a25478ba96f8bf84f04d4f8966bc32609", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8ba5135a25478ba96f8bf84f04d4f8966bc32609", "message": "Fix live test error", "committedDate": "2020-09-01T00:08:35Z", "type": "commit"}, {"oid": "2ff6ab5efb0b474ac674a26a8335af80f40b957c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2ff6ab5efb0b474ac674a26a8335af80f40b957c", "message": "Merge branch 'master' into 14137", "committedDate": "2020-09-01T00:24:23Z", "type": "commit"}, {"oid": "6c882750be9c4606b9a85874256dfcf5655848f1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6c882750be9c4606b9a85874256dfcf5655848f1", "message": "Fix checkstyle error", "committedDate": "2020-09-01T00:49:07Z", "type": "commit"}, {"oid": "71bc9a4342e5ec62ebe62e13a8d6e68f15abee37", "url": "https://github.com/Azure/azure-sdk-for-java/commit/71bc9a4342e5ec62ebe62e13a8d6e68f15abee37", "message": "Update change log", "committedDate": "2020-09-01T04:36:37Z", "type": "commit"}]}