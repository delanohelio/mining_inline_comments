{"pr_number": 9844, "pr_title": "Servicebus track2 change LockToken from UUID to string ", "pr_createdAt": "2020-04-03T06:32:50Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/9844", "timeline": [{"oid": "7b600f23151dd2f3e224eefce86367ea65c1eb6e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b600f23151dd2f3e224eefce86367ea65c1eb6e", "message": "Initial design option for Locktoken as String", "committedDate": "2020-04-03T05:46:15Z", "type": "commit"}, {"oid": "3e09382ff748b0e1c1312e21200ae64eaab174f2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3e09382ff748b0e1c1312e21200ae64eaab174f2", "message": "Updated test with string for uuid", "committedDate": "2020-04-03T06:29:36Z", "type": "commit"}, {"oid": "747532725a17a006de62cb3fb116d2c24d581757", "url": "https://github.com/Azure/azure-sdk-for-java/commit/747532725a17a006de62cb3fb116d2c24d581757", "message": "changing docs", "committedDate": "2020-04-03T15:41:46Z", "type": "commit"}, {"oid": "8204b99a0985ede2dc39aa18dc5d368d47d4a4ff", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8204b99a0985ede2dc39aa18dc5d368d47d4a4ff", "message": "changing docs", "committedDate": "2020-04-03T15:43:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NTY1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403095651", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return {@link String} representation of {@link UUID}, which represents the lock-token.\n          \n          \n            \n            @return Lock token for the message.", "author": "conniey", "createdAt": "2020-04-03T15:41:46Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/MessageLockToken.java", "diffHunk": "@@ -5,26 +5,28 @@\n \n import java.util.UUID;\n \n+import com.azure.messaging.servicebus.models.ReceiveMode;\n /**\n- * Type representing the lock-token.\n+ * Type representing the lock-token. The lock token is a reference to the lock that is being held by the Service Bus in\n+ * {@link ReceiveMode#PEEK_LOCK} mode.\n  */\n public interface MessageLockToken {\n \n     /**\n      * Gets the lock token.\n      *\n-     * @return {@link UUID} representing the lock-token.\n+     * @return {@link String} representation of {@link UUID}, which represents the lock-token.", "originalCommit": "3e09382ff748b0e1c1312e21200ae64eaab174f2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8204b99a0985ede2dc39aa18dc5d368d47d4a4ff", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/MessageLockToken.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/MessageLockToken.java\nindex 9df7efaaae3..850a9b6573e 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/MessageLockToken.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/MessageLockToken.java\n\n@@ -15,14 +15,14 @@ public interface MessageLockToken {\n     /**\n      * Gets the lock token.\n      *\n-     * @return {@link String} representation of {@link UUID}, which represents the lock-token.\n+     * @return {@link String} which represents the lock-token.\n      */\n     String getLockToken();\n \n     /**\n-     * Created the {@link MessageLockToken} given a {@link String} representation of {@link UUID}.\n+     * Created the {@link MessageLockToken} given a {@link String}.\n      *\n-     * @param uuid {@link String} representation of {@link UUID} for creating {@link MessageLockToken} instance;\n+     * @param uuid {@link String} for creating {@link MessageLockToken} instance;\n      *\n      * @return The created {@link MessageLockToken} object.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NjY3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403096676", "bodyText": "The fact that it is a UUID is an implementation detail. External customers wouldn't care; they want to know that if they pass this string into our functions, it'll do the operation for that message. Remove it from the comments.", "author": "conniey", "createdAt": "2020-04-03T15:43:23Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/MessageLockToken.java", "diffHunk": "@@ -5,26 +5,28 @@\n \n import java.util.UUID;\n \n+import com.azure.messaging.servicebus.models.ReceiveMode;\n /**\n- * Type representing the lock-token.\n+ * Type representing the lock-token. The lock token is a reference to the lock that is being held by the Service Bus in\n+ * {@link ReceiveMode#PEEK_LOCK} mode.\n  */\n public interface MessageLockToken {\n \n     /**\n      * Gets the lock token.\n      *", "originalCommit": "3e09382ff748b0e1c1312e21200ae64eaab174f2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8204b99a0985ede2dc39aa18dc5d368d47d4a4ff", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/MessageLockToken.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/MessageLockToken.java\nindex 9df7efaaae3..850a9b6573e 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/MessageLockToken.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/MessageLockToken.java\n\n@@ -15,14 +15,14 @@ public interface MessageLockToken {\n     /**\n      * Gets the lock token.\n      *\n-     * @return {@link String} representation of {@link UUID}, which represents the lock-token.\n+     * @return {@link String} which represents the lock-token.\n      */\n     String getLockToken();\n \n     /**\n-     * Created the {@link MessageLockToken} given a {@link String} representation of {@link UUID}.\n+     * Created the {@link MessageLockToken} given a {@link String}.\n      *\n-     * @param uuid {@link String} representation of {@link UUID} for creating {@link MessageLockToken} instance;\n+     * @param uuid {@link String} for creating {@link MessageLockToken} instance;\n      *\n      * @return The created {@link MessageLockToken} object.\n      */\n"}}, {"oid": "54e5b43f90a6905678a3a0d00d4f08182a6dda73", "url": "https://github.com/Azure/azure-sdk-for-java/commit/54e5b43f90a6905678a3a0d00d4f08182a6dda73", "message": "test change for complete", "committedDate": "2020-04-03T21:14:29Z", "type": "commit"}, {"oid": "5be089a6ba9a6c8ae474cf721601e98705de13f0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5be089a6ba9a6c8ae474cf721601e98705de13f0", "message": "test change for complete", "committedDate": "2020-04-03T21:19:37Z", "type": "commit"}, {"oid": "688f927332afb876e945e816bc3cdddb03e71f23", "url": "https://github.com/Azure/azure-sdk-for-java/commit/688f927332afb876e945e816bc3cdddb03e71f23", "message": "added property", "committedDate": "2020-04-03T21:24:27Z", "type": "commit"}, {"oid": "7a8cfb24ed5739a161337dd7a41d27a457587798", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7a8cfb24ed5739a161337dd7a41d27a457587798", "message": "added check", "committedDate": "2020-04-03T21:27:37Z", "type": "commit"}, {"oid": "f8f7955f481266baa0d6da634f330ca904a17dce", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f8f7955f481266baa0d6da634f330ca904a17dce", "message": "added check", "committedDate": "2020-04-03T21:29:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0ODg5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403348899", "bodyText": "Return type shows it's a string. \"The lock token of this message\" is enough.", "author": "conniey", "createdAt": "2020-04-03T21:37:52Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java", "diffHunk": "@@ -172,14 +172,14 @@ public String getLabel() {\n      * href=\"https://docs.microsoft.com/azure/service-bus-messaging/message-deferral\">Deferral API</a> and, with that,\n      * take the message out of the regular delivery state flow. This property is read-only.\n      *\n-     * @return lock token of this message.\n+     * @return {@link String} representing the lock-token for this message.", "originalCommit": "f8f7955f481266baa0d6da634f330ca904a17dce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d28aeb874b13b01cf11e49c0b06c60a0f70b7cbf", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java\nindex 706016bcde4..4e00a8a8b0b 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceivedMessage.java\n\n@@ -172,7 +172,7 @@ public final class ServiceBusReceivedMessage implements MessageLockToken {\n      * href=\"https://docs.microsoft.com/azure/service-bus-messaging/message-deferral\">Deferral API</a> and, with that,\n      * take the message out of the regular delivery state flow. This property is read-only.\n      *\n-     * @return {@link String} representing the lock-token for this message.\n+     * @return Lock-token for this message.\n      *\n      * @see <a href=\"https://docs.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement\">Message\n      * transfers, locks, and settlement</a>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0OTI5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403349299", "bodyText": "Null or empty is two checks. NullPointer for when getLockToken() == null and if it is empty, illegal argument exception.", "author": "conniey", "createdAt": "2020-04-03T21:39:03Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -436,12 +438,22 @@ public String getEntityPath() {\n                 String.format(INVALID_OPERATION_DISPOSED_RECEIVER, \"renewMessageLock\")));\n         } else if (Objects.isNull(lockToken)) {\n             return monoError(logger, new NullPointerException(\"'receivedMessage' cannot be null.\"));\n+        } else if (CoreUtils.isNullOrEmpty(lockToken.getLockToken())) {", "originalCommit": "f8f7955f481266baa0d6da634f330ca904a17dce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d28aeb874b13b01cf11e49c0b06c60a0f70b7cbf", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex 269f88021ef..e0dee13f415 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -430,7 +429,7 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n      * @throws NullPointerException if {@code lockToken} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n-     * @throws IllegalArgumentException if {@link MessageLockToken#getLockToken()} returns a null lock token.\n+     * @throws IllegalArgumentException if {@link MessageLockToken#getLockToken()} returns an empty value.\n      */\n     public Mono<Instant> renewMessageLock(MessageLockToken lockToken) {\n         if (isDisposed.get()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0OTU2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403349560", "bodyText": "shouldn't we propagate the same error back? It is an illegalargument exception because it couldn't be converted to a UUID. It's not dependent on the state of this receiver.", "author": "conniey", "createdAt": "2020-04-03T21:39:47Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -436,12 +438,22 @@ public String getEntityPath() {\n                 String.format(INVALID_OPERATION_DISPOSED_RECEIVER, \"renewMessageLock\")));\n         } else if (Objects.isNull(lockToken)) {\n             return monoError(logger, new NullPointerException(\"'receivedMessage' cannot be null.\"));\n+        } else if (CoreUtils.isNullOrEmpty(lockToken.getLockToken())) {\n+            return monoError(logger, new NullPointerException(\"'receivedMessage.lockToken' cannot be null.\"));\n+        }\n+\n+        UUID lockTokenUUID;\n+        try {\n+            lockTokenUUID = UUID.fromString(lockToken.getLockToken());\n+        } catch (IllegalArgumentException ex) {\n+            return monoError(logger, new IllegalStateException(", "originalCommit": "f8f7955f481266baa0d6da634f330ca904a17dce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d28aeb874b13b01cf11e49c0b06c60a0f70b7cbf", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex 269f88021ef..e0dee13f415 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -430,7 +429,7 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n      * @throws NullPointerException if {@code lockToken} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n-     * @throws IllegalArgumentException if {@link MessageLockToken#getLockToken()} returns a null lock token.\n+     * @throws IllegalArgumentException if {@link MessageLockToken#getLockToken()} returns an empty value.\n      */\n     public Mono<Instant> renewMessageLock(MessageLockToken lockToken) {\n         if (isDisposed.get()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0OTY2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403349664", "bodyText": "Same. null and empty are two different checks.", "author": "conniey", "createdAt": "2020-04-03T21:40:06Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -501,15 +513,16 @@ public void close() {\n             return monoError(logger, new NullPointerException(\"'message' cannot be null.\"));\n         }\n \n-        final UUID lockToken = message.getLockToken();\n+\n         if (receiveMode != ReceiveMode.PEEK_LOCK) {\n             return Mono.error(logger.logExceptionAsError(new UnsupportedOperationException(String.format(\n                 \"'%s' is not supported on a receiver opened in ReceiveMode.RECEIVE_AND_DELETE.\", dispositionStatus))));\n-        } else if (lockToken == null) {\n+        } else if (CoreUtils.isNullOrEmpty(message.getLockToken())) {\n             return Mono.error(logger.logExceptionAsError(new IllegalArgumentException(\n-                \"'message.getLockToken()' cannot be null.\")));\n+                \"'message.lockToken' cannot be null.\")));", "originalCommit": "f8f7955f481266baa0d6da634f330ca904a17dce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d28aeb874b13b01cf11e49c0b06c60a0f70b7cbf", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex 269f88021ef..e0dee13f415 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -510,7 +510,11 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n             return monoError(logger, new IllegalStateException(\n                 String.format(INVALID_OPERATION_DISPOSED_RECEIVER, dispositionStatus.getValue())));\n         } else if (Objects.isNull(message)) {\n-            return monoError(logger, new NullPointerException(\"'message' cannot be null.\"));\n+            return monoError(logger, new NullPointerException(\"'receivedMessage' cannot be null.\"));\n+        } else if (Objects.isNull(message.getLockToken())) {\n+            return monoError(logger, new NullPointerException(\"'receivedMessage.lockToken' cannot be null.\"));\n+        } else if (message.getLockToken().isEmpty()) {\n+            return monoError(logger, new IllegalArgumentException(\"'message.lockToken' cannot be empty.\"));\n         }\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0OTg0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403349847", "bodyText": "Remove these debug statements and dofinally.", "author": "conniey", "createdAt": "2020-04-03T21:40:36Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java", "diffHunk": "@@ -45,18 +45,22 @@ public static void main(String[] args) {\n             .buildAsyncClient();\n \n         Disposable subscription = receiverAsyncClient.receive()\n-            .map(message -> {\n+            .flatMap(message -> {\n                 boolean messageProcessed =  false;\n                 // Process the message here.\n                 // Change the `messageProcessed` according to you business logic and if you are able to process the\n                 // message successfully.\n \n                 if (messageProcessed) {\n-                    System.out.println(\"Completing message ...\");\n-                    return receiverAsyncClient.complete(message).then();\n+                    return receiverAsyncClient.complete(message)\n+                        .doFinally(signalType -> {\n+                            System.out.println(\"Message completed.\");", "originalCommit": "f8f7955f481266baa0d6da634f330ca904a17dce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d28aeb874b13b01cf11e49c0b06c60a0f70b7cbf", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java\nindex 111b8b054d9..b12b1bcb03d 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java\n\n@@ -52,15 +52,9 @@ public class ReceiveMessageAndSettleAsyncSample {\n                 // message successfully.\n \n                 if (messageProcessed) {\n-                    return receiverAsyncClient.complete(message)\n-                        .doFinally(signalType -> {\n-                            System.out.println(\"Message completed.\");\n-                        }).then();\n+                    return receiverAsyncClient.complete(message).then();\n                 } else {\n-                    return receiverAsyncClient.abandon(message)\n-                        .doFinally(signalType -> {\n-                            System.out.println(\"Message Abandoned.\");\n-                        }).then();\n+                    return receiverAsyncClient.abandon(message).then();\n                 }\n             }).subscribe();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0OTkyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403349929", "bodyText": "why flatmap?", "author": "conniey", "createdAt": "2020-04-03T21:40:51Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java", "diffHunk": "@@ -45,18 +45,22 @@ public static void main(String[] args) {\n             .buildAsyncClient();\n \n         Disposable subscription = receiverAsyncClient.receive()\n-            .map(message -> {\n+            .flatMap(message -> {", "originalCommit": "f8f7955f481266baa0d6da634f330ca904a17dce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MDEzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403370135", "bodyText": "Because of the map  will not propagated subscribe to internal Mono.  Thus internal .complete() call was not getting invoked.", "author": "hemanttanwar", "createdAt": "2020-04-03T22:41:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0OTkyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "d28aeb874b13b01cf11e49c0b06c60a0f70b7cbf", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java\nindex 111b8b054d9..b12b1bcb03d 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java\n\n@@ -52,15 +52,9 @@ public class ReceiveMessageAndSettleAsyncSample {\n                 // message successfully.\n \n                 if (messageProcessed) {\n-                    return receiverAsyncClient.complete(message)\n-                        .doFinally(signalType -> {\n-                            System.out.println(\"Message completed.\");\n-                        }).then();\n+                    return receiverAsyncClient.complete(message).then();\n                 } else {\n-                    return receiverAsyncClient.abandon(message)\n-                        .doFinally(signalType -> {\n-                            System.out.println(\"Message Abandoned.\");\n-                        }).then();\n+                    return receiverAsyncClient.abandon(message).then();\n                 }\n             }).subscribe();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1MDA5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403350099", "bodyText": "fromString is a better fit. When you're doing this conversion, I'd check that this is a valid UUID and if not, throw an exception.", "author": "conniey", "createdAt": "2020-04-03T21:41:24Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/MessageLockToken.java", "diffHunk": "@@ -3,28 +3,28 @@\n \n package com.azure.messaging.servicebus;\n \n-import java.util.UUID;\n-\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n /**\n- * Type representing the lock-token.\n+ * Type representing the lock-token. The lock token is a reference to the lock that is being held by the Service Bus in\n+ * {@link ReceiveMode#PEEK_LOCK} mode.\n  */\n public interface MessageLockToken {\n \n     /**\n      * Gets the lock token.\n      *\n-     * @return {@link UUID} representing the lock-token.\n+     * @return Lock token for the message.\n      */\n-    UUID getLockToken();\n+    String getLockToken();\n \n     /**\n-     * Created the {@link MessageLockToken} given a {@link UUID}.\n+     * Created the {@link MessageLockToken} given a {@link String}.\n      *\n-     * @param uuid to use for creating {@link MessageLockToken} instance;\n+     * @param token {@link String} for creating {@link MessageLockToken} instance;\n      *\n      * @return The created {@link MessageLockToken} object.\n      */\n-    static MessageLockToken fromUuid(UUID uuid) {\n-        return () -> uuid;\n+    static MessageLockToken fromToken(String token) {", "originalCommit": "f8f7955f481266baa0d6da634f330ca904a17dce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d28aeb874b13b01cf11e49c0b06c60a0f70b7cbf", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/MessageLockToken.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/MessageLockToken.java\nindex ea3aa320e0a..ada4c195963 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/MessageLockToken.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/MessageLockToken.java\n\n@@ -4,6 +4,12 @@\n package com.azure.messaging.servicebus;\n \n import com.azure.messaging.servicebus.models.ReceiveMode;\n+\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.messaging.servicebus.implementation.Messages.INVALID_LOCK_TOKEN_STRING;\n+\n /**\n  * Type representing the lock-token. The lock token is a reference to the lock that is being held by the Service Bus in\n  * {@link ReceiveMode#PEEK_LOCK} mode.\n"}}, {"oid": "d28aeb874b13b01cf11e49c0b06c60a0f70b7cbf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d28aeb874b13b01cf11e49c0b06c60a0f70b7cbf", "message": "review comments and added checks", "committedDate": "2020-04-03T22:47:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3NzIyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403377225", "bodyText": "You'll get a warning to use logger.logErrorAsException then throw.", "author": "conniey", "createdAt": "2020-04-03T23:06:54Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -428,20 +429,31 @@ public String getEntityPath() {\n      * @throws NullPointerException if {@code lockToken} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n-     * @throws IllegalArgumentException if {@link MessageLockToken#getLockToken()} returns a null lock token.\n+     * @throws IllegalArgumentException if {@link MessageLockToken#getLockToken()} returns an empty value.\n      */\n     public Mono<Instant> renewMessageLock(MessageLockToken lockToken) {\n         if (isDisposed.get()) {\n             return monoError(logger, new IllegalStateException(\n                 String.format(INVALID_OPERATION_DISPOSED_RECEIVER, \"renewMessageLock\")));\n         } else if (Objects.isNull(lockToken)) {\n             return monoError(logger, new NullPointerException(\"'receivedMessage' cannot be null.\"));\n+        } else if (Objects.isNull(lockToken.getLockToken())) {\n+            return monoError(logger, new NullPointerException(\"'receivedMessage.lockToken' cannot be null.\"));\n+        } else if (lockToken.getLockToken().isEmpty()) {\n+            return monoError(logger, new IllegalArgumentException(\"'message.lockToken' cannot be empty.\"));\n+        }\n+\n+        UUID lockTokenUUID;\n+        try {\n+            lockTokenUUID = UUID.fromString(lockToken.getLockToken());\n+        } catch (IllegalArgumentException ex) {\n+            throw ex;", "originalCommit": "d28aeb874b13b01cf11e49c0b06c60a0f70b7cbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6089f992c0d86c5a66070a609634eea1f6423cb3", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex e0dee13f415..5b2169b15c3 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -443,17 +443,18 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n             return monoError(logger, new IllegalArgumentException(\"'message.lockToken' cannot be empty.\"));\n         }\n \n-        UUID lockTokenUUID;\n+        UUID lockTokenUuid = null;\n         try {\n-            lockTokenUUID = UUID.fromString(lockToken.getLockToken());\n+            lockTokenUuid = UUID.fromString(lockToken.getLockToken());\n         } catch (IllegalArgumentException ex) {\n-            throw ex;\n+            monoError(logger, ex);\n         }\n \n+        UUID finalLockTokenUuid = lockTokenUuid;\n         return connectionProcessor\n             .flatMap(connection -> connection.getManagementNode(entityPath, entityType))\n             .flatMap(serviceBusManagementNode ->\n-                serviceBusManagementNode.renewMessageLock(lockTokenUUID))\n+                serviceBusManagementNode.renewMessageLock(finalLockTokenUuid))\n             .map(instant -> {\n                 if (lockToken instanceof ServiceBusReceivedMessage) {\n                     ((ServiceBusReceivedMessage) lockToken).setLockedUntil(instant);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3NzI4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9844#discussion_r403377280", "bodyText": "lockTokenUUID -> lockTokenUuid", "author": "conniey", "createdAt": "2020-04-03T23:07:11Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -428,20 +429,31 @@ public String getEntityPath() {\n      * @throws NullPointerException if {@code lockToken} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n-     * @throws IllegalArgumentException if {@link MessageLockToken#getLockToken()} returns a null lock token.\n+     * @throws IllegalArgumentException if {@link MessageLockToken#getLockToken()} returns an empty value.\n      */\n     public Mono<Instant> renewMessageLock(MessageLockToken lockToken) {\n         if (isDisposed.get()) {\n             return monoError(logger, new IllegalStateException(\n                 String.format(INVALID_OPERATION_DISPOSED_RECEIVER, \"renewMessageLock\")));\n         } else if (Objects.isNull(lockToken)) {\n             return monoError(logger, new NullPointerException(\"'receivedMessage' cannot be null.\"));\n+        } else if (Objects.isNull(lockToken.getLockToken())) {\n+            return monoError(logger, new NullPointerException(\"'receivedMessage.lockToken' cannot be null.\"));\n+        } else if (lockToken.getLockToken().isEmpty()) {\n+            return monoError(logger, new IllegalArgumentException(\"'message.lockToken' cannot be empty.\"));\n+        }\n+\n+        UUID lockTokenUUID;\n+        try {\n+            lockTokenUUID = UUID.fromString(lockToken.getLockToken());\n+        } catch (IllegalArgumentException ex) {\n+            throw ex;\n         }\n \n         return connectionProcessor\n             .flatMap(connection -> connection.getManagementNode(entityPath, entityType))\n             .flatMap(serviceBusManagementNode ->\n-                serviceBusManagementNode.renewMessageLock(lockToken.getLockToken()))\n+                serviceBusManagementNode.renewMessageLock(lockTokenUUID))", "originalCommit": "d28aeb874b13b01cf11e49c0b06c60a0f70b7cbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6089f992c0d86c5a66070a609634eea1f6423cb3", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex e0dee13f415..5b2169b15c3 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -443,17 +443,18 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n             return monoError(logger, new IllegalArgumentException(\"'message.lockToken' cannot be empty.\"));\n         }\n \n-        UUID lockTokenUUID;\n+        UUID lockTokenUuid = null;\n         try {\n-            lockTokenUUID = UUID.fromString(lockToken.getLockToken());\n+            lockTokenUuid = UUID.fromString(lockToken.getLockToken());\n         } catch (IllegalArgumentException ex) {\n-            throw ex;\n+            monoError(logger, ex);\n         }\n \n+        UUID finalLockTokenUuid = lockTokenUuid;\n         return connectionProcessor\n             .flatMap(connection -> connection.getManagementNode(entityPath, entityType))\n             .flatMap(serviceBusManagementNode ->\n-                serviceBusManagementNode.renewMessageLock(lockTokenUUID))\n+                serviceBusManagementNode.renewMessageLock(finalLockTokenUuid))\n             .map(instant -> {\n                 if (lockToken instanceof ServiceBusReceivedMessage) {\n                     ((ServiceBusReceivedMessage) lockToken).setLockedUntil(instant);\n"}}, {"oid": "6089f992c0d86c5a66070a609634eea1f6423cb3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6089f992c0d86c5a66070a609634eea1f6423cb3", "message": "Review comments", "committedDate": "2020-04-04T00:17:47Z", "type": "commit"}, {"oid": "6f0da0f03114bfeb6a2f20d936936f1b92b119f5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6f0da0f03114bfeb6a2f20d936936f1b92b119f5", "message": "unit test changes", "committedDate": "2020-04-04T05:32:48Z", "type": "commit"}, {"oid": "fb07739b18cbfbbd72f8dfcb5f1c8e1e52870212", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fb07739b18cbfbbd72f8dfcb5f1c8e1e52870212", "message": "unit test fix", "committedDate": "2020-04-04T06:20:07Z", "type": "commit"}]}