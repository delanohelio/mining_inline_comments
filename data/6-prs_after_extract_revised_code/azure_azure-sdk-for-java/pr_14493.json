{"pr_number": 14493, "pr_title": "Update API surface for relationship APIs", "pr_createdAt": "2020-08-26T23:21:50Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14493", "timeline": [{"oid": "73150efebeb9c25cea689b9edc5256c529528021", "url": "https://github.com/Azure/azure-sdk-for-java/commit/73150efebeb9c25cea689b9edc5256c529528021", "message": "feat(adt): Add helper models for digital twins, update serialization\nlogic", "committedDate": "2020-08-26T23:26:45Z", "type": "commit"}, {"oid": "fc14f4281a089a55bfc3cba6fb15b444046195dc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fc14f4281a089a55bfc3cba6fb15b444046195dc", "message": "update API surface for relationship APIs", "committedDate": "2020-08-26T23:28:28Z", "type": "commit"}, {"oid": "fc14f4281a089a55bfc3cba6fb15b444046195dc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fc14f4281a089a55bfc3cba6fb15b444046195dc", "message": "update API surface for relationship APIs", "committedDate": "2020-08-26T23:28:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY5MjUxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14493#discussion_r477692519", "bodyText": "The final relationship APIs have not been implemented yet. They will be implemented in the next PR.\nWhile the final pageable API will look similar to this, this is more of a test to see how the PL works.", "author": "abhipsaMisra", "createdAt": "2020-08-26T23:42:20Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -149,12 +146,59 @@ public HttpPipeline getHttpPipeline() {\n      * @param digitalTwinId The Id of the source digital twin.\n      * @param relationshipName The name of a relationship to filter to.\n      * @return A {@link PagedFlux} of application/json relationships belonging to the specified digital twin and the http response.\n-     * TODO: Impl here returns an Object and not a String.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedFlux<Object> listRelationships(String digitalTwinId, String relationshipName) {\n-        return new PagedFlux<>(\n-            () -> protocolLayer.getDigitalTwins().listRelationshipsSinglePageAsync(digitalTwinId, relationshipName),\n-            nextLink -> protocolLayer.getDigitalTwins().listRelationshipsNextSinglePageAsync(nextLink));\n+    public PagedFlux<String> listRelationships(String digitalTwinId, String relationshipName) {", "originalCommit": "fc14f4281a089a55bfc3cba6fb15b444046195dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "c4a1e647a96d3de8542f8fb8015cc9d4ab87c333", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c4a1e647a96d3de8542f8fb8015cc9d4ab87c333", "message": "update delete and update APIs", "committedDate": "2020-08-27T01:00:35Z", "type": "commit"}, {"oid": "2114a9fb3d577ef6cacbf8fe6e1653fd35947559", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2114a9fb3d577ef6cacbf8fe6e1653fd35947559", "message": "Move DigitalTwinsResponse and DigitalTwinsResponseHeaders to util package", "committedDate": "2020-08-27T01:17:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2MjUyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14493#discussion_r478562520", "bodyText": "won't we be having the same issue with the headers if we use the default Response type?", "author": "azabbasi", "createdAt": "2020-08-27T16:56:02Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -125,22 +126,18 @@ public HttpPipeline getHttpPipeline() {\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Mono<Response<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship) {", "originalCommit": "2114a9fb3d577ef6cacbf8fe6e1653fd35947559", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU3MDA1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14493#discussion_r478570050", "bodyText": "Yup, that is correct. This snippet is meant for testing, the actual impl is in #14495 .\nThe actual API surface is:\npublic Mono<DigitalTwinsResponse<String>> createRelationshipWithResponse(String digitalTwinId, String relationshipId, String relationship) { }", "author": "abhipsaMisra", "createdAt": "2020-08-27T17:09:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2MjUyMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2NDUxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14493#discussion_r478564518", "bodyText": "I think we need to rename this variable ... fake, mock or something", "author": "azabbasi", "createdAt": "2020-08-27T16:59:23Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DigitalTwinsStringSerializer.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.digitaltwins.core.implementation.serializer;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Configures the {@link StdSerializer<String>} with custom behavior needed to work with Digital Twins REST API.\n+ */\n+public class DigitalTwinsStringSerializer extends StdSerializer<String> {\n+    private static final long serialVersionUID = 1L;\n+    private final ObjectMapper mapper;\n+\n+    public DigitalTwinsStringSerializer(Class<?> t, boolean dummy, ObjectMapper mapper) {", "originalCommit": "2114a9fb3d577ef6cacbf8fe6e1653fd35947559", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxMDI4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14493#discussion_r478610289", "bodyText": "I'll make use of the the following base class constructor instead:\nprotected StdSerializer(Class<T> t) {\n    this._handledType = t;\n}\nWeirdly enough, this is what the StdSerializer defines it as, which is why this signature was autogenerated:\nprotected StdSerializer(Class<?> t, boolean dummy) {\n    this._handledType = t;\n}", "author": "abhipsaMisra", "createdAt": "2020-08-27T18:20:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2NDUxOA=="}], "type": "inlineReview", "revised_code": {"commit": "3906fd87c8f658b28805a6e6139f7efe6de2289e", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DigitalTwinsStringSerializer.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DigitalTwinsStringSerializer.java\nindex d50eb3c1c0a..18e7df929f8 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DigitalTwinsStringSerializer.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DigitalTwinsStringSerializer.java\n\n@@ -17,8 +17,8 @@ public class DigitalTwinsStringSerializer extends StdSerializer<String> {\n     private static final long serialVersionUID = 1L;\n     private final ObjectMapper mapper;\n \n-    public DigitalTwinsStringSerializer(Class<?> t, boolean dummy, ObjectMapper mapper) {\n-        super(t, dummy);\n+    public DigitalTwinsStringSerializer(Class<String> t, ObjectMapper mapper) {\n+        super(t);\n         this.mapper = mapper;\n     }\n \n"}}, {"oid": "3906fd87c8f658b28805a6e6139f7efe6de2289e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3906fd87c8f658b28805a6e6139f7efe6de2289e", "message": "update the serialzer to call a different base constructor", "committedDate": "2020-08-27T18:53:52Z", "type": "commit"}]}