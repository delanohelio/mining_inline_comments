{"pr_number": 14585, "pr_title": "Sbtrack2 cancel schedule plural messages 14138", "pr_createdAt": "2020-08-28T08:14:58Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14585", "timeline": [{"oid": "e8ecd3397b85e23d4c05baea5ef9d4ac9ea5f567", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e8ecd3397b85e23d4c05baea5ef9d4ac9ea5f567", "message": "Continute to implement", "committedDate": "2020-08-24T19:45:37Z", "type": "commit"}, {"oid": "eee8d08cc648d322425a48790521bdf5bd71cc82", "url": "https://github.com/Azure/azure-sdk-for-java/commit/eee8d08cc648d322425a48790521bdf5bd71cc82", "message": "Merge branch 'master' into sbtrack2-cancel-schedule-plural-messages-14138", "committedDate": "2020-08-27T00:30:36Z", "type": "commit"}, {"oid": "a273d5aed510f8f67bf1e359235670a3e1055c85", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a273d5aed510f8f67bf1e359235670a3e1055c85", "message": "continue implementation", "committedDate": "2020-08-27T16:03:48Z", "type": "commit"}, {"oid": "d68649729177553398d64d6928d8ad6ad77b5627", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d68649729177553398d64d6928d8ad6ad77b5627", "message": "Schedule and cancel schedule plural messges", "committedDate": "2020-08-28T08:12:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQxNjMxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r480416315", "bodyText": "This should be OffsetDateTime or it will conflict with @YijunXieMS 's changes.", "author": "conniey", "createdAt": "2020-08-31T21:44:10Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -326,6 +327,38 @@ public String getEntityPath() {\n         return scheduleMessageInternal(message, scheduledEnqueueTime, null);\n     }\n \n+    /**\n+     * Sends a scheduled messages to the Azure Service Bus entity this sender is connected to. A scheduled message is\n+     * enqueued and made available to receivers only at the scheduled enqueue time.\n+     *\n+     * @param messages Message to be sent to the Service Bus Queue.\n+     * @param scheduledEnqueueTime Instant at which the message should appear in the Service Bus queue or topic.\n+     *\n+     * @return The sequence number of the scheduled message which can be used to cancel the scheduling of the message.\n+     *\n+     * @throws NullPointerException if {@code messages} or {@code scheduledEnqueueTime} is {@code null}.\n+     */\n+    public Flux<Long> scheduleMessages(Iterable<ServiceBusMessage> messages, Instant scheduledEnqueueTime) {", "originalCommit": "d68649729177553398d64d6928d8ad6ad77b5627", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3Mjg0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r480472843", "bodyText": "I will wait for Yijun's change and merge it in my branch. Since it effect downstream methods.", "author": "hemanttanwar", "createdAt": "2020-08-31T23:33:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQxNjMxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d20fb4769335cab227d426a12a5bfc8c17f3e59f", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\nindex 3e0c566cf43..734e833654a 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n\n@@ -317,13 +318,13 @@ public final class ServiceBusSenderAsyncClient implements AutoCloseable {\n      * enqueued and made available to receivers only at the scheduled enqueue time.\n      *\n      * @param message Message to be sent to the Service Bus Queue.\n-     * @param scheduledEnqueueTime Instant at which the message should appear in the Service Bus queue or topic.\n+     * @param scheduledEnqueueTime OffsetDateTime at which the message should appear in the Service Bus queue or topic.\n      *\n      * @return The sequence number of the scheduled message which can be used to cancel the scheduling of the message.\n      *\n      * @throws NullPointerException if {@code message} or {@code scheduledEnqueueTime} is {@code null}.\n      */\n-    public Mono<Long> scheduleMessage(ServiceBusMessage message, Instant scheduledEnqueueTime) {\n+    public Mono<Long> scheduleMessage(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime) {\n         return scheduleMessageInternal(message, scheduledEnqueueTime, null);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQxNjc5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r480416794", "bodyText": "IIRC you said that your tests were failing for this? If that's the case, we should remove this.", "author": "conniey", "createdAt": "2020-08-31T21:45:13Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -342,7 +375,83 @@ public String getEntityPath() {\n \n         return connectionProcessor\n             .flatMap(connection -> connection.getManagementNode(entityName, entityType))\n-            .flatMap(managementNode -> managementNode.cancelScheduledMessage(sequenceNumber, linkName.get()));\n+            .flatMap(managementNode -> managementNode.cancelScheduledMessage(sequenceNumber, linkName.get(),\n+                null));\n+    }\n+\n+    /**\n+     * Cancels the enqueuing of an already scheduled message, if it was not already enqueued.\n+     *\n+     * @param sequenceNumber of the scheduled message to cancel.\n+     * @param transactionContext to be set on batch message before scheduling them on Service Bus.\n+     *\n+     * @return The {@link Mono} that finishes this operation on service bus resource.\n+     *\n+     * @throws IllegalArgumentException if {@code sequenceNumber} is negative.\n+     */\n+    public Mono<Void> cancelScheduledMessage(long sequenceNumber, ServiceBusTransactionContext transactionContext) {", "originalCommit": "d68649729177553398d64d6928d8ad6ad77b5627", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3MDA1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r480470058", "bodyText": "removing", "author": "hemanttanwar", "createdAt": "2020-08-31T23:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQxNjc5NA=="}], "type": "inlineReview", "revised_code": {"commit": "acf9763f12398950efbaa1237a1c4980330f62f4", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\nindex 3e0c566cf43..9ff78d9697d 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n\n@@ -379,27 +379,6 @@ public final class ServiceBusSenderAsyncClient implements AutoCloseable {\n                 null));\n     }\n \n-    /**\n-     * Cancels the enqueuing of an already scheduled message, if it was not already enqueued.\n-     *\n-     * @param sequenceNumber of the scheduled message to cancel.\n-     * @param transactionContext to be set on batch message before scheduling them on Service Bus.\n-     *\n-     * @return The {@link Mono} that finishes this operation on service bus resource.\n-     *\n-     * @throws IllegalArgumentException if {@code sequenceNumber} is negative.\n-     */\n-    public Mono<Void> cancelScheduledMessage(long sequenceNumber, ServiceBusTransactionContext transactionContext) {\n-        if (sequenceNumber < 0) {\n-            return monoError(logger, new IllegalArgumentException(\"'sequenceNumber' cannot be negative.\"));\n-        }\n-\n-        return connectionProcessor\n-            .flatMap(connection -> connection.getManagementNode(entityName, entityType))\n-            .flatMap(managementNode -> managementNode.cancelScheduledMessage(sequenceNumber, linkName.get(),\n-                transactionContext));\n-    }\n-\n     /**\n      * Cancels the enqueuing of an already scheduled message, if it was not already enqueued.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQxNzAwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r480417006", "bodyText": "I don't remember. Did cancelling work with a transaction?", "author": "conniey", "createdAt": "2020-08-31T21:45:44Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -342,7 +375,83 @@ public String getEntityPath() {\n \n         return connectionProcessor\n             .flatMap(connection -> connection.getManagementNode(entityName, entityType))\n-            .flatMap(managementNode -> managementNode.cancelScheduledMessage(sequenceNumber, linkName.get()));\n+            .flatMap(managementNode -> managementNode.cancelScheduledMessage(sequenceNumber, linkName.get(),\n+                null));\n+    }\n+\n+    /**\n+     * Cancels the enqueuing of an already scheduled message, if it was not already enqueued.\n+     *\n+     * @param sequenceNumber of the scheduled message to cancel.\n+     * @param transactionContext to be set on batch message before scheduling them on Service Bus.\n+     *\n+     * @return The {@link Mono} that finishes this operation on service bus resource.\n+     *\n+     * @throws IllegalArgumentException if {@code sequenceNumber} is negative.\n+     */\n+    public Mono<Void> cancelScheduledMessage(long sequenceNumber, ServiceBusTransactionContext transactionContext) {\n+        if (sequenceNumber < 0) {\n+            return monoError(logger, new IllegalArgumentException(\"'sequenceNumber' cannot be negative.\"));\n+        }\n+\n+        return connectionProcessor\n+            .flatMap(connection -> connection.getManagementNode(entityName, entityType))\n+            .flatMap(managementNode -> managementNode.cancelScheduledMessage(sequenceNumber, linkName.get(),\n+                transactionContext));\n+    }\n+\n+    /**\n+     * Cancels the enqueuing of an already scheduled message, if it was not already enqueued.\n+     *\n+     * @param sequenceNumbers of the scheduled messages to cancel.\n+     *\n+     * @return The {@link Mono} that finishes this operation on service bus resource.\n+     *\n+     * @throws NullPointerException if {@code sequenceNumbers} is null.\n+     */\n+    public Mono<Void> cancelScheduledMessages(Iterable<Long> sequenceNumbers) {\n+\n+        if (isDisposed.get()) {\n+            return monoError(logger, new IllegalStateException(\n+                String.format(INVALID_OPERATION_DISPOSED_RECEIVER, \"cancelScheduledMessages\")));\n+        }\n+\n+        if (Objects.isNull(sequenceNumbers)) {\n+            return monoError(logger, new NullPointerException(\"'messages' cannot be null.\"));\n+        }\n+\n+        return connectionProcessor\n+            .flatMap(connection -> connection.getManagementNode(entityName, entityType))\n+            .flatMap(managementNode -> managementNode.cancelScheduledMessages(sequenceNumbers, linkName.get(),\n+                null));\n+    }\n+\n+    /**\n+     * Cancels the enqueuing of an already scheduled message, if it was not already enqueued.\n+     *\n+     * @param sequenceNumbers of the scheduled messages to cancel.\n+     * @param transactionContext to be set on batch sequence numbers for this operation on Service Bus.\n+     *\n+     * @return The {@link Mono} that finishes this operation on service bus resource.\n+     *\n+     * @throws NullPointerException if {@code sequenceNumbers} is null.\n+     */\n+    public Mono<Void> cancelScheduledMessages(Iterable<Long> sequenceNumbers,", "originalCommit": "d68649729177553398d64d6928d8ad6ad77b5627", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ2OTg1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r480469854", "bodyText": "I tested with cancelScheduledMessages  with rollback and it worked.  Now when I test withy commit, it is not giving me expected result.  Since we have doubt about this API, I will remove it.", "author": "hemanttanwar", "createdAt": "2020-08-31T23:23:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQxNzAwNg=="}], "type": "inlineReview", "revised_code": {"commit": "acf9763f12398950efbaa1237a1c4980330f62f4", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\nindex 3e0c566cf43..9ff78d9697d 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n\n@@ -379,27 +379,6 @@ public final class ServiceBusSenderAsyncClient implements AutoCloseable {\n                 null));\n     }\n \n-    /**\n-     * Cancels the enqueuing of an already scheduled message, if it was not already enqueued.\n-     *\n-     * @param sequenceNumber of the scheduled message to cancel.\n-     * @param transactionContext to be set on batch message before scheduling them on Service Bus.\n-     *\n-     * @return The {@link Mono} that finishes this operation on service bus resource.\n-     *\n-     * @throws IllegalArgumentException if {@code sequenceNumber} is negative.\n-     */\n-    public Mono<Void> cancelScheduledMessage(long sequenceNumber, ServiceBusTransactionContext transactionContext) {\n-        if (sequenceNumber < 0) {\n-            return monoError(logger, new IllegalArgumentException(\"'sequenceNumber' cannot be negative.\"));\n-        }\n-\n-        return connectionProcessor\n-            .flatMap(connection -> connection.getManagementNode(entityName, entityType))\n-            .flatMap(managementNode -> managementNode.cancelScheduledMessage(sequenceNumber, linkName.get(),\n-                transactionContext));\n-    }\n-\n     /**\n      * Cancels the enqueuing of an already scheduled message, if it was not already enqueued.\n      *\n"}}, {"oid": "acf9763f12398950efbaa1237a1c4980330f62f4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/acf9763f12398950efbaa1237a1c4980330f62f4", "message": "Removed API for cancelScheduledMessage using transaction.", "committedDate": "2020-08-31T23:31:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNDM5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r481314399", "bodyText": "we don't need this transactioncontext anymore.", "author": "conniey", "createdAt": "2020-09-01T17:30:51Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -96,7 +98,40 @@\n                 requestMessage.setBody(new AmqpValue(Collections.singletonMap(ManagementConstants.SEQUENCE_NUMBERS,\n                     new Long[]{sequenceNumber})));\n \n-                return sendWithVerify(channel, requestMessage, null);\n+                TransactionalState transactionalState = null;\n+                if (transactionContext != null && transactionContext.getTransactionId() != null) {\n+                    transactionalState = new TransactionalState();\n+                    transactionalState.setTxnId(new Binary(transactionContext.getTransactionId().array()));\n+                }\n+\n+                return sendWithVerify(channel, requestMessage, transactionalState);\n+            })).then();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Mono<Void> cancelScheduledMessages(Iterable<Long> sequenceNumbers, String associatedLinkName,\n+        ServiceBusTransactionContext transactionContext) {", "originalCommit": "acf9763f12398950efbaa1237a1c4980330f62f4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2bd166d718480256dbdfba677446889983e1969", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\nindex 0d883bb57a4..fe763405184 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n\n@@ -112,8 +113,7 @@ public class ManagementChannel implements ServiceBusManagementNode {\n      * {@inheritDoc}\n      */\n     @Override\n-    public Mono<Void> cancelScheduledMessages(Iterable<Long> sequenceNumbers, String associatedLinkName,\n-        ServiceBusTransactionContext transactionContext) {\n+    public Mono<Void> cancelScheduledMessages(Iterable<Long> sequenceNumbers, String associatedLinkName) {\n         return isAuthorized(ManagementConstants.OPERATION_CANCEL_SCHEDULED_MESSAGE)\n             .then(createChannel.flatMap(channel -> {\n                 final Message requestMessage = createManagementMessage(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNDgyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r481314822", "bodyText": "Can we condense this? It is a copy of all the logic from the single send. same with cancel.", "author": "conniey", "createdAt": "2020-09-01T17:31:37Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -282,6 +317,87 @@\n         });\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Flux<Long> schedule(final List<ServiceBusMessage> messages, Instant scheduledEnqueueTime, int maxLinkSize,", "originalCommit": "acf9763f12398950efbaa1237a1c4980330f62f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzMjczOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r495332739", "bodyText": "merged two into one", "author": "hemanttanwar", "createdAt": "2020-09-26T00:07:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNDgyMg=="}], "type": "inlineReview", "revised_code": {"commit": "d20fb4769335cab227d426a12a5bfc8c17f3e59f", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\nindex 0d883bb57a4..6bb87cc3a42 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n\n@@ -321,8 +322,8 @@ public class ManagementChannel implements ServiceBusManagementNode {\n      * {@inheritDoc}\n      */\n     @Override\n-    public Flux<Long> schedule(final List<ServiceBusMessage> messages, Instant scheduledEnqueueTime, int maxLinkSize,\n-        String associatedLinkName, ServiceBusTransactionContext transactionContext) {\n+    public Flux<Long> schedule(final List<ServiceBusMessage> messages, OffsetDateTime scheduledEnqueueTime,\n+        int maxLinkSize, String associatedLinkName, ServiceBusTransactionContext transactionContext) {\n \n         return isAuthorized(OPERATION_SCHEDULE_MESSAGE).thenMany(createChannel.flatMap(channel -> {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxOTMxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r481319311", "bodyText": "Can you run all the live tests? I'm afraid we'll run into dirty tests and conflicts like what Yijun experienced", "author": "conniey", "createdAt": "2020-09-01T17:39:47Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java", "diffHunk": "@@ -301,6 +303,89 @@ void scheduleMessageWithTransaction() {\n         verify(asyncSender).scheduleMessage(testData, scheduledEnqueueTime, transactionContext);\n     }\n \n+    /**", "originalCommit": "acf9763f12398950efbaa1237a1c4980330f62f4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d20fb4769335cab227d426a12a5bfc8c17f3e59f", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java\nindex 5191ba272c2..5c416575109 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java\n\n@@ -312,7 +312,7 @@ public class ServiceBusSenderClientTest {\n         final long totalMessages = 2;\n         final ServiceBusMessage testData =\n             new ServiceBusMessage(TEST_CONTENTS.getBytes(UTF_8));\n-        final Instant scheduledEnqueueTime = Instant.now();\n+        final OffsetDateTime scheduledEnqueueTime = OffsetDateTime.now();\n         final List<ServiceBusMessage> testDataMessages = new ArrayList<>();\n         testDataMessages.add(testData);\n         testDataMessages.add(testData);\n"}}, {"oid": "d20fb4769335cab227d426a12a5bfc8c17f3e59f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d20fb4769335cab227d426a12a5bfc8c17f3e59f", "message": "Continue implementation", "committedDate": "2020-09-22T22:46:00Z", "type": "commit"}, {"oid": "d96b1bec03dc6e8fb288a091a67a93c16a9af5e8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d96b1bec03dc6e8fb288a091a67a93c16a9af5e8", "message": "Removed API for single and using List to schedule.", "committedDate": "2020-09-26T00:03:35Z", "type": "commit"}, {"oid": "c2bd166d718480256dbdfba677446889983e1969", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c2bd166d718480256dbdfba677446889983e1969", "message": "Removed API for single and using List to schedule.", "committedDate": "2020-09-26T00:09:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4MTQ2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r496181467", "bodyText": "final Long[] longs to be consistent.", "author": "conniey", "createdAt": "2020-09-28T19:26:26Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -97,6 +99,32 @@\n                 requestMessage.setBody(new AmqpValue(Collections.singletonMap(ManagementConstants.SEQUENCE_NUMBERS,\n                     new Long[]{sequenceNumber})));\n \n+                TransactionalState transactionalState = null;\n+                if (transactionContext != null && transactionContext.getTransactionId() != null) {\n+                    transactionalState = new TransactionalState();\n+                    transactionalState.setTxnId(new Binary(transactionContext.getTransactionId().array()));\n+                }\n+\n+                return sendWithVerify(channel, requestMessage, transactionalState);\n+            })).then();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Mono<Void> cancelScheduledMessages(Iterable<Long> sequenceNumbers, String associatedLinkName) {\n+        return isAuthorized(ManagementConstants.OPERATION_CANCEL_SCHEDULED_MESSAGE)\n+            .then(createChannel.flatMap(channel -> {\n+                final Message requestMessage = createManagementMessage(\n+                    ManagementConstants.OPERATION_CANCEL_SCHEDULED_MESSAGE, associatedLinkName);\n+\n+                final List<Long> numbers = new ArrayList<>();\n+                sequenceNumbers.forEach(s -> numbers.add(s));\n+                Long[] longs = numbers.toArray(new Long[0]);", "originalCommit": "c2bd166d718480256dbdfba677446889983e1969", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3770950a6735547199a42cb5671a129fdf493a96", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\nindex fe763405184..0a6a3e16a80 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n\n@@ -85,30 +85,6 @@ public class ManagementChannel implements ServiceBusManagementNode {\n         this.operationTimeout = Objects.requireNonNull(operationTimeout, \"'operationTimeout' cannot be null.\");\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public Mono<Void> cancelScheduledMessage(long sequenceNumber, String associatedLinkName,\n-        ServiceBusTransactionContext transactionContext) {\n-        return isAuthorized(ManagementConstants.OPERATION_CANCEL_SCHEDULED_MESSAGE)\n-            .then(createChannel.flatMap(channel -> {\n-                final Message requestMessage = createManagementMessage(\n-                    ManagementConstants.OPERATION_CANCEL_SCHEDULED_MESSAGE, associatedLinkName);\n-\n-                requestMessage.setBody(new AmqpValue(Collections.singletonMap(ManagementConstants.SEQUENCE_NUMBERS,\n-                    new Long[]{sequenceNumber})));\n-\n-                TransactionalState transactionalState = null;\n-                if (transactionContext != null && transactionContext.getTransactionId() != null) {\n-                    transactionalState = new TransactionalState();\n-                    transactionalState.setTxnId(new Binary(transactionContext.getTransactionId().array()));\n-                }\n-\n-                return sendWithVerify(channel, requestMessage, transactionalState);\n-            })).then();\n-    }\n-\n     /**\n      * {@inheritDoc}\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4MjA0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r496182040", "bodyText": "Why duplicate logic, the logic in cancel and with iterable and single item are exactly the same.", "author": "conniey", "createdAt": "2020-09-28T19:27:37Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -97,6 +99,32 @@\n                 requestMessage.setBody(new AmqpValue(Collections.singletonMap(ManagementConstants.SEQUENCE_NUMBERS,\n                     new Long[]{sequenceNumber})));\n \n+                TransactionalState transactionalState = null;\n+                if (transactionContext != null && transactionContext.getTransactionId() != null) {\n+                    transactionalState = new TransactionalState();\n+                    transactionalState.setTxnId(new Binary(transactionContext.getTransactionId().array()));\n+                }\n+\n+                return sendWithVerify(channel, requestMessage, transactionalState);\n+            })).then();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Mono<Void> cancelScheduledMessages(Iterable<Long> sequenceNumbers, String associatedLinkName) {\n+        return isAuthorized(ManagementConstants.OPERATION_CANCEL_SCHEDULED_MESSAGE)", "originalCommit": "c2bd166d718480256dbdfba677446889983e1969", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3770950a6735547199a42cb5671a129fdf493a96", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\nindex fe763405184..0a6a3e16a80 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n\n@@ -85,30 +85,6 @@ public class ManagementChannel implements ServiceBusManagementNode {\n         this.operationTimeout = Objects.requireNonNull(operationTimeout, \"'operationTimeout' cannot be null.\");\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public Mono<Void> cancelScheduledMessage(long sequenceNumber, String associatedLinkName,\n-        ServiceBusTransactionContext transactionContext) {\n-        return isAuthorized(ManagementConstants.OPERATION_CANCEL_SCHEDULED_MESSAGE)\n-            .then(createChannel.flatMap(channel -> {\n-                final Message requestMessage = createManagementMessage(\n-                    ManagementConstants.OPERATION_CANCEL_SCHEDULED_MESSAGE, associatedLinkName);\n-\n-                requestMessage.setBody(new AmqpValue(Collections.singletonMap(ManagementConstants.SEQUENCE_NUMBERS,\n-                    new Long[]{sequenceNumber})));\n-\n-                TransactionalState transactionalState = null;\n-                if (transactionContext != null && transactionContext.getTransactionId() != null) {\n-                    transactionalState = new TransactionalState();\n-                    transactionalState.setTxnId(new Binary(transactionContext.getTransactionId().array()));\n-                }\n-\n-                return sendWithVerify(channel, requestMessage, transactionalState);\n-            })).then();\n-    }\n-\n     /**\n      * {@inheritDoc}\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4MjY3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r496182677", "bodyText": "Consistent use of final.", "author": "conniey", "createdAt": "2020-09-28T19:28:52Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -287,53 +315,57 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public Mono<Long> schedule(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime, int maxLinkSize,\n-        String associatedLinkName, ServiceBusTransactionContext transactionContext) {\n-        message.setScheduledEnqueueTime(scheduledEnqueueTime);\n-\n-        return isAuthorized(OPERATION_SCHEDULE_MESSAGE).then(createChannel.flatMap(channel -> {\n-            // Serialize the request.\n-            final Message amqpMessage = messageSerializer.serialize(message);\n-\n-            // The maxsize allowed logic is from ReactorSender, this logic should be kept in sync.\n-            final int payloadSize = messageSerializer.getSize(amqpMessage);\n-            final int allocationSize =\n-                Math.min(payloadSize + ManagementConstants.MAX_MESSAGING_AMQP_HEADER_SIZE_BYTES, maxLinkSize);\n-            final byte[] bytes = new byte[allocationSize];\n-\n-            int encodedSize;\n-            try {\n-                encodedSize = amqpMessage.encode(bytes, 0, allocationSize);\n-            } catch (BufferOverflowException exception) {\n-                final String errorMessage = String.format(\n-                    \"Error sending. Size of the payload exceeded maximum message size: %s kb\", maxLinkSize / 1024);\n-                final AmqpErrorContext errorContext = channel.getErrorContext();\n-\n-                return monoError(logger, Exceptions.propagate(new AmqpException(false,\n-                    AmqpErrorCondition.LINK_PAYLOAD_SIZE_EXCEEDED, errorMessage, exception, errorContext)));\n-            }\n+    public Flux<Long> schedule(final List<ServiceBusMessage> messages, OffsetDateTime scheduledEnqueueTime,", "originalCommit": "c2bd166d718480256dbdfba677446889983e1969", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3770950a6735547199a42cb5671a129fdf493a96", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\nindex fe763405184..0a6a3e16a80 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n\n@@ -315,7 +291,7 @@ public class ManagementChannel implements ServiceBusManagementNode {\n      * {@inheritDoc}\n      */\n     @Override\n-    public Flux<Long> schedule(final List<ServiceBusMessage> messages, OffsetDateTime scheduledEnqueueTime,\n+    public Flux<Long> schedule(List<ServiceBusMessage> messages, OffsetDateTime scheduledEnqueueTime,\n         int maxLinkSize, String associatedLinkName, ServiceBusTransactionContext transactionContext) {\n \n         return isAuthorized(OPERATION_SCHEDULE_MESSAGE).thenMany(createChannel.flatMap(channel -> {\n"}}, {"oid": "3770950a6735547199a42cb5671a129fdf493a96", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3770950a6735547199a42cb5671a129fdf493a96", "message": "Incorporating review comments", "committedDate": "2020-09-29T17:18:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkyNDI4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r496924286", "bodyText": "You don't need this internal method at all. The overload on top can call this method with transaction context as null.", "author": "conniey", "createdAt": "2020-09-29T17:43:43Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -326,6 +328,38 @@ public String getEntityPath() {\n         return scheduleMessageInternal(message, scheduledEnqueueTime, null);\n     }\n \n+    /**\n+     * Sends a scheduled messages to the Azure Service Bus entity this sender is connected to. A scheduled message is\n+     * enqueued and made available to receivers only at the scheduled enqueue time.\n+     *\n+     * @param messages Message to be sent to the Service Bus Queue.\n+     * @param scheduledEnqueueTime OffsetDateTime at which the message should appear in the Service Bus queue or topic.\n+     *\n+     * @return The sequence number of the scheduled message which can be used to cancel the scheduling of the message.\n+     *\n+     * @throws NullPointerException if {@code messages} or {@code scheduledEnqueueTime} is {@code null}.\n+     */\n+    public Flux<Long> scheduleMessages(Iterable<ServiceBusMessage> messages, OffsetDateTime scheduledEnqueueTime) {\n+        return scheduleMessagesInternal(messages, scheduledEnqueueTime, null);\n+    }\n+\n+    /**\n+     * Sends a scheduled messages to the Azure Service Bus entity this sender is connected to. A scheduled message is\n+     * enqueued and made available to receivers only at the scheduled enqueue time.\n+     *\n+     * @param messages Message to be sent to the Service Bus Queue.\n+     * @param scheduledEnqueueTime Instant at which the message should appear in the Service Bus queue or topic.\n+     * @param transactionContext to be set on batch message before scheduling them on Service Bus.\n+     *\n+     * @return The sequence number of the scheduled message which can be used to cancel the scheduling of the message.\n+     *\n+     * @throws NullPointerException if {@code message} or {@code scheduledEnqueueTime} is {@code null}.\n+     */\n+    public Flux<Long> scheduleMessages(Iterable<ServiceBusMessage> messages, OffsetDateTime scheduledEnqueueTime,\n+        ServiceBusTransactionContext transactionContext) {\n+        return scheduleMessagesInternal(messages, scheduledEnqueueTime, transactionContext);", "originalCommit": "3770950a6735547199a42cb5671a129fdf493a96", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10cbe40b5da85906e468a3ece863c017af26d80f", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\nindex 2de4b65e1a9..6a6d496ca37 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n\n@@ -340,7 +340,7 @@ public final class ServiceBusSenderAsyncClient implements AutoCloseable {\n      * @throws NullPointerException if {@code messages} or {@code scheduledEnqueueTime} is {@code null}.\n      */\n     public Flux<Long> scheduleMessages(Iterable<ServiceBusMessage> messages, OffsetDateTime scheduledEnqueueTime) {\n-        return scheduleMessagesInternal(messages, scheduledEnqueueTime, null);\n+        return scheduleMessages(messages, scheduledEnqueueTime, null);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkyNTk0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r496925943", "bodyText": "This method is only used once.. why not roll it up into one?", "author": "conniey", "createdAt": "2020-09-29T17:46:23Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -426,6 +486,46 @@ public void close() {\n         });\n     }\n \n+\n+    private Flux<Long> scheduleMessagesInternal(Iterable<ServiceBusMessage> messages,\n+        OffsetDateTime scheduledEnqueueTime, ServiceBusTransactionContext transaction) {\n+        if (Objects.isNull(messages)) {\n+            return fluxError(logger, new NullPointerException(\"'messages' cannot be null.\"));\n+        }\n+\n+        if (Objects.isNull(scheduledEnqueueTime)) {\n+            return fluxError(logger, new NullPointerException(\"'scheduledEnqueueTime' cannot be null.\"));\n+        }\n+\n+        return createBatch().flatMapMany(messageBatch -> {\n+            messages.forEach(message -> messageBatch.tryAdd(message));\n+            return scheduleMessagesInternal(messageBatch, scheduledEnqueueTime, transaction);\n+        });\n+    }\n+\n+    private Flux<Long> scheduleMessagesInternal(ServiceBusMessageBatch message, OffsetDateTime scheduledEnqueueTime,\n+        ServiceBusTransactionContext transactionContext) {\n+        if (Objects.isNull(message)) {", "originalCommit": "3770950a6735547199a42cb5671a129fdf493a96", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10cbe40b5da85906e468a3ece863c017af26d80f", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\nindex 2de4b65e1a9..6a6d496ca37 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n\n@@ -487,44 +501,6 @@ public final class ServiceBusSenderAsyncClient implements AutoCloseable {\n     }\n \n \n-    private Flux<Long> scheduleMessagesInternal(Iterable<ServiceBusMessage> messages,\n-        OffsetDateTime scheduledEnqueueTime, ServiceBusTransactionContext transaction) {\n-        if (Objects.isNull(messages)) {\n-            return fluxError(logger, new NullPointerException(\"'messages' cannot be null.\"));\n-        }\n-\n-        if (Objects.isNull(scheduledEnqueueTime)) {\n-            return fluxError(logger, new NullPointerException(\"'scheduledEnqueueTime' cannot be null.\"));\n-        }\n-\n-        return createBatch().flatMapMany(messageBatch -> {\n-            messages.forEach(message -> messageBatch.tryAdd(message));\n-            return scheduleMessagesInternal(messageBatch, scheduledEnqueueTime, transaction);\n-        });\n-    }\n-\n-    private Flux<Long> scheduleMessagesInternal(ServiceBusMessageBatch message, OffsetDateTime scheduledEnqueueTime,\n-        ServiceBusTransactionContext transactionContext) {\n-        if (Objects.isNull(message)) {\n-            return fluxError(logger, new NullPointerException(\"'message' cannot be null.\"));\n-        }\n-\n-        if (Objects.isNull(scheduledEnqueueTime)) {\n-            return fluxError(logger, new NullPointerException(\"'scheduledEnqueueTime' cannot be null.\"));\n-        }\n-\n-        return getSendLink()\n-            .flatMapMany(link -> link.getLinkSize().flatMapMany(size -> {\n-                int maxSize =  size > 0\n-                    ? size\n-                    : MAX_MESSAGE_LENGTH_BYTES;\n-\n-                return connectionProcessor\n-                    .flatMap(connection -> connection.getManagementNode(entityName, entityType))\n-                    .flatMapMany(managementNode -> managementNode.schedule(message.getMessages(), scheduledEnqueueTime,\n-                        maxSize, link.getLinkName(), transactionContext));\n-            }));\n-    }\n \n     private Mono<Long> scheduleMessageInternal(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime,\n         ServiceBusTransactionContext transactionContext) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkyNjMwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r496926303", "bodyText": "Why are we getting link size again instead of just using the batch's max size???", "author": "conniey", "createdAt": "2020-09-29T17:46:57Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -426,6 +486,46 @@ public void close() {\n         });\n     }\n \n+\n+    private Flux<Long> scheduleMessagesInternal(Iterable<ServiceBusMessage> messages,\n+        OffsetDateTime scheduledEnqueueTime, ServiceBusTransactionContext transaction) {\n+        if (Objects.isNull(messages)) {\n+            return fluxError(logger, new NullPointerException(\"'messages' cannot be null.\"));\n+        }\n+\n+        if (Objects.isNull(scheduledEnqueueTime)) {\n+            return fluxError(logger, new NullPointerException(\"'scheduledEnqueueTime' cannot be null.\"));\n+        }\n+\n+        return createBatch().flatMapMany(messageBatch -> {\n+            messages.forEach(message -> messageBatch.tryAdd(message));\n+            return scheduleMessagesInternal(messageBatch, scheduledEnqueueTime, transaction);\n+        });\n+    }\n+\n+    private Flux<Long> scheduleMessagesInternal(ServiceBusMessageBatch message, OffsetDateTime scheduledEnqueueTime,\n+        ServiceBusTransactionContext transactionContext) {\n+        if (Objects.isNull(message)) {\n+            return fluxError(logger, new NullPointerException(\"'message' cannot be null.\"));\n+        }\n+\n+        if (Objects.isNull(scheduledEnqueueTime)) {\n+            return fluxError(logger, new NullPointerException(\"'scheduledEnqueueTime' cannot be null.\"));\n+        }\n+\n+        return getSendLink()\n+            .flatMapMany(link -> link.getLinkSize().flatMapMany(size -> {\n+                int maxSize =  size > 0", "originalCommit": "3770950a6735547199a42cb5671a129fdf493a96", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10cbe40b5da85906e468a3ece863c017af26d80f", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\nindex 2de4b65e1a9..6a6d496ca37 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n\n@@ -487,44 +501,6 @@ public final class ServiceBusSenderAsyncClient implements AutoCloseable {\n     }\n \n \n-    private Flux<Long> scheduleMessagesInternal(Iterable<ServiceBusMessage> messages,\n-        OffsetDateTime scheduledEnqueueTime, ServiceBusTransactionContext transaction) {\n-        if (Objects.isNull(messages)) {\n-            return fluxError(logger, new NullPointerException(\"'messages' cannot be null.\"));\n-        }\n-\n-        if (Objects.isNull(scheduledEnqueueTime)) {\n-            return fluxError(logger, new NullPointerException(\"'scheduledEnqueueTime' cannot be null.\"));\n-        }\n-\n-        return createBatch().flatMapMany(messageBatch -> {\n-            messages.forEach(message -> messageBatch.tryAdd(message));\n-            return scheduleMessagesInternal(messageBatch, scheduledEnqueueTime, transaction);\n-        });\n-    }\n-\n-    private Flux<Long> scheduleMessagesInternal(ServiceBusMessageBatch message, OffsetDateTime scheduledEnqueueTime,\n-        ServiceBusTransactionContext transactionContext) {\n-        if (Objects.isNull(message)) {\n-            return fluxError(logger, new NullPointerException(\"'message' cannot be null.\"));\n-        }\n-\n-        if (Objects.isNull(scheduledEnqueueTime)) {\n-            return fluxError(logger, new NullPointerException(\"'scheduledEnqueueTime' cannot be null.\"));\n-        }\n-\n-        return getSendLink()\n-            .flatMapMany(link -> link.getLinkSize().flatMapMany(size -> {\n-                int maxSize =  size > 0\n-                    ? size\n-                    : MAX_MESSAGE_LENGTH_BYTES;\n-\n-                return connectionProcessor\n-                    .flatMap(connection -> connection.getManagementNode(entityName, entityType))\n-                    .flatMapMany(managementNode -> managementNode.schedule(message.getMessages(), scheduledEnqueueTime,\n-                        maxSize, link.getLinkName(), transactionContext));\n-            }));\n-    }\n \n     private Mono<Long> scheduleMessageInternal(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime,\n         ServiceBusTransactionContext transactionContext) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkyNzkyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r496927922", "bodyText": "We're basically creating our own message batch here. Why not just have a schedule that takes MessageBatch? Then we don't need the maxLinkSize anymore.", "author": "conniey", "createdAt": "2020-09-29T17:49:33Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -287,53 +291,57 @@\n      * {@inheritDoc}\n      */\n     @Override\n-    public Mono<Long> schedule(ServiceBusMessage message, OffsetDateTime scheduledEnqueueTime, int maxLinkSize,\n-        String associatedLinkName, ServiceBusTransactionContext transactionContext) {\n-        message.setScheduledEnqueueTime(scheduledEnqueueTime);\n-\n-        return isAuthorized(OPERATION_SCHEDULE_MESSAGE).then(createChannel.flatMap(channel -> {\n-            // Serialize the request.\n-            final Message amqpMessage = messageSerializer.serialize(message);\n-\n-            // The maxsize allowed logic is from ReactorSender, this logic should be kept in sync.\n-            final int payloadSize = messageSerializer.getSize(amqpMessage);\n-            final int allocationSize =\n-                Math.min(payloadSize + ManagementConstants.MAX_MESSAGING_AMQP_HEADER_SIZE_BYTES, maxLinkSize);\n-            final byte[] bytes = new byte[allocationSize];\n-\n-            int encodedSize;\n-            try {\n-                encodedSize = amqpMessage.encode(bytes, 0, allocationSize);\n-            } catch (BufferOverflowException exception) {\n-                final String errorMessage = String.format(\n-                    \"Error sending. Size of the payload exceeded maximum message size: %s kb\", maxLinkSize / 1024);\n-                final AmqpErrorContext errorContext = channel.getErrorContext();\n-\n-                return monoError(logger, Exceptions.propagate(new AmqpException(false,\n-                    AmqpErrorCondition.LINK_PAYLOAD_SIZE_EXCEEDED, errorMessage, exception, errorContext)));\n-            }\n+    public Flux<Long> schedule(List<ServiceBusMessage> messages, OffsetDateTime scheduledEnqueueTime,", "originalCommit": "3770950a6735547199a42cb5671a129fdf493a96", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA0NTc3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r497045770", "bodyText": "messageBatch.getMessages() is package private and not accessible to ManagementChannel . And I did not want to make it public, Thus I am not sending MessageBatch here.", "author": "hemanttanwar", "createdAt": "2020-09-29T20:51:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkyNzkyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYzMDA1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14585#discussion_r497630054", "bodyText": "I'd use an EntityHelper in this case because we're duplicating unnecessary mandatory logic here.", "author": "conniey", "createdAt": "2020-09-30T16:07:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkyNzkyMg=="}], "type": "inlineReview", "revised_code": {"commit": "b366ab5f4c13f057b3fe0b7a5d0195f713d7f1f0", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\nindex 0a6a3e16a80..e063d88cc01 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n\n@@ -282,8 +282,7 @@ public class ManagementChannel implements ServiceBusManagementNode {\n                     \"Expiration is not of type Date when renewing session. Id: %s. Value: %s\", sessionId,\n                     expirationValue), getErrorContext())));\n             }\n-\n-            return ((Date) expirationValue).toInstant();\n+            return ((Date) expirationValue).toInstant().atOffset(ZoneOffset.UTC);\n         });\n     }\n \n"}}, {"oid": "10cbe40b5da85906e468a3ece863c017af26d80f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/10cbe40b5da85906e468a3ece863c017af26d80f", "message": "Incorporating review comment and adding integration test", "committedDate": "2020-09-29T21:39:41Z", "type": "commit"}, {"oid": "c83056608115d6ef0f058a59847e05b90b281dc0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c83056608115d6ef0f058a59847e05b90b281dc0", "message": "merge master into branch", "committedDate": "2020-09-29T21:48:08Z", "type": "commit"}, {"oid": "b366ab5f4c13f057b3fe0b7a5d0195f713d7f1f0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b366ab5f4c13f057b3fe0b7a5d0195f713d7f1f0", "message": "merge master into the branch", "committedDate": "2020-09-30T19:27:10Z", "type": "commit"}]}