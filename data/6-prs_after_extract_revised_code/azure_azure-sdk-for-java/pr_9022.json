{"pr_number": 9022, "pr_title": "Simplify azure-identity  error messaging", "pr_createdAt": "2020-03-12T08:00:50Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/9022", "timeline": [{"oid": "f6b17a9854497a9ae829509d97a875b445668d50", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f6b17a9854497a9ae829509d97a875b445668d50", "message": "add support for AuthFileCredential", "committedDate": "2020-01-20T09:11:40Z", "type": "commit"}, {"oid": "ddf0754a5ac99a1ba579af27d44efb16743197f4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ddf0754a5ac99a1ba579af27d44efb16743197f4", "message": "change comments in AuthFileCredentialBuilder.java", "committedDate": "2020-01-20T09:18:54Z", "type": "commit"}, {"oid": "bec2c22b4a9f078896b3ffbd27d931d76021f595", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bec2c22b4a9f078896b3ffbd27d931d76021f595", "message": "change exception,add test and move method ensurecredential", "committedDate": "2020-01-22T08:29:04Z", "type": "commit"}, {"oid": "e9235377fd82f6e1240243d037f1aafe65cf9c43", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e9235377fd82f6e1240243d037f1aafe65cf9c43", "message": "change extends and change exception", "committedDate": "2020-01-22T10:23:58Z", "type": "commit"}, {"oid": "74799df9e74cb772caa232b073f72ddd1f7c782f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/74799df9e74cb772caa232b073f72ddd1f7c782f", "message": "remove method ensurecredential", "committedDate": "2020-02-04T02:51:13Z", "type": "commit"}, {"oid": "f7bb92aea0240f55cc8dcdab9271993d3a3a05c1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f7bb92aea0240f55cc8dcdab9271993d3a3a05c1", "message": "move ensurecredential to gettoken", "committedDate": "2020-02-05T03:03:03Z", "type": "commit"}, {"oid": "b0a7bcdbd8e06e8036cfcc9bd0218f66de4f58e7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b0a7bcdbd8e06e8036cfcc9bd0218f66de4f58e7", "message": "add synchronize and update code format", "committedDate": "2020-02-28T09:37:25Z", "type": "commit"}, {"oid": "6fedf1d582cba96819ec492a1d87ccca28e82703", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6fedf1d582cba96819ec492a1d87ccca28e82703", "message": "change test and field", "committedDate": "2020-03-02T08:12:22Z", "type": "commit"}, {"oid": "210fa4324e8666f806d0e89f6e575cdd297c3c7c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/210fa4324e8666f806d0e89f6e575cdd297c3c7c", "message": "add String constant", "committedDate": "2020-03-03T08:15:57Z", "type": "commit"}, {"oid": "691f64d92ba8e16a9b7b4db309de84fc5706c69c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/691f64d92ba8e16a9b7b4db309de84fc5706c69c", "message": "change defaultazurecredential error exception message", "committedDate": "2020-03-12T07:37:58Z", "type": "commit"}, {"oid": "5242e18046602bc8b61e87099c664eb9795424d0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5242e18046602bc8b61e87099c664eb9795424d0", "message": "change defaultazurecredential error exception message", "committedDate": "2020-03-12T07:44:36Z", "type": "commit"}, {"oid": "a664c2db5846cc2452425ddb6372a2392ee38faf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a664c2db5846cc2452425ddb6372a2392ee38faf", "message": "change defaultazurecredential error exception message", "committedDate": "2020-03-12T07:50:59Z", "type": "commit"}, {"oid": "241e9153f9a5e286562f92e384eea8322559eb15", "url": "https://github.com/Azure/azure-sdk-for-java/commit/241e9153f9a5e286562f92e384eea8322559eb15", "message": "change defaultazurecredential error exception message", "committedDate": "2020-03-12T09:10:23Z", "type": "commit"}, {"oid": "56786ea96df01bb03e61c67d31071ebe28fd35f4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/56786ea96df01bb03e61c67d31071ebe28fd35f4", "message": "change defaultazurecredential error exception message", "committedDate": "2020-03-12T09:50:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5ODkyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r391898928", "bodyText": "Can we use package private for now instead?", "author": "jianghaolu", "createdAt": "2020-03-12T21:18:22Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "diffHunk": "@@ -23,7 +23,7 @@\n  */\n @Immutable\n public class ChainedTokenCredential implements TokenCredential {\n-    private final Deque<TokenCredential> credentials;\n+    protected final Deque<TokenCredential> credentials;", "originalCommit": "56786ea96df01bb03e61c67d31071ebe28fd35f4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca526d16566d116abce9ddcda32818afc84fd4b7", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\nindex ce79228edf6..02255666554 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n\n@@ -23,7 +23,7 @@ import java.util.stream.Collectors;\n  */\n @Immutable\n public class ChainedTokenCredential implements TokenCredential {\n-    protected final Deque<TokenCredential> credentials;\n+    final Deque<TokenCredential> credentials;\n \n     /**\n      * Create an instance of chained token credential that aggregates a list of token\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5OTM5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r391899393", "bodyText": "We have changed this to run in serial: https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java#L46", "author": "jianghaolu", "createdAt": "2020-03-12T21:19:16Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredential.java", "diffHunk": "@@ -39,4 +45,28 @@\n             new SharedTokenCacheCredential(null, \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\",\n                 identityClientOptions))));\n     }\n+\n+    @Override\n+    public Mono<AccessToken> getToken(TokenRequestContext request) {\n+        final AtomicReference<Throwable> cause = new AtomicReference<>();\n+        StringBuilder errorMsg = new StringBuilder();\n+        return Flux.fromIterable(credentials).flatMap(p -> p.getToken(request).onErrorResume(t -> {", "originalCommit": "56786ea96df01bb03e61c67d31071ebe28fd35f4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca526d16566d116abce9ddcda32818afc84fd4b7", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredential.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredential.java\nindex 8c9a30abcec..7586afbb923 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredential.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/DefaultAzureCredential.java\n\n@@ -59,7 +59,7 @@ public final class DefaultAzureCredential extends ChainedTokenCredential {\n             }\n             errorMsg.append(\" \").append(t.getMessage());\n             return Mono.empty();\n-        }))\n+        }), 1)\n             .next()\n             .switchIfEmpty(Mono.defer(() -> { \n                 if(cause.get() == null){\n"}}, {"oid": "ca526d16566d116abce9ddcda32818afc84fd4b7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ca526d16566d116abce9ddcda32818afc84fd4b7", "message": "update according to conversation", "committedDate": "2020-03-13T08:00:50Z", "type": "commit"}, {"oid": "902f88afa826bbe6b2d411e70955fccc96f493bc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/902f88afa826bbe6b2d411e70955fccc96f493bc", "message": "update defaultazurecredential and resolve conflict", "committedDate": "2020-03-16T07:27:15Z", "type": "commit"}, {"oid": "136d17083512cff63ce2e1ddc470610875ee452d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/136d17083512cff63ce2e1ddc470610875ee452d", "message": "update sharedtokencachecredential error message", "committedDate": "2020-03-16T07:47:33Z", "type": "commit"}, {"oid": "f2feb543c4e5cd7c59229deef4844d35fb459cdf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f2feb543c4e5cd7c59229deef4844d35fb459cdf", "message": "update sharedtokencachecredential error message", "committedDate": "2020-03-16T08:13:31Z", "type": "commit"}, {"oid": "ef8e3f3acb9b8237da16eb22627c41cadf7af360", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ef8e3f3acb9b8237da16eb22627c41cadf7af360", "message": "update sharedtokencachecredential error message", "committedDate": "2020-03-16T10:17:21Z", "type": "commit"}, {"oid": "f9d8c84f850268f96c8d8af0c9f9cae0bb991ba8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f9d8c84f850268f96c8d8af0c9f9cae0bb991ba8", "message": "update sharedtokencachecredential error message", "committedDate": "2020-03-16T10:19:38Z", "type": "commit"}, {"oid": "f1700871995a92cfff16094d977cb49e3bad26af", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f1700871995a92cfff16094d977cb49e3bad26af", "message": "change chainedtokencredential gettoken", "committedDate": "2020-03-18T01:36:42Z", "type": "commit"}, {"oid": "753e885d8d49aa14143e475c45c6e9bdee8ca666", "url": "https://github.com/Azure/azure-sdk-for-java/commit/753e885d8d49aa14143e475c45c6e9bdee8ca666", "message": "change manageidentitycredential", "committedDate": "2020-03-18T01:43:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0MTU1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r394541553", "bodyText": "This is removing the instructions for the user as to how they'll resolve/fix the issue. We should keep those instructions so users are updated about how to resolve the issue.", "author": "g2vinay", "createdAt": "2020-03-18T18:03:20Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/SharedTokenCacheCredential.java", "diffHunk": "@@ -86,22 +85,18 @@\n \n                 if (accounts.size() == 0) {\n                     if (username == null) {\n-                        return Mono.error(new RuntimeException(\"No accounts were discovered in the shared token cache.\"\n-                            + \" To fix, authenticate through tooling supporting azure developer sign on.\"));\n+                        return Mono.error(new RuntimeException(\"SharedTokenCacheCredential authentication unavailable. No accounts were discovered in the cache.\"));", "originalCommit": "753e885d8d49aa14143e475c45c6e9bdee8ca666", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU1MzUwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r394553507", "bodyText": "I removed these more specific error messages from the shared token credential. They aren't always as helpful, especially in this case where \"To fix, authenticate through tooling supporting azure developer sign on.\" is very vague. The end goal as we add more specific credential types for authenticating with specific tools that they will provide error messaging which can be much more specific.", "author": "schaabs", "createdAt": "2020-03-18T18:23:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0MTU1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "19d0ededf1d6793437a7df4005a40ed504e65e10", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/SharedTokenCacheCredential.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/SharedTokenCacheCredential.java\nindex 84441850e14..a7daa6d5f09 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/SharedTokenCacheCredential.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/SharedTokenCacheCredential.java\n\n@@ -104,7 +124,9 @@ public class SharedTokenCacheCredential implements TokenCredential {\n \n                 // if it does, then request the token\n                 SilentParameters params = SilentParameters.builder(\n-                    new HashSet<>(request.getScopes()), requestedAccount).build();\n+                        new HashSet<>(request.getScopes()), requestedAccount)\n+                    .authorityUrl(authorityUrl)\n+                    .build();\n \n                 CompletableFuture<IAuthenticationResult> future;\n                 try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0NTE2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r394545162", "bodyText": "Same here, we should keep the instructions for the user as to how they'll resolve/fix the issue.", "author": "g2vinay", "createdAt": "2020-03-18T18:09:32Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/SharedTokenCacheCredential.java", "diffHunk": "@@ -86,22 +85,18 @@\n \n                 if (accounts.size() == 0) {\n                     if (username == null) {\n-                        return Mono.error(new RuntimeException(\"No accounts were discovered in the shared token cache.\"\n-                            + \" To fix, authenticate through tooling supporting azure developer sign on.\"));\n+                        return Mono.error(new RuntimeException(\"SharedTokenCacheCredential authentication unavailable. No accounts were discovered in the cache.\"));\n                     } else {\n-                        return Mono.error(new RuntimeException(String.format(\"User account '%s' was not found in the \"\n-                            + \"shared token cache. Discovered Accounts: [ '%s' ]\", username, accounts.values().stream()\n-                            .map(IAccount::username).collect(Collectors.joining(\", \")))));\n+                        return Mono.error(new RuntimeException(String.format(\"SharedTokenCacheCredential authentication unavailable. No account \"\n+                            + \"matching the specified %s was found in the cache.\", username)));\n                     }\n                 } else if (accounts.size() > 1) {\n                     if (username == null) {\n-                        return Mono.error(new RuntimeException(\"Multiple accounts were discovered in the shared token \"\n-                            + \"cache. To fix, set the AZURE_USERNAME environment variable to the preferred username, \"\n-                            + \"or specify it when constructing SharedTokenCacheCredential.\"));\n+                        return Mono.error(new RuntimeException(\"SharedTokenCacheCredential authentication unavailable. \"\n+                            + \"Multiple accounts were found in the cache. Use username and tenant id to disambiguate.\"));", "originalCommit": "753e885d8d49aa14143e475c45c6e9bdee8ca666", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19d0ededf1d6793437a7df4005a40ed504e65e10", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/SharedTokenCacheCredential.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/SharedTokenCacheCredential.java\nindex 84441850e14..a7daa6d5f09 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/SharedTokenCacheCredential.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/SharedTokenCacheCredential.java\n\n@@ -104,7 +124,9 @@ public class SharedTokenCacheCredential implements TokenCredential {\n \n                 // if it does, then request the token\n                 SilentParameters params = SilentParameters.builder(\n-                    new HashSet<>(request.getScopes()), requestedAccount).build();\n+                        new HashSet<>(request.getScopes()), requestedAccount)\n+                    .authorityUrl(authorityUrl)\n+                    .build();\n \n                 CompletableFuture<IAuthenticationResult> future;\n                 try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0NTUzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r394545534", "bodyText": "Same here, we should keep the update the user why the error is thrown and the feature is not supported.", "author": "g2vinay", "createdAt": "2020-03-18T18:10:15Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/SharedTokenCacheCredential.java", "diffHunk": "@@ -86,22 +85,18 @@\n \n                 if (accounts.size() == 0) {\n                     if (username == null) {\n-                        return Mono.error(new RuntimeException(\"No accounts were discovered in the shared token cache.\"\n-                            + \" To fix, authenticate through tooling supporting azure developer sign on.\"));\n+                        return Mono.error(new RuntimeException(\"SharedTokenCacheCredential authentication unavailable. No accounts were discovered in the cache.\"));\n                     } else {\n-                        return Mono.error(new RuntimeException(String.format(\"User account '%s' was not found in the \"\n-                            + \"shared token cache. Discovered Accounts: [ '%s' ]\", username, accounts.values().stream()\n-                            .map(IAccount::username).collect(Collectors.joining(\", \")))));\n+                        return Mono.error(new RuntimeException(String.format(\"SharedTokenCacheCredential authentication unavailable. No account \"\n+                            + \"matching the specified %s was found in the cache.\", username)));\n                     }\n                 } else if (accounts.size() > 1) {\n                     if (username == null) {\n-                        return Mono.error(new RuntimeException(\"Multiple accounts were discovered in the shared token \"\n-                            + \"cache. To fix, set the AZURE_USERNAME environment variable to the preferred username, \"\n-                            + \"or specify it when constructing SharedTokenCacheCredential.\"));\n+                        return Mono.error(new RuntimeException(\"SharedTokenCacheCredential authentication unavailable. \"\n+                            + \"Multiple accounts were found in the cache. Use username and tenant id to disambiguate.\"));\n                     } else {\n-                        return Mono.error(new RuntimeException(\"Multiple entries for the user account \" + username\n-                            + \" were found in the shared token cache. This is not currently supported by the\"\n-                            + \" SharedTokenCacheCredential.\"));\n+                        return Mono.error(new RuntimeException(String.format(\"SharedTokenCacheCredential authentication unavailable. Multiple accounts matching the specified \"\n+                            + \" %s were found in the cache.\", username)));", "originalCommit": "753e885d8d49aa14143e475c45c6e9bdee8ca666", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19d0ededf1d6793437a7df4005a40ed504e65e10", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/SharedTokenCacheCredential.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/SharedTokenCacheCredential.java\nindex 84441850e14..a7daa6d5f09 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/SharedTokenCacheCredential.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/SharedTokenCacheCredential.java\n\n@@ -104,7 +124,9 @@ public class SharedTokenCacheCredential implements TokenCredential {\n \n                 // if it does, then request the token\n                 SilentParameters params = SilentParameters.builder(\n-                    new HashSet<>(request.getScopes()), requestedAccount).build();\n+                        new HashSet<>(request.getScopes()), requestedAccount)\n+                    .authorityUrl(authorityUrl)\n+                    .build();\n \n                 CompletableFuture<IAuthenticationResult> future;\n                 try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0NjU1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r394546558", "bodyText": "code indentation needs to be fixed.", "author": "g2vinay", "createdAt": "2020-03-18T18:11:56Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "diffHunk": "@@ -35,19 +35,15 @@\n \n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n-        AtomicReference<Throwable> cause = new AtomicReference<>();\n-        return Flux.fromIterable(credentials)\n-            .flatMap(p -> p.getToken(request).onErrorResume(t -> {\n-                if (cause.get() != null) {\n-                    t.initCause(cause.get());\n-                }\n-                cause.set(t);\n-                return Mono.empty();\n-            }))\n+        final StringBuilder errorMsg = new StringBuilder();\n+        return Flux.fromIterable(credentials).flatMap(p -> p.getToken(request).onErrorResume(t -> {", "originalCommit": "753e885d8d49aa14143e475c45c6e9bdee8ca666", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6962edc063cb7aa7f836346ed9c1fd3f0ca9b50c", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\nindex a4378cb101a..a605bffe574 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n\n@@ -36,12 +36,13 @@ public class ChainedTokenCredential implements TokenCredential {\n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         final StringBuilder errorMsg = new StringBuilder();\n-        return Flux.fromIterable(credentials).flatMap(p -> p.getToken(request).onErrorResume(t -> {\n-            if (t.getMessage() != null && !t.getMessage().contains(\"authentication unavailable\")) {\n-                throw new RuntimeException(UnavailableError+p.getClass().getSimpleName()+\"authentication failed.\",t);\n-            }\n-            errorMsg.append(\" \").append(t.getMessage());\n-            return Mono.empty();\n+        return Flux.fromIterable(credentials)\n+            .flatMap(p -> p.getToken(request).onErrorResume(t -> {\n+                if (t.getMessage() != null && !t.getMessage().contains(\"authentication unavailable\")) {\n+                    throw new RuntimeException(UnavailableError+p.getClass().getSimpleName()+\" authentication failed.\",t);\n+                }\n+                errorMsg.append(\" \").append(t.getMessage());\n+                return Mono.empty();\n         }), 1)\n             .next()\n             .switchIfEmpty(Mono.defer(() -> Mono.error(new RuntimeException(FailedError+errorMsg.toString()+\" )\"))));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0NzM5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r394547394", "bodyText": "This error message is not properly formatted, spacing issues will show up before 'authentication failed' text.", "author": "g2vinay", "createdAt": "2020-03-18T18:13:18Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "diffHunk": "@@ -35,19 +35,15 @@\n \n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n-        AtomicReference<Throwable> cause = new AtomicReference<>();\n-        return Flux.fromIterable(credentials)\n-            .flatMap(p -> p.getToken(request).onErrorResume(t -> {\n-                if (cause.get() != null) {\n-                    t.initCause(cause.get());\n-                }\n-                cause.set(t);\n-                return Mono.empty();\n-            }))\n+        final StringBuilder errorMsg = new StringBuilder();\n+        return Flux.fromIterable(credentials).flatMap(p -> p.getToken(request).onErrorResume(t -> {\n+            if (t.getMessage() != null && !t.getMessage().contains(\"authentication unavailable\")) {\n+                throw new RuntimeException(UnavailableError+p.getClass().getSimpleName()+\"authentication failed.\",t);", "originalCommit": "753e885d8d49aa14143e475c45c6e9bdee8ca666", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6962edc063cb7aa7f836346ed9c1fd3f0ca9b50c", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\nindex a4378cb101a..a605bffe574 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n\n@@ -36,12 +36,13 @@ public class ChainedTokenCredential implements TokenCredential {\n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         final StringBuilder errorMsg = new StringBuilder();\n-        return Flux.fromIterable(credentials).flatMap(p -> p.getToken(request).onErrorResume(t -> {\n-            if (t.getMessage() != null && !t.getMessage().contains(\"authentication unavailable\")) {\n-                throw new RuntimeException(UnavailableError+p.getClass().getSimpleName()+\"authentication failed.\",t);\n-            }\n-            errorMsg.append(\" \").append(t.getMessage());\n-            return Mono.empty();\n+        return Flux.fromIterable(credentials)\n+            .flatMap(p -> p.getToken(request).onErrorResume(t -> {\n+                if (t.getMessage() != null && !t.getMessage().contains(\"authentication unavailable\")) {\n+                    throw new RuntimeException(UnavailableError+p.getClass().getSimpleName()+\" authentication failed.\",t);\n+                }\n+                errorMsg.append(\" \").append(t.getMessage());\n+                return Mono.empty();\n         }), 1)\n             .next()\n             .switchIfEmpty(Mono.defer(() -> Mono.error(new RuntimeException(FailedError+errorMsg.toString()+\" )\"))));\n"}}, {"oid": "6962edc063cb7aa7f836346ed9c1fd3f0ca9b50c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6962edc063cb7aa7f836346ed9c1fd3f0ca9b50c", "message": "update code indentation", "committedDate": "2020-03-19T02:40:25Z", "type": "commit"}, {"oid": "19d0ededf1d6793437a7df4005a40ed504e65e10", "url": "https://github.com/Azure/azure-sdk-for-java/commit/19d0ededf1d6793437a7df4005a40ed504e65e10", "message": "Merge branch 'master' into DefaultCredentialErrorMsg", "committedDate": "2020-04-02T07:36:14Z", "type": "commit"}, {"oid": "e48b05326d00c1718439eb0b8a815f7c5b6a39e0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e48b05326d00c1718439eb0b8a815f7c5b6a39e0", "message": "change defaultazurecredential test", "committedDate": "2020-04-23T06:24:51Z", "type": "commit"}, {"oid": "04b01eb5999e29c66eb7f80f97ac143cafde2660", "url": "https://github.com/Azure/azure-sdk-for-java/commit/04b01eb5999e29c66eb7f80f97ac143cafde2660", "message": "resolve conflict", "committedDate": "2020-04-23T06:39:50Z", "type": "commit"}, {"oid": "9f8af7d48c55c24c6605df98e17fb9786defb825", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9f8af7d48c55c24c6605df98e17fb9786defb825", "message": "change chainedtokencredential and defaultazurecredential test", "committedDate": "2020-04-26T07:24:16Z", "type": "commit"}, {"oid": "61703b9c1947e57b04bed040158d51ba84044ee4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/61703b9c1947e57b04bed040158d51ba84044ee4", "message": "change defaultazurecredential test", "committedDate": "2020-04-26T07:38:43Z", "type": "commit"}, {"oid": "e021876d8f849fa6930d4d23cf33a815bc963702", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e021876d8f849fa6930d4d23cf33a815bc963702", "message": "Merge branch 'master' into DefaultCredentialErrorMsg", "committedDate": "2020-04-26T07:50:12Z", "type": "commit"}, {"oid": "9b3eaa0102a30285f774b940bf8505f12b4886fe", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9b3eaa0102a30285f774b940bf8505f12b4886fe", "message": "change azure cli credential test", "committedDate": "2020-04-26T08:43:50Z", "type": "commit"}, {"oid": "b97ca494c4ef4dcb7af66993be279845e2d40bc7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b97ca494c4ef4dcb7af66993be279845e2d40bc7", "message": "Merge branch 'DefaultCredentialErrorMsg' of https://github.com/Luyunmt/azure-sdk-for-java into DefaultCredentialErrorMsg\n:wq", "committedDate": "2020-04-26T08:48:45Z", "type": "commit"}, {"oid": "6700256199728f0fbe2ac34f922f1a28d6425e78", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6700256199728f0fbe2ac34f922f1a28d6425e78", "message": "change azure cli credential test", "committedDate": "2020-04-26T09:52:41Z", "type": "commit"}, {"oid": "9831a0190956eb1caba57c2ebbe86f5671f71012", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9831a0190956eb1caba57c2ebbe86f5671f71012", "message": "change azure cli credential test", "committedDate": "2020-04-26T09:59:08Z", "type": "commit"}, {"oid": "d967e965b06783b3e4229b2a9226340b1c50074d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d967e965b06783b3e4229b2a9226340b1c50074d", "message": "resolve error", "committedDate": "2020-04-27T01:58:52Z", "type": "commit"}, {"oid": "ff126b02840c1da3d2f1a3142d408cc8eeb28527", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ff126b02840c1da3d2f1a3142d408cc8eeb28527", "message": "resolve error", "committedDate": "2020-04-27T02:35:06Z", "type": "commit"}, {"oid": "dd2509be0cbcc9dc60624f15e54b0311a543fbbc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dd2509be0cbcc9dc60624f15e54b0311a543fbbc", "message": "resolve error", "committedDate": "2020-04-27T06:02:37Z", "type": "commit"}, {"oid": "6b25f41ea333a41910ae1af960e71654f2a9f368", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6b25f41ea333a41910ae1af960e71654f2a9f368", "message": "resolve error", "committedDate": "2020-04-27T06:09:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMzc2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r417013763", "bodyText": "This should extend ClientAuthenticationException.", "author": "g2vinay", "createdAt": "2020-04-29T01:03:55Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/CredentialUnavailableException.java", "diffHunk": "@@ -5,21 +5,20 @@\n \n import com.azure.core.credential.AccessToken;\n import com.azure.core.credential.TokenCredential;\n-import com.azure.core.exception.ClientAuthenticationException;\n \n /**\n  * The exception thrown when a {@link TokenCredential} did not attempt to authenticate and retrieve {@link AccessToken},\n  * as its prerequisite information or state was not available.\n  */\n-public class CredentialUnavailableException extends ClientAuthenticationException {\n+public class CredentialUnavailableException extends RuntimeException {", "originalCommit": "6b25f41ea333a41910ae1af960e71654f2a9f368", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAyMzg0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r417023843", "bodyText": "If extend ClientAuthenticationException, There is a bug when running defaultazurecredential.\n\nrun code as follow  when all credentials are unavaliable in defaultazurecredential\npublic static void main(String[] args) {\ntry{\nDefaultAzureCredential defaultAzureCredential=new DefaultAzureCredentialBuilder().build();\nBlobServiceClient blobServiceClient = new BlobServiceClientBuilder()\n.endpoint(endpoint)\n.credential(defaultAzureCredential)\n.buildClient();\nblobServiceClient.createBlobContainer(\"mycontainer\");\n}catch(Exception e){\ne.printStackTrace();\n}\n}", "author": "Luyunmt", "createdAt": "2020-04-29T01:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMzc2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMDE1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r423220159", "bodyText": "I am not able to reproduce this when used DefaultAzureCredential when no credential available with KeyVault Secrets client.\nAre you running the above code of Storage with tracing enabled ?", "author": "g2vinay", "createdAt": "2020-05-11T18:00:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMzc2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5b5c1295b974941deffa3e4704fdeee757d684e2", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/CredentialUnavailableException.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/CredentialUnavailableException.java\nindex b3154f40dba..8ab92da9bea 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/CredentialUnavailableException.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/CredentialUnavailableException.java\n\n@@ -5,12 +5,13 @@ package com.azure.identity;\n \n import com.azure.core.credential.AccessToken;\n import com.azure.core.credential.TokenCredential;\n+import com.azure.core.exception.ClientAuthenticationException;\n \n /**\n  * The exception thrown when a {@link TokenCredential} did not attempt to authenticate and retrieve {@link AccessToken},\n  * as its prerequisite information or state was not available.\n  */\n-public class CredentialUnavailableException extends RuntimeException {\n+public class CredentialUnavailableException extends ClientAuthenticationException {\n \n     /**\n      * Initializes a new instance of the {@link CredentialUnavailableException} class.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMzc4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r417013789", "bodyText": "What will 'throw' achieve here ?", "author": "g2vinay", "createdAt": "2020-04-29T01:03:59Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "diffHunk": "@@ -36,29 +38,20 @@\n \n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n-        List<CredentialUnavailableException> exceptions = new ArrayList<>(4);\n+        StringBuilder message = new StringBuilder();\n         return Flux.fromIterable(credentials)\n-                   .flatMap(p -> p.getToken(request).onErrorResume(CredentialUnavailableException.class, t -> {\n-                       exceptions.add(t);\n+                   .flatMap(p -> p.getToken(request).onErrorResume(Exception.class, t -> {\n+                       if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {\n+                           throw logger.logExceptionAsError(new CredentialUnavailableException(", "originalCommit": "6b25f41ea333a41910ae1af960e71654f2a9f368", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxNzgyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r434017829", "bodyText": "In the reactive spec, this should return normally rather than throwing (ie. return Mono.error(logger.logExceptionAsError)).\nhttps://github.com/reactive-streams/reactive-streams-jvm#2.13", "author": "conniey", "createdAt": "2020-06-02T16:36:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMzc4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5b5c1295b974941deffa3e4704fdeee757d684e2", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\nindex 8ebb7825953..f84920ebbc5 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n\n@@ -40,7 +40,7 @@ public class ChainedTokenCredential implements TokenCredential {\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         StringBuilder message = new StringBuilder();\n         return Flux.fromIterable(credentials)\n-                   .flatMap(p -> p.getToken(request).onErrorResume(Exception.class, t -> {\n+                   .flatMap(p -> p.getToken(request).onErrorResume(CredentialUnavailableException.class, t -> {\n                        if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {\n                            throw logger.logExceptionAsError(new CredentialUnavailableException(\n                                    unavailableError + p.getClass().getSimpleName() + \" authentication failed.\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMzgwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r417013802", "bodyText": "This logic is not correct, we only want to catch CredentialUnavailableException here.", "author": "g2vinay", "createdAt": "2020-04-29T01:04:02Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "diffHunk": "@@ -36,29 +38,20 @@\n \n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n-        List<CredentialUnavailableException> exceptions = new ArrayList<>(4);\n+        StringBuilder message = new StringBuilder();\n         return Flux.fromIterable(credentials)\n-                   .flatMap(p -> p.getToken(request).onErrorResume(CredentialUnavailableException.class, t -> {\n-                       exceptions.add(t);\n+                   .flatMap(p -> p.getToken(request).onErrorResume(Exception.class, t -> {", "originalCommit": "6b25f41ea333a41910ae1af960e71654f2a9f368", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5b5c1295b974941deffa3e4704fdeee757d684e2", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\nindex 8ebb7825953..f84920ebbc5 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n\n@@ -40,7 +40,7 @@ public class ChainedTokenCredential implements TokenCredential {\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         StringBuilder message = new StringBuilder();\n         return Flux.fromIterable(credentials)\n-                   .flatMap(p -> p.getToken(request).onErrorResume(Exception.class, t -> {\n+                   .flatMap(p -> p.getToken(request).onErrorResume(CredentialUnavailableException.class, t -> {\n                        if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {\n                            throw logger.logExceptionAsError(new CredentialUnavailableException(\n                                    unavailableError + p.getClass().getSimpleName() + \" authentication failed.\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMzgyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r417013829", "bodyText": "This should throw ClientAuth Exception.", "author": "g2vinay", "createdAt": "2020-04-29T01:04:11Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -219,10 +218,10 @@\n                         throw logger.logExceptionAsError(\n                             new CredentialUnavailableException(\"Please run 'az login' to set up account\"));\n                     }\n-                    throw logger.logExceptionAsError(new ClientAuthenticationException(redactedOutput, null));\n+                    throw logger.logExceptionAsError(new CredentialUnavailableException(redactedOutput));", "originalCommit": "6b25f41ea333a41910ae1af960e71654f2a9f368", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5b5c1295b974941deffa3e4704fdeee757d684e2", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\nindex e226ffa6ac7..fb65d8d0905 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\n\n@@ -218,10 +302,10 @@ public class IdentityClient {\n                         throw logger.logExceptionAsError(\n                             new CredentialUnavailableException(\"Please run 'az login' to set up account\"));\n                     }\n-                    throw logger.logExceptionAsError(new CredentialUnavailableException(redactedOutput));\n+                    throw logger.logExceptionAsError(new ClientAuthenticationException(redactedOutput, null));\n                 } else {\n                     throw logger.logExceptionAsError(\n-                        new CredentialUnavailableException(\"Failed to invoke Azure CLI \"));\n+                        new ClientAuthenticationException(\"Failed to invoke Azure CLI \", null));\n                 }\n             }\n             Map<String, String> objectMap = SERIALIZER_ADAPTER.deserialize(processOutput, Map.class,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMzgzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r417013833", "bodyText": "This should throw Client Auth Exception.", "author": "g2vinay", "createdAt": "2020-04-29T01:04:12Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -219,10 +218,10 @@\n                         throw logger.logExceptionAsError(\n                             new CredentialUnavailableException(\"Please run 'az login' to set up account\"));\n                     }\n-                    throw logger.logExceptionAsError(new ClientAuthenticationException(redactedOutput, null));\n+                    throw logger.logExceptionAsError(new CredentialUnavailableException(redactedOutput));\n                 } else {\n                     throw logger.logExceptionAsError(\n-                        new ClientAuthenticationException(\"Failed to invoke Azure CLI \", null));\n+                        new CredentialUnavailableException(\"Failed to invoke Azure CLI \"));", "originalCommit": "6b25f41ea333a41910ae1af960e71654f2a9f368", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5b5c1295b974941deffa3e4704fdeee757d684e2", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\nindex e226ffa6ac7..fb65d8d0905 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\n\n@@ -218,10 +302,10 @@ public class IdentityClient {\n                         throw logger.logExceptionAsError(\n                             new CredentialUnavailableException(\"Please run 'az login' to set up account\"));\n                     }\n-                    throw logger.logExceptionAsError(new CredentialUnavailableException(redactedOutput));\n+                    throw logger.logExceptionAsError(new ClientAuthenticationException(redactedOutput, null));\n                 } else {\n                     throw logger.logExceptionAsError(\n-                        new CredentialUnavailableException(\"Failed to invoke Azure CLI \"));\n+                        new ClientAuthenticationException(\"Failed to invoke Azure CLI \", null));\n                 }\n             }\n             Map<String, String> objectMap = SERIALIZER_ADAPTER.deserialize(processOutput, Map.class,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxNzg2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r417017862", "bodyText": "We seem to be double logging the exception here.", "author": "g2vinay", "createdAt": "2020-04-29T01:21:21Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "diffHunk": "@@ -36,29 +38,20 @@\n \n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n-        List<CredentialUnavailableException> exceptions = new ArrayList<>(4);\n+        StringBuilder message = new StringBuilder();\n         return Flux.fromIterable(credentials)\n-                   .flatMap(p -> p.getToken(request).onErrorResume(CredentialUnavailableException.class, t -> {\n-                       exceptions.add(t);\n+                   .flatMap(p -> p.getToken(request).onErrorResume(Exception.class, t -> {\n+                       if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {\n+                           throw logger.logExceptionAsError(new CredentialUnavailableException(", "originalCommit": "6b25f41ea333a41910ae1af960e71654f2a9f368", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5b5c1295b974941deffa3e4704fdeee757d684e2", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\nindex 8ebb7825953..f84920ebbc5 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n\n@@ -40,7 +40,7 @@ public class ChainedTokenCredential implements TokenCredential {\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         StringBuilder message = new StringBuilder();\n         return Flux.fromIterable(credentials)\n-                   .flatMap(p -> p.getToken(request).onErrorResume(Exception.class, t -> {\n+                   .flatMap(p -> p.getToken(request).onErrorResume(CredentialUnavailableException.class, t -> {\n                        if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {\n                            throw logger.logExceptionAsError(new CredentialUnavailableException(\n                                    unavailableError + p.getClass().getSimpleName() + \" authentication failed.\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxODI1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r417018254", "bodyText": "A single large message will be unfriendly to read.\nAre we doing this across all languages ?\nBetter to keep the individual exceptions and their stack trace separate", "author": "g2vinay", "createdAt": "2020-04-29T01:23:02Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "diffHunk": "@@ -36,29 +38,20 @@\n \n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n-        List<CredentialUnavailableException> exceptions = new ArrayList<>(4);\n+        StringBuilder message = new StringBuilder();\n         return Flux.fromIterable(credentials)\n-                   .flatMap(p -> p.getToken(request).onErrorResume(CredentialUnavailableException.class, t -> {\n-                       exceptions.add(t);\n+                   .flatMap(p -> p.getToken(request).onErrorResume(Exception.class, t -> {\n+                       if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {\n+                           throw logger.logExceptionAsError(new CredentialUnavailableException(\n+                                   unavailableError + p.getClass().getSimpleName() + \" authentication failed.\",\n+                                   t));\n+                       }\n+                       message.append(t.getMessage()).append(\" \"); ", "originalCommit": "6b25f41ea333a41910ae1af960e71654f2a9f368", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzMjI0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r424132241", "bodyText": "In this pr, I change java error message to java(new), and other languages' error message is now as follow, Do java need change it to java(new)? If you think java need change and the java(new) error message is not good enough, please  change it in the under table , and I will implement.\n\n\n\nScenario\nPython/C#\nJava(Current)\nJava(new)\n\n\n\n\nCredential   Unavailable\nDefaultAzureCredential   failed to retrieve a token from the included credentials.     EnvironmentCredential authentication unavailable. Environment variables are   not fully configured.     ManagedIdentityCredential authentication unavailable. No Managed Identity   endpoint found.     SharedTokenCacheCredential authentication unavailable. No accounts were   found in the cache.\nTried   EnvironmentCredential, ManagedIdentityCredential, SharedTokenCacheCredential,   AzureCliCredential but failed to acquire a token for any of them. Please   verify the environment for the credentials and see more details in the causes   below.\nDefaultAzureCredential failed to retrieve a token from the   included credentials.EnvironmentCredential   authentication unavailable. Environment variables are not fully configured.   ManagedIdentityCredential authentication unavailable. Connection to IMDS   endpoint cannot be established, connect timed out. SharedTokenCacheCredential   authentication unavailable. No accounts were found in the cache.   AzureCliCredential authentication unavailable.\n\n\nAuthenticate   Failed\nDefaultAzureCredential   authentication failed. ---> Azure.Identity.AuthenticationFailedException:   ClientSecretCredential authentication failed. --->   Azure.RequestFailedException: Service request failed.     Status: 400 (Bad Request)   Content:       {\"error\":\"unauthorized_client\",\"error_description\":\"AADSTS700016:   Application with identifier '78e8f606-0950-4210-906d-1d321511c09d' was not   found in the directory 'a7fc734e-9961-43ce-b4de-21b8b38403ba'. This can   happen if the application has not been installed by the administrator of the   tenant or consented to by any user in the tenant. You may have sent your   authentication request to the wrong tenant.\\r\\nTrace ID:   9f3624a7-49ca-4097-a339-780fd4e41600\\r\\nCorrelation ID:   b1acfa40-06cc-42a1-a2f1-d35b94db3628\\r\\nTimestamp: 2020-02-06   01:13:33Z\",\"error_codes\":[700016],\"timestamp\":\"2020-02-06   01:13:33Z\",\"trace_id\":\"9f3624a7-49ca-4097-a339-780fd4e41600\",\"correlation_id\":\"b1acfa40-06cc-42a1-a2f1-d35b94db3628\",\"error_uri\":\"https://login.microsoftonline.com/error?code=700016\"}\nTried   EnvironmentCredential, ManagedIdentityCredential, SharedTokenCacheCredential,   AzureCliCredential but failed to acquire a token for any of them. Please   verify the environment for the credentials and see more details in the causes   below.\nDefaultAzureCredential   authentication failed. ---> EnvironmentCredential authentication failed.   \u2026\u2026.   \u00a0Suppressed:   com.microsoft.aad.msal4j.MsalServiceException: AADSTS90002: Tenant   '72f988bf-86f1-41af-91ab-2d7cd011db41' not found. This may happen if there   are no active subscriptions for the tenant. Check to make sure you have the   correct tenant ID. Check with your subscription administrator.", "author": "Luyunmt", "createdAt": "2020-05-13T02:06:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxODI1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2ODcyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r434368721", "bodyText": "We need to retain the stack traces from individual exception and chain them.\nJava devs use the stack trace to analyze / debug issues.", "author": "g2vinay", "createdAt": "2020-06-03T07:39:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxODI1NA=="}], "type": "inlineReview", "revised_code": {"commit": "5b5c1295b974941deffa3e4704fdeee757d684e2", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\nindex 8ebb7825953..f84920ebbc5 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n\n@@ -40,7 +40,7 @@ public class ChainedTokenCredential implements TokenCredential {\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         StringBuilder message = new StringBuilder();\n         return Flux.fromIterable(credentials)\n-                   .flatMap(p -> p.getToken(request).onErrorResume(Exception.class, t -> {\n+                   .flatMap(p -> p.getToken(request).onErrorResume(CredentialUnavailableException.class, t -> {\n                        if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {\n                            throw logger.logExceptionAsError(new CredentialUnavailableException(\n                                    unavailableError + p.getClass().getSimpleName() + \" authentication failed.\",\n"}}, {"oid": "607d2b7a46f2932c71eee6a7cdb47a6402e05534", "url": "https://github.com/Azure/azure-sdk-for-java/commit/607d2b7a46f2932c71eee6a7cdb47a6402e05534", "message": "Merge branch 'master' into DefaultCredentialErrorMsg", "committedDate": "2020-06-02T01:28:51Z", "type": "commit"}, {"oid": "5b5c1295b974941deffa3e4704fdeee757d684e2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5b5c1295b974941deffa3e4704fdeee757d684e2", "message": "change error messga", "committedDate": "2020-06-02T08:16:16Z", "type": "commit"}, {"oid": "0559340d6bdaac30a13c9a6e3c821b3925277e43", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0559340d6bdaac30a13c9a6e3c821b3925277e43", "message": "remove smoketest change", "committedDate": "2020-06-02T08:23:59Z", "type": "commit"}, {"oid": "38009fd35dea903e40b687e2e0d3f84fe2eb57f6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/38009fd35dea903e40b687e2e0d3f84fe2eb57f6", "message": "remove smoketest change", "committedDate": "2020-06-02T08:26:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk4Mzg4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r433983882", "bodyText": "I believe onErrorMap would be the more appropriate operator to use here since this appear to be more of a mapping operation than resuming (since it just triggers the error stream again).", "author": "alzimmermsft", "createdAt": "2020-06-02T15:51:23Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AzureCliCredential.java", "diffHunk": "@@ -32,6 +32,8 @@\n \n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n-        return identityClient.authenticateWithAzureCli(request);\n+        return identityClient.authenticateWithAzureCli(request)\n+                .onErrorResume(t -> Mono.error(new CredentialUnavailableException(", "originalCommit": "38009fd35dea903e40b687e2e0d3f84fe2eb57f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e282c818792b0e125427916dba8c4ee73b511c3b", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/AzureCliCredential.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/AzureCliCredential.java\nindex 994c35466c5..fbd945622dd 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/AzureCliCredential.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/AzureCliCredential.java\n\n@@ -33,7 +33,7 @@ class AzureCliCredential implements TokenCredential {\n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         return identityClient.authenticateWithAzureCli(request)\n-                .onErrorResume(t -> Mono.error(new CredentialUnavailableException(\n-                        \"AzureCliCredential authentication unavailable.\", t)));\n+                .onErrorMap(t -> new CredentialUnavailableException(\n+                        \"AzureCliCredential authentication unavailable.\", t));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk4NjIyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r433986220", "bodyText": "This should use Reactor's Mono.error instead. Having a throw statement within a reactive stream will cause consumers to need to both catch using try/catch in the code block and add in a Reactor error operator such as onError.", "author": "alzimmermsft", "createdAt": "2020-06-02T15:53:40Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "diffHunk": "@@ -36,29 +38,20 @@\n \n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n-        List<CredentialUnavailableException> exceptions = new ArrayList<>(4);\n+        StringBuilder message = new StringBuilder();\n         return Flux.fromIterable(credentials)\n                    .flatMap(p -> p.getToken(request).onErrorResume(CredentialUnavailableException.class, t -> {\n-                       exceptions.add(t);\n+                       if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {\n+                           throw logger.logExceptionAsError(new CredentialUnavailableException(", "originalCommit": "38009fd35dea903e40b687e2e0d3f84fe2eb57f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxOTYwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r434019609", "bodyText": "Reactor actually handles the case where downstream subscribers throw on flatmap. It'll wrap it and propagate a downstream Mono.error. In general though, we should not explicitly throw.\nhttps://github.com/reactive-streams/reactive-streams-jvm#2.13", "author": "conniey", "createdAt": "2020-06-02T16:39:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk4NjIyMA=="}], "type": "inlineReview", "revised_code": {"commit": "0bc8f78b4c08e51a3f19d45275c46b9ba7a5fa79", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\nindex f84920ebbc5..26485864ad8 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n\n@@ -42,9 +42,9 @@ public class ChainedTokenCredential implements TokenCredential {\n         return Flux.fromIterable(credentials)\n                    .flatMap(p -> p.getToken(request).onErrorResume(CredentialUnavailableException.class, t -> {\n                        if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {\n-                           throw logger.logExceptionAsError(new CredentialUnavailableException(\n+                        return Mono.error(logger.logExceptionAsError(new CredentialUnavailableException(\n                                    unavailableError + p.getClass().getSimpleName() + \" authentication failed.\",\n-                                   t));\n+                                   t)));\n                        }\n                        message.append(t.getMessage()).append(\" \"); \n                        return Mono.empty();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk4ODEzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r433988132", "bodyText": "This code confuses me a bit, first we resume the error, potentially throwing or resuming with empty, then if it is the latter of empty we return an error. Could this be streamlined at all in the earlier code to bypass this operator? Such as using onErrorMap above.", "author": "alzimmermsft", "createdAt": "2020-06-02T15:55:32Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "diffHunk": "@@ -36,29 +38,20 @@\n \n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n-        List<CredentialUnavailableException> exceptions = new ArrayList<>(4);\n+        StringBuilder message = new StringBuilder();\n         return Flux.fromIterable(credentials)\n                    .flatMap(p -> p.getToken(request).onErrorResume(CredentialUnavailableException.class, t -> {\n-                       exceptions.add(t);\n+                       if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {\n+                           throw logger.logExceptionAsError(new CredentialUnavailableException(\n+                                   unavailableError + p.getClass().getSimpleName() + \" authentication failed.\",\n+                                   t));\n+                       }\n+                       message.append(t.getMessage()).append(\" \"); \n                        return Mono.empty();\n                    }), 1)\n                    .next()\n                    .switchIfEmpty(Mono.defer(() -> {\n-\n-                       StringBuilder message = new StringBuilder(\"Tried \"\n-                             + credentials.stream().map(c -> c.getClass().getSimpleName())\n-                                   .collect(Collectors.joining(\", \"))\n-                             + \" but failed to acquire a token for any of them. Please verify the\"\n-                             + \" environment for the credentials\"\n-                             + \" and see more details in the causes below.\");\n-\n-                       // Chain Exceptions.\n-                       CredentialUnavailableException last = exceptions.get(exceptions.size() - 1);\n-                       for (int z = exceptions.size() - 2; z >= 0; z--) {\n-                           CredentialUnavailableException current = exceptions.get(z);\n-                           last = new CredentialUnavailableException(current.getMessage(), last);\n-                       }\n-                       return Mono.error(new CredentialUnavailableException(message.toString(), last));\n+                       return Mono.error(new CredentialUnavailableException(message.toString()));", "originalCommit": "38009fd35dea903e40b687e2e0d3f84fe2eb57f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0bc8f78b4c08e51a3f19d45275c46b9ba7a5fa79", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\nindex f84920ebbc5..26485864ad8 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n\n@@ -42,9 +42,9 @@ public class ChainedTokenCredential implements TokenCredential {\n         return Flux.fromIterable(credentials)\n                    .flatMap(p -> p.getToken(request).onErrorResume(CredentialUnavailableException.class, t -> {\n                        if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {\n-                           throw logger.logExceptionAsError(new CredentialUnavailableException(\n+                        return Mono.error(logger.logExceptionAsError(new CredentialUnavailableException(\n                                    unavailableError + p.getClass().getSimpleName() + \" authentication failed.\",\n-                                   t));\n+                                   t)));\n                        }\n                        message.append(t.getMessage()).append(\" \"); \n                        return Mono.empty();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk4OTA5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r433989094", "bodyText": "onErrorMap?", "author": "alzimmermsft", "createdAt": "2020-06-02T15:56:29Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -822,7 +822,8 @@ private HttpPipeline setupPipeline(HttpClient httpClient) {\n             }\n \n             return true;\n-        });\n+        }).onErrorResume(t -> Mono.error(new CredentialUnavailableException(", "originalCommit": "38009fd35dea903e40b687e2e0d3f84fe2eb57f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0bc8f78b4c08e51a3f19d45275c46b9ba7a5fa79", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\nindex fb65d8d0905..661ccd86aef 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\n\n@@ -813,8 +813,10 @@ public class IdentityClient {\n                 connection.connect();\n             } catch (ConnectException | SecurityException | SocketTimeoutException e) {\n                 throw logger.logExceptionAsError(\n-                    new CredentialUnavailableException(\"Connection to IMDS endpoint cannot be established. \"\n-                                                             + e.getMessage(), e));\n+                    new CredentialUnavailableException(\n+                                \"ManagedIdentityCredential authentication unavailable. \"\n+                                 + \"Connection to IMDS endpoint cannot be established, \"\n+                                 + e.getMessage() + \".\", e));\n             } finally {\n                 if (connection != null) {\n                     connection.disconnect();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk4OTkyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r433989921", "bodyText": "Does the actual error message have an additional space? Could we clean that up if so.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .expectErrorMatches(e -> e instanceof CredentialUnavailableException && e.getMessage().contains(\"Azure  not Login\"))\n          \n          \n            \n                        .expectErrorMatches(e -> e instanceof CredentialUnavailableException && e.getMessage().contains(\"Azure not Login\"))", "author": "alzimmermsft", "createdAt": "2020-06-02T15:57:18Z", "path": "sdk/identity/azure-identity/src/test/java/com/azure/identity/AzureCliCredentialTest.java", "diffHunk": "@@ -77,7 +77,7 @@ public void azureCliCredentialAzNotLogInException() throws Exception {\n         // test\n         AzureCliCredential credential = new AzureCliCredentialBuilder().build();\n         StepVerifier.create(credential.getToken(request))\n-            .expectErrorMatches(e -> e instanceof Exception && \"Azure  not Login\".equals(e.getMessage()))\n+            .expectErrorMatches(e -> e instanceof CredentialUnavailableException && e.getMessage().contains(\"Azure  not Login\"))", "originalCommit": "38009fd35dea903e40b687e2e0d3f84fe2eb57f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0bc8f78b4c08e51a3f19d45275c46b9ba7a5fa79", "chunk": "diff --git a/sdk/identity/azure-identity/src/test/java/com/azure/identity/AzureCliCredentialTest.java b/sdk/identity/azure-identity/src/test/java/com/azure/identity/AzureCliCredentialTest.java\nindex 5eed774ac22..aec5b0da953 100644\n--- a/sdk/identity/azure-identity/src/test/java/com/azure/identity/AzureCliCredentialTest.java\n+++ b/sdk/identity/azure-identity/src/test/java/com/azure/identity/AzureCliCredentialTest.java\n\n@@ -71,13 +71,13 @@ public class AzureCliCredentialTest {\n         // mock\n         IdentityClient identityClient = PowerMockito.mock(IdentityClient.class);\n         when(identityClient.authenticateWithAzureCli(request))\n-                .thenReturn(Mono.error(new Exception(\"Azure  not Login\")));\n+                .thenReturn(Mono.error(new Exception(\"Azure not Login\")));\n         PowerMockito.whenNew(IdentityClient.class).withAnyArguments().thenReturn(identityClient);\n \n         // test\n         AzureCliCredential credential = new AzureCliCredentialBuilder().build();\n         StepVerifier.create(credential.getToken(request))\n-            .expectErrorMatches(e -> e instanceof CredentialUnavailableException && e.getMessage().contains(\"Azure  not Login\"))\n+            .expectErrorMatches(e -> e instanceof CredentialUnavailableException && e.getMessage().contains(\"Azure not Login\"))\n             .verify();\n     }\n     \n"}}, {"oid": "0bc8f78b4c08e51a3f19d45275c46b9ba7a5fa79", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0bc8f78b4c08e51a3f19d45275c46b9ba7a5fa79", "message": "change code according to comments", "committedDate": "2020-06-03T07:24:12Z", "type": "commit"}, {"oid": "e282c818792b0e125427916dba8c4ee73b511c3b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e282c818792b0e125427916dba8c4ee73b511c3b", "message": "change code according to comments", "committedDate": "2020-06-03T07:28:07Z", "type": "commit"}, {"oid": "31b32fb8b4d59f4c1ea140ea72c9c0f837268c50", "url": "https://github.com/Azure/azure-sdk-for-java/commit/31b32fb8b4d59f4c1ea140ea72c9c0f837268c50", "message": "change code according to comments", "committedDate": "2020-06-03T07:34:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2Nzc0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r434367740", "bodyText": "This onErrorMap should be removed.\nWe don't want to map any exception to CredentialUnavailableException.", "author": "g2vinay", "createdAt": "2020-06-03T07:37:15Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/AzureCliCredential.java", "diffHunk": "@@ -32,6 +32,8 @@\n \n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n-        return identityClient.authenticateWithAzureCli(request);\n+        return identityClient.authenticateWithAzureCli(request)\n+                .onErrorMap(t -> new CredentialUnavailableException(", "originalCommit": "e282c818792b0e125427916dba8c4ee73b511c3b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ef65e8c0276055b40216fbe01a0d899b308bd72", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/AzureCliCredential.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/AzureCliCredential.java\nindex fbd945622dd..0e329129d74 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/AzureCliCredential.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/AzureCliCredential.java\n\n@@ -32,8 +32,6 @@ class AzureCliCredential implements TokenCredential {\n \n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n-        return identityClient.authenticateWithAzureCli(request)\n-                .onErrorMap(t -> new CredentialUnavailableException(\n-                        \"AzureCliCredential authentication unavailable.\", t));\n+        return identityClient.authenticateWithAzureCli(request);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2ODEyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r434368129", "bodyText": "This if statement logic is redundant now.\ncan be removed.", "author": "g2vinay", "createdAt": "2020-06-03T07:37:56Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "diffHunk": "@@ -36,29 +38,20 @@\n \n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n-        List<CredentialUnavailableException> exceptions = new ArrayList<>(4);\n+        StringBuilder message = new StringBuilder();\n         return Flux.fromIterable(credentials)\n                    .flatMap(p -> p.getToken(request).onErrorResume(CredentialUnavailableException.class, t -> {\n-                       exceptions.add(t);\n+                       if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {", "originalCommit": "e282c818792b0e125427916dba8c4ee73b511c3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwNDI1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r434404256", "bodyText": "In .net python and js, if authenticate unavaliable, continuing to run follow credential. If authenticate  failed, stop running and print the failed credential and its failed reason.", "author": "Luyunmt", "createdAt": "2020-06-03T08:40:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2ODEyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4ODIwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r435688208", "bodyText": "Yeah, the onErrorResume will only get invoked if CredentialUnavailabeException is thrown.\nA non CredentialUnavailabeException will never reach this block and will automatically break the chain.\nSo, this check in the if statement for a non CredentialUnavailabeException is not needed as a non CredentialUnavailabeException will never enter this block now.", "author": "g2vinay", "createdAt": "2020-06-05T04:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2ODEyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6ef65e8c0276055b40216fbe01a0d899b308bd72", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\nindex 26485864ad8..050fa89aa20 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n\n@@ -42,9 +42,9 @@ public class ChainedTokenCredential implements TokenCredential {\n         return Flux.fromIterable(credentials)\n                    .flatMap(p -> p.getToken(request).onErrorResume(CredentialUnavailableException.class, t -> {\n                        if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {\n-                        return Mono.error(logger.logExceptionAsError(new CredentialUnavailableException(\n+                        return Mono.error(new CredentialUnavailableException(\n                                    unavailableError + p.getClass().getSimpleName() + \" authentication failed.\",\n-                                   t)));\n+                                   t));\n                        }\n                        message.append(t.getMessage()).append(\" \"); \n                        return Mono.empty();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2ODkyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r434368929", "bodyText": "We need to retain the stack traces from individual exception and chain them.\nJava devs use the stack trace to analyze / debug issues.", "author": "g2vinay", "createdAt": "2020-06-03T07:39:29Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "diffHunk": "@@ -36,29 +38,20 @@\n \n     @Override\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n-        List<CredentialUnavailableException> exceptions = new ArrayList<>(4);\n+        StringBuilder message = new StringBuilder();\n         return Flux.fromIterable(credentials)\n                    .flatMap(p -> p.getToken(request).onErrorResume(CredentialUnavailableException.class, t -> {\n-                       exceptions.add(t);\n+                       if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {\n+                        return Mono.error(logger.logExceptionAsError(new CredentialUnavailableException(\n+                                   unavailableError + p.getClass().getSimpleName() + \" authentication failed.\",\n+                                   t)));\n+                       }\n+                       message.append(t.getMessage()).append(\" \"); \n                        return Mono.empty();\n                    }), 1)\n                    .next()\n                    .switchIfEmpty(Mono.defer(() -> {\n-\n-                       StringBuilder message = new StringBuilder(\"Tried \"\n-                             + credentials.stream().map(c -> c.getClass().getSimpleName())\n-                                   .collect(Collectors.joining(\", \"))\n-                             + \" but failed to acquire a token for any of them. Please verify the\"\n-                             + \" environment for the credentials\"\n-                             + \" and see more details in the causes below.\");\n-\n-                       // Chain Exceptions.\n-                       CredentialUnavailableException last = exceptions.get(exceptions.size() - 1);\n-                       for (int z = exceptions.size() - 2; z >= 0; z--) {", "originalCommit": "e282c818792b0e125427916dba8c4ee73b511c3b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ef65e8c0276055b40216fbe01a0d899b308bd72", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\nindex 26485864ad8..050fa89aa20 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n\n@@ -42,9 +42,9 @@ public class ChainedTokenCredential implements TokenCredential {\n         return Flux.fromIterable(credentials)\n                    .flatMap(p -> p.getToken(request).onErrorResume(CredentialUnavailableException.class, t -> {\n                        if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {\n-                        return Mono.error(logger.logExceptionAsError(new CredentialUnavailableException(\n+                        return Mono.error(new CredentialUnavailableException(\n                                    unavailableError + p.getClass().getSimpleName() + \" authentication failed.\",\n-                                   t)));\n+                                   t));\n                        }\n                        message.append(t.getMessage()).append(\" \"); \n                        return Mono.empty();\n"}}, {"oid": "6ef65e8c0276055b40216fbe01a0d899b308bd72", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6ef65e8c0276055b40216fbe01a0d899b308bd72", "message": "change code according to comments", "committedDate": "2020-06-03T08:35:32Z", "type": "commit"}, {"oid": "73d67984bbf9b1f1972a285335773cdf97f101ce", "url": "https://github.com/Azure/azure-sdk-for-java/commit/73d67984bbf9b1f1972a285335773cdf97f101ce", "message": "change code according to comments", "committedDate": "2020-06-03T08:44:43Z", "type": "commit"}, {"oid": "2e1d10b7d6a0cb7b5b009ebe810ca06c8bde5ae9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2e1d10b7d6a0cb7b5b009ebe810ca06c8bde5ae9", "message": "change code according to comments", "committedDate": "2020-06-03T08:47:42Z", "type": "commit"}, {"oid": "2bab62540cc288dc638295bdb5b45485fb6d3f17", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2bab62540cc288dc638295bdb5b45485fb6d3f17", "message": "change code according to comments", "committedDate": "2020-06-03T09:06:23Z", "type": "commit"}, {"oid": "ac15f1a60685941fa56ffb9f25c163f2e6269df1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ac15f1a60685941fa56ffb9f25c163f2e6269df1", "message": "change code according to comments", "committedDate": "2020-06-03T09:48:47Z", "type": "commit"}, {"oid": "ac8295bf774dec5959a0692f356f60eb36336a1e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ac8295bf774dec5959a0692f356f60eb36336a1e", "message": "change code according to comments", "committedDate": "2020-06-04T01:04:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4ODYwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r435688609", "bodyText": "WHat does the error message with stack trace look like now ?\nCan you post the sample output here ?", "author": "g2vinay", "createdAt": "2020-06-05T04:51:27Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "diffHunk": "@@ -39,26 +40,24 @@\n         List<CredentialUnavailableException> exceptions = new ArrayList<>(4);\n         return Flux.fromIterable(credentials)\n                    .flatMap(p -> p.getToken(request).onErrorResume(CredentialUnavailableException.class, t -> {\n+                       if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {\n+                           return Mono.error(new CredentialUnavailableException(\n+                                   unavailableError + p.getClass().getSimpleName() + \" authentication failed.\",\n+                                   t));\n+                       }\n                        exceptions.add(t);\n                        return Mono.empty();\n                    }), 1)\n                    .next()\n                    .switchIfEmpty(Mono.defer(() -> {\n-\n-                       StringBuilder message = new StringBuilder(\"Tried \"\n-                             + credentials.stream().map(c -> c.getClass().getSimpleName())\n-                                   .collect(Collectors.joining(\", \"))\n-                             + \" but failed to acquire a token for any of them. Please verify the\"\n-                             + \" environment for the credentials\"\n-                             + \" and see more details in the causes below.\");\n-\n                        // Chain Exceptions.\n                        CredentialUnavailableException last = exceptions.get(exceptions.size() - 1);\n                        for (int z = exceptions.size() - 2; z >= 0; z--) {\n                            CredentialUnavailableException current = exceptions.get(z);\n-                           last = new CredentialUnavailableException(current.getMessage(), last);\n+                           last = new CredentialUnavailableException(current.getMessage() + \" \" + last.getMessage(),\n+                                last.getCause());\n                        }\n-                       return Mono.error(new CredentialUnavailableException(message.toString(), last));\n+                       return Mono.error(last);", "originalCommit": "ac8295bf774dec5959a0692f356f60eb36336a1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzNTU4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r436435581", "bodyText": "Exception in thread \"main\" java.lang.RuntimeException: Max retries 3 times exceeded. Error Details: EnvironmentCredential authentication unavailable. Environment variables are not fully configured.\nManagedIdentityCredential authentication unavailable. Connection to IMDS endpoint cannot be established, Network is unreachable: connect.\nSharedTokenCacheCredential authentication unavailable. No accounts were found in the cache.\nIntelliJ Authentication not available. Please log in with Azure Tools for IntelliJ plugin in the IDE.\nFailed to read Vs Code credentials from Windows Credential API.\nAzureCliCredential authentication unavailable. Azure CLI not installed\nat com.azure.core.http.policy.RetryPolicy.lambda$attemptAsync$1(RetryPolicy.java:119)\nat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:88)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)\nat reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)\nat reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)\nat reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)\nat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:1994)\nat reactor.core.publisher.Operators.error(Operators.java:196)\nat reactor.core.publisher.MonoError.subscribe(MonoError.java:52)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onComplete(FluxSwitchIfEmpty.java:75)\nat reactor.core.publisher.MonoNext$NextSubscriber.onComplete(MonoNext.java:96)\nat reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:838)\nat reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:600)\nat reactor.core.publisher.FluxFlatMap$FlatMapMain.innerComplete(FluxFlatMap.java:909)\nat reactor.core.publisher.FluxFlatMap$FlatMapInner.onComplete(FluxFlatMap.java:1013)\nat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:1989)\nat reactor.core.publisher.Operators.complete(Operators.java:135)\nat reactor.core.publisher.MonoEmpty.subscribe(MonoEmpty.java:45)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)\nat reactor.core.publisher.FluxMap$MapSubscriber.onError(FluxMap.java:126)\nat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:1994)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:135)\nat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)\nat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1755)\nat reactor.core.publisher.MonoCompletionStage.lambda$subscribe$0(MonoCompletionStage.java:86)\nat java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:859)\nat java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:837)\nat java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)\nat java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1705)\nat java.base/java.util.concurrent.CompletableFuture$AsyncSupply.exec(CompletableFuture.java:1692)\nat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)\nat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020)\nat java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656)\nat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594)\nat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:177)\nSuppressed: java.lang.Exception: #block terminated with an error\nat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\nat reactor.core.publisher.Mono.block(Mono.java:1678)\nat com.azure.security.keyvault.secrets.SecretClient.setSecretWithResponse(SecretClient.java:113)\nat com.azure.security.keyvault.secrets.SecretClient.setSecret(SecretClient.java:93)\nat com.azure.identity.Test.main(Test.java:31)\nCaused by: com.azure.identity.CredentialUnavailableException: EnvironmentCredential authentication unavailable. Environment variables are not fully configured.\nManagedIdentityCredential authentication unavailable. Connection to IMDS endpoint cannot be established, Network is unreachable: connect.\nSharedTokenCacheCredential authentication unavailable. No accounts were found in the cache.\nIntelliJ Authentication not available. Please log in with Azure Tools for IntelliJ plugin in the IDE.\nFailed to read Vs Code credentials from Windows Credential API.\nAzureCliCredential authentication unavailable. Azure CLI not installed\nat com.azure.identity.ChainedTokenCredential.lambda$2(ChainedTokenCredential.java:58)\nat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:44)\n... 28 more", "author": "Luyunmt", "createdAt": "2020-06-08T02:53:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4ODYwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzNTY3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r436435674", "bodyText": "if failed\uff1a\nException in thread \"main\" java.lang.RuntimeException: Max retries 3 times exceeded. Error Details: DefaultAzureCredential authentication failed. ---> EnvironmentCredential authentication failed. Error Details:AADSTS90002: Tenant '72f988bf-86f1-41af-91ab-2d7cd011db46' not found. This may happen if there are no active subscriptions for the tenant. Check to\nmake sure you have the correct tenant ID. Check with your subscription administrator.\nTrace ID: 43ffc9ad-f468-4665-ac3a-14a278a98600\nCorrelation ID: e3d3e754-89f0-4839-870c-57e6aba9a5f0\nTimestamp: 2020-06-08 01:49:43Z\nat com.azure.core.http.policy.RetryPolicy.lambda$attemptAsync$1(RetryPolicy.java:119)\nat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:88)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:165)\nat reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:185)\nat reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:251)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)\nat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:251)\nat reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)\nat reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:894)\nat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:1994)\nat reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:87)\nat reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:834)\nat reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:600)\nat reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:580)\nat reactor.core.publisher.FluxFlatMap$FlatMapMain.innerError(FluxFlatMap.java:855)\nat reactor.core.publisher.FluxFlatMap$FlatMapInner.onError(FluxFlatMap.java:1006)\nat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:100)\nat reactor.core.publisher.Operators.error(Operators.java:196)\nat reactor.core.publisher.MonoError.subscribe(MonoError.java:52)\nat reactor.core.publisher.Mono.subscribe(Mono.java:4218)\nat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:97)\nat reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onError(FluxMapFuseable.java:134)\nat reactor.core.publisher.MonoCompletionStage.lambda$subscribe$0(MonoCompletionStage.java:80)\nat java.base/java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:859)\nat java.base/java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:837)\nat java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)\nat java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1705)\nat java.base/java.util.concurrent.CompletableFuture$AsyncSupply.exec(CompletableFuture.java:1692)\nat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)\nat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020)\nat java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656)\nat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594)\nat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:177)\nSuppressed: java.lang.Exception: #block terminated with an error\nat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)\nat reactor.core.publisher.Mono.block(Mono.java:1678)\nat com.azure.security.keyvault.secrets.SecretClient.setSecretWithResponse(SecretClient.java:113)\nat com.azure.security.keyvault.secrets.SecretClient.setSecret(SecretClient.java:93)\nat com.azure.identity.Test.main(Test.java:31)\nCaused by: com.azure.identity.CredentialUnavailableException: DefaultAzureCredential authentication failed. ---> EnvironmentCredential authentication failed. Error Details:AADSTS90002: Tenant '72f988bf-86f1-41af-91ab-2d7cd011db46' not found. This may happen if there are no active subscriptions for the tenant. Check to make sure you have the correct tenant\nID. Check with your subscription administrator.\nTrace ID: 43ffc9ad-f468-4665-ac3a-14a278a98600\nCorrelation ID: e3d3e754-89f0-4839-870c-57e6aba9a5f0\nTimestamp: 2020-06-08 01:49:43Z\nat com.azure.identity.ChainedTokenCredential.lambda$1(ChainedTokenCredential.java:44)\nat reactor.core.publisher.Mono.lambda$onErrorResume$31(Mono.java:3360)\nat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:88)\n... 12 more\nCaused by: com.microsoft.aad.msal4j.MsalServiceException: AADSTS90002: Tenant '72f988bf-86f1-41af-91ab-2d7cd011db46' not found. This may happen if there are no active subscriptions for the tenant. Check to make sure you have the correct tenant ID. Check with your subscription administrator.\nTrace ID: 43ffc9ad-f468-4665-ac3a-14a278a98600\nCorrelation ID: e3d3e754-89f0-4839-870c-57e6aba9a5f0\nTimestamp: 2020-06-08 01:49:43Z\nat com.microsoft.aad.msal4j.MsalServiceExceptionFactory.fromHttpResponse(MsalServiceExceptionFactory.java:43)\nat com.microsoft.aad.msal4j.TokenRequestExecutor.createAuthenticationResultFromOauthHttpResponse(TokenRequestExecutor.java:81)\nat com.microsoft.aad.msal4j.TokenRequestExecutor.executeTokenRequest(TokenRequestExecutor.java:36)\nat com.microsoft.aad.msal4j.ClientApplicationBase.acquireTokenCommon(ClientApplicationBase.java:92)\nat com.microsoft.aad.msal4j.AcquireTokenByAuthorizationGrantSupplier.execute(AcquireTokenByAuthorizationGrantSupplier.java:52)\nat com.microsoft.aad.msal4j.AuthenticationResultSupplier.get(AuthenticationResultSupplier.java:59)\nat com.microsoft.aad.msal4j.AuthenticationResultSupplier.get(AuthenticationResultSupplier.java:17)\nat java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1700)\n... 6 more", "author": "Luyunmt", "createdAt": "2020-06-08T02:53:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4ODYwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5911c67a9839892c375abed8b4f0d17ed34c1adf", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\nindex ade94eb1e87..35bbf153f49 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n\n@@ -39,13 +39,14 @@ public class ChainedTokenCredential implements TokenCredential {\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         List<CredentialUnavailableException> exceptions = new ArrayList<>(4);\n         return Flux.fromIterable(credentials)\n-                   .flatMap(p -> p.getToken(request).onErrorResume(CredentialUnavailableException.class, t -> {\n+                   .flatMap(p -> p.getToken(request).onErrorResume(Exception.class, t -> {\n                        if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {\n                            return Mono.error(new CredentialUnavailableException(\n-                                   unavailableError + p.getClass().getSimpleName() + \" authentication failed.\",\n+                                   unavailableError + p.getClass().getSimpleName()\n+                                   + \" authentication failed. Error Details: \" + t.getMessage(),\n                                    t));\n                        }\n-                       exceptions.add(t);\n+                       exceptions.add((CredentialUnavailableException) t);\n                        return Mono.empty();\n                    }), 1)\n                    .next()\n"}}, {"oid": "5911c67a9839892c375abed8b4f0d17ed34c1adf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5911c67a9839892c375abed8b4f0d17ed34c1adf", "message": "change in chainedtokencredential", "committedDate": "2020-06-08T02:47:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE0MDUwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9022#discussion_r439140509", "bodyText": "Why are we wrapping a non Credential Unavailable Exception into a Credential Unavailable Exception ?\nIt should be thrown as it is, to indicate a genuine exception even though credential is available to be used.\nThe distinction will help to debug customer issues too in future.", "author": "g2vinay", "createdAt": "2020-06-12T00:16:47Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java", "diffHunk": "@@ -38,27 +39,26 @@\n     public Mono<AccessToken> getToken(TokenRequestContext request) {\n         List<CredentialUnavailableException> exceptions = new ArrayList<>(4);\n         return Flux.fromIterable(credentials)\n-                   .flatMap(p -> p.getToken(request).onErrorResume(CredentialUnavailableException.class, t -> {\n-                       exceptions.add(t);\n+                   .flatMap(p -> p.getToken(request).onErrorResume(Exception.class, t -> {\n+                       if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {\n+                           return Mono.error(new CredentialUnavailableException(", "originalCommit": "5911c67a9839892c375abed8b4f0d17ed34c1adf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f389bb0c56209fb47edf8bc89cf7043ed3e16809", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\nindex 35bbf153f49..043b67fd6d4 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/ChainedTokenCredential.java\n\n@@ -41,10 +43,10 @@ public class ChainedTokenCredential implements TokenCredential {\n         return Flux.fromIterable(credentials)\n                    .flatMap(p -> p.getToken(request).onErrorResume(Exception.class, t -> {\n                        if (!t.getClass().getSimpleName().equals(\"CredentialUnavailableException\")) {\n-                           return Mono.error(new CredentialUnavailableException(\n-                                   unavailableError + p.getClass().getSimpleName()\n-                                   + \" authentication failed. Error Details: \" + t.getMessage(),\n-                                   t));\n+                           return Mono.error(new ClientAuthenticationException(\n+                            unavailableError + p.getClass().getSimpleName()\n+                            + \" authentication failed. Error Details: \" + t.getMessage(),\n+                            null, t));\n                        }\n                        exceptions.add((CredentialUnavailableException) t);\n                        return Mono.empty();\n"}}, {"oid": "f389bb0c56209fb47edf8bc89cf7043ed3e16809", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f389bb0c56209fb47edf8bc89cf7043ed3e16809", "message": "change according to comments", "committedDate": "2020-06-15T06:57:14Z", "type": "commit"}, {"oid": "90445bea2d64a17ae594d7b37acb0289cd5d241f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/90445bea2d64a17ae594d7b37acb0289cd5d241f", "message": "Merge branch 'master' into DefaultCredentialErrorMsg", "committedDate": "2020-06-15T06:59:42Z", "type": "commit"}, {"oid": "83e1c442191a1b55366cf7876595deaa08202024", "url": "https://github.com/Azure/azure-sdk-for-java/commit/83e1c442191a1b55366cf7876595deaa08202024", "message": "remove test", "committedDate": "2020-06-15T07:35:18Z", "type": "commit"}, {"oid": "91a22431c776dafadcbfaf49ac14b2105cfecac1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/91a22431c776dafadcbfaf49ac14b2105cfecac1", "message": "Merge branch 'DefaultCredentialErrorMsg' of https://github.com/Luyunmt/azure-sdk-for-java into DefaultCredentialErrorMsg", "committedDate": "2020-06-15T07:36:49Z", "type": "commit"}]}