{"pr_number": 18354, "pr_title": "Support conditional access policy in obo flow.", "pr_createdAt": "2020-12-25T02:29:14Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/18354", "timeline": [{"oid": "b18f2500ce128c0a6be07ad2d8f781496df8beb9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b18f2500ce128c0a6be07ad2d8f781496df8beb9", "message": "fix failureHandle not error info", "committedDate": "2020-12-25T02:27:55Z", "type": "commit"}, {"oid": "0254e884d3eede4ad0ab46d7bf106e15cfb9aefb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0254e884d3eede4ad0ab46d7bf106e15cfb9aefb", "message": "fix failureHandle not error info", "committedDate": "2020-12-31T02:39:40Z", "type": "commit"}, {"oid": "b2b72f7b767af2ad0af3196d13f7afd86c5810da", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b2b72f7b767af2ad0af3196d13f7afd86c5810da", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into fix_not_error_info\n\n# Conflicts:\n#\tsdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADAuthenticationFailureHandler.java", "committedDate": "2021-01-11T01:50:29Z", "type": "commit"}, {"oid": "72654ff58db0f9529ba6ecf36778db0385d2a8c1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/72654ff58db0f9529ba6ecf36778db0385d2a8c1", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into fix_not_error_info", "committedDate": "2021-01-11T03:00:37Z", "type": "commit"}, {"oid": "230ca9dca52f4ce63bab84e79f1dc4b48af81958", "url": "https://github.com/Azure/azure-sdk-for-java/commit/230ca9dca52f4ce63bab84e79f1dc4b48af81958", "message": "fix failureHandle not error info", "committedDate": "2021-01-11T03:15:33Z", "type": "commit"}, {"oid": "726a95e2c08ded0c4d04f51dd16b23e0c8d5b428", "url": "https://github.com/Azure/azure-sdk-for-java/commit/726a95e2c08ded0c4d04f51dd16b23e0c8d5b428", "message": "code format for checkStyle", "committedDate": "2021-01-11T10:09:55Z", "type": "commit"}, {"oid": "33ac445954190fa9f8655650819859ee58c0a223", "url": "https://github.com/Azure/azure-sdk-for-java/commit/33ac445954190fa9f8655650819859ee58c0a223", "message": "code format for checkStyle", "committedDate": "2021-01-12T01:52:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1NzgwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555457800", "bodyText": "It's better to write a util class like:\npublic class ContitionalAccessPolicyUtil {\n  public static String toConditionalAccessPolicyBody(String claims) {...}\n  public static boolean isConditionalAccessPolicyBody(String body) {...}\n  // other util methods\n}", "author": "chenrujun", "createdAt": "2021-01-12T01:46:19Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -87,6 +95,28 @@ public AADOAuth2OboAuthorizedClientRepository(ClientRegistrationRepository repos\n             request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n             return (T) oAuth2AuthorizedClient;\n         } catch (Throwable throwable) {\n+            String claims = Optional.of(throwable)\n+                                    .map(Throwable::getCause)\n+                                    .filter(e -> e instanceof MsalInteractionRequiredException)\n+                                    .map(e -> (MsalInteractionRequiredException) e)\n+                                    .map(MsalInteractionRequiredException::claims)\n+                                    .orElse(null);\n+\n+            if (claims != null) {\n+                ServletRequestAttributes attr =\n+                    (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();\n+                HttpServletResponse response = attr.getResponse();\n+                response.setStatus(HttpStatus.FORBIDDEN.value());\n+                try {\n+                    ServletOutputStream outputStream = response.getOutputStream();\n+                    String result =\n+                        Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS + claims + Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS;", "originalCommit": "230ca9dca52f4ce63bab84e79f1dc4b48af81958", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33ac445954190fa9f8655650819859ee58c0a223", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\nindex 4e40e86097a..895630ea9ea 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\n\n@@ -95,6 +96,7 @@ public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedC\n             request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n             return (T) oAuth2AuthorizedClient;\n         } catch (Throwable throwable) {\n+            // Handle conditional access policy for obo flow.\n             String claims = Optional.of(throwable)\n                                     .map(Throwable::getCause)\n                                     .filter(e -> e instanceof MsalInteractionRequiredException)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1Nzk1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555457953", "bodyText": "Use LOGGER.error(...) instead of e.printStackTrace()", "author": "chenrujun", "createdAt": "2021-01-12T01:46:50Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -87,6 +95,28 @@ public AADOAuth2OboAuthorizedClientRepository(ClientRegistrationRepository repos\n             request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n             return (T) oAuth2AuthorizedClient;\n         } catch (Throwable throwable) {\n+            String claims = Optional.of(throwable)\n+                                    .map(Throwable::getCause)\n+                                    .filter(e -> e instanceof MsalInteractionRequiredException)\n+                                    .map(e -> (MsalInteractionRequiredException) e)\n+                                    .map(MsalInteractionRequiredException::claims)\n+                                    .orElse(null);\n+\n+            if (claims != null) {\n+                ServletRequestAttributes attr =\n+                    (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();\n+                HttpServletResponse response = attr.getResponse();\n+                response.setStatus(HttpStatus.FORBIDDEN.value());\n+                try {\n+                    ServletOutputStream outputStream = response.getOutputStream();\n+                    String result =\n+                        Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS + claims + Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS;\n+                    outputStream.write(result.getBytes());\n+                    outputStream.flush();\n+                } catch (IOException e) {\n+                    e.printStackTrace();", "originalCommit": "230ca9dca52f4ce63bab84e79f1dc4b48af81958", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33ac445954190fa9f8655650819859ee58c0a223", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\nindex 4e40e86097a..895630ea9ea 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\n\n@@ -95,6 +96,7 @@ public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedC\n             request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n             return (T) oAuth2AuthorizedClient;\n         } catch (Throwable throwable) {\n+            // Handle conditional access policy for obo flow.\n             String claims = Optional.of(throwable)\n                                     .map(Throwable::getCause)\n                                     .filter(e -> e instanceof MsalInteractionRequiredException)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1ODQ2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555458465", "bodyText": "Is this redundant because we already have @ExceptionHandler(AADConditionalAccessException.class).", "author": "chenrujun", "createdAt": "2021-01-12T01:48:23Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -121,6 +136,21 @@ public static int resourceServerCount(Set<String> scopes) {\n         return result;\n     }\n \n+    @ControllerAdvice\n+    public class GlobalExceptionAdvice {\n+        @ExceptionHandler(AADConditionalAccessException.class)\n+        public void handleUserNotFound(HttpServletRequest request, HttpServletResponse response, Exception e) throws IOException {\n+            if(e instanceof AADConditionalAccessException){", "originalCommit": "230ca9dca52f4ce63bab84e79f1dc4b48af81958", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33ac445954190fa9f8655650819859ee58c0a223", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\nindex 2fbefee8ded..78e23875621 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\n\n@@ -136,18 +130,28 @@ public class AADWebAppConfiguration {\n         return result;\n     }\n \n+    /**\n+     * Handle conditional access error in obo flow.\n+     */\n     @ControllerAdvice\n-    public class GlobalExceptionAdvice {\n+    public static class GlobalExceptionAdvice {\n         @ExceptionHandler(AADConditionalAccessException.class)\n-        public void handleUserNotFound(HttpServletRequest request, HttpServletResponse response, Exception e) throws IOException {\n-            if(e instanceof AADConditionalAccessException){\n-                response.setStatus(302);\n-                SecurityContextHolder.clearContext();\n-                AADConditionalAccessException conditionalAccessException =  (AADConditionalAccessException)e;\n-                request.getSession().setAttribute(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS, conditionalAccessException.getClaims());\n-                String redirectUrl = request.getRequestURL().toString();\n-                response.sendRedirect(redirectUrl);\n-            }\n+        public void handleUserNotFound(HttpServletRequest request,\n+                                       HttpServletResponse response, Exception exception) {\n+            Optional.of(exception)\n+                    .filter(e -> e instanceof AADConditionalAccessException)\n+                    .map(e -> (AADConditionalAccessException) e)\n+                    .ifPresent(aadConditionalAccessException -> {\n+                        response.setStatus(302);\n+                        SecurityContextHolder.clearContext();\n+                        request.getSession().setAttribute(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS,\n+                            aadConditionalAccessException.getClaims());\n+                        try {\n+                            response.sendRedirect(request.getRequestURL().toString());\n+                        } catch (IOException e) {\n+                            e.printStackTrace();\n+                        }\n+                    });\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1ODkzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555458930", "bodyText": "As discussed, we do not provide this bean.", "author": "chenrujun", "createdAt": "2021-01-12T01:49:51Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -196,4 +226,76 @@ protected void configure(HttpSecurity http) throws Exception {\n         }\n     }\n \n+\n+    @Bean\n+    public OAuth2AuthorizedClientManager authorizedClientManager(", "originalCommit": "230ca9dca52f4ce63bab84e79f1dc4b48af81958", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33ac445954190fa9f8655650819859ee58c0a223", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\nindex 2fbefee8ded..78e23875621 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\n\n@@ -227,39 +231,7 @@ public class AADWebAppConfiguration {\n     }\n \n \n-    @Bean\n-    public OAuth2AuthorizedClientManager authorizedClientManager(\n-        ClientRegistrationRepository clientRegistrationRepository,\n-        OAuth2AuthorizedClientRepository authorizedClientRepository) {\n-\n-        OAuth2AuthorizedClientProvider authorizedClientProvider =\n-            OAuth2AuthorizedClientProviderBuilder.builder()\n-                                                 .authorizationCode()\n-                                                 .refreshToken()\n-                                                 .clientCredentials()\n-                                                 .password()\n-                                                 .build();\n-\n-        DefaultOAuth2AuthorizedClientManager authorizedClientManager =\n-            new DefaultOAuth2AuthorizedClientManager(\n-                clientRegistrationRepository, authorizedClientRepository);\n-        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n-\n-        return authorizedClientManager;\n-    }\n-\n-    @Bean\n-    public static WebClient webClient(OAuth2AuthorizedClientManager authorizedClientManager) {\n-        ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Client =\n-            new ServletOAuth2AuthorizedClientExchangeFilterFunction(authorizedClientManager);\n-        return WebClient.builder()\n-                        .apply(oauth2Client.oauth2Configuration())\n-                        .filter(errorHandlingFilter())\n-                        .build();\n-    }\n-\n-\n-    private static ExchangeFilterFunction errorHandlingFilter() {\n+    public static ExchangeFilterFunction webClientErrorHandlingFilter() {\n         return ExchangeFilterFunction.ofResponseProcessor(clientResponse -> {\n                 if (clientResponse.statusCode().is4xxClientError()) {\n                     return clientResponse.bodyToMono(String.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1OTAzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555459036", "bodyText": "Same here, we do not provide this bean.", "author": "chenrujun", "createdAt": "2021-01-12T01:50:10Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -196,4 +226,76 @@ protected void configure(HttpSecurity http) throws Exception {\n         }\n     }\n \n+\n+    @Bean\n+    public OAuth2AuthorizedClientManager authorizedClientManager(\n+        ClientRegistrationRepository clientRegistrationRepository,\n+        OAuth2AuthorizedClientRepository authorizedClientRepository) {\n+\n+        OAuth2AuthorizedClientProvider authorizedClientProvider =\n+            OAuth2AuthorizedClientProviderBuilder.builder()\n+                                                 .authorizationCode()\n+                                                 .refreshToken()\n+                                                 .clientCredentials()\n+                                                 .password()\n+                                                 .build();\n+\n+        DefaultOAuth2AuthorizedClientManager authorizedClientManager =\n+            new DefaultOAuth2AuthorizedClientManager(\n+                clientRegistrationRepository, authorizedClientRepository);\n+        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n+\n+        return authorizedClientManager;\n+    }\n+\n+    @Bean", "originalCommit": "230ca9dca52f4ce63bab84e79f1dc4b48af81958", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33ac445954190fa9f8655650819859ee58c0a223", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\nindex 2fbefee8ded..78e23875621 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\n\n@@ -227,39 +231,7 @@ public class AADWebAppConfiguration {\n     }\n \n \n-    @Bean\n-    public OAuth2AuthorizedClientManager authorizedClientManager(\n-        ClientRegistrationRepository clientRegistrationRepository,\n-        OAuth2AuthorizedClientRepository authorizedClientRepository) {\n-\n-        OAuth2AuthorizedClientProvider authorizedClientProvider =\n-            OAuth2AuthorizedClientProviderBuilder.builder()\n-                                                 .authorizationCode()\n-                                                 .refreshToken()\n-                                                 .clientCredentials()\n-                                                 .password()\n-                                                 .build();\n-\n-        DefaultOAuth2AuthorizedClientManager authorizedClientManager =\n-            new DefaultOAuth2AuthorizedClientManager(\n-                clientRegistrationRepository, authorizedClientRepository);\n-        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n-\n-        return authorizedClientManager;\n-    }\n-\n-    @Bean\n-    public static WebClient webClient(OAuth2AuthorizedClientManager authorizedClientManager) {\n-        ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Client =\n-            new ServletOAuth2AuthorizedClientExchangeFilterFunction(authorizedClientManager);\n-        return WebClient.builder()\n-                        .apply(oauth2Client.oauth2Configuration())\n-                        .filter(errorHandlingFilter())\n-                        .build();\n-    }\n-\n-\n-    private static ExchangeFilterFunction errorHandlingFilter() {\n+    public static ExchangeFilterFunction webClientErrorHandlingFilter() {\n         return ExchangeFilterFunction.ofResponseProcessor(clientResponse -> {\n                 if (clientResponse.statusCode().is4xxClientError()) {\n                     return clientResponse.bodyToMono(String.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1OTQyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555459428", "bodyText": "toAADConditionalAccessException", "author": "chenrujun", "createdAt": "2021-01-12T01:51:35Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -196,4 +226,76 @@ protected void configure(HttpSecurity http) throws Exception {\n         }\n     }\n \n+\n+    @Bean\n+    public OAuth2AuthorizedClientManager authorizedClientManager(\n+        ClientRegistrationRepository clientRegistrationRepository,\n+        OAuth2AuthorizedClientRepository authorizedClientRepository) {\n+\n+        OAuth2AuthorizedClientProvider authorizedClientProvider =\n+            OAuth2AuthorizedClientProviderBuilder.builder()\n+                                                 .authorizationCode()\n+                                                 .refreshToken()\n+                                                 .clientCredentials()\n+                                                 .password()\n+                                                 .build();\n+\n+        DefaultOAuth2AuthorizedClientManager authorizedClientManager =\n+            new DefaultOAuth2AuthorizedClientManager(\n+                clientRegistrationRepository, authorizedClientRepository);\n+        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n+\n+        return authorizedClientManager;\n+    }\n+\n+    @Bean\n+    public static WebClient webClient(OAuth2AuthorizedClientManager authorizedClientManager) {\n+        ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Client =\n+            new ServletOAuth2AuthorizedClientExchangeFilterFunction(authorizedClientManager);\n+        return WebClient.builder()\n+                        .apply(oauth2Client.oauth2Configuration())\n+                        .filter(errorHandlingFilter())\n+                        .build();\n+    }\n+\n+\n+    private static ExchangeFilterFunction errorHandlingFilter() {\n+        return ExchangeFilterFunction.ofResponseProcessor(clientResponse -> {\n+                if (clientResponse.statusCode().is4xxClientError()) {\n+                    return clientResponse.bodyToMono(String.class)\n+                                         .flatMap(errorBody -> {\n+                                             if (isConditionalAccessError(errorBody)) {\n+                                                 return Mono.error(convertToException(errorBody));\n+                                             }\n+                                             return Mono.just(clientResponse);\n+                                         });\n+                }\n+                return Mono.just(clientResponse);\n+            }\n+        );\n+    }\n+\n+\n+    private static boolean isConditionalAccessError(String body) {\n+        return body.startsWith(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS);\n+    }\n+\n+    private static AADConditionalAccessException convertToException(String body) {", "originalCommit": "230ca9dca52f4ce63bab84e79f1dc4b48af81958", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33ac445954190fa9f8655650819859ee58c0a223", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\nindex 2fbefee8ded..78e23875621 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\n\n@@ -227,39 +231,7 @@ public class AADWebAppConfiguration {\n     }\n \n \n-    @Bean\n-    public OAuth2AuthorizedClientManager authorizedClientManager(\n-        ClientRegistrationRepository clientRegistrationRepository,\n-        OAuth2AuthorizedClientRepository authorizedClientRepository) {\n-\n-        OAuth2AuthorizedClientProvider authorizedClientProvider =\n-            OAuth2AuthorizedClientProviderBuilder.builder()\n-                                                 .authorizationCode()\n-                                                 .refreshToken()\n-                                                 .clientCredentials()\n-                                                 .password()\n-                                                 .build();\n-\n-        DefaultOAuth2AuthorizedClientManager authorizedClientManager =\n-            new DefaultOAuth2AuthorizedClientManager(\n-                clientRegistrationRepository, authorizedClientRepository);\n-        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n-\n-        return authorizedClientManager;\n-    }\n-\n-    @Bean\n-    public static WebClient webClient(OAuth2AuthorizedClientManager authorizedClientManager) {\n-        ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Client =\n-            new ServletOAuth2AuthorizedClientExchangeFilterFunction(authorizedClientManager);\n-        return WebClient.builder()\n-                        .apply(oauth2Client.oauth2Configuration())\n-                        .filter(errorHandlingFilter())\n-                        .build();\n-    }\n-\n-\n-    private static ExchangeFilterFunction errorHandlingFilter() {\n+    public static ExchangeFilterFunction webClientErrorHandlingFilter() {\n         return ExchangeFilterFunction.ofResponseProcessor(clientResponse -> {\n                 if (clientResponse.statusCode().is4xxClientError()) {\n                     return clientResponse.bodyToMono(String.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1OTc5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555459796", "bodyText": "Can we set it to private, because it's not used outside.", "author": "chenrujun", "createdAt": "2021-01-12T01:52:50Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -196,4 +226,76 @@ protected void configure(HttpSecurity http) throws Exception {\n         }\n     }\n \n+\n+    @Bean\n+    public OAuth2AuthorizedClientManager authorizedClientManager(\n+        ClientRegistrationRepository clientRegistrationRepository,\n+        OAuth2AuthorizedClientRepository authorizedClientRepository) {\n+\n+        OAuth2AuthorizedClientProvider authorizedClientProvider =\n+            OAuth2AuthorizedClientProviderBuilder.builder()\n+                                                 .authorizationCode()\n+                                                 .refreshToken()\n+                                                 .clientCredentials()\n+                                                 .password()\n+                                                 .build();\n+\n+        DefaultOAuth2AuthorizedClientManager authorizedClientManager =\n+            new DefaultOAuth2AuthorizedClientManager(\n+                clientRegistrationRepository, authorizedClientRepository);\n+        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n+\n+        return authorizedClientManager;\n+    }\n+\n+    @Bean\n+    public static WebClient webClient(OAuth2AuthorizedClientManager authorizedClientManager) {\n+        ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Client =\n+            new ServletOAuth2AuthorizedClientExchangeFilterFunction(authorizedClientManager);\n+        return WebClient.builder()\n+                        .apply(oauth2Client.oauth2Configuration())\n+                        .filter(errorHandlingFilter())\n+                        .build();\n+    }\n+\n+\n+    private static ExchangeFilterFunction errorHandlingFilter() {\n+        return ExchangeFilterFunction.ofResponseProcessor(clientResponse -> {\n+                if (clientResponse.statusCode().is4xxClientError()) {\n+                    return clientResponse.bodyToMono(String.class)\n+                                         .flatMap(errorBody -> {\n+                                             if (isConditionalAccessError(errorBody)) {\n+                                                 return Mono.error(convertToException(errorBody));\n+                                             }\n+                                             return Mono.just(clientResponse);\n+                                         });\n+                }\n+                return Mono.just(clientResponse);\n+            }\n+        );\n+    }\n+\n+\n+    private static boolean isConditionalAccessError(String body) {\n+        return body.startsWith(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS);\n+    }\n+\n+    private static AADConditionalAccessException convertToException(String body) {\n+        String claims = body.split(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS)[1];\n+        return new AADConditionalAccessException(claims);\n+    }\n+\n+    protected static class AADConditionalAccessException extends RuntimeException{", "originalCommit": "230ca9dca52f4ce63bab84e79f1dc4b48af81958", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33ac445954190fa9f8655650819859ee58c0a223", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\nindex 2fbefee8ded..78e23875621 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\n\n@@ -227,39 +231,7 @@ public class AADWebAppConfiguration {\n     }\n \n \n-    @Bean\n-    public OAuth2AuthorizedClientManager authorizedClientManager(\n-        ClientRegistrationRepository clientRegistrationRepository,\n-        OAuth2AuthorizedClientRepository authorizedClientRepository) {\n-\n-        OAuth2AuthorizedClientProvider authorizedClientProvider =\n-            OAuth2AuthorizedClientProviderBuilder.builder()\n-                                                 .authorizationCode()\n-                                                 .refreshToken()\n-                                                 .clientCredentials()\n-                                                 .password()\n-                                                 .build();\n-\n-        DefaultOAuth2AuthorizedClientManager authorizedClientManager =\n-            new DefaultOAuth2AuthorizedClientManager(\n-                clientRegistrationRepository, authorizedClientRepository);\n-        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n-\n-        return authorizedClientManager;\n-    }\n-\n-    @Bean\n-    public static WebClient webClient(OAuth2AuthorizedClientManager authorizedClientManager) {\n-        ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Client =\n-            new ServletOAuth2AuthorizedClientExchangeFilterFunction(authorizedClientManager);\n-        return WebClient.builder()\n-                        .apply(oauth2Client.oauth2Configuration())\n-                        .filter(errorHandlingFilter())\n-                        .build();\n-    }\n-\n-\n-    private static ExchangeFilterFunction errorHandlingFilter() {\n+    public static ExchangeFilterFunction webClientErrorHandlingFilter() {\n         return ExchangeFilterFunction.ofResponseProcessor(clientResponse -> {\n                 if (clientResponse.statusCode().is4xxClientError()) {\n                     return clientResponse.bodyToMono(String.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ1OTgzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555459836", "bodyText": "private, too.", "author": "chenrujun", "createdAt": "2021-01-12T01:52:59Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -196,4 +226,76 @@ protected void configure(HttpSecurity http) throws Exception {\n         }\n     }\n \n+\n+    @Bean\n+    public OAuth2AuthorizedClientManager authorizedClientManager(\n+        ClientRegistrationRepository clientRegistrationRepository,\n+        OAuth2AuthorizedClientRepository authorizedClientRepository) {\n+\n+        OAuth2AuthorizedClientProvider authorizedClientProvider =\n+            OAuth2AuthorizedClientProviderBuilder.builder()\n+                                                 .authorizationCode()\n+                                                 .refreshToken()\n+                                                 .clientCredentials()\n+                                                 .password()\n+                                                 .build();\n+\n+        DefaultOAuth2AuthorizedClientManager authorizedClientManager =\n+            new DefaultOAuth2AuthorizedClientManager(\n+                clientRegistrationRepository, authorizedClientRepository);\n+        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n+\n+        return authorizedClientManager;\n+    }\n+\n+    @Bean\n+    public static WebClient webClient(OAuth2AuthorizedClientManager authorizedClientManager) {\n+        ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Client =\n+            new ServletOAuth2AuthorizedClientExchangeFilterFunction(authorizedClientManager);\n+        return WebClient.builder()\n+                        .apply(oauth2Client.oauth2Configuration())\n+                        .filter(errorHandlingFilter())\n+                        .build();\n+    }\n+\n+\n+    private static ExchangeFilterFunction errorHandlingFilter() {\n+        return ExchangeFilterFunction.ofResponseProcessor(clientResponse -> {\n+                if (clientResponse.statusCode().is4xxClientError()) {\n+                    return clientResponse.bodyToMono(String.class)\n+                                         .flatMap(errorBody -> {\n+                                             if (isConditionalAccessError(errorBody)) {\n+                                                 return Mono.error(convertToException(errorBody));\n+                                             }\n+                                             return Mono.just(clientResponse);\n+                                         });\n+                }\n+                return Mono.just(clientResponse);\n+            }\n+        );\n+    }\n+\n+\n+    private static boolean isConditionalAccessError(String body) {\n+        return body.startsWith(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS);\n+    }\n+\n+    private static AADConditionalAccessException convertToException(String body) {\n+        String claims = body.split(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS)[1];\n+        return new AADConditionalAccessException(claims);\n+    }\n+\n+    protected static class AADConditionalAccessException extends RuntimeException{\n+        String claims;", "originalCommit": "230ca9dca52f4ce63bab84e79f1dc4b48af81958", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76b9b15821b9a96a296e35977a51749fdb90fbb6", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\nindex 2fbefee8ded..e8dc2934980 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\n\n@@ -227,75 +235,15 @@ public class AADWebAppConfiguration {\n     }\n \n \n-    @Bean\n-    public OAuth2AuthorizedClientManager authorizedClientManager(\n-        ClientRegistrationRepository clientRegistrationRepository,\n-        OAuth2AuthorizedClientRepository authorizedClientRepository) {\n-\n-        OAuth2AuthorizedClientProvider authorizedClientProvider =\n-            OAuth2AuthorizedClientProviderBuilder.builder()\n-                                                 .authorizationCode()\n-                                                 .refreshToken()\n-                                                 .clientCredentials()\n-                                                 .password()\n-                                                 .build();\n-\n-        DefaultOAuth2AuthorizedClientManager authorizedClientManager =\n-            new DefaultOAuth2AuthorizedClientManager(\n-                clientRegistrationRepository, authorizedClientRepository);\n-        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n-\n-        return authorizedClientManager;\n-    }\n-\n-    @Bean\n-    public static WebClient webClient(OAuth2AuthorizedClientManager authorizedClientManager) {\n-        ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Client =\n-            new ServletOAuth2AuthorizedClientExchangeFilterFunction(authorizedClientManager);\n-        return WebClient.builder()\n-                        .apply(oauth2Client.oauth2Configuration())\n-                        .filter(errorHandlingFilter())\n-                        .build();\n-    }\n-\n-\n-    private static ExchangeFilterFunction errorHandlingFilter() {\n-        return ExchangeFilterFunction.ofResponseProcessor(clientResponse -> {\n-                if (clientResponse.statusCode().is4xxClientError()) {\n-                    return clientResponse.bodyToMono(String.class)\n-                                         .flatMap(errorBody -> {\n-                                             if (isConditionalAccessError(errorBody)) {\n-                                                 return Mono.error(convertToException(errorBody));\n-                                             }\n-                                             return Mono.just(clientResponse);\n-                                         });\n-                }\n-                return Mono.just(clientResponse);\n-            }\n+    public static ExchangeFilterFunction conditionalAccessExchangeFilterFunction() {\n+        return ExchangeFilterFunction.ofResponseProcessor(clientResponse ->\n+            clientResponse.bodyToMono(String.class)\n+                          .flatMap(httpBody -> {\n+                              if (ConditionalAccessException.isConditionAccessException(httpBody)) {\n+                                  return Mono.error(ConditionalAccessException.fromHttpBody(httpBody));\n+                              }\n+                              return Mono.just(clientResponse);\n+                          })\n         );\n     }\n-\n-\n-    private static boolean isConditionalAccessError(String body) {\n-        return body.startsWith(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS);\n-    }\n-\n-    private static AADConditionalAccessException convertToException(String body) {\n-        String claims = body.split(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS)[1];\n-        return new AADConditionalAccessException(claims);\n-    }\n-\n-    protected static class AADConditionalAccessException extends RuntimeException{\n-        String claims;\n-        protected AADConditionalAccessException(String claims){\n-            this.claims = claims;\n-        }\n-        public String getClaims() {\n-            return claims;\n-        }\n-\n-        public void setClaims(String claims) {\n-            this.claims = claims;\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ2MDQ0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555460445", "bodyText": "Rename sharedObject to filter.", "author": "chenrujun", "createdAt": "2021-01-12T01:54:34Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -87,4 +92,15 @@ protected OAuth2AuthorizationRequestResolver requestResolver() {\n     protected AuthenticationFailureHandler failureHandler() {\n         return new AADAuthenticationFailureHandler();\n     }\n+\n+    /**\n+     * Fix the default error info not displayed when the setting failureHandler in configure\n+     */\n+    private final static class AADHttpConfigurer extends AbstractHttpConfigurer<AADHttpConfigurer, HttpSecurity>{\n+        @Override\n+        public void init(HttpSecurity http) {\n+            DefaultLoginPageGeneratingFilter sharedObject = http.getSharedObject(DefaultLoginPageGeneratingFilter.class);", "originalCommit": "230ca9dca52f4ce63bab84e79f1dc4b48af81958", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76b9b15821b9a96a296e35977a51749fdb90fbb6", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java\nindex c0683b88287..97c3131d3ec 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java\n\n@@ -96,11 +95,12 @@ public abstract class AADWebSecurityConfigurerAdapter extends WebSecurityConfigu\n     /**\n      * Fix the default error info not displayed when the setting failureHandler in configure\n      */\n-    private final static class AADHttpConfigurer extends AbstractHttpConfigurer<AADHttpConfigurer, HttpSecurity>{\n+    private static final class AADHttpConfigurer extends AbstractHttpConfigurer<AADHttpConfigurer, HttpSecurity> {\n         @Override\n         public void init(HttpSecurity http) {\n-            DefaultLoginPageGeneratingFilter sharedObject = http.getSharedObject(DefaultLoginPageGeneratingFilter.class);\n-            sharedObject.setFailureUrl(DEFAULT_FAILURE_URL);\n+            DefaultLoginPageGeneratingFilter filter =\n+                http.getSharedObject(DefaultLoginPageGeneratingFilter.class);\n+            filter.setFailureUrl(\"/login?error\");\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ2MDc4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r555460788", "bodyText": "Delete DEFAULT_FAILURE_URL, use \"/login?error\" directly, because it only used one time.", "author": "chenrujun", "createdAt": "2021-01-12T01:55:42Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -31,6 +33,7 @@\n  */\n public abstract class AADWebSecurityConfigurerAdapter extends WebSecurityConfigurerAdapter {\n \n+    private static final String DEFAULT_FAILURE_URL = \"/login?error\";", "originalCommit": "230ca9dca52f4ce63bab84e79f1dc4b48af81958", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "76b9b15821b9a96a296e35977a51749fdb90fbb6", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java\nindex c0683b88287..97c3131d3ec 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java\n\n@@ -28,12 +28,11 @@ import java.net.URI;\n import java.util.Arrays;\n \n /**\n- * Abstract configuration class, used to make AzureClientRegistrationRepository\n- * and AuthzCodeGrantRequestEntityConverter take effect.\n+ * Abstract configuration class, used to make AzureClientRegistrationRepository and AuthzCodeGrantRequestEntityConverter\n+ * take effect.\n  */\n public abstract class AADWebSecurityConfigurerAdapter extends WebSecurityConfigurerAdapter {\n \n-    private static final String DEFAULT_FAILURE_URL = \"/login?error\";\n     @Autowired\n     private AADWebAppClientRegistrationRepository repo;\n     @Autowired\n"}}, {"oid": "76b9b15821b9a96a296e35977a51749fdb90fbb6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/76b9b15821b9a96a296e35977a51749fdb90fbb6", "message": "add webClient handle conditional access policy.", "committedDate": "2021-01-12T09:40:29Z", "type": "commit"}, {"oid": "24a7bfddba8a21a01175568bf36ec3328e75bf06", "url": "https://github.com/Azure/azure-sdk-for-java/commit/24a7bfddba8a21a01175568bf36ec3328e75bf06", "message": "add dependency to azure-spring-boot-starter-active-directory-pom", "committedDate": "2021-01-13T02:27:58Z", "type": "commit"}, {"oid": "6f3250cc0c53a43390206d5870b206c9dd453b8b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6f3250cc0c53a43390206d5870b206c9dd453b8b", "message": "add webflux to external_dependency.", "committedDate": "2021-01-13T06:01:08Z", "type": "commit"}, {"oid": "694239305f9a4bae1604f665c45cef2a562284a6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/694239305f9a4bae1604f665c45cef2a562284a6", "message": "Modify note.", "committedDate": "2021-01-13T06:20:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM3MjM0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r556372342", "bodyText": "I think we need more content in java doc to explain how we use ConditionalAccessException to handle condition access in obo flow.", "author": "chenrujun", "createdAt": "2021-01-13T09:19:25Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/ConditionalAccessException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.autoconfigure.aad.Constants;\n+\n+/**\n+ * Create ConditionalAccessException to handle conditionalAccess in obo flow.\n+ */\n+public final class ConditionalAccessException extends RuntimeException {", "originalCommit": "694239305f9a4bae1604f665c45cef2a562284a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk2MDc4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r556960787", "bodyText": "Just like Flux:", "author": "chenrujun", "createdAt": "2021-01-14T00:14:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM3MjM0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "34bd03ccf29f13da9e660c61e06ccd709d10fbaf", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/ConditionalAccessException.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/ConditionalAccessException.java\nindex 01b4dfd47fb..bcbd12ee7fb 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/ConditionalAccessException.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/ConditionalAccessException.java\n\n@@ -2,10 +2,51 @@\n // Licensed under the MIT License.\n package com.azure.spring.aad.webapp;\n \n+import com.azure.spring.aad.webapi.AADOAuth2OboAuthorizedClientRepository;\n import com.azure.spring.autoconfigure.aad.Constants;\n+import org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest;\n \n /**\n- * Create ConditionalAccessException to handle conditionalAccess in obo flow.\n+ * An exception handle Conditional Access in On-Behalf-Of flow.\n+ *\n+ * <p>\n+ * On-Behalf-Of allows you to exchange an access token that your API received for an access token to another API. For\n+ * better understanding On-Behalf-Of, the reference documentation can help us. See the <a\n+ * href=\"https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow\">Microsoft identity\n+ * platform and OAuth 2.0 On-Behalf-Of flow</a>\n+ *\n+ * <p>\n+ * Conditional Access is the tool used by Azure Active Directory to bring signals together, to make decisions, and\n+ * enforce organizational policies. The reference documentation is\n+ * <a href=\"https://docs.microsoft.com/en-us/azure/active-directory/conditional-access\">Azure AD Conditional Access\n+ * documentation</a>\n+ *\n+ * <p>\n+ * <img src=\"../doc-files/ConditionalAccessException.svg\" alt=\"\">\n+ *\n+ * <p>\n+ * Step 3,4,5,6  describe Conditional Access(such as multi-factor authentication, see the <a *\n+ * href=\"https://docs.microsoft.com/en-us/azure/active-directory/conditional-access/howto-conditional-access-policy\n+ * -all-users-mfa\">Conditional\n+ * Access: Require MFA for all users</a>) in obo flow:\n+ *\n+ * <p>\n+ * step 3:  {@link AADOAuth2OboAuthorizedClientRepository} sends the OBO Request to AAD.\n+ *\n+ * <p>\n+ * step 4 : AAD Conditional Access occurs and return an error(The claims field in this error is the reauthorization\n+ * certificate).\n+ *\n+ * <p>\n+ * step 5: {@link AADOAuth2OboAuthorizedClientRepository}get the claims field create a response by {@link\n+ * #claimsToHttpBody(String)}.\n+ *\n+ * <p>\n+ * step 6: {@link AADWebAppConfiguration#conditionalAccessExchangeFilterFunction()} receives the response and convert it\n+ * into {@link ConditionalAccessException}.  {@link AADWebAppConfiguration.GlobalExceptionAdvice} can catch this\n+ * exception and put the claims field into session. then clear authorization information and redirect. At last {@link\n+ * AADOAuth2AuthorizationRequestResolver} intercepts authorization-url, put claims into {@link\n+ * OAuth2AuthorizationRequest} to reauthorize.\n  */\n public final class ConditionalAccessException extends RuntimeException {\n     private final String claims;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM3MzY5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r556373699", "bodyText": "Use Assert.notNull() instead of assert. assert should not be used in production code.\nRefs: https://stackoverflow.com/questions/2758224/what-does-the-java-assert-keyword-do-and-when-should-it-be-used", "author": "chenrujun", "createdAt": "2021-01-13T09:21:39Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -87,6 +96,29 @@ public AADOAuth2OboAuthorizedClientRepository(ClientRegistrationRepository repos\n             request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n             return (T) oAuth2AuthorizedClient;\n         } catch (Throwable throwable) {\n+            // Handle conditional access policy for obo flow.\n+            String claims = Optional.of(throwable)\n+                                    .map(Throwable::getCause)\n+                                    .filter(e -> e instanceof MsalInteractionRequiredException)\n+                                    .map(e -> (MsalInteractionRequiredException) e)\n+                                    .map(MsalInteractionRequiredException::claims)\n+                                    .orElse(null);\n+\n+            if (claims != null) {\n+                ServletRequestAttributes attr =\n+                    (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();\n+                HttpServletResponse response = attr.getResponse();\n+                assert response != null;", "originalCommit": "694239305f9a4bae1604f665c45cef2a562284a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "502384fe139aa6fb3acfbd402dd296cbc6c570f9", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\nindex 4c7fcd9e7c4..8f125a0337f 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\n\n@@ -95,9 +97,9 @@ public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedC\n                 oAuth2AccessToken);\n             request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n             return (T) oAuth2AuthorizedClient;\n-        } catch (Throwable throwable) {\n+        } catch (ExecutionException exception) {\n             // Handle conditional access policy for obo flow.\n-            String claims = Optional.of(throwable)\n+            String claims = Optional.of(exception)\n                                     .map(Throwable::getCause)\n                                     .filter(e -> e instanceof MsalInteractionRequiredException)\n                                     .map(e -> (MsalInteractionRequiredException) e)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM3NTc4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r556375786", "bodyText": "Please confirm there is no side-effect of clearContent.", "author": "chenrujun", "createdAt": "2021-01-13T09:24:53Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -121,6 +135,30 @@ public static int resourceServerCount(Set<String> scopes) {\n         return result;\n     }\n \n+    /**\n+     * Handle conditional access error in obo flow.\n+     */\n+    @ControllerAdvice\n+    public static class GlobalExceptionAdvice {\n+        @ExceptionHandler(ConditionalAccessException.class)\n+        public void handleUserNotFound(HttpServletRequest request,\n+                                       HttpServletResponse response, Exception exception) {\n+            Optional.of(exception)\n+                    .map(e -> (ConditionalAccessException) e)\n+                    .ifPresent(aadConditionalAccessException -> {\n+                        response.setStatus(302);\n+                        SecurityContextHolder.clearContext();", "originalCommit": "694239305f9a4bae1604f665c45cef2a562284a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d3ec7ba7601aedb6a03fd8c3805b6ac2f32e4b6", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\nindex e8dc2934980..cce8ff675d9 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\n\n@@ -139,7 +139,7 @@ public class AADWebAppConfiguration {\n      * Handle conditional access error in obo flow.\n      */\n     @ControllerAdvice\n-    public static class GlobalExceptionAdvice {\n+    public static class ConditionalAccessExceptionAdvice {\n         @ExceptionHandler(ConditionalAccessException.class)\n         public void handleUserNotFound(HttpServletRequest request,\n                                        HttpServletResponse response, Exception exception) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM3NjU0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r556376540", "bodyText": "This is not used now? I think we should update the webapp sample", "author": "chenrujun", "createdAt": "2021-01-13T09:25:55Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -196,4 +234,16 @@ protected void configure(HttpSecurity http) throws Exception {\n         }\n     }\n \n+\n+    public static ExchangeFilterFunction conditionalAccessExchangeFilterFunction() {", "originalCommit": "694239305f9a4bae1604f665c45cef2a562284a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d3ec7ba7601aedb6a03fd8c3805b6ac2f32e4b6", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\nindex e8dc2934980..cce8ff675d9 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\n\n@@ -235,7 +235,7 @@ public class AADWebAppConfiguration {\n     }\n \n \n-    public static ExchangeFilterFunction conditionalAccessExchangeFilterFunction() {\n+    public static ExchangeFilterFunction conditionalAccessExceptionFilterFunction() {\n         return ExchangeFilterFunction.ofResponseProcessor(clientResponse ->\n             clientResponse.bodyToMono(String.class)\n                           .flatMap(httpBody -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTM3OTcxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r559379714", "bodyText": "Rename this method.", "author": "chenrujun", "createdAt": "2021-01-18T08:11:05Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -121,6 +135,30 @@ public static int resourceServerCount(Set<String> scopes) {\n         return result;\n     }\n \n+    /**\n+     * Handle conditional access error in obo flow.\n+     */\n+    @ControllerAdvice\n+    public static class GlobalExceptionAdvice {\n+        @ExceptionHandler(ConditionalAccessException.class)\n+        public void handleUserNotFound(HttpServletRequest request,", "originalCommit": "694239305f9a4bae1604f665c45cef2a562284a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d3ec7ba7601aedb6a03fd8c3805b6ac2f32e4b6", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\nindex e8dc2934980..cce8ff675d9 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\n\n@@ -139,7 +139,7 @@ public class AADWebAppConfiguration {\n      * Handle conditional access error in obo flow.\n      */\n     @ControllerAdvice\n-    public static class GlobalExceptionAdvice {\n+    public static class ConditionalAccessExceptionAdvice {\n         @ExceptionHandler(ConditionalAccessException.class)\n         public void handleUserNotFound(HttpServletRequest request,\n                                        HttpServletResponse response, Exception exception) {\n"}}, {"oid": "df4f6e2b2597644a216a40b2ff312d7afb33074d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/df4f6e2b2597644a216a40b2ff312d7afb33074d", "message": "add svg for ConditionalAccessException", "committedDate": "2021-01-19T02:55:55Z", "type": "commit"}, {"oid": "34bd03ccf29f13da9e660c61e06ccd709d10fbaf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/34bd03ccf29f13da9e660c61e06ccd709d10fbaf", "message": "add notes for ConditionalAccess.", "committedDate": "2021-01-19T02:57:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDAxMjA5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r560012098", "bodyText": "Please do not catch throwable. Just catch the exception we care about.", "author": "chenrujun", "createdAt": "2021-01-19T08:59:39Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -87,6 +96,29 @@ public AADOAuth2OboAuthorizedClientRepository(ClientRegistrationRepository repos\n             request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n             return (T) oAuth2AuthorizedClient;\n         } catch (Throwable throwable) {", "originalCommit": "34bd03ccf29f13da9e660c61e06ccd709d10fbaf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "502384fe139aa6fb3acfbd402dd296cbc6c570f9", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\nindex 4c7fcd9e7c4..8f125a0337f 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\n\n@@ -95,9 +97,9 @@ public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedC\n                 oAuth2AccessToken);\n             request.setAttribute(oboAuthorizedClientAttributeName, (T) oAuth2AuthorizedClient);\n             return (T) oAuth2AuthorizedClient;\n-        } catch (Throwable throwable) {\n+        } catch (ExecutionException exception) {\n             // Handle conditional access policy for obo flow.\n-            String claims = Optional.of(throwable)\n+            String claims = Optional.of(exception)\n                                     .map(Throwable::getCause)\n                                     .filter(e -> e instanceof MsalInteractionRequiredException)\n                                     .map(e -> (MsalInteractionRequiredException) e)\n"}}, {"oid": "0d3ec7ba7601aedb6a03fd8c3805b6ac2f32e4b6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0d3ec7ba7601aedb6a03fd8c3805b6ac2f32e4b6", "message": "update sample for ConditionalAccess", "committedDate": "2021-01-19T10:15:31Z", "type": "commit"}, {"oid": "502384fe139aa6fb3acfbd402dd296cbc6c570f9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/502384fe139aa6fb3acfbd402dd296cbc6c570f9", "message": "resolve conversation", "committedDate": "2021-01-21T02:45:46Z", "type": "commit"}, {"oid": "8a9e6bcdc1969527796fe8a3ab565d41243268ac", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8a9e6bcdc1969527796fe8a3ab565d41243268ac", "message": "resolve conversation", "committedDate": "2021-01-21T02:49:06Z", "type": "commit"}, {"oid": "14ffa212dba1dbab96649c644e8a39e33ef0ed09", "url": "https://github.com/Azure/azure-sdk-for-java/commit/14ffa212dba1dbab96649c644e8a39e33ef0ed09", "message": "update webapp sample and webclient filter", "committedDate": "2021-01-25T02:48:23Z", "type": "commit"}, {"oid": "96a4e27761dc041bd5ae91459d7e716eb64912eb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/96a4e27761dc041bd5ae91459d7e716eb64912eb", "message": "add filter for conditionalAccess.", "committedDate": "2021-02-02T03:11:23Z", "type": "commit"}, {"oid": "7f1945cf8892a656b951cd90032a214ea068d728", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7f1945cf8892a656b951cd90032a214ea068d728", "message": "resolve conflicts.", "committedDate": "2021-02-02T06:43:43Z", "type": "commit"}, {"oid": "fc4da854ad63916a66745deb4faac4712f012896", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fc4da854ad63916a66745deb4faac4712f012896", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into fix_not_error_info", "committedDate": "2021-02-02T06:43:59Z", "type": "commit"}, {"oid": "162d5ac96f3d0437db0633e1267ed4a55622d78c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/162d5ac96f3d0437db0633e1267ed4a55622d78c", "message": "update ConditionalAccessException.java", "committedDate": "2021-02-02T10:45:29Z", "type": "commit"}, {"oid": "f103badcd9ff176a811f8cdb8467abe91bb7c7a7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f103badcd9ff176a811f8cdb8467abe91bb7c7a7", "message": "fix code style.", "committedDate": "2021-02-03T01:27:18Z", "type": "commit"}, {"oid": "47daa01d5a1500ae6ef3703185fcd59128895511", "url": "https://github.com/Azure/azure-sdk-for-java/commit/47daa01d5a1500ae6ef3703185fcd59128895511", "message": "when re-authentication, update all clients.", "committedDate": "2021-02-04T06:15:20Z", "type": "commit"}, {"oid": "23964083213bd1f0738a9384612c34d9fa65b8e5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/23964083213bd1f0738a9384612c34d9fa65b8e5", "message": "remove ConditionalAccessException.java", "committedDate": "2021-02-09T11:20:10Z", "type": "commit"}, {"oid": "809661d7708d8f9574c546780d3fcbcbd0b32e2f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/809661d7708d8f9574c546780d3fcbcbd0b32e2f", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into fix_not_error_info\n\n# Conflicts:\n#\tsdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "committedDate": "2021-02-10T01:34:23Z", "type": "commit"}, {"oid": "bd0c5cdbaa7c3ca1ded10e74e74ef4b54cbc5afe", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bd0c5cdbaa7c3ca1ded10e74e74ef4b54cbc5afe", "message": "resolve conflicts.", "committedDate": "2021-02-10T03:06:36Z", "type": "commit"}, {"oid": "9da07e22aca4a0b63e60a89d064e62cf82f4195c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9da07e22aca4a0b63e60a89d064e62cf82f4195c", "message": "Solve pipeline problems.", "committedDate": "2021-02-10T03:24:51Z", "type": "commit"}, {"oid": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009", "message": "Solve pipeline problems.", "committedDate": "2021-02-18T02:41:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAyODk0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579028942", "bodyText": "No need to break line.", "author": "chenrujun", "createdAt": "2021-02-19T09:03:42Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -130,4 +161,16 @@ private String interceptAuthorizationUri(String authorizationUri) {\n         }\n         return null;\n     }\n+\n+    void replyForbiddenWithWwwAuthenticateHeader(HttpServletResponse response,\n+                                                 MsalInteractionRequiredException exception) {\n+        Map<String, Object> parameters = new LinkedHashMap<>();\n+        response.setStatus(HttpStatus.FORBIDDEN.value());\n+        parameters.put(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS,\n+            exception.claims());", "originalCommit": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTYzNjk2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579636962", "bodyText": "Done.", "author": "han-gao", "createdAt": "2021-02-20T10:26:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAyODk0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "707c22dc5114a964dc8985f9b8e899ddd11df962", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\nindex a5fe871a6df..9580e09effa 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\n\n@@ -166,8 +166,7 @@ public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedC\n                                                  MsalInteractionRequiredException exception) {\n         Map<String, Object> parameters = new LinkedHashMap<>();\n         response.setStatus(HttpStatus.FORBIDDEN.value());\n-        parameters.put(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS,\n-            exception.claims());\n+        parameters.put(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS, exception.claims());\n         parameters.put(OAuth2ParameterNames.ERROR, OAuth2ErrorCodes.INVALID_TOKEN);\n         parameters.put(OAuth2ParameterNames.ERROR_DESCRIPTION, \"The resource server requires higher privileges than \"\n             + \"provided by the access token\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAyOTI1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579029252", "bodyText": "Does MsalInteractionRequiredException  have error message? Maybe we can use the error message instead.", "author": "chenrujun", "createdAt": "2021-02-19T09:04:16Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -130,4 +161,16 @@ private String interceptAuthorizationUri(String authorizationUri) {\n         }\n         return null;\n     }\n+\n+    void replyForbiddenWithWwwAuthenticateHeader(HttpServletResponse response,\n+                                                 MsalInteractionRequiredException exception) {\n+        Map<String, Object> parameters = new LinkedHashMap<>();\n+        response.setStatus(HttpStatus.FORBIDDEN.value());\n+        parameters.put(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS,\n+            exception.claims());\n+        parameters.put(OAuth2ParameterNames.ERROR, OAuth2ErrorCodes.INVALID_TOKEN);\n+        parameters.put(OAuth2ParameterNames.ERROR_DESCRIPTION, \"The resource server requires higher privileges than \"\n+            + \"provided by the access token\");", "originalCommit": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTYzNjk0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579636949", "bodyText": "I have tired this, but we need to put the error message in the response header, the error message of MsalInteractionRequiredException will fail in addHeader(String name, String value) API.\nI analyze the error message of MsalInteractionRequiredException and I think there's no useful information, so I customize a message as a description.", "author": "han-gao", "createdAt": "2021-02-20T10:26:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAyOTI1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "707c22dc5114a964dc8985f9b8e899ddd11df962", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\nindex a5fe871a6df..9580e09effa 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\n\n@@ -166,8 +166,7 @@ public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedC\n                                                  MsalInteractionRequiredException exception) {\n         Map<String, Object> parameters = new LinkedHashMap<>();\n         response.setStatus(HttpStatus.FORBIDDEN.value());\n-        parameters.put(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS,\n-            exception.claims());\n+        parameters.put(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS, exception.claims());\n         parameters.put(OAuth2ParameterNames.ERROR, OAuth2ErrorCodes.INVALID_TOKEN);\n         parameters.put(OAuth2ParameterNames.ERROR_DESCRIPTION, \"The resource server requires higher privileges than \"\n             + \"provided by the access token\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAyOTkwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579029905", "bodyText": "Web API -> resource-server", "author": "chenrujun", "createdAt": "2021-02-19T09:05:18Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.aad.webapi.AADOAuth2OboAuthorizedClientRepository;\n+import com.azure.spring.autoconfigure.aad.Constants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.reactive.function.client.WebClientResponseException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Handle the {@link WebClientResponseException} in On-Behalf-Of flow.\n+ *\n+ * <p>\n+ * When the Web API needs re-acquire token(The request requires higher privileges than provided by the access token in", "originalCommit": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTYzNjkzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579636936", "bodyText": "Done", "author": "han-gao", "createdAt": "2021-02-20T10:26:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAyOTkwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "707c22dc5114a964dc8985f9b8e899ddd11df962", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java\nindex a16686656c7..bb0a1343967 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java\n\n@@ -3,7 +3,6 @@\n \n package com.azure.spring.aad.webapp;\n \n-import com.azure.spring.aad.webapi.AADOAuth2OboAuthorizedClientRepository;\n import com.azure.spring.autoconfigure.aad.Constants;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzMDY0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579030645", "bodyText": "Web APP -> web-application.", "author": "chenrujun", "createdAt": "2021-02-19T09:06:29Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.aad.webapi.AADOAuth2OboAuthorizedClientRepository;\n+import com.azure.spring.autoconfigure.aad.Constants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.reactive.function.client.WebClientResponseException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Handle the {@link WebClientResponseException} in On-Behalf-Of flow.\n+ *\n+ * <p>\n+ * When the Web API needs re-acquire token(The request requires higher privileges than provided by the access token in\n+ * On-Behalf-Of flow.), it can sent a 403 with information in the WWW-Authenticate header to web client ,web client\n+ * will throw {@link WebClientResponseException}, Web APP can handle this exception to challenge the user.", "originalCommit": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTYzNjkzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579636932", "bodyText": "Done.", "author": "han-gao", "createdAt": "2021-02-20T10:26:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzMDY0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "707c22dc5114a964dc8985f9b8e899ddd11df962", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java\nindex a16686656c7..bb0a1343967 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java\n\n@@ -3,7 +3,6 @@\n \n package com.azure.spring.aad.webapp;\n \n-import com.azure.spring.aad.webapi.AADOAuth2OboAuthorizedClientRepository;\n import com.azure.spring.autoconfigure.aad.Constants;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzMzY0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579033643", "bodyText": "The above 2 lines of code execute 2 times, could you please remove the duplicate?\nFor example:\nconditionalAccessClaims = ...;\nif (conditionalAccessClaims != null ) {\n  handleConditionalAccess(...);\n}", "author": "chenrujun", "createdAt": "2021-02-19T09:11:06Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.aad.webapi.AADOAuth2OboAuthorizedClientRepository;\n+import com.azure.spring.autoconfigure.aad.Constants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.reactive.function.client.WebClientResponseException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Handle the {@link WebClientResponseException} in On-Behalf-Of flow.\n+ *\n+ * <p>\n+ * When the Web API needs re-acquire token(The request requires higher privileges than provided by the access token in\n+ * On-Behalf-Of flow.), it can sent a 403 with information in the WWW-Authenticate header to web client ,web client\n+ * will throw {@link WebClientResponseException}, Web APP can handle this exception to challenge the user.\n+ */\n+public class AADHandleConditionalAccessFilter extends OncePerRequestFilter {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n+                                    FilterChain filterChain) throws IOException, ServletException {\n+        try {\n+            filterChain.doFilter(request, response);\n+        } catch (Exception exception) {\n+            WebClientResponseException webClientResponseException =\n+                Optional.of(exception)\n+                        .map(Throwable::getCause)\n+                        .filter(e -> e instanceof WebClientResponseException)\n+                        .map(e -> (WebClientResponseException) e)\n+                        .filter(AADHandleConditionalAccessFilter::isConditionalAccessExceptionFromObo)\n+                        .orElse(null);\n+            if (webClientResponseException != null) {\n+                handleConditionalAccess(webClientResponseException, request, response);\n+                return;\n+            }\n+            throw exception;\n+        }\n+    }\n+\n+    private static boolean isConditionalAccessExceptionFromObo(WebClientResponseException exception) {\n+        String result = Optional.of(exception)\n+                                .map(WebClientResponseException::getHeaders)\n+                                .map(httpHeaders -> httpHeaders.get(HttpHeaders.WWW_AUTHENTICATE))", "originalCommit": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTYzNjkyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579636924", "bodyText": "Good idea, I will change the code to execute one time, thinks.", "author": "han-gao", "createdAt": "2021-02-20T10:26:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzMzY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "707c22dc5114a964dc8985f9b8e899ddd11df962", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java\nindex a16686656c7..bb0a1343967 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java\n\n@@ -3,7 +3,6 @@\n \n package com.azure.spring.aad.webapp;\n \n-import com.azure.spring.aad.webapi.AADOAuth2OboAuthorizedClientRepository;\n import com.azure.spring.autoconfigure.aad.Constants;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzNjM3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579036379", "bodyText": "Does this wwwAuthenticateHeader's format same to the format we discussed in Teams group? For example: starts with Bearer", "author": "chenrujun", "createdAt": "2021-02-19T09:15:26Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java", "diffHunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapp;\n+\n+import com.azure.spring.aad.webapi.AADOAuth2OboAuthorizedClientRepository;\n+import com.azure.spring.autoconfigure.aad.Constants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.reactive.function.client.WebClientResponseException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Handle the {@link WebClientResponseException} in On-Behalf-Of flow.\n+ *\n+ * <p>\n+ * When the Web API needs re-acquire token(The request requires higher privileges than provided by the access token in\n+ * On-Behalf-Of flow.), it can sent a 403 with information in the WWW-Authenticate header to web client ,web client\n+ * will throw {@link WebClientResponseException}, Web APP can handle this exception to challenge the user.\n+ */\n+public class AADHandleConditionalAccessFilter extends OncePerRequestFilter {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n+                                    FilterChain filterChain) throws IOException, ServletException {\n+        try {\n+            filterChain.doFilter(request, response);\n+        } catch (Exception exception) {\n+            WebClientResponseException webClientResponseException =\n+                Optional.of(exception)\n+                        .map(Throwable::getCause)\n+                        .filter(e -> e instanceof WebClientResponseException)\n+                        .map(e -> (WebClientResponseException) e)\n+                        .filter(AADHandleConditionalAccessFilter::isConditionalAccessExceptionFromObo)\n+                        .orElse(null);\n+            if (webClientResponseException != null) {\n+                handleConditionalAccess(webClientResponseException, request, response);\n+                return;\n+            }\n+            throw exception;\n+        }\n+    }\n+\n+    private static boolean isConditionalAccessExceptionFromObo(WebClientResponseException exception) {\n+        String result = Optional.of(exception)\n+                                .map(WebClientResponseException::getHeaders)\n+                                .map(httpHeaders -> httpHeaders.get(HttpHeaders.WWW_AUTHENTICATE))\n+                                .map(list -> list.get(0))\n+                                .filter(value -> value.contains(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS))\n+                                .orElse(null);\n+        return result != null;\n+    }\n+\n+    static void handleConditionalAccess(WebClientResponseException exception, HttpServletRequest request,\n+                                        HttpServletResponse response) {\n+        Map<String, String> authParameters =\n+            Optional.of(exception)\n+                    .map(WebClientResponseException::getHeaders)\n+                    .map(httpHeaders -> httpHeaders.get(HttpHeaders.WWW_AUTHENTICATE))\n+                    .map(list -> list.get(0))\n+                    .map(AADHandleConditionalAccessFilter::parseAuthParameters)\n+                    .orElse(null);\n+        request.getSession().setAttribute(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS,\n+            authParameters.get(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS));\n+        response.setStatus(302);\n+        try {\n+            response.sendRedirect(Constants.DEFAULT_AUTHORITY_ENDPOINT_URI);\n+        } catch (IOException e) {\n+            LOGGER.error(\"Failed to redirect at this response.\", exception);\n+        }\n+    }\n+\n+    private static Map<String, String> parseAuthParameters(String wwwAuthenticateHeader) {", "originalCommit": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTYzNjkyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579636920", "bodyText": "Done.", "author": "han-gao", "createdAt": "2021-02-20T10:26:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzNjM3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "707c22dc5114a964dc8985f9b8e899ddd11df962", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java\nindex a16686656c7..bb0a1343967 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADHandleConditionalAccessFilter.java\n\n@@ -3,7 +3,6 @@\n \n package com.azure.spring.aad.webapp;\n \n-import com.azure.spring.aad.webapi.AADOAuth2OboAuthorizedClientRepository;\n import com.azure.spring.autoconfigure.aad.Constants;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzNzUyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579037526", "bodyText": "Recover this file.", "author": "chenrujun", "createdAt": "2021-02-19T09:17:17Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java", "diffHunk": "@@ -48,6 +51,8 @@\n @EnableConfigurationProperties(AADAuthenticationProperties.class)\n public class AADWebAppConfiguration {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);", "originalCommit": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTYzNjkxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579636915", "bodyText": "Done.", "author": "han-gao", "createdAt": "2021-02-20T10:26:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzNzUyNg=="}], "type": "inlineReview", "revised_code": {"commit": "707c22dc5114a964dc8985f9b8e899ddd11df962", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\nindex 4083cfd8299..e24505eef3c 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebAppConfiguration.java\n\n@@ -51,8 +48,6 @@ import static com.azure.spring.aad.AADClientRegistrationRepository.AZURE_CLIENT_\n @EnableConfigurationProperties(AADAuthenticationProperties.class)\n public class AADWebAppConfiguration {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(AADOAuth2OboAuthorizedClientRepository.class);\n-\n     @Autowired\n     private AADAuthenticationProperties properties;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzODE4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579038184", "bodyText": "Any specific reason about WebAsyncManagerIntegrationFilter?", "author": "chenrujun", "createdAt": "2021-02-19T09:18:16Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -51,7 +50,8 @@ protected void configure(HttpSecurity http) throws Exception {\n                 .and()\n             .logout()\n                 .logoutSuccessHandler(oidcLogoutSuccessHandler())\n-                .and();\n+                .and()\n+            .addFilterBefore(handleConditionalAccessFilter(), WebAsyncManagerIntegrationFilter.class);", "originalCommit": "6ff1f95f01131ef3f5f55b1dfbf83822ee0bc009", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTYzNjkwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r579636907", "bodyText": "When we need add a filter, spring security requires us to specify the registration order,.\nI didn't find that it should be added after a specific filter(it works after all filters), so I added our custom filter to the first(WebAsyncManagerIntegrationFilter is the first filter in filterChain).", "author": "han-gao", "createdAt": "2021-02-20T10:26:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzODE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAwMDk0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580000944", "bodyText": "If there is no WebAsyncManagerIntegrationFilter in the context, will it throw exception? Can we make sure that WebAsyncManagerIntegrationFilter always exist?", "author": "chenrujun", "createdAt": "2021-02-22T05:59:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzODE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAwMzExNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580003117", "bodyText": "Please add integration test for conditional access. It's OK to do it after this PR merged.", "author": "chenrujun", "createdAt": "2021-02-22T06:07:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTAzODE4NA=="}], "type": "inlineReview", "revised_code": {"commit": "bfb52b57e5122c350ce60df1f0618091a052d87a", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java\nindex 915ea1b2e98..b29a4f63ef2 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java\n\n@@ -51,7 +51,7 @@ public abstract class AADWebSecurityConfigurerAdapter extends WebSecurityConfigu\n             .logout()\n                 .logoutSuccessHandler(oidcLogoutSuccessHandler())\n                 .and()\n-            .addFilterBefore(handleConditionalAccessFilter(), WebAsyncManagerIntegrationFilter.class);\n+            .addFilterBefore(new AADHandleConditionalAccessFilter(), ExceptionTranslationFilter.class);\n         // @formatter:off\n     }\n \n"}}, {"oid": "707c22dc5114a964dc8985f9b8e899ddd11df962", "url": "https://github.com/Azure/azure-sdk-for-java/commit/707c22dc5114a964dc8985f9b8e899ddd11df962", "message": "resolve conversation.", "committedDate": "2021-02-20T10:10:59Z", "type": "commit"}, {"oid": "6aade06e374fe91c3d6098153849478fe181df24", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6aade06e374fe91c3d6098153849478fe181df24", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into fix_not_error_info\n\n# Conflicts:\n#\tsdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-webapp/src/main/resources/application.yml\n#\tsdk/spring/azure-spring-boot/pom.xml", "committedDate": "2021-02-20T10:32:40Z", "type": "commit"}, {"oid": "3b7bf5abc79b766a82d4d71187bbe65b1d4ad491", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3b7bf5abc79b766a82d4d71187bbe65b1d4ad491", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into fix_not_error_info", "committedDate": "2021-02-22T02:09:39Z", "type": "commit"}, {"oid": "d2259e8ab6ea02a05e7d8129c310fed65830a307", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d2259e8ab6ea02a05e7d8129c310fed65830a307", "message": "add web-flux dependency to aad stater", "committedDate": "2021-02-22T02:24:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAwMTcwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580001702", "bodyText": "Can we get response by RequestContextHolder in this method instead of pass it in?", "author": "chenrujun", "createdAt": "2021-02-22T06:02:07Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -130,4 +161,15 @@ private String interceptAuthorizationUri(String authorizationUri) {\n         }\n         return null;\n     }\n+\n+    void replyForbiddenWithWwwAuthenticateHeader(HttpServletResponse response,\n+                                                 MsalInteractionRequiredException exception) {", "originalCommit": "d2259e8ab6ea02a05e7d8129c310fed65830a307", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAzNjM5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580036399", "bodyText": "Maybe ExceptionTranslationFilter is better than WebAsyncManagerIntegrationFilter, ExceptionTranslationFilter handles AccessDeniedException and AuthenticationException. So ExceptionTranslationFilter always exists. It handles exceptions like our filter, so it\u2019s better to add ExceptionTranslationFilter.\nAbout replyForbiddenWithWwwAuthenticateHeader. Your idea is better, I have changed the code.", "author": "han-gao", "createdAt": "2021-02-22T07:40:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAwMTcwMg=="}], "type": "inlineReview", "revised_code": {"commit": "bfb52b57e5122c350ce60df1f0618091a052d87a", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\nindex 9580e09effa..5e649b9265b 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\n\n@@ -162,10 +155,13 @@ public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedC\n         return null;\n     }\n \n-    void replyForbiddenWithWwwAuthenticateHeader(HttpServletResponse response,\n-                                                 MsalInteractionRequiredException exception) {\n-        Map<String, Object> parameters = new LinkedHashMap<>();\n+    void replyForbiddenWithWwwAuthenticateHeader(MsalInteractionRequiredException exception) {\n+        ServletRequestAttributes attr =\n+            (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();\n+        HttpServletResponse response = attr.getResponse();\n+        Assert.notNull(response, \"HttpServletResponse should not be null.\");\n         response.setStatus(HttpStatus.FORBIDDEN.value());\n+        Map<String, Object> parameters = new LinkedHashMap<>();\n         parameters.put(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS, exception.claims());\n         parameters.put(OAuth2ParameterNames.ERROR, OAuth2ErrorCodes.INVALID_TOKEN);\n         parameters.put(OAuth2ParameterNames.ERROR_DESCRIPTION, \"The resource server requires higher privileges than \"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAwMjAyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580002028", "bodyText": "Does the toString() method get the same format compare co the C# code?", "author": "chenrujun", "createdAt": "2021-02-22T06:03:23Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -130,4 +161,15 @@ private String interceptAuthorizationUri(String authorizationUri) {\n         }\n         return null;\n     }\n+\n+    void replyForbiddenWithWwwAuthenticateHeader(HttpServletResponse response,\n+                                                 MsalInteractionRequiredException exception) {\n+        Map<String, Object> parameters = new LinkedHashMap<>();\n+        response.setStatus(HttpStatus.FORBIDDEN.value());\n+        parameters.put(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS, exception.claims());\n+        parameters.put(OAuth2ParameterNames.ERROR, OAuth2ErrorCodes.INVALID_TOKEN);\n+        parameters.put(OAuth2ParameterNames.ERROR_DESCRIPTION, \"The resource server requires higher privileges than \"\n+            + \"provided by the access token\");\n+        response.addHeader(HttpHeaders.WWW_AUTHENTICATE, Constants.BEARER_PREFIX + parameters.toString());", "originalCommit": "d2259e8ab6ea02a05e7d8129c310fed65830a307", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAzNjUyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580036525", "bodyText": "The structure of map.toString() is the same as  C#.", "author": "han-gao", "createdAt": "2021-02-22T07:40:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAwMjAyOA=="}], "type": "inlineReview", "revised_code": {"commit": "bfb52b57e5122c350ce60df1f0618091a052d87a", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\nindex 9580e09effa..5e649b9265b 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\n\n@@ -162,10 +155,13 @@ public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedC\n         return null;\n     }\n \n-    void replyForbiddenWithWwwAuthenticateHeader(HttpServletResponse response,\n-                                                 MsalInteractionRequiredException exception) {\n-        Map<String, Object> parameters = new LinkedHashMap<>();\n+    void replyForbiddenWithWwwAuthenticateHeader(MsalInteractionRequiredException exception) {\n+        ServletRequestAttributes attr =\n+            (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();\n+        HttpServletResponse response = attr.getResponse();\n+        Assert.notNull(response, \"HttpServletResponse should not be null.\");\n         response.setStatus(HttpStatus.FORBIDDEN.value());\n+        Map<String, Object> parameters = new LinkedHashMap<>();\n         parameters.put(Constants.CONDITIONAL_ACCESS_POLICY_CLAIMS, exception.claims());\n         parameters.put(OAuth2ParameterNames.ERROR, OAuth2ErrorCodes.INVALID_TOKEN);\n         parameters.put(OAuth2ParameterNames.ERROR_DESCRIPTION, \"The resource server requires higher privileges than \"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDAwMzcyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580003723", "bodyText": "Can we delete this method? Just use new AADHandleConditionalAccessFilter() instead.", "author": "chenrujun", "createdAt": "2021-02-22T06:08:55Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -81,7 +77,7 @@ protected OAuth2AuthorizationRequestResolver requestResolver() {\n         return new AADOAuth2AuthorizationRequestResolver(this.repo);\n     }\n \n-    protected AuthenticationFailureHandler failureHandler() {\n-        return new AADAuthenticationFailureHandler();\n+    protected AADHandleConditionalAccessFilter handleConditionalAccessFilter() {", "originalCommit": "d2259e8ab6ea02a05e7d8129c310fed65830a307", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bfb52b57e5122c350ce60df1f0618091a052d87a", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java\nindex 915ea1b2e98..b29a4f63ef2 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java\n\n@@ -76,8 +76,4 @@ public abstract class AADWebSecurityConfigurerAdapter extends WebSecurityConfigu\n     protected OAuth2AuthorizationRequestResolver requestResolver() {\n         return new AADOAuth2AuthorizationRequestResolver(this.repo);\n     }\n-\n-    protected AADHandleConditionalAccessFilter handleConditionalAccessFilter() {\n-        return new AADHandleConditionalAccessFilter();\n-    }\n }\n"}}, {"oid": "ab6be45f9f96b6ccb5e69279113e533c1916f8f5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ab6be45f9f96b6ccb5e69279113e533c1916f8f5", "message": "add web-flux dependency to aad stater", "committedDate": "2021-02-22T06:25:25Z", "type": "commit"}, {"oid": "bfb52b57e5122c350ce60df1f0618091a052d87a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bfb52b57e5122c350ce60df1f0618091a052d87a", "message": "resolve conversation.", "committedDate": "2021-02-22T07:55:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDY4OTI1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580689257", "bodyText": "By doing this, do you mean ExceptionTranslationFilter will always exist in context?", "author": "chenrujun", "createdAt": "2021-02-23T00:27:16Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapp/AADWebSecurityConfigurerAdapter.java", "diffHunk": "@@ -51,7 +50,8 @@ protected void configure(HttpSecurity http) throws Exception {\n                 .and()\n             .logout()\n                 .logoutSuccessHandler(oidcLogoutSuccessHandler())\n-                .and();\n+                .and()\n+            .addFilterBefore(new AADHandleConditionalAccessFilter(), ExceptionTranslationFilter.class);", "originalCommit": "bfb52b57e5122c350ce60df1f0618091a052d87a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc4NjUxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18354#discussion_r580786516", "bodyText": "Yes, this filter handles most authorization failures and always loaded into the filterchain.", "author": "han-gao", "createdAt": "2021-02-23T06:01:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDY4OTI1Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "713d0db8bf5b7ac59ac6d7f6b40452dff3217f8c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/713d0db8bf5b7ac59ac6d7f6b40452dff3217f8c", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into fix_not_error_info", "committedDate": "2021-02-25T01:25:03Z", "type": "commit"}]}