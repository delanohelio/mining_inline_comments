{"pr_number": 17008, "pr_title": "Fixes rules update.", "pr_createdAt": "2020-10-30T06:36:34Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/17008", "timeline": [{"oid": "0c56dd76d4cc7edf6e0a607ee1b77abeb9559b04", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0c56dd76d4cc7edf6e0a607ee1b77abeb9559b04", "message": "Moving private method back down.", "committedDate": "2020-10-30T06:28:56Z", "type": "commit"}, {"oid": "c2e51793c2b2d42e5632381b7db9b8e6d9d6fbc8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c2e51793c2b2d42e5632381b7db9b8e6d9d6fbc8", "message": "Adding serialization tests.", "committedDate": "2020-10-30T06:28:56Z", "type": "commit"}, {"oid": "582179984449b5985240aa03d3ec1fbe07ebb132", "url": "https://github.com/Azure/azure-sdk-for-java/commit/582179984449b5985240aa03d3ec1fbe07ebb132", "message": "Fixing mapping of FalseFilter to FalseFilterImpl.", "committedDate": "2020-10-30T06:30:17Z", "type": "commit"}, {"oid": "a71f3c7251f06b346452049e4fc06cb1720f2668", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a71f3c7251f06b346452049e4fc06cb1720f2668", "message": "Fixing serialization of RuleProperties.", "committedDate": "2020-10-30T06:30:38Z", "type": "commit"}, {"oid": "9bc5702fdfd6310a268c08cad749d9a5f86a7941", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9bc5702fdfd6310a268c08cad749d9a5f86a7941", "message": "Adding tests for serialization fixes.", "committedDate": "2020-10-30T06:30:38Z", "type": "commit"}, {"oid": "d0b47f73b2e3fd8a7a65d98274e3a7179f23e43e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d0b47f73b2e3fd8a7a65d98274e3a7179f23e43e", "message": "Adding back retry policy.", "committedDate": "2020-10-30T06:34:17Z", "type": "commit"}, {"oid": "8a821796da950bd0b521aa1f41483479dd32e76c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8a821796da950bd0b521aa1f41483479dd32e76c", "message": "Removing unused method.", "committedDate": "2020-10-30T06:43:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5OTQyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17008#discussion_r515299425", "bodyText": "Rules might also have ns1 in some cases.", "author": "YijunXieMS", "createdAt": "2020-10-30T18:27:00Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementSerializer.java", "diffHunk": "@@ -35,21 +39,39 @@\n     public String serialize(Object object, SerializerEncoding encoding) throws IOException {\n         final String contents = jacksonAdapter.serialize(object, encoding);\n \n+        final Class<?> clazz = object.getClass();\n+        if (!CreateQueueBody.class.equals(clazz) && !CreateRuleBody.class.equals(clazz)\n+            && !CreateSubscriptionBody.class.equals(clazz)) {\n+            return contents;\n+        }\n+\n         // This hack exists because the service requires a global namespace for the XML rather than allowing\n         // each XML element to be prefaced with an explicit namespace. For example:\n         // xmlns=\"foo\" works because \"foo\" is assigned the global namespace.\n         // xmlns:ns0=\"foo\", and then prefixing all elements with ns0:AuthorizationRule will break.\n-        if (object instanceof CreateQueueBody) {\n-            final Matcher matcher = NAMESPACE_PATTERN.matcher(contents);\n-            if (matcher.find()) {\n-                final String namespace = matcher.group(\"namespace\");\n-                return contents\n-                    .replaceAll(namespace + \":\", \"\")\n-                    .replace(\"xmlns:\" + namespace + \"=\", \"xmlns=\");\n-            }\n+        final Matcher namespaceMatcher = NAMESPACE_PATTERN.matcher(contents);\n+        if (!namespaceMatcher.find()) {\n+            logger.info(\"Could not find {} in {}\", NAMESPACE_PATTERN.pattern(), contents);\n+            return contents;\n+        }\n+\n+        final String namespace = namespaceMatcher.group(\"namespace\");\n+        final String replaced = contents\n+            .replaceAll(namespace + \":\", \"\")\n+            .replace(\"xmlns:\" + namespace + \"=\", \"xmlns=\");\n+\n+        if (!CreateRuleBody.class.equals(clazz)) {\n+            return replaced;\n         }\n \n-        return contents;\n+        // This hack is here because RuleFilter and RuleAction type=\"Foo\" should have a namespace like n0:type=\"Foo\".\n+        final Matcher filterType = FILTER_ACTION_PATTERN.matcher(replaced);\n+        if (filterType.find()) {\n+            return filterType.replaceAll(\"<$1 xmlns:ns0=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" ns0:type=\");", "originalCommit": "8a821796da950bd0b521aa1f41483479dd32e76c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMwMDczMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17008#discussion_r515300733", "bodyText": "Do you know when? I couldn't find an example.", "author": "conniey", "createdAt": "2020-10-30T18:29:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5OTQyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMzNzgzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17008#discussion_r515337837", "bodyText": "This is a Python generated XML that has both ns0 and ns1. Disregard this comment if Java generates differently without ns1.\nIn the following file, \"ns0\" doesn't hurt. \"ns1\" hurts.\n<ns0:entry xmlns:ns0=\"http://www.w3.org/2005/Atom\" xmlns:ns1=\"http://schemas.microsoft.com/netservices/2010/10/servicebus/connect\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n\t<ns0:content type=\"application/xml\">\n\t\t<ns1:RuleDescription>\n\t\t\t<ns1:Filter xsi:type=\"SqlFilter\">\n\t\t\t\t<ns1:CompatibilityLevel>20</ns1:CompatibilityLevel>\n\t\t\t\t<ns1:RequiresPreprocessing>true</ns1:RequiresPreprocessing>\n\t\t\t</ns1:Filter>\n\t\t\t<ns1:Action xsi:type=\"EmptyRuleAction\"/>\n\t\t\t<ns1:Name>rule1</ns1:Name>\n\t\t</ns1:RuleDescription>\n\t</ns0:content>\n</ns0:entry>", "author": "YijunXieMS", "createdAt": "2020-10-30T19:43:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5OTQyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxNDc3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17008#discussion_r515414770", "bodyText": "Normally validity of XML can be verified at generation time, I am not sure if generator are doing  that.", "author": "hemanttanwar", "createdAt": "2020-10-30T22:51:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5OTQyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyNTA0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17008#discussion_r515425049", "bodyText": "The XML generated by Jackson is valid. It's the service side that is fickle about what XML it likes to consume, that's why we're doing all these hacks.\nI verified that we aren't generating multiple namespaces. The reason for this is because we use a global xml namespace, so we don't need n0.", "author": "conniey", "createdAt": "2020-10-30T23:41:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5OTQyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "e34428cfa762b8e961edc585d29301fb80523304", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementSerializer.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementSerializer.java\nindex d55dbec8844..95c6be15c47 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementSerializer.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementSerializer.java\n\n@@ -51,7 +51,7 @@ public class ServiceBusManagementSerializer implements SerializerAdapter {\n         // xmlns:ns0=\"foo\", and then prefixing all elements with ns0:AuthorizationRule will break.\n         final Matcher namespaceMatcher = NAMESPACE_PATTERN.matcher(contents);\n         if (!namespaceMatcher.find()) {\n-            logger.info(\"Could not find {} in {}\", NAMESPACE_PATTERN.pattern(), contents);\n+            logger.warning(\"Could not find {} in {}\", NAMESPACE_PATTERN.pattern(), contents);\n             return contents;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxNTU1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17008#discussion_r515415557", "bodyText": "If we could not find namespace pattern , wouldn't this be a error or warning ?", "author": "hemanttanwar", "createdAt": "2020-10-30T22:55:10Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementSerializer.java", "diffHunk": "@@ -35,21 +39,39 @@\n     public String serialize(Object object, SerializerEncoding encoding) throws IOException {\n         final String contents = jacksonAdapter.serialize(object, encoding);\n \n+        final Class<?> clazz = object.getClass();\n+        if (!CreateQueueBody.class.equals(clazz) && !CreateRuleBody.class.equals(clazz)\n+            && !CreateSubscriptionBody.class.equals(clazz)) {\n+            return contents;\n+        }\n+\n         // This hack exists because the service requires a global namespace for the XML rather than allowing\n         // each XML element to be prefaced with an explicit namespace. For example:\n         // xmlns=\"foo\" works because \"foo\" is assigned the global namespace.\n         // xmlns:ns0=\"foo\", and then prefixing all elements with ns0:AuthorizationRule will break.\n-        if (object instanceof CreateQueueBody) {\n-            final Matcher matcher = NAMESPACE_PATTERN.matcher(contents);\n-            if (matcher.find()) {\n-                final String namespace = matcher.group(\"namespace\");\n-                return contents\n-                    .replaceAll(namespace + \":\", \"\")\n-                    .replace(\"xmlns:\" + namespace + \"=\", \"xmlns=\");\n-            }\n+        final Matcher namespaceMatcher = NAMESPACE_PATTERN.matcher(contents);\n+        if (!namespaceMatcher.find()) {\n+            logger.info(\"Could not find {} in {}\", NAMESPACE_PATTERN.pattern(), contents);\n+            return contents;", "originalCommit": "8a821796da950bd0b521aa1f41483479dd32e76c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e34428cfa762b8e961edc585d29301fb80523304", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementSerializer.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementSerializer.java\nindex d55dbec8844..95c6be15c47 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementSerializer.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusManagementSerializer.java\n\n@@ -51,7 +51,7 @@ public class ServiceBusManagementSerializer implements SerializerAdapter {\n         // xmlns:ns0=\"foo\", and then prefixing all elements with ns0:AuthorizationRule will break.\n         final Matcher namespaceMatcher = NAMESPACE_PATTERN.matcher(contents);\n         if (!namespaceMatcher.find()) {\n-            logger.info(\"Could not find {} in {}\", NAMESPACE_PATTERN.pattern(), contents);\n+            logger.warning(\"Could not find {} in {}\", NAMESPACE_PATTERN.pattern(), contents);\n             return contents;\n         }\n \n"}}, {"oid": "cb723983001ee957b6150882efaecde6a57a372a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cb723983001ee957b6150882efaecde6a57a372a", "message": "Add test for creating default rule.", "committedDate": "2020-10-30T23:30:06Z", "type": "commit"}, {"oid": "e940492025f0c7c0cb4579d805c0b2e97eae6fdc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e940492025f0c7c0cb4579d805c0b2e97eae6fdc", "message": "Adding update method.", "committedDate": "2020-10-30T23:39:45Z", "type": "commit"}, {"oid": "e34428cfa762b8e961edc585d29301fb80523304", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e34428cfa762b8e961edc585d29301fb80523304", "message": "Change to warnings.", "committedDate": "2020-10-30T23:42:32Z", "type": "commit"}, {"oid": "4bac32fa2336db5cf11ec4af893ad08af42c46be", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4bac32fa2336db5cf11ec4af893ad08af42c46be", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into rules-update", "committedDate": "2020-10-30T23:44:57Z", "type": "commit"}, {"oid": "676080bbf8c9da1ba8046cacc82f213bd6002ad6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/676080bbf8c9da1ba8046cacc82f213bd6002ad6", "message": "Rename to getParameters.", "committedDate": "2020-10-31T00:04:31Z", "type": "commit"}]}