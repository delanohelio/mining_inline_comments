{"pr_number": 15920, "pr_title": "Sb BinaryData - Binary representation of data from different sources", "pr_createdAt": "2020-10-03T04:46:53Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/15920", "timeline": [{"oid": "83f386fca8c4777d740c33c21d0a9f7eb8fbbd18", "url": "https://github.com/Azure/azure-sdk-for-java/commit/83f386fca8c4777d740c33c21d0a9f7eb8fbbd18", "message": "Adding BinaryData..", "committedDate": "2020-10-01T07:21:05Z", "type": "commit"}, {"oid": "ba5a9cc14283762b50a4149c33c4dc52a6236493", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ba5a9cc14283762b50a4149c33c4dc52a6236493", "message": "Added test", "committedDate": "2020-10-01T19:45:38Z", "type": "commit"}, {"oid": "834f783862c0f68868ec9177dee1a9ddd5a21a6b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/834f783862c0f68868ec9177dee1a9ddd5a21a6b", "message": "Adding BinaryData", "committedDate": "2020-10-02T23:32:01Z", "type": "commit"}, {"oid": "5eb7d7bc221b400043d50fec67ac9d8bbd708ca2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5eb7d7bc221b400043d50fec67ac9d8bbd708ca2", "message": "Added samples/ codesnippet", "committedDate": "2020-10-03T04:45:15Z", "type": "commit"}, {"oid": "18501eae5f453949c1200f9f5a67be85da6f1813", "url": "https://github.com/Azure/azure-sdk-for-java/commit/18501eae5f453949c1200f9f5a67be85da6f1813", "message": "fix checkstyle errors", "committedDate": "2020-10-03T05:37:23Z", "type": "commit"}, {"oid": "b674aa3a66bdfe346b6035ab6c16aa9d0062e3e5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b674aa3a66bdfe346b6035ab6c16aa9d0062e3e5", "message": "check style fixes", "committedDate": "2020-10-03T16:02:48Z", "type": "commit"}, {"oid": "37607119ae0acf48d127955ab538c9f9e63de81d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/37607119ae0acf48d127955ab538c9f9e63de81d", "message": "merge master into branch", "committedDate": "2020-10-03T16:05:32Z", "type": "commit"}, {"oid": "01e869523ba66166dde9a5d14f1946eddcde29d9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/01e869523ba66166dde9a5d14f1946eddcde29d9", "message": "Javadoc change", "committedDate": "2020-10-04T06:18:29Z", "type": "commit"}, {"oid": "bebb6a4d734b084f708d4c1b4d201e18daa5953c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bebb6a4d734b084f708d4c1b4d201e18daa5953c", "message": "updated java doc", "committedDate": "2020-10-05T17:33:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1NDEzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#discussion_r499854130", "bodyText": "Should we clone this? In other APIs we usually make a copy of the byte[].", "author": "alzimmermsft", "createdAt": "2020-10-05T20:29:56Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.util;\n+\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.ObjectSerializer;\n+import com.azure.core.util.serializer.TypeReference;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+/**\n+ * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n+ * array. The data is collected from provided sources and stored into a byte array.\n+ * <p>\n+ * It also provides a way to serialize and deserialize an {@link Object} into {@link BinaryData} given an\n+ * {@link ObjectSerializer}. Code samples are explained below.\n+ *\n+ * <p><strong>Create an instance from Bytes</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#bytes}\n+ *\n+ * <p><strong>Create an instance from String</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n+ *\n+ * <p><strong>Create an instance from InputStream</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+ *\n+ * <p><strong>Get an Object from {@link BinaryData}</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#ObjectAsync}\n+ *\n+ * @see ObjectSerializer\n+ */\n+public final class BinaryData {\n+    private final byte[] data;\n+\n+    BinaryData() {\n+        // This exists, so no one is able to create instance, user need to use static function to create instances.\n+        this.data = null;\n+    }\n+\n+    /**\n+     * Create instance of {@link BinaryData} given the data.\n+     * @param data to represent as bytes.\n+     */\n+    BinaryData(byte[] data) {\n+        this.data = data;", "originalCommit": "bebb6a4d734b084f708d4c1b4d201e18daa5953c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b86b557b75db74ab5bd912bd8b2d3d83739d2487", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 6fb57fa85fd..978a89f163c 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -44,6 +44,7 @@ import java.util.Objects;\n  * @see ObjectSerializer\n  */\n public final class BinaryData {\n+    private static final ClientLogger LOGGER = new ClientLogger(BinaryData.class);\n     private final byte[] data;\n \n     BinaryData() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1NTM3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#discussion_r499855370", "bodyText": "Once this moves into azure-core we have a specialized ByteArrayOutputStream type that allows access to its internal buffer without copying when toByteArray is called.", "author": "alzimmermsft", "createdAt": "2020-10-05T20:32:22Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.util;\n+\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.ObjectSerializer;\n+import com.azure.core.util.serializer.TypeReference;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+/**\n+ * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n+ * array. The data is collected from provided sources and stored into a byte array.\n+ * <p>\n+ * It also provides a way to serialize and deserialize an {@link Object} into {@link BinaryData} given an\n+ * {@link ObjectSerializer}. Code samples are explained below.\n+ *\n+ * <p><strong>Create an instance from Bytes</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#bytes}\n+ *\n+ * <p><strong>Create an instance from String</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n+ *\n+ * <p><strong>Create an instance from InputStream</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+ *\n+ * <p><strong>Get an Object from {@link BinaryData}</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#ObjectAsync}\n+ *\n+ * @see ObjectSerializer\n+ */\n+public final class BinaryData {\n+    private final byte[] data;\n+\n+    BinaryData() {\n+        // This exists, so no one is able to create instance, user need to use static function to create instances.\n+        this.data = null;\n+    }\n+\n+    /**\n+     * Create instance of {@link BinaryData} given the data.\n+     * @param data to represent as bytes.\n+     */\n+    BinaryData(byte[] data) {\n+        this.data = data;\n+    }\n+\n+    /**\n+     * Provides {@link InputStream} for the data represented by this {@link BinaryData} object.\n+     *\n+     * <p><strong>Get InputStream from BinaryData</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#Stream}\n+     *\n+     * @return {@link InputStream} representing the binary data.\n+     */\n+    public InputStream toStream() {\n+        return new ByteArrayInputStream(this.data);\n+    }\n+\n+    /**\n+     * Provides {@link Mono} of {@link InputStream} for the data represented by this {@link BinaryData} object.\n+     *\n+     * @return {@link InputStream} representation of the {@link BinaryData}.\n+     */\n+    public Mono<InputStream> toStreamAsync() {\n+        return Mono.fromCallable(() -> toStream());\n+    }\n+\n+    /**\n+     * Create {@link BinaryData} instance with given {@link InputStream} as source of data. The {@link InputStream} is\n+     * not closed by this function.\n+     *\n+     * <p><strong>Create an instance from InputStream</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+     *\n+     * @param inputStream to read bytes from.\n+     * @throws UncheckedIOException If any error in reading from {@link InputStream}.\n+     * @throws NullPointerException if {@code inputStream} is null.\n+     * @return {@link BinaryData} representing the binary data.\n+     */\n+    public static BinaryData fromStream(InputStream inputStream) {\n+        Objects.requireNonNull(inputStream, \"'inputStream' cannot be null.\");\n+\n+        final int bufferSize = 1024;\n+        try {\n+            ByteArrayOutputStream dataOutputBuffer = new ByteArrayOutputStream();", "originalCommit": "bebb6a4d734b084f708d4c1b4d201e18daa5953c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg2OTk1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#discussion_r499869958", "bodyText": "yes we can do this when we move it azure-core", "author": "hemanttanwar", "createdAt": "2020-10-05T21:00:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1NTM3MA=="}], "type": "inlineReview", "revised_code": {"commit": "b86b557b75db74ab5bd912bd8b2d3d83739d2487", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 6fb57fa85fd..978a89f163c 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -44,6 +44,7 @@ import java.util.Objects;\n  * @see ObjectSerializer\n  */\n public final class BinaryData {\n+    private static final ClientLogger LOGGER = new ClientLogger(BinaryData.class);\n     private final byte[] data;\n \n     BinaryData() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg1NTk4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#discussion_r499855983", "bodyText": "Given this class only has static utility methods it should be fine to use a static logger and suppress the Checkstyle rule.", "author": "alzimmermsft", "createdAt": "2020-10-05T20:33:42Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.util;\n+\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.ObjectSerializer;\n+import com.azure.core.util.serializer.TypeReference;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+/**\n+ * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n+ * array. The data is collected from provided sources and stored into a byte array.\n+ * <p>\n+ * It also provides a way to serialize and deserialize an {@link Object} into {@link BinaryData} given an\n+ * {@link ObjectSerializer}. Code samples are explained below.\n+ *\n+ * <p><strong>Create an instance from Bytes</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#bytes}\n+ *\n+ * <p><strong>Create an instance from String</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n+ *\n+ * <p><strong>Create an instance from InputStream</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+ *\n+ * <p><strong>Get an Object from {@link BinaryData}</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#ObjectAsync}\n+ *\n+ * @see ObjectSerializer\n+ */\n+public final class BinaryData {\n+    private final byte[] data;\n+\n+    BinaryData() {\n+        // This exists, so no one is able to create instance, user need to use static function to create instances.\n+        this.data = null;\n+    }\n+\n+    /**\n+     * Create instance of {@link BinaryData} given the data.\n+     * @param data to represent as bytes.\n+     */\n+    BinaryData(byte[] data) {\n+        this.data = data;\n+    }\n+\n+    /**\n+     * Provides {@link InputStream} for the data represented by this {@link BinaryData} object.\n+     *\n+     * <p><strong>Get InputStream from BinaryData</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#Stream}\n+     *\n+     * @return {@link InputStream} representing the binary data.\n+     */\n+    public InputStream toStream() {\n+        return new ByteArrayInputStream(this.data);\n+    }\n+\n+    /**\n+     * Provides {@link Mono} of {@link InputStream} for the data represented by this {@link BinaryData} object.\n+     *\n+     * @return {@link InputStream} representation of the {@link BinaryData}.\n+     */\n+    public Mono<InputStream> toStreamAsync() {\n+        return Mono.fromCallable(() -> toStream());\n+    }\n+\n+    /**\n+     * Create {@link BinaryData} instance with given {@link InputStream} as source of data. The {@link InputStream} is\n+     * not closed by this function.\n+     *\n+     * <p><strong>Create an instance from InputStream</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+     *\n+     * @param inputStream to read bytes from.\n+     * @throws UncheckedIOException If any error in reading from {@link InputStream}.\n+     * @throws NullPointerException if {@code inputStream} is null.\n+     * @return {@link BinaryData} representing the binary data.\n+     */\n+    public static BinaryData fromStream(InputStream inputStream) {\n+        Objects.requireNonNull(inputStream, \"'inputStream' cannot be null.\");\n+\n+        final int bufferSize = 1024;\n+        try {\n+            ByteArrayOutputStream dataOutputBuffer = new ByteArrayOutputStream();\n+            int nRead;\n+            byte[] data = new byte[bufferSize];\n+            while ((nRead = inputStream.read(data, 0, data.length)) != -1) {\n+                dataOutputBuffer.write(data, 0, nRead);\n+            }\n+\n+            return fromBytes(dataOutputBuffer.toByteArray());\n+        } catch (IOException ex) {\n+            ClientLogger logger = new ClientLogger(BinaryData.class);", "originalCommit": "bebb6a4d734b084f708d4c1b4d201e18daa5953c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b86b557b75db74ab5bd912bd8b2d3d83739d2487", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 6fb57fa85fd..978a89f163c 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -44,6 +44,7 @@ import java.util.Objects;\n  * @see ObjectSerializer\n  */\n public final class BinaryData {\n+    private static final ClientLogger LOGGER = new ClientLogger(BinaryData.class);\n     private final byte[] data;\n \n     BinaryData() {\n"}}, {"oid": "b86b557b75db74ab5bd912bd8b2d3d83739d2487", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b86b557b75db74ab5bd912bd8b2d3d83739d2487", "message": "Review comments", "committedDate": "2020-10-05T21:03:03Z", "type": "commit"}, {"oid": "b2686882b7bd925fff5d2f0a1fdb8c4e27436d8e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b2686882b7bd925fff5d2f0a1fdb8c4e27436d8e", "message": "Removing unwanted contructor", "committedDate": "2020-10-05T22:21:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg3MzAzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#discussion_r499873034", "bodyText": "This ctor is not required. If a ctor with args is defined then automatically no-args ctor will be disabled unless explicitly added.", "author": "srnagar", "createdAt": "2020-10-05T21:07:15Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.util;\n+\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.ObjectSerializer;\n+import com.azure.core.util.serializer.TypeReference;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+/**\n+ * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n+ * array. The data is collected from provided sources and stored into a byte array.\n+ * <p>\n+ * It also provides a way to serialize and deserialize an {@link Object} into {@link BinaryData} given an\n+ * {@link ObjectSerializer}. Code samples are explained below.\n+ *\n+ * <p><strong>Create an instance from Bytes</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#bytes}\n+ *\n+ * <p><strong>Create an instance from String</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n+ *\n+ * <p><strong>Create an instance from InputStream</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+ *\n+ * <p><strong>Get an Object from {@link BinaryData}</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#ObjectAsync}\n+ *\n+ * @see ObjectSerializer\n+ */\n+public final class BinaryData {\n+    private final byte[] data;\n+\n+    BinaryData() {", "originalCommit": "bebb6a4d734b084f708d4c1b4d201e18daa5953c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2686882b7bd925fff5d2f0a1fdb8c4e27436d8e", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 6fb57fa85fd..d48921608f3 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -44,19 +44,17 @@ import java.util.Objects;\n  * @see ObjectSerializer\n  */\n public final class BinaryData {\n+    private static final ClientLogger LOGGER = new ClientLogger(BinaryData.class);\n     private final byte[] data;\n \n-    BinaryData() {\n-        // This exists, so no one is able to create instance, user need to use static function to create instances.\n-        this.data = null;\n-    }\n-\n     /**\n      * Create instance of {@link BinaryData} given the data.\n      * @param data to represent as bytes.\n+     * @throws NullPointerException If {@code data} is null.\n      */\n     BinaryData(byte[] data) {\n-        this.data = data;\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        this.data = Arrays.copyOf(data, data.length);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg3NTMzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15920#discussion_r499875336", "bodyText": "For methods that return Mono/Flux, use the error channel instead of throwing exception.", "author": "srnagar", "createdAt": "2020-10-05T21:12:09Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java", "diffHunk": "@@ -0,0 +1,286 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.util;\n+\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.core.util.serializer.ObjectSerializer;\n+import com.azure.core.util.serializer.TypeReference;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+/**\n+ * This class is an abstraction over many different ways that binary data can be represented. The {@link BinaryData}\n+ * can be created from {@link InputStream}, {@link Flux} of {@link ByteBuffer}, {@link String}, {@link Object} and byte\n+ * array. The data is collected from provided sources and stored into a byte array.\n+ * <p>\n+ * It also provides a way to serialize and deserialize an {@link Object} into {@link BinaryData} given an\n+ * {@link ObjectSerializer}. Code samples are explained below.\n+ *\n+ * <p><strong>Create an instance from Bytes</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#bytes}\n+ *\n+ * <p><strong>Create an instance from String</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#String}\n+ *\n+ * <p><strong>Create an instance from InputStream</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+ *\n+ * <p><strong>Get an Object from {@link BinaryData}</strong></p>\n+ * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#ObjectAsync}\n+ *\n+ * @see ObjectSerializer\n+ */\n+public final class BinaryData {\n+    private static final ClientLogger LOGGER = new ClientLogger(BinaryData.class);\n+    private final byte[] data;\n+\n+    BinaryData() {\n+        // This exists, so no one is able to create instance, user need to use static function to create instances.\n+        this.data = null;\n+    }\n+\n+    /**\n+     * Create instance of {@link BinaryData} given the data.\n+     * @param data to represent as bytes.\n+     * @throws NullPointerException If {@code data} is null.\n+     */\n+    BinaryData(byte[] data) {\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");\n+        this.data = Arrays.copyOf(data, data.length);\n+    }\n+\n+    /**\n+     * Provides {@link InputStream} for the data represented by this {@link BinaryData} object.\n+     *\n+     * <p><strong>Get InputStream from BinaryData</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.to#Stream}\n+     *\n+     * @return {@link InputStream} representing the binary data.\n+     */\n+    public InputStream toStream() {\n+        return new ByteArrayInputStream(this.data);\n+    }\n+\n+    /**\n+     * Provides {@link Mono} of {@link InputStream} for the data represented by this {@link BinaryData} object.\n+     *\n+     * @return {@link InputStream} representation of the {@link BinaryData}.\n+     */\n+    public Mono<InputStream> toStreamAsync() {\n+        return Mono.fromCallable(() -> toStream());\n+    }\n+\n+    /**\n+     * Create {@link BinaryData} instance with given {@link InputStream} as source of data. The {@link InputStream} is\n+     * not closed by this function.\n+     *\n+     * <p><strong>Create an instance from InputStream</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Stream}\n+     *\n+     * @param inputStream to read bytes from.\n+     * @throws UncheckedIOException If any error in reading from {@link InputStream}.\n+     * @throws NullPointerException if {@code inputStream} is null.\n+     * @return {@link BinaryData} representing the binary data.\n+     */\n+    public static BinaryData fromStream(InputStream inputStream) {\n+        Objects.requireNonNull(inputStream, \"'inputStream' cannot be null.\");\n+\n+        final int bufferSize = 1024;\n+        try {\n+            ByteArrayOutputStream dataOutputBuffer = new ByteArrayOutputStream();\n+            int nRead;\n+            byte[] data = new byte[bufferSize];\n+            while ((nRead = inputStream.read(data, 0, data.length)) != -1) {\n+                dataOutputBuffer.write(data, 0, nRead);\n+            }\n+\n+            return fromBytes(dataOutputBuffer.toByteArray());\n+        } catch (IOException ex) {\n+            throw LOGGER.logExceptionAsError(new UncheckedIOException(ex));\n+        }\n+    }\n+\n+    /**\n+     * Asynchronously create {@link BinaryData} instance with given {@link InputStream} as source of data. The\n+     * {@link InputStream} is not closed by this function.\n+     *\n+     * @param inputStream to read bytes from.\n+     * @throws NullPointerException if {@code inputStream} is null.\n+     * @return {@link Mono} of {@link BinaryData} representing the binary data.\n+     */\n+    public static Mono<BinaryData> fromStreamAsync(InputStream inputStream) {\n+        Objects.requireNonNull(inputStream, \"'inputStream' cannot be null.\");\n+\n+        return Mono.fromCallable(() -> fromStream(inputStream));\n+    }\n+\n+    /**\n+     * Create {@link BinaryData} instance with given {@link Flux} of {@link ByteBuffer} as source of data. It will\n+     * collect all the bytes from {@link ByteBuffer} into {@link BinaryData}.\n+     *\n+     * <p><strong>Create an instance from String</strong></p>\n+     * {@codesnippet com.azure.core.experimental.util.BinaryDocument.from#Flux}\n+     *\n+     * @param data to use.\n+     * @throws NullPointerException if {@code inputStream} is null.\n+     * @return {@link Mono} of {@link BinaryData} representing binary data.\n+     */\n+    public static Mono<BinaryData> fromFlux(Flux<ByteBuffer> data) {\n+        Objects.requireNonNull(data, \"'data' cannot be null.\");", "originalCommit": "b86b557b75db74ab5bd912bd8b2d3d83739d2487", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2686882b7bd925fff5d2f0a1fdb8c4e27436d8e", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\nindex 978a89f163c..d48921608f3 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/util/BinaryData.java\n\n@@ -47,11 +47,6 @@ public final class BinaryData {\n     private static final ClientLogger LOGGER = new ClientLogger(BinaryData.class);\n     private final byte[] data;\n \n-    BinaryData() {\n-        // This exists, so no one is able to create instance, user need to use static function to create instances.\n-        this.data = null;\n-    }\n-\n     /**\n      * Create instance of {@link BinaryData} given the data.\n      * @param data to represent as bytes.\n"}}, {"oid": "f9205bc1a871d97bdb9775debb83e6493b9b3847", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f9205bc1a871d97bdb9775debb83e6493b9b3847", "message": "Review comment", "committedDate": "2020-10-06T05:37:15Z", "type": "commit"}]}