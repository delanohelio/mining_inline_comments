{"pr_number": 14633, "pr_title": "Adding Subscription rules", "pr_createdAt": "2020-08-31T04:28:48Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14633", "timeline": [{"oid": "7a420f3c4fbc05531b30c821370a70f4e422f567", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7a420f3c4fbc05531b30c821370a70f4e422f567", "message": "Adding create rules.", "committedDate": "2020-08-27T16:52:34Z", "type": "commit"}, {"oid": "78f540b5cd07bbd8f961a35b729e1dbcbaaa27c9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/78f540b5cd07bbd8f961a35b729e1dbcbaaa27c9", "message": "Adding RuleAction and RuleFilter.", "committedDate": "2020-08-27T16:52:34Z", "type": "commit"}, {"oid": "7e2390737ed5305770f9ed49568a0e70e1d508fe", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7e2390737ed5305770f9ed49568a0e70e1d508fe", "message": "Adding filters and actions.", "committedDate": "2020-08-27T16:52:35Z", "type": "commit"}, {"oid": "d228cce2ab953559e2959e62083bcc1ba8f774df", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d228cce2ab953559e2959e62083bcc1ba8f774df", "message": "Adding test.", "committedDate": "2020-08-27T16:52:35Z", "type": "commit"}, {"oid": "d59c437d6255b62bfbd81a832cb3832f2d8f7dfa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d59c437d6255b62bfbd81a832cb3832f2d8f7dfa", "message": "Fixing filters.", "committedDate": "2020-08-27T16:52:35Z", "type": "commit"}, {"oid": "e0bc56b86db63e665dd3e3f2e1cd14006c887b59", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e0bc56b86db63e665dd3e3f2e1cd14006c887b59", "message": "Adding overload for ServiceBusAdministrationClient.", "committedDate": "2020-08-27T16:52:35Z", "type": "commit"}, {"oid": "6967949000b758c8c130f71c5cc521fbdb56d290", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6967949000b758c8c130f71c5cc521fbdb56d290", "message": "AddingRuleAcessor.", "committedDate": "2020-08-27T16:52:36Z", "type": "commit"}, {"oid": "8682494b808e027a131f2c9db413f491106c21d8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8682494b808e027a131f2c9db413f491106c21d8", "message": "Moving mandatory name option out of CreateRuleOptions..", "committedDate": "2020-08-27T16:52:36Z", "type": "commit"}, {"oid": "48252d3c3eb6e8f9883183730c2f3875b4e11f38", "url": "https://github.com/Azure/azure-sdk-for-java/commit/48252d3c3eb6e8f9883183730c2f3875b4e11f38", "message": "Adding EntityHelper and RuleFilter.", "committedDate": "2020-08-27T16:52:36Z", "type": "commit"}, {"oid": "8360673692e319fd88e4f8d62ac845a8028cdb4f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8360673692e319fd88e4f8d62ac845a8028cdb4f", "message": "Split entity helper method.", "committedDate": "2020-08-27T16:59:56Z", "type": "commit"}, {"oid": "c7312bc6574150a691be766224919c92ca860650", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c7312bc6574150a691be766224919c92ca860650", "message": "Fix namespace for swagger.", "committedDate": "2020-08-27T17:03:48Z", "type": "commit"}, {"oid": "ee60b8037a6274d2a6ee2bc74fa7de172a99b8fc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ee60b8037a6274d2a6ee2bc74fa7de172a99b8fc", "message": "Regenerate swagger. KeyValue names are changed.", "committedDate": "2020-08-27T17:09:13Z", "type": "commit"}, {"oid": "5822fd004d4d7d97e3ec9d46f34e78e02677e0a2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5822fd004d4d7d97e3ec9d46f34e78e02677e0a2", "message": "Renaming generated swagger classes to impl.", "committedDate": "2020-08-27T17:24:18Z", "type": "commit"}, {"oid": "2b0e7e8ad9f77d190f4c30e5f6fa382c2787f5c5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2b0e7e8ad9f77d190f4c30e5f6fa382c2787f5c5", "message": "Rename to CorrelationFilterImpl.", "committedDate": "2020-08-28T04:11:32Z", "type": "commit"}, {"oid": "a2e6c88b26b2194729f619ac10c6c41ee88ca466", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a2e6c88b26b2194729f619ac10c6c41ee88ca466", "message": "Adding test entries for Rules.", "committedDate": "2020-08-28T04:54:45Z", "type": "commit"}, {"oid": "f54e190d42708710afd2250cbb68242c426d52c4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f54e190d42708710afd2250cbb68242c426d52c4", "message": "Fix rename of ImplImpl for SqlRuleActionImpl.", "committedDate": "2020-08-28T05:10:35Z", "type": "commit"}, {"oid": "7a3c92cac46209aff6565f1a8dadc59e7863998b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7a3c92cac46209aff6565f1a8dadc59e7863998b", "message": "Adding serialization tests.", "committedDate": "2020-08-28T14:55:49Z", "type": "commit"}, {"oid": "f444fb6c07dd56c511ba5fe4d09b653eea915d7e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f444fb6c07dd56c511ba5fe4d09b653eea915d7e", "message": "Adding tests for feed.", "committedDate": "2020-08-28T15:23:40Z", "type": "commit"}, {"oid": "12dd6beada7c0df0e41478e8d8348e270e54d6d8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/12dd6beada7c0df0e41478e8d8348e270e54d6d8", "message": "Adding support for list, get, update, and delete rules.", "committedDate": "2020-08-28T18:53:58Z", "type": "commit"}, {"oid": "3e34146f755c1fc197eae6985476e0f6b249f263", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3e34146f755c1fc197eae6985476e0f6b249f263", "message": "Adding support for rules.", "committedDate": "2020-08-30T22:36:55Z", "type": "commit"}, {"oid": "d2f40d8d3bac1284cd99b39b858ffd270a019a62", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d2f40d8d3bac1284cd99b39b858ffd270a019a62", "message": "Fixing checkstyle issues.", "committedDate": "2020-08-30T22:48:10Z", "type": "commit"}, {"oid": "6beea8eb69c501a1313669dfb69ea3b4c0d981a3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6beea8eb69c501a1313669dfb69ea3b4c0d981a3", "message": "Fixing checkstyle.", "committedDate": "2020-08-30T22:52:56Z", "type": "commit"}, {"oid": "5cb70c744bf6ccf890af558aeecb6f3f76c00d6b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5cb70c744bf6ccf890af558aeecb6f3f76c00d6b", "message": "Adding false positive checkstyle suppression", "committedDate": "2020-08-30T22:57:01Z", "type": "commit"}, {"oid": "1b30ed0dc220a58343ff1b5d11b1abfeab2c8ef4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1b30ed0dc220a58343ff1b5d11b1abfeab2c8ef4", "message": "Fixing checkstyle errors.", "committedDate": "2020-08-31T04:43:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0OTcyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14633#discussion_r480249726", "bodyText": "put subscriptionName ahead of ruleName?", "author": "YijunXieMS", "createdAt": "2020-08-31T16:36:53Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/ServiceBusAdministrationAsyncClient.java", "diffHunk": "@@ -182,6 +194,82 @@\n         return withContext(context -> createQueueWithResponse(queueName, queueOptions, context));\n     }\n \n+    /**\n+     * Creates a rule under the given topic and subscription\n+     *\n+     * @param topicName Name of the topic associated with rule.\n+     * @param subscriptionName Name of the subscription associated with the rule.\n+     * @param ruleName Name of the rule.\n+     *\n+     * @return A Mono that completes with information about the created rule.\n+     * @throws ClientAuthenticationException if the client's credentials do not have access to modify the\n+     *     namespace.\n+     * @throws HttpResponseException If the request body was invalid, the quota is exceeded, or an error occurred\n+     *     processing the request.\n+     * @throws IllegalArgumentException if {@code topicName} or {@code ruleName} are are empty strings.\n+     * @throws NullPointerException if {@code topicName} or {@code ruleName} are are null.\n+     * @throws ResourceExistsException if a rule exists with the same topic, subscription, and rule name.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<RuleProperties> createRule(String topicName, String subscriptionName, String ruleName) {\n+        try {\n+            return createRule(topicName, subscriptionName, ruleName, new CreateRuleOptions());\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Creates a rule with the {@link CreateRuleOptions}.\n+     *\n+     * @param topicName Name of the topic associated with rule.\n+     * @param subscriptionName Name of the subscription associated with the rule.\n+     * @param ruleName Name of the rule.\n+     * @param ruleOptions Information about the rule to create.\n+     *\n+     * @return A Mono that completes with information about the created rule.\n+     * @throws ClientAuthenticationException if the client's credentials do not have access to modify the\n+     *     namespace.\n+     * @throws HttpResponseException If the request body was invalid, the quota is exceeded, or an error occurred\n+     *     processing the request.\n+     * @throws IllegalArgumentException if {@code topicName} or {@code ruleName} are are empty strings.\n+     * @throws NullPointerException if {@code topicName}, {@code ruleName}, or {@code ruleOptions}\n+     *     are are null.\n+     * @throws ResourceExistsException if a rule exists with the same topic and rule name.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<RuleProperties> createRule(String topicName, String ruleName, String subscriptionName,", "originalCommit": "1b30ed0dc220a58343ff1b5d11b1abfeab2c8ef4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4MzU0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14633#discussion_r480383547", "bodyText": "Good catch. Oops.", "author": "conniey", "createdAt": "2020-08-31T20:34:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0OTcyNg=="}], "type": "inlineReview", "revised_code": {"commit": "5a42beec0fb25a4e6ac329f8a3710f1eb062ff1d", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/ServiceBusAdministrationAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/ServiceBusAdministrationAsyncClient.java\nindex 5ebdabe991c..c6575fc3f37 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/ServiceBusAdministrationAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/ServiceBusAdministrationAsyncClient.java\n\n@@ -238,7 +238,7 @@ public final class ServiceBusAdministrationAsyncClient {\n      * @throws ResourceExistsException if a rule exists with the same topic and rule name.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<RuleProperties> createRule(String topicName, String ruleName, String subscriptionName,\n+    public Mono<RuleProperties> createRule(String topicName, String subscriptionName, String ruleName,\n         CreateRuleOptions ruleOptions) {\n \n         return createRuleWithResponse(topicName, subscriptionName, ruleName, ruleOptions)\n"}}, {"oid": "e254a9502d90cfc137e59a81b71745a98edc3bc2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e254a9502d90cfc137e59a81b71745a98edc3bc2", "message": "CreateRuleOptions is fluent.i", "committedDate": "2020-08-31T17:21:26Z", "type": "commit"}, {"oid": "0c4d7dfdf98ab566ba4c426138a82920d1224a9b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0c4d7dfdf98ab566ba4c426138a82920d1224a9b", "message": "Adding test case for create rule.", "committedDate": "2020-08-31T17:21:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3OTcyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14633#discussion_r480279722", "bodyText": "Should filter be checked for not null in constructor ?\nAlso is null action allowed here ?", "author": "hemanttanwar", "createdAt": "2020-08-31T17:31:45Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/models/RuleProperties.java", "diffHunk": "@@ -0,0 +1,270 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.administration.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.messaging.servicebus.implementation.EntityHelper;\n+import com.azure.messaging.servicebus.implementation.models.CorrelationFilterImpl;\n+import com.azure.messaging.servicebus.implementation.models.EmptyRuleActionImpl;\n+import com.azure.messaging.servicebus.implementation.models.FalseFilterImpl;\n+import com.azure.messaging.servicebus.implementation.models.KeyValueImpl;\n+import com.azure.messaging.servicebus.implementation.models.RuleActionImpl;\n+import com.azure.messaging.servicebus.implementation.models.RuleDescription;\n+import com.azure.messaging.servicebus.implementation.models.RuleFilterImpl;\n+import com.azure.messaging.servicebus.implementation.models.SqlFilterImpl;\n+import com.azure.messaging.servicebus.implementation.models.SqlRuleActionImpl;\n+import com.azure.messaging.servicebus.implementation.models.TrueFilterImpl;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Represents the properties of a rule.\n+ */\n+@Fluent\n+public class RuleProperties {\n+    private final String name;\n+    private RuleFilter filter;\n+    private RuleAction action;\n+\n+    static {\n+        EntityHelper.setRuleAccessor(new EntityHelper.RuleAccessor() {\n+            private final EmptyRuleActionImpl emptyRuleAction = new EmptyRuleActionImpl();\n+            private final SqlFilterImpl trueFilter = new TrueFilterImpl().setSqlExpression(\"1=1\");\n+            private final SqlFilterImpl falseFilter = new TrueFilterImpl().setSqlExpression(\"1=0\");\n+\n+            @Override\n+            public RuleProperties toModel(RuleDescription description) {\n+                final RuleFilter filter = description.getFilter() != null\n+                    ? toModel(description.getFilter())\n+                    : null;\n+                final RuleAction action = description.getAction() != null\n+                    ? toModel(description.getAction())\n+                    : null;\n+\n+                return new RuleProperties(description.getName(), filter, action);\n+            }\n+\n+            @Override\n+            public RuleAction toModel(RuleActionImpl implementation) {\n+                if (implementation instanceof EmptyRuleActionImpl) {\n+                    return EmptyRuleAction.getInstance();\n+                } else if (implementation instanceof SqlRuleActionImpl) {\n+                    final SqlRuleActionImpl action = (SqlRuleActionImpl) implementation;\n+                    final SqlRuleAction returned = new SqlRuleAction(action.getSqlExpression(),\n+                        action.getCompatibilityLevel(), action.isRequiresPreprocessing());\n+\n+                    if (action.getParameters() != null) {\n+                        for (KeyValueImpl parameter : action.getParameters()) {\n+                            returned.getProperties().put(parameter.getKey(), parameter.getValue());\n+                        }\n+                    }\n+\n+                    return returned;\n+                } else {\n+                    return null;\n+                }\n+            }\n+\n+            @Override\n+            public RuleFilter toModel(RuleFilterImpl implementation) {\n+                if (implementation instanceof TrueFilterImpl) {\n+                    return TrueRuleFilter.getInstance();\n+                } else if (implementation instanceof FalseFilterImpl) {\n+                    return FalseRuleFilter.getInstance();\n+                } else if (implementation instanceof CorrelationFilterImpl) {\n+                    final CorrelationFilterImpl filter = (CorrelationFilterImpl) implementation;\n+                    final CorrelationRuleFilter returned = new CorrelationRuleFilter()\n+                        .setContentType(filter.getContentType())\n+                        .setCorrelationId(filter.getCorrelationId())\n+                        .setLabel(filter.getLabel())\n+                        .setMessageId(filter.getMessageId())\n+                        .setTo(filter.getTo())\n+                        .setSessionId(filter.getSessionId())\n+                        .setReplyTo(filter.getReplyTo())\n+                        .setReplyToSessionId(filter.getReplyToSessionId());\n+\n+                    if (filter.getProperties() != null) {\n+                        filter.getProperties().forEach(keyValue ->\n+                            returned.getProperties().put(keyValue.getKey(), keyValue.getValue()));\n+                    }\n+\n+                    return returned;\n+                } else if (implementation instanceof SqlFilterImpl) {\n+                    final SqlFilterImpl filter = (SqlFilterImpl) implementation;\n+                    final SqlRuleFilter returned = new SqlRuleFilter(filter.getSqlExpression(),\n+                        filter.getCompatibilityLevel(), filter.isRequiresPreprocessing());\n+\n+                    if (filter.getParameters() != null) {\n+                        filter.getParameters().forEach(keyValue ->\n+                            returned.getProperties().put(keyValue.getKey(), keyValue.getValue()));\n+                    }\n+\n+                    return returned;\n+                } else {\n+                    return null;\n+                }\n+            }\n+\n+            @Override\n+            public RuleDescription toImplementation(RuleProperties ruleProperties) {\n+                final RuleFilterImpl filter = ruleProperties.getFilter() != null\n+                    ? toImplementation(ruleProperties.getFilter())\n+                    : null;\n+                final RuleActionImpl action = ruleProperties.getAction() != null\n+                    ? toImplementation(ruleProperties.getAction())\n+                    : null;\n+\n+                return new RuleDescription()\n+                    .setName(ruleProperties.getName())\n+                    .setAction(action)\n+                    .setFilter(filter);\n+            }\n+\n+            @Override\n+            public RuleActionImpl toImplementation(RuleAction model) {\n+                if (model instanceof EmptyRuleAction) {\n+                    return emptyRuleAction;\n+                } else if (model instanceof SqlRuleAction) {\n+                    final SqlRuleAction action = (SqlRuleAction) model;\n+                    final SqlRuleActionImpl returned = new SqlRuleActionImpl()\n+                        .setSqlExpression(action.getSqlExpression())\n+                        .setCompatibilityLevel(action.getCompatibilityLevel())\n+                        .setRequiresPreprocessing(action.getRequiresPreprocessing());\n+\n+                    if (!action.getProperties().isEmpty()) {\n+                        final List<KeyValueImpl> parameters = action.getProperties().entrySet().stream()\n+                            .map(entry -> new KeyValueImpl()\n+                                .setKey(entry.getKey()).setValue(entry.getValue().toString()))\n+                            .collect(Collectors.toList());\n+\n+                        returned.setParameters(parameters);\n+                    }\n+\n+                    return returned;\n+                } else {\n+                    return null;\n+                }\n+            }\n+\n+            @Override\n+            public RuleFilterImpl toImplementation(RuleFilter model) {\n+                if (model instanceof TrueRuleFilter) {\n+                    return trueFilter;\n+                } else if (model instanceof FalseRuleFilter) {\n+                    return falseFilter;\n+                } else if (model instanceof CorrelationRuleFilter) {\n+                    final CorrelationRuleFilter filter = (CorrelationRuleFilter) model;\n+                    final CorrelationFilterImpl returned = new CorrelationFilterImpl()\n+                        .setContentType(filter.getContentType())\n+                        .setCorrelationId(filter.getCorrelationId())\n+                        .setLabel(filter.getLabel())\n+                        .setMessageId(filter.getMessageId())\n+                        .setTo(filter.getTo())\n+                        .setSessionId(filter.getSessionId())\n+                        .setReplyTo(filter.getReplyTo())\n+                        .setReplyToSessionId(filter.getReplyToSessionId());\n+\n+                    if (!filter.getProperties().isEmpty()) {\n+                        final List<KeyValueImpl> parameters = filter.getProperties().entrySet()\n+                            .stream()\n+                            .map(entry -> new KeyValueImpl()\n+                                .setKey(entry.getKey()).setValue(entry.getValue().toString()))\n+                            .collect(Collectors.toList());\n+\n+                        returned.setProperties(parameters);\n+                    }\n+\n+                    return returned;\n+                } else if (model instanceof SqlRuleFilter) {\n+                    final SqlRuleFilter filter = (SqlRuleFilter) model;\n+                    final SqlFilterImpl returned = new SqlFilterImpl()\n+                        .setSqlExpression(filter.getSqlExpression())\n+                        .setCompatibilityLevel(filter.getCompatibilityLevel())\n+                        .setRequiresPreprocessing(filter.getRequiresPreprocessing());\n+\n+                    if (!filter.getProperties().isEmpty()) {\n+                        final List<KeyValueImpl> parameters = filter.getProperties().entrySet()\n+                            .stream()\n+                            .map(entry -> new KeyValueImpl()\n+                                .setKey(entry.getKey()).setValue(entry.getValue().toString()))\n+                            .collect(Collectors.toList());\n+\n+                        returned.setParameters(parameters);\n+                    }\n+\n+                    return returned;\n+                } else {\n+                    return null;\n+                }\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Initializes a new instance with the given rule {@code name}, {@code filter}, and {@code action}.\n+     *\n+     * @param name Name of the rule.\n+     * @param filter Filter for the rule.\n+     * @param action Action for the rule.\n+     */\n+    RuleProperties(String name, RuleFilter filter, RuleAction action) {\n+        this.name = name;", "originalCommit": "1b30ed0dc220a58343ff1b5d11b1abfeab2c8ef4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQyMDI5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14633#discussion_r480420295", "bodyText": "This is package private because the service returns the values. It's possible to have a rule that has no action. or a rule that has no filter.", "author": "conniey", "createdAt": "2020-08-31T21:53:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI3OTcyMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4MzA1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14633#discussion_r480283056", "bodyText": "Did we consider not having these types , they are String sqlExpression and user can directly create instance of SqlRuleFilter ?", "author": "hemanttanwar", "createdAt": "2020-08-31T17:38:05Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/administration/models/TrueRuleFilter.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus.administration.models;\n+\n+/**\n+ * Matches all the messages arriving to be selected for the subscription.\n+ */\n+public final class TrueRuleFilter extends SqlRuleFilter {\n+    private static final TrueRuleFilter INSTANCE = new TrueRuleFilter();", "originalCommit": "1b30ed0dc220a58343ff1b5d11b1abfeab2c8ef4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQyMDA2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14633#discussion_r480420064", "bodyText": "They exist in the .NET API and I believe we talked about this.", "author": "conniey", "createdAt": "2020-08-31T21:53:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4MzA1Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "5a42beec0fb25a4e6ac329f8a3710f1eb062ff1d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5a42beec0fb25a4e6ac329f8a3710f1eb062ff1d", "message": "Fix naming in subscription.", "committedDate": "2020-08-31T22:07:09Z", "type": "commit"}, {"oid": "d70e643a3cd0e14da05f04b12aaae5ffa2b0dfb5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d70e643a3cd0e14da05f04b12aaae5ffa2b0dfb5", "message": "Adding tests for getrule and list rules.", "committedDate": "2020-08-31T22:16:09Z", "type": "commit"}, {"oid": "acedfd6220281b476ad9dce4819c9cea76cc3433", "url": "https://github.com/Azure/azure-sdk-for-java/commit/acedfd6220281b476ad9dce4819c9cea76cc3433", "message": "CreateRuleOptions docs.", "committedDate": "2020-08-31T22:26:16Z", "type": "commit"}]}