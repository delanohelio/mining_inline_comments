{"pr_number": 12999, "pr_title": "Cosmos: preview for a more detailed CFP state reporting", "pr_createdAt": "2020-07-10T06:35:28Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/12999", "timeline": [{"oid": "1423454d8fb539554456bc8540ee85cc5d515475", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1423454d8fb539554456bc8540ee85cc5d515475", "message": "Add preview implementation for a more detailed lag estimator.", "committedDate": "2020-07-10T06:15:15Z", "type": "commit"}, {"oid": "ad1c44525c9dbd923ffd7d90c125424d469b7d52", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ad1c44525c9dbd923ffd7d90c125424d469b7d52", "message": "add test case", "committedDate": "2020-07-10T06:31:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1Mzk3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452653979", "bodyText": "This would need to be of type FeedRange soon. https://github.com/FabianMeiswinkel/azure-sdk-for-java/blob/master/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/FeedRange.java\nI think we have 3 Options:\n\nKeep it String here, to avoid breaking change use the FeedRange.toSjon as the value and expect customers to do the transformations upstream\nMake a breaking change to this preview contract when I merge the FeedRange changes - would probably be good to set expectations with Walmart that we expect some breaking changes here\nAdd FeedRange as an additional field - make Id the FeedRange.toJson() - this way it doesn't break and the Id might not be very useful anymore but also doesn't really cause harm\n\nI think 3) is an acceptable solution - le me know whether you agree/disagree", "author": "FabianMeiswinkel", "createdAt": "2020-07-10T06:49:35Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java", "diffHunk": "@@ -0,0 +1,172 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.ChangeFeedProcessor;\n+import com.azure.cosmos.util.Beta;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Specifies the {@link ChangeFeedProcessor} state for a particular lease/worker.\n+ */\n+@Beta(Beta.SinceVersion.V4_2_0)\n+public class ChangeFeedProcessorState {\n+    private String id;\n+    private String leaseToken;\n+    private String hostName;\n+    private Instant lastUpdate;\n+    private String continuationToken;\n+    private Instant continuationTokenTimestamp;\n+    private int estimatedLag;\n+\n+    /**\n+     * Gets the ID of the lease item representing the persistent state of a change feed processor worker.\n+     *\n+     * @return the ID of the lease item.\n+     */\n+    public String getId() {", "originalCommit": "ad1c44525c9dbd923ffd7d90c125424d469b7d52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMjI1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452922259", "bodyText": "The ID here is just a regular unique identifier for the lease document inside the lease collection. In the CFP \"push\" case we can have multiple independent instances operating on the same feed container and possibly sharing the same lease container to check-point the state; to differentiate between then a \"lease prefix' is being used.\nRegarding the FeedRage, I thin that will more or less matches the lease token which defines the actual scope of a single worker which will process the feeds.", "author": "milismsft", "createdAt": "2020-07-10T15:40:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1Mzk3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d8feb2952d5059824a7da54c87e8909a88e116a3", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java\nindex 431d35bee19..b0d00835a19 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java\n\n@@ -16,7 +16,7 @@ public class ChangeFeedProcessorState {\n     private String id;\n     private String leaseToken;\n     private String hostName;\n-    private Instant lastUpdate;\n+    private Instant lastUpdatedTime;\n     private String continuationToken;\n     private Instant continuationTokenTimestamp;\n     private int estimatedLag;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NTAyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452655028", "bodyText": "NIT: final static \"consts\" as class level to avoid allocation for every execution", "author": "FabianMeiswinkel", "createdAt": "2020-07-10T06:52:13Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java", "diffHunk": "@@ -209,6 +214,92 @@ public boolean isStarted() {\n             });\n     }\n \n+    /**\n+     * Returns a list of states each representing one scoped worker item.\n+     * <p>\n+     * An empty list will be returned if the processor was not started or no lease items matching the current\n+     *   {@link ChangeFeedProcessor} instance's lease prefix could be found.\n+     *\n+     * @return a list of states each representing one scoped worker item.\n+     */\n+    @Override\n+    public Mono<List<ChangeFeedProcessorState>> getCurrentState() {\n+        List<ChangeFeedProcessorState> earlyResult = new ArrayList<>();\n+\n+        if (this.leaseStoreManager == null || this.feedContextClient == null) {\n+            return Mono.just(earlyResult);\n+        }\n+\n+        return this.leaseStoreManager.getAllLeases()\n+            .flatMap(lease -> {\n+                ChangeFeedOptions options = new ChangeFeedOptions()\n+                    .setMaxItemCount(1)\n+                    .setPartitionKeyRangeId(lease.getLeaseToken())\n+                    .setStartFromBeginning(true)\n+                    .setRequestContinuation(lease.getContinuationToken());\n+\n+                return this.feedContextClient.createDocumentChangeFeedQuery(this.feedContextClient.getContainerClient(), options)\n+                    .take(1)\n+                    .map(feedResponse -> {\n+                        final String pkRangeIdSeparator = \":\";\n+                        final String segmentSeparator = \"#\";", "originalCommit": "ad1c44525c9dbd923ffd7d90c125424d469b7d52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNzg1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452927856", "bodyText": "yep, makes sense since these are also shared in the code above.", "author": "milismsft", "createdAt": "2020-07-10T15:51:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NTAyOA=="}], "type": "inlineReview", "revised_code": {"commit": "995efd2c40c18208fd769eaf31d322f402993d5e", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\nindex e8c0c2c553b..f783f3e470f 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\n\n@@ -227,7 +229,7 @@ public class ChangeFeedProcessorBuilderImpl implements ChangeFeedProcessor, Auto\n         List<ChangeFeedProcessorState> earlyResult = new ArrayList<>();\n \n         if (this.leaseStoreManager == null || this.feedContextClient == null) {\n-            return Mono.just(earlyResult);\n+            return Mono.just(Collections.unmodifiableList(earlyResult));\n         }\n \n         return this.leaseStoreManager.getAllLeases()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NTQwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452655408", "bodyText": "NIT: final", "author": "FabianMeiswinkel", "createdAt": "2020-07-10T06:53:09Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java", "diffHunk": "@@ -209,6 +214,92 @@ public boolean isStarted() {\n             });\n     }\n \n+    /**\n+     * Returns a list of states each representing one scoped worker item.\n+     * <p>\n+     * An empty list will be returned if the processor was not started or no lease items matching the current\n+     *   {@link ChangeFeedProcessor} instance's lease prefix could be found.\n+     *\n+     * @return a list of states each representing one scoped worker item.\n+     */\n+    @Override\n+    public Mono<List<ChangeFeedProcessorState>> getCurrentState() {\n+        List<ChangeFeedProcessorState> earlyResult = new ArrayList<>();\n+\n+        if (this.leaseStoreManager == null || this.feedContextClient == null) {\n+            return Mono.just(earlyResult);\n+        }\n+\n+        return this.leaseStoreManager.getAllLeases()\n+            .flatMap(lease -> {\n+                ChangeFeedOptions options = new ChangeFeedOptions()\n+                    .setMaxItemCount(1)\n+                    .setPartitionKeyRangeId(lease.getLeaseToken())\n+                    .setStartFromBeginning(true)\n+                    .setRequestContinuation(lease.getContinuationToken());\n+\n+                return this.feedContextClient.createDocumentChangeFeedQuery(this.feedContextClient.getContainerClient(), options)\n+                    .take(1)\n+                    .map(feedResponse -> {\n+                        final String pkRangeIdSeparator = \":\";\n+                        final String segmentSeparator = \"#\";\n+                        final String lsnPropertyName = \"_lsn\";\n+                        final String tsPropertyName = \"_ts\";\n+\n+                        String sessionTokenLsn = feedResponse.getSessionToken();", "originalCommit": "ad1c44525c9dbd923ffd7d90c125424d469b7d52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NTc2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452655765", "bodyText": "Same for several of the local variables below", "author": "FabianMeiswinkel", "createdAt": "2020-07-10T06:54:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NTQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzMjAzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452932034", "bodyText": "Though these have one assignment, it will look a bit odd when compared with similar patterns in the rest of the implementation (not just CFP).\nAnd since they are not consumed by any Reactor code as arguments down the execution path which requires as such, they don't really need to be final...", "author": "milismsft", "createdAt": "2020-07-10T15:58:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NTQwOA=="}], "type": "inlineReview", "revised_code": {"commit": "995efd2c40c18208fd769eaf31d322f402993d5e", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\nindex e8c0c2c553b..f783f3e470f 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\n\n@@ -227,7 +229,7 @@ public class ChangeFeedProcessorBuilderImpl implements ChangeFeedProcessor, Auto\n         List<ChangeFeedProcessorState> earlyResult = new ArrayList<>();\n \n         if (this.leaseStoreManager == null || this.feedContextClient == null) {\n-            return Mono.just(earlyResult);\n+            return Mono.just(Collections.unmodifiableList(earlyResult));\n         }\n \n         return this.leaseStoreManager.getAllLeases()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1Njg1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452656856", "bodyText": "NIT: assign local variable for feedResponse.getResults() to avoid repetitive invocation of the property getter", "author": "FabianMeiswinkel", "createdAt": "2020-07-10T06:56:57Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java", "diffHunk": "@@ -209,6 +214,92 @@ public boolean isStarted() {\n             });\n     }\n \n+    /**\n+     * Returns a list of states each representing one scoped worker item.\n+     * <p>\n+     * An empty list will be returned if the processor was not started or no lease items matching the current\n+     *   {@link ChangeFeedProcessor} instance's lease prefix could be found.\n+     *\n+     * @return a list of states each representing one scoped worker item.\n+     */\n+    @Override\n+    public Mono<List<ChangeFeedProcessorState>> getCurrentState() {\n+        List<ChangeFeedProcessorState> earlyResult = new ArrayList<>();\n+\n+        if (this.leaseStoreManager == null || this.feedContextClient == null) {\n+            return Mono.just(earlyResult);\n+        }\n+\n+        return this.leaseStoreManager.getAllLeases()\n+            .flatMap(lease -> {\n+                ChangeFeedOptions options = new ChangeFeedOptions()\n+                    .setMaxItemCount(1)\n+                    .setPartitionKeyRangeId(lease.getLeaseToken())\n+                    .setStartFromBeginning(true)\n+                    .setRequestContinuation(lease.getContinuationToken());\n+\n+                return this.feedContextClient.createDocumentChangeFeedQuery(this.feedContextClient.getContainerClient(), options)\n+                    .take(1)\n+                    .map(feedResponse -> {\n+                        final String pkRangeIdSeparator = \":\";\n+                        final String segmentSeparator = \"#\";\n+                        final String lsnPropertyName = \"_lsn\";\n+                        final String tsPropertyName = \"_ts\";\n+\n+                        String sessionTokenLsn = feedResponse.getSessionToken();\n+                        String parsedSessionToken = sessionTokenLsn.substring(sessionTokenLsn.indexOf(pkRangeIdSeparator));\n+                        String[] segments = parsedSessionToken.split(segmentSeparator);\n+                        String latestLsn = segments[0];\n+\n+                        if (segments.length >= 2) {\n+                            // default to Global LSN\n+                            latestLsn = segments[1];\n+                        }\n+\n+                        ChangeFeedProcessorState changeFeedProcessorState = new ChangeFeedProcessorState()\n+                            .setId(lease.getId())\n+                            .setHostName(lease.getOwner())\n+                            .setLeaseToken(lease.getLeaseToken())\n+                            .setLastUpdate(ZonedDateTime.parse(lease.getTimestamp()).toInstant());\n+\n+\n+                        // An empty list of documents returned means that we are current (zero lag)\n+                        if (feedResponse.getResults() == null || feedResponse.getResults().size() == 0) {", "originalCommit": "ad1c44525c9dbd923ffd7d90c125424d469b7d52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzMzYyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452933627", "bodyText": "I'll keep it as such, it is easier to read the code. The property getter does not execute any particular complex operation, it just returns an internal member.", "author": "milismsft", "createdAt": "2020-07-10T16:01:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1Njg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNjIxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r453006210", "bodyText": "also java compiler may inline these. so shouldn't be a perf hit.", "author": "moderakh", "createdAt": "2020-07-10T18:30:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1Njg1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "995efd2c40c18208fd769eaf31d322f402993d5e", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\nindex e8c0c2c553b..f783f3e470f 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\n\n@@ -227,7 +229,7 @@ public class ChangeFeedProcessorBuilderImpl implements ChangeFeedProcessor, Auto\n         List<ChangeFeedProcessorState> earlyResult = new ArrayList<>();\n \n         if (this.leaseStoreManager == null || this.feedContextClient == null) {\n-            return Mono.just(earlyResult);\n+            return Mono.just(Collections.unmodifiableList(earlyResult));\n         }\n \n         return this.leaseStoreManager.getAllLeases()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NzQ4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452657488", "bodyText": "Not sure - my style-preference would be\nchangeFeedProcessorState\n.setEstimatedLag(0)\n.setContinuationToken(latestLsn);\nBut feel free to ignore if the non-fluent style is what makes the code more consistent etc.", "author": "FabianMeiswinkel", "createdAt": "2020-07-10T06:58:36Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java", "diffHunk": "@@ -209,6 +214,92 @@ public boolean isStarted() {\n             });\n     }\n \n+    /**\n+     * Returns a list of states each representing one scoped worker item.\n+     * <p>\n+     * An empty list will be returned if the processor was not started or no lease items matching the current\n+     *   {@link ChangeFeedProcessor} instance's lease prefix could be found.\n+     *\n+     * @return a list of states each representing one scoped worker item.\n+     */\n+    @Override\n+    public Mono<List<ChangeFeedProcessorState>> getCurrentState() {\n+        List<ChangeFeedProcessorState> earlyResult = new ArrayList<>();\n+\n+        if (this.leaseStoreManager == null || this.feedContextClient == null) {\n+            return Mono.just(earlyResult);\n+        }\n+\n+        return this.leaseStoreManager.getAllLeases()\n+            .flatMap(lease -> {\n+                ChangeFeedOptions options = new ChangeFeedOptions()\n+                    .setMaxItemCount(1)\n+                    .setPartitionKeyRangeId(lease.getLeaseToken())\n+                    .setStartFromBeginning(true)\n+                    .setRequestContinuation(lease.getContinuationToken());\n+\n+                return this.feedContextClient.createDocumentChangeFeedQuery(this.feedContextClient.getContainerClient(), options)\n+                    .take(1)\n+                    .map(feedResponse -> {\n+                        final String pkRangeIdSeparator = \":\";\n+                        final String segmentSeparator = \"#\";\n+                        final String lsnPropertyName = \"_lsn\";\n+                        final String tsPropertyName = \"_ts\";\n+\n+                        String sessionTokenLsn = feedResponse.getSessionToken();\n+                        String parsedSessionToken = sessionTokenLsn.substring(sessionTokenLsn.indexOf(pkRangeIdSeparator));\n+                        String[] segments = parsedSessionToken.split(segmentSeparator);\n+                        String latestLsn = segments[0];\n+\n+                        if (segments.length >= 2) {\n+                            // default to Global LSN\n+                            latestLsn = segments[1];\n+                        }\n+\n+                        ChangeFeedProcessorState changeFeedProcessorState = new ChangeFeedProcessorState()\n+                            .setId(lease.getId())\n+                            .setHostName(lease.getOwner())\n+                            .setLeaseToken(lease.getLeaseToken())\n+                            .setLastUpdate(ZonedDateTime.parse(lease.getTimestamp()).toInstant());\n+\n+\n+                        // An empty list of documents returned means that we are current (zero lag)\n+                        if (feedResponse.getResults() == null || feedResponse.getResults().size() == 0) {\n+                            changeFeedProcessorState.setEstimatedLag(0);\n+                            changeFeedProcessorState.setContinuationToken(latestLsn);", "originalCommit": "ad1c44525c9dbd923ffd7d90c125424d469b7d52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMjc2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452922769", "bodyText": "I agree, this should be fluent style - if changeFeedProcessorState supports it.", "author": "kushagraThapar", "createdAt": "2020-07-10T15:41:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NzQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4Njk5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452986996", "bodyText": "In general I prefer the same \"fluidity\", especially after invoking the constructor :-)", "author": "milismsft", "createdAt": "2020-07-10T17:49:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1NzQ4OA=="}], "type": "inlineReview", "revised_code": {"commit": "995efd2c40c18208fd769eaf31d322f402993d5e", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\nindex e8c0c2c553b..f783f3e470f 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\n\n@@ -227,7 +229,7 @@ public class ChangeFeedProcessorBuilderImpl implements ChangeFeedProcessor, Auto\n         List<ChangeFeedProcessorState> earlyResult = new ArrayList<>();\n \n         if (this.leaseStoreManager == null || this.feedContextClient == null) {\n-            return Mono.just(earlyResult);\n+            return Mono.just(Collections.unmodifiableList(earlyResult));\n         }\n \n         return this.leaseStoreManager.getAllLeases()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1ODI1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452658253", "bodyText": "Wouldn't this indicate a critical failure - tracing as warning and ignoring unexpected backend response seems to make it harder than necessary to identify breaking changes / debug it?", "author": "FabianMeiswinkel", "createdAt": "2020-07-10T07:00:37Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java", "diffHunk": "@@ -209,6 +214,92 @@ public boolean isStarted() {\n             });\n     }\n \n+    /**\n+     * Returns a list of states each representing one scoped worker item.\n+     * <p>\n+     * An empty list will be returned if the processor was not started or no lease items matching the current\n+     *   {@link ChangeFeedProcessor} instance's lease prefix could be found.\n+     *\n+     * @return a list of states each representing one scoped worker item.\n+     */\n+    @Override\n+    public Mono<List<ChangeFeedProcessorState>> getCurrentState() {\n+        List<ChangeFeedProcessorState> earlyResult = new ArrayList<>();\n+\n+        if (this.leaseStoreManager == null || this.feedContextClient == null) {\n+            return Mono.just(earlyResult);\n+        }\n+\n+        return this.leaseStoreManager.getAllLeases()\n+            .flatMap(lease -> {\n+                ChangeFeedOptions options = new ChangeFeedOptions()\n+                    .setMaxItemCount(1)\n+                    .setPartitionKeyRangeId(lease.getLeaseToken())\n+                    .setStartFromBeginning(true)\n+                    .setRequestContinuation(lease.getContinuationToken());\n+\n+                return this.feedContextClient.createDocumentChangeFeedQuery(this.feedContextClient.getContainerClient(), options)\n+                    .take(1)\n+                    .map(feedResponse -> {\n+                        final String pkRangeIdSeparator = \":\";\n+                        final String segmentSeparator = \"#\";\n+                        final String lsnPropertyName = \"_lsn\";\n+                        final String tsPropertyName = \"_ts\";\n+\n+                        String sessionTokenLsn = feedResponse.getSessionToken();\n+                        String parsedSessionToken = sessionTokenLsn.substring(sessionTokenLsn.indexOf(pkRangeIdSeparator));\n+                        String[] segments = parsedSessionToken.split(segmentSeparator);\n+                        String latestLsn = segments[0];\n+\n+                        if (segments.length >= 2) {\n+                            // default to Global LSN\n+                            latestLsn = segments[1];\n+                        }\n+\n+                        ChangeFeedProcessorState changeFeedProcessorState = new ChangeFeedProcessorState()\n+                            .setId(lease.getId())\n+                            .setHostName(lease.getOwner())\n+                            .setLeaseToken(lease.getLeaseToken())\n+                            .setLastUpdate(ZonedDateTime.parse(lease.getTimestamp()).toInstant());\n+\n+\n+                        // An empty list of documents returned means that we are current (zero lag)\n+                        if (feedResponse.getResults() == null || feedResponse.getResults().size() == 0) {\n+                            changeFeedProcessorState.setEstimatedLag(0);\n+                            changeFeedProcessorState.setContinuationToken(latestLsn);\n+\n+                            return changeFeedProcessorState;\n+                        }\n+\n+                        changeFeedProcessorState.setContinuationToken(feedResponse.getResults().get(0).get(lsnPropertyName).asText(null));\n+\n+                        try {\n+                            changeFeedProcessorState.setContinuationTokenTimestamp(Instant.ofEpochMilli(Long.valueOf(\n+                                    feedResponse.getResults().get(0).get(tsPropertyName).asText(\"0\"))));\n+                        } catch (NumberFormatException ex) {", "originalCommit": "ad1c44525c9dbd923ffd7d90c125424d469b7d52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMzAyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452923025", "bodyText": "_ts should always be a long - right ?", "author": "kushagraThapar", "createdAt": "2020-07-10T15:42:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1ODI1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5MDA3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452990079", "bodyText": "The error though unexpected (_ts system property is an epoch), it is not fatal (there's a log warning capturing this). Setting the continuation token as \"null\" is an indicator that the document found is not valid; i.e. we initialized CFP leases but we are yet to process any changes in this particular scope/partition.", "author": "milismsft", "createdAt": "2020-07-10T17:55:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1ODI1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "995efd2c40c18208fd769eaf31d322f402993d5e", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\nindex e8c0c2c553b..f783f3e470f 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\n\n@@ -227,7 +229,7 @@ public class ChangeFeedProcessorBuilderImpl implements ChangeFeedProcessor, Auto\n         List<ChangeFeedProcessorState> earlyResult = new ArrayList<>();\n \n         if (this.leaseStoreManager == null || this.feedContextClient == null) {\n-            return Mono.just(earlyResult);\n+            return Mono.just(Collections.unmodifiableList(earlyResult));\n         }\n \n         return this.leaseStoreManager.getAllLeases()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1OTY2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452659666", "bodyText": "Again - feel free to ignore for consistency etc. - I am still struggling with Java not having a clear way to distinguish ReadOnlyList in the contract. But form my intuition I would expect it to be clearly documented in the Api doc comments if a method returns an unmodifiable list - so would it make sense to add a comment along tehse lines above? Also wouldn't it make sense to also return an unmodifiable list in the short-cut - when the list is empty) above to be consistent?", "author": "FabianMeiswinkel", "createdAt": "2020-07-10T07:03:42Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java", "diffHunk": "@@ -209,6 +214,92 @@ public boolean isStarted() {\n             });\n     }\n \n+    /**\n+     * Returns a list of states each representing one scoped worker item.\n+     * <p>\n+     * An empty list will be returned if the processor was not started or no lease items matching the current\n+     *   {@link ChangeFeedProcessor} instance's lease prefix could be found.\n+     *\n+     * @return a list of states each representing one scoped worker item.\n+     */\n+    @Override\n+    public Mono<List<ChangeFeedProcessorState>> getCurrentState() {\n+        List<ChangeFeedProcessorState> earlyResult = new ArrayList<>();\n+\n+        if (this.leaseStoreManager == null || this.feedContextClient == null) {\n+            return Mono.just(earlyResult);\n+        }\n+\n+        return this.leaseStoreManager.getAllLeases()\n+            .flatMap(lease -> {\n+                ChangeFeedOptions options = new ChangeFeedOptions()\n+                    .setMaxItemCount(1)\n+                    .setPartitionKeyRangeId(lease.getLeaseToken())\n+                    .setStartFromBeginning(true)\n+                    .setRequestContinuation(lease.getContinuationToken());\n+\n+                return this.feedContextClient.createDocumentChangeFeedQuery(this.feedContextClient.getContainerClient(), options)\n+                    .take(1)\n+                    .map(feedResponse -> {\n+                        final String pkRangeIdSeparator = \":\";\n+                        final String segmentSeparator = \"#\";\n+                        final String lsnPropertyName = \"_lsn\";\n+                        final String tsPropertyName = \"_ts\";\n+\n+                        String sessionTokenLsn = feedResponse.getSessionToken();\n+                        String parsedSessionToken = sessionTokenLsn.substring(sessionTokenLsn.indexOf(pkRangeIdSeparator));\n+                        String[] segments = parsedSessionToken.split(segmentSeparator);\n+                        String latestLsn = segments[0];\n+\n+                        if (segments.length >= 2) {\n+                            // default to Global LSN\n+                            latestLsn = segments[1];\n+                        }\n+\n+                        ChangeFeedProcessorState changeFeedProcessorState = new ChangeFeedProcessorState()\n+                            .setId(lease.getId())\n+                            .setHostName(lease.getOwner())\n+                            .setLeaseToken(lease.getLeaseToken())\n+                            .setLastUpdate(ZonedDateTime.parse(lease.getTimestamp()).toInstant());\n+\n+\n+                        // An empty list of documents returned means that we are current (zero lag)\n+                        if (feedResponse.getResults() == null || feedResponse.getResults().size() == 0) {\n+                            changeFeedProcessorState.setEstimatedLag(0);\n+                            changeFeedProcessorState.setContinuationToken(latestLsn);\n+\n+                            return changeFeedProcessorState;\n+                        }\n+\n+                        changeFeedProcessorState.setContinuationToken(feedResponse.getResults().get(0).get(lsnPropertyName).asText(null));\n+\n+                        try {\n+                            changeFeedProcessorState.setContinuationTokenTimestamp(Instant.ofEpochMilli(Long.valueOf(\n+                                    feedResponse.getResults().get(0).get(tsPropertyName).asText(\"0\"))));\n+                        } catch (NumberFormatException ex) {\n+                            logger.warn(\"Unexpected Cosmos _ts found\", ex);\n+                            changeFeedProcessorState.setContinuationTokenTimestamp(null);\n+                        }\n+\n+                        Integer currentLsn = 0;\n+                        Integer estimatedLag = 0;\n+                        try {\n+                            currentLsn = Integer.valueOf(feedResponse.getResults().get(0).get(lsnPropertyName).asText(\"0\"));\n+                            estimatedLag = Integer.valueOf(latestLsn);\n+                            estimatedLag = estimatedLag - currentLsn + 1;\n+                            changeFeedProcessorState.setEstimatedLag(estimatedLag);\n+                        } catch (NumberFormatException ex) {\n+                            logger.warn(\"Unexpected Cosmos LSN found\", ex);\n+                            changeFeedProcessorState.setEstimatedLag(-1);\n+                        }\n+\n+                        return changeFeedProcessorState;\n+                    });\n+            })\n+            .collectList()\n+            .map(Collections::unmodifiableList);", "originalCommit": "ad1c44525c9dbd923ffd7d90c125424d469b7d52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5ODM2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452998369", "bodyText": "yep, I've updated the doc to capture this is a read only list.", "author": "milismsft", "createdAt": "2020-07-10T18:13:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1OTY2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk5ODU4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452998588", "bodyText": "also fixed the empty list early returned case (thanks for catching that up).", "author": "milismsft", "createdAt": "2020-07-10T18:13:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1OTY2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "995efd2c40c18208fd769eaf31d322f402993d5e", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\nindex e8c0c2c553b..f783f3e470f 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\n\n@@ -227,7 +229,7 @@ public class ChangeFeedProcessorBuilderImpl implements ChangeFeedProcessor, Auto\n         List<ChangeFeedProcessorState> earlyResult = new ArrayList<>();\n \n         if (this.leaseStoreManager == null || this.feedContextClient == null) {\n-            return Mono.just(earlyResult);\n+            return Mono.just(Collections.unmodifiableList(earlyResult));\n         }\n \n         return this.leaseStoreManager.getAllLeases()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1OTk5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452659996", "bodyText": "Nice - thanks for taking care of this :-)", "author": "FabianMeiswinkel", "createdAt": "2020-07-10T07:04:20Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/Beta.java", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+", "originalCommit": "ad1c44525c9dbd923ffd7d90c125424d469b7d52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMzA5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452923095", "bodyText": "np :-)", "author": "milismsft", "createdAt": "2020-07-10T15:42:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1OTk5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "bf610e52f846e0205e098446d683aaf03ee60389", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/Beta.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/Beta.java\nindex 7c4be5b3a4e..e016d948105 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/Beta.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/Beta.java\n\n@@ -28,73 +28,17 @@ public @interface Beta {\n     /**\n      * @return the version number when the annotated API was first introduced to the library as in Beta\n      */\n-    SinceVersion value() default SinceVersion.V4_2_0;\n+    SinceVersion value() default SinceVersion.V4_5_0;\n \n     /**\n      * Azure library version numbers\n      */\n     public enum SinceVersion {\n-        /** v4.1.0 */\n-        V4_1_0,\n-\n-        /** v4.2.0 */\n-        V4_2_0,\n-\n         /** v4.3.0 */\n         V4_3_0,\n-\n         /** v4.4.0 */\n         V4_4_0,\n-\n         /** v4.5.0 */\n-        V4_5_0,\n-\n-        /** v4.6.0 */\n-        V4_6_0,\n-\n-        /** v4.7.0 */\n-        V4_7_0,\n-\n-        /** v4.8.0 */\n-        V4_8_0,\n-\n-        /** v4.9.0 */\n-        V4_9_0,\n-\n-        /** v4.10.0 */\n-        V4_10_0,\n-\n-        /** v4.11.0 */\n-        V4_11_0,\n-\n-        /** v4.12.0 */\n-        V4_12_0,\n-\n-        /** v4.13.0 */\n-        V4_13_0,\n-\n-        /** v4.14.0 */\n-        V4_14_0,\n-\n-        /** v4.15.0 */\n-        V4_15_0,\n-\n-        /** v4.16.0 */\n-        V4_16_0,\n-\n-        /** v4.17.0 */\n-        V4_17_0,\n-\n-        /** v4.18.0 */\n-        V4_18_0,\n-\n-        /** v4.19.0 */\n-        V4_19_0,\n-\n-        /** v4.20.0 */\n-        V4_20_0,\n-\n-        /** v5.0.0 */\n-        V5_0_0\n+        V4_5_0\n     }\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMjgzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r452922836", "bodyText": "Capturing the comment from above...\nThis would need to be of type FeedRange soon. https://github.com/FabianMeiswinkel/azure-sdk-for-java/blob/master/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/FeedRange.java\nI think we have 3 Options:\nKeep it String here, to avoid breaking change use the FeedRange.toSjon as the value and expect customers to do the transformations upstream\nMake a breaking change to this preview contract when I merge the FeedRange changes - would probably be good to set expectations with Walmart that we expect some breaking changes here\nAdd FeedRange as an additional field - make Id the FeedRange.toJson() - this way it doesn't break and the Id might not be very useful anymore but also doesn't really cause harm\nI think 3) is an acceptable solution - le me know whether you agree/disagree", "author": "milismsft", "createdAt": "2020-07-10T15:41:51Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java", "diffHunk": "@@ -0,0 +1,172 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.ChangeFeedProcessor;\n+import com.azure.cosmos.util.Beta;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Specifies the {@link ChangeFeedProcessor} state for a particular lease/worker.\n+ */\n+@Beta(Beta.SinceVersion.V4_2_0)\n+public class ChangeFeedProcessorState {\n+    private String id;\n+    private String leaseToken;\n+    private String hostName;\n+    private Instant lastUpdate;\n+    private String continuationToken;\n+    private Instant continuationTokenTimestamp;\n+    private int estimatedLag;\n+\n+    /**\n+     * Gets the ID of the lease item representing the persistent state of a change feed processor worker.\n+     *\n+     * @return the ID of the lease item.\n+     */\n+    public String getId() {\n+        return this.id;\n+    }\n+\n+    /**\n+     * Sets the ID of the lease item representing the persistent state of a chenge feed processor worker.\n+     *\n+     * @param id a unique string.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setId(String id) {\n+        this.id = id;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the token of the lease item representing the persistent state of a change feed processor worker.\n+     * <p>\n+     * A lease token is a unique identifier representing a specific scope that a CFP worker will operate on.\n+     *\n+     * @return a string token uniquely representing the scope for one worker unit.\n+     */\n+    public String getLeaseToken() {", "originalCommit": "ad1c44525c9dbd923ffd7d90c125424d469b7d52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAyNTU1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r453025550", "bodyText": "The lease token can be any string representing one scope for a CFP worker to operate on, including a JSON string if we want to. It will be TBD how we store it in the lease document/item to make it persistent but from the user's perspective it should not matter much since FeedRange already has a constructor that takes a string payload.\nWe can also consider adding a \"version\" property to distinguish between different implementations if that helps.", "author": "milismsft", "createdAt": "2020-07-10T18:59:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMjgzNg=="}], "type": "inlineReview", "revised_code": {"commit": "d8feb2952d5059824a7da54c87e8909a88e116a3", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java\nindex 431d35bee19..b0d00835a19 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java\n\n@@ -16,7 +16,7 @@ public class ChangeFeedProcessorState {\n     private String id;\n     private String leaseToken;\n     private String hostName;\n-    private Instant lastUpdate;\n+    private Instant lastUpdatedTime;\n     private String continuationToken;\n     private Instant continuationTokenTimestamp;\n     private int estimatedLag;\n"}}, {"oid": "995efd2c40c18208fd769eaf31d322f402993d5e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/995efd2c40c18208fd769eaf31d322f402993d5e", "message": "Addressing PR related feedback.", "committedDate": "2020-07-10T18:24:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNTQ5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r453005495", "bodyText": "String.split(.) uses regex (CPU intensive), Use StringUtils.split instead", "author": "moderakh", "createdAt": "2020-07-10T18:28:45Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java", "diffHunk": "@@ -162,13 +172,10 @@ public boolean isStarted() {\n                 return this.feedContextClient.createDocumentChangeFeedQuery(this.feedContextClient.getContainerClient(), options)\n                     .take(1)\n                     .map(feedResponse -> {\n-                        final String pkRangeIdSeparator = \":\";\n-                        final String segmentSeparator = \"#\";\n-                        final String lsnPropertyName = \"_lsn\";\n                         String ownerValue = lease.getOwner();\n                         String sessionTokenLsn = feedResponse.getSessionToken();\n-                        String parsedSessionToken = sessionTokenLsn.substring(sessionTokenLsn.indexOf(pkRangeIdSeparator));\n-                        String[] segments = parsedSessionToken.split(segmentSeparator);\n+                        String parsedSessionToken = sessionTokenLsn.substring(sessionTokenLsn.indexOf(PK_RANGE_ID_SEPARATOR));\n+                        String[] segments = parsedSessionToken.split(SEGMENT_SEPARATOR);", "originalCommit": "995efd2c40c18208fd769eaf31d322f402993d5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAxMDI5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r453010295", "bodyText": "fixed", "author": "milismsft", "createdAt": "2020-07-10T18:38:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNTQ5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "2f664c5ef775520771f6e63aa759a7aa75c7eb27", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\nindex f783f3e470f..ee95a9cbb6c 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\n\n@@ -175,7 +176,7 @@ public class ChangeFeedProcessorBuilderImpl implements ChangeFeedProcessor, Auto\n                         String ownerValue = lease.getOwner();\n                         String sessionTokenLsn = feedResponse.getSessionToken();\n                         String parsedSessionToken = sessionTokenLsn.substring(sessionTokenLsn.indexOf(PK_RANGE_ID_SEPARATOR));\n-                        String[] segments = parsedSessionToken.split(SEGMENT_SEPARATOR);\n+                        String[] segments = StringUtils.split(parsedSessionToken, SEGMENT_SEPARATOR);\n                         String latestLsn = segments[0];\n \n                         if (segments.length >= 2) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNTkxMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r453005912", "bodyText": "String.split uses regex underneath which is cpu intensive.\nuse StringUtils.split instead.", "author": "moderakh", "createdAt": "2020-07-10T18:29:37Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java", "diffHunk": "@@ -209,6 +216,87 @@ public boolean isStarted() {\n             });\n     }\n \n+    /**\n+     * Returns a list of states each representing one scoped worker item.\n+     * <p>\n+     * An empty list will be returned if the processor was not started or no lease items matching the current\n+     *   {@link ChangeFeedProcessor} instance's lease prefix could be found.\n+     *\n+     * @return a list of states each representing one scoped worker item.\n+     */\n+    @Override\n+    public Mono<List<ChangeFeedProcessorState>> getCurrentState() {\n+        List<ChangeFeedProcessorState> earlyResult = new ArrayList<>();\n+\n+        if (this.leaseStoreManager == null || this.feedContextClient == null) {\n+            return Mono.just(Collections.unmodifiableList(earlyResult));\n+        }\n+\n+        return this.leaseStoreManager.getAllLeases()\n+            .flatMap(lease -> {\n+                ChangeFeedOptions options = new ChangeFeedOptions()\n+                    .setMaxItemCount(1)\n+                    .setPartitionKeyRangeId(lease.getLeaseToken())\n+                    .setStartFromBeginning(true)\n+                    .setRequestContinuation(lease.getContinuationToken());\n+\n+                return this.feedContextClient.createDocumentChangeFeedQuery(this.feedContextClient.getContainerClient(), options)\n+                    .take(1)\n+                    .map(feedResponse -> {\n+                        String sessionTokenLsn = feedResponse.getSessionToken();\n+                        String parsedSessionToken = sessionTokenLsn.substring(sessionTokenLsn.indexOf(PK_RANGE_ID_SEPARATOR));\n+                        String[] segments = parsedSessionToken.split(SEGMENT_SEPARATOR);", "originalCommit": "995efd2c40c18208fd769eaf31d322f402993d5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAxMDQ0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r453010444", "bodyText": "fixed", "author": "milismsft", "createdAt": "2020-07-10T18:38:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNTkxMg=="}], "type": "inlineReview", "revised_code": {"commit": "2f664c5ef775520771f6e63aa759a7aa75c7eb27", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\nindex f783f3e470f..ee95a9cbb6c 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/ChangeFeedProcessorBuilderImpl.java\n\n@@ -245,7 +246,7 @@ public class ChangeFeedProcessorBuilderImpl implements ChangeFeedProcessor, Auto\n                     .map(feedResponse -> {\n                         String sessionTokenLsn = feedResponse.getSessionToken();\n                         String parsedSessionToken = sessionTokenLsn.substring(sessionTokenLsn.indexOf(PK_RANGE_ID_SEPARATOR));\n-                        String[] segments = parsedSessionToken.split(SEGMENT_SEPARATOR);\n+                        String[] segments = StringUtils.split(parsedSessionToken, SEGMENT_SEPARATOR);\n                         String latestLsn = segments[0];\n \n                         if (segments.length >= 2) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNjk4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r453006987", "bodyText": "getLastUpdate vs getLastUpdateTime ?", "author": "moderakh", "createdAt": "2020-07-10T18:31:51Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java", "diffHunk": "@@ -0,0 +1,172 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.ChangeFeedProcessor;\n+import com.azure.cosmos.util.Beta;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Specifies the {@link ChangeFeedProcessor} state for a particular lease/worker.\n+ */\n+@Beta(Beta.SinceVersion.V4_2_0)\n+public class ChangeFeedProcessorState {\n+    private String id;\n+    private String leaseToken;\n+    private String hostName;\n+    private Instant lastUpdate;\n+    private String continuationToken;\n+    private Instant continuationTokenTimestamp;\n+    private int estimatedLag;\n+\n+    /**\n+     * Gets the ID of the lease item representing the persistent state of a change feed processor worker.\n+     *\n+     * @return the ID of the lease item.\n+     */\n+    public String getId() {\n+        return this.id;\n+    }\n+\n+    /**\n+     * Sets the ID of the lease item representing the persistent state of a chenge feed processor worker.\n+     *\n+     * @param id a unique string.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setId(String id) {\n+        this.id = id;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the token of the lease item representing the persistent state of a change feed processor worker.\n+     * <p>\n+     * A lease token is a unique identifier representing a specific scope that a CFP worker will operate on.\n+     *\n+     * @return a string token uniquely representing the scope for one worker unit.\n+     */\n+    public String getLeaseToken() {\n+        return this.leaseToken;\n+    }\n+\n+    /**\n+     * Sets the token of the lease item representing the persistent state of a change feed processor worker.\n+     * <p>\n+     * A lease token is a unique identifier representing a specific scope that a CFP worker will operate on.\n+     *\n+     * @param leaseToken a unique string representing a specific scope that a CFP worker will operate on.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setLeaseToken(String leaseToken) {\n+        this.leaseToken = leaseToken;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the name of the host which operates on the lease item.\n+     * <p>\n+     * When using multiple CFP instances distributing the work for a given feed container, each host must have a unique name.\n+     *\n+     * @return the host name that has ownership of this lease item or null if no host is currently operating on this lease.\n+     */\n+    public String getHostName() {\n+        return this.hostName;\n+    }\n+\n+    /**\n+     * Sets the name of the host which operates on the lease item.\n+     * <p>\n+     * When using multiple CFP instances distributing the work for a given feed container, each host must have a unique name.\n+     *\n+     * @param hostName the host name that has ownership of this lease item.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setHostName(String hostName) {\n+        this.hostName = hostName;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time when the lease item was last updated.\n+     *\n+     * @return time when the lease item was last updated.\n+     */\n+    public Instant getLastUpdate() {", "originalCommit": "995efd2c40c18208fd769eaf31d322f402993d5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAxMTE4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r453011184", "bodyText": "isn't that implicit given the return type?", "author": "milismsft", "createdAt": "2020-07-10T18:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNjk4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAxNTQzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r453015437", "bodyText": "well, IMO the api method name should speak for itself without looking at the return type.", "author": "moderakh", "createdAt": "2020-07-10T18:45:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNjk4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAyOTY3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r453029672", "bodyText": "np, I can make that change", "author": "milismsft", "createdAt": "2020-07-10T19:08:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNjk4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "d8feb2952d5059824a7da54c87e8909a88e116a3", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java\nindex 431d35bee19..b0d00835a19 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java\n\n@@ -16,7 +16,7 @@ public class ChangeFeedProcessorState {\n     private String id;\n     private String leaseToken;\n     private String hostName;\n-    private Instant lastUpdate;\n+    private Instant lastUpdatedTime;\n     private String continuationToken;\n     private Instant continuationTokenTimestamp;\n     private int estimatedLag;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNzA0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r453007043", "bodyText": "ditto", "author": "moderakh", "createdAt": "2020-07-10T18:31:57Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java", "diffHunk": "@@ -0,0 +1,172 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.ChangeFeedProcessor;\n+import com.azure.cosmos.util.Beta;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Specifies the {@link ChangeFeedProcessor} state for a particular lease/worker.\n+ */\n+@Beta(Beta.SinceVersion.V4_2_0)\n+public class ChangeFeedProcessorState {\n+    private String id;\n+    private String leaseToken;\n+    private String hostName;\n+    private Instant lastUpdate;\n+    private String continuationToken;\n+    private Instant continuationTokenTimestamp;\n+    private int estimatedLag;\n+\n+    /**\n+     * Gets the ID of the lease item representing the persistent state of a change feed processor worker.\n+     *\n+     * @return the ID of the lease item.\n+     */\n+    public String getId() {\n+        return this.id;\n+    }\n+\n+    /**\n+     * Sets the ID of the lease item representing the persistent state of a chenge feed processor worker.\n+     *\n+     * @param id a unique string.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setId(String id) {\n+        this.id = id;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the token of the lease item representing the persistent state of a change feed processor worker.\n+     * <p>\n+     * A lease token is a unique identifier representing a specific scope that a CFP worker will operate on.\n+     *\n+     * @return a string token uniquely representing the scope for one worker unit.\n+     */\n+    public String getLeaseToken() {\n+        return this.leaseToken;\n+    }\n+\n+    /**\n+     * Sets the token of the lease item representing the persistent state of a change feed processor worker.\n+     * <p>\n+     * A lease token is a unique identifier representing a specific scope that a CFP worker will operate on.\n+     *\n+     * @param leaseToken a unique string representing a specific scope that a CFP worker will operate on.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setLeaseToken(String leaseToken) {\n+        this.leaseToken = leaseToken;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the name of the host which operates on the lease item.\n+     * <p>\n+     * When using multiple CFP instances distributing the work for a given feed container, each host must have a unique name.\n+     *\n+     * @return the host name that has ownership of this lease item or null if no host is currently operating on this lease.\n+     */\n+    public String getHostName() {\n+        return this.hostName;\n+    }\n+\n+    /**\n+     * Sets the name of the host which operates on the lease item.\n+     * <p>\n+     * When using multiple CFP instances distributing the work for a given feed container, each host must have a unique name.\n+     *\n+     * @param hostName the host name that has ownership of this lease item.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setHostName(String hostName) {\n+        this.hostName = hostName;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time when the lease item was last updated.\n+     *\n+     * @return time when the lease item was last updated.\n+     */\n+    public Instant getLastUpdate() {\n+        return this.lastUpdate;\n+    }\n+\n+    /**\n+     * Sets time when the lease item was last updated.\n+     *\n+     * @param lastUpdate a unique string.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setLastUpdate(Instant lastUpdate) {", "originalCommit": "995efd2c40c18208fd769eaf31d322f402993d5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAxMTgxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r453011816", "bodyText": "same, given the argument type isn't that \"Time\" part implicit?", "author": "milismsft", "createdAt": "2020-07-10T18:40:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNzA0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d8feb2952d5059824a7da54c87e8909a88e116a3", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java\nindex 431d35bee19..b0d00835a19 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java\n\n@@ -16,7 +16,7 @@ public class ChangeFeedProcessorState {\n     private String id;\n     private String leaseToken;\n     private String hostName;\n-    private Instant lastUpdate;\n+    private Instant lastUpdatedTime;\n     private String continuationToken;\n     private Instant continuationTokenTimestamp;\n     private int estimatedLag;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNzUzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r453007532", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        assertThat(totalLag == FEED_COUNT).as(\"Change Feed Processor estimated total lag\").isTrue();\n          \n          \n            \n            assertThat(totalLag).equalTo(FEED_COUNT).as(\"...\")", "author": "moderakh", "createdAt": "2020-07-10T18:33:02Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java", "diffHunk": "@@ -277,6 +278,91 @@ public void getEstimatedLag() throws InterruptedException {\n         }\n     }\n \n+    @Test(groups = { \"emulator\" }, timeOut = 50 * CHANGE_FEED_PROCESSOR_TIMEOUT)\n+    public void getCurrentState() throws InterruptedException {\n+        CosmosAsyncContainer createdFeedCollection = createFeedCollection(FEED_COLLECTION_THROUGHPUT);\n+        CosmosAsyncContainer createdLeaseCollection = createLeaseCollection(LEASE_COLLECTION_THROUGHPUT);\n+\n+        try {\n+            List<InternalObjectNode> createdDocuments = new ArrayList<>();\n+            Map<String, JsonNode> receivedDocuments = new ConcurrentHashMap<>();\n+            ChangeFeedProcessor changeFeedProcessor = new ChangeFeedProcessorBuilder()\n+                .hostName(hostName)\n+                .handleChanges((List<JsonNode> docs) -> {\n+                    ChangeFeedProcessorTest.log.info(\"START processing from thread {}\", Thread.currentThread().getId());\n+                    for (JsonNode item : docs) {\n+                        processItem(item, receivedDocuments);\n+                    }\n+                    ChangeFeedProcessorTest.log.info(\"END processing from thread {}\", Thread.currentThread().getId());\n+                })\n+                .feedContainer(createdFeedCollection)\n+                .leaseContainer(createdLeaseCollection)\n+                .buildChangeFeedProcessor();\n+\n+            try {\n+                changeFeedProcessor.start().subscribeOn(Schedulers.elastic())\n+                    .timeout(Duration.ofMillis(2 * CHANGE_FEED_PROCESSOR_TIMEOUT))\n+                    .then(Mono.just(changeFeedProcessor)\n+                        .delayElement(Duration.ofMillis(2 * CHANGE_FEED_PROCESSOR_TIMEOUT))\n+                        .flatMap(value -> changeFeedProcessor.stop()\n+                            .subscribeOn(Schedulers.elastic())\n+                            .timeout(Duration.ofMillis(2 * CHANGE_FEED_PROCESSOR_TIMEOUT))\n+                        ))\n+                    .subscribe();\n+            } catch (Exception ex) {\n+                log.error(\"Change feed processor did not start and stopped in the expected time\", ex);\n+                throw ex;\n+            }\n+\n+            Thread.sleep(4 * CHANGE_FEED_PROCESSOR_TIMEOUT);\n+\n+            // Test for \"zero\" lag\n+            List<ChangeFeedProcessorState> cfpCurrentState = changeFeedProcessor.getCurrentState()\n+                .map(state -> {\n+                    try {\n+                        log.info(OBJECT_MAPPER.writeValueAsString(state));\n+                    } catch (JsonProcessingException ex) {\n+                        log.error(\"Unexpected\", ex);\n+                    }\n+                    return state;\n+                }).block();\n+\n+            int totalLag = 0;\n+            for (ChangeFeedProcessorState item : cfpCurrentState) {\n+                totalLag += item.getEstimatedLag();\n+            }\n+\n+            assertThat(totalLag == 0).as(\"Change Feed Processor estimated total lag at start\").isTrue();\n+\n+            // Test for \"FEED_COUNT total lag\n+            setupReadFeedDocuments(createdDocuments, receivedDocuments, createdFeedCollection, FEED_COUNT);\n+\n+            cfpCurrentState = changeFeedProcessor.getCurrentState()\n+                .map(state -> {\n+                    try {\n+                        log.info(OBJECT_MAPPER.writeValueAsString(state));\n+                    } catch (JsonProcessingException ex) {\n+                        log.error(\"Unexpected\", ex);\n+                    }\n+                    return state;\n+                }).block();\n+\n+            totalLag = 0;\n+            for (ChangeFeedProcessorState item : cfpCurrentState) {\n+                totalLag += item.getEstimatedLag();\n+            }\n+\n+            assertThat(totalLag == FEED_COUNT).as(\"Change Feed Processor estimated total lag\").isTrue();", "originalCommit": "995efd2c40c18208fd769eaf31d322f402993d5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAxNzQwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r453017403", "bodyText": "fixed", "author": "milismsft", "createdAt": "2020-07-10T18:48:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNzUzMg=="}], "type": "inlineReview", "revised_code": {"commit": "9e139effc6464808424c46f03849261cbde95b76", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\nindex 8c0ff8972a8..7b0f0f96887 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ChangeFeedProcessorTest.java\n\n@@ -332,7 +339,7 @@ public class ChangeFeedProcessorTest extends TestSuiteBase {\n                 totalLag += item.getEstimatedLag();\n             }\n \n-            assertThat(totalLag == 0).as(\"Change Feed Processor estimated total lag at start\").isTrue();\n+            assertThat(totalLag).isEqualTo(0).as(\"Change Feed Processor estimated total lag at start\");\n \n             // Test for \"FEED_COUNT total lag\n             setupReadFeedDocuments(createdDocuments, receivedDocuments, createdFeedCollection, FEED_COUNT);\n"}}, {"oid": "2f664c5ef775520771f6e63aa759a7aa75c7eb27", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2f664c5ef775520771f6e63aa759a7aa75c7eb27", "message": "use StringUtils.split() instead of regular split.", "committedDate": "2020-07-10T18:38:28Z", "type": "commit"}, {"oid": "9e139effc6464808424c46f03849261cbde95b76", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9e139effc6464808424c46f03849261cbde95b76", "message": "Address PR feedback.", "committedDate": "2020-07-10T18:49:16Z", "type": "commit"}, {"oid": "d8feb2952d5059824a7da54c87e8909a88e116a3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d8feb2952d5059824a7da54c87e8909a88e116a3", "message": "lastUpdate -> lastUpdatedTime", "committedDate": "2020-07-10T19:06:07Z", "type": "commit"}, {"oid": "0780af7ed99bf099e3cd3d0276cffae3a01ccbd6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0780af7ed99bf099e3cd3d0276cffae3a01ccbd6", "message": "Merge branch 'master' into milismsft-cfp-state", "committedDate": "2020-07-10T23:33:51Z", "type": "commit"}, {"oid": "43d31725e1884ead069fed2af4406e18fc1c5557", "url": "https://github.com/Azure/azure-sdk-for-java/commit/43d31725e1884ead069fed2af4406e18fc1c5557", "message": "Update the CFP estimator to also capture the latest token (see session token) which represent the newest created or updated item.", "committedDate": "2020-07-14T07:22:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1Mjk0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r460252945", "bodyText": "_ts is implementation detail. And it might get impacted by the clock skews on service side.\nIts better for any application to not take dependency on this concept/value.", "author": "kirankumarkolli", "createdAt": "2020-07-24T19:41:16Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java", "diffHunk": "@@ -0,0 +1,193 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.models;\n+\n+import com.azure.cosmos.ChangeFeedProcessor;\n+import com.azure.cosmos.util.Beta;\n+\n+import java.time.Instant;\n+\n+/**\n+ * Specifies the {@link ChangeFeedProcessor} state for a particular lease/worker.\n+ */\n+@Beta(Beta.SinceVersion.V4_2_0)\n+public class ChangeFeedProcessorState {\n+    private String id;\n+    private String leaseToken;\n+    private String hostName;\n+    private Instant lastUpdatedTime;\n+    private String continuationToken;\n+    private Instant continuationTokenTimestamp;\n+    private String latestToken;\n+    private int estimatedLag;\n+\n+    /**\n+     * Gets the ID of the lease item representing the persistent state of a change feed processor worker.\n+     *\n+     * @return the ID of the lease item.\n+     */\n+    public String getId() {\n+        return this.id;\n+    }\n+\n+    /**\n+     * Sets the ID of the lease item representing the persistent state of a chenge feed processor worker.\n+     *\n+     * @param id a unique string.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setId(String id) {\n+        this.id = id;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the token of the lease item representing the persistent state of a change feed processor worker.\n+     * <p>\n+     * A lease token is a unique identifier representing a specific scope that a CFP worker will operate on.\n+     *\n+     * @return a string token uniquely representing the scope for one worker unit.\n+     */\n+    public String getLeaseToken() {\n+        return this.leaseToken;\n+    }\n+\n+    /**\n+     * Sets the token of the lease item representing the persistent state of a change feed processor worker.\n+     * <p>\n+     * A lease token is a unique identifier representing a specific scope that a CFP worker will operate on.\n+     *\n+     * @param leaseToken a unique string representing a specific scope that a CFP worker will operate on.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setLeaseToken(String leaseToken) {\n+        this.leaseToken = leaseToken;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the name of the host which operates on the lease item.\n+     * <p>\n+     * When using multiple CFP instances distributing the work for a given feed container, each host must have a unique name.\n+     *\n+     * @return the host name that has ownership of this lease item or null if no host is currently operating on this lease.\n+     */\n+    public String getHostName() {\n+        return this.hostName;\n+    }\n+\n+    /**\n+     * Sets the name of the host which operates on the lease item.\n+     * <p>\n+     * When using multiple CFP instances distributing the work for a given feed container, each host must have a unique name.\n+     *\n+     * @param hostName the host name that has ownership of this lease item.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setHostName(String hostName) {\n+        this.hostName = hostName;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the time when the lease item was last updated.\n+     *\n+     * @return time when the lease item was last updated.\n+     */\n+    public Instant getLastUpdatedTime() {\n+        return this.lastUpdatedTime;\n+    }\n+\n+    /**\n+     * Sets time when the lease item was last updated.\n+     *\n+     * @param lastUpdatedTime a unique string.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setLastUpdatedTime(Instant lastUpdatedTime) {\n+        this.lastUpdatedTime = lastUpdatedTime;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets a marker representing the last item that was processed.\n+     *\n+     * @return the marker representing the last item that was processed.\n+     */\n+    public String getContinuationToken() {\n+        return this.continuationToken;\n+    }\n+\n+    /**\n+     * Sets a marker representing the last item that was processed.\n+     *\n+     * @param continuationToken the marker representing the last item that was processed.\n+     * @return the current ChangeFeedProcessorState instance.\n+     */\n+    public ChangeFeedProcessorState setContinuationToken(String continuationToken) {\n+        this.continuationToken = continuationToken;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the system time for the last item that was processed.\n+     *\n+     * @return the system time for the last item that was processed.\n+     */\n+    public Instant getContinuationTokenTimestamp() {", "originalCommit": "43d31725e1884ead069fed2af4406e18fc1c5557", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NzczMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12999#discussion_r461057733", "bodyText": "I will take it out; it's not needed for the customer scenario we want to enable as preview.", "author": "milismsft", "createdAt": "2020-07-27T17:38:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1Mjk0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "76aff813bdefabd0e3e3b4aa95bb3e00d5685eb5", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java\nindex 6ef086dc78e..b94a0120043 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/ChangeFeedProcessorState.java\n\n@@ -99,26 +99,6 @@ public class ChangeFeedProcessorState {\n         return this.lastUpdatedTime;\n     }\n \n-    /**\n-     * Sets time when the lease item was last updated.\n-     *\n-     * @param lastUpdatedTime a unique string.\n-     * @return the current ChangeFeedProcessorState instance.\n-     */\n-    public ChangeFeedProcessorState setLastUpdatedTime(Instant lastUpdatedTime) {\n-        this.lastUpdatedTime = lastUpdatedTime;\n-        return this;\n-    }\n-\n-    /**\n-     * Gets a marker representing the last item that was processed.\n-     *\n-     * @return the marker representing the last item that was processed.\n-     */\n-    public String getContinuationToken() {\n-        return this.continuationToken;\n-    }\n-\n     /**\n      * Sets a marker representing the last item that was processed.\n      *\n"}}, {"oid": "76aff813bdefabd0e3e3b4aa95bb3e00d5685eb5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/76aff813bdefabd0e3e3b4aa95bb3e00d5685eb5", "message": "remove the system time from the state being reported", "committedDate": "2020-07-27T19:09:54Z", "type": "commit"}, {"oid": "9250d23af5b6cd4e366d25f5d62abdeeed43e86d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9250d23af5b6cd4e366d25f5d62abdeeed43e86d", "message": "Merge branch 'master' into milismsft-cfp-state", "committedDate": "2020-08-10T15:28:05Z", "type": "commit"}, {"oid": "82369865399dcfd20676164bc7f7bfe5c427cbfd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/82369865399dcfd20676164bc7f7bfe5c427cbfd", "message": "Updates following the API review.", "committedDate": "2020-08-10T15:56:04Z", "type": "commit"}, {"oid": "e6c9743c686612cdb1ef39865df46f9ef3516a2e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e6c9743c686612cdb1ef39865df46f9ef3516a2e", "message": "Merge branch 'master' into milismsft-cfp-state", "committedDate": "2020-08-19T04:37:02Z", "type": "commit"}, {"oid": "8bb68ad50c7f4f5a96a7c6874a42095bd20519ad", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8bb68ad50c7f4f5a96a7c6874a42095bd20519ad", "message": "Merge remote-tracking branch 'upstream/master' into milismsft-cfp-state", "committedDate": "2020-08-21T16:34:25Z", "type": "commit"}, {"oid": "bf610e52f846e0205e098446d683aaf03ee60389", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bf610e52f846e0205e098446d683aaf03ee60389", "message": "Merge branch 'master' into milismsft-cfp-state\n\n# Conflicts:\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/util/Beta.java", "committedDate": "2020-08-29T07:52:30Z", "type": "commit"}, {"oid": "fd8acea2942968c9a44d91d244542bb931d6db9f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fd8acea2942968c9a44d91d244542bb931d6db9f", "message": "Merge branch 'master' into milismsft-cfp-state", "committedDate": "2020-09-08T18:17:07Z", "type": "commit"}, {"oid": "8974114797230f5efb0027bef7365eee0595cfd3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8974114797230f5efb0027bef7365eee0595cfd3", "message": "Address bug/issues described in https://github.com/Azure/azure-sdk-for-java/issues/13329", "committedDate": "2020-09-10T23:30:30Z", "type": "commit"}, {"oid": "1d048d7375c271578f9cebc3c6ecbbdb989af74c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1d048d7375c271578f9cebc3c6ecbbdb989af74c", "message": "null pointer related fix", "committedDate": "2020-09-11T17:23:09Z", "type": "commit"}, {"oid": "366cfdf3e3f3b81345586f60a1cb896b032ab3b3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/366cfdf3e3f3b81345586f60a1cb896b032ab3b3", "message": "Merge branch 'master' into milismsft-cfp-state", "committedDate": "2020-09-15T17:15:11Z", "type": "commit"}, {"oid": "2921414a1ef03e3d66ed749f95e8df5736aa0345", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2921414a1ef03e3d66ed749f95e8df5736aa0345", "message": "Merge branch 'master' into milismsft-cfp-state", "committedDate": "2020-09-17T16:55:40Z", "type": "commit"}]}