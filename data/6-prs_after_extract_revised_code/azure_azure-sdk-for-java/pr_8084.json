{"pr_number": 8084, "pr_title": "Creating new request object on all retry", "pr_createdAt": "2020-02-10T19:10:25Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/8084", "timeline": [{"oid": "c2b5690edb85e18ef31d2d17c2b90080d79c7944", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c2b5690edb85e18ef31d2d17c2b90080d79c7944", "message": "initial commit", "committedDate": "2020-02-10T19:02:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5OTQxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8084#discussion_r377299411", "bodyText": "this will result in double serialization/deserialization. don't use Document here.\nplease use 'String content = toJsonString(typedDocument, mapper);' instead", "author": "moderakh", "createdAt": "2020-02-10T20:30:47Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1151,27 +1157,28 @@ void captureSessionToken(RxDocumentServiceRequest request, RxDocumentServiceResp\n             requestRetryPolicy = new PartitionKeyMismatchRetryPolicy(collectionCache, requestRetryPolicy, collectionLink, options);\n         }\n         DocumentClientRetryPolicy finalRequestRetryPolicy = requestRetryPolicy;\n-        if (document == null) {\n-            throw new IllegalArgumentException(\"document\");\n-        }\n-        if (StringUtils.isEmpty(documentLink)) {\n-            throw new IllegalArgumentException(\"documentLink\");\n-        }\n+        return ObservableHelper.inlineIfPossibleAsObs(() -> replaceDocumentInternal(documentLink, document, options, finalRequestRetryPolicy), requestRetryPolicy);\n+    }\n \n-        if (document == null) {\n-            throw new IllegalArgumentException(\"document\");\n-        }\n+    private Mono<ResourceResponse<Document>> replaceDocumentInternal(String documentLink, Object document,\n+                                                                     RequestOptions options, DocumentClientRetryPolicy retryPolicyInstance) {\n+        try {\n+            if (StringUtils.isEmpty(documentLink)) {\n+                throw new IllegalArgumentException(\"documentLink\");\n+            }\n \n-        Document typedDocument = documentFromObject(document, mapper);\n-        logger.debug(\"Replacing a Document. documentLink: [{}]\", documentLink);\n-        final String path = Utils.joinPath(documentLink, null);\n-        final Map<String, String> requestHeaders = getRequestHeaders(options);\n+            if (document == null) {\n+                throw new IllegalArgumentException(\"document\");\n+            }\n \n-        String content = toJsonString(typedDocument, mapper);\n+            Document typedDocument = documentFromObject(document, mapper);", "originalCommit": "c2b5690edb85e18ef31d2d17c2b90080d79c7944", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc4NzgzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8084#discussion_r377787833", "bodyText": "Discussed this offline, it was there before the retryContext pr, so keeping the same for now", "author": "simplynaveen20", "createdAt": "2020-02-11T17:32:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5OTQxMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxNDEyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8084#discussion_r377314121", "bodyText": "We are not using Document here anymore as this will result in double serialization/desrializaiton.\nreplace with\nString content = toJsonString(typedDocument, mapper);", "author": "moderakh", "createdAt": "2020-02-10T21:01:47Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -1151,27 +1157,28 @@ void captureSessionToken(RxDocumentServiceRequest request, RxDocumentServiceResp\n             requestRetryPolicy = new PartitionKeyMismatchRetryPolicy(collectionCache, requestRetryPolicy, collectionLink, options);\n         }\n         DocumentClientRetryPolicy finalRequestRetryPolicy = requestRetryPolicy;\n-        if (document == null) {\n-            throw new IllegalArgumentException(\"document\");\n-        }\n-        if (StringUtils.isEmpty(documentLink)) {\n-            throw new IllegalArgumentException(\"documentLink\");\n-        }\n+        return ObservableHelper.inlineIfPossibleAsObs(() -> replaceDocumentInternal(documentLink, document, options, finalRequestRetryPolicy), requestRetryPolicy);\n+    }\n \n-        if (document == null) {\n-            throw new IllegalArgumentException(\"document\");\n-        }\n+    private Mono<ResourceResponse<Document>> replaceDocumentInternal(String documentLink, Object document,\n+                                                                     RequestOptions options, DocumentClientRetryPolicy retryPolicyInstance) {\n+        try {\n+            if (StringUtils.isEmpty(documentLink)) {\n+                throw new IllegalArgumentException(\"documentLink\");\n+            }\n \n-        Document typedDocument = documentFromObject(document, mapper);\n-        logger.debug(\"Replacing a Document. documentLink: [{}]\", documentLink);\n-        final String path = Utils.joinPath(documentLink, null);\n-        final Map<String, String> requestHeaders = getRequestHeaders(options);\n+            if (document == null) {\n+                throw new IllegalArgumentException(\"document\");\n+            }\n \n-        String content = toJsonString(typedDocument, mapper);\n+            Document typedDocument = documentFromObject(document, mapper);", "originalCommit": "c2b5690edb85e18ef31d2d17c2b90080d79c7944", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzMTQ1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8084#discussion_r377331453", "bodyText": "Discussed this offline, it was there before the retryContext pr, so keeping the same for now", "author": "simplynaveen20", "createdAt": "2020-02-10T21:38:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxNDEyMQ=="}], "type": "inlineReview", "revised_code": null}]}