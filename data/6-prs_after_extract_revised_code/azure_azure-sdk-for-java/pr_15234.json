{"pr_number": 15234, "pr_title": "Fix javadocs for ADT, fix usage of T vs Object in createDigitalTwin and createRelationship APIs", "pr_createdAt": "2020-09-15T21:19:20Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/15234", "timeline": [{"oid": "2aed78eb74ef256998955ad7fe017e2b0d946076", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2aed78eb74ef256998955ad7fe017e2b0d946076", "message": "Fix javadocs for ADT, fix usage of T vs Object in createDigitalTwin and createRelationship APIs\n\nAlso fixed tests not using those APIs in the correct way", "committedDate": "2020-09-15T21:18:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MDA0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15234#discussion_r488980047", "bodyText": "@abhipsaMisra I believe you were in favor of taking an Object here rather than a T, so I wanted to discuss this again. In our e2e tests, this API was being called such that the digitalTwin argument was a String and the return type was of type T (BasicDigitalTwin). Is that expected? My understanding was that we wanted to take and return the same type here.\nWith this change, our e2e tests now pass in a BasicDigitalTwin instance, and the function returns a BasicDigitalTwin instance which made more sense to me, but I'd like to hear everyone's opinion on this", "author": "timtay-microsoft", "createdAt": "2020-09-15T21:21:05Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -143,17 +143,17 @@ public DigitalTwinsServiceVersion getServiceVersion() {\n      * Creates a digital twin.\n      *\n      * @param digitalTwinId The Id of the digital twin.\n-     * @param digitalTwin The application/json digital twin to create.\n-     * @param clazz The model class to deserialize the response with.\n-     * @param <T> The generic type to deserialize the digital twin with.\n+     * @param digitalTwin The application/json object representing the digital twin to create.\n+     * @param clazz The model class to serialize the request with and deserialize the response with.\n+     * @param <T> The generic type to serialize the request with and deserialize the response with.\n      * @return A {@link DigitalTwinsResponse} containing the deserialized application/json object representing the digital twin created.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public <T> Mono<DigitalTwinsResponse<T>> createDigitalTwinWithResponse(String digitalTwinId, Object digitalTwin, Class<T> clazz) {", "originalCommit": "2aed78eb74ef256998955ad7fe017e2b0d946076", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MDE0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15234#discussion_r488980142", "bodyText": "Same here and below with createRelationship APIs", "author": "timtay-microsoft", "createdAt": "2020-09-15T21:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MDA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MzYxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15234#discussion_r488983610", "bodyText": "This is my thought:\nMy intention was more around flexibility with this. The T that we accept as input isn't being used anywhere in the request (all classes are objects, so we pass it in as-is). As for the serialization part of it, if the input is a valid json string, the PL will take it as-is. If not, then we will serialize it before sending it on the wire.\nAs for accepting T vs Object, since the T class info is unused in the request, it made more sense to me to have it as an object. In that case, I don't need to necessarily deserialize my request into a BasicDigitalTwin type, just so I can accept the response as a BasicDigitalTwin.\nAgain, even if we do mark the input as T, and I still pass in a json string, it will also work as expected; but now the public API is stating a contract that for you to be able to inspect a response as a BasicDigitalTwin, you need to pass in your input as a BasicDigitalTwin -> even though this is not a requirement.", "author": "abhipsaMisra", "createdAt": "2020-09-15T21:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MDA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAwNjc1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15234#discussion_r489006752", "bodyText": "Again, even if we do mark the input as T, and I still pass in a json string, it will also work as expected\n\nI don't follow this part. If the input parameter is T, and you set T to be BasicDigitalTwin, then you cannot pass in a json string. You'll get a compilation error since the json string is not of type BasicDigitalTwin.\n\nAs for accepting T vs Object, since the T class info is unused in the request, it made more sense to me to have it as an object.\n\nI understand that we don't need the parameter to be of type T, but I don't want customers using this API in ways where the return type and passed in type are different. That sounds like a promise that we won't be able to keep given how generic Object is. I'd rather keep it simple and restful and force the users to give and receive the same type here.\n\n... but now the public API is stating a contract that for you to be able to inspect a response as a BasicDigitalTwin, you need to pass in your input as a BasicDigitalTwin -> even though this is not a requirement.\n\nI think this is a good expectation to place on the user, though. The whole point of the service is that customers are responsible for defining these types. If a customer is using this T flavor of our create APIs, then they should know the type. So why would they want to send it as one type and have us return the same object as a different type?", "author": "timtay-microsoft", "createdAt": "2020-09-15T21:58:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MDA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAyMzY1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15234#discussion_r489023651", "bodyText": "I think using the Type T instead of object is the clear expectation from the user ... that you pass in an object of type T that you expect to get back ...\nBy just providing an untyped object, we are basically allowing them to pass in a K type and expect a T as the result. This can also mislead users and allow for a misuse in the API.\nI think if we don't have a response type to deserialize the response into, it makes sense to take in an Object. but if we are doing a deserialization into a type, we should also take the input as the same type.", "author": "azabbasi", "createdAt": "2020-09-15T22:19:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MDA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAyNDEwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15234#discussion_r489024102", "bodyText": "I said type like 12 times.", "author": "azabbasi", "createdAt": "2020-09-15T22:20:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MDA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAzNjg4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15234#discussion_r489036885", "bodyText": "So why would they want to send it as one type and have us return the same object as a different type\n\nThis is something we might run into since we expose these different overload, but I agree, we can set the expectation that your input and output should be the same type and see the feedback. I an not opposed to having the input as T, it was more of a flexibility thing, but there is no need to solve a problem that doesn't exist.\nGo for T!", "author": "abhipsaMisra", "createdAt": "2020-09-15T22:37:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MDA0Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MDk4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15234#discussion_r488980982", "bodyText": "This function was sitting in the models API section, so I moved it back to the correct section", "author": "timtay-microsoft", "createdAt": "2020-09-15T21:23:04Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -585,6 +589,12 @@ public DigitalTwinsServiceVersion getServiceVersion() {\n             nextLink -> withContext(context -> listRelationshipsNextPage(nextLink, context)));\n     }\n \n+    PagedFlux<String> listRelationships(String digitalTwinId, String relationshipName, Context context) {", "originalCommit": "2aed78eb74ef256998955ad7fe017e2b0d946076", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MTMyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15234#discussion_r488981322", "bodyText": "the changes from lines 819 to 827 are just swapping the order of these two list APIs. Now the minimal list API is above the maximal list API for consistency", "author": "timtay-microsoft", "createdAt": "2020-09-15T21:23:51Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -816,24 +828,24 @@ public DigitalTwinsServiceVersion getServiceVersion() {\n     }\n \n     /**\n-     * Gets the list of models by iterating through a collection.\n-     * @param listModelOptions The options to follow when listing the models. For example, the page size hint can be specified.\n-     * @return A {@link PagedFlux} of ModelData and the http response.\n+     * List all of the models in this digital twins instance.\n+     * @return A {@link PagedFlux} of {@link ModelData} that enumerates all the models.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedFlux<ModelData> listModels(ListModelOptions listModelOptions) {\n-        return new PagedFlux<>(\n-            () -> withContext(context -> listModelsSinglePageAsync(listModelOptions, context)),\n-            nextLink -> withContext(context -> listModelsNextSinglePageAsync(nextLink, context)));\n+    public PagedFlux<ModelData> listModels() {", "originalCommit": "2aed78eb74ef256998955ad7fe017e2b0d946076", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MTQ4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15234#discussion_r488981483", "bodyText": "This function was sitting in the models API section, so I moved it back to the correct section", "author": "timtay-microsoft", "createdAt": "2020-09-15T21:24:09Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -913,12 +925,6 @@ public DigitalTwinsServiceVersion getServiceVersion() {\n         return protocolLayer.getDigitalTwinModels().deleteWithResponseAsync(modelId, context);\n     }\n \n-    PagedFlux<String> listRelationships(String digitalTwinId, String relationshipName, Context context) {", "originalCommit": "2aed78eb74ef256998955ad7fe017e2b0d946076", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MjAyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15234#discussion_r488982024", "bodyText": "The changes from lines 505 to 522 are just swapping the order that these two list APIs appear. Now the minimal API is above the maximal API for consistency", "author": "timtay-microsoft", "createdAt": "2020-09-15T21:25:18Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsClient.java", "diffHunk": "@@ -494,32 +506,32 @@ public ModelData getModel(String modelId) {\n      * Gets a model, including the model metadata and the model definition.\n      * @param modelId The Id of the model.\n      * @param context Additional context that is passed through the Http pipeline during the service call.\n-     * @return The ModelData and the http response\n+     * @return A {@link Response} containing a {@link ModelData} instance that contains the model and its metadata.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n     public Response<ModelData> getModelWithResponse(String modelId, Context context) {\n         return digitalTwinsAsyncClient.getModelWithResponse(modelId, context).block();\n     }\n \n     /**\n-     * Gets the list of models by iterating through a collection.", "originalCommit": "2aed78eb74ef256998955ad7fe017e2b0d946076", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MjM4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15234#discussion_r488982381", "bodyText": "Event routes get their own sample, so no need for these TODO comments", "author": "timtay-microsoft", "createdAt": "2020-09-15T21:26:04Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/samples/java/com/azure/digitaltwins/core/DigitalTwinsLifecycleAsyncSample.java", "diffHunk": "@@ -118,15 +118,6 @@ public static void main(String[] args) throws IOException, InterruptedException\n \n         // Create all the relationships\n         connectTwinsTogether();\n-\n-        // TODO: Creating event route", "originalCommit": "2aed78eb74ef256998955ad7fe017e2b0d946076", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MjkzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15234#discussion_r488982934", "bodyText": "Our e2e tests that used the APIs that take objects rather than strings were still passing in strings. This didn't seem right to me, even if the tests still passed. I added this function so that when we use those APIs, we pass in objects like BasicDigitalTwin rather than the raw json string", "author": "timtay-microsoft", "createdAt": "2020-09-15T21:27:16Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/DigitalTwinsTestBase.java", "diffHunk": "@@ -120,4 +126,9 @@ protected DigitalTwinsAsyncClient getAsyncClient(HttpClient httpClient, DigitalT\n             return Mono.just(new AccessToken(\"someFakeToken\", OffsetDateTime.MAX));\n         }\n     }\n+\n+    // Used for converting json strings into BasicDigitalTwins, BasicRelationships, etc.\n+    static <T> T deserializeJsonString(String rawJsonString, Class<T> clazz) throws JsonProcessingException {\n+        return new ObjectMapper().readValue(rawJsonString, clazz);\n+    }", "originalCommit": "2aed78eb74ef256998955ad7fe017e2b0d946076", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4NjM1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15234#discussion_r488986350", "bodyText": "Note that the return type is different than the passed in type (BasicDigitalTwin vs string)", "author": "timtay-microsoft", "createdAt": "2020-09-15T21:34:54Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/test/java/com/azure/digitaltwins/core/ComponentsTests.java", "diffHunk": "@@ -48,7 +49,7 @@ public void componentLifecycleTest(HttpClient httpClient, DigitalTwinsServiceVer\n             List<ModelData> createdList = client.createModels(modelsList);\n             logger.info(\"Created {} models successfully\", createdList.size());\n \n-            BasicDigitalTwin createdTwin = client.createDigitalTwin(roomWithWifiTwinId, roomWithWifiTwin,BasicDigitalTwin.class);", "originalCommit": "2aed78eb74ef256998955ad7fe017e2b0d946076", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}