{"pr_number": 17601, "pr_title": "[service bus] Use ServiceBusException rather than AmqpException", "pr_createdAt": "2020-11-17T00:41:39Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/17601", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxMzQyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r524813422", "bodyText": "Interesting that this is on the exception itself. Is it the same in JS?", "author": "JoshLove-msft", "createdAt": "2020-11-17T00:52:00Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java", "diffHunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.exception.AmqpErrorCondition;\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.exception.AzureException;\n+\n+/**\n+ * Defines {@link ServiceBusException} which has additional information about the operation that caused the\n+ * error.\n+ * @see ServiceBusErrorSource\n+ */\n+public final class ServiceBusException extends AzureException {\n+    private final transient ServiceBusErrorSource errorSource;\n+    private final transient ServiceBusFailureReason reason;\n+    private final boolean isTransient;\n+\n+    /**\n+     * @param throwable   for the error happened.\n+     * @param errorSource indicating which api caused the error.\n+     */\n+    public ServiceBusException(Throwable throwable, ServiceBusErrorSource errorSource) {\n+        super(throwable.getMessage(), throwable);\n+        this.errorSource = errorSource;\n+\n+        if (throwable instanceof AmqpException) {\n+            AmqpException amqpException = (AmqpException) throwable;\n+            reason = getServiceBusFailureReasonFromException(amqpException);\n+            isTransient = amqpException.isTransient();\n+        } else {\n+            reason = ServiceBusFailureReason.GENERAL_ERROR;\n+            isTransient = false;\n+        }\n+    }\n+\n+    /**\n+     * Gets the {@link ServiceBusErrorSource} in case of any errors.\n+     * @return the {@link ServiceBusErrorSource}\n+     */\n+    public ServiceBusErrorSource getErrorSource() {", "originalCommit": "1b96dde81bc8abbd435b323072a984852b015817", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgyMjk0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r524822940", "bodyText": "Ah, its not in JS. I need to move this to the ProcessErrorArgs equivalent in Java.", "author": "richardpark-msft", "createdAt": "2020-11-17T01:20:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxMzQyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgyNDc0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r524824748", "bodyText": "An interesting thing here is that the ServiceBusProcessor in Java takes a throwable, not a context object at the moment.", "author": "richardpark-msft", "createdAt": "2020-11-17T01:26:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxMzQyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzOTk5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r524839999", "bodyText": "I would expect the Error Source to be available only on the context object passed to the processError() in the processor client builder.", "author": "ramya-rao-a", "createdAt": "2020-11-17T02:14:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxMzQyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4Nzk1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525387956", "bodyText": "Now that the error context includes the error source, this method can be removed from this class.", "author": "srnagar", "createdAt": "2020-11-17T18:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxMzQyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0NzQ4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525447489", "bodyText": "I've made this field internal but we do use it when constructing the ErrorContext. So we won't expose it from the exception but we will use it internally to fill out the context (when appropriate).", "author": "richardpark-msft", "createdAt": "2020-11-17T19:45:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxMzQyMg=="}], "type": "inlineReview", "revised_code": {"commit": "dcfd3012651bd64bac5612c2150a4aa1cf53ecb1", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java\nindex 89083820482..62fed068178 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java\n\n@@ -18,7 +18,7 @@ public final class ServiceBusException extends AzureException {\n     private final boolean isTransient;\n \n     /**\n-     * @param throwable   for the error happened.\n+     * @param throwable for the error happened.\n      * @param errorSource indicating which api caused the error.\n      */\n     public ServiceBusException(Throwable throwable, ServiceBusErrorSource errorSource) {\n"}}, {"oid": "5ebd1de5b0ec055219bf75b40539b0e047792cb3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5ebd1de5b0ec055219bf75b40539b0e047792cb3", "message": "Changing over to using ServiceBusException\n\nServiceBusException summarizes the AmqpException excpetion so users\ncan switch off the .reason() field to handle common or user-handleable\nerrors.", "committedDate": "2020-11-17T00:58:47Z", "type": "commit"}, {"oid": "5ebd1de5b0ec055219bf75b40539b0e047792cb3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5ebd1de5b0ec055219bf75b40539b0e047792cb3", "message": "Changing over to using ServiceBusException\n\nServiceBusException summarizes the AmqpException excpetion so users\ncan switch off the .reason() field to handle common or user-handleable\nerrors.", "committedDate": "2020-11-17T00:58:47Z", "type": "forcePushed"}, {"oid": "1a2b7c13c94a8be215b402b96479ea314c38e828", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1a2b7c13c94a8be215b402b96479ea314c38e828", "message": "Removing import collapse.", "committedDate": "2020-11-17T01:04:08Z", "type": "commit"}, {"oid": "dcfd3012651bd64bac5612c2150a4aa1cf53ecb1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dcfd3012651bd64bac5612c2150a4aa1cf53ecb1", "message": "Fixing verify errors.", "committedDate": "2020-11-17T01:08:16Z", "type": "commit"}, {"oid": "8e965d9b69b2125ac68aaba5fb135105849eb67d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8e965d9b69b2125ac68aaba5fb135105849eb67d", "message": "Fixing verify errors.", "committedDate": "2020-11-17T01:16:34Z", "type": "commit"}, {"oid": "810a107f1e8fd724e9c79646e5e6375a9224615a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/810a107f1e8fd724e9c79646e5e6375a9224615a", "message": "Pass in an entire context object, rather than just the throwable.", "committedDate": "2020-11-17T01:58:23Z", "type": "commit"}, {"oid": "1edca1ce085695988d29bdcbdaab5b537e67b11a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1edca1ce085695988d29bdcbdaab5b537e67b11a", "message": "Fixing more verify issues", "committedDate": "2020-11-17T02:13:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MDE5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r524840194", "bodyText": "Assuming that the Error Source will be restricted to the processor only as per https://github.com/Azure/azure-sdk-for-java/pull/17601/files#r524813422, we dont need the above additions right?", "author": "ramya-rao-a", "createdAt": "2020-11-17T02:14:49Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java", "diffHunk": "@@ -36,4 +36,12 @@\n     /** Error while session is closed.*/\n     public static final ServiceBusErrorSource CLOSE_SESSION = fromString(\"CLOSE_SESSION\",\n         ServiceBusErrorSource.class);\n+\n+    /** Error while sending a message.*/\n+    public static final ServiceBusErrorSource SENDING = fromString(\"SENDING\",\n+            ServiceBusErrorSource.class);\n+\n+    /** Error while trying to do an operation on the management link. */\n+    public static final ServiceBusErrorSource MANAGEMENT = fromString(\"MANAGEMENT\",\n+            ServiceBusErrorSource.class);", "originalCommit": "810a107f1e8fd724e9c79646e5e6375a9224615a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0MjcwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525442700", "bodyText": "I'm adding them in since we do throw this exception type from places other than the processor.\nHowever, I am making the errorSource field package-private now.", "author": "richardpark-msft", "createdAt": "2020-11-17T19:41:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MDE5NA=="}], "type": "inlineReview", "revised_code": {"commit": "b51d5fa45afdb13ea8242dc1958ee119b1ff6241", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\nindex 5f7dbe76ed2..1faffcdb063 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\n\n@@ -38,7 +38,7 @@ public final class ServiceBusErrorSource extends ExpandableStringEnum<ServiceBus\n         ServiceBusErrorSource.class);\n \n     /** Error while sending a message.*/\n-    public static final ServiceBusErrorSource SENDING = fromString(\"SENDING\",\n+    public static final ServiceBusErrorSource SEND = fromString(\"SEND\",\n             ServiceBusErrorSource.class);\n \n     /** Error while trying to do an operation on the management link. */\n"}}, {"oid": "185cd5935e6412004c189baa46e55632da23c38c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/185cd5935e6412004c189baa46e55632da23c38c", "message": "Fixing more verify issues", "committedDate": "2020-11-17T02:16:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3MTIyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525371223", "bodyText": "Make this final. Also, should we just name this as ServiceBusErrorContext?", "author": "srnagar", "createdAt": "2020-11-17T17:58:34Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusProcessErrorContext.java", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+/**\n+ * Context for errors handled by the Service Bus processor.\n+ */\n+public class ServiceBusProcessErrorContext {", "originalCommit": "810a107f1e8fd724e9c79646e5e6375a9224615a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0Njc1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525446753", "bodyText": "Both of those sound good, done.", "author": "richardpark-msft", "createdAt": "2020-11-17T19:44:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3MTIyMw=="}], "type": "inlineReview", "revised_code": {"commit": "9459733e866249b7daea17c4e7322dd5e9453937", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusProcessErrorContext.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusProcessErrorContext.java\nindex 818c644a92f..1030c2a4483 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusProcessErrorContext.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusProcessErrorContext.java\n\n@@ -18,7 +18,7 @@ public class ServiceBusProcessErrorContext {\n         this.entityPath = entityPath;\n \n         if (throwable instanceof ServiceBusException) {\n-            final ServiceBusException serviceBusException = ((ServiceBusException)throwable);\n+            final ServiceBusException serviceBusException = ((ServiceBusException) throwable);\n             this.errorSource = serviceBusException.getErrorSource();\n         } else {\n             this.errorSource = ServiceBusErrorSource.RECEIVE;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3ODE2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525378165", "bodyText": "Why do we need fullyQualifiedNamespace and entityPath? If this is needed for the error context, we should consider adding it to the ServiceBusReceivedMessageContext too? I know Event Hubs had these properties on both event and error context. So, we should consider adding it to both places.", "author": "srnagar", "createdAt": "2020-11-17T18:09:20Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusProcessErrorContext.java", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+/**\n+ * Context for errors handled by the Service Bus processor.\n+ */\n+public class ServiceBusProcessErrorContext {\n+    private final Throwable exception;\n+    private final ServiceBusErrorSource errorSource;\n+    private final String fullyQualifiedNamespace;\n+    private final String entityPath;\n+\n+    ServiceBusProcessErrorContext(Throwable throwable, String fullyQualifiedNamespace, String entityPath) {", "originalCommit": "810a107f1e8fd724e9c79646e5e6375a9224615a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQxNjE4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525416189", "bodyText": "This is just mimicking what's already in .net, so this is more a question for @JoshLove-msft .", "author": "richardpark-msft", "createdAt": "2020-11-17T19:08:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3ODE2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9459733e866249b7daea17c4e7322dd5e9453937", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusProcessErrorContext.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusProcessErrorContext.java\nindex 818c644a92f..1030c2a4483 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusProcessErrorContext.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusProcessErrorContext.java\n\n@@ -18,7 +18,7 @@ public class ServiceBusProcessErrorContext {\n         this.entityPath = entityPath;\n \n         if (throwable instanceof ServiceBusException) {\n-            final ServiceBusException serviceBusException = ((ServiceBusException)throwable);\n+            final ServiceBusException serviceBusException = ((ServiceBusException) throwable);\n             this.errorSource = serviceBusException.getErrorSource();\n         } else {\n             this.errorSource = ServiceBusErrorSource.RECEIVE;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4NDkzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525384933", "bodyText": "Do we need the constructor to be public?", "author": "srnagar", "createdAt": "2020-11-17T18:19:31Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java", "diffHunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.exception.AmqpErrorCondition;\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.exception.AzureException;\n+\n+/**\n+ * Defines {@link ServiceBusException} which has additional information about the operation that caused the\n+ * error.\n+ * @see ServiceBusErrorSource\n+ */\n+public final class ServiceBusException extends AzureException {\n+    private final transient ServiceBusErrorSource errorSource;\n+    private final transient ServiceBusFailureReason reason;\n+    private final boolean isTransient;\n+\n+    /**\n+     * @param throwable for the error happened.\n+     * @param errorSource indicating which api caused the error.\n+     */\n+    public ServiceBusException(Throwable throwable, ServiceBusErrorSource errorSource) {", "originalCommit": "185cd5935e6412004c189baa46e55632da23c38c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0NjQ0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525446445", "bodyText": "Nope, made package private.", "author": "richardpark-msft", "createdAt": "2020-11-17T19:44:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4NDkzMw=="}], "type": "inlineReview", "revised_code": {"commit": "9459733e866249b7daea17c4e7322dd5e9453937", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java\nindex 62fed068178..30b0494e50b 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java\n\n@@ -39,7 +39,7 @@ public final class ServiceBusException extends AzureException {\n      * Gets the {@link ServiceBusErrorSource} in case of any errors.\n      * @return the {@link ServiceBusErrorSource}\n      */\n-    public ServiceBusErrorSource getErrorSource() {\n+    ServiceBusErrorSource getErrorSource() {\n         return errorSource;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5MDE5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525390192", "bodyText": "nit: update the comment too.", "author": "srnagar", "createdAt": "2020-11-17T18:27:23Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1200,22 +1201,27 @@ private String getLinkName(String sessionId) {\n         } else if (!receiverOptions.isSessionReceiver()) {\n             return monoError(logger, new IllegalStateException(\"Cannot get session state on a non-session receiver.\"));\n         }\n+\n+        Mono<byte[]> result;\n+\n         if (sessionManager != null) {\n-            return sessionManager.getSessionState(sessionId);\n+            result =  sessionManager.getSessionState(sessionId);\n         } else {\n-            return connectionProcessor\n+            result =  connectionProcessor\n                 .flatMap(connection -> connection.getManagementNode(entityPath, entityType))\n                 .flatMap(channel -> channel.getSessionState(sessionId, getLinkName(sessionId)));\n         }\n+\n+        return result.onErrorMap((err) -> mapError(err, ServiceBusErrorSource.RECEIVE));\n     }\n \n     /**\n-     * Map the error to {@link ServiceBusReceiverException}\n+     * Map the error to {@link ServiceBusException}\n      */\n     private Throwable mapError(Throwable throwable, ServiceBusErrorSource errorSource) {\n         // If it is already `ServiceBusReceiverException`, we can just throw it.\n-        if (!(throwable instanceof ServiceBusReceiverException)) {\n-            return new ServiceBusReceiverException(throwable, errorSource);\n+        if (!(throwable instanceof ServiceBusException)) {", "originalCommit": "185cd5935e6412004c189baa46e55632da23c38c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0NjE0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525446140", "bodyText": "Removed the comment - realized what the function was doing was pretty obvious.", "author": "richardpark-msft", "createdAt": "2020-11-17T19:44:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5MDE5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "654909cb66dcc8766506eb25c49b1586c7e07ad2", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex 74cc97f4583..07a3bb51499 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -1219,7 +1219,6 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n      * Map the error to {@link ServiceBusException}\n      */\n     private Throwable mapError(Throwable throwable, ServiceBusErrorSource errorSource) {\n-        // If it is already `ServiceBusReceiverException`, we can just throw it.\n         if (!(throwable instanceof ServiceBusException)) {\n             return new ServiceBusException(throwable, errorSource);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5MDY2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525390662", "bodyText": "nit: fix indentation", "author": "srnagar", "createdAt": "2020-11-17T18:28:07Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1190,7 +1190,8 @@ private String getLinkName(String sessionId) {\n \n         return connectionProcessor\n             .flatMap(connection -> connection.getManagementNode(entityPath, entityType))\n-            .flatMap(channel -> channel.setSessionState(sessionId, sessionState, linkName));\n+            .flatMap(channel -> channel.setSessionState(sessionId, sessionState, linkName))\n+                .onErrorMap((err) -> mapError(err, ServiceBusErrorSource.RECEIVE));", "originalCommit": "185cd5935e6412004c189baa46e55632da23c38c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0NTczNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525445735", "bodyText": "Fixed to be flush with the other calls.", "author": "richardpark-msft", "createdAt": "2020-11-17T19:44:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5MDY2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "654909cb66dcc8766506eb25c49b1586c7e07ad2", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex 74cc97f4583..07a3bb51499 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -1191,7 +1191,7 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n         return connectionProcessor\n             .flatMap(connection -> connection.getManagementNode(entityPath, entityType))\n             .flatMap(channel -> channel.setSessionState(sessionId, sessionState, linkName))\n-                .onErrorMap((err) -> mapError(err, ServiceBusErrorSource.RECEIVE));\n+            .onErrorMap((err) -> mapError(err, ServiceBusErrorSource.RECEIVE));\n     }\n \n     Mono<byte[]> getSessionState(String sessionId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5MjYyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525392624", "bodyText": "I don't think then() is needed here.", "author": "srnagar", "createdAt": "2020-11-17T18:31:18Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java", "diffHunk": "@@ -499,21 +509,26 @@ public void close() {\n                 sink.error(throwable);\n             })\n             .switchIfEmpty(Mono.error(new AmqpException(true, \"No response received from management channel.\",\n-                channel.getErrorContext())));\n+                channel.getErrorContext())))\n+            .onErrorMap(this::mapError);\n     }\n \n     private Mono<Void> isAuthorized(String operation) {\n         return tokenManager.getAuthorizationResults()\n             .next()\n             .handle((response, sink) -> {\n                 if (response != AmqpResponseCode.ACCEPTED && response != AmqpResponseCode.OK) {\n-                    sink.error(new AmqpException(false, String.format(\n-                        \"User does not have authorization to perform operation [%s] on entity [%s]. Response: [%s]\",\n-                        operation, entityPath, response), getErrorContext()));\n+                    final String message = String.format(\"User does not have authorization to perform operation \"\n+                        + \"[%s] on entity [%s]. Response: [%s]\", operation, entityPath, response);\n+                    final Throwable exc = new AmqpException(false, AmqpErrorCondition.UNAUTHORIZED_ACCESS,\n+                        message, getErrorContext());\n+                    sink.error(new ServiceBusException(exc, ServiceBusErrorSource.MANAGEMENT));\n                 } else {\n                     sink.complete();\n                 }\n-            });\n+            })\n+            .onErrorMap(this::mapError)\n+            .then();", "originalCommit": "185cd5935e6412004c189baa46e55632da23c38c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0NDg3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525444870", "bodyText": "You were right, it needed to be hoisted further up!", "author": "richardpark-msft", "createdAt": "2020-11-17T19:43:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5MjYyNA=="}], "type": "inlineReview", "revised_code": {"commit": "44bcc36cf0fa715b42104daebbe44b41e095efbb", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\nindex c0bd09c84ac..7fdf69240dd 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ManagementChannel.java\n\n@@ -515,6 +515,7 @@ public class ManagementChannel implements ServiceBusManagementNode {\n \n     private Mono<Void> isAuthorized(String operation) {\n         return tokenManager.getAuthorizationResults()\n+            .onErrorMap(this::mapError)\n             .next()\n             .handle((response, sink) -> {\n                 if (response != AmqpResponseCode.ACCEPTED && response != AmqpResponseCode.OK) {\n"}}, {"oid": "9459733e866249b7daea17c4e7322dd5e9453937", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9459733e866249b7daea17c4e7322dd5e9453937", "message": "Make errorSource a package private field and add in a helper to extract it for the tests.", "committedDate": "2020-11-17T19:27:11Z", "type": "commit"}, {"oid": "32c48aa828637ecae34096f832d33f6381939574", "url": "https://github.com/Azure/azure-sdk-for-java/commit/32c48aa828637ecae34096f832d33f6381939574", "message": "Make the ServiceBusErrorContext final (and rename from ServiceBusProcesErrorContext)", "committedDate": "2020-11-17T19:29:39Z", "type": "commit"}, {"oid": "44bcc36cf0fa715b42104daebbe44b41e095efbb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/44bcc36cf0fa715b42104daebbe44b41e095efbb", "message": "Moving the location of the onErrorMap so I don't accidentally create a serialized execution order.", "committedDate": "2020-11-17T19:35:12Z", "type": "commit"}, {"oid": "654909cb66dcc8766506eb25c49b1586c7e07ad2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/654909cb66dcc8766506eb25c49b1586c7e07ad2", "message": "Remove lame comment.\nFix lame indentation.", "committedDate": "2020-11-17T19:40:52Z", "type": "commit"}, {"oid": "649179ca3049c8b9686635b595034bd8a2f21757", "url": "https://github.com/Azure/azure-sdk-for-java/commit/649179ca3049c8b9686635b595034bd8a2f21757", "message": "Rename ReceiveMode to ServiceBusReceiveMode\n\nFixes #17555", "committedDate": "2020-11-17T19:52:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxMjk1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525512952", "bodyText": "To be consistent with the usage of other terms here, we should just call this SEND. Also, we should do the same for ABANDONED -> ABANDON (sorry, this was not part of your PR).", "author": "srnagar", "createdAt": "2020-11-17T20:45:16Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java", "diffHunk": "@@ -36,4 +36,12 @@\n     /** Error while session is closed.*/\n     public static final ServiceBusErrorSource CLOSE_SESSION = fromString(\"CLOSE_SESSION\",\n         ServiceBusErrorSource.class);\n+\n+    /** Error while sending a message.*/\n+    public static final ServiceBusErrorSource SENDING = fromString(\"SENDING\",", "originalCommit": "649179ca3049c8b9686635b595034bd8a2f21757", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzMzMzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525533339", "bodyText": "I live to serve. No apologies needed ;)", "author": "richardpark-msft", "createdAt": "2020-11-17T21:23:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxMjk1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b51d5fa45afdb13ea8242dc1958ee119b1ff6241", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\nindex 5f7dbe76ed2..1faffcdb063 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusErrorSource.java\n\n@@ -38,7 +38,7 @@ public final class ServiceBusErrorSource extends ExpandableStringEnum<ServiceBus\n         ServiceBusErrorSource.class);\n \n     /** Error while sending a message.*/\n-    public static final ServiceBusErrorSource SENDING = fromString(\"SENDING\",\n+    public static final ServiceBusErrorSource SEND = fromString(\"SEND\",\n             ServiceBusErrorSource.class);\n \n     /** Error while trying to do an operation on the management link. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxMzk1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525513951", "bodyText": "PROTO_IO falls under SERVICE_COMMUNICATION_PROBLEM", "author": "srnagar", "createdAt": "2020-11-17T20:47:06Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java", "diffHunk": "@@ -0,0 +1,101 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.amqp.exception.AmqpErrorCondition;\n+import com.azure.core.amqp.exception.AmqpException;\n+import com.azure.core.exception.AzureException;\n+\n+/**\n+ * Defines {@link ServiceBusException} which has additional information about the operation that caused the\n+ * error.\n+ * @see ServiceBusErrorSource\n+ */\n+public final class ServiceBusException extends AzureException {\n+    private final transient ServiceBusErrorSource errorSource;\n+    private final transient ServiceBusFailureReason reason;\n+    private final boolean isTransient;\n+\n+    /**\n+     * @param throwable for the error happened.\n+     * @param errorSource indicating which api caused the error.\n+     */\n+    public ServiceBusException(Throwable throwable, ServiceBusErrorSource errorSource) {\n+        super(throwable.getMessage(), throwable);\n+        this.errorSource = errorSource;\n+\n+        if (throwable instanceof AmqpException) {\n+            AmqpException amqpException = (AmqpException) throwable;\n+            reason = getServiceBusFailureReasonFromException(amqpException);\n+            isTransient = amqpException.isTransient();\n+        } else {\n+            reason = ServiceBusFailureReason.GENERAL_ERROR;\n+            isTransient = false;\n+        }\n+    }\n+\n+    /**\n+     * Gets the {@link ServiceBusErrorSource} in case of any errors.\n+     * @return the {@link ServiceBusErrorSource}\n+     */\n+    ServiceBusErrorSource getErrorSource() {\n+        return errorSource;\n+    }\n+\n+    /**\n+     * Gets the {@link ServiceBusFailureReason} in case of any errors.\n+     * @return the {@link ServiceBusFailureReason}\n+     */\n+    public ServiceBusFailureReason getReason() {\n+        return reason;\n+    }\n+\n+    /**\n+     * A boolean indicating if the exception is a transient error or not.\n+     *\n+     * @return returns true when user can retry the operation that generated the exception without additional\n+     * intervention.\n+     */\n+    public boolean isTransient() {\n+        return isTransient;\n+    }\n+\n+    private ServiceBusFailureReason getServiceBusFailureReasonFromException(AmqpException throwable) {\n+        final AmqpErrorCondition errorCondition = throwable.getErrorCondition();\n+\n+        if (errorCondition == null) {\n+            return ServiceBusFailureReason.GENERAL_ERROR;\n+        }\n+\n+        switch (errorCondition) {\n+            case NOT_FOUND:\n+                return ServiceBusFailureReason.MESSAGING_ENTITY_NOT_FOUND;\n+            case MESSAGE_LOCK_LOST:\n+                return ServiceBusFailureReason.MESSAGE_LOCK_LOST;\n+            case MESSAGE_NOT_FOUND:\n+                return ServiceBusFailureReason.MESSAGE_NOT_FOUND;\n+            case LINK_PAYLOAD_SIZE_EXCEEDED:\n+                return ServiceBusFailureReason.MESSAGE_SIZE_EXCEEDED;\n+            case ENTITY_ALREADY_EXISTS:\n+                return ServiceBusFailureReason.MESSAGING_ENTITY_ALREADY_EXISTS;\n+            case ENTITY_DISABLED_ERROR:\n+                return ServiceBusFailureReason.MESSAGING_ENTITY_DISABLED;\n+            case RESOURCE_LIMIT_EXCEEDED:\n+                return ServiceBusFailureReason.QUOTA_EXCEEDED;\n+            case SERVER_BUSY_ERROR:\n+                return ServiceBusFailureReason.SERVICE_BUSY;\n+            case TIMEOUT_ERROR:\n+                return ServiceBusFailureReason.SERVICE_TIMEOUT;\n+            case SESSION_CANNOT_BE_LOCKED:\n+                return ServiceBusFailureReason.SESSION_CANNOT_BE_LOCKED;\n+            case SESSION_LOCK_LOST:\n+                return ServiceBusFailureReason.SESSION_LOCK_LOST;\n+            case UNAUTHORIZED_ACCESS:\n+                return ServiceBusFailureReason.UNAUTHORIZED;\n+            case PROTON_IO:         // does this mapping make sense?", "originalCommit": "649179ca3049c8b9686635b595034bd8a2f21757", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzMzQxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525533416", "bodyText": "Done.", "author": "richardpark-msft", "createdAt": "2020-11-17T21:23:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxMzk1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b51d5fa45afdb13ea8242dc1958ee119b1ff6241", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java\nindex 30b0494e50b..a4ef240c877 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusException.java\n\n@@ -93,7 +93,8 @@ public final class ServiceBusException extends AzureException {\n                 return ServiceBusFailureReason.SESSION_LOCK_LOST;\n             case UNAUTHORIZED_ACCESS:\n                 return ServiceBusFailureReason.UNAUTHORIZED;\n-            case PROTON_IO:         // does this mapping make sense?\n+            case PROTON_IO:\n+                return ServiceBusFailureReason.SERVICE_COMMUNICATION_PROBLEM;\n             default:\n                 return ServiceBusFailureReason.GENERAL_ERROR;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxNTI5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525515299", "bodyText": "Some alternate name proposals: SERVICE_COMMUNICATION_ERROR, SERVICE_CONNECTION_ERROR. Generally, we don't suffix PROBLEM. ERROR is the more commonly used term.", "author": "srnagar", "createdAt": "2020-11-17T20:49:40Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusFailureReason.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+\n+/**\n+ * The set of well-known reasons for an Service Bus operation failure that was the cause of an exception.\n+ */\n+public final class ServiceBusFailureReason extends ExpandableStringEnum<ServiceBusFailureReason> {\n+    // NOTE: this list is intended to mirror the reasons we have in .net\n+    // https://github.com/Azure/azure-sdk-for-net/blob/master/sdk/servicebus/Azure.Messaging\n+    // .ServiceBus/src/Primitives/ServiceBusFailureReason.cs\n+\n+    /** The exception was the result of a general error within the client library. */\n+    public static final ServiceBusFailureReason GENERAL_ERROR = fromString(\"GENERAL_ERROR\",\n+        ServiceBusFailureReason.class);\n+\n+    /** The lock on the message is lost. Callers should call attempt to receive and process the message again. */\n+    public static final ServiceBusFailureReason MESSAGE_LOCK_LOST = fromString(\"MESSAGE_LOCK_LOST\",\n+        ServiceBusFailureReason.class);\n+\n+    /** The requested message was not found. */\n+    public static final ServiceBusFailureReason MESSAGE_NOT_FOUND = fromString(\"MESSAGE_NOT_FOUND\",\n+        ServiceBusFailureReason.class);\n+\n+    /** A message is larger than the maximum size allowed for its transport. */\n+    public static final ServiceBusFailureReason MESSAGE_SIZE_EXCEEDED = fromString(\"MESSAGE_SIZE_EXCEEDED\",\n+        ServiceBusFailureReason.class);\n+\n+    /** An entity with the same name exists under the same namespace. */\n+    public static final ServiceBusFailureReason MESSAGING_ENTITY_ALREADY_EXISTS = fromString(\n+        \"MESSAGING_ENTITY_ALREADY_EXISTS\", ServiceBusFailureReason.class);\n+\n+    /** The Messaging Entity is disabled. Enable the entity again using Portal. */\n+    public static final ServiceBusFailureReason MESSAGING_ENTITY_DISABLED = fromString(\"MESSAGING_ENTITY_DISABLED\",\n+        ServiceBusFailureReason.class);\n+\n+    /** A Service Bus resource cannot be found by the Service Bus service. */\n+    public static final ServiceBusFailureReason MESSAGING_ENTITY_NOT_FOUND = fromString(\"MESSAGING_ENTITY_NOT_FOUND\",\n+        ServiceBusFailureReason.class);\n+\n+    /** The quota applied to an Service Bus resource has been exceeded while interacting with the Azure Service Bus\n+     * service. */\n+    public static final ServiceBusFailureReason QUOTA_EXCEEDED = fromString(\"QUOTA_EXCEEDED\",\n+        ServiceBusFailureReason.class);\n+\n+    /** The Azure Service Bus service reports that it is busy in response to a client request to perform an operation\n+     * . */\n+    public static final ServiceBusFailureReason SERVICE_BUSY = fromString(\"SERVICE_BUSY\",\n+        ServiceBusFailureReason.class);\n+\n+    /** An operation or other request timed out while interacting with the Azure Service Bus service. */\n+    public static final ServiceBusFailureReason SERVICE_TIMEOUT = fromString(\"SERVICE_TIMEOUT\",\n+        ServiceBusFailureReason.class);\n+\n+    /** There was a general communications error encountered when interacting with the Azure Service Bus service. */\n+    public static final ServiceBusFailureReason SERVICE_COMMUNICATION_PROBLEM = fromString(", "originalCommit": "649179ca3049c8b9686635b595034bd8a2f21757", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUyOTg5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525529899", "bodyText": "Went with this just to get better search alignment (this name matches with .net).\nI can change it, but that was the reasoning.", "author": "richardpark-msft", "createdAt": "2020-11-17T21:16:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxNTI5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzODc0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525538740", "bodyText": "(renamed!)", "author": "richardpark-msft", "createdAt": "2020-11-17T21:33:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxNTI5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "962cc3282f2657115b26e256d7164a79e4c3eef6", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusFailureReason.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusFailureReason.java\nindex 539df4da4c4..a392b47eb4d 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusFailureReason.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusFailureReason.java\n\n@@ -56,8 +56,8 @@ public final class ServiceBusFailureReason extends ExpandableStringEnum<ServiceB\n         ServiceBusFailureReason.class);\n \n     /** There was a general communications error encountered when interacting with the Azure Service Bus service. */\n-    public static final ServiceBusFailureReason SERVICE_COMMUNICATION_PROBLEM = fromString(\n-        \"SERVICE_COMMUNICATION_PROBLEM\", ServiceBusFailureReason.class);\n+    public static final ServiceBusFailureReason SERVICE_COMMUNICATION_ERROR = fromString(\n+        \"SERVICE_COMMUNICATION_ERROR\", ServiceBusFailureReason.class);\n \n     /** The requested session cannot be locked. */\n     public static final ServiceBusFailureReason SESSION_CANNOT_BE_LOCKED = fromString(\"SESSION_CANNOT_BE_LOCKED\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxNjE1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525516153", "bodyText": "\ud83d\ude01", "author": "srnagar", "createdAt": "2020-11-17T20:51:08Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusExceptionTestHelper.java", "diffHunk": "@@ -0,0 +1,15 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+public class ServiceBusExceptionTestHelper {", "originalCommit": "649179ca3049c8b9686635b595034bd8a2f21757", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUyNjg0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17601#discussion_r525526846", "bodyText": "It was approved by the deputy architect for Java! ;)", "author": "richardpark-msft", "createdAt": "2020-11-17T21:11:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxNjE1Mw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "b51d5fa45afdb13ea8242dc1958ee119b1ff6241", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b51d5fa45afdb13ea8242dc1958ee119b1ff6241", "message": "* Doing some renames for consistency (SENDER -> SEND, ABANDONED -> ABANDON)\n* Map PROTON_IO to Service communication problem.", "committedDate": "2020-11-17T21:18:50Z", "type": "commit"}, {"oid": "962cc3282f2657115b26e256d7164a79e4c3eef6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/962cc3282f2657115b26e256d7164a79e4c3eef6", "message": "* Be idiomatic with the naming of SERVICE_COMMUNICATION_PROBLEM and call it SERVICE_COMMUNICATION_ERROR", "committedDate": "2020-11-17T21:32:26Z", "type": "commit"}, {"oid": "5be5cab9cffae467c69b0fba249aab9c05046171", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5be5cab9cffae467c69b0fba249aab9c05046171", "message": "Fixing formatting errors caught by verify", "committedDate": "2020-11-17T22:20:52Z", "type": "commit"}, {"oid": "9a844327bf3144099d6ec7f7a3bb736670ee137f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9a844327bf3144099d6ec7f7a3bb736670ee137f", "message": "Fixing compile errors with the perf tests from changing the receive mode.", "committedDate": "2020-11-17T22:41:14Z", "type": "commit"}, {"oid": "a6926d52072edce86a3e0af927cce590021af489", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a6926d52072edce86a3e0af927cce590021af489", "message": "Missed one.", "committedDate": "2020-11-17T22:49:26Z", "type": "commit"}, {"oid": "de7ce7765e5078e049cc1a813e953bf911f6d9fa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/de7ce7765e5078e049cc1a813e953bf911f6d9fa", "message": "Updating to use the new ServiceBusReceiveMode name rather than just ReceiveMode", "committedDate": "2020-11-17T23:16:00Z", "type": "commit"}, {"oid": "4113891ce4ac2559b1523d3cc3e944f74ccf2bfc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4113891ce4ac2559b1523d3cc3e944f74ccf2bfc", "message": "Missed one", "committedDate": "2020-11-18T00:00:19Z", "type": "commit"}]}