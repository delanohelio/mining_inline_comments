{"pr_number": 18404, "pr_title": "Adding request level diagnostic information for queries", "pr_createdAt": "2020-12-30T20:46:47Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/18404", "timeline": [{"oid": "d1c609d18511490facca86d301e7dbdf9e1219f2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d1c609d18511490facca86d301e7dbdf9e1219f2", "message": "Adding request level diagnostic information for queries", "committedDate": "2020-12-30T20:32:49Z", "type": "commit"}, {"oid": "39913f8bb73db76b88637148e8d3c51803ff8353", "url": "https://github.com/Azure/azure-sdk-for-java/commit/39913f8bb73db76b88637148e8d3c51803ff8353", "message": "Removing unused variable", "committedDate": "2020-12-31T08:32:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ1OTc3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r550459773", "bodyText": "Wouldn't you need to get the superset of the FeedRangeDiagnostics.getClientSideRequestStatistics().getRegionsContacted() here instead?", "author": "FabianMeiswinkel", "createdAt": "2020-12-31T11:09:03Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosDiagnostics.java", "diffHunk": "@@ -80,6 +81,9 @@ public Duration getDuration() {\n      */\n     @Beta(value = Beta.SinceVersion.V4_9_0, warningText = Beta.PREVIEW_SUBJECT_TO_CHANGE_WARNING)\n     public Set<URI> getRegionsContacted() {\n+        if (this.feedResponseDiagnostics != null) {\n+            return null;", "originalCommit": "39913f8bb73db76b88637148e8d3c51803ff8353", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUwODQ0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r551508442", "bodyText": "Aggregating regions contacted from all list of clientSideRequestStatistics needs to be done.  I will do this in subsequent PRs", "author": "mbhaskar", "createdAt": "2021-01-04T19:05:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ1OTc3Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ2MDc2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r550460766", "bodyText": "IMO it would be good to also add some test coverage for diagnostics with more elaborate queries liek aggregates/order-by etc.", "author": "FabianMeiswinkel", "createdAt": "2020-12-31T11:14:51Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java", "diffHunk": "@@ -321,6 +322,117 @@ public void queryMetrics(String query, Boolean qmEnabled) {\n         }\n     }\n \n+    @Test(groups = {\"simple\"}, dataProvider = \"query\", timeOut = TIMEOUT)", "originalCommit": "39913f8bb73db76b88637148e8d3c51803ff8353", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUwODYxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r551508615", "bodyText": "Yes more tests on their way in the next PR", "author": "mbhaskar", "createdAt": "2021-01-04T19:06:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQ2MDc2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ca6d04acb56cb6ccd71b2a328d78b3b59600f915", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java\nindex 90463c19661..586bdff4183 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java\n\n@@ -357,11 +357,9 @@ public class CosmosDiagnosticsTest extends TestSuiteBase {\n             String queryDiagnostics = feedResponse.getCosmosDiagnostics().toString();\n             assertThat(feedResponse.getResults().size()).isEqualTo(0);\n             if (!query.contains(\"group by\") || qroupByFirstResponse) { // TODO https://github\n-                if (qmEnabled) {\n-                    validateQueryDiagnostics(queryDiagnostics, qmEnabled, true);\n-                    validateDirectModeQueryDiagnostics(queryDiagnostics);\n-                    validateTransportRequestTimelineDirect(queryDiagnostics);\n-                }\n+                validateQueryDiagnostics(queryDiagnostics, qmEnabled, true);\n+                validateDirectModeQueryDiagnostics(queryDiagnostics);\n+                validateTransportRequestTimelineDirect(queryDiagnostics);\n                 if (query.contains(\"group by\")) {\n                     qroupByFirstResponse = false;\n                 }\n"}}, {"oid": "02172087a496625bfce7e57b138360911e0b33aa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/02172087a496625bfce7e57b138360911e0b33aa", "message": "Fixing spot bugs\nRefactoring spotbug suppressions as the class ClientSideRequestStatistics is moved to implementation", "committedDate": "2020-12-31T20:19:44Z", "type": "commit"}, {"oid": "6251a2665dbcd7780d41a5a0fbbce4be61b1eb9b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6251a2665dbcd7780d41a5a0fbbce4be61b1eb9b", "message": "test fixes", "committedDate": "2020-12-31T20:43:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDY5NTQ2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r550695466", "bodyText": "NIT: Can avoid this extra variable", "author": "simplynaveen20", "createdAt": "2020-12-31T21:45:24Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -487,15 +488,17 @@ public String getId() {\n             return BridgeInternal.createFeedResponseWithQueryMetrics(transformedResults,\n                 response.getResponseHeaders(),\n                 ModelBridgeInternal.queryMetrics(response),\n-                ModelBridgeInternal.getQueryPlanDiagnosticsContext(response));\n+                ModelBridgeInternal.getQueryPlanDiagnosticsContext(response),\n+                                                                     response.getCosmosDiagnostics());\n \n         }\n-        return BridgeInternal.createFeedResponseWithQueryMetrics(\n+        FeedResponse<T> feedResponseWithQueryMetrics = BridgeInternal.createFeedResponseWithQueryMetrics(", "originalCommit": "6251a2665dbcd7780d41a5a0fbbce4be61b1eb9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE4Mjk4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r553182987", "bodyText": "Done", "author": "mbhaskar", "createdAt": "2021-01-07T08:44:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDY5NTQ2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "03bcd6498cc231129abc0a0e281a254843abdac2", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\nindex 0efd1b94ede..2ecfadc0991 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\n\n@@ -492,13 +492,12 @@ public class CosmosAsyncContainer {\n                                                                      response.getCosmosDiagnostics());\n \n         }\n-        FeedResponse<T> feedResponseWithQueryMetrics = BridgeInternal.createFeedResponseWithQueryMetrics(\n+        return BridgeInternal.createFeedResponseWithQueryMetrics(\n             (response.getResults().stream().map(document -> ModelBridgeInternal.toObjectFromJsonSerializable(document,\n                                                                                                              classType))\n                  .collect(Collectors.toList())), response.getResponseHeaders(),\n             ModelBridgeInternal.queryMetrics(response),\n             ModelBridgeInternal.getQueryPlanDiagnosticsContext(response), response.getCosmosDiagnostics());\n-        return feedResponseWithQueryMetrics;\n     }\n \n     private <T> T transform(Object object, Class<T> classType) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDY5NzAxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r550697019", "bodyText": "This method is particularly for query , why we need diagnostics for point operation , can we remove it and also rename the method indicating query/feed in it ?", "author": "simplynaveen20", "createdAt": "2020-12-31T21:59:11Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java", "diffHunk": "@@ -473,6 +505,22 @@ public static void setTimestamp(Resource resource, Instant date) {\n         ModelBridgeInternal.setTimestamp(resource, date);\n     }\n \n+    @Warning(value = INTERNAL_USE_ONLY_WARNING)\n+    public static List<ClientSideRequestStatistics> getClientSideRequestStatics(CosmosDiagnostics cosmosDiagnostics) {\n+        //Used only during aggregations like Aggregate/Orderby/Groupby which may contain clientSideStats in\n+        //feedResponseDiagnostics. So we need to add from both the places\n+        List<ClientSideRequestStatistics> clientSideRequestStatisticsList = new ArrayList<>();\n+\n+        if (cosmosDiagnostics != null) {\n+            clientSideRequestStatisticsList\n+                .addAll(cosmosDiagnostics.getFeedResponseDiagnostics().getClientSideRequestStatisticsList());\n+            if (cosmosDiagnostics.clientSideRequestStatistics() != null) {", "originalCommit": "6251a2665dbcd7780d41a5a0fbbce4be61b1eb9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzNDk1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r551534958", "bodyText": "We build the feedresponse diagnostics for query by adding ClientSideRequestStatics from each underlying operation. So this is required.", "author": "mbhaskar", "createdAt": "2021-01-04T19:56:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDY5NzAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzNzIxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r551537210", "bodyText": "For feedresponse you already adding cosmosDiagnostics.getFeedResponseDiagnostics().getClientSideRequestStatisticsList(), so why we need cosmosDiagnostics.clientSideRequestStatistics() which is point operation diagnotics", "author": "simplynaveen20", "createdAt": "2021-01-04T20:01:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDY5NzAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE4MzI5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r553183299", "bodyText": "As discussed offline, this is required for orderby as we try to save the diagnostics onto list while transforming from page to items", "author": "mbhaskar", "createdAt": "2021-01-07T08:45:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDY5NzAxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "16ea656d272bcf5221bde79d4fa9cb61f7c4699f", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java\nindex a9b2afd726a..c0ba611ca29 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java\n\n@@ -506,7 +507,7 @@ public final class BridgeInternal {\n     }\n \n     @Warning(value = INTERNAL_USE_ONLY_WARNING)\n-    public static List<ClientSideRequestStatistics> getClientSideRequestStatics(CosmosDiagnostics cosmosDiagnostics) {\n+    public static List<ClientSideRequestStatistics> getClientSideRequestStatisticsList(CosmosDiagnostics cosmosDiagnostics) {\n         //Used only during aggregations like Aggregate/Orderby/Groupby which may contain clientSideStats in\n         //feedResponseDiagnostics. So we need to add from both the places\n         List<ClientSideRequestStatistics> clientSideRequestStatisticsList = new ArrayList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDY5NzQyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r550697429", "bodyText": "Do we need this list be thread safe, multiple threads could update the diagnostics from multiple responses ?", "author": "simplynaveen20", "createdAt": "2020-12-31T22:03:20Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/FeedResponseDiagnostics.java", "diffHunk": "@@ -5,23 +5,31 @@\n \n import com.azure.cosmos.implementation.query.QueryInfo;\n import com.azure.cosmos.implementation.query.metrics.QueryMetricsTextWriter;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Map;\n \n /**\n  * The type Feed response diagnostics.\n  */\n-public final class FeedResponseDiagnostics {\n+public class FeedResponseDiagnostics {\n \n     private final static String EQUALS = \"=\";\n     private final static String QUERY_PLAN = \"QueryPlan\";\n     private final static String SPACE = \" \";\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FeedResponseDiagnostics.class);\n     private Map<String, QueryMetrics> queryMetricsMap;\n     private QueryInfo.QueryPlanDiagnosticsContext diagnosticsContext;\n+    private List<ClientSideRequestStatistics> clientSideRequestStatisticsList;", "originalCommit": "6251a2665dbcd7780d41a5a0fbbce4be61b1eb9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ3MjQxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r551472414", "bodyText": "+1", "author": "moderakh", "createdAt": "2021-01-04T17:54:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDY5NzQyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzNDQzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r551534437", "bodyText": "I dont see a specific case of this getting into thread related issues yet. Also we are just doing an add operation and generally thread related issues can be seen when we are iterating or add/remove operations. I would move it to a sync list if I come across any issues.", "author": "mbhaskar", "createdAt": "2021-01-04T19:55:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDY5NzQyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzOTQwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r551539408", "bodyText": "Are we planning to run perf , because we cant be sure till we run some load. Without 100% surety it will be risky, as we have seen similar issue around diagnostics lists.", "author": "simplynaveen20", "createdAt": "2021-01-04T20:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDY5NzQyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU0MzU0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r551543541", "bodyText": "Just for the record, the querymetricsMap thats currently being used in FeedResponseDiagnostics already is just a Map and not thread safe and did'nt lead to any issues and IMHO we would have run perf tests already on that?\nEither ways I would run perf test on this anyway for the perf reasons, and that would expose these and will fix accordingly", "author": "mbhaskar", "createdAt": "2021-01-04T20:14:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDY5NzQyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE4MzgxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r553183816", "bodyText": "Tried multiple tests but didnt encounter thread issues on the list. But due to some known issues around existing lists which were eventually converted to be synchronized, updated this list to be synchronized.", "author": "mbhaskar", "createdAt": "2021-01-07T08:46:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDY5NzQyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "03bcd6498cc231129abc0a0e281a254843abdac2", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/FeedResponseDiagnostics.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/FeedResponseDiagnostics.java\nindex b27396ae1c4..002d94553c6 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/FeedResponseDiagnostics.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/FeedResponseDiagnostics.java\n\n@@ -11,6 +11,7 @@ import org.slf4j.LoggerFactory;\n \n import java.time.Duration;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ3Mjg5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r551472897", "bodyText": "don't do string concat for e\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOGGER.error(\"Error while parsing diagnostics \" + e);\n          \n          \n            \n                            LOGGER.error(\"Error while parsing diagnostics\", e);", "author": "moderakh", "createdAt": "2021-01-04T17:55:32Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/FeedResponseDiagnostics.java", "diffHunk": "@@ -65,10 +73,33 @@ public String toString() {\n                 .append(value.toString())\n                 .append(System.lineSeparator()));\n         }\n+        for (ClientSideRequestStatistics statistics : clientSideRequestStatisticsList) {\n+            try {\n+                stringBuilder\n+                    .append(Utils.getSimpleObjectMapper().writeValueAsString(statistics));\n+            } catch (JsonProcessingException e) {\n+                LOGGER.error(\"Error while parsing diagnostics \" + e);", "originalCommit": "6251a2665dbcd7780d41a5a0fbbce4be61b1eb9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDEwMjY5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r554102692", "bodyText": "Done", "author": "mbhaskar", "createdAt": "2021-01-08T17:57:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ3Mjg5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "03bcd6498cc231129abc0a0e281a254843abdac2", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/FeedResponseDiagnostics.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/FeedResponseDiagnostics.java\nindex b27396ae1c4..002d94553c6 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/FeedResponseDiagnostics.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/FeedResponseDiagnostics.java\n\n@@ -73,13 +74,11 @@ public class FeedResponseDiagnostics {\n                 .append(value.toString())\n                 .append(System.lineSeparator()));\n         }\n-        for (ClientSideRequestStatistics statistics : clientSideRequestStatisticsList) {\n-            try {\n-                stringBuilder\n-                    .append(Utils.getSimpleObjectMapper().writeValueAsString(statistics));\n-            } catch (JsonProcessingException e) {\n-                LOGGER.error(\"Error while parsing diagnostics \" + e);\n-            }\n+        try {\n+            stringBuilder\n+                .append(Utils.getSimpleObjectMapper().writeValueAsString(clientSideRequestStatisticsList));\n+        } catch (JsonProcessingException e) {\n+            LOGGER.error(\"Error while parsing diagnostics \", e);\n         }\n \n         return stringBuilder.toString();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzODA5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r551538090", "bodyText": "This is very limited for validation.\nthis doesn't really structurally validates what is in the diagnostics. please take a look at CilentConfigDiagnosticsTest in some cases it is worth fully validate what goes in the diagnostics. the number of entries, order, etc.", "author": "moderakh", "createdAt": "2021-01-04T20:02:56Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java", "diffHunk": "@@ -321,6 +322,117 @@ public void queryMetrics(String query, Boolean qmEnabled) {\n         }\n     }\n \n+    @Test(groups = {\"simple\"}, dataProvider = \"query\", timeOut = TIMEOUT)\n+    public void queryDiagnosticsDirectMode(String query, Boolean qmEnabled) {\n+        CosmosClient testDirectClient = new CosmosClientBuilder()\n+                                            .endpoint(TestConfigurations.HOST)\n+                                            .key(TestConfigurations.MASTER_KEY)\n+                                            .contentResponseOnWriteEnabled(true)\n+                                            .directMode()\n+                                            .buildClient();\n+        CosmosQueryRequestOptions options = new CosmosQueryRequestOptions();\n+\n+        CosmosContainer cosmosContainer = testDirectClient.getDatabase(cosmosAsyncContainer.getDatabase().getId())\n+                                              .getContainer(cosmosAsyncContainer.getId());\n+        List<String> itemIdList = new ArrayList<>();\n+        for (int i = 0; i < 100; i++) {\n+            InternalObjectNode internalObjectNode = getInternalObjectNode();\n+            CosmosItemResponse<InternalObjectNode> createResponse = cosmosContainer.createItem(internalObjectNode);\n+            if (i % 20 == 0) {\n+                itemIdList.add(internalObjectNode.getId());\n+            }\n+        }\n+        boolean qroupByFirstResponse = true;\n+        if (qmEnabled != null) {\n+            options.setQueryMetricsEnabled(qmEnabled);\n+        }\n+        Iterator<FeedResponse<InternalObjectNode>> iterator = cosmosContainer\n+                                                                  .queryItems(query, options, InternalObjectNode.class)\n+                                                                  .iterableByPage()\n+                                                                  .iterator();\n+        assertThat(iterator.hasNext()).isTrue();\n+\n+        while (iterator.hasNext()) {\n+            FeedResponse<InternalObjectNode> feedResponse = iterator.next();\n+            String queryDiagnostics = feedResponse.getCosmosDiagnostics().toString();\n+            assertThat(feedResponse.getResults().size()).isEqualTo(0);\n+            if (!query.contains(\"group by\") || qroupByFirstResponse) { // TODO https://github\n+                if (qmEnabled) {\n+                    validateQueryDiagnostics(queryDiagnostics, qmEnabled, true);\n+                    validateDirectModeQueryDiagnostics(queryDiagnostics);\n+                    validateTransportRequestTimelineDirect(queryDiagnostics);\n+                }\n+                if (query.contains(\"group by\")) {\n+                    qroupByFirstResponse = false;\n+                }\n+            }\n+        }\n+    }\n+\n+    private void validateDirectModeQueryDiagnostics(String diagnostics) {\n+        assertThat(diagnostics).contains(\"\\\"connectionMode\\\":\\\"DIRECT\\\"\");\n+        assertThat(diagnostics).contains(\"supplementalResponseStatisticsList\");\n+        assertThat(diagnostics).contains(\"\\\"gatewayStatistics\\\":null\");\n+        assertThat(diagnostics).contains(\"addressResolutionStatistics\");\n+        assertThat(diagnostics).contains(\"\\\"userAgent\\\":\\\"\" + Utils.getUserAgent() + \"\\\"\");", "originalCommit": "6251a2665dbcd7780d41a5a0fbbce4be61b1eb9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE4NDgzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r553184839", "bodyText": "Individual request diagnostics are already being validated as part of store diagnostic tests. Additional validation on query with counts etc is bit more involved as that depends on current consistency, partition count etc. I will try to add those eventually", "author": "mbhaskar", "createdAt": "2021-01-07T08:48:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUzODA5MA=="}], "type": "inlineReview", "revised_code": {"commit": "ca6d04acb56cb6ccd71b2a328d78b3b59600f915", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java\nindex 90463c19661..586bdff4183 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosDiagnosticsTest.java\n\n@@ -357,11 +357,9 @@ public class CosmosDiagnosticsTest extends TestSuiteBase {\n             String queryDiagnostics = feedResponse.getCosmosDiagnostics().toString();\n             assertThat(feedResponse.getResults().size()).isEqualTo(0);\n             if (!query.contains(\"group by\") || qroupByFirstResponse) { // TODO https://github\n-                if (qmEnabled) {\n-                    validateQueryDiagnostics(queryDiagnostics, qmEnabled, true);\n-                    validateDirectModeQueryDiagnostics(queryDiagnostics);\n-                    validateTransportRequestTimelineDirect(queryDiagnostics);\n-                }\n+                validateQueryDiagnostics(queryDiagnostics, qmEnabled, true);\n+                validateDirectModeQueryDiagnostics(queryDiagnostics);\n+                validateTransportRequestTimelineDirect(queryDiagnostics);\n                 if (query.contains(\"group by\")) {\n                     qroupByFirstResponse = false;\n                 }\n"}}, {"oid": "03bcd6498cc231129abc0a0e281a254843abdac2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/03bcd6498cc231129abc0a0e281a254843abdac2", "message": "PR comments and minor improvements", "committedDate": "2021-01-07T08:05:29Z", "type": "commit"}, {"oid": "ca6d04acb56cb6ccd71b2a328d78b3b59600f915", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ca6d04acb56cb6ccd71b2a328d78b3b59600f915", "message": "Fixing tests", "committedDate": "2021-01-07T18:53:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUyNjM2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r553526368", "bodyText": "Nit: unused import ?Non blocker , if you send another iteration", "author": "simplynaveen20", "createdAt": "2021-01-07T19:08:11Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -41,6 +41,7 @@\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n \n+import java.util.Collections;", "originalCommit": "ca6d04acb56cb6ccd71b2a328d78b3b59600f915", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjI2OTk0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18404#discussion_r562269946", "bodyText": "Done", "author": "mbhaskar", "createdAt": "2021-01-21T23:42:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUyNjM2OA=="}], "type": "inlineReview", "revised_code": {"commit": "0ed4d23a0e5daec7e081125a681cbf56f4d262e5", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\nindex 2ecfadc0991..686b9ba9815 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\n\n@@ -48,6 +48,7 @@ import java.util.stream.Collectors;\n \n import static com.azure.core.util.FluxUtil.withContext;\n import static com.azure.cosmos.implementation.Utils.setContinuationTokenAndMaxItemCount;\n+import static com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull;\n \n /**\n  * Provides methods for reading, deleting, and replacing existing Containers.\n"}}, {"oid": "0ed4d23a0e5daec7e081125a681cbf56f4d262e5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0ed4d23a0e5daec7e081125a681cbf56f4d262e5", "message": "Merge branch 'upstream-master' into query_diagnostics", "committedDate": "2021-01-13T03:15:45Z", "type": "commit"}, {"oid": "769f4fc15390b7a7f1946e16e40a7ff75d8cbb6e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/769f4fc15390b7a7f1946e16e40a7ff75d8cbb6e", "message": "Disabling query diag tests to debug CI.", "committedDate": "2021-01-21T17:32:51Z", "type": "commit"}, {"oid": "16ea656d272bcf5221bde79d4fa9cb61f7c4699f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/16ea656d272bcf5221bde79d4fa9cb61f7c4699f", "message": "Enabling diagnostics tests with increased timeout", "committedDate": "2021-01-21T23:38:15Z", "type": "commit"}, {"oid": "837c9fa8b78a8b57958517e49a7573545f440814", "url": "https://github.com/Azure/azure-sdk-for-java/commit/837c9fa8b78a8b57958517e49a7573545f440814", "message": "Removing unused import", "committedDate": "2021-01-21T23:40:54Z", "type": "commit"}, {"oid": "0b8098dd3ac363bf661ca851aed0a7273a659d86", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0b8098dd3ac363bf661ca851aed0a7273a659d86", "message": "Merge remote-tracking branch 'upstream/master' into query_diagnostics\n\n# Conflicts:\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncDatabase.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctDocumentQueryExecutionContext.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/GroupByDocumentQueryExecutionContext.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/OrderByDocumentQueryExecutionContext.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ParallelDocumentQueryExecutionContext.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/SkipDocumentQueryExecutionContext.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/TopDocumentQueryExecutionContext.java\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/FeedResponse.java", "committedDate": "2021-01-26T21:05:51Z", "type": "commit"}, {"oid": "95bdbff645cc15926023466a3825343d7016b4d6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/95bdbff645cc15926023466a3825343d7016b4d6", "message": "Merging master\nRefactoring existing test and disabling redundant tests", "committedDate": "2021-01-27T00:51:55Z", "type": "commit"}, {"oid": "e68b413efda4433ab89ad199f7dd64afb124efe8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e68b413efda4433ab89ad199f7dd64afb124efe8", "message": "Merging redundant tests to reduce load.", "committedDate": "2021-02-04T06:18:14Z", "type": "commit"}, {"oid": "b097c7dde76e9c57eb01218599ea39389986fadc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b097c7dde76e9c57eb01218599ea39389986fadc", "message": "Disabling changeFeed_fromBeginning_withFeedRangeFiltering. This needs to be investigated eventually", "committedDate": "2021-02-04T20:57:46Z", "type": "commit"}]}