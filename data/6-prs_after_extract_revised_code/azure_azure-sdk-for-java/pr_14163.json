{"pr_number": 14163, "pr_title": "Performance: Optimization for master-key authentication", "pr_createdAt": "2020-08-17T02:46:56Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14163", "timeline": [{"oid": "98f73f36fd0cae76f148825c993a8f16e176429d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/98f73f36fd0cae76f148825c993a8f16e176429d", "message": "BasuAuthorizationProvider credential update/refresh bug fix", "committedDate": "2020-08-17T01:14:00Z", "type": "commit"}, {"oid": "2fa6e516e9b0013eaf44d172dfb127dcf2924dc2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2fa6e516e9b0013eaf44d172dfb127dcf2924dc2", "message": "BaseAuthCredential authorization performance fix.", "committedDate": "2020-08-17T01:29:25Z", "type": "commit"}, {"oid": "9575951bccac413ff3a5eb5a97e6a39efdead62a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9575951bccac413ff3a5eb5a97e6a39efdead62a", "message": "Class code doc refresh", "committedDate": "2020-08-17T01:31:30Z", "type": "commit"}, {"oid": "80e7385faea38c023a4ab0048de9bd0e6e6b1ccb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/80e7385faea38c023a4ab0048de9bd0e6e6b1ccb", "message": "Always fall back the cached instance part.", "committedDate": "2020-08-17T01:33:06Z", "type": "commit"}, {"oid": "2a8acad4d05012f45c4f78c388eda34bb2a49eed", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2a8acad4d05012f45c4f78c388eda34bb2a49eed", "message": "Modeled as a new MacPooler", "committedDate": "2020-08-17T02:44:27Z", "type": "commit"}, {"oid": "922278a3a7d7c51dfd3ca9b6a8352ee3d16e51c4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/922278a3a7d7c51dfd3ca9b6a8352ee3d16e51c4", "message": "BaseAuthCredential authorization performance fix.", "committedDate": "2020-08-17T04:37:39Z", "type": "commit"}, {"oid": "c175551e28eebb2a57f0fadafbbb3cf8db801bae", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c175551e28eebb2a57f0fadafbbb3cf8db801bae", "message": "Class code doc refresh", "committedDate": "2020-08-17T04:37:39Z", "type": "commit"}, {"oid": "f39b442723afb82dd6cae724409e93667c43dff7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f39b442723afb82dd6cae724409e93667c43dff7", "message": "Modeled as a new MacPooler", "committedDate": "2020-08-17T04:37:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyOTYzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14163#discussion_r471229633", "bodyText": "SpotBugs cribbing, @kushagraThapar, @moderakh how to suppress this warning?", "author": "kirankumarkolli", "createdAt": "2020-08-17T04:47:39Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/BaseAuthorizationTokenProvider.java", "diffHunk": "@@ -237,38 +239,44 @@ private String generateKeyAuthorizationSignatureNew(RequestVerb verb, String res\n \n         String authResourceId = getAuthorizationResourceIdOrFullName(resourceType, resourceIdValue);\n         String payLoad = generateMessagePayload(verb, authResourceId, resourceType, headers);\n-        Mac mac = this.getMacInstance();\n-        byte[] digest = mac.doFinal(payLoad.getBytes(StandardCharsets.UTF_8));\n-        String authorizationToken = Utils.encodeBase64String(digest);\n-        String authtoken = AUTH_PREFIX + authorizationToken;\n-        return HttpUtils.urlEncode(authtoken);\n+\n+        MacPool.ReUsableMac macInstance = this.getReUseableMacInstance();\n+\n+        try {\n+            byte[] digest = macInstance.get().doFinal(payLoad.getBytes(StandardCharsets.UTF_8));\n+            String authorizationToken = Utils.encodeBase64String(digest);\n+            String authtoken = AUTH_PREFIX + authorizationToken;\n+            return HttpUtils.urlEncode(authtoken);\n+        }\n+        finally {\n+            macInstance.close();\n+        }\n     }\n \n-    private Mac getMacInstance() {\n-        int masterKeyLatestHashCode = this.credential.getKey().hashCode();\n-\n-        //  Master key has changed, or this is the first time we are getting mac instance\n-        if (masterKeyLatestHashCode != this.masterKeyHashCode) {\n-            byte[] masterKeyBytes = this.credential.getKey().getBytes(StandardCharsets.UTF_8);\n-            byte[] masterKeyDecodedBytes = Utils.Base64Decoder.decode(masterKeyBytes);\n-            SecretKey signingKey = new SecretKeySpec(masterKeyDecodedBytes, \"HMACSHA256\");\n-            try {\n-                Mac macInstance = Mac.getInstance(\"HMACSHA256\");\n-                macInstance.init(signingKey);\n-                //  Update the master key hash code\n-                this.masterKeyHashCode = masterKeyLatestHashCode;\n-                return macInstance;\n-            } catch (NoSuchAlgorithmException | InvalidKeyException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        } else {\n-            //  Master key hasn't changed, return the cloned mac instance\n-            try {\n-                return (Mac)this.macInstance.clone();\n-            } catch (CloneNotSupportedException e) {\n-                throw new IllegalStateException(e);\n+    private MacPool.ReUsableMac getReUseableMacInstance() {\n+\n+        // Java == operator is reference equals not content\n+        // leveraging reference comparison avoid hash computation\n+        if (this.currentCredentialKey != this.credential.getKey()) {", "originalCommit": "2a8acad4d05012f45c4f78c388eda34bb2a49eed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgzMTI4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14163#discussion_r471831281", "bodyText": "@kirankumarkolli  - you need to update this file with the proper spotbug issue which is failing here : https://github.com/Azure/azure-sdk-for-java/blob/master/eng/code-quality-reports/src/main/resources/spotbugs/spotbugs-exclude.xml", "author": "kushagraThapar", "createdAt": "2020-08-17T23:36:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyOTYzMw=="}], "type": "inlineReview", "revised_code": {"commit": "50c2f1c66b50127eb853e81600386db60d3ebec7", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/BaseAuthorizationTokenProvider.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/BaseAuthorizationTokenProvider.java\nindex 7011d634cf4..7ac6ab50999 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/BaseAuthorizationTokenProvider.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/BaseAuthorizationTokenProvider.java\n\n@@ -199,76 +196,23 @@ public class BaseAuthorizationTokenProvider implements AuthorizationTokenProvide\n \n         return resourceToken;\n     }\n-    public String generateKeyAuthorizationSignature(RequestVerb verb, URI uri, Map<String, String> headers) {\n-        if (verb == null) {\n-            throw new IllegalArgumentException(String.format(RMResources.StringArgumentNullOrEmpty, \"verb\"));\n-        }\n-\n-        if (uri == null) {\n-            throw new IllegalArgumentException(\"uri\");\n-        }\n-\n-        if (headers == null) {\n-            throw new IllegalArgumentException(\"headers\");\n-        }\n-        PathInfo pathInfo = new PathInfo(false, StringUtils.EMPTY, StringUtils.EMPTY, false);\n-        getResourceTypeAndIdOrFullName(uri, pathInfo);\n-        return generateKeyAuthorizationSignatureNew(verb, pathInfo.resourceIdOrFullName, pathInfo.resourcePath,\n-                headers);\n-    }\n \n-    private String generateKeyAuthorizationSignatureNew(RequestVerb verb, String resourceIdValue, String resourceType,\n-                                                        Map<String, String> headers) {\n-        if (verb == null) {\n-            throw new IllegalArgumentException(String.format(RMResources.StringArgumentNullOrEmpty, \"verb\"));\n-        }\n+    private Mac getMacInstance() {\n+        int masterKeyLatestHashCode = this.credential.getKey().hashCode();\n \n-        if (resourceType == null) {\n-            throw new IllegalArgumentException(String.format(RMResources.StringArgumentNullOrEmpty, \"resourceType\")); // can be empty\n-        }\n-\n-        if (headers == null) {\n-            throw new IllegalArgumentException(\"headers\");\n-        }\n-        // Order of the values included in the message payload is a protocol that\n-        // clients/BE need to follow exactly.\n-        // More headers can be added in the future.\n-        // If any of the value is optional, it should still have the placeholder value\n-        // of \"\"\n-        // OperationType -> ResourceType -> ResourceId/OwnerId -> XDate -> Date\n-\n-        String authResourceId = getAuthorizationResourceIdOrFullName(resourceType, resourceIdValue);\n-        String payLoad = generateMessagePayload(verb, authResourceId, resourceType, headers);\n-\n-        MacPool.ReUsableMac macInstance = this.getReUseableMacInstance();\n-\n-        try {\n-            byte[] digest = macInstance.get().doFinal(payLoad.getBytes(StandardCharsets.UTF_8));\n-            String authorizationToken = Utils.encodeBase64String(digest);\n-            String authtoken = AUTH_PREFIX + authorizationToken;\n-            return HttpUtils.urlEncode(authtoken);\n-        }\n-        finally {\n-            macInstance.close();\n-        }\n-    }\n-\n-    private MacPool.ReUsableMac getReUseableMacInstance() {\n-\n-        // Java == operator is reference equals not content\n-        // leveraging reference comparison avoid hash computation\n-        if (this.currentCredentialKey != this.credential.getKey()) {\n+        //  Master key has changed, or this is the first time we are getting mac instance\n+        if (masterKeyLatestHashCode != this.masterKeyHashCode) {\n             synchronized (this.credential) {\n-                if (this.currentCredentialKey != this.credential.getKey()) {\n+                if (masterKeyLatestHashCode != this.masterKeyHashCode) {\n                     byte[] masterKeyBytes = this.credential.getKey().getBytes(StandardCharsets.UTF_8);\n                     byte[] masterKeyDecodedBytes = Utils.Base64Decoder.decode(masterKeyBytes);\n                     SecretKey signingKey = new SecretKeySpec(masterKeyDecodedBytes, \"HMACSHA256\");\n                     try {\n                         Mac macInstance = Mac.getInstance(\"HMACSHA256\");\n                         macInstance.init(signingKey);\n-\n-                        this.currentCredentialKey = this.credential.getKey();\n-                        this.macPool = new MacPool(macInstance);\n+                        //  Update the master key hash code\n+                        this.masterKeyHashCode = masterKeyLatestHashCode;\n+                        this.macInstance = macInstance;\n                     } catch (NoSuchAlgorithmException | InvalidKeyException e) {\n                         throw new IllegalStateException(e);\n                     }\n"}}, {"oid": "50c2f1c66b50127eb853e81600386db60d3ebec7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/50c2f1c66b50127eb853e81600386db60d3ebec7", "message": "Merge branch 'master' into users/kirankk/credential_change_fix", "committedDate": "2020-08-17T18:49:55Z", "type": "commit"}, {"oid": "30ec84de60d1c1e0ce3940fd94914be7c2ed68cb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/30ec84de60d1c1e0ce3940fd94914be7c2ed68cb", "message": "Little more refractoring", "committedDate": "2020-08-19T09:18:15Z", "type": "commit"}, {"oid": "ca56f96945f53384c856c81d08519694754251c1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ca56f96945f53384c856c81d08519694754251c1", "message": "Merge branch 'master' into users/kirankk/credential_change_fix", "committedDate": "2020-08-19T09:19:01Z", "type": "commit"}, {"oid": "bec6155818c346bd21fee62987a891e06c7c015d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bec6155818c346bd21fee62987a891e06c7c015d", "message": "Merge branch 'users/kirankk/base_auth_perf_fixes' of https://github.com/Azure/azure-sdk-for-java into users/kirankk/base_auth_perf_fixes", "committedDate": "2020-08-19T09:23:31Z", "type": "commit"}, {"oid": "3a861ab08c581c1e39be2660c74943af89c349dd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3a861ab08c581c1e39be2660c74943af89c349dd", "message": "Merge branch 'users/kirankk/credential_change_fix' into users/kirankk/base_auth_perf_fixes\n\n# Conflicts:\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/BaseAuthorizationTokenProvider.java", "committedDate": "2020-08-19T09:31:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5NzIxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14163#discussion_r473197215", "bodyText": "Using MacPool is a very nice change.\nhowever now mac.clone() overhead is replaced by a ConcurrentLinkedQueue synchrnozation lock overhead. most likely better perf.\non the perf comparison do we know how much of perf gain we have from this?\nYou can do micro-benchmarking using jmh (just for the authorization part) I have the jmh project template here:\nhttps://github.com/moderakh/azure-cosmosdb-benchmark/tree/master/jmh", "author": "moderakh", "createdAt": "2020-08-19T17:17:14Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/MacPool.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.implementation;\n+\n+import javax.crypto.Mac;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+class MacPool {\n+    final Mac macInstance;\n+    final ConcurrentLinkedQueue<Mac> pool;", "originalCommit": "3a861ab08c581c1e39be2660c74943af89c349dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwMjY0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14163#discussion_r473202644", "bodyText": "Won't this benchmark needs package to be published?", "author": "kirankumarkolli", "createdAt": "2020-08-19T17:26:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5NzIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwODc2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14163#discussion_r473208768", "bodyText": "no, you don't need to publish the package. There are two options:\nfirst option)\non the java SDK repo install the package in your local maven repo using following command:\nmvn -e  -Dgpg.skip -Dmaven.javadoc.skip=true -Dspotbugs.skip=true  -Dcheckstyle.skip=true  -Drevapi.skip=true  -DskipTests -pl ,com.azure:azure-cosmos  -am clean install\nand in the jmh project just update the pom to use the latest version installed in your local maven repo.\nexample for this option in jmh project:\nhttps://github.com/moderakh/azure-cosmosdb-benchmark/blob/master/jmh/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdTokenStreamJMH.java\nsecond option)\nif the area to be tested is small (just copy that code (e.g, MacPool) to jmh project itself and micro benchmark just the copied code.\nexample for this option:\ncopied code:\nhttps://github.com/moderakh/azure-cosmosdb-benchmark/blob/master/jmh/src/main/java/moderakh/ConsistencyLevel.java\nmicro-benchmark test:\nhttps://github.com/moderakh/azure-cosmosdb-benchmark/blob/master/jmh/src/main/java/moderakh/ExpandableStringEnumJMH.java", "author": "moderakh", "createdAt": "2020-08-19T17:36:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5NzIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1MTQxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14163#discussion_r473251418", "bodyText": "Based on offline discussion resolving this comment.", "author": "kirankumarkolli", "createdAt": "2020-08-19T18:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5NzIxNQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "e00efe1667aea231a31f76abbec00bc17f4448c1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e00efe1667aea231a31f76abbec00bc17f4448c1", "message": "Merge branch 'master' into users/kirankk/base_auth_perf_fixes\n\n# Conflicts:\n#\tsdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/BaseAuthorizationTokenProvider.java", "committedDate": "2020-08-19T17:21:28Z", "type": "commit"}, {"oid": "dbf6b94558290e6edb560108ba81524a8ae39032", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dbf6b94558290e6edb560108ba81524a8ae39032", "message": "Excluding spot-bug", "committedDate": "2020-08-19T17:22:46Z", "type": "commit"}]}