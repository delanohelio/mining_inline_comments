{"pr_number": 7596, "pr_title": "[Feature] To be able to rotate subscription key", "pr_createdAt": "2020-01-22T00:36:24Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/7596", "timeline": [{"oid": "624948da9b4f899e557ce865675c4ae400634f22", "url": "https://github.com/Azure/azure-sdk-for-java/commit/624948da9b4f899e557ce865675c4ae400634f22", "message": "Subscription Key Credential objects", "committedDate": "2020-01-22T00:29:18Z", "type": "commit"}, {"oid": "9755bc7ea74ce6cecbe3539f07a0ae43294d616f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9755bc7ea74ce6cecbe3539f07a0ae43294d616f", "message": "one used variable can be refactored", "committedDate": "2020-01-22T01:02:11Z", "type": "commit"}, {"oid": "812ccd3a5b5a320cc814b61d1b7a9eddffb2cb11", "url": "https://github.com/Azure/azure-sdk-for-java/commit/812ccd3a5b5a320cc814b61d1b7a9eddffb2cb11", "message": "readme sample reformat", "committedDate": "2020-01-22T01:32:10Z", "type": "commit"}, {"oid": "559066ce393a4d92ab09c53e2f0a6080ea4779ba", "url": "https://github.com/Azure/azure-sdk-for-java/commit/559066ce393a4d92ab09c53e2f0a6080ea4779ba", "message": "reformat", "committedDate": "2020-01-22T05:08:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwNTU5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r369805590", "bodyText": "Don't think returning TextAnalyticsSubscriptionKeyCredential is necessary here. Returning void should be sufficient.", "author": "srnagar", "createdAt": "2020-01-22T21:11:36Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+/**\n+ * Subscription key credential that shared across cognitive services, or restrict to single service.\n+ */\n+public final class TextAnalyticsSubscriptionKeyCredential {\n+    private String subscriptionKey;\n+\n+    /**\n+     * Creates a {@code SharedKeyCredential} model that describes subscription key.\n+     *\n+     * @param subscriptionKey the subscription key\n+     */\n+    public TextAnalyticsSubscriptionKeyCredential(String subscriptionKey) {\n+        this.subscriptionKey = subscriptionKey;\n+    }\n+\n+    /**\n+     * Get the subscription key value.\n+     *\n+     * @return the subscription key value\n+     */\n+    public String getSubscriptionKey() {\n+        return this.subscriptionKey;\n+    }\n+\n+    /**\n+     * Set the subscription key value.\n+     *\n+     * @param subscriptionKey the subscription key\n+     * @return the {@link TextAnalyticsSubscriptionKeyCredential} itself\n+     */\n+    public TextAnalyticsSubscriptionKeyCredential updateCredential(String subscriptionKey) {", "originalCommit": "559066ce393a4d92ab09c53e2f0a6080ea4779ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwNjYzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r369806632", "bodyText": "I am not sure if we agreed on the terminology here in previous arch-board review - there were several proposals refresh, update, set, rotate etc.", "author": "srnagar", "createdAt": "2020-01-22T21:14:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwNTU5MA=="}], "type": "inlineReview", "revised_code": {"commit": "eb3befd83b70df0fbbe513ba0b3c8a9af69f7293", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\nindex a614ec7ed6..bdc0e035ff 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\n\n@@ -3,6 +3,8 @@\n \n package com.azure.ai.textanalytics.models;\n \n+import java.util.Objects;\n+\n /**\n  * Subscription key credential that shared across cognitive services, or restrict to single service.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwNzE4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r369807185", "bodyText": "Also, when is this method called? Is this method expected to be called by the user when they want to update the key? If so, it would be good to include in samples and code snippets.", "author": "srnagar", "createdAt": "2020-01-22T21:15:32Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+/**\n+ * Subscription key credential that shared across cognitive services, or restrict to single service.\n+ */\n+public final class TextAnalyticsSubscriptionKeyCredential {\n+    private String subscriptionKey;\n+\n+    /**\n+     * Creates a {@code SharedKeyCredential} model that describes subscription key.\n+     *\n+     * @param subscriptionKey the subscription key\n+     */\n+    public TextAnalyticsSubscriptionKeyCredential(String subscriptionKey) {\n+        this.subscriptionKey = subscriptionKey;\n+    }\n+\n+    /**\n+     * Get the subscription key value.\n+     *\n+     * @return the subscription key value\n+     */\n+    public String getSubscriptionKey() {\n+        return this.subscriptionKey;\n+    }\n+\n+    /**\n+     * Set the subscription key value.\n+     *\n+     * @param subscriptionKey the subscription key\n+     * @return the {@link TextAnalyticsSubscriptionKeyCredential} itself\n+     */\n+    public TextAnalyticsSubscriptionKeyCredential updateCredential(String subscriptionKey) {", "originalCommit": "559066ce393a4d92ab09c53e2f0a6080ea4779ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxNTgzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r369815833", "bodyText": "I will add the samples and snippet.", "author": "mssfang", "createdAt": "2020-01-22T21:34:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwNzE4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "eb3befd83b70df0fbbe513ba0b3c8a9af69f7293", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\nindex a614ec7ed6..bdc0e035ff 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\n\n@@ -3,6 +3,8 @@\n \n package com.azure.ai.textanalytics.models;\n \n+import java.util.Objects;\n+\n /**\n  * Subscription key credential that shared across cognitive services, or restrict to single service.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwODg4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r369808884", "bodyText": "Is this applicable for all cognitive services? If so, is the plan to duplicate this credential in all cognitive services modules or would we create a common module like storage has to put the common stuff there?", "author": "srnagar", "createdAt": "2020-01-22T21:19:20Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+/**\n+ * Subscription key credential that shared across cognitive services, or restrict to single service.", "originalCommit": "559066ce393a4d92ab09c53e2f0a6080ea4779ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxNjY5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r369816693", "bodyText": "We had a discussion about having a common module. We decided not to have a common module now because currently we only have one service implemented. We don't really know the use case.", "author": "mssfang", "createdAt": "2020-01-22T21:36:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwODg4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxOTc1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r371019756", "bodyText": "@mssfang is right - this is still an open question.  We're starting to look at FormRecognizer now, though, so we'll start driving the \"where would we put a common Cognitive credential\" with the architects.", "author": "annelo-msft", "createdAt": "2020-01-26T18:24:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwODg4NA=="}], "type": "inlineReview", "revised_code": {"commit": "eb3befd83b70df0fbbe513ba0b3c8a9af69f7293", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\nindex a614ec7ed6..bdc0e035ff 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\n\n@@ -3,6 +3,8 @@\n \n package com.azure.ai.textanalytics.models;\n \n+import java.util.Objects;\n+\n /**\n  * Subscription key credential that shared across cognitive services, or restrict to single service.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxMTAzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r369811036", "bodyText": "Can subscriptionKey be null or empty? If not, you may want to check for these conditions here and in the constructor.", "author": "srnagar", "createdAt": "2020-01-22T21:23:56Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+/**\n+ * Subscription key credential that shared across cognitive services, or restrict to single service.\n+ */\n+public final class TextAnalyticsSubscriptionKeyCredential {\n+    private String subscriptionKey;\n+\n+    /**\n+     * Creates a {@code SharedKeyCredential} model that describes subscription key.\n+     *\n+     * @param subscriptionKey the subscription key\n+     */\n+    public TextAnalyticsSubscriptionKeyCredential(String subscriptionKey) {\n+        this.subscriptionKey = subscriptionKey;\n+    }\n+\n+    /**\n+     * Get the subscription key value.\n+     *\n+     * @return the subscription key value\n+     */\n+    public String getSubscriptionKey() {\n+        return this.subscriptionKey;\n+    }\n+\n+    /**\n+     * Set the subscription key value.\n+     *\n+     * @param subscriptionKey the subscription key\n+     * @return the {@link TextAnalyticsSubscriptionKeyCredential} itself\n+     */\n+    public TextAnalyticsSubscriptionKeyCredential updateCredential(String subscriptionKey) {\n+        this.subscriptionKey = subscriptionKey;", "originalCommit": "559066ce393a4d92ab09c53e2f0a6080ea4779ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxNjgxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r369816817", "bodyText": "Agreed. Will add the check", "author": "mssfang", "createdAt": "2020-01-22T21:36:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxMTAzNg=="}], "type": "inlineReview", "revised_code": {"commit": "eb3befd83b70df0fbbe513ba0b3c8a9af69f7293", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\nindex a614ec7ed6..bdc0e035ff 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\n\n@@ -3,6 +3,8 @@\n \n package com.azure.ai.textanalytics.models;\n \n+import java.util.Objects;\n+\n /**\n  * Subscription key credential that shared across cognitive services, or restrict to single service.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxODY1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r369818650", "bodyText": "Is there a reason why we need this?\nAlthough the guidelines are not done, during the meeting they agreed that\n\nSHOULD NOT define public properties or fields which allow users to access the authentication data directly.", "author": "maririos", "createdAt": "2020-01-22T21:40:44Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+/**\n+ * Subscription key credential that shared across cognitive services, or restrict to single service.\n+ */\n+public final class TextAnalyticsSubscriptionKeyCredential {\n+    private String subscriptionKey;\n+\n+    /**\n+     * Creates a {@code SharedKeyCredential} model that describes subscription key.\n+     *\n+     * @param subscriptionKey the subscription key\n+     */\n+    public TextAnalyticsSubscriptionKeyCredential(String subscriptionKey) {\n+        this.subscriptionKey = subscriptionKey;\n+    }\n+\n+    /**\n+     * Get the subscription key value.\n+     *\n+     * @return the subscription key value\n+     */\n+    public String getSubscriptionKey() {", "originalCommit": "559066ce393a4d92ab09c53e2f0a6080ea4779ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgzNjc4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r369836785", "bodyText": "Yes. the property or field \"private String subscriptionKey\" is a private. User have to invoke the setter updateCredential to update the authentication data.", "author": "mssfang", "createdAt": "2020-01-22T22:20:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxODY1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MjE5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r369862190", "bodyText": "thanks for clarifying! this is me not knowing Java :P", "author": "maririos", "createdAt": "2020-01-22T23:29:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxODY1MA=="}], "type": "inlineReview", "revised_code": {"commit": "eb3befd83b70df0fbbe513ba0b3c8a9af69f7293", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\nindex a614ec7ed6..bdc0e035ff 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\n\n@@ -3,6 +3,8 @@\n \n package com.azure.ai.textanalytics.models;\n \n+import java.util.Objects;\n+\n /**\n  * Subscription key credential that shared across cognitive services, or restrict to single service.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxODk3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r369818974", "bodyText": "Is this thread safe? Is there a way to guarantee that when modified it updates everywhere?", "author": "maririos", "createdAt": "2020-01-22T21:41:30Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+/**\n+ * Subscription key credential that shared across cognitive services, or restrict to single service.\n+ */\n+public final class TextAnalyticsSubscriptionKeyCredential {\n+    private String subscriptionKey;\n+\n+    /**\n+     * Creates a {@code SharedKeyCredential} model that describes subscription key.\n+     *\n+     * @param subscriptionKey the subscription key\n+     */\n+    public TextAnalyticsSubscriptionKeyCredential(String subscriptionKey) {\n+        this.subscriptionKey = subscriptionKey;\n+    }\n+\n+    /**\n+     * Get the subscription key value.\n+     *\n+     * @return the subscription key value\n+     */\n+    public String getSubscriptionKey() {\n+        return this.subscriptionKey;\n+    }\n+\n+    /**\n+     * Set the subscription key value.\n+     *\n+     * @param subscriptionKey the subscription key\n+     * @return the {@link TextAnalyticsSubscriptionKeyCredential} itself\n+     */\n+    public TextAnalyticsSubscriptionKeyCredential updateCredential(String subscriptionKey) {\n+        this.subscriptionKey = subscriptionKey;", "originalCommit": "559066ce393a4d92ab09c53e2f0a6080ea4779ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgzODg2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r369838863", "bodyText": "I had a few discussions on the thread-safe concern. some believe it is thread-safe. the reason is it is a single atomic assignment. But depends on how you use it, It could be not threaded safe. This is one I am not sure yet. I will give you an update once finalized.", "author": "mssfang", "createdAt": "2020-01-22T22:25:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxODk3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1ODUyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r370758521", "bodyText": "In the pipeline policy, it is fetched, so it's possible that the policy picks up a different value than the one that is set. This is not thread safe.", "author": "conniey", "createdAt": "2020-01-24T17:43:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgxODk3NA=="}], "type": "inlineReview", "revised_code": {"commit": "eb3befd83b70df0fbbe513ba0b3c8a9af69f7293", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\nindex a614ec7ed6..bdc0e035ff 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\n\n@@ -3,6 +3,8 @@\n \n package com.azure.ai.textanalytics.models;\n \n+import java.util.Objects;\n+\n /**\n  * Subscription key credential that shared across cognitive services, or restrict to single service.\n  */\n"}}, {"oid": "eb3befd83b70df0fbbe513ba0b3c8a9af69f7293", "url": "https://github.com/Azure/azure-sdk-for-java/commit/eb3befd83b70df0fbbe513ba0b3c8a9af69f7293", "message": "subscription key cannot be null check", "committedDate": "2020-01-22T22:46:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgzNDEyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r369834127", "bodyText": "May be use constant defined in this class instead of string ?", "author": "hemanttanwar", "createdAt": "2020-01-22T22:15:19Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/SubscriptionKeyCredentialPolicy.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.implementation;\n+\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.ai.textanalytics.models.TextAnalyticsSubscriptionKeyCredential;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Policy that adds the {@link TextAnalyticsSubscriptionKeyCredential} into the request's `Ocp-Apim-Subscription-Key`\n+ * header.\n+ */\n+public final class SubscriptionKeyCredentialPolicy implements HttpPipelinePolicy {\n+    private final TextAnalyticsSubscriptionKeyCredential credential;\n+\n+    /**\n+     * Creates a {@link SubscriptionKeyCredentialPolicy} pipeline policy that adds the SharedKeyCredential into the\n+     * request's `Ocp-Apim-Subscription-Key` header.\n+     *\n+     * @param credential the SharedKeyCredential credential used to create the policy.\n+     */\n+    public SubscriptionKeyCredentialPolicy(TextAnalyticsSubscriptionKeyCredential credential) {\n+        this.credential = credential;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        context.getHttpRequest().setHeader(\"Ocp-Apim-Subscription-Key\", credential.getSubscriptionKey());", "originalCommit": "559066ce393a4d92ab09c53e2f0a6080ea4779ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2338cc50ca163421d6dcb9a6ffc257eb43748750", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/SubscriptionKeyCredentialPolicy.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/SubscriptionKeyCredentialPolicy.java\nindex 781fc202f6..6d27275f67 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/SubscriptionKeyCredentialPolicy.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/implementation/SubscriptionKeyCredentialPolicy.java\n\n@@ -15,13 +15,14 @@ import reactor.core.publisher.Mono;\n  * header.\n  */\n public final class SubscriptionKeyCredentialPolicy implements HttpPipelinePolicy {\n+    private static final String OCP_APIM_SUBSCRIPTION_KEY = \"Ocp-Apim-Subscription-Key\";\n     private final TextAnalyticsSubscriptionKeyCredential credential;\n \n     /**\n-     * Creates a {@link SubscriptionKeyCredentialPolicy} pipeline policy that adds the SharedKeyCredential into the\n-     * request's `Ocp-Apim-Subscription-Key` header.\n+     * Creates a {@link SubscriptionKeyCredentialPolicy} pipeline policy that adds the\n+     * {@link TextAnalyticsSubscriptionKeyCredential} into the request's `Ocp-Apim-Subscription-Key` header.\n      *\n-     * @param credential the SharedKeyCredential credential used to create the policy.\n+     * @param credential the {@link TextAnalyticsSubscriptionKeyCredential} credential used to create the policy.\n      */\n     public SubscriptionKeyCredentialPolicy(TextAnalyticsSubscriptionKeyCredential credential) {\n         this.credential = credential;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0MjMyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r369842320", "bodyText": "May be adding better description the subscription key for authentication.", "author": "hemanttanwar", "createdAt": "2020-01-22T22:33:56Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+/**\n+ * Subscription key credential that shared across cognitive services, or restrict to single service.\n+ */\n+public final class TextAnalyticsSubscriptionKeyCredential {\n+    private String subscriptionKey;\n+\n+    /**\n+     * Creates a {@code SharedKeyCredential} model that describes subscription key.\n+     *\n+     * @param subscriptionKey the subscription key\n+     */\n+    public TextAnalyticsSubscriptionKeyCredential(String subscriptionKey) {\n+        this.subscriptionKey = subscriptionKey;\n+    }\n+\n+    /**\n+     * Get the subscription key value.\n+     *\n+     * @return the subscription key value\n+     */\n+    public String getSubscriptionKey() {\n+        return this.subscriptionKey;\n+    }\n+\n+    /**\n+     * Set the subscription key value.\n+     *\n+     * @param subscriptionKey the subscription key", "originalCommit": "559066ce393a4d92ab09c53e2f0a6080ea4779ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb3befd83b70df0fbbe513ba0b3c8a9af69f7293", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\nindex a614ec7ed6..bdc0e035ff 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\n\n@@ -3,6 +3,8 @@\n \n package com.azure.ai.textanalytics.models;\n \n+import java.util.Objects;\n+\n /**\n  * Subscription key credential that shared across cognitive services, or restrict to single service.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0NjI0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r369846247", "bodyText": "What happens when client update with valid key and after that all the calls should be successful. Is there a test for that ?", "author": "hemanttanwar", "createdAt": "2020-01-22T22:43:29Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilderTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics;\n+\n+import com.azure.ai.textanalytics.models.DetectedLanguage;\n+import com.azure.ai.textanalytics.models.TextAnalyticsSubscriptionKeyCredential;\n+import com.azure.core.exception.HttpResponseException;\n+import com.azure.core.http.netty.NettyAsyncHttpClientBuilder;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Configuration;\n+import org.junit.jupiter.api.Test;\n+import reactor.test.StepVerifier;\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+\n+import static com.azure.ai.textanalytics.TextAnalyticsClientTestBase.validateDetectedLanguages;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class TextAnalyticsClientBuilderTest extends TestBase {\n+    private static final String AZURE_TEXT_ANALYTICS_SUBSCRIPTION_KEY = \"AZURE_TEXT_ANALYTICS_SUBSCRIPTION_KEY\";\n+\n+    @Test\n+    public void rotateSharedKeyCredentialAsyncClient() {\n+        // Arrange\n+        final String endpoint = getEndpoint();\n+        Objects.requireNonNull(endpoint, \"`endpoint` expected to be set.\");\n+        final String subscriptionKey = getSubscriptionKey();\n+        Objects.requireNonNull(subscriptionKey, \"`AZURE_TEXT_ANALYTICS_SUBSCRIPTION_KEY` expected to be set.\");\n+\n+        final TextAnalyticsSubscriptionKeyCredential credential =\n+            new TextAnalyticsSubscriptionKeyCredential(subscriptionKey);\n+\n+        final TextAnalyticsClientBuilder clientBuilder = new TextAnalyticsClientBuilder()\n+            .subscriptionKey(credential)\n+            .endpoint(endpoint);\n+\n+        if (interceptorManager.isPlaybackMode()) {\n+            clientBuilder.httpClient(interceptorManager.getPlaybackClient());\n+        } else {\n+            clientBuilder.httpClient(new NettyAsyncHttpClientBuilder().wiretap(true).build())\n+                .addPolicy(interceptorManager.getRecordPolicy());\n+        }\n+\n+        final TextAnalyticsAsyncClient client = clientBuilder.buildAsyncClient();\n+\n+        // Action and Assert\n+        StepVerifier.create(client.detectLanguage(\"This is a test English Text\"))\n+            .assertNext(response -> validateDetectedLanguages(\n+                Arrays.asList(new DetectedLanguage(\"English\", \"en\", 1.0)),\n+                response.getDetectedLanguages()))\n+            .verifyComplete();\n+\n+        // Update to invalid subscription key\n+        credential.updateCredential(\"invalid key\");\n+\n+        // Action and Assert\n+        StepVerifier.create(client.detectLanguage(\"This is a test English Text\"))\n+            .verifyError(HttpResponseException.class);\n+    }\n+\n+    @Test\n+    public void rotateSharedKeyCredentialSyncClient() {\n+        // Arrange\n+        final String endpoint = getEndpoint();\n+        Objects.requireNonNull(endpoint, \"`endpoint` expected to be set.\");\n+        final String subscriptionKey = getSubscriptionKey();\n+        Objects.requireNonNull(subscriptionKey, \"`AZURE_TEXT_ANALYTICS_SUBSCRIPTION_KEY` expected to be set.\");\n+\n+        final TextAnalyticsSubscriptionKeyCredential credential =\n+            new TextAnalyticsSubscriptionKeyCredential(subscriptionKey);\n+\n+        final TextAnalyticsClientBuilder clientBuilder = new TextAnalyticsClientBuilder()\n+            .subscriptionKey(credential)\n+            .endpoint(endpoint);\n+\n+        if (interceptorManager.isPlaybackMode()) {\n+            clientBuilder.httpClient(interceptorManager.getPlaybackClient());\n+        } else {\n+            clientBuilder.httpClient(new NettyAsyncHttpClientBuilder().wiretap(true).build())\n+                .addPolicy(interceptorManager.getRecordPolicy());\n+        }\n+\n+        final TextAnalyticsClient client = clientBuilder.buildClient();\n+\n+        // Action and Assert\n+        validateDetectedLanguages(Arrays.asList(new DetectedLanguage(\"English\", \"en\", 1.0)),\n+            client.detectLanguage(\"This is a test English Text\").getDetectedLanguages());\n+\n+        // Update to invalid subscription key\n+        credential.updateCredential(\"invalid key\");\n+", "originalCommit": "559066ce393a4d92ab09c53e2f0a6080ea4779ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2338cc50ca163421d6dcb9a6ffc257eb43748750", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilderTest.java b/sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilderTest.java\ndeleted file mode 100644\nindex cbce731f8f..0000000000\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilderTest.java\n+++ /dev/null\n\n@@ -1,108 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.ai.textanalytics;\n-\n-import com.azure.ai.textanalytics.models.DetectedLanguage;\n-import com.azure.ai.textanalytics.models.TextAnalyticsSubscriptionKeyCredential;\n-import com.azure.core.exception.HttpResponseException;\n-import com.azure.core.http.netty.NettyAsyncHttpClientBuilder;\n-import com.azure.core.test.TestBase;\n-import com.azure.core.util.Configuration;\n-import org.junit.jupiter.api.Test;\n-import reactor.test.StepVerifier;\n-\n-import java.util.Arrays;\n-import java.util.Objects;\n-\n-import static com.azure.ai.textanalytics.TextAnalyticsClientTestBase.validateDetectedLanguages;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-\n-public class TextAnalyticsClientBuilderTest extends TestBase {\n-    private static final String AZURE_TEXT_ANALYTICS_SUBSCRIPTION_KEY = \"AZURE_TEXT_ANALYTICS_SUBSCRIPTION_KEY\";\n-\n-    @Test\n-    public void rotateSharedKeyCredentialAsyncClient() {\n-        // Arrange\n-        final String endpoint = getEndpoint();\n-        Objects.requireNonNull(endpoint, \"`endpoint` expected to be set.\");\n-        final String subscriptionKey = getSubscriptionKey();\n-        Objects.requireNonNull(subscriptionKey, \"`AZURE_TEXT_ANALYTICS_SUBSCRIPTION_KEY` expected to be set.\");\n-\n-        final TextAnalyticsSubscriptionKeyCredential credential =\n-            new TextAnalyticsSubscriptionKeyCredential(subscriptionKey);\n-\n-        final TextAnalyticsClientBuilder clientBuilder = new TextAnalyticsClientBuilder()\n-            .subscriptionKey(credential)\n-            .endpoint(endpoint);\n-\n-        if (interceptorManager.isPlaybackMode()) {\n-            clientBuilder.httpClient(interceptorManager.getPlaybackClient());\n-        } else {\n-            clientBuilder.httpClient(new NettyAsyncHttpClientBuilder().wiretap(true).build())\n-                .addPolicy(interceptorManager.getRecordPolicy());\n-        }\n-\n-        final TextAnalyticsAsyncClient client = clientBuilder.buildAsyncClient();\n-\n-        // Action and Assert\n-        StepVerifier.create(client.detectLanguage(\"This is a test English Text\"))\n-            .assertNext(response -> validateDetectedLanguages(\n-                Arrays.asList(new DetectedLanguage(\"English\", \"en\", 1.0)),\n-                response.getDetectedLanguages()))\n-            .verifyComplete();\n-\n-        // Update to invalid subscription key\n-        credential.updateCredential(\"invalid key\");\n-\n-        // Action and Assert\n-        StepVerifier.create(client.detectLanguage(\"This is a test English Text\"))\n-            .verifyError(HttpResponseException.class);\n-    }\n-\n-    @Test\n-    public void rotateSharedKeyCredentialSyncClient() {\n-        // Arrange\n-        final String endpoint = getEndpoint();\n-        Objects.requireNonNull(endpoint, \"`endpoint` expected to be set.\");\n-        final String subscriptionKey = getSubscriptionKey();\n-        Objects.requireNonNull(subscriptionKey, \"`AZURE_TEXT_ANALYTICS_SUBSCRIPTION_KEY` expected to be set.\");\n-\n-        final TextAnalyticsSubscriptionKeyCredential credential =\n-            new TextAnalyticsSubscriptionKeyCredential(subscriptionKey);\n-\n-        final TextAnalyticsClientBuilder clientBuilder = new TextAnalyticsClientBuilder()\n-            .subscriptionKey(credential)\n-            .endpoint(endpoint);\n-\n-        if (interceptorManager.isPlaybackMode()) {\n-            clientBuilder.httpClient(interceptorManager.getPlaybackClient());\n-        } else {\n-            clientBuilder.httpClient(new NettyAsyncHttpClientBuilder().wiretap(true).build())\n-                .addPolicy(interceptorManager.getRecordPolicy());\n-        }\n-\n-        final TextAnalyticsClient client = clientBuilder.buildClient();\n-\n-        // Action and Assert\n-        validateDetectedLanguages(Arrays.asList(new DetectedLanguage(\"English\", \"en\", 1.0)),\n-            client.detectLanguage(\"This is a test English Text\").getDetectedLanguages());\n-\n-        // Update to invalid subscription key\n-        credential.updateCredential(\"invalid key\");\n-\n-        // Action and Assert\n-        assertThrows(HttpResponseException.class, () -> client.detectLanguage(\"This is a test English Text\"));\n-    }\n-\n-    String getEndpoint() {\n-        return interceptorManager.isPlaybackMode()\n-            ? \"http://localhost:8080\"\n-            : Configuration.getGlobalConfiguration().get(\"AZURE_TEXT_ANALYTICS_ENDPOINT\");\n-    }\n-\n-    String getSubscriptionKey() {\n-        return interceptorManager.isPlaybackMode() ? \"subscriptionKeyInPlayback\"\n-            : Configuration.getGlobalConfiguration().get(AZURE_TEXT_ANALYTICS_SUBSCRIPTION_KEY);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg0OTU0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r369849541", "bodyText": "The samples/readme.md : provide an example of update.", "author": "hemanttanwar", "createdAt": "2020-01-22T22:52:24Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.ai.textanalytics.models;\n+\n+/**\n+ * Subscription key credential that shared across cognitive services, or restrict to single service.\n+ */\n+public final class TextAnalyticsSubscriptionKeyCredential {\n+    private String subscriptionKey;\n+\n+    /**\n+     * Creates a {@code SharedKeyCredential} model that describes subscription key.\n+     *\n+     * @param subscriptionKey the subscription key\n+     */\n+    public TextAnalyticsSubscriptionKeyCredential(String subscriptionKey) {\n+        this.subscriptionKey = subscriptionKey;\n+    }\n+\n+    /**\n+     * Get the subscription key value.\n+     *\n+     * @return the subscription key value\n+     */\n+    public String getSubscriptionKey() {\n+        return this.subscriptionKey;\n+    }\n+\n+    /**\n+     * Set the subscription key value.\n+     *\n+     * @param subscriptionKey the subscription key\n+     * @return the {@link TextAnalyticsSubscriptionKeyCredential} itself\n+     */\n+    public TextAnalyticsSubscriptionKeyCredential updateCredential(String subscriptionKey) {", "originalCommit": "559066ce393a4d92ab09c53e2f0a6080ea4779ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2338cc50ca163421d6dcb9a6ffc257eb43748750", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\nindex a614ec7ed6..36c6b05e9c 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/models/TextAnalyticsSubscriptionKeyCredential.java\n\n@@ -3,38 +3,43 @@\n \n package com.azure.ai.textanalytics.models;\n \n+import java.util.Objects;\n+\n /**\n  * Subscription key credential that shared across cognitive services, or restrict to single service.\n+ *\n+ * <p>Be able to rotate an existing subscription key</p>\n+ * {@codesnippet com.azure.ai.textanalytics.models.TextAnalyticsSubscriptionKeyCredential}\n+ *\n  */\n public final class TextAnalyticsSubscriptionKeyCredential {\n     private String subscriptionKey;\n \n     /**\n-     * Creates a {@code SharedKeyCredential} model that describes subscription key.\n+     * Creates a {@link TextAnalyticsSubscriptionKeyCredential} model that describes subscription key for\n+     * authentication.\n      *\n-     * @param subscriptionKey the subscription key\n+     * @param subscriptionKey the subscription key for authentication\n      */\n     public TextAnalyticsSubscriptionKeyCredential(String subscriptionKey) {\n-        this.subscriptionKey = subscriptionKey;\n+        this.subscriptionKey = Objects.requireNonNull(subscriptionKey, \"`subscriptionKey` cannot be null.\");\n     }\n \n     /**\n-     * Get the subscription key value.\n+     * Get the subscription key.\n      *\n-     * @return the subscription key value\n+     * @return the subscription key\n      */\n     public String getSubscriptionKey() {\n         return this.subscriptionKey;\n     }\n \n     /**\n-     * Set the subscription key value.\n+     * Set the subscription key.\n      *\n-     * @param subscriptionKey the subscription key\n-     * @return the {@link TextAnalyticsSubscriptionKeyCredential} itself\n+     * @param subscriptionKey the subscription key for authentication\n      */\n-    public TextAnalyticsSubscriptionKeyCredential updateCredential(String subscriptionKey) {\n-        this.subscriptionKey = subscriptionKey;\n-        return this;\n+    public void updateCredential(String subscriptionKey) {\n+        this.subscriptionKey = Objects.requireNonNull(subscriptionKey, \"`subscriptionKey` cannot be null.\");\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1NjM1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r370756350", "bodyText": "The friendly text is incorrect. subscriptionKey(String)", "author": "conniey", "createdAt": "2020-01-24T17:38:35Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilder.java", "diffHunk": "@@ -42,7 +44,7 @@\n  *\n  * <p>\n  * The client needs the service endpoint of the Azure Text Analytics to access the resource service.\n- * {@link #subscriptionKey(String) subscriptionKey(String)} or\n+ * {@link #subscriptionKey(TextAnalyticsSubscriptionKeyCredential) subscriptionKey(String)} or", "originalCommit": "eb3befd83b70df0fbbe513ba0b3c8a9af69f7293", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1795fb1e9713eb1d2ae860a055e6aab42611cd7e", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilder.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilder.java\nindex 0a4e6c083d..4a6ff047f8 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilder.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilder.java\n\n@@ -44,7 +44,8 @@ import java.util.Objects;\n  *\n  * <p>\n  * The client needs the service endpoint of the Azure Text Analytics to access the resource service.\n- * {@link #subscriptionKey(TextAnalyticsSubscriptionKeyCredential) subscriptionKey(String)} or\n+ * {@link #subscriptionKey(TextAnalyticsSubscriptionKeyCredential)\n+ * subscriptionKey(TextAnalyticsSubscriptionKeyCredential)} or\n  * {@link #credential(TokenCredential) credential(TokenCredential)} give the builder access credential.\n  * </p>\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1NjU3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r370756577", "bodyText": "nit: variable name credential fits better.", "author": "conniey", "createdAt": "2020-01-24T17:39:07Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilder.java", "diffHunk": "@@ -87,7 +88,7 @@\n     private final String clientVersion;\n \n     private String endpoint;\n-    private String subscriptionKey;\n+    private TextAnalyticsSubscriptionKeyCredential subscriptionKey;", "originalCommit": "eb3befd83b70df0fbbe513ba0b3c8a9af69f7293", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1795fb1e9713eb1d2ae860a055e6aab42611cd7e", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilder.java b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilder.java\nindex 0a4e6c083d..4a6ff047f8 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilder.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/main/java/com/azure/ai/textanalytics/TextAnalyticsClientBuilder.java\n\n@@ -88,7 +89,7 @@ public final class TextAnalyticsClientBuilder {\n     private final String clientVersion;\n \n     private String endpoint;\n-    private TextAnalyticsSubscriptionKeyCredential subscriptionKey;\n+    private TextAnalyticsSubscriptionKeyCredential credential;\n     private TokenCredential tokenCredential;\n     private HttpClient httpClient;\n     private HttpLogOptions httpLogOptions;\n"}}, {"oid": "2338cc50ca163421d6dcb9a6ffc257eb43748750", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2338cc50ca163421d6dcb9a6ffc257eb43748750", "message": "beside the it is still not thread-safe. Hava updaet all side docs", "committedDate": "2020-01-27T00:38:56Z", "type": "commit"}, {"oid": "1795fb1e9713eb1d2ae860a055e6aab42611cd7e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1795fb1e9713eb1d2ae860a055e6aab42611cd7e", "message": "add json files for test and minor checkstyle errors", "committedDate": "2020-01-27T01:14:13Z", "type": "commit"}, {"oid": "8e9e4926daec71ee223c3d61c4e4eb53a278dc4e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8e9e4926daec71ee223c3d61c4e4eb53a278dc4e", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into RotateSubscriptionKey", "committedDate": "2020-01-27T03:26:03Z", "type": "commit"}, {"oid": "77103c8088a9789c66b022993211598e06869284", "url": "https://github.com/Azure/azure-sdk-for-java/commit/77103c8088a9789c66b022993211598e06869284", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into RotateSubscriptionKey", "committedDate": "2020-01-27T17:07:20Z", "type": "commit"}, {"oid": "6f3ee3db3b09fc06168245eb08b5d0223f08b808", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6f3ee3db3b09fc06168245eb08b5d0223f08b808", "message": "add volatile to subscription key to visisbility", "committedDate": "2020-01-27T17:34:59Z", "type": "commit"}, {"oid": "f408f1c1bd010893aaed6639831a38098f5146cd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f408f1c1bd010893aaed6639831a38098f5146cd", "message": "update json files and take caure endpoint last character", "committedDate": "2020-01-27T20:19:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1OTQ1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r371559455", "bodyText": "Why the change to {endpoint}? It is more clear what the string should look like with the last change.", "author": "conniey", "createdAt": "2020-01-28T00:38:21Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/AnalyzeSentimentAsync.java", "diffHunk": "@@ -19,8 +20,8 @@\n     public static void main(String[] args) {\n         // Instantiate a client that will be used to call the service.\n         TextAnalyticsAsyncClient client = new TextAnalyticsClientBuilder()\n-            .subscriptionKey(\"{subscription_key}\")\n-            .endpoint(\"https://{servicename}.cognitiveservices.azure.com/\")\n+            .subscriptionKey(new TextAnalyticsSubscriptionKeyCredential(\"{subscription_key}\"))\n+            .endpoint(\"{endpoint}\")", "originalCommit": "f408f1c1bd010893aaed6639831a38098f5146cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MzUxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r371563517", "bodyText": "Based on what Mariana point out here: #7596 (comment)\nThe subscription key could apply to both Cognitive Subscription Key or Text Analytics Subscription key.", "author": "mssfang", "createdAt": "2020-01-28T00:54:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1OTQ1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "06013da7acc0c0752579ed7e11a40d7d78d5435e", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/AnalyzeSentimentAsync.java b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/AnalyzeSentimentAsync.java\nindex 31d9142801..84f42c53ed 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/AnalyzeSentimentAsync.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/samples/java/com/azure/ai/textanalytics/AnalyzeSentimentAsync.java\n\n@@ -20,7 +20,7 @@ public class AnalyzeSentimentAsync {\n     public static void main(String[] args) {\n         // Instantiate a client that will be used to call the service.\n         TextAnalyticsAsyncClient client = new TextAnalyticsClientBuilder()\n-            .subscriptionKey(new TextAnalyticsSubscriptionKeyCredential(\"{subscription_key}\"))\n+            .subscriptionKey(new TextAnalyticsApiKeyCredential(\"{subscription_key}\"))\n             .endpoint(\"{endpoint}\")\n             .buildAsyncClient();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MDEyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r371560127", "bodyText": "Generally, you try to limit the scope of your assertion. How do you know it threw in credential(null) and not buildclient()?\nThis goes for all the other tests that do the same.\n// arrange\nfinal TextAnalyticsClientBuilder builder = new TextAnalyticsClientBuilder();\n\n// Act & Assert\nassertThrows(NullPointerException.class, () -> builder.credential(null));", "author": "conniey", "createdAt": "2020-01-28T00:41:05Z", "path": "sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTest.java", "diffHunk": "@@ -408,4 +414,150 @@ public void analyseSentimentForBatchInputShowStatistics() {\n             validateSentiment(true, getExpectedBatchTextSentiment(),\n                 client.analyzeBatchSentimentWithResponse(inputs, options, Context.NONE).getValue()));\n     }\n+\n+    /**\n+     * Test client builder with valid subscription key\n+     */\n+    @Test\n+    public void validKey() {\n+        // Arrange\n+        final TextAnalyticsClient client = createClientBuilder(getEndpoint(),\n+            new TextAnalyticsSubscriptionKeyCredential(getSubscriptionKey())).buildClient();\n+\n+        // Action and Assert\n+        validateDetectedLanguages(Arrays.asList(new DetectedLanguage(\"English\", \"en\", 1.0)),\n+            client.detectLanguage(\"This is a test English Text\").getDetectedLanguages());\n+    }\n+\n+    /**\n+     * Test client builder with invalid subscription key\n+     */\n+    @Test\n+    public void invalidKey() {\n+        // Arrange\n+        final TextAnalyticsClient client = createClientBuilder(getEndpoint(),\n+            new TextAnalyticsSubscriptionKeyCredential(INVALID_KEY)).buildClient();\n+\n+        // Action and Assert\n+        assertThrows(HttpResponseException.class, () -> client.detectLanguage(\"This is a test English Text\"));\n+    }\n+\n+    /**\n+     * Test client with valid subscription key but update to invalid key and make call to server.\n+     */\n+    @Test\n+    public void updateToInvalidKey() {\n+        // Arrange\n+        final TextAnalyticsSubscriptionKeyCredential credential =\n+            new TextAnalyticsSubscriptionKeyCredential(getSubscriptionKey());\n+\n+        final TextAnalyticsClient client = createClientBuilder(getEndpoint(), credential).buildClient();\n+\n+        // Update to invalid key\n+        credential.updateCredential(INVALID_KEY);\n+\n+        // Action and Assert\n+        assertThrows(HttpResponseException.class, () -> client.detectLanguage(\"This is a test English Text\"));\n+    }\n+\n+    /**\n+     * Test client with invalid subscription key but update to valid key and make call to server.\n+     */\n+    @Test\n+    public void updateToValidKey() {\n+        // Arrange\n+        final TextAnalyticsSubscriptionKeyCredential credential =\n+            new TextAnalyticsSubscriptionKeyCredential(INVALID_KEY);\n+\n+        final TextAnalyticsClient client = createClientBuilder(getEndpoint(), credential).buildClient();\n+\n+        // Update to valid key\n+        credential.updateCredential(getSubscriptionKey());\n+\n+        // Action and Assert\n+        validateDetectedLanguages(Arrays.asList(new DetectedLanguage(\"English\", \"en\", 1.0)),\n+            client.detectLanguage(\"This is a test English Text\").getDetectedLanguages());\n+    }\n+\n+    /**\n+     * Test for missing endpoint\n+     */\n+    @Test\n+    public void missingEndpoint() {\n+        assertThrows(NullPointerException.class, () -> {\n+            final TextAnalyticsClientBuilder builder = new TextAnalyticsClientBuilder();\n+            builder.buildClient();\n+        });\n+    }\n+\n+    /**\n+     * Test for null subscription key\n+     */\n+    @Test\n+    public void nullSubscriptionKey() {\n+        assertThrows(NullPointerException.class, () -> {\n+            final TextAnalyticsClientBuilder builder = new TextAnalyticsClientBuilder();\n+            builder.endpoint(getEndpoint()).subscriptionKey(null).buildClient();\n+        });\n+    }\n+\n+    /**\n+     * Test for null AAD credential\n+     */\n+    @Test\n+    public void nullAADCredential() {\n+        assertThrows(NullPointerException.class, () -> {\n+            final TextAnalyticsClientBuilder builder = new TextAnalyticsClientBuilder();\n+            builder.endpoint(getEndpoint()).credential(null).buildClient();", "originalCommit": "f408f1c1bd010893aaed6639831a38098f5146cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2Mzk4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7596#discussion_r371563983", "bodyText": "Make sense. I will update it.", "author": "mssfang", "createdAt": "2020-01-28T00:56:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MDEyNw=="}], "type": "inlineReview", "revised_code": {"commit": "af5710db8d9e617de900c50861b8874f9d180e07", "chunk": "diff --git a/sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTest.java b/sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTest.java\nindex 843382fa6a..f9bdf0e301 100644\n--- a/sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTest.java\n+++ b/sdk/textanalytics/azure-ai-textanalytics/src/test/java/com/azure/ai/textanalytics/TextAnalyticsClientTest.java\n\n@@ -497,7 +497,7 @@ public class TextAnalyticsClientTest extends TextAnalyticsClientTestBase {\n     public void nullSubscriptionKey() {\n         assertThrows(NullPointerException.class, () -> {\n             final TextAnalyticsClientBuilder builder = new TextAnalyticsClientBuilder();\n-            builder.endpoint(getEndpoint()).subscriptionKey(null).buildClient();\n+            builder.endpoint(getEndpoint()).subscriptionKey(null);\n         });\n     }\n \n"}}, {"oid": "132815b60e187f960b93564090f817f61af4d78e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/132815b60e187f960b93564090f817f61af4d78e", "message": "Merge branch 'RotateSubscriptionKey' of https://github.com/mssfang/azure-sdk-for-java into RotateSubscriptionKey", "committedDate": "2020-01-28T04:08:59Z", "type": "commit"}, {"oid": "af5710db8d9e617de900c50861b8874f9d180e07", "url": "https://github.com/Azure/azure-sdk-for-java/commit/af5710db8d9e617de900c50861b8874f9d180e07", "message": "workding and delete some dup tests", "committedDate": "2020-01-28T04:37:34Z", "type": "commit"}, {"oid": "06013da7acc0c0752579ed7e11a40d7d78d5435e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/06013da7acc0c0752579ed7e11a40d7d78d5435e", "message": "renanem to TextAnalyticsApiKeyCredential", "committedDate": "2020-01-28T19:59:21Z", "type": "commit"}, {"oid": "4210cc609efafeaa4151bc72089f59a5931760c7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4210cc609efafeaa4151bc72089f59a5931760c7", "message": "resolve conflict", "committedDate": "2020-01-28T20:02:58Z", "type": "commit"}]}