{"pr_number": 9609, "pr_title": "Servicebus track2 Adding javadoc and code snippet ", "pr_createdAt": "2020-03-26T20:23:23Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/9609", "timeline": [{"oid": "e291fc06554886c4ea8e78cd0d8578cbbb1badc5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e291fc06554886c4ea8e78cd0d8578cbbb1badc5", "message": "code snippet added", "committedDate": "2020-03-26T20:14:15Z", "type": "commit"}, {"oid": "9035b732d53185d7a7515b952c67787e839e8235", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9035b732d53185d7a7515b952c67787e839e8235", "message": "receiver builder - autoCommit true", "committedDate": "2020-03-26T20:22:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkxNzE5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9609#discussion_r398917190", "bodyText": "topic and queue? I don't think the same sender can publish to both. I would update this title to \"Send messages to a Service Bus resource\"", "author": "conniey", "createdAt": "2020-03-26T21:57:18Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderClient.java", "diffHunk": "@@ -13,9 +13,17 @@\n  * A <b>synchronous</b> sender responsible for sending {@link ServiceBusMessage} to  specific queue or topic on\n  * Azure Service Bus.\n  *\n- * @see ServiceBusClientBuilder\n- * @see ServiceBusSenderAsyncClient See ServiceBusSenderAsyncClient to communicate with a Service Bus resource using\n- *     an asynchronous client.\n+ * <p><strong>Create an instance of sender</strong></p>\n+ * {@codesnippet com.azure.messaging.servicebus.servicebussenderclient.instantiation}\n+ *\n+ * <p><strong>Create a sender and send messages to Service Bus topic and queue</strong></p>", "originalCommit": "9035b732d53185d7a7515b952c67787e839e8235", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkxNzQ5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9609#discussion_r398917493", "bodyText": "You don't need to show client creation again. Should focus the snippet on creating the batch and assume the client exists.", "author": "conniey", "createdAt": "2020-03-26T21:58:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkxNzE5MA=="}], "type": "inlineReview", "revised_code": {"commit": "b336e770f5154e679cf96d21e9080d61f0aa3e0c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderClient.java\nindex b10de98f3cd..4e7eeb29616 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderClient.java\n\n@@ -16,10 +16,10 @@ import java.util.Objects;\n  * <p><strong>Create an instance of sender</strong></p>\n  * {@codesnippet com.azure.messaging.servicebus.servicebussenderclient.instantiation}\n  *\n- * <p><strong>Create a sender and send messages to Service Bus topic and queue</strong></p>\n+ * <p><strong>Send messages to a Service Bus resource</strong></p>\n  * {@codesnippet com.azure.messaging.servicebus.servicebussenderclient.createBatch}\n  *\n- * <p><strong>Publish messages using a size-limited {@link ServiceBusMessageBatch}</strong></p>\n+ * <p><strong>Send messages using a size-limited {@link ServiceBusMessageBatch}</strong></p>\n  * {@codesnippet com.azure.messaging.servicebus.servicebussenderclient.createBatch#CreateBatchOptions-int}\n  *\n  * @see ServiceBusClientBuilder#buildSenderClientBuilder()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkxNzc5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9609#discussion_r398917797", "bodyText": "Same comment as the one below", "author": "conniey", "createdAt": "2020-03-26T21:58:41Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -48,6 +48,16 @@\n \n /**\n  * An <b>asynchronous</b> client to send messages to a Service Bus resource.\n+ *\n+ * <p><strong>Create an instance of sender</strong></p>\n+ * {@codesnippet com.azure.messaging.servicebus.servicebusasyncsenderclient.instantiation}\n+ *\n+ * <p><strong>Create a sender and send messages to Service Bus topic and queue</strong></p>", "originalCommit": "9035b732d53185d7a7515b952c67787e839e8235", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b336e770f5154e679cf96d21e9080d61f0aa3e0c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\nindex 403e7b4c3ab..173d894a384 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n\n@@ -52,11 +52,14 @@ import static com.azure.core.util.tracing.Tracer.SPAN_CONTEXT_KEY;\n  * <p><strong>Create an instance of sender</strong></p>\n  * {@codesnippet com.azure.messaging.servicebus.servicebusasyncsenderclient.instantiation}\n  *\n- * <p><strong>Create a sender and send messages to Service Bus topic and queue</strong></p>\n+ * <p><strong>Create an instance of sender using default credential</strong></p>\n+ * {@codesnippet com.azure.messaging.servicebus.servicebusasyncsenderclient.instantiateWithDefaultCredential}\n+ *\n+ * <p><strong>Send messages to a Service Bus resource</strong></p>\n  * {@codesnippet com.azure.messaging.servicebus.servicebusasyncsenderclient.createBatch}\n  *\n- * <p><strong>Publish messages using a size-limited {@link ServiceBusMessageBatch}</strong></p>\n- * {@codesnippet com.azure.messaging.servicebus.servicebusasyncsenderclient.createBatch#CreateBatchOptions-int}\n+ * <p><strong>Send messages using a size-limited {@link ServiceBusMessageBatch}</strong></p>\n+ * {@codesnippet com.azure.messaging.servicebus.servicebusasyncsenderclient.createBatch#CreateBatchOptionsLimitedSize}\n  *\n  */\n @ServiceClient(builder = ServiceBusClientBuilder.class, isAsync = true)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkxODE1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9609#discussion_r398918157", "bodyText": "Another one would be to do #instantiation with  credentials.", "author": "conniey", "createdAt": "2020-03-26T21:59:25Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientJavaDocCodeSamples.java", "diffHunk": "@@ -0,0 +1,122 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.CreateBatchOptions;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Contains code snippets when generating javadocs through doclets for {@link ServiceBusSenderAsyncClient}.\n+ */\n+public class ServiceBusSenderAsyncClientJavaDocCodeSamples {\n+    private final ServiceBusClientBuilder builder = new ServiceBusClientBuilder()\n+        .connectionString(\"fake-string\");\n+\n+    /**\n+     * Code snippet demonstrating how to create an {@link ServiceBusSenderAsyncClient}.\n+     */\n+    public void instantiate() {\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncsenderclient.instantiation\n+        // The required parameter is a way to authenticate with Service Bus using credentials.\n+        // The connectionString provides a way to authenticate with Service Bus.\n+        ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n+            .connectionString(\n+                \"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key}\")\n+            .buildSenderClientBuilder()\n+            .entityName(\"<QUEUE-NAME>\")\n+            .buildAsyncClient();\n+        // END: com.azure.messaging.servicebus.servicebusasyncsenderclient.instantiation\n+\n+        sender.close();\n+    }\n+\n+    /**\n+     * Code snippet demonstrating how to send a batch to Service Bus queue or topic.\n+     */\n+    public void sendBatch() {", "originalCommit": "9035b732d53185d7a7515b952c67787e839e8235", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b336e770f5154e679cf96d21e9080d61f0aa3e0c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientJavaDocCodeSamples.java b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientJavaDocCodeSamples.java\nindex 5e6a806ce64..553d0832b4b 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientJavaDocCodeSamples.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientJavaDocCodeSamples.java\n\n@@ -3,6 +3,7 @@\n \n package com.azure.messaging.servicebus;\n \n+import com.azure.identity.DefaultAzureCredentialBuilder;\n import com.azure.messaging.servicebus.models.CreateBatchOptions;\n import reactor.core.Exceptions;\n import reactor.core.publisher.Flux;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkxODMzMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9609#discussion_r398918331", "bodyText": "unneeded new line", "author": "conniey", "createdAt": "2020-03-26T21:59:47Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientJavaDocCodeSamples.java", "diffHunk": "@@ -0,0 +1,122 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.CreateBatchOptions;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Contains code snippets when generating javadocs through doclets for {@link ServiceBusSenderAsyncClient}.\n+ */\n+public class ServiceBusSenderAsyncClientJavaDocCodeSamples {\n+    private final ServiceBusClientBuilder builder = new ServiceBusClientBuilder()\n+        .connectionString(\"fake-string\");\n+\n+    /**\n+     * Code snippet demonstrating how to create an {@link ServiceBusSenderAsyncClient}.\n+     */\n+    public void instantiate() {\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncsenderclient.instantiation\n+        // The required parameter is a way to authenticate with Service Bus using credentials.\n+        // The connectionString provides a way to authenticate with Service Bus.\n+        ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n+            .connectionString(\n+                \"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key}\")\n+            .buildSenderClientBuilder()\n+            .entityName(\"<QUEUE-NAME>\")\n+            .buildAsyncClient();\n+        // END: com.azure.messaging.servicebus.servicebusasyncsenderclient.instantiation\n+\n+        sender.close();\n+    }\n+\n+    /**\n+     * Code snippet demonstrating how to send a batch to Service Bus queue or topic.\n+     */\n+    public void sendBatch() {\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncsenderclient.createBatch\n+        // The required parameter is a way to authenticate with Service Bus using credentials.\n+        // The connectionString provides a way to authenticate with Service Bus.\n+        ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n+            .connectionString(\n+                \"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key}\")\n+            .buildSenderClientBuilder()\n+            .entityName(\"<QUEUE-NAME>\")\n+            .buildAsyncClient();\n+\n+        // Creating a batch without options set, will allow for automatic routing of events to any partition.\n+        sender.createBatch().flatMap(batch -> {\n+            batch.tryAdd(new ServiceBusMessage(\"test-1\".getBytes(UTF_8)));\n+            batch.tryAdd(new ServiceBusMessage(\"test-2\".getBytes(UTF_8)));\n+            return sender.send(batch);\n+        }).subscribe(unused -> {\n+", "originalCommit": "9035b732d53185d7a7515b952c67787e839e8235", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b336e770f5154e679cf96d21e9080d61f0aa3e0c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientJavaDocCodeSamples.java b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientJavaDocCodeSamples.java\nindex 5e6a806ce64..553d0832b4b 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientJavaDocCodeSamples.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientJavaDocCodeSamples.java\n\n@@ -3,6 +3,7 @@\n \n package com.azure.messaging.servicebus;\n \n+import com.azure.identity.DefaultAzureCredentialBuilder;\n import com.azure.messaging.servicebus.models.CreateBatchOptions;\n import reactor.core.Exceptions;\n import reactor.core.publisher.Flux;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkxODQ0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9609#discussion_r398918441", "bodyText": "\"QUEUE OR TOPIC NAME\"", "author": "conniey", "createdAt": "2020-03-26T21:59:58Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientJavaDocCodeSamples.java", "diffHunk": "@@ -0,0 +1,122 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.CreateBatchOptions;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Contains code snippets when generating javadocs through doclets for {@link ServiceBusSenderAsyncClient}.\n+ */\n+public class ServiceBusSenderAsyncClientJavaDocCodeSamples {\n+    private final ServiceBusClientBuilder builder = new ServiceBusClientBuilder()\n+        .connectionString(\"fake-string\");\n+\n+    /**\n+     * Code snippet demonstrating how to create an {@link ServiceBusSenderAsyncClient}.\n+     */\n+    public void instantiate() {\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncsenderclient.instantiation\n+        // The required parameter is a way to authenticate with Service Bus using credentials.\n+        // The connectionString provides a way to authenticate with Service Bus.\n+        ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n+            .connectionString(\n+                \"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key}\")\n+            .buildSenderClientBuilder()\n+            .entityName(\"<QUEUE-NAME>\")\n+            .buildAsyncClient();\n+        // END: com.azure.messaging.servicebus.servicebusasyncsenderclient.instantiation\n+\n+        sender.close();\n+    }\n+\n+    /**\n+     * Code snippet demonstrating how to send a batch to Service Bus queue or topic.\n+     */\n+    public void sendBatch() {\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncsenderclient.createBatch\n+        // The required parameter is a way to authenticate with Service Bus using credentials.\n+        // The connectionString provides a way to authenticate with Service Bus.\n+        ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n+            .connectionString(\n+                \"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key}\")\n+            .buildSenderClientBuilder()\n+            .entityName(\"<QUEUE-NAME>\")", "originalCommit": "9035b732d53185d7a7515b952c67787e839e8235", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b336e770f5154e679cf96d21e9080d61f0aa3e0c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientJavaDocCodeSamples.java b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientJavaDocCodeSamples.java\nindex 5e6a806ce64..553d0832b4b 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientJavaDocCodeSamples.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientJavaDocCodeSamples.java\n\n@@ -3,6 +3,7 @@\n \n package com.azure.messaging.servicebus;\n \n+import com.azure.identity.DefaultAzureCredentialBuilder;\n import com.azure.messaging.servicebus.models.CreateBatchOptions;\n import reactor.core.Exceptions;\n import reactor.core.publisher.Flux;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkxOTIwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9609#discussion_r398919209", "bodyText": "is there a createBatch that takes an int parameter? I think the snippet text is wrong", "author": "conniey", "createdAt": "2020-03-26T22:01:29Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientJavaDocCodeSamples.java", "diffHunk": "@@ -0,0 +1,122 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.messaging.servicebus.models.CreateBatchOptions;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Contains code snippets when generating javadocs through doclets for {@link ServiceBusSenderAsyncClient}.\n+ */\n+public class ServiceBusSenderAsyncClientJavaDocCodeSamples {\n+    private final ServiceBusClientBuilder builder = new ServiceBusClientBuilder()\n+        .connectionString(\"fake-string\");\n+\n+    /**\n+     * Code snippet demonstrating how to create an {@link ServiceBusSenderAsyncClient}.\n+     */\n+    public void instantiate() {\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncsenderclient.instantiation\n+        // The required parameter is a way to authenticate with Service Bus using credentials.\n+        // The connectionString provides a way to authenticate with Service Bus.\n+        ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n+            .connectionString(\n+                \"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key}\")\n+            .buildSenderClientBuilder()\n+            .entityName(\"<QUEUE-NAME>\")\n+            .buildAsyncClient();\n+        // END: com.azure.messaging.servicebus.servicebusasyncsenderclient.instantiation\n+\n+        sender.close();\n+    }\n+\n+    /**\n+     * Code snippet demonstrating how to send a batch to Service Bus queue or topic.\n+     */\n+    public void sendBatch() {\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncsenderclient.createBatch\n+        // The required parameter is a way to authenticate with Service Bus using credentials.\n+        // The connectionString provides a way to authenticate with Service Bus.\n+        ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n+            .connectionString(\n+                \"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key}\")\n+            .buildSenderClientBuilder()\n+            .entityName(\"<QUEUE-NAME>\")\n+            .buildAsyncClient();\n+\n+        // Creating a batch without options set, will allow for automatic routing of events to any partition.\n+        sender.createBatch().flatMap(batch -> {\n+            batch.tryAdd(new ServiceBusMessage(\"test-1\".getBytes(UTF_8)));\n+            batch.tryAdd(new ServiceBusMessage(\"test-2\".getBytes(UTF_8)));\n+            return sender.send(batch);\n+        }).subscribe(unused -> {\n+\n+        },\n+            error -> System.err.println(\"Error occurred while sending batch:\" + error),\n+            () -> System.out.println(\"Send complete.\"));\n+        // END: com.azure.messaging.servicebus.servicebusasyncsenderclient.createBatch\n+\n+        sender.close();\n+    }\n+\n+\n+    /**\n+     * Code snippet demonstrating how to create a size-limited {@link ServiceBusMessageBatch} and send it.\n+     */\n+    public void batchSizeLimited() {\n+        final ServiceBusSenderAsyncClient sender = new ServiceBusClientBuilder()\n+            .buildSenderClientBuilder()\n+            .buildAsyncClient();\n+\n+        final ServiceBusMessage firstMessage = new ServiceBusMessage(\"92\".getBytes(UTF_8));\n+        firstMessage.getProperties().put(\"telemetry\", \"latency\");\n+        final ServiceBusMessage secondMessage = new ServiceBusMessage(\"98\".getBytes(UTF_8));\n+        secondMessage.getProperties().put(\"telemetry\", \"cpu-temperature\");\n+\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncsenderclient.createBatch#CreateBatchOptions-int", "originalCommit": "9035b732d53185d7a7515b952c67787e839e8235", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b336e770f5154e679cf96d21e9080d61f0aa3e0c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientJavaDocCodeSamples.java b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientJavaDocCodeSamples.java\nindex 5e6a806ce64..553d0832b4b 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientJavaDocCodeSamples.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientJavaDocCodeSamples.java\n\n@@ -3,6 +3,7 @@\n \n package com.azure.messaging.servicebus;\n \n+import com.azure.identity.DefaultAzureCredentialBuilder;\n import com.azure.messaging.servicebus.models.CreateBatchOptions;\n import reactor.core.Exceptions;\n import reactor.core.publisher.Flux;\n"}}, {"oid": "2cde7385be675d50ec1af7751faf12b907802144", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2cde7385be675d50ec1af7751faf12b907802144", "message": "added code snippets", "committedDate": "2020-03-26T22:10:23Z", "type": "commit"}, {"oid": "b336e770f5154e679cf96d21e9080d61f0aa3e0c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b336e770f5154e679cf96d21e9080d61f0aa3e0c", "message": "adding default token credential code snippet", "committedDate": "2020-03-26T23:39:43Z", "type": "commit"}, {"oid": "7aafca1c0053a296ec7077341069b5dfbf303b34", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7aafca1c0053a296ec7077341069b5dfbf303b34", "message": "adding default token credential code snippet", "committedDate": "2020-03-26T23:56:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2Nzc2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9609#discussion_r398967765", "bodyText": "nit: empty line.", "author": "conniey", "createdAt": "2020-03-27T00:20:45Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientJavaDocCodeSamples.java", "diffHunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import org.reactivestreams.Subscription;\n+import reactor.core.Disposable;\n+import reactor.core.publisher.BaseSubscriber;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Code snippets demonstrating various {@link ServiceBusReceiverAsyncClient} scenarios.\n+ */\n+public class ServiceBusReceiverAsyncClientJavaDocCodeSamples {\n+\n+    private final ServiceBusReceiverAsyncClient consumer = new ServiceBusClientBuilder()\n+        .connectionString(\"fake-string\")\n+        .buildReceiverClientBuilder()\n+        .queueName(\"<QUEUE-NAME>\")\n+        .buildAsyncClient();\n+\n+    public void initialization() {\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiation\n+        // The required parameters is connectionString, a way to authenticate with Service Bus using credentials.\n+        ServiceBusReceiverAsyncClient consumer = new ServiceBusClientBuilder()\n+            .connectionString(\"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};\"\n+                + \"SharedAccessKey={key};EntityPath={eh-name}\")\n+            .buildReceiverClientBuilder()\n+            .queueName(\"<QUEUE-NAME>\")\n+            .buildAsyncClient();\n+        // END: com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiation\n+\n+        consumer.close();\n+    }\n+\n+    public void instantiateWithDefaultCredential() {\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiateWithDefaultCredential\n+        // The required parameters is connectionString, a way to authenticate with Service Bus using credentials.\n+        ServiceBusReceiverAsyncClient consumer = new ServiceBusClientBuilder()\n+            .credential(\"<<fully-qualified-namespace>>\",\n+                new DefaultAzureCredentialBuilder().build())\n+            .buildReceiverClientBuilder()\n+            .queueName(\"<QUEUE-NAME>\")\n+            .buildAsyncClient();\n+        // END: com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiateWithDefaultCredential\n+\n+        consumer.close();\n+    }\n+\n+    /**\n+     * Receives message from a queue or topic.\n+     */\n+    public void receive() {\n+        ServiceBusReceiverAsyncClient receiver = new ServiceBusClientBuilder()\n+            .connectionString(\"fake-string\")\n+            .buildReceiverClientBuilder()\n+            .buildAsyncClient();\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncreceiverclient.receive#message\n+\n+\n+        // Keep a reference to `subscription`. When the program is finished receiving messages, call\n+        // subscription.dispose(). This will stop fetching messages from the Service Bus.\n+        Disposable subscription = receiver.receive()\n+            .take(1)\n+            .subscribe(receivedMessage -> {\n+                String messageId = receivedMessage.getMessageId();\n+\n+                System.out.printf(\"Received message messageId %s%n\", messageId);\n+                System.out.printf(\"Contents of message as string: %s%n\", new String(receivedMessage.getBody(), UTF_8));\n+            }, error -> System.err.print(error.toString()));\n+        // END: com.azure.messaging.servicebus.servicebusasyncreceiverclient.receive#message\n+\n+        // When program ends, or you're done receiving all messages.\n+        subscription.dispose();\n+    }\n+\n+    /**\n+     * Receives message with back pressure.\n+     */\n+    public void receiveBackpressure() {\n+\n+        ServiceBusReceiverAsyncClient receiver = new ServiceBusClientBuilder()\n+            .connectionString(\"fake-string\")\n+            .buildReceiverClientBuilder()\n+            .queueName(\"<QUEUE-NAME>\")\n+            .buildAsyncClient();\n+\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncreceiverclient.receive#basesubscriber\n+        receiver.receive().subscribe(new BaseSubscriber<ServiceBusReceivedMessage>() {\n+            private static final int NUMBER_OF_MESSAGES = 5;\n+            private final AtomicInteger currentNumberOfMessages = new AtomicInteger();\n+\n+            @Override\n+            protected void hookOnSubscribe(Subscription subscription) {\n+                // Tell the Publisher we only want 5 message at a time.\n+                request(NUMBER_OF_MESSAGES);\n+            }\n+\n+            @Override\n+            protected void hookOnNext(ServiceBusReceivedMessage value) {\n+                // Process the ServiceBusReceivedMessage\n+\n+                // If the number of messages we have currently received is a multiple of 5, that means we have reached\n+                // the last message the Subscriber will provide to us. Invoking request(long) here, tells the Publisher\n+                // that the subscriber is ready to get more messages from upstream.\n+                if (currentNumberOfMessages.incrementAndGet() % 5 == 0) {\n+                    request(NUMBER_OF_MESSAGES);\n+                }\n+            }\n+        });\n+        // END: com.azure.messaging.servicebus.servicebusasyncreceiverclient.receive#basesubscriber\n+    }\n+\n+    /**\n+     * Receives from all the messages.\n+     */\n+    public void receiveAll() {\n+        ServiceBusReceiverAsyncClient receiver = new ServiceBusClientBuilder()\n+            .connectionString(\"fake-string\")\n+            .buildReceiverClientBuilder()\n+            .buildAsyncClient();\n+\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncreceiverclient.receive#all\n+", "originalCommit": "7aafca1c0053a296ec7077341069b5dfbf303b34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80eccc8c59294cc94974ce384e6e32f25c7cfe71", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientJavaDocCodeSamples.java b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientJavaDocCodeSamples.java\nindex 27355a9bb4b..cc55aaa66fe 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientJavaDocCodeSamples.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientJavaDocCodeSamples.java\n\n@@ -4,6 +4,7 @@\n package com.azure.messaging.servicebus;\n \n import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n import org.reactivestreams.Subscription;\n import reactor.core.Disposable;\n import reactor.core.publisher.BaseSubscriber;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2Nzg1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9609#discussion_r398967851", "bodyText": "you need to specify queueName or topicName + subscription.", "author": "conniey", "createdAt": "2020-03-27T00:21:05Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientJavaDocCodeSamples.java", "diffHunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import org.reactivestreams.Subscription;\n+import reactor.core.Disposable;\n+import reactor.core.publisher.BaseSubscriber;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Code snippets demonstrating various {@link ServiceBusReceiverAsyncClient} scenarios.\n+ */\n+public class ServiceBusReceiverAsyncClientJavaDocCodeSamples {\n+\n+    private final ServiceBusReceiverAsyncClient consumer = new ServiceBusClientBuilder()\n+        .connectionString(\"fake-string\")\n+        .buildReceiverClientBuilder()\n+        .queueName(\"<QUEUE-NAME>\")\n+        .buildAsyncClient();\n+\n+    public void initialization() {\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiation\n+        // The required parameters is connectionString, a way to authenticate with Service Bus using credentials.\n+        ServiceBusReceiverAsyncClient consumer = new ServiceBusClientBuilder()\n+            .connectionString(\"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};\"\n+                + \"SharedAccessKey={key};EntityPath={eh-name}\")\n+            .buildReceiverClientBuilder()\n+            .queueName(\"<QUEUE-NAME>\")\n+            .buildAsyncClient();\n+        // END: com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiation\n+\n+        consumer.close();\n+    }\n+\n+    public void instantiateWithDefaultCredential() {\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiateWithDefaultCredential\n+        // The required parameters is connectionString, a way to authenticate with Service Bus using credentials.\n+        ServiceBusReceiverAsyncClient consumer = new ServiceBusClientBuilder()\n+            .credential(\"<<fully-qualified-namespace>>\",\n+                new DefaultAzureCredentialBuilder().build())\n+            .buildReceiverClientBuilder()\n+            .queueName(\"<QUEUE-NAME>\")\n+            .buildAsyncClient();\n+        // END: com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiateWithDefaultCredential\n+\n+        consumer.close();\n+    }\n+\n+    /**\n+     * Receives message from a queue or topic.\n+     */\n+    public void receive() {\n+        ServiceBusReceiverAsyncClient receiver = new ServiceBusClientBuilder()\n+            .connectionString(\"fake-string\")\n+            .buildReceiverClientBuilder()\n+            .buildAsyncClient();\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncreceiverclient.receive#message\n+\n+\n+        // Keep a reference to `subscription`. When the program is finished receiving messages, call\n+        // subscription.dispose(). This will stop fetching messages from the Service Bus.\n+        Disposable subscription = receiver.receive()\n+            .take(1)\n+            .subscribe(receivedMessage -> {\n+                String messageId = receivedMessage.getMessageId();\n+\n+                System.out.printf(\"Received message messageId %s%n\", messageId);\n+                System.out.printf(\"Contents of message as string: %s%n\", new String(receivedMessage.getBody(), UTF_8));\n+            }, error -> System.err.print(error.toString()));\n+        // END: com.azure.messaging.servicebus.servicebusasyncreceiverclient.receive#message\n+\n+        // When program ends, or you're done receiving all messages.\n+        subscription.dispose();\n+    }\n+\n+    /**\n+     * Receives message with back pressure.\n+     */\n+    public void receiveBackpressure() {\n+\n+        ServiceBusReceiverAsyncClient receiver = new ServiceBusClientBuilder()\n+            .connectionString(\"fake-string\")\n+            .buildReceiverClientBuilder()\n+            .queueName(\"<QUEUE-NAME>\")\n+            .buildAsyncClient();\n+\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncreceiverclient.receive#basesubscriber\n+        receiver.receive().subscribe(new BaseSubscriber<ServiceBusReceivedMessage>() {\n+            private static final int NUMBER_OF_MESSAGES = 5;\n+            private final AtomicInteger currentNumberOfMessages = new AtomicInteger();\n+\n+            @Override\n+            protected void hookOnSubscribe(Subscription subscription) {\n+                // Tell the Publisher we only want 5 message at a time.\n+                request(NUMBER_OF_MESSAGES);\n+            }\n+\n+            @Override\n+            protected void hookOnNext(ServiceBusReceivedMessage value) {\n+                // Process the ServiceBusReceivedMessage\n+\n+                // If the number of messages we have currently received is a multiple of 5, that means we have reached\n+                // the last message the Subscriber will provide to us. Invoking request(long) here, tells the Publisher\n+                // that the subscriber is ready to get more messages from upstream.\n+                if (currentNumberOfMessages.incrementAndGet() % 5 == 0) {\n+                    request(NUMBER_OF_MESSAGES);\n+                }\n+            }\n+        });\n+        // END: com.azure.messaging.servicebus.servicebusasyncreceiverclient.receive#basesubscriber\n+    }\n+\n+    /**\n+     * Receives from all the messages.\n+     */\n+    public void receiveAll() {\n+        ServiceBusReceiverAsyncClient receiver = new ServiceBusClientBuilder()\n+            .connectionString(\"fake-string\")\n+            .buildReceiverClientBuilder()\n+            .buildAsyncClient();", "originalCommit": "7aafca1c0053a296ec7077341069b5dfbf303b34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80eccc8c59294cc94974ce384e6e32f25c7cfe71", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientJavaDocCodeSamples.java b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientJavaDocCodeSamples.java\nindex 27355a9bb4b..cc55aaa66fe 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientJavaDocCodeSamples.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientJavaDocCodeSamples.java\n\n@@ -4,6 +4,7 @@\n package com.azure.messaging.servicebus;\n \n import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n import org.reactivestreams.Subscription;\n import reactor.core.Disposable;\n import reactor.core.publisher.BaseSubscriber;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2Nzk1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9609#discussion_r398967957", "bodyText": "you need to specify queueName or topicName + subscription.", "author": "conniey", "createdAt": "2020-03-27T00:21:32Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientJavaDocCodeSamples.java", "diffHunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import org.reactivestreams.Subscription;\n+import reactor.core.Disposable;\n+import reactor.core.publisher.BaseSubscriber;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Code snippets demonstrating various {@link ServiceBusReceiverAsyncClient} scenarios.\n+ */\n+public class ServiceBusReceiverAsyncClientJavaDocCodeSamples {\n+\n+    private final ServiceBusReceiverAsyncClient consumer = new ServiceBusClientBuilder()\n+        .connectionString(\"fake-string\")\n+        .buildReceiverClientBuilder()\n+        .queueName(\"<QUEUE-NAME>\")\n+        .buildAsyncClient();\n+\n+    public void initialization() {\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiation\n+        // The required parameters is connectionString, a way to authenticate with Service Bus using credentials.\n+        ServiceBusReceiverAsyncClient consumer = new ServiceBusClientBuilder()\n+            .connectionString(\"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};\"\n+                + \"SharedAccessKey={key};EntityPath={eh-name}\")\n+            .buildReceiverClientBuilder()\n+            .queueName(\"<QUEUE-NAME>\")\n+            .buildAsyncClient();\n+        // END: com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiation\n+\n+        consumer.close();\n+    }\n+\n+    public void instantiateWithDefaultCredential() {\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiateWithDefaultCredential\n+        // The required parameters is connectionString, a way to authenticate with Service Bus using credentials.\n+        ServiceBusReceiverAsyncClient consumer = new ServiceBusClientBuilder()\n+            .credential(\"<<fully-qualified-namespace>>\",\n+                new DefaultAzureCredentialBuilder().build())\n+            .buildReceiverClientBuilder()\n+            .queueName(\"<QUEUE-NAME>\")\n+            .buildAsyncClient();\n+        // END: com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiateWithDefaultCredential\n+\n+        consumer.close();\n+    }\n+\n+    /**\n+     * Receives message from a queue or topic.\n+     */\n+    public void receive() {\n+        ServiceBusReceiverAsyncClient receiver = new ServiceBusClientBuilder()\n+            .connectionString(\"fake-string\")\n+            .buildReceiverClientBuilder()", "originalCommit": "7aafca1c0053a296ec7077341069b5dfbf303b34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80eccc8c59294cc94974ce384e6e32f25c7cfe71", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientJavaDocCodeSamples.java b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientJavaDocCodeSamples.java\nindex 27355a9bb4b..cc55aaa66fe 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientJavaDocCodeSamples.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientJavaDocCodeSamples.java\n\n@@ -4,6 +4,7 @@\n package com.azure.messaging.servicebus;\n \n import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n import org.reactivestreams.Subscription;\n import reactor.core.Disposable;\n import reactor.core.publisher.BaseSubscriber;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2ODE3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9609#discussion_r398968173", "bodyText": "You need to dispose of consumer as well, like you did in other samples. (even if it doesn't appear in the snippet.)", "author": "conniey", "createdAt": "2020-03-27T00:22:20Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientJavaDocCodeSamples.java", "diffHunk": "@@ -0,0 +1,140 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.messaging.servicebus;\n+\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import org.reactivestreams.Subscription;\n+import reactor.core.Disposable;\n+import reactor.core.publisher.BaseSubscriber;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Code snippets demonstrating various {@link ServiceBusReceiverAsyncClient} scenarios.\n+ */\n+public class ServiceBusReceiverAsyncClientJavaDocCodeSamples {\n+\n+    private final ServiceBusReceiverAsyncClient consumer = new ServiceBusClientBuilder()\n+        .connectionString(\"fake-string\")\n+        .buildReceiverClientBuilder()\n+        .queueName(\"<QUEUE-NAME>\")\n+        .buildAsyncClient();\n+\n+    public void initialization() {\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiation\n+        // The required parameters is connectionString, a way to authenticate with Service Bus using credentials.\n+        ServiceBusReceiverAsyncClient consumer = new ServiceBusClientBuilder()\n+            .connectionString(\"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};\"\n+                + \"SharedAccessKey={key};EntityPath={eh-name}\")\n+            .buildReceiverClientBuilder()\n+            .queueName(\"<QUEUE-NAME>\")\n+            .buildAsyncClient();\n+        // END: com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiation\n+\n+        consumer.close();\n+    }\n+\n+    public void instantiateWithDefaultCredential() {\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiateWithDefaultCredential\n+        // The required parameters is connectionString, a way to authenticate with Service Bus using credentials.\n+        ServiceBusReceiverAsyncClient consumer = new ServiceBusClientBuilder()\n+            .credential(\"<<fully-qualified-namespace>>\",\n+                new DefaultAzureCredentialBuilder().build())\n+            .buildReceiverClientBuilder()\n+            .queueName(\"<QUEUE-NAME>\")\n+            .buildAsyncClient();\n+        // END: com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiateWithDefaultCredential\n+\n+        consumer.close();\n+    }\n+\n+    /**\n+     * Receives message from a queue or topic.\n+     */\n+    public void receive() {\n+        ServiceBusReceiverAsyncClient receiver = new ServiceBusClientBuilder()\n+            .connectionString(\"fake-string\")\n+            .buildReceiverClientBuilder()\n+            .buildAsyncClient();\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncreceiverclient.receive#message\n+\n+\n+        // Keep a reference to `subscription`. When the program is finished receiving messages, call\n+        // subscription.dispose(). This will stop fetching messages from the Service Bus.\n+        Disposable subscription = receiver.receive()\n+            .take(1)\n+            .subscribe(receivedMessage -> {\n+                String messageId = receivedMessage.getMessageId();\n+\n+                System.out.printf(\"Received message messageId %s%n\", messageId);\n+                System.out.printf(\"Contents of message as string: %s%n\", new String(receivedMessage.getBody(), UTF_8));\n+            }, error -> System.err.print(error.toString()));\n+        // END: com.azure.messaging.servicebus.servicebusasyncreceiverclient.receive#message\n+\n+        // When program ends, or you're done receiving all messages.\n+        subscription.dispose();\n+    }\n+\n+    /**\n+     * Receives message with back pressure.\n+     */\n+    public void receiveBackpressure() {\n+\n+        ServiceBusReceiverAsyncClient receiver = new ServiceBusClientBuilder()\n+            .connectionString(\"fake-string\")\n+            .buildReceiverClientBuilder()\n+            .queueName(\"<QUEUE-NAME>\")\n+            .buildAsyncClient();\n+\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncreceiverclient.receive#basesubscriber\n+        receiver.receive().subscribe(new BaseSubscriber<ServiceBusReceivedMessage>() {\n+            private static final int NUMBER_OF_MESSAGES = 5;\n+            private final AtomicInteger currentNumberOfMessages = new AtomicInteger();\n+\n+            @Override\n+            protected void hookOnSubscribe(Subscription subscription) {\n+                // Tell the Publisher we only want 5 message at a time.\n+                request(NUMBER_OF_MESSAGES);\n+            }\n+\n+            @Override\n+            protected void hookOnNext(ServiceBusReceivedMessage value) {\n+                // Process the ServiceBusReceivedMessage\n+\n+                // If the number of messages we have currently received is a multiple of 5, that means we have reached\n+                // the last message the Subscriber will provide to us. Invoking request(long) here, tells the Publisher\n+                // that the subscriber is ready to get more messages from upstream.\n+                if (currentNumberOfMessages.incrementAndGet() % 5 == 0) {\n+                    request(NUMBER_OF_MESSAGES);\n+                }\n+            }\n+        });\n+        // END: com.azure.messaging.servicebus.servicebusasyncreceiverclient.receive#basesubscriber\n+    }\n+\n+    /**\n+     * Receives from all the messages.\n+     */\n+    public void receiveAll() {\n+        ServiceBusReceiverAsyncClient receiver = new ServiceBusClientBuilder()\n+            .connectionString(\"fake-string\")\n+            .buildReceiverClientBuilder()\n+            .buildAsyncClient();\n+\n+        // BEGIN: com.azure.messaging.servicebus.servicebusasyncreceiverclient.receive#all\n+\n+        Disposable subscription = receiver.receive().subscribe(receivedMessage -> {\n+            String messageId = receivedMessage.getMessageId();\n+\n+            System.out.printf(\"Received message messageId %s%n\", messageId);\n+            System.out.printf(\"Contents of message as string: %s%n\", new String(receivedMessage.getBody(), UTF_8));\n+        });\n+\n+        // When program ends, or you're done receiving all messages.\n+        subscription.dispose();\n+        // END: com.azure.messaging.servicebus.servicebusasyncreceiverclient.receive#all\n+    }", "originalCommit": "7aafca1c0053a296ec7077341069b5dfbf303b34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80eccc8c59294cc94974ce384e6e32f25c7cfe71", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientJavaDocCodeSamples.java b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientJavaDocCodeSamples.java\nindex 27355a9bb4b..cc55aaa66fe 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientJavaDocCodeSamples.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientJavaDocCodeSamples.java\n\n@@ -4,6 +4,7 @@\n package com.azure.messaging.servicebus;\n \n import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.messaging.servicebus.models.ReceiveMode;\n import org.reactivestreams.Subscription;\n import reactor.core.Disposable;\n import reactor.core.publisher.BaseSubscriber;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2ODU0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9609#discussion_r398968544", "bodyText": "\"Receive a message from Service Bus resource\"", "author": "conniey", "createdAt": "2020-03-27T00:23:36Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -36,9 +37,25 @@\n  * An <b>asynchronous</b> receiver responsible for receiving {@link ServiceBusReceivedMessage} from a specific queue or\n  * topic on Azure Service Bus.\n  *\n+ * <p><strong>Create an instance of receiver</strong></p>\n+ * {@codesnippet com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiation}\n+ *\n+ * <p><strong>Create an instance of sender using default credential</strong></p>\n+ * {@codesnippet com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiateWithDefaultCredential}\n+ *\n+ * <p><strong>Create a sender and receive message from Service Bus resource</strong></p>", "originalCommit": "7aafca1c0053a296ec7077341069b5dfbf303b34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80eccc8c59294cc94974ce384e6e32f25c7cfe71", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex aa314c63e33..a52e37d8674 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -43,12 +43,12 @@ import java.util.concurrent.atomic.AtomicBoolean;\n  * <p><strong>Create an instance of sender using default credential</strong></p>\n  * {@codesnippet com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiateWithDefaultCredential}\n  *\n- * <p><strong>Create a sender and receive message from Service Bus resource</strong></p>\n- * {@codesnippet com.azure.messaging.servicebus.servicebusasyncreceiverclient.receive#message}\n- *\n- * <p><strong>Create a sender and receive all the messages from Service Bus resource</strong></p>\n+ * <p><strong>Receive all messages from Service Bus resource</strong></p>\n  * {@codesnippet com.azure.messaging.servicebus.servicebusasyncreceiverclient.receive#all }\n  *\n+ * <p><strong>Receive messages in {@link ReceiveMode#RECEIVE_AND_DELETE} mode from Service Bus resource</strong></p>\n+ * {@codesnippet com.azure.messaging.servicebus.servicebusasyncreceiverclient.receiveWithReceiveAndDeleteMode }\n+ *\n  * <p><strong>Rate limiting consumption of messages from Service Bus resource</strong></p>\n  * <p>For message receivers that need to limit the number of messages they receive at a given time, they can use\n  * {@link BaseSubscriber#request(long)}.</p>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2ODczMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9609#discussion_r398968733", "bodyText": "This is very similar to the one above. I don't think you need to show the \".take(1)\" example, and instead create with some receive message options like RECEIVE_AND_DELETE or auto renew lock.", "author": "conniey", "createdAt": "2020-03-27T00:24:16Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -36,9 +37,25 @@\n  * An <b>asynchronous</b> receiver responsible for receiving {@link ServiceBusReceivedMessage} from a specific queue or\n  * topic on Azure Service Bus.\n  *\n+ * <p><strong>Create an instance of receiver</strong></p>\n+ * {@codesnippet com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiation}\n+ *\n+ * <p><strong>Create an instance of sender using default credential</strong></p>\n+ * {@codesnippet com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiateWithDefaultCredential}\n+ *\n+ * <p><strong>Create a sender and receive message from Service Bus resource</strong></p>\n+ * {@codesnippet com.azure.messaging.servicebus.servicebusasyncreceiverclient.receive#message}\n+ *\n+ * <p><strong>Create a sender and receive all the messages from Service Bus resource</strong></p>\n+ * {@codesnippet com.azure.messaging.servicebus.servicebusasyncreceiverclient.receive#all }", "originalCommit": "7aafca1c0053a296ec7077341069b5dfbf303b34", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "80eccc8c59294cc94974ce384e6e32f25c7cfe71", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex aa314c63e33..a52e37d8674 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -43,12 +43,12 @@ import java.util.concurrent.atomic.AtomicBoolean;\n  * <p><strong>Create an instance of sender using default credential</strong></p>\n  * {@codesnippet com.azure.messaging.servicebus.servicebusasyncreceiverclient.instantiateWithDefaultCredential}\n  *\n- * <p><strong>Create a sender and receive message from Service Bus resource</strong></p>\n- * {@codesnippet com.azure.messaging.servicebus.servicebusasyncreceiverclient.receive#message}\n- *\n- * <p><strong>Create a sender and receive all the messages from Service Bus resource</strong></p>\n+ * <p><strong>Receive all messages from Service Bus resource</strong></p>\n  * {@codesnippet com.azure.messaging.servicebus.servicebusasyncreceiverclient.receive#all }\n  *\n+ * <p><strong>Receive messages in {@link ReceiveMode#RECEIVE_AND_DELETE} mode from Service Bus resource</strong></p>\n+ * {@codesnippet com.azure.messaging.servicebus.servicebusasyncreceiverclient.receiveWithReceiveAndDeleteMode }\n+ *\n  * <p><strong>Rate limiting consumption of messages from Service Bus resource</strong></p>\n  * <p>For message receivers that need to limit the number of messages they receive at a given time, they can use\n  * {@link BaseSubscriber#request(long)}.</p>\n"}}, {"oid": "80eccc8c59294cc94974ce384e6e32f25c7cfe71", "url": "https://github.com/Azure/azure-sdk-for-java/commit/80eccc8c59294cc94974ce384e6e32f25c7cfe71", "message": "adding receive and delete mode example", "committedDate": "2020-03-27T01:33:50Z", "type": "commit"}]}