{"pr_number": 8679, "pr_title": "Added Okhttp and ServiceVesion into client test framework", "pr_createdAt": "2020-03-03T18:22:43Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/8679", "timeline": [{"oid": "949e0cb3c3ef03eafb915e5dc3626d91239605f4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/949e0cb3c3ef03eafb915e5dc3626d91239605f4", "message": "Initial checkin for adding okhttp", "committedDate": "2020-03-04T00:46:13Z", "type": "commit"}, {"oid": "949e0cb3c3ef03eafb915e5dc3626d91239605f4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/949e0cb3c3ef03eafb915e5dc3626d91239605f4", "message": "Initial checkin for adding okhttp", "committedDate": "2020-03-04T00:46:13Z", "type": "forcePushed"}, {"oid": "4f8707e49f48b828780178a93d542c2f6206d48d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4f8707e49f48b828780178a93d542c2f6206d48d", "message": "Fixed linting", "committedDate": "2020-03-04T00:49:19Z", "type": "commit"}, {"oid": "81369b78f67aabe4df8e5989d29722b0a41a05f0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/81369b78f67aabe4df8e5989d29722b0a41a05f0", "message": "Make change on test scope", "committedDate": "2020-03-04T00:52:02Z", "type": "commit"}, {"oid": "54e59503a4f986a2b1299153aa63455353841488", "url": "https://github.com/Azure/azure-sdk-for-java/commit/54e59503a4f986a2b1299153aa63455353841488", "message": "make initial changes on okhttp", "committedDate": "2020-03-04T19:00:08Z", "type": "commit"}, {"oid": "6d67069c23dd635263bb6d29e04f382086b298cc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6d67069c23dd635263bb6d29e04f382086b298cc", "message": "Parameterized HttpClient and ServiceVersion tests for AppConfiguration", "committedDate": "2020-03-04T20:22:20Z", "type": "commit"}, {"oid": "3f5da1b10becab02fc293c933a84347abce20321", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3f5da1b10becab02fc293c933a84347abce20321", "message": "Add javadoc", "committedDate": "2020-03-04T20:30:07Z", "type": "commit"}, {"oid": "041ad351047da313a83c6f475f4012b8fe02017d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/041ad351047da313a83c6f475f4012b8fe02017d", "message": "Fix version tag", "committedDate": "2020-03-04T21:15:22Z", "type": "commit"}, {"oid": "343945cc0e7ea5f22ed7e7c79d53bfb1622c8a7f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/343945cc0e7ea5f22ed7e7c79d53bfb1622c8a7f", "message": "Add opens to appconfig junit 5 module", "committedDate": "2020-03-04T21:19:21Z", "type": "commit"}, {"oid": "45d17cf61100ab81f5c0eba5904745b8def334cd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/45d17cf61100ab81f5c0eba5904745b8def334cd", "message": "Fix typo", "committedDate": "2020-03-04T21:50:06Z", "type": "commit"}, {"oid": "e69e64d37cff9b5225eef7f6b2f3e83815b0987c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e69e64d37cff9b5225eef7f6b2f3e83815b0987c", "message": "remove unused imports", "committedDate": "2020-03-04T22:07:34Z", "type": "commit"}, {"oid": "c3350c452c383d4a2cbb869c54fa2c396ccdb252", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c3350c452c383d4a2cbb869c54fa2c396ccdb252", "message": "Include okhttp in pom.service.xml", "committedDate": "2020-03-04T23:52:04Z", "type": "commit"}, {"oid": "3ab6ab61e1d0900b31067c765ddd6fead2718cbd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3ab6ab61e1d0900b31067c765ddd6fead2718cbd", "message": "Make changes to appconfig", "committedDate": "2020-03-05T12:59:23Z", "type": "commit"}, {"oid": "e27144ead62a3ae148168d38de927a001fdab3ed", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e27144ead62a3ae148168d38de927a001fdab3ed", "message": "Fixed failed tests", "committedDate": "2020-03-05T13:59:46Z", "type": "commit"}, {"oid": "b5d6aebf56356904a824f709397b1aa3b06a48a3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b5d6aebf56356904a824f709397b1aa3b06a48a3", "message": "Fixed linting", "committedDate": "2020-03-05T16:47:55Z", "type": "commit"}, {"oid": "05ae2990ab5251e409df628386b4e0069e030e50", "url": "https://github.com/Azure/azure-sdk-for-java/commit/05ae2990ab5251e409df628386b4e0069e030e50", "message": "Checkin certificate changes, and partial key changes for keyVaule", "committedDate": "2020-03-05T18:18:52Z", "type": "commit"}, {"oid": "e2475928ecdda5741557f073170e126d8ded29d2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e2475928ecdda5741557f073170e126d8ded29d2", "message": "Fixed linting", "committedDate": "2020-03-05T18:22:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NDY0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388484648", "bodyText": "Not a huge fan that every test will need to become parameterized to test each client, are there any ways to abstract this into Azure Core Test or does JUnit have the ability to parameterize an entire test run?", "author": "alzimmermsft", "createdAt": "2020-03-05T18:37:28Z", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationAsyncClientTest.java", "diffHunk": "@@ -91,17 +97,21 @@ public void addConfigurationSetting() {\n     /**\n      * Tests that we cannot add a configuration setting when the key is an empty string.\n      */\n-    @Test\n-    public void addConfigurationSettingEmptyKey() {\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"getTestParameters\")\n+    public void addConfigurationSettingEmptyKey(HttpClient httpClient, ConfigurationServiceVersion serviceVersion) {", "originalCommit": "e2475928ecdda5741557f073170e126d8ded29d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNTUzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r389415536", "bodyText": "JUnit 4 did support this, but as far as I know, JUnit 5 does not - you now parameterise each test separately.", "author": "JonathanGiles", "createdAt": "2020-03-08T23:04:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NDY0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwNzU1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r389907558", "bodyText": "First, I'd like to see a description so I can understand why these changes are necessary. Second, I don't believe that pom.xml isn't the correct place to add a core dependency.\n\nThanks for suggestion! Added the description.", "author": "sima-zhu", "createdAt": "2020-03-09T19:19:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NDY0OA=="}], "type": "inlineReview", "revised_code": {"commit": "419a88a29fae75bf94e8a4f2b88b59706eec5625", "chunk": "diff --git a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationAsyncClientTest.java b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationAsyncClientTest.java\nindex 971786299f3..1cb91a04c38 100644\n--- a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationAsyncClientTest.java\n+++ b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationAsyncClientTest.java\n\n@@ -98,7 +99,7 @@ public class ConfigurationAsyncClientTest extends ConfigurationClientTestBase {\n      * Tests that we cannot add a configuration setting when the key is an empty string.\n      */\n     @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n-    @MethodSource(\"getTestParameters\")\n+    @MethodSource(\"com.azure.data.appconfiguration.TestHelper#getTestParameters\")\n     public void addConfigurationSettingEmptyKey(HttpClient httpClient, ConfigurationServiceVersion serviceVersion) {\n         client = getConfigurationAsyncClient(httpClient, serviceVersion);\n         StepVerifier.create(client.addConfigurationSetting(\"\", null, \"A value\"))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NjU4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388486586", "bodyText": "I don't think we would want to add APIs into our production code to just handle testing.", "author": "alzimmermsft", "createdAt": "2020-03-05T18:41:18Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/implementation/http/HttpClientProviders.java", "diffHunk": "@@ -34,4 +36,19 @@ public static HttpClient createInstance() {\n         }\n         return defaultProvider.createInstance();\n     }\n+\n+    /**\n+     * Returns a list of all {@link HttpClient HttpClients} that are discovered in the classpath.\n+     *\n+     * @return A list of all {@link HttpClient HttpClients} discovered in the classpath.\n+     */\n+    public static List<HttpClient> getAllHttpClients() {", "originalCommit": "e2475928ecdda5741557f073170e126d8ded29d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwMTAxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388501011", "bodyText": "This is decided by Srikanta and Jonathan. @srnagar introduce the logic here. We want to expose the clients to test framework, so we are able to get all clients from test without manual adding clients in test every time. It is under implementation, the only pain is to expose the API to azure-core-test. I think we agree to approach in this way.", "author": "sima-zhu", "createdAt": "2020-03-05T19:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NjU4Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "7ce1cc987ecbdf0d182b7cd0cb02bc5f3297641b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7ce1cc987ecbdf0d182b7cd0cb02bc5f3297641b", "message": "Update pom.xml", "committedDate": "2020-03-05T19:00:24Z", "type": "commit"}, {"oid": "034cb7d6568fefb4f7a49a2147dc093804e55563", "url": "https://github.com/Azure/azure-sdk-for-java/commit/034cb7d6568fefb4f7a49a2147dc093804e55563", "message": "Update pom.xml", "committedDate": "2020-03-05T19:01:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4NzE4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388487184", "bodyText": "Instead of casting this to ConfigurationServiceVersion, the method can directly take in ConfigurationServiceVersion instead of ServiceVersion", "author": "srnagar", "createdAt": "2020-03-05T18:42:25Z", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java", "diffHunk": "@@ -42,20 +53,43 @@ public void setup() throws InvalidKeyException, NoSuchAlgorithmException {\n \n             String endpoint = new ConfigurationClientCredentials(connectionString).getBaseUri();\n             client = new ConfigurationClientBuilder()\n+                .httpClient(httpClient)\n                 .credential(tokenCredential)\n                 .endpoint(endpoint)\n                 .addPolicy(interceptorManager.getRecordPolicy()) // Record\n+                .serviceVersion(serviceVersion)\n                 .buildClient();\n         }\n     }\n \n-    @Test\n-    public void aadAuthenticationAzConfigClient() {\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"getTestParameters\")\n+    public void aadAuthenticationAzConfigClient(HttpClient httpClient, ServiceVersion serviceVersion) throws Exception {\n+        setup(httpClient, (ConfigurationServiceVersion) serviceVersion);", "originalCommit": "e2475928ecdda5741557f073170e126d8ded29d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0036776f1113d9b04ef776acffcc4654d2d82b7", "chunk": "diff --git a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java\nindex 0f7c7169410..cb58d06a1ce 100644\n--- a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java\n+++ b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java\n\n@@ -74,22 +74,4 @@ public class AadCredentialTest extends TestBase {\n         Assertions.assertEquals(addedSetting.getValue(), value);\n     }\n \n-    /**\n-     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n-     * service versions that should be tested.\n-     *\n-     * @return A stream of HttpClient and service version combinations to test.\n-     */\n-    protected Stream<Arguments> getTestParameters() {\n-        // when this issues is closed, the newer version of junit will have better support for\n-        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n-        List<Arguments> argumentsList = new ArrayList<>();\n-        getHttpClients()\n-            .forEach(httpClient -> {\n-                for (ConfigurationServiceVersion serviceVersion : ConfigurationServiceVersion.values()) {\n-                    argumentsList.add(Arguments.of(httpClient, serviceVersion));\n-                }\n-            });\n-        return argumentsList.stream();\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTAxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388491013", "bodyText": "Should this include service version too?", "author": "srnagar", "createdAt": "2020-03-05T18:49:47Z", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java", "diffHunk": "@@ -113,8 +123,9 @@ public void timeoutPolicy() {\n         assertThrows(RuntimeException.class, () -> client.setConfigurationSetting(key, null, value));\n     }\n \n-    @Test\n-    public void nullServiceVersion() {\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"getTestParameters\")\n+    public void nullServiceVersion(HttpClient httpClient) {", "originalCommit": "e2475928ecdda5741557f073170e126d8ded29d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwMjgzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388502838", "bodyText": "This is testing null Service Version.\nI test it. It is working for not adding version. The display name makes more sense", "author": "sima-zhu", "createdAt": "2020-03-05T19:10:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTAxMw=="}], "type": "inlineReview", "revised_code": {"commit": "419a88a29fae75bf94e8a4f2b88b59706eec5625", "chunk": "diff --git a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java\nindex f1205a2e85e..b57b7638add 100644\n--- a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java\n+++ b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java\n\n@@ -124,7 +122,7 @@ public class ConfigurationClientBuilderTest extends TestBase {\n     }\n \n     @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n-    @MethodSource(\"getTestParameters\")\n+    @MethodSource(\"com.azure.data.appconfiguration.TestHelper#getTestParameters\")\n     public void nullServiceVersion(HttpClient httpClient) {\n         final String key = \"newKey\";\n         final String value = \"newValue\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MjA5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388492095", "bodyText": "If you are setting the pipeline, shouldn't the httpclient be setup along with the pipeline?", "author": "srnagar", "createdAt": "2020-03-05T18:51:32Z", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java", "diffHunk": "@@ -157,13 +167,12 @@ public void defaultPipeline() {\n             .retryPolicy(new RetryPolicy())\n             .configuration(Configuration.getGlobalConfiguration())\n             .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n-            .pipeline(new HttpPipelineBuilder().build());\n+            .pipeline(new HttpPipelineBuilder().build())\n+            .httpClient(httpClient == null ? interceptorManager.getPlaybackClient() : httpClient)", "originalCommit": "e2475928ecdda5741557f073170e126d8ded29d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4cfc22de0c272647c47798a09b3d043bec1ebf30", "chunk": "diff --git a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java\nindex f1205a2e85e..c13ca8c38a5 100644\n--- a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java\n+++ b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java\n\n@@ -167,8 +165,8 @@ public class ConfigurationClientBuilderTest extends TestBase {\n             .retryPolicy(new RetryPolicy())\n             .configuration(Configuration.getGlobalConfiguration())\n             .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n-            .pipeline(new HttpPipelineBuilder().build())\n-            .httpClient(httpClient == null ? interceptorManager.getPlaybackClient() : httpClient)\n+            .pipeline(new HttpPipelineBuilder().httpClient(httpClient == null ?\n+                interceptorManager.getPlaybackClient() : httpClient).build())\n             .serviceVersion(serviceVersion);\n \n         if (!interceptorManager.isPlaybackMode()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NTgxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388495811", "bodyText": "If you set the pipeline, setting the httpclient on the same builder will have no effect. Pipeline will take precedence.", "author": "srnagar", "createdAt": "2020-03-05T18:58:05Z", "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java", "diffHunk": "@@ -6,44 +6,71 @@\n import com.azure.core.exception.HttpResponseException;\n import com.azure.core.exception.ResourceModifiedException;\n import com.azure.core.exception.ResourceNotFoundException;\n+import com.azure.core.http.HttpClient;\n import com.azure.core.http.rest.PagedIterable;\n import com.azure.core.util.polling.PollResponse;\n import com.azure.core.util.polling.SyncPoller;\n-import com.azure.security.keyvault.certificates.models.*;\n-import org.junit.jupiter.api.Test;\n \n+import com.azure.security.keyvault.certificates.models.CertificateContact;\n+import com.azure.security.keyvault.certificates.models.CertificateIssuer;\n+import com.azure.security.keyvault.certificates.models.CertificateOperation;\n+import com.azure.security.keyvault.certificates.models.CertificatePolicy;\n+import com.azure.security.keyvault.certificates.models.CertificateProperties;\n+import com.azure.security.keyvault.certificates.models.DeletedCertificate;\n+import com.azure.security.keyvault.certificates.models.IssuerProperties;\n+import com.azure.security.keyvault.certificates.models.KeyVaultCertificate;\n+import com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy;\n+import com.azure.security.keyvault.certificates.models.MergeCertificateOptions;\n import java.io.IOException;\n import java.net.HttpURLConnection;\n import java.security.cert.CertificateException;\n import java.security.cert.X509Certificate;\n-import java.util.*;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;\n+\n+@TestInstance(PER_CLASS)\n public class CertificateClientTest extends CertificateClientTestBase {\n+    private static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n     private CertificateClient client;\n \n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n-        if (interceptorManager.isPlaybackMode()) {\n-\n-            client = clientSetup(pipeline -> new CertificateClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        } else {\n-            client = clientSetup(pipeline -> new CertificateClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        }\n     }\n \n+    private void getCertificateClient(HttpClient httpClient,\n+        CertificateServiceVersion serviceVersion) {\n+\n+        client = clientSetup(pipeline -> new CertificateClientBuilder()\n+            .vaultUrl(getEndpoint())\n+            .pipeline(pipeline)\n+            .httpClient(httpClient == null ? interceptorManager.getPlaybackClient() : httpClient)", "originalCommit": "e2475928ecdda5741557f073170e126d8ded29d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4cfc22de0c272647c47798a09b3d043bec1ebf30", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java b/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java\nindex dbb7212664d..9176451b74f 100644\n--- a/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java\n+++ b/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java\n\n@@ -7,6 +7,7 @@ import com.azure.core.exception.HttpResponseException;\n import com.azure.core.exception.ResourceModifiedException;\n import com.azure.core.exception.ResourceNotFoundException;\n import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n import com.azure.core.http.rest.PagedIterable;\n import com.azure.core.util.polling.PollResponse;\n import com.azure.core.util.polling.SyncPoller;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5Njk5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388496990", "bodyText": "This can now be deleted.", "author": "srnagar", "createdAt": "2020-03-05T18:59:56Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java", "diffHunk": "@@ -30,24 +36,31 @@\n     protected void beforeTest() {\n         beforeTestSetup();\n \n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildAsyncClient());\n-        } else {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .pipeline(pipeline)\n-                .vaultUrl(getEndpoint())\n-                .buildAsyncClient());\n-        }\n+        client = clientSetup(pipeline -> new KeyClientBuilder()\n+            .pipeline(pipeline)\n+            .vaultUrl(getEndpoint())\n+            .buildAsyncClient());", "originalCommit": "e2475928ecdda5741557f073170e126d8ded29d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23f603150368c623cda98893fea024c669a638a1", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java\nindex 1f065b770ef..fc34b78f9b7 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java\n\n@@ -35,11 +32,6 @@ public class KeyAsyncClientTest extends KeyClientTestBase {\n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n-\n-        client = clientSetup(pipeline -> new KeyClientBuilder()\n-            .pipeline(pipeline)\n-            .vaultUrl(getEndpoint())\n-            .buildAsyncClient());\n     }\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NzQ2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388497464", "bodyText": "Same as above. Pipeline and http client both should not be set.", "author": "srnagar", "createdAt": "2020-03-05T19:00:51Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java", "diffHunk": "@@ -30,24 +36,31 @@\n     protected void beforeTest() {\n         beforeTestSetup();\n \n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildAsyncClient());\n-        } else {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .pipeline(pipeline)\n-                .vaultUrl(getEndpoint())\n-                .buildAsyncClient());\n-        }\n+        client = clientSetup(pipeline -> new KeyClientBuilder()\n+            .pipeline(pipeline)\n+            .vaultUrl(getEndpoint())\n+            .buildAsyncClient());\n+    }\n+\n+\n+    private void getKeyAsyncClient(HttpClient httpClient,\n+        KeyServiceVersion serviceVersion) {\n+\n+        client = clientSetup(pipeline -> new KeyClientBuilder()\n+            .vaultUrl(getEndpoint())\n+            .pipeline(pipeline)\n+            .httpClient(httpClient == null ? interceptorManager.getPlaybackClient() : httpClient)", "originalCommit": "e2475928ecdda5741557f073170e126d8ded29d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwNDMxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388504319", "bodyText": "Will rework here. Thanks!", "author": "sima-zhu", "createdAt": "2020-03-05T19:12:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NzQ2NA=="}], "type": "inlineReview", "revised_code": {"commit": "23f603150368c623cda98893fea024c669a638a1", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java\nindex 1f065b770ef..fc34b78f9b7 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java\n\n@@ -35,11 +32,6 @@ public class KeyAsyncClientTest extends KeyClientTestBase {\n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n-\n-        client = clientSetup(pipeline -> new KeyClientBuilder()\n-            .pipeline(pipeline)\n-            .vaultUrl(getEndpoint())\n-            .buildAsyncClient());\n     }\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5Nzc1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388497750", "bodyText": "This can be deleted.", "author": "srnagar", "createdAt": "2020-03-05T19:01:26Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java", "diffHunk": "@@ -17,54 +18,65 @@\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class KeyClientTest extends KeyClientTestBase {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n \n     private KeyClient client;\n \n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n+        client = clientSetup(pipeline -> new KeyClientBuilder()\n+            .vaultUrl(getEndpoint())\n+            .pipeline(pipeline)\n+            .buildClient());", "originalCommit": "e2475928ecdda5741557f073170e126d8ded29d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff1c071b3d87f9a4637a556ab3a665723716d915", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java\nindex 75dbf063968..90b7269b102 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java\n\n@@ -26,7 +26,6 @@ import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class KeyClientTest extends KeyClientTestBase {\n-    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n \n     private KeyClient client;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5Nzg1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388497856", "bodyText": "Move this to KeyClientTestBase", "author": "srnagar", "createdAt": "2020-03-05T19:01:37Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java", "diffHunk": "@@ -17,54 +18,65 @@\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class KeyClientTest extends KeyClientTestBase {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";", "originalCommit": "e2475928ecdda5741557f073170e126d8ded29d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff1c071b3d87f9a4637a556ab3a665723716d915", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java\nindex 75dbf063968..90b7269b102 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java\n\n@@ -26,7 +26,6 @@ import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class KeyClientTest extends KeyClientTestBase {\n-    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n \n     private KeyClient client;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5ODIyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r388498225", "bodyText": "Set the httpclient in pipeline instead.", "author": "srnagar", "createdAt": "2020-03-05T19:02:18Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java", "diffHunk": "@@ -17,54 +18,65 @@\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class KeyClientTest extends KeyClientTestBase {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n \n     private KeyClient client;\n \n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n+        client = clientSetup(pipeline -> new KeyClientBuilder()\n+            .vaultUrl(getEndpoint())\n+            .pipeline(pipeline)\n+            .buildClient());\n+    }\n \n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        } else {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        }\n+    private void getKeyClient(HttpClient httpClient,\n+        KeyServiceVersion serviceVersion) {\n+\n+        client = clientSetup(pipeline -> new KeyClientBuilder()\n+            .vaultUrl(getEndpoint())\n+            .pipeline(pipeline)\n+            .httpClient(httpClient == null ? interceptorManager.getPlaybackClient() : httpClient)", "originalCommit": "e2475928ecdda5741557f073170e126d8ded29d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff1c071b3d87f9a4637a556ab3a665723716d915", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java\nindex 75dbf063968..90b7269b102 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java\n\n@@ -26,7 +26,6 @@ import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class KeyClientTest extends KeyClientTestBase {\n-    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n \n     private KeyClient client;\n \n"}}, {"oid": "a1783d5eb403cc7419765f057adbfd08d94978d0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a1783d5eb403cc7419765f057adbfd08d94978d0", "message": "Update pom.xml", "committedDate": "2020-03-05T19:08:27Z", "type": "commit"}, {"oid": "396f69226a5e16b74e67abb871c7fd6b87a83172", "url": "https://github.com/Azure/azure-sdk-for-java/commit/396f69226a5e16b74e67abb871c7fd6b87a83172", "message": "Update pom.xml", "committedDate": "2020-03-05T19:08:55Z", "type": "commit"}, {"oid": "ceab1731bfac25110317463be4666b78d6f298fd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ceab1731bfac25110317463be4666b78d6f298fd", "message": "Merge in master", "committedDate": "2020-03-08T00:09:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNjE3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r389416179", "bodyText": "It's really critical that for a client library, you only have this method once. All test classes should reference a single version of this method.", "author": "JonathanGiles", "createdAt": "2020-03-08T23:11:11Z", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java", "diffHunk": "@@ -184,4 +193,23 @@ private static URI getURI(String endpointFormat, String namespace, String domain\n                 \"Invalid namespace name: %s\", namespace), exception);\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    protected Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                for (ConfigurationServiceVersion serviceVersion : ConfigurationServiceVersion.values()) {\n+                    argumentsList.add(Arguments.of(httpClient, serviceVersion));\n+                }\n+            });\n+        return argumentsList.stream();\n+    }", "originalCommit": "396f69226a5e16b74e67abb871c7fd6b87a83172", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwOTI1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r389909253", "bodyText": "Will add TestHelper for having this.", "author": "sima-zhu", "createdAt": "2020-03-09T19:22:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNjE3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4cfc22de0c272647c47798a09b3d043bec1ebf30", "chunk": "diff --git a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java\nindex f1205a2e85e..c13ca8c38a5 100644\n--- a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java\n+++ b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java\n\n@@ -193,23 +191,4 @@ public class ConfigurationClientBuilderTest extends TestBase {\n                 \"Invalid namespace name: %s\", namespace), exception);\n         }\n     }\n-\n-    /**\n-     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n-     * service versions that should be tested.\n-     *\n-     * @return A stream of HttpClient and service version combinations to test.\n-     */\n-    protected Stream<Arguments> getTestParameters() {\n-        // when this issues is closed, the newer version of junit will have better support for\n-        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n-        List<Arguments> argumentsList = new ArrayList<>();\n-        getHttpClients()\n-            .forEach(httpClient -> {\n-                for (ConfigurationServiceVersion serviceVersion : ConfigurationServiceVersion.values()) {\n-                    argumentsList.add(Arguments.of(httpClient, serviceVersion));\n-                }\n-            });\n-        return argumentsList.stream();\n-    }\n }\n"}}, {"oid": "ff1c071b3d87f9a4637a556ab3a665723716d915", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ff1c071b3d87f9a4637a556ab3a665723716d915", "message": "Keyvault", "committedDate": "2020-03-09T18:27:39Z", "type": "commit"}, {"oid": "d0036776f1113d9b04ef776acffcc4654d2d82b7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d0036776f1113d9b04ef776acffcc4654d2d82b7", "message": "Move to test helper", "committedDate": "2020-03-09T19:04:33Z", "type": "commit"}, {"oid": "f5e105fad2556193cac647108f6834af3008b4e2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f5e105fad2556193cac647108f6834af3008b4e2", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into okhttp", "committedDate": "2020-03-09T19:04:37Z", "type": "commit"}, {"oid": "2e5d346792667912ec973d1ed660db8c7990469e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2e5d346792667912ec973d1ed660db8c7990469e", "message": "Merge branch 'master' into okhttp", "committedDate": "2020-03-09T19:23:33Z", "type": "commit"}, {"oid": "4cfc22de0c272647c47798a09b3d043bec1ebf30", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4cfc22de0c272647c47798a09b3d043bec1ebf30", "message": "Merge the changes from Keyvault", "committedDate": "2020-03-09T20:47:45Z", "type": "commit"}, {"oid": "6dd9a54461e94bb839e5601b6521adfc89213fac", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6dd9a54461e94bb839e5601b6521adfc89213fac", "message": "Update version_client.txt", "committedDate": "2020-03-09T21:02:36Z", "type": "commit"}, {"oid": "ad5d7e12db3d23dc0fcc26f7594e792b1a29a9c9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ad5d7e12db3d23dc0fcc26f7594e792b1a29a9c9", "message": "Update pom.xml", "committedDate": "2020-03-09T21:03:19Z", "type": "commit"}, {"oid": "0261212832cce22be55bb8a6b5b96faef1120667", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0261212832cce22be55bb8a6b5b96faef1120667", "message": "Update DataSources.java", "committedDate": "2020-03-09T21:03:58Z", "type": "commit"}, {"oid": "4a20fcd2df36a387a426a85411fad86275a94c88", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4a20fcd2df36a387a426a85411fad86275a94c88", "message": "Update the version", "committedDate": "2020-03-09T21:20:29Z", "type": "commit"}, {"oid": "3b6ef5ccf50fa67ee47b02337f56953b3a155a2d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3b6ef5ccf50fa67ee47b02337f56953b3a155a2d", "message": "One more updates on version", "committedDate": "2020-03-09T21:26:00Z", "type": "commit"}, {"oid": "419a88a29fae75bf94e8a4f2b88b59706eec5625", "url": "https://github.com/Azure/azure-sdk-for-java/commit/419a88a29fae75bf94e8a4f2b88b59706eec5625", "message": "Make changes on test method", "committedDate": "2020-03-09T21:30:16Z", "type": "commit"}, {"oid": "cf1bd55786a62fc93ddd6c377153df2e52e9165c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cf1bd55786a62fc93ddd6c377153df2e52e9165c", "message": "Make changes on junit 5 setting", "committedDate": "2020-03-09T21:35:05Z", "type": "commit"}, {"oid": "78ebf2556c775b0339c060ba63350d7ca74f3943", "url": "https://github.com/Azure/azure-sdk-for-java/commit/78ebf2556c775b0339c060ba63350d7ca74f3943", "message": "Depend on most recent release version for okhttp", "committedDate": "2020-03-09T21:38:30Z", "type": "commit"}, {"oid": "0988cd4a27958aa863b1d0b0d2e022d7545c7f8e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0988cd4a27958aa863b1d0b0d2e022d7545c7f8e", "message": "Added okhttp module in keyvault", "committedDate": "2020-03-09T21:41:05Z", "type": "commit"}, {"oid": "23f603150368c623cda98893fea024c669a638a1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/23f603150368c623cda98893fea024c669a638a1", "message": "Removed unneccessary parts", "committedDate": "2020-03-09T21:43:31Z", "type": "commit"}, {"oid": "8d5f39b6e16bc443dec693945838dd0fbbe47163", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8d5f39b6e16bc443dec693945838dd0fbbe47163", "message": "Make changes on KeyVaultClient", "committedDate": "2020-03-09T21:49:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNDA4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r390004083", "bodyText": "The service version should be set on the builder otherwise it will always use the latest.", "author": "srnagar", "createdAt": "2020-03-09T22:50:54Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java", "diffHunk": "@@ -30,41 +34,43 @@\n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n+    }\n \n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        } else {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        }\n+    private void getKeyClient(HttpClient httpClient, KeyServiceVersion serviceVersion) {\n+        HttpPipeline httpPipeline = getHttpPipeline(httpClient, serviceVersion);\n+        client = new KeyClientBuilder()\n+            .vaultUrl(getEndpoint())\n+            .pipeline(httpPipeline)\n+            .buildClient();", "originalCommit": "8d5f39b6e16bc443dec693945838dd0fbbe47163", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNzk1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r390007959", "bodyText": "Ah, right. Making changes in UserAgent one. Forgot to update here.\nThanks!", "author": "sima-zhu", "createdAt": "2020-03-09T23:02:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNDA4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8df65df84ec9ffdcb2095b8cf974fc2eb3135d23", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java\nindex 623b98d5b36..3cd64286c75 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java\n\n@@ -41,6 +41,7 @@ public class KeyClientTest extends KeyClientTestBase {\n         client = new KeyClientBuilder()\n             .vaultUrl(getEndpoint())\n             .pipeline(httpPipeline)\n+            .serviceVersion(serviceVersion)\n             .buildClient();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNDE1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r390004155", "bodyText": "The service version should be set on the builder otherwise it will always use the latest.", "author": "srnagar", "createdAt": "2020-03-09T22:51:06Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java", "diffHunk": "@@ -29,25 +33,24 @@\n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n+    }\n \n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildAsyncClient());\n-        } else {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .pipeline(pipeline)\n-                .vaultUrl(getEndpoint())\n-                .buildAsyncClient());\n-        }\n+\n+    private void getKeyAsyncClient(HttpClient httpClient, KeyServiceVersion serviceVersion) {\n+        HttpPipeline httpPipeline = getHttpPipeline(httpClient, serviceVersion);\n+        client = new KeyClientBuilder()\n+            .vaultUrl(getEndpoint())\n+            .pipeline(httpPipeline)\n+            .buildAsyncClient();", "originalCommit": "8d5f39b6e16bc443dec693945838dd0fbbe47163", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8df65df84ec9ffdcb2095b8cf974fc2eb3135d23", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java\nindex f0f02af46cb..bb4085132b8 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java\n\n@@ -41,6 +41,7 @@ public class KeyAsyncClientTest extends KeyClientTestBase {\n         client = new KeyClientBuilder()\n             .vaultUrl(getEndpoint())\n             .pipeline(httpPipeline)\n+            .serviceVersion(serviceVersion)\n             .buildAsyncClient();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNDQ4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r390004482", "bodyText": "All client builders are missing service version.", "author": "srnagar", "createdAt": "2020-03-09T22:52:15Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTest.java", "diffHunk": "@@ -32,27 +35,20 @@\n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        } else {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        }\n     }\n \n-    @Test\n-    public void encryptDecryptRsa() throws Exception {\n+    private void initializeClient(HttpClient httpClient, CryptographyServiceVersion serviceVersion) {\n+        pipeline = getHttpPipeline(httpClient, serviceVersion);\n+        client = new KeyClientBuilder()\n+            .pipeline(pipeline)\n+            .vaultUrl(getEndpoint())\n+            .buildClient();", "originalCommit": "8d5f39b6e16bc443dec693945838dd0fbbe47163", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwNTU5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393105593", "bodyText": "initializeKeyClient is not the major client we want to test in this class but initializeCryptographyClient. There are another test classes testing KeyClient. What we use for keyClientBuilder are default ones (netty, latest)", "author": "sima-zhu", "createdAt": "2020-03-16T15:22:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNDQ4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8df65df84ec9ffdcb2095b8cf974fc2eb3135d23", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTest.java b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTest.java\nindex 89cd8248c28..5981649ea5f 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTest.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTest.java\n\n@@ -37,26 +38,32 @@ public class CryptographyClientTest extends CryptographyClientTestBase {\n         beforeTestSetup();\n     }\n \n-    private void initializeClient(HttpClient httpClient, CryptographyServiceVersion serviceVersion) {\n-        pipeline = getHttpPipeline(httpClient, serviceVersion);\n+    private void initializeKeyClient(HttpClient httpClient) {\n+        pipeline = getHttpPipeline(httpClient, KeyServiceVersion.getLatest());\n         client = new KeyClientBuilder()\n             .pipeline(pipeline)\n             .vaultUrl(getEndpoint())\n             .buildClient();\n     }\n \n+    private CryptographyClient initializeCryptographyClient(String keyId, HttpClient httpClient, CryptographyServiceVersion serviceVersion) {\n+        pipeline = getHttpPipeline(httpClient, serviceVersion);\n+        return new CryptographyClientBuilder()\n+            .pipeline(pipeline)\n+            .serviceVersion(serviceVersion)\n+            .keyIdentifier(keyId)\n+            .buildClient();\n+    }\n+\n     @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n     @MethodSource(\"com.azure.security.keyvault.keys.cryptography.TestHelper#getTestParameters\")\n     public void encryptDecryptRsa(HttpClient httpClient, CryptographyServiceVersion serviceVersion) throws Exception {\n-        initializeClient(httpClient, serviceVersion);\n+        initializeKeyClient(httpClient);\n         encryptDecryptRsaRunner(keyPair -> {\n             JsonWebKey key = JsonWebKey.fromRsa(keyPair);\n             String keyName = generateResourceId(\"testRsaKey\");\n             KeyVaultKey importedKey = client.importKey(keyName, key);\n-            CryptographyClient cryptoClient = new CryptographyClientBuilder()\n-                .pipeline(pipeline)\n-                .keyIdentifier(importedKey.getId())\n-                .buildClient();\n+            CryptographyClient cryptoClient = initializeCryptographyClient(importedKey.getId(), httpClient, serviceVersion);\n             CryptographyServiceClient serviceClient = cryptoClient.getServiceClient();\n \n             List<EncryptionAlgorithm> algorithms = Arrays.asList(EncryptionAlgorithm.RSA1_5, EncryptionAlgorithm.RSA_OAEP, EncryptionAlgorithm.RSA_OAEP_256);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNjU3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r390006574", "bodyText": "Also, by default, PR builds should just run the tests with latest version and if environment variable to run tests for all versions is set, then we should do this.", "author": "srnagar", "createdAt": "2020-03-09T22:58:53Z", "path": "sdk/keyvault/azure-security-keyvault-secrets/src/test/java/com/azure/security/keyvault/secrets/SecretClientTestBase.java", "diffHunk": "@@ -437,4 +433,23 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                for (SecretServiceVersion serviceVersion : SecretServiceVersion.values()) {", "originalCommit": "8d5f39b6e16bc443dec693945838dd0fbbe47163", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyNjI5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r390026298", "bodyText": "Do we want to introduce new Environment variable to control this?", "author": "sima-zhu", "createdAt": "2020-03-10T00:04:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNjU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMTcxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r390031714", "bodyText": "Yes. My proposal to @srnagar yesterday was the following:\n\nAZURE_TEST_SERVICE_VERSIONS = all | latest\nAZURE_TEST_HTTP_CLIENTS = all | netty\n\nIf no environment variable is set, use latest and netty.", "author": "JonathanGiles", "createdAt": "2020-03-10T00:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNjU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0Njk1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r390546952", "bodyText": "Talked with Srikanta. We only introduce the AZURE_TEST_SERVICE_VERSIONS variable for this PR for the following two reasons.\n\nThe client library has no ability to tell the httpClient is instance of Netty or Okhttp in current structure.\nHttpClient has no impact on PR validation, as we only run playbackClient for PR.", "author": "sima-zhu", "createdAt": "2020-03-10T19:06:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNjU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU3MDMxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r390570318", "bodyText": "I later spoke to @sima-zhu and provided sample for enabling HttpClient env variable as well in TestBase's shouldClientBeTested() method.\nSo, environment variables for both http client and service version should be supported now.", "author": "srnagar", "createdAt": "2020-03-10T19:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNjU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzNTAwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r390635002", "bodyText": "Yes. Tested over the method. We can support both variables.", "author": "sima-zhu", "createdAt": "2020-03-10T21:57:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwNjU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "f68c958db24d512289d910bb5a355f5eaa7adcae", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-secrets/src/test/java/com/azure/security/keyvault/secrets/SecretClientTestBase.java b/sdk/keyvault/azure-security-keyvault-secrets/src/test/java/com/azure/security/keyvault/secrets/SecretClientTestBase.java\nindex d6f3d307691..fbdd3f55fe9 100644\n--- a/sdk/keyvault/azure-security-keyvault-secrets/src/test/java/com/azure/security/keyvault/secrets/SecretClientTestBase.java\n+++ b/sdk/keyvault/azure-security-keyvault-secrets/src/test/java/com/azure/security/keyvault/secrets/SecretClientTestBase.java\n\n@@ -440,16 +440,23 @@ public abstract class SecretClientTestBase extends TestBase {\n      *\n      * @return A stream of HttpClient and service version combinations to test.\n      */\n-    static Stream<Arguments> getTestParameters() {\n+    Stream<Arguments> getTestParameters() {\n         // when this issues is closed, the newer version of junit will have better support for\n         // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n         List<Arguments> argumentsList = new ArrayList<>();\n+\n         getHttpClients()\n             .forEach(httpClient -> {\n-                for (SecretServiceVersion serviceVersion : SecretServiceVersion.values()) {\n-                    argumentsList.add(Arguments.of(httpClient, serviceVersion));\n-                }\n+                Arrays.stream(SecretServiceVersion.values()).filter(this::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion ->argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n             });\n         return argumentsList.stream();\n     }\n+\n+    protected boolean shouldServiceVersionBeTested(SecretServiceVersion serviceVersion) {\n+        if (Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS) == null) {\n+            return SecretServiceVersion.getLatest().equals(serviceVersion);\n+        }\n+        return true;\n+    }\n }\n"}}, {"oid": "8df65df84ec9ffdcb2095b8cf974fc2eb3135d23", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8df65df84ec9ffdcb2095b8cf974fc2eb3135d23", "message": "Addressed feedback on service version", "committedDate": "2020-03-09T23:19:47Z", "type": "commit"}, {"oid": "2d06df74ffb3396e0fe44ce6652acd3a6cda4641", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2d06df74ffb3396e0fe44ce6652acd3a6cda4641", "message": "Fixed failed tests and lingting", "committedDate": "2020-03-09T23:59:36Z", "type": "commit"}, {"oid": "4d14066902397f187d43cf4989bc77f587e4198c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4d14066902397f187d43cf4989bc77f587e4198c", "message": "Fixed keyvault tests", "committedDate": "2020-03-10T00:01:23Z", "type": "commit"}, {"oid": "f68c958db24d512289d910bb5a355f5eaa7adcae", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f68c958db24d512289d910bb5a355f5eaa7adcae", "message": "Adding env variables for PR validations", "committedDate": "2020-03-10T21:46:32Z", "type": "commit"}, {"oid": "2b7f0d82a8713ba27dfbeb2ff8032a0bca9bb381", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2b7f0d82a8713ba27dfbeb2ff8032a0bca9bb381", "message": "Update pom file", "committedDate": "2020-03-10T22:07:28Z", "type": "commit"}, {"oid": "a42bc25a7141fc4638e935995e76d70d633e1078", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a42bc25a7141fc4638e935995e76d70d633e1078", "message": "Updated version_client file", "committedDate": "2020-03-10T22:10:23Z", "type": "commit"}, {"oid": "6998a68d1a145a6162c17548a799227eb66b5421", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6998a68d1a145a6162c17548a799227eb66b5421", "message": "Fixed failed tests", "committedDate": "2020-03-10T22:32:31Z", "type": "commit"}, {"oid": "9dd1b490e9e72069e7e730819aa6007383400f46", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9dd1b490e9e72069e7e730819aa6007383400f46", "message": "Remove static key work", "committedDate": "2020-03-10T22:37:19Z", "type": "commit"}, {"oid": "ed6da083f766da7f1302022e4666aba34406036e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ed6da083f766da7f1302022e4666aba34406036e", "message": "Fixed linting issue", "committedDate": "2020-03-10T22:52:30Z", "type": "commit"}, {"oid": "a8a71d295fa5e3ddded2438d1f053e608dc15661", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a8a71d295fa5e3ddded2438d1f053e608dc15661", "message": "Make netty to be default clients", "committedDate": "2020-03-10T23:30:44Z", "type": "commit"}, {"oid": "3cddf540d492db61f16102715917743fbabd4b7c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3cddf540d492db61f16102715917743fbabd4b7c", "message": "Fixed linting issue in keyvault", "committedDate": "2020-03-10T23:54:50Z", "type": "commit"}, {"oid": "b2081e8d982eb643b5becf3f1df8076dbfd26936", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b2081e8d982eb643b5becf3f1df8076dbfd26936", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into okhttp", "committedDate": "2020-03-11T02:37:14Z", "type": "commit"}, {"oid": "53a062bb9f7d38f5be03a202ca4fac33ad68f084", "url": "https://github.com/Azure/azure-sdk-for-java/commit/53a062bb9f7d38f5be03a202ca4fac33ad68f084", "message": "merge from master", "committedDate": "2020-03-11T03:03:19Z", "type": "commit"}, {"oid": "4b85a9c78c99162118c6d433f30fdce81ee30648", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4b85a9c78c99162118c6d433f30fdce81ee30648", "message": "Fixed", "committedDate": "2020-03-11T03:27:52Z", "type": "commit"}, {"oid": "a0bcee9af7db0ba0bf5257dc8832f346b704dbcf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a0bcee9af7db0ba0bf5257dc8832f346b704dbcf", "message": "Added modules for tests accessibility", "committedDate": "2020-03-11T03:58:27Z", "type": "commit"}, {"oid": "dc2648ba38b68a498becfeee3292e76662bce9c9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dc2648ba38b68a498becfeee3292e76662bce9c9", "message": "Make changes on module", "committedDate": "2020-03-11T05:05:49Z", "type": "commit"}, {"oid": "59785d53195176803cc500d0d1d274c5fecf03dc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/59785d53195176803cc500d0d1d274c5fecf03dc", "message": "Fixed the httpClient", "committedDate": "2020-03-11T05:36:32Z", "type": "commit"}, {"oid": "39809f82155be482369e80b5335cc6ee0180afe9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/39809f82155be482369e80b5335cc6ee0180afe9", "message": "Fixed tests", "committedDate": "2020-03-11T16:21:43Z", "type": "commit"}, {"oid": "5152902118872b5bf9c52bae22ec51978781f430", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5152902118872b5bf9c52bae22ec51978781f430", "message": "More changes", "committedDate": "2020-03-11T16:24:25Z", "type": "commit"}, {"oid": "92b4841dd520a2c45691ff2ee411eaba49a78f7b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/92b4841dd520a2c45691ff2ee411eaba49a78f7b", "message": "Merge branch 'master' into okhttp", "committedDate": "2020-03-11T16:30:48Z", "type": "commit"}, {"oid": "2efb7719bc8681e61c28abc97a11f31cd8e2f008", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2efb7719bc8681e61c28abc97a11f31cd8e2f008", "message": "Merge conflicts from master", "committedDate": "2020-03-12T04:04:02Z", "type": "commit"}, {"oid": "5c4a6d4a9ae72959aecaad6b878d3e10e6a96e4d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5c4a6d4a9ae72959aecaad6b878d3e10e6a96e4d", "message": "Merge from maste", "committedDate": "2020-03-12T04:11:04Z", "type": "commit"}, {"oid": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "message": "Added back necessary tests", "committedDate": "2020-03-12T05:00:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMjgzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391402839", "bodyText": "Now that the MethodSource is a static method, is this still required?", "author": "srnagar", "createdAt": "2020-03-12T05:03:49Z", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java", "diffHunk": "@@ -3,29 +3,35 @@\n package com.azure.data.appconfiguration;\n \n import com.azure.core.credential.TokenCredential;\n+import com.azure.core.http.HttpClient;\n import com.azure.core.test.TestBase;\n import com.azure.core.util.Configuration;\n import com.azure.data.appconfiguration.implementation.ConfigurationClientCredentials;\n import com.azure.data.appconfiguration.models.ConfigurationSetting;\n import com.azure.identity.DefaultAzureCredentialBuilder;\n import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n \n import java.security.InvalidKeyException;\n import java.security.NoSuchAlgorithmException;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static com.azure.data.appconfiguration.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n+import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;\n \n /**\n  * Unit test for construct a configuration client by using AAD token credential.\n  */\n+@TestInstance(PER_CLASS)", "originalCommit": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c62de619fdc1a7567c718a047ff188e78dea6f34", "chunk": "diff --git a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java\nindex f10a20f0e4e..a7ea66eef33 100644\n--- a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java\n+++ b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java\n\n@@ -13,17 +13,14 @@ import org.junit.jupiter.api.Assertions;\n \n import java.security.InvalidKeyException;\n import java.security.NoSuchAlgorithmException;\n-import org.junit.jupiter.api.TestInstance;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.MethodSource;\n \n import static com.azure.data.appconfiguration.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n-import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;\n \n /**\n  * Unit test for construct a configuration client by using AAD token credential.\n  */\n-@TestInstance(PER_CLASS)\n public class AadCredentialTest extends TestBase {\n     private static ConfigurationClient client;\n     private static final String AZURE_APPCONFIG_CONNECTION_STRING = \"AZURE_APPCONFIG_CONNECTION_STRING\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMzQwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391403407", "bodyText": "Is this still required?", "author": "srnagar", "createdAt": "2020-03-12T05:06:24Z", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java", "diffHunk": "@@ -22,9 +22,15 @@\n import java.time.Duration;\n import java.util.Locale;\n import java.util.Objects;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n \n+import static com.azure.data.appconfiguration.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;\n \n+@TestInstance(PER_CLASS)", "originalCommit": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1NTI3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391755271", "bodyText": "Removed", "author": "sima-zhu", "createdAt": "2020-03-12T16:50:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMzQwNw=="}], "type": "inlineReview", "revised_code": {"commit": "c62de619fdc1a7567c718a047ff188e78dea6f34", "chunk": "diff --git a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java\nindex 1cf6dd4fd79..88ea5daced0 100644\n--- a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java\n+++ b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java\n\n@@ -22,15 +23,12 @@ import java.net.URISyntaxException;\n import java.time.Duration;\n import java.util.Locale;\n import java.util.Objects;\n-import org.junit.jupiter.api.TestInstance;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.MethodSource;\n \n import static com.azure.data.appconfiguration.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n-import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;\n \n-@TestInstance(PER_CLASS)\n public class ConfigurationClientBuilderTest extends TestBase {\n     private static final String AZURE_APPCONFIG_CONNECTION_STRING = \"AZURE_APPCONFIG_CONNECTION_STRING\";\n     private static final String DEFAULT_DOMAIN_NAME = \".azconfig.io\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNDQyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391404425", "bodyText": "Since this test is to use the default pipeline (i.e. whichever httpclient is selected by default along with all other policies), this test should only have service version as a parameter.", "author": "srnagar", "createdAt": "2020-03-12T05:11:17Z", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java", "diffHunk": "@@ -127,22 +134,21 @@ public void nullServiceVersion() {\n             .connectionString(connectionString)\n             .retryPolicy(new RetryPolicy())\n             .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n-            .serviceVersion(null);\n+            .serviceVersion(null)\n+            .httpClient(httpClient == null ? interceptorManager.getPlaybackClient() : httpClient);\n \n-        if (interceptorManager.isPlaybackMode()) {\n-            clientBuilder.httpClient(interceptorManager.getPlaybackClient());\n-        } else {\n-            clientBuilder.httpClient(new NettyAsyncHttpClientBuilder().wiretap(true).build())\n-                .addPolicy(interceptorManager.getRecordPolicy());\n+        if (!interceptorManager.isPlaybackMode()) {\n+            clientBuilder.addPolicy(interceptorManager.getRecordPolicy());\n         }\n \n         ConfigurationSetting addedSetting = clientBuilder.buildClient().setConfigurationSetting(key, null, value);\n         Assertions.assertEquals(addedSetting.getKey(), key);\n         Assertions.assertEquals(addedSetting.getValue(), value);\n     }\n \n-    @Test\n-    public void defaultPipeline() {\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"com.azure.data.appconfiguration.TestHelper#getTestParameters\")\n+    public void defaultPipeline(HttpClient httpClient, ConfigurationServiceVersion serviceVersion) {", "originalCommit": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c62de619fdc1a7567c718a047ff188e78dea6f34", "chunk": "diff --git a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java\nindex 1cf6dd4fd79..88ea5daced0 100644\n--- a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java\n+++ b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientBuilderTest.java\n\n@@ -148,7 +146,7 @@ public class ConfigurationClientBuilderTest extends TestBase {\n \n     @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n     @MethodSource(\"com.azure.data.appconfiguration.TestHelper#getTestParameters\")\n-    public void defaultPipeline(HttpClient httpClient, ConfigurationServiceVersion serviceVersion) {\n+    public void defaultPipeline(ConfigurationServiceVersion serviceVersion) {\n         final String key = \"newKey\";\n         final String value = \"newValue\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNDU4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391404582", "bodyText": "Check if this is still required.", "author": "srnagar", "createdAt": "2020-03-12T05:11:55Z", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientTest.java", "diffHunk": "@@ -5,31 +5,37 @@\n import com.azure.core.exception.HttpResponseException;\n import com.azure.core.exception.ResourceExistsException;\n import com.azure.core.exception.ResourceNotFoundException;\n+import com.azure.core.http.HttpClient;\n import com.azure.core.http.HttpHeaders;\n-import com.azure.core.http.netty.NettyAsyncHttpClientBuilder;\n import com.azure.core.http.policy.AddHeadersFromContextPolicy;\n import com.azure.core.http.policy.HttpLogDetailLevel;\n import com.azure.core.http.policy.HttpLogOptions;\n import com.azure.core.http.policy.RetryPolicy;\n import com.azure.core.http.rest.PagedIterable;\n import com.azure.core.http.rest.Response;\n+import com.azure.core.test.TestMode;\n import com.azure.core.util.Context;\n import com.azure.core.util.logging.ClientLogger;\n import com.azure.data.appconfiguration.models.ConfigurationSetting;\n import com.azure.data.appconfiguration.models.SettingFields;\n import com.azure.data.appconfiguration.models.SettingSelector;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Disabled;\n-import org.junit.jupiter.api.Test;\n \n import java.net.HttpURLConnection;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.stream.Collectors;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n \n+import static com.azure.data.appconfiguration.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;\n \n+@TestInstance(PER_CLASS)", "originalCommit": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1NTE3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391755174", "bodyText": "Removed", "author": "sima-zhu", "createdAt": "2020-03-12T16:50:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNDU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c62de619fdc1a7567c718a047ff188e78dea6f34", "chunk": "diff --git a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientTest.java b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientTest.java\nindex 7249a6b8ef8..d503aaa68c3 100644\n--- a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientTest.java\n+++ b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/ConfigurationClientTest.java\n\n@@ -26,16 +26,13 @@ import java.net.HttpURLConnection;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.stream.Collectors;\n-import org.junit.jupiter.api.TestInstance;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.MethodSource;\n \n import static com.azure.data.appconfiguration.TestHelper.DISPLAY_NAME_WITH_ARGUMENTS;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;\n \n-@TestInstance(PER_CLASS)\n public class ConfigurationClientTest extends ConfigurationClientTestBase {\n     private final ClientLogger logger = new ClientLogger(ConfigurationClientTest.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNDkwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391404901", "bodyText": "package-private instead of protected.", "author": "srnagar", "createdAt": "2020-03-12T05:13:15Z", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.appconfiguration;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Configuration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+class TestHelper extends TestBase {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    protected static Stream<Arguments> getTestParameters() {", "originalCommit": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c62de619fdc1a7567c718a047ff188e78dea6f34", "chunk": "diff --git a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java\nindex e77e929f983..0bb8c2756ae 100644\n--- a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java\n+++ b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java\n\n@@ -5,6 +5,7 @@ package com.azure.data.appconfiguration;\n import com.azure.core.http.HttpClient;\n import com.azure.core.test.TestBase;\n import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNTA3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391405077", "bodyText": "private instead of protected", "author": "srnagar", "createdAt": "2020-03-12T05:13:58Z", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.appconfiguration;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Configuration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+class TestHelper extends TestBase {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    protected static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(ConfigurationServiceVersion.values()).filter(TestHelper::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    protected static boolean shouldServiceVersionBeTested(ConfigurationServiceVersion serviceVersion) {", "originalCommit": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c62de619fdc1a7567c718a047ff188e78dea6f34", "chunk": "diff --git a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java\nindex e77e929f983..0bb8c2756ae 100644\n--- a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java\n+++ b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java\n\n@@ -5,6 +5,7 @@ package com.azure.data.appconfiguration;\n import com.azure.core.http.HttpClient;\n import com.azure.core.test.TestBase;\n import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNTY1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391405657", "bodyText": "This should check what was in the environment variable before returning true.", "author": "srnagar", "createdAt": "2020-03-12T05:16:39Z", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.appconfiguration;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Configuration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+class TestHelper extends TestBase {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    protected static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(ConfigurationServiceVersion.values()).filter(TestHelper::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    protected static boolean shouldServiceVersionBeTested(ConfigurationServiceVersion serviceVersion) {\n+        if (Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS) == null) {\n+            return ConfigurationServiceVersion.getLatest().equals(serviceVersion);\n+        }\n+        return true;", "originalCommit": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c62de619fdc1a7567c718a047ff188e78dea6f34", "chunk": "diff --git a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java\nindex e77e929f983..0bb8c2756ae 100644\n--- a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java\n+++ b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java\n\n@@ -5,6 +5,7 @@ package com.azure.data.appconfiguration;\n import com.azure.core.http.HttpClient;\n import com.azure.core.test.TestBase;\n import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNjQ5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391406494", "bodyText": "Replace this comment with what this method is doing. We are using Netty http client as default if env variable is not set. If it's set to ALL, all HttpClients in the classpath will be tested else the name of the HttpClient class should match env variable.", "author": "srnagar", "createdAt": "2020-03-12T05:20:38Z", "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java", "diffHunk": "@@ -121,6 +131,37 @@ protected void beforeTest() {\n     protected void afterTest() {\n     }\n \n+    /**\n+     * Returns a list of {@link HttpClient HttpClients} that should be tested.\n+     * @return A list of {@link HttpClient HttpClients} to be tested.\n+     */\n+    protected static Stream<HttpClient> getHttpClients() {\n+        if (testMode == TestMode.PLAYBACK) {\n+            // Call to @MethodSource method happens @BeforeEach call, so the interceptorManager is\n+            // not yet initialized. So, playbackClient will not be available until later.\n+            return Stream.of(new HttpClient[]{null});\n+        }\n+        return HttpClientProviders.getAllHttpClients().stream().filter(TestBase::shouldClientBeTested);\n+    }\n+\n+    /**\n+     * Filter out the http clients needs to run in test framework\n+     * @param client Http client needs to check\n+     * @return Boolean indicates whether filters out the client or not.\n+     */\n+    protected static boolean shouldClientBeTested(HttpClient client) {\n+        // This is for when we decide to filter some http clients based on some criteria\n+        // to reduce the time take to run the tests.", "originalCommit": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTYyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392555620", "bodyText": "Update the comment here.", "author": "srnagar", "createdAt": "2020-03-14T04:26:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNjQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5NDkxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393094917", "bodyText": "Removed as there is JavaDoc.", "author": "sima-zhu", "createdAt": "2020-03-16T15:07:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNjQ5NA=="}], "type": "inlineReview", "revised_code": {"commit": "c62de619fdc1a7567c718a047ff188e78dea6f34", "chunk": "diff --git a/sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java b/sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java\nindex 2b24d1968af..2af01d5961f 100644\n--- a/sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java\n+++ b/sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java\n\n@@ -145,7 +145,9 @@ public abstract class TestBase implements BeforeEachCallback {\n     }\n \n     /**\n-     * Filter out the http clients needs to run in test framework\n+     * Filter out the http clients needs to run in test framework.\n+     * Using Netty http client when no environment variable is set.\n+     *\n      * @param client Http client needs to check\n      * @return Boolean indicates whether filters out the client or not.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNjYxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391406616", "bodyText": "This should support a comma-separated list of HttpClient names.", "author": "srnagar", "createdAt": "2020-03-12T05:21:11Z", "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java", "diffHunk": "@@ -121,6 +131,37 @@ protected void beforeTest() {\n     protected void afterTest() {\n     }\n \n+    /**\n+     * Returns a list of {@link HttpClient HttpClients} that should be tested.\n+     * @return A list of {@link HttpClient HttpClients} to be tested.\n+     */\n+    protected static Stream<HttpClient> getHttpClients() {\n+        if (testMode == TestMode.PLAYBACK) {\n+            // Call to @MethodSource method happens @BeforeEach call, so the interceptorManager is\n+            // not yet initialized. So, playbackClient will not be available until later.\n+            return Stream.of(new HttpClient[]{null});\n+        }\n+        return HttpClientProviders.getAllHttpClients().stream().filter(TestBase::shouldClientBeTested);\n+    }\n+\n+    /**\n+     * Filter out the http clients needs to run in test framework\n+     * @param client Http client needs to check\n+     * @return Boolean indicates whether filters out the client or not.\n+     */\n+    protected static boolean shouldClientBeTested(HttpClient client) {\n+        // This is for when we decide to filter some http clients based on some criteria\n+        // to reduce the time take to run the tests.\n+        String configuredHttpClientToTest = Configuration.getGlobalConfiguration().get(AZURE_TEST_HTTP_CLIENTS);", "originalCommit": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc3MTI2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391771263", "bodyText": "Made changes to support comma.", "author": "sima-zhu", "createdAt": "2020-03-12T17:15:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNjYxNg=="}], "type": "inlineReview", "revised_code": {"commit": "c62de619fdc1a7567c718a047ff188e78dea6f34", "chunk": "diff --git a/sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java b/sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java\nindex 2b24d1968af..2af01d5961f 100644\n--- a/sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java\n+++ b/sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java\n\n@@ -145,7 +145,9 @@ public abstract class TestBase implements BeforeEachCallback {\n     }\n \n     /**\n-     * Filter out the http clients needs to run in test framework\n+     * Filter out the http clients needs to run in test framework.\n+     * Using Netty http client when no environment variable is set.\n+     *\n      * @param client Http client needs to check\n      * @return Boolean indicates whether filters out the client or not.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNzY2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391407669", "bodyText": "Why's getCertificateClient() called twice?", "author": "srnagar", "createdAt": "2020-03-12T05:26:01Z", "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java", "diffHunk": "@@ -6,44 +6,65 @@\n import com.azure.core.exception.HttpResponseException;\n import com.azure.core.exception.ResourceModifiedException;\n import com.azure.core.exception.ResourceNotFoundException;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n import com.azure.core.http.rest.PagedIterable;\n import com.azure.core.util.polling.PollResponse;\n import com.azure.core.util.polling.SyncPoller;\n-import com.azure.security.keyvault.certificates.models.*;\n-import org.junit.jupiter.api.Test;\n \n+import com.azure.security.keyvault.certificates.models.CertificateContact;\n+import com.azure.security.keyvault.certificates.models.CertificateContentType;\n+import com.azure.security.keyvault.certificates.models.CertificateIssuer;\n+import com.azure.security.keyvault.certificates.models.CertificateOperation;\n+import com.azure.security.keyvault.certificates.models.CertificatePolicy;\n+import com.azure.security.keyvault.certificates.models.CertificateProperties;\n+import com.azure.security.keyvault.certificates.models.DeletedCertificate;\n+import com.azure.security.keyvault.certificates.models.IssuerProperties;\n+import com.azure.security.keyvault.certificates.models.KeyVaultCertificate;\n+import com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy;\n+import com.azure.security.keyvault.certificates.models.MergeCertificateOptions;\n import java.io.IOException;\n import java.net.HttpURLConnection;\n import java.security.cert.CertificateException;\n import java.security.cert.X509Certificate;\n-import java.util.*;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n public class CertificateClientTest extends CertificateClientTestBase {\n     private CertificateClient client;\n \n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n-        if (interceptorManager.isPlaybackMode()) {\n-\n-            client = clientSetup(pipeline -> new CertificateClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        } else {\n-            client = clientSetup(pipeline -> new CertificateClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        }\n     }\n \n+    private void getCertificateClient(HttpClient httpClient,\n+        CertificateServiceVersion serviceVersion) {\n+        HttpPipeline httpPipeline = getHttpPipeline(httpClient, serviceVersion);\n+        client = new CertificateClientBuilder()\n+            .vaultUrl(getEndpoint())\n+            .pipeline(httpPipeline)\n+            .serviceVersion(serviceVersion)\n+            .buildClient();\n+    }\n \n-    @Test\n-    public void createCertificate() {\n+    @ParameterizedTest(name = DISPLAY_NAME_WITH_ARGUMENTS)\n+    @MethodSource(\"getTestParameters\")\n+    public void createCertificate(HttpClient httpClient, CertificateServiceVersion serviceVersion) {\n+        getCertificateClient(httpClient, serviceVersion);\n         createCertificateRunner((policy) -> {\n+            getCertificateClient(httpClient, serviceVersion);", "originalCommit": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczOTYwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391739601", "bodyText": "Paste error. Removed.", "author": "sima-zhu", "createdAt": "2020-03-12T16:26:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNzY2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c62de619fdc1a7567c718a047ff188e78dea6f34", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java b/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java\nindex bdbf2f03e07..25a0447df43 100644\n--- a/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java\n+++ b/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java\n\n@@ -49,7 +49,7 @@ public class CertificateClientTest extends CertificateClientTestBase {\n         beforeTestSetup();\n     }\n \n-    private void getCertificateClient(HttpClient httpClient,\n+    private void createCertificateClient(HttpClient httpClient,\n         CertificateServiceVersion serviceVersion) {\n         HttpPipeline httpPipeline = getHttpPipeline(httpClient, serviceVersion);\n         client = new CertificateClientBuilder()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNzk0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391407944", "bodyText": "Since this is not returning anything, consider renaming this to createCertificateClient() or setCertificateClient()", "author": "srnagar", "createdAt": "2020-03-12T05:27:14Z", "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java", "diffHunk": "@@ -6,44 +6,65 @@\n import com.azure.core.exception.HttpResponseException;\n import com.azure.core.exception.ResourceModifiedException;\n import com.azure.core.exception.ResourceNotFoundException;\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpPipeline;\n import com.azure.core.http.rest.PagedIterable;\n import com.azure.core.util.polling.PollResponse;\n import com.azure.core.util.polling.SyncPoller;\n-import com.azure.security.keyvault.certificates.models.*;\n-import org.junit.jupiter.api.Test;\n \n+import com.azure.security.keyvault.certificates.models.CertificateContact;\n+import com.azure.security.keyvault.certificates.models.CertificateContentType;\n+import com.azure.security.keyvault.certificates.models.CertificateIssuer;\n+import com.azure.security.keyvault.certificates.models.CertificateOperation;\n+import com.azure.security.keyvault.certificates.models.CertificatePolicy;\n+import com.azure.security.keyvault.certificates.models.CertificateProperties;\n+import com.azure.security.keyvault.certificates.models.DeletedCertificate;\n+import com.azure.security.keyvault.certificates.models.IssuerProperties;\n+import com.azure.security.keyvault.certificates.models.KeyVaultCertificate;\n+import com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy;\n+import com.azure.security.keyvault.certificates.models.MergeCertificateOptions;\n import java.io.IOException;\n import java.net.HttpURLConnection;\n import java.security.cert.CertificateException;\n import java.security.cert.X509Certificate;\n-import java.util.*;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n public class CertificateClientTest extends CertificateClientTestBase {\n     private CertificateClient client;\n \n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n-        if (interceptorManager.isPlaybackMode()) {\n-\n-            client = clientSetup(pipeline -> new CertificateClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        } else {\n-            client = clientSetup(pipeline -> new CertificateClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildClient());\n-        }\n     }\n \n+    private void getCertificateClient(HttpClient httpClient,", "originalCommit": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczODg2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391738866", "bodyText": "Named to createCertificateClient", "author": "sima-zhu", "createdAt": "2020-03-12T16:25:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNzk0NA=="}], "type": "inlineReview", "revised_code": {"commit": "c62de619fdc1a7567c718a047ff188e78dea6f34", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java b/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java\nindex bdbf2f03e07..25a0447df43 100644\n--- a/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java\n+++ b/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTest.java\n\n@@ -49,7 +49,7 @@ public class CertificateClientTest extends CertificateClientTestBase {\n         beforeTestSetup();\n     }\n \n-    private void getCertificateClient(HttpClient httpClient,\n+    private void createCertificateClient(HttpClient httpClient,\n         CertificateServiceVersion serviceVersion) {\n         HttpPipeline httpPipeline = getHttpPipeline(httpClient, serviceVersion);\n         client = new CertificateClientBuilder()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwODQ1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391408450", "bodyText": "nit: delete this line", "author": "srnagar", "createdAt": "2020-03-12T05:29:38Z", "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "diffHunk": "@@ -64,7 +65,8 @@ protected String getTestName() {\n     void beforeTestSetup() {\n     }\n \n-    <T> T clientSetup(Function<HttpPipeline, T> clientBuilder) {\n+    HttpPipeline getHttpPipeline(HttpClient httpClient, CertificateServiceVersion serviceVersion) {\n+   // <T> T clientSetup(Function<HttpPipeline, T> clientBuilder) {", "originalCommit": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c62de619fdc1a7567c718a047ff188e78dea6f34", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java b/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java\nindex 5ba930c1236..79765e37b06 100644\n--- a/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java\n+++ b/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java\n\n@@ -66,7 +68,6 @@ public abstract class CertificateClientTestBase extends TestBase {\n     }\n \n     HttpPipeline getHttpPipeline(HttpClient httpClient, CertificateServiceVersion serviceVersion) {\n-   // <T> T clientSetup(Function<HttpPipeline, T> clientBuilder) {\n         TokenCredential credential = null;\n \n         if (!interceptorManager.isPlaybackMode()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwODk3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391408975", "bodyText": "This should check the environment variable before returning true.", "author": "srnagar", "createdAt": "2020-03-12T05:31:49Z", "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "diffHunk": "@@ -605,5 +592,31 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(CertificateServiceVersion.values()).filter(\n+                    CertificateClientTestBase::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    static boolean shouldServiceVersionBeTested(CertificateServiceVersion serviceVersion) {\n+        if (Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS) == null) {\n+            return CertificateServiceVersion.getLatest().equals(serviceVersion);\n+        }\n+        return true;", "originalCommit": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NjAwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392556004", "bodyText": "This should be updated too.", "author": "srnagar", "createdAt": "2020-03-14T04:32:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwODk3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c62de619fdc1a7567c718a047ff188e78dea6f34", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java b/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java\nindex 5ba930c1236..79765e37b06 100644\n--- a/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java\n+++ b/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java\n\n@@ -612,7 +620,7 @@ public abstract class CertificateClientTestBase extends TestBase {\n         return argumentsList.stream();\n     }\n \n-    static boolean shouldServiceVersionBeTested(CertificateServiceVersion serviceVersion) {\n+    private static boolean shouldServiceVersionBeTested(CertificateServiceVersion serviceVersion) {\n         if (Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS) == null) {\n             return CertificateServiceVersion.getLatest().equals(serviceVersion);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwOTE4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391409189", "bodyText": "The file name was changed. Was this intended?", "author": "srnagar", "createdAt": "2020-03-12T05:32:53Z", "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "diffHunk": "@@ -402,11 +396,11 @@ void importCertificateRunner(Consumer<ImportCertificateOptions> testRunner) {\n     }\n \n     @Test\n-    public abstract  void importPemCertificate() throws IOException;\n+    public abstract  void importPemCertificate(HttpClient httpClient, CertificateServiceVersion serviceVersion) throws IOException;\n \n     void importPemCertificateRunner(Consumer<ImportCertificateOptions> testRunner) throws IOException {\n \n-        byte[] certificateContent = readCertificate(\"pemCert.pem\");\n+        byte[] certificateContent = readCertificate(\"certificate.pem\");", "originalCommit": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0MDgwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391740806", "bodyText": "This is merge issue. Thanks for catching this.", "author": "sima-zhu", "createdAt": "2020-03-12T16:28:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwOTE4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c62de619fdc1a7567c718a047ff188e78dea6f34", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java b/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java\nindex 5ba930c1236..79765e37b06 100644\n--- a/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java\n+++ b/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java\n\n@@ -400,7 +401,7 @@ public abstract class CertificateClientTestBase extends TestBase {\n \n     void importPemCertificateRunner(Consumer<ImportCertificateOptions> testRunner) throws IOException {\n \n-        byte[] certificateContent = readCertificate(\"certificate.pem\");\n+        byte[] certificateContent = readCertificate(\"pemCert.pem\");\n \n         String certificateName = generateResourceId(\"importCertPem\");\n         HashMap<String, String> tags = new HashMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwOTgwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391409804", "bodyText": "Why was this change required?", "author": "srnagar", "createdAt": "2020-03-12T05:35:34Z", "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "diffHunk": "@@ -419,24 +413,17 @@ void importPemCertificateRunner(Consumer<ImportCertificateOptions> testRunner) t\n         testRunner.accept(importCertificateOptions);\n     }\n \n+    @Test\n+    public abstract  void mergeCertificateNotFound(HttpClient httpClient, CertificateServiceVersion serviceVersion);\n+\n     private byte[] readCertificate(String certName) throws IOException {\n         String pemPath = getClass().getClassLoader().getResource(certName).getPath();\n-        String pemCert = \"\";\n-        BufferedReader br = new BufferedReader(new FileReader(pemPath));\n-        try {\n-            String line;\n-            while ((line = br.readLine()) != null) {\n-                pemCert += line + \"\\n\";\n-            }\n-        } finally {\n-            br.close();\n+        if (pemPath.contains(\":\")) {\n+            pemPath = pemPath.substring(1);", "originalCommit": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0Mjg4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391742882", "bodyText": "Not merge the most recent.\nChanged to master one.", "author": "sima-zhu", "createdAt": "2020-03-12T16:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwOTgwNA=="}], "type": "inlineReview", "revised_code": {"commit": "c62de619fdc1a7567c718a047ff188e78dea6f34", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java b/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java\nindex 5ba930c1236..79765e37b06 100644\n--- a/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java\n+++ b/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java\n\n@@ -418,10 +419,17 @@ public abstract class CertificateClientTestBase extends TestBase {\n \n     private byte[] readCertificate(String certName) throws IOException {\n         String pemPath = getClass().getClassLoader().getResource(certName).getPath();\n-        if (pemPath.contains(\":\")) {\n-            pemPath = pemPath.substring(1);\n+        String pemCert = \"\";\n+        BufferedReader br = new BufferedReader(new FileReader(pemPath));\n+        try {\n+            String line;\n+            while ((line = br.readLine()) != null) {\n+                pemCert += line + \"\\n\";\n+            }\n+        } finally {\n+            br.close();\n         }\n-        return Files.readAllBytes(Paths.get(pemPath));\n+        return pemCert.getBytes();\n     }\n \n     CertificateIssuer setupIssuer(String issuerName) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMDQ0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391410443", "bodyText": "Update name of the method.", "author": "srnagar", "createdAt": "2020-03-12T05:38:18Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java", "diffHunk": "@@ -29,25 +33,25 @@\n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n+    }\n \n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .vaultUrl(getEndpoint())\n-                .pipeline(pipeline)\n-                .buildAsyncClient());\n-        } else {\n-            client = clientSetup(pipeline -> new KeyClientBuilder()\n-                .pipeline(pipeline)\n-                .vaultUrl(getEndpoint())\n-                .buildAsyncClient());\n-        }\n+\n+    private void getKeyAsyncClient(HttpClient httpClient, KeyServiceVersion serviceVersion) {", "originalCommit": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c62de619fdc1a7567c718a047ff188e78dea6f34", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java\nindex bb4085132b8..a9e3c4bdf3c 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyAsyncClientTest.java\n\n@@ -36,7 +36,7 @@ public class KeyAsyncClientTest extends KeyClientTestBase {\n     }\n \n \n-    private void getKeyAsyncClient(HttpClient httpClient, KeyServiceVersion serviceVersion) {\n+    private void createKeyAsyncClient(HttpClient httpClient, KeyServiceVersion serviceVersion) {\n         HttpPipeline httpPipeline = getHttpPipeline(httpClient, serviceVersion);\n         client = new KeyClientBuilder()\n             .vaultUrl(getEndpoint())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMDkzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391410934", "bodyText": "This method is a duplicate of getTestParameters() method in KeyClientTestBase.", "author": "srnagar", "createdAt": "2020-03-12T05:40:25Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java", "diffHunk": "@@ -426,4 +475,29 @@ private DeletedKey pollOnKeyPurge(String keyName) {\n         return null;\n     }\n \n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {", "originalCommit": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1NjU5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391756598", "bodyText": "Removed.", "author": "sima-zhu", "createdAt": "2020-03-12T16:52:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMDkzNA=="}], "type": "inlineReview", "revised_code": {"commit": "09a30a3553ef30b5286c8986133f763facf4986b", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java\nindex 3e025a17955..b4429ca60f6 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTest.java\n\n@@ -474,30 +474,4 @@ public class KeyClientTest extends KeyClientTestBase {\n         System.err.printf(\"Deleted Key %s was not purged \\n\", keyName);\n         return null;\n     }\n-\n-    /**\n-     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n-     * service versions that should be tested.\n-     *\n-     * @return A stream of HttpClient and service version combinations to test.\n-     */\n-    static Stream<Arguments> getTestParameters() {\n-        // when this issues is closed, the newer version of junit will have better support for\n-        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n-        List<Arguments> argumentsList = new ArrayList<>();\n-\n-        getHttpClients()\n-            .forEach(httpClient -> {\n-                Arrays.stream(KeyServiceVersion.values()).filter(KeyClientTestBase::shouldServiceVersionBeTested)\n-                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n-            });\n-        return argumentsList.stream();\n-    }\n-\n-    static boolean shouldServiceVersionBeTested(KeyServiceVersion serviceVersion) {\n-        if (Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS) == null) {\n-            return KeyServiceVersion.getLatest().equals(serviceVersion);\n-        }\n-        return true;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjA5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391412090", "bodyText": "Shouldn't the same pipeline be used for both KeyClient and CryptographyClient?", "author": "srnagar", "createdAt": "2020-03-12T05:45:19Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTest.java", "diffHunk": "@@ -32,35 +36,34 @@\n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        } else {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        }\n     }\n \n-    @Test\n-    public void encryptDecryptRsa() throws Exception {\n+    private void initializeKeyClient(HttpClient httpClient) {\n+        pipeline = getHttpPipeline(httpClient, KeyServiceVersion.getLatest());\n+        client = new KeyClientBuilder()\n+            .pipeline(pipeline)\n+            .vaultUrl(getEndpoint())\n+            .buildClient();\n+    }\n+\n+    private CryptographyClient initializeCryptographyClient(String keyId, HttpClient httpClient, CryptographyServiceVersion serviceVersion) {\n+        pipeline = getHttpPipeline(httpClient, serviceVersion);", "originalCommit": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0Nzk3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391747978", "bodyText": "Not exactly, initializeKeyClient is using the latest KeyServiceVersion, as the main purpose of the test is to test over CryptographyServiceClient, which is using CryptographyServiceVersion. There are some other tests for KeyClient", "author": "sima-zhu", "createdAt": "2020-03-12T16:39:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjA5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NjM2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392556364", "bodyText": "Before this change, the same pipeline was used for both.", "author": "srnagar", "createdAt": "2020-03-14T04:40:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjA5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5NjU3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393296574", "bodyText": "Talked offline. This does not affect the logic for tests. Besides of that, These two do not use exactly same pipelines. UserAgentPolicy are not the same.", "author": "sima-zhu", "createdAt": "2020-03-16T20:39:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjA5MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjUyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391412527", "bodyText": "KeyServiceVersion should also be parameterized", "author": "srnagar", "createdAt": "2020-03-12T05:47:11Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTest.java", "diffHunk": "@@ -32,35 +36,34 @@\n     @Override\n     protected void beforeTest() {\n         beforeTestSetup();\n-        if (interceptorManager.isPlaybackMode()) {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        } else {\n-            client = clientSetup(pipeline -> {\n-                this.pipeline = pipeline;\n-                return new KeyClientBuilder()\n-                    .pipeline(pipeline)\n-                    .vaultUrl(getEndpoint())\n-                    .buildClient();\n-            });\n-        }\n     }\n \n-    @Test\n-    public void encryptDecryptRsa() throws Exception {\n+    private void initializeKeyClient(HttpClient httpClient) {\n+        pipeline = getHttpPipeline(httpClient, KeyServiceVersion.getLatest());", "originalCommit": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0OTM3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391749377", "bodyText": "Explained above.\nThe test class is to test over CryptographyServiceClient instead of KeyClient.\nThere are some other test classes which tests KeyClient, and we have parameterized test on KeyServiceVersion over there.", "author": "sima-zhu", "createdAt": "2020-03-12T16:41:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjUyNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjc1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391412754", "bodyText": "Since this is cryptography client test, should this be CryptographServiceVersion?", "author": "srnagar", "createdAt": "2020-03-12T05:48:13Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTestBase.java", "diffHunk": "@@ -209,4 +202,23 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    protected Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                for (KeyServiceVersion serviceVersion : KeyServiceVersion.values()) {", "originalCommit": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1MDMwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391750306", "bodyText": "This is left over. I forgot to remove.\nAll tests here are using the helper method under TestHelper.\nRemoved", "author": "sima-zhu", "createdAt": "2020-03-12T16:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjc1NA=="}], "type": "inlineReview", "revised_code": {"commit": "c62de619fdc1a7567c718a047ff188e78dea6f34", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTestBase.java b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTestBase.java\nindex ccafc044741..48f27352f3a 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTestBase.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/CryptographyClientTestBase.java\n\n@@ -202,23 +202,4 @@ public abstract class CryptographyClientTestBase extends TestBase {\n             e.printStackTrace();\n         }\n     }\n-\n-    /**\n-     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n-     * service versions that should be tested.\n-     *\n-     * @return A stream of HttpClient and service version combinations to test.\n-     */\n-    protected Stream<Arguments> getTestParameters() {\n-        // when this issues is closed, the newer version of junit will have better support for\n-        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n-        List<Arguments> argumentsList = new ArrayList<>();\n-        getHttpClients()\n-            .forEach(httpClient -> {\n-                for (KeyServiceVersion serviceVersion : KeyServiceVersion.values()) {\n-                    argumentsList.add(Arguments.of(httpClient, serviceVersion));\n-                }\n-            });\n-        return argumentsList.stream();\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjk2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391412961", "bodyText": "Should this also include service versions?", "author": "srnagar", "createdAt": "2020-03-12T05:49:12Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/KeyEncryptionKeyClientTestBase.java", "diffHunk": "@@ -176,4 +159,21 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    protected Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                argumentsList.add(Arguments.of(httpClient));", "originalCommit": "73f2c3ae60ed7e6104db83773bf8de9de71e14f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1MDU5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r391750594", "bodyText": "Left over. It is supposed to remove.", "author": "sima-zhu", "createdAt": "2020-03-12T16:43:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQxMjk2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c62de619fdc1a7567c718a047ff188e78dea6f34", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/KeyEncryptionKeyClientTestBase.java b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/KeyEncryptionKeyClientTestBase.java\nindex 82930ab5542..801b8c8f247 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/KeyEncryptionKeyClientTestBase.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/KeyEncryptionKeyClientTestBase.java\n\n@@ -159,21 +159,4 @@ public abstract class KeyEncryptionKeyClientTestBase extends TestBase {\n             e.printStackTrace();\n         }\n     }\n-\n-    /**\n-     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n-     * service versions that should be tested.\n-     *\n-     * @return A stream of HttpClient and service version combinations to test.\n-     */\n-    protected Stream<Arguments> getTestParameters() {\n-        // when this issues is closed, the newer version of junit will have better support for\n-        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n-        List<Arguments> argumentsList = new ArrayList<>();\n-        getHttpClients()\n-            .forEach(httpClient -> {\n-                argumentsList.add(Arguments.of(httpClient));\n-            });\n-        return argumentsList.stream();\n-    }\n }\n"}}, {"oid": "c62de619fdc1a7567c718a047ff188e78dea6f34", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c62de619fdc1a7567c718a047ff188e78dea6f34", "message": "Addressed comments", "committedDate": "2020-03-12T16:51:21Z", "type": "commit"}, {"oid": "09a30a3553ef30b5286c8986133f763facf4986b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/09a30a3553ef30b5286c8986133f763facf4986b", "message": "Support comma separate env values", "committedDate": "2020-03-12T17:15:11Z", "type": "commit"}, {"oid": "3b4b9caac9f21638e496863cb14e3d476b37da37", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3b4b9caac9f21638e496863cb14e3d476b37da37", "message": "Fixed linting", "committedDate": "2020-03-12T17:29:45Z", "type": "commit"}, {"oid": "f118ab14b6dab51e05aa792e39e92a0a717ed87b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f118ab14b6dab51e05aa792e39e92a0a717ed87b", "message": "More fix on linting", "committedDate": "2020-03-12T19:54:56Z", "type": "commit"}, {"oid": "7e1f21bca6e819a4412816d2ceb3336db1527615", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7e1f21bca6e819a4412816d2ceb3336db1527615", "message": "Removed unused ones", "committedDate": "2020-03-13T05:25:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDgyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392554827", "bodyText": "This method can now be private.", "author": "srnagar", "createdAt": "2020-03-14T04:10:46Z", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java", "diffHunk": "@@ -24,8 +27,8 @@\n     static String connectionString;\n     static TokenCredential tokenCredential;\n \n-    @BeforeEach\n-    public void setup() throws InvalidKeyException, NoSuchAlgorithmException {\n+    public void setup(HttpClient httpClient, ConfigurationServiceVersion serviceVersion)", "originalCommit": "7e1f21bca6e819a4412816d2ceb3336db1527615", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA4MjgxMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393082812", "bodyText": "Done.", "author": "sima-zhu", "createdAt": "2020-03-16T14:50:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NDgyNw=="}], "type": "inlineReview", "revised_code": {"commit": "b38e333006a671c6233c1ab837d2f136be01faa5", "chunk": "diff --git a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java\nindex a7ea66eef33..05e0614627e 100644\n--- a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java\n+++ b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/AadCredentialTest.java\n\n@@ -27,7 +27,7 @@ public class AadCredentialTest extends TestBase {\n     static String connectionString;\n     static TokenCredential tokenCredential;\n \n-    public void setup(HttpClient httpClient, ConfigurationServiceVersion serviceVersion)\n+    private void setup(HttpClient httpClient, ConfigurationServiceVersion serviceVersion)\n         throws InvalidKeyException, NoSuchAlgorithmException {\n         if (interceptorManager.isPlaybackMode()) {\n             connectionString = \"Endpoint=http://localhost:8080;Id=0000000000000;Secret=MDAwMDAw\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTE5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392555197", "bodyText": "This should be comma-separated list of versions just like http client env variable and should support \"ALL\".", "author": "srnagar", "createdAt": "2020-03-14T04:17:40Z", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.appconfiguration;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+class TestHelper extends TestBase {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(ConfigurationServiceVersion.values()).filter(TestHelper::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    private static boolean shouldServiceVersionBeTested(ConfigurationServiceVersion serviceVersion) {\n+        String serviceVersionFromEnv = Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS);", "originalCommit": "7e1f21bca6e819a4412816d2ceb3336db1527615", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwNzk3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393207975", "bodyText": "AZURE_TEST_SERVICE_VERSIONS - should the name of env var be specific to each service?", "author": "srnagar", "createdAt": "2020-03-16T17:52:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyOTcyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393229727", "bodyText": "yes, iirc, the guidelines say to use service specific names for env variables.\nhttps://azure.github.io/azure-sdk/java_implementation.html#service-specific-environment-variables", "author": "conniey", "createdAt": "2020-03-16T18:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzNDA2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393234069", "bodyText": "Will make the change", "author": "sima-zhu", "createdAt": "2020-03-16T18:35:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI0Mjc2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393242765", "bodyText": "Also, don't read from env var every single time shouldServiceVersionBeTested is called. Read it once before and pass the value to this method.", "author": "srnagar", "createdAt": "2020-03-16T18:51:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTE5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI4NjU4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393286582", "bodyText": "Put it to static final field, so we can fetch the value after initialization.", "author": "sima-zhu", "createdAt": "2020-03-16T20:17:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTE5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b38e333006a671c6233c1ab837d2f136be01faa5", "chunk": "diff --git a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java\nindex 61e00956212..f12d706d7f5 100644\n--- a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java\n+++ b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java\n\n@@ -3,7 +3,6 @@\n package com.azure.data.appconfiguration;\n \n import com.azure.core.http.HttpClient;\n-import com.azure.core.test.TestBase;\n import com.azure.core.util.Configuration;\n import com.azure.core.util.CoreUtils;\n import java.util.ArrayList;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTMwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392555309", "bodyText": "This is not required", "author": "srnagar", "createdAt": "2020-03-14T04:20:19Z", "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java", "diffHunk": "@@ -23,6 +28,12 @@\n public abstract class TestBase implements BeforeEachCallback {\n     // Environment variable name used to determine the TestMode.\n     private static final String AZURE_TEST_MODE = \"AZURE_TEST_MODE\";\n+    private static final String AZURE_TEST_HTTP_CLIENTS = \"AZURE_TEST_HTTP_CLIENTS\";\n+    protected static final String AZURE_TEST_HTTP_CLIENTS_VALUE_ALL = \"ALL\";\n+    protected static final String AZURE_TEST_HTTP_CLIENTS_VALUE_NETTY = \"NettyAsyncHttpClient\";\n+    protected static final String AZURE_TEST_HTTP_CLIENTS_VALUE_OKHTTP = \"OkHttpAsyncHttpClient\";", "originalCommit": "7e1f21bca6e819a4412816d2ceb3336db1527615", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5NDAwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393094007", "bodyText": "Removed", "author": "sima-zhu", "createdAt": "2020-03-16T15:06:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTMwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "b38e333006a671c6233c1ab837d2f136be01faa5", "chunk": "diff --git a/sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java b/sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java\nindex 879e6c72b50..94db740f1d4 100644\n--- a/sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java\n+++ b/sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java\n\n@@ -29,10 +29,10 @@ public abstract class TestBase implements BeforeEachCallback {\n     // Environment variable name used to determine the TestMode.\n     private static final String AZURE_TEST_MODE = \"AZURE_TEST_MODE\";\n     private static final String AZURE_TEST_HTTP_CLIENTS = \"AZURE_TEST_HTTP_CLIENTS\";\n-    protected static final String AZURE_TEST_HTTP_CLIENTS_VALUE_ALL = \"ALL\";\n-    protected static final String AZURE_TEST_HTTP_CLIENTS_VALUE_NETTY = \"NettyAsyncHttpClient\";\n-    protected static final String AZURE_TEST_HTTP_CLIENTS_VALUE_OKHTTP = \"OkHttpAsyncHttpClient\";\n-    protected static final String AZURE_TEST_SERVICE_VERSIONS = \"AZURE_TEST_SERVICE_VERSIONS\";\n+    public static final String AZURE_TEST_HTTP_CLIENTS_VALUE_ALL = \"ALL\";\n+    public static final String AZURE_TEST_HTTP_CLIENTS_VALUE_NETTY = \"NettyAsyncHttpClient\";\n+    public static final String AZURE_TEST_SERVICE_VERSIONS = \"AZURE_TEST_SERVICE_VERSIONS\";\n+    public static final String AZURE_TEST_SERVICE_VERSIONS_VALUE_ALL = \"ALL\";\n \n     private static TestMode testMode;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTU0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392555546", "bodyText": "protected and static are contradictory. Change this to public instead.", "author": "srnagar", "createdAt": "2020-03-14T04:25:00Z", "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java", "diffHunk": "@@ -23,6 +28,12 @@\n public abstract class TestBase implements BeforeEachCallback {\n     // Environment variable name used to determine the TestMode.\n     private static final String AZURE_TEST_MODE = \"AZURE_TEST_MODE\";\n+    private static final String AZURE_TEST_HTTP_CLIENTS = \"AZURE_TEST_HTTP_CLIENTS\";\n+    protected static final String AZURE_TEST_HTTP_CLIENTS_VALUE_ALL = \"ALL\";", "originalCommit": "7e1f21bca6e819a4412816d2ceb3336db1527615", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5Mzg3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393093877", "bodyText": "Done", "author": "sima-zhu", "createdAt": "2020-03-16T15:05:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTU0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b38e333006a671c6233c1ab837d2f136be01faa5", "chunk": "diff --git a/sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java b/sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java\nindex 879e6c72b50..94db740f1d4 100644\n--- a/sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java\n+++ b/sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java\n\n@@ -29,10 +29,10 @@ public abstract class TestBase implements BeforeEachCallback {\n     // Environment variable name used to determine the TestMode.\n     private static final String AZURE_TEST_MODE = \"AZURE_TEST_MODE\";\n     private static final String AZURE_TEST_HTTP_CLIENTS = \"AZURE_TEST_HTTP_CLIENTS\";\n-    protected static final String AZURE_TEST_HTTP_CLIENTS_VALUE_ALL = \"ALL\";\n-    protected static final String AZURE_TEST_HTTP_CLIENTS_VALUE_NETTY = \"NettyAsyncHttpClient\";\n-    protected static final String AZURE_TEST_HTTP_CLIENTS_VALUE_OKHTTP = \"OkHttpAsyncHttpClient\";\n-    protected static final String AZURE_TEST_SERVICE_VERSIONS = \"AZURE_TEST_SERVICE_VERSIONS\";\n+    public static final String AZURE_TEST_HTTP_CLIENTS_VALUE_ALL = \"ALL\";\n+    public static final String AZURE_TEST_HTTP_CLIENTS_VALUE_NETTY = \"NettyAsyncHttpClient\";\n+    public static final String AZURE_TEST_SERVICE_VERSIONS = \"AZURE_TEST_SERVICE_VERSIONS\";\n+    public static final String AZURE_TEST_SERVICE_VERSIONS_VALUE_ALL = \"ALL\";\n \n     private static TestMode testMode;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NTU3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392555570", "bodyText": "public static instead of protected static.", "author": "srnagar", "createdAt": "2020-03-14T04:25:28Z", "path": "sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java", "diffHunk": "@@ -121,6 +132,50 @@ protected void beforeTest() {\n     protected void afterTest() {\n     }\n \n+    /**\n+     * Returns a list of {@link HttpClient HttpClients} that should be tested.\n+     * @return A list of {@link HttpClient HttpClients} to be tested.\n+     */\n+    protected static Stream<HttpClient> getHttpClients() {", "originalCommit": "7e1f21bca6e819a4412816d2ceb3336db1527615", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b38e333006a671c6233c1ab837d2f136be01faa5", "chunk": "diff --git a/sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java b/sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java\nindex 879e6c72b50..94db740f1d4 100644\n--- a/sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java\n+++ b/sdk/core/azure-core-test/src/main/java/com/azure/core/test/TestBase.java\n\n@@ -134,9 +134,10 @@ public abstract class TestBase implements BeforeEachCallback {\n \n     /**\n      * Returns a list of {@link HttpClient HttpClients} that should be tested.\n+     *\n      * @return A list of {@link HttpClient HttpClients} to be tested.\n      */\n-    protected static Stream<HttpClient> getHttpClients() {\n+    public static Stream<HttpClient> getHttpClients() {\n         if (testMode == TestMode.PLAYBACK) {\n             // Call to @MethodSource method happens @BeforeEach call, so the interceptorManager is\n             // not yet initialized. So, playbackClient will not be available until later.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NjIwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392556205", "bodyText": "Check the env variable before returning true.", "author": "srnagar", "createdAt": "2020-03-14T04:36:59Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTestBase.java", "diffHunk": "@@ -413,4 +404,30 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(KeyServiceVersion.values()).filter(KeyClientTestBase::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    private static boolean shouldServiceVersionBeTested(KeyServiceVersion serviceVersion) {\n+        if (Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS) == null) {\n+            return KeyServiceVersion.getLatest().equals(serviceVersion);\n+        }\n+        return true;", "originalCommit": "7e1f21bca6e819a4412816d2ceb3336db1527615", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwMTY5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393101691", "bodyText": "Done", "author": "sima-zhu", "createdAt": "2020-03-16T15:17:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NjIwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "b38e333006a671c6233c1ab837d2f136be01faa5", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTestBase.java b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTestBase.java\nindex 40688d56953..ff74b0f1bd9 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTestBase.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/KeyClientTestBase.java\n\n@@ -424,10 +425,32 @@ public abstract class KeyClientTestBase extends TestBase {\n         return argumentsList.stream();\n     }\n \n+    /**\n+     * Returns whether the given service version match the rules of test framework.\n+     *\n+     * <ul>\n+     * <li>Using latest service version as default if no environment variable is set.</li>\n+     * <li>If it's set to ALL, all Service versions in {@link KeyServiceVersion} will be tested.</li>\n+     * <li>Otherwise, Service version string should match env variable.</li>\n+     * </ul>\n+     *\n+     * Environment values currently supported are: \"ALL\", \"${version}\".\n+     * Use comma to separate http clients want to test.\n+     * e.g. {@code set AZURE_TEST_SERVICE_VERSIONS = V1_0, V2_0}\n+     *\n+     * @param serviceVersion ServiceVersion needs to check\n+     * @return Boolean indicates whether filters out the service version or not.\n+     */\n     private static boolean shouldServiceVersionBeTested(KeyServiceVersion serviceVersion) {\n-        if (Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS) == null) {\n+        String serviceVersionFromEnv = Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS);\n+        if (CoreUtils.isNullOrEmpty(serviceVersionFromEnv)) {\n             return KeyServiceVersion.getLatest().equals(serviceVersion);\n         }\n-        return true;\n+        if (AZURE_TEST_SERVICE_VERSIONS_VALUE_ALL.equalsIgnoreCase(serviceVersionFromEnv)) {\n+            return true;\n+        }\n+        String[] configuredServiceVersionList = serviceVersionFromEnv.split(\",\");\n+        return Arrays.stream(configuredServiceVersionList).anyMatch(configuredServiceVersion ->\n+            serviceVersion.toString().equals(configuredServiceVersion.trim()));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NjY2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392556666", "bodyText": "Check env variable before returning true.", "author": "srnagar", "createdAt": "2020-03-14T04:46:34Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/TestHelper.java", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Configuration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+public class TestHelper extends TestBase {\n+    public static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(CryptographyServiceVersion.values()).filter(TestHelper::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    private static boolean shouldServiceVersionBeTested(CryptographyServiceVersion serviceVersion) {\n+        if (Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS) == null) {\n+            return CryptographyServiceVersion.getLatest().equals(serviceVersion);\n+        }\n+        return true;", "originalCommit": "7e1f21bca6e819a4412816d2ceb3336db1527615", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b38e333006a671c6233c1ab837d2f136be01faa5", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/TestHelper.java b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/TestHelper.java\nindex 6d90c04b139..74d7919e930 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/TestHelper.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/TestHelper.java\n\n@@ -6,6 +6,8 @@ package com.azure.security.keyvault.keys.cryptography;\n import com.azure.core.http.HttpClient;\n import com.azure.core.test.TestBase;\n import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.security.keyvault.keys.KeyServiceVersion;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1NjcwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r392556708", "bodyText": "Same here - check env variable before returning true.", "author": "srnagar", "createdAt": "2020-03-14T04:47:37Z", "path": "sdk/keyvault/azure-security-keyvault-secrets/src/test/java/com/azure/security/keyvault/secrets/SecretClientTestBase.java", "diffHunk": "@@ -437,4 +430,30 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(SecretServiceVersion.values()).filter(SecretClientTestBase::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    private static boolean shouldServiceVersionBeTested(SecretServiceVersion serviceVersion) {\n+        if (Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS) == null) {\n+            return SecretServiceVersion.getLatest().equals(serviceVersion);\n+        }\n+        return true;", "originalCommit": "7e1f21bca6e819a4412816d2ceb3336db1527615", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b38e333006a671c6233c1ab837d2f136be01faa5", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-secrets/src/test/java/com/azure/security/keyvault/secrets/SecretClientTestBase.java b/sdk/keyvault/azure-security-keyvault-secrets/src/test/java/com/azure/security/keyvault/secrets/SecretClientTestBase.java\nindex 2411610c3f6..0c9ef64d8ac 100644\n--- a/sdk/keyvault/azure-security-keyvault-secrets/src/test/java/com/azure/security/keyvault/secrets/SecretClientTestBase.java\n+++ b/sdk/keyvault/azure-security-keyvault-secrets/src/test/java/com/azure/security/keyvault/secrets/SecretClientTestBase.java\n\n@@ -450,10 +451,32 @@ public abstract class SecretClientTestBase extends TestBase {\n         return argumentsList.stream();\n     }\n \n+    /**\n+     * Returns whether the given service version match the rules of test framework.\n+     *\n+     * <ul>\n+     * <li>Using latest service version as default if no environment variable is set.</li>\n+     * <li>If it's set to ALL, all Service versions in {@link SecretServiceVersion} will be tested.</li>\n+     * <li>Otherwise, Service version string should match env variable.</li>\n+     * </ul>\n+     *\n+     * Environment values currently supported are: \"ALL\", \"${version}\".\n+     * Use comma to separate http clients want to test.\n+     * e.g. {@code set AZURE_TEST_SERVICE_VERSIONS = V1_0, V2_0}\n+     *\n+     * @param serviceVersion ServiceVersion needs to check\n+     * @return Boolean indicates whether filters out the service version or not.\n+     */\n     private static boolean shouldServiceVersionBeTested(SecretServiceVersion serviceVersion) {\n-        if (Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS) == null) {\n+        String serviceVersionFromEnv = Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS);\n+        if (CoreUtils.isNullOrEmpty(serviceVersionFromEnv)) {\n             return SecretServiceVersion.getLatest().equals(serviceVersion);\n         }\n-        return true;\n+        if (AZURE_TEST_SERVICE_VERSIONS_VALUE_ALL.equalsIgnoreCase(serviceVersionFromEnv)) {\n+            return true;\n+        }\n+        String[] configuredServiceVersionList = serviceVersionFromEnv.split(\",\");\n+        return Arrays.stream(configuredServiceVersionList).anyMatch(configuredServiceVersion ->\n+            serviceVersion.toString().equals(configuredServiceVersion.trim()));\n     }\n }\n"}}, {"oid": "b38e333006a671c6233c1ab837d2f136be01faa5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b38e333006a671c6233c1ab837d2f136be01faa5", "message": "Address all comments", "committedDate": "2020-03-16T16:34:15Z", "type": "commit"}, {"oid": "49067af01be0fdf46df842c3b13c807b378e3d33", "url": "https://github.com/Azure/azure-sdk-for-java/commit/49067af01be0fdf46df842c3b13c807b378e3d33", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into okhttp", "committedDate": "2020-03-16T17:17:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxMTMyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393211328", "bodyText": "Don't need to extend from TestBase", "author": "srnagar", "createdAt": "2020-03-16T17:58:35Z", "path": "sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/TestHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.keys.cryptography;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.test.TestBase;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.security.keyvault.keys.KeyServiceVersion;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+public class TestHelper extends TestBase {", "originalCommit": "49067af01be0fdf46df842c3b13c807b378e3d33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a6d943eb8a67fba83dcb8f048aa3a182ababdd1", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/TestHelper.java b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/TestHelper.java\nindex 74d7919e930..84a3eb4fa6d 100644\n--- a/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/TestHelper.java\n+++ b/sdk/keyvault/azure-security-keyvault-keys/src/test/java/com/azure/security/keyvault/keys/cryptography/TestHelper.java\n\n@@ -14,8 +14,10 @@ import java.util.List;\n import java.util.stream.Stream;\n import org.junit.jupiter.params.provider.Arguments;\n \n-public class TestHelper extends TestBase {\n+public class TestHelper {\n     public static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+    private static final String AZURE_TEST_SERVICE_VERSIONS = \"AZURE_KEYVAULT_CRYPTOGRAPHY_SERVICE_VERSIONS\";\n+    private static final String AZURE_TEST_SERVICE_VERSIONS_VALUE_ALL = \"ALL\";\n \n     /**\n      * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n"}}, {"oid": "2a6d943eb8a67fba83dcb8f048aa3a182ababdd1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2a6d943eb8a67fba83dcb8f048aa3a182ababdd1", "message": "Rename all service version variables", "committedDate": "2020-03-16T19:16:45Z", "type": "commit"}, {"oid": "a3efe1d448941a87a46e6474726d11ad5eefebc5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a3efe1d448941a87a46e6474726d11ad5eefebc5", "message": "Address comments", "committedDate": "2020-03-16T20:16:10Z", "type": "commit"}, {"oid": "b86b20cf00e170b24e46b2c027a58f00b2abda29", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b86b20cf00e170b24e46b2c027a58f00b2abda29", "message": "Changed incorrect json files", "committedDate": "2020-03-16T23:15:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2NDk3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393364973", "bodyText": "Name the variable and value as AZURE_APPCONFIG_TEST_SERVICE_VERSIONS as we don't want it to be mistaken for some non-test related env variable.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String AZURE_TEST_SERVICE_VERSIONS = \"AZURE_APPCONFIG_SERVICE_VERSIONS\";\n          \n          \n            \n                private static final String AZURE_APPCONFIG_TEST_SERVICE_VERSIONS = \"AZURE_APPCONFIG_TEST_SERVICE_VERSIONS\";", "author": "srnagar", "createdAt": "2020-03-16T23:23:03Z", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.appconfiguration;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+import static com.azure.core.test.TestBase.getHttpClients;\n+\n+class TestHelper {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+    private static final String AZURE_TEST_SERVICE_VERSIONS = \"AZURE_APPCONFIG_SERVICE_VERSIONS\";", "originalCommit": "b86b20cf00e170b24e46b2c027a58f00b2abda29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "265d2921514f362342360cf9efa9b81ef401bc85", "chunk": "diff --git a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java\nindex 0723ae14c81..accf2b5092d 100644\n--- a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java\n+++ b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java\n\n@@ -11,13 +11,14 @@ import java.util.List;\n import java.util.stream.Stream;\n import org.junit.jupiter.params.provider.Arguments;\n \n+import static com.azure.core.test.TestBase.AZURE_TEST_SERVICE_VERSIONS_VALUE_ALL;\n import static com.azure.core.test.TestBase.getHttpClients;\n \n class TestHelper {\n     static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n-    private static final String AZURE_TEST_SERVICE_VERSIONS = \"AZURE_APPCONFIG_SERVICE_VERSIONS\";\n-    private static final String serviceVersionFromEnv = Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS);\n-    private static final String AZURE_TEST_SERVICE_VERSIONS_VALUE_ALL = \"ALL\";\n+    private static final String AZURE_APPCONFIG_TEST_SERVICE_VERSIONS = \"AZURE_APPCONFIG_TEST_SERVICE_VERSIONS\";\n+    private static final String SERVICE_VERSION_FROM_ENV =\n+        Configuration.getGlobalConfiguration().get(AZURE_APPCONFIG_TEST_SERVICE_VERSIONS);\n \n     /**\n      * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2NTI1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393365254", "bodyText": "This can be declared once in TestBase.java in core-test module as ALL can be common for all libraries.", "author": "srnagar", "createdAt": "2020-03-16T23:24:04Z", "path": "sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.data.appconfiguration;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.CoreUtils;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+import static com.azure.core.test.TestBase.getHttpClients;\n+\n+class TestHelper {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n+    private static final String AZURE_TEST_SERVICE_VERSIONS = \"AZURE_APPCONFIG_SERVICE_VERSIONS\";\n+    private static final String serviceVersionFromEnv = Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS);\n+    private static final String AZURE_TEST_SERVICE_VERSIONS_VALUE_ALL = \"ALL\";", "originalCommit": "b86b20cf00e170b24e46b2c027a58f00b2abda29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "265d2921514f362342360cf9efa9b81ef401bc85", "chunk": "diff --git a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java\nindex 0723ae14c81..accf2b5092d 100644\n--- a/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java\n+++ b/sdk/appconfiguration/azure-data-appconfiguration/src/test/java/com/azure/data/appconfiguration/TestHelper.java\n\n@@ -11,13 +11,14 @@ import java.util.List;\n import java.util.stream.Stream;\n import org.junit.jupiter.params.provider.Arguments;\n \n+import static com.azure.core.test.TestBase.AZURE_TEST_SERVICE_VERSIONS_VALUE_ALL;\n import static com.azure.core.test.TestBase.getHttpClients;\n \n class TestHelper {\n     static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n-    private static final String AZURE_TEST_SERVICE_VERSIONS = \"AZURE_APPCONFIG_SERVICE_VERSIONS\";\n-    private static final String serviceVersionFromEnv = Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS);\n-    private static final String AZURE_TEST_SERVICE_VERSIONS_VALUE_ALL = \"ALL\";\n+    private static final String AZURE_APPCONFIG_TEST_SERVICE_VERSIONS = \"AZURE_APPCONFIG_TEST_SERVICE_VERSIONS\";\n+    private static final String SERVICE_VERSION_FROM_ENV =\n+        Configuration.getGlobalConfiguration().get(AZURE_APPCONFIG_TEST_SERVICE_VERSIONS);\n \n     /**\n      * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2NjUzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393366532", "bodyText": "This should be fetched just once instead of reading from env variables for all client-service version combinations. Same for all other clients.", "author": "srnagar", "createdAt": "2020-03-16T23:28:41Z", "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "diffHunk": "@@ -605,5 +601,53 @@ public void sleep(long millis) {\n             e.printStackTrace();\n         }\n     }\n+\n+    /**\n+     * Returns a stream of arguments that includes all combinations of eligible {@link HttpClient HttpClients} and\n+     * service versions that should be tested.\n+     *\n+     * @return A stream of HttpClient and service version combinations to test.\n+     */\n+    static Stream<Arguments> getTestParameters() {\n+        // when this issues is closed, the newer version of junit will have better support for\n+        // cartesian product of arguments - https://github.com/junit-team/junit5/issues/1427\n+        List<Arguments> argumentsList = new ArrayList<>();\n+        getHttpClients()\n+            .forEach(httpClient -> {\n+                Arrays.stream(CertificateServiceVersion.values()).filter(\n+                    CertificateClientTestBase::shouldServiceVersionBeTested)\n+                    .forEach(serviceVersion -> argumentsList.add(Arguments.of(httpClient, serviceVersion)));\n+            });\n+        return argumentsList.stream();\n+    }\n+\n+    /**\n+     * Returns whether the given service version match the rules of test framework.\n+     *\n+     * <ul>\n+     * <li>Using latest service version as default if no environment variable is set.</li>\n+     * <li>If it's set to ALL, all Service versions in {@link CertificateServiceVersion} will be tested.</li>\n+     * <li>Otherwise, Service version string should match env variable.</li>\n+     * </ul>\n+     *\n+     * Environment values currently supported are: \"ALL\", \"${version}\".\n+     * Use comma to separate http clients want to test.\n+     * e.g. {@code set AZURE_TEST_SERVICE_VERSIONS = V1_0, V2_0}\n+     *\n+     * @param serviceVersion ServiceVersion needs to check\n+     * @return Boolean indicates whether filters out the service version or not.\n+     */\n+    private static boolean shouldServiceVersionBeTested(CertificateServiceVersion serviceVersion) {\n+        String serviceVersionFromEnv = Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS);", "originalCommit": "b86b20cf00e170b24e46b2c027a58f00b2abda29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2ODMyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393368323", "bodyText": "That's a miss. Make the changes.", "author": "sima-zhu", "createdAt": "2020-03-16T23:35:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2NjUzMg=="}], "type": "inlineReview", "revised_code": {"commit": "265d2921514f362342360cf9efa9b81ef401bc85", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java b/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java\nindex f7c68126859..f039dd595aa 100644\n--- a/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java\n+++ b/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java\n\n@@ -638,14 +640,13 @@ public abstract class CertificateClientTestBase extends TestBase {\n      * @return Boolean indicates whether filters out the service version or not.\n      */\n     private static boolean shouldServiceVersionBeTested(CertificateServiceVersion serviceVersion) {\n-        String serviceVersionFromEnv = Configuration.getGlobalConfiguration().get(AZURE_TEST_SERVICE_VERSIONS);\n-        if (CoreUtils.isNullOrEmpty(serviceVersionFromEnv)) {\n+        if (CoreUtils.isNullOrEmpty(SERVICE_VERSION_FROM_ENV)) {\n             return CertificateServiceVersion.getLatest().equals(serviceVersion);\n         }\n-        if (AZURE_TEST_SERVICE_VERSIONS_VALUE_ALL.equalsIgnoreCase(serviceVersionFromEnv)) {\n+        if (AZURE_TEST_SERVICE_VERSIONS_VALUE_ALL.equalsIgnoreCase(SERVICE_VERSION_FROM_ENV)) {\n             return true;\n         }\n-        String[] configuredServiceVersionList = serviceVersionFromEnv.split(\",\");\n+        String[] configuredServiceVersionList = SERVICE_VERSION_FROM_ENV.split(\",\");\n         return Arrays.stream(configuredServiceVersionList).anyMatch(configuredServiceVersion ->\n             serviceVersion.toString().equals(configuredServiceVersion.trim()));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2NjgyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8679#discussion_r393366824", "bodyText": "Add TEST to the name of env variable so that it's not mistaken to be non-test related config. Same for all other service version env variables used in tests.", "author": "srnagar", "createdAt": "2020-03-16T23:29:46Z", "path": "sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java", "diffHunk": "@@ -34,27 +34,31 @@\n import com.azure.security.keyvault.certificates.models.LifetimeAction;\n import com.azure.security.keyvault.certificates.models.CertificatePolicyAction;\n import com.azure.security.keyvault.certificates.models.WellKnownIssuerNames;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.util.stream.Stream;\n import org.junit.jupiter.api.Test;\n \n-import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n-import java.io.FileReader;\n import java.io.IOException;\n import java.security.cert.CertificateException;\n import java.security.cert.CertificateFactory;\n import java.security.cert.X509Certificate;\n import java.util.*;\n import java.util.function.Consumer;\n-import java.util.function.Function;\n import java.util.function.BiConsumer;\n+import org.junit.jupiter.params.provider.Arguments;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.fail;\n \n public abstract class CertificateClientTestBase extends TestBase {\n+    static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n     private static final String SDK_NAME = \"client_name\";\n     private static final String SDK_VERSION = \"client_version\";\n+    private static final String AZURE_TEST_SERVICE_VERSIONS = \"AZURE_KEYVAULT_CERTIFICATE_SERVICE_VERSIONS\";", "originalCommit": "b86b20cf00e170b24e46b2c027a58f00b2abda29", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "265d2921514f362342360cf9efa9b81ef401bc85", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java b/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java\nindex f7c68126859..f039dd595aa 100644\n--- a/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java\n+++ b/sdk/keyvault/azure-security-keyvault-certificates/src/test/java/com/azure/security/keyvault/certificates/CertificateClientTestBase.java\n\n@@ -57,7 +57,9 @@ public abstract class CertificateClientTestBase extends TestBase {\n     static final String DISPLAY_NAME_WITH_ARGUMENTS = \"{displayName} with [{arguments}]\";\n     private static final String SDK_NAME = \"client_name\";\n     private static final String SDK_VERSION = \"client_version\";\n-    private static final String AZURE_TEST_SERVICE_VERSIONS = \"AZURE_KEYVAULT_CERTIFICATE_SERVICE_VERSIONS\";\n+    private static final String AZURE_KEYVAULT_TEST_CERTIFICATE_SERVICE_VERSIONS = \"AZURE_KEYVAULT_TEST_CERTIFICATE_SERVICE_VERSIONS\";\n+    private static final String SERVICE_VERSION_FROM_ENV =\n+        Configuration.getGlobalConfiguration().get(AZURE_KEYVAULT_TEST_CERTIFICATE_SERVICE_VERSIONS);\n     private static final String AZURE_TEST_SERVICE_VERSIONS_VALUE_ALL = \"ALL\";\n \n     @Override\n"}}, {"oid": "265d2921514f362342360cf9efa9b81ef401bc85", "url": "https://github.com/Azure/azure-sdk-for-java/commit/265d2921514f362342360cf9efa9b81ef401bc85", "message": "Fixed linting and address comments", "committedDate": "2020-03-16T23:41:47Z", "type": "commit"}, {"oid": "c792a410afbf895d9eec0c45371ecc9afac1cb83", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c792a410afbf895d9eec0c45371ecc9afac1cb83", "message": "Fix linting", "committedDate": "2020-03-17T02:00:53Z", "type": "commit"}, {"oid": "7c1773adea02dabc976751db880b7e3492f740f2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7c1773adea02dabc976751db880b7e3492f740f2", "message": "remove static", "committedDate": "2020-03-17T16:22:13Z", "type": "commit"}]}