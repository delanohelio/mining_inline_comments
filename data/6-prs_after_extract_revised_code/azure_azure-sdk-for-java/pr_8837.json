{"pr_number": 8837, "pr_title": "Cosmos model package", "pr_createdAt": "2020-03-07T09:33:23Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/8837", "timeline": [{"oid": "618d7182ada23823099a83f7b90ba2b0cdaa63e0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/618d7182ada23823099a83f7b90ba2b0cdaa63e0", "message": "Created model package, moved ChangeFeedOptions to implementation package", "committedDate": "2020-03-06T19:50:59Z", "type": "commit"}, {"oid": "9d989facf8f49036d69180c0d228076a3e13a2ff", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9d989facf8f49036d69180c0d228076a3e13a2ff", "message": "Moved compositePath to model package", "committedDate": "2020-03-06T20:05:06Z", "type": "commit"}, {"oid": "481237b349259606d6751634a294d81ca224edda", "url": "https://github.com/Azure/azure-sdk-for-java/commit/481237b349259606d6751634a294d81ca224edda", "message": "Moved CosmosAsyncContainerResponse, properties, and more files to model", "committedDate": "2020-03-06T21:45:09Z", "type": "commit"}, {"oid": "b46a164156c673d0051e9421eaef63c85b3e5d12", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b46a164156c673d0051e9421eaef63c85b3e5d12", "message": "Moved Cosmos Async Item Response to model", "committedDate": "2020-03-06T22:40:32Z", "type": "commit"}, {"oid": "829d300742cc544d41667436a738ce9be3d5a47b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/829d300742cc544d41667436a738ce9be3d5a47b", "message": "Moved permission response and  properties", "committedDate": "2020-03-06T22:53:01Z", "type": "commit"}, {"oid": "9c7979ef5a82608b5ef607427fa483280b835d15", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9c7979ef5a82608b5ef607427fa483280b835d15", "message": "Moved Cosmos Async Stored Procedure Response", "committedDate": "2020-03-06T23:19:48Z", "type": "commit"}, {"oid": "0c4cf3871bf7a74826e8cb8a528cee1def181403", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0c4cf3871bf7a74826e8cb8a528cee1def181403", "message": "Moved Cosmos Async Trigger Response", "committedDate": "2020-03-06T23:57:59Z", "type": "commit"}, {"oid": "37d6d63902cbc195547a35efddbd9d52665c1cb2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/37d6d63902cbc195547a35efddbd9d52665c1cb2", "message": "Moved UserDefined Async Response", "committedDate": "2020-03-07T00:10:51Z", "type": "commit"}, {"oid": "e722b17092fadc19b747832241d25df37829c89b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e722b17092fadc19b747832241d25df37829c89b", "message": "Moved Cosmos Async User Response to model", "committedDate": "2020-03-07T00:29:16Z", "type": "commit"}, {"oid": "54f719e91e90f52a3f5d955a54f3a6ebae397287", "url": "https://github.com/Azure/azure-sdk-for-java/commit/54f719e91e90f52a3f5d955a54f3a6ebae397287", "message": "Moved other Cosmos Response types to model package", "committedDate": "2020-03-07T01:16:56Z", "type": "commit"}, {"oid": "08c774666bc54ac62ba1b0ded17ba6bc3d5bfdf4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/08c774666bc54ac62ba1b0ded17ba6bc3d5bfdf4", "message": "Moved all request option classes to model package", "committedDate": "2020-03-07T02:02:18Z", "type": "commit"}, {"oid": "fbd9653ec6c1b32e81f1dbfd1f8f3054f9b76f56", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fbd9653ec6c1b32e81f1dbfd1f8f3054f9b76f56", "message": "Moved Database Account and Database Account Location to model", "committedDate": "2020-03-07T02:16:26Z", "type": "commit"}, {"oid": "aff92314c07184a01e7ca0204a9c05019f7d9361", "url": "https://github.com/Azure/azure-sdk-for-java/commit/aff92314c07184a01e7ca0204a9c05019f7d9361", "message": "Fixed constructor accessor", "committedDate": "2020-03-07T03:48:39Z", "type": "commit"}, {"oid": "015951fb7407667d847e5df9bd7b2586f760e0d8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/015951fb7407667d847e5df9bd7b2586f760e0d8", "message": "Moved FeedOptions and FeedResponse to model package", "committedDate": "2020-03-07T04:08:36Z", "type": "commit"}, {"oid": "c2dd5f6fd9998658baa47c6411745c2e60a2cc66", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c2dd5f6fd9998658baa47c6411745c2e60a2cc66", "message": "Moved feed response to model", "committedDate": "2020-03-07T04:55:19Z", "type": "commit"}, {"oid": "77e4b4478d98f687e124134d0455380fb3233900", "url": "https://github.com/Azure/azure-sdk-for-java/commit/77e4b4478d98f687e124134d0455380fb3233900", "message": "Moved triggers, indexes, sql params, unique keys to model package", "committedDate": "2020-03-07T08:24:50Z", "type": "commit"}, {"oid": "8e5d745063fd8661d21ac35563de0d3b5c53bb51", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8e5d745063fd8661d21ac35563de0d3b5c53bb51", "message": "Moved partition key, partition key definition, and other options", "committedDate": "2020-03-07T08:56:44Z", "type": "commit"}, {"oid": "d258f0d8f205c058bf09a849f634984884a119fc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d258f0d8f205c058bf09a849f634984884a119fc", "message": "Moved Resource, JsonSerializable, and cosmos error to model package", "committedDate": "2020-03-07T09:27:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NDc0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8837#discussion_r389264748", "bodyText": "why FeedResponse is a model but pageFlux is not?", "author": "moderakh", "createdAt": "2020-03-07T16:09:06Z", "path": "sdk/cosmos/azure-cosmos-benchmark/src/test/java/com/azure/cosmos/benchmark/Utils.java", "diffHunk": "@@ -4,9 +4,9 @@\n package com.azure.cosmos.benchmark;\n \n import com.azure.cosmos.ConnectionPolicy;\n-import com.azure.cosmos.FeedResponse;\n-import com.azure.cosmos.ThrottlingRetryOptions;\n-import com.azure.cosmos.SqlQuerySpec;\n+import com.azure.cosmos.model.FeedResponse;", "originalCommit": "d258f0d8f205c058bf09a849f634984884a119fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "481c6de304617ea036f44152e9514b55902b60f8", "chunk": "diff --git a/sdk/cosmos/azure-cosmos-benchmark/src/test/java/com/azure/cosmos/benchmark/Utils.java b/sdk/cosmos/azure-cosmos-benchmark/src/test/java/com/azure/cosmos/benchmark/Utils.java\nindex 2d1e39d62a0..62cd72f5c5c 100644\n--- a/sdk/cosmos/azure-cosmos-benchmark/src/test/java/com/azure/cosmos/benchmark/Utils.java\n+++ b/sdk/cosmos/azure-cosmos-benchmark/src/test/java/com/azure/cosmos/benchmark/Utils.java\n\n@@ -5,7 +5,7 @@ package com.azure.cosmos.benchmark;\n \n import com.azure.cosmos.ConnectionPolicy;\n import com.azure.cosmos.model.FeedResponse;\n-import com.azure.cosmos.model.ThrottlingRetryOptions;\n+import com.azure.cosmos.ThrottlingRetryOptions;\n import com.azure.cosmos.model.SqlQuerySpec;\n import com.azure.cosmos.implementation.AsyncDocumentClient;\n import com.azure.cosmos.implementation.Database;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NDc3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8837#discussion_r389264776", "bodyText": "FeedResponse was moved to model, why CosmosPageFlux is not a model?", "author": "moderakh", "createdAt": "2020-03-07T16:09:54Z", "path": "sdk/cosmos/azure-cosmos-examples/src/main/java/com/azure/cosmos/examples/BasicDemo.java", "diffHunk": "@@ -5,14 +5,14 @@\n import com.azure.cosmos.CosmosAsyncClient;\n import com.azure.cosmos.CosmosAsyncContainer;\n import com.azure.cosmos.CosmosAsyncDatabase;\n-import com.azure.cosmos.CosmosAsyncItemResponse;\n+import com.azure.cosmos.model.CosmosAsyncItemResponse;\n import com.azure.cosmos.CosmosClientBuilder;\n import com.azure.cosmos.CosmosClientException;\n-import com.azure.cosmos.CosmosContainerProperties;\n+import com.azure.cosmos.model.CosmosContainerProperties;\n import com.azure.cosmos.CosmosPagedFlux;", "originalCommit": "d258f0d8f205c058bf09a849f634984884a119fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMzA4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8837#discussion_r389303089", "bodyText": "Yes, these should be model too. I will move both CosmosPagedFlux and CosmosPagedIterable to model.", "author": "kushagraThapar", "createdAt": "2020-03-07T18:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NDc3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "481c6de304617ea036f44152e9514b55902b60f8", "chunk": "diff --git a/sdk/cosmos/azure-cosmos-examples/src/main/java/com/azure/cosmos/examples/BasicDemo.java b/sdk/cosmos/azure-cosmos-examples/src/main/java/com/azure/cosmos/examples/BasicDemo.java\nindex 59ecb4ca9e8..e0f0e259867 100644\n--- a/sdk/cosmos/azure-cosmos-examples/src/main/java/com/azure/cosmos/examples/BasicDemo.java\n+++ b/sdk/cosmos/azure-cosmos-examples/src/main/java/com/azure/cosmos/examples/BasicDemo.java\n\n@@ -9,7 +9,7 @@ import com.azure.cosmos.model.CosmosAsyncItemResponse;\n import com.azure.cosmos.CosmosClientBuilder;\n import com.azure.cosmos.CosmosClientException;\n import com.azure.cosmos.model.CosmosContainerProperties;\n-import com.azure.cosmos.CosmosPagedFlux;\n+import com.azure.cosmos.model.CosmosPagedFlux;\n import com.azure.cosmos.model.FeedOptions;\n import com.azure.cosmos.model.FeedResponse;\n import com.azure.cosmos.model.PartitionKey;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NDkxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8837#discussion_r389264910", "bodyText": "question: ThrottingRetryOption is not a rest contract. it defines client behaviour on throttling. Is this qualify for a model?", "author": "moderakh", "createdAt": "2020-03-07T16:12:07Z", "path": "sdk/cosmos/azure-cosmos-examples/src/test/java/com/azure/cosmos/rx/examples/Utils.java", "diffHunk": "@@ -5,9 +5,9 @@\n \n import com.azure.cosmos.ConnectionMode;\n import com.azure.cosmos.ConnectionPolicy;\n-import com.azure.cosmos.FeedResponse;\n-import com.azure.cosmos.ThrottlingRetryOptions;\n-import com.azure.cosmos.SqlQuerySpec;\n+import com.azure.cosmos.model.FeedResponse;\n+import com.azure.cosmos.model.ThrottlingRetryOptions;", "originalCommit": "d258f0d8f205c058bf09a849f634984884a119fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMjc0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8837#discussion_r389302745", "bodyText": "No it doesn't, as it specifies client configuration.", "author": "kushagraThapar", "createdAt": "2020-03-07T18:37:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NDkxMA=="}], "type": "inlineReview", "revised_code": {"commit": "481c6de304617ea036f44152e9514b55902b60f8", "chunk": "diff --git a/sdk/cosmos/azure-cosmos-examples/src/test/java/com/azure/cosmos/rx/examples/Utils.java b/sdk/cosmos/azure-cosmos-examples/src/test/java/com/azure/cosmos/rx/examples/Utils.java\nindex 77bfb6eb770..db79a64e6a3 100644\n--- a/sdk/cosmos/azure-cosmos-examples/src/test/java/com/azure/cosmos/rx/examples/Utils.java\n+++ b/sdk/cosmos/azure-cosmos-examples/src/test/java/com/azure/cosmos/rx/examples/Utils.java\n\n@@ -6,7 +6,7 @@ package com.azure.cosmos.rx.examples;\n import com.azure.cosmos.ConnectionMode;\n import com.azure.cosmos.ConnectionPolicy;\n import com.azure.cosmos.model.FeedResponse;\n-import com.azure.cosmos.model.ThrottlingRetryOptions;\n+import com.azure.cosmos.ThrottlingRetryOptions;\n import com.azure.cosmos.model.SqlQuerySpec;\n import com.azure.cosmos.implementation.AsyncDocumentClient;\n import com.azure.cosmos.implementation.Database;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NjQ3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8837#discussion_r389266472", "bodyText": "why FeedResponseDiagnostics is a model?", "author": "moderakh", "createdAt": "2020-03-07T16:35:58Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/model/FeedResponseDiagnostics.java", "diffHunk": "@@ -1,7 +1,7 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-package com.azure.cosmos;\n+package com.azure.cosmos.model;", "originalCommit": "d258f0d8f205c058bf09a849f634984884a119fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMjkyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8837#discussion_r389302921", "bodyText": "I was not sure about this one. But since CosmosResponseDiagnostics is not a model too, so I agree, this shouldn't be either. Will move this back to cosmos package.", "author": "kushagraThapar", "createdAt": "2020-03-07T18:39:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NjQ3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "481c6de304617ea036f44152e9514b55902b60f8", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/model/FeedResponseDiagnostics.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/FeedResponseDiagnostics.java\nsimilarity index 97%\nrename from sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/model/FeedResponseDiagnostics.java\nrename to sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/FeedResponseDiagnostics.java\nindex bb15e97ab3c..0d2fc0acd36 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/model/FeedResponseDiagnostics.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/FeedResponseDiagnostics.java\n\n@@ -1,7 +1,7 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-package com.azure.cosmos.model;\n+package com.azure.cosmos;\n \n import com.azure.cosmos.implementation.QueryMetrics;\n import org.apache.commons.lang3.StringUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NjY3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8837#discussion_r389266679", "bodyText": "I am not sure if this is a model. as it specifies client behaviour not over wire contract", "author": "moderakh", "createdAt": "2020-03-07T16:38:59Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/model/ThrottlingRetryOptions.java", "diffHunk": "@@ -1,7 +1,7 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-package com.azure.cosmos;\n+package com.azure.cosmos.model;", "originalCommit": "d258f0d8f205c058bf09a849f634984884a119fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMjY5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8837#discussion_r389302692", "bodyText": "Agreed, as it specifies client behavior, will move it back.", "author": "kushagraThapar", "createdAt": "2020-03-07T18:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NjY3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "481c6de304617ea036f44152e9514b55902b60f8", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/model/ThrottlingRetryOptions.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ThrottlingRetryOptions.java\nsimilarity index 99%\nrename from sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/model/ThrottlingRetryOptions.java\nrename to sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ThrottlingRetryOptions.java\nindex 5335e80bc4b..4ebae398cf1 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/model/ThrottlingRetryOptions.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ThrottlingRetryOptions.java\n\n@@ -1,7 +1,7 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-package com.azure.cosmos.model;\n+package com.azure.cosmos;\n \n /**\n  * Encapsulates retry options in the Azure Cosmos DB database service.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NzMxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8837#discussion_r389267317", "bodyText": "why do we need the setMapper?", "author": "moderakh", "createdAt": "2020-03-07T16:49:49Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/model/ModelBridgeInternal.java", "diffHunk": "@@ -0,0 +1,405 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos.model;\n+\n+import com.azure.cosmos.CosmosAsyncClient;\n+import com.azure.cosmos.CosmosAsyncContainer;\n+import com.azure.cosmos.CosmosAsyncDatabase;\n+import com.azure.cosmos.CosmosAsyncUser;\n+import com.azure.cosmos.CosmosClient;\n+import com.azure.cosmos.CosmosClientException;\n+import com.azure.cosmos.CosmosDatabase;\n+import com.azure.cosmos.CosmosStoredProcedure;\n+import com.azure.cosmos.CosmosTrigger;\n+import com.azure.cosmos.CosmosUserDefinedFunction;\n+import com.azure.cosmos.implementation.Conflict;\n+import com.azure.cosmos.implementation.Constants;\n+import com.azure.cosmos.implementation.CosmosItemProperties;\n+import com.azure.cosmos.implementation.Database;\n+import com.azure.cosmos.implementation.Document;\n+import com.azure.cosmos.implementation.DocumentCollection;\n+import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.QueryMetrics;\n+import com.azure.cosmos.implementation.ReplicationPolicy;\n+import com.azure.cosmos.implementation.RequestOptions;\n+import com.azure.cosmos.implementation.ResourceResponse;\n+import com.azure.cosmos.implementation.RxDocumentServiceResponse;\n+import com.azure.cosmos.implementation.StoredProcedure;\n+import com.azure.cosmos.implementation.StoredProcedureResponse;\n+import com.azure.cosmos.implementation.Trigger;\n+import com.azure.cosmos.implementation.User;\n+import com.azure.cosmos.implementation.UserDefinedFunction;\n+import com.azure.cosmos.implementation.routing.PartitionKeyInternal;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ * This is meant to be used only internally as a bridge access to classes in\n+ * com.azure.cosmos.model package\n+ **/\n+public class ModelBridgeInternal {\n+\n+    public static CosmosAsyncConflictResponse createCosmosAsyncConflictResponse(ResourceResponse<Conflict> response,\n+                                                                                CosmosAsyncContainer container) {\n+        return new CosmosAsyncConflictResponse(response, container);\n+    }\n+\n+    public static CosmosAsyncContainerResponse createCosmosAsyncContainerResponse(ResourceResponse<DocumentCollection> response,\n+                                                                                  CosmosAsyncDatabase database) {\n+        return new CosmosAsyncContainerResponse(response, database);\n+    }\n+\n+    public static CosmosAsyncDatabaseResponse createCosmosAsyncDatabaseResponse(ResourceResponse<Database> response,\n+                                                                                 CosmosAsyncClient client) {\n+        return new CosmosAsyncDatabaseResponse(response, client);\n+    }\n+\n+    public static <T> CosmosAsyncItemResponse<T> createCosmosAsyncItemResponse(ResourceResponse<Document> response, Class<T> classType) {\n+        return new CosmosAsyncItemResponse<>(response, classType);\n+    }\n+\n+    public static CosmosAsyncItemResponse createCosmosAsyncItemResponseWithObjectType(ResourceResponse<Document> response, Class classType) {\n+        return new CosmosAsyncItemResponse(response, classType);\n+    }\n+\n+    public static CosmosAsyncPermissionResponse createCosmosAsyncPermissionResponse(ResourceResponse<Permission> response,\n+                                                                                    CosmosAsyncUser cosmosUser) {\n+        return new CosmosAsyncPermissionResponse(response, cosmosUser);\n+    }\n+\n+    public static CosmosAsyncStoredProcedureResponse createCosmosAsyncStoredProcedureResponse(ResourceResponse<StoredProcedure> response,\n+                                                                                              CosmosAsyncContainer cosmosContainer) {\n+        return new CosmosAsyncStoredProcedureResponse(response, cosmosContainer);\n+    }\n+\n+    public static CosmosAsyncStoredProcedureResponse createCosmosAsyncStoredProcedureResponse(StoredProcedureResponse response,\n+                                                                                              CosmosAsyncContainer cosmosContainer,\n+                                                                                              String storedProcedureId) {\n+        return new CosmosAsyncStoredProcedureResponse(response, cosmosContainer, storedProcedureId);\n+    }\n+\n+    public static CosmosStoredProcedureProperties createCosmosStoredProcedureProperties(String jsonString) {\n+        return new CosmosStoredProcedureProperties(jsonString);\n+    }\n+\n+    public static CosmosAsyncTriggerResponse createCosmosAsyncTriggerResponse(ResourceResponse<Trigger> response,\n+                                                                              CosmosAsyncContainer container) {\n+        return new CosmosAsyncTriggerResponse(response, container);\n+    }\n+\n+    public static CosmosAsyncUserDefinedFunctionResponse createCosmosAsyncUserDefinedFunctionResponse(ResourceResponse<UserDefinedFunction> response,\n+                                                                                                      CosmosAsyncContainer container) {\n+        return new CosmosAsyncUserDefinedFunctionResponse(response, container);\n+    }\n+\n+    public static CosmosAsyncUserResponse createCosmosAsyncUserResponse(ResourceResponse<User> response, CosmosAsyncDatabase database) {\n+        return new CosmosAsyncUserResponse(response, database);\n+    }\n+\n+    public static CosmosContainerResponse createCosmosContainerResponse(CosmosAsyncContainerResponse response,\n+                                                                        CosmosDatabase database, CosmosClient client) {\n+        return new CosmosContainerResponse(response, database, client);\n+    }\n+\n+    public static CosmosUserResponse createCosmosUserResponse(CosmosAsyncUserResponse response, CosmosDatabase database) {\n+        return new CosmosUserResponse(response, database);\n+    }\n+\n+    public static <T> CosmosItemResponse<T> createCosmosItemResponse(CosmosAsyncItemResponse<T> response) {\n+        return new CosmosItemResponse<>(response);\n+    }\n+\n+    public static CosmosDatabaseResponse createCosmosDatabaseResponse(CosmosAsyncDatabaseResponse response, CosmosClient client) {\n+        return new CosmosDatabaseResponse(response, client);\n+    }\n+\n+    public static CosmosStoredProcedureResponse createCosmosStoredProcedureResponse(CosmosAsyncStoredProcedureResponse resourceResponse,\n+                                                CosmosStoredProcedure storedProcedure) {\n+        return new CosmosStoredProcedureResponse(resourceResponse, storedProcedure);\n+    }\n+\n+    public static CosmosUserDefinedFunctionResponse createCosmosUserDefinedFunctionResponse(CosmosAsyncUserDefinedFunctionResponse resourceResponse,\n+                                                    CosmosUserDefinedFunction userDefinedFunction) {\n+        return new CosmosUserDefinedFunctionResponse(resourceResponse, userDefinedFunction);\n+    }\n+\n+    public static CosmosTriggerResponse createCosmosTriggerResponse(CosmosAsyncTriggerResponse asyncResponse,\n+                                        CosmosTrigger syncTrigger) {\n+        return new CosmosTriggerResponse(asyncResponse, syncTrigger);\n+    }\n+\n+    public static List<CosmosConflictProperties> getCosmosConflictPropertiesFromV2Results(List<Conflict> results) {\n+        return CosmosConflictProperties.getFromV2Results(results);\n+    }\n+\n+    public static DocumentCollection getV2Collection(CosmosContainerProperties containerProperties) {\n+        return containerProperties.getV2Collection();\n+    }\n+\n+    public static List<CosmosContainerProperties> getCosmosContainerPropertiesFromV2Results(List<DocumentCollection> results) {\n+        return CosmosContainerProperties.getFromV2Results(results);\n+    }\n+\n+    public static List<CosmosDatabaseProperties> getCosmosDatabasePropertiesFromV2Results(List<Database> results) {\n+        return CosmosDatabaseProperties.getFromV2Results(results);\n+    }\n+\n+    public static <T> CosmosItemProperties getCosmosItemProperties(CosmosAsyncItemResponse<T> cosmosItemResponse) {\n+        return cosmosItemResponse.getProperties();\n+    }\n+\n+    public static <T> CosmosItemProperties getCosmosItemProperties(CosmosItemResponse<T> cosmosItemResponse) {\n+        return cosmosItemResponse.getProperties();\n+    }\n+\n+    public static Permission getV2Permissions(CosmosPermissionProperties permissionSettings) {\n+        return permissionSettings.getV2Permissions();\n+    }\n+\n+    public static List<CosmosPermissionProperties> getCosmosPermissionPropertiesFromV2Results(List<Permission> results) {\n+        return CosmosPermissionProperties.getFromV2Results(results);\n+    }\n+\n+    public static List<CosmosStoredProcedureProperties> getCosmosStoredProcedurePropertiesFromV2Results(List<StoredProcedure> results) {\n+        return CosmosStoredProcedureProperties.getFromV2Results(results);\n+    }\n+\n+    public static List<CosmosTriggerProperties> getCosmosTriggerPropertiesFromV2Results(List<Trigger> results) {\n+        return CosmosTriggerProperties.getFromV2Results(results);\n+    }\n+\n+    public static List<CosmosUserDefinedFunctionProperties> getCosmosUserDefinedFunctionPropertiesFromV2Results(List<UserDefinedFunction> results) {\n+        return CosmosUserDefinedFunctionProperties.getFromV2Results(results);\n+    }\n+\n+    public static User getV2User(CosmosUserProperties cosmosUserProperties) {\n+        return cosmosUserProperties.getV2User();\n+    }\n+\n+    public static List<CosmosUserProperties> getCosmosUserPropertiesFromV2Results(List<User> results) {\n+        return CosmosUserProperties.getFromV2Results(results);\n+    }\n+\n+    public static RequestOptions toRequestOptions(CosmosConflictRequestOptions cosmosConflictRequestOptions) {\n+        return cosmosConflictRequestOptions.toRequestOptions();\n+    }\n+\n+    public static RequestOptions toRequestOptions(CosmosContainerRequestOptions cosmosContainerRequestOptions) {\n+        return cosmosContainerRequestOptions.toRequestOptions();\n+    }\n+\n+    public static CosmosContainerRequestOptions setOfferThroughput(CosmosContainerRequestOptions cosmosContainerRequestOptions,\n+                                                                   Integer offerThroughput) {\n+        return cosmosContainerRequestOptions.setOfferThroughput(offerThroughput);\n+    }\n+\n+    public static RequestOptions toRequestOptions(CosmosDatabaseRequestOptions cosmosDatabaseRequestOptions) {\n+        return cosmosDatabaseRequestOptions.toRequestOptions();\n+    }\n+\n+    public static CosmosDatabaseRequestOptions setOfferThroughput(CosmosDatabaseRequestOptions cosmosDatabaseRequestOptions,\n+                                                                   Integer offerThroughput) {\n+        return cosmosDatabaseRequestOptions.setOfferThroughput(offerThroughput);\n+    }\n+\n+    public static CosmosItemRequestOptions setPartitionKey(CosmosItemRequestOptions cosmosItemRequestOptions,\n+                                                           PartitionKey partitionKey) {\n+        return cosmosItemRequestOptions.setPartitionKey(partitionKey);\n+    }\n+\n+    public static RequestOptions toRequestOptions(CosmosItemRequestOptions cosmosItemRequestOptions) {\n+        return cosmosItemRequestOptions.toRequestOptions();\n+    }\n+\n+    public static CosmosItemRequestOptions createCosmosItemRequestOptions(PartitionKey partitionKey) {\n+        return new CosmosItemRequestOptions(partitionKey);\n+    }\n+\n+    public static RequestOptions toRequestOptions(CosmosPermissionRequestOptions cosmosPermissionRequestOptions) {\n+        return cosmosPermissionRequestOptions.toRequestOptions();\n+    }\n+\n+    public static RequestOptions toRequestOptions(CosmosStoredProcedureRequestOptions cosmosStoredProcedureRequestOptions) {\n+        return cosmosStoredProcedureRequestOptions.toRequestOptions();\n+    }\n+\n+    public static String getAddressesLink(DatabaseAccount databaseAccount) {\n+        return databaseAccount.getAddressesLink();\n+    }\n+\n+    public static DatabaseAccount toDatabaseAccount(RxDocumentServiceResponse response) {\n+        DatabaseAccount account = response.getResource(DatabaseAccount.class);\n+\n+        // read the headers and set to the account\n+        Map<String, String> responseHeader = response.getResponseHeaders();\n+\n+        account.setMaxMediaStorageUsageInMB(\n+            Long.valueOf(responseHeader.get(HttpConstants.HttpHeaders.MAX_MEDIA_STORAGE_USAGE_IN_MB)));\n+        account.setMediaStorageUsageInMB(\n+            Long.valueOf(responseHeader.get(HttpConstants.HttpHeaders.CURRENT_MEDIA_STORAGE_USAGE_IN_MB)));\n+\n+        return account;\n+    }\n+\n+    public static Map<String, Object> getQueryEngineConfiuration(DatabaseAccount databaseAccount) {\n+        return databaseAccount.getQueryEngineConfiguration();\n+    }\n+\n+    public static ReplicationPolicy getReplicationPolicy(DatabaseAccount databaseAccount) {\n+        return databaseAccount.getReplicationPolicy();\n+    }\n+\n+    public static ReplicationPolicy getSystemReplicationPolicy(DatabaseAccount databaseAccount) {\n+        return databaseAccount.getSystemReplicationPolicy();\n+    }\n+\n+    public static ConsistencyPolicy getConsistencyPolicy(DatabaseAccount databaseAccount) {\n+        return databaseAccount.getConsistencyPolicy();\n+    }\n+\n+    /**\n+     * Gets the partitionKeyRangeId.\n+     *\n+     * @param options the feed options\n+     * @return the partitionKeyRangeId.\n+     */\n+    public static String partitionKeyRangeIdInternal(FeedOptions options) {\n+        return options.getPartitionKeyRangeIdInternal();\n+    }\n+\n+    /**\n+     * Sets the PartitionKeyRangeId.\n+     *\n+     * @param options the feed options\n+     * @param partitionKeyRangeId the partition key range id\n+     * @return the partitionKeyRangeId.\n+     */\n+    public static FeedOptions partitionKeyRangeIdInternal(FeedOptions options, String partitionKeyRangeId) {\n+        return options.setPartitionKeyRangeIdInternal(partitionKeyRangeId);\n+    }\n+\n+    public static <T extends Resource> FeedResponse<T> toFeedResponsePage(RxDocumentServiceResponse response,\n+                                                                          Class<T> cls) {\n+        return new FeedResponse<T>(response.getQueryResponse(cls), response.getResponseHeaders());\n+    }\n+\n+    public static <T> FeedResponse<T> toFeedResponsePage(List<T> results, Map<String, String> headers, boolean noChanges) {\n+        return new FeedResponse<>(results, headers, noChanges);\n+    }\n+\n+    public static <T extends Resource> FeedResponse<T> toChaneFeedResponsePage(RxDocumentServiceResponse response,\n+                                                                               Class<T> cls) {\n+        return new FeedResponse<T>(noChanges(response) ? Collections.emptyList() : response.getQueryResponse(cls),\n+            response.getResponseHeaders(), noChanges(response));\n+    }\n+\n+    public static <T extends Resource> boolean noChanges(FeedResponse<T> page) {\n+        return page.nochanges;\n+    }\n+\n+    public static <T extends Resource> boolean noChanges(RxDocumentServiceResponse rsp) {\n+        return rsp.getStatusCode() == HttpConstants.StatusCodes.NOT_MODIFIED;\n+    }\n+\n+    public static <T> FeedResponse<T> createFeedResponse(List<T> results,\n+                                                         Map<String, String> headers) {\n+        return new FeedResponse<>(results, headers);\n+    }\n+\n+    public static <T> FeedResponse<T> createFeedResponseWithQueryMetrics(List<T> results,\n+                                                                         Map<String, String> headers, ConcurrentMap<String, QueryMetrics> queryMetricsMap) {\n+        return new FeedResponse<>(results, headers, queryMetricsMap);\n+    }\n+\n+    public static <T> ConcurrentMap<String, QueryMetrics> queryMetricsMap(FeedResponse<T> feedResponse) {\n+        return feedResponse.queryMetricsMap();\n+    }\n+\n+    public static <T> ConcurrentMap<String, QueryMetrics> queryMetrics(FeedResponse<T> feedResponse) {\n+        return feedResponse.queryMetrics();\n+    }\n+\n+    public static String toLower(RequestVerb verb) {\n+        return verb.toLowerCase();\n+    }\n+\n+    public static boolean isV2(PartitionKeyDefinition pkd) {\n+        return pkd.getVersion() != null && PartitionKeyDefinitionVersion.V2.val == pkd.getVersion().val;\n+    }\n+\n+    public static PartitionKeyInternal getNonePartitionKey(PartitionKeyDefinition partitionKeyDefinition) {\n+        return partitionKeyDefinition.getNonePartitionKeyValue();\n+    }\n+\n+    public static PartitionKeyInternal getPartitionKeyInternal(PartitionKey partitionKey) {\n+        return partitionKey.getInternalPartitionKey();\n+    }\n+\n+    public static PartitionKey partitionKeyfromJsonString(String jsonString) {\n+        return PartitionKey.fromJsonString(jsonString);\n+    }\n+\n+    public static Object getPartitionKeyObject(PartitionKey right) {\n+        return right.getKeyObject();\n+    }\n+\n+    public static String getAltLink(Resource resource) {\n+        return resource.getAltLink();\n+    }\n+\n+    public static void setAltLink(Resource resource, String altLink) {\n+        resource.setAltLink(altLink);\n+    }\n+\n+    public static void setResourceSelfLink(Resource resource, String selfLink) {\n+        resource.setSelfLink(selfLink);\n+    }\n+\n+    public static void setTimestamp(Resource resource, OffsetDateTime date) {\n+        resource.setTimestamp(date);\n+    }\n+\n+    public static void validateResource(Resource resource) {\n+        Resource.validateResource(resource);\n+    }\n+\n+    public static <T> void setProperty(JsonSerializable jsonSerializable, String propertyName, T value) {\n+        jsonSerializable.set(propertyName, value);\n+    }\n+\n+    public static ObjectNode getObject(JsonSerializable jsonSerializable, String propertyName) {\n+        return jsonSerializable.getObject(propertyName);\n+    }\n+\n+    public static void remove(JsonSerializable jsonSerializable, String propertyName) {\n+        jsonSerializable.remove(propertyName);\n+    }\n+\n+    public static Object getValue(JsonNode value) {\n+        return JsonSerializable.getValue(value);\n+    }\n+\n+    public static CosmosError createCosmosError(ObjectNode objectNode) {\n+        return new CosmosError(objectNode);\n+    }\n+\n+    public static CosmosError createCosmosError(String jsonString) {\n+        return new CosmosError(jsonString);\n+    }\n+\n+    public static void populatePropertyBagJsonSerializable(JsonSerializable jsonSerializable) {\n+        jsonSerializable.populatePropertyBag();\n+    }\n+\n+    public static void setMapper(JsonSerializable jsonSerializable, ObjectMapper om) {\n+        jsonSerializable.setMapper(om);", "originalCommit": "d258f0d8f205c058bf09a849f634984884a119fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMjQ5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8837#discussion_r389302499", "bodyText": "setMapper is used in a constructor in Document.java class.\n/**\n     * Initialize a document object from json string.\n     *\n     * @param jsonString the json string that represents the document object.\n     * @param objectMapper the custom object mapper\n     */\n    Document(String jsonString, ObjectMapper objectMapper) {\n        // TODO: Made package private due to #153. #171 adding custom serialization options back.\n        super(jsonString);\n        setMapper(this, objectMapper);\n    }", "author": "kushagraThapar", "createdAt": "2020-03-07T18:33:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NzMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMjU1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8837#discussion_r389302556", "bodyText": "I checked again, and this constructor is not used at all, I will see if we can remove this constructor and hence setMapper can be removed as well.", "author": "kushagraThapar", "createdAt": "2020-03-07T18:34:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NzMxNw=="}], "type": "inlineReview", "revised_code": {"commit": "481c6de304617ea036f44152e9514b55902b60f8", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/model/ModelBridgeInternal.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/model/ModelBridgeInternal.java\nindex 879c58c50e6..bc48d171f30 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/model/ModelBridgeInternal.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/model/ModelBridgeInternal.java\n\n@@ -3,23 +3,24 @@\n \n package com.azure.cosmos.model;\n \n+import com.azure.core.util.paging.ContinuablePagedFlux;\n import com.azure.cosmos.CosmosAsyncClient;\n import com.azure.cosmos.CosmosAsyncContainer;\n import com.azure.cosmos.CosmosAsyncDatabase;\n import com.azure.cosmos.CosmosAsyncUser;\n import com.azure.cosmos.CosmosClient;\n-import com.azure.cosmos.CosmosClientException;\n import com.azure.cosmos.CosmosDatabase;\n import com.azure.cosmos.CosmosStoredProcedure;\n import com.azure.cosmos.CosmosTrigger;\n import com.azure.cosmos.CosmosUserDefinedFunction;\n import com.azure.cosmos.implementation.Conflict;\n-import com.azure.cosmos.implementation.Constants;\n import com.azure.cosmos.implementation.CosmosItemProperties;\n+import com.azure.cosmos.implementation.CosmosPagedFluxOptions;\n import com.azure.cosmos.implementation.Database;\n import com.azure.cosmos.implementation.Document;\n import com.azure.cosmos.implementation.DocumentCollection;\n import com.azure.cosmos.implementation.HttpConstants;\n+import com.azure.cosmos.implementation.PartitionKeyRange;\n import com.azure.cosmos.implementation.QueryMetrics;\n import com.azure.cosmos.implementation.ReplicationPolicy;\n import com.azure.cosmos.implementation.RequestOptions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NzQ0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8837#discussion_r389267448", "bodyText": "can you move instantiateJsonSerializable to model package?\nIf you do that then you don't have to do setAccessible()", "author": "moderakh", "createdAt": "2020-03-07T16:51:59Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java", "diffHunk": "@@ -544,12 +493,61 @@ public static JsonSerializable instantiateJsonSerializable(ObjectNode objectNode\n                 || klassType.equals(DatabaseAccount.class) || klassType.equals(DatabaseAccountLocation.class)\n                 || klassType.equals(ReplicationPolicy.class) || klassType.equals(ConsistencyPolicy.class)\n                 || klassType.equals(DocumentCollection.class) || klassType.equals(Database.class)) {\n-                return (JsonSerializable) klassType.getDeclaredConstructor(ObjectNode.class).newInstance(objectNode);\n+                Constructor declaredConstructor =\n+                    klassType.getDeclaredConstructor(ObjectNode.class);\n+                declaredConstructor.setAccessible(true);", "originalCommit": "d258f0d8f205c058bf09a849f634984884a119fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMjMxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8837#discussion_r389302310", "bodyText": "Agreed, will move it.", "author": "kushagraThapar", "createdAt": "2020-03-07T18:30:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NzQ0OA=="}], "type": "inlineReview", "revised_code": {"commit": "481c6de304617ea036f44152e9514b55902b60f8", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java\nindex 241aa944309..e38286e18f5 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java\n\n@@ -482,31 +469,6 @@ public class BridgeInternal {\n         return cosmosAsyncContainer.getLink();\n     }\n \n-    public static JsonSerializable instantiateJsonSerializable(ObjectNode objectNode, Class klassType) {\n-        try {\n-            // the hot path should come through here to avoid serialization/deserialization\n-            if (klassType.equals(Document.class) || klassType.equals(OrderByRowResult.class) || klassType.equals(CosmosItemProperties.class)\n-                || klassType.equals(PartitionKeyRange.class) || klassType.equals(Range.class)\n-                || klassType.equals(QueryInfo.class) || klassType.equals(PartitionedQueryExecutionInfoInternal.class)\n-                || klassType.equals(QueryItem.class)\n-                || klassType.equals(Address.class)\n-                || klassType.equals(DatabaseAccount.class) || klassType.equals(DatabaseAccountLocation.class)\n-                || klassType.equals(ReplicationPolicy.class) || klassType.equals(ConsistencyPolicy.class)\n-                || klassType.equals(DocumentCollection.class) || klassType.equals(Database.class)) {\n-                Constructor declaredConstructor =\n-                    klassType.getDeclaredConstructor(ObjectNode.class);\n-                declaredConstructor.setAccessible(true);\n-                return (JsonSerializable) declaredConstructor.newInstance(objectNode);\n-            } else {\n-                Constructor declaredConstructor = klassType.getDeclaredConstructor(String.class);\n-                declaredConstructor.setAccessible(true);\n-                return (JsonSerializable) declaredConstructor.newInstance(Utils.toJson(Utils.getSimpleObjectMapper(), objectNode));\n-            }\n-        } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException | IllegalArgumentException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     public static CosmosAsyncConflict createCosmosAsyncConflict(String id, CosmosAsyncContainer container) {\n         return new CosmosAsyncConflict(id, container);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NzQ1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8837#discussion_r389267457", "bodyText": "same here. if instantiateJsonSerializable is moved to model package, setAccessable should be required.", "author": "moderakh", "createdAt": "2020-03-07T16:52:18Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java", "diffHunk": "@@ -544,12 +493,61 @@ public static JsonSerializable instantiateJsonSerializable(ObjectNode objectNode\n                 || klassType.equals(DatabaseAccount.class) || klassType.equals(DatabaseAccountLocation.class)\n                 || klassType.equals(ReplicationPolicy.class) || klassType.equals(ConsistencyPolicy.class)\n                 || klassType.equals(DocumentCollection.class) || klassType.equals(Database.class)) {\n-                return (JsonSerializable) klassType.getDeclaredConstructor(ObjectNode.class).newInstance(objectNode);\n+                Constructor declaredConstructor =\n+                    klassType.getDeclaredConstructor(ObjectNode.class);\n+                declaredConstructor.setAccessible(true);\n+                return (JsonSerializable) declaredConstructor.newInstance(objectNode);\n             } else {\n-                return (JsonSerializable) klassType.getDeclaredConstructor(String.class).newInstance(Utils.toJson(Utils.getSimpleObjectMapper(), objectNode));\n+                Constructor declaredConstructor = klassType.getDeclaredConstructor(String.class);\n+                declaredConstructor.setAccessible(true);", "originalCommit": "d258f0d8f205c058bf09a849f634984884a119fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMjYyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8837#discussion_r389302621", "bodyText": "moved it to ModelBridgeInternal.java", "author": "kushagraThapar", "createdAt": "2020-03-07T18:35:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NzQ1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "481c6de304617ea036f44152e9514b55902b60f8", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java\nindex 241aa944309..e38286e18f5 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/BridgeInternal.java\n\n@@ -482,31 +469,6 @@ public class BridgeInternal {\n         return cosmosAsyncContainer.getLink();\n     }\n \n-    public static JsonSerializable instantiateJsonSerializable(ObjectNode objectNode, Class klassType) {\n-        try {\n-            // the hot path should come through here to avoid serialization/deserialization\n-            if (klassType.equals(Document.class) || klassType.equals(OrderByRowResult.class) || klassType.equals(CosmosItemProperties.class)\n-                || klassType.equals(PartitionKeyRange.class) || klassType.equals(Range.class)\n-                || klassType.equals(QueryInfo.class) || klassType.equals(PartitionedQueryExecutionInfoInternal.class)\n-                || klassType.equals(QueryItem.class)\n-                || klassType.equals(Address.class)\n-                || klassType.equals(DatabaseAccount.class) || klassType.equals(DatabaseAccountLocation.class)\n-                || klassType.equals(ReplicationPolicy.class) || klassType.equals(ConsistencyPolicy.class)\n-                || klassType.equals(DocumentCollection.class) || klassType.equals(Database.class)) {\n-                Constructor declaredConstructor =\n-                    klassType.getDeclaredConstructor(ObjectNode.class);\n-                declaredConstructor.setAccessible(true);\n-                return (JsonSerializable) declaredConstructor.newInstance(objectNode);\n-            } else {\n-                Constructor declaredConstructor = klassType.getDeclaredConstructor(String.class);\n-                declaredConstructor.setAccessible(true);\n-                return (JsonSerializable) declaredConstructor.newInstance(Utils.toJson(Utils.getSimpleObjectMapper(), objectNode));\n-            }\n-        } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException | IllegalArgumentException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     public static CosmosAsyncConflict createCosmosAsyncConflict(String id, CosmosAsyncContainer container) {\n         return new CosmosAsyncConflict(id, container);\n     }\n"}}, {"oid": "481c6de304617ea036f44152e9514b55902b60f8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/481c6de304617ea036f44152e9514b55902b60f8", "message": "Moved feed response diagnostics and throttling retry options back to cosmos. Moved CosmosPagedFlux and CosmosPagedIterable to model", "committedDate": "2020-03-07T19:01:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyNjMxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8837#discussion_r389326313", "bodyText": "I am not sure if CosmosPageFlux is a model or not.\nFrom one perspective  using CosmosPageFlux internally will issue IO request to fetch more results, so it shouldn't be a model.\nfrom another perspective, other query result classes are model, so one may say this one is a model too.\nCan we check what some other services are doing? is any other service sdk using pageflux?", "author": "moderakh", "createdAt": "2020-03-08T01:34:30Z", "path": "sdk/cosmos/azure-cosmos-examples/src/main/java/com/azure/cosmos/examples/BasicDemo.java", "diffHunk": "@@ -5,14 +5,14 @@\n import com.azure.cosmos.CosmosAsyncClient;\n import com.azure.cosmos.CosmosAsyncContainer;\n import com.azure.cosmos.CosmosAsyncDatabase;\n-import com.azure.cosmos.CosmosAsyncItemResponse;\n+import com.azure.cosmos.model.CosmosAsyncItemResponse;\n import com.azure.cosmos.CosmosClientBuilder;\n import com.azure.cosmos.CosmosClientException;\n-import com.azure.cosmos.CosmosContainerProperties;\n-import com.azure.cosmos.CosmosPagedFlux;\n-import com.azure.cosmos.FeedOptions;\n-import com.azure.cosmos.FeedResponse;\n-import com.azure.cosmos.PartitionKey;\n+import com.azure.cosmos.model.CosmosContainerProperties;\n+import com.azure.cosmos.model.CosmosPagedFlux;", "originalCommit": "481c6de304617ea036f44152e9514b55902b60f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1MzMzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8837#discussion_r389353334", "bodyText": "Sure, to be consistent with other azure SDKs, I reverted the change and moved both CosmosPagedFlux and CosmosPagedIterable back to cosmos package.", "author": "kushagraThapar", "createdAt": "2020-03-08T09:54:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyNjMxMw=="}], "type": "inlineReview", "revised_code": {"commit": "ccaecfe9e04d726ee529b41e1a7b2249882c933d", "chunk": "diff --git a/sdk/cosmos/azure-cosmos-examples/src/main/java/com/azure/cosmos/examples/BasicDemo.java b/sdk/cosmos/azure-cosmos-examples/src/main/java/com/azure/cosmos/examples/BasicDemo.java\nindex e0f0e259867..59ecb4ca9e8 100644\n--- a/sdk/cosmos/azure-cosmos-examples/src/main/java/com/azure/cosmos/examples/BasicDemo.java\n+++ b/sdk/cosmos/azure-cosmos-examples/src/main/java/com/azure/cosmos/examples/BasicDemo.java\n\n@@ -9,7 +9,7 @@ import com.azure.cosmos.model.CosmosAsyncItemResponse;\n import com.azure.cosmos.CosmosClientBuilder;\n import com.azure.cosmos.CosmosClientException;\n import com.azure.cosmos.model.CosmosContainerProperties;\n-import com.azure.cosmos.model.CosmosPagedFlux;\n+import com.azure.cosmos.CosmosPagedFlux;\n import com.azure.cosmos.model.FeedOptions;\n import com.azure.cosmos.model.FeedResponse;\n import com.azure.cosmos.model.PartitionKey;\n"}}, {"oid": "ccaecfe9e04d726ee529b41e1a7b2249882c933d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ccaecfe9e04d726ee529b41e1a7b2249882c933d", "message": "Moved CosmosPagedFlux and CosmosPagedIterable to cosmos package", "committedDate": "2020-03-08T10:01:11Z", "type": "commit"}]}