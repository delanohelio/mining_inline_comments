{"pr_number": 7485, "pr_title": "blob output stream encryption", "pr_createdAt": "2020-01-15T23:48:29Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/7485", "timeline": [{"oid": "f0782556ffa0c5ba6f8454d7c57ede085b6c817f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f0782556ffa0c5ba6f8454d7c57ede085b6c817f", "message": "Added support for encrypted blob client encryption", "committedDate": "2020-01-15T23:45:04Z", "type": "commit"}, {"oid": "79d76dd3b338efd7a4bae38340faf74ac3d54a7c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/79d76dd3b338efd7a4bae38340faf74ac3d54a7c", "message": "Merge branch 'master' into storage/blobOutputStreamEncryption", "committedDate": "2020-01-15T23:47:29Z", "type": "commit"}, {"oid": "8c64329be2107b05fe16954d5a127d5f6c0911e0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8c64329be2107b05fe16954d5a127d5f6c0911e0", "message": "removed whitespace", "committedDate": "2020-01-15T23:48:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2NjYyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r367166623", "bodyText": "TODO : Change java doc", "author": "gapra-msft", "createdAt": "2020-01-15T23:49:09Z", "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClient.java", "diffHunk": "@@ -56,6 +59,59 @@\n         this.encryptedBlobAsyncClient = encryptedBlobAsyncClient;\n     }\n \n+    /**\n+     * Creates and opens an output stream to write data to the block blob. If the blob already exists on the service, it", "originalCommit": "79d76dd3b338efd7a4bae38340faf74ac3d54a7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNjMyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r367606322", "bodyText": "Just clarifying that you are changing the Javadoc to say that it does not overwrite by default?", "author": "rickle-msft", "createdAt": "2020-01-16T19:27:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2NjYyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYyMTA5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r367621096", "bodyText": "This is straight copied from block blob. I thought I'd change it to say encrypted blob but the rest of the docs say block blob so I'll probably leave it that way", "author": "gapra-msft", "createdAt": "2020-01-16T19:59:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2NjYyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYyMTIxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r367621217", "bodyText": "I'll read the java doc for errors and then change them in both places", "author": "gapra-msft", "createdAt": "2020-01-16T20:00:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2NjYyMw=="}], "type": "inlineReview", "revised_code": {"commit": "22e61679de288f0164630901db2ca6d4505a9fa7", "chunk": "diff --git a/sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClient.java b/sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClient.java\nindex 6af69b83b8c..004708cedd0 100644\n--- a/sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClient.java\n+++ b/sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClient.java\n\n@@ -60,8 +59,7 @@ public class EncryptedBlobClient extends BlobClient {\n     }\n \n     /**\n-     * Creates and opens an output stream to write data to the block blob. If the blob already exists on the service, it\n-     * will be overwritten.\n+     * Creates and opens an output stream to write data to the block blob.\n      *\n      * @return A {@link BlobOutputStream} object used to write data to the blob.\n      * @throws BlobStorageException If a storage service error occurred.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2Njg0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r367166846", "bodyText": "I had to make this public since the crypto package needs access. I dont see a problem doing this.", "author": "gapra-msft", "createdAt": "2020-01-15T23:49:57Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobOutputStream.java", "diffHunk": "@@ -40,7 +40,7 @@ static BlobOutputStream appendBlobOutputStream(final AppendBlobAsyncClient clien\n         return new AppendBlobOutputStream(client, appendBlobRequestConditions);\n     }\n \n-    static BlobOutputStream blockBlobOutputStream(final BlockBlobAsyncClient client,\n+    public static BlobOutputStream blockBlobOutputStream(final BlobAsyncClient client,", "originalCommit": "79d76dd3b338efd7a4bae38340faf74ac3d54a7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0ODU2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r368048561", "bodyText": "I don't have a strong issue with it, we may want to split this and the other implementations into their own class files and make them public as well. I don't see a overwhelmingly strong reason why a customer couldn't pass a client in themselves to create the stream vs needing to get it from the client.", "author": "alzimmermsft", "createdAt": "2020-01-17T17:21:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2Njg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MzQwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r368073400", "bodyText": "I can do this as part of another issue I'm going to work on with Append and Page Blob Output Stream", "author": "gapra-msft", "createdAt": "2020-01-17T18:24:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2Njg0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0058326ed350b424b0e298c6466bf2abfbf6f084", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobOutputStream.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobOutputStream.java\nindex 6dcf197b189..0c6ebb92831 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobOutputStream.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobOutputStream.java\n\n@@ -40,6 +37,16 @@ public abstract class BlobOutputStream extends StorageOutputStream {\n         return new AppendBlobOutputStream(client, appendBlobRequestConditions);\n     }\n \n+    /**\n+     * Creates a block blob output stream from a BlobAsyncClient\n+     * @param client {@link BlobAsyncClient} The blob client.\n+     * @param parallelTransferOptions {@link ParallelTransferOptions} used to configure buffered uploading.\n+     * @param headers {@link BlobHttpHeaders}\n+     * @param metadata Metadata to associate with the blob.\n+     * @param tier {@link AccessTier} for the destination blob.\n+     * @param requestConditions {@link BlobRequestConditions}\n+     * @return {@link BlobOutputStream} associated with the blob.\n+     */\n     public static BlobOutputStream blockBlobOutputStream(final BlobAsyncClient client,\n         final ParallelTransferOptions parallelTransferOptions, final BlobHttpHeaders headers,\n         final Map<String, String> metadata, final AccessTier tier, final BlobRequestConditions requestConditions) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2OTAzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r367169039", "bodyText": "should I rename this to blobOutputStream or is that confusing?", "author": "gapra-msft", "createdAt": "2020-01-15T23:57:49Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobOutputStream.java", "diffHunk": "@@ -40,7 +40,7 @@ static BlobOutputStream appendBlobOutputStream(final AppendBlobAsyncClient clien\n         return new AppendBlobOutputStream(client, appendBlobRequestConditions);\n     }\n \n-    static BlobOutputStream blockBlobOutputStream(final BlockBlobAsyncClient client,\n+    public static BlobOutputStream blockBlobOutputStream(final BlobAsyncClient client,", "originalCommit": "8c64329be2107b05fe16954d5a127d5f6c0911e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0Nzk0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r368047944", "bodyText": "Leave the name as-is, this stream is meant to solely interact with Block Blobs, don't want to conflate the overarching Blob term to mean Block Blob (though that is the primary use case).", "author": "alzimmermsft", "createdAt": "2020-01-17T17:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2OTAzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "0058326ed350b424b0e298c6466bf2abfbf6f084", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobOutputStream.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobOutputStream.java\nindex 6dcf197b189..0c6ebb92831 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobOutputStream.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlobOutputStream.java\n\n@@ -40,6 +37,16 @@ public abstract class BlobOutputStream extends StorageOutputStream {\n         return new AppendBlobOutputStream(client, appendBlobRequestConditions);\n     }\n \n+    /**\n+     * Creates a block blob output stream from a BlobAsyncClient\n+     * @param client {@link BlobAsyncClient} The blob client.\n+     * @param parallelTransferOptions {@link ParallelTransferOptions} used to configure buffered uploading.\n+     * @param headers {@link BlobHttpHeaders}\n+     * @param metadata Metadata to associate with the blob.\n+     * @param tier {@link AccessTier} for the destination blob.\n+     * @param requestConditions {@link BlobRequestConditions}\n+     * @return {@link BlobOutputStream} associated with the blob.\n+     */\n     public static BlobOutputStream blockBlobOutputStream(final BlobAsyncClient client,\n         final ParallelTransferOptions parallelTransferOptions, final BlobHttpHeaders headers,\n         final Map<String, String> metadata, final AccessTier tier, final BlobRequestConditions requestConditions) {\n"}}, {"oid": "0058326ed350b424b0e298c6466bf2abfbf6f084", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0058326ed350b424b0e298c6466bf2abfbf6f084", "message": "Removed unused imports, added javadoc", "committedDate": "2020-01-16T00:19:19Z", "type": "commit"}, {"oid": "0058326ed350b424b0e298c6466bf2abfbf6f084", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0058326ed350b424b0e298c6466bf2abfbf6f084", "message": "Removed unused imports, added javadoc", "committedDate": "2020-01-16T00:19:19Z", "type": "forcePushed"}, {"oid": "fe15583adbe109c08a01d35f833a4f71ed7a58cb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fe15583adbe109c08a01d35f833a4f71ed7a58cb", "message": "removed unused import", "committedDate": "2020-01-16T00:48:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNTk5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r367605990", "bodyText": "I don't think the second sentence is relevant here since we accept the overwrite flag on this overload.", "author": "rickle-msft", "createdAt": "2020-01-16T19:26:27Z", "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClient.java", "diffHunk": "@@ -56,6 +58,59 @@\n         this.encryptedBlobAsyncClient = encryptedBlobAsyncClient;\n     }\n \n+    /**\n+     * Creates and opens an output stream to write data to the block blob. If the blob already exists on the service, it\n+     * will be overwritten.\n+     *\n+     * @return A {@link BlobOutputStream} object used to write data to the blob.\n+     * @throws BlobStorageException If a storage service error occurred.\n+     */\n+    public BlobOutputStream getBlobOutputStream() {\n+        return getBlobOutputStream(false);\n+    }\n+\n+    /**\n+     * Creates and opens an output stream to write data to the block blob. If the blob already exists on the service, it", "originalCommit": "fe15583adbe109c08a01d35f833a4f71ed7a58cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYyMTQ1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r367621453", "bodyText": "I'll change it here and on the block blob doc", "author": "gapra-msft", "createdAt": "2020-01-16T20:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNTk5MA=="}], "type": "inlineReview", "revised_code": {"commit": "22e61679de288f0164630901db2ca6d4505a9fa7", "chunk": "diff --git a/sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClient.java b/sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClient.java\nindex 5d85e13a5ce..004708cedd0 100644\n--- a/sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClient.java\n+++ b/sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClient.java\n\n@@ -59,8 +59,7 @@ public class EncryptedBlobClient extends BlobClient {\n     }\n \n     /**\n-     * Creates and opens an output stream to write data to the block blob. If the blob already exists on the service, it\n-     * will be overwritten.\n+     * Creates and opens an output stream to write data to the block blob.\n      *\n      * @return A {@link BlobOutputStream} object used to write data to the blob.\n      * @throws BlobStorageException If a storage service error occurred.\n"}}, {"oid": "22e61679de288f0164630901db2ca6d4505a9fa7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/22e61679de288f0164630901db2ca6d4505a9fa7", "message": "Updated javadoc for blob output stream", "committedDate": "2020-01-16T20:48:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0NjEwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r368046101", "bodyText": "This case is interesting given that writing to the blob may be delayed a non-determinant amount of time, this differs from the other cases of overwrite where their write operation should happen relatively soon compared to the validation check.", "author": "alzimmermsft", "createdAt": "2020-01-17T17:15:54Z", "path": "sdk/storage/azure-storage-blob-cryptography/src/main/java/com/azure/storage/blob/specialized/cryptography/EncryptedBlobClient.java", "diffHunk": "@@ -56,6 +58,57 @@\n         this.encryptedBlobAsyncClient = encryptedBlobAsyncClient;\n     }\n \n+    /**\n+     * Creates and opens an output stream to write data to the block blob.\n+     *\n+     * @return A {@link BlobOutputStream} object used to write data to the blob.\n+     * @throws BlobStorageException If a storage service error occurred.\n+     */\n+    public BlobOutputStream getBlobOutputStream() {\n+        return getBlobOutputStream(false);\n+    }\n+\n+    /**\n+     * Creates and opens an output stream to write data to the block blob.\n+     *\n+     * @return A {@link BlobOutputStream} object used to write data to the blob.\n+     * @param overwrite Whether or not to overwrite, should data exist on the blob.\n+     * @throws BlobStorageException If a storage service error occurred.\n+     */\n+    public BlobOutputStream getBlobOutputStream(boolean overwrite) {\n+        BlobRequestConditions requestConditions = null;\n+        if (!overwrite) {\n+            if (exists()) {\n+                throw logger.logExceptionAsError(new IllegalArgumentException(Constants.BLOB_ALREADY_EXISTS));\n+            }", "originalCommit": "22e61679de288f0164630901db2ca6d4505a9fa7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2MjI1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r368062251", "bodyText": "This makes sense to me, the only other way would be to pass it in to the outputstream and it would fail upon closing - so that would be potentially annoying for the customer", "author": "gapra-msft", "createdAt": "2020-01-17T17:56:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0NjEwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1NTkwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r369155901", "bodyText": "Agreed, failing fast is the better option here.", "author": "alzimmermsft", "createdAt": "2020-01-21T18:01:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0NjEwMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0NzI4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r368047285", "bodyText": "Could make this static as it access no instance level properties, on the flip side could remove the parameter and access all the values in the instance.", "author": "alzimmermsft", "createdAt": "2020-01-17T17:18:50Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlockBlobClient.java", "diffHunk": "@@ -137,10 +138,28 @@ public BlobOutputStream getBlobOutputStream(BlobRequestConditions requestConditi\n     public BlobOutputStream getBlobOutputStream(ParallelTransferOptions parallelTransferOptions,\n         BlobHttpHeaders headers, Map<String, String> metadata, AccessTier tier,\n         BlobRequestConditions requestConditions) {\n-        return BlobOutputStream.blockBlobOutputStream(client, parallelTransferOptions, headers, metadata, tier,\n+\n+        BlobAsyncClient blobClient = prepareBuilder(client).buildAsyncClient();\n+\n+        return BlobOutputStream.blockBlobOutputStream(blobClient, parallelTransferOptions, headers, metadata, tier,\n             requestConditions);\n     }\n \n+    private BlobClientBuilder prepareBuilder(BlobAsyncClientBase client) {", "originalCommit": "22e61679de288f0164630901db2ca6d4505a9fa7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MzAyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7485#discussion_r368073029", "bodyText": "Just removed the param", "author": "gapra-msft", "createdAt": "2020-01-17T18:23:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0NzI4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fdccef0b8183dc5c6926c5e9f40037548cba1ccd", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlockBlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlockBlobClient.java\nindex 7097819efb8..75561c28293 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlockBlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlockBlobClient.java\n\n@@ -139,20 +139,20 @@ public final class BlockBlobClient extends BlobClientBase {\n         BlobHttpHeaders headers, Map<String, String> metadata, AccessTier tier,\n         BlobRequestConditions requestConditions) {\n \n-        BlobAsyncClient blobClient = prepareBuilder(client).buildAsyncClient();\n+        BlobAsyncClient blobClient = prepareBuilder().buildAsyncClient();\n \n         return BlobOutputStream.blockBlobOutputStream(blobClient, parallelTransferOptions, headers, metadata, tier,\n             requestConditions);\n     }\n \n-    private BlobClientBuilder prepareBuilder(BlobAsyncClientBase client) {\n+    private BlobClientBuilder prepareBuilder() {\n         BlobClientBuilder builder = new BlobClientBuilder()\n-            .pipeline(client.getHttpPipeline())\n-            .endpoint(client.getBlobUrl())\n-            .snapshot(client.getSnapshotId())\n-            .serviceVersion(client.getServiceVersion());\n+            .pipeline(getHttpPipeline())\n+            .endpoint(getBlobUrl())\n+            .snapshot(getSnapshotId())\n+            .serviceVersion(getServiceVersion());\n \n-        CpkInfo cpk = client.getCustomerProvidedKey();\n+        CpkInfo cpk = getCustomerProvidedKey();\n         if (cpk != null) {\n             builder.customerProvidedKey(new CustomerProvidedKey(cpk.getEncryptionKey()));\n         }\n"}}, {"oid": "fdccef0b8183dc5c6926c5e9f40037548cba1ccd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fdccef0b8183dc5c6926c5e9f40037548cba1ccd", "message": "PR review comments", "committedDate": "2020-01-17T18:25:17Z", "type": "commit"}]}