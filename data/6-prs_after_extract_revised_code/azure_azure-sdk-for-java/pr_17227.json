{"pr_number": 17227, "pr_title": "Sb track2 Fixing some live test ", "pr_createdAt": "2020-11-05T17:22:19Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/17227", "timeline": [{"oid": "17f45bc17957ffbfceb9d6fab758428b5644d889", "url": "https://github.com/Azure/azure-sdk-for-java/commit/17f45bc17957ffbfceb9d6fab758428b5644d889", "message": "Continue to test", "committedDate": "2020-11-05T08:29:55Z", "type": "commit"}, {"oid": "43ccafbba6d31c56e235eb0045c356fc634b252f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/43ccafbba6d31c56e235eb0045c356fc634b252f", "message": "Fixing live test", "committedDate": "2020-11-05T17:07:01Z", "type": "commit"}, {"oid": "0232012b14dc8c9b089165c0e4ef216a12b1e1ce", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0232012b14dc8c9b089165c0e4ef216a12b1e1ce", "message": "Removing unwanted test file", "committedDate": "2020-11-05T17:18:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI0MTM4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518241388", "bodyText": "sessionId can not be null or empty for this method. This branch isn't reachable at runtime?", "author": "YijunXieMS", "createdAt": "2020-11-05T17:44:30Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java", "diffHunk": "@@ -113,13 +113,25 @@\n         final ReceiverOptions newReceiverOptions = new ReceiverOptions(receiverOptions.getReceiveMode(),\n             receiverOptions.getPrefetchCount(), receiverOptions.getMaxLockRenewDuration(),\n             receiverOptions.isEnableAutoComplete(), sessionId, null);\n+\n         final ServiceBusSessionManager sessionSpecificManager = new ServiceBusSessionManager(entityPath, entityType,\n             connectionProcessor, tracerProvider, messageSerializer, newReceiverOptions);\n \n-        return sessionSpecificManager.getActiveLink().map(receiveLink -> new ServiceBusReceiverAsyncClient(\n-            fullyQualifiedNamespace, entityPath, entityType, newReceiverOptions, connectionProcessor,\n-            ServiceBusConstants.OPERATION_TIMEOUT, tracerProvider, messageSerializer, () -> { },\n-            sessionSpecificManager));\n+        if (CoreUtils.isNullOrEmpty(sessionId)) {\n+            return sessionSpecificManager.getActiveLink().map(receiveLink -> new ServiceBusReceiverAsyncClient(\n+                fullyQualifiedNamespace, entityPath, entityType, newReceiverOptions, connectionProcessor,\n+                ServiceBusConstants.OPERATION_TIMEOUT, tracerProvider, messageSerializer, () -> {\n+            }, sessionSpecificManager));\n+        } else {", "originalCommit": "0232012b14dc8c9b089165c0e4ef216a12b1e1ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3MzYwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518273601", "bodyText": "removed.", "author": "hemanttanwar", "createdAt": "2020-11-05T18:32:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI0MTM4OA=="}], "type": "inlineReview", "revised_code": {"commit": "2940f9678bf3bc7d5fe75e9921dff565a85ab225", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java\nindex 46bbf82b9e0..25e7114cf29 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java\n\n@@ -114,23 +114,13 @@ public final class ServiceBusSessionReceiverAsyncClient implements AutoCloseable\n             receiverOptions.getPrefetchCount(), receiverOptions.getMaxLockRenewDuration(),\n             receiverOptions.isEnableAutoComplete(), sessionId, null);\n \n-        final ServiceBusSessionManager sessionSpecificManager = new ServiceBusSessionManager(entityPath, entityType,\n-            connectionProcessor, tracerProvider, messageSerializer, newReceiverOptions);\n-\n-        if (CoreUtils.isNullOrEmpty(sessionId)) {\n-            return sessionSpecificManager.getActiveLink().map(receiveLink -> new ServiceBusReceiverAsyncClient(\n-                fullyQualifiedNamespace, entityPath, entityType, newReceiverOptions, connectionProcessor,\n-                ServiceBusConstants.OPERATION_TIMEOUT, tracerProvider, messageSerializer, () -> {\n-            }, sessionSpecificManager));\n-        } else {\n-            ServiceBusReceiverAsyncClient sessionSpecificAsyncClient = new ServiceBusReceiverAsyncClient(fullyQualifiedNamespace,\n-                entityPath, entityType, newReceiverOptions, connectionProcessor,\n+        ServiceBusReceiverAsyncClient sessionSpecificAsyncClient = new ServiceBusReceiverAsyncClient(\n+            fullyQualifiedNamespace, entityPath, entityType, newReceiverOptions, connectionProcessor,\n                 ServiceBusConstants.OPERATION_TIMEOUT, tracerProvider, messageSerializer, () -> { });\n-            return sessionSpecificAsyncClient.getOrCreateConsumerAsync().map(consumer ->\n+        return sessionSpecificAsyncClient.getOrCreateConsumerAsync().map(consumer ->\n                 new ServiceBusReceiverAsyncClient(fullyQualifiedNamespace, entityPath, entityType, newReceiverOptions,\n                     connectionProcessor, ServiceBusConstants.OPERATION_TIMEOUT, tracerProvider, messageSerializer,\n                     () -> { }, consumer));\n-        }\n \n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2NTc3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518265771", "bodyText": "Why do we have this?", "author": "conniey", "createdAt": "2020-11-05T18:18:43Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -166,6 +166,15 @@\n         });\n     }\n \n+    ServiceBusReceiverAsyncClient(String fullyQualifiedNamespace, String entityPath, MessagingEntityType entityType,", "originalCommit": "0232012b14dc8c9b089165c0e4ef216a12b1e1ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4NTk4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518285980", "bodyText": "I am just following how Yijun did in acceptSession(), where a consumer is created (which create ReceiveLink)  and passed in the constructor . So  when ServiceBusReceiverAsyncClient is created it already have the consumer and it does not create new one.", "author": "hemanttanwar", "createdAt": "2020-11-05T18:53:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2NTc3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMxOTQzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518319436", "bodyText": "The ServiceBusAsyncClient contains an asyncConsumer.. that's why we have getOrCreate as a child of this.", "author": "conniey", "createdAt": "2020-11-05T19:41:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2NTc3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2Mzc2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518363766", "bodyText": "I changed it as we spoke on teams", "author": "hemanttanwar", "createdAt": "2020-11-05T21:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2NTc3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "36c6c854f53191a1c3c454ae80133c9e546f5375", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex 64d89575357..9dd2499f99e 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -166,15 +166,6 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n         });\n     }\n \n-    ServiceBusReceiverAsyncClient(String fullyQualifiedNamespace, String entityPath, MessagingEntityType entityType,\n-         ReceiverOptions receiverOptions, ServiceBusConnectionProcessor connectionProcessor, Duration cleanupInterval,\n-         TracerProvider tracerProvider, MessageSerializer messageSerializer, Runnable onClientClose,\n-         ServiceBusAsyncConsumer asyncConsumer) {\n-        this(fullyQualifiedNamespace, entityPath, entityType, receiverOptions, connectionProcessor, cleanupInterval,\n-            tracerProvider, messageSerializer, onClientClose);\n-        consumer.set(asyncConsumer);\n-    }\n-\n     /**\n      * Gets the fully qualified Service Bus namespace that the connection is associated with. This is likely similar to\n      * {@code {yournamespace}.servicebus.windows.net}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2NjY0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518266642", "bodyText": "Wait, why are we doing this logic here?", "author": "conniey", "createdAt": "2020-11-05T18:20:12Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java", "diffHunk": "@@ -113,13 +113,25 @@\n         final ReceiverOptions newReceiverOptions = new ReceiverOptions(receiverOptions.getReceiveMode(),\n             receiverOptions.getPrefetchCount(), receiverOptions.getMaxLockRenewDuration(),\n             receiverOptions.isEnableAutoComplete(), sessionId, null);\n+\n         final ServiceBusSessionManager sessionSpecificManager = new ServiceBusSessionManager(entityPath, entityType,\n             connectionProcessor, tracerProvider, messageSerializer, newReceiverOptions);\n \n-        return sessionSpecificManager.getActiveLink().map(receiveLink -> new ServiceBusReceiverAsyncClient(\n-            fullyQualifiedNamespace, entityPath, entityType, newReceiverOptions, connectionProcessor,\n-            ServiceBusConstants.OPERATION_TIMEOUT, tracerProvider, messageSerializer, () -> { },\n-            sessionSpecificManager));\n+        if (CoreUtils.isNullOrEmpty(sessionId)) {", "originalCommit": "0232012b14dc8c9b089165c0e4ef216a12b1e1ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3MzM2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518273362", "bodyText": "This is not needed, this is me working late night.", "author": "hemanttanwar", "createdAt": "2020-11-05T18:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2NjY0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2940f9678bf3bc7d5fe75e9921dff565a85ab225", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java\nindex 46bbf82b9e0..25e7114cf29 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java\n\n@@ -114,23 +114,13 @@ public final class ServiceBusSessionReceiverAsyncClient implements AutoCloseable\n             receiverOptions.getPrefetchCount(), receiverOptions.getMaxLockRenewDuration(),\n             receiverOptions.isEnableAutoComplete(), sessionId, null);\n \n-        final ServiceBusSessionManager sessionSpecificManager = new ServiceBusSessionManager(entityPath, entityType,\n-            connectionProcessor, tracerProvider, messageSerializer, newReceiverOptions);\n-\n-        if (CoreUtils.isNullOrEmpty(sessionId)) {\n-            return sessionSpecificManager.getActiveLink().map(receiveLink -> new ServiceBusReceiverAsyncClient(\n-                fullyQualifiedNamespace, entityPath, entityType, newReceiverOptions, connectionProcessor,\n-                ServiceBusConstants.OPERATION_TIMEOUT, tracerProvider, messageSerializer, () -> {\n-            }, sessionSpecificManager));\n-        } else {\n-            ServiceBusReceiverAsyncClient sessionSpecificAsyncClient = new ServiceBusReceiverAsyncClient(fullyQualifiedNamespace,\n-                entityPath, entityType, newReceiverOptions, connectionProcessor,\n+        ServiceBusReceiverAsyncClient sessionSpecificAsyncClient = new ServiceBusReceiverAsyncClient(\n+            fullyQualifiedNamespace, entityPath, entityType, newReceiverOptions, connectionProcessor,\n                 ServiceBusConstants.OPERATION_TIMEOUT, tracerProvider, messageSerializer, () -> { });\n-            return sessionSpecificAsyncClient.getOrCreateConsumerAsync().map(consumer ->\n+        return sessionSpecificAsyncClient.getOrCreateConsumerAsync().map(consumer ->\n                 new ServiceBusReceiverAsyncClient(fullyQualifiedNamespace, entityPath, entityType, newReceiverOptions,\n                     connectionProcessor, ServiceBusConstants.OPERATION_TIMEOUT, tracerProvider, messageSerializer,\n                     () -> { }, consumer));\n-        }\n \n     }\n \n"}}, {"oid": "2940f9678bf3bc7d5fe75e9921dff565a85ab225", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2940f9678bf3bc7d5fe75e9921dff565a85ab225", "message": "removing unwanted check", "committedDate": "2020-11-05T18:30:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyMDUzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518320534", "bodyText": "This Async suffix is .NET", "author": "conniey", "createdAt": "2020-11-05T19:43:44Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1050,6 +1059,10 @@ private boolean isManagementToken(String lockToken) {\n             });\n     }\n \n+    Mono<ServiceBusAsyncConsumer> getOrCreateConsumerAsync() {", "originalCommit": "2940f9678bf3bc7d5fe75e9921dff565a85ab225", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36c6c854f53191a1c3c454ae80133c9e546f5375", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex 64d89575357..9dd2499f99e 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -1059,8 +1050,11 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n             });\n     }\n \n-    Mono<ServiceBusAsyncConsumer> getOrCreateConsumerAsync() {\n-        return Mono.defer(() -> Mono.just(getOrCreateConsumer()));\n+    Mono<ServiceBusReceiverAsyncClient> createConsumerWithReceiveLink() {\n+        return Mono.defer(() -> {\n+            getOrCreateConsumer();\n+            return Mono.just(this);\n+        });\n     }\n \n     private ServiceBusAsyncConsumer getOrCreateConsumer() {\n"}}, {"oid": "36c6c854f53191a1c3c454ae80133c9e546f5375", "url": "https://github.com/Azure/azure-sdk-for-java/commit/36c6c854f53191a1c3c454ae80133c9e546f5375", "message": "Review comments", "committedDate": "2020-11-05T21:04:29Z", "type": "commit"}, {"oid": "a7b212916c036623d949042c36c1e19155f99daa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a7b212916c036623d949042c36c1e19155f99daa", "message": "Review comments", "committedDate": "2020-11-05T21:10:23Z", "type": "commit"}, {"oid": "14038785e5c78938c2128a5d52c72bf56a80ced6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/14038785e5c78938c2128a5d52c72bf56a80ced6", "message": "Review comments", "committedDate": "2020-11-05T21:12:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzNjMxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518436310", "bodyText": "One last question. So we get and forget the returned result?", "author": "YijunXieMS", "createdAt": "2020-11-05T23:39:29Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1050,6 +1050,13 @@ private boolean isManagementToken(String lockToken) {\n             });\n     }\n \n+    Mono<ServiceBusReceiverAsyncClient> createConsumerWithReceiveLink() {\n+        return Mono.defer(() -> {\n+            getOrCreateConsumer();", "originalCommit": "14038785e5c78938c2128a5d52c72bf56a80ced6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzODUzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518438530", "bodyText": "This would be saved in existing consumer in this instance and will be used for all next calls.\nhttps://github.com/Azure/azure-sdk-for-java/pull/17227/files#diff-42c5fc794930edf5858987b570b871727693454acb27130ac5a9748e55d2de95L1054", "author": "hemanttanwar", "createdAt": "2020-11-05T23:45:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzNjMxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ0MTE2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518441165", "bodyText": "This will be saved on in class instance variable as cache consumer .", "author": "hemanttanwar", "createdAt": "2020-11-05T23:53:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzNjMxMA=="}], "type": "inlineReview", "revised_code": {"commit": "6e1e28295151b0774a6ecff1aa6a71f6f22c814c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex 59ce5b37f1f..44de4b8270b 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -1050,14 +1050,14 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n             });\n     }\n \n-    Mono<ServiceBusReceiverAsyncClient> createConsumerWithReceiveLink() {\n+    Mono<Void> createConsumerWithReceiveLink() {\n         return Mono.defer(() -> {\n             getOrCreateConsumer();\n-            return Mono.just(this);\n+            return Mono.empty();\n         });\n     }\n \n-    private ServiceBusAsyncConsumer getOrCreateConsumer() {\n+    ServiceBusAsyncConsumer getOrCreateConsumer() {\n         final ServiceBusAsyncConsumer existing = consumer.get();\n         if (existing != null) {\n             return existing;\n"}}, {"oid": "4e70db071b76a3a660a73ed84850ac111917ac28", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4e70db071b76a3a660a73ed84850ac111917ac28", "message": "removing space", "committedDate": "2020-11-05T23:41:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1NjM5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518456393", "bodyText": "Why are we returning the object again? We already have a reference to it.", "author": "conniey", "createdAt": "2020-11-06T00:42:12Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1050,6 +1050,13 @@ private boolean isManagementToken(String lockToken) {\n             });\n     }\n \n+    Mono<ServiceBusReceiverAsyncClient> createConsumerWithReceiveLink() {\n+        return Mono.defer(() -> {\n+            getOrCreateConsumer();\n+            return Mono.just(this);", "originalCommit": "4e70db071b76a3a660a73ed84850ac111917ac28", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e1e28295151b0774a6ecff1aa6a71f6f22c814c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex 9dd2499f99e..44de4b8270b 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -1050,14 +1050,14 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n             });\n     }\n \n-    Mono<ServiceBusReceiverAsyncClient> createConsumerWithReceiveLink() {\n+    Mono<Void> createConsumerWithReceiveLink() {\n         return Mono.defer(() -> {\n             getOrCreateConsumer();\n-            return Mono.just(this);\n+            return Mono.empty();\n         });\n     }\n \n-    private ServiceBusAsyncConsumer getOrCreateConsumer() {\n+    ServiceBusAsyncConsumer getOrCreateConsumer() {\n         final ServiceBusAsyncConsumer existing = consumer.get();\n         if (existing != null) {\n             return existing;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1Njg2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518456862", "bodyText": "You should be disposing of the original receiver one before setting it again.", "author": "conniey", "createdAt": "2020-11-06T00:43:57Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -897,7 +944,7 @@ void sendReceiveMessageWithVariousPropertyTypes(MessagingEntityType entityType)\n     void setAndGetSessionState(MessagingEntityType entityType) {\n         // Arrange\n         setSenderAndReceiver(entityType, 0, true);\n-\n+        receiver = receiverMono.block(TIMEOUT);", "originalCommit": "4e70db071b76a3a660a73ed84850ac111917ac28", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e1e28295151b0774a6ecff1aa6a71f6f22c814c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\nindex 30e1d77581b..d9aa59f7c66 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n\n@@ -944,7 +850,6 @@ class ServiceBusReceiverAsyncClientIntegrationTest extends IntegrationTestBase {\n     void setAndGetSessionState(MessagingEntityType entityType) {\n         // Arrange\n         setSenderAndReceiver(entityType, 0, true);\n-        receiver = receiverMono.block(TIMEOUT);\n         final byte[] sessionState = \"Finished\".getBytes(UTF_8);\n         final String messageId = UUID.randomUUID().toString();\n         final ServiceBusMessage messageToSend = getMessage(messageId, true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1NzM0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518457343", "bodyText": "We're not cleaning up the existing receiver that was set.", "author": "conniey", "createdAt": "2020-11-06T00:45:27Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -897,7 +944,7 @@ void sendReceiveMessageWithVariousPropertyTypes(MessagingEntityType entityType)\n     void setAndGetSessionState(MessagingEntityType entityType) {\n         // Arrange\n         setSenderAndReceiver(entityType, 0, true);\n-\n+        receiver = receiverMono.block(TIMEOUT);", "originalCommit": "4e70db071b76a3a660a73ed84850ac111917ac28", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e1e28295151b0774a6ecff1aa6a71f6f22c814c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\nindex 30e1d77581b..d9aa59f7c66 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n\n@@ -944,7 +850,6 @@ class ServiceBusReceiverAsyncClientIntegrationTest extends IntegrationTestBase {\n     void setAndGetSessionState(MessagingEntityType entityType) {\n         // Arrange\n         setSenderAndReceiver(entityType, 0, true);\n-        receiver = receiverMono.block(TIMEOUT);\n         final byte[] sessionState = \"Finished\".getBytes(UTF_8);\n         final String messageId = UUID.randomUUID().toString();\n         final ServiceBusMessage messageToSend = getMessage(messageId, true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ1ODA4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518458084", "bodyText": "We're not disposing of the receiver that was already set. This is some weird hack. If the flow is completely different, we should split test cases instead of shoehorning this in.\nAdditionally, you can do:\nvar receiver = sessionReceiver.acceptSession().cache(e -> Duration.MAX_VALUE, e -> Duration.MIN_VALUE, e -> Duration.MIN_VALUE);\ntry {\nStepVerifier.create(receiver.flatMap(e -> e.receive...))\n    .\n\n} finally {\n    receiver.close();\n}", "author": "conniey", "createdAt": "2020-11-06T00:47:48Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -638,6 +671,10 @@ void receiveAndComplete(MessagingEntityType entityType, boolean isSessionEnabled\n         final String messageId = UUID.randomUUID().toString();\n         final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n \n+        if (isSessionEnabled) {\n+            this.receiver = receiverMono.block(TIMEOUT);", "originalCommit": "4e70db071b76a3a660a73ed84850ac111917ac28", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e1e28295151b0774a6ecff1aa6a71f6f22c814c", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\nindex 30e1d77581b..d9aa59f7c66 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n\n@@ -671,10 +590,6 @@ class ServiceBusReceiverAsyncClientIntegrationTest extends IntegrationTestBase {\n         final String messageId = UUID.randomUUID().toString();\n         final ServiceBusMessage message = getMessage(messageId, isSessionEnabled);\n \n-        if (isSessionEnabled) {\n-            this.receiver = receiverMono.block(TIMEOUT);\n-        }\n-\n         sendMessage(message).block(TIMEOUT);\n \n         final ServiceBusReceivedMessage receivedMessage = receiver.receiveMessages().next().block(TIMEOUT);\n"}}, {"oid": "6e1e28295151b0774a6ecff1aa6a71f6f22c814c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6e1e28295151b0774a6ecff1aa6a71f6f22c814c", "message": "REview comments", "committedDate": "2020-11-06T03:36:59Z", "type": "commit"}, {"oid": "b53db70b3eeea4d77cd46e169ab1b598886ffc2b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b53db70b3eeea4d77cd46e169ab1b598886ffc2b", "message": "Review comments and test cleanup", "committedDate": "2020-11-06T03:40:54Z", "type": "commit"}, {"oid": "be2f0919a0ed60d553143fc67acded1714535ea9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/be2f0919a0ed60d553143fc67acded1714535ea9", "message": " test cleanup", "committedDate": "2020-11-06T04:06:29Z", "type": "commit"}, {"oid": "641ff343e9bedcf149c7920a3872b85c3d2ff650", "url": "https://github.com/Azure/azure-sdk-for-java/commit/641ff343e9bedcf149c7920a3872b85c3d2ff650", "message": " more test cleanup", "committedDate": "2020-11-06T04:11:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU4OTU2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518589566", "bodyText": "I don't think is correct or the change above. This method always returns a value. We only want the mono to complete successfully if it was able to acquire a lock on the session.\nThe logic before seems like the correct one.", "author": "conniey", "createdAt": "2020-11-06T08:21:32Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java", "diffHunk": "@@ -113,13 +113,17 @@\n         final ReceiverOptions newReceiverOptions = new ReceiverOptions(receiverOptions.getReceiveMode(),\n             receiverOptions.getPrefetchCount(), receiverOptions.getMaxLockRenewDuration(),\n             receiverOptions.isEnableAutoComplete(), sessionId, null);\n-        final ServiceBusSessionManager sessionSpecificManager = new ServiceBusSessionManager(entityPath, entityType,\n-            connectionProcessor, tracerProvider, messageSerializer, newReceiverOptions);\n \n-        return sessionSpecificManager.getActiveLink().map(receiveLink -> new ServiceBusReceiverAsyncClient(\n-            fullyQualifiedNamespace, entityPath, entityType, newReceiverOptions, connectionProcessor,\n-            ServiceBusConstants.OPERATION_TIMEOUT, tracerProvider, messageSerializer, () -> { },\n-            sessionSpecificManager));\n+        return  Mono.defer(() -> {", "originalCommit": "641ff343e9bedcf149c7920a3872b85c3d2ff650", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3949a8e250fe77e6e852bc11d49e41d49c19483", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java\nindex dfeec635fd4..528fd2125ee 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSessionReceiverAsyncClient.java\n\n@@ -114,15 +114,12 @@ public final class ServiceBusSessionReceiverAsyncClient implements AutoCloseable\n             receiverOptions.getPrefetchCount(), receiverOptions.getMaxLockRenewDuration(),\n             receiverOptions.isEnableAutoComplete(), sessionId, null);\n \n-        return  Mono.defer(() -> {\n-            ServiceBusReceiverAsyncClient sessionSpecificAsyncClient = new ServiceBusReceiverAsyncClient(\n-                fullyQualifiedNamespace, entityPath, entityType, newReceiverOptions, connectionProcessor,\n-                ServiceBusConstants.OPERATION_TIMEOUT, tracerProvider, messageSerializer, () -> { });\n+        ServiceBusReceiverAsyncClient sessionSpecificAsyncClient = new ServiceBusReceiverAsyncClient(\n+            fullyQualifiedNamespace, entityPath, entityType, newReceiverOptions, connectionProcessor,\n+            ServiceBusConstants.OPERATION_TIMEOUT, tracerProvider, messageSerializer, () -> { });\n \n-            sessionSpecificAsyncClient.getOrCreateConsumer();\n-\n-            return Mono.just(sessionSpecificAsyncClient);\n-        });\n+        return sessionSpecificAsyncClient.createConsumerWithReceiveLink()\n+            .flatMap( ignored -> Mono.just(sessionSpecificAsyncClient));\n \n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU5MDQxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518590413", "bodyText": "There is a messagesDeferredPending that we no longer use and can be moved or removed. We never read its values.", "author": "conniey", "createdAt": "2020-11-06T08:23:15Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -64,12 +63,6 @@\n     private ServiceBusReceiverAsyncClient receiver;\n     private ServiceBusSenderAsyncClient sender;\n ", "originalCommit": "641ff343e9bedcf149c7920a3872b85c3d2ff650", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3949a8e250fe77e6e852bc11d49e41d49c19483", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\nindex f4b6304d2e4..75e2405380f 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n\n@@ -57,7 +57,6 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n class ServiceBusReceiverAsyncClientIntegrationTest extends IntegrationTestBase {\n     private final ClientLogger logger = new ClientLogger(ServiceBusReceiverAsyncClientIntegrationTest.class);\n     private final AtomicInteger messagesPending = new AtomicInteger();\n-    private final List<Long> messagesDeferredPending = new ArrayList<>();\n     private final boolean isSessionEnabled = false;\n \n     private ServiceBusReceiverAsyncClient receiver;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU5MTg3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518591876", "bodyText": "Why are we explicitly completing these? the method suggests that these should be auto completed receiveTwoMessagesAutoComplete. Same with the one below.", "author": "conniey", "createdAt": "2020-11-06T08:25:53Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -329,12 +261,15 @@ void receiveTwoMessagesAutoComplete(MessagingEntityType entityType, boolean isSe\n         StepVerifier.create(receiver.receiveMessages())\n             .assertNext(receivedMessage -> {\n                 assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+                receiver.complete(receivedMessage).block(Duration.ofSeconds(15));", "originalCommit": "641ff343e9bedcf149c7920a3872b85c3d2ff650", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3949a8e250fe77e6e852bc11d49e41d49c19483", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\nindex f4b6304d2e4..75e2405380f 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n\n@@ -261,15 +270,12 @@ class ServiceBusReceiverAsyncClientIntegrationTest extends IntegrationTestBase {\n         StepVerifier.create(receiver.receiveMessages())\n             .assertNext(receivedMessage -> {\n                 assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                receiver.complete(receivedMessage).block(Duration.ofSeconds(15));\n             })\n             .assertNext(receivedMessage -> {\n                 assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                receiver.complete(receivedMessage).block(Duration.ofSeconds(15));\n             })\n             .thenCancel()\n             .verify();\n-\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU5MjkyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518592929", "bodyText": "Then consume while always returns true? Shouldn't we assert that completed < messages.size() and then stop when completed >= messages.size()? And instead of thenCancel(), expect a complete?", "author": "conniey", "createdAt": "2020-11-06T08:27:53Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -558,9 +486,13 @@ void peekMessages(MessagingEntityType entityType, boolean isSessionEnabled) {\n                 .assertNext(message -> checkCorrectMessage.accept(message, 7))\n                 .verifyComplete();\n         } finally {\n-            receiveAndDeleteReceiver.receiveMessages()\n-                .take(messages.size())\n-                .blockLast(Duration.ofSeconds(15));\n+            StepVerifier.create(receiver.receiveMessages().take(messages.size()))\n+                .thenConsumeWhile(receivedMessage -> {", "originalCommit": "641ff343e9bedcf149c7920a3872b85c3d2ff650", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3949a8e250fe77e6e852bc11d49e41d49c19483", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\nindex f4b6304d2e4..75e2405380f 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n\n@@ -486,12 +499,14 @@ class ServiceBusReceiverAsyncClientIntegrationTest extends IntegrationTestBase {\n                 .assertNext(message -> checkCorrectMessage.accept(message, 7))\n                 .verifyComplete();\n         } finally {\n+            AtomicInteger completed = new AtomicInteger();\n             StepVerifier.create(receiver.receiveMessages().take(messages.size()))\n                 .thenConsumeWhile(receivedMessage -> {\n-                    receiver.complete(receivedMessage).block(Duration.ofSeconds(15));\n-                    return true;\n+                    completed.incrementAndGet();\n+                    receiver.complete(receivedMessage).block(OPERATION_TIMEOUT);\n+                    return completed.get() <= messages.size();\n                 })\n-                .thenCancel()\n+                .expectComplete()\n                 .verify();\n \n             messagesPending.addAndGet(-messages.size());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU5MzUxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518593514", "bodyText": "We have a TIMEOUT duration already defined. We can replace all instances of this Duration.ofSeconds.", "author": "conniey", "createdAt": "2020-11-06T08:29:08Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -436,9 +362,10 @@ void sendScheduledMessageAndReceive(MessagingEntityType entityType, boolean isSe\n         sender.scheduleMessage(message, scheduledEnqueueTime).block(TIMEOUT);\n \n         // Assert & Act\n-        StepVerifier.create(Mono.delay(Duration.ofSeconds(3)).then(receiveAndDeleteReceiver.receiveMessages().next()))\n+        StepVerifier.create(Mono.delay(Duration.ofSeconds(4)).then(receiver.receiveMessages().next()))\n             .assertNext(receivedMessage -> {\n                 assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n+                receiver.complete(receivedMessage).block(Duration.ofSeconds(15));", "originalCommit": "641ff343e9bedcf149c7920a3872b85c3d2ff650", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3949a8e250fe77e6e852bc11d49e41d49c19483", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\nindex f4b6304d2e4..75e2405380f 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n\n@@ -365,7 +379,7 @@ class ServiceBusReceiverAsyncClientIntegrationTest extends IntegrationTestBase {\n         StepVerifier.create(Mono.delay(Duration.ofSeconds(4)).then(receiver.receiveMessages().next()))\n             .assertNext(receivedMessage -> {\n                 assertMessageEquals(receivedMessage, messageId, isSessionEnabled);\n-                receiver.complete(receivedMessage).block(Duration.ofSeconds(15));\n+                receiver.complete(receivedMessage).block(OPERATION_TIMEOUT);\n                 messagesPending.decrementAndGet();\n             })\n             .verifyComplete();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU5Mzc2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17227#discussion_r518593767", "bodyText": "Same with this... wouldn't we expect receiver.receiveMessages().take(2) then not cancel?", "author": "conniey", "createdAt": "2020-11-06T08:29:33Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java", "diffHunk": "@@ -586,6 +518,17 @@ void peekMessagesFromSequence(MessagingEntityType entityType) {\n         StepVerifier.create(receiver.peekMessagesAt(maxMessages, fromSequenceNumber))\n             .expectNextCount(maxMessages)\n             .verifyComplete();\n+\n+        // cleanup\n+        StepVerifier.create(receiver.receiveMessages())", "originalCommit": "641ff343e9bedcf149c7920a3872b85c3d2ff650", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c3949a8e250fe77e6e852bc11d49e41d49c19483", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\nindex f4b6304d2e4..75e2405380f 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientIntegrationTest.java\n\n@@ -520,15 +535,15 @@ class ServiceBusReceiverAsyncClientIntegrationTest extends IntegrationTestBase {\n             .verifyComplete();\n \n         // cleanup\n-        StepVerifier.create(receiver.receiveMessages())\n+        StepVerifier.create(receiver.receiveMessages().take(maxMessages))\n             .assertNext(receivedMessage -> {\n                 receiver.complete(receivedMessage).block(Duration.ofSeconds(15));\n             })\n             .assertNext(receivedMessage -> {\n                 receiver.complete(receivedMessage).block(Duration.ofSeconds(15));\n             })\n-            .thenCancel()\n-            .verify();\n+            .expectComplete()\n+            .verify(TIMEOUT);\n     }\n \n     /**\n"}}, {"oid": "c3949a8e250fe77e6e852bc11d49e41d49c19483", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c3949a8e250fe77e6e852bc11d49e41d49c19483", "message": "Review comment incorporated.", "committedDate": "2020-11-06T17:20:44Z", "type": "commit"}, {"oid": "b4ba7f43149fdbc2a8cc60af8d61e04200c8ac89", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b4ba7f43149fdbc2a8cc60af8d61e04200c8ac89", "message": "Review comment incorporated.", "committedDate": "2020-11-06T17:28:47Z", "type": "commit"}]}