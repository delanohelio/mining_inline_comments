{"pr_number": 10741, "pr_title": "Added content response on write enabled feature to Gateway and Direct TCP", "pr_createdAt": "2020-05-06T00:22:55Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/10741", "timeline": [{"oid": "4239e8ba9a3cbe48a3ba2d607ea226a71bab4b73", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4239e8ba9a3cbe48a3ba2d607ea226a71bab4b73", "message": "Added return minimal response feature to Gateway and Direct TCP for item write operations", "committedDate": "2020-05-06T00:17:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwODk4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420508984", "bodyText": "ChangeFeedProcessor is a read-only, how minimal response impacts it?", "author": "kirankumarkolli", "createdAt": "2020-05-06T02:09:19Z", "path": "sdk/cosmos/azure-cosmos-examples/src/main/java/com/azure/cosmos/examples/ChangeFeed/SampleChangeFeedProcessor.java", "diffHunk": "@@ -121,6 +121,7 @@ public static CosmosAsyncClient getCosmosClient() {\n                 .key(SampleConfigurations.MASTER_KEY)\n                 .connectionPolicy(ConnectionPolicy.getDefaultPolicy())\n                 .consistencyLevel(ConsistencyLevel.EVENTUAL)\n+                .returnMinimalResponse(false)", "originalCommit": "4239e8ba9a3cbe48a3ba2d607ea226a71bab4b73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxMzY0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420513642", "bodyText": "This is SampleChangeFeedProcessor example, which creates some documents before listening to them, so used it. This is not in the source code.", "author": "kushagraThapar", "createdAt": "2020-05-06T02:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwODk4NA=="}], "type": "inlineReview", "revised_code": {"commit": "85d8c46fd2ff71cfc6a149947731ea85a74ed261", "chunk": "diff --git a/sdk/cosmos/azure-cosmos-examples/src/main/java/com/azure/cosmos/examples/ChangeFeed/SampleChangeFeedProcessor.java b/sdk/cosmos/azure-cosmos-examples/src/main/java/com/azure/cosmos/examples/ChangeFeed/SampleChangeFeedProcessor.java\nindex a49dd32710c..05541446dfe 100644\n--- a/sdk/cosmos/azure-cosmos-examples/src/main/java/com/azure/cosmos/examples/ChangeFeed/SampleChangeFeedProcessor.java\n+++ b/sdk/cosmos/azure-cosmos-examples/src/main/java/com/azure/cosmos/examples/ChangeFeed/SampleChangeFeedProcessor.java\n\n@@ -121,7 +121,7 @@ public class SampleChangeFeedProcessor {\n                 .key(SampleConfigurations.MASTER_KEY)\n                 .connectionPolicy(ConnectionPolicy.getDefaultPolicy())\n                 .consistencyLevel(ConsistencyLevel.EVENTUAL)\n-                .returnMinimalResponse(false)\n+                .noContentResponseOnWrite(false)\n                 .buildAsyncClient();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwOTQwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420509408", "bodyText": ".NET is using name 'NoResponseContent'.\n/cc: @j82w", "author": "kirankumarkolli", "createdAt": "2020-05-06T02:10:57Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java", "diffHunk": "@@ -163,6 +166,20 @@ CosmosKeyCredential cosmosKeyCredential() {\n         return cosmosKeyCredential;\n     }\n \n+    /**\n+     * Gets the boolean which indicates whether to only return the headers and status code in Cosmos DB response\n+     * in case of Create, Update and Delete operations on CosmosItem.\n+     *\n+     * If true, this removes the resource from response. It reduces networking\n+     * and CPU load by not sending the resource back over the network and serializing it\n+     * on the client.\n+     *\n+     * @return a boolean indicating whether resource will be included in the response or not\n+     */\n+    boolean isReturnMinimalResponse() {", "originalCommit": "4239e8ba9a3cbe48a3ba2d607ea226a71bab4b73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxMTM5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420511393", "bodyText": "NoContentResponseOnWrite was the current full name .NET using.", "author": "kirankumarkolli", "createdAt": "2020-05-06T02:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwOTQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxMzgwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420513809", "bodyText": "Will go with noContentResponseOnWrite as the new name. Thanks.", "author": "kushagraThapar", "createdAt": "2020-05-06T02:29:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwOTQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg1MzYzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420853630", "bodyText": "for similar configs we have \"Enabled\" as the suffix. To be consistent please add \"Enabled\" at the end. (noContentResponseOnWriteEnabled)", "author": "moderakh", "createdAt": "2020-05-06T14:50:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwOTQwOA=="}], "type": "inlineReview", "revised_code": {"commit": "85d8c46fd2ff71cfc6a149947731ea85a74ed261", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java\nindex ca26c9fed26..3b23bade927 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncClient.java\n\n@@ -176,8 +176,8 @@ public final class CosmosAsyncClient implements Closeable {\n      *\n      * @return a boolean indicating whether resource will be included in the response or not\n      */\n-    boolean isReturnMinimalResponse() {\n-        return returnMinimalResponse;\n+    boolean isNoContentResponseOnWrite() {\n+        return noContentResponseOnWrite;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwOTk3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420509972", "bodyText": "What are scenarios for it?", "author": "kirankumarkolli", "createdAt": "2020-05-06T02:13:38Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentServiceRequest.java", "diffHunk": "@@ -26,8 +26,6 @@\n  * This is core Transport/Connection agnostic request to the Azure Cosmos DB database service.\n  */\n public class RxDocumentServiceRequest implements Cloneable {\n-    private static final char PREFER_HEADER_SEPERATOR = ';';\n-    private static final String PREFER_HEADER_VALUE_FORMAT = \"%s=%s\";", "originalCommit": "4239e8ba9a3cbe48a3ba2d607ea226a71bab4b73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxNDE0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420514142", "bodyText": "Unknown scenarios, but this already exists in the SDK, and there is a unit test as well. Didn't want to break that.\nhttps://github.com/Azure/azure-sdk-for-java/pull/10741/files#diff-7011a46947ace6e46648f8c4027e602eL414\nSo to keep the functionality intact, I am re-using the logic we already have.", "author": "kushagraThapar", "createdAt": "2020-05-06T02:31:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwOTk3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxNjI4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420516280", "bodyText": "I am thinking if this is not exposed through public api, we should drop the generic support and only have support for minimalResponseContent scenario", "author": "moderakh", "createdAt": "2020-05-06T02:40:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwOTk3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyOTU3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420529573", "bodyText": "I like that idea @moderakh . I will get rid of it.", "author": "kushagraThapar", "createdAt": "2020-05-06T03:44:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwOTk3Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxMDQwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420510403", "bodyText": "good catch.", "author": "moderakh", "createdAt": "2020-05-06T02:15:10Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/HttpTransportClient.java", "diffHunk": "@@ -84,7 +84,7 @@ public HttpTransportClient(Configs configs, Duration requestTimeout, UserAgentCo\n \n         // Set requested API version header for version enforcement.\n         this.defaultHeaders.put(HttpConstants.HttpHeaders.VERSION, HttpConstants.Versions.CURRENT_VERSION);\n-        this.defaultHeaders.put(HttpConstants.HttpHeaders.CACHE_CONTROL, HttpConstants.HeaderValues.NoCache);\n+        this.defaultHeaders.put(HttpConstants.HttpHeaders.CACHE_CONTROL, HttpConstants.HeaderValues.NO_CACHE);", "originalCommit": "4239e8ba9a3cbe48a3ba2d607ea226a71bab4b73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxMjk5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420512999", "bodyText": "given that currently the only preferred header is minimal response, I wonder if we can avoid string concatination here:\ninstead of\npreferHeaderName + \"=\" + preferHeaderValue\nwe just pass minimanRespose=true", "author": "moderakh", "createdAt": "2020-05-06T02:26:13Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -915,6 +928,27 @@ private static void validateResource(Resource resource) {\n         return headers;\n     }\n \n+    static Map<String, String> addPreferHeader(String preferHeaderName, String preferHeaderValue, Map<String, String> headers) {\n+        if (headers == null) {\n+            headers = new HashMap<>();\n+        }\n+        return addPreferHeader(preferHeaderName + \"=\" + preferHeaderValue, headers);", "originalCommit": "4239e8ba9a3cbe48a3ba2d607ea226a71bab4b73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUyOTg0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420529842", "bodyText": "This doesn't get called. The other overload gets called :)\nBut since the only preferred header is minimalResponse, I will remove this overload.\nAlso, just to clarify, it is passed as: prefer:return=minimal :)", "author": "kushagraThapar", "createdAt": "2020-05-06T03:45:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxMjk5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "85d8c46fd2ff71cfc6a149947731ea85a74ed261", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java\nindex 85c4060cbf1..cad14d08483 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java\n\n@@ -928,27 +928,6 @@ public class RxDocumentClientImpl implements AsyncDocumentClient, IAuthorization\n         return headers;\n     }\n \n-    static Map<String, String> addPreferHeader(String preferHeaderName, String preferHeaderValue, Map<String, String> headers) {\n-        if (headers == null) {\n-            headers = new HashMap<>();\n-        }\n-        return addPreferHeader(preferHeaderName + \"=\" + preferHeaderValue, headers);\n-    }\n-\n-    static Map<String, String> addPreferHeader(String headerToAdd, Map<String, String> headers) {\n-        if (headers == null) {\n-            headers = new HashMap<>();\n-        }\n-        String preferHeader = headers.get(HttpConstants.HttpHeaders.PREFER);\n-        if(StringUtils.isNotEmpty(preferHeader)) {\n-            preferHeader += PREFER_HEADER_SEPERATOR + headerToAdd;\n-        } else {\n-            preferHeader = headerToAdd;\n-        }\n-        headers.put(HttpConstants.HttpHeaders.PREFER, preferHeader);\n-        return headers;\n-    }\n-\n     private Mono<RxDocumentServiceRequest> addPartitionKeyInformation(RxDocumentServiceRequest request,\n                                                                       ByteBuffer contentAsByteBuffer,\n                                                                       Document document,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxNTE0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420515141", "bodyText": "we usually target emulator for database and container CRUD test, because otherwise we may run out of master resource budget in prod.\ncan we target emulator here too? that will help in ensuring less random test failure due to master budget throttling", "author": "moderakh", "createdAt": "2020-05-06T02:35:39Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/ReturnMinimalResponseTest.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License.\n+ *\n+ */\n+\n+package com.azure.cosmos;\n+\n+import com.azure.cosmos.implementation.CosmosItemProperties;\n+import com.azure.cosmos.models.CosmosContainerProperties;\n+import com.azure.cosmos.models.CosmosContainerRequestOptions;\n+import com.azure.cosmos.models.CosmosContainerResponse;\n+import com.azure.cosmos.models.CosmosDatabaseProperties;\n+import com.azure.cosmos.models.CosmosDatabaseRequestOptions;\n+import com.azure.cosmos.models.CosmosDatabaseResponse;\n+import com.azure.cosmos.models.CosmosItemRequestOptions;\n+import com.azure.cosmos.models.CosmosItemResponse;\n+import com.azure.cosmos.models.IndexingMode;\n+import com.azure.cosmos.models.IndexingPolicy;\n+import com.azure.cosmos.models.ModelBridgeInternal;\n+import com.azure.cosmos.models.PartitionKey;\n+import com.azure.cosmos.models.PartitionKeyDefinition;\n+import com.azure.cosmos.rx.TestSuiteBase;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Factory;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class ReturnMinimalResponseTest extends TestSuiteBase {\n+\n+    private final String preExistingDatabaseId = CosmosDatabaseForTest.generateId();\n+    private final List<String> databases = new ArrayList<>();\n+    private CosmosClient client;\n+    private CosmosContainer container;\n+    private CosmosDatabase createdDatabase;\n+\n+    //  Currently Gateway and Direct TCP support minimal response feature.\n+    @Factory(dataProvider = \"clientBuildersWithDirectTcpWithReturnMinimalResponse\")\n+    public ReturnMinimalResponseTest(CosmosClientBuilder clientBuilder) {\n+        super(clientBuilder);\n+    }\n+\n+    @BeforeClass(groups = {\"simple\"}, timeOut = SETUP_TIMEOUT)\n+    public void beforeClass() {\n+        assertThat(this.client).isNull();\n+        this.client = getClientBuilder().buildClient();\n+        createdDatabase = createSyncDatabase(client, preExistingDatabaseId);\n+        CosmosAsyncContainer asyncContainer = getSharedMultiPartitionCosmosContainer(this.client.asyncClient());\n+        container = client.getDatabase(asyncContainer.getDatabase().getId()).getContainer(asyncContainer.getId());\n+    }\n+\n+    @AfterClass(groups = {\"simple\"}, timeOut = SHUTDOWN_TIMEOUT, alwaysRun = true)\n+    public void afterClass() {\n+        safeDeleteSyncDatabase(createdDatabase);\n+        for (String dbId : databases) {\n+            safeDeleteSyncDatabase(client.getDatabase(dbId));\n+        }\n+        safeCloseSyncClient(client);\n+    }\n+\n+    @Test(groups = {\"simple\"}, timeOut = TIMEOUT)\n+    public void createDatabase_withMinimalResponseConfig() throws CosmosClientException {\n+        CosmosDatabaseProperties databaseDefinition = new CosmosDatabaseProperties(CosmosDatabaseForTest.generateId());", "originalCommit": "4239e8ba9a3cbe48a3ba2d607ea226a71bab4b73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUzMDE5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420530197", "bodyText": "Yes, makes sense, will do that.", "author": "kushagraThapar", "createdAt": "2020-05-06T03:47:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUxNTE0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "85d8c46fd2ff71cfc6a149947731ea85a74ed261", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/ReturnMinimalResponseTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosItemNoContentResponseOnWriteTest.java\nsimilarity index 52%\nrename from sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/ReturnMinimalResponseTest.java\nrename to sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosItemNoContentResponseOnWriteTest.java\nindex a7b54eebf06..85240ae1663 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/ReturnMinimalResponseTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/CosmosItemNoContentResponseOnWriteTest.java\n\n@@ -8,15 +8,8 @@ package com.azure.cosmos;\n \n import com.azure.cosmos.implementation.CosmosItemProperties;\n import com.azure.cosmos.models.CosmosContainerProperties;\n-import com.azure.cosmos.models.CosmosContainerRequestOptions;\n-import com.azure.cosmos.models.CosmosContainerResponse;\n-import com.azure.cosmos.models.CosmosDatabaseProperties;\n-import com.azure.cosmos.models.CosmosDatabaseRequestOptions;\n-import com.azure.cosmos.models.CosmosDatabaseResponse;\n import com.azure.cosmos.models.CosmosItemRequestOptions;\n import com.azure.cosmos.models.CosmosItemResponse;\n-import com.azure.cosmos.models.IndexingMode;\n-import com.azure.cosmos.models.IndexingPolicy;\n import com.azure.cosmos.models.ModelBridgeInternal;\n import com.azure.cosmos.models.PartitionKey;\n import com.azure.cosmos.models.PartitionKeyDefinition;\n"}}, {"oid": "85d8c46fd2ff71cfc6a149947731ea85a74ed261", "url": "https://github.com/Azure/azure-sdk-for-java/commit/85d8c46fd2ff71cfc6a149947731ea85a74ed261", "message": "Updated name to noContentResponseOnWrite.\nUpdated cosmos container and database tests to emulator groups.\nRemoved prefer header generic logic", "committedDate": "2020-05-06T04:13:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1MDY2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420650665", "bodyText": "NIT: I think pretty much all customers identifying this setting will also ask themselves whether this flag will have impact on RU charges. Would be good to document that it doesn't (at least my understanding) here - or at least in the FAQ for the feature.", "author": "FabianMeiswinkel", "createdAt": "2020-05-06T09:15:26Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -291,6 +292,39 @@ public CosmosClientBuilder keyCredential(CosmosKeyCredential cosmosKeyCredential\n         return this;\n     }\n \n+    /**\n+     * Gets the boolean which indicates whether to only return the headers and status code in Cosmos DB response\n+     * in case of Create, Update and Delete operations on CosmosItem.\n+     *\n+     * If true, this removes the resource from response. It reduces networking\n+     * and CPU load by not sending the resource back over the network and serializing it\n+     * on the client.\n+     *\n+     * By-default, this is true.\n+     *\n+     * @return a boolean indicating whether resource will be included in the response or not\n+     */\n+    boolean isNoContentResponseOnWrite() {\n+        return noContentResponseOnWrite;\n+    }\n+\n+    /**\n+     * Sets the boolean to only return the headers and status code in Cosmos DB response\n+     * in case of Create, Update and Delete operations on CosmosItem.\n+     *\n+     * If set to true, this removes the resource from response. It reduces networking\n+     * and CPU load by not sending the resource back over the network and serializing it on the client.", "originalCommit": "85d8c46fd2ff71cfc6a149947731ea85a74ed261", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4ODQxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420888415", "bodyText": "I like that idea, will document that \"this doesn't impact RU usage for read or write operations\"", "author": "kushagraThapar", "createdAt": "2020-05-06T15:35:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1MDY2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c9d3377b980e4276a1ec58e8109262601a9c45ca", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java\nindex fcefacdf071..0435020dc3e 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java\n\n@@ -296,32 +296,34 @@ public class CosmosClientBuilder {\n      * Gets the boolean which indicates whether to only return the headers and status code in Cosmos DB response\n      * in case of Create, Update and Delete operations on CosmosItem.\n      *\n-     * If true, this removes the resource from response. It reduces networking\n+     * If set to false (which is by default), this removes the resource from response. It reduces networking\n      * and CPU load by not sending the resource back over the network and serializing it\n      * on the client.\n      *\n-     * By-default, this is true.\n+     * By-default, this is false.\n      *\n      * @return a boolean indicating whether resource will be included in the response or not\n      */\n-    boolean isNoContentResponseOnWrite() {\n-        return noContentResponseOnWrite;\n+    boolean isContentResponseOnWriteEnabled() {\n+        return contentResponseOnWriteEnabled;\n     }\n \n     /**\n      * Sets the boolean to only return the headers and status code in Cosmos DB response\n      * in case of Create, Update and Delete operations on CosmosItem.\n      *\n-     * If set to true, this removes the resource from response. It reduces networking\n+     * If set to false (which is by default), this removes the resource from response. It reduces networking\n      * and CPU load by not sending the resource back over the network and serializing it on the client.\n      *\n-     * By-default, this is true.\n+     * This feature does not impact RU usage for read or write operations.\n      *\n-     * @param noContentResponseOnWrite a boolean indicating whether resource will be included in the response or not\n+     * By-default, this is false.\n+     *\n+     * @param contentResponseOnWriteEnabled a boolean indicating whether resource will be included in the response or not\n      * @return current cosmosClientBuilder\n      */\n-    public CosmosClientBuilder noContentResponseOnWrite(boolean noContentResponseOnWrite) {\n-        this.noContentResponseOnWrite = noContentResponseOnWrite;\n+    public CosmosClientBuilder contentResponseOnWriteEnabled(boolean contentResponseOnWriteEnabled) {\n+        this.contentResponseOnWriteEnabled = contentResponseOnWriteEnabled;\n         return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1OTIwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420659204", "bodyText": "For other similar configs we are using the Enabled suffix\nisSessionCapturingOverrideEnabled\nisConnectionReuseAcrossClientsEnabled\nshould we change this to isNoContentResponseOnWriteEnabled to be consistent with the other APIs?", "author": "moderakh", "createdAt": "2020-05-06T09:30:38Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -291,6 +292,39 @@ public CosmosClientBuilder keyCredential(CosmosKeyCredential cosmosKeyCredential\n         return this;\n     }\n \n+    /**\n+     * Gets the boolean which indicates whether to only return the headers and status code in Cosmos DB response\n+     * in case of Create, Update and Delete operations on CosmosItem.\n+     *\n+     * If true, this removes the resource from response. It reduces networking\n+     * and CPU load by not sending the resource back over the network and serializing it\n+     * on the client.\n+     *\n+     * By-default, this is true.\n+     *\n+     * @return a boolean indicating whether resource will be included in the response or not\n+     */\n+    boolean isNoContentResponseOnWrite() {", "originalCommit": "85d8c46fd2ff71cfc6a149947731ea85a74ed261", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4OTM0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420889344", "bodyText": "Yes, makes sense to be consistent across these APIs, good catch @moderakh\nI will update this public surface API to reflect that.", "author": "kushagraThapar", "createdAt": "2020-05-06T15:36:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1OTIwNA=="}], "type": "inlineReview", "revised_code": {"commit": "c9d3377b980e4276a1ec58e8109262601a9c45ca", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java\nindex fcefacdf071..0435020dc3e 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java\n\n@@ -296,32 +296,34 @@ public class CosmosClientBuilder {\n      * Gets the boolean which indicates whether to only return the headers and status code in Cosmos DB response\n      * in case of Create, Update and Delete operations on CosmosItem.\n      *\n-     * If true, this removes the resource from response. It reduces networking\n+     * If set to false (which is by default), this removes the resource from response. It reduces networking\n      * and CPU load by not sending the resource back over the network and serializing it\n      * on the client.\n      *\n-     * By-default, this is true.\n+     * By-default, this is false.\n      *\n      * @return a boolean indicating whether resource will be included in the response or not\n      */\n-    boolean isNoContentResponseOnWrite() {\n-        return noContentResponseOnWrite;\n+    boolean isContentResponseOnWriteEnabled() {\n+        return contentResponseOnWriteEnabled;\n     }\n \n     /**\n      * Sets the boolean to only return the headers and status code in Cosmos DB response\n      * in case of Create, Update and Delete operations on CosmosItem.\n      *\n-     * If set to true, this removes the resource from response. It reduces networking\n+     * If set to false (which is by default), this removes the resource from response. It reduces networking\n      * and CPU load by not sending the resource back over the network and serializing it on the client.\n      *\n-     * By-default, this is true.\n+     * This feature does not impact RU usage for read or write operations.\n      *\n-     * @param noContentResponseOnWrite a boolean indicating whether resource will be included in the response or not\n+     * By-default, this is false.\n+     *\n+     * @param contentResponseOnWriteEnabled a boolean indicating whether resource will be included in the response or not\n      * @return current cosmosClientBuilder\n      */\n-    public CosmosClientBuilder noContentResponseOnWrite(boolean noContentResponseOnWrite) {\n-        this.noContentResponseOnWrite = noContentResponseOnWrite;\n+    public CosmosClientBuilder contentResponseOnWriteEnabled(boolean contentResponseOnWriteEnabled) {\n+        this.contentResponseOnWriteEnabled = contentResponseOnWriteEnabled;\n         return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1OTYyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420659627", "bodyText": "similarly\nFor other similar configs we are using the Enabled suffix\nsessionCapturingOverrideEnabled\nconnectionReuseAcrossClientsEnabled\nshould we change this to noContentResponseOnWriteEnabled to be consistent with the other APIs?", "author": "moderakh", "createdAt": "2020-05-06T09:31:25Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java", "diffHunk": "@@ -291,6 +292,39 @@ public CosmosClientBuilder keyCredential(CosmosKeyCredential cosmosKeyCredential\n         return this;\n     }\n \n+    /**\n+     * Gets the boolean which indicates whether to only return the headers and status code in Cosmos DB response\n+     * in case of Create, Update and Delete operations on CosmosItem.\n+     *\n+     * If true, this removes the resource from response. It reduces networking\n+     * and CPU load by not sending the resource back over the network and serializing it\n+     * on the client.\n+     *\n+     * By-default, this is true.\n+     *\n+     * @return a boolean indicating whether resource will be included in the response or not\n+     */\n+    boolean isNoContentResponseOnWrite() {\n+        return noContentResponseOnWrite;\n+    }\n+\n+    /**\n+     * Sets the boolean to only return the headers and status code in Cosmos DB response\n+     * in case of Create, Update and Delete operations on CosmosItem.\n+     *\n+     * If set to true, this removes the resource from response. It reduces networking\n+     * and CPU load by not sending the resource back over the network and serializing it on the client.\n+     *\n+     * By-default, this is true.\n+     *\n+     * @param noContentResponseOnWrite a boolean indicating whether resource will be included in the response or not\n+     * @return current cosmosClientBuilder\n+     */\n+    public CosmosClientBuilder noContentResponseOnWrite(boolean noContentResponseOnWrite) {", "originalCommit": "85d8c46fd2ff71cfc6a149947731ea85a74ed261", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5MDE1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420890158", "bodyText": "This will differ from what we have on .Net side.\n@kirankumarkolli  - what do you think ?", "author": "kushagraThapar", "createdAt": "2020-05-06T15:37:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1OTYyNw=="}], "type": "inlineReview", "revised_code": {"commit": "c9d3377b980e4276a1ec58e8109262601a9c45ca", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java\nindex fcefacdf071..0435020dc3e 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosClientBuilder.java\n\n@@ -296,32 +296,34 @@ public class CosmosClientBuilder {\n      * Gets the boolean which indicates whether to only return the headers and status code in Cosmos DB response\n      * in case of Create, Update and Delete operations on CosmosItem.\n      *\n-     * If true, this removes the resource from response. It reduces networking\n+     * If set to false (which is by default), this removes the resource from response. It reduces networking\n      * and CPU load by not sending the resource back over the network and serializing it\n      * on the client.\n      *\n-     * By-default, this is true.\n+     * By-default, this is false.\n      *\n      * @return a boolean indicating whether resource will be included in the response or not\n      */\n-    boolean isNoContentResponseOnWrite() {\n-        return noContentResponseOnWrite;\n+    boolean isContentResponseOnWriteEnabled() {\n+        return contentResponseOnWriteEnabled;\n     }\n \n     /**\n      * Sets the boolean to only return the headers and status code in Cosmos DB response\n      * in case of Create, Update and Delete operations on CosmosItem.\n      *\n-     * If set to true, this removes the resource from response. It reduces networking\n+     * If set to false (which is by default), this removes the resource from response. It reduces networking\n      * and CPU load by not sending the resource back over the network and serializing it on the client.\n      *\n-     * By-default, this is true.\n+     * This feature does not impact RU usage for read or write operations.\n      *\n-     * @param noContentResponseOnWrite a boolean indicating whether resource will be included in the response or not\n+     * By-default, this is false.\n+     *\n+     * @param contentResponseOnWriteEnabled a boolean indicating whether resource will be included in the response or not\n      * @return current cosmosClientBuilder\n      */\n-    public CosmosClientBuilder noContentResponseOnWrite(boolean noContentResponseOnWrite) {\n-        this.noContentResponseOnWrite = noContentResponseOnWrite;\n+    public CosmosClientBuilder contentResponseOnWriteEnabled(boolean contentResponseOnWriteEnabled) {\n+        this.contentResponseOnWriteEnabled = contentResponseOnWriteEnabled;\n         return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNTU3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420505577", "bodyText": "LGTM", "author": "David-Noble-at-work", "createdAt": "2020-05-06T01:54:13Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdConstants.java", "diffHunk": "@@ -572,7 +572,8 @@ public byte id() {\n         ContentSerializationFormat((short) 0x0065, RntbdTokenType.Byte, false),\n         AllowTentativeWrites((short) 0x0066, RntbdTokenType.Byte, false),\n         IsUserRequest((short) 0x0067, RntbdTokenType.Byte, false),\n-        SharedOfferThroughput((short) 0x0068, RntbdTokenType.ULong, false);\n+        SharedOfferThroughput((short) 0x0068, RntbdTokenType.ULong, false),", "originalCommit": "4239e8ba9a3cbe48a3ba2d607ea226a71bab4b73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNTk3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420505976", "bodyText": "LGTM", "author": "David-Noble-at-work", "createdAt": "2020-05-06T01:55:41Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdRequestHeaders.java", "diffHunk": "@@ -29,6 +28,7 @@\n import java.util.function.Supplier;\n \n import static com.azure.cosmos.implementation.HttpConstants.HttpHeaders;\n+import static com.azure.cosmos.implementation.HttpConstants.HeaderValues;", "originalCommit": "4239e8ba9a3cbe48a3ba2d607ea226a71bab4b73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwODA5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420508099", "bodyText": "Thanks for removing this. I was showing some code to a customer and noticed these very old comments were still present.", "author": "David-Noble-at-work", "createdAt": "2020-05-06T02:05:13Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/VeryLargeDocumentQueryTest.java", "diffHunk": "@@ -39,9 +39,6 @@ public VeryLargeDocumentQueryTest(CosmosClientBuilder clientBuilder) {\n         super(clientBuilder);\n     }\n \n-    // TODO (DANOBLE) VeryLargeDocumentQueryTest::queryLargeDocuments intermittently times out", "originalCommit": "4239e8ba9a3cbe48a3ba2d607ea226a71bab4b73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwODE0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420508146", "bodyText": "Thanks for removing this too", "author": "David-Noble-at-work", "createdAt": "2020-05-06T02:05:33Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/VeryLargeDocumentQueryTest.java", "diffHunk": "@@ -83,8 +80,6 @@ private void createLargeDocument() {\n                     .verify(Duration.ofMillis(subscriberValidationTimeout));\n     }\n ", "originalCommit": "4239e8ba9a3cbe48a3ba2d607ea226a71bab4b73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwODI3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420508273", "bodyText": "Thanks.", "author": "David-Noble-at-work", "createdAt": "2020-05-06T02:06:11Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/UserDefinedFunctionUpsertReplaceTest.java", "diffHunk": "@@ -65,8 +65,6 @@ public void replaceUserDefinedFunction() throws Exception {\n         validateSuccess(replaceObservable, validatorForReplace);\n     }\n \n-    // TODO (DANOBLE) UserDefinedFunctionUpsertReplaceTest initialization consistently times out in CI environments.", "originalCommit": "4239e8ba9a3cbe48a3ba2d607ea226a71bab4b73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwODUzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10741#discussion_r420508535", "bodyText": "thanks.", "author": "David-Noble-at-work", "createdAt": "2020-05-06T02:07:22Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/rx/ParallelDocumentQueryTest.java", "diffHunk": "@@ -373,8 +373,6 @@ public void queryDocumentsPojo(){\n \n     }\n \n-    // TODO (DANOBLE) ParallelDocumentQueryTest initialization intermittently fails in CI environments", "originalCommit": "4239e8ba9a3cbe48a3ba2d607ea226a71bab4b73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "c9d3377b980e4276a1ec58e8109262601a9c45ca", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c9d3377b980e4276a1ec58e8109262601a9c45ca", "message": "Finalized name and updated documentation regarding RU usage", "committedDate": "2020-05-06T16:22:32Z", "type": "commit"}, {"oid": "86b4710f522eea7c5104a9374ba50e782b623ac2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/86b4710f522eea7c5104a9374ba50e782b623ac2", "message": "Fixed benchmark configurations, internal TestSuiteBase async document clients with content response on write flag", "committedDate": "2020-05-06T18:43:13Z", "type": "commit"}, {"oid": "228f38b7b260561118589515764462cf3c0a3eac", "url": "https://github.com/Azure/azure-sdk-for-java/commit/228f38b7b260561118589515764462cf3c0a3eac", "message": "Fixed more tests by enabling content on response. Updated names of tests to reflect correct value", "committedDate": "2020-05-06T20:37:33Z", "type": "commit"}, {"oid": "f03e4a8b364c6a3f6e1ec0f73af55d00a1a18755", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f03e4a8b364c6a3f6e1ec0f73af55d00a1a18755", "message": "Fixed negation check of content response flag on write throughput and write latency", "committedDate": "2020-05-06T22:10:46Z", "type": "commit"}, {"oid": "4a75226e630892b76edbde0d7486f3cd81afdd6e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4a75226e630892b76edbde0d7486f3cd81afdd6e", "message": "Fixed more tests client builders with content response on write disabled", "committedDate": "2020-05-07T00:28:31Z", "type": "commit"}]}