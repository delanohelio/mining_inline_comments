{"pr_number": 7835, "pr_title": "[API change] Added convenient upload method to BlobClient", "pr_createdAt": "2020-01-29T23:16:33Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/7835", "timeline": [{"oid": "110b063c947659e6f7b66ad830abea857aae21f1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/110b063c947659e6f7b66ad830abea857aae21f1", "message": "Added convenient upload method to BlobClient", "committedDate": "2020-01-29T23:15:50Z", "type": "commit"}, {"oid": "0bd132678076a42724a0f41b19f088884a94423f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0bd132678076a42724a0f41b19f088884a94423f", "message": "removed unused import", "committedDate": "2020-01-29T23:17:03Z", "type": "commit"}, {"oid": "b61665336f217d120cd3d6748013909b59275c2d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b61665336f217d120cd3d6748013909b59275c2d", "message": "Added an extra test", "committedDate": "2020-01-30T00:09:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExODgxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7835#discussion_r373118816", "bodyText": "I thought this method was only java 9?", "author": "rickle-msft", "createdAt": "2020-01-30T18:30:46Z", "path": "sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java", "diffHunk": "@@ -115,6 +120,70 @@ public PageBlobClient getPageBlobClient() {\n             .buildPageBlobClient();\n     }\n \n+    /**\n+     * Creates a new blob. By default this method will not overwrite an existing blob.\n+     *\n+     * @param data The data to write to the blob.\n+     * @param length The exact length of the data. It is important that this value match precisely the length of the\n+     * data provided in the {@link InputStream}.\n+     */\n+    public void upload(InputStream data, long length) {\n+        upload(data, length, false);\n+    }\n+\n+    /**\n+     * Creates a new blob, or updates the content of an existing blob.\n+     *\n+     * @param data The data to write to the blob.\n+     * @param length The exact length of the data. It is important that this value match precisely the length of the\n+     * data provided in the {@link InputStream}.\n+     * @param overwrite Whether or not to overwrite, should data exist on the blob.\n+     */\n+    public void upload(InputStream data, long length, boolean overwrite) {\n+        BlobRequestConditions blobRequestConditions = new BlobRequestConditions();\n+        if (!overwrite) {\n+            blobRequestConditions.setIfNoneMatch(Constants.HeaderConstants.ETAG_WILDCARD);\n+        }\n+        uploadWithResponse(data, length, null, null, null, null, blobRequestConditions, null, Context.NONE);\n+    }\n+\n+    /**\n+     * Creates a new blob, or updates the content of an existing blob.\n+     * <p>\n+     * To avoid overwriting, pass \"*\" to {@link BlobRequestConditions#setIfNoneMatch(String)}.\n+     *\n+     * @param data The data to write to the blob.\n+     * @param length The exact length of the data. It is important that this value match precisely the length of the\n+     * data provided in the {@link InputStream}.\n+     * @param parallelTransferOptions {@link ParallelTransferOptions} used to configure buffered uploading.\n+     * @param headers {@link BlobHttpHeaders}\n+     * @param metadata Metadata to associate with the blob.\n+     * @param tier {@link AccessTier} for the destination blob.\n+     * @param requestConditions {@link BlobRequestConditions}\n+     * @param timeout An optional timeout value beyond which a {@link RuntimeException} will be raised.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     */\n+    public void uploadWithResponse(InputStream data, long length, ParallelTransferOptions parallelTransferOptions,\n+        BlobHttpHeaders headers, Map<String, String> metadata, AccessTier tier, BlobRequestConditions requestConditions,\n+        Duration timeout, Context context) {\n+        BlockBlobClient blockBlobClient = this.getBlockBlobClient();\n+        final ParallelTransferOptions validatedParallelTransferOptions =\n+            ModelHelper.populateAndApplyDefaults(parallelTransferOptions);\n+        if (length < validatedParallelTransferOptions.getMaxSingleUploadSize()) {\n+            blockBlobClient.uploadWithResponse(data, length, headers, metadata, tier, null, requestConditions,\n+                timeout, context);\n+        } else {\n+            BlobOutputStream blobOutputStream = BlobOutputStream.blockBlobOutputStream(client,\n+                validatedParallelTransferOptions, headers, metadata, tier, requestConditions);\n+            try {\n+                data.transferTo(blobOutputStream);", "originalCommit": "b61665336f217d120cd3d6748013909b59275c2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEyMzY4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7835#discussion_r373123686", "bodyText": "yep, I need to change it", "author": "gapra-msft", "createdAt": "2020-01-30T18:40:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExODgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEyMzgzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7835#discussion_r373123838", "bodyText": "I made the PR before I realized", "author": "gapra-msft", "createdAt": "2020-01-30T18:40:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExODgxNg=="}], "type": "inlineReview", "revised_code": {"commit": "5125490c2fa9890c16edde8aa0d9755f452f0ee8", "chunk": "diff --git a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java\nindex 78500d87547..c6a46142aa5 100644\n--- a/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java\n+++ b/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/BlobClient.java\n\n@@ -176,7 +177,7 @@ public class BlobClient extends BlobClientBase {\n             BlobOutputStream blobOutputStream = BlobOutputStream.blockBlobOutputStream(client,\n                 validatedParallelTransferOptions, headers, metadata, tier, requestConditions);\n             try {\n-                data.transferTo(blobOutputStream);\n+                Utility.copyToOutputStream(data, length, blobOutputStream);\n                 blobOutputStream.close();\n             } catch (IOException e) {\n                 e.printStackTrace();\n"}}, {"oid": "5125490c2fa9890c16edde8aa0d9755f452f0ee8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5125490c2fa9890c16edde8aa0d9755f452f0ee8", "message": "Wrote copy method", "committedDate": "2020-01-30T20:56:25Z", "type": "commit"}, {"oid": "083af3f1e39421e69740a79c5deb49da12172fc2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/083af3f1e39421e69740a79c5deb49da12172fc2", "message": "removed unused imports", "committedDate": "2020-01-30T21:05:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwMjMxMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7835#discussion_r373202312", "bodyText": "Could this go into StorageImplUtils for the time being? Do we expected or would want a customer to use this API in the near-term?", "author": "alzimmermsft", "createdAt": "2020-01-30T21:27:00Z", "path": "sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/Utility.java", "diffHunk": "@@ -241,4 +244,27 @@ public static OffsetDateTime parseDate(String dateString) {\n                 }\n             });\n     }\n+\n+    /**\n+     * Reads data from an input stream and writes it to an output stream.\n+     * @param source {@link InputStream source}\n+     * @param writeLength The length of data to write.\n+     * @param destination {@link OutputStream destination}\n+     * @throws IOException If an I/O error occurs.\n+     */\n+    public static void copyToOutputStream(InputStream source, long writeLength, OutputStream destination)", "originalCommit": "083af3f1e39421e69740a79c5deb49da12172fc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwNDU3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7835#discussion_r373204570", "bodyText": "I have nothing against doing that", "author": "gapra-msft", "createdAt": "2020-01-30T21:32:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwMjMxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzMDcwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7835#discussion_r373230708", "bodyText": "done", "author": "gapra-msft", "createdAt": "2020-01-30T22:34:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwMjMxMg=="}], "type": "inlineReview", "revised_code": {"commit": "bde7ada95add74199556c0d5ad6439665b26b106", "chunk": "diff --git a/sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/Utility.java b/sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/Utility.java\nindex 98295362c71..88311983cbe 100644\n--- a/sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/Utility.java\n+++ b/sdk/storage/azure-storage-common/src/main/java/com/azure/storage/common/Utility.java\n\n@@ -244,27 +241,4 @@ public final class Utility {\n                 }\n             });\n     }\n-\n-    /**\n-     * Reads data from an input stream and writes it to an output stream.\n-     * @param source {@link InputStream source}\n-     * @param writeLength The length of data to write.\n-     * @param destination {@link OutputStream destination}\n-     * @throws IOException If an I/O error occurs.\n-     */\n-    public static void copyToOutputStream(InputStream source, long writeLength, OutputStream destination)\n-        throws IOException {\n-        StorageImplUtils.assertNotNull(\"source\", source);\n-        StorageImplUtils.assertNotNull(\"destination\", destination);\n-\n-        final byte[] retrievedBuff = new byte[Constants.BUFFER_COPY_LENGTH];\n-        int nextCopy = (int) Math.min(retrievedBuff.length, writeLength);\n-        int count = source.read(retrievedBuff, 0, nextCopy);\n-\n-        while (nextCopy > 0 && count != -1) {\n-            destination.write(retrievedBuff, 0, count);\n-            nextCopy = (int) Math.min(retrievedBuff.length, writeLength);\n-            count = source.read(retrievedBuff, 0, nextCopy);\n-        }\n-    }\n }\n"}}, {"oid": "bde7ada95add74199556c0d5ad6439665b26b106", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bde7ada95add74199556c0d5ad6439665b26b106", "message": "Moved to ImplUtils", "committedDate": "2020-01-30T22:26:30Z", "type": "commit"}]}