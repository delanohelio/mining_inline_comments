{"pr_number": 8632, "pr_title": "HttpClient module for azure-core-http based on the JDK 11+ HttpClient", "pr_createdAt": "2020-03-02T08:07:53Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/8632", "timeline": [{"oid": "b3ed4abc08a22e8f8a2f3e77d8c1c7c81085a791", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b3ed4abc08a22e8f8a2f3e77d8c1c7c81085a791", "message": "Extremely early proof of concept JDK 11 HttpClient module for azure-core-http", "committedDate": "2020-03-02T08:07:11Z", "type": "commit"}, {"oid": "8d2c4ef7b1bc8134a8360621e2d3ec64d783df88", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8d2c4ef7b1bc8134a8360621e2d3ec64d783df88", "message": "Switching to response body publisher from inputstream, cleanup.", "committedDate": "2020-03-07T04:44:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyOTgyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r389229829", "bodyText": "@JonathanGiles I think this bug in JDK11 HttpClient may be a blocker for this HttpClient adoption. \"Date\" is a necessary header for many of the track2 libs, something we need to look into.", "author": "anuchandy", "createdAt": "2020-03-07T05:25:35Z", "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk11/httpclient/Jdk11AsyncHttpClient.java", "diffHunk": "@@ -6,57 +6,59 @@\n import com.azure.core.http.HttpClient;\n import com.azure.core.http.HttpHeader;\n import com.azure.core.http.HttpHeaders;\n-import com.azure.core.http.HttpMethod;\n import com.azure.core.http.HttpRequest;\n import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.FluxUtil;\n import reactor.adapter.JdkFlowAdapter;\n import reactor.core.Exceptions;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n import java.net.URISyntaxException;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n-import java.util.concurrent.CompletableFuture;\n+import java.util.Collections;\n+import java.util.List;\n \n import java.net.http.HttpRequest.BodyPublisher;\n+import java.util.Set;\n+import java.util.TreeSet;\n import java.util.concurrent.Flow;\n \n import static java.net.http.HttpResponse.BodyHandlers.*;\n import static java.net.http.HttpRequest.BodyPublishers.*;\n-import static java.net.http.HttpResponse.BodyHandlers.ofInputStream;\n \n /**\n  * HttpClient implementation for the JDK 11 HttpClient.\n  */\n class Jdk11AsyncHttpClient implements HttpClient {\n     private final java.net.http.HttpClient jdk11HttpClient;\n \n-    private static final Mono<BodyPublisher> EMPTY_BODY_PUBLISHER_MONO = Mono.just(noBody());\n+    private static final Set<String> JDK11_RESTRICTED_HEADERS;\n+    static {\n+        TreeSet<String> treeSet = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n+        treeSet.addAll(Set.of(\"connection\",\n+            \"content-length\",\n+            \"date\", // BUG: Java11: https://bugs.openjdk.java.net/browse/JDK-8213189 (Fixed in JDK12)", "originalCommit": "8d2c4ef7b1bc8134a8360621e2d3ec64d783df88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMDE4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r389230189", "bodyText": "In that case we would only support this on JDK 12 and later, which is unfortunate.", "author": "JonathanGiles", "createdAt": "2020-03-07T05:32:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyOTgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1ODI1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r402158257", "bodyText": "added necessary validation to log error in case this client is ever used with java_version <= 11.", "author": "anuchandy", "createdAt": "2020-04-02T09:00:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIyOTgyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "32d147918ced47f684fc645ab0914bfe2277c988", "chunk": "diff --git a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk11/httpclient/Jdk11AsyncHttpClient.java b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\nsimilarity index 97%\nrename from sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk11/httpclient/Jdk11AsyncHttpClient.java\nrename to sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\nindex 44937de7747..794ebe072aa 100644\n--- a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk11/httpclient/Jdk11AsyncHttpClient.java\n+++ b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\n\n@@ -1,7 +1,7 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-package com.azure.core.http.jdk11.httpclient;\n+package com.azure.core.http.jdk.httpclient;\n \n import com.azure.core.http.HttpClient;\n import com.azure.core.http.HttpHeader;\n"}}, {"oid": "3a83572a308ce0261df8dc22dc1ca87e62003747", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3a83572a308ce0261df8dc22dc1ca87e62003747", "message": "Minor improvements", "committedDate": "2020-03-08T22:56:10Z", "type": "commit"}, {"oid": "32d147918ced47f684fc645ab0914bfe2277c988", "url": "https://github.com/Azure/azure-sdk-for-java/commit/32d147918ced47f684fc645ab0914bfe2277c988", "message": "Further work", "committedDate": "2020-03-24T05:26:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg2MDEwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r399860102", "bodyText": "Set this.disposed = true after diposing.", "author": "srnagar", "createdAt": "2020-03-29T22:02:07Z", "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java", "diffHunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.FluxUtil;\n+import reactor.adapter.JdkFlowAdapter;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URISyntaxException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import java.net.http.HttpRequest.BodyPublisher;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.concurrent.Flow;\n+\n+import static java.net.http.HttpResponse.BodyHandlers.*;\n+import static java.net.http.HttpRequest.BodyPublishers.*;\n+\n+/**\n+ * HttpClient implementation for the JDK 11 HttpClient.\n+ */\n+class JdkAsyncHttpClient implements HttpClient {\n+    private final java.net.http.HttpClient jdk11HttpClient;\n+\n+    private static final Set<String> JDK11_RESTRICTED_HEADERS;\n+    static {\n+        TreeSet<String> treeSet = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n+        treeSet.addAll(Set.of(\"connection\",\n+            \"content-length\",\n+            \"date\", // BUG: Java11: https://bugs.openjdk.java.net/browse/JDK-8213189 (Fixed in JDK12)\n+            \"expect\",\n+            \"from\",\n+            \"host\",\n+            \"upgrade\",\n+            \"via\",\n+            \"warning\"));\n+        JDK11_RESTRICTED_HEADERS = Collections.unmodifiableSet(treeSet);\n+    }\n+\n+    JdkAsyncHttpClient(java.net.http.HttpClient httpClient) {\n+        this.jdk11HttpClient = httpClient;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> send(HttpRequest request) {\n+        return toJdk11HttpRequest(request)\n+            .flatMap(jdk11Request -> Mono.fromCompletionStage(jdk11HttpClient.sendAsync(jdk11Request, ofPublisher()))\n+                .map(innerResponse -> new Jdk11HttpResponse(request, innerResponse)));\n+    }\n+\n+    /**\n+     * Converts the given azure-core request to the JDK 11 HttpRequest type.\n+     *\n+     * @param request the azure-core request\n+     * @return the Mono emitting HttpRequest\n+     */\n+    private static Mono<java.net.http.HttpRequest> toJdk11HttpRequest(HttpRequest request) {\n+        return Mono.fromCallable(() -> {\n+            final java.net.http.HttpRequest.Builder builder = java.net.http.HttpRequest.newBuilder();\n+            try {\n+                builder.uri(request.getUrl().toURI());\n+            } catch (URISyntaxException e) {\n+                throw Exceptions.propagate(e);\n+            }\n+            final HttpHeaders headers = request.getHeaders();\n+            if (headers != null) {\n+                for (HttpHeader header : headers) {\n+                    final String headerName = header.getName();\n+                    if (!JDK11_RESTRICTED_HEADERS.contains(headerName)) {\n+                        final String headerValue = header.getValue();\n+                        builder.setHeader(headerName, headerValue);\n+                    }\n+                }\n+            }\n+            switch (request.getHttpMethod()) {\n+                case GET:\n+                    return builder.GET().build();\n+                case HEAD:\n+                    return builder.method(\"HEAD\", noBody()).build();\n+                default:\n+                    final String contentLength = request.getHeaders().getValue(\"content-length\");\n+                    final BodyPublisher bodyPublisher = toBodyPublisher(request.getBody(), contentLength);\n+                    return builder.method(request.getHttpMethod().toString(), bodyPublisher).build();\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Create BodyPublisher from the given java.nio.ByteBuffer publisher.\n+     *\n+     * @param bbPublisher stream of java.nio.ByteBuffer representing request content\n+     * @return the BodyPublisher\n+     */\n+    private static BodyPublisher toBodyPublisher(Flux<ByteBuffer> bbPublisher, String contentLength) {\n+        if (bbPublisher == null) {\n+            return noBody();\n+        }\n+        final Flow.Publisher<ByteBuffer> bbFlowPublisher = JdkFlowAdapter.publisherToFlowPublisher(bbPublisher);\n+        if (CoreUtils.isNullOrEmpty(contentLength)) {\n+            return fromPublisher(bbFlowPublisher);\n+        } else {\n+            long contentLengthLong = Long.parseLong(contentLength);\n+            if (contentLengthLong < 1) {\n+                return fromPublisher(bbFlowPublisher);\n+            } else {\n+                return fromPublisher(bbFlowPublisher, contentLengthLong);\n+            }\n+        }\n+    }\n+\n+    private static class Jdk11HttpResponse extends HttpResponse {\n+        private final int statusCode;\n+        private final HttpHeaders headers;\n+        private final Flux<ByteBuffer> contentFlux;\n+        private volatile boolean disposed = false;\n+\n+        protected Jdk11HttpResponse(final HttpRequest request,\n+                                    java.net.http.HttpResponse<Flow.Publisher<List<ByteBuffer>>> innerResponse) {\n+            super(request);\n+            this.statusCode = innerResponse.statusCode();\n+            this.headers = fromJdk11HttpHeaders(innerResponse.headers());\n+            this.contentFlux = JdkFlowAdapter.flowPublisherToFlux(innerResponse.body())\n+                .flatMapSequential(Flux::fromIterable);\n+        }\n+\n+        @Override\n+        public int getStatusCode() {\n+            return this.statusCode;\n+        }\n+\n+        @Override\n+        public String getHeaderValue(String name) {\n+            return this.headers.getValue(name);\n+        }\n+\n+        @Override\n+        public HttpHeaders getHeaders() {\n+            return this.headers;\n+        }\n+\n+        @Override\n+        public Flux<ByteBuffer> getBody() {\n+            return this.contentFlux\n+                .doFinally(signalType -> disposed = true);\n+        }\n+\n+        @Override\n+        public Mono<byte[]> getBodyAsByteArray() {\n+            return FluxUtil.collectBytesInByteBufferStream(getBody())\n+                .flatMap(bytes -> bytes.length == 0 ? Mono.empty() : Mono.just(bytes));\n+        }\n+\n+        @Override\n+        public Mono<String> getBodyAsString() {\n+            return getBodyAsByteArray()\n+                .map(bytes -> new String(bytes));\n+        }\n+\n+        @Override\n+        public Mono<String> getBodyAsString(Charset charset) {\n+            return getBodyAsByteArray()\n+                .map(bytes -> new String(bytes, charset));\n+        }\n+\n+        @Override\n+        public void close() {\n+            if (!this.disposed) {\n+                this.contentFlux\n+                    .subscribe()\n+                    .dispose();", "originalCommit": "32d147918ced47f684fc645ab0914bfe2277c988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1NjAyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r402156021", "bodyText": "fixed.", "author": "anuchandy", "createdAt": "2020-04-02T08:56:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg2MDEwMg=="}], "type": "inlineReview", "revised_code": {"commit": "a1b2d637014efd06f0c078a0ab03f18827c5bb86", "chunk": "diff --git a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\nindex 794ebe072aa..f3610924296 100644\n--- a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\n+++ b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\n\n@@ -10,6 +10,7 @@ import com.azure.core.http.HttpRequest;\n import com.azure.core.http.HttpResponse;\n import com.azure.core.util.CoreUtils;\n import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n import reactor.adapter.JdkFlowAdapter;\n import reactor.core.Exceptions;\n import reactor.core.publisher.Flux;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg2MTE0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r399861143", "bodyText": "If there are multiple values in java.net.http.HttpHeaders, instead of overwriting the value field here, we should have comma-separated values as recommended in the RFC", "author": "srnagar", "createdAt": "2020-03-29T22:10:52Z", "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java", "diffHunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.FluxUtil;\n+import reactor.adapter.JdkFlowAdapter;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URISyntaxException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import java.net.http.HttpRequest.BodyPublisher;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.concurrent.Flow;\n+\n+import static java.net.http.HttpResponse.BodyHandlers.*;\n+import static java.net.http.HttpRequest.BodyPublishers.*;\n+\n+/**\n+ * HttpClient implementation for the JDK 11 HttpClient.\n+ */\n+class JdkAsyncHttpClient implements HttpClient {\n+    private final java.net.http.HttpClient jdk11HttpClient;\n+\n+    private static final Set<String> JDK11_RESTRICTED_HEADERS;\n+    static {\n+        TreeSet<String> treeSet = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n+        treeSet.addAll(Set.of(\"connection\",\n+            \"content-length\",\n+            \"date\", // BUG: Java11: https://bugs.openjdk.java.net/browse/JDK-8213189 (Fixed in JDK12)\n+            \"expect\",\n+            \"from\",\n+            \"host\",\n+            \"upgrade\",\n+            \"via\",\n+            \"warning\"));\n+        JDK11_RESTRICTED_HEADERS = Collections.unmodifiableSet(treeSet);\n+    }\n+\n+    JdkAsyncHttpClient(java.net.http.HttpClient httpClient) {\n+        this.jdk11HttpClient = httpClient;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> send(HttpRequest request) {\n+        return toJdk11HttpRequest(request)\n+            .flatMap(jdk11Request -> Mono.fromCompletionStage(jdk11HttpClient.sendAsync(jdk11Request, ofPublisher()))\n+                .map(innerResponse -> new Jdk11HttpResponse(request, innerResponse)));\n+    }\n+\n+    /**\n+     * Converts the given azure-core request to the JDK 11 HttpRequest type.\n+     *\n+     * @param request the azure-core request\n+     * @return the Mono emitting HttpRequest\n+     */\n+    private static Mono<java.net.http.HttpRequest> toJdk11HttpRequest(HttpRequest request) {\n+        return Mono.fromCallable(() -> {\n+            final java.net.http.HttpRequest.Builder builder = java.net.http.HttpRequest.newBuilder();\n+            try {\n+                builder.uri(request.getUrl().toURI());\n+            } catch (URISyntaxException e) {\n+                throw Exceptions.propagate(e);\n+            }\n+            final HttpHeaders headers = request.getHeaders();\n+            if (headers != null) {\n+                for (HttpHeader header : headers) {\n+                    final String headerName = header.getName();\n+                    if (!JDK11_RESTRICTED_HEADERS.contains(headerName)) {\n+                        final String headerValue = header.getValue();\n+                        builder.setHeader(headerName, headerValue);\n+                    }\n+                }\n+            }\n+            switch (request.getHttpMethod()) {\n+                case GET:\n+                    return builder.GET().build();\n+                case HEAD:\n+                    return builder.method(\"HEAD\", noBody()).build();\n+                default:\n+                    final String contentLength = request.getHeaders().getValue(\"content-length\");\n+                    final BodyPublisher bodyPublisher = toBodyPublisher(request.getBody(), contentLength);\n+                    return builder.method(request.getHttpMethod().toString(), bodyPublisher).build();\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Create BodyPublisher from the given java.nio.ByteBuffer publisher.\n+     *\n+     * @param bbPublisher stream of java.nio.ByteBuffer representing request content\n+     * @return the BodyPublisher\n+     */\n+    private static BodyPublisher toBodyPublisher(Flux<ByteBuffer> bbPublisher, String contentLength) {\n+        if (bbPublisher == null) {\n+            return noBody();\n+        }\n+        final Flow.Publisher<ByteBuffer> bbFlowPublisher = JdkFlowAdapter.publisherToFlowPublisher(bbPublisher);\n+        if (CoreUtils.isNullOrEmpty(contentLength)) {\n+            return fromPublisher(bbFlowPublisher);\n+        } else {\n+            long contentLengthLong = Long.parseLong(contentLength);\n+            if (contentLengthLong < 1) {\n+                return fromPublisher(bbFlowPublisher);\n+            } else {\n+                return fromPublisher(bbFlowPublisher, contentLengthLong);\n+            }\n+        }\n+    }\n+\n+    private static class Jdk11HttpResponse extends HttpResponse {\n+        private final int statusCode;\n+        private final HttpHeaders headers;\n+        private final Flux<ByteBuffer> contentFlux;\n+        private volatile boolean disposed = false;\n+\n+        protected Jdk11HttpResponse(final HttpRequest request,\n+                                    java.net.http.HttpResponse<Flow.Publisher<List<ByteBuffer>>> innerResponse) {\n+            super(request);\n+            this.statusCode = innerResponse.statusCode();\n+            this.headers = fromJdk11HttpHeaders(innerResponse.headers());\n+            this.contentFlux = JdkFlowAdapter.flowPublisherToFlux(innerResponse.body())\n+                .flatMapSequential(Flux::fromIterable);\n+        }\n+\n+        @Override\n+        public int getStatusCode() {\n+            return this.statusCode;\n+        }\n+\n+        @Override\n+        public String getHeaderValue(String name) {\n+            return this.headers.getValue(name);\n+        }\n+\n+        @Override\n+        public HttpHeaders getHeaders() {\n+            return this.headers;\n+        }\n+\n+        @Override\n+        public Flux<ByteBuffer> getBody() {\n+            return this.contentFlux\n+                .doFinally(signalType -> disposed = true);\n+        }\n+\n+        @Override\n+        public Mono<byte[]> getBodyAsByteArray() {\n+            return FluxUtil.collectBytesInByteBufferStream(getBody())\n+                .flatMap(bytes -> bytes.length == 0 ? Mono.empty() : Mono.just(bytes));\n+        }\n+\n+        @Override\n+        public Mono<String> getBodyAsString() {\n+            return getBodyAsByteArray()\n+                .map(bytes -> new String(bytes));\n+        }\n+\n+        @Override\n+        public Mono<String> getBodyAsString(Charset charset) {\n+            return getBodyAsByteArray()\n+                .map(bytes -> new String(bytes, charset));\n+        }\n+\n+        @Override\n+        public void close() {\n+            if (!this.disposed) {\n+                this.contentFlux\n+                    .subscribe()\n+                    .dispose();\n+            }\n+        }\n+\n+        private static HttpHeaders fromJdk11HttpHeaders(java.net.http.HttpHeaders headers) {\n+            final HttpHeaders httpHeaders = new HttpHeaders();\n+            for (final String key : headers.map().keySet()) {\n+                for (final String value : headers.allValues(key)) {\n+                    httpHeaders.put(key, value);", "originalCommit": "32d147918ced47f684fc645ab0914bfe2277c988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1NjA3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r402556074", "bodyText": "cool, updated to join multi-values using comma separator.", "author": "anuchandy", "createdAt": "2020-04-02T19:22:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg2MTE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a1b2d637014efd06f0c078a0ab03f18827c5bb86", "chunk": "diff --git a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\nindex 794ebe072aa..f3610924296 100644\n--- a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\n+++ b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\n\n@@ -10,6 +10,7 @@ import com.azure.core.http.HttpRequest;\n import com.azure.core.http.HttpResponse;\n import com.azure.core.util.CoreUtils;\n import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n import reactor.adapter.JdkFlowAdapter;\n import reactor.core.Exceptions;\n import reactor.core.publisher.Flux;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg2MzgwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r399863808", "bodyText": "May want to log a warning here when we find a restricted header to let the user know that we skipped over some headers.", "author": "srnagar", "createdAt": "2020-03-29T22:33:52Z", "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java", "diffHunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.FluxUtil;\n+import reactor.adapter.JdkFlowAdapter;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URISyntaxException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import java.net.http.HttpRequest.BodyPublisher;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.concurrent.Flow;\n+\n+import static java.net.http.HttpResponse.BodyHandlers.*;\n+import static java.net.http.HttpRequest.BodyPublishers.*;\n+\n+/**\n+ * HttpClient implementation for the JDK 11 HttpClient.\n+ */\n+class JdkAsyncHttpClient implements HttpClient {\n+    private final java.net.http.HttpClient jdk11HttpClient;\n+\n+    private static final Set<String> JDK11_RESTRICTED_HEADERS;\n+    static {\n+        TreeSet<String> treeSet = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n+        treeSet.addAll(Set.of(\"connection\",\n+            \"content-length\",\n+            \"date\", // BUG: Java11: https://bugs.openjdk.java.net/browse/JDK-8213189 (Fixed in JDK12)\n+            \"expect\",\n+            \"from\",\n+            \"host\",\n+            \"upgrade\",\n+            \"via\",\n+            \"warning\"));\n+        JDK11_RESTRICTED_HEADERS = Collections.unmodifiableSet(treeSet);\n+    }\n+\n+    JdkAsyncHttpClient(java.net.http.HttpClient httpClient) {\n+        this.jdk11HttpClient = httpClient;\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> send(HttpRequest request) {\n+        return toJdk11HttpRequest(request)\n+            .flatMap(jdk11Request -> Mono.fromCompletionStage(jdk11HttpClient.sendAsync(jdk11Request, ofPublisher()))\n+                .map(innerResponse -> new Jdk11HttpResponse(request, innerResponse)));\n+    }\n+\n+    /**\n+     * Converts the given azure-core request to the JDK 11 HttpRequest type.\n+     *\n+     * @param request the azure-core request\n+     * @return the Mono emitting HttpRequest\n+     */\n+    private static Mono<java.net.http.HttpRequest> toJdk11HttpRequest(HttpRequest request) {\n+        return Mono.fromCallable(() -> {\n+            final java.net.http.HttpRequest.Builder builder = java.net.http.HttpRequest.newBuilder();\n+            try {\n+                builder.uri(request.getUrl().toURI());\n+            } catch (URISyntaxException e) {\n+                throw Exceptions.propagate(e);\n+            }\n+            final HttpHeaders headers = request.getHeaders();\n+            if (headers != null) {\n+                for (HttpHeader header : headers) {\n+                    final String headerName = header.getName();\n+                    if (!JDK11_RESTRICTED_HEADERS.contains(headerName)) {", "originalCommit": "32d147918ced47f684fc645ab0914bfe2277c988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1NTg5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r402155893", "bodyText": "yes, updated to log these as errors.", "author": "anuchandy", "createdAt": "2020-04-02T08:56:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg2MzgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "a1b2d637014efd06f0c078a0ab03f18827c5bb86", "chunk": "diff --git a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\nindex 794ebe072aa..f3610924296 100644\n--- a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\n+++ b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\n\n@@ -10,6 +10,7 @@ import com.azure.core.http.HttpRequest;\n import com.azure.core.http.HttpResponse;\n import com.azure.core.util.CoreUtils;\n import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n import reactor.adapter.JdkFlowAdapter;\n import reactor.core.Exceptions;\n import reactor.core.publisher.Flux;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMTk2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400321968", "bodyText": "* imports.", "author": "alzimmermsft", "createdAt": "2020-03-30T16:20:20Z", "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java", "diffHunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.FluxUtil;\n+import reactor.adapter.JdkFlowAdapter;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URISyntaxException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import java.net.http.HttpRequest.BodyPublisher;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.concurrent.Flow;\n+\n+import static java.net.http.HttpResponse.BodyHandlers.*;\n+import static java.net.http.HttpRequest.BodyPublishers.*;", "originalCommit": "32d147918ced47f684fc645ab0914bfe2277c988", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1b2d637014efd06f0c078a0ab03f18827c5bb86", "chunk": "diff --git a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\nindex 794ebe072aa..f3610924296 100644\n--- a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\n+++ b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\n\n@@ -10,6 +10,7 @@ import com.azure.core.http.HttpRequest;\n import com.azure.core.http.HttpResponse;\n import com.azure.core.util.CoreUtils;\n import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n import reactor.adapter.JdkFlowAdapter;\n import reactor.core.Exceptions;\n import reactor.core.publisher.Flux;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMzMzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400323338", "bodyText": "How will this work for libraries which require fine tuning for these headers? In the case of Storage the upload could fail on a mismatch Content-Length header and shared key credential authentication will fail if the Date header is mismatch compared to what was used to generate the key.", "author": "alzimmermsft", "createdAt": "2020-03-30T16:22:15Z", "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java", "diffHunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.FluxUtil;\n+import reactor.adapter.JdkFlowAdapter;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URISyntaxException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import java.net.http.HttpRequest.BodyPublisher;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.concurrent.Flow;\n+\n+import static java.net.http.HttpResponse.BodyHandlers.*;\n+import static java.net.http.HttpRequest.BodyPublishers.*;\n+\n+/**\n+ * HttpClient implementation for the JDK 11 HttpClient.\n+ */\n+class JdkAsyncHttpClient implements HttpClient {\n+    private final java.net.http.HttpClient jdk11HttpClient;\n+\n+    private static final Set<String> JDK11_RESTRICTED_HEADERS;\n+    static {\n+        TreeSet<String> treeSet = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n+        treeSet.addAll(Set.of(\"connection\",\n+            \"content-length\",\n+            \"date\", // BUG: Java11: https://bugs.openjdk.java.net/browse/JDK-8213189 (Fixed in JDK12)", "originalCommit": "32d147918ced47f684fc645ab0914bfe2277c988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYwMDY3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400600676", "bodyText": "If JDK httpClient supports completely disabling its header checks programmatically then that would be the easiest path. So far we didn't see that Netty/OkHttp blocking any headers.\nIf full disabling is not possible then we need to see if the native HTTP client has a programmatic way to white list subset of headers, if yes we can identify the headers that JDK blocks by default but required by our SDKs to function properly and white list them.\nYet to explore.", "author": "anuchandy", "createdAt": "2020-03-31T02:09:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMzMzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1NDc2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r402154766", "bodyText": "Relaxed validations and added necessary log messages as agreed offline.\nRegarding the headers we care about:\nDate header is allowed from JDK12+\nContent-Length header will be set by JDK native HttpClient before sending out the requests.", "author": "anuchandy", "createdAt": "2020-04-02T08:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMzMzOA=="}], "type": "inlineReview", "revised_code": {"commit": "a1b2d637014efd06f0c078a0ab03f18827c5bb86", "chunk": "diff --git a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\nindex 794ebe072aa..f3610924296 100644\n--- a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\n+++ b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\n\n@@ -10,6 +10,7 @@ import com.azure.core.http.HttpRequest;\n import com.azure.core.http.HttpResponse;\n import com.azure.core.util.CoreUtils;\n import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n import reactor.adapter.JdkFlowAdapter;\n import reactor.core.Exceptions;\n import reactor.core.publisher.Flux;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMDgzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400330832", "bodyText": "Would this handle digest authentication?", "author": "alzimmermsft", "createdAt": "2020-03-30T16:33:07Z", "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java", "diffHunk": "@@ -0,0 +1,150 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.ProxyOptions;\n+import com.azure.core.http.jdk.httpclient.implementation.JdkHttpClientProxySelector;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.Authenticator;\n+import java.net.PasswordAuthentication;\n+import java.net.Proxy;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * Builder to configure and build an instance of the azure-core {@link HttpClient} type using the JDK HttpClient APIs,\n+ * first introduced as preview in JDK 9, but made generally available from JDK 11 onwards.\n+ */\n+public class JdkAsyncHttpClientBuilder {\n+    private final ClientLogger logger = new ClientLogger(JdkAsyncHttpClientBuilder.class);\n+\n+    private static final Duration DEFAULT_CONNECT_TIMEOUT = Duration.ofSeconds(60);\n+\n+    private java.net.http.HttpClient.Builder httpClientBuilder;\n+    private Duration connectionTimeout;\n+    private ProxyOptions proxyOptions;\n+    private Configuration configuration;\n+    private Executor executor;\n+\n+    /**\n+     * Creates JdkAsyncHttpClientBuilder.\n+     */\n+    public JdkAsyncHttpClientBuilder() {\n+    }\n+\n+    /**\n+     * Creates JdkAsyncHttpClientBuilder from the builder of an existing {@link java.net.http.HttpClient.Builder}.\n+     *\n+     * @param httpClientBuilder the HttpClient builder to use\n+     */\n+    public JdkAsyncHttpClientBuilder(java.net.http.HttpClient.Builder httpClientBuilder) {\n+        this.httpClientBuilder = Objects.requireNonNull(httpClientBuilder, \"'httpClientBuilder' cannot be null.\");\n+    }\n+\n+    /**\n+     * Sets the executor to be used for asynchronous and dependent tasks. This cannot be null.\n+     *\n+     * <p> If this method is not invoked prior to {@linkplain #build() building}, a default executor is created for each\n+     * newly built {@code HttpClient}.\n+     *\n+     * @param executor the executor to be used for asynchronous and dependent tasks\n+     * @return the updated Jdk11AsyncHttpClientBuilder object\n+     */\n+    public JdkAsyncHttpClientBuilder executor(Executor executor) {\n+        this.executor = Objects.requireNonNull(executor, \"executor can not be null\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the connection timeout.\n+     *\n+     * The default connection timeout is 60 seconds.\n+     *\n+     * @param connectionTimeout the connection timeout\n+     * @return the updated JdkAsyncHttpClientBuilder object\n+     */\n+    public JdkAsyncHttpClientBuilder connectionTimeout(Duration connectionTimeout) {\n+        // setConnectionTimeout can be null\n+        this.connectionTimeout = connectionTimeout;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the proxy.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.core.http.jdk.httpclient.JdkAsyncHttpClientBuilder.proxy#ProxyOptions}\n+     *\n+     * @param proxyOptions The proxy configuration to use.\n+     * @return the updated {@link JdkAsyncHttpClientBuilder} object\n+     */\n+    public JdkAsyncHttpClientBuilder proxy(ProxyOptions proxyOptions) {\n+        // proxyOptions can be null\n+        this.proxyOptions = proxyOptions;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the configuration store that is used during construction of the HTTP client.\n+     * <p>\n+     * The default configuration store is a clone of the {@link Configuration#getGlobalConfiguration() global\n+     * configuration store}, use {@link Configuration#NONE} to bypass using configuration settings during construction.\n+     *\n+     * @param configuration The configuration store used to\n+     * @return The updated JdkAsyncHttpClientBuilder object.\n+     */\n+    public JdkAsyncHttpClientBuilder configuration(Configuration configuration) {\n+        this.configuration = configuration;\n+        return this;\n+    }\n+\n+    /**\n+     * Build a HttpClient with current configurations.\n+     *\n+     * @return a {@link HttpClient}.\n+     */\n+    public HttpClient build() {\n+        java.net.http.HttpClient.Builder httpClientBuilder = this.httpClientBuilder == null\n+                     ? java.net.http.HttpClient.newBuilder()\n+                     : this.httpClientBuilder;\n+\n+        httpClientBuilder = (this.connectionTimeout != null)\n+            ? httpClientBuilder.connectTimeout(this.connectionTimeout)\n+            : httpClientBuilder.connectTimeout(DEFAULT_CONNECT_TIMEOUT);\n+\n+        Configuration buildConfiguration = (configuration == null)\n+            ? Configuration.getGlobalConfiguration()\n+            : configuration;\n+\n+        ProxyOptions buildProxyOptions = (proxyOptions == null && buildConfiguration != Configuration.NONE)\n+            ? ProxyOptions.fromConfiguration(buildConfiguration)\n+            : proxyOptions;\n+\n+        if (executor != null) {\n+            httpClientBuilder.executor(executor);\n+        }\n+\n+        if (buildProxyOptions != null) {\n+            httpClientBuilder = httpClientBuilder.proxy(new JdkHttpClientProxySelector(\n+                buildProxyOptions.getType().toProxyType(),\n+                buildProxyOptions.getAddress(),\n+                buildProxyOptions.getNonProxyHosts()));\n+\n+            if (buildProxyOptions.getUsername() != null) {\n+                httpClientBuilder.authenticator(new Authenticator() {\n+                    @Override\n+                    protected PasswordAuthentication getPasswordAuthentication() {", "originalCommit": "32d147918ced47f684fc645ab0914bfe2277c988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5NTYyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400595625", "bodyText": "good question :) it won't. Is our current digest auth code just pluggable? or it's tailored per HTTP client? I haven't looked into that yet.", "author": "anuchandy", "createdAt": "2020-03-31T01:49:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMDgzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExMjAxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r402112014", "bodyText": "digest-auth is on hold for now, like we discussed this will be picked up once we hear from native HTTP client owner.", "author": "anuchandy", "createdAt": "2020-04-02T07:42:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMDgzMg=="}], "type": "inlineReview", "revised_code": {"commit": "a1b2d637014efd06f0c078a0ab03f18827c5bb86", "chunk": "diff --git a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java\nindex deb7d5be353..fe1f5a94c2e 100644\n--- a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java\n+++ b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java\n\n@@ -7,11 +7,9 @@ import com.azure.core.http.HttpClient;\n import com.azure.core.http.ProxyOptions;\n import com.azure.core.http.jdk.httpclient.implementation.JdkHttpClientProxySelector;\n import com.azure.core.util.Configuration;\n-import com.azure.core.util.logging.ClientLogger;\n \n import java.net.Authenticator;\n import java.net.PasswordAuthentication;\n-import java.net.Proxy;\n import java.time.Duration;\n import java.util.Objects;\n import java.util.concurrent.Executor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMjI2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400332266", "bodyText": "Add a @throws", "author": "alzimmermsft", "createdAt": "2020-03-30T16:35:14Z", "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java", "diffHunk": "@@ -0,0 +1,150 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.ProxyOptions;\n+import com.azure.core.http.jdk.httpclient.implementation.JdkHttpClientProxySelector;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.Authenticator;\n+import java.net.PasswordAuthentication;\n+import java.net.Proxy;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * Builder to configure and build an instance of the azure-core {@link HttpClient} type using the JDK HttpClient APIs,\n+ * first introduced as preview in JDK 9, but made generally available from JDK 11 onwards.\n+ */\n+public class JdkAsyncHttpClientBuilder {\n+    private final ClientLogger logger = new ClientLogger(JdkAsyncHttpClientBuilder.class);\n+\n+    private static final Duration DEFAULT_CONNECT_TIMEOUT = Duration.ofSeconds(60);\n+\n+    private java.net.http.HttpClient.Builder httpClientBuilder;\n+    private Duration connectionTimeout;\n+    private ProxyOptions proxyOptions;\n+    private Configuration configuration;\n+    private Executor executor;\n+\n+    /**\n+     * Creates JdkAsyncHttpClientBuilder.\n+     */\n+    public JdkAsyncHttpClientBuilder() {\n+    }\n+\n+    /**\n+     * Creates JdkAsyncHttpClientBuilder from the builder of an existing {@link java.net.http.HttpClient.Builder}.\n+     *\n+     * @param httpClientBuilder the HttpClient builder to use", "originalCommit": "32d147918ced47f684fc645ab0914bfe2277c988", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1b2d637014efd06f0c078a0ab03f18827c5bb86", "chunk": "diff --git a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java\nindex deb7d5be353..fe1f5a94c2e 100644\n--- a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java\n+++ b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java\n\n@@ -7,11 +7,9 @@ import com.azure.core.http.HttpClient;\n import com.azure.core.http.ProxyOptions;\n import com.azure.core.http.jdk.httpclient.implementation.JdkHttpClientProxySelector;\n import com.azure.core.util.Configuration;\n-import com.azure.core.util.logging.ClientLogger;\n \n import java.net.Authenticator;\n import java.net.PasswordAuthentication;\n-import java.net.Proxy;\n import java.time.Duration;\n import java.util.Objects;\n import java.util.concurrent.Executor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMjMxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400332313", "bodyText": "Add a @throws", "author": "alzimmermsft", "createdAt": "2020-03-30T16:35:19Z", "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java", "diffHunk": "@@ -0,0 +1,150 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.ProxyOptions;\n+import com.azure.core.http.jdk.httpclient.implementation.JdkHttpClientProxySelector;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.Authenticator;\n+import java.net.PasswordAuthentication;\n+import java.net.Proxy;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * Builder to configure and build an instance of the azure-core {@link HttpClient} type using the JDK HttpClient APIs,\n+ * first introduced as preview in JDK 9, but made generally available from JDK 11 onwards.\n+ */\n+public class JdkAsyncHttpClientBuilder {\n+    private final ClientLogger logger = new ClientLogger(JdkAsyncHttpClientBuilder.class);\n+\n+    private static final Duration DEFAULT_CONNECT_TIMEOUT = Duration.ofSeconds(60);\n+\n+    private java.net.http.HttpClient.Builder httpClientBuilder;\n+    private Duration connectionTimeout;\n+    private ProxyOptions proxyOptions;\n+    private Configuration configuration;\n+    private Executor executor;\n+\n+    /**\n+     * Creates JdkAsyncHttpClientBuilder.\n+     */\n+    public JdkAsyncHttpClientBuilder() {\n+    }\n+\n+    /**\n+     * Creates JdkAsyncHttpClientBuilder from the builder of an existing {@link java.net.http.HttpClient.Builder}.\n+     *\n+     * @param httpClientBuilder the HttpClient builder to use\n+     */\n+    public JdkAsyncHttpClientBuilder(java.net.http.HttpClient.Builder httpClientBuilder) {\n+        this.httpClientBuilder = Objects.requireNonNull(httpClientBuilder, \"'httpClientBuilder' cannot be null.\");\n+    }\n+\n+    /**\n+     * Sets the executor to be used for asynchronous and dependent tasks. This cannot be null.\n+     *\n+     * <p> If this method is not invoked prior to {@linkplain #build() building}, a default executor is created for each\n+     * newly built {@code HttpClient}.\n+     *\n+     * @param executor the executor to be used for asynchronous and dependent tasks\n+     * @return the updated Jdk11AsyncHttpClientBuilder object", "originalCommit": "32d147918ced47f684fc645ab0914bfe2277c988", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1b2d637014efd06f0c078a0ab03f18827c5bb86", "chunk": "diff --git a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java\nindex deb7d5be353..fe1f5a94c2e 100644\n--- a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java\n+++ b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java\n\n@@ -7,11 +7,9 @@ import com.azure.core.http.HttpClient;\n import com.azure.core.http.ProxyOptions;\n import com.azure.core.http.jdk.httpclient.implementation.JdkHttpClientProxySelector;\n import com.azure.core.util.Configuration;\n-import com.azure.core.util.logging.ClientLogger;\n \n import java.net.Authenticator;\n import java.net.PasswordAuthentication;\n-import java.net.Proxy;\n import java.time.Duration;\n import java.util.Objects;\n import java.util.concurrent.Executor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMjQ3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400332478", "bodyText": "<p>", "author": "alzimmermsft", "createdAt": "2020-03-30T16:35:33Z", "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java", "diffHunk": "@@ -0,0 +1,150 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.ProxyOptions;\n+import com.azure.core.http.jdk.httpclient.implementation.JdkHttpClientProxySelector;\n+import com.azure.core.util.Configuration;\n+import com.azure.core.util.logging.ClientLogger;\n+\n+import java.net.Authenticator;\n+import java.net.PasswordAuthentication;\n+import java.net.Proxy;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * Builder to configure and build an instance of the azure-core {@link HttpClient} type using the JDK HttpClient APIs,\n+ * first introduced as preview in JDK 9, but made generally available from JDK 11 onwards.\n+ */\n+public class JdkAsyncHttpClientBuilder {\n+    private final ClientLogger logger = new ClientLogger(JdkAsyncHttpClientBuilder.class);\n+\n+    private static final Duration DEFAULT_CONNECT_TIMEOUT = Duration.ofSeconds(60);\n+\n+    private java.net.http.HttpClient.Builder httpClientBuilder;\n+    private Duration connectionTimeout;\n+    private ProxyOptions proxyOptions;\n+    private Configuration configuration;\n+    private Executor executor;\n+\n+    /**\n+     * Creates JdkAsyncHttpClientBuilder.\n+     */\n+    public JdkAsyncHttpClientBuilder() {\n+    }\n+\n+    /**\n+     * Creates JdkAsyncHttpClientBuilder from the builder of an existing {@link java.net.http.HttpClient.Builder}.\n+     *\n+     * @param httpClientBuilder the HttpClient builder to use\n+     */\n+    public JdkAsyncHttpClientBuilder(java.net.http.HttpClient.Builder httpClientBuilder) {\n+        this.httpClientBuilder = Objects.requireNonNull(httpClientBuilder, \"'httpClientBuilder' cannot be null.\");\n+    }\n+\n+    /**\n+     * Sets the executor to be used for asynchronous and dependent tasks. This cannot be null.\n+     *\n+     * <p> If this method is not invoked prior to {@linkplain #build() building}, a default executor is created for each\n+     * newly built {@code HttpClient}.\n+     *\n+     * @param executor the executor to be used for asynchronous and dependent tasks\n+     * @return the updated Jdk11AsyncHttpClientBuilder object\n+     */\n+    public JdkAsyncHttpClientBuilder executor(Executor executor) {\n+        this.executor = Objects.requireNonNull(executor, \"executor can not be null\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the connection timeout.\n+     *", "originalCommit": "32d147918ced47f684fc645ab0914bfe2277c988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1NTU0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r402555540", "bodyText": "good catch, added code snippet.", "author": "anuchandy", "createdAt": "2020-04-02T19:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMjQ3OA=="}], "type": "inlineReview", "revised_code": {"commit": "a1b2d637014efd06f0c078a0ab03f18827c5bb86", "chunk": "diff --git a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java\nindex deb7d5be353..fe1f5a94c2e 100644\n--- a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java\n+++ b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClientBuilder.java\n\n@@ -7,11 +7,9 @@ import com.azure.core.http.HttpClient;\n import com.azure.core.http.ProxyOptions;\n import com.azure.core.http.jdk.httpclient.implementation.JdkHttpClientProxySelector;\n import com.azure.core.util.Configuration;\n-import com.azure.core.util.logging.ClientLogger;\n \n import java.net.Authenticator;\n import java.net.PasswordAuthentication;\n-import java.net.Proxy;\n import java.time.Duration;\n import java.util.Objects;\n import java.util.concurrent.Executor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMjc3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400332774", "bodyText": "Missing class level Javadoc", "author": "alzimmermsft", "createdAt": "2020-03-30T16:36:01Z", "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/implementation/JdkHttpClientProvider.java", "diffHunk": "@@ -0,0 +1,16 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient.implementation;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpClientProvider;\n+import com.azure.core.http.jdk.httpclient.JdkAsyncHttpClientBuilder;\n+\n+public class JdkHttpClientProvider implements HttpClientProvider {", "originalCommit": "32d147918ced47f684fc645ab0914bfe2277c988", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1b2d637014efd06f0c078a0ab03f18827c5bb86", "chunk": "diff --git a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/implementation/JdkHttpClientProvider.java b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/implementation/JdkHttpClientProvider.java\nindex 778916bc066..e9ce01b4736 100644\n--- a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/implementation/JdkHttpClientProvider.java\n+++ b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/implementation/JdkHttpClientProvider.java\n\n@@ -7,6 +7,9 @@ import com.azure.core.http.HttpClient;\n import com.azure.core.http.HttpClientProvider;\n import com.azure.core.http.jdk.httpclient.JdkAsyncHttpClientBuilder;\n \n+/**\n+ * A {@link HttpClientProvider} that provides an implementation of HttpClient based on native JDK HttpClient.\n+ */\n public class JdkHttpClientProvider implements HttpClientProvider {\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMzEyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400333128", "bodyText": "Constructor Javadoc?", "author": "alzimmermsft", "createdAt": "2020-03-30T16:36:35Z", "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/implementation/JdkHttpClientProxySelector.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient.implementation;\n+\n+import java.io.IOException;\n+import java.net.Proxy;\n+import java.net.ProxySelector;\n+import java.net.SocketAddress;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * This class handles selecting the proxy during a request.\n+ */\n+public final class JdkHttpClientProxySelector extends ProxySelector {\n+    private final Proxy.Type proxyType;\n+    private final SocketAddress proxyAddress;\n+    private final Pattern nonProxyHostsPattern;\n+\n+    public JdkHttpClientProxySelector(Proxy.Type proxyType, SocketAddress proxyAddress, String nonProxyHosts) {", "originalCommit": "32d147918ced47f684fc645ab0914bfe2277c988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExMDk3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r402110970", "bodyText": "It's an implementation package type but added minimal Javadoc for this.", "author": "anuchandy", "createdAt": "2020-04-02T07:39:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMzEyOA=="}], "type": "inlineReview", "revised_code": {"commit": "a1b2d637014efd06f0c078a0ab03f18827c5bb86", "chunk": "diff --git a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/implementation/JdkHttpClientProxySelector.java b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/implementation/JdkHttpClientProxySelector.java\nindex e3116189038..369eb818386 100644\n--- a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/implementation/JdkHttpClientProxySelector.java\n+++ b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/implementation/JdkHttpClientProxySelector.java\n\n@@ -29,6 +29,7 @@ public final class JdkHttpClientProxySelector extends ProxySelector {\n     }\n \n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public List<Proxy> select(URI uri) {\n         /*\n          * If the host of the URI matches the nonProxyHostsPattern return no options for proxying, otherwise return the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0OTc3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400549772", "bodyText": "This should be more flexible in its configuration, if someone is using Java 12+ and set the system property to allow restricted headers we should allow these headers.", "author": "alzimmermsft", "createdAt": "2020-03-30T23:13:59Z", "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java", "diffHunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.FluxUtil;\n+import reactor.adapter.JdkFlowAdapter;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URISyntaxException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import java.net.http.HttpRequest.BodyPublisher;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.concurrent.Flow;\n+\n+import static java.net.http.HttpResponse.BodyHandlers.*;\n+import static java.net.http.HttpRequest.BodyPublishers.*;\n+\n+/**\n+ * HttpClient implementation for the JDK 11 HttpClient.\n+ */\n+class JdkAsyncHttpClient implements HttpClient {\n+    private final java.net.http.HttpClient jdk11HttpClient;\n+\n+    private static final Set<String> JDK11_RESTRICTED_HEADERS;\n+    static {\n+        TreeSet<String> treeSet = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);", "originalCommit": "32d147918ced47f684fc645ab0914bfe2277c988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5NjcxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r400596716", "bodyText": "I added this initially to avoid JDK11 HttpClient native builder from throwing an exception. Thinking what would be the best approach here:\nMaybe we can copy over the same jdk11+ logic around the header whitelisting here or if the exception thrown by the JDK11+ HttpClient native builder has a special error code for disallowed headers then we can catch, log and continue.", "author": "anuchandy", "createdAt": "2020-03-31T01:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0OTc3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEwOTI0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r402109241", "bodyText": "Relaxed validations and added necessary log messages as agreed offline.", "author": "anuchandy", "createdAt": "2020-04-02T07:36:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0OTc3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a1b2d637014efd06f0c078a0ab03f18827c5bb86", "chunk": "diff --git a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\nindex 794ebe072aa..f3610924296 100644\n--- a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\n+++ b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\n\n@@ -10,6 +10,7 @@ import com.azure.core.http.HttpRequest;\n import com.azure.core.http.HttpResponse;\n import com.azure.core.util.CoreUtils;\n import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n import reactor.adapter.JdkFlowAdapter;\n import reactor.core.Exceptions;\n import reactor.core.publisher.Flux;\n"}}, {"oid": "a1b2d637014efd06f0c078a0ab03f18827c5bb86", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a1b2d637014efd06f0c078a0ab03f18827c5bb86", "message": "JDKHttpClient: Cleanup and test cases.", "committedDate": "2020-04-02T00:27:42Z", "type": "commit"}, {"oid": "86ffa1ec7af769e303225cfd1b49335b99fbcc33", "url": "https://github.com/Azure/azure-sdk-for-java/commit/86ffa1ec7af769e303225cfd1b49335b99fbcc33", "message": "sync upstream", "committedDate": "2020-04-02T00:30:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MTE1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r401991151", "bodyText": "This could be made static right?", "author": "alzimmermsft", "createdAt": "2020-04-02T00:46:08Z", "path": "sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java", "diffHunk": "@@ -0,0 +1,253 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.jdk.httpclient;\n+\n+import com.azure.core.http.HttpClient;\n+import com.azure.core.http.HttpHeader;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.adapter.JdkFlowAdapter;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URISyntaxException;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import java.net.http.HttpRequest.BodyPublisher;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.concurrent.Flow;\n+\n+import static java.net.http.HttpResponse.BodyHandlers.ofPublisher;\n+import static java.net.http.HttpRequest.BodyPublishers.fromPublisher;\n+import static java.net.http.HttpRequest.BodyPublishers.noBody;\n+\n+/**\n+ * HttpClient implementation for the JDK HttpClient.\n+ */\n+class JdkAsyncHttpClient implements HttpClient {\n+    private final ClientLogger logger = new ClientLogger(JdkAsyncHttpClient.class);\n+    private final java.net.http.HttpClient jdkHttpClient;\n+    private final int javaVersion;\n+\n+    // These headers are restricted by default in native JDK12 HttpClient.\n+    // These headers can be whitelisted by setting jdk.httpclient.allowRestrictedHeaders\n+    // property in the network properties file: 'JAVA_HOME/conf/net.properties'\n+    // e.g white listing 'host' header.\n+    //\n+    // jdk.httpclient.allowRestrictedHeaders=host\n+    //\n+    private static final Set<String> JDK12_RESTRICTED_HEADERS;\n+    static {\n+        TreeSet<String> treeSet = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n+        treeSet.addAll(Set.of(\"connection\",\n+            \"content-length\",\n+            \"expect\",\n+            \"host\",\n+            \"upgrade\"));\n+        JDK12_RESTRICTED_HEADERS = Collections.unmodifiableSet(treeSet);\n+    }\n+\n+    JdkAsyncHttpClient(java.net.http.HttpClient httpClient) {\n+        this.jdkHttpClient = httpClient;\n+        this.javaVersion = getJavaVersion();\n+        if (javaVersion <= 11) {\n+            logger.logExceptionAsError(\n+                new RuntimeException(\"JdkAsyncHttpClient is not supported in Java version 11 and below.\"));\n+        }\n+    }\n+\n+    @Override\n+    public Mono<HttpResponse> send(HttpRequest request) {\n+        return toJdkHttpRequest(request)\n+            .flatMap(jdkRequest -> Mono.fromCompletionStage(jdkHttpClient.sendAsync(jdkRequest, ofPublisher()))\n+                .map(innerResponse -> new JdkHttpResponse(request, innerResponse)));\n+    }\n+\n+    /**\n+     * Converts the given azure-core request to the JDK HttpRequest type.\n+     *\n+     * @param request the azure-core request\n+     * @return the Mono emitting HttpRequest\n+     */\n+    private Mono<java.net.http.HttpRequest> toJdkHttpRequest(HttpRequest request) {\n+        return Mono.fromCallable(() -> {\n+            final java.net.http.HttpRequest.Builder builder = java.net.http.HttpRequest.newBuilder();\n+            try {\n+                builder.uri(request.getUrl().toURI());\n+            } catch (URISyntaxException e) {\n+                throw Exceptions.propagate(e);\n+            }\n+            final HttpHeaders headers = request.getHeaders();\n+            if (headers != null) {\n+                for (HttpHeader header : headers) {\n+                    final String headerName = header.getName();\n+                    if (!JDK12_RESTRICTED_HEADERS.contains(headerName)) {\n+                        final String headerValue = header.getValue();\n+                        builder.setHeader(headerName, headerValue);\n+                    } else {\n+                        logger.logExceptionAsError(\n+                            new IllegalArgumentException(\"The header \" +\n+                                \"'\" + headerName + \"' is restricted by default in JDK HttpClient 12 and above.\" +\n+                                \"(unless it is whitelisted in JAVA_HOME/conf/net.properties)\"));\n+                    }\n+                }\n+            }\n+            switch (request.getHttpMethod()) {\n+                case GET:\n+                    return builder.GET().build();\n+                case HEAD:\n+                    return builder.method(\"HEAD\", noBody()).build();\n+                default:\n+                    final String contentLength = request.getHeaders().getValue(\"content-length\");\n+                    final BodyPublisher bodyPublisher = toBodyPublisher(request.getBody(), contentLength);\n+                    return builder.method(request.getHttpMethod().toString(), bodyPublisher).build();\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Create BodyPublisher from the given java.nio.ByteBuffer publisher.\n+     *\n+     * @param bbPublisher stream of java.nio.ByteBuffer representing request content\n+     * @return the request BodyPublisher\n+     */\n+    private static BodyPublisher toBodyPublisher(Flux<ByteBuffer> bbPublisher, String contentLength) {\n+        if (bbPublisher == null) {\n+            return noBody();\n+        }\n+        final Flow.Publisher<ByteBuffer> bbFlowPublisher = JdkFlowAdapter.publisherToFlowPublisher(bbPublisher);\n+        if (CoreUtils.isNullOrEmpty(contentLength)) {\n+            return fromPublisher(bbFlowPublisher);\n+        } else {\n+            long contentLengthLong = Long.parseLong(contentLength);\n+            if (contentLengthLong < 1) {\n+                return fromPublisher(bbFlowPublisher);\n+            } else {\n+                return fromPublisher(bbFlowPublisher, contentLengthLong);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get the java runtime major version.\n+     *\n+     * @return the java major version\n+     */\n+    private int getJavaVersion() {", "originalCommit": "86ffa1ec7af769e303225cfd1b49335b99fbcc33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MzExMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r401993110", "bodyText": "could be, it uses instance-level logger, so static means we need to pass it.", "author": "anuchandy", "createdAt": "2020-04-02T00:53:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MTE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1NzU5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/8632#discussion_r402157599", "bodyText": "going with a private instance-level method, Can be static if we ever move this method to utils.", "author": "anuchandy", "createdAt": "2020-04-02T08:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5MTE1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a8206b3ee97d39da6fe6c643f826f0c08bba451a", "chunk": "diff --git a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\nindex f3610924296..c1c00644fd3 100644\n--- a/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\n+++ b/sdk/core/azure-core-http-jdk11-httpclient/src/main/java/com/azure/core/http/jdk/httpclient/JdkAsyncHttpClient.java\n\n@@ -19,6 +19,7 @@ import reactor.core.publisher.Mono;\n import java.net.URISyntaxException;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n import java.util.Collections;\n import java.util.List;\n \n"}}, {"oid": "62735f0416afe6c8fde54f6e54f5a0b56c7c3fb1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/62735f0416afe6c8fde54f6e54f5a0b56c7c3fb1", "message": "JdkHttpClient: Overriding maven compiler release to 11 from 8", "committedDate": "2020-04-02T05:35:10Z", "type": "commit"}, {"oid": "08eaf533a5c0187bfe2f62dfb70f5699db9d56f1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/08eaf533a5c0187bfe2f62dfb70f5699db9d56f1", "message": "JdkHttpClient: Supression for ServiceBuilder annotation", "committedDate": "2020-04-02T05:35:43Z", "type": "commit"}, {"oid": "a8206b3ee97d39da6fe6c643f826f0c08bba451a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a8206b3ee97d39da6fe6c643f826f0c08bba451a", "message": "JdkHttpClient: Address spotbug and checkstyle", "committedDate": "2020-04-02T05:36:20Z", "type": "commit"}, {"oid": "43bc1ce0d517bd69d92d193c2c26ae60c2392b64", "url": "https://github.com/Azure/azure-sdk-for-java/commit/43bc1ce0d517bd69d92d193c2c26ae60c2392b64", "message": "JdkHttpClient: rename dir from azure-core-http-jdk11-httpclient to azure-core-http-jdk-httpclient", "committedDate": "2020-04-02T05:40:20Z", "type": "commit"}, {"oid": "5f93789748af576719585c500e02637751dfdd40", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5f93789748af576719585c500e02637751dfdd40", "message": "JdkHttpClient: Updating to latest azure-core version and implementing RestProxyTest contracts", "committedDate": "2020-04-02T07:33:48Z", "type": "commit"}, {"oid": "8798554455eb9a9298632966fbde487d47329a0a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8798554455eb9a9298632966fbde487d47329a0a", "message": "JdkHttpClient: specifying version for compiler plugin", "committedDate": "2020-04-02T08:52:17Z", "type": "commit"}, {"oid": "3ea3086775babf1d4f1eb66fcbfb9817e606e0fd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3ea3086775babf1d4f1eb66fcbfb9817e606e0fd", "message": "JdkHttpClient: Updating the README to follow the general readme template, adding connectionTimeout sample to README.", "committedDate": "2020-04-02T09:18:23Z", "type": "commit"}, {"oid": "f57a576b48aa918572a5a2a2b00b6189e2492a34", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f57a576b48aa918572a5a2a2b00b6189e2492a34", "message": "Adding javadoc for ProxyOptions::Type::toProxyType()", "committedDate": "2020-04-02T09:36:46Z", "type": "commit"}, {"oid": "886cc196e3e9533d14c4b30ca1ad824594cb96eb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/886cc196e3e9533d14c4b30ca1ad824594cb96eb", "message": "Fixing checkstyle in azure-core okhttp builder", "committedDate": "2020-04-02T09:55:06Z", "type": "commit"}, {"oid": "3c3eb4ce0c6bf0f2cce633d5c586a37b42ea3b5b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3c3eb4ce0c6bf0f2cce633d5c586a37b42ea3b5b", "message": "JdkHttpClient: Adding jdk-httpclient to the artifact list in ci.yml (enables release task for this lib)", "committedDate": "2020-04-02T19:09:26Z", "type": "commit"}, {"oid": "f0331ba085a9f38dfd1e781129ab5e8310d22686", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f0331ba085a9f38dfd1e781129ab5e8310d22686", "message": "JdkHttpClient: Adding jdk-httpclient to core pom module list", "committedDate": "2020-04-02T19:10:10Z", "type": "commit"}, {"oid": "25fbbc6f2670f63474ab35d0c9e03600cde2eb20", "url": "https://github.com/Azure/azure-sdk-for-java/commit/25fbbc6f2670f63474ab35d0c9e03600cde2eb20", "message": "JdkHttpClient: don't ignore header multi-values", "committedDate": "2020-04-02T19:11:56Z", "type": "commit"}, {"oid": "5b9ffedeea395afba635a2d81ef07e48da460e68", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5b9ffedeea395afba635a2d81ef07e48da460e68", "message": "JdkHttpClient: Adding code snippet for connectionTimeout", "committedDate": "2020-04-02T19:12:33Z", "type": "commit"}, {"oid": "3940840e16c2d546e491673a6e15aabbaa5c6ccc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3940840e16c2d546e491673a6e15aabbaa5c6ccc", "message": "JdkHttpClient: Fix code snippet reference", "committedDate": "2020-04-02T19:20:37Z", "type": "commit"}, {"oid": "128b25559509e431cd91133d5eb9f487c4659f73", "url": "https://github.com/Azure/azure-sdk-for-java/commit/128b25559509e431cd91133d5eb9f487c4659f73", "message": "JdkHttpClient: Override the 1.8 and 11+ profile", "committedDate": "2020-04-02T23:36:59Z", "type": "commit"}, {"oid": "306d959013e8ce5e2b753a78e17e774f3a0ee872", "url": "https://github.com/Azure/azure-sdk-for-java/commit/306d959013e8ce5e2b753a78e17e774f3a0ee872", "message": "JdkHttpClient: Ensure README and ReadmeSamples are in sync", "committedDate": "2020-04-03T00:19:05Z", "type": "commit"}, {"oid": "4c8ac254a678c0bef51afb5e1ba929ffe7450729", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4c8ac254a678c0bef51afb5e1ba929ffe7450729", "message": "JdkHttpClient: fix code snippet reference name", "committedDate": "2020-04-03T00:40:55Z", "type": "commit"}]}