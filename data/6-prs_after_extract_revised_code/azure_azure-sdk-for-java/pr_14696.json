{"pr_number": 14696, "pr_title": "SB track2: Remove locktoken with ServiceBusReceivedMessage in settlement API.", "pr_createdAt": "2020-09-01T20:27:11Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14696", "timeline": [{"oid": "bb890a952c7167ddf695a987f7902d0435bf7b8a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bb890a952c7167ddf695a987f7902d0435bf7b8a", "message": "remove locktoken with ServiceBusReceivedMessage in settlement API.", "committedDate": "2020-09-01T20:25:32Z", "type": "commit"}, {"oid": "abaf04e77d59c0c59cd99179ae085c7aed493224", "url": "https://github.com/Azure/azure-sdk-for-java/commit/abaf04e77d59c0c59cd99179ae085c7aed493224", "message": "Fix test and samples", "committedDate": "2020-09-01T22:31:30Z", "type": "commit"}, {"oid": "acb5a7fa0815b93a5a3a36962e69db32c1c19973", "url": "https://github.com/Azure/azure-sdk-for-java/commit/acb5a7fa0815b93a5a3a36962e69db32c1c19973", "message": "update Readme with samples", "committedDate": "2020-09-02T01:22:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyOTI1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r481929259", "bodyText": "There is no longer a lock token that's accepted. This probably applies to all the other docs.", "author": "conniey", "createdAt": "2020-09-02T09:23:21Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -187,54 +187,38 @@ public String getEntityPath() {\n     }\n \n     /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token. This will make the message available\n+     * Abandon a {@link ServiceBusReceivedMessage message}. This will make the message available\n      * again for processing. Abandoning a message will increase the delivery count on the message.\n      *\n-     * @param lockToken Lock token of the message.\n-     *\n-     * @return A {@link Mono} that completes when the Service Bus abandon operation completes.\n-     * @throws NullPointerException if {@code lockToken} is null.\n-     * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n-     *     mode.\n-     * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n-     */\n-    public Mono<Void> abandon(String lockToken) {\n-        return abandon(lockToken, receiverOptions.getSessionId());\n-    }\n-\n-    /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token. This will make the message available\n-     * again for processing. Abandoning a message will increase the delivery count on the message.\n-     *\n-     * @param lockToken Lock token of the message.\n-     * @param sessionId Session id of the message to abandon. {@code null} if there is no session.\n+     * @param message The {@link ServiceBusReceivedMessage} message.\n      *\n      * @return A {@link Mono} that completes when the Service Bus abandon operation completes.\n      * @throws NullPointerException if {@code lockToken} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n      * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n      */\n-    public Mono<Void> abandon(String lockToken, String sessionId) {\n-        return abandon(lockToken, null, sessionId);\n+    public Mono<Void> abandon(ServiceBusReceivedMessage message) {\n+        return abandon(message, null);\n     }\n \n     /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token and updates the message's properties.\n+     * Abandon a {@link ServiceBusReceivedMessage message} updates the message's properties.\n      * This will make the message available again for processing. Abandoning a message will increase the delivery count\n      * on the message.\n      *\n-     * @param lockToken Lock token of the message.\n+     * @param message The {@link ServiceBusReceivedMessage} message.\n      * @param propertiesToModify Properties to modify on the message.\n      *\n      * @return A {@link Mono} that completes when the Service Bus operation finishes.\n-     * @throws NullPointerException if {@code lockToken} is null.\n+     * @throws NullPointerException if {@code lockToken} or {@code message} is null.", "originalCommit": "acb5a7fa0815b93a5a3a36962e69db32c1c19973", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "923fb5c0970f7c1943be3ebd743c49a16d8dafe2", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex 40e18d4e244..6cc950f5c7f 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -190,10 +190,10 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n      * Abandon a {@link ServiceBusReceivedMessage message}. This will make the message available\n      * again for processing. Abandoning a message will increase the delivery count on the message.\n      *\n-     * @param message The {@link ServiceBusReceivedMessage} message.\n+     * @param message The {@link ServiceBusReceivedMessage} to perform this operation.\n      *\n      * @return A {@link Mono} that completes when the Service Bus abandon operation completes.\n-     * @throws NullPointerException if {@code lockToken} is null.\n+     * @throws NullPointerException if {@code message} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n      * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkzNDUwOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r481934508", "bodyText": "It's not possible for lock token to be null because they cannot create a ServiceBusReceivedMessage instance on their own. Same with other instances of this.", "author": "conniey", "createdAt": "2020-09-02T09:31:46Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -244,164 +228,78 @@ public String getEntityPath() {\n      * <p><strong>Complete a message with a transaction</strong></p>\n      * {@codesnippet com.azure.messaging.servicebus.servicebusasyncreceiverclient.abandonMessageWithTransaction}\n      *\n-     * @param lockToken Lock token of the message.\n+     * @param message The {@link ServiceBusReceivedMessage} message.\n      * @param propertiesToModify Properties to modify on the message.\n      * @param transactionContext in which this operation is taking part in. The transaction should be created first by\n      * {@link ServiceBusReceiverAsyncClient#createTransaction()} or\n      * {@link ServiceBusSenderAsyncClient#createTransaction()}.\n      *\n      * @return A {@link Mono} that completes when the Service Bus operation finishes.\n-     * @throws NullPointerException if {@code lockToken}, {@code transactionContext} or\n-     * {@code transactionContext.transactionId} is null.\n+     * @throws NullPointerException if {@code transactionContext}, {@code message},\n+     * {@link ServiceBusReceivedMessage#getLockToken()} or {@code transactionContext.transactionId} is null.", "originalCommit": "acb5a7fa0815b93a5a3a36962e69db32c1c19973", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "923fb5c0970f7c1943be3ebd743c49a16d8dafe2", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex 40e18d4e244..6cc950f5c7f 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -228,15 +228,15 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n      * <p><strong>Complete a message with a transaction</strong></p>\n      * {@codesnippet com.azure.messaging.servicebus.servicebusasyncreceiverclient.abandonMessageWithTransaction}\n      *\n-     * @param message The {@link ServiceBusReceivedMessage} message.\n+     * @param message The {@link ServiceBusReceivedMessage} to perform this operation.\n      * @param propertiesToModify Properties to modify on the message.\n      * @param transactionContext in which this operation is taking part in. The transaction should be created first by\n      * {@link ServiceBusReceiverAsyncClient#createTransaction()} or\n      * {@link ServiceBusSenderAsyncClient#createTransaction()}.\n      *\n      * @return A {@link Mono} that completes when the Service Bus operation finishes.\n-     * @throws NullPointerException if {@code transactionContext}, {@code message},\n-     * {@link ServiceBusReceivedMessage#getLockToken()} or {@code transactionContext.transactionId} is null.\n+     * @throws NullPointerException if {@code message}, {@code transactionContext}\n+     * or {@code transactionContext.transactionId} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n      * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk0MTg3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r481941876", "bodyText": "The docs will be odd to read. It'll show up as The ServiceBusReceivedMessage messge.", "author": "conniey", "createdAt": "2020-09-02T09:44:26Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -446,64 +327,21 @@ public String getEntityPath() {\n      * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n      * @see <a href=\"https://docs.microsoft.com/azure/service-bus-messaging/message-deferral\">Message deferral</a>\n      */\n-    public Mono<Void> defer(String lockToken, Map<String, Object> propertiesToModify) {\n-        return defer(lockToken, propertiesToModify, receiverOptions.getSessionId());\n+    public Mono<Void> defer(ServiceBusReceivedMessage message, Map<String, Object> propertiesToModify) {\n+        return updateDisposition(message, DispositionStatus.DEFERRED, null, null,\n+            propertiesToModify, null);\n     }\n \n     /**\n-     * Defers a {@link ServiceBusReceivedMessage message} using its lock token with modified message property. This will\n+     * Defers a {@link ServiceBusReceivedMessage message} with modified message property. This will\n      * move message into the deferred subqueue.\n      *\n-     * @param lockToken Lock token of the message.\n+     * @param message The {@link ServiceBusReceivedMessage} message.", "originalCommit": "acb5a7fa0815b93a5a3a36962e69db32c1c19973", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "923fb5c0970f7c1943be3ebd743c49a16d8dafe2", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex 40e18d4e244..6cc950f5c7f 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -317,11 +317,11 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n      * Defers a {@link ServiceBusReceivedMessage message} with modified message property. This will\n      * move message into the deferred subqueue.\n      *\n-     * @param message The {@link ServiceBusReceivedMessage} message.\n+     * @param message The {@link ServiceBusReceivedMessage} to perform this operation.\n      * @param propertiesToModify Message properties to modify.\n      *\n      * @return A {@link Mono} that completes when the defer operation finishes.\n-     * @throws NullPointerException if {@code lockToken} is null.\n+     * @throws NullPointerException if {@code message} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n      * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk0MjUzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r481942530", "bodyText": "You don't need these checks because SBRM is instantiated by us.", "author": "conniey", "createdAt": "2020-09-02T09:45:29Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java", "diffHunk": "@@ -1264,17 +1041,23 @@ private boolean isManagementToken(String lockToken) {\n         return managementNodeLocks.containsUnexpired(lockToken);\n     }\n \n-    private Mono<Void> updateDisposition(String lockToken, DispositionStatus dispositionStatus,\n+    private Mono<Void> updateDisposition(ServiceBusReceivedMessage message, DispositionStatus dispositionStatus,\n         String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify,\n-        String sessionId, ServiceBusTransactionContext transactionContext) {\n-\n+        ServiceBusTransactionContext transactionContext) {\n         if (isDisposed.get()) {\n             return monoError(logger, new IllegalStateException(\n                 String.format(INVALID_OPERATION_DISPOSED_RECEIVER, dispositionStatus.getValue())));\n-        } else if (Objects.isNull(lockToken)) {\n-            return monoError(logger, new NullPointerException(\"'lockToken' cannot be null.\"));\n+        } else if (Objects.isNull(message)) {\n+            return monoError(logger, new NullPointerException(\"'message' cannot be null.\"));\n+        }\n+\n+        final String lockToken = message.getLockToken();\n+        final String sessionId = message.getSessionId();\n+\n+        if (Objects.isNull(lockToken)) {", "originalCommit": "acb5a7fa0815b93a5a3a36962e69db32c1c19973", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "923fb5c0970f7c1943be3ebd743c49a16d8dafe2", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\nindex 40e18d4e244..6cc950f5c7f 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClient.java\n\n@@ -1054,12 +1054,6 @@ public final class ServiceBusReceiverAsyncClient implements AutoCloseable {\n         final String lockToken = message.getLockToken();\n         final String sessionId = message.getSessionId();\n \n-        if (Objects.isNull(lockToken)) {\n-            return monoError(logger, new NullPointerException(\"'message.lockToken' cannot be null.\"));\n-        } else if (lockToken.isEmpty()) {\n-            return monoError(logger, new IllegalArgumentException(\"'message.lockToken' cannot be empty.\"));\n-        }\n-\n         if (receiverOptions.getReceiveMode() != ReceiveMode.PEEK_LOCK) {\n             return Mono.error(logger.logExceptionAsError(new UnsupportedOperationException(String.format(\n                 \"'%s' is not supported on a receiver opened in ReceiveMode.RECEIVE_AND_DELETE.\", dispositionStatus))));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk0Mjg4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r481942882", "bodyText": "These javadocs are not correct.", "author": "conniey", "createdAt": "2020-09-02T09:46:03Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java", "diffHunk": "@@ -9,10 +9,10 @@\n \n /**\n  * Sample demonstrates how to receive an {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue and settle\n- * it. Settling of message include {@link ServiceBusReceiverAsyncClient#complete(String) complete()}, {@link\n- * ServiceBusReceiverAsyncClient#defer(String) defer()},\n- * {@link ServiceBusReceiverAsyncClient#abandon(String) abandon}, or\n- * {@link ServiceBusReceiverAsyncClient#deadLetter(String) dead-letter} a message.\n+ * it. Settling of message include {@link ServiceBusReceiverAsyncClient#complete(ServiceBusReceivedMessage)} complete()}", "originalCommit": "acb5a7fa0815b93a5a3a36962e69db32c1c19973", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIxMTgxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r482211816", "bodyText": "you mean it has extra } . I removed it.", "author": "hemanttanwar", "createdAt": "2020-09-02T16:41:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk0Mjg4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "923fb5c0970f7c1943be3ebd743c49a16d8dafe2", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java\nindex cf462c444f3..ec726665da7 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/samples/java/com/azure/messaging/servicebus/ReceiveMessageAndSettleAsyncSample.java\n\n@@ -9,8 +9,8 @@ import java.util.concurrent.TimeUnit;\n \n /**\n  * Sample demonstrates how to receive an {@link ServiceBusReceivedMessage} from an Azure Service Bus Queue and settle\n- * it. Settling of message include {@link ServiceBusReceiverAsyncClient#complete(ServiceBusReceivedMessage)} complete()}\n- * , {@link ServiceBusReceiverAsyncClient#defer(ServiceBusReceivedMessage)}  defer()},\n+ * it. Settling of message include {@link ServiceBusReceiverAsyncClient#complete(ServiceBusReceivedMessage) complete},\n+ * {@link ServiceBusReceiverAsyncClient#defer(ServiceBusReceivedMessage) defer},\n  * {@link ServiceBusReceiverAsyncClient#abandon(ServiceBusReceivedMessage) abandon}, or\n  * {@link ServiceBusReceiverAsyncClient#deadLetter(ServiceBusReceivedMessage) dead-letter} a message.\n  */\n"}}, {"oid": "923fb5c0970f7c1943be3ebd743c49a16d8dafe2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/923fb5c0970f7c1943be3ebd743c49a16d8dafe2", "message": "Incorported review comments", "committedDate": "2020-09-02T16:39:07Z", "type": "commit"}, {"oid": "bcbd4909c93cc727e7c4f6ab2ef0c6fb819a44dc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bcbd4909c93cc727e7c4f6ab2ef0c6fb819a44dc", "message": "Fixed unit test case", "committedDate": "2020-09-02T17:46:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2MTIwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r482261201", "bodyText": "There is no lock token.", "author": "conniey", "createdAt": "2020-09-02T17:58:28Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -69,385 +69,195 @@ public String getEntityPath() {\n     }\n \n     /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token. This will make the message available\n+     * Abandon a {@link ServiceBusReceivedMessage message}. This will make the message available\n      * again for processing. Abandoning a message will increase the delivery count on the message.\n      *\n-     * @param lockToken Lock token of the message.\n-     *\n-     * @throws NullPointerException if {@code lockToken} is null.\n-     * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n-     *     mode.\n-     * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n-     */\n-    public void abandon(String lockToken) {\n-        asyncClient.abandon(lockToken).block(operationTimeout);\n-    }\n-\n-    /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token and updates the message's properties.\n-     * This will make the message available again for processing. Abandoning a message will increase the delivery count\n-     * on the message.\n-     *\n-     * @param lockToken Lock token of the message.\n-     * @param propertiesToModify Properties to modify on the message.\n-     *\n-     * @throws NullPointerException if {@code lockToken} is null.\n-     * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n-     *     mode.\n-     * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n-     */\n-    public void abandon(String lockToken, Map<String, Object> propertiesToModify) {\n-        asyncClient.abandon(lockToken, propertiesToModify).block(operationTimeout);\n-    }\n-\n-    /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token and updates the message's properties.\n-     * This will make the message available again for processing. Abandoning a message will increase the delivery count\n-     * on the message.\n+     * @param message The {@link ServiceBusReceivedMessage} to perform this operation.\n      *\n-     * @param lockToken Lock token of the message.\n-     * @param propertiesToModify Properties to modify on the message.\n-     * @param transactionContext in which this operation is taking part in. The transaction should be created first by\n-     * {@link ServiceBusReceiverClient#createTransaction()} or {@link ServiceBusSenderClient#createTransaction()}.\n-     *\n-     * @throws NullPointerException if {@code lockToken}, {@code transactionContext} or\n-     * {@code transactionContext.transactionId} is null.\n+     * @throws NullPointerException if {@code message} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n      * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n      */\n-    public void abandon(String lockToken, Map<String, Object> propertiesToModify,\n-        ServiceBusTransactionContext transactionContext) {\n-\n-        asyncClient.abandon(lockToken, propertiesToModify, transactionContext).block(operationTimeout);\n+    public void abandon(ServiceBusReceivedMessage message) {\n+        asyncClient.abandon(message).block(operationTimeout);\n     }\n \n     /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token and updates the message's properties.\n+     * Abandon a {@link ServiceBusReceivedMessage message} updates the message's properties.\n      * This will make the message available again for processing. Abandoning a message will increase the delivery count\n      * on the message.\n      *\n-     * @param lockToken Lock token of the message.\n+     * @param message The {@link ServiceBusReceivedMessage} to perform this operation.\n      * @param propertiesToModify Properties to modify on the message.\n-     * @param sessionId Session id of the message to abandon. {@code null} if there is no session.\n      *\n-     * @throws NullPointerException if {@code lockToken} is null.\n+     * @throws NullPointerException if {@code message} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n      * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n      */\n-    public void abandon(String lockToken, Map<String, Object> propertiesToModify, String sessionId) {\n-        asyncClient.abandon(lockToken, propertiesToModify, sessionId).block(operationTimeout);\n+    public void abandon(ServiceBusReceivedMessage message, Map<String, Object> propertiesToModify) {\n+        asyncClient.abandon(message, propertiesToModify).block(operationTimeout);\n     }\n \n     /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token and updates the message's properties.\n+     * Abandon a {@link ServiceBusReceivedMessage message} updates the message's properties.\n      * This will make the message available again for processing. Abandoning a message will increase the delivery count\n      * on the message.\n      *\n-     * @param lockToken Lock token of the message.\n+     * @param message The {@link ServiceBusReceivedMessage} to perform this operation.\n      * @param propertiesToModify Properties to modify on the message.\n-     * @param sessionId Session id of the message to abandon. {@code null} if there is no session.\n      * @param transactionContext in which this operation is taking part in. The transaction should be created first by\n      * {@link ServiceBusReceiverClient#createTransaction()} or {@link ServiceBusSenderClient#createTransaction()}.\n      *\n-     * @throws NullPointerException if {@code lockToken}, {@code transactionContext} or\n+     * @throws NullPointerException if {@code message}, {@code transactionContext} or\n      * {@code transactionContext.transactionId} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n      * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n      */\n-    public void abandon(String lockToken, Map<String, Object> propertiesToModify, String sessionId,\n+    public void abandon(ServiceBusReceivedMessage message, Map<String, Object> propertiesToModify,\n         ServiceBusTransactionContext transactionContext) {\n-        asyncClient.abandon(lockToken, propertiesToModify, sessionId, transactionContext).block(operationTimeout);\n-    }\n-\n-    /**\n-     * Completes a {@link ServiceBusReceivedMessage message} using its lock token. This will delete the message from the\n-     * service.\n-     *\n-     * @param lockToken Lock token of the message.\n-     *\n-     * @throws NullPointerException if {@code lockToken} is null.\n-     * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n-     *     mode.\n-     * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n-     */\n-    public void complete(String lockToken) {\n-        asyncClient.complete(lockToken).block(operationTimeout);\n-    }\n \n-    /**\n-     * Completes a {@link ServiceBusReceivedMessage message} using its lock token. This will delete the message from the\n-     * service.\n-     *\n-     * @param lockToken Lock token of the message.\n-     * @param transactionContext in which this operation is taking part in. The transaction should be created first by\n-     * {@link ServiceBusReceiverClient#createTransaction()} or {@link ServiceBusSenderClient#createTransaction()}.\n-     *\n-     * @throws NullPointerException if {@code lockToken}, {@code transactionContext} or\n-     * {@code transactionContext.transactionId} is null.\n-     * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n-     *     mode.\n-     * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n-     */\n-    public void complete(String lockToken, ServiceBusTransactionContext transactionContext) {\n-        asyncClient.complete(lockToken, transactionContext).block(operationTimeout);\n+        asyncClient.abandon(message, propertiesToModify, transactionContext).block(operationTimeout);\n     }\n \n     /**\n-     * Completes a {@link ServiceBusReceivedMessage message} using its lock token. This will delete the message from the\n-     * service.\n+     * Completes a {@link ServiceBusReceivedMessage message}. This will delete the message from the service.\n      *\n-     * @param lockToken Lock token of the message.\n-     * @param sessionId Session id of the message to complete. {@code null} if there is no session.\n+     * @param message The {@link ServiceBusReceivedMessage} to perform this operation.\n      *\n-     * @throws NullPointerException if {@code lockToken} is null.\n+     * @throws NullPointerException if {@code message} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n      * @throws IllegalArgumentException if {@code lockToken} is an empty value.", "originalCommit": "bcbd4909c93cc727e7c4f6ab2ef0c6fb819a44dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba27cfa5747481a5c8a58d519988d001360abf61", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java\nindex baa29681b59..f0dc9c1ad7d 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java\n\n@@ -77,7 +77,6 @@ public final class ServiceBusReceiverClient implements AutoCloseable {\n      * @throws NullPointerException if {@code message} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n-     * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n      */\n     public void abandon(ServiceBusReceivedMessage message) {\n         asyncClient.abandon(message).block(operationTimeout);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2MTQwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r482261401", "bodyText": "There is no lock token. And it should be updated for all other instances.", "author": "conniey", "createdAt": "2020-09-02T17:58:50Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -69,385 +69,195 @@ public String getEntityPath() {\n     }\n \n     /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token. This will make the message available\n+     * Abandon a {@link ServiceBusReceivedMessage message}. This will make the message available\n      * again for processing. Abandoning a message will increase the delivery count on the message.\n      *\n-     * @param lockToken Lock token of the message.\n-     *\n-     * @throws NullPointerException if {@code lockToken} is null.\n-     * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n-     *     mode.\n-     * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n-     */\n-    public void abandon(String lockToken) {\n-        asyncClient.abandon(lockToken).block(operationTimeout);\n-    }\n-\n-    /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token and updates the message's properties.\n-     * This will make the message available again for processing. Abandoning a message will increase the delivery count\n-     * on the message.\n-     *\n-     * @param lockToken Lock token of the message.\n-     * @param propertiesToModify Properties to modify on the message.\n-     *\n-     * @throws NullPointerException if {@code lockToken} is null.\n-     * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n-     *     mode.\n-     * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n-     */\n-    public void abandon(String lockToken, Map<String, Object> propertiesToModify) {\n-        asyncClient.abandon(lockToken, propertiesToModify).block(operationTimeout);\n-    }\n-\n-    /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token and updates the message's properties.\n-     * This will make the message available again for processing. Abandoning a message will increase the delivery count\n-     * on the message.\n+     * @param message The {@link ServiceBusReceivedMessage} to perform this operation.\n      *\n-     * @param lockToken Lock token of the message.\n-     * @param propertiesToModify Properties to modify on the message.\n-     * @param transactionContext in which this operation is taking part in. The transaction should be created first by\n-     * {@link ServiceBusReceiverClient#createTransaction()} or {@link ServiceBusSenderClient#createTransaction()}.\n-     *\n-     * @throws NullPointerException if {@code lockToken}, {@code transactionContext} or\n-     * {@code transactionContext.transactionId} is null.\n+     * @throws NullPointerException if {@code message} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n      * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n      */\n-    public void abandon(String lockToken, Map<String, Object> propertiesToModify,\n-        ServiceBusTransactionContext transactionContext) {\n-\n-        asyncClient.abandon(lockToken, propertiesToModify, transactionContext).block(operationTimeout);\n+    public void abandon(ServiceBusReceivedMessage message) {\n+        asyncClient.abandon(message).block(operationTimeout);\n     }\n \n     /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token and updates the message's properties.\n+     * Abandon a {@link ServiceBusReceivedMessage message} updates the message's properties.\n      * This will make the message available again for processing. Abandoning a message will increase the delivery count\n      * on the message.\n      *\n-     * @param lockToken Lock token of the message.\n+     * @param message The {@link ServiceBusReceivedMessage} to perform this operation.\n      * @param propertiesToModify Properties to modify on the message.\n-     * @param sessionId Session id of the message to abandon. {@code null} if there is no session.\n      *\n-     * @throws NullPointerException if {@code lockToken} is null.\n+     * @throws NullPointerException if {@code message} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n      * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n      */\n-    public void abandon(String lockToken, Map<String, Object> propertiesToModify, String sessionId) {\n-        asyncClient.abandon(lockToken, propertiesToModify, sessionId).block(operationTimeout);\n+    public void abandon(ServiceBusReceivedMessage message, Map<String, Object> propertiesToModify) {\n+        asyncClient.abandon(message, propertiesToModify).block(operationTimeout);\n     }\n \n     /**\n-     * Abandon a {@link ServiceBusReceivedMessage message} with its lock token and updates the message's properties.\n+     * Abandon a {@link ServiceBusReceivedMessage message} updates the message's properties.\n      * This will make the message available again for processing. Abandoning a message will increase the delivery count\n      * on the message.\n      *\n-     * @param lockToken Lock token of the message.\n+     * @param message The {@link ServiceBusReceivedMessage} to perform this operation.\n      * @param propertiesToModify Properties to modify on the message.\n-     * @param sessionId Session id of the message to abandon. {@code null} if there is no session.\n      * @param transactionContext in which this operation is taking part in. The transaction should be created first by\n      * {@link ServiceBusReceiverClient#createTransaction()} or {@link ServiceBusSenderClient#createTransaction()}.\n      *\n-     * @throws NullPointerException if {@code lockToken}, {@code transactionContext} or\n+     * @throws NullPointerException if {@code message}, {@code transactionContext} or\n      * {@code transactionContext.transactionId} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n      * @throws IllegalArgumentException if {@code lockToken} is an empty value.", "originalCommit": "bcbd4909c93cc727e7c4f6ab2ef0c6fb819a44dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba27cfa5747481a5c8a58d519988d001360abf61", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java\nindex baa29681b59..f0dc9c1ad7d 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java\n\n@@ -77,7 +77,6 @@ public final class ServiceBusReceiverClient implements AutoCloseable {\n      * @throws NullPointerException if {@code message} is null.\n      * @throws UnsupportedOperationException if the receiver was opened in {@link ReceiveMode#RECEIVE_AND_DELETE}\n      *     mode.\n-     * @throws IllegalArgumentException if {@code lockToken} is an empty value.\n      */\n     public void abandon(ServiceBusReceivedMessage message) {\n         asyncClient.abandon(message).block(operationTimeout);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2MzA4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r482263084", "bodyText": "Do we need this? All it does is assert that the message is equal", "author": "conniey", "createdAt": "2020-09-02T18:01:42Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientTest.java", "diffHunk": "@@ -62,10 +60,13 @@\n     @Mock\n     ServiceBusTransactionContext transactionContext;\n \n+    @Mock\n+    private ServiceBusReceivedMessage message;\n+\n     @BeforeEach\n     void setup() {\n         MockitoAnnotations.initMocks(this);\n-\n+        when(message.getLockToken()).thenReturn(LOCK_TOKEN);", "originalCommit": "bcbd4909c93cc727e7c4f6ab2ef0c6fb819a44dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba27cfa5747481a5c8a58d519988d001360abf61", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientTest.java\nindex 0a0611fe19d..de17dcb097c 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientTest.java\n\n@@ -58,7 +58,7 @@ class ServiceBusReceiverClientTest {\n     @Mock\n     private Map<String, Object> propertiesToModify;\n     @Mock\n-    ServiceBusTransactionContext transactionContext;\n+    private ServiceBusTransactionContext transactionContext;\n \n     @Mock\n     private ServiceBusReceivedMessage message;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2MzEzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r482263136", "bodyText": "private", "author": "conniey", "createdAt": "2020-09-02T18:01:47Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientTest.java", "diffHunk": "@@ -62,10 +60,13 @@\n     @Mock\n     ServiceBusTransactionContext transactionContext;", "originalCommit": "bcbd4909c93cc727e7c4f6ab2ef0c6fb819a44dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba27cfa5747481a5c8a58d519988d001360abf61", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientTest.java\nindex 0a0611fe19d..de17dcb097c 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientTest.java\n\n@@ -58,7 +58,7 @@ class ServiceBusReceiverClientTest {\n     @Mock\n     private Map<String, Object> propertiesToModify;\n     @Mock\n-    ServiceBusTransactionContext transactionContext;\n+    private ServiceBusTransactionContext transactionContext;\n \n     @Mock\n     private ServiceBusReceivedMessage message;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2NDIxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r482264216", "bodyText": "This test case is already covered below.", "author": "conniey", "createdAt": "2020-09-02T18:03:29Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "diffHunk": "@@ -343,7 +343,7 @@ void settleWithNullTransactionId(DispositionStatus dispositionStatus) {\n     }\n \n     /**\n-     * Verifies that we error if we try to complete a message without a lock token.\n+     * Verifies that we error if we try to complete a message with null value.", "originalCommit": "bcbd4909c93cc727e7c4f6ab2ef0c6fb819a44dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba27cfa5747481a5c8a58d519988d001360abf61", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\nindex 7aaf7ea5063..788f6507ab0 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java\n\n@@ -342,25 +342,6 @@ class ServiceBusReceiverAsyncClientTest {\n             isNull(), isNull(), isNull(), isNull());\n     }\n \n-    /**\n-     * Verifies that we error if we try to complete a message with null value.\n-     */\n-    @Test\n-    void completeNullLockToken() {\n-        // Arrange\n-        when(connection.getManagementNode(ENTITY_PATH, ENTITY_TYPE)).thenReturn(Mono.just(managementNode));\n-        when(managementNode.updateDisposition(any(), eq(DispositionStatus.COMPLETED), isNull(), isNull(), isNull(),\n-            isNull(), isNull(), isNull()))\n-            .thenReturn(Mono.delay(Duration.ofMillis(250)).then());\n-        \n-        StepVerifier.create(receiver.complete(null))\n-            .expectError(NullPointerException.class)\n-            .verify();\n-\n-        verify(managementNode, never()).updateDisposition(any(), eq(DispositionStatus.COMPLETED), isNull(), isNull(),\n-            isNull(), isNull(), isNull(), isNull());\n-    }\n-\n     /**\n      * Verifies that we error if we try to complete a null message.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2NTM3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14696#discussion_r482265379", "bodyText": "Doesn't look like there exists a test where we settle with a sessionId.", "author": "conniey", "createdAt": "2020-09-02T18:05:28Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverAsyncClientTest.java", "diffHunk": "@@ -279,16 +279,16 @@ void settleWithNullTransaction(DispositionStatus dispositionStatus) {\n         final Mono<Void> operation;", "originalCommit": "bcbd4909c93cc727e7c4f6ab2ef0c6fb819a44dc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "ba27cfa5747481a5c8a58d519988d001360abf61", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ba27cfa5747481a5c8a58d519988d001360abf61", "message": "Review comment", "committedDate": "2020-09-03T18:02:10Z", "type": "commit"}]}