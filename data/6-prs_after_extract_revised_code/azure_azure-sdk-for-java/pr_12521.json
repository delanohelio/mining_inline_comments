{"pr_number": 12521, "pr_title": "Fix for null pointer exception with order by by array/object type", "pr_createdAt": "2020-06-26T00:07:38Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/12521", "timeline": [{"oid": "35fd63fb70c899b8288dbe67e131766b2fb83601", "url": "https://github.com/Azure/azure-sdk-for-java/commit/35fd63fb70c899b8288dbe67e131766b2fb83601", "message": "index on FixForOrderByQuery: e599af164d9 Reliable download range error (#12342)", "committedDate": "2020-06-25T20:59:40Z", "type": "commit"}, {"oid": "d2eecdb301a91dadb2cdd65b14e64a01774d06b4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d2eecdb301a91dadb2cdd65b14e64a01774d06b4", "message": "On FixForOrderByQuery: lalalal", "committedDate": "2020-06-25T20:59:40Z", "type": "commit"}, {"oid": "6f404124112b5c9667f2dc99584400172618a5bf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6f404124112b5c9667f2dc99584400172618a5bf", "message": "merge and resolve conflicts", "committedDate": "2020-06-25T22:57:10Z", "type": "commit"}, {"oid": "fa0136ce3db41734704b4056e04d8d27dbdcfe3d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fa0136ce3db41734704b4056e04d8d27dbdcfe3d", "message": "add array/object type support for order by query", "committedDate": "2020-06-25T23:56:05Z", "type": "commit"}, {"oid": "15904856383eda5d3ce13aa73d615fbeebf5efa9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/15904856383eda5d3ce13aa73d615fbeebf5efa9", "message": "Merge branch 'master' into FixForOrderByByArrayOrObject", "committedDate": "2020-06-26T00:00:13Z", "type": "commit"}, {"oid": "a37df0acac1cc92b2811fd8e99237e29fa4c6534", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a37df0acac1cc92b2811fd8e99237e29fa4c6534", "message": "fix style", "committedDate": "2020-06-26T00:07:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNDgwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r445904802", "bodyText": "code style: \"{\" on the same line as class definition.", "author": "moderakh", "createdAt": "2020-06-26T00:15:16Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "diffHunk": "@@ -3,60 +3,130 @@\n package com.azure.cosmos.implementation.query;\n \n import com.azure.cosmos.implementation.JsonSerializable;\n-import com.azure.cosmos.implementation.Utils;\n import com.azure.cosmos.implementation.routing.MurmurHash3_128;\n import com.azure.cosmos.implementation.routing.UInt128;\n-import com.azure.cosmos.models.ModelBridgeInternal;\n-import com.fasterxml.jackson.databind.MapperFeature;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n \n public final class DistinctHash {\n \n-    private static final UInt128 ARRAY_HASH_SEED = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+    private static final UInt128 RootHashSeed = new UInt128(0xbfc2359eafc0e2b7L, 0x8846e00284c4cf1fL);\n \n-    private static final ObjectMapper OBJECT_MAPPER =\n-        new ObjectMapper()\n-            .configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true)\n-            .configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);\n+    private static class HashSeeds\n+    {", "originalCommit": "a37df0acac1cc92b2811fd8e99237e29fa4c6534", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwODMzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r445908333", "bodyText": "updated", "author": "xinlian12", "createdAt": "2020-06-26T00:29:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNDgwMg=="}], "type": "inlineReview", "revised_code": {"commit": "a29b8bd251125e39f76acb0f91d4168c30fc6bc4", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\nindex 20ea6701c70..bf5ec09d110 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n\n@@ -19,19 +19,18 @@ public final class DistinctHash {\n \n     private static final UInt128 RootHashSeed = new UInt128(0xbfc2359eafc0e2b7L, 0x8846e00284c4cf1fL);\n \n-    private static class HashSeeds\n-    {\n-        public static final UInt128 Null = new UInt128(0x1380f68bb3b0cfe4L, 0x156c918bf564ee48L);\n-        public static final UInt128 False = new UInt128(0xc1be517fe893b40cL, 0xe9fc8a4c531cd0ddL);\n-        public static final UInt128 True = new UInt128(0xf86d4abf9a412e74L, 0x788488365c8a985dL);\n-        public static final UInt128 String = new UInt128(0x61f53f0a44204cfbL, 0x09481be8ef4b56ddL);\n-        public static final UInt128 Array = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n-        public static final UInt128 Object = new UInt128(0x77b285ac511aef30L, 0x3dcf187245822449L);\n-        public static final UInt128 Integer = new UInt128(0x0320dc908e0d3e71L, 0xf575de218f09ffa5L);\n-        public static final UInt128 Long = new UInt128(0xed93baf7fdc76638L, 0x0d5733c37e079869L);\n-        public static final UInt128 Double = new UInt128(0x62fb48cc659963a0L, 0xe9e690779309c403L);\n-        public static final UInt128 ArrayIndex = new UInt128(0xfe057204216db999L, 0x5b1cc3178bd9c593L);\n-        public static final UInt128 PropertyName = new UInt128(0xc915dde058492a8aL, 0x7c8be2eba72e4634L);\n+    private static class HashSeeds {\n+        public static final UInt128 NULL = new UInt128(0x1380f68bb3b0cfe4L, 0x156c918bf564ee48L);\n+        public static final UInt128 FALSE = new UInt128(0xc1be517fe893b40cL, 0xe9fc8a4c531cd0ddL);\n+        public static final UInt128 TRUE = new UInt128(0xf86d4abf9a412e74L, 0x788488365c8a985dL);\n+        public static final UInt128 STRING = new UInt128(0x61f53f0a44204cfbL, 0x09481be8ef4b56ddL);\n+        public static final UInt128 ARRAY = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+        public static final UInt128 OBJECT = new UInt128(0x77b285ac511aef30L, 0x3dcf187245822449L);\n+        public static final UInt128 INTEGER = new UInt128(0x0320dc908e0d3e71L, 0xf575de218f09ffa5L);\n+        public static final UInt128 LONG = new UInt128(0xed93baf7fdc76638L, 0x0d5733c37e079869L);\n+        public static final UInt128 DOUBLE = new UInt128(0x62fb48cc659963a0L, 0xe9e690779309c403L);\n+        public static final UInt128 ARRAY_INDEX = new UInt128(0xfe057204216db999L, 0x5b1cc3178bd9c593L);\n+        public static final UInt128 PROPERTY_NAME = new UInt128(0xc915dde058492a8aL, 0x7c8be2eba72e4634L);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNTAxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r445905013", "bodyText": "code style: java static field name all caps:\nNull -> NULL\nPropertyName -> PROPERTY_NAME", "author": "moderakh", "createdAt": "2020-06-26T00:16:05Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "diffHunk": "@@ -3,60 +3,130 @@\n package com.azure.cosmos.implementation.query;\n \n import com.azure.cosmos.implementation.JsonSerializable;\n-import com.azure.cosmos.implementation.Utils;\n import com.azure.cosmos.implementation.routing.MurmurHash3_128;\n import com.azure.cosmos.implementation.routing.UInt128;\n-import com.azure.cosmos.models.ModelBridgeInternal;\n-import com.fasterxml.jackson.databind.MapperFeature;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n \n public final class DistinctHash {\n \n-    private static final UInt128 ARRAY_HASH_SEED = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+    private static final UInt128 RootHashSeed = new UInt128(0xbfc2359eafc0e2b7L, 0x8846e00284c4cf1fL);\n \n-    private static final ObjectMapper OBJECT_MAPPER =\n-        new ObjectMapper()\n-            .configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true)\n-            .configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);\n+    private static class HashSeeds\n+    {\n+        public static final UInt128 Null = new UInt128(0x1380f68bb3b0cfe4L, 0x156c918bf564ee48L);", "originalCommit": "a37df0acac1cc92b2811fd8e99237e29fa4c6534", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwODM3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r445908372", "bodyText": "updated.", "author": "xinlian12", "createdAt": "2020-06-26T00:30:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNTAxMw=="}], "type": "inlineReview", "revised_code": {"commit": "a29b8bd251125e39f76acb0f91d4168c30fc6bc4", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\nindex 20ea6701c70..bf5ec09d110 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n\n@@ -19,19 +19,18 @@ public final class DistinctHash {\n \n     private static final UInt128 RootHashSeed = new UInt128(0xbfc2359eafc0e2b7L, 0x8846e00284c4cf1fL);\n \n-    private static class HashSeeds\n-    {\n-        public static final UInt128 Null = new UInt128(0x1380f68bb3b0cfe4L, 0x156c918bf564ee48L);\n-        public static final UInt128 False = new UInt128(0xc1be517fe893b40cL, 0xe9fc8a4c531cd0ddL);\n-        public static final UInt128 True = new UInt128(0xf86d4abf9a412e74L, 0x788488365c8a985dL);\n-        public static final UInt128 String = new UInt128(0x61f53f0a44204cfbL, 0x09481be8ef4b56ddL);\n-        public static final UInt128 Array = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n-        public static final UInt128 Object = new UInt128(0x77b285ac511aef30L, 0x3dcf187245822449L);\n-        public static final UInt128 Integer = new UInt128(0x0320dc908e0d3e71L, 0xf575de218f09ffa5L);\n-        public static final UInt128 Long = new UInt128(0xed93baf7fdc76638L, 0x0d5733c37e079869L);\n-        public static final UInt128 Double = new UInt128(0x62fb48cc659963a0L, 0xe9e690779309c403L);\n-        public static final UInt128 ArrayIndex = new UInt128(0xfe057204216db999L, 0x5b1cc3178bd9c593L);\n-        public static final UInt128 PropertyName = new UInt128(0xc915dde058492a8aL, 0x7c8be2eba72e4634L);\n+    private static class HashSeeds {\n+        public static final UInt128 NULL = new UInt128(0x1380f68bb3b0cfe4L, 0x156c918bf564ee48L);\n+        public static final UInt128 FALSE = new UInt128(0xc1be517fe893b40cL, 0xe9fc8a4c531cd0ddL);\n+        public static final UInt128 TRUE = new UInt128(0xf86d4abf9a412e74L, 0x788488365c8a985dL);\n+        public static final UInt128 STRING = new UInt128(0x61f53f0a44204cfbL, 0x09481be8ef4b56ddL);\n+        public static final UInt128 ARRAY = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+        public static final UInt128 OBJECT = new UInt128(0x77b285ac511aef30L, 0x3dcf187245822449L);\n+        public static final UInt128 INTEGER = new UInt128(0x0320dc908e0d3e71L, 0xf575de218f09ffa5L);\n+        public static final UInt128 LONG = new UInt128(0xed93baf7fdc76638L, 0x0d5733c37e079869L);\n+        public static final UInt128 DOUBLE = new UInt128(0x62fb48cc659963a0L, 0xe9e690779309c403L);\n+        public static final UInt128 ARRAY_INDEX = new UInt128(0xfe057204216db999L, 0x5b1cc3178bd9c593L);\n+        public static final UInt128 PROPERTY_NAME = new UInt128(0xc915dde058492a8aL, 0x7c8be2eba72e4634L);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNTM5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r445905398", "bodyText": "code style xor?", "author": "moderakh", "createdAt": "2020-06-26T00:17:32Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java", "diffHunk": "@@ -55,4 +57,32 @@ public long getLow() {\n     public long getHigh() {\n         return high;\n     }\n+\n+    public UInt128 add(int value) {\n+        UInt128 add = new UInt128(value, 0);\n+        long low = this.low + add.low;\n+        long high = this.high + add.high;\n+\n+        if (low < add.low)\n+        {\n+            high++;\n+        }\n+\n+        return new UInt128(low, high);\n+    }\n+\n+    public UInt128 XOR(UInt128 other) {", "originalCommit": "a37df0acac1cc92b2811fd8e99237e29fa4c6534", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwODQ0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r445908442", "bodyText": "changed to xor.", "author": "xinlian12", "createdAt": "2020-06-26T00:30:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNTM5OA=="}], "type": "inlineReview", "revised_code": {"commit": "a29b8bd251125e39f76acb0f91d4168c30fc6bc4", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java\nindex 6c913b118ca..b31a2819642 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java\n\n@@ -71,7 +71,7 @@ public class UInt128 implements Comparable<UInt128>{\n         return new UInt128(low, high);\n     }\n \n-    public UInt128 XOR(UInt128 other) {\n+    public UInt128 xor(UInt128 other) {\n         return new UInt128(this.low ^ other.low, this.high ^ other.high);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNTUxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r445905518", "bodyText": "to be consistent with existing tests:\ndrop the \"Test\" prefix. here and other new tests..", "author": "moderakh", "createdAt": "2020-06-26T00:18:05Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/query/DistinctHashTest.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.azure.cosmos.implementation.query;\n+\n+import com.azure.cosmos.implementation.routing.UInt128;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DistinctHashTest {\n+\n+    @Test(groups = {\"unit\"})\n+    public void TestHashForNull() throws IOException {", "originalCommit": "a37df0acac1cc92b2811fd8e99237e29fa4c6534", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwODQ3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r445908479", "bodyText": "changed to *Hash", "author": "xinlian12", "createdAt": "2020-06-26T00:30:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNTUxOA=="}], "type": "inlineReview", "revised_code": {"commit": "a29b8bd251125e39f76acb0f91d4168c30fc6bc4", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/query/DistinctHashTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/query/DistinctHashTest.java\nindex f07095bed45..62c18d15e3a 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/query/DistinctHashTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/query/DistinctHashTest.java\n\n@@ -15,7 +15,7 @@ import static org.assertj.core.api.Assertions.assertThat;\n public class DistinctHashTest {\n \n     @Test(groups = {\"unit\"})\n-    public void TestHashForNull() throws IOException {\n+    public void nullHash() throws IOException {\n         UInt128 hash1 = DistinctHash.getHash(null);\n         UInt128 hash2 = DistinctHash.getHash(null);\n \n"}}, {"oid": "a29b8bd251125e39f76acb0f91d4168c30fc6bc4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a29b8bd251125e39f76acb0f91d4168c30fc6bc4", "message": "resolve comments", "committedDate": "2020-06-26T00:29:00Z", "type": "commit"}, {"oid": "a6d6bca1bcc38d4162ae42932462278146362614", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a6d6bca1bcc38d4162ae42932462278146362614", "message": "fix tests", "committedDate": "2020-06-26T00:37:57Z", "type": "commit"}, {"oid": "3d71cd196cbcaccfd3dcc69be16fa6514a9767c3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3d71cd196cbcaccfd3dcc69be16fa6514a9767c3", "message": "fix compilation", "committedDate": "2020-06-26T17:14:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1MDg5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r446050896", "bodyText": "file header for new files.", "author": "moderakh", "createdAt": "2020-06-26T08:43:23Z", "path": "sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/query/DistinctHashTest.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.azure.cosmos.implementation.query;", "originalCommit": "a6d6bca1bcc38d4162ae42932462278146362614", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNzMyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r446327325", "bodyText": "added", "author": "xinlian12", "createdAt": "2020-06-26T17:51:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1MDg5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "8178690bce9782bbefd0fdef0cf578724f9c4df3", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/query/DistinctHashTest.java b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/query/DistinctHashTest.java\nindex 62c18d15e3a..4eb22a07e78 100644\n--- a/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/query/DistinctHashTest.java\n+++ b/sdk/cosmos/azure-cosmos/src/test/java/com/azure/cosmos/implementation/query/DistinctHashTest.java\n\n@@ -1,3 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n package com.azure.cosmos.implementation.query;\n \n import com.azure.cosmos.implementation.routing.UInt128;\n"}}, {"oid": "2d8970ed692c3820048d468f4f1087e1c7431642", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2d8970ed692c3820048d468f4f1087e1c7431642", "message": "Merge branch 'master' into FixForOrderByByArrayOrObject", "committedDate": "2020-06-26T17:40:57Z", "type": "commit"}, {"oid": "8178690bce9782bbefd0fdef0cf578724f9c4df3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8178690bce9782bbefd0fdef0cf578724f9c4df3", "message": "resolve comments", "committedDate": "2020-06-26T17:50:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyODE1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r446328152", "bodyText": "the exception message is not correct you are not passing any arg to need String.format and %s", "author": "moderakh", "createdAt": "2020-06-26T17:53:20Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java", "diffHunk": "@@ -41,6 +44,17 @@ public int compare(Object obj1, Object obj2) {\n             return Double.compare(((Number) obj1).doubleValue(), ((Number) obj2).doubleValue());\n         case String:\n             return ((String) obj1).compareTo((String) obj2);\n+        case ArrayNode:\n+        case ObjectNode:\n+            try{\n+                UInt128 hash1 = DistinctHash.getHash(obj1);\n+                UInt128 hash2 = DistinctHash.getHash(obj2);\n+                return hash1.compareTo(hash2);\n+            }\n+            catch (IOException e) {\n+                throw new IllegalStateException(String.format(\"Exception for getting has %s\", e));", "originalCommit": "8178690bce9782bbefd0fdef0cf578724f9c4df3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNDgwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r446334803", "bodyText": "yea, a typo, want to pass the type and the exception message, changed to following:\nString.format(\"Exception for getting hash for type %s: %s \", type1.toString(), e.getMessage())", "author": "xinlian12", "createdAt": "2020-06-26T18:07:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyODE1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "52f37498de4dec4bbdc6112c27ba50f82901765d", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java\nindex 1fb9b9f933d..69fbdeb2409 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java\n\n@@ -52,7 +52,7 @@ public final class ItemComparator implements Comparator<Object>, Serializable {\n                 return hash1.compareTo(hash2);\n             }\n             catch (IOException e) {\n-                throw new IllegalStateException(String.format(\"Exception for getting has %s\", e));\n+                throw new IllegalStateException(String.format(\"Exception for getting hash for type %s: %s \", type1.toString(), e.getMessage()));\n             }\n \n         default:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyODQ2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r446328465", "bodyText": "static field name?\n-> ROOT_HASH_SEED", "author": "moderakh", "createdAt": "2020-06-26T17:53:59Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "diffHunk": "@@ -3,60 +3,129 @@\n package com.azure.cosmos.implementation.query;\n \n import com.azure.cosmos.implementation.JsonSerializable;\n-import com.azure.cosmos.implementation.Utils;\n import com.azure.cosmos.implementation.routing.MurmurHash3_128;\n import com.azure.cosmos.implementation.routing.UInt128;\n-import com.azure.cosmos.models.ModelBridgeInternal;\n-import com.fasterxml.jackson.databind.MapperFeature;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n \n public final class DistinctHash {\n \n-    private static final UInt128 ARRAY_HASH_SEED = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+    private static final UInt128 RootHashSeed = new UInt128(0xbfc2359eafc0e2b7L, 0x8846e00284c4cf1fL);", "originalCommit": "8178690bce9782bbefd0fdef0cf578724f9c4df3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNDExOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r446334119", "bodyText": "sorry forget this one. Updated", "author": "xinlian12", "createdAt": "2020-06-26T18:06:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyODQ2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "52f37498de4dec4bbdc6112c27ba50f82901765d", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\nindex 0abac53f466..0a2cc8f30a4 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n\n@@ -17,7 +17,7 @@ import java.util.Map;\n \n public final class DistinctHash {\n \n-    private static final UInt128 RootHashSeed = new UInt128(0xbfc2359eafc0e2b7L, 0x8846e00284c4cf1fL);\n+    private static final UInt128 ROOT_HASH_SEED = new UInt128(0xbfc2359eafc0e2b7L, 0x8846e00284c4cf1fL);\n \n     private static class HashSeeds {\n         public static final UInt128 NULL = new UInt128(0x1380f68bb3b0cfe4L, 0x156c918bf564ee48L);\n"}}, {"oid": "52f37498de4dec4bbdc6112c27ba50f82901765d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/52f37498de4dec4bbdc6112c27ba50f82901765d", "message": "resolve comments", "committedDate": "2020-06-26T18:05:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNTQ0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r446335445", "bodyText": "with this you will be loosing the cause exception stacktrace.\nYou probably want to keep the root cause exception stacktrace.", "author": "moderakh", "createdAt": "2020-06-26T18:09:05Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java", "diffHunk": "@@ -41,6 +44,17 @@ public int compare(Object obj1, Object obj2) {\n             return Double.compare(((Number) obj1).doubleValue(), ((Number) obj2).doubleValue());\n         case String:\n             return ((String) obj1).compareTo((String) obj2);\n+        case ArrayNode:\n+        case ObjectNode:\n+            try{\n+                UInt128 hash1 = DistinctHash.getHash(obj1);\n+                UInt128 hash2 = DistinctHash.getHash(obj2);\n+                return hash1.compareTo(hash2);\n+            }\n+            catch (IOException e) {\n+                throw new IllegalStateException(String.format(\"Exception for getting hash for type %s: %s \", type1.toString(), e.getMessage()));", "originalCommit": "52f37498de4dec4bbdc6112c27ba50f82901765d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MDkwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r446340904", "bodyText": "I see, good point, changed to following:\nnew IllegalStateException(String.format(\"Getting hash exception for type %s \", type1.toString()), e)", "author": "xinlian12", "createdAt": "2020-06-26T18:20:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNTQ0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1bc42dd801047a7b4a93e055981a0698980647a2", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java\nindex 69fbdeb2409..df7dd8df0d9 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java\n\n@@ -52,7 +52,7 @@ public final class ItemComparator implements Comparator<Object>, Serializable {\n                 return hash1.compareTo(hash2);\n             }\n             catch (IOException e) {\n-                throw new IllegalStateException(String.format(\"Exception for getting hash for type %s: %s \", type1.toString(), e.getMessage()));\n+                throw new IllegalStateException(String.format(\"Getting hash exception for type %s \", type1.toString()), e);\n             }\n \n         default:\n"}}, {"oid": "1bc42dd801047a7b4a93e055981a0698980647a2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1bc42dd801047a7b4a93e055981a0698980647a2", "message": "resolve comment", "committedDate": "2020-06-26T18:19:52Z", "type": "commit"}, {"oid": "5ea6aa34fb74289296d6d71d3d069d74d0c90476", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5ea6aa34fb74289296d6d71d3d069d74d0c90476", "message": "spotbugs fix", "committedDate": "2020-06-30T17:39:16Z", "type": "commit"}, {"oid": "4fd9171f858b5de74144ef40c47654c1a056a371", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4fd9171f858b5de74144ef40c47654c1a056a371", "message": "fix tests", "committedDate": "2020-06-30T20:55:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NzQ0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r447967441", "bodyText": "I think there is a possible infinite recursion scenario here.\nThis calls getHashFromJsonSerializable -> which then again calls this method getHash by casing resource to JsonSerializable", "author": "kushagraThapar", "createdAt": "2020-06-30T20:44:31Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "diffHunk": "@@ -3,60 +3,129 @@\n package com.azure.cosmos.implementation.query;\n \n import com.azure.cosmos.implementation.JsonSerializable;\n-import com.azure.cosmos.implementation.Utils;\n import com.azure.cosmos.implementation.routing.MurmurHash3_128;\n import com.azure.cosmos.implementation.routing.UInt128;\n-import com.azure.cosmos.models.ModelBridgeInternal;\n-import com.fasterxml.jackson.databind.MapperFeature;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n \n public final class DistinctHash {\n \n-    private static final UInt128 ARRAY_HASH_SEED = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+    private static final UInt128 ROOT_HASH_SEED = new UInt128(0xbfc2359eafc0e2b7L, 0x8846e00284c4cf1fL);\n \n-    private static final ObjectMapper OBJECT_MAPPER =\n-        new ObjectMapper()\n-            .configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true)\n-            .configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);\n+    private static class HashSeeds {\n+        public static final UInt128 NULL = new UInt128(0x1380f68bb3b0cfe4L, 0x156c918bf564ee48L);\n+        public static final UInt128 FALSE = new UInt128(0xc1be517fe893b40cL, 0xe9fc8a4c531cd0ddL);\n+        public static final UInt128 TRUE = new UInt128(0xf86d4abf9a412e74L, 0x788488365c8a985dL);\n+        public static final UInt128 STRING = new UInt128(0x61f53f0a44204cfbL, 0x09481be8ef4b56ddL);\n+        public static final UInt128 ARRAY = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+        public static final UInt128 OBJECT = new UInt128(0x77b285ac511aef30L, 0x3dcf187245822449L);\n+        public static final UInt128 INTEGER = new UInt128(0x0320dc908e0d3e71L, 0xf575de218f09ffa5L);\n+        public static final UInt128 LONG = new UInt128(0xed93baf7fdc76638L, 0x0d5733c37e079869L);\n+        public static final UInt128 DOUBLE = new UInt128(0x62fb48cc659963a0L, 0xe9e690779309c403L);\n+        public static final UInt128 ARRAY_INDEX = new UInt128(0xfe057204216db999L, 0x5b1cc3178bd9c593L);\n+        public static final UInt128 PROPERTY_NAME = new UInt128(0xc915dde058492a8aL, 0x7c8be2eba72e4634L);\n+    }\n \n     @SuppressWarnings(\"unchecked\")\n     public static UInt128 getHash(Object resource) throws IOException {\n+        return getHash(resource, ROOT_HASH_SEED);\n+    }\n \n-        if (resource instanceof List) {\n-            return getHashFromList((List<Object>) resource);\n+    @SuppressWarnings(\"unchecked\")\n+    private static UInt128 getHash(Object resource, UInt128 seed) throws IOException {\n+        if (resource == null) {\n+            return MurmurHash3_128.hash128(HashSeeds.NULL, seed);\n         }\n-\n         if (resource instanceof JsonSerializable) {\n-            return getHashFromJsonSerializable((JsonSerializable) resource);\n+            return getHashFromJsonSerializable((JsonSerializable) resource, seed);", "originalCommit": "5ea6aa34fb74289296d6d71d3d069d74d0c90476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzI1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r447977258", "bodyText": "it will return ObjectNode for the propertyBag, so should not have endless loop", "author": "xinlian12", "createdAt": "2020-06-30T21:02:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NzQ0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "32f54f05463fd885f18df3f342cd07f828f9d4f8", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\nindex 0a2cc8f30a4..fb24841e86e 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n\n@@ -47,7 +47,7 @@ public final class DistinctHash {\n             return getHashFromJsonSerializable((JsonSerializable) resource, seed);\n         }\n         if (resource instanceof List) {\n-            return getHashFromList((List<Object>) resource, seed);\n+            return getHashFromIterator(((List) resource).iterator(), seed);\n         }\n         if (resource instanceof Boolean) {\n             return (Boolean)resource ? MurmurHash3_128.hash128(HashSeeds.TRUE, seed) : MurmurHash3_128.hash128(HashSeeds.FALSE, seed);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2OTA5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r447969095", "bodyText": "I think this is a typo ->\nthis.high < this.high -> should be -> this.high < other.high ??", "author": "kushagraThapar", "createdAt": "2020-06-30T20:47:32Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java", "diffHunk": "@@ -55,4 +57,32 @@ public long getLow() {\n     public long getHigh() {\n         return high;\n     }\n+\n+    public UInt128 add(int value) {\n+        UInt128 add = new UInt128(value, 0);\n+        long low = this.low + add.low;\n+        long high = this.high + add.high;\n+\n+        if (low < add.low)\n+        {\n+            high++;\n+        }\n+\n+        return new UInt128(low, high);\n+    }\n+\n+    public UInt128 xor(UInt128 other) {\n+        return new UInt128(this.low ^ other.low, this.high ^ other.high);\n+    }\n+\n+    @Override\n+    public int compareTo(UInt128 other) {\n+        if (this.equals(other)) {\n+            return 0;\n+        }\n+        if ((this.high < this.high) || ((this.high == other.high) && (this.low < other.low))) {", "originalCommit": "5ea6aa34fb74289296d6d71d3d069d74d0c90476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzU1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r447977553", "bodyText": "oh, yea, definitely a typo", "author": "xinlian12", "createdAt": "2020-06-30T21:03:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2OTA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4MzU5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r447983591", "bodyText": "Updated", "author": "xinlian12", "createdAt": "2020-06-30T21:15:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2OTA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ca8fb917d5a8d63bf4aa29feca282b28369d7393", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java\nindex 5947e41123d..ba5d6b845b8 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/UInt128.java\n\n@@ -80,7 +80,7 @@ public class UInt128 implements Comparable<UInt128>{\n         if (this.equals(other)) {\n             return 0;\n         }\n-        if ((this.high < this.high) || ((this.high == other.high) && (this.low < other.low))) {\n+        if ((this.high < other.high) || ((this.high == other.high) && (this.low < other.low))) {\n             return -1;\n         }\n         return 1;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDE5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r447974195", "bodyText": "I can see a possibility to merge the logic of this function - getHashFromList and getHashFromArrayNode since the logic is exactly same.\nOr @xinlian12  do you want to keep it separate for more readability ? The only downside of keeping them separate is that if we have a bug in one logic, we could have it in other logic as well and we will have to fix them separately.", "author": "kushagraThapar", "createdAt": "2020-06-30T20:57:05Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java", "diffHunk": "@@ -3,60 +3,129 @@\n package com.azure.cosmos.implementation.query;\n \n import com.azure.cosmos.implementation.JsonSerializable;\n-import com.azure.cosmos.implementation.Utils;\n import com.azure.cosmos.implementation.routing.MurmurHash3_128;\n import com.azure.cosmos.implementation.routing.UInt128;\n-import com.azure.cosmos.models.ModelBridgeInternal;\n-import com.fasterxml.jackson.databind.MapperFeature;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.ValueNode;\n \n import java.io.IOException;\n-import java.nio.ByteBuffer;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n \n public final class DistinctHash {\n \n-    private static final UInt128 ARRAY_HASH_SEED = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+    private static final UInt128 ROOT_HASH_SEED = new UInt128(0xbfc2359eafc0e2b7L, 0x8846e00284c4cf1fL);\n \n-    private static final ObjectMapper OBJECT_MAPPER =\n-        new ObjectMapper()\n-            .configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true)\n-            .configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);\n+    private static class HashSeeds {\n+        public static final UInt128 NULL = new UInt128(0x1380f68bb3b0cfe4L, 0x156c918bf564ee48L);\n+        public static final UInt128 FALSE = new UInt128(0xc1be517fe893b40cL, 0xe9fc8a4c531cd0ddL);\n+        public static final UInt128 TRUE = new UInt128(0xf86d4abf9a412e74L, 0x788488365c8a985dL);\n+        public static final UInt128 STRING = new UInt128(0x61f53f0a44204cfbL, 0x09481be8ef4b56ddL);\n+        public static final UInt128 ARRAY = new UInt128(0xfa573b014c4dc18eL, 0xa014512c858eb115L);\n+        public static final UInt128 OBJECT = new UInt128(0x77b285ac511aef30L, 0x3dcf187245822449L);\n+        public static final UInt128 INTEGER = new UInt128(0x0320dc908e0d3e71L, 0xf575de218f09ffa5L);\n+        public static final UInt128 LONG = new UInt128(0xed93baf7fdc76638L, 0x0d5733c37e079869L);\n+        public static final UInt128 DOUBLE = new UInt128(0x62fb48cc659963a0L, 0xe9e690779309c403L);\n+        public static final UInt128 ARRAY_INDEX = new UInt128(0xfe057204216db999L, 0x5b1cc3178bd9c593L);\n+        public static final UInt128 PROPERTY_NAME = new UInt128(0xc915dde058492a8aL, 0x7c8be2eba72e4634L);\n+    }\n \n     @SuppressWarnings(\"unchecked\")\n     public static UInt128 getHash(Object resource) throws IOException {\n+        return getHash(resource, ROOT_HASH_SEED);\n+    }\n \n-        if (resource instanceof List) {\n-            return getHashFromList((List<Object>) resource);\n+    @SuppressWarnings(\"unchecked\")\n+    private static UInt128 getHash(Object resource, UInt128 seed) throws IOException {\n+        if (resource == null) {\n+            return MurmurHash3_128.hash128(HashSeeds.NULL, seed);\n         }\n-\n         if (resource instanceof JsonSerializable) {\n-            return getHashFromJsonSerializable((JsonSerializable) resource);\n+            return getHashFromJsonSerializable((JsonSerializable) resource, seed);\n+        }\n+        if (resource instanceof List) {\n+            return getHashFromList((List<Object>) resource, seed);\n+        }\n+        if (resource instanceof Boolean) {\n+            return (Boolean)resource ? MurmurHash3_128.hash128(HashSeeds.TRUE, seed) : MurmurHash3_128.hash128(HashSeeds.FALSE, seed);\n+        }\n+        if (resource instanceof Integer) {\n+            UInt128 hash = MurmurHash3_128.hash128(HashSeeds.INTEGER, seed);\n+            return MurmurHash3_128.hash128(resource, hash);\n+        }\n+        if (resource instanceof Long) {\n+            UInt128 hash = MurmurHash3_128.hash128(HashSeeds.LONG, seed);\n+            return MurmurHash3_128.hash128(resource, hash);\n+        }\n+        if (resource instanceof Double) {\n+            UInt128 hash = MurmurHash3_128.hash128(HashSeeds.DOUBLE, seed);\n+            return MurmurHash3_128.hash128(resource, hash);\n+        }\n+        if (resource instanceof String) {\n+            UInt128 hash = MurmurHash3_128.hash128(HashSeeds.STRING, seed);\n+            return MurmurHash3_128.hash128(resource, hash);\n+        }\n+        if (resource instanceof ValueNode) {\n+            return getHash(JsonSerializable.getValue((JsonNode) resource));\n+        }\n+        if (resource instanceof ArrayNode) {\n+            return getHashFromArrayNode((ArrayNode) resource, seed);\n+        }\n+        if (resource instanceof ObjectNode) {\n+            return getHashFromObjectNode((ObjectNode) resource, seed);\n         }\n \n-        final byte[] bytes = Utils.serializeObjectToByteArray(resource);\n-        UInt128 uInt128 = MurmurHash3_128.hash128(bytes, bytes.length);\n-        return uInt128;\n+        throw new IllegalArgumentException(String.format(\"Unexpected type: %s\", resource.getClass().toString()));\n     }\n \n-    private static UInt128 getHashFromJsonSerializable(JsonSerializable resource) {\n-        final ByteBuffer byteBuffer = ModelBridgeInternal.serializeJsonToByteBuffer(resource, OBJECT_MAPPER);\n-        final byte[] bytes = byteBuffer.array();\n-        return MurmurHash3_128.hash128(bytes, bytes.length);\n+    private static UInt128 getHashFromJsonSerializable(JsonSerializable resource, UInt128 seed) throws IOException {\n+        resource.populatePropertyBag();\n+        return getHash(resource.getPropertyBag(), seed);\n     }\n \n-    private static UInt128 getHashFromList(List<Object> resource) {\n-        UInt128 hash = ARRAY_HASH_SEED;\n-        for (Object obj : resource) {\n-            if (obj instanceof JsonSerializable) {\n-                byte[] bytes = hash.toByteBuffer().array();\n-                if (bytes.length == 0) {\n-                    throw new IllegalStateException(\"Failed to hash!\");\n-                }\n-                hash = MurmurHash3_128.hash128(bytes, bytes.length,\n-                                               getHashFromJsonSerializable((JsonSerializable) obj));\n-            }\n+    private static UInt128 getHashFromArrayNode(ArrayNode arrayNode, UInt128 seed) throws IOException {\n+        // Start the array with a distinct hash, so that empty array doesn't hash to another value.\n+        UInt128 hash = MurmurHash3_128.hash128(HashSeeds.ARRAY, seed);\n+\n+        for (int i = 0; i < arrayNode.size(); i++) {\n+            // Order of array items matter in equality check, so add the index just in case that property does not hold in the future.\n+            UInt128 arrayItemSeed = HashSeeds.ARRAY_INDEX.add(i);\n+            hash = MurmurHash3_128.hash128(hash, getHash(arrayNode.get(i), arrayItemSeed));\n+        }\n+        return hash;\n+    }\n+\n+    private static UInt128 getHashFromObjectNode(ObjectNode objectNode, UInt128 seed) throws IOException {\n+        UInt128 hash = MurmurHash3_128.hash128(HashSeeds.OBJECT, seed);\n+        UInt128 intermediateHash = UInt128.ZERO;\n+\n+        // Property order should not result in a different hash.\n+        // This is consistent with equality comparison.\n+        Iterator<Map.Entry<String, JsonNode>> children = objectNode.fields();\n+        while ((children.hasNext())) {\n+            Map.Entry<String, JsonNode> child = children.next();\n+            UInt128 nameHash = MurmurHash3_128.hash128(child.getKey(), HashSeeds.PROPERTY_NAME);\n+            UInt128 propertyHash = getHash(child.getValue(), nameHash);\n+            intermediateHash = intermediateHash.xor(propertyHash);\n+        }\n+\n+        if (intermediateHash.compareTo(UInt128.ZERO) == 1) {\n+            hash = MurmurHash3_128.hash128(intermediateHash, hash);\n+        }\n+\n+        return hash;\n+    }\n+\n+    private static UInt128 getHashFromList(List<Object> resource, UInt128 seed) throws IOException {\n+        UInt128 hash = MurmurHash3_128.hash128(HashSeeds.ARRAY, seed);", "originalCommit": "5ea6aa34fb74289296d6d71d3d069d74d0c90476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NDEyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r447984128", "bodyText": "I combined into one: getHashFromIterator, was not sure which way I should choose, but I agree it is better to keep the same logic in same method", "author": "xinlian12", "createdAt": "2020-06-30T21:16:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDE5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "32f54f05463fd885f18df3f342cd07f828f9d4f8", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\nindex 0a2cc8f30a4..fb24841e86e 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DistinctHash.java\n\n@@ -47,7 +47,7 @@ public final class DistinctHash {\n             return getHashFromJsonSerializable((JsonSerializable) resource, seed);\n         }\n         if (resource instanceof List) {\n-            return getHashFromList((List<Object>) resource, seed);\n+            return getHashFromIterator(((List) resource).iterator(), seed);\n         }\n         if (resource instanceof Boolean) {\n             return (Boolean)resource ? MurmurHash3_128.hash128(HashSeeds.TRUE, seed) : MurmurHash3_128.hash128(HashSeeds.FALSE, seed);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDg4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r447974881", "bodyText": "I don't think this exception message makes sense, since there is no type1 in this try catch block.", "author": "kushagraThapar", "createdAt": "2020-06-30T20:58:18Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ItemComparator.java", "diffHunk": "@@ -41,6 +44,17 @@ public int compare(Object obj1, Object obj2) {\n             return Double.compare(((Number) obj1).doubleValue(), ((Number) obj2).doubleValue());\n         case String:\n             return ((String) obj1).compareTo((String) obj2);\n+        case ArrayNode:\n+        case ObjectNode:\n+            try{\n+                UInt128 hash1 = DistinctHash.getHash(obj1);\n+                UInt128 hash2 = DistinctHash.getHash(obj2);\n+                return hash1.compareTo(hash2);\n+            }\n+            catch (IOException e) {\n+                throw new IllegalStateException(String.format(\"Getting hash exception for type %s \", type1.toString()), e);", "originalCommit": "5ea6aa34fb74289296d6d71d3d069d74d0c90476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NTA1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r447985058", "bodyText": "hmmm, we could remove the type from the exception message, but thought it might give some hint which type is having hash issue?", "author": "xinlian12", "createdAt": "2020-06-30T21:18:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDg4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNzM0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r448027349", "bodyText": "why only type1 and not type2 ?\nAlso, what does type1.toString() represents ?", "author": "kushagraThapar", "createdAt": "2020-06-30T23:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDg4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyODkyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12521#discussion_r448028927", "bodyText": "since we can only reach to this step when type1 equals type2, so I think either should work.\nit will tell us whether it is objectNode or arrayNode. (The name of the ItemType enum)", "author": "xinlian12", "createdAt": "2020-06-30T23:11:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDg4MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "32f54f05463fd885f18df3f342cd07f828f9d4f8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/32f54f05463fd885f18df3f342cd07f828f9d4f8", "message": "resolve comments and clean", "committedDate": "2020-06-30T21:14:22Z", "type": "commit"}, {"oid": "ca8fb917d5a8d63bf4aa29feca282b28369d7393", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ca8fb917d5a8d63bf4aa29feca282b28369d7393", "message": "fix", "committedDate": "2020-06-30T21:15:07Z", "type": "commit"}, {"oid": "f879e3d26f2e8962a46bc485d75ea5bf8967cda2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f879e3d26f2e8962a46bc485d75ea5bf8967cda2", "message": "fix", "committedDate": "2020-07-01T06:18:15Z", "type": "commit"}]}