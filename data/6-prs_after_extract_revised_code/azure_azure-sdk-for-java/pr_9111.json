{"pr_number": 9111, "pr_title": "Cosmos DB V4 Spotbug analysis", "pr_createdAt": "2020-03-15T10:37:31Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/9111", "timeline": [{"oid": "0aad210c626ff1799c97fa3584d3115a7877aaf1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0aad210c626ff1799c97fa3584d3115a7877aaf1", "message": "Fix: RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE", "committedDate": "2020-03-15T10:25:51Z", "type": "commit"}, {"oid": "27a55a027e5e75033f1e0a6ce47e5b1e2247c306", "url": "https://github.com/Azure/azure-sdk-for-java/commit/27a55a027e5e75033f1e0a6ce47e5b1e2247c306", "message": "suppressing  IS2_INCONSISTENT_SYNC (opened issue to track it issue:9037", "committedDate": "2020-03-15T10:25:51Z", "type": "commit"}, {"oid": "85a18abc398e86caa0dd979d9a59511b8a8c5644", "url": "https://github.com/Azure/azure-sdk-for-java/commit/85a18abc398e86caa0dd979d9a59511b8a8c5644", "message": "Fix: SIC_INNER_SHOULD_BE_STATIC", "committedDate": "2020-03-15T10:25:51Z", "type": "commit"}, {"oid": "7f0dfc2e1aa1e1387409aa837976cb1772abeec6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7f0dfc2e1aa1e1387409aa837976cb1772abeec6", "message": "Fix: RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE", "committedDate": "2020-03-15T10:25:51Z", "type": "commit"}, {"oid": "524d12e61e114614ef5fb6727e2ff2381dc71454", "url": "https://github.com/Azure/azure-sdk-for-java/commit/524d12e61e114614ef5fb6727e2ff2381dc71454", "message": "Fix:NP_NULL_ON_SOME_PATH", "committedDate": "2020-03-15T10:25:51Z", "type": "commit"}, {"oid": "d2f4eec0f0a4c870a7648c2044d4a819c5a5685a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d2f4eec0f0a4c870a7648c2044d4a819c5a5685a", "message": "Fix: DM_DEFAULT_ENCODING", "committedDate": "2020-03-15T10:25:51Z", "type": "commit"}, {"oid": "233fdf3389b82c2830bec36a9a88c70ccfa7ee94", "url": "https://github.com/Azure/azure-sdk-for-java/commit/233fdf3389b82c2830bec36a9a88c70ccfa7ee94", "message": "Fix:SS_SHOULD_BE_STATIC", "committedDate": "2020-03-15T10:25:52Z", "type": "commit"}, {"oid": "ec831e408bf4ae8b21fe6c6c29705a76c5d148e0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ec831e408bf4ae8b21fe6c6c29705a76c5d148e0", "message": "Fix: NM_METHOD_NAMING_CONVENTION", "committedDate": "2020-03-15T10:27:27Z", "type": "commit"}, {"oid": "c26780759cb9bc68bc5839ded6770de1ec25eb18", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c26780759cb9bc68bc5839ded6770de1ec25eb18", "message": "Fix: DM_CONVERT_CASE", "committedDate": "2020-03-15T10:27:27Z", "type": "commit"}, {"oid": "77609c21cb75f6bbf00ec6bb652efd1d4792d451", "url": "https://github.com/Azure/azure-sdk-for-java/commit/77609c21cb75f6bbf00ec6bb652efd1d4792d451", "message": "Fix: SE_COMPARATOR_SHOULD_BE_SERIALIZABLE", "committedDate": "2020-03-15T10:27:27Z", "type": "commit"}, {"oid": "8ac2cfea97041baad9bc436e505ce95e18d26581", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8ac2cfea97041baad9bc436e505ce95e18d26581", "message": "Fix: SE_NO_SERIALVERSIONID", "committedDate": "2020-03-15T10:27:27Z", "type": "commit"}, {"oid": "5e99475edc3849257c507df51b60bf0258ef9d93", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5e99475edc3849257c507df51b60bf0258ef9d93", "message": "Fix: DM_BOXED_PRIMITIVE_FOR_PARSING", "committedDate": "2020-03-15T10:27:27Z", "type": "commit"}, {"oid": "462e9d9b79e9fb50a591e8c83c2a4b2bd4a29a5d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/462e9d9b79e9fb50a591e8c83c2a4b2bd4a29a5d", "message": "Fix: BC_UNCONFIRMED_CAST_OF_RETURN_VALUE", "committedDate": "2020-03-15T10:27:27Z", "type": "commit"}, {"oid": "71fdb1ac3cdaed1f98829f91a7d9c7cd74d034de", "url": "https://github.com/Azure/azure-sdk-for-java/commit/71fdb1ac3cdaed1f98829f91a7d9c7cd74d034de", "message": "Fix: RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE", "committedDate": "2020-03-15T10:27:27Z", "type": "commit"}, {"oid": "4d07191251f6cf382b3f79c2893da2c282c0c25e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4d07191251f6cf382b3f79c2893da2c282c0c25e", "message": "Fix: SA_FIELD_SELF_ASSIGNMENT", "committedDate": "2020-03-15T10:27:28Z", "type": "commit"}, {"oid": "1cb0e76c1c5081f2f507ef8b65ede37c45ae229f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1cb0e76c1c5081f2f507ef8b65ede37c45ae229f", "message": "Fix: SF_SWITCH_FALLTHROUGH", "committedDate": "2020-03-15T10:27:28Z", "type": "commit"}, {"oid": "39270f10d04b7c730d7e0696560a4704dd87d13e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/39270f10d04b7c730d7e0696560a4704dd87d13e", "message": "Fix: URF_UNREAD_FIELD", "committedDate": "2020-03-15T10:27:28Z", "type": "commit"}, {"oid": "2d4cd78d8626b3c2fb184312fd760dc47a985100", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2d4cd78d8626b3c2fb184312fd760dc47a985100", "message": "Fix: SF_SWITCH_NO_DEFAULT", "committedDate": "2020-03-15T10:27:28Z", "type": "commit"}, {"oid": "646a458fb741097fe74561c60573692d49102845", "url": "https://github.com/Azure/azure-sdk-for-java/commit/646a458fb741097fe74561c60573692d49102845", "message": "Fix: NM_METHOD_NAMING_CONVENTION", "committedDate": "2020-03-15T10:27:28Z", "type": "commit"}, {"oid": "124ed1acba7e82230b959c64976a36644e518ef9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/124ed1acba7e82230b959c64976a36644e518ef9", "message": "QueryMetricesTextWriter: Follow naming convention for static final vars", "committedDate": "2020-03-15T10:27:28Z", "type": "commit"}, {"oid": "c6d84c5378f41752cc8c28ba3a49f581ec461cec", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c6d84c5378f41752cc8c28ba3a49f581ec461cec", "message": "Fix: NM_FIELD_NAMING_CONVENTION", "committedDate": "2020-03-15T10:27:28Z", "type": "commit"}, {"oid": "c31528fdd4156a894ba96765dbb397fedc844463", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c31528fdd4156a894ba96765dbb397fedc844463", "message": "Fix: ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD", "committedDate": "2020-03-15T10:27:28Z", "type": "commit"}, {"oid": "4396fad04624d3606e98af8effada165f06a3a41", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4396fad04624d3606e98af8effada165f06a3a41", "message": "Fix: WMI_WRONG_MAP_ITERATOR", "committedDate": "2020-03-15T10:27:28Z", "type": "commit"}, {"oid": "76ca02052600b1dd553f4e90eb36e3b4900f6539", "url": "https://github.com/Azure/azure-sdk-for-java/commit/76ca02052600b1dd553f4e90eb36e3b4900f6539", "message": "Fix: VO_VOLATILE_INCREMENT", "committedDate": "2020-03-15T10:27:28Z", "type": "commit"}, {"oid": "a2ad7024a9998a2fc70dfef37d2af423c091a44e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a2ad7024a9998a2fc70dfef37d2af423c091a44e", "message": "Fix: DC_DOUBLECHECK", "committedDate": "2020-03-15T10:27:28Z", "type": "commit"}, {"oid": "29271ef6b7a63e04f41abc5cfccfe6e9f4a20597", "url": "https://github.com/Azure/azure-sdk-for-java/commit/29271ef6b7a63e04f41abc5cfccfe6e9f4a20597", "message": "Fix: SE_BAD_FIELD", "committedDate": "2020-03-15T10:27:28Z", "type": "commit"}, {"oid": "56b042b5e2ed5baec1777405078a6986c4e9e0a9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/56b042b5e2ed5baec1777405078a6986c4e9e0a9", "message": "Fix: REC_CATCH_EXCEPTION", "committedDate": "2020-03-15T10:27:28Z", "type": "commit"}, {"oid": "79d85b1e530150f93e4c62281cabb1b7d5d926e0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/79d85b1e530150f93e4c62281cabb1b7d5d926e0", "message": "Fix: UPM_UNCALLED_PRIVATE_METHOD (Removing unused private methods)", "committedDate": "2020-03-15T10:27:29Z", "type": "commit"}, {"oid": "019d282f00dc4091f82e248ccfd359a47761b024", "url": "https://github.com/Azure/azure-sdk-for-java/commit/019d282f00dc4091f82e248ccfd359a47761b024", "message": "Fix: PZLA_PREFER_ZERO_LENGTH_ARRAYS", "committedDate": "2020-03-15T10:27:29Z", "type": "commit"}, {"oid": "1a635229c63a1fd55295d5d9955cb3f559939bd6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1a635229c63a1fd55295d5d9955cb3f559939bd6", "message": "Fix: URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD", "committedDate": "2020-03-15T10:27:29Z", "type": "commit"}, {"oid": "33f1f8a445a4467decc26e6e2dd7c2864ffbc05f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/33f1f8a445a4467decc26e6e2dd7c2864ffbc05f", "message": "Fix: DC_PARTIALLY_CONSTRUCTED", "committedDate": "2020-03-15T10:27:29Z", "type": "commit"}, {"oid": "ec17ed37a499c7e981f103a1c3c5385b10ce99d0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ec17ed37a499c7e981f103a1c3c5385b10ce99d0", "message": "Fix: RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT", "committedDate": "2020-03-15T10:27:29Z", "type": "commit"}, {"oid": "eee56e08e96b85b4e1d1e8194cfddf3c14012335", "url": "https://github.com/Azure/azure-sdk-for-java/commit/eee56e08e96b85b4e1d1e8194cfddf3c14012335", "message": "Fix: NP_NONNULL_PARAM_VIOLATION", "committedDate": "2020-03-15T10:27:29Z", "type": "commit"}, {"oid": "bf62b5c43703c894c0f038343d1ff1e17a63eaac", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bf62b5c43703c894c0f038343d1ff1e17a63eaac", "message": "Fix: RV_RETURN_VALUE_IGNORED_INFERRED", "committedDate": "2020-03-15T10:27:29Z", "type": "commit"}, {"oid": "bfa94fb58c2f163601c7e95bd57138e40a3aeffd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bfa94fb58c2f163601c7e95bd57138e40a3aeffd", "message": "Fix: DLS_DEAD_LOCAL_STORE", "committedDate": "2020-03-15T10:27:29Z", "type": "commit"}, {"oid": "2430604e2cb70575b6d96e1834a9bb073f49b633", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2430604e2cb70575b6d96e1834a9bb073f49b633", "message": "Fix: NP_LOAD_OF_KNOWN_NULL_VALUE", "committedDate": "2020-03-15T10:27:29Z", "type": "commit"}, {"oid": "239975a60b932e0c93957acaecc49707df0a52e4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/239975a60b932e0c93957acaecc49707df0a52e4", "message": "Fix: ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD", "committedDate": "2020-03-15T10:27:29Z", "type": "commit"}, {"oid": "d178c60ac315e675e966bfbd2193813567dab011", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d178c60ac315e675e966bfbd2193813567dab011", "message": "Fix: UUF_UNUSED_FIELD", "committedDate": "2020-03-15T10:27:29Z", "type": "commit"}, {"oid": "b6ae3563bc1bf83b58d759211057c4433f7dfe64", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b6ae3563bc1bf83b58d759211057c4433f7dfe64", "message": "IL_INFINITE_RECURSIVE_LOOP", "committedDate": "2020-03-15T10:27:30Z", "type": "commit"}, {"oid": "c91d31853b1c250a966c04243dc2f1fbb4b78c7e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c91d31853b1c250a966c04243dc2f1fbb4b78c7e", "message": "Fix: CO_ABSTRACT_SELF", "committedDate": "2020-03-15T10:27:30Z", "type": "commit"}, {"oid": "779f6ccfb8b5d2ebb884d5c0cc40a660a3044639", "url": "https://github.com/Azure/azure-sdk-for-java/commit/779f6ccfb8b5d2ebb884d5c0cc40a660a3044639", "message": "Fix: DM_STRING_TOSTRING (Remove redudent toString calls)", "committedDate": "2020-03-15T10:27:30Z", "type": "commit"}, {"oid": "5307a2b02bfa76aa18cfa5d276050be37f8bec67", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5307a2b02bfa76aa18cfa5d276050be37f8bec67", "message": "Fix: MS_SHOULD_BE_FINAL (Adding final qualifier)", "committedDate": "2020-03-15T10:27:30Z", "type": "commit"}, {"oid": "1a09a8272a702ac07322ff8b689993fa0202af50", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1a09a8272a702ac07322ff8b689993fa0202af50", "message": "Fix: CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE (implementing Clonable)", "committedDate": "2020-03-15T10:27:30Z", "type": "commit"}, {"oid": "134ff1597d12b81cf6b0885f164765c7305baf13", "url": "https://github.com/Azure/azure-sdk-for-java/commit/134ff1597d12b81cf6b0885f164765c7305baf13", "message": "Fix: DB_DUPLICATE_SWITCH_CLAUSES", "committedDate": "2020-03-15T10:27:30Z", "type": "commit"}, {"oid": "80a03689ac831366ff0da1de4e6c1e3e3a8d9a81", "url": "https://github.com/Azure/azure-sdk-for-java/commit/80a03689ac831366ff0da1de4e6c1e3e3a8d9a81", "message": "Fix: UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR", "committedDate": "2020-03-15T10:27:30Z", "type": "commit"}, {"oid": "2f02e82d9e2a5809066ad4384498824afb1b7226", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2f02e82d9e2a5809066ad4384498824afb1b7226", "message": "Fix: ES_COMPARING_STRINGS_WITH_EQ", "committedDate": "2020-03-15T10:27:30Z", "type": "commit"}, {"oid": "e8e900d75b0c96d53f50562bd5a7fb114abfc176", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e8e900d75b0c96d53f50562bd5a7fb114abfc176", "message": "Fix: UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD", "committedDate": "2020-03-15T10:27:30Z", "type": "commit"}, {"oid": "c691f9d27cd72abaa5bf8ecd062283adfcee72fc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c691f9d27cd72abaa5bf8ecd062283adfcee72fc", "message": "Fix: NP_NULL_PARAM_DEREF", "committedDate": "2020-03-15T10:27:30Z", "type": "commit"}, {"oid": "f7cdcc45c0700135744555c6024d2ddd4d378790", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f7cdcc45c0700135744555c6024d2ddd4d378790", "message": "Fix: EI_EXPOSE_REP2, EI_EXPOSE_REP", "committedDate": "2020-03-15T10:27:30Z", "type": "commit"}, {"oid": "1a4c175cf2689f9d05be63a03cfd3ab812e04d80", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1a4c175cf2689f9d05be63a03cfd3ab812e04d80", "message": "Fix: UC_USELESS_OBJECT", "committedDate": "2020-03-15T10:27:30Z", "type": "commit"}, {"oid": "569630edd0aca0d14fe56fffb93ffeaade5b3f82", "url": "https://github.com/Azure/azure-sdk-for-java/commit/569630edd0aca0d14fe56fffb93ffeaade5b3f82", "message": "Fix: UC_USELESS_CONDITION (removed useless conditaion)", "committedDate": "2020-03-15T10:27:31Z", "type": "commit"}, {"oid": "e05d64529ff0191518849fb3979c416832173458", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e05d64529ff0191518849fb3979c416832173458", "message": "Fix:ISC_INSTANTIATE_STATIC_CLASS", "committedDate": "2020-03-15T10:27:31Z", "type": "commit"}, {"oid": "2d211e946afb3c850467dea0c6d063cb7a2db423", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2d211e946afb3c850467dea0c6d063cb7a2db423", "message": "Fix: CN_IDIOM_NO_SUPER_CALL", "committedDate": "2020-03-15T10:27:31Z", "type": "commit"}, {"oid": "7ec644ec9264201fed1ca355ae5af4ddff2b6105", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7ec644ec9264201fed1ca355ae5af4ddff2b6105", "message": "Fix: DE_MIGHT_IGNORE", "committedDate": "2020-03-15T10:27:31Z", "type": "commit"}, {"oid": "ca75f4ee7ede7b31f2886bd4bcebbfdd7891d429", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ca75f4ee7ede7b31f2886bd4bcebbfdd7891d429", "message": "Fix: INT_BAD_COMPARISON_WITH_SIGNED_BYTE", "committedDate": "2020-03-15T10:27:31Z", "type": "commit"}, {"oid": "640d5776b0db4dfb2be522d5d9885e73de7f6bec", "url": "https://github.com/Azure/azure-sdk-for-java/commit/640d5776b0db4dfb2be522d5d9885e73de7f6bec", "message": "Fix: HE_HASHCODE_USE_OBJECT_EQUALS", "committedDate": "2020-03-15T10:27:31Z", "type": "commit"}, {"oid": "9701022890709d0b1f9bb3b56b2bb10815c0b52d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9701022890709d0b1f9bb3b56b2bb10815c0b52d", "message": "Remove unneed Double creation, handle NP_BOOLEAN_RETURN_NULL", "committedDate": "2020-03-15T10:27:31Z", "type": "commit"}, {"oid": "328aa0028e2fce47814581998e693f153d9f7fc1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/328aa0028e2fce47814581998e693f153d9f7fc1", "message": "Fix: HE_EQUALS_USE_HASHCODE", "committedDate": "2020-03-15T10:27:31Z", "type": "commit"}, {"oid": "ab480fb85c4a23a342c1ccdd42bea2557bb068f1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ab480fb85c4a23a342c1ccdd42bea2557bb068f1", "message": "Fix: EQ_SELF_USE_OBJECT [implementing equals(Object)]", "committedDate": "2020-03-15T10:27:31Z", "type": "commit"}, {"oid": "ea76bb8b1039c68a6bbcd3d02106bb7f74b5e8e6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ea76bb8b1039c68a6bbcd3d02106bb7f74b5e8e6", "message": "Fix: BIT_SIGNED_CHECK", "committedDate": "2020-03-15T10:27:31Z", "type": "commit"}, {"oid": "c1db0c36998909783f2892b20d1842f1744fc565", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c1db0c36998909783f2892b20d1842f1744fc565", "message": "Fix: EQ_UNUSUAL", "committedDate": "2020-03-15T10:27:31Z", "type": "commit"}, {"oid": "0020ae6c0a6a85690be0a2b4caa6cc0e46a7c080", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0020ae6c0a6a85690be0a2b4caa6cc0e46a7c080", "message": "Fix: BC_VACUOUS_INSTANCEOF", "committedDate": "2020-03-15T10:27:31Z", "type": "commit"}, {"oid": "77e14af63adb0985ae178890baf812184795ce1c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/77e14af63adb0985ae178890baf812184795ce1c", "message": "Fix: LI_LAZY_INIT_STATIC", "committedDate": "2020-03-15T10:27:31Z", "type": "commit"}, {"oid": "6edf1361624161c7e3f3609fe84c61b0b2bb85b4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6edf1361624161c7e3f3609fe84c61b0b2bb85b4", "message": "Fix: SIO_SUPERFLUOUS_INSTANCEOF", "committedDate": "2020-03-15T10:27:32Z", "type": "commit"}, {"oid": "adecdd207064baa9260be962a99656587f795462", "url": "https://github.com/Azure/azure-sdk-for-java/commit/adecdd207064baa9260be962a99656587f795462", "message": "Fix: UC_USELESS_VOID_METHOD", "committedDate": "2020-03-15T10:27:32Z", "type": "commit"}, {"oid": "ff38111bebee7950668d766083fb3b1256b9d65a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ff38111bebee7950668d766083fb3b1256b9d65a", "message": "Fix:NM_CONFUSING. Follow convention, rename getEtag to getETag", "committedDate": "2020-03-15T10:27:32Z", "type": "commit"}, {"oid": "3f82cf13cea1b610fffe1da28513e04fdf291b86", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3f82cf13cea1b610fffe1da28513e04fdf291b86", "message": "Fix: RV_NEGATING_RESULT_OF_COMPARETO", "committedDate": "2020-03-15T10:27:32Z", "type": "commit"}, {"oid": "316b8a73c0cbb60d6d27b1125019a826f2591f22", "url": "https://github.com/Azure/azure-sdk-for-java/commit/316b8a73c0cbb60d6d27b1125019a826f2591f22", "message": "Fix: NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE", "committedDate": "2020-03-15T10:27:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5MjM0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r393292346", "bodyText": "@David-Noble-at-work  please review the RNTBD changes.", "author": "moderakh", "createdAt": "2020-03-16T20:30:23Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/RntbdTransportClient.java", "diffHunk": "@@ -151,7 +152,7 @@ public String toString() {\n     }\n \n     private static Tag tag(long id) {\n-        return Tag.of(TAG_NAME, Strings.padStart(Long.toHexString(id).toUpperCase(), 4, '0'));\n+        return Tag.of(TAG_NAME, Strings.padStart(Long.toHexString(id).toUpperCase(Locale.ROOT), 4, '0'));", "originalCommit": "316b8a73c0cbb60d6d27b1125019a826f2591f22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0OTM5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394049395", "bodyText": "LGTM", "author": "David-Noble-at-work", "createdAt": "2020-03-18T00:48:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5MjM0Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5NDM5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r393294395", "bodyText": "anyhow. even if that's the case, why removing the additional sanity check is required?\nDoes Spotbug enforce this?", "author": "moderakh", "createdAt": "2020-03-16T20:35:04Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/DocumentQueryExecutionContextBase.java", "diffHunk": "@@ -215,7 +215,9 @@ private RxDocumentServiceRequest createQueryDocumentServiceRequest(Map<String, S\n         switch (this.client.getQueryCompatibilityMode()) {\n         case SqlQuery:\n             SqlParameterList params = querySpec.getParameters();\n-            Utils.checkStateOrThrow(params != null && params.size() > 0, \"query.parameters\",\n+            // SqlQuerySpec::getParameters is guaranteed to return non-null SqlParameterList list\n+            // hence no null check for params is necessary.\n+            Utils.checkStateOrThrow(params.size() > 0, \"query.parameters\",", "originalCommit": "316b8a73c0cbb60d6d27b1125019a826f2591f22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMjgzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394002835", "bodyText": "yes, it was imposed by spotbug. The spotbug resolved that the following method never return a null, looking at the logic it seems true.\npublic SqlParameterList getParameters() {\n    if (this.parameters == null) {\n        Collection<SqlParameter> sqlParameters = super.getCollection(\"parameters\", SqlParameter.class);\n        if (sqlParameters == null) {\n            sqlParameters = new ArrayList<SqlParameter>();\n        }\n\n        this.parameters = new SqlParameterList(sqlParameters);\n    }\n\n    return this.parameters;\n}", "author": "anuchandy", "createdAt": "2020-03-17T22:18:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5NDM5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzODA0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394038040", "bodyText": "ok thanks.", "author": "moderakh", "createdAt": "2020-03-18T00:01:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5NDM5NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5NTE1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r393295156", "bodyText": "@mbhaskar  please review the query component.", "author": "moderakh", "createdAt": "2020-03-16T20:36:38Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/metrics/QueryMetricsTextWriter.java", "diffHunk": "@@ -21,101 +21,103 @@\n \n     // QueryMetrics\n     private static final String ActivityIds = \"Activity Ids\";\n-    private static final String RetrievedDocumentCount = \"Retrieved Document Count\";\n-    private static final String RetrievedDocumentSize = \"Retrieved Document Size\";\n-    private static final String OutputDocumentCount = \"Output Document Count\";\n-    private static final String OutputDocumentSize = \"Output Document Size\";\n-    private static final String IndexUtilizationText = \"Index Utilization\";\n-    private static final String TotalQueryExecutionTime = \"Total Query Execution Time\";\n+    private static final String RETRIEVED_DOCUMENT_COUNT = \"Retrieved Document Count\";", "originalCommit": "316b8a73c0cbb60d6d27b1125019a826f2591f22", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b972e8c088bb80842e7fa0633740f49128f1991b", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/metrics/QueryMetricsTextWriter.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/metrics/QueryMetricsTextWriter.java\nindex b38496c89a4..b6922834d2f 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/metrics/QueryMetricsTextWriter.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/metrics/QueryMetricsTextWriter.java\n\n@@ -43,7 +43,7 @@ public class QueryMetricsTextWriter extends QueryMetricsWriter {\n \n     // RuntimeExecutionTimes\n     private static final String RUNTIME_EXECUTION_TIMES = \"Runtime Execution Times\";\n-    private static final String TotalExecutionTime = \"Query Engine Execution Time\";\n+    private static final String TOTAL_EXECUTION_TIME = \"Query Engine Execution Time\";\n     private static final String SYSTEM_FUNCTION_EXECUTION_TIME = \"System Function Execution Time\";\n     private static final String USER_DEFINED_FUNCTION_EXECUTION_TIME = \"User-defined Function Execution Time\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5ODU0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r393298543", "bodyText": "bug: I don't think you need Nullable from this lib.", "author": "moderakh", "createdAt": "2020-03-16T20:43:35Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/JsonSerializable.java", "diffHunk": "@@ -17,6 +17,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import io.micrometer.core.lang.Nullable;", "originalCommit": "316b8a73c0cbb60d6d27b1125019a826f2591f22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyNjMwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r393826301", "bodyText": "@moderakh  - Though everywhere in the code, we have this annotation (from micrometer). But I agree, we should replace this with @reactor.util.annotation.Nullable as there is no need to depend on micrometer for Nullable annotation", "author": "kushagraThapar", "createdAt": "2020-03-17T16:53:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5ODU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNDYyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394004621", "bodyText": "yes, we can use micrometer or reactor, both have same effect. Or better, we could use javax.annotation.Nonnull, (which is used by micrometer or reactor Nullable annotations).", "author": "anuchandy", "createdAt": "2020-03-17T22:23:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5ODU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNDA4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394034089", "bodyText": "My concern with javax.annotation.Nonnull  -> I recently tested our SDK with Java 11 and this was giving issues as there is no module for javax, so I had to change them to reactor Nullable annotation.\nThough java 11 is far in the future, but something worth considering.", "author": "kushagraThapar", "createdAt": "2020-03-17T23:47:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5ODU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzOTkyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394039921", "bodyText": "thanks, Kushagra for sharing this, sounds good, will use Reactor NonNull", "author": "anuchandy", "createdAt": "2020-03-18T00:09:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5ODU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NzMyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394057320", "bodyText": "done in the lastest commit.", "author": "anuchandy", "createdAt": "2020-03-18T01:22:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5ODU0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b972e8c088bb80842e7fa0633740f49128f1991b", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/JsonSerializable.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/JsonSerializable.java\nindex 27a808099da..de4b7509341 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/JsonSerializable.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/JsonSerializable.java\n\n@@ -16,8 +16,8 @@ import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import reactor.util.annotation.Nullable;\n \n-import io.micrometer.core.lang.Nullable;\n import java.io.IOException;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Modifier;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMjcwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r393302701", "bodyText": "@mbhaskar isn't this method needed in future?", "author": "moderakh", "createdAt": "2020-03-16T20:50:43Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java", "diffHunk": "@@ -2829,41 +2824,6 @@ private RxDocumentServiceRequest getPermissionRequest(String userLink, Permissio\n                 Utils.joinPath(Paths.OFFERS_PATH_SEGMENT, null));\n     }\n \n-    private <T extends Resource> Flux<FeedResponse<T>> readFeedCollectionChild(FeedOptions options, ResourceType resourceType,", "originalCommit": "316b8a73c0cbb60d6d27b1125019a826f2591f22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNTkxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394025917", "bodyText": "If required, can we please comment it out, instead of removing it ?", "author": "kushagraThapar", "createdAt": "2020-03-17T23:21:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMjcwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyODk5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394028998", "bodyText": "Yes, this is useful when we want to get back readFeed instead of query(*). Can we please have leave this method here.", "author": "mbhaskar", "createdAt": "2020-03-17T23:32:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMjcwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MDI3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394040276", "bodyText": "Ok will comment out", "author": "anuchandy", "createdAt": "2020-03-18T00:11:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMjcwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NzI4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394057286", "bodyText": "done in the lastest commit.", "author": "anuchandy", "createdAt": "2020-03-18T01:22:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMjcwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b972e8c088bb80842e7fa0633740f49128f1991b", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java\nindex d709afc684e..422b1a24455 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentClientImpl.java\n\n@@ -2824,6 +2824,41 @@ public class RxDocumentClientImpl implements AsyncDocumentClient, IAuthorization\n                 Utils.joinPath(Paths.OFFERS_PATH_SEGMENT, null));\n     }\n \n+//    private <T extends Resource> Flux<FeedResponse<T>> readFeedCollectionChild(FeedOptions options, ResourceType resourceType,\n+//                                                                               Class<T> klass, String resourceLink) {\n+//        if (options == null) {\n+//            options = new FeedOptions();\n+//        }\n+//\n+//        int maxPageSize = options.getMaxItemCount() != null ? options.getMaxItemCount() : -1;\n+//\n+//        final FeedOptions finalFeedOptions = options;\n+//        RequestOptions requestOptions = new RequestOptions();\n+//        requestOptions.setPartitionKey(options.getPartitionKey());\n+//        BiFunction<String, Integer, RxDocumentServiceRequest> createRequestFunc = (continuationToken, pageSize) -> {\n+//            Map<String, String> requestHeaders = new HashMap<>();\n+//            if (continuationToken != null) {\n+//                requestHeaders.put(HttpConstants.HttpHeaders.CONTINUATION, continuationToken);\n+//            }\n+//            requestHeaders.put(HttpConstants.HttpHeaders.PAGE_SIZE, Integer.toString(pageSize));\n+//            RxDocumentServiceRequest request = RxDocumentServiceRequest.create(OperationType.ReadFeed,\n+//                resourceType, resourceLink, requestHeaders, finalFeedOptions);\n+//            return request;\n+//        };\n+//\n+//        Function<RxDocumentServiceRequest, Mono<FeedResponse<T>>> executeFunc = request -> {\n+//            return ObservableHelper.inlineIfPossibleAsObs(() -> {\n+//                Mono<Utils.ValueHolder<DocumentCollection>> collectionObs = this.collectionCache.resolveCollectionAsync(request);\n+//                Mono<RxDocumentServiceRequest> requestObs = this.addPartitionKeyInformation(request, null, null, requestOptions, collectionObs);\n+//\n+//                return requestObs.flatMap(req -> this.readFeed(req)\n+//                    .map(response -> toFeedResponsePage(response, klass)));\n+//            }, this.resetSessionTokenRetryPolicy.getRequestPolicy());\n+//        };\n+//\n+//        return Paginator.getPaginatedQueryResultAsObservable(options, createRequestFunc, executeFunc, klass, maxPageSize);\n+//    }\n+\n     private <T extends Resource> Flux<FeedResponse<T>> readFeed(FeedOptions options, ResourceType resourceType, Class<T> klass, String resourceLink) {\n         if (options == null) {\n             options = new FeedOptions();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMzQ3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r393303475", "bodyText": "@milismsft to review change feed related change.", "author": "moderakh", "createdAt": "2020-03-16T20:52:09Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/changefeed/implementation/LeaseStoreManagerImpl.java", "diffHunk": "@@ -136,14 +136,6 @@ public LeaseStoreManagerBuilderDefinition hostName(String hostName) {\n             this.settings.getLeaseCollectionLink(),\n             this.requestOptionsFactory);\n \n-        if (this.settings.getLeaseCollectionLink() == null) {", "originalCommit": "316b8a73c0cbb60d6d27b1125019a826f2591f22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNjg0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394036847", "bodyText": "I don't believe removing this is correct; we do not want a null pointer exception but an illegal argument exception if the lease container is not specified during the build.\nWhat does spotbugs say that we needed this fixed?", "author": "milismsft", "createdAt": "2020-03-17T23:57:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMzQ3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzODY3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394038670", "bodyText": "Just sync'ed with Kushagra, I guess since the check is already done above and that requestOptionFactory is always created, it's ok to remove the lines below", "author": "milismsft", "createdAt": "2020-03-18T00:04:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMzQ3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1MTcyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394051725", "bodyText": "As mentioned @milismsft this is just a duplicate condition, which is already present 10-15 lines above this code piece .. so removing it :)", "author": "kushagraThapar", "createdAt": "2020-03-18T00:58:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMzQ3NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNjcyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r393306723", "bodyText": "@simplynaveen20 to review request diagnostics changes.", "author": "moderakh", "createdAt": "2020-03-16T20:58:22Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/ClientSideRequestStatistics.java", "diffHunk": "@@ -127,15 +128,17 @@ void recordGatewayResponse(\n                 this.requestEndTime = responseTime;\n             }\n \n-            if (rxDocumentServiceRequest != null \n-                    && rxDocumentServiceRequest.requestContext != null \n+            if (rxDocumentServiceRequest != null\n+                    && rxDocumentServiceRequest.requestContext != null\n                     && rxDocumentServiceRequest.requestContext.retryContext != null) {\n                 rxDocumentServiceRequest.requestContext.retryContext.retryEndTime = ZonedDateTime.now(ZoneOffset.UTC);\n                 this.retryContext = new RetryContext(rxDocumentServiceRequest.requestContext.retryContext);\n             }\n \n             this.gatewayStatistics = new GatewayStatistics();\n-            this.gatewayStatistics.operationType = rxDocumentServiceRequest.getOperationType();\n+            if (rxDocumentServiceRequest != null) {", "originalCommit": "316b8a73c0cbb60d6d27b1125019a826f2591f22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyNzgyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394527820", "bodyText": "done", "author": "simplynaveen20", "createdAt": "2020-03-18T17:41:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNjcyMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5ODg1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r393998859", "bodyText": "why are we making these changes? removing these sanity checks makes me a bit uncomfortable.", "author": "moderakh", "createdAt": "2020-03-17T22:08:26Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionContainer.java", "diffHunk": "@@ -223,7 +224,7 @@ private void setSessionToken(ResourceId resourceId, String collectionName, Strin\n         if (!isKnownCollection) {\n             this.writeLock.lock();\n             try {\n-                if (collectionName != null && resourceId.getUniqueDocumentCollectionId() != 0) {\n+                if (resourceId.getUniqueDocumentCollectionId() != 0) {", "originalCommit": "316b8a73c0cbb60d6d27b1125019a826f2591f22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNjQ2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394006469", "bodyText": "Had collectionName is null then there will be a failure even before we reach the line 227.\nBelow code has this this.collectionNameToCollectionResourceId.containsKey(collectionName)  which expect collectionName to be not-null, otherwise it is NPE here it self.\ntry {\n    isKnownCollection = this.collectionNameToCollectionResourceId.containsKey(collectionName) &&\n            this.collectionResourceIdToCollectionName.containsKey(resourceId.getUniqueDocumentCollectionId()) &&\n            this.collectionNameToCollectionResourceId.get(collectionName) == resourceId.getUniqueDocumentCollectionId() &&\n            this.collectionResourceIdToCollectionName.get(resourceId.getUniqueDocumentCollectionId()).equals(collectionName);\n    if (isKnownCollection) {\n        this.addSessionToken(resourceId, partitionKeyRangeId, parsedSessionToken);\n    }\n} finally {\n    this.readLock.unlock();\n}\n\nif (!isKnownCollection) {\n    this.writeLock.lock();\n    try {\n        if (resourceId.getUniqueDocumentCollectionId() != 0) {\n            this.collectionNameToCollectionResourceId.compute(collectionName, (k, v) -> resourceId.getUniqueDocumentCollectionId());\n            this.collectionResourceIdToCollectionName.compute(resourceId.getUniqueDocumentCollectionId(), (k, v) -> collectionName);\n        }\n        addSessionToken(resourceId, partitionKeyRangeId, parsedSessionToken);\n    } finally {\n        this.writeLock.unlock();\n    }\n}", "author": "anuchandy", "createdAt": "2020-03-17T22:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5ODg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAxMjE3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394012179", "bodyText": "it seems the entire method expects a non-null collectionName, how about we add a guard null-check in this [Objects.requireNonNull(collectionName)] method?", "author": "anuchandy", "createdAt": "2020-03-17T22:40:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5ODg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMDc5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394030798", "bodyText": "Yes, that would be great. Let's add that.", "author": "kushagraThapar", "createdAt": "2020-03-17T23:38:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5ODg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNDQ0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394034446", "bodyText": "@anuchandy can we roll back the change on SessionContainer and add a spotbug override on this one?", "author": "moderakh", "createdAt": "2020-03-17T23:48:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5ODg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MDQ1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394040451", "bodyText": "Ok, I will rollback this change + add supression", "author": "anuchandy", "createdAt": "2020-03-18T00:11:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5ODg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NzIyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394057224", "bodyText": "done in the lastest commit.", "author": "anuchandy", "createdAt": "2020-03-18T01:21:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5ODg1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b972e8c088bb80842e7fa0633740f49128f1991b", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionContainer.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionContainer.java\nindex 98fdac9d65d..7d81175538c 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionContainer.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/SessionContainer.java\n\n@@ -224,7 +223,7 @@ public final class SessionContainer implements ISessionContainer {\n         if (!isKnownCollection) {\n             this.writeLock.lock();\n             try {\n-                if (resourceId.getUniqueDocumentCollectionId() != 0) {\n+                if (collectionName != null && resourceId.getUniqueDocumentCollectionId() != 0) {\n                     this.collectionNameToCollectionResourceId.compute(collectionName, (k, v) -> resourceId.getUniqueDocumentCollectionId());\n                     this.collectionResourceIdToCollectionName.compute(resourceId.getUniqueDocumentCollectionId(), (k, v) -> collectionName);\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNTY5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394025690", "bodyText": "This change is a bit concerning to me. I will verify if equals is being called anywhere for ResourceId.\n@moderakh  - do you know any of the places where we do so ?", "author": "kushagraThapar", "createdAt": "2020-03-17T23:20:56Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ResourceId.java", "diffHunk": "@@ -508,6 +507,29 @@ public boolean equals(ResourceId other) {\n         return Arrays.equals(this.getValue(), other.getValue());\n     }\n \n+    @Override\n+    public boolean equals(Object object) {", "originalCommit": "316b8a73c0cbb60d6d27b1125019a826f2591f22", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMDI0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394030244", "bodyText": "I know we have a clone() method in this class, but usually its not recommended to use clone() and Cloneable interface, as it is flawed.\nhttps://stackoverflow.com/a/11654256\nI doubt if we are actually calling this clone method, worth checking and removing it if not being called.", "author": "kushagraThapar", "createdAt": "2020-03-17T23:36:25Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/RxDocumentServiceRequest.java", "diffHunk": "@@ -24,7 +24,7 @@\n /**\n  * This is core Transport/Connection agnostic request to the Azure Cosmos DB database service.\n  */\n-public class RxDocumentServiceRequest {\n+public class RxDocumentServiceRequest implements Cloneable {", "originalCommit": "316b8a73c0cbb60d6d27b1125019a826f2591f22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1MTE0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394051141", "bodyText": "it seems we're using it here \n  \n    \n      azure-sdk-for-java/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/ReplicatedResourceClient.java\n    \n    \n         Line 126\n      in\n      12acd7a\n    \n    \n    \n    \n\n        \n          \n           RxDocumentServiceRequest freshRequest = request.clone();", "author": "anuchandy", "createdAt": "2020-03-18T00:55:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMDI0NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMjc3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394032772", "bodyText": "True that, why don't we get this null check out of the way ?", "author": "kushagraThapar", "createdAt": "2020-03-17T23:42:42Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GoneAndRetryWithRetryPolicy.java", "diffHunk": "@@ -154,6 +154,8 @@ public GoneAndRetryWithRetryPolicy(RxDocumentServiceRequest request, Integer wai\n                         .error(BridgeInternal.createCosmosClientException(HttpConstants.StatusCodes.SERVICE_UNAVAILABLE, exception)));\n             }\n \n+            // Note: we access request above without any null check then another null check here doesn't make sense.\n+            // @kushagraThapar/@moderakh/@mbhaskar\n             if (this.request != null) {", "originalCommit": "316b8a73c0cbb60d6d27b1125019a826f2591f22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNzQyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394037421", "bodyText": "this.request is not accessed in all if/else branches. is it?\n@kushagraThapar @anuchandy\ncan we do no-op for now and discuss this outside of scope of this PR?", "author": "moderakh", "createdAt": "2020-03-17T23:59:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMjc3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NzEzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394057133", "bodyText": "sounds good, reverted.", "author": "anuchandy", "createdAt": "2020-03-18T01:21:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMjc3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b972e8c088bb80842e7fa0633740f49128f1991b", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GoneAndRetryWithRetryPolicy.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GoneAndRetryWithRetryPolicy.java\nindex a8622af03b9..cbf363d0344 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GoneAndRetryWithRetryPolicy.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/GoneAndRetryWithRetryPolicy.java\n\n@@ -154,8 +154,6 @@ public class GoneAndRetryWithRetryPolicy extends RetryPolicyWithDiagnostics {\n                         .error(BridgeInternal.createCosmosClientException(HttpConstants.StatusCodes.SERVICE_UNAVAILABLE, exception)));\n             }\n \n-            // Note: we access request above without any null check then another null check here doesn't make sense.\n-            // @kushagraThapar/@moderakh/@mbhaskar\n             if (this.request != null) {\n                 logger.warn(\"Received invalid collection exception, will retry, {}\", exception.toString());\n                 this.request.forceNameCacheRefresh = true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMzczMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394033732", "bodyText": "I believe this is an unused import, if so, please get rid of it :)", "author": "kushagraThapar", "createdAt": "2020-03-17T23:46:11Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosPermissionProperties.java", "diffHunk": "@@ -6,7 +6,9 @@\n import com.azure.cosmos.implementation.Constants;\n import org.apache.commons.lang3.StringUtils;\n \n+import java.nio.charset.StandardCharsets;", "originalCommit": "316b8a73c0cbb60d6d27b1125019a826f2591f22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NzA3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394057070", "bodyText": "removed in the lastest commit.", "author": "anuchandy", "createdAt": "2020-03-18T01:21:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMzczMg=="}], "type": "inlineReview", "revised_code": {"commit": "b972e8c088bb80842e7fa0633740f49128f1991b", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosPermissionProperties.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosPermissionProperties.java\nindex cf53bb9d16b..084851164bf 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosPermissionProperties.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/models/CosmosPermissionProperties.java\n\n@@ -6,7 +6,6 @@ import com.azure.cosmos.BridgeInternal;\n import com.azure.cosmos.implementation.Constants;\n import org.apache.commons.lang3.StringUtils;\n \n-import java.nio.charset.StandardCharsets;\n import java.util.List;\n import java.util.Locale;\n import java.util.stream.Collectors;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNzgxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394027819", "bodyText": "Good one. Thankyou", "author": "mbhaskar", "createdAt": "2020-03-17T23:28:01Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/PartitionKeyMismatchRetryPolicy.java", "diffHunk": "@@ -41,11 +41,11 @@ public PartitionKeyMismatchRetryPolicy(\n \n         // TODO: this should be retrievable from document client exception.\n         collectionLink = Utils.getCollectionName(resourceFullName);\n-        this.options = options;\n+        this.options = requestOptions;", "originalCommit": "316b8a73c0cbb60d6d27b1125019a826f2591f22", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNzA1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394037055", "bodyText": "Can we name this querySpec instead as query and querySpec are different.", "author": "mbhaskar", "createdAt": "2020-03-17T23:58:01Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ParallelDocumentQueryExecutionContextBase.java", "diffHunk": "@@ -158,20 +160,21 @@ protected void initializeReadMany(\n         String collectionRid) {\n         Map<String, String> commonRequestHeaders = createCommonHeadersAsync(this.getFeedOptions(null, null));\n \n-        for (PartitionKeyRange targetRange : rangeQueryMap.keySet()) {\n+        for (Map.Entry<PartitionKeyRange, SqlQuerySpec> entry : rangeQueryMap.entrySet()) {\n+            final PartitionKeyRange targetRange = entry.getKey();\n+            final SqlQuerySpec query = entry.getValue();\n             TriFunction<PartitionKeyRange, String, Integer, RxDocumentServiceRequest> createRequestFunc = (\n                 partitionKeyRange,\n                 continuationToken, pageSize) -> {\n                 Map<String, String> headers = new HashMap<>(commonRequestHeaders);\n                 headers.put(HttpConstants.HttpHeaders.CONTINUATION, continuationToken);\n                 headers.put(HttpConstants.HttpHeaders.PAGE_SIZE, Strings.toString(pageSize));\n \n-                PartitionKeyInternal partitionKeyInternal = null;\n                 return this.createDocumentServiceRequest(headers,\n-                                                         rangeQueryMap.get(targetRange),\n-                                                         partitionKeyInternal,\n-                                                         partitionKeyRange,\n-                                                         collectionRid);\n+                    query,", "originalCommit": "316b8a73c0cbb60d6d27b1125019a826f2591f22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NjkyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394056926", "bodyText": "addressed in the lastest commit.", "author": "anuchandy", "createdAt": "2020-03-18T01:20:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNzA1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b972e8c088bb80842e7fa0633740f49128f1991b", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ParallelDocumentQueryExecutionContextBase.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ParallelDocumentQueryExecutionContextBase.java\nindex 44e9c105ed8..b26b4708288 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ParallelDocumentQueryExecutionContextBase.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ParallelDocumentQueryExecutionContextBase.java\n\n@@ -162,7 +162,7 @@ public abstract class ParallelDocumentQueryExecutionContextBase<T extends Resour\n \n         for (Map.Entry<PartitionKeyRange, SqlQuerySpec> entry : rangeQueryMap.entrySet()) {\n             final PartitionKeyRange targetRange = entry.getKey();\n-            final SqlQuerySpec query = entry.getValue();\n+            final SqlQuerySpec querySpec = entry.getValue();\n             TriFunction<PartitionKeyRange, String, Integer, RxDocumentServiceRequest> createRequestFunc = (\n                 partitionKeyRange,\n                 continuationToken, pageSize) -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNzQxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394037417", "bodyText": "this one too. query->querySpec", "author": "mbhaskar", "createdAt": "2020-03-17T23:59:21Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ParallelDocumentQueryExecutionContextBase.java", "diffHunk": "@@ -181,7 +184,7 @@ protected void initializeReadMany(\n             // TODO: Review pagesize -1\n             DocumentProducer<T> dp = createDocumentProducer(collectionRid, targetRange,\n                                                             null, -1, feedOptions,\n-                                                            rangeQueryMap.get(targetRange),\n+                                                            query,", "originalCommit": "316b8a73c0cbb60d6d27b1125019a826f2591f22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1Njg4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394056881", "bodyText": "addressed in the lastest commit.", "author": "anuchandy", "createdAt": "2020-03-18T01:20:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNzQxNw=="}], "type": "inlineReview", "revised_code": {"commit": "b972e8c088bb80842e7fa0633740f49128f1991b", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ParallelDocumentQueryExecutionContextBase.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ParallelDocumentQueryExecutionContextBase.java\nindex 44e9c105ed8..b26b4708288 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ParallelDocumentQueryExecutionContextBase.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/ParallelDocumentQueryExecutionContextBase.java\n\n@@ -184,7 +184,7 @@ public abstract class ParallelDocumentQueryExecutionContextBase<T extends Resour\n             // TODO: Review pagesize -1\n             DocumentProducer<T> dp = createDocumentProducer(collectionRid, targetRange,\n                                                             null, -1, feedOptions,\n-                                                            query,\n+                                                            querySpec,\n                                                             commonRequestHeaders, createRequestFunc, executeFunc,\n                                                             () -> client.getResetSessionTokenRetryPolicy()\n                                                                       .getRequestPolicy());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzODE3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394038175", "bodyText": "TotalExecutionTime->TOTAL_EXECUTION_TIME?", "author": "mbhaskar", "createdAt": "2020-03-18T00:02:30Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/metrics/QueryMetricsTextWriter.java", "diffHunk": "@@ -21,101 +21,103 @@\n \n     // QueryMetrics\n     private static final String ActivityIds = \"Activity Ids\";\n-    private static final String RetrievedDocumentCount = \"Retrieved Document Count\";\n-    private static final String RetrievedDocumentSize = \"Retrieved Document Size\";\n-    private static final String OutputDocumentCount = \"Output Document Count\";\n-    private static final String OutputDocumentSize = \"Output Document Size\";\n-    private static final String IndexUtilizationText = \"Index Utilization\";\n-    private static final String TotalQueryExecutionTime = \"Total Query Execution Time\";\n+    private static final String RETRIEVED_DOCUMENT_COUNT = \"Retrieved Document Count\";\n+    private static final String RETRIEVED_DOCUMENT_SIZE = \"Retrieved Document Size\";\n+    private static final String OUTPUT_DOCUMENT_COUNT = \"Output Document Count\";\n+    private static final String OUTPUT_DOCUMENT_SIZE = \"Output Document Size\";\n+    private static final String INDEX_UTILIZATION_TEXT = \"Index Utilization\";\n+    private static final String TOTAL_QUERY_EXECUTION_TIME = \"Total Query Execution Time\";\n \n     // QueryPreparationTimes\n-    private static final String QueryPreparationTimes = \"Query Preparation Times\";\n-    private static final String QueryCompileTime = \"Query Compilation Time\";\n-    private static final String LogicalPlanBuildTime = \"Logical Plan Build Time\";\n-    private static final String PhysicalPlanBuildTime = \"Physical Plan Build Time\";\n-    private static final String QueryOptimizationTime = \"Query Optimization Time\";\n+    private static final String QUERY_PREPARATION_TIMES = \"Query Preparation Times\";\n+    private static final String QUERY_COMPILATION_TIME = \"Query Compilation Time\";\n+    private static final String LOGICAL_PLAN_BUILD_TIME = \"Logical Plan Build Time\";\n+    private static final String PHYSICAL_PLAN_BUILD_TIME = \"Physical Plan Build Time\";\n+    private static final String QUERY_OPTIMIZATION_TIME = \"Query Optimization Time\";\n \n     // QueryTimes\n-    private static final String QueryEngineTimes = \"Query Engine Times\";\n-    private static final String IndexLookupTime = \"Index Lookup Time\";\n-    private static final String DocumentLoadTime = \"Document Load Time\";\n-    private static final String DocumentWriteTime = \"Document Write Time\";\n+    private static final String QUERY_ENGINE_TIMES = \"Query Engine Times\";\n+    private static final String INDEX_LOOKUP_TIME = \"Index Lookup Time\";\n+    private static final String DOCUMENT_LOAD_TIME = \"Document Load Time\";\n+    private static final String DOCUMENT_WRITE_TIME = \"Document Write Time\";\n \n     // RuntimeExecutionTimes\n-    private static final String RuntimeExecutionTimes = \"Runtime Execution Times\";\n+    private static final String RUNTIME_EXECUTION_TIMES = \"Runtime Execution Times\";\n     private static final String TotalExecutionTime = \"Query Engine Execution Time\";", "originalCommit": "316b8a73c0cbb60d6d27b1125019a826f2591f22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1Njg1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394056857", "bodyText": "addressed in the lastest commit.", "author": "anuchandy", "createdAt": "2020-03-18T01:20:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzODE3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b972e8c088bb80842e7fa0633740f49128f1991b", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/metrics/QueryMetricsTextWriter.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/metrics/QueryMetricsTextWriter.java\nindex b38496c89a4..b6922834d2f 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/metrics/QueryMetricsTextWriter.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/query/metrics/QueryMetricsTextWriter.java\n\n@@ -43,7 +43,7 @@ public class QueryMetricsTextWriter extends QueryMetricsWriter {\n \n     // RuntimeExecutionTimes\n     private static final String RUNTIME_EXECUTION_TIMES = \"Runtime Execution Times\";\n-    private static final String TotalExecutionTime = \"Query Engine Execution Time\";\n+    private static final String TOTAL_EXECUTION_TIME = \"Query Engine Execution Time\";\n     private static final String SYSTEM_FUNCTION_EXECUTION_TIME = \"System Function Execution Time\";\n     private static final String USER_DEFINED_FUNCTION_EXECUTION_TIME = \"User-defined Function Execution Time\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzOTY5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394039694", "bodyText": "MurMurHash is sort of a util class. Please donot delete these methods even though they are private as they might be useful in future to do some additional computations as required. Can we just comment those and leave there?", "author": "mbhaskar", "createdAt": "2020-03-18T00:08:43Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/MurmurHash3_128.java", "diffHunk": "@@ -109,12 +109,6 @@ public static UInt128 hash128(byte[] bytes, int length, UInt128 seed) {\n         return new UInt128(h1, h2);\n     }\n \n-\n-    private static int rotateLeft32(int n, int numBits) {", "originalCommit": "316b8a73c0cbb60d6d27b1125019a826f2591f22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NjgzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394056838", "bodyText": "addressed in the lastest commit.", "author": "anuchandy", "createdAt": "2020-03-18T01:20:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzOTY5NA=="}], "type": "inlineReview", "revised_code": {"commit": "b972e8c088bb80842e7fa0633740f49128f1991b", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/MurmurHash3_128.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/MurmurHash3_128.java\nindex 0981403dba1..7914c02b5e9 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/MurmurHash3_128.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/MurmurHash3_128.java\n\n@@ -109,6 +109,11 @@ public class MurmurHash3_128 {\n         return new UInt128(h1, h2);\n     }\n \n+    private static int rotateLeft32(int n, int numBits) {\n+        assert numBits < 32;\n+        return Integer.rotateLeft(n, numBits);\n+    }\n+\n     private static long rotateLeft64(long n, int numBits) {\n         assert numBits < 64;\n         return Long.rotateLeft(n, numBits);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0OTY1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394049651", "bodyText": "LGTM", "author": "David-Noble-at-work", "createdAt": "2020-03-18T00:49:17Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/rntbd/RntbdClientChannelPool.java", "diffHunk": "@@ -643,6 +643,8 @@ public final void run() {\n ", "originalCommit": "316b8a73c0cbb60d6d27b1125019a826f2591f22", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1MzA3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394053078", "bodyText": "StdDeserializer already implements Serializable", "author": "simplynaveen20", "createdAt": "2020-03-18T01:03:35Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/PartitionKeyInternal.java", "diffHunk": "@@ -296,7 +299,10 @@ private static void jsonEncodeLimit(JsonGenerator writer, String value) {\n     }\n \n     @SuppressWarnings(\"serial\")\n-    static final class PartitionKeyInternalJsonDeserializer extends StdDeserializer<PartitionKeyInternal> {\n+    static final class PartitionKeyInternalJsonDeserializer extends StdDeserializer<PartitionKeyInternal>\n+        implements Serializable {", "originalCommit": "316b8a73c0cbb60d6d27b1125019a826f2591f22", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb9f663762984b1cfe4f37977c9a4c8e2042e65b", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/PartitionKeyInternal.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/PartitionKeyInternal.java\nindex 3ada739ba69..3c3074a1db9 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/PartitionKeyInternal.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/routing/PartitionKeyInternal.java\n\n@@ -299,9 +298,7 @@ public class PartitionKeyInternal implements Comparable<PartitionKeyInternal> {\n     }\n \n     @SuppressWarnings(\"serial\")\n-    static final class PartitionKeyInternalJsonDeserializer extends StdDeserializer<PartitionKeyInternal>\n-        implements Serializable {\n-\n+    static final class PartitionKeyInternalJsonDeserializer extends StdDeserializer<PartitionKeyInternal> {\n         private static final long serialVersionUID = -6531933186096854710L;\n \n         protected PartitionKeyInternalJsonDeserializer() { this(null); }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1MzE2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394053162", "bodyText": "StdDeserializer already implements Serializable", "author": "simplynaveen20", "createdAt": "2020-03-18T01:03:56Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/StoreResult.java", "diffHunk": "@@ -159,7 +160,9 @@ public String toString() {\n                 \", sessionToken: \" + (this.sessionToken != null ? this.sessionToken.convertToString() : null) +\n                 \", exception: \" + BridgeInternal.getInnerErrorMessage(this.exception);\n     }\n-    public static class StoreResultSerializer extends StdSerializer<StoreResult> {\n+    public static class StoreResultSerializer extends StdSerializer<StoreResult> implements Serializable {", "originalCommit": "316b8a73c0cbb60d6d27b1125019a826f2591f22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NjAwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394056000", "bodyText": "that's right. But spotbug still want to inherited types to explicitly say it, not sure why so.", "author": "anuchandy", "createdAt": "2020-03-18T01:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1MzE2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxMjIzMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394312231", "bodyText": "There are other places i saw StdDeserializer without extra implements , so i think only serializerId is needed and this can be remove , please give it a try", "author": "simplynaveen20", "createdAt": "2020-03-18T12:34:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1MzE2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyNDA1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9111#discussion_r394524050", "bodyText": "@simplynaveen20 thank you, I double-checked, yes, only the serializationVersionId is required. I've updated the PR that removes extra implements.", "author": "anuchandy", "createdAt": "2020-03-18T17:34:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1MzE2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "eb9f663762984b1cfe4f37977c9a4c8e2042e65b", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/StoreResult.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/StoreResult.java\nindex 5c8f1fb864f..6196fa7780f 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/StoreResult.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/directconnectivity/StoreResult.java\n\n@@ -160,8 +159,7 @@ public class StoreResult {\n                 \", sessionToken: \" + (this.sessionToken != null ? this.sessionToken.convertToString() : null) +\n                 \", exception: \" + BridgeInternal.getInnerErrorMessage(this.exception);\n     }\n-    public static class StoreResultSerializer extends StdSerializer<StoreResult> implements Serializable {\n-\n+    public static class StoreResultSerializer extends StdSerializer<StoreResult> {\n         private static final long serialVersionUID = 5315472126043077905L;\n \n         public StoreResultSerializer(){\n"}}, {"oid": "b972e8c088bb80842e7fa0633740f49128f1991b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b972e8c088bb80842e7fa0633740f49128f1991b", "message": "addressing review comments", "committedDate": "2020-03-18T01:17:53Z", "type": "commit"}, {"oid": "02ab0e252224532cd8a74360b519c6eea547ada0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/02ab0e252224532cd8a74360b519c6eea547ada0", "message": "addressing review comments", "committedDate": "2020-03-18T01:18:13Z", "type": "commit"}, {"oid": "eb9f663762984b1cfe4f37977c9a4c8e2042e65b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/eb9f663762984b1cfe4f37977c9a4c8e2042e65b", "message": "Excluding non-shipping modules from spotbug, removing unnecessary Serializable", "committedDate": "2020-03-18T17:30:52Z", "type": "commit"}]}