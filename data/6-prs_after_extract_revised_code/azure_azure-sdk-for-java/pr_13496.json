{"pr_number": 13496, "pr_title": "Search onboard with core serializer SPI ", "pr_createdAt": "2020-07-24T20:01:21Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/13496", "timeline": [{"oid": "f9505718ff319913b273858b0cb2153519cea00a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f9505718ff319913b273858b0cb2153519cea00a", "message": "Added search serializer SPI and plugins", "committedDate": "2020-07-22T23:52:03Z", "type": "commit"}, {"oid": "f4b9404d1d3f27cada5f50cae9b773bb6f5b680d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f4b9404d1d3f27cada5f50cae9b773bb6f5b680d", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into addbackexperimental", "committedDate": "2020-07-22T23:52:23Z", "type": "commit"}, {"oid": "09760c11cd8db49daec0a9dcc9b4b05bf8579108", "url": "https://github.com/Azure/azure-sdk-for-java/commit/09760c11cd8db49daec0a9dcc9b4b05bf8579108", "message": "more fix", "committedDate": "2020-07-23T15:57:58Z", "type": "commit"}, {"oid": "8a0cc8b5b78058439b7c240f36fed3faae0f005a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8a0cc8b5b78058439b7c240f36fed3faae0f005a", "message": "Search serializer changes", "committedDate": "2020-07-24T19:59:05Z", "type": "commit"}, {"oid": "fa49c6c4588d2ac5afe3f095625ab4bf0b62a6dd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fa49c6c4588d2ac5afe3f095625ab4bf0b62a6dd", "message": "Delete extra modules", "committedDate": "2020-07-24T20:03:38Z", "type": "commit"}, {"oid": "1ff6314edeb448460b0446ddd8032660fb2731b7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1ff6314edeb448460b0446ddd8032660fb2731b7", "message": "Fixed live tests", "committedDate": "2020-07-24T22:29:53Z", "type": "commit"}, {"oid": "40f8fa674b069276381e0cadebe8abb8a135b1aa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/40f8fa674b069276381e0cadebe8abb8a135b1aa", "message": "Keep fixing the tests", "committedDate": "2020-07-24T23:01:23Z", "type": "commit"}, {"oid": "1314c5bd879b3f6b4387d7527bef77b4e0561969", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1314c5bd879b3f6b4387d7527bef77b4e0561969", "message": "Fixed linting issue", "committedDate": "2020-07-27T15:48:46Z", "type": "commit"}, {"oid": "75f8b3a8c9b1c2aea2632cf24cd7b7ebceeea41e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/75f8b3a8c9b1c2aea2632cf24cd7b7ebceeea41e", "message": "remove unused version changes", "committedDate": "2020-07-27T16:03:35Z", "type": "commit"}, {"oid": "2e76f9c8eb15e805741dba0a81f108e001f1c737", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2e76f9c8eb15e805741dba0a81f108e001f1c737", "message": "Change the way of mocking", "committedDate": "2020-07-27T16:17:47Z", "type": "commit"}, {"oid": "438d4301d52784caaeb29c9443513c2baccb2379", "url": "https://github.com/Azure/azure-sdk-for-java/commit/438d4301d52784caaeb29c9443513c2baccb2379", "message": "Change the tests for mocking", "committedDate": "2020-07-27T16:25:53Z", "type": "commit"}, {"oid": "ab9aeff9ec4c8faed55e4579dc6434904e88a3e5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ab9aeff9ec4c8faed55e4579dc6434904e88a3e5", "message": "Fixed all tests", "committedDate": "2020-07-27T17:43:42Z", "type": "commit"}, {"oid": "9ae918caeb15bb821b07d3910c40a1c7e87abc20", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9ae918caeb15bb821b07d3910c40a1c7e87abc20", "message": "Added tests back", "committedDate": "2020-07-27T17:57:14Z", "type": "commit"}, {"oid": "7b90bab191a77ed147bcc66eed777fd1e156b41e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b90bab191a77ed147bcc66eed777fd1e156b41e", "message": "Having a helper assert method.", "committedDate": "2020-07-27T18:17:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4MzQyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461083426", "bodyText": "Does this ClientLogger get used?", "author": "alzimmermsft", "createdAt": "2020-07-27T18:23:36Z", "path": "sdk/core/azure-core-serializer-avro-apache/src/main/java/com/azure/core/serializer/avro/apache/ApacheAvroSerializer.java", "diffHunk": "@@ -17,11 +18,13 @@\n \n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.lang.reflect.Type;\n \n /**\n  * Apache Avro based implementation of the {@link ObjectSerializer} interface.\n  */\n public class ApacheAvroSerializer implements ObjectSerializer {\n+    private final ClientLogger logger = new ClientLogger(ApacheAvroSerializer.class);", "originalCommit": "7b90bab191a77ed147bcc66eed777fd1e156b41e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwMzE3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461103175", "bodyText": "Please ignore all changed in core serializer besides of PropertyName. I will get all your changes merged into my PR.", "author": "sima-zhu", "createdAt": "2020-07-27T18:59:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4MzQyNg=="}], "type": "inlineReview", "revised_code": {"commit": "428e7ce1280754f2812c123a9a4dc93bec24a31b", "chunk": "diff --git a/sdk/core/azure-core-serializer-avro-apache/src/main/java/com/azure/core/serializer/avro/apache/ApacheAvroSerializer.java b/sdk/core/azure-core-serializer-avro-apache/src/main/java/com/azure/core/serializer/avro/apache/ApacheAvroSerializer.java\nindex 4411255d324..521385ee863 100644\n--- a/sdk/core/azure-core-serializer-avro-apache/src/main/java/com/azure/core/serializer/avro/apache/ApacheAvroSerializer.java\n+++ b/sdk/core/azure-core-serializer-avro-apache/src/main/java/com/azure/core/serializer/avro/apache/ApacheAvroSerializer.java\n\n@@ -24,7 +24,6 @@ import java.lang.reflect.Type;\n  * Apache Avro based implementation of the {@link ObjectSerializer} interface.\n  */\n public class ApacheAvroSerializer implements ObjectSerializer {\n-    private final ClientLogger logger = new ClientLogger(ApacheAvroSerializer.class);\n     private final Schema schema;\n     private final DecoderFactory decoderFactory;\n     private final EncoderFactory encoderFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4MzYyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461083626", "bodyText": "Does this ClientLogger get used?", "author": "alzimmermsft", "createdAt": "2020-07-27T18:23:58Z", "path": "sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java", "diffHunk": "@@ -4,17 +4,21 @@\n package com.azure.core.serializer.avro.jackson;\n \n import com.azure.core.experimental.serializer.ObjectSerializer;\n+import com.azure.core.experimental.serializer.Type;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.dataformat.avro.AvroMapper;\n import com.fasterxml.jackson.dataformat.avro.AvroSchema;\n import reactor.core.publisher.Mono;\n \n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.lang.reflect.Type;\n \n /**\n  * Jackson Avro based implementation of the {@link ObjectSerializer} interface.\n  */\n public final class JacksonAvroSerializer implements ObjectSerializer {\n+    private final ClientLogger logger = new ClientLogger(JacksonAvroSerializer.class);", "originalCommit": "7b90bab191a77ed147bcc66eed777fd1e156b41e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwOTA5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461109090", "bodyText": "Answered above.", "author": "sima-zhu", "createdAt": "2020-07-27T19:10:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4MzYyNg=="}], "type": "inlineReview", "revised_code": {"commit": "428e7ce1280754f2812c123a9a4dc93bec24a31b", "chunk": "diff --git a/sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java b/sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java\nindex 0e7643f93d7..26218329718 100644\n--- a/sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java\n+++ b/sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java\n\n@@ -18,7 +18,6 @@ import java.lang.reflect.Type;\n  * Jackson Avro based implementation of the {@link ObjectSerializer} interface.\n  */\n public final class JacksonAvroSerializer implements ObjectSerializer {\n-    private final ClientLogger logger = new ClientLogger(JacksonAvroSerializer.class);\n     private final AvroSchema avroSchema;\n     private final AvroMapper avroMapper;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4NjMwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461086304", "bodyText": "Does GSON maintain full method names or does it drop Java bean notation? I know in Jackson's case this would serialize as hotelName (possibly HotelName as I'm not completely certain about how it handles casing).", "author": "alzimmermsft", "createdAt": "2020-07-27T18:28:41Z", "path": "sdk/core/azure-core-serializer-json-gson/src/test/java/com/azure/core/serializer/json/gson/GsonPropertyNameTests.java", "diffHunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.google.gson.annotations.SerializedName;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import reactor.test.StepVerifier;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class GsonPropertyNameTests {\n+    private static final String expectValueInField = \"expectFieldName\";\n+    private static GsonPropertyNameSerializer serializer;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        serializer = new GsonPropertyNameSerializer();\n+    }\n+\n+    @Test\n+    public void testPropertyNameOnFieldName() throws NoSuchFieldException {\n+        class Hotel {\n+            String hotelName;\n+        }\n+        Field f = Hotel.class.getDeclaredField(\"hotelName\");\n+\n+        assertMemberValue(f, \"hotelName\");\n+    }\n+\n+    @Test\n+    public void testPropertyNameOnFieldAnnotation() throws NoSuchFieldException {\n+        class Hotel {\n+            @SerializedName(value = expectValueInField)\n+            String hotelName;\n+        }\n+        Field f = Hotel.class.getDeclaredField(\"hotelName\");\n+        assertMemberValue(f, expectValueInField);\n+\n+    }\n+\n+    @Test\n+    public void testPropertyNameOnFieldAnnotationWithEmptyValue() throws NoSuchFieldException {\n+        class Hotel {\n+            @SerializedName(value = \"\")\n+            String hotelName;\n+        }\n+        Field f = Hotel.class.getDeclaredField(\"hotelName\");\n+\n+        assertMemberValue(f, \"hotelName\");\n+    }\n+\n+    @Test\n+    public void testPropertyNameOnMethodName() throws NoSuchMethodException {\n+        class Hotel {\n+            String hotelName;\n+\n+            public String getHotelName() {\n+                return hotelName;\n+            }\n+        }\n+\n+        Method m = Hotel.class.getDeclaredMethod(\"getHotelName\");\n+\n+        assertMemberValue(m, \"getHotelName\");", "originalCommit": "7b90bab191a77ed147bcc66eed777fd1e156b41e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyODU4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461128589", "bodyText": "What you refer is the one without annotation on Method.\nHowever, if we do not have annoatation, we cannot guarantee what we pass is the getter method with 'get' prefix. I don't think we need to check too much things here as validating whether it is the invoked getter is a huge cost.", "author": "sima-zhu", "createdAt": "2020-07-27T19:47:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4NjMwNA=="}], "type": "inlineReview", "revised_code": {"commit": "4ffc352a6fe1bbd3bc4b418b434df5e38a35326f", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/test/java/com/azure/core/serializer/json/gson/GsonPropertyNameTests.java b/sdk/core/azure-core-serializer-json-gson/src/test/java/com/azure/core/serializer/json/gson/GsonPropertyNameTests.java\nindex 21bfc765127..b9251550c4b 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/test/java/com/azure/core/serializer/json/gson/GsonPropertyNameTests.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/test/java/com/azure/core/serializer/json/gson/GsonPropertyNameTests.java\n\n@@ -15,7 +15,7 @@ import java.lang.reflect.Method;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n public class GsonPropertyNameTests {\n-    private static final String expectValueInField = \"expectFieldName\";\n+    private static final String EXPECT_VALUE_IN_FIELD = \"expectFieldName\";\n     private static GsonPropertyNameSerializer serializer;\n \n     @BeforeAll\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4OTExNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461089116", "bodyText": "This needs to take into account a few more common scenarios.\n\nFields marked as transient will be ignored for serialization. This is an expectation in Java that transient fields are never serialized.\nNeed to check whether the field is marked with GSON's Expose annotation. A common configuration in GSON is constructing a Gson with excludeFieldsWithoutExposeAnnotation which won't include those in serialization. Additionally, Expose could contain information on whether the field will ever be included in serialization with serialize = false.", "author": "alzimmermsft", "createdAt": "2020-07-27T18:34:00Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.experimental.serializer.PropertyNameSerializer;\n+import com.azure.core.util.CoreUtils;\n+import com.google.gson.annotations.SerializedName;\n+import reactor.core.publisher.Mono;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+\n+/**\n+ * GSON based get property name implementation of the {@link PropertyNameSerializer} interface.\n+ */\n+public class GsonPropertyNameSerializer implements PropertyNameSerializer {\n+\n+    @Override\n+    public Mono<String> getSerializerMemberName(Member member) {\n+        return Mono.fromCallable(() -> {\n+            if (member instanceof Field) {", "originalCommit": "7b90bab191a77ed147bcc66eed777fd1e156b41e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTExNzY3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461117677", "bodyText": "FieldBuilder and Json serialization are different things. Private field might not able to serializable to jackson but it is serializable to FieldBuilder. If we want to utilize azure core, then azure core method cannot validate too many annotations, which blocks SDK to have its own use.\nFor FieldBuilder, customer has to use @FieldIgnore in Search SDK to ignore the field.\nFor method use, I don't have too much use case here, so what to return is an open issue. Suppose we have two getters, one with @JsonGetter and one without @JsonGetter. The getSerializerMemberName API did not know too much but the method you passed in, so we cannot make the logic too complicated in the API.", "author": "sima-zhu", "createdAt": "2020-07-27T19:27:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4OTExNg=="}], "type": "inlineReview", "revised_code": {"commit": "cef26e374f78d89e772596bf3a574b91ddce99d3", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java\nindex 4c1059e0a2a..3245e750b35 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java\n\n@@ -3,24 +3,47 @@\n \n package com.azure.core.serializer.json.gson;\n \n+import com.azure.core.experimental.serializer.JsonSerializer;\n import com.azure.core.experimental.serializer.PropertyNameSerializer;\n import com.azure.core.util.CoreUtils;\n+import com.google.gson.Gson;\n+import com.google.gson.annotations.Expose;\n import com.google.gson.annotations.SerializedName;\n import reactor.core.publisher.Mono;\n \n import java.lang.reflect.Field;\n import java.lang.reflect.Member;\n import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n \n /**\n  * GSON based get property name implementation of the {@link PropertyNameSerializer} interface.\n  */\n public class GsonPropertyNameSerializer implements PropertyNameSerializer {\n+    private final Gson gson;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed {@link Gson} serializer.\n+     *\n+     * @param gson Configured {@link Gson} serializer.\n+     */\n+    GsonPropertyNameSerializer(Gson gson) {\n+        this.gson = gson;\n+    }\n \n     @Override\n     public Mono<String> getSerializerMemberName(Member member) {\n         return Mono.fromCallable(() -> {\n+            if (Modifier.isTransient(member.getModifiers())) {\n+                return null;\n+            }\n             if (member instanceof Field) {\n+                if (gson.excluder().excludeField((Field) member, true)) {\n+                    return null;\n+                }\n+                if (!((Field) member).isAnnotationPresent(Expose.class)) {\n+                    return null;\n+                }\n                 if (!((Field) member).isAnnotationPresent(SerializedName.class)) {\n                     return member.getName();\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NDM1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461094350", "bodyText": "Javadoc copy and paste error?", "author": "alzimmermsft", "createdAt": "2020-07-27T18:43:29Z", "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializerBuilder.java", "diffHunk": "@@ -34,4 +39,17 @@ public JacksonJsonSerializerBuilder serializer(ObjectMapper objectMapper) {\n         this.objectMapper = objectMapper;\n         return this;\n     }\n+\n+    /**\n+     * Sets the {@link ObjectMapper} that will be used during serialization.\n+     * <p>\n+     * If this is set to {@code null} the default {@link ObjectMapper} will be used.\n+     *\n+     * @param options {@link JsonOptions} that will be used during serialization.", "originalCommit": "7b90bab191a77ed147bcc66eed777fd1e156b41e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyMDE4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461120187", "bodyText": "Fixed.", "author": "sima-zhu", "createdAt": "2020-07-27T19:31:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NDM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "428e7ce1280754f2812c123a9a4dc93bec24a31b", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializerBuilder.java b/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializerBuilder.java\nindex 7d27c1f5692..942746d117e 100644\n--- a/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializerBuilder.java\n+++ b/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializerBuilder.java\n\n@@ -41,9 +41,9 @@ public final class JacksonJsonSerializerBuilder {\n     }\n \n     /**\n-     * Sets the {@link ObjectMapper} that will be used during serialization.\n-     * <p>\n-     * If this is set to {@code null} the default {@link ObjectMapper} will be used.\n+     * Sets the {@link JsonOptions} that will be used during serialization.\n+     *\n+     * JsonOptions currently support to config whether to serialize null during serialization.\n      *\n      * @param options {@link JsonOptions} that will be used during serialization.\n      * @return The updated JacksonJsonSerializerBuilder class.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NTgxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461095818", "bodyText": "Is this how Jackson serializes methods annotated with JsonProperty? Also, do we need to handle JsonGetter for methods?", "author": "alzimmermsft", "createdAt": "2020-07-27T18:46:05Z", "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonPropertyNameSerializer.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.experimental.serializer.PropertyNameSerializer;\n+import com.azure.core.util.CoreUtils;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import reactor.core.publisher.Mono;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+\n+/**\n+ * Jackson based get property name implementation of the {@link PropertyNameSerializer} interface.\n+ */\n+public class JacksonPropertyNameSerializer implements PropertyNameSerializer {\n+    @Override\n+    public Mono<String> getSerializerMemberName(Member member) {\n+\n+        return Mono.fromCallable(() -> {\n+            String propertyName = null;\n+            if (member instanceof Field) {\n+                if (!((Field) member).isAnnotationPresent(JsonProperty.class)) {\n+                    return member.getName();\n+                }\n+                propertyName = ((Field) member).getDeclaredAnnotation(JsonProperty.class).value();\n+                propertyName = CoreUtils.isNullOrEmpty(propertyName) ? ((Field) member).getName() : propertyName;\n+            } else if (member instanceof Method) {\n+                if (!((Method) member).isAnnotationPresent(JsonProperty.class)) {\n+                    return member.getName();", "originalCommit": "7b90bab191a77ed147bcc66eed777fd1e156b41e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyMTA0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461121045", "bodyText": "@JsonGetter is to use for multiple getter cases. The method passed into the method doesn't include other method information. Let me know what case you want to support.", "author": "sima-zhu", "createdAt": "2020-07-27T19:33:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NTgxOA=="}], "type": "inlineReview", "revised_code": {"commit": "cef26e374f78d89e772596bf3a574b91ddce99d3", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonPropertyNameSerializer.java b/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonPropertyNameSerializer.java\nindex 366ef8717cf..3054332340f 100644\n--- a/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonPropertyNameSerializer.java\n+++ b/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonPropertyNameSerializer.java\n\n@@ -5,6 +5,7 @@ package com.azure.core.serializer.json.jackson;\n \n import com.azure.core.experimental.serializer.PropertyNameSerializer;\n import com.azure.core.util.CoreUtils;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import reactor.core.publisher.Mono;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjIyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461096229", "bodyText": "I believe we need to account for JsonIgnore.", "author": "alzimmermsft", "createdAt": "2020-07-27T18:46:50Z", "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonPropertyNameSerializer.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.experimental.serializer.PropertyNameSerializer;\n+import com.azure.core.util.CoreUtils;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import reactor.core.publisher.Mono;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+\n+/**\n+ * Jackson based get property name implementation of the {@link PropertyNameSerializer} interface.\n+ */\n+public class JacksonPropertyNameSerializer implements PropertyNameSerializer {\n+    @Override\n+    public Mono<String> getSerializerMemberName(Member member) {\n+\n+        return Mono.fromCallable(() -> {\n+            String propertyName = null;", "originalCommit": "7b90bab191a77ed147bcc66eed777fd1e156b41e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEyMzI4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461123285", "bodyText": "We provide @FieldIgnore for FieldBuilder to ignore the field for SearchIndex, which provide the flexibility of decouple the use case of FieldBuilder and serialization (Document). The getSerializerMemberName is useful for FieldBuilder, customer can use serialize and deserialize API for document serialization.", "author": "sima-zhu", "createdAt": "2020-07-27T19:37:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjIyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "cef26e374f78d89e772596bf3a574b91ddce99d3", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonPropertyNameSerializer.java b/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonPropertyNameSerializer.java\nindex 366ef8717cf..3054332340f 100644\n--- a/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonPropertyNameSerializer.java\n+++ b/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonPropertyNameSerializer.java\n\n@@ -5,6 +5,7 @@ package com.azure.core.serializer.json.jackson;\n \n import com.azure.core.experimental.serializer.PropertyNameSerializer;\n import com.azure.core.util.CoreUtils;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import reactor.core.publisher.Mono;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NjcyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461096721", "bodyText": "I don't think we should suppress this warning.", "author": "alzimmermsft", "createdAt": "2020-07-27T18:47:46Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "diffHunk": "@@ -67,13 +66,15 @@\n \n import static com.azure.core.util.FluxUtil.monoError;\n import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.search.documents.implementation.util.Utility.initializeSerializerAdapter;\n \n /**\n  * This class provides a client that contains the operations for querying an index and uploading, merging, or deleting\n  * documents in an Azure Cognitive Search service.\n  *\n  * @see SearchClientBuilder\n  */\n+@SuppressWarnings(\"checkstyle:LineLength\")", "originalCommit": "7b90bab191a77ed147bcc66eed777fd1e156b41e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "428e7ce1280754f2812c123a9a4dc93bec24a31b", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java\nindex 2258eb57d7a..9146bcfc262 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java\n\n@@ -74,7 +74,6 @@ import static com.azure.search.documents.implementation.util.Utility.initializeS\n  *\n  * @see SearchClientBuilder\n  */\n-@SuppressWarnings(\"checkstyle:LineLength\")\n @ServiceClient(builder = SearchClientBuilder.class, isAsync = true)\n public final class SearchAsyncClient {\n     /*\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NzAzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461097033", "bodyText": "Same comment about suppressing checkstyle:LineLength.", "author": "alzimmermsft", "createdAt": "2020-07-27T18:48:21Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "diffHunk": "@@ -529,24 +527,20 @@ public String getEndpoint() {\n         return withContext(context -> getDocumentWithResponse(key, modelClass, selectedFields, context));\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n+    @SuppressWarnings({\"unchecked\", \"checkstyle:LineLength\"})", "originalCommit": "7b90bab191a77ed147bcc66eed777fd1e156b41e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "428e7ce1280754f2812c123a9a4dc93bec24a31b", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java\nindex 2258eb57d7a..9146bcfc262 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java\n\n@@ -527,7 +526,7 @@ public final class SearchAsyncClient {\n         return withContext(context -> getDocumentWithResponse(key, modelClass, selectedFields, context));\n     }\n \n-    @SuppressWarnings({\"unchecked\", \"checkstyle:LineLength\"})\n+    @SuppressWarnings(\"unchecked\")\n     <T> Mono<Response<T>> getDocumentWithResponse(String key, Class<T> modelClass, List<String> selectedFields,\n         Context context) {\n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5ODI2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461098267", "bodyText": "Don't remove these <p> tags, Javadocs doesn't retain text newlines as it is HTML. This without it the Javadocs will go from being:\nSets the HTTP pipeline to use for the service client.\n\nIf pipeline is set...\n\nto\nSets the HTTP pipeline to use for the service client. If pipeline is set...", "author": "alzimmermsft", "createdAt": "2020-07-27T18:50:33Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java", "diffHunk": "@@ -258,7 +276,7 @@ public SearchClientBuilder httpClient(HttpClient client) {\n \n     /**\n      * Sets the HTTP pipeline to use for the service client.\n-     * <p>", "originalCommit": "7b90bab191a77ed147bcc66eed777fd1e156b41e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a471d3c55c9605d56416caeb6bec7e5f31b382a3", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java\nindex 8c06d95093b..e28ce2dcfcc 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java\n\n@@ -276,7 +276,7 @@ public final class SearchClientBuilder {\n \n     /**\n      * Sets the HTTP pipeline to use for the service client.\n-     *\n+     * <p>\n      * If {@code pipeline} is set, all other settings are ignored, aside from {@link #endpoint(String) endpoint} and\n      * {@link #indexName(String) index} when building a {@link SearchClient} or {@link SearchAsyncClient}.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5ODY2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461098662", "bodyText": "@srnagar, looks like this will require codegen changes.", "author": "alzimmermsft", "createdAt": "2020-07-27T18:51:16Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/DocumentsImpl.java", "diffHunk": "@@ -57,8 +59,11 @@\n      *\n      * @param client the instance of the service client containing this operation class.\n      */\n-    DocumentsImpl(SearchIndexClientImpl client) {\n-        this.service = RestProxy.create(DocumentsService.class, client.getHttpPipeline());\n+    DocumentsImpl(SearchIndexClientImpl client, SerializerAdapter serializerAdapter) {\n+        if (serializerAdapter == null) {\n+            serializerAdapter = new JacksonAdapter();\n+        }\n+        this.service = RestProxy.create(DocumentsService.class, client.getHttpPipeline(), serializerAdapter);", "originalCommit": "7b90bab191a77ed147bcc66eed777fd1e156b41e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEzMDY4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461130680", "bodyText": "This is a POC of whether Search can adopt the autorest chagnes. Will regen the code after autorest change get merged.", "author": "sima-zhu", "createdAt": "2020-07-27T19:51:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5ODY2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "fcece7b4023bb788dbf5aa66b26b8d05acb02bc7", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/DocumentsImpl.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/DocumentsImpl.java\nindex d24e34ad8b0..3ed68f17d48 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/DocumentsImpl.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/DocumentsImpl.java\n\n@@ -59,11 +57,9 @@ public final class DocumentsImpl {\n      *\n      * @param client the instance of the service client containing this operation class.\n      */\n-    DocumentsImpl(SearchIndexClientImpl client, SerializerAdapter serializerAdapter) {\n-        if (serializerAdapter == null) {\n-            serializerAdapter = new JacksonAdapter();\n-        }\n-        this.service = RestProxy.create(DocumentsService.class, client.getHttpPipeline(), serializerAdapter);\n+    DocumentsImpl(SearchIndexClientImpl client) {\n+        this.service =\n+                RestProxy.create(DocumentsService.class, client.getHttpPipeline(), client.getSerializerAdapter());\n         this.client = client;\n     }\n \n"}}, {"oid": "428e7ce1280754f2812c123a9a4dc93bec24a31b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/428e7ce1280754f2812c123a9a4dc93bec24a31b", "message": "Addressed the comments", "committedDate": "2020-07-27T19:43:14Z", "type": "commit"}, {"oid": "a471d3c55c9605d56416caeb6bec7e5f31b382a3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a471d3c55c9605d56416caeb6bec7e5f31b382a3", "message": "Fixed the Javadoc", "committedDate": "2020-07-27T19:50:19Z", "type": "commit"}, {"oid": "4ffc352a6fe1bbd3bc4b418b434df5e38a35326f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4ffc352a6fe1bbd3bc4b418b434df5e38a35326f", "message": "fixed linting", "committedDate": "2020-07-27T21:06:19Z", "type": "commit"}, {"oid": "c9b3270844da0d4421214a2ebe6b635b174eee6e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c9b3270844da0d4421214a2ebe6b635b174eee6e", "message": "Fixed linting", "committedDate": "2020-07-28T00:25:44Z", "type": "commit"}, {"oid": "cef26e374f78d89e772596bf3a574b91ddce99d3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cef26e374f78d89e772596bf3a574b91ddce99d3", "message": "Make changes on property name", "committedDate": "2020-07-28T18:25:50Z", "type": "commit"}, {"oid": "81fdd3cf4fbc3d4789124accfb9dda6ee81a44fd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/81fdd3cf4fbc3d4789124accfb9dda6ee81a44fd", "message": "Make up more tests", "committedDate": "2020-07-28T20:28:02Z", "type": "commit"}, {"oid": "f7cf60d6b0f40988b2ff11a07889a59df7b2ef91", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f7cf60d6b0f40988b2ff11a07889a59df7b2ef91", "message": "Fixed the linting issue", "committedDate": "2020-07-28T20:59:48Z", "type": "commit"}, {"oid": "fcece7b4023bb788dbf5aa66b26b8d05acb02bc7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fcece7b4023bb788dbf5aa66b26b8d05acb02bc7", "message": "Regen the code from new feature in autorest", "committedDate": "2020-07-28T21:53:22Z", "type": "commit"}, {"oid": "6383838a0de92350447710ed57eaa427e9b3ec91", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6383838a0de92350447710ed57eaa427e9b3ec91", "message": "Swallow the unsupported types from SDK.", "committedDate": "2020-07-28T22:15:26Z", "type": "commit"}, {"oid": "2cd05fd0660901f338154be6bc3d38b9ca6a011f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2cd05fd0660901f338154be6bc3d38b9ca6a011f", "message": "remove useless", "committedDate": "2020-07-28T22:33:49Z", "type": "commit"}, {"oid": "0b9c2e9b048ded4959097470ea6c0a1464c45634", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0b9c2e9b048ded4959097470ea6c0a1464c45634", "message": "Merge from mainline", "committedDate": "2020-07-28T22:43:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NzA2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461957061", "bodyText": "Could rename this to SerializedNameProvider, right now the interface sounds like it will serialize property names.", "author": "alzimmermsft", "createdAt": "2020-07-28T23:48:27Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializer.java", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.serializer;\n+\n+import reactor.core.publisher.Mono;\n+\n+import java.lang.reflect.Member;\n+\n+/**\n+ * Generic interface to get the property name through serialization.\n+ */\n+public interface PropertyNameSerializer {", "originalCommit": "6383838a0de92350447710ed57eaa427e9b3ec91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyMjgyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r462622827", "bodyText": "Since there is another PR moving the naming to core, I can merge the change over there.", "author": "sima-zhu", "createdAt": "2020-07-29T22:19:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NzA2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c2b0d6c7e835a0d23278beb27fb1b31dab55bdf", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializer.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializer.java\nindex a8efb458f69..7110478b440 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializer.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializer.java\n\n@@ -3,8 +3,6 @@\n \n package com.azure.core.experimental.serializer;\n \n-import reactor.core.publisher.Mono;\n-\n import java.lang.reflect.Member;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NzE4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461957189", "bodyText": "gerSerializedName?", "author": "alzimmermsft", "createdAt": "2020-07-28T23:48:48Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializer.java", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.serializer;\n+\n+import reactor.core.publisher.Mono;\n+\n+import java.lang.reflect.Member;\n+\n+/**\n+ * Generic interface to get the property name through serialization.\n+ */\n+public interface PropertyNameSerializer {\n+    /**\n+     * Get property member name from the class field.\n+     *\n+     * @param member Gets property name from the class member.\n+     * @return The serializer member name.\n+     */\n+    Mono<String> getSerializerMemberName(Member member);", "originalCommit": "6383838a0de92350447710ed57eaa427e9b3ec91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyMjk5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r462622990", "bodyText": "Same as above.", "author": "sima-zhu", "createdAt": "2020-07-29T22:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NzE4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c2b0d6c7e835a0d23278beb27fb1b31dab55bdf", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializer.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializer.java\nindex a8efb458f69..7110478b440 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializer.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializer.java\n\n@@ -3,8 +3,6 @@\n \n package com.azure.core.experimental.serializer;\n \n-import reactor.core.publisher.Mono;\n-\n import java.lang.reflect.Member;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NzMxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461957317", "bodyText": "I think this is a case where this being synchronous would lead to easier usability. Also because this operation is truly synchronous as it is working on local, simple data.", "author": "alzimmermsft", "createdAt": "2020-07-28T23:49:13Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializer.java", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.serializer;\n+\n+import reactor.core.publisher.Mono;\n+\n+import java.lang.reflect.Member;\n+\n+/**\n+ * Generic interface to get the property name through serialization.\n+ */\n+public interface PropertyNameSerializer {\n+    /**\n+     * Get property member name from the class field.\n+     *\n+     * @param member Gets property name from the class member.\n+     * @return The serializer member name.\n+     */\n+    Mono<String> getSerializerMemberName(Member member);", "originalCommit": "6383838a0de92350447710ed57eaa427e9b3ec91", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c2b0d6c7e835a0d23278beb27fb1b31dab55bdf", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializer.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializer.java\nindex a8efb458f69..7110478b440 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializer.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializer.java\n\n@@ -3,8 +3,6 @@\n \n package com.azure.core.experimental.serializer;\n \n-import reactor.core.publisher.Mono;\n-\n import java.lang.reflect.Member;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NzcxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461957715", "bodyText": "We should look at this as an option to play around with in azure-core-experimental but I'm not certain this will propagate into Azure Core as quickly. This would offer minor convenience to creating a customized serializer but in most cases I would expect the customer to pass a fully configured ObjectMapper instance of GsonBuilder.", "author": "alzimmermsft", "createdAt": "2020-07-28T23:50:25Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/JsonOptions.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.serializer;\n+\n+/**\n+ * The json serializer options.\n+ */\n+public class JsonOptions {", "originalCommit": "6383838a0de92350447710ed57eaa427e9b3ec91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxNTk3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r462415972", "bodyText": "I will delete this one as we do not the set this after the autogen change.", "author": "sima-zhu", "createdAt": "2020-07-29T16:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NzcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c2b0d6c7e835a0d23278beb27fb1b31dab55bdf", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/JsonOptions.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/JsonOptions.java\ndeleted file mode 100644\nindex 56bd225f9c5..00000000000\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/JsonOptions.java\n+++ /dev/null\n\n@@ -1,33 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.core.experimental.serializer;\n-\n-/**\n- * The json serializer options.\n- */\n-public class JsonOptions {\n-    private boolean includeNull;\n-\n-    /**\n-     * The option of taking nulls when serialize.\n-     *\n-     * @param includeNull The boolean indicate whether to serialize null or not.\n-     * @return The {@link JsonOptions} object itself.\n-     */\n-    public JsonOptions setIncludeNull(boolean includeNull) {\n-        this.includeNull = includeNull;\n-        return this;\n-    }\n-\n-    /**\n-     * Check whether serialize nulls set to true.\n-     *\n-     * @return true if set serialize nulls, otherwise false.\n-     */\n-    public boolean isNullIncluded() {\n-        return includeNull;\n-    }\n-\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1ODIzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461958230", "bodyText": "If the name of the interface changes this will need to change as well.", "author": "alzimmermsft", "createdAt": "2020-07-28T23:52:06Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializerProvider.java", "diffHunk": "@@ -0,0 +1,18 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.serializer;\n+\n+/**\n+ * Interface to be implemented by an azure-core plugin that wishes to provide a {@link PropertyNameSerializer}\n+ * implementation.\n+ */\n+public interface PropertyNameSerializerProvider {", "originalCommit": "6383838a0de92350447710ed57eaa427e9b3ec91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxNjQzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r462416439", "bodyText": "@alzimmermsft  Could you suggest the best name to go?", "author": "sima-zhu", "createdAt": "2020-07-29T16:08:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1ODIzMA=="}], "type": "inlineReview", "revised_code": {"commit": "392f749aefa316e22aa5ea5670947d5626ee3827", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializerProvider.java b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializerProvider.java\nsimilarity index 63%\nrename from sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializerProvider.java\nrename to sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializerProvider.java\nindex 9a49a67687e..68b8fe16252 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializerProvider.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializerProvider.java\n\n@@ -1,18 +1,17 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-package com.azure.core.experimental.serializer;\n+package com.azure.core.util.serializer;\n \n /**\n- * Interface to be implemented by an azure-core plugin that wishes to provide a {@link PropertyNameSerializer}\n- * implementation.\n+ * Interface to be implemented by an azure-core plugin that wishes to provide a {@link JsonSerializer} implementation.\n  */\n-public interface PropertyNameSerializerProvider {\n+public interface JsonSerializerProvider {\n \n     /**\n      * Creates a new instance of the {@link JsonSerializer} that this JsonSerializerProvider is configured to create.\n      *\n      * @return A new {@link JsonSerializer} instance.\n      */\n-    PropertyNameSerializer createInstance();\n+    JsonSerializer createInstance();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1ODQwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461958409", "bodyText": "Should update this error message since it was copied from JsonSerializerProviders.", "author": "alzimmermsft", "createdAt": "2020-07-28T23:52:38Z", "path": "sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializerProviders.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.experimental.serializer;\n+\n+import java.util.Iterator;\n+import java.util.ServiceLoader;\n+\n+/**\n+ * This class is a proxy for using a {@link PropertyNameSerializerProvider} loaded from the classpath.\n+ */\n+public final class PropertyNameSerializerProviders {\n+    private static final String CANNOT_FIND_JSON_SERIALIZER_PROVIDER =\n+        \"Cannot find any JSON serializer provider on the classpath.\";", "originalCommit": "6383838a0de92350447710ed57eaa427e9b3ec91", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c2b0d6c7e835a0d23278beb27fb1b31dab55bdf", "chunk": "diff --git a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializerProviders.java b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializerProviders.java\nindex efb4c4357eb..7a05520176d 100644\n--- a/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializerProviders.java\n+++ b/sdk/core/azure-core-experimental/src/main/java/com/azure/core/experimental/serializer/PropertyNameSerializerProviders.java\n\n@@ -11,7 +11,7 @@ import java.util.ServiceLoader;\n  */\n public final class PropertyNameSerializerProviders {\n     private static final String CANNOT_FIND_JSON_SERIALIZER_PROVIDER =\n-        \"Cannot find any JSON serializer provider on the classpath.\";\n+        \"Cannot find any seriailized name serializer provider on the classpath.\";\n \n     private static PropertyNameSerializerProvider defaultProvider;\n     private static boolean attemptedLoad;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1OTIxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461959215", "bodyText": "I would have GsonJsonSerializer implement the PropertyNameSerializer interface. The reason we made them separate was for cases when a customer wants to just create a custom JsonSerializer implementation they aren't strictly required to implement PropertyNameSerializer as well (though it would be recommended for completeness).", "author": "alzimmermsft", "createdAt": "2020-07-28T23:55:12Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.experimental.serializer.JsonSerializer;\n+import com.azure.core.experimental.serializer.PropertyNameSerializer;\n+import com.azure.core.util.CoreUtils;\n+import com.google.gson.Gson;\n+import com.google.gson.annotations.SerializedName;\n+import reactor.core.publisher.Mono;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+\n+/**\n+ * GSON based get property name implementation of the {@link PropertyNameSerializer} interface.\n+ */\n+public class GsonPropertyNameSerializer implements PropertyNameSerializer {", "originalCommit": "6383838a0de92350447710ed57eaa427e9b3ec91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1Mjk2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r462452965", "bodyText": "I will remove the seperate Jackson/GsonPropertyNameSerializer and merge it into Jackson/GsonJsonSerializer.\nMeanwhile, I will make up the getSerialziedMemberName to read Class and Constructor as well.", "author": "sima-zhu", "createdAt": "2020-07-29T17:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1OTIxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c2b0d6c7e835a0d23278beb27fb1b31dab55bdf", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java\ndeleted file mode 100644\nindex 9039811ab12..00000000000\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java\n+++ /dev/null\n\n@@ -1,54 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.core.serializer.json.gson;\n-\n-import com.azure.core.experimental.serializer.JsonSerializer;\n-import com.azure.core.experimental.serializer.PropertyNameSerializer;\n-import com.azure.core.util.CoreUtils;\n-import com.google.gson.Gson;\n-import com.google.gson.annotations.SerializedName;\n-import reactor.core.publisher.Mono;\n-\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Member;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n-\n-/**\n- * GSON based get property name implementation of the {@link PropertyNameSerializer} interface.\n- */\n-public class GsonPropertyNameSerializer implements PropertyNameSerializer {\n-    private final Gson gson;\n-\n-    /**\n-     * Constructs a {@link JsonSerializer} using the passed {@link Gson} serializer.\n-     *\n-     * @param gson Configured {@link Gson} serializer.\n-     */\n-    GsonPropertyNameSerializer(Gson gson) {\n-        this.gson = gson;\n-    }\n-\n-    @Override\n-    public Mono<String> getSerializerMemberName(Member member) {\n-        return Mono.fromCallable(() -> {\n-            if (Modifier.isTransient(member.getModifiers())) {\n-                return null;\n-            }\n-            if (member instanceof Field) {\n-                if (gson.excluder().excludeField((Field) member, true)) {\n-                    return null;\n-                }\n-                if (!((Field) member).isAnnotationPresent(SerializedName.class)) {\n-                    return member.getName();\n-                }\n-                String propertyName = ((Field) member).getDeclaredAnnotation(SerializedName.class).value();\n-                return CoreUtils.isNullOrEmpty(propertyName) ? ((Field) member).getName() : propertyName;\n-            } else if (member instanceof Method) {\n-                return member.getName();\n-            }\n-            return null;\n-        });\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1OTQxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461959419", "bodyText": "Great find with this excluder API!", "author": "alzimmermsft", "createdAt": "2020-07-28T23:55:52Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.experimental.serializer.JsonSerializer;\n+import com.azure.core.experimental.serializer.PropertyNameSerializer;\n+import com.azure.core.util.CoreUtils;\n+import com.google.gson.Gson;\n+import com.google.gson.annotations.SerializedName;\n+import reactor.core.publisher.Mono;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+\n+/**\n+ * GSON based get property name implementation of the {@link PropertyNameSerializer} interface.\n+ */\n+public class GsonPropertyNameSerializer implements PropertyNameSerializer {\n+    private final Gson gson;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed {@link Gson} serializer.\n+     *\n+     * @param gson Configured {@link Gson} serializer.\n+     */\n+    GsonPropertyNameSerializer(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public Mono<String> getSerializerMemberName(Member member) {\n+        return Mono.fromCallable(() -> {\n+            if (Modifier.isTransient(member.getModifiers())) {\n+                return null;\n+            }\n+            if (member instanceof Field) {\n+                if (gson.excluder().excludeField((Field) member, true)) {", "originalCommit": "6383838a0de92350447710ed57eaa427e9b3ec91", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c2b0d6c7e835a0d23278beb27fb1b31dab55bdf", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java\ndeleted file mode 100644\nindex 9039811ab12..00000000000\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java\n+++ /dev/null\n\n@@ -1,54 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.core.serializer.json.gson;\n-\n-import com.azure.core.experimental.serializer.JsonSerializer;\n-import com.azure.core.experimental.serializer.PropertyNameSerializer;\n-import com.azure.core.util.CoreUtils;\n-import com.google.gson.Gson;\n-import com.google.gson.annotations.SerializedName;\n-import reactor.core.publisher.Mono;\n-\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Member;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n-\n-/**\n- * GSON based get property name implementation of the {@link PropertyNameSerializer} interface.\n- */\n-public class GsonPropertyNameSerializer implements PropertyNameSerializer {\n-    private final Gson gson;\n-\n-    /**\n-     * Constructs a {@link JsonSerializer} using the passed {@link Gson} serializer.\n-     *\n-     * @param gson Configured {@link Gson} serializer.\n-     */\n-    GsonPropertyNameSerializer(Gson gson) {\n-        this.gson = gson;\n-    }\n-\n-    @Override\n-    public Mono<String> getSerializerMemberName(Member member) {\n-        return Mono.fromCallable(() -> {\n-            if (Modifier.isTransient(member.getModifiers())) {\n-                return null;\n-            }\n-            if (member instanceof Field) {\n-                if (gson.excluder().excludeField((Field) member, true)) {\n-                    return null;\n-                }\n-                if (!((Field) member).isAnnotationPresent(SerializedName.class)) {\n-                    return member.getName();\n-                }\n-                String propertyName = ((Field) member).getDeclaredAnnotation(SerializedName.class).value();\n-                return CoreUtils.isNullOrEmpty(propertyName) ? ((Field) member).getName() : propertyName;\n-            } else if (member instanceof Method) {\n-                return member.getName();\n-            }\n-            return null;\n-        });\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MDI0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461960246", "bodyText": "To make the code cleaner in this condition may want to instantiate a local Field variable instead of casting every time it needs to be Field.", "author": "alzimmermsft", "createdAt": "2020-07-28T23:58:34Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.experimental.serializer.JsonSerializer;\n+import com.azure.core.experimental.serializer.PropertyNameSerializer;\n+import com.azure.core.util.CoreUtils;\n+import com.google.gson.Gson;\n+import com.google.gson.annotations.SerializedName;\n+import reactor.core.publisher.Mono;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+\n+/**\n+ * GSON based get property name implementation of the {@link PropertyNameSerializer} interface.\n+ */\n+public class GsonPropertyNameSerializer implements PropertyNameSerializer {\n+    private final Gson gson;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed {@link Gson} serializer.\n+     *\n+     * @param gson Configured {@link Gson} serializer.\n+     */\n+    GsonPropertyNameSerializer(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public Mono<String> getSerializerMemberName(Member member) {\n+        return Mono.fromCallable(() -> {\n+            if (Modifier.isTransient(member.getModifiers())) {\n+                return null;\n+            }\n+            if (member instanceof Field) {\n+                if (gson.excluder().excludeField((Field) member, true)) {", "originalCommit": "6383838a0de92350447710ed57eaa427e9b3ec91", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c2b0d6c7e835a0d23278beb27fb1b31dab55bdf", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java\ndeleted file mode 100644\nindex 9039811ab12..00000000000\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java\n+++ /dev/null\n\n@@ -1,54 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.core.serializer.json.gson;\n-\n-import com.azure.core.experimental.serializer.JsonSerializer;\n-import com.azure.core.experimental.serializer.PropertyNameSerializer;\n-import com.azure.core.util.CoreUtils;\n-import com.google.gson.Gson;\n-import com.google.gson.annotations.SerializedName;\n-import reactor.core.publisher.Mono;\n-\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Member;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n-\n-/**\n- * GSON based get property name implementation of the {@link PropertyNameSerializer} interface.\n- */\n-public class GsonPropertyNameSerializer implements PropertyNameSerializer {\n-    private final Gson gson;\n-\n-    /**\n-     * Constructs a {@link JsonSerializer} using the passed {@link Gson} serializer.\n-     *\n-     * @param gson Configured {@link Gson} serializer.\n-     */\n-    GsonPropertyNameSerializer(Gson gson) {\n-        this.gson = gson;\n-    }\n-\n-    @Override\n-    public Mono<String> getSerializerMemberName(Member member) {\n-        return Mono.fromCallable(() -> {\n-            if (Modifier.isTransient(member.getModifiers())) {\n-                return null;\n-            }\n-            if (member instanceof Field) {\n-                if (gson.excluder().excludeField((Field) member, true)) {\n-                    return null;\n-                }\n-                if (!((Field) member).isAnnotationPresent(SerializedName.class)) {\n-                    return member.getName();\n-                }\n-                String propertyName = ((Field) member).getDeclaredAnnotation(SerializedName.class).value();\n-                return CoreUtils.isNullOrEmpty(propertyName) ? ((Field) member).getName() : propertyName;\n-            } else if (member instanceof Method) {\n-                return member.getName();\n-            }\n-            return null;\n-        });\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MDQ4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461960482", "bodyText": "Should run validation on whether GSON leverages getters in their databind.", "author": "alzimmermsft", "createdAt": "2020-07-28T23:59:22Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.experimental.serializer.JsonSerializer;\n+import com.azure.core.experimental.serializer.PropertyNameSerializer;\n+import com.azure.core.util.CoreUtils;\n+import com.google.gson.Gson;\n+import com.google.gson.annotations.SerializedName;\n+import reactor.core.publisher.Mono;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+\n+/**\n+ * GSON based get property name implementation of the {@link PropertyNameSerializer} interface.\n+ */\n+public class GsonPropertyNameSerializer implements PropertyNameSerializer {\n+    private final Gson gson;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed {@link Gson} serializer.\n+     *\n+     * @param gson Configured {@link Gson} serializer.\n+     */\n+    GsonPropertyNameSerializer(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public Mono<String> getSerializerMemberName(Member member) {\n+        return Mono.fromCallable(() -> {\n+            if (Modifier.isTransient(member.getModifiers())) {\n+                return null;\n+            }\n+            if (member instanceof Field) {\n+                if (gson.excluder().excludeField((Field) member, true)) {\n+                    return null;\n+                }\n+                if (!((Field) member).isAnnotationPresent(SerializedName.class)) {\n+                    return member.getName();\n+                }\n+                String propertyName = ((Field) member).getDeclaredAnnotation(SerializedName.class).value();\n+                return CoreUtils.isNullOrEmpty(propertyName) ? ((Field) member).getName() : propertyName;\n+            } else if (member instanceof Method) {\n+                return member.getName();\n+            }", "originalCommit": "6383838a0de92350447710ed57eaa427e9b3ec91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyNjE1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r462626153", "bodyText": "Could you explain a little more on what do we want to validate here?", "author": "sima-zhu", "createdAt": "2020-07-29T22:27:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MDQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5MjY5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463192699", "bodyText": "Verified Gson is not able to rename property on getter.", "author": "sima-zhu", "createdAt": "2020-07-30T18:32:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MDQ4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4c2b0d6c7e835a0d23278beb27fb1b31dab55bdf", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java\ndeleted file mode 100644\nindex 9039811ab12..00000000000\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializer.java\n+++ /dev/null\n\n@@ -1,54 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.core.serializer.json.gson;\n-\n-import com.azure.core.experimental.serializer.JsonSerializer;\n-import com.azure.core.experimental.serializer.PropertyNameSerializer;\n-import com.azure.core.util.CoreUtils;\n-import com.google.gson.Gson;\n-import com.google.gson.annotations.SerializedName;\n-import reactor.core.publisher.Mono;\n-\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Member;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n-\n-/**\n- * GSON based get property name implementation of the {@link PropertyNameSerializer} interface.\n- */\n-public class GsonPropertyNameSerializer implements PropertyNameSerializer {\n-    private final Gson gson;\n-\n-    /**\n-     * Constructs a {@link JsonSerializer} using the passed {@link Gson} serializer.\n-     *\n-     * @param gson Configured {@link Gson} serializer.\n-     */\n-    GsonPropertyNameSerializer(Gson gson) {\n-        this.gson = gson;\n-    }\n-\n-    @Override\n-    public Mono<String> getSerializerMemberName(Member member) {\n-        return Mono.fromCallable(() -> {\n-            if (Modifier.isTransient(member.getModifiers())) {\n-                return null;\n-            }\n-            if (member instanceof Field) {\n-                if (gson.excluder().excludeField((Field) member, true)) {\n-                    return null;\n-                }\n-                if (!((Field) member).isAnnotationPresent(SerializedName.class)) {\n-                    return member.getName();\n-                }\n-                String propertyName = ((Field) member).getDeclaredAnnotation(SerializedName.class).value();\n-                return CoreUtils.isNullOrEmpty(propertyName) ? ((Field) member).getName() : propertyName;\n-            } else if (member instanceof Method) {\n-                return member.getName();\n-            }\n-            return null;\n-        });\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MDc0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461960744", "bodyText": "If we have GsonJsonSerializer implement the PropertyNameSerializer interface we won't need this class, which feels very duplicative of GsonJsonSerializerBuilder.", "author": "alzimmermsft", "createdAt": "2020-07-29T00:00:17Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializerBuilder.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * Fluent builder class that configures and instantiates instances of {@link GsonPropertyNameSerializer}.\n+ */\n+public class GsonPropertyNameSerializerBuilder {", "originalCommit": "6383838a0de92350447710ed57eaa427e9b3ec91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxOTYxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r462419616", "bodyText": "Do you mean we reuse GsonJsonSerializerBuilder to build PropertyNameSerializer?\nWe need the Gson instance in PropertyNameSerializer to check the excluder", "author": "sima-zhu", "createdAt": "2020-07-29T16:12:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MDc0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyNDY0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r462624641", "bodyText": "We have removed the independent PropertyNameSerializer impl from Gson/Jackson", "author": "sima-zhu", "createdAt": "2020-07-29T22:23:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MDc0NA=="}], "type": "inlineReview", "revised_code": {"commit": "4c2b0d6c7e835a0d23278beb27fb1b31dab55bdf", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializerBuilder.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializerBuilder.java\ndeleted file mode 100644\nindex 96845b2e50b..00000000000\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonPropertyNameSerializerBuilder.java\n+++ /dev/null\n\n@@ -1,37 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.core.serializer.json.gson;\n-\n-import com.google.gson.GsonBuilder;\n-\n-/**\n- * Fluent builder class that configures and instantiates instances of {@link GsonPropertyNameSerializer}.\n- */\n-public class GsonPropertyNameSerializerBuilder {\n-\n-    private GsonBuilder gsonBuilder;\n-\n-    /**\n-     * Constructs a new instance of {@link GsonPropertyNameSerializer} with the configurations set in this builder.\n-     *\n-     * @return A new instance of {@link GsonPropertyNameSerializer}.\n-     */\n-    public GsonPropertyNameSerializer build() {\n-        GsonBuilder gsonBuilder = (this.gsonBuilder == null) ? new GsonBuilder() : this.gsonBuilder;\n-        return new GsonPropertyNameSerializer(gsonBuilder.create());\n-    }\n-\n-    /**\n-     * Sets the {@link GsonBuilder} that will be used during serialization.\n-     * <p>\n-     * If this is set to {@code null} the default {@link GsonBuilder} will be used.\n-     *\n-     * @param gsonBuilder {@link GsonBuilder} that will be used during serialization.\n-     * @return The updated GsonPropertyNameSerializer class.\n-     */\n-    public GsonPropertyNameSerializerBuilder serializer(GsonBuilder gsonBuilder) {\n-        this.gsonBuilder = gsonBuilder;\n-        return this;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MTM3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461961370", "bodyText": "Would love to see some integration tests to go along with these unit tests. Cases where we pass a class into the PropertyNameSerializer and also serialize the same class into a JsonElement where we then validate that the JsonElement contains JSON attributes with the names returned by PropertyNameSerializer.", "author": "alzimmermsft", "createdAt": "2020-07-29T00:02:15Z", "path": "sdk/core/azure-core-serializer-json-gson/src/test/java/com/azure/core/serializer/json/gson/GsonPropertyNameTests.java", "diffHunk": "@@ -0,0 +1,113 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.experimental.serializer.PropertyNameSerializer;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import reactor.test.StepVerifier;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class GsonPropertyNameTests {", "originalCommit": "6383838a0de92350447710ed57eaa427e9b3ec91", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c2b0d6c7e835a0d23278beb27fb1b31dab55bdf", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/test/java/com/azure/core/serializer/json/gson/GsonPropertyNameTests.java b/sdk/core/azure-core-serializer-json-gson/src/test/java/com/azure/core/serializer/json/gson/GsonPropertyNameTests.java\nindex 11c81c31db1..5ee455b3f70 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/test/java/com/azure/core/serializer/json/gson/GsonPropertyNameTests.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/test/java/com/azure/core/serializer/json/gson/GsonPropertyNameTests.java\n\n@@ -9,13 +9,12 @@ import com.google.gson.annotations.Expose;\n import com.google.gson.annotations.SerializedName;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n-import reactor.test.StepVerifier;\n \n import java.lang.reflect.Field;\n-import java.lang.reflect.Member;\n import java.lang.reflect.Method;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n \n public class GsonPropertyNameTests {\n     private static final String EXPECT_VALUE_IN_FIELD = \"expectFieldName\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MjMxNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461962316", "bodyText": "This can be removed as TypeReference<T> has been merged into Azure Core Experimental.", "author": "alzimmermsft", "createdAt": "2020-07-29T00:05:42Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/serializer/TypeRef.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.serializer;\n+\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+\n+public abstract class TypeRef<T> {", "originalCommit": "6383838a0de92350447710ed57eaa427e9b3ec91", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bf0ebaa988936f911fc9121979f8ac008a2acfb", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/serializer/TypeRef.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/serializer/TypeRef.java\ndeleted file mode 100644\nindex 4fa64283348..00000000000\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/serializer/TypeRef.java\n+++ /dev/null\n\n@@ -1,56 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.search.documents.implementation.serializer;\n-\n-import java.lang.reflect.ParameterizedType;\n-import java.lang.reflect.Type;\n-\n-public abstract class TypeRef<T> {\n-\n-    private final Type javaType;\n-\n-    /**\n-     * Constructor\n-     * @throws IllegalArgumentException if the reference is constructed without actual type information\n-     */\n-    public TypeRef() {\n-        java.lang.reflect.Type superClass = this.getClass().getGenericSuperclass();\n-        if (superClass instanceof Class) {\n-            throw new IllegalArgumentException(\n-                \"Internal error: TypeReference constructed without actual type information\");\n-        } else {\n-            this.javaType = ((ParameterizedType) superClass).getActualTypeArguments()[0];\n-        }\n-    }\n-\n-    /**\n-     * Return class T type\n-     * @return type\n-     */\n-    public Type getJavaType() {\n-        return javaType;\n-    }\n-\n-    /**\n-     * Returns is the type a ParameterizedType (collection, string etc.)\n-     * @return boolean value\n-     */\n-    public boolean isParameterizedType() {\n-        if (!(javaType instanceof ParameterizedType)) {\n-            return false;\n-        }\n-\n-        return true;\n-    }\n-\n-    /**\n-     * Get the type of the actual type of the Type object\n-     * @return ava.lang.reflect.Type\n-     */\n-    public Type getListType() {\n-        assert isParameterizedType();\n-        ParameterizedType parameterizedType = (ParameterizedType) javaType;\n-        return parameterizedType.getActualTypeArguments()[0];\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MjkwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461962901", "bodyText": ".copy() the serializer otherwise this will mutate the Azure Core serializer which we won't want. Another option would be creating a new instance of JacksonAdapter rather than use createDefaultSerializerAdapter (which creates or returns the global instance depending on whether it has already been instantiated).", "author": "alzimmermsft", "createdAt": "2020-07-29T00:07:33Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/Utility.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.core.experimental.serializer.JsonSerializer;\n+import com.azure.core.serializer.json.jackson.JacksonJsonSerializerBuilder;\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import com.azure.search.documents.implementation.serializer.SerializationUtil;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public final class Utility {\n+    /**\n+     * Helper class to initialize the SerializerAdapter.\n+     * @return The SerializeAdapter instance.\n+     */\n+    public static SerializerAdapter initializeSerializerAdapter() {\n+        JacksonAdapter adapter = (JacksonAdapter) JacksonAdapter.createDefaultSerializerAdapter();\n+\n+        ObjectMapper mapper = adapter.serializer();", "originalCommit": "6383838a0de92350447710ed57eaa427e9b3ec91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQyOTE5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r462429190", "bodyText": "Is there an API for .copy()?\nThe API here is to use across the rest client(core serializer). I would like to share cross the clients to save the initialization time as they always use the same settings.\nFor the customer serializer layer, we have a new instance to make sure core serializer doesn't mix the use with it.", "author": "sima-zhu", "createdAt": "2020-07-29T16:27:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MjkwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE2Njk2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465166966", "bodyText": "There is an issue with changing this for all clients as this could affect how AppConfiguration, KeyVault, Storage, etc serialize and deserialize when used along side Search which mutates the global serializer. Maybe this method should be turned into a lazy loaded which initializes a constant ObjectMapper used for Search instead of changing the global ObjectMapper.", "author": "alzimmermsft", "createdAt": "2020-08-04T16:12:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MjkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "ee6e1f7d57692393dcfbeec5788e7c80c25e8935", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/Utility.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/Utility.java\nindex 4dd05034d38..0c5d303c150 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/Utility.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/Utility.java\n\n@@ -3,7 +3,6 @@\n \n package com.azure.search.documents.implementation.util;\n \n-import com.azure.core.experimental.serializer.JsonSerializer;\n import com.azure.core.serializer.json.jackson.JacksonJsonSerializerBuilder;\n import com.azure.core.util.serializer.JacksonAdapter;\n import com.azure.core.util.serializer.SerializerAdapter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MzE3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461963173", "bodyText": "May need to comment this out again as I don't think PointGeometry will be released this month.", "author": "alzimmermsft", "createdAt": "2020-07-29T00:08:34Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java", "diffHunk": "@@ -38,28 +43,26 @@\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(String.class, SearchFieldDataType.STRING);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(Date.class, SearchFieldDataType.DATE_TIME_OFFSET);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(OffsetDateTime.class, SearchFieldDataType.DATE_TIME_OFFSET);\n-//        SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n+        SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);", "originalCommit": "6383838a0de92350447710ed57eaa427e9b3ec91", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4c2b0d6c7e835a0d23278beb27fb1b31dab55bdf", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java\nindex 81d184ffb14..7dbd6edd608 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java\n\n@@ -43,7 +42,7 @@ public final class FieldBuilder {\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(String.class, SearchFieldDataType.STRING);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(Date.class, SearchFieldDataType.DATE_TIME_OFFSET);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(OffsetDateTime.class, SearchFieldDataType.DATE_TIME_OFFSET);\n-        SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n+        //SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n     }\n \n     private static final List<Class<?>> UNSUPPORTED_TYPES = Arrays.asList(byte.class, Byte.class,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MzYyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461963623", "bodyText": "Any reason we can't support CharSequence by using its toString method which returns its value as a String? I believe Jackson and GSON will handle CharSequence similar to a String.", "author": "alzimmermsft", "createdAt": "2020-07-29T00:10:03Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java", "diffHunk": "@@ -38,28 +43,26 @@\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(String.class, SearchFieldDataType.STRING);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(Date.class, SearchFieldDataType.DATE_TIME_OFFSET);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(OffsetDateTime.class, SearchFieldDataType.DATE_TIME_OFFSET);\n-//        SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n+        SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n     }\n \n-    private static final List<Class<?>> UNSUPPORTED_TYPES = Arrays.asList(Byte.class,\n-        CharSequence.class,\n-        Character.class,\n-        char.class,\n-        Float.class,\n-        float.class,\n-        Short.class,\n-        short.class);\n+    private static final List<Class<?>> UNSUPPORTED_TYPES = Arrays.asList(byte.class, Byte.class,\n+        CharSequence.class, Character.class, char.class,", "originalCommit": "6383838a0de92350447710ed57eaa427e9b3ec91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0NDQ4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r462444485", "bodyText": "Yes, I think this one can move to the supported type mapping if we all agree to it.", "author": "sima-zhu", "createdAt": "2020-07-29T16:52:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MzYyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyNTQwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r462625403", "bodyText": "Moved to Supported search date type mapper", "author": "sima-zhu", "createdAt": "2020-07-29T22:25:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2MzYyMw=="}], "type": "inlineReview", "revised_code": {"commit": "4c2b0d6c7e835a0d23278beb27fb1b31dab55bdf", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java\nindex 81d184ffb14..7dbd6edd608 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java\n\n@@ -43,7 +42,7 @@ public final class FieldBuilder {\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(String.class, SearchFieldDataType.STRING);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(Date.class, SearchFieldDataType.DATE_TIME_OFFSET);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(OffsetDateTime.class, SearchFieldDataType.DATE_TIME_OFFSET);\n-        SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n+        //SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n     }\n \n     private static final List<Class<?>> UNSUPPORTED_TYPES = Arrays.asList(byte.class, Byte.class,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2NDAwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461964001", "bodyText": "Would we be allowed to upcast these types into Double and Integer respectively? Possible the same with Byte and byte to Integer?\nOr is the idea being more restrictive is safer?", "author": "alzimmermsft", "createdAt": "2020-07-29T00:11:18Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java", "diffHunk": "@@ -38,28 +43,26 @@\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(String.class, SearchFieldDataType.STRING);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(Date.class, SearchFieldDataType.DATE_TIME_OFFSET);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(OffsetDateTime.class, SearchFieldDataType.DATE_TIME_OFFSET);\n-//        SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n+        SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n     }\n \n-    private static final List<Class<?>> UNSUPPORTED_TYPES = Arrays.asList(Byte.class,\n-        CharSequence.class,\n-        Character.class,\n-        char.class,\n-        Float.class,\n-        float.class,\n-        Short.class,\n-        short.class);\n+    private static final List<Class<?>> UNSUPPORTED_TYPES = Arrays.asList(byte.class, Byte.class,\n+        CharSequence.class, Character.class, char.class,\n+        Float.class, float.class,\n+        Short.class, short.class);", "originalCommit": "6383838a0de92350447710ed57eaa427e9b3ec91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0MzMzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r462443330", "bodyText": "There is no hard requirement on this currently.\nHere is the reason why we restrict more types now:\n\nAdding more to allowlist is allowed for the release, but taking back is kind of breaking changes. I prefer to make it as limited as possible to minimize breaking changes we might introduce.\nMapping byte to integer is not quite right when serialize model POJO to Json. SearchField will use EDM.Integer, but upload doc would have it transfer to encoded string when send to the wire. It is really hard to predict how customer handle it. It is better to block it unitl we have clear use case.", "author": "sima-zhu", "createdAt": "2020-07-29T16:50:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2NDAwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c2b0d6c7e835a0d23278beb27fb1b31dab55bdf", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java\nindex 81d184ffb14..7dbd6edd608 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java\n\n@@ -43,7 +42,7 @@ public final class FieldBuilder {\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(String.class, SearchFieldDataType.STRING);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(Date.class, SearchFieldDataType.DATE_TIME_OFFSET);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(OffsetDateTime.class, SearchFieldDataType.DATE_TIME_OFFSET);\n-        SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n+        //SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n     }\n \n     private static final List<Class<?>> UNSUPPORTED_TYPES = Arrays.asList(byte.class, Byte.class,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2NDM5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461964397", "bodyText": "Could we call this method getSearchFields? build feels analogous to a builder pattern.", "author": "alzimmermsft", "createdAt": "2020-07-29T00:12:28Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java", "diffHunk": "@@ -38,28 +43,26 @@\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(String.class, SearchFieldDataType.STRING);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(Date.class, SearchFieldDataType.DATE_TIME_OFFSET);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(OffsetDateTime.class, SearchFieldDataType.DATE_TIME_OFFSET);\n-//        SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n+        SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n     }\n \n-    private static final List<Class<?>> UNSUPPORTED_TYPES = Arrays.asList(Byte.class,\n-        CharSequence.class,\n-        Character.class,\n-        char.class,\n-        Float.class,\n-        float.class,\n-        Short.class,\n-        short.class);\n+    private static final List<Class<?>> UNSUPPORTED_TYPES = Arrays.asList(byte.class, Byte.class,\n+        CharSequence.class, Character.class, char.class,\n+        Float.class, float.class,\n+        Short.class, short.class);\n \n     /**\n      * Creates a collection of {@link SearchField} objects corresponding to the properties of the type supplied.\n      *\n      * @param modelClass The class for which fields will be created, based on its properties.\n+     * @param serializer Optional serializer which allow to use customized serializer library. Default to take Jackson\n+     * serialization.\n      * @param <T> The generic type of the model class.\n      * @return A collection of fields.\n      */\n-    public static <T> List<SearchField> build(Class<T> modelClass) {\n+    public static <T> List<SearchField> build(Class<T> modelClass, PropertyNameSerializer serializer) {", "originalCommit": "6383838a0de92350447710ed57eaa427e9b3ec91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQzNjI5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r462436294", "bodyText": "Then the API is different than .NET.", "author": "sima-zhu", "createdAt": "2020-07-29T16:39:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2NDM5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4c2b0d6c7e835a0d23278beb27fb1b31dab55bdf", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java\nindex 81d184ffb14..7dbd6edd608 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java\n\n@@ -43,7 +42,7 @@ public final class FieldBuilder {\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(String.class, SearchFieldDataType.STRING);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(Date.class, SearchFieldDataType.DATE_TIME_OFFSET);\n         SUPPORTED_NONE_PARAMETERIZED_TYPE.put(OffsetDateTime.class, SearchFieldDataType.DATE_TIME_OFFSET);\n-        SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n+        //SUPPORTED_NONE_PARAMETERIZED_TYPE.put(PointGeometry.class, SearchFieldDataType.GEOGRAPHY_POINT);\n     }\n \n     private static final List<Class<?>> UNSUPPORTED_TYPES = Arrays.asList(byte.class, Byte.class,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk2NTUyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r461965528", "bodyText": "This should only require. transitive is when it is used as part of the public API.", "author": "alzimmermsft", "createdAt": "2020-07-29T00:15:58Z", "path": "sdk/search/azure-search-documents/src/main/java/module-info.java", "diffHunk": "@@ -5,6 +5,7 @@\n     requires transitive com.azure.core;\n     requires com.fasterxml.jackson.datatype.jsr310;\n     requires jakarta.activation;\n+    requires transitive com.azure.core.serializer.json.jackson;", "originalCommit": "6383838a0de92350447710ed57eaa427e9b3ec91", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2bf0ebaa988936f911fc9121979f8ac008a2acfb", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/module-info.java b/sdk/search/azure-search-documents/src/main/java/module-info.java\nindex 69f04e21066..86ed7e1a38f 100644\n--- a/sdk/search/azure-search-documents/src/main/java/module-info.java\n+++ b/sdk/search/azure-search-documents/src/main/java/module-info.java\n\n@@ -2,10 +2,12 @@\n // Licensed under the MIT License.\n \n module com.azure.search.documents {\n-    requires transitive com.azure.core;\n     requires com.fasterxml.jackson.datatype.jsr310;\n     requires jakarta.activation;\n-    requires transitive com.azure.core.serializer.json.jackson;\n+    requires com.fasterxml.jackson.annotation;\n+    requires com.azure.core;\n+    requires com.azure.core.experimental;\n+    requires com.azure.core.serializer.json.jackson;\n \n     opens com.azure.search.documents to com.fasterxml.jackson.databind;\n     opens com.azure.search.documents.models to com.fasterxml.jackson.databind;\n"}}, {"oid": "2bf0ebaa988936f911fc9121979f8ac008a2acfb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2bf0ebaa988936f911fc9121979f8ac008a2acfb", "message": "Merge the API from mainline", "committedDate": "2020-07-29T01:17:26Z", "type": "commit"}, {"oid": "4c2b0d6c7e835a0d23278beb27fb1b31dab55bdf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4c2b0d6c7e835a0d23278beb27fb1b31dab55bdf", "message": "Addressed feedback", "committedDate": "2020-07-29T22:15:35Z", "type": "commit"}, {"oid": "a501baf12624e5541c97962813d871727da98c86", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a501baf12624e5541c97962813d871727da98c86", "message": "Merge from mainlne", "committedDate": "2020-07-29T22:32:20Z", "type": "commit"}, {"oid": "8eabbbf008b8d4c18c1732a8590386f92fb55a51", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8eabbbf008b8d4c18c1732a8590386f92fb55a51", "message": "Fixed the core serializer used in search.", "committedDate": "2020-07-29T23:14:22Z", "type": "commit"}, {"oid": "b5ca283df0e6d941343a36338def52ff9c6aba78", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b5ca283df0e6d941343a36338def52ff9c6aba78", "message": "Fixed more on jackson", "committedDate": "2020-07-30T00:19:31Z", "type": "commit"}, {"oid": "b4ddad94e51c75accfe6ec7739db12d5ff385064", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b4ddad94e51c75accfe6ec7739db12d5ff385064", "message": "Merge from mainline", "committedDate": "2020-07-30T17:38:33Z", "type": "commit"}, {"oid": "3fb13cba36987b1cff0228c5757c6af14100d4a5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3fb13cba36987b1cff0228c5757c6af14100d4a5", "message": "Added some tests on constructor", "committedDate": "2020-07-30T17:59:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3MzY0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463173647", "bodyText": "Search needs to requires transitive com.azure.core since it contains Azure Core types in the public API.", "author": "alzimmermsft", "createdAt": "2020-07-30T17:58:07Z", "path": "sdk/search/azure-search-documents/src/main/java/module-info.java", "diffHunk": "@@ -2,9 +2,10 @@\n // Licensed under the MIT License.\n \n module com.azure.search.documents {\n-    requires transitive com.azure.core;", "originalCommit": "b4ddad94e51c75accfe6ec7739db12d5ff385064", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3ODY3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463178676", "bodyText": "It is transitive from azure.core.serializer.json.jackson", "author": "sima-zhu", "createdAt": "2020-07-30T18:07:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3MzY0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNTIzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465515232", "bodyText": "Then azure.core.serializer.json.jackson must be made transitive.", "author": "srnagar", "createdAt": "2020-08-05T07:01:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3MzY0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "766029399f339b49344372dfa40b9d14d2e9c533", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/module-info.java b/sdk/search/azure-search-documents/src/main/java/module-info.java\nindex 2c0ecef794b..d0440537ba1 100644\n--- a/sdk/search/azure-search-documents/src/main/java/module-info.java\n+++ b/sdk/search/azure-search-documents/src/main/java/module-info.java\n\n@@ -2,10 +2,10 @@\n // Licensed under the MIT License.\n \n module com.azure.search.documents {\n+    requires transitive com.azure.core.serializer.json.jackson;\n     requires com.fasterxml.jackson.datatype.jsr310;\n     requires jakarta.activation;\n     requires com.fasterxml.jackson.annotation;\n-    requires com.azure.core.serializer.json.jackson;\n \n     opens com.azure.search.documents to com.fasterxml.jackson.databind;\n     opens com.azure.search.documents.models to com.fasterxml.jackson.databind;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NTE0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463175148", "bodyText": "We should create this outside of the stream, right now this is going to construct a new instance for each declared field.", "author": "alzimmermsft", "createdAt": "2020-07-30T18:00:35Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java", "diffHunk": "@@ -82,31 +87,48 @@\n         classChain.push(currentClass);\n         List<SearchField> searchFields = Arrays.stream(currentClass.getDeclaredFields())\n             .filter(classField -> !classField.isAnnotationPresent(FieldIgnore.class))\n-            .map(classField -> buildField(classField, classChain, logger))\n+            .map(classField -> buildField(classField, classChain, serializer, logger))\n+            .filter(Objects::nonNull)\n             .collect(Collectors.toList());\n         classChain.pop();\n         return searchFields;\n     }\n \n-    private static SearchField buildField(java.lang.reflect.Field classField, Stack<Class<?>> classChain,\n-        ClientLogger logger) {\n+    private static SearchField buildField(Field classField, Stack<Class<?>> classChain,\n+        PropertyNameSerializer serializer, ClientLogger logger) {\n+        if (serializer == null) {\n+            serializer = new JacksonJsonSerializerProvider().createInstance();\n+        }", "originalCommit": "b4ddad94e51c75accfe6ec7739db12d5ff385064", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f24005fbf9e66a0cc3ab1ecd646b5a33a1f507ed", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java\nindex 5d7ff653f46..1acf844d31b 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/FieldBuilder.java\n\n@@ -96,9 +99,6 @@ public final class FieldBuilder {\n \n     private static SearchField buildField(Field classField, Stack<Class<?>> classChain,\n         PropertyNameSerializer serializer, ClientLogger logger) {\n-        if (serializer == null) {\n-            serializer = new JacksonJsonSerializerProvider().createInstance();\n-        }\n         String fieldName = serializer.getSerializerMemberName(classField);\n         if (fieldName == null) {\n             return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NjU2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463176564", "bodyText": "I'm wondering if the SPI providers should be different but return the same type, basically copying this class but only having it implement PropertyNameSerializerProvider.", "author": "alzimmermsft", "createdAt": "2020-07-30T18:03:08Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializerProvider.java", "diffHunk": "@@ -3,15 +3,15 @@\n \n package com.azure.core.serializer.json.gson;\n \n-import com.azure.core.experimental.serializer.JsonSerializer;\n import com.azure.core.experimental.serializer.JsonSerializerProvider;\n+import com.azure.core.experimental.serializer.PropertyNameSerializerProvider;\n \n /**\n  * Implementation of {@link JsonSerializerProvider}.\n  */\n-public class GsonJsonSerializerProvider implements JsonSerializerProvider {\n+public class GsonJsonSerializerProvider implements JsonSerializerProvider, PropertyNameSerializerProvider {", "originalCommit": "b4ddad94e51c75accfe6ec7739db12d5ff385064", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee6e1f7d57692393dcfbeec5788e7c80c25e8935", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializerProvider.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializerProvider.java\nindex cf74b2f3197..65b2a593ffe 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializerProvider.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializerProvider.java\n\n@@ -3,15 +3,15 @@\n \n package com.azure.core.serializer.json.gson;\n \n-import com.azure.core.experimental.serializer.JsonSerializerProvider;\n-import com.azure.core.experimental.serializer.PropertyNameSerializerProvider;\n+import com.azure.core.util.serializer.JsonSerializer;\n+import com.azure.core.util.serializer.JsonSerializerProvider;\n \n /**\n  * Implementation of {@link JsonSerializerProvider}.\n  */\n-public class GsonJsonSerializerProvider implements JsonSerializerProvider, PropertyNameSerializerProvider {\n+public class GsonJsonSerializerProvider implements JsonSerializerProvider {\n     @Override\n-    public GsonJsonSerializer createInstance() {\n+    public JsonSerializer createInstance() {\n         return new GsonJsonSerializerBuilder().build();\n     }\n }\n"}}, {"oid": "f24005fbf9e66a0cc3ab1ecd646b5a33a1f507ed", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f24005fbf9e66a0cc3ab1ecd646b5a33a1f507ed", "message": "Added some tests on constructor", "committedDate": "2020-07-30T18:17:55Z", "type": "commit"}, {"oid": "380c10b4d4595d020e53f51e98b55d2c368bef60", "url": "https://github.com/Azure/azure-sdk-for-java/commit/380c10b4d4595d020e53f51e98b55d2c368bef60", "message": "Added integration tests", "committedDate": "2020-07-30T20:17:57Z", "type": "commit"}, {"oid": "1abf03c5ec807772bd35b68aa77009eb280581bb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1abf03c5ec807772bd35b68aa77009eb280581bb", "message": "Fixed linting", "committedDate": "2020-07-30T20:52:12Z", "type": "commit"}, {"oid": "20600e5b9286ee22a078c3ea30748824d4bd3dd2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/20600e5b9286ee22a078c3ea30748824d4bd3dd2", "message": "Fixed infer type problem", "committedDate": "2020-07-30T21:18:54Z", "type": "commit"}, {"oid": "f09198e2488eb2d43ba7c5a3ce210744eda08ea4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f09198e2488eb2d43ba7c5a3ce210744eda08ea4", "message": "Fixed the tests", "committedDate": "2020-07-30T21:34:26Z", "type": "commit"}, {"oid": "3e84f5e2c4fa4d3611404fc4eb2446ce8fb7668e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3e84f5e2c4fa4d3611404fc4eb2446ce8fb7668e", "message": "Correct the API names", "committedDate": "2020-07-30T22:19:04Z", "type": "commit"}, {"oid": "a2d7889cca16a9ae10ab46ef4e3ed8bf7cdb4c33", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a2d7889cca16a9ae10ab46ef4e3ed8bf7cdb4c33", "message": "Merge remote-tracking branch 'origin' into search_serializers", "committedDate": "2020-07-31T16:30:19Z", "type": "commit"}, {"oid": "ee6e1f7d57692393dcfbeec5788e7c80c25e8935", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ee6e1f7d57692393dcfbeec5788e7c80c25e8935", "message": "Merge from mainline", "committedDate": "2020-07-31T16:54:59Z", "type": "commit"}, {"oid": "392f749aefa316e22aa5ea5670947d5626ee3827", "url": "https://github.com/Azure/azure-sdk-for-java/commit/392f749aefa316e22aa5ea5670947d5626ee3827", "message": "Fixed the import after merge.", "committedDate": "2020-07-31T17:51:58Z", "type": "commit"}, {"oid": "902a9cba95a0401c43beb2f74f141ba311543abd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/902a9cba95a0401c43beb2f74f141ba311543abd", "message": "Rename the member name converter", "committedDate": "2020-07-31T21:59:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NDgyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463874827", "bodyText": "Should return null if Member is either a Constructor or Executable.", "author": "alzimmermsft", "createdAt": "2020-07-31T22:39:08Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java", "diffHunk": "@@ -65,4 +70,22 @@\n     public <S extends OutputStream> Mono<S> serializeAsync(S stream, Object value) {\n         return Mono.fromCallable(() -> serialize(stream, value));\n     }\n+\n+    @Override\n+    public String convertMemberName(Member member) {", "originalCommit": "902a9cba95a0401c43beb2f74f141ba311543abd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY1ODEzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r464658138", "bodyText": "Talked offline.\nWe currently use the API to deal with the Field/Method which contains Jackson/Gson etc rename annotations. Will return null for all other subclasses of Member (except Field).", "author": "sima-zhu", "createdAt": "2020-08-03T20:57:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NDgyNw=="}], "type": "inlineReview", "revised_code": {"commit": "df32122b01216663cc9f0a646d6a8bfc35837f19", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java\nindex 287049100c2..c0f2e19c7db 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java\n\n@@ -84,8 +85,12 @@ public final class GsonJsonSerializer implements JsonSerializer, MemberNameConve\n             if (f.isAnnotationPresent(SerializedName.class)) {\n                 return f.getDeclaredAnnotation(SerializedName.class).value();\n             }\n+            return member.getName();\n+        }\n+        if (member instanceof Method) {\n+            return member.getName();\n         }\n \n-        return member.getName();\n+        return null;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NTUxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463875513", "bodyText": "This won't be how Jackson default handles a JsonProperty annotated method, it'll attempt to remove the Java bean prefix of get or is.", "author": "alzimmermsft", "createdAt": "2020-07-31T22:42:01Z", "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -67,4 +74,31 @@\n     public <S extends OutputStream> Mono<S> serializeAsync(S stream, Object value) {\n         return Mono.fromCallable(() -> serialize(stream, value));\n     }\n+\n+    @Override\n+    public String convertMemberName(Member member) {\n+        if (member instanceof Field) {\n+            Field f = (Field) member;\n+            if (f.isAnnotationPresent(JsonIgnore.class)) {\n+                return null;\n+            }\n+            if (f.isAnnotationPresent(JsonProperty.class)) {\n+                String propertyName = f.getDeclaredAnnotation(JsonProperty.class).value();\n+                return CoreUtils.isNullOrEmpty(propertyName) ? f.getName() : propertyName;\n+            }\n+        }\n+\n+        if (member instanceof Method) {\n+            Method m = (Method) member;\n+            if (m.isAnnotationPresent(JsonIgnore.class)) {\n+                return null;\n+            }\n+            if (m.isAnnotationPresent(JsonProperty.class)) {\n+                String propertyName = m.getDeclaredAnnotation(JsonProperty.class).value();\n+                return CoreUtils.isNullOrEmpty(propertyName) ? m.getName() : propertyName;\n+            }\n+        }\n+\n+        return member.getName();", "originalCommit": "902a9cba95a0401c43beb2f74f141ba311543abd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2MTA0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r464661045", "bodyText": "Jackson can serialize property name invoked getter even it is not in a format of get{PropertyName}.\nJavaBeans has limitation on reading this.\nIn order to achieve what Jackson does, we have to introduce a really complicated logic in core, which also bring the risk in core. Talked offline, we can leave the function in future release, also we can have the logic inside of client SDK library first.", "author": "sima-zhu", "createdAt": "2020-08-03T21:03:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NTUxMw=="}], "type": "inlineReview", "revised_code": {"commit": "df32122b01216663cc9f0a646d6a8bfc35837f19", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java b/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java\nindex 9b74c97efed..b9677167c10 100644\n--- a/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java\n+++ b/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java\n\n@@ -86,6 +86,7 @@ public final class JacksonJsonSerializer implements MemberNameConverter, JsonSer\n                 String propertyName = f.getDeclaredAnnotation(JsonProperty.class).value();\n                 return CoreUtils.isNullOrEmpty(propertyName) ? f.getName() : propertyName;\n             }\n+            return member.getName();\n         }\n \n         if (member instanceof Method) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NTU5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463875591", "bodyText": "Same comment about returning null if member is a Constructor or Executable.", "author": "alzimmermsft", "createdAt": "2020-07-31T22:42:24Z", "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -67,4 +74,31 @@\n     public <S extends OutputStream> Mono<S> serializeAsync(S stream, Object value) {\n         return Mono.fromCallable(() -> serialize(stream, value));\n     }\n+\n+    @Override\n+    public String convertMemberName(Member member) {", "originalCommit": "902a9cba95a0401c43beb2f74f141ba311543abd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df32122b01216663cc9f0a646d6a8bfc35837f19", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java b/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java\nindex 9b74c97efed..b9677167c10 100644\n--- a/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java\n+++ b/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java\n\n@@ -86,6 +86,7 @@ public final class JacksonJsonSerializer implements MemberNameConverter, JsonSer\n                 String propertyName = f.getDeclaredAnnotation(JsonProperty.class).value();\n                 return CoreUtils.isNullOrEmpty(propertyName) ? f.getName() : propertyName;\n             }\n+            return member.getName();\n         }\n \n         if (member instanceof Method) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NjE5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463876195", "bodyText": "Generic interface that attempts to retrieve the JSON serialized property name from Class Members.", "author": "alzimmermsft", "createdAt": "2020-07-31T22:44:56Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/MemberNameConverter.java", "diffHunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.serializer;\n+\n+import java.lang.reflect.Member;\n+\n+/**\n+ * Generic interface to get the property name through serialization.", "originalCommit": "902a9cba95a0401c43beb2f74f141ba311543abd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fe2353a1cace668e4ded8c359089d1fd2e309aa", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/MemberNameConverter.java b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/MemberNameConverter.java\nindex fa6012a193a..8c92583dd08 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/MemberNameConverter.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/MemberNameConverter.java\n\n@@ -6,7 +6,7 @@ package com.azure.core.util.serializer;\n import java.lang.reflect.Member;\n \n /**\n- * Generic interface to get the property name through serialization.\n+ * Generic interface that attempts to retrieve the JSON serialized property name from {@link Member}.\n  */\n public interface MemberNameConverter {\n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NjY0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463876640", "bodyText": "Attempts to retrieve the JSON serializer property name for the passed Member.\nIf the Member type if unsupported or it is ignored for serialization null will be returned.", "author": "alzimmermsft", "createdAt": "2020-07-31T22:46:40Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/MemberNameConverter.java", "diffHunk": "@@ -0,0 +1,19 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.serializer;\n+\n+import java.lang.reflect.Member;\n+\n+/**\n+ * Generic interface to get the property name through serialization.\n+ */\n+public interface MemberNameConverter {\n+    /**\n+     * Get property member name from the class field.", "originalCommit": "902a9cba95a0401c43beb2f74f141ba311543abd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2MTU1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r464661550", "bodyText": "Same answer above.", "author": "sima-zhu", "createdAt": "2020-08-03T21:04:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NjY0MA=="}], "type": "inlineReview", "revised_code": {"commit": "0fe2353a1cace668e4ded8c359089d1fd2e309aa", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/MemberNameConverter.java b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/MemberNameConverter.java\nindex fa6012a193a..8c92583dd08 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/MemberNameConverter.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/MemberNameConverter.java\n\n@@ -6,7 +6,7 @@ package com.azure.core.util.serializer;\n import java.lang.reflect.Member;\n \n /**\n- * Generic interface to get the property name through serialization.\n+ * Generic interface that attempts to retrieve the JSON serialized property name from {@link Member}.\n  */\n public interface MemberNameConverter {\n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzE2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r463877160", "bodyText": "I thought it was an error to include both analyzerName and either indexAnalyzerName or searchAnalyzerName, at least an exception on the service side as I thought analyzerName set the latter two.", "author": "alzimmermsft", "createdAt": "2020-07-31T22:48:47Z", "path": "sdk/search/azure-search-documents/src/test/java/com/azure/search/documents/test/environment/models/HotelAnalyzerException.java", "diffHunk": "@@ -6,7 +6,7 @@\n import com.azure.search.documents.indexes.SearchableFieldProperty;\n \n public class HotelAnalyzerException {\n-    @SearchableFieldProperty(analyzerName = \"en.microsoft\", indexAnalyzer = \"whitespce\")\n+    @SearchableFieldProperty(analyzerName = \"en.microsoft\", indexAnalyzerName = \"whitespce\")", "originalCommit": "902a9cba95a0401c43beb2f74f141ba311543abd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyMDQ5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r464520495", "bodyText": "The test here is to validate whether we throw exception when set analyzeName and indexAnalyzeName.\nWe throw client exceptions for the case.", "author": "sima-zhu", "createdAt": "2020-08-03T16:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg3NzE2MA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "df32122b01216663cc9f0a646d6a8bfc35837f19", "url": "https://github.com/Azure/azure-sdk-for-java/commit/df32122b01216663cc9f0a646d6a8bfc35837f19", "message": "Address comments", "committedDate": "2020-08-03T17:29:35Z", "type": "commit"}, {"oid": "87681f8d333da1707b04d37b7fd0e3cf29f42d54", "url": "https://github.com/Azure/azure-sdk-for-java/commit/87681f8d333da1707b04d37b7fd0e3cf29f42d54", "message": "Merge from mainline", "committedDate": "2020-08-03T17:43:18Z", "type": "commit"}, {"oid": "cc41517fb679aadb1c6eb00fd746260d8c99dcfb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cc41517fb679aadb1c6eb00fd746260d8c99dcfb", "message": "Add more comments on FieldBuilder", "committedDate": "2020-08-03T20:54:04Z", "type": "commit"}, {"oid": "0fe2353a1cace668e4ded8c359089d1fd2e309aa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0fe2353a1cace668e4ded8c359089d1fd2e309aa", "message": "Address feedback on javadoc", "committedDate": "2020-08-03T21:18:46Z", "type": "commit"}, {"oid": "0c27002ecfcd8ec9253cd7b4ef1c00e6998d90fe", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0c27002ecfcd8ec9253cd7b4ef1c00e6998d90fe", "message": "Have static method of buildSearchField", "committedDate": "2020-08-04T00:33:11Z", "type": "commit"}, {"oid": "e2c5fe577960be607a42aa18611834c1ed8314aa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e2c5fe577960be607a42aa18611834c1ed8314aa", "message": "Update linting", "committedDate": "2020-08-04T00:48:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE2MTg3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465161878", "bodyText": "Did we ever determine whether GSON uses Methods during serialization?", "author": "alzimmermsft", "createdAt": "2020-08-04T16:04:55Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java", "diffHunk": "@@ -65,4 +71,26 @@\n     public <S extends OutputStream> Mono<S> serializeAsync(S stream, Object value) {\n         return Mono.fromCallable(() -> serialize(stream, value));\n     }\n+\n+    @Override\n+    public String convertMemberName(Member member) {\n+        if (Modifier.isTransient(member.getModifiers())) {\n+            return null;\n+        }\n+        if (member instanceof Field) {\n+            Field f = (Field) member;\n+            if (gson.excluder().excludeField(f, true)) {\n+                return null;\n+            }\n+            if (f.isAnnotationPresent(SerializedName.class)) {\n+                return f.getDeclaredAnnotation(SerializedName.class).value();\n+            }\n+            return member.getName();\n+        }\n+        if (member instanceof Method) {", "originalCommit": "e2c5fe577960be607a42aa18611834c1ed8314aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE2NzYyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465167620", "bodyText": "From what we determined yesterday, we need to return null here. Will fix it.\nWe only deal with the member which can be renamed through annotation.", "author": "sima-zhu", "createdAt": "2020-08-04T16:13:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE2MTg3OA=="}], "type": "inlineReview", "revised_code": {"commit": "2371efe0d1e27574d80c6029e2afccdb9a5b1581", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java\nindex c0f2e19c7db..9dd8c3fa79f 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java\n\n@@ -87,10 +86,6 @@ public final class GsonJsonSerializer implements JsonSerializer, MemberNameConve\n             }\n             return member.getName();\n         }\n-        if (member instanceof Method) {\n-            return member.getName();\n-        }\n-\n         return null;\n     }\n }\n"}}, {"oid": "2371efe0d1e27574d80c6029e2afccdb9a5b1581", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2371efe0d1e27574d80c6029e2afccdb9a5b1581", "message": "convertMemberName deal with the member which can rename through field name", "committedDate": "2020-08-04T16:15:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE2NDcwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465164701", "bodyText": "Let's make this a static somewhere instead of instantiating a new instance every time we are deserializing. I believe TypeReference<Map<String, Object>> is used in a few places so let's make it a constant somewhere in implementation.", "author": "alzimmermsft", "createdAt": "2020-08-04T16:09:15Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java", "diffHunk": "@@ -66,19 +57,16 @@\n             indexAction.setActionType(actionType);\n         }\n \n-        Map<String, Object> additionalProperties;\n-        TypeReference<Map<String, Object>> typeRef = new TypeReference<Map<String, Object>>() {};\n \n         Map<String, Object> mapProperties = PrivateFieldAccessHelper.get(obj, \"properties\", Map.class);\n-        if (mapProperties != null) {\n-            DYNAMIC_TYPE_MAPPER.setSerializationInclusion(JsonInclude.Include.ALWAYS);\n-            additionalProperties = DYNAMIC_TYPE_MAPPER.convertValue(mapProperties, typeRef);\n-        } else {\n+        if (mapProperties == null) {\n             T properties = obj.getDocument();\n-            additionalProperties = STRONGLY_TYPE_MAPPER.convertValue(properties, typeRef);\n+            ByteArrayOutputStream sourceStream = serializer.serialize(new ByteArrayOutputStream(), properties);\n+            mapProperties = serializer.deserialize(new ByteArrayInputStream(sourceStream.toByteArray()),\n+                new TypeReference<Map<String, Object>>() { });", "originalCommit": "e2c5fe577960be607a42aa18611834c1ed8314aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3OTgxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465179818", "bodyText": "Will place it into impl Utility.", "author": "sima-zhu", "createdAt": "2020-08-04T16:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE2NDcwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "d80e99b9d3c1b359acf1c0060d5357cdb4fe3bb0", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java\nindex 726b8dc9012..9401fb784de 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java\n\n@@ -63,7 +64,7 @@ public final class IndexActionConverter {\n             T properties = obj.getDocument();\n             ByteArrayOutputStream sourceStream = serializer.serialize(new ByteArrayOutputStream(), properties);\n             mapProperties = serializer.deserialize(new ByteArrayInputStream(sourceStream.toByteArray()),\n-                new TypeReference<Map<String, Object>>() { });\n+                TYPE_REFERENCE);\n         }\n \n         indexAction.setAdditionalProperties(mapProperties);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE2ODcxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465168715", "bodyText": "This should use JsonSerializerProviders.createInstance(), if azure-core-serializer-json-jackson is excluded this will fail to compile.", "author": "alzimmermsft", "createdAt": "2020-08-04T16:15:05Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java", "diffHunk": "@@ -722,6 +727,21 @@ SearchClientBuilder getSearchClientBuilder(String indexName) {\n         return withContext(context -> deleteSynonymMapWithResponse(synonymMap.getName(), etag, context));\n     }\n \n+    /**\n+     * Helper method to build list of {@link SearchField}.\n+     *\n+     * @param model The model class where {@link SearchField} converts from.\n+     * @param options The option property bag.\n+     * @return The list {@link SearchField} for search index schema.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public static Mono<List<SearchField>> buildSearchField(Class<?> model, FieldBuilderOptions options) {\n+        if (options == null) {\n+            return Mono.just(FieldBuilder.build(model, new JacksonJsonSerializerProvider().createInstance()));", "originalCommit": "e2c5fe577960be607a42aa18611834c1ed8314aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE4MDk3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465180970", "bodyText": "Sure. Will change to MemberNameConverterProviders.createInstance()", "author": "sima-zhu", "createdAt": "2020-08-04T16:34:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE2ODcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "884501a6f611075ccf2d6ec75c5997ac51de2442", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java\nindex 33f46785e83..94ff0e0a97a 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java\n\n@@ -735,11 +735,11 @@ public final class SearchIndexAsyncClient {\n      * @return The list {@link SearchField} for search index schema.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public static Mono<List<SearchField>> buildSearchField(Class<?> model, FieldBuilderOptions options) {\n+    public static List<SearchField> buildSearchField(Class<?> model, FieldBuilderOptions options) {\n         if (options == null) {\n-            return Mono.just(FieldBuilder.build(model, new JacksonJsonSerializerProvider().createInstance()));\n+            return FieldBuilder.build(model, MemberNameConverterProviders.createInstance());\n         }\n-        return Mono.just(FieldBuilder.build(model, options.getSerializer()));\n+        return FieldBuilder.build(model, options.getSerializer());\n     }\n \n     Mono<Response<Void>> deleteSynonymMapWithResponse(String synonymMapName, String etag,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MTk2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465171964", "bodyText": "We're in a tricky spot for Search here as we've used a non-standard JacksonAdapter to handle serialization before introducing a pluggable serializer. I'm wondering for Search whether the custom JacksonAdapter should be used to handle serialization when JsonSerializer is null. That way we retain previous functionality when a customer upgrades but then we don't need to have this which will force a customer to include azure-core-serializer-json-jackson on their classpath, potentially never allowing azure-core-serializer-json-gson to work implicitly (not certain this would be the case but I don't exactly know how the classpath ordering is determined for a service provider).\nIf this change is made in places where serialization of customer objects take place it would need to be updated to the following:\nif (jsonSerializer == null) {\n  // Use Search JacksonAdapter\n} else {\n  // Use customer JsonSerializer\n}\ncc: @srnagar @JonathanGiles", "author": "alzimmermsft", "createdAt": "2020-08-04T16:20:05Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/Utility.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.core.serializer.json.jackson.JacksonJsonSerializerBuilder;\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.azure.core.util.serializer.JsonSerializer;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import com.azure.search.documents.implementation.serializer.SerializationUtil;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public final class Utility {\n+    /**\n+     * Helper class to initialize the SerializerAdapter.\n+     * @return The SerializeAdapter instance.\n+     */\n+    public static SerializerAdapter initializeSerializerAdapter() {\n+        JacksonAdapter adapter = (JacksonAdapter) JacksonAdapter.createDefaultSerializerAdapter();\n+\n+        ObjectMapper mapper = adapter.serializer();\n+        SerializationUtil.configureMapper(mapper);\n+\n+        return adapter;\n+    }\n+\n+    public static JsonSerializer creatDefaultJsonSerializerInstance() {\n+        JacksonAdapter adapter = (JacksonAdapter) initializeSerializerAdapter();\n+        return new JacksonJsonSerializerBuilder().serializer(adapter.serializer()).build();", "originalCommit": "e2c5fe577960be607a42aa18611834c1ed8314aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE5Nzg1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465197859", "bodyText": "The method is to use when customer does not  pass us JsonSerializer.\nWe have to use JsonSerializer API  for workflow. If return JacksonAdapter, this is how we hook up with JsonSerializer. Only JacksonJsonSerializerBuilder provide a way to take ObjectMapper.", "author": "sima-zhu", "createdAt": "2020-08-04T17:02:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MTk2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2MzAzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465263037", "bodyText": "Talked offline. We will use search specific JacksonAdapter as a default serializer if customer do not pass any serializer in.", "author": "sima-zhu", "createdAt": "2020-08-04T18:58:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MTk2NA=="}], "type": "inlineReview", "revised_code": {"commit": "d80e99b9d3c1b359acf1c0060d5357cdb4fe3bb0", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/Utility.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/Utility.java\nindex 07137186687..1f60ceec820 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/Utility.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/Utility.java\n\n@@ -7,10 +7,17 @@ import com.azure.core.serializer.json.jackson.JacksonJsonSerializerBuilder;\n import com.azure.core.util.serializer.JacksonAdapter;\n import com.azure.core.util.serializer.JsonSerializer;\n import com.azure.core.util.serializer.SerializerAdapter;\n+import com.azure.core.util.serializer.TypeReference;\n import com.azure.search.documents.implementation.serializer.SerializationUtil;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n+import java.util.Map;\n+\n public final class Utility {\n+    // Type reference that used across many places. Have one copy here to minimize the memory.\n+    public static final TypeReference<Map<String, Object>> TYPE_REFERENCE = new TypeReference<Map<String, Object>>() {\n+    };\n+\n     /**\n      * Helper class to initialize the SerializerAdapter.\n      * @return The SerializeAdapter instance.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MjIwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465172206", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static List<SearchField> buildSearchField(Class<?> model, FieldBuilderOptions options) {\n          \n          \n            \n                public static List<SearchField> buildSearchFields(Class<?> model, FieldBuilderOptions options) {", "author": "alzimmermsft", "createdAt": "2020-08-04T16:20:31Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClient.java", "diffHunk": "@@ -597,4 +601,16 @@ public SearchServiceStatistics getServiceStatistics() {\n     public Response<SearchServiceStatistics> getServiceStatisticsWithResponse(Context context) {\n         return asyncClient.getServiceStatisticsWithResponse(context).block();\n     }\n+\n+    /**\n+     * Helper method to build list of {@link SearchField}.\n+     *\n+     * @param model The model class where {@link SearchField} converts from.\n+     * @param options The option property bag.\n+     * @return The list {@link SearchField} for search index schema.\n+     */\n+    public static List<SearchField> buildSearchField(Class<?> model, FieldBuilderOptions options) {", "originalCommit": "e2c5fe577960be607a42aa18611834c1ed8314aa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "acc2b8018da753503ae339524ce291fbcb2b8663", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClient.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClient.java\nindex 1c132228099..59516654de5 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClient.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClient.java\n\n@@ -609,7 +609,7 @@ public final class SearchIndexClient {\n      * @param options The option property bag.\n      * @return The list {@link SearchField} for search index schema.\n      */\n-    public static List<SearchField> buildSearchField(Class<?> model, FieldBuilderOptions options) {\n+    public static List<SearchField> buildSearchFields(Class<?> model, FieldBuilderOptions options) {\n         return SearchIndexAsyncClient.buildSearchField(model, options).block();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MzA4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465173087", "bodyText": "Do we want this to be MemberNameConverter or JsonSerializer? .NET is using ObjectSerializer as a parameter to FieldBuilder.\ncc: @heaths @tg-msft @srnagar @JonathanGiles", "author": "alzimmermsft", "createdAt": "2020-08-04T16:21:55Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.indexes.models;\n+\n+import com.azure.core.util.serializer.MemberNameConverter;\n+import com.azure.search.documents.indexes.SearchIndexAsyncClient;\n+import com.azure.search.documents.indexes.SearchIndexClient;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Additional parameters to build {@link SearchField}.\n+ */\n+public class FieldBuilderOptions {\n+    private MemberNameConverter serializer;\n+\n+    /**\n+     * Gets the serializer use to build search fields in\n+     * {@link SearchIndexClient#buildSearchField(Class, FieldBuilderOptions)} buildSearchField} or\n+     * {@link SearchIndexAsyncClient#buildSearchField(Class, FieldBuilderOptions) buildSearchField}\n+     *\n+     * @return the custom serializer.\n+     */\n+    public MemberNameConverter getSerializer() {", "originalCommit": "e2c5fe577960be607a42aa18611834c1ed8314aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE5ODk1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465198951", "bodyText": ".NET also proposed to use the option class. The options class is a placeholder which can put more properties in future.", "author": "sima-zhu", "createdAt": "2020-08-04T17:04:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MzA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNDMwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465514306", "bodyText": "I think @alzimmermsft was referring to using JsonSerialier or MemberNameConverter. Using the options class is okay, we should align on what the options will contain - serializer or member name converter?", "author": "srnagar", "createdAt": "2020-08-05T06:59:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MzA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3MjU0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465872547", "bodyText": "Both JsonSerializer and ObjectSerializer miss the API of convertMemberName, which is the necessary one using in FieldBuilder.", "author": "sima-zhu", "createdAt": "2020-08-05T17:01:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MzA4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a0c2206010f331ce0ee9ece4b359101bd0125eae", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java\nindex 93723cd260b..9c4373358fd 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java\n\n@@ -17,8 +17,8 @@ public class FieldBuilderOptions {\n \n     /**\n      * Gets the serializer use to build search fields in\n-     * {@link SearchIndexClient#buildSearchField(Class, FieldBuilderOptions)} buildSearchField} or\n-     * {@link SearchIndexAsyncClient#buildSearchField(Class, FieldBuilderOptions) buildSearchField}\n+     * {@link SearchIndexClient#buildSearchFields(Class, FieldBuilderOptions)} buildSearchFields} or\n+     * {@link SearchIndexAsyncClient#buildSearchFields(Class, FieldBuilderOptions) buildSearchFields}\n      *\n      * @return the custom serializer.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MzYwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465173606", "bodyText": "I don't think this matches what the FieldBuilder API allows, that checks if the serializer is null and uses a default implementation.", "author": "alzimmermsft", "createdAt": "2020-08-04T16:22:45Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.indexes.models;\n+\n+import com.azure.core.util.serializer.MemberNameConverter;\n+import com.azure.search.documents.indexes.SearchIndexAsyncClient;\n+import com.azure.search.documents.indexes.SearchIndexClient;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Additional parameters to build {@link SearchField}.\n+ */\n+public class FieldBuilderOptions {\n+    private MemberNameConverter serializer;\n+\n+    /**\n+     * Gets the serializer use to build search fields in\n+     * {@link SearchIndexClient#buildSearchField(Class, FieldBuilderOptions)} buildSearchField} or\n+     * {@link SearchIndexAsyncClient#buildSearchField(Class, FieldBuilderOptions) buildSearchField}\n+     *\n+     * @return the custom serializer.\n+     */\n+    public MemberNameConverter getSerializer() {\n+        return serializer;\n+    }\n+\n+    /**\n+     * Sets the custom serializer.\n+     *\n+     * @param serializer The custom serializer to set\n+     * @return The {@link FieldBuilderOptions} object itself.\n+     */\n+    public FieldBuilderOptions setSerializer(MemberNameConverter serializer) {\n+        this.serializer = Objects.requireNonNull(serializer, \"The serializer cannot be null\");", "originalCommit": "e2c5fe577960be607a42aa18611834c1ed8314aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE4NjQxOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465186418", "bodyText": "There is no necessary to use the API if no serializer to pass. They can simply pass new FieldBuilderOptions(). It is lazy initialization at the time we call static API", "author": "sima-zhu", "createdAt": "2020-08-04T16:43:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MzYwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIxNjg1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465216852", "bodyText": "I'm wrong, it checked if this type was null, not this property.", "author": "alzimmermsft", "createdAt": "2020-08-04T17:35:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MzYwNg=="}], "type": "inlineReview", "revised_code": {"commit": "a0c2206010f331ce0ee9ece4b359101bd0125eae", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java\nindex 93723cd260b..9c4373358fd 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java\n\n@@ -17,8 +17,8 @@ public class FieldBuilderOptions {\n \n     /**\n      * Gets the serializer use to build search fields in\n-     * {@link SearchIndexClient#buildSearchField(Class, FieldBuilderOptions)} buildSearchField} or\n-     * {@link SearchIndexAsyncClient#buildSearchField(Class, FieldBuilderOptions) buildSearchField}\n+     * {@link SearchIndexClient#buildSearchFields(Class, FieldBuilderOptions)} buildSearchFields} or\n+     * {@link SearchIndexAsyncClient#buildSearchFields(Class, FieldBuilderOptions) buildSearchFields}\n      *\n      * @return the custom serializer.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3NDk2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465174961", "bodyText": "Not a huge fan of this being an asynchronous return and we have prior art which has non-service APIs returning synchronously in an asynchronous client. getSearchAsyncClient on this client is synchronous, I think this should be made synchronous as well.\n@srnagar @JonathanGiles, let me know if you disagree.", "author": "alzimmermsft", "createdAt": "2020-08-04T16:24:54Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java", "diffHunk": "@@ -722,6 +727,21 @@ SearchClientBuilder getSearchClientBuilder(String indexName) {\n         return withContext(context -> deleteSynonymMapWithResponse(synonymMap.getName(), etag, context));\n     }\n \n+    /**\n+     * Helper method to build list of {@link SearchField}.\n+     *\n+     * @param model The model class where {@link SearchField} converts from.\n+     * @param options The option property bag.\n+     * @return The list {@link SearchField} for search index schema.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public static Mono<List<SearchField>> buildSearchField(Class<?> model, FieldBuilderOptions options) {", "originalCommit": "e2c5fe577960be607a42aa18611834c1ed8314aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwMDEzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465200136", "bodyText": "I can have synchronous call. Is it necessary to have the function in both sync and async client?", "author": "sima-zhu", "createdAt": "2020-08-04T17:06:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3NDk2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI1NjU0Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465256547", "bodyText": "For convenience I would say yes.", "author": "alzimmermsft", "createdAt": "2020-08-04T18:46:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3NDk2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "884501a6f611075ccf2d6ec75c5997ac51de2442", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java\nindex 33f46785e83..94ff0e0a97a 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java\n\n@@ -735,11 +735,11 @@ public final class SearchIndexAsyncClient {\n      * @return The list {@link SearchField} for search index schema.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public static Mono<List<SearchField>> buildSearchField(Class<?> model, FieldBuilderOptions options) {\n+    public static List<SearchField> buildSearchField(Class<?> model, FieldBuilderOptions options) {\n         if (options == null) {\n-            return Mono.just(FieldBuilder.build(model, new JacksonJsonSerializerProvider().createInstance()));\n+            return FieldBuilder.build(model, MemberNameConverterProviders.createInstance());\n         }\n-        return Mono.just(FieldBuilder.build(model, options.getSerializer()));\n+        return FieldBuilder.build(model, options.getSerializer());\n     }\n \n     Mono<Response<Void>> deleteSynonymMapWithResponse(String synonymMapName, String etag,\n"}}, {"oid": "acc2b8018da753503ae339524ce291fbcb2b8663", "url": "https://github.com/Azure/azure-sdk-for-java/commit/acc2b8018da753503ae339524ce291fbcb2b8663", "message": "Update sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClient.java\n\nCo-authored-by: Alan Zimmer <48699787+alzimmermsft@users.noreply.github.com>", "committedDate": "2020-08-04T16:34:58Z", "type": "commit"}, {"oid": "d80e99b9d3c1b359acf1c0060d5357cdb4fe3bb0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d80e99b9d3c1b359acf1c0060d5357cdb4fe3bb0", "message": "address feedback", "committedDate": "2020-08-04T16:40:00Z", "type": "commit"}, {"oid": "d9cca9580a2d32f7df05f3bd308dfab5c30d86e8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d9cca9580a2d32f7df05f3bd308dfab5c30d86e8", "message": "Merge branch 'search_serializers' of https://github.com/sima-zhu/azure-sdk-for-java into search_serializers", "committedDate": "2020-08-04T16:40:11Z", "type": "commit"}, {"oid": "884501a6f611075ccf2d6ec75c5997ac51de2442", "url": "https://github.com/Azure/azure-sdk-for-java/commit/884501a6f611075ccf2d6ec75c5997ac51de2442", "message": "Address comments", "committedDate": "2020-08-04T17:09:15Z", "type": "commit"}, {"oid": "a0c2206010f331ce0ee9ece4b359101bd0125eae", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a0c2206010f331ce0ee9ece4b359101bd0125eae", "message": "Having search jackson adapter as default serializer", "committedDate": "2020-08-04T18:54:55Z", "type": "commit"}, {"oid": "b1077d964dbda66c55a305cddc3684680fa05e24", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b1077d964dbda66c55a305cddc3684680fa05e24", "message": "Remove extra method", "committedDate": "2020-08-04T19:00:23Z", "type": "commit"}, {"oid": "e1caa9671a892bdfcf23f4fd5c1d8ef2318e513b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e1caa9671a892bdfcf23f4fd5c1d8ef2318e513b", "message": "merge from mainline", "committedDate": "2020-08-04T21:14:15Z", "type": "commit"}, {"oid": "65aac36d5976e322848e664e421f647a05d45ecf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/65aac36d5976e322848e664e421f647a05d45ecf", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into search_serializers", "committedDate": "2020-08-04T21:14:21Z", "type": "commit"}, {"oid": "a891fb31e26af881633d11517abb402da163cf47", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a891fb31e26af881633d11517abb402da163cf47", "message": "remove tests", "committedDate": "2020-08-04T21:15:43Z", "type": "commit"}, {"oid": "7f48cf908611b98f8d5fe5db718c7ad69dd6c7e5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7f48cf908611b98f8d5fe5db718c7ad69dd6c7e5", "message": "Remove the gson expose checking", "committedDate": "2020-08-04T21:38:40Z", "type": "commit"}, {"oid": "6507ddd4c0021e97729f9cff8cc72e61f326b0bf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6507ddd4c0021e97729f9cff8cc72e61f326b0bf", "message": "Change to right provider", "committedDate": "2020-08-04T21:52:37Z", "type": "commit"}, {"oid": "a9d586ffb0911d65feefaca2bda7faeb408f2247", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a9d586ffb0911d65feefaca2bda7faeb408f2247", "message": "Added readme for field builder", "committedDate": "2020-08-04T22:45:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNzc4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465507784", "bodyText": "This should be named  CANNOT_FIND_MEMBER_NAME_CONVERTER_PROVIDER.", "author": "srnagar", "createdAt": "2020-08-05T06:44:44Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/MemberNameConverterProviders.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.serializer;\n+\n+import java.util.Iterator;\n+import java.util.ServiceLoader;\n+\n+/**\n+ * This class is a proxy for using a {@link MemberNameConverterProvider} loaded from the classpath.\n+ */\n+public final class MemberNameConverterProviders {\n+    private static final String CANNOT_FIND_JSON_SERIALIZER_PROVIDER =", "originalCommit": "a9d586ffb0911d65feefaca2bda7faeb408f2247", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "766029399f339b49344372dfa40b9d14d2e9c533", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/MemberNameConverterProviders.java b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/MemberNameConverterProviders.java\nindex 970f6e04f21..5b27ed5bcd5 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/MemberNameConverterProviders.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/MemberNameConverterProviders.java\n\n@@ -10,7 +10,7 @@ import java.util.ServiceLoader;\n  * This class is a proxy for using a {@link MemberNameConverterProvider} loaded from the classpath.\n  */\n public final class MemberNameConverterProviders {\n-    private static final String CANNOT_FIND_JSON_SERIALIZER_PROVIDER =\n+    private static final String CANNOT_FIND_MEMBER_NAME_CONVERTER_PROVIDER =\n         \"Cannot find any member name converter provider on the classpath.\";\n \n     private static MemberNameConverterProvider defaultProvider;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwODkxMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465508912", "bodyText": "This should be removed.", "author": "srnagar", "createdAt": "2020-08-05T06:47:20Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java", "diffHunk": "@@ -241,6 +242,18 @@ public SearchClientBuilder addPolicy(HttpPipelinePolicy policy) {\n         return this;\n     }\n \n+    /**\n+     * Adds customer serializer to apply to external defined models.\n+     *\n+     * @param jsonSerializer The serializer to serialize user defined models.\n+     * @return The updated SearchClientBuilder object.\n+     * @throws NullPointerException If {@code policy} is {@code null}.", "originalCommit": "a9d586ffb0911d65feefaca2bda7faeb408f2247", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "766029399f339b49344372dfa40b9d14d2e9c533", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java\nindex 92642cc4a5f..3ea39e90781 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java\n\n@@ -245,12 +245,11 @@ public final class SearchClientBuilder {\n     /**\n      * Adds customer serializer to apply to external defined models.\n      *\n-     * @param jsonSerializer The serializer to serialize user defined models.\n+     * @param objectSerializer The serializer to serialize user defined models.\n      * @return The updated SearchClientBuilder object.\n-     * @throws NullPointerException If {@code policy} is {@code null}.\n      */\n-    public SearchClientBuilder serializer(JsonSerializer jsonSerializer) {\n-        this.jsonSerializer = jsonSerializer;\n+    public SearchClientBuilder serializer(ObjectSerializer objectSerializer) {\n+        this.objectSerializer = objectSerializer;\n         return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwOTE4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465509182", "bodyText": "Is .NET using ObjectSerializer here?", "author": "srnagar", "createdAt": "2020-08-05T06:47:59Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java", "diffHunk": "@@ -241,6 +242,18 @@ public SearchClientBuilder addPolicy(HttpPipelinePolicy policy) {\n         return this;\n     }\n \n+    /**\n+     * Adds customer serializer to apply to external defined models.\n+     *\n+     * @param jsonSerializer The serializer to serialize user defined models.\n+     * @return The updated SearchClientBuilder object.\n+     * @throws NullPointerException If {@code policy} is {@code null}.\n+     */\n+    public SearchClientBuilder serializer(JsonSerializer jsonSerializer) {", "originalCommit": "a9d586ffb0911d65feefaca2bda7faeb408f2247", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg2ODI5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465868298", "bodyText": "Yes. Do we want the same thing?\nChange to align with .NET", "author": "sima-zhu", "createdAt": "2020-08-05T16:54:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwOTE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "766029399f339b49344372dfa40b9d14d2e9c533", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java\nindex 92642cc4a5f..3ea39e90781 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchClientBuilder.java\n\n@@ -245,12 +245,11 @@ public final class SearchClientBuilder {\n     /**\n      * Adds customer serializer to apply to external defined models.\n      *\n-     * @param jsonSerializer The serializer to serialize user defined models.\n+     * @param objectSerializer The serializer to serialize user defined models.\n      * @return The updated SearchClientBuilder object.\n-     * @throws NullPointerException If {@code policy} is {@code null}.\n      */\n-    public SearchClientBuilder serializer(JsonSerializer jsonSerializer) {\n-        this.jsonSerializer = jsonSerializer;\n+    public SearchClientBuilder serializer(ObjectSerializer objectSerializer) {\n+        this.objectSerializer = objectSerializer;\n         return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMDQ0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465510446", "bodyText": "Name this as MAP_STRING_OBJECT_TYPE_REFERENCE.", "author": "srnagar", "createdAt": "2020-08-05T06:50:45Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/Utility.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.implementation.util;\n+\n+import com.azure.core.util.serializer.JacksonAdapter;\n+import com.azure.core.util.serializer.SerializerAdapter;\n+import com.azure.core.util.serializer.TypeReference;\n+import com.azure.search.documents.implementation.serializer.SerializationUtil;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.util.Map;\n+\n+public final class Utility {\n+    // Type reference that used across many places. Have one copy here to minimize the memory.\n+    public static final TypeReference<Map<String, Object>> TYPE_REFERENCE = new TypeReference<Map<String, Object>>() {", "originalCommit": "a9d586ffb0911d65feefaca2bda7faeb408f2247", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "766029399f339b49344372dfa40b9d14d2e9c533", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/Utility.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/Utility.java\nindex 2b89a710236..73df8c90f6e 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/Utility.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/util/Utility.java\n\n@@ -13,8 +13,8 @@ import java.util.Map;\n \n public final class Utility {\n     // Type reference that used across many places. Have one copy here to minimize the memory.\n-    public static final TypeReference<Map<String, Object>> TYPE_REFERENCE = new TypeReference<Map<String, Object>>() {\n-    };\n+    public static final TypeReference<Map<String, Object>> MAP_STRING_OBJECT_TYPE_REFERENCE =\n+        new TypeReference<Map<String, Object>>() { };\n \n     /**\n      * Helper class to initialize the SerializerAdapter.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMTUyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465511527", "bodyText": "This annotation should be removed as it's not a service method.", "author": "srnagar", "createdAt": "2020-08-05T06:53:08Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java", "diffHunk": "@@ -722,6 +727,21 @@ SearchClientBuilder getSearchClientBuilder(String indexName) {\n         return withContext(context -> deleteSynonymMapWithResponse(synonymMap.getName(), etag, context));\n     }\n \n+    /**\n+     * Helper method to build list of {@link SearchField}.\n+     *\n+     * @param model The model class where {@link SearchField} converts from.\n+     * @param options The option property bag.\n+     * @return The list {@link SearchField} for search index schema.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)", "originalCommit": "a9d586ffb0911d65feefaca2bda7faeb408f2247", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "766029399f339b49344372dfa40b9d14d2e9c533", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java\nindex bad2ace0902..4be7b40cf12 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java\n\n@@ -734,12 +734,11 @@ public final class SearchIndexAsyncClient {\n      * @param options The option property bag.\n      * @return The list {@link SearchField} for search index schema.\n      */\n-    @ServiceMethod(returns = ReturnType.SINGLE)\n     public static List<SearchField> buildSearchFields(Class<?> model, FieldBuilderOptions options) {\n         if (options == null) {\n             return FieldBuilder.build(model, MemberNameConverterProviders.createInstance());\n         }\n-        return FieldBuilder.build(model, options.getSerializer());\n+        return FieldBuilder.build(model, options.getConverter());\n     }\n \n     Mono<Response<Void>> deleteSynonymMapWithResponse(String synonymMapName, String etag,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMTY1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465511651", "bodyText": "Same here. Remove annotation.", "author": "srnagar", "createdAt": "2020-08-05T06:53:26Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClient.java", "diffHunk": "@@ -597,4 +603,20 @@ public SearchServiceStatistics getServiceStatistics() {\n     public Response<SearchServiceStatistics> getServiceStatisticsWithResponse(Context context) {\n         return asyncClient.getServiceStatisticsWithResponse(context).block();\n     }\n+\n+    /**\n+     * Helper method to build list of {@link SearchField}.\n+     *\n+     * @param model The model class where {@link SearchField} converts from.\n+     * @param options The option property bag.\n+     * @return The list {@link SearchField} for search index schema.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)", "originalCommit": "a9d586ffb0911d65feefaca2bda7faeb408f2247", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "766029399f339b49344372dfa40b9d14d2e9c533", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClient.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClient.java\nindex c354cc315b4..1cb253d2105 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClient.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClient.java\n\n@@ -611,12 +609,8 @@ public final class SearchIndexClient {\n      * @param options The option property bag.\n      * @return The list {@link SearchField} for search index schema.\n      */\n-    @ServiceMethod(returns = ReturnType.SINGLE)\n     public static List<SearchField> buildSearchFields(Class<?> model, FieldBuilderOptions options) {\n-        if (options == null) {\n-            return FieldBuilder.build(model, MemberNameConverterProviders.createInstance());\n-        }\n-        return FieldBuilder.build(model, options.getSerializer());\n+        return SearchIndexAsyncClient.buildSearchFields(model, options);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMjYzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465512633", "bodyText": "This should check if options.getSerializer() is null too.", "author": "srnagar", "createdAt": "2020-08-05T06:55:43Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java", "diffHunk": "@@ -722,6 +727,21 @@ SearchClientBuilder getSearchClientBuilder(String indexName) {\n         return withContext(context -> deleteSynonymMapWithResponse(synonymMap.getName(), etag, context));\n     }\n \n+    /**\n+     * Helper method to build list of {@link SearchField}.\n+     *\n+     * @param model The model class where {@link SearchField} converts from.\n+     * @param options The option property bag.\n+     * @return The list {@link SearchField} for search index schema.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public static List<SearchField> buildSearchFields(Class<?> model, FieldBuilderOptions options) {\n+        if (options == null) {", "originalCommit": "a9d586ffb0911d65feefaca2bda7faeb408f2247", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "766029399f339b49344372dfa40b9d14d2e9c533", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java\nindex bad2ace0902..4be7b40cf12 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexAsyncClient.java\n\n@@ -734,12 +734,11 @@ public final class SearchIndexAsyncClient {\n      * @param options The option property bag.\n      * @return The list {@link SearchField} for search index schema.\n      */\n-    @ServiceMethod(returns = ReturnType.SINGLE)\n     public static List<SearchField> buildSearchFields(Class<?> model, FieldBuilderOptions options) {\n         if (options == null) {\n             return FieldBuilder.build(model, MemberNameConverterProviders.createInstance());\n         }\n-        return FieldBuilder.build(model, options.getSerializer());\n+        return FieldBuilder.build(model, options.getConverter());\n     }\n \n     Mono<Response<Void>> deleteSynonymMapWithResponse(String synonymMapName, String etag,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMjk1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465512954", "bodyText": "Instead of repeating this implementation, this method should call the buildSearchFields in async client.", "author": "srnagar", "createdAt": "2020-08-05T06:56:27Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClient.java", "diffHunk": "@@ -597,4 +603,20 @@ public SearchServiceStatistics getServiceStatistics() {\n     public Response<SearchServiceStatistics> getServiceStatisticsWithResponse(Context context) {\n         return asyncClient.getServiceStatisticsWithResponse(context).block();\n     }\n+\n+    /**\n+     * Helper method to build list of {@link SearchField}.\n+     *\n+     * @param model The model class where {@link SearchField} converts from.\n+     * @param options The option property bag.\n+     * @return The list {@link SearchField} for search index schema.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public static List<SearchField> buildSearchFields(Class<?> model, FieldBuilderOptions options) {\n+        if (options == null) {\n+            return FieldBuilder.build(model, MemberNameConverterProviders.createInstance());\n+        }\n+        return FieldBuilder.build(model, options.getSerializer());", "originalCommit": "a9d586ffb0911d65feefaca2bda7faeb408f2247", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "766029399f339b49344372dfa40b9d14d2e9c533", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClient.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClient.java\nindex c354cc315b4..1cb253d2105 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClient.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/SearchIndexClient.java\n\n@@ -611,12 +609,8 @@ public final class SearchIndexClient {\n      * @param options The option property bag.\n      * @return The list {@link SearchField} for search index schema.\n      */\n-    @ServiceMethod(returns = ReturnType.SINGLE)\n     public static List<SearchField> buildSearchFields(Class<?> model, FieldBuilderOptions options) {\n-        if (options == null) {\n-            return FieldBuilder.build(model, MemberNameConverterProviders.createInstance());\n-        }\n-        return FieldBuilder.build(model, options.getSerializer());\n+        return SearchIndexAsyncClient.buildSearchFields(model, options);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNDg0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465514840", "bodyText": "It's odd to call this setSerializer and take a MemberNameConverter as arg.", "author": "srnagar", "createdAt": "2020-08-05T07:00:33Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.indexes.models;\n+\n+import com.azure.core.util.serializer.MemberNameConverter;\n+import com.azure.search.documents.indexes.SearchIndexAsyncClient;\n+import com.azure.search.documents.indexes.SearchIndexClient;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Additional parameters to build {@link SearchField}.\n+ */\n+public class FieldBuilderOptions {\n+    private MemberNameConverter serializer;\n+\n+    /**\n+     * Gets the serializer use to build search fields in\n+     * {@link SearchIndexClient#buildSearchFields(Class, FieldBuilderOptions)} buildSearchFields} or\n+     * {@link SearchIndexAsyncClient#buildSearchFields(Class, FieldBuilderOptions) buildSearchFields}\n+     *\n+     * @return the custom serializer.\n+     */\n+    public MemberNameConverter getSerializer() {\n+        return serializer;\n+    }\n+\n+    /**\n+     * Sets the custom serializer.\n+     *\n+     * @param serializer The custom serializer to set\n+     * @return The {@link FieldBuilderOptions} object itself.\n+     */\n+    public FieldBuilderOptions setSerializer(MemberNameConverter serializer) {", "originalCommit": "a9d586ffb0911d65feefaca2bda7faeb408f2247", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3MDIyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465870220", "bodyText": "What about rename to setConverter?", "author": "sima-zhu", "createdAt": "2020-08-05T16:57:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNDg0MA=="}], "type": "inlineReview", "revised_code": {"commit": "766029399f339b49344372dfa40b9d14d2e9c533", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java\nindex 9c4373358fd..dd156ea038e 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java\n\n@@ -13,7 +13,7 @@ import java.util.Objects;\n  * Additional parameters to build {@link SearchField}.\n  */\n public class FieldBuilderOptions {\n-    private MemberNameConverter serializer;\n+    private MemberNameConverter converter;\n \n     /**\n      * Gets the serializer use to build search fields in\n"}}, {"oid": "766029399f339b49344372dfa40b9d14d2e9c533", "url": "https://github.com/Azure/azure-sdk-for-java/commit/766029399f339b49344372dfa40b9d14d2e9c533", "message": "Addressed feedback", "committedDate": "2020-08-05T17:01:48Z", "type": "commit"}, {"oid": "786c9c28fe0fcca5cc923a2aa5c0ac948cf1cf41", "url": "https://github.com/Azure/azure-sdk-for-java/commit/786c9c28fe0fcca5cc923a2aa5c0ac948cf1cf41", "message": "fix compile issue", "committedDate": "2020-08-05T17:13:56Z", "type": "commit"}, {"oid": "243f1318355f8d50cc291681daf0604b9c1c51a3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/243f1318355f8d50cc291681daf0604b9c1c51a3", "message": "Added transient keyword check", "committedDate": "2020-08-05T19:40:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk3NDEzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13496#discussion_r465974139", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.converter = Objects.requireNonNull(converter, \"The serializer cannot be null\");\n          \n          \n            \n                    this.converter = Objects.requireNonNull(converter, \"The converter cannot be null\");", "author": "srnagar", "createdAt": "2020-08-05T20:08:13Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.search.documents.indexes.models;\n+\n+import com.azure.core.util.serializer.MemberNameConverter;\n+import com.azure.search.documents.indexes.SearchIndexAsyncClient;\n+import com.azure.search.documents.indexes.SearchIndexClient;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Additional parameters to build {@link SearchField}.\n+ */\n+public class FieldBuilderOptions {\n+    private MemberNameConverter converter;\n+\n+    /**\n+     * Gets the serializer use to build search fields in\n+     * {@link SearchIndexClient#buildSearchFields(Class, FieldBuilderOptions)} buildSearchFields} or\n+     * {@link SearchIndexAsyncClient#buildSearchFields(Class, FieldBuilderOptions) buildSearchFields}\n+     *\n+     * @return the custom serializer.\n+     */\n+    public MemberNameConverter getConverter() {\n+        return converter;\n+    }\n+\n+    /**\n+     * Sets the custom serializer.\n+     *\n+     * @param converter The custom serializer to set\n+     * @return The {@link FieldBuilderOptions} object itself.\n+     */\n+    public FieldBuilderOptions setConverter(MemberNameConverter converter) {\n+        this.converter = Objects.requireNonNull(converter, \"The serializer cannot be null\");", "originalCommit": "243f1318355f8d50cc291681daf0604b9c1c51a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a26b847b7dcde9dc001fe07a106fc1c7841c32a5", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java\nindex dd156ea038e..174f980d5f2 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java\n\n@@ -33,7 +33,7 @@ public class FieldBuilderOptions {\n      * @return The {@link FieldBuilderOptions} object itself.\n      */\n     public FieldBuilderOptions setConverter(MemberNameConverter converter) {\n-        this.converter = Objects.requireNonNull(converter, \"The serializer cannot be null\");\n+        this.converter = Objects.requireNonNull(converter, \"The converter cannot be null\");\n         return this;\n     }\n \n"}}, {"oid": "a26b847b7dcde9dc001fe07a106fc1c7841c32a5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a26b847b7dcde9dc001fe07a106fc1c7841c32a5", "message": "Update sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/indexes/models/FieldBuilderOptions.java\n\nCo-authored-by: Srikanta <51379715+srnagar@users.noreply.github.com>", "committedDate": "2020-08-05T20:11:52Z", "type": "commit"}, {"oid": "ed37bc3738ed039bfa0a0cbc2134fa6a9a5c70d7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ed37bc3738ed039bfa0a0cbc2134fa6a9a5c70d7", "message": "Throw exceptions for unsupported type", "committedDate": "2020-08-05T21:03:26Z", "type": "commit"}, {"oid": "e1528f9161fc2dd85e9e2883273e4eedab4cc6ff", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e1528f9161fc2dd85e9e2883273e4eedab4cc6ff", "message": "Merge branch 'search_serializers' of https://github.com/sima-zhu/azure-sdk-for-java into search_serializers", "committedDate": "2020-08-05T21:06:45Z", "type": "commit"}, {"oid": "d1c5c2c5dc18a4b11687ab5a33fc1c9e12f56ad6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d1c5c2c5dc18a4b11687ab5a33fc1c9e12f56ad6", "message": "Added link to FieldBuilder", "committedDate": "2020-08-05T23:45:51Z", "type": "commit"}, {"oid": "cda8cc9d0f4d3ca835fa891e03b6c540985855da", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cda8cc9d0f4d3ca835fa891e03b6c540985855da", "message": "Update changelog", "committedDate": "2020-08-06T00:04:09Z", "type": "commit"}]}