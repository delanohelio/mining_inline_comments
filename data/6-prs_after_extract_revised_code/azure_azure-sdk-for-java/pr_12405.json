{"pr_number": 12405, "pr_title": "Initial KeyVaultAccessControlClient for Java", "pr_createdAt": "2020-06-23T00:11:35Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/12405", "timeline": [{"oid": "f99f825a5b9613c25afed1f56d48b20c1342ec0a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f99f825a5b9613c25afed1f56d48b20c1342ec0a", "message": "Created azure-security-keyvault-administration module including its POM, README and CHANGELOG files.", "committedDate": "2020-06-15T19:07:29Z", "type": "commit"}, {"oid": "08f62648e8f9784f1b13b8f48286fa29474209e4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/08f62648e8f9784f1b13b8f48286fa29474209e4", "message": "Created AutoRest README and generated artifacts.", "committedDate": "2020-06-15T21:16:24Z", "type": "commit"}, {"oid": "c351f1754a61243dcbb52c1f8d744648d2a5f28c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c351f1754a61243dcbb52c1f8d744648d2a5f28c", "message": "Added sync methods", "committedDate": "2020-06-15T21:35:57Z", "type": "commit"}, {"oid": "3b627b580140017d8d6d8482e8135b60b0357812", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3b627b580140017d8d6d8482e8135b60b0357812", "message": "Modified the AutoRest specification to generate async methods only. Renamed the generated AccessControl client and builder.", "committedDate": "2020-06-18T20:50:47Z", "type": "commit"}, {"oid": "e4917eb7a8f2457a4da3674844fdb02fd1e88a82", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e4917eb7a8f2457a4da3674844fdb02fd1e88a82", "message": "Created the AccessControl builder and clients (sync + async), public API for getting Role Definitions and some helper classes and resources.", "committedDate": "2020-06-18T20:52:36Z", "type": "commit"}, {"oid": "f9eebad72ea6bb3b52ad012fbbb554640d2d33cf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f9eebad72ea6bb3b52ad012fbbb554640d2d33cf", "message": "Regenerated classes with AutoRest v4 instead of v3.", "committedDate": "2020-06-18T22:41:23Z", "type": "commit"}, {"oid": "b69e738858cd091fd1d9f350714fb0bbf1c26435", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b69e738858cd091fd1d9f350714fb0bbf1c26435", "message": "Added the 'KeyVault' prefix to all access control clients, implementation classes and their builders.", "committedDate": "2020-06-18T22:46:41Z", "type": "commit"}, {"oid": "42a7cba66c165f33e89dd45d407579459a155533", "url": "https://github.com/Azure/azure-sdk-for-java/commit/42a7cba66c165f33e89dd45d407579459a155533", "message": "Added an API for listing role definitions.", "committedDate": "2020-06-19T05:17:17Z", "type": "commit"}, {"oid": "0c75941c31a888b65a0f2b82898ca5a151fce083", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0c75941c31a888b65a0f2b82898ca5a151fce083", "message": "Added APIs for creating, getting, deleting and listing role assignments.", "committedDate": "2020-06-19T05:17:35Z", "type": "commit"}, {"oid": "9d003dd7ebcbcdb89714eb98aabe93fd4f82eebc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9d003dd7ebcbcdb89714eb98aabe93fd4f82eebc", "message": "Polished README.", "committedDate": "2020-06-23T00:16:21Z", "type": "commit"}, {"oid": "0b1fd318bbcabf5f898bceae57ec47fe8d7f2d94", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0b1fd318bbcabf5f898bceae57ec47fe8d7f2d94", "message": "Added the an entry for Key Vault Administration in version_client.txt", "committedDate": "2020-06-24T20:58:46Z", "type": "commit"}, {"oid": "0b1fd318bbcabf5f898bceae57ec47fe8d7f2d94", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0b1fd318bbcabf5f898bceae57ec47fe8d7f2d94", "message": "Added the an entry for Key Vault Administration in version_client.txt", "committedDate": "2020-06-24T20:58:46Z", "type": "forcePushed"}, {"oid": "590045a6fa30346f7fa73562b93fdd956ce2a8e6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/590045a6fa30346f7fa73562b93fdd956ce2a8e6", "message": "Renamed to not break the CI build.", "committedDate": "2020-06-24T22:13:41Z", "type": "commit"}, {"oid": "8d556d46764bce208a8e38a9a3da7009030ac139", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8d556d46764bce208a8e38a9a3da7009030ac139", "message": "Fixed copy/paste error on autorest.md", "committedDate": "2020-06-25T05:39:27Z", "type": "commit"}, {"oid": "614cf26a47f15beae2d34d52afc4cd7b0e4759ff", "url": "https://github.com/Azure/azure-sdk-for-java/commit/614cf26a47f15beae2d34d52afc4cd7b0e4759ff", "message": "Changed README references (keys -> administration).", "committedDate": "2020-06-25T18:58:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2MTczNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r445861734", "bodyText": "Suggestion: For .net we added a helper extensible enum to make it easier for to choose between the possible valid scopes ( /, /keys, and /keys/<someKeyId>. You may want to implement something for all the string scope parameters.", "author": "christothes", "createdAt": "2020-06-25T21:57:50Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.security.keyvault.administration.implementation.models.KeyVaultErrorException;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+\n+/**\n+ * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment}.\n+ * Additionally, the client supports listing {@link RoleDefinition}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n+public class KeyVaultAccessControlClient {\n+    private final KeyVaultAccessControlAsyncClient asyncClient;\n+\n+    /**\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@code pipeline} to service requests\n+     *\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that the client routes its request through.\n+     */\n+    KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n+        this.asyncClient = asyncClient;\n+    }\n+\n+    /**\n+     * Get the vault endpoint URL.\n+     *\n+     * @return The vault endpoint URL.\n+     */\n+    public String getVaultUrl() {\n+        return asyncClient.getVaultUrl();\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, Context context) {", "originalCommit": "614cf26a47f15beae2d34d52afc4cd7b0e4759ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzMzI5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r445933291", "bodyText": "Sounds good to me, thanks for the suggestion!", "author": "vcolin7", "createdAt": "2020-06-26T02:17:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2MTczNA=="}], "type": "inlineReview", "revised_code": {"commit": "6273df0f12bc99fbc0b827cffba0b3f3237b8b93", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\nindex cf102d1c687..d3a0e4dce99 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\n\n@@ -10,171 +10,156 @@ import com.azure.security.keyvault.administration.implementation.models.KeyVault\n import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+import com.azure.security.keyvault.administration.models.RoleScope;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n \n /**\n  * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n- * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment}.\n- * Additionally, the client supports listing {@link RoleDefinition}.\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment role\n+ * assignments}. Additionally, the client supports listing {@link RoleDefinition role definitions}.\n  */\n @ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n public class KeyVaultAccessControlClient {\n     private final KeyVaultAccessControlAsyncClient asyncClient;\n \n     /**\n-     * Creates an {@link KeyVaultAccessControlClient} that uses a {@code pipeline} to service requests\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@link com.azure.core.http.HttpPipeline pipeline}\n+     * to service requests.\n      *\n-     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that the client routes its request through.\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that this client routes its request through.\n      */\n     KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n         this.asyncClient = asyncClient;\n     }\n \n     /**\n-     * Get the vault endpoint URL.\n+     * Gets the URL for the Key Vault this client is associated with.\n      *\n-     * @return The vault endpoint URL.\n+     * @return The Key Vault URL.\n      */\n     public String getVaultUrl() {\n         return asyncClient.getVaultUrl();\n     }\n \n     /**\n-     * Get all role definitions that are applicable at scope and above.\n-     *\n-     * @param scope   The scope of the role definition.\n-     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n-     */\n-    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, Context context) {\n-        return listRoleDefinitions(scope, null, context);\n-    }\n-\n-    /**\n-     * Get all role definitions that are applicable at scope and above.\n+     * Get all {@link RoleDefinition role definitions} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n      *\n-     * @param scope   The scope of the role definition.\n-     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n-     *                scope as well.\n-     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleDefinition role definitions}.\n+     * @param context Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} containing the {@link RoleDefinition role definitions} for the given\n+     * {@link RoleScope scope}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n      */\n-    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, String filter, Context context) {\n-        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, filter, context));\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(RoleScope scope, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, context));\n     }\n \n     /**\n-     * Get all role definitions that are applicable at scope and above.\n+     * Get all {@link RoleAssignment role assignments} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n      *\n-     * @param scope   The scope of the role definition.\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleAssignment}.\n      * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @return A {@link PagedIterable} containing the {@link RoleAssignment role assignments} for the given\n+     * {@link RoleScope scope}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n      */\n-    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, Context context) {\n-        return listRoleAssignments(scope, null, context);\n-    }\n-\n-    /**\n-     * Get all role assignments that are applicable at scope and above.\n-     *\n-     * @param scope   The scope of the role assignment.\n-     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n-     *                scope as well.\n-     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleAssignment role definitions}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n-     */\n-    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, String filter, Context context) {\n-        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, filter, context));\n+    public PagedIterable<RoleAssignment> listRoleAssignments(RoleScope scope, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, context));\n     }\n \n     /**\n      * Creates a {@link RoleAssignment}.\n      *\n-     * @param scope      The scope of the role assignment to create.\n-     * @param name       The name used to create the role assignment.\n-     * @param properties Properties for the role assignment.\n+     * @param scope      The {@link RoleScope scope} of the {@link RoleAssignment} to create.\n+     * @param name       The name used to create the {@link RoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link RoleAssignment}.\n      * @return The created {@link RoleAssignment}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     * @throws KeyVaultErrorException if the request is rejected by the server.\n+     * @throws NullPointerException   if the {@link RoleScope scope}, {@link UUID name} or\n+     * {@link RoleAssignmentProperties properties} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public RoleAssignment createRoleAssignment(String scope, String name, RoleAssignmentProperties properties) {\n-        return createKeyWithResponse(scope, name, properties, Context.NONE).getValue();\n+    public RoleAssignment createRoleAssignment(RoleScope scope, UUID name,\n+                                               RoleAssignmentProperties properties) {\n+        return createRoleAssignmentWithResponse(scope, name, properties, Context.NONE).getValue();\n     }\n \n     /**\n      * Creates a {@link RoleAssignment}.\n      *\n-     * @param scope      The scope of the role assignment to create.\n-     * @param name       The name used to create the role assignment.\n-     * @param properties Properties for the role assignment.\n-     * @return The created {@link RoleAssignment}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     * @param scope      The {@link RoleScope scope} of the {@link RoleAssignment} to create.\n+     * @param name       The name used to create the {@link RoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link RoleAssignment}.\n+     * @param context    Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} contains the created\n+     * {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the request is rejected by the server.\n+     * @throws NullPointerException   if the {@link RoleScope scope}, {@link UUID name} or\n+     * {@link RoleAssignmentProperties properties} are {@code null}.\n      */\n-    public Response<RoleAssignment> createKeyWithResponse(String scope, String name,\n-                                                          RoleAssignmentProperties properties, Context context) {\n+    public Response<RoleAssignment> createRoleAssignmentWithResponse(RoleScope scope, UUID name,\n+                                                                     RoleAssignmentProperties properties,\n+                                                                     Context context) {\n         return asyncClient.createRoleAssignmentWithResponse(scope, name, properties, context).block();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Gets a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public RoleAssignment getRoleAssignment(String scope, String name) {\n-        return getKeyWithResponse(scope, name, Context.NONE).getValue();\n+    public RoleAssignment getRoleAssignment(RoleScope scope, String name) {\n+        return getRoleAssignmentWithResponse(scope, name, Context.NONE).getValue();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Gets a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n-    public Response<RoleAssignment> getKeyWithResponse(String scope, String name, Context context) {\n+    public Response<RoleAssignment> getRoleAssignmentWithResponse(RoleScope scope, String name, Context context) {\n         return asyncClient.getRoleAssignmentWithResponse(scope, name, context).block();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Deletes a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public RoleAssignment deleteRoleAssignment(String scope, String name) {\n-        return deleteKeyWithResponse(scope, name, Context.NONE).getValue();\n+    public RoleAssignment deleteRoleAssignment(RoleScope scope, String name) {\n+        return deleteRoleAssignmentWithResponse(scope, name, Context.NONE).getValue();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Deletes a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n-    public Response<RoleAssignment> deleteKeyWithResponse(String scope, String name, Context context) {\n+    public Response<RoleAssignment> deleteRoleAssignmentWithResponse(RoleScope scope, String name, Context context) {\n         return asyncClient.deleteRoleAssignmentWithResponse(scope, name, context).block();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2Mjc5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r445862797", "bodyText": "In discussions with the service team we determined that filter is not really used and we decided to omit it from the public api for now in .NET.", "author": "christothes", "createdAt": "2020-06-25T22:00:25Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.security.keyvault.administration.implementation.models.KeyVaultErrorException;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+\n+/**\n+ * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment}.\n+ * Additionally, the client supports listing {@link RoleDefinition}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n+public class KeyVaultAccessControlClient {\n+    private final KeyVaultAccessControlAsyncClient asyncClient;\n+\n+    /**\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@code pipeline} to service requests\n+     *\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that the client routes its request through.\n+     */\n+    KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n+        this.asyncClient = asyncClient;\n+    }\n+\n+    /**\n+     * Get the vault endpoint URL.\n+     *\n+     * @return The vault endpoint URL.\n+     */\n+    public String getVaultUrl() {\n+        return asyncClient.getVaultUrl();\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, Context context) {\n+        return listRoleDefinitions(scope, null, context);\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n+     *                scope as well.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, String filter, Context context) {", "originalCommit": "614cf26a47f15beae2d34d52afc4cd7b0e4759ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzMzIyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r445933223", "bodyText": "Thanks Chris, I will remove it for now.", "author": "vcolin7", "createdAt": "2020-06-26T02:16:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2Mjc5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6273df0f12bc99fbc0b827cffba0b3f3237b8b93", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\nindex cf102d1c687..d3a0e4dce99 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\n\n@@ -10,171 +10,156 @@ import com.azure.security.keyvault.administration.implementation.models.KeyVault\n import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+import com.azure.security.keyvault.administration.models.RoleScope;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n \n /**\n  * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n- * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment}.\n- * Additionally, the client supports listing {@link RoleDefinition}.\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment role\n+ * assignments}. Additionally, the client supports listing {@link RoleDefinition role definitions}.\n  */\n @ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n public class KeyVaultAccessControlClient {\n     private final KeyVaultAccessControlAsyncClient asyncClient;\n \n     /**\n-     * Creates an {@link KeyVaultAccessControlClient} that uses a {@code pipeline} to service requests\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@link com.azure.core.http.HttpPipeline pipeline}\n+     * to service requests.\n      *\n-     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that the client routes its request through.\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that this client routes its request through.\n      */\n     KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n         this.asyncClient = asyncClient;\n     }\n \n     /**\n-     * Get the vault endpoint URL.\n+     * Gets the URL for the Key Vault this client is associated with.\n      *\n-     * @return The vault endpoint URL.\n+     * @return The Key Vault URL.\n      */\n     public String getVaultUrl() {\n         return asyncClient.getVaultUrl();\n     }\n \n     /**\n-     * Get all role definitions that are applicable at scope and above.\n-     *\n-     * @param scope   The scope of the role definition.\n-     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n-     */\n-    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, Context context) {\n-        return listRoleDefinitions(scope, null, context);\n-    }\n-\n-    /**\n-     * Get all role definitions that are applicable at scope and above.\n+     * Get all {@link RoleDefinition role definitions} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n      *\n-     * @param scope   The scope of the role definition.\n-     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n-     *                scope as well.\n-     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleDefinition role definitions}.\n+     * @param context Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} containing the {@link RoleDefinition role definitions} for the given\n+     * {@link RoleScope scope}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n      */\n-    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, String filter, Context context) {\n-        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, filter, context));\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(RoleScope scope, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, context));\n     }\n \n     /**\n-     * Get all role definitions that are applicable at scope and above.\n+     * Get all {@link RoleAssignment role assignments} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n      *\n-     * @param scope   The scope of the role definition.\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleAssignment}.\n      * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @return A {@link PagedIterable} containing the {@link RoleAssignment role assignments} for the given\n+     * {@link RoleScope scope}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n      */\n-    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, Context context) {\n-        return listRoleAssignments(scope, null, context);\n-    }\n-\n-    /**\n-     * Get all role assignments that are applicable at scope and above.\n-     *\n-     * @param scope   The scope of the role assignment.\n-     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n-     *                scope as well.\n-     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleAssignment role definitions}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n-     */\n-    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, String filter, Context context) {\n-        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, filter, context));\n+    public PagedIterable<RoleAssignment> listRoleAssignments(RoleScope scope, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, context));\n     }\n \n     /**\n      * Creates a {@link RoleAssignment}.\n      *\n-     * @param scope      The scope of the role assignment to create.\n-     * @param name       The name used to create the role assignment.\n-     * @param properties Properties for the role assignment.\n+     * @param scope      The {@link RoleScope scope} of the {@link RoleAssignment} to create.\n+     * @param name       The name used to create the {@link RoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link RoleAssignment}.\n      * @return The created {@link RoleAssignment}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     * @throws KeyVaultErrorException if the request is rejected by the server.\n+     * @throws NullPointerException   if the {@link RoleScope scope}, {@link UUID name} or\n+     * {@link RoleAssignmentProperties properties} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public RoleAssignment createRoleAssignment(String scope, String name, RoleAssignmentProperties properties) {\n-        return createKeyWithResponse(scope, name, properties, Context.NONE).getValue();\n+    public RoleAssignment createRoleAssignment(RoleScope scope, UUID name,\n+                                               RoleAssignmentProperties properties) {\n+        return createRoleAssignmentWithResponse(scope, name, properties, Context.NONE).getValue();\n     }\n \n     /**\n      * Creates a {@link RoleAssignment}.\n      *\n-     * @param scope      The scope of the role assignment to create.\n-     * @param name       The name used to create the role assignment.\n-     * @param properties Properties for the role assignment.\n-     * @return The created {@link RoleAssignment}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     * @param scope      The {@link RoleScope scope} of the {@link RoleAssignment} to create.\n+     * @param name       The name used to create the {@link RoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link RoleAssignment}.\n+     * @param context    Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} contains the created\n+     * {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the request is rejected by the server.\n+     * @throws NullPointerException   if the {@link RoleScope scope}, {@link UUID name} or\n+     * {@link RoleAssignmentProperties properties} are {@code null}.\n      */\n-    public Response<RoleAssignment> createKeyWithResponse(String scope, String name,\n-                                                          RoleAssignmentProperties properties, Context context) {\n+    public Response<RoleAssignment> createRoleAssignmentWithResponse(RoleScope scope, UUID name,\n+                                                                     RoleAssignmentProperties properties,\n+                                                                     Context context) {\n         return asyncClient.createRoleAssignmentWithResponse(scope, name, properties, context).block();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Gets a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public RoleAssignment getRoleAssignment(String scope, String name) {\n-        return getKeyWithResponse(scope, name, Context.NONE).getValue();\n+    public RoleAssignment getRoleAssignment(RoleScope scope, String name) {\n+        return getRoleAssignmentWithResponse(scope, name, Context.NONE).getValue();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Gets a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n-    public Response<RoleAssignment> getKeyWithResponse(String scope, String name, Context context) {\n+    public Response<RoleAssignment> getRoleAssignmentWithResponse(RoleScope scope, String name, Context context) {\n         return asyncClient.getRoleAssignmentWithResponse(scope, name, context).block();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Deletes a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public RoleAssignment deleteRoleAssignment(String scope, String name) {\n-        return deleteKeyWithResponse(scope, name, Context.NONE).getValue();\n+    public RoleAssignment deleteRoleAssignment(RoleScope scope, String name) {\n+        return deleteRoleAssignmentWithResponse(scope, name, Context.NONE).getValue();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Deletes a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n-    public Response<RoleAssignment> deleteKeyWithResponse(String scope, String name, Context context) {\n+    public Response<RoleAssignment> deleteRoleAssignmentWithResponse(RoleScope scope, String name, Context context) {\n         return asyncClient.deleteRoleAssignmentWithResponse(scope, name, context).block();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2Mzk0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r445863941", "bodyText": "did you intend to name this method createRoleAssignment?", "author": "christothes", "createdAt": "2020-06-25T22:03:17Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.security.keyvault.administration.implementation.models.KeyVaultErrorException;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+\n+/**\n+ * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment}.\n+ * Additionally, the client supports listing {@link RoleDefinition}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n+public class KeyVaultAccessControlClient {\n+    private final KeyVaultAccessControlAsyncClient asyncClient;\n+\n+    /**\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@code pipeline} to service requests\n+     *\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that the client routes its request through.\n+     */\n+    KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n+        this.asyncClient = asyncClient;\n+    }\n+\n+    /**\n+     * Get the vault endpoint URL.\n+     *\n+     * @return The vault endpoint URL.\n+     */\n+    public String getVaultUrl() {\n+        return asyncClient.getVaultUrl();\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, Context context) {\n+        return listRoleDefinitions(scope, null, context);\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n+     *                scope as well.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, String filter, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, filter, context));\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, Context context) {\n+        return listRoleAssignments(scope, null, context);\n+    }\n+\n+    /**\n+     * Get all role assignments that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role assignment.\n+     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n+     *                scope as well.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleAssignment role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, String filter, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, filter, context));\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The scope of the role assignment to create.\n+     * @param name       The name used to create the role assignment.\n+     * @param properties Properties for the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public RoleAssignment createRoleAssignment(String scope, String name, RoleAssignmentProperties properties) {\n+        return createKeyWithResponse(scope, name, properties, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The scope of the role assignment to create.\n+     * @param name       The name used to create the role assignment.\n+     * @param properties Properties for the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     */\n+    public Response<RoleAssignment> createKeyWithResponse(String scope, String name,", "originalCommit": "614cf26a47f15beae2d34d52afc4cd7b0e4759ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkzMTYyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r445931622", "bodyText": "Yeah, I was using code from Keys as a template and must have missed this \ud83d\ude05", "author": "vcolin7", "createdAt": "2020-06-26T02:09:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2Mzk0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6273df0f12bc99fbc0b827cffba0b3f3237b8b93", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\nindex cf102d1c687..d3a0e4dce99 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\n\n@@ -10,171 +10,156 @@ import com.azure.security.keyvault.administration.implementation.models.KeyVault\n import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+import com.azure.security.keyvault.administration.models.RoleScope;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n \n /**\n  * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n- * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment}.\n- * Additionally, the client supports listing {@link RoleDefinition}.\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment role\n+ * assignments}. Additionally, the client supports listing {@link RoleDefinition role definitions}.\n  */\n @ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n public class KeyVaultAccessControlClient {\n     private final KeyVaultAccessControlAsyncClient asyncClient;\n \n     /**\n-     * Creates an {@link KeyVaultAccessControlClient} that uses a {@code pipeline} to service requests\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@link com.azure.core.http.HttpPipeline pipeline}\n+     * to service requests.\n      *\n-     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that the client routes its request through.\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that this client routes its request through.\n      */\n     KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n         this.asyncClient = asyncClient;\n     }\n \n     /**\n-     * Get the vault endpoint URL.\n+     * Gets the URL for the Key Vault this client is associated with.\n      *\n-     * @return The vault endpoint URL.\n+     * @return The Key Vault URL.\n      */\n     public String getVaultUrl() {\n         return asyncClient.getVaultUrl();\n     }\n \n     /**\n-     * Get all role definitions that are applicable at scope and above.\n-     *\n-     * @param scope   The scope of the role definition.\n-     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n-     */\n-    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, Context context) {\n-        return listRoleDefinitions(scope, null, context);\n-    }\n-\n-    /**\n-     * Get all role definitions that are applicable at scope and above.\n+     * Get all {@link RoleDefinition role definitions} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n      *\n-     * @param scope   The scope of the role definition.\n-     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n-     *                scope as well.\n-     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleDefinition role definitions}.\n+     * @param context Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} containing the {@link RoleDefinition role definitions} for the given\n+     * {@link RoleScope scope}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n      */\n-    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, String filter, Context context) {\n-        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, filter, context));\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(RoleScope scope, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, context));\n     }\n \n     /**\n-     * Get all role definitions that are applicable at scope and above.\n+     * Get all {@link RoleAssignment role assignments} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n      *\n-     * @param scope   The scope of the role definition.\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleAssignment}.\n      * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @return A {@link PagedIterable} containing the {@link RoleAssignment role assignments} for the given\n+     * {@link RoleScope scope}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n      */\n-    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, Context context) {\n-        return listRoleAssignments(scope, null, context);\n-    }\n-\n-    /**\n-     * Get all role assignments that are applicable at scope and above.\n-     *\n-     * @param scope   The scope of the role assignment.\n-     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n-     *                scope as well.\n-     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleAssignment role definitions}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n-     */\n-    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, String filter, Context context) {\n-        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, filter, context));\n+    public PagedIterable<RoleAssignment> listRoleAssignments(RoleScope scope, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, context));\n     }\n \n     /**\n      * Creates a {@link RoleAssignment}.\n      *\n-     * @param scope      The scope of the role assignment to create.\n-     * @param name       The name used to create the role assignment.\n-     * @param properties Properties for the role assignment.\n+     * @param scope      The {@link RoleScope scope} of the {@link RoleAssignment} to create.\n+     * @param name       The name used to create the {@link RoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link RoleAssignment}.\n      * @return The created {@link RoleAssignment}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     * @throws KeyVaultErrorException if the request is rejected by the server.\n+     * @throws NullPointerException   if the {@link RoleScope scope}, {@link UUID name} or\n+     * {@link RoleAssignmentProperties properties} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public RoleAssignment createRoleAssignment(String scope, String name, RoleAssignmentProperties properties) {\n-        return createKeyWithResponse(scope, name, properties, Context.NONE).getValue();\n+    public RoleAssignment createRoleAssignment(RoleScope scope, UUID name,\n+                                               RoleAssignmentProperties properties) {\n+        return createRoleAssignmentWithResponse(scope, name, properties, Context.NONE).getValue();\n     }\n \n     /**\n      * Creates a {@link RoleAssignment}.\n      *\n-     * @param scope      The scope of the role assignment to create.\n-     * @param name       The name used to create the role assignment.\n-     * @param properties Properties for the role assignment.\n-     * @return The created {@link RoleAssignment}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     * @param scope      The {@link RoleScope scope} of the {@link RoleAssignment} to create.\n+     * @param name       The name used to create the {@link RoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link RoleAssignment}.\n+     * @param context    Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} contains the created\n+     * {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the request is rejected by the server.\n+     * @throws NullPointerException   if the {@link RoleScope scope}, {@link UUID name} or\n+     * {@link RoleAssignmentProperties properties} are {@code null}.\n      */\n-    public Response<RoleAssignment> createKeyWithResponse(String scope, String name,\n-                                                          RoleAssignmentProperties properties, Context context) {\n+    public Response<RoleAssignment> createRoleAssignmentWithResponse(RoleScope scope, UUID name,\n+                                                                     RoleAssignmentProperties properties,\n+                                                                     Context context) {\n         return asyncClient.createRoleAssignmentWithResponse(scope, name, properties, context).block();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Gets a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public RoleAssignment getRoleAssignment(String scope, String name) {\n-        return getKeyWithResponse(scope, name, Context.NONE).getValue();\n+    public RoleAssignment getRoleAssignment(RoleScope scope, String name) {\n+        return getRoleAssignmentWithResponse(scope, name, Context.NONE).getValue();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Gets a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n-    public Response<RoleAssignment> getKeyWithResponse(String scope, String name, Context context) {\n+    public Response<RoleAssignment> getRoleAssignmentWithResponse(RoleScope scope, String name, Context context) {\n         return asyncClient.getRoleAssignmentWithResponse(scope, name, context).block();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Deletes a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public RoleAssignment deleteRoleAssignment(String scope, String name) {\n-        return deleteKeyWithResponse(scope, name, Context.NONE).getValue();\n+    public RoleAssignment deleteRoleAssignment(RoleScope scope, String name) {\n+        return deleteRoleAssignmentWithResponse(scope, name, Context.NONE).getValue();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Deletes a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n-    public Response<RoleAssignment> deleteKeyWithResponse(String scope, String name, Context context) {\n+    public Response<RoleAssignment> deleteRoleAssignmentWithResponse(RoleScope scope, String name, Context context) {\n         return asyncClient.deleteRoleAssignmentWithResponse(scope, name, context).block();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2NTk3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r445865970", "bodyText": "The service expects a GUID /  UUID for this arg even though it's a string in the swagger. Perhaps we could type constrain it as a hint? We could also consider creating a method that accepts no arg for name and generates a new UUID on behalf of the developer.", "author": "christothes", "createdAt": "2020-06-25T22:08:40Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.security.keyvault.administration.implementation.models.KeyVaultErrorException;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+\n+/**\n+ * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment}.\n+ * Additionally, the client supports listing {@link RoleDefinition}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n+public class KeyVaultAccessControlClient {\n+    private final KeyVaultAccessControlAsyncClient asyncClient;\n+\n+    /**\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@code pipeline} to service requests\n+     *\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that the client routes its request through.\n+     */\n+    KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n+        this.asyncClient = asyncClient;\n+    }\n+\n+    /**\n+     * Get the vault endpoint URL.\n+     *\n+     * @return The vault endpoint URL.\n+     */\n+    public String getVaultUrl() {\n+        return asyncClient.getVaultUrl();\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, Context context) {\n+        return listRoleDefinitions(scope, null, context);\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n+     *                scope as well.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, String filter, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, filter, context));\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, Context context) {\n+        return listRoleAssignments(scope, null, context);\n+    }\n+\n+    /**\n+     * Get all role assignments that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role assignment.\n+     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n+     *                scope as well.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleAssignment role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, String filter, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, filter, context));\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The scope of the role assignment to create.\n+     * @param name       The name used to create the role assignment.\n+     * @param properties Properties for the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public RoleAssignment createRoleAssignment(String scope, String name, RoleAssignmentProperties properties) {\n+        return createKeyWithResponse(scope, name, properties, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The scope of the role assignment to create.\n+     * @param name       The name used to create the role assignment.", "originalCommit": "614cf26a47f15beae2d34d52afc4cd7b0e4759ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6273df0f12bc99fbc0b827cffba0b3f3237b8b93", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\nindex cf102d1c687..d3a0e4dce99 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\n\n@@ -10,171 +10,156 @@ import com.azure.security.keyvault.administration.implementation.models.KeyVault\n import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+import com.azure.security.keyvault.administration.models.RoleScope;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n \n /**\n  * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n- * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment}.\n- * Additionally, the client supports listing {@link RoleDefinition}.\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment role\n+ * assignments}. Additionally, the client supports listing {@link RoleDefinition role definitions}.\n  */\n @ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n public class KeyVaultAccessControlClient {\n     private final KeyVaultAccessControlAsyncClient asyncClient;\n \n     /**\n-     * Creates an {@link KeyVaultAccessControlClient} that uses a {@code pipeline} to service requests\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@link com.azure.core.http.HttpPipeline pipeline}\n+     * to service requests.\n      *\n-     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that the client routes its request through.\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that this client routes its request through.\n      */\n     KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n         this.asyncClient = asyncClient;\n     }\n \n     /**\n-     * Get the vault endpoint URL.\n+     * Gets the URL for the Key Vault this client is associated with.\n      *\n-     * @return The vault endpoint URL.\n+     * @return The Key Vault URL.\n      */\n     public String getVaultUrl() {\n         return asyncClient.getVaultUrl();\n     }\n \n     /**\n-     * Get all role definitions that are applicable at scope and above.\n-     *\n-     * @param scope   The scope of the role definition.\n-     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n-     */\n-    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, Context context) {\n-        return listRoleDefinitions(scope, null, context);\n-    }\n-\n-    /**\n-     * Get all role definitions that are applicable at scope and above.\n+     * Get all {@link RoleDefinition role definitions} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n      *\n-     * @param scope   The scope of the role definition.\n-     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n-     *                scope as well.\n-     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleDefinition role definitions}.\n+     * @param context Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} containing the {@link RoleDefinition role definitions} for the given\n+     * {@link RoleScope scope}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n      */\n-    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, String filter, Context context) {\n-        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, filter, context));\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(RoleScope scope, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, context));\n     }\n \n     /**\n-     * Get all role definitions that are applicable at scope and above.\n+     * Get all {@link RoleAssignment role assignments} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n      *\n-     * @param scope   The scope of the role definition.\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleAssignment}.\n      * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @return A {@link PagedIterable} containing the {@link RoleAssignment role assignments} for the given\n+     * {@link RoleScope scope}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n      */\n-    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, Context context) {\n-        return listRoleAssignments(scope, null, context);\n-    }\n-\n-    /**\n-     * Get all role assignments that are applicable at scope and above.\n-     *\n-     * @param scope   The scope of the role assignment.\n-     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n-     *                scope as well.\n-     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleAssignment role definitions}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n-     */\n-    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, String filter, Context context) {\n-        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, filter, context));\n+    public PagedIterable<RoleAssignment> listRoleAssignments(RoleScope scope, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, context));\n     }\n \n     /**\n      * Creates a {@link RoleAssignment}.\n      *\n-     * @param scope      The scope of the role assignment to create.\n-     * @param name       The name used to create the role assignment.\n-     * @param properties Properties for the role assignment.\n+     * @param scope      The {@link RoleScope scope} of the {@link RoleAssignment} to create.\n+     * @param name       The name used to create the {@link RoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link RoleAssignment}.\n      * @return The created {@link RoleAssignment}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     * @throws KeyVaultErrorException if the request is rejected by the server.\n+     * @throws NullPointerException   if the {@link RoleScope scope}, {@link UUID name} or\n+     * {@link RoleAssignmentProperties properties} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public RoleAssignment createRoleAssignment(String scope, String name, RoleAssignmentProperties properties) {\n-        return createKeyWithResponse(scope, name, properties, Context.NONE).getValue();\n+    public RoleAssignment createRoleAssignment(RoleScope scope, UUID name,\n+                                               RoleAssignmentProperties properties) {\n+        return createRoleAssignmentWithResponse(scope, name, properties, Context.NONE).getValue();\n     }\n \n     /**\n      * Creates a {@link RoleAssignment}.\n      *\n-     * @param scope      The scope of the role assignment to create.\n-     * @param name       The name used to create the role assignment.\n-     * @param properties Properties for the role assignment.\n-     * @return The created {@link RoleAssignment}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     * @param scope      The {@link RoleScope scope} of the {@link RoleAssignment} to create.\n+     * @param name       The name used to create the {@link RoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link RoleAssignment}.\n+     * @param context    Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} contains the created\n+     * {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the request is rejected by the server.\n+     * @throws NullPointerException   if the {@link RoleScope scope}, {@link UUID name} or\n+     * {@link RoleAssignmentProperties properties} are {@code null}.\n      */\n-    public Response<RoleAssignment> createKeyWithResponse(String scope, String name,\n-                                                          RoleAssignmentProperties properties, Context context) {\n+    public Response<RoleAssignment> createRoleAssignmentWithResponse(RoleScope scope, UUID name,\n+                                                                     RoleAssignmentProperties properties,\n+                                                                     Context context) {\n         return asyncClient.createRoleAssignmentWithResponse(scope, name, properties, context).block();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Gets a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public RoleAssignment getRoleAssignment(String scope, String name) {\n-        return getKeyWithResponse(scope, name, Context.NONE).getValue();\n+    public RoleAssignment getRoleAssignment(RoleScope scope, String name) {\n+        return getRoleAssignmentWithResponse(scope, name, Context.NONE).getValue();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Gets a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n-    public Response<RoleAssignment> getKeyWithResponse(String scope, String name, Context context) {\n+    public Response<RoleAssignment> getRoleAssignmentWithResponse(RoleScope scope, String name, Context context) {\n         return asyncClient.getRoleAssignmentWithResponse(scope, name, context).block();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Deletes a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public RoleAssignment deleteRoleAssignment(String scope, String name) {\n-        return deleteKeyWithResponse(scope, name, Context.NONE).getValue();\n+    public RoleAssignment deleteRoleAssignment(RoleScope scope, String name) {\n+        return deleteRoleAssignmentWithResponse(scope, name, Context.NONE).getValue();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Deletes a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n-    public Response<RoleAssignment> deleteKeyWithResponse(String scope, String name, Context context) {\n+    public Response<RoleAssignment> deleteRoleAssignmentWithResponse(RoleScope scope, String name, Context context) {\n         return asyncClient.deleteRoleAssignmentWithResponse(scope, name, context).block();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2NjcwNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r445866704", "bodyText": "getRoleAssignment", "author": "christothes", "createdAt": "2020-06-25T22:10:34Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.security.keyvault.administration.implementation.models.KeyVaultErrorException;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+\n+/**\n+ * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment}.\n+ * Additionally, the client supports listing {@link RoleDefinition}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n+public class KeyVaultAccessControlClient {\n+    private final KeyVaultAccessControlAsyncClient asyncClient;\n+\n+    /**\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@code pipeline} to service requests\n+     *\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that the client routes its request through.\n+     */\n+    KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n+        this.asyncClient = asyncClient;\n+    }\n+\n+    /**\n+     * Get the vault endpoint URL.\n+     *\n+     * @return The vault endpoint URL.\n+     */\n+    public String getVaultUrl() {\n+        return asyncClient.getVaultUrl();\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, Context context) {\n+        return listRoleDefinitions(scope, null, context);\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n+     *                scope as well.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, String filter, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, filter, context));\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, Context context) {\n+        return listRoleAssignments(scope, null, context);\n+    }\n+\n+    /**\n+     * Get all role assignments that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role assignment.\n+     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n+     *                scope as well.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleAssignment role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, String filter, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, filter, context));\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The scope of the role assignment to create.\n+     * @param name       The name used to create the role assignment.\n+     * @param properties Properties for the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public RoleAssignment createRoleAssignment(String scope, String name, RoleAssignmentProperties properties) {\n+        return createKeyWithResponse(scope, name, properties, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The scope of the role assignment to create.\n+     * @param name       The name used to create the role assignment.\n+     * @param properties Properties for the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     */\n+    public Response<RoleAssignment> createKeyWithResponse(String scope, String name,\n+                                                          RoleAssignmentProperties properties, Context context) {\n+        return asyncClient.createRoleAssignmentWithResponse(scope, name, properties, context).block();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope The scope of the role assignment to create.\n+     * @param name  The name used to create the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public RoleAssignment getRoleAssignment(String scope, String name) {\n+        return getKeyWithResponse(scope, name, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope The scope of the role assignment to create.\n+     * @param name  The name used to create the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     */\n+    public Response<RoleAssignment> getKeyWithResponse(String scope, String name, Context context) {", "originalCommit": "614cf26a47f15beae2d34d52afc4cd7b0e4759ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6273df0f12bc99fbc0b827cffba0b3f3237b8b93", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\nindex cf102d1c687..d3a0e4dce99 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\n\n@@ -10,171 +10,156 @@ import com.azure.security.keyvault.administration.implementation.models.KeyVault\n import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+import com.azure.security.keyvault.administration.models.RoleScope;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n \n /**\n  * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n- * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment}.\n- * Additionally, the client supports listing {@link RoleDefinition}.\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment role\n+ * assignments}. Additionally, the client supports listing {@link RoleDefinition role definitions}.\n  */\n @ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n public class KeyVaultAccessControlClient {\n     private final KeyVaultAccessControlAsyncClient asyncClient;\n \n     /**\n-     * Creates an {@link KeyVaultAccessControlClient} that uses a {@code pipeline} to service requests\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@link com.azure.core.http.HttpPipeline pipeline}\n+     * to service requests.\n      *\n-     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that the client routes its request through.\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that this client routes its request through.\n      */\n     KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n         this.asyncClient = asyncClient;\n     }\n \n     /**\n-     * Get the vault endpoint URL.\n+     * Gets the URL for the Key Vault this client is associated with.\n      *\n-     * @return The vault endpoint URL.\n+     * @return The Key Vault URL.\n      */\n     public String getVaultUrl() {\n         return asyncClient.getVaultUrl();\n     }\n \n     /**\n-     * Get all role definitions that are applicable at scope and above.\n-     *\n-     * @param scope   The scope of the role definition.\n-     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n-     */\n-    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, Context context) {\n-        return listRoleDefinitions(scope, null, context);\n-    }\n-\n-    /**\n-     * Get all role definitions that are applicable at scope and above.\n+     * Get all {@link RoleDefinition role definitions} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n      *\n-     * @param scope   The scope of the role definition.\n-     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n-     *                scope as well.\n-     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleDefinition role definitions}.\n+     * @param context Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} containing the {@link RoleDefinition role definitions} for the given\n+     * {@link RoleScope scope}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n      */\n-    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, String filter, Context context) {\n-        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, filter, context));\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(RoleScope scope, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, context));\n     }\n \n     /**\n-     * Get all role definitions that are applicable at scope and above.\n+     * Get all {@link RoleAssignment role assignments} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n      *\n-     * @param scope   The scope of the role definition.\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleAssignment}.\n      * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @return A {@link PagedIterable} containing the {@link RoleAssignment role assignments} for the given\n+     * {@link RoleScope scope}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n      */\n-    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, Context context) {\n-        return listRoleAssignments(scope, null, context);\n-    }\n-\n-    /**\n-     * Get all role assignments that are applicable at scope and above.\n-     *\n-     * @param scope   The scope of the role assignment.\n-     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n-     *                scope as well.\n-     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleAssignment role definitions}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n-     */\n-    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, String filter, Context context) {\n-        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, filter, context));\n+    public PagedIterable<RoleAssignment> listRoleAssignments(RoleScope scope, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, context));\n     }\n \n     /**\n      * Creates a {@link RoleAssignment}.\n      *\n-     * @param scope      The scope of the role assignment to create.\n-     * @param name       The name used to create the role assignment.\n-     * @param properties Properties for the role assignment.\n+     * @param scope      The {@link RoleScope scope} of the {@link RoleAssignment} to create.\n+     * @param name       The name used to create the {@link RoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link RoleAssignment}.\n      * @return The created {@link RoleAssignment}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     * @throws KeyVaultErrorException if the request is rejected by the server.\n+     * @throws NullPointerException   if the {@link RoleScope scope}, {@link UUID name} or\n+     * {@link RoleAssignmentProperties properties} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public RoleAssignment createRoleAssignment(String scope, String name, RoleAssignmentProperties properties) {\n-        return createKeyWithResponse(scope, name, properties, Context.NONE).getValue();\n+    public RoleAssignment createRoleAssignment(RoleScope scope, UUID name,\n+                                               RoleAssignmentProperties properties) {\n+        return createRoleAssignmentWithResponse(scope, name, properties, Context.NONE).getValue();\n     }\n \n     /**\n      * Creates a {@link RoleAssignment}.\n      *\n-     * @param scope      The scope of the role assignment to create.\n-     * @param name       The name used to create the role assignment.\n-     * @param properties Properties for the role assignment.\n-     * @return The created {@link RoleAssignment}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     * @param scope      The {@link RoleScope scope} of the {@link RoleAssignment} to create.\n+     * @param name       The name used to create the {@link RoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link RoleAssignment}.\n+     * @param context    Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} contains the created\n+     * {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the request is rejected by the server.\n+     * @throws NullPointerException   if the {@link RoleScope scope}, {@link UUID name} or\n+     * {@link RoleAssignmentProperties properties} are {@code null}.\n      */\n-    public Response<RoleAssignment> createKeyWithResponse(String scope, String name,\n-                                                          RoleAssignmentProperties properties, Context context) {\n+    public Response<RoleAssignment> createRoleAssignmentWithResponse(RoleScope scope, UUID name,\n+                                                                     RoleAssignmentProperties properties,\n+                                                                     Context context) {\n         return asyncClient.createRoleAssignmentWithResponse(scope, name, properties, context).block();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Gets a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public RoleAssignment getRoleAssignment(String scope, String name) {\n-        return getKeyWithResponse(scope, name, Context.NONE).getValue();\n+    public RoleAssignment getRoleAssignment(RoleScope scope, String name) {\n+        return getRoleAssignmentWithResponse(scope, name, Context.NONE).getValue();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Gets a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n-    public Response<RoleAssignment> getKeyWithResponse(String scope, String name, Context context) {\n+    public Response<RoleAssignment> getRoleAssignmentWithResponse(RoleScope scope, String name, Context context) {\n         return asyncClient.getRoleAssignmentWithResponse(scope, name, context).block();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Deletes a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public RoleAssignment deleteRoleAssignment(String scope, String name) {\n-        return deleteKeyWithResponse(scope, name, Context.NONE).getValue();\n+    public RoleAssignment deleteRoleAssignment(RoleScope scope, String name) {\n+        return deleteRoleAssignmentWithResponse(scope, name, Context.NONE).getValue();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Deletes a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n-    public Response<RoleAssignment> deleteKeyWithResponse(String scope, String name, Context context) {\n+    public Response<RoleAssignment> deleteRoleAssignmentWithResponse(RoleScope scope, String name, Context context) {\n         return asyncClient.deleteRoleAssignmentWithResponse(scope, name, context).block();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2Njk0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r445866941", "bodyText": "deleteRoleAssignment", "author": "christothes", "createdAt": "2020-06-25T22:11:05Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.security.keyvault.administration.implementation.models.KeyVaultErrorException;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+\n+/**\n+ * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment}.\n+ * Additionally, the client supports listing {@link RoleDefinition}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n+public class KeyVaultAccessControlClient {\n+    private final KeyVaultAccessControlAsyncClient asyncClient;\n+\n+    /**\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@code pipeline} to service requests\n+     *\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that the client routes its request through.\n+     */\n+    KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n+        this.asyncClient = asyncClient;\n+    }\n+\n+    /**\n+     * Get the vault endpoint URL.\n+     *\n+     * @return The vault endpoint URL.\n+     */\n+    public String getVaultUrl() {\n+        return asyncClient.getVaultUrl();\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, Context context) {\n+        return listRoleDefinitions(scope, null, context);\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n+     *                scope as well.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, String filter, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, filter, context));\n+    }\n+\n+    /**\n+     * Get all role definitions that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role definition.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, Context context) {\n+        return listRoleAssignments(scope, null, context);\n+    }\n+\n+    /**\n+     * Get all role assignments that are applicable at scope and above.\n+     *\n+     * @param scope   The scope of the role assignment.\n+     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n+     *                scope as well.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} of {@link RoleAssignment role definitions}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} is null.\n+     */\n+    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, String filter, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, filter, context));\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The scope of the role assignment to create.\n+     * @param name       The name used to create the role assignment.\n+     * @param properties Properties for the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public RoleAssignment createRoleAssignment(String scope, String name, RoleAssignmentProperties properties) {\n+        return createKeyWithResponse(scope, name, properties, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The scope of the role assignment to create.\n+     * @param name       The name used to create the role assignment.\n+     * @param properties Properties for the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     */\n+    public Response<RoleAssignment> createKeyWithResponse(String scope, String name,\n+                                                          RoleAssignmentProperties properties, Context context) {\n+        return asyncClient.createRoleAssignmentWithResponse(scope, name, properties, context).block();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope The scope of the role assignment to create.\n+     * @param name  The name used to create the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public RoleAssignment getRoleAssignment(String scope, String name) {\n+        return getKeyWithResponse(scope, name, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope The scope of the role assignment to create.\n+     * @param name  The name used to create the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     */\n+    public Response<RoleAssignment> getKeyWithResponse(String scope, String name, Context context) {\n+        return asyncClient.getRoleAssignmentWithResponse(scope, name, context).block();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope The scope of the role assignment to create.\n+     * @param name  The name used to create the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public RoleAssignment deleteRoleAssignment(String scope, String name) {\n+        return deleteKeyWithResponse(scope, name, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope The scope of the role assignment to create.\n+     * @param name  The name used to create the role assignment.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     */\n+    public Response<RoleAssignment> deleteKeyWithResponse(String scope, String name, Context context) {", "originalCommit": "614cf26a47f15beae2d34d52afc4cd7b0e4759ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6273df0f12bc99fbc0b827cffba0b3f3237b8b93", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\nindex cf102d1c687..d3a0e4dce99 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\n\n@@ -10,171 +10,156 @@ import com.azure.security.keyvault.administration.implementation.models.KeyVault\n import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+import com.azure.security.keyvault.administration.models.RoleScope;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n \n /**\n  * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n- * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment}.\n- * Additionally, the client supports listing {@link RoleDefinition}.\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment role\n+ * assignments}. Additionally, the client supports listing {@link RoleDefinition role definitions}.\n  */\n @ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n public class KeyVaultAccessControlClient {\n     private final KeyVaultAccessControlAsyncClient asyncClient;\n \n     /**\n-     * Creates an {@link KeyVaultAccessControlClient} that uses a {@code pipeline} to service requests\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@link com.azure.core.http.HttpPipeline pipeline}\n+     * to service requests.\n      *\n-     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that the client routes its request through.\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that this client routes its request through.\n      */\n     KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n         this.asyncClient = asyncClient;\n     }\n \n     /**\n-     * Get the vault endpoint URL.\n+     * Gets the URL for the Key Vault this client is associated with.\n      *\n-     * @return The vault endpoint URL.\n+     * @return The Key Vault URL.\n      */\n     public String getVaultUrl() {\n         return asyncClient.getVaultUrl();\n     }\n \n     /**\n-     * Get all role definitions that are applicable at scope and above.\n-     *\n-     * @param scope   The scope of the role definition.\n-     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n-     */\n-    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, Context context) {\n-        return listRoleDefinitions(scope, null, context);\n-    }\n-\n-    /**\n-     * Get all role definitions that are applicable at scope and above.\n+     * Get all {@link RoleDefinition role definitions} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n      *\n-     * @param scope   The scope of the role definition.\n-     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n-     *                scope as well.\n-     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleDefinition role definitions}.\n+     * @param context Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} containing the {@link RoleDefinition role definitions} for the given\n+     * {@link RoleScope scope}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n      */\n-    public PagedIterable<RoleDefinition> listRoleDefinitions(String scope, String filter, Context context) {\n-        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, filter, context));\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(RoleScope scope, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, context));\n     }\n \n     /**\n-     * Get all role definitions that are applicable at scope and above.\n+     * Get all {@link RoleAssignment role assignments} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n      *\n-     * @param scope   The scope of the role definition.\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleAssignment}.\n      * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleDefinition role definitions}.\n+     * @return A {@link PagedIterable} containing the {@link RoleAssignment role assignments} for the given\n+     * {@link RoleScope scope}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n      */\n-    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, Context context) {\n-        return listRoleAssignments(scope, null, context);\n-    }\n-\n-    /**\n-     * Get all role assignments that are applicable at scope and above.\n-     *\n-     * @param scope   The scope of the role assignment.\n-     * @param filter  The filter to apply on the operation. Use a \"atScopeAndBelow\" filter to search below the given\n-     *                scope as well.\n-     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n-     * @return A {@link PagedIterable} of {@link RoleAssignment role definitions}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} is null.\n-     */\n-    public PagedIterable<RoleAssignment> listRoleAssignments(String scope, String filter, Context context) {\n-        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, filter, context));\n+    public PagedIterable<RoleAssignment> listRoleAssignments(RoleScope scope, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, context));\n     }\n \n     /**\n      * Creates a {@link RoleAssignment}.\n      *\n-     * @param scope      The scope of the role assignment to create.\n-     * @param name       The name used to create the role assignment.\n-     * @param properties Properties for the role assignment.\n+     * @param scope      The {@link RoleScope scope} of the {@link RoleAssignment} to create.\n+     * @param name       The name used to create the {@link RoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link RoleAssignment}.\n      * @return The created {@link RoleAssignment}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     * @throws KeyVaultErrorException if the request is rejected by the server.\n+     * @throws NullPointerException   if the {@link RoleScope scope}, {@link UUID name} or\n+     * {@link RoleAssignmentProperties properties} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public RoleAssignment createRoleAssignment(String scope, String name, RoleAssignmentProperties properties) {\n-        return createKeyWithResponse(scope, name, properties, Context.NONE).getValue();\n+    public RoleAssignment createRoleAssignment(RoleScope scope, UUID name,\n+                                               RoleAssignmentProperties properties) {\n+        return createRoleAssignmentWithResponse(scope, name, properties, Context.NONE).getValue();\n     }\n \n     /**\n      * Creates a {@link RoleAssignment}.\n      *\n-     * @param scope      The scope of the role assignment to create.\n-     * @param name       The name used to create the role assignment.\n-     * @param properties Properties for the role assignment.\n-     * @return The created {@link RoleAssignment}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope}, {@code name} or {@code properties} are null.\n+     * @param scope      The {@link RoleScope scope} of the {@link RoleAssignment} to create.\n+     * @param name       The name used to create the {@link RoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link RoleAssignment}.\n+     * @param context    Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} contains the created\n+     * {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the request is rejected by the server.\n+     * @throws NullPointerException   if the {@link RoleScope scope}, {@link UUID name} or\n+     * {@link RoleAssignmentProperties properties} are {@code null}.\n      */\n-    public Response<RoleAssignment> createKeyWithResponse(String scope, String name,\n-                                                          RoleAssignmentProperties properties, Context context) {\n+    public Response<RoleAssignment> createRoleAssignmentWithResponse(RoleScope scope, UUID name,\n+                                                                     RoleAssignmentProperties properties,\n+                                                                     Context context) {\n         return asyncClient.createRoleAssignmentWithResponse(scope, name, properties, context).block();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Gets a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public RoleAssignment getRoleAssignment(String scope, String name) {\n-        return getKeyWithResponse(scope, name, Context.NONE).getValue();\n+    public RoleAssignment getRoleAssignment(RoleScope scope, String name) {\n+        return getRoleAssignmentWithResponse(scope, name, Context.NONE).getValue();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Gets a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n-    public Response<RoleAssignment> getKeyWithResponse(String scope, String name, Context context) {\n+    public Response<RoleAssignment> getRoleAssignmentWithResponse(RoleScope scope, String name, Context context) {\n         return asyncClient.getRoleAssignmentWithResponse(scope, name, context).block();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Deletes a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public RoleAssignment deleteRoleAssignment(String scope, String name) {\n-        return deleteKeyWithResponse(scope, name, Context.NONE).getValue();\n+    public RoleAssignment deleteRoleAssignment(RoleScope scope, String name) {\n+        return deleteRoleAssignmentWithResponse(scope, name, Context.NONE).getValue();\n     }\n \n     /**\n-     * Creates a {@link RoleAssignment}.\n+     * Deletes a {@link RoleAssignment}.\n      *\n-     * @param scope The scope of the role assignment to create.\n-     * @param name  The name used to create the role assignment.\n-     * @return The created {@link RoleAssignment}.\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n      * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@code scope} or {@code name} are null.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n      */\n-    public Response<RoleAssignment> deleteKeyWithResponse(String scope, String name, Context context) {\n+    public Response<RoleAssignment> deleteRoleAssignmentWithResponse(RoleScope scope, String name, Context context) {\n         return asyncClient.deleteRoleAssignmentWithResponse(scope, name, context).block();\n     }\n }\n"}}, {"oid": "6273df0f12bc99fbc0b827cffba0b3f3237b8b93", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6273df0f12bc99fbc0b827cffba0b3f3237b8b93", "message": "Addressed PR comments. Added a new ExpandableStringEnum: RoleScope. Corrected some of the Javadoc.", "committedDate": "2020-06-27T04:26:23Z", "type": "commit"}, {"oid": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d69de48129a53cfa92c7a38f05bf089e5ef231c3", "message": "Merge branch 'master' into users/vicolina/keyvault-rbac", "committedDate": "2020-06-28T01:53:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI5ODQzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447298433", "bodyText": "We use RoleAssignmentScope in .NET. I think it's more relatable to RoleAssignment that way. We also call this parameter roleScope, but I think scope is succinct. FYI @christothes", "author": "heaths", "createdAt": "2020-06-29T22:36:37Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.security.keyvault.administration.implementation.models.KeyVaultErrorException;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+import com.azure.security.keyvault.administration.models.RoleScope;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n+\n+/**\n+ * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment role\n+ * assignments}. Additionally, the client supports listing {@link RoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n+public class KeyVaultAccessControlClient {\n+    private final KeyVaultAccessControlAsyncClient asyncClient;\n+\n+    /**\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@link com.azure.core.http.HttpPipeline pipeline}\n+     * to service requests.\n+     *\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that this client routes its request through.\n+     */\n+    KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n+        this.asyncClient = asyncClient;\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return asyncClient.getVaultUrl();\n+    }\n+\n+    /**\n+     * Get all {@link RoleDefinition role definitions} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n+     *\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleDefinition role definitions}.\n+     * @param context Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} containing the {@link RoleDefinition role definitions} for the given\n+     * {@link RoleScope scope}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(RoleScope scope, Context context) {", "originalCommit": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY2MDUyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r448660529", "bodyText": "Since this scope is used for both RoleAssignment and RoleDefinition I found RoleScope to be more fitting, else it makes me think that it's only reserved for the former.", "author": "vcolin7", "createdAt": "2020-07-01T23:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI5ODQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ1NTQzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r478455432", "bodyText": "Let's consider snapping to the names discussed here.", "author": "christothes", "createdAt": "2020-08-27T14:19:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI5ODQzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc1NDg4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r478754880", "bodyText": "Agreed to the naming proposed.", "author": "vcolin7", "createdAt": "2020-08-27T23:46:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI5ODQzMw=="}], "type": "inlineReview", "revised_code": {"commit": "346b768f18d9d887ef686c78cc7f0dcdb24cd944", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\nindex d3a0e4dce99..70cf6454df7 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\n\n@@ -1,3 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n package com.azure.security.keyvault.administration;\n \n import com.azure.core.annotation.ReturnType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI5OTU4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447299583", "bodyText": "In .NET, we actually auto-generate the name and, thus, have to put it after properties since it's an optional parameter. Could you do that here as well? It's probably rare people will want to pass in their own UUID and could just generate instead. Perhaps that needs to be through overloads for Java, but would simplify the normal call case of just scope and (or roleScope) and properties.", "author": "heaths", "createdAt": "2020-06-29T22:39:12Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.security.keyvault.administration.implementation.models.KeyVaultErrorException;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+import com.azure.security.keyvault.administration.models.RoleScope;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n+\n+/**\n+ * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment role\n+ * assignments}. Additionally, the client supports listing {@link RoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n+public class KeyVaultAccessControlClient {\n+    private final KeyVaultAccessControlAsyncClient asyncClient;\n+\n+    /**\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@link com.azure.core.http.HttpPipeline pipeline}\n+     * to service requests.\n+     *\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that this client routes its request through.\n+     */\n+    KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n+        this.asyncClient = asyncClient;\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return asyncClient.getVaultUrl();\n+    }\n+\n+    /**\n+     * Get all {@link RoleDefinition role definitions} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n+     *\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleDefinition role definitions}.\n+     * @param context Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} containing the {@link RoleDefinition role definitions} for the given\n+     * {@link RoleScope scope}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(RoleScope scope, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, context));\n+    }\n+\n+    /**\n+     * Get all {@link RoleAssignment role assignments} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n+     *\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} containing the {@link RoleAssignment role assignments} for the given\n+     * {@link RoleScope scope}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n+     */\n+    public PagedIterable<RoleAssignment> listRoleAssignments(RoleScope scope, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, context));\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The {@link RoleScope scope} of the {@link RoleAssignment} to create.\n+     * @param name       The name used to create the {@link RoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link RoleAssignment}.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the request is rejected by the server.\n+     * @throws NullPointerException   if the {@link RoleScope scope}, {@link UUID name} or\n+     * {@link RoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public RoleAssignment createRoleAssignment(RoleScope scope, UUID name,", "originalCommit": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY2MjI4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r448662283", "bodyText": "For the AsyncClient there is an overload without the name parameter, so we have both options available. It seems I missed adding it to the sync client. I kept the other method signature where you can pass name based on a comment by @christothes in a 1-on-1 conversation we had, where he mentioned it proved useful for testing purposes.", "author": "vcolin7", "createdAt": "2020-07-01T23:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI5OTU4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "346b768f18d9d887ef686c78cc7f0dcdb24cd944", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\nindex d3a0e4dce99..70cf6454df7 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\n\n@@ -1,3 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n package com.azure.security.keyvault.administration;\n \n import com.azure.core.annotation.ReturnType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwMDM4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447300387", "bodyText": "We called name instead roleAssignmentName, but I'd be in favor of shortening these since parameters normally don't have to be so specific when it's obvious. That is the case before with Key Vault libraries. We can always settle on parameter names later, too.", "author": "heaths", "createdAt": "2020-06-29T22:41:36Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.rest.PagedIterable;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.security.keyvault.administration.implementation.models.KeyVaultErrorException;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignment;\n+import com.azure.security.keyvault.administration.implementation.models.RoleAssignmentProperties;\n+import com.azure.security.keyvault.administration.implementation.models.RoleDefinition;\n+import com.azure.security.keyvault.administration.models.RoleScope;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.UUID;\n+\n+/**\n+ * The {@link KeyVaultAccessControlClient} provides synchronous methods to view and manage Role Based Access for the\n+ * Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment role\n+ * assignments}. Additionally, the client supports listing {@link RoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class)\n+public class KeyVaultAccessControlClient {\n+    private final KeyVaultAccessControlAsyncClient asyncClient;\n+\n+    /**\n+     * Creates an {@link KeyVaultAccessControlClient} that uses a {@link com.azure.core.http.HttpPipeline pipeline}\n+     * to service requests.\n+     *\n+     * @param asyncClient The {@link KeyVaultAccessControlAsyncClient} that this client routes its request through.\n+     */\n+    KeyVaultAccessControlClient(KeyVaultAccessControlAsyncClient asyncClient) {\n+        this.asyncClient = asyncClient;\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return asyncClient.getVaultUrl();\n+    }\n+\n+    /**\n+     * Get all {@link RoleDefinition role definitions} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n+     *\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleDefinition role definitions}.\n+     * @param context Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} containing the {@link RoleDefinition role definitions} for the given\n+     * {@link RoleScope scope}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n+     */\n+    public PagedIterable<RoleDefinition> listRoleDefinitions(RoleScope scope, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleDefinitions(scope, context));\n+    }\n+\n+    /**\n+     * Get all {@link RoleAssignment role assignments} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n+     *\n+     * @param scope   The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param context Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedIterable} containing the {@link RoleAssignment role assignments} for the given\n+     * {@link RoleScope scope}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n+     */\n+    public PagedIterable<RoleAssignment> listRoleAssignments(RoleScope scope, Context context) {\n+        return new PagedIterable<>(asyncClient.listRoleAssignments(scope, context));\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The {@link RoleScope scope} of the {@link RoleAssignment} to create.\n+     * @param name       The name used to create the {@link RoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link RoleAssignment}.\n+     * @return The created {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the request is rejected by the server.\n+     * @throws NullPointerException   if the {@link RoleScope scope}, {@link UUID name} or\n+     * {@link RoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public RoleAssignment createRoleAssignment(RoleScope scope, UUID name,\n+                                               RoleAssignmentProperties properties) {\n+        return createRoleAssignmentWithResponse(scope, name, properties, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Creates a {@link RoleAssignment}.\n+     *\n+     * @param scope      The {@link RoleScope scope} of the {@link RoleAssignment} to create.\n+     * @param name       The name used to create the {@link RoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link RoleAssignment}.\n+     * @param context    Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} contains the created\n+     * {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the request is rejected by the server.\n+     * @throws NullPointerException   if the {@link RoleScope scope}, {@link UUID name} or\n+     * {@link RoleAssignmentProperties properties} are {@code null}.\n+     */\n+    public Response<RoleAssignment> createRoleAssignmentWithResponse(RoleScope scope, UUID name,\n+                                                                     RoleAssignmentProperties properties,\n+                                                                     Context context) {\n+        return asyncClient.createRoleAssignmentWithResponse(scope, name, properties, context).block();\n+    }\n+\n+    /**\n+     * Gets a {@link RoleAssignment}.\n+     *\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public RoleAssignment getRoleAssignment(RoleScope scope, String name) {\n+        return getRoleAssignmentWithResponse(scope, name, Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Gets a {@link RoleAssignment}.\n+     *\n+     * @param scope The {@link RoleScope scope} of the {@link RoleAssignment}.\n+     * @param name  The name of the {@link RoleAssignment}.\n+     * @return The {@link RoleAssignment}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@link RoleScope scope} or {@link UUID name} are {@code null}.\n+     */\n+    public Response<RoleAssignment> getRoleAssignmentWithResponse(RoleScope scope, String name, Context context) {", "originalCommit": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "346b768f18d9d887ef686c78cc7f0dcdb24cd944", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\nindex d3a0e4dce99..70cf6454df7 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlClient.java\n\n@@ -1,3 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n package com.azure.security.keyvault.administration;\n \n import com.azure.core.annotation.ReturnType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwNTE5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447305199", "bodyText": "I reviewed the sync client first, so my comments there would apply here (and on all other relevant methods).", "author": "heaths", "createdAt": "2020-06-29T22:55:41Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,475 @@\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.RoleScope;\n+import reactor.core.publisher.Mono;\n+\n+import java.net.URL;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting {@link RoleAssignment role\n+ * assignments}. Additionally, the client supports listing {@link RoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link RoleDefinition role definitions} that are applicable at the given {@link RoleScope\n+     * scope} and above.\n+     *\n+     * @param scope The {@link RoleScope scope} of the {@link RoleDefinition role definitions}.\n+     * @return A {@link PagedFlux} containing the {@link RoleDefinition role definitions} for the given\n+     * {@link RoleScope scope}.\n+     * @throws KeyVaultErrorException if the operation is unsuccessful.\n+     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public PagedFlux<RoleDefinition> listRoleDefinitions(RoleScope scope) {", "originalCommit": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "346b768f18d9d887ef686c78cc7f0dcdb24cd944", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\nindex fe37b061ff2..9cbf275c44b 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n\n@@ -1,3 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n package com.azure.security.keyvault.administration;\n \n import com.azure.core.annotation.ReturnType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxMTkyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447311927", "bodyText": "Nit: wouldn't it be safer to check that it's not equal to \"https\"? No other protocol would/should work, so maybe it really doesn't matter in the grand scope of things but it fits the error message better.", "author": "heaths", "createdAt": "2020-06-29T23:16:06Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/KeyVaultCredentialPolicy.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.security.keyvault.administration.implementation;\n+\n+import com.azure.core.credential.TokenCredential;\n+import com.azure.core.credential.TokenRequestContext;\n+import com.azure.core.http.HttpPipelineCallContext;\n+import com.azure.core.http.HttpPipelineNextPolicy;\n+import com.azure.core.http.HttpResponse;\n+import com.azure.core.http.policy.HttpPipelinePolicy;\n+import com.azure.core.util.CoreUtils;\n+import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * A policy that authenticates requests with Azure Key Vault service. The content added by this policy\n+ * is leveraged in {@link TokenCredential} to get and set the correct \"Authorization\" header value.\n+ *\n+ * @see TokenCredential\n+ */\n+public final class KeyVaultCredentialPolicy implements HttpPipelinePolicy {\n+    private final ClientLogger logger = new ClientLogger(KeyVaultCredentialPolicy.class);\n+    private static final String WWW_AUTHENTICATE = \"WWW-Authenticate\";\n+    private static final String BEARER_TOKEN_PREFIX = \"Bearer \";\n+    private static final String AUTHORIZATION = \"Authorization\";\n+    private final ScopeTokenCache cache;\n+\n+    /**\n+     * Creates KeyVaultCredentialPolicy.\n+     *\n+     * @param credential the token credential to authenticate the request\n+     */\n+    public KeyVaultCredentialPolicy(TokenCredential credential) {\n+        Objects.requireNonNull(credential);\n+        this.cache = new ScopeTokenCache((request) -> credential.getToken(request));\n+    }\n+\n+    /**\n+     * Adds the required header to authenticate a request to Azure Key Vault service.\n+     *\n+     * @param context The request context\n+     * @param next The next HTTP pipeline policy to process the {@code context's} request after this policy completes.\n+     * @return A {@link Mono} representing the HTTP response that will arrive asynchronously.\n+     */\n+    @Override\n+    public Mono<HttpResponse> process(HttpPipelineCallContext context, HttpPipelineNextPolicy next) {\n+        if (\"http\".equals(context.getHttpRequest().getUrl().getProtocol())) {", "originalCommit": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY2MzEyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r448663125", "bodyText": "You are right. This is closely based on what we have in other KeyVault Java libraries, so it's probably worth to change this in those as well.", "author": "vcolin7", "createdAt": "2020-07-01T23:15:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxMTkyNw=="}], "type": "inlineReview", "revised_code": {"commit": "346b768f18d9d887ef686c78cc7f0dcdb24cd944", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/KeyVaultCredentialPolicy.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/KeyVaultCredentialPolicy.java\nindex cb97c84877f..9168ba3065a 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/KeyVaultCredentialPolicy.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/KeyVaultCredentialPolicy.java\n\n@@ -1,5 +1,6 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n+\n package com.azure.security.keyvault.administration.implementation;\n \n import com.azure.core.credential.TokenCredential;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxOTk2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447319960", "bodyText": "Is it common to expose this? In .NET, we expose the members in a RequestFailedException? If so, please ignore.", "author": "heaths", "createdAt": "2020-06-29T23:40:13Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/Error.java", "diffHunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Immutable;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** The Error model. */\n+@Immutable\n+public final class Error {", "originalCommit": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY2NDg0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r448664840", "bodyText": "In the Java world, it is common practice to assume things inside an implementation folder to be internal, since there is no way to access internal classes in different packages without making them public. Additionally, in this case everything in the administration/implementation/models folder was generated with AutoRest. Custom models are located inside administration/models.", "author": "vcolin7", "createdAt": "2020-07-01T23:21:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxOTk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc4NTYxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r478785610", "bodyText": "This would be exposed through KeyVaultErrorException.", "author": "vcolin7", "createdAt": "2020-08-28T01:45:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxOTk2MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMTA2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447321067", "bodyText": "Too generic. Use KeyVaultPermission.", "author": "heaths", "createdAt": "2020-06-29T23:43:56Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/Permission.java", "diffHunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.List;\n+\n+/** The Permission model. */\n+@Fluent\n+public final class Permission {", "originalCommit": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTIxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r448671219", "bodyText": "As mentioned above, classes in this folder were generated with AutoRest, so this name comes directly from the RBAC swagger. According to @jianghaolu, the use of custom directives such as these is always discouraged, which is why I haven't added any. We can do it if absolutely required. Also, there is a new feature in the works that will allow us to modify the output Java code directly, but it might take a while to be released.", "author": "vcolin7", "createdAt": "2020-07-01T23:43:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMTA2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc4NjQ1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r478786458", "bodyText": "After a brief chat with @srnagar, it seems that directives are ok but transformations are the issue. We can easily rename this.", "author": "vcolin7", "createdAt": "2020-08-28T01:49:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMTA2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "563f00de09a4888872e3b0b6341b8bc48ae0f850", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/Permission.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/Permission.java\ndeleted file mode 100644\nindex d1feaf6d24e..00000000000\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/Permission.java\n+++ /dev/null\n\n@@ -1,117 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-// Code generated by Microsoft (R) AutoRest Code Generator.\n-\n-package com.azure.security.keyvault.administration.implementation.models;\n-\n-import com.azure.core.annotation.Fluent;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.List;\n-\n-/** The Permission model. */\n-@Fluent\n-public final class Permission {\n-    /*\n-     * Allowed actions.\n-     */\n-    @JsonProperty(value = \"actions\")\n-    private List<String> actions;\n-\n-    /*\n-     * Denied actions.\n-     */\n-    @JsonProperty(value = \"notActions\")\n-    private List<String> notActions;\n-\n-    /*\n-     * Allowed Data actions.\n-     */\n-    @JsonProperty(value = \"dataActions\")\n-    private List<String> dataActions;\n-\n-    /*\n-     * Denied Data actions.\n-     */\n-    @JsonProperty(value = \"notDataActions\")\n-    private List<String> notDataActions;\n-\n-    /**\n-     * Get the actions property: Allowed actions.\n-     *\n-     * @return the actions value.\n-     */\n-    public List<String> getActions() {\n-        return this.actions;\n-    }\n-\n-    /**\n-     * Set the actions property: Allowed actions.\n-     *\n-     * @param actions the actions value to set.\n-     * @return the Permission object itself.\n-     */\n-    public Permission setActions(List<String> actions) {\n-        this.actions = actions;\n-        return this;\n-    }\n-\n-    /**\n-     * Get the notActions property: Denied actions.\n-     *\n-     * @return the notActions value.\n-     */\n-    public List<String> getNotActions() {\n-        return this.notActions;\n-    }\n-\n-    /**\n-     * Set the notActions property: Denied actions.\n-     *\n-     * @param notActions the notActions value to set.\n-     * @return the Permission object itself.\n-     */\n-    public Permission setNotActions(List<String> notActions) {\n-        this.notActions = notActions;\n-        return this;\n-    }\n-\n-    /**\n-     * Get the dataActions property: Allowed Data actions.\n-     *\n-     * @return the dataActions value.\n-     */\n-    public List<String> getDataActions() {\n-        return this.dataActions;\n-    }\n-\n-    /**\n-     * Set the dataActions property: Allowed Data actions.\n-     *\n-     * @param dataActions the dataActions value to set.\n-     * @return the Permission object itself.\n-     */\n-    public Permission setDataActions(List<String> dataActions) {\n-        this.dataActions = dataActions;\n-        return this;\n-    }\n-\n-    /**\n-     * Get the notDataActions property: Denied Data actions.\n-     *\n-     * @return the notDataActions value.\n-     */\n-    public List<String> getNotDataActions() {\n-        return this.notDataActions;\n-    }\n-\n-    /**\n-     * Set the notDataActions property: Denied Data actions.\n-     *\n-     * @param notDataActions the notDataActions value to set.\n-     * @return the Permission object itself.\n-     */\n-    public Permission setNotDataActions(List<String> notDataActions) {\n-        this.notDataActions = notDataActions;\n-        return this;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMTI4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447321284", "bodyText": "These properties come from the service and should all be read-only.", "author": "heaths", "createdAt": "2020-06-29T23:44:43Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/Permission.java", "diffHunk": "@@ -0,0 +1,117 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.List;\n+\n+/** The Permission model. */\n+@Fluent\n+public final class Permission {\n+    /*\n+     * Allowed actions.\n+     */\n+    @JsonProperty(value = \"actions\")\n+    private List<String> actions;\n+\n+    /*\n+     * Denied actions.\n+     */\n+    @JsonProperty(value = \"notActions\")\n+    private List<String> notActions;\n+\n+    /*\n+     * Allowed Data actions.\n+     */\n+    @JsonProperty(value = \"dataActions\")\n+    private List<String> dataActions;\n+\n+    /*\n+     * Denied Data actions.\n+     */\n+    @JsonProperty(value = \"notDataActions\")\n+    private List<String> notDataActions;\n+\n+    /**\n+     * Get the actions property: Allowed actions.\n+     *\n+     * @return the actions value.\n+     */\n+    public List<String> getActions() {\n+        return this.actions;\n+    }\n+\n+    /**\n+     * Set the actions property: Allowed actions.\n+     *\n+     * @param actions the actions value to set.\n+     * @return the Permission object itself.\n+     */\n+    public Permission setActions(List<String> actions) {", "originalCommit": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTQ3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r448671470", "bodyText": "This is auto-generated code and is in an internal package.", "author": "vcolin7", "createdAt": "2020-07-01T23:44:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMTI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc4NjgwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r478786809", "bodyText": "I will remove the setters for these properties in a custom model.", "author": "vcolin7", "createdAt": "2020-08-28T01:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMTI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxMDMzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r479510335", "bodyText": "Just noticed this is used only in internal (implementation) classes only and we do not take any of such classes as input parameters in our client's public APIs. I don't think we need to remove these.", "author": "vcolin7", "createdAt": "2020-08-28T20:04:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMTI4NA=="}], "type": "inlineReview", "revised_code": {"commit": "563f00de09a4888872e3b0b6341b8bc48ae0f850", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/Permission.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/Permission.java\ndeleted file mode 100644\nindex d1feaf6d24e..00000000000\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/Permission.java\n+++ /dev/null\n\n@@ -1,117 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-// Code generated by Microsoft (R) AutoRest Code Generator.\n-\n-package com.azure.security.keyvault.administration.implementation.models;\n-\n-import com.azure.core.annotation.Fluent;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.List;\n-\n-/** The Permission model. */\n-@Fluent\n-public final class Permission {\n-    /*\n-     * Allowed actions.\n-     */\n-    @JsonProperty(value = \"actions\")\n-    private List<String> actions;\n-\n-    /*\n-     * Denied actions.\n-     */\n-    @JsonProperty(value = \"notActions\")\n-    private List<String> notActions;\n-\n-    /*\n-     * Allowed Data actions.\n-     */\n-    @JsonProperty(value = \"dataActions\")\n-    private List<String> dataActions;\n-\n-    /*\n-     * Denied Data actions.\n-     */\n-    @JsonProperty(value = \"notDataActions\")\n-    private List<String> notDataActions;\n-\n-    /**\n-     * Get the actions property: Allowed actions.\n-     *\n-     * @return the actions value.\n-     */\n-    public List<String> getActions() {\n-        return this.actions;\n-    }\n-\n-    /**\n-     * Set the actions property: Allowed actions.\n-     *\n-     * @param actions the actions value to set.\n-     * @return the Permission object itself.\n-     */\n-    public Permission setActions(List<String> actions) {\n-        this.actions = actions;\n-        return this;\n-    }\n-\n-    /**\n-     * Get the notActions property: Denied actions.\n-     *\n-     * @return the notActions value.\n-     */\n-    public List<String> getNotActions() {\n-        return this.notActions;\n-    }\n-\n-    /**\n-     * Set the notActions property: Denied actions.\n-     *\n-     * @param notActions the notActions value to set.\n-     * @return the Permission object itself.\n-     */\n-    public Permission setNotActions(List<String> notActions) {\n-        this.notActions = notActions;\n-        return this;\n-    }\n-\n-    /**\n-     * Get the dataActions property: Allowed Data actions.\n-     *\n-     * @return the dataActions value.\n-     */\n-    public List<String> getDataActions() {\n-        return this.dataActions;\n-    }\n-\n-    /**\n-     * Set the dataActions property: Allowed Data actions.\n-     *\n-     * @param dataActions the dataActions value to set.\n-     * @return the Permission object itself.\n-     */\n-    public Permission setDataActions(List<String> dataActions) {\n-        this.dataActions = dataActions;\n-        return this;\n-    }\n-\n-    /**\n-     * Get the notDataActions property: Denied Data actions.\n-     *\n-     * @return the notDataActions value.\n-     */\n-    public List<String> getNotDataActions() {\n-        return this.notDataActions;\n-    }\n-\n-    /**\n-     * Set the notDataActions property: Denied Data actions.\n-     *\n-     * @param notDataActions the notDataActions value to set.\n-     * @return the Permission object itself.\n-     */\n-    public Permission setNotDataActions(List<String> notDataActions) {\n-        this.notDataActions = notDataActions;\n-        return this;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMzc3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447323777", "bodyText": "Why publicly settable? What happens if the user passes null. IIRC, this is required - it's read-only in .NET, but we also provide a default instance of RoleAssignmentPropertiesWithScope.", "author": "heaths", "createdAt": "2020-06-29T23:51:52Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignment.java", "diffHunk": "@@ -0,0 +1,83 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** The RoleAssignment model. */\n+@Fluent\n+public final class RoleAssignment {\n+    /*\n+     * The role assignment ID.\n+     */\n+    @JsonProperty(value = \"id\", access = JsonProperty.Access.WRITE_ONLY)\n+    private String id;\n+\n+    /*\n+     * The role assignment name.\n+     */\n+    @JsonProperty(value = \"name\", access = JsonProperty.Access.WRITE_ONLY)\n+    private String name;\n+\n+    /*\n+     * The role assignment type.\n+     */\n+    @JsonProperty(value = \"type\", access = JsonProperty.Access.WRITE_ONLY)\n+    private String type;\n+\n+    /*\n+     * Role assignment properties.\n+     */\n+    @JsonProperty(value = \"properties\")\n+    private RoleAssignmentPropertiesWithScope properties;\n+\n+    /**\n+     * Get the id property: The role assignment ID.\n+     *\n+     * @return the id value.\n+     */\n+    public String getId() {\n+        return this.id;\n+    }\n+\n+    /**\n+     * Get the name property: The role assignment name.\n+     *\n+     * @return the name value.\n+     */\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    /**\n+     * Get the type property: The role assignment type.\n+     *\n+     * @return the type value.\n+     */\n+    public String getType() {\n+        return this.type;\n+    }\n+\n+    /**\n+     * Get the properties property: Role assignment properties.\n+     *\n+     * @return the properties value.\n+     */\n+    public RoleAssignmentPropertiesWithScope getProperties() {\n+        return this.properties;\n+    }\n+\n+    /**\n+     * Set the properties property: Role assignment properties.\n+     *\n+     * @param properties the properties value to set.\n+     * @return the RoleAssignment object itself.\n+     */\n+    public RoleAssignment setProperties(RoleAssignmentPropertiesWithScope properties) {", "originalCommit": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTg0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r448671840", "bodyText": "This was auto-generated by AutoRest. I'm thinking we could either add a custom directive to modify the output or add a custom model that implements what you mention and then use RoleAssignment internally to send the request. Any thoughts?", "author": "vcolin7", "createdAt": "2020-07-01T23:45:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMzc3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxMDA0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r479510046", "bodyText": "Just revisited this. We don't really accept a RoleAssignment as a parameter in any of our client's public APIs, so it would not be a problem if these properties are settable.", "author": "vcolin7", "createdAt": "2020-08-28T20:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMzc3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "563f00de09a4888872e3b0b6341b8bc48ae0f850", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignment.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignment.java\ndeleted file mode 100644\nindex 1d06ce14088..00000000000\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignment.java\n+++ /dev/null\n\n@@ -1,83 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-// Code generated by Microsoft (R) AutoRest Code Generator.\n-\n-package com.azure.security.keyvault.administration.implementation.models;\n-\n-import com.azure.core.annotation.Fluent;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-/** The RoleAssignment model. */\n-@Fluent\n-public final class RoleAssignment {\n-    /*\n-     * The role assignment ID.\n-     */\n-    @JsonProperty(value = \"id\", access = JsonProperty.Access.WRITE_ONLY)\n-    private String id;\n-\n-    /*\n-     * The role assignment name.\n-     */\n-    @JsonProperty(value = \"name\", access = JsonProperty.Access.WRITE_ONLY)\n-    private String name;\n-\n-    /*\n-     * The role assignment type.\n-     */\n-    @JsonProperty(value = \"type\", access = JsonProperty.Access.WRITE_ONLY)\n-    private String type;\n-\n-    /*\n-     * Role assignment properties.\n-     */\n-    @JsonProperty(value = \"properties\")\n-    private RoleAssignmentPropertiesWithScope properties;\n-\n-    /**\n-     * Get the id property: The role assignment ID.\n-     *\n-     * @return the id value.\n-     */\n-    public String getId() {\n-        return this.id;\n-    }\n-\n-    /**\n-     * Get the name property: The role assignment name.\n-     *\n-     * @return the name value.\n-     */\n-    public String getName() {\n-        return this.name;\n-    }\n-\n-    /**\n-     * Get the type property: The role assignment type.\n-     *\n-     * @return the type value.\n-     */\n-    public String getType() {\n-        return this.type;\n-    }\n-\n-    /**\n-     * Get the properties property: Role assignment properties.\n-     *\n-     * @return the properties value.\n-     */\n-    public RoleAssignmentPropertiesWithScope getProperties() {\n-        return this.properties;\n-    }\n-\n-    /**\n-     * Set the properties property: Role assignment properties.\n-     *\n-     * @param properties the properties value to set.\n-     * @return the RoleAssignment object itself.\n-     */\n-    public RoleAssignment setProperties(RoleAssignmentPropertiesWithScope properties) {\n-        this.properties = properties;\n-        return this;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMzk1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447323951", "bodyText": "This shouldn't be public.", "author": "heaths", "createdAt": "2020-06-29T23:52:24Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentCreateParameters.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** The RoleAssignmentCreateParameters model. */\n+@Fluent\n+public final class RoleAssignmentCreateParameters {", "originalCommit": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTg1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r448671850", "bodyText": "This is auto-generated code and is in an internal package.", "author": "vcolin7", "createdAt": "2020-07-01T23:45:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMzk1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "563f00de09a4888872e3b0b6341b8bc48ae0f850", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentCreateParameters.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentCreateParameters.java\ndeleted file mode 100644\nindex 56d16b847a0..00000000000\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentCreateParameters.java\n+++ /dev/null\n\n@@ -1,38 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-// Code generated by Microsoft (R) AutoRest Code Generator.\n-\n-package com.azure.security.keyvault.administration.implementation.models;\n-\n-import com.azure.core.annotation.Fluent;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-/** The RoleAssignmentCreateParameters model. */\n-@Fluent\n-public final class RoleAssignmentCreateParameters {\n-    /*\n-     * Role assignment properties.\n-     */\n-    @JsonProperty(value = \"properties\", required = true)\n-    private RoleAssignmentProperties properties;\n-\n-    /**\n-     * Get the properties property: Role assignment properties.\n-     *\n-     * @return the properties value.\n-     */\n-    public RoleAssignmentProperties getProperties() {\n-        return this.properties;\n-    }\n-\n-    /**\n-     * Set the properties property: Role assignment properties.\n-     *\n-     * @param properties the properties value to set.\n-     * @return the RoleAssignmentCreateParameters object itself.\n-     */\n-    public RoleAssignmentCreateParameters setProperties(RoleAssignmentProperties properties) {\n-        this.properties = properties;\n-        return this;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNDMzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447324338", "bodyText": "This shouldn't be public. For Key Vault, we're not exposing this at this time since it serves no practical value. If we later expose similar APIs for ARM RBAC and other data-plane RBAC, we will within that implementation.", "author": "heaths", "createdAt": "2020-06-29T23:53:48Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentFilter.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** The RoleAssignmentFilter model. */\n+@Fluent\n+public final class RoleAssignmentFilter {", "originalCommit": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTkwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r448671906", "bodyText": "This is auto-generated code and is in an internal package. It is also never used in any public surface APIs.", "author": "vcolin7", "createdAt": "2020-07-01T23:45:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNDMzOA=="}], "type": "inlineReview", "revised_code": {"commit": "563f00de09a4888872e3b0b6341b8bc48ae0f850", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentFilter.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentFilter.java\ndeleted file mode 100644\nindex c04d69f36bd..00000000000\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentFilter.java\n+++ /dev/null\n\n@@ -1,38 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-// Code generated by Microsoft (R) AutoRest Code Generator.\n-\n-package com.azure.security.keyvault.administration.implementation.models;\n-\n-import com.azure.core.annotation.Fluent;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-/** The RoleAssignmentFilter model. */\n-@Fluent\n-public final class RoleAssignmentFilter {\n-    /*\n-     * Returns role assignment of the specific principal.\n-     */\n-    @JsonProperty(value = \"principalId\")\n-    private String principalId;\n-\n-    /**\n-     * Get the principalId property: Returns role assignment of the specific principal.\n-     *\n-     * @return the principalId value.\n-     */\n-    public String getPrincipalId() {\n-        return this.principalId;\n-    }\n-\n-    /**\n-     * Set the principalId property: Returns role assignment of the specific principal.\n-     *\n-     * @param principalId the principalId value to set.\n-     * @return the RoleAssignmentFilter object itself.\n-     */\n-    public RoleAssignmentFilter setPrincipalId(String principalId) {\n-        this.principalId = principalId;\n-        return this;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNDU4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447324580", "bodyText": "This shouldn't be public. Just return its this.value from the method that would otherwise deserialize this.", "author": "heaths", "createdAt": "2020-06-29T23:54:34Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentListResult.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.List;\n+\n+/** The RoleAssignmentListResult model. */\n+@Fluent\n+public final class RoleAssignmentListResult {", "originalCommit": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTkyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r448671924", "bodyText": "This is auto-generated code and is in an internal package. It is also only used in auto-generated classes.", "author": "vcolin7", "createdAt": "2020-07-01T23:45:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNDU4MA=="}], "type": "inlineReview", "revised_code": {"commit": "563f00de09a4888872e3b0b6341b8bc48ae0f850", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentListResult.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentListResult.java\ndeleted file mode 100644\nindex 72a6eb8440a..00000000000\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentListResult.java\n+++ /dev/null\n\n@@ -1,65 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-// Code generated by Microsoft (R) AutoRest Code Generator.\n-\n-package com.azure.security.keyvault.administration.implementation.models;\n-\n-import com.azure.core.annotation.Fluent;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.List;\n-\n-/** The RoleAssignmentListResult model. */\n-@Fluent\n-public final class RoleAssignmentListResult {\n-    /*\n-     * Role assignment list.\n-     */\n-    @JsonProperty(value = \"value\")\n-    private List<RoleAssignment> value;\n-\n-    /*\n-     * The URL to use for getting the next set of results.\n-     */\n-    @JsonProperty(value = \"nextLink\")\n-    private String nextLink;\n-\n-    /**\n-     * Get the value property: Role assignment list.\n-     *\n-     * @return the value value.\n-     */\n-    public List<RoleAssignment> getValue() {\n-        return this.value;\n-    }\n-\n-    /**\n-     * Set the value property: Role assignment list.\n-     *\n-     * @param value the value value to set.\n-     * @return the RoleAssignmentListResult object itself.\n-     */\n-    public RoleAssignmentListResult setValue(List<RoleAssignment> value) {\n-        this.value = value;\n-        return this;\n-    }\n-\n-    /**\n-     * Get the nextLink property: The URL to use for getting the next set of results.\n-     *\n-     * @return the nextLink value.\n-     */\n-    public String getNextLink() {\n-        return this.nextLink;\n-    }\n-\n-    /**\n-     * Set the nextLink property: The URL to use for getting the next set of results.\n-     *\n-     * @param nextLink the nextLink value to set.\n-     * @return the RoleAssignmentListResult object itself.\n-     */\n-    public RoleAssignmentListResult setNextLink(String nextLink) {\n-        this.nextLink = nextLink;\n-        return this;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNTQwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447325407", "bodyText": "I just noticed this, but this should be in ...administration.models, and classes in ...administration.", "author": "heaths", "createdAt": "2020-06-29T23:57:16Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentProperties.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;", "originalCommit": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MjA3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r448672070", "bodyText": "Do you mean the header that includes the auto-generated part? If so, it is only included in auto-generated classes. If you mean the license, I'll make sure to add it in all of our code.", "author": "vcolin7", "createdAt": "2020-07-01T23:46:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNTQwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM2Nzk4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r478367984", "bodyText": "Nevermind. I re-read this and noticed you mean the class itself. You are correct about where to put models and other classes. Auto-generated classes should go in administration.implementation though.", "author": "vcolin7", "createdAt": "2020-08-27T12:07:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNTQwNw=="}], "type": "inlineReview", "revised_code": {"commit": "563f00de09a4888872e3b0b6341b8bc48ae0f850", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentProperties.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentProperties.java\ndeleted file mode 100644\nindex 0ab892817a1..00000000000\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentProperties.java\n+++ /dev/null\n\n@@ -1,68 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-// Code generated by Microsoft (R) AutoRest Code Generator.\n-\n-package com.azure.security.keyvault.administration.implementation.models;\n-\n-import com.azure.core.annotation.Fluent;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-/** The RoleAssignmentProperties model. */\n-@Fluent\n-public final class RoleAssignmentProperties {\n-    /*\n-     * The role definition ID used in the role assignment.\n-     */\n-    @JsonProperty(value = \"roleDefinitionId\", required = true)\n-    private String roleDefinitionId;\n-\n-    /*\n-     * The principal ID assigned to the role. This maps to the ID inside the\n-     * Active Directory. It can point to a user, service principal, or security\n-     * group.\n-     */\n-    @JsonProperty(value = \"principalId\", required = true)\n-    private String principalId;\n-\n-    /**\n-     * Get the roleDefinitionId property: The role definition ID used in the role assignment.\n-     *\n-     * @return the roleDefinitionId value.\n-     */\n-    public String getRoleDefinitionId() {\n-        return this.roleDefinitionId;\n-    }\n-\n-    /**\n-     * Set the roleDefinitionId property: The role definition ID used in the role assignment.\n-     *\n-     * @param roleDefinitionId the roleDefinitionId value to set.\n-     * @return the RoleAssignmentProperties object itself.\n-     */\n-    public RoleAssignmentProperties setRoleDefinitionId(String roleDefinitionId) {\n-        this.roleDefinitionId = roleDefinitionId;\n-        return this;\n-    }\n-\n-    /**\n-     * Get the principalId property: The principal ID assigned to the role. This maps to the ID inside the Active\n-     * Directory. It can point to a user, service principal, or security group.\n-     *\n-     * @return the principalId value.\n-     */\n-    public String getPrincipalId() {\n-        return this.principalId;\n-    }\n-\n-    /**\n-     * Set the principalId property: The principal ID assigned to the role. This maps to the ID inside the Active\n-     * Directory. It can point to a user, service principal, or security group.\n-     *\n-     * @param principalId the principalId value to set.\n-     * @return the RoleAssignmentProperties object itself.\n-     */\n-    public RoleAssignmentProperties setPrincipalId(String principalId) {\n-        this.principalId = principalId;\n-        return this;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNTc1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447325750", "bodyText": "As both properties in this model are required, they should be in the constructor.", "author": "heaths", "createdAt": "2020-06-29T23:57:50Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentProperties.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** The RoleAssignmentProperties model. */\n+@Fluent\n+public final class RoleAssignmentProperties {\n+    /*\n+     * The role definition ID used in the role assignment.\n+     */\n+    @JsonProperty(value = \"roleDefinitionId\", required = true)\n+    private String roleDefinitionId;\n+\n+    /*\n+     * The principal ID assigned to the role. This maps to the ID inside the\n+     * Active Directory. It can point to a user, service principal, or security\n+     * group.\n+     */\n+    @JsonProperty(value = \"principalId\", required = true)\n+    private String principalId;\n+\n+    /**\n+     * Get the roleDefinitionId property: The role definition ID used in the role assignment.\n+     *\n+     * @return the roleDefinitionId value.\n+     */\n+    public String getRoleDefinitionId() {\n+        return this.roleDefinitionId;\n+    }\n+\n+    /**\n+     * Set the roleDefinitionId property: The role definition ID used in the role assignment.\n+     *\n+     * @param roleDefinitionId the roleDefinitionId value to set.\n+     * @return the RoleAssignmentProperties object itself.\n+     */\n+    public RoleAssignmentProperties setRoleDefinitionId(String roleDefinitionId) {", "originalCommit": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3Mjg2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r448672864", "bodyText": "I agree, since this is auto-generated code, we could either add a custom directive to modify the output or add a custom model that implements what you mention and then use RoleAssignmentProperties internally to send the request. What do you think?", "author": "vcolin7", "createdAt": "2020-07-01T23:48:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNTc1MA=="}], "type": "inlineReview", "revised_code": {"commit": "563f00de09a4888872e3b0b6341b8bc48ae0f850", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentProperties.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentProperties.java\ndeleted file mode 100644\nindex 0ab892817a1..00000000000\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentProperties.java\n+++ /dev/null\n\n@@ -1,68 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-// Code generated by Microsoft (R) AutoRest Code Generator.\n-\n-package com.azure.security.keyvault.administration.implementation.models;\n-\n-import com.azure.core.annotation.Fluent;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-/** The RoleAssignmentProperties model. */\n-@Fluent\n-public final class RoleAssignmentProperties {\n-    /*\n-     * The role definition ID used in the role assignment.\n-     */\n-    @JsonProperty(value = \"roleDefinitionId\", required = true)\n-    private String roleDefinitionId;\n-\n-    /*\n-     * The principal ID assigned to the role. This maps to the ID inside the\n-     * Active Directory. It can point to a user, service principal, or security\n-     * group.\n-     */\n-    @JsonProperty(value = \"principalId\", required = true)\n-    private String principalId;\n-\n-    /**\n-     * Get the roleDefinitionId property: The role definition ID used in the role assignment.\n-     *\n-     * @return the roleDefinitionId value.\n-     */\n-    public String getRoleDefinitionId() {\n-        return this.roleDefinitionId;\n-    }\n-\n-    /**\n-     * Set the roleDefinitionId property: The role definition ID used in the role assignment.\n-     *\n-     * @param roleDefinitionId the roleDefinitionId value to set.\n-     * @return the RoleAssignmentProperties object itself.\n-     */\n-    public RoleAssignmentProperties setRoleDefinitionId(String roleDefinitionId) {\n-        this.roleDefinitionId = roleDefinitionId;\n-        return this;\n-    }\n-\n-    /**\n-     * Get the principalId property: The principal ID assigned to the role. This maps to the ID inside the Active\n-     * Directory. It can point to a user, service principal, or security group.\n-     *\n-     * @return the principalId value.\n-     */\n-    public String getPrincipalId() {\n-        return this.principalId;\n-    }\n-\n-    /**\n-     * Set the principalId property: The principal ID assigned to the role. This maps to the ID inside the Active\n-     * Directory. It can point to a user, service principal, or security group.\n-     *\n-     * @param principalId the principalId value to set.\n-     * @return the RoleAssignmentProperties object itself.\n-     */\n-    public RoleAssignmentProperties setPrincipalId(String principalId) {\n-        this.principalId = principalId;\n-        return this;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNTk2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447325962", "bodyText": "All 3 properties are required and should be settable in the constructor only.", "author": "heaths", "createdAt": "2020-06-29T23:58:34Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentPropertiesWithScope.java", "diffHunk": "@@ -0,0 +1,90 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** The RoleAssignmentPropertiesWithScope model. */\n+@Fluent\n+public final class RoleAssignmentPropertiesWithScope {\n+    /*\n+     * The role assignment scope.\n+     */\n+    @JsonProperty(value = \"scope\")\n+    private String scope;\n+\n+    /*\n+     * The role definition ID.\n+     */\n+    @JsonProperty(value = \"roleDefinitionId\")\n+    private String roleDefinitionId;\n+\n+    /*\n+     * The principal ID.\n+     */\n+    @JsonProperty(value = \"principalId\")\n+    private String principalId;\n+\n+    /**\n+     * Get the scope property: The role assignment scope.\n+     *\n+     * @return the scope value.\n+     */\n+    public String getScope() {\n+        return this.scope;\n+    }\n+\n+    /**\n+     * Set the scope property: The role assignment scope.\n+     *\n+     * @param scope the scope value to set.\n+     * @return the RoleAssignmentPropertiesWithScope object itself.\n+     */\n+    public RoleAssignmentPropertiesWithScope setScope(String scope) {", "originalCommit": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3NDA0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r448674041", "bodyText": "Please refer to my answer above for RoleAssignmentProperties.", "author": "vcolin7", "createdAt": "2020-07-01T23:52:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNTk2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "563f00de09a4888872e3b0b6341b8bc48ae0f850", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentPropertiesWithScope.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentPropertiesWithScope.java\ndeleted file mode 100644\nindex ff50c91dc2a..00000000000\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleAssignmentPropertiesWithScope.java\n+++ /dev/null\n\n@@ -1,90 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-// Code generated by Microsoft (R) AutoRest Code Generator.\n-\n-package com.azure.security.keyvault.administration.implementation.models;\n-\n-import com.azure.core.annotation.Fluent;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-/** The RoleAssignmentPropertiesWithScope model. */\n-@Fluent\n-public final class RoleAssignmentPropertiesWithScope {\n-    /*\n-     * The role assignment scope.\n-     */\n-    @JsonProperty(value = \"scope\")\n-    private String scope;\n-\n-    /*\n-     * The role definition ID.\n-     */\n-    @JsonProperty(value = \"roleDefinitionId\")\n-    private String roleDefinitionId;\n-\n-    /*\n-     * The principal ID.\n-     */\n-    @JsonProperty(value = \"principalId\")\n-    private String principalId;\n-\n-    /**\n-     * Get the scope property: The role assignment scope.\n-     *\n-     * @return the scope value.\n-     */\n-    public String getScope() {\n-        return this.scope;\n-    }\n-\n-    /**\n-     * Set the scope property: The role assignment scope.\n-     *\n-     * @param scope the scope value to set.\n-     * @return the RoleAssignmentPropertiesWithScope object itself.\n-     */\n-    public RoleAssignmentPropertiesWithScope setScope(String scope) {\n-        this.scope = scope;\n-        return this;\n-    }\n-\n-    /**\n-     * Get the roleDefinitionId property: The role definition ID.\n-     *\n-     * @return the roleDefinitionId value.\n-     */\n-    public String getRoleDefinitionId() {\n-        return this.roleDefinitionId;\n-    }\n-\n-    /**\n-     * Set the roleDefinitionId property: The role definition ID.\n-     *\n-     * @param roleDefinitionId the roleDefinitionId value to set.\n-     * @return the RoleAssignmentPropertiesWithScope object itself.\n-     */\n-    public RoleAssignmentPropertiesWithScope setRoleDefinitionId(String roleDefinitionId) {\n-        this.roleDefinitionId = roleDefinitionId;\n-        return this;\n-    }\n-\n-    /**\n-     * Get the principalId property: The principal ID.\n-     *\n-     * @return the principalId value.\n-     */\n-    public String getPrincipalId() {\n-        return this.principalId;\n-    }\n-\n-    /**\n-     * Set the principalId property: The principal ID.\n-     *\n-     * @param principalId the principalId value to set.\n-     * @return the RoleAssignmentPropertiesWithScope object itself.\n-     */\n-    public RoleAssignmentPropertiesWithScope setPrincipalId(String principalId) {\n-        this.principalId = principalId;\n-        return this;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNjI2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447326260", "bodyText": "This model should be read-only. It cannot be modified or created by the user for Key Vault.", "author": "heaths", "createdAt": "2020-06-29T23:59:28Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleDefinition.java", "diffHunk": "@@ -0,0 +1,190 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.azure.core.annotation.JsonFlatten;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.List;\n+\n+/** The RoleDefinition model. */\n+@JsonFlatten\n+@Fluent\n+public class RoleDefinition {\n+    /*\n+     * The role definition ID.\n+     */\n+    @JsonProperty(value = \"id\", access = JsonProperty.Access.WRITE_ONLY)\n+    private String id;\n+\n+    /*\n+     * The role definition name.\n+     */\n+    @JsonProperty(value = \"name\", access = JsonProperty.Access.WRITE_ONLY)\n+    private String name;\n+\n+    /*\n+     * The role definition type.\n+     */\n+    @JsonProperty(value = \"type\", access = JsonProperty.Access.WRITE_ONLY)\n+    private String type;\n+\n+    /*\n+     * The role name.\n+     */\n+    @JsonProperty(value = \"properties.roleName\")\n+    private String roleName;\n+\n+    /*\n+     * The role definition description.\n+     */\n+    @JsonProperty(value = \"properties.description\")\n+    private String description;\n+\n+    /*\n+     * The role type.\n+     */\n+    @JsonProperty(value = \"properties.type\")\n+    private String roleType;\n+\n+    /*\n+     * Role definition permissions.\n+     */\n+    @JsonProperty(value = \"properties.permissions\")\n+    private List<Permission> permissions;\n+\n+    /*\n+     * Role definition assignable scopes.\n+     */\n+    @JsonProperty(value = \"properties.assignableScopes\")\n+    private List<String> assignableScopes;\n+\n+    /**\n+     * Get the id property: The role definition ID.\n+     *\n+     * @return the id value.\n+     */\n+    public String getId() {\n+        return this.id;\n+    }\n+\n+    /**\n+     * Get the name property: The role definition name.\n+     *\n+     * @return the name value.\n+     */\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    /**\n+     * Get the type property: The role definition type.\n+     *\n+     * @return the type value.\n+     */\n+    public String getType() {\n+        return this.type;\n+    }\n+\n+    /**\n+     * Get the roleName property: The role name.\n+     *\n+     * @return the roleName value.\n+     */\n+    public String getRoleName() {\n+        return this.roleName;\n+    }\n+\n+    /**\n+     * Set the roleName property: The role name.\n+     *\n+     * @param roleName the roleName value to set.\n+     * @return the RoleDefinition object itself.\n+     */\n+    public RoleDefinition setRoleName(String roleName) {", "originalCommit": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3NDE1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r448674151", "bodyText": "This is auto-generated code and is in an internal package.", "author": "vcolin7", "createdAt": "2020-07-01T23:53:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNjI2MA=="}], "type": "inlineReview", "revised_code": {"commit": "563f00de09a4888872e3b0b6341b8bc48ae0f850", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleDefinition.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleDefinition.java\ndeleted file mode 100644\nindex 5383e4acbb8..00000000000\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleDefinition.java\n+++ /dev/null\n\n@@ -1,190 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-// Code generated by Microsoft (R) AutoRest Code Generator.\n-\n-package com.azure.security.keyvault.administration.implementation.models;\n-\n-import com.azure.core.annotation.Fluent;\n-import com.azure.core.annotation.JsonFlatten;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.List;\n-\n-/** The RoleDefinition model. */\n-@JsonFlatten\n-@Fluent\n-public class RoleDefinition {\n-    /*\n-     * The role definition ID.\n-     */\n-    @JsonProperty(value = \"id\", access = JsonProperty.Access.WRITE_ONLY)\n-    private String id;\n-\n-    /*\n-     * The role definition name.\n-     */\n-    @JsonProperty(value = \"name\", access = JsonProperty.Access.WRITE_ONLY)\n-    private String name;\n-\n-    /*\n-     * The role definition type.\n-     */\n-    @JsonProperty(value = \"type\", access = JsonProperty.Access.WRITE_ONLY)\n-    private String type;\n-\n-    /*\n-     * The role name.\n-     */\n-    @JsonProperty(value = \"properties.roleName\")\n-    private String roleName;\n-\n-    /*\n-     * The role definition description.\n-     */\n-    @JsonProperty(value = \"properties.description\")\n-    private String description;\n-\n-    /*\n-     * The role type.\n-     */\n-    @JsonProperty(value = \"properties.type\")\n-    private String roleType;\n-\n-    /*\n-     * Role definition permissions.\n-     */\n-    @JsonProperty(value = \"properties.permissions\")\n-    private List<Permission> permissions;\n-\n-    /*\n-     * Role definition assignable scopes.\n-     */\n-    @JsonProperty(value = \"properties.assignableScopes\")\n-    private List<String> assignableScopes;\n-\n-    /**\n-     * Get the id property: The role definition ID.\n-     *\n-     * @return the id value.\n-     */\n-    public String getId() {\n-        return this.id;\n-    }\n-\n-    /**\n-     * Get the name property: The role definition name.\n-     *\n-     * @return the name value.\n-     */\n-    public String getName() {\n-        return this.name;\n-    }\n-\n-    /**\n-     * Get the type property: The role definition type.\n-     *\n-     * @return the type value.\n-     */\n-    public String getType() {\n-        return this.type;\n-    }\n-\n-    /**\n-     * Get the roleName property: The role name.\n-     *\n-     * @return the roleName value.\n-     */\n-    public String getRoleName() {\n-        return this.roleName;\n-    }\n-\n-    /**\n-     * Set the roleName property: The role name.\n-     *\n-     * @param roleName the roleName value to set.\n-     * @return the RoleDefinition object itself.\n-     */\n-    public RoleDefinition setRoleName(String roleName) {\n-        this.roleName = roleName;\n-        return this;\n-    }\n-\n-    /**\n-     * Get the description property: The role definition description.\n-     *\n-     * @return the description value.\n-     */\n-    public String getDescription() {\n-        return this.description;\n-    }\n-\n-    /**\n-     * Set the description property: The role definition description.\n-     *\n-     * @param description the description value to set.\n-     * @return the RoleDefinition object itself.\n-     */\n-    public RoleDefinition setDescription(String description) {\n-        this.description = description;\n-        return this;\n-    }\n-\n-    /**\n-     * Get the roleType property: The role type.\n-     *\n-     * @return the roleType value.\n-     */\n-    public String getRoleType() {\n-        return this.roleType;\n-    }\n-\n-    /**\n-     * Set the roleType property: The role type.\n-     *\n-     * @param roleType the roleType value to set.\n-     * @return the RoleDefinition object itself.\n-     */\n-    public RoleDefinition setRoleType(String roleType) {\n-        this.roleType = roleType;\n-        return this;\n-    }\n-\n-    /**\n-     * Get the permissions property: Role definition permissions.\n-     *\n-     * @return the permissions value.\n-     */\n-    public List<Permission> getPermissions() {\n-        return this.permissions;\n-    }\n-\n-    /**\n-     * Set the permissions property: Role definition permissions.\n-     *\n-     * @param permissions the permissions value to set.\n-     * @return the RoleDefinition object itself.\n-     */\n-    public RoleDefinition setPermissions(List<Permission> permissions) {\n-        this.permissions = permissions;\n-        return this;\n-    }\n-\n-    /**\n-     * Get the assignableScopes property: Role definition assignable scopes.\n-     *\n-     * @return the assignableScopes value.\n-     */\n-    public List<String> getAssignableScopes() {\n-        return this.assignableScopes;\n-    }\n-\n-    /**\n-     * Set the assignableScopes property: Role definition assignable scopes.\n-     *\n-     * @param assignableScopes the assignableScopes value to set.\n-     * @return the RoleDefinition object itself.\n-     */\n-    public RoleDefinition setAssignableScopes(List<String> assignableScopes) {\n-        this.assignableScopes = assignableScopes;\n-        return this;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNjQ1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447326459", "bodyText": "This should not be public. See my comments on the other \"*Filter\" class for details.", "author": "heaths", "createdAt": "2020-06-30T00:00:00Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleDefinitionFilter.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** The RoleDefinitionFilter model. */\n+@Fluent\n+public final class RoleDefinitionFilter {", "originalCommit": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3NDIzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r448674230", "bodyText": "This is auto-generated code and is in an internal package. It is also never used in any public surface APIs.", "author": "vcolin7", "createdAt": "2020-07-01T23:53:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNjQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "563f00de09a4888872e3b0b6341b8bc48ae0f850", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleDefinitionFilter.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleDefinitionFilter.java\ndeleted file mode 100644\nindex ce01792ed37..00000000000\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleDefinitionFilter.java\n+++ /dev/null\n\n@@ -1,38 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-// Code generated by Microsoft (R) AutoRest Code Generator.\n-\n-package com.azure.security.keyvault.administration.implementation.models;\n-\n-import com.azure.core.annotation.Fluent;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-/** The RoleDefinitionFilter model. */\n-@Fluent\n-public final class RoleDefinitionFilter {\n-    /*\n-     * Returns role definition with the specific name.\n-     */\n-    @JsonProperty(value = \"roleName\")\n-    private String roleName;\n-\n-    /**\n-     * Get the roleName property: Returns role definition with the specific name.\n-     *\n-     * @return the roleName value.\n-     */\n-    public String getRoleName() {\n-        return this.roleName;\n-    }\n-\n-    /**\n-     * Set the roleName property: Returns role definition with the specific name.\n-     *\n-     * @param roleName the roleName value to set.\n-     * @return the RoleDefinitionFilter object itself.\n-     */\n-    public RoleDefinitionFilter setRoleName(String roleName) {\n-        this.roleName = roleName;\n-        return this;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNjU4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447326584", "bodyText": "This should not be public. See my comments on the other \"*ListResult\" class for details.", "author": "heaths", "createdAt": "2020-06-30T00:00:22Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleDefinitionListResult.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.security.keyvault.administration.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.List;\n+\n+/** The RoleDefinitionListResult model. */\n+@Fluent\n+public final class RoleDefinitionListResult {", "originalCommit": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3NDI2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r448674269", "bodyText": "This is auto-generated code and is in an internal package.", "author": "vcolin7", "createdAt": "2020-07-01T23:53:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNjU4NA=="}], "type": "inlineReview", "revised_code": {"commit": "563f00de09a4888872e3b0b6341b8bc48ae0f850", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleDefinitionListResult.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleDefinitionListResult.java\ndeleted file mode 100644\nindex fa52f012f15..00000000000\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/RoleDefinitionListResult.java\n+++ /dev/null\n\n@@ -1,65 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-// Code generated by Microsoft (R) AutoRest Code Generator.\n-\n-package com.azure.security.keyvault.administration.implementation.models;\n-\n-import com.azure.core.annotation.Fluent;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.List;\n-\n-/** The RoleDefinitionListResult model. */\n-@Fluent\n-public final class RoleDefinitionListResult {\n-    /*\n-     * Role definition list.\n-     */\n-    @JsonProperty(value = \"value\")\n-    private List<RoleDefinition> value;\n-\n-    /*\n-     * The URL to use for getting the next set of results.\n-     */\n-    @JsonProperty(value = \"nextLink\")\n-    private String nextLink;\n-\n-    /**\n-     * Get the value property: Role definition list.\n-     *\n-     * @return the value value.\n-     */\n-    public List<RoleDefinition> getValue() {\n-        return this.value;\n-    }\n-\n-    /**\n-     * Set the value property: Role definition list.\n-     *\n-     * @param value the value value to set.\n-     * @return the RoleDefinitionListResult object itself.\n-     */\n-    public RoleDefinitionListResult setValue(List<RoleDefinition> value) {\n-        this.value = value;\n-        return this;\n-    }\n-\n-    /**\n-     * Get the nextLink property: The URL to use for getting the next set of results.\n-     *\n-     * @return the nextLink value.\n-     */\n-    public String getNextLink() {\n-        return this.nextLink;\n-    }\n-\n-    /**\n-     * Set the nextLink property: The URL to use for getting the next set of results.\n-     *\n-     * @param nextLink the nextLink value to set.\n-     * @return the RoleDefinitionListResult object itself.\n-     */\n-    public RoleDefinitionListResult setNextLink(String nextLink) {\n-        this.nextLink = nextLink;\n-        return this;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNjc3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447326774", "bodyText": "There shouldn't be an \"implementation\" in there, should there?", "author": "heaths", "createdAt": "2020-06-30T00:00:50Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/models/package-info.java", "diffHunk": "@@ -0,0 +1,9 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+/**\n+ * Package containing the data models for KeyVaultAccessControlClient. The key vault client performs cryptographic key\n+ * operations and vault operations against the Key Vault service.\n+ */\n+package com.azure.security.keyvault.administration.implementation.models;", "originalCommit": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3NDUwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r448674507", "bodyText": "This was auto-generated. It looks ok to me.", "author": "vcolin7", "createdAt": "2020-07-01T23:54:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNjc3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MDQyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r478370424", "bodyText": "Files such as this are useful in Java for adding documentation on the package level. Also, it can contain annotations that apply to all classes in the package.", "author": "vcolin7", "createdAt": "2020-08-27T12:11:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNjc3NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNjgzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447326837", "bodyText": "There shouldn't be an \"implementation\" in there, should there?", "author": "heaths", "createdAt": "2020-06-30T00:01:01Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/implementation/package-info.java", "diffHunk": "@@ -0,0 +1,9 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+/**\n+ * Package containing the implementations and inner classes for KeyVaultAccessControlClient. The key vault client\n+ * performs cryptographic key operations and vault operations against the Key Vault service.\n+ */\n+package com.azure.security.keyvault.administration.implementation;", "originalCommit": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3NDUyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r448674528", "bodyText": "This was auto-generated. It looks ok to me.", "author": "vcolin7", "createdAt": "2020-07-01T23:54:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNjgzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3MTA0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r478371040", "bodyText": "This file is for the implementation package, thus this is expected.", "author": "vcolin7", "createdAt": "2020-08-27T12:12:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNjgzNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNzA1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r447327054", "bodyText": "Should be RoleAssignmentScope.", "author": "heaths", "createdAt": "2020-06-30T00:01:34Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/models/RoleScope.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package com.azure.security.keyvault.administration.models;\n+\n+import com.azure.core.util.ExpandableStringEnum;\n+\n+import java.net.URI;\n+\n+public final class RoleScope extends ExpandableStringEnum<RoleScope> {", "originalCommit": "d69de48129a53cfa92c7a38f05bf089e5ef231c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3NTAwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r448675009", "bodyText": "Please refer to my other comment on RoleScope.", "author": "vcolin7", "createdAt": "2020-07-01T23:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNzA1NA=="}], "type": "inlineReview", "revised_code": {"commit": "346b768f18d9d887ef686c78cc7f0dcdb24cd944", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/models/RoleScope.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/models/RoleScope.java\nindex f430c63fa82..5cef6c2ed1b 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/models/RoleScope.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/models/RoleScope.java\n\n@@ -1,3 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n package com.azure.security.keyvault.administration.models;\n \n import com.azure.core.util.ExpandableStringEnum;\n"}}, {"oid": "d966d810af554de953ff29560ea477421f9798c4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d966d810af554de953ff29560ea477421f9798c4", "message": "Merge remote-tracking branch 'upstream/master' into users/vicolina/keyvault-rbac\n\n# Conflicts:\n#\teng/versioning/version_client.txt", "committedDate": "2020-08-27T10:02:54Z", "type": "commit"}, {"oid": "346b768f18d9d887ef686c78cc7f0dcdb24cd944", "url": "https://github.com/Azure/azure-sdk-for-java/commit/346b768f18d9d887ef686c78cc7f0dcdb24cd944", "message": "Addressed more PR feedback.", "committedDate": "2020-08-27T10:05:08Z", "type": "commit"}, {"oid": "346b768f18d9d887ef686c78cc7f0dcdb24cd944", "url": "https://github.com/Azure/azure-sdk-for-java/commit/346b768f18d9d887ef686c78cc7f0dcdb24cd944", "message": "Addressed more PR feedback.", "committedDate": "2020-08-27T10:05:08Z", "type": "forcePushed"}, {"oid": "32084ad544aeff4626ce8a62a157334b6db7897d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/32084ad544aeff4626ce8a62a157334b6db7897d", "message": "Added the new Key Vault Administration library to eng/jacoco-test-coverage/pom.xml", "committedDate": "2020-08-27T10:06:08Z", "type": "commit"}, {"oid": "14266a098b6b7cf6684ed8dd7fa9f70ea4764f87", "url": "https://github.com/Azure/azure-sdk-for-java/commit/14266a098b6b7cf6684ed8dd7fa9f70ea4764f87", "message": "Re-generated code from the Swagger specification.", "committedDate": "2020-08-27T10:25:28Z", "type": "commit"}, {"oid": "563f00de09a4888872e3b0b6341b8bc48ae0f850", "url": "https://github.com/Azure/azure-sdk-for-java/commit/563f00de09a4888872e3b0b6341b8bc48ae0f850", "message": "Renamed many of the implementation models.", "committedDate": "2020-08-28T19:48:21Z", "type": "commit"}, {"oid": "c6915b21182175696faea7a6dd7238df325f59c7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c6915b21182175696faea7a6dd7238df325f59c7", "message": "Added additional null checks for members in public methods that accept KeyVaultRoleAssignmentProperties.", "committedDate": "2020-08-28T20:01:25Z", "type": "commit"}, {"oid": "37b6be0fd19fb9de56c326d93e69d22fa7d68b23", "url": "https://github.com/Azure/azure-sdk-for-java/commit/37b6be0fd19fb9de56c326d93e69d22fa7d68b23", "message": "Added a module-info file.", "committedDate": "2020-08-28T21:19:56Z", "type": "commit"}, {"oid": "ea4a103e1fa2e378b72772b1cad8512c8ec61b75", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ea4a103e1fa2e378b72772b1cad8512c8ec61b75", "message": "Made small formatting corrections.", "committedDate": "2020-08-29T00:20:48Z", "type": "commit"}, {"oid": "19ed63bca34c36ec73bd3d846e185d7af49810ba", "url": "https://github.com/Azure/azure-sdk-for-java/commit/19ed63bca34c36ec73bd3d846e185d7af49810ba", "message": "Removed an entry from module-info.java. Modified how KeyVaultAccessControlAsyncClient get error messages for parameter validation.", "committedDate": "2020-08-29T00:34:23Z", "type": "commit"}, {"oid": "5e5389269da35262ed36b43a7dcf9418b4741a4f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5e5389269da35262ed36b43a7dcf9418b4741a4f", "message": "Added missing package-info.java files.", "committedDate": "2020-08-29T00:48:29Z", "type": "commit"}, {"oid": "e57a0fe827d2a0ba2978779adade3842d8807bb9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e57a0fe827d2a0ba2978779adade3842d8807bb9", "message": "Corrected errors highlighted by APIView.", "committedDate": "2020-08-29T01:25:17Z", "type": "commit"}, {"oid": "427ffdcac08e3ac2ba72c7abac3f6305fa9ff6a3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/427ffdcac08e3ac2ba72c7abac3f6305fa9ff6a3", "message": "Reverted implementation classes to their original names and hid them from public API signatures. Added convenience layer models to be exposed as public API.", "committedDate": "2020-09-01T03:34:26Z", "type": "commit"}, {"oid": "0d75b43e84ca148f8c82948d758cfdbbdf405bd3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0d75b43e84ca148f8c82948d758cfdbbdf405bd3", "message": "Renamed KeyVaultRoleScope to KeyVaultRoleAssignmentScope.", "committedDate": "2020-09-01T03:41:11Z", "type": "commit"}, {"oid": "0e42b1a82d904df89f45a3fba62584025c16b54a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0e42b1a82d904df89f45a3fba62584025c16b54a", "message": "Fixed build issues.", "committedDate": "2020-09-01T18:30:22Z", "type": "commit"}, {"oid": "b3dcfc7c6ad9325526ff0e68970a15a77b60d4d4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b3dcfc7c6ad9325526ff0e68970a15a77b60d4d4", "message": "Made model classes final.", "committedDate": "2020-09-01T18:32:03Z", "type": "commit"}, {"oid": "4546a8c54e8c36c6e9616a079e609227bcf94b1c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4546a8c54e8c36c6e9616a079e609227bcf94b1c", "message": "Updated module-info.java", "committedDate": "2020-09-01T18:43:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2OTQ1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r481469453", "bodyText": "Should be roleScope, but don't let it hold up the PR. We can unify on parameter names and such in a subsequent preview.", "author": "heaths", "createdAt": "2020-09-01T22:34:43Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -75,401 +85,552 @@ public String getVaultUrl() {\n     }\n \n     /**\n-     * Get all {@link RoleDefinition role definitions} that are applicable at the given {@link RoleScope\n-     * scope} and above.\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope scope} and above.\n      *\n-     * @param scope The {@link RoleScope scope} of the {@link RoleDefinition role definitions}.\n-     * @return A {@link PagedFlux} containing the {@link RoleDefinition role definitions} for the given\n-     * {@link RoleScope scope}.\n-     * @throws KeyVaultErrorException if the operation is unsuccessful.\n-     * @throws NullPointerException   if the {@link RoleScope scope} is {@code null}.\n+     * @param scope The {@link KeyVaultRoleAssignmentScope scope} of the {@link KeyVaultRoleDefinition role definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope scope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope scope} is {@code null}.\n      */\n-    @ServiceMethod(returns = ReturnType.SINGLE)\n-    public PagedFlux<RoleDefinition> listRoleDefinitions(RoleScope scope) {\n-        try {\n-            return new PagedFlux<>(\n-                () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, scope, context)),\n-                continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n-        } catch (RuntimeException e) {\n-            return new PagedFlux<>(() -> monoError(logger, e));\n-        }\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope scope) {", "originalCommit": "4546a8c54e8c36c6e9616a079e609227bcf94b1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTcyNzQzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r481727434", "bodyText": "I can change it to roleScope :)", "author": "vcolin7", "createdAt": "2020-09-02T05:33:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2OTQ1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "cbc29236ea2027deec8f7f87cc8273a014d2a4b6", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\nindex c183e89d93b..57331939be5 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n\n@@ -86,63 +86,64 @@ public final class KeyVaultAccessControlAsyncClient {\n \n     /**\n      * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n-     * {@link KeyVaultRoleAssignmentScope scope} and above.\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n      *\n-     * @param scope The {@link KeyVaultRoleAssignmentScope scope} of the {@link KeyVaultRoleDefinition role definitions}.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n      * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n-     * {@link KeyVaultRoleAssignmentScope scope}.\n-     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope scope} is {@code null}.\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n      */\n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope scope) {\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n         return new PagedFlux<>(\n-            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, scope, context)),\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n             continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n     }\n \n     /**\n      * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n-     * {@link KeyVaultRoleAssignmentScope scope} and above.\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n      *\n-     * @param scope   The {@link KeyVaultRoleAssignmentScope scope} of the {@link KeyVaultRoleDefinition role\n-     * definitions}.\n-     * @param context Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @param context   Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n      * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n-     * {@link KeyVaultRoleAssignmentScope scope}.\n-     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope scope} is {@code null}.\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n      */\n-    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope scope, Context context) {\n+    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope, Context context) {\n         return new PagedFlux<>(\n-            () -> listRoleDefinitionsFirstPage(vaultUrl, scope, context),\n+            () -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context),\n             continuationToken -> listRoleDefinitionsNextPage(continuationToken, context));\n     }\n \n     /**\n      * Get all {@link KeyVaultRoleDefinition role definitions} in the first page that are applicable at the given\n-     * {@link KeyVaultRoleAssignmentScope scope} and above.\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n      *\n-     * @param vaultUrl The URL for the Key Vault this client is associated with.\n-     * @param scope    The {@link KeyVaultRoleAssignmentScope scope} of the {@link KeyVaultRoleDefinition}.\n-     * @param context  Additional context that is passed through the HTTP pipeline during the service call.\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n      * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n-     * for the given {@link KeyVaultRoleAssignmentScope scope} from the first page of results.\n-     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope scope} is {@code null}.\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n      */\n     Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsFirstPage(String vaultUrl,\n-                                                                             KeyVaultRoleAssignmentScope scope,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n                                                                              Context context) {\n-        Objects.requireNonNull(scope,\n+        Objects.requireNonNull(roleScope,\n             String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n-                \"'scope'\"));\n+                \"'roleScope'\"));\n \n         try {\n             return clientImpl.getRoleDefinitions()\n-                .listSinglePageAsync(vaultUrl, scope.toString(), null, context.addData(AZ_TRACING_NAMESPACE_KEY,\n-                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n-                .doOnRequest(ignored -> logger.info(\"Listing role definitions for scope - {}\", scope))\n-                .doOnSuccess(response -> logger.info(\"Listed role definitions for scope - {}\", scope))\n-                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for scope - %s\",\n-                    scope), error))\n+                .listSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role definitions for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role definitions for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for roleScope - %s\",\n+                    roleScope), error))\n                 .map(this::transformRoleDefinitionsPagedResponse);\n         } catch (RuntimeException e) {\n             return monoError(logger, e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3NzYwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r481477601", "bodyText": "Other languages are keeping the \"not\" prefix. You could leave these for beta 1, but we should standardize on naming for beta 2. These sound better, certainly, but I worry about straying too far from what swagger defines for properties (types in swagger don't really have names anyway).\n/cc @christothes @sadasant", "author": "heaths", "createdAt": "2020-09-01T22:58:58Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/models/KeyVaultPermission.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration.models;\n+\n+import java.util.List;\n+\n+/**\n+ * A class describing allowed and denied actions and data actions of a {@link KeyVaultRoleDefinition}.\n+ */\n+public final class KeyVaultPermission {\n+    private List<String> actions;\n+    private List<String> deniedActions;\n+    private List<String> dataActions;\n+    private List<String> deniedDataActions;\n+\n+    /**\n+     * Creates a new {@link KeyVaultPermission} with the specified allowed and denied actions and data actions.\n+     *\n+     * @param actions           The actions this {@link KeyVaultPermission permission} allows.\n+     * @param deniedActions     The actions this {@link KeyVaultPermission permission} denies.\n+     * @param dataActions       The data actions this {@link KeyVaultPermission permission} allows.\n+     * @param deniedDataActions The data actions this {@link KeyVaultPermission permission} denies.\n+     */\n+    public KeyVaultPermission(List<String> actions, List<String> deniedActions, List<String> dataActions,\n+                              List<String> deniedDataActions) {\n+        this.actions = actions;\n+        this.deniedActions = deniedActions;\n+        this.dataActions = dataActions;\n+        this.deniedDataActions = deniedDataActions;\n+    }\n+\n+    /**\n+     * Get the actions this {@link KeyVaultPermission permission} allows.\n+     *\n+     * @return The allowed actions.\n+     */\n+    public List<String> getActions() {\n+        return actions;\n+    }\n+\n+    /**\n+     * Get the actions this {@link KeyVaultPermission permission} denies.\n+     *\n+     * @return The denied actions.\n+     */\n+    public List<String> getDeniedActions() {", "originalCommit": "4546a8c54e8c36c6e9616a079e609227bcf94b1c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ee7459c1104d373ec41c0414bf146fb33bf02dd", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/models/KeyVaultPermission.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/models/KeyVaultPermission.java\nindex 2bf23f09d93..d987cbb0407 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/models/KeyVaultPermission.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/models/KeyVaultPermission.java\n\n@@ -17,13 +17,12 @@ public final class KeyVaultPermission {\n     /**\n      * Creates a new {@link KeyVaultPermission} with the specified allowed and denied actions and data actions.\n      *\n-     * @param actions           The actions this {@link KeyVaultPermission permission} allows.\n-     * @param deniedActions     The actions this {@link KeyVaultPermission permission} denies.\n-     * @param dataActions       The data actions this {@link KeyVaultPermission permission} allows.\n+     * @param actions The actions this {@link KeyVaultPermission permission} allows.\n+     * @param deniedActions The actions this {@link KeyVaultPermission permission} denies.\n+     * @param dataActions The data actions this {@link KeyVaultPermission permission} allows.\n      * @param deniedDataActions The data actions this {@link KeyVaultPermission permission} denies.\n      */\n-    public KeyVaultPermission(List<String> actions, List<String> deniedActions, List<String> dataActions,\n-                              List<String> deniedDataActions) {\n+    public KeyVaultPermission(List<String> actions, List<String> deniedActions, List<String> dataActions, List<String> deniedDataActions) {\n         this.actions = actions;\n         this.deniedActions = deniedActions;\n         this.dataActions = dataActions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3ODIzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r481478236", "bodyText": "These are required parameters for create methods. Are they being passed to those methods directly as well?", "author": "heaths", "createdAt": "2020-09-01T23:00:48Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/models/KeyVaultRoleAssignmentProperties.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration.models;\n+\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A class that defines a role assignment's properties.\n+ */\n+public final class KeyVaultRoleAssignmentProperties {\n+    private String roleDefinitionId;\n+    private String principalId;\n+\n+    /**\n+     * Creates a new {@link KeyVaultRoleAssignmentProperties role assignment properties} object with the specified\n+     * details.\n+     *\n+     * @param roleDefinitionId The {@link KeyVaultRoleDefinition role definition} ID used in the\n+     *                         {@link KeyVaultRoleAssignment role assignment}.\n+     * @param principalId      The principal ID assigned to the role. This maps to the ID inside the Active Directory.\n+     *                         It can point to a user, service principal, or security group.\n+     */\n+    public KeyVaultRoleAssignmentProperties(String roleDefinitionId, String principalId) {", "originalCommit": "4546a8c54e8c36c6e9616a079e609227bcf94b1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTcyMTM0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r481721348", "bodyText": "These parameters are passed directly to the service methods.\nThis Properties object is based on how the service Swagger groups parameters, however, I believe we certainly could change the method signature to take all required values like this:\npublic Mono<KeyVaultRoleAssignment> createRoleAssignment(\n    KeyVaultRoleAssignmentScope roleScope,\n    String roleDefinitionId,\n    String principalId)\nInstead of what we have today:\npublic Mono<KeyVaultRoleAssignment> createRoleAssignment(\n    KeyVaultRoleAssignmentScope scope,\n    KeyVaultRoleAssignmentProperties properties)\nWhat do you think @heaths?", "author": "vcolin7", "createdAt": "2020-09-02T05:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3ODIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5MjMxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r482592317", "bodyText": "I thought we were doing it that way in .NET after a discussion, but I don't see that in source. @christothes and @sadasant, was it a different method we were talking about pulling roleDefinitionId and principalId out of, or was that for the model constructor? I may just be remembering wrong here.", "author": "heaths", "createdAt": "2020-09-02T23:19:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3ODIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYzNzk2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r482637964", "bodyText": "I think we still use a properties bag in .NET, but I like the individual parameter shape better.", "author": "christothes", "createdAt": "2020-09-03T01:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3ODIzNg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "cbc29236ea2027deec8f7f87cc8273a014d2a4b6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cbc29236ea2027deec8f7f87cc8273a014d2a4b6", "message": "Renamed input parameter \"scope\" to \"roleScope\" in a multitude of public APIs. Corrected version number in files inside /eng.", "committedDate": "2020-09-02T05:46:37Z", "type": "commit"}, {"oid": "8a742681ef54ced96ad1e672839b20d56f773b8a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8a742681ef54ced96ad1e672839b20d56f773b8a", "message": "Fixed package-info.java Javadoc.", "committedDate": "2020-09-02T05:59:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEzODA5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483138098", "bodyText": "List all", "author": "g2vinay", "createdAt": "2020-09-03T17:21:25Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given", "originalCommit": "8a742681ef54ced96ad1e672839b20d56f773b8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01e3e7641b80127033b0a2046476b637e549e9c8", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\nindex 57331939be5..ff34ec487dc 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n\n@@ -433,9 +433,9 @@ public final class KeyVaultAccessControlAsyncClient {\n             return clientImpl.getRoleAssignments()\n                 .getWithResponseAsync(vaultUrl, roleScope.toString(), name, context.addData(AZ_TRACING_NAMESPACE_KEY,\n                     KEYVAULT_TRACING_NAMESPACE_VALUE))\n-                .doOnRequest(ignored -> logger.info(\"Creating role assignment - {}\", name))\n-                .doOnSuccess(response -> logger.info(\"Created role assignment - {}\", response.getValue().getName()))\n-                .doOnError(error -> logger.warning(\"Failed to create role assignment - {}\", name, error))\n+                .doOnRequest(ignored -> logger.info(\"Retrieving role assignment - {}\", name))\n+                .doOnSuccess(response -> logger.info(\"Retrieved role assignment - {}\", response.getValue().getName()))\n+                .doOnError(error -> logger.warning(\"Failed to retrieved role assignment - {}\", name, error))\n                 .map(this::transformRoleAssignmentResponse);\n         } catch (RuntimeException e) {\n             return monoError(logger, e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEzODY5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483138698", "bodyText": "List all", "author": "g2vinay", "createdAt": "2020-09-03T17:22:27Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given", "originalCommit": "8a742681ef54ced96ad1e672839b20d56f773b8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01e3e7641b80127033b0a2046476b637e549e9c8", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\nindex 57331939be5..ff34ec487dc 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n\n@@ -433,9 +433,9 @@ public final class KeyVaultAccessControlAsyncClient {\n             return clientImpl.getRoleAssignments()\n                 .getWithResponseAsync(vaultUrl, roleScope.toString(), name, context.addData(AZ_TRACING_NAMESPACE_KEY,\n                     KEYVAULT_TRACING_NAMESPACE_VALUE))\n-                .doOnRequest(ignored -> logger.info(\"Creating role assignment - {}\", name))\n-                .doOnSuccess(response -> logger.info(\"Created role assignment - {}\", response.getValue().getName()))\n-                .doOnError(error -> logger.warning(\"Failed to create role assignment - {}\", name, error))\n+                .doOnRequest(ignored -> logger.info(\"Retrieving role assignment - {}\", name))\n+                .doOnSuccess(response -> logger.info(\"Retrieved role assignment - {}\", response.getValue().getName()))\n+                .doOnError(error -> logger.warning(\"Failed to retrieved role assignment - {}\", name, error))\n                 .map(this::transformRoleAssignmentResponse);\n         } catch (RuntimeException e) {\n             return monoError(logger, e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NDA5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483144091", "bodyText": "List all, everywehre", "author": "g2vinay", "createdAt": "2020-09-03T17:32:05Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @param context   Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleDefinitionsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} in the first page that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role definitions for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role definitions for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleDefinition role definitions} given by the {@code nextPageLink} that was retrieved\n+     * from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleDefinitionsFirstPage(String, KeyVaultRoleAssignmentScope, Context)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleDefinitions} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the next page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role definitions page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role definitions page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role definitions page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given", "originalCommit": "8a742681ef54ced96ad1e672839b20d56f773b8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01e3e7641b80127033b0a2046476b637e549e9c8", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\nindex 57331939be5..ff34ec487dc 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n\n@@ -433,9 +433,9 @@ public final class KeyVaultAccessControlAsyncClient {\n             return clientImpl.getRoleAssignments()\n                 .getWithResponseAsync(vaultUrl, roleScope.toString(), name, context.addData(AZ_TRACING_NAMESPACE_KEY,\n                     KEYVAULT_TRACING_NAMESPACE_VALUE))\n-                .doOnRequest(ignored -> logger.info(\"Creating role assignment - {}\", name))\n-                .doOnSuccess(response -> logger.info(\"Created role assignment - {}\", response.getValue().getName()))\n-                .doOnError(error -> logger.warning(\"Failed to create role assignment - {}\", name, error))\n+                .doOnRequest(ignored -> logger.info(\"Retrieving role assignment - {}\", name))\n+                .doOnSuccess(response -> logger.info(\"Retrieved role assignment - {}\", response.getValue().getName()))\n+                .doOnError(error -> logger.warning(\"Failed to retrieved role assignment - {}\", name, error))\n                 .map(this::transformRoleAssignmentResponse);\n         } catch (RuntimeException e) {\n             return monoError(logger, e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NDg2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483144866", "bodyText": "extra space after context", "author": "g2vinay", "createdAt": "2020-09-03T17:33:44Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @param context   Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleDefinitionsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} in the first page that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role definitions for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role definitions for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleDefinition role definitions} given by the {@code nextPageLink} that was retrieved\n+     * from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleDefinitionsFirstPage(String, KeyVaultRoleAssignmentScope, Context)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleDefinitions} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the next page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role definitions page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role definitions page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role definitions page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleAssignmentsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.", "originalCommit": "8a742681ef54ced96ad1e672839b20d56f773b8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01e3e7641b80127033b0a2046476b637e549e9c8", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\nindex 57331939be5..ff34ec487dc 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n\n@@ -433,9 +433,9 @@ public final class KeyVaultAccessControlAsyncClient {\n             return clientImpl.getRoleAssignments()\n                 .getWithResponseAsync(vaultUrl, roleScope.toString(), name, context.addData(AZ_TRACING_NAMESPACE_KEY,\n                     KEYVAULT_TRACING_NAMESPACE_VALUE))\n-                .doOnRequest(ignored -> logger.info(\"Creating role assignment - {}\", name))\n-                .doOnSuccess(response -> logger.info(\"Created role assignment - {}\", response.getValue().getName()))\n-                .doOnError(error -> logger.warning(\"Failed to create role assignment - {}\", name, error))\n+                .doOnRequest(ignored -> logger.info(\"Retrieving role assignment - {}\", name))\n+                .doOnSuccess(response -> logger.info(\"Retrieved role assignment - {}\", response.getValue().getName()))\n+                .doOnError(error -> logger.warning(\"Failed to retrieved role assignment - {}\", name, error))\n                 .map(this::transformRoleAssignmentResponse);\n         } catch (RuntimeException e) {\n             return monoError(logger, e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NTIzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483145238", "bodyText": "too much indentation, sentence should start on the next line.", "author": "g2vinay", "createdAt": "2020-09-03T17:34:27Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @param context   Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleDefinitionsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} in the first page that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role definitions for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role definitions for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleDefinition role definitions} given by the {@code nextPageLink} that was retrieved\n+     * from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleDefinitionsFirstPage(String, KeyVaultRoleAssignmentScope, Context)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleDefinitions} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the next page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role definitions page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role definitions page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role definitions page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleAssignmentsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleAssignmentsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} in the first page that are applicable at\n+     * the given {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * in the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role assignments for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role assignments for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role assignments for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleAssignment role assignments} given by the {@code nextPageLink} that was\n+     * retrieved from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleAssignments(KeyVaultRoleAssignmentScope)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleAssignments} operations.", "originalCommit": "8a742681ef54ced96ad1e672839b20d56f773b8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01e3e7641b80127033b0a2046476b637e549e9c8", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\nindex 57331939be5..ff34ec487dc 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n\n@@ -433,9 +433,9 @@ public final class KeyVaultAccessControlAsyncClient {\n             return clientImpl.getRoleAssignments()\n                 .getWithResponseAsync(vaultUrl, roleScope.toString(), name, context.addData(AZ_TRACING_NAMESPACE_KEY,\n                     KEYVAULT_TRACING_NAMESPACE_VALUE))\n-                .doOnRequest(ignored -> logger.info(\"Creating role assignment - {}\", name))\n-                .doOnSuccess(response -> logger.info(\"Created role assignment - {}\", response.getValue().getName()))\n-                .doOnError(error -> logger.warning(\"Failed to create role assignment - {}\", name, error))\n+                .doOnRequest(ignored -> logger.info(\"Retrieving role assignment - {}\", name))\n+                .doOnSuccess(response -> logger.info(\"Retrieved role assignment - {}\", response.getValue().getName()))\n+                .doOnError(error -> logger.warning(\"Failed to retrieved role assignment - {}\", name, error))\n                 .map(this::transformRoleAssignmentResponse);\n         } catch (RuntimeException e) {\n             return monoError(logger, e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NTQxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483145415", "bodyText": "extra space after context", "author": "g2vinay", "createdAt": "2020-09-03T17:34:47Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @param context   Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleDefinitionsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} in the first page that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role definitions for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role definitions for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleDefinition role definitions} given by the {@code nextPageLink} that was retrieved\n+     * from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleDefinitionsFirstPage(String, KeyVaultRoleAssignmentScope, Context)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleDefinitions} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the next page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role definitions page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role definitions page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role definitions page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleAssignmentsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleAssignmentsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} in the first page that are applicable at\n+     * the given {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * in the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role assignments for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role assignments for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role assignments for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleAssignment role assignments} given by the {@code nextPageLink} that was\n+     * retrieved from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleAssignments(KeyVaultRoleAssignmentScope)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleAssignments} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.", "originalCommit": "8a742681ef54ced96ad1e672839b20d56f773b8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01e3e7641b80127033b0a2046476b637e549e9c8", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\nindex 57331939be5..ff34ec487dc 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n\n@@ -433,9 +433,9 @@ public final class KeyVaultAccessControlAsyncClient {\n             return clientImpl.getRoleAssignments()\n                 .getWithResponseAsync(vaultUrl, roleScope.toString(), name, context.addData(AZ_TRACING_NAMESPACE_KEY,\n                     KEYVAULT_TRACING_NAMESPACE_VALUE))\n-                .doOnRequest(ignored -> logger.info(\"Creating role assignment - {}\", name))\n-                .doOnSuccess(response -> logger.info(\"Created role assignment - {}\", response.getValue().getName()))\n-                .doOnError(error -> logger.warning(\"Failed to create role assignment - {}\", name, error))\n+                .doOnRequest(ignored -> logger.info(\"Retrieving role assignment - {}\", name))\n+                .doOnSuccess(response -> logger.info(\"Retrieved role assignment - {}\", response.getValue().getName()))\n+                .doOnError(error -> logger.warning(\"Failed to retrieved role assignment - {}\", name, error))\n                 .map(this::transformRoleAssignmentResponse);\n         } catch (RuntimeException e) {\n             return monoError(logger, e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NTk0OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483145948", "bodyText": "too much extra space, sentence should start on next line.", "author": "g2vinay", "createdAt": "2020-09-03T17:35:48Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @param context   Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleDefinitionsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} in the first page that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role definitions for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role definitions for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleDefinition role definitions} given by the {@code nextPageLink} that was retrieved\n+     * from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleDefinitionsFirstPage(String, KeyVaultRoleAssignmentScope, Context)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleDefinitions} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the next page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role definitions page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role definitions page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role definitions page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleAssignmentsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleAssignmentsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} in the first page that are applicable at\n+     * the given {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * in the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role assignments for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role assignments for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role assignments for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleAssignment role assignments} given by the {@code nextPageLink} that was\n+     * retrieved from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleAssignments(KeyVaultRoleAssignmentScope)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleAssignments} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role assignments page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role assignments page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role assignments page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment} with a randomly generated {@link UUID name}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.", "originalCommit": "8a742681ef54ced96ad1e672839b20d56f773b8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01e3e7641b80127033b0a2046476b637e549e9c8", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\nindex 57331939be5..ff34ec487dc 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n\n@@ -433,9 +433,9 @@ public final class KeyVaultAccessControlAsyncClient {\n             return clientImpl.getRoleAssignments()\n                 .getWithResponseAsync(vaultUrl, roleScope.toString(), name, context.addData(AZ_TRACING_NAMESPACE_KEY,\n                     KEYVAULT_TRACING_NAMESPACE_VALUE))\n-                .doOnRequest(ignored -> logger.info(\"Creating role assignment - {}\", name))\n-                .doOnSuccess(response -> logger.info(\"Created role assignment - {}\", response.getValue().getName()))\n-                .doOnError(error -> logger.warning(\"Failed to create role assignment - {}\", name, error))\n+                .doOnRequest(ignored -> logger.info(\"Retrieving role assignment - {}\", name))\n+                .doOnSuccess(response -> logger.info(\"Retrieved role assignment - {}\", response.getValue().getName()))\n+                .doOnError(error -> logger.warning(\"Failed to retrieved role assignment - {}\", name, error))\n                 .map(this::transformRoleAssignmentResponse);\n         } catch (RuntimeException e) {\n             return monoError(logger, e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NjA3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483146077", "bodyText": "extra space afte name.", "author": "g2vinay", "createdAt": "2020-09-03T17:36:01Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @param context   Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleDefinitionsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} in the first page that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role definitions for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role definitions for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleDefinition role definitions} given by the {@code nextPageLink} that was retrieved\n+     * from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleDefinitionsFirstPage(String, KeyVaultRoleAssignmentScope, Context)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleDefinitions} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the next page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role definitions page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role definitions page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role definitions page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleAssignmentsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleAssignmentsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} in the first page that are applicable at\n+     * the given {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * in the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role assignments for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role assignments for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role assignments for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleAssignment role assignments} given by the {@code nextPageLink} that was\n+     * retrieved from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleAssignments(KeyVaultRoleAssignmentScope)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleAssignments} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role assignments page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role assignments page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role assignments page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment} with a randomly generated {@link UUID name}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing the created {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<KeyVaultRoleAssignment> createRoleAssignment(KeyVaultRoleAssignmentScope roleScope,\n+                                                             KeyVaultRoleAssignmentProperties properties) {\n+        return createRoleAssignment(roleScope, UUID.randomUUID(), properties);\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param name       The name used to create the {@link KeyVaultRoleAssignment}. It can be any valid UUID.", "originalCommit": "8a742681ef54ced96ad1e672839b20d56f773b8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01e3e7641b80127033b0a2046476b637e549e9c8", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\nindex 57331939be5..ff34ec487dc 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n\n@@ -433,9 +433,9 @@ public final class KeyVaultAccessControlAsyncClient {\n             return clientImpl.getRoleAssignments()\n                 .getWithResponseAsync(vaultUrl, roleScope.toString(), name, context.addData(AZ_TRACING_NAMESPACE_KEY,\n                     KEYVAULT_TRACING_NAMESPACE_VALUE))\n-                .doOnRequest(ignored -> logger.info(\"Creating role assignment - {}\", name))\n-                .doOnSuccess(response -> logger.info(\"Created role assignment - {}\", response.getValue().getName()))\n-                .doOnError(error -> logger.warning(\"Failed to create role assignment - {}\", name, error))\n+                .doOnRequest(ignored -> logger.info(\"Retrieving role assignment - {}\", name))\n+                .doOnSuccess(response -> logger.info(\"Retrieved role assignment - {}\", response.getValue().getName()))\n+                .doOnError(error -> logger.warning(\"Failed to retrieved role assignment - {}\", name, error))\n                 .map(this::transformRoleAssignmentResponse);\n         } catch (RuntimeException e) {\n             return monoError(logger, e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NjE3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483146175", "bodyText": "too much indentation.", "author": "g2vinay", "createdAt": "2020-09-03T17:36:13Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @param context   Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleDefinitionsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} in the first page that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role definitions for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role definitions for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleDefinition role definitions} given by the {@code nextPageLink} that was retrieved\n+     * from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleDefinitionsFirstPage(String, KeyVaultRoleAssignmentScope, Context)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleDefinitions} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the next page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role definitions page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role definitions page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role definitions page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleAssignmentsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleAssignmentsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} in the first page that are applicable at\n+     * the given {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * in the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role assignments for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role assignments for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role assignments for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleAssignment role assignments} given by the {@code nextPageLink} that was\n+     * retrieved from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleAssignments(KeyVaultRoleAssignmentScope)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleAssignments} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role assignments page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role assignments page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role assignments page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment} with a randomly generated {@link UUID name}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing the created {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<KeyVaultRoleAssignment> createRoleAssignment(KeyVaultRoleAssignmentScope roleScope,\n+                                                             KeyVaultRoleAssignmentProperties properties) {\n+        return createRoleAssignment(roleScope, UUID.randomUUID(), properties);\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.", "originalCommit": "8a742681ef54ced96ad1e672839b20d56f773b8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01e3e7641b80127033b0a2046476b637e549e9c8", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\nindex 57331939be5..ff34ec487dc 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n\n@@ -433,9 +433,9 @@ public final class KeyVaultAccessControlAsyncClient {\n             return clientImpl.getRoleAssignments()\n                 .getWithResponseAsync(vaultUrl, roleScope.toString(), name, context.addData(AZ_TRACING_NAMESPACE_KEY,\n                     KEYVAULT_TRACING_NAMESPACE_VALUE))\n-                .doOnRequest(ignored -> logger.info(\"Creating role assignment - {}\", name))\n-                .doOnSuccess(response -> logger.info(\"Created role assignment - {}\", response.getValue().getName()))\n-                .doOnError(error -> logger.warning(\"Failed to create role assignment - {}\", name, error))\n+                .doOnRequest(ignored -> logger.info(\"Retrieving role assignment - {}\", name))\n+                .doOnSuccess(response -> logger.info(\"Retrieved role assignment - {}\", response.getValue().getName()))\n+                .doOnError(error -> logger.warning(\"Failed to retrieved role assignment - {}\", name, error))\n                 .map(this::transformRoleAssignmentResponse);\n         } catch (RuntimeException e) {\n             return monoError(logger, e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NjM3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483146376", "bodyText": "sentence should start on next line.", "author": "g2vinay", "createdAt": "2020-09-03T17:36:34Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @param context   Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleDefinitionsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} in the first page that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role definitions for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role definitions for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleDefinition role definitions} given by the {@code nextPageLink} that was retrieved\n+     * from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleDefinitionsFirstPage(String, KeyVaultRoleAssignmentScope, Context)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleDefinitions} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the next page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role definitions page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role definitions page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role definitions page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleAssignmentsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleAssignmentsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} in the first page that are applicable at\n+     * the given {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * in the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role assignments for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role assignments for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role assignments for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleAssignment role assignments} given by the {@code nextPageLink} that was\n+     * retrieved from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleAssignments(KeyVaultRoleAssignmentScope)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleAssignments} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role assignments page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role assignments page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role assignments page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment} with a randomly generated {@link UUID name}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing the created {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<KeyVaultRoleAssignment> createRoleAssignment(KeyVaultRoleAssignmentScope roleScope,\n+                                                             KeyVaultRoleAssignmentProperties properties) {\n+        return createRoleAssignment(roleScope, UUID.randomUUID(), properties);\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param name       The name used to create the {@link KeyVaultRoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing the created {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope}, {@link UUID name} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.", "originalCommit": "8a742681ef54ced96ad1e672839b20d56f773b8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01e3e7641b80127033b0a2046476b637e549e9c8", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\nindex 57331939be5..ff34ec487dc 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n\n@@ -433,9 +433,9 @@ public final class KeyVaultAccessControlAsyncClient {\n             return clientImpl.getRoleAssignments()\n                 .getWithResponseAsync(vaultUrl, roleScope.toString(), name, context.addData(AZ_TRACING_NAMESPACE_KEY,\n                     KEYVAULT_TRACING_NAMESPACE_VALUE))\n-                .doOnRequest(ignored -> logger.info(\"Creating role assignment - {}\", name))\n-                .doOnSuccess(response -> logger.info(\"Created role assignment - {}\", response.getValue().getName()))\n-                .doOnError(error -> logger.warning(\"Failed to create role assignment - {}\", name, error))\n+                .doOnRequest(ignored -> logger.info(\"Retrieving role assignment - {}\", name))\n+                .doOnSuccess(response -> logger.info(\"Retrieved role assignment - {}\", response.getValue().getName()))\n+                .doOnError(error -> logger.warning(\"Failed to retrieved role assignment - {}\", name, error))\n                 .map(this::transformRoleAssignmentResponse);\n         } catch (RuntimeException e) {\n             return monoError(logger, e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NjY4Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483146683", "bodyText": "extra space after name,\nFix docs spacing issues everywhere.", "author": "g2vinay", "createdAt": "2020-09-03T17:37:12Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @param context   Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleDefinitionsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} in the first page that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role definitions for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role definitions for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleDefinition role definitions} given by the {@code nextPageLink} that was retrieved\n+     * from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleDefinitionsFirstPage(String, KeyVaultRoleAssignmentScope, Context)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleDefinitions} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the next page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role definitions page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role definitions page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role definitions page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleAssignmentsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleAssignmentsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} in the first page that are applicable at\n+     * the given {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * in the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role assignments for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role assignments for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role assignments for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleAssignment role assignments} given by the {@code nextPageLink} that was\n+     * retrieved from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleAssignments(KeyVaultRoleAssignmentScope)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleAssignments} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role assignments page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role assignments page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role assignments page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment} with a randomly generated {@link UUID name}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing the created {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<KeyVaultRoleAssignment> createRoleAssignment(KeyVaultRoleAssignmentScope roleScope,\n+                                                             KeyVaultRoleAssignmentProperties properties) {\n+        return createRoleAssignment(roleScope, UUID.randomUUID(), properties);\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param name       The name used to create the {@link KeyVaultRoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing the created {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope}, {@link UUID name} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<KeyVaultRoleAssignment> createRoleAssignment(KeyVaultRoleAssignmentScope roleScope, UUID name,\n+                                                             KeyVaultRoleAssignmentProperties properties) {\n+        return createRoleAssignmentWithResponse(roleScope, name, properties).flatMap(FluxUtil::toMono);\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment} with a randomly generated {@link UUID name}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} contains the created\n+     * {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<KeyVaultRoleAssignment>> createRoleAssignmentWithResponse(KeyVaultRoleAssignmentScope roleScope,\n+                                                                                   KeyVaultRoleAssignmentProperties properties) {\n+        return createRoleAssignmentWithResponse(roleScope, UUID.randomUUID(), properties);\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param name       The name used to create the {@link KeyVaultRoleAssignment}. It can be any valid UUID.", "originalCommit": "8a742681ef54ced96ad1e672839b20d56f773b8a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01e3e7641b80127033b0a2046476b637e549e9c8", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\nindex 57331939be5..ff34ec487dc 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n\n@@ -433,9 +433,9 @@ public final class KeyVaultAccessControlAsyncClient {\n             return clientImpl.getRoleAssignments()\n                 .getWithResponseAsync(vaultUrl, roleScope.toString(), name, context.addData(AZ_TRACING_NAMESPACE_KEY,\n                     KEYVAULT_TRACING_NAMESPACE_VALUE))\n-                .doOnRequest(ignored -> logger.info(\"Creating role assignment - {}\", name))\n-                .doOnSuccess(response -> logger.info(\"Created role assignment - {}\", response.getValue().getName()))\n-                .doOnError(error -> logger.warning(\"Failed to create role assignment - {}\", name, error))\n+                .doOnRequest(ignored -> logger.info(\"Retrieving role assignment - {}\", name))\n+                .doOnSuccess(response -> logger.info(\"Retrieved role assignment - {}\", response.getValue().getName()))\n+                .doOnError(error -> logger.warning(\"Failed to retrieved role assignment - {}\", name, error))\n                 .map(this::transformRoleAssignmentResponse);\n         } catch (RuntimeException e) {\n             return monoError(logger, e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NzQxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483147419", "bodyText": "Why is UUID being used here and not a String ?", "author": "g2vinay", "createdAt": "2020-09-03T17:38:34Z", "path": "sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java", "diffHunk": "@@ -0,0 +1,644 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.security.keyvault.administration;\n+\n+import com.azure.core.annotation.ReturnType;\n+import com.azure.core.annotation.ServiceClient;\n+import com.azure.core.annotation.ServiceMethod;\n+import com.azure.core.http.HttpHeaders;\n+import com.azure.core.http.HttpPipeline;\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImpl;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultAccessControlClientImplBuilder;\n+import com.azure.security.keyvault.administration.implementation.KeyVaultErrorCodeStrings;\n+import com.azure.security.keyvault.administration.implementation.models.*;\n+import com.azure.security.keyvault.administration.models.*;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+\n+import static com.azure.core.util.FluxUtil.monoError;\n+import static com.azure.core.util.FluxUtil.withContext;\n+import static com.azure.core.util.tracing.Tracer.AZ_TRACING_NAMESPACE_KEY;\n+\n+/**\n+ * The {@link KeyVaultAccessControlAsyncClient} provides asynchronous methods to view and manage Role Based Access\n+ * for the Azure Key Vault. The client supports creating, listing, updating, and deleting\n+ * {@link KeyVaultRoleAssignment role assignments}. Additionally, the client supports listing\n+ * {@link KeyVaultRoleDefinition role definitions}.\n+ */\n+@ServiceClient(builder = KeyVaultAccessControlClientBuilder.class, isAsync = true)\n+public final class KeyVaultAccessControlAsyncClient {\n+    // Please see <a href=https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-services-resource-providers>here</a>\n+    // for more information on Azure resource provider namespaces.\n+    private static final String KEYVAULT_TRACING_NAMESPACE_VALUE = \"Microsoft.KeyVault\";\n+\n+    /**\n+     * The logger to be used.\n+     */\n+    private final ClientLogger logger = new ClientLogger(KeyVaultAccessControlAsyncClient.class);\n+\n+    /**\n+     * The underlying AutoRest client used to interact with the Key Vault service.\n+     */\n+    private final KeyVaultAccessControlClientImpl clientImpl;\n+\n+    /**\n+     * The Kay Vault URL this client is associated to.\n+     */\n+    private final String vaultUrl;\n+\n+    /**\n+     * Package private constructor to be used by {@link KeyVaultAccessControlClientBuilder}.\n+     */\n+    KeyVaultAccessControlAsyncClient(URL vaultUrl, HttpPipeline httpPipeline) {\n+        Objects.requireNonNull(vaultUrl,\n+            KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.VAULT_END_POINT_REQUIRED));\n+\n+        this.vaultUrl = vaultUrl.toString();\n+\n+        clientImpl = new KeyVaultAccessControlClientImplBuilder()\n+            .pipeline(httpPipeline)\n+            .buildClient();\n+    }\n+\n+    /**\n+     * Gets the URL for the Key Vault this client is associated with.\n+     *\n+     * @return The Key Vault URL.\n+     */\n+    public String getVaultUrl() {\n+        return vaultUrl;\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleDefinitionsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition role\n+     *                  definitions}.\n+     * @param context   Additional {@link Context} that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleDefinition role definitions} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleDefinition> listRoleDefinitions(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleDefinitionsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleDefinitionsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleDefinition role definitions} in the first page that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleDefinition}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role definitions for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role definitions for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role definitions for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleDefinition role definitions} given by the {@code nextPageLink} that was retrieved\n+     * from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleDefinitionsFirstPage(String, KeyVaultRoleAssignmentScope, Context)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleDefinitions} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleDefinition role definitions}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the next page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleDefinition>> listRoleDefinitionsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleDefinitions()\n+                .listNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role definitions page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role definitions page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role definitions page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleDefinitionsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.COLLECTION)\n+    public PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope) {\n+        return new PagedFlux<>(\n+            () -> withContext(context -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context)),\n+            continuationToken -> withContext(context -> listRoleAssignmentsNextPage(continuationToken, context)));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} that are applicable at the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link PagedFlux} containing the {@link KeyVaultRoleAssignment role assignments} for the given\n+     * {@link KeyVaultRoleAssignmentScope roleScope}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    PagedFlux<KeyVaultRoleAssignment> listRoleAssignments(KeyVaultRoleAssignmentScope roleScope, Context context) {\n+        return new PagedFlux<>(\n+            () -> listRoleAssignmentsFirstPage(vaultUrl, roleScope, context),\n+            continuationToken -> listRoleAssignmentsNextPage(continuationToken, context));\n+    }\n+\n+    /**\n+     * Get all {@link KeyVaultRoleAssignment role assignments} in the first page that are applicable at\n+     * the given {@link KeyVaultRoleAssignmentScope roleScope} and above.\n+     *\n+     * @param vaultUrl  The URL for the Key Vault this client is associated with.\n+     * @param roleScope The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment}.\n+     * @param context   Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * in the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} is {@code null}.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsFirstPage(String vaultUrl,\n+                                                                             KeyVaultRoleAssignmentScope roleScope,\n+                                                                             Context context) {\n+        Objects.requireNonNull(roleScope,\n+            String.format(KeyVaultErrorCodeStrings.getErrorString(KeyVaultErrorCodeStrings.PARAMETER_REQUIRED),\n+                \"'roleScope'\"));\n+\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeSinglePageAsync(vaultUrl, roleScope.toString(), null,\n+                    context.addData(AZ_TRACING_NAMESPACE_KEY, KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing role assignments for roleScope - {}\", roleScope))\n+                .doOnSuccess(response -> logger.info(\"Listed role assignments for roleScope - {}\", roleScope))\n+                .doOnError(error -> logger.warning(String.format(\"Failed to list role assignments for roleScope - %s\",\n+                    roleScope), error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Gets all the {@link KeyVaultRoleAssignment role assignments} given by the {@code nextPageLink} that was\n+     * retrieved from a call to\n+     * {@link KeyVaultAccessControlAsyncClient#listRoleAssignments(KeyVaultRoleAssignmentScope)}.\n+     *\n+     * @param continuationToken The {@link PagedResponse#getContinuationToken() continuationToken} from a previous,\n+     *                          successful call to one of the {@code listKeyVaultRoleAssignments} operations.\n+     * @param context           Additional context that is passed through the HTTP pipeline during the service call.\n+     * @return A {@link Mono} containing a {@link PagedResponse} of {@link KeyVaultRoleAssignment role assignments}\n+     * for the given {@link KeyVaultRoleAssignmentScope roleScope} from the first page of results.\n+     */\n+    Mono<PagedResponse<KeyVaultRoleAssignment>> listRoleAssignmentsNextPage(String continuationToken, Context context) {\n+        try {\n+            return clientImpl.getRoleAssignments()\n+                .listForScopeNextSinglePageAsync(continuationToken, context.addData(AZ_TRACING_NAMESPACE_KEY,\n+                    KEYVAULT_TRACING_NAMESPACE_VALUE))\n+                .doOnRequest(ignored -> logger.info(\"Listing next role assignments page - Page {}\", continuationToken))\n+                .doOnSuccess(response -> logger.info(\"Listed next role assignments page - Page {}\", continuationToken))\n+                .doOnError(error -> logger.warning(\"Failed to list next role assignments page - Page {}\",\n+                    continuationToken, error))\n+                .map(this::transformRoleAssignmentsPagedResponse);\n+        } catch (RuntimeException e) {\n+            return monoError(logger, e);\n+        }\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment} with a randomly generated {@link UUID name}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing the created {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<KeyVaultRoleAssignment> createRoleAssignment(KeyVaultRoleAssignmentScope roleScope,\n+                                                             KeyVaultRoleAssignmentProperties properties) {\n+        return createRoleAssignment(roleScope, UUID.randomUUID(), properties);\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param name       The name used to create the {@link KeyVaultRoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing the created {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope}, {@link UUID name} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<KeyVaultRoleAssignment> createRoleAssignment(KeyVaultRoleAssignmentScope roleScope, UUID name,\n+                                                             KeyVaultRoleAssignmentProperties properties) {\n+        return createRoleAssignmentWithResponse(roleScope, name, properties).flatMap(FluxUtil::toMono);\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment} with a randomly generated {@link UUID name}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} contains the created\n+     * {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<KeyVaultRoleAssignment>> createRoleAssignmentWithResponse(KeyVaultRoleAssignmentScope roleScope,\n+                                                                                   KeyVaultRoleAssignmentProperties properties) {\n+        return createRoleAssignmentWithResponse(roleScope, UUID.randomUUID(), properties);\n+    }\n+\n+    /**\n+     * Creates a {@link KeyVaultRoleAssignment}.\n+     *\n+     * @param roleScope  The {@link KeyVaultRoleAssignmentScope roleScope} of the {@link KeyVaultRoleAssignment} to\n+     *                   create.\n+     * @param name       The name used to create the {@link KeyVaultRoleAssignment}. It can be any valid UUID.\n+     * @param properties Properties for the {@link KeyVaultRoleAssignment}.\n+     * @return A {@link Mono} containing a {@link Response} whose {@link Response#getValue() value} contains the created\n+     * {@link KeyVaultRoleAssignment}.\n+     * @throws NullPointerException if the {@link KeyVaultRoleAssignmentScope roleScope}, {@link UUID name} or\n+     *                              {@link KeyVaultRoleAssignmentProperties properties} are {@code null}.\n+     */\n+    @ServiceMethod(returns = ReturnType.SINGLE)\n+    public Mono<Response<KeyVaultRoleAssignment>> createRoleAssignmentWithResponse(KeyVaultRoleAssignmentScope roleScope,\n+                                                                                   UUID name,", "originalCommit": "8a742681ef54ced96ad1e672839b20d56f773b8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2NjY5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12405#discussion_r483166698", "bodyText": "The service accepts only valid GUIDs as the name for role assignments, so you could consider this a sort of handrail for users.", "author": "vcolin7", "createdAt": "2020-09-03T18:14:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0NzQxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "01e3e7641b80127033b0a2046476b637e549e9c8", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\nindex 57331939be5..ff34ec487dc 100644\n--- a/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n+++ b/sdk/keyvault/azure-security-keyvault-administration/src/main/java/com/azure/security/keyvault/administration/KeyVaultAccessControlAsyncClient.java\n\n@@ -433,9 +433,9 @@ public final class KeyVaultAccessControlAsyncClient {\n             return clientImpl.getRoleAssignments()\n                 .getWithResponseAsync(vaultUrl, roleScope.toString(), name, context.addData(AZ_TRACING_NAMESPACE_KEY,\n                     KEYVAULT_TRACING_NAMESPACE_VALUE))\n-                .doOnRequest(ignored -> logger.info(\"Creating role assignment - {}\", name))\n-                .doOnSuccess(response -> logger.info(\"Created role assignment - {}\", response.getValue().getName()))\n-                .doOnError(error -> logger.warning(\"Failed to create role assignment - {}\", name, error))\n+                .doOnRequest(ignored -> logger.info(\"Retrieving role assignment - {}\", name))\n+                .doOnSuccess(response -> logger.info(\"Retrieved role assignment - {}\", response.getValue().getName()))\n+                .doOnError(error -> logger.warning(\"Failed to retrieved role assignment - {}\", name, error))\n                 .map(this::transformRoleAssignmentResponse);\n         } catch (RuntimeException e) {\n             return monoError(logger, e);\n"}}, {"oid": "01e3e7641b80127033b0a2046476b637e549e9c8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/01e3e7641b80127033b0a2046476b637e549e9c8", "message": "Fixed some strings used for logging.", "committedDate": "2020-09-03T18:07:54Z", "type": "commit"}, {"oid": "2ee7459c1104d373ec41c0414bf146fb33bf02dd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2ee7459c1104d373ec41c0414bf146fb33bf02dd", "message": "Fixed JavaDoc formatting issues pointed out by @g2vinay.", "committedDate": "2020-09-03T20:46:33Z", "type": "commit"}, {"oid": "0907fcb7121377ba9fbb49b688063a0a70ec4f57", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0907fcb7121377ba9fbb49b688063a0a70ec4f57", "message": "Added samples to README.md", "committedDate": "2020-09-03T20:46:52Z", "type": "commit"}, {"oid": "583d989a2947caba2cb9628e452d294e4daeda69", "url": "https://github.com/Azure/azure-sdk-for-java/commit/583d989a2947caba2cb9628e452d294e4daeda69", "message": "Merge branch 'master' into users/vicolina/keyvault-rbac", "committedDate": "2020-09-03T20:50:27Z", "type": "commit"}, {"oid": "5a208bfbcbce629d7d0a0d1517fe1bf537c77210", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5a208bfbcbce629d7d0a0d1517fe1bf537c77210", "message": "Fixed build analysis issues with the module's POM.", "committedDate": "2020-09-03T22:09:19Z", "type": "commit"}, {"oid": "5a208bfbcbce629d7d0a0d1517fe1bf537c77210", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5a208bfbcbce629d7d0a0d1517fe1bf537c77210", "message": "Fixed build analysis issues with the module's POM.", "committedDate": "2020-09-03T22:09:19Z", "type": "forcePushed"}, {"oid": "016964397330777487187204dc4b032c6eaf59aa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/016964397330777487187204dc4b032c6eaf59aa", "message": "Fixed Build analysis issue related to README.", "committedDate": "2020-09-04T04:03:32Z", "type": "commit"}, {"oid": "ca96cc718617d8e4d9a8d3bd3353778510bcf450", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ca96cc718617d8e4d9a8d3bd3353778510bcf450", "message": "Fixed broken links in autorest.md and README.md", "committedDate": "2020-09-04T06:59:05Z", "type": "forcePushed"}, {"oid": "a47601088f1bea5ef104ac4c181bf5281a1f292c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a47601088f1bea5ef104ac4c181bf5281a1f292c", "message": "Fixed broken links in autorest.md and README.md", "committedDate": "2020-09-04T07:03:44Z", "type": "commit"}, {"oid": "a47601088f1bea5ef104ac4c181bf5281a1f292c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a47601088f1bea5ef104ac4c181bf5281a1f292c", "message": "Fixed broken links in autorest.md and README.md", "committedDate": "2020-09-04T07:03:44Z", "type": "forcePushed"}, {"oid": "43a5fee092eea1aae382da47a8bdbc313b30a73b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/43a5fee092eea1aae382da47a8bdbc313b30a73b", "message": "Fixed a bug in `KeyVaultAccessControlAsyncClient.createRoleAssignmentWithResponse()`. Made fixes for tests cases.", "committedDate": "2020-09-04T08:45:04Z", "type": "commit"}, {"oid": "43caa664065f32b9d79852f06ba965439014c7dc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/43caa664065f32b9d79852f06ba965439014c7dc", "message": "Updated azure-core versions.", "committedDate": "2020-09-04T08:52:31Z", "type": "commit"}]}