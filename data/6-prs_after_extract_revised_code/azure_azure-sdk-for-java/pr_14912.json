{"pr_number": 14912, "pr_title": "[Event Hubs] Support SAS token in connnection string", "pr_createdAt": "2020-09-08T18:29:59Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14912", "timeline": [{"oid": "687ff435559676d50929bffd950c12e1fdfcd324", "url": "https://github.com/Azure/azure-sdk-for-java/commit/687ff435559676d50929bffd950c12e1fdfcd324", "message": "Move load balancing options changes to main branch", "committedDate": "2020-09-06T08:48:29Z", "type": "commit"}, {"oid": "e609163d41ddea3a8585071641439fdd735eb9fa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e609163d41ddea3a8585071641439fdd735eb9fa", "message": "Support SAS token in connnection string", "committedDate": "2020-09-08T17:59:00Z", "type": "commit"}, {"oid": "a75dcd9783a53e31c899fd32ec5c0bef20bbe86d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a75dcd9783a53e31c899fd32ec5c0bef20bbe86d", "message": "Merge remote-tracking branch 'upstream/master' into eh-sas", "committedDate": "2020-09-08T17:59:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4OTg2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#discussion_r485189866", "bodyText": "The above CS_WITH_ACCESS_KEY has EntityPath while this one doesn't.", "author": "YijunXieMS", "createdAt": "2020-09-08T20:53:20Z", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java", "diffHunk": "@@ -25,25 +25,31 @@\n     private static final String ENDPOINT = \"Endpoint\";\n     private static final String SHARED_ACCESS_KEY_NAME = \"SharedAccessKeyName\";\n     private static final String SHARED_ACCESS_KEY = \"SharedAccessKey\";\n+    private static final String SHARED_ACCESS_SIGNATURE = \"SharedAccessSignature\";\n+    private static final String SAS_VALUE_PREFIX = \"sharedaccesssignature \";\n     private static final String ENTITY_PATH = \"EntityPath\";\n+    private static final String CS_WITH_ACCESS_KEY = \"Endpoint={endpoint};SharedAccessKeyName={sharedAccessKeyName};\"\n+        + \"SharedAccessKey={sharedAccessKey};EntityPath={entityPath}\";\n+    private static final String CS_WITH_SAS = \"Endpoint={endpoint};SharedAccessSignature=\"\n+        + \"SharedAccessSignature {sharedAccessSignature}\";", "originalCommit": "a75dcd9783a53e31c899fd32ec5c0bef20bbe86d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyNjc5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#discussion_r485226790", "bodyText": "Good catch. EntityPath was missing. Updated.", "author": "srnagar", "createdAt": "2020-09-08T22:20:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4OTg2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2adb95aa0b7f8ceaaede2a058e19ae2458848e77", "chunk": "diff --git a/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java b/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java\nindex cf62bb1c59e..fed3c7db204 100644\n--- a/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java\n+++ b/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java\n\n@@ -31,7 +31,7 @@ public class ConnectionStringProperties {\n     private static final String CS_WITH_ACCESS_KEY = \"Endpoint={endpoint};SharedAccessKeyName={sharedAccessKeyName};\"\n         + \"SharedAccessKey={sharedAccessKey};EntityPath={entityPath}\";\n     private static final String CS_WITH_SAS = \"Endpoint={endpoint};SharedAccessSignature=\"\n-        + \"SharedAccessSignature {sharedAccessSignature}\";\n+        + \"SharedAccessSignature {sharedAccessSignature};EntityPath={entityPath}\";\n     private static final String ERROR_MESSAGE_FORMAT = \"Could not parse 'connectionString'. Expected format: \"\n         + CS_WITH_ACCESS_KEY + \" or \" + CS_WITH_SAS + \". Actual: %s\";\n     private static final String ERROR_MESSAGE_ENDPOINT_FORMAT = \"'Endpoint' must be provided in 'connectionString'.\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE5MjYyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#discussion_r485192629", "bodyText": "Nit: validSharedKey sounds like the shared key value is valid to the service. Suggest something like \"includesSharedKeyValue\"", "author": "YijunXieMS", "createdAt": "2020-09-08T20:58:53Z", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java", "diffHunk": "@@ -83,25 +90,34 @@ public ConnectionStringProperties(String connectionString) {\n                 sharedAccessKeyValue = value;\n             } else if (key.equalsIgnoreCase(ENTITY_PATH)) {\n                 entityPath = value;\n+            } else if (key.equalsIgnoreCase(SHARED_ACCESS_SIGNATURE)\n+                && value.toLowerCase(Locale.getDefault()).startsWith(SAS_VALUE_PREFIX)) {\n+                sharedAccessSignature = value;\n             } else {\n                 throw new IllegalArgumentException(\n                     String.format(Locale.US, \"Illegal connection string parameter name: %s\", key));\n             }\n         }\n \n-        if (endpoint == null || sharedAccessKeyName == null || sharedAccessKeyValue == null) {\n+        // connection string should have an endpoint and either shared access signature or shared access key and value\n+        boolean includesSharedKey = sharedAccessKeyName != null || sharedAccessKeyValue != null;\n+        boolean validSharedKey = sharedAccessKeyName != null && sharedAccessKeyValue != null;", "originalCommit": "a75dcd9783a53e31c899fd32ec5c0bef20bbe86d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyNjY1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#discussion_r485226655", "bodyText": "Updated name to hasSharedKeyAndValue.", "author": "srnagar", "createdAt": "2020-09-08T22:19:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE5MjYyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "2adb95aa0b7f8ceaaede2a058e19ae2458848e77", "chunk": "diff --git a/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java b/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java\nindex cf62bb1c59e..fed3c7db204 100644\n--- a/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java\n+++ b/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java\n\n@@ -101,11 +101,11 @@ public class ConnectionStringProperties {\n \n         // connection string should have an endpoint and either shared access signature or shared access key and value\n         boolean includesSharedKey = sharedAccessKeyName != null || sharedAccessKeyValue != null;\n-        boolean validSharedKey = sharedAccessKeyName != null && sharedAccessKeyValue != null;\n+        boolean hasSharedKeyAndValue = sharedAccessKeyName != null && sharedAccessKeyValue != null;\n         boolean includesSharedAccessSignature = sharedAccessSignature != null;\n         if (endpoint == null\n             || (includesSharedKey && includesSharedAccessSignature) // includes both SAS and key or value\n-            || (!validSharedKey && !includesSharedAccessSignature)) { // invalid key, value and SAS\n+            || (!hasSharedKeyAndValue && !includesSharedAccessSignature)) { // invalid key, value and SAS\n             throw new IllegalArgumentException(String.format(Locale.US, ERROR_MESSAGE_FORMAT, connectionString));\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE5OTA1OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#discussion_r485199059", "bodyText": "Using constructor overloads work well. How about using a different sub class of TokenCredential, like EventHubSharedAccessSignatureCredential, or the shorter version EventHubSASCredential? It's cleaner to user two separate classes. Maybe someday the shared access signature will support new behaviors like token renew.", "author": "YijunXieMS", "createdAt": "2020-09-08T21:12:48Z", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubClientBuilder.java", "diffHunk": "@@ -178,13 +178,22 @@ public EventHubClientBuilder() {\n      *     connection string.\n      */\n     public EventHubClientBuilder connectionString(String connectionString) {\n-        final ConnectionStringProperties properties = new ConnectionStringProperties(connectionString);\n-        final TokenCredential tokenCredential = new EventHubSharedKeyCredential(properties.getSharedAccessKeyName(),\n-            properties.getSharedAccessKey(), ClientConstants.TOKEN_VALIDITY);\n-\n+        ConnectionStringProperties properties = new ConnectionStringProperties(connectionString);\n+        TokenCredential tokenCredential = getTokenCredential(properties);\n         return credential(properties.getEndpoint().getHost(), properties.getEntityPath(), tokenCredential);\n     }\n \n+    private TokenCredential getTokenCredential(ConnectionStringProperties properties) {\n+        TokenCredential tokenCredential;\n+        if (properties.getSharedAccessSignature() == null) {\n+            tokenCredential = new EventHubSharedKeyCredential(properties.getSharedAccessKeyName(),\n+                properties.getSharedAccessKey(), ClientConstants.TOKEN_VALIDITY);\n+        } else {\n+            tokenCredential = new EventHubSharedKeyCredential(properties.getSharedAccessSignature());", "originalCommit": "a75dcd9783a53e31c899fd32ec5c0bef20bbe86d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyNjUyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#discussion_r485226529", "bodyText": "This is similar to what .NET is doing. I am not sure we should introduce too many credential types when the token returned for both types of connection strings are the same.", "author": "srnagar", "createdAt": "2020-09-08T22:19:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE5OTA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzNDQwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#discussion_r485234401", "bodyText": "This is all internal. So I don't have very strong opinion to use separate classes. Let's go ahead with this.", "author": "YijunXieMS", "createdAt": "2020-09-08T22:41:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE5OTA1OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "2adb95aa0b7f8ceaaede2a058e19ae2458848e77", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2adb95aa0b7f8ceaaede2a058e19ae2458848e77", "message": "Address PR comments", "committedDate": "2020-09-08T22:17:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzMzM5Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#discussion_r485233392", "bodyText": "nit: change CS -> CONNECTION_STRING.  I avoid abbreviations unless I it's widely used.", "author": "conniey", "createdAt": "2020-09-08T22:38:44Z", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java", "diffHunk": "@@ -25,25 +25,31 @@\n     private static final String ENDPOINT = \"Endpoint\";\n     private static final String SHARED_ACCESS_KEY_NAME = \"SharedAccessKeyName\";\n     private static final String SHARED_ACCESS_KEY = \"SharedAccessKey\";\n+    private static final String SHARED_ACCESS_SIGNATURE = \"SharedAccessSignature\";\n+    private static final String SAS_VALUE_PREFIX = \"sharedaccesssignature \";\n     private static final String ENTITY_PATH = \"EntityPath\";\n+    private static final String CS_WITH_ACCESS_KEY = \"Endpoint={endpoint};SharedAccessKeyName={sharedAccessKeyName};\"", "originalCommit": "2adb95aa0b7f8ceaaede2a058e19ae2458848e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f0dd1c9ac6eb435a90ae560a2441f8ae81c6df51", "chunk": "diff --git a/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java b/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java\nindex fed3c7db204..d735030473b 100644\n--- a/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java\n+++ b/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java\n\n@@ -28,12 +28,12 @@ public class ConnectionStringProperties {\n     private static final String SHARED_ACCESS_SIGNATURE = \"SharedAccessSignature\";\n     private static final String SAS_VALUE_PREFIX = \"sharedaccesssignature \";\n     private static final String ENTITY_PATH = \"EntityPath\";\n-    private static final String CS_WITH_ACCESS_KEY = \"Endpoint={endpoint};SharedAccessKeyName={sharedAccessKeyName};\"\n+    private static final String CONNECTION_STRING_WITH_ACCESS_KEY = \"Endpoint={endpoint};SharedAccessKeyName={sharedAccessKeyName};\"\n         + \"SharedAccessKey={sharedAccessKey};EntityPath={entityPath}\";\n-    private static final String CS_WITH_SAS = \"Endpoint={endpoint};SharedAccessSignature=\"\n+    private static final String CONNECTION_STRING_WITH_SAS = \"Endpoint={endpoint};SharedAccessSignature=\"\n         + \"SharedAccessSignature {sharedAccessSignature};EntityPath={entityPath}\";\n     private static final String ERROR_MESSAGE_FORMAT = \"Could not parse 'connectionString'. Expected format: \"\n-        + CS_WITH_ACCESS_KEY + \" or \" + CS_WITH_SAS + \". Actual: %s\";\n+        + CONNECTION_STRING_WITH_ACCESS_KEY + \" or \" + CONNECTION_STRING_WITH_SAS + \". Actual: %s\";\n     private static final String ERROR_MESSAGE_ENDPOINT_FORMAT = \"'Endpoint' must be provided in 'connectionString'.\"\n         + \" Actual: %s\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzMzQ3Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#discussion_r485233473", "bodyText": "IIRC, our document format is not to align parameters or indent until the parameter.", "author": "conniey", "createdAt": "2020-09-08T22:38:58Z", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java", "diffHunk": "@@ -25,25 +25,31 @@\n     private static final String ENDPOINT = \"Endpoint\";\n     private static final String SHARED_ACCESS_KEY_NAME = \"SharedAccessKeyName\";\n     private static final String SHARED_ACCESS_KEY = \"SharedAccessKey\";\n+    private static final String SHARED_ACCESS_SIGNATURE = \"SharedAccessSignature\";\n+    private static final String SAS_VALUE_PREFIX = \"sharedaccesssignature \";\n     private static final String ENTITY_PATH = \"EntityPath\";\n+    private static final String CS_WITH_ACCESS_KEY = \"Endpoint={endpoint};SharedAccessKeyName={sharedAccessKeyName};\"\n+        + \"SharedAccessKey={sharedAccessKey};EntityPath={entityPath}\";\n+    private static final String CS_WITH_SAS = \"Endpoint={endpoint};SharedAccessSignature=\"\n+        + \"SharedAccessSignature {sharedAccessSignature};EntityPath={entityPath}\";\n     private static final String ERROR_MESSAGE_FORMAT = \"Could not parse 'connectionString'. Expected format: \"\n-        + \"'Endpoint={endpoint};SharedAccessKeyName={sharedAccessKeyName};\"\n-        + \"SharedAccessKey={sharedAccessKey};EntityPath={entityPath}'. Actual: %s\";\n+        + CS_WITH_ACCESS_KEY + \" or \" + CS_WITH_SAS + \". Actual: %s\";\n     private static final String ERROR_MESSAGE_ENDPOINT_FORMAT = \"'Endpoint' must be provided in 'connectionString'.\"\n         + \" Actual: %s\";\n \n     private final URI endpoint;\n     private final String entityPath;\n     private final String sharedAccessKeyName;\n     private final String sharedAccessKey;\n+    private final String sharedAccessSignature;\n \n     /**\n      * Creates a new instance by parsing the {@code connectionString} into its components.\n-     *\n      * @param connectionString The connection string to the Event Hub instance.\n-     * @throws NullPointerException if {@code connectionString} is null.\n+     *", "originalCommit": "2adb95aa0b7f8ceaaede2a058e19ae2458848e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f0dd1c9ac6eb435a90ae560a2441f8ae81c6df51", "chunk": "diff --git a/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java b/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java\nindex fed3c7db204..d735030473b 100644\n--- a/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java\n+++ b/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java\n\n@@ -28,12 +28,12 @@ public class ConnectionStringProperties {\n     private static final String SHARED_ACCESS_SIGNATURE = \"SharedAccessSignature\";\n     private static final String SAS_VALUE_PREFIX = \"sharedaccesssignature \";\n     private static final String ENTITY_PATH = \"EntityPath\";\n-    private static final String CS_WITH_ACCESS_KEY = \"Endpoint={endpoint};SharedAccessKeyName={sharedAccessKeyName};\"\n+    private static final String CONNECTION_STRING_WITH_ACCESS_KEY = \"Endpoint={endpoint};SharedAccessKeyName={sharedAccessKeyName};\"\n         + \"SharedAccessKey={sharedAccessKey};EntityPath={entityPath}\";\n-    private static final String CS_WITH_SAS = \"Endpoint={endpoint};SharedAccessSignature=\"\n+    private static final String CONNECTION_STRING_WITH_SAS = \"Endpoint={endpoint};SharedAccessSignature=\"\n         + \"SharedAccessSignature {sharedAccessSignature};EntityPath={entityPath}\";\n     private static final String ERROR_MESSAGE_FORMAT = \"Could not parse 'connectionString'. Expected format: \"\n-        + CS_WITH_ACCESS_KEY + \" or \" + CS_WITH_SAS + \". Actual: %s\";\n+        + CONNECTION_STRING_WITH_ACCESS_KEY + \" or \" + CONNECTION_STRING_WITH_SAS + \". Actual: %s\";\n     private static final String ERROR_MESSAGE_ENDPOINT_FORMAT = \"'Endpoint' must be provided in 'connectionString'.\"\n         + \" Actual: %s\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzNDA4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#discussion_r485234084", "bodyText": "This value should be culture agnostic, I would use the culture invariant locale.", "author": "conniey", "createdAt": "2020-09-08T22:40:38Z", "path": "sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java", "diffHunk": "@@ -83,25 +90,34 @@ public ConnectionStringProperties(String connectionString) {\n                 sharedAccessKeyValue = value;\n             } else if (key.equalsIgnoreCase(ENTITY_PATH)) {\n                 entityPath = value;\n+            } else if (key.equalsIgnoreCase(SHARED_ACCESS_SIGNATURE)\n+                && value.toLowerCase(Locale.getDefault()).startsWith(SAS_VALUE_PREFIX)) {", "originalCommit": "2adb95aa0b7f8ceaaede2a058e19ae2458848e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f0dd1c9ac6eb435a90ae560a2441f8ae81c6df51", "chunk": "diff --git a/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java b/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java\nindex fed3c7db204..d735030473b 100644\n--- a/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java\n+++ b/sdk/core/azure-core-amqp/src/main/java/com/azure/core/amqp/implementation/ConnectionStringProperties.java\n\n@@ -91,7 +91,7 @@ public class ConnectionStringProperties {\n             } else if (key.equalsIgnoreCase(ENTITY_PATH)) {\n                 entityPath = value;\n             } else if (key.equalsIgnoreCase(SHARED_ACCESS_SIGNATURE)\n-                && value.toLowerCase(Locale.getDefault()).startsWith(SAS_VALUE_PREFIX)) {\n+                && value.toLowerCase(Locale.ROOT).startsWith(SAS_VALUE_PREFIX)) {\n                 sharedAccessSignature = value;\n             } else {\n                 throw new IllegalArgumentException(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzNDcwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#discussion_r485234701", "bodyText": "I believe there's a method, Instant.ofEpochSecond you can leverage.", "author": "conniey", "createdAt": "2020-09-08T22:42:32Z", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/EventHubSharedKeyCredential.java", "diffHunk": "@@ -153,4 +180,22 @@ private AccessToken generateSharedAccessSignature(final String resource) throws\n \n         return new AccessToken(token, expiresOn);\n     }\n+\n+    private OffsetDateTime getExpirationTime(String sharedAccessSignature) {\n+        String[] parts = sharedAccessSignature.split(\"&\");\n+        return Arrays.stream(parts)\n+            .map(part -> part.split(\"=\"))\n+            .filter(pair -> pair.length == 2 && pair[0].equalsIgnoreCase(\"se\"))\n+            .findFirst()\n+            .map(pair -> pair[1])\n+            .map(expirationTimeStr -> {\n+                try {\n+                    long epochSeconds = Long.parseLong(expirationTimeStr);\n+                    return new Date(epochSeconds * 1000).toInstant().atOffset(ZoneOffset.UTC);", "originalCommit": "2adb95aa0b7f8ceaaede2a058e19ae2458848e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f0dd1c9ac6eb435a90ae560a2441f8ae81c6df51", "chunk": "diff --git a/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/EventHubSharedKeyCredential.java b/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/EventHubSharedKeyCredential.java\nindex e2a28e169ce..01f98b44768 100644\n--- a/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/EventHubSharedKeyCredential.java\n+++ b/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/EventHubSharedKeyCredential.java\n\n@@ -191,8 +191,10 @@ public class EventHubSharedKeyCredential implements TokenCredential {\n             .map(expirationTimeStr -> {\n                 try {\n                     long epochSeconds = Long.parseLong(expirationTimeStr);\n-                    return new Date(epochSeconds * 1000).toInstant().atOffset(ZoneOffset.UTC);\n+                    return Instant.ofEpochSecond(epochSeconds).atOffset(ZoneOffset.UTC);\n                 } catch (NumberFormatException exception) {\n+                    logger.verbose(\"Invalid expiration time format in the SAS token: {}. Falling back to max \" +\n+                        \"expiration time.\", expirationTimeStr);\n                     return OffsetDateTime.MAX;\n                 }\n             })\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzNDg3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14912#discussion_r485234870", "bodyText": "Should we log this? It would be nice to understand why we returned offsetdatemax in case there was some incorrect formatting in the se.", "author": "conniey", "createdAt": "2020-09-08T22:43:00Z", "path": "sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/EventHubSharedKeyCredential.java", "diffHunk": "@@ -153,4 +180,22 @@ private AccessToken generateSharedAccessSignature(final String resource) throws\n \n         return new AccessToken(token, expiresOn);\n     }\n+\n+    private OffsetDateTime getExpirationTime(String sharedAccessSignature) {\n+        String[] parts = sharedAccessSignature.split(\"&\");\n+        return Arrays.stream(parts)\n+            .map(part -> part.split(\"=\"))\n+            .filter(pair -> pair.length == 2 && pair[0].equalsIgnoreCase(\"se\"))\n+            .findFirst()\n+            .map(pair -> pair[1])\n+            .map(expirationTimeStr -> {\n+                try {\n+                    long epochSeconds = Long.parseLong(expirationTimeStr);\n+                    return new Date(epochSeconds * 1000).toInstant().atOffset(ZoneOffset.UTC);\n+                } catch (NumberFormatException exception) {\n+                    return OffsetDateTime.MAX;", "originalCommit": "2adb95aa0b7f8ceaaede2a058e19ae2458848e77", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f0dd1c9ac6eb435a90ae560a2441f8ae81c6df51", "chunk": "diff --git a/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/EventHubSharedKeyCredential.java b/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/EventHubSharedKeyCredential.java\nindex e2a28e169ce..01f98b44768 100644\n--- a/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/EventHubSharedKeyCredential.java\n+++ b/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/implementation/EventHubSharedKeyCredential.java\n\n@@ -191,8 +191,10 @@ public class EventHubSharedKeyCredential implements TokenCredential {\n             .map(expirationTimeStr -> {\n                 try {\n                     long epochSeconds = Long.parseLong(expirationTimeStr);\n-                    return new Date(epochSeconds * 1000).toInstant().atOffset(ZoneOffset.UTC);\n+                    return Instant.ofEpochSecond(epochSeconds).atOffset(ZoneOffset.UTC);\n                 } catch (NumberFormatException exception) {\n+                    logger.verbose(\"Invalid expiration time format in the SAS token: {}. Falling back to max \" +\n+                        \"expiration time.\", expirationTimeStr);\n                     return OffsetDateTime.MAX;\n                 }\n             })\n"}}, {"oid": "f0dd1c9ac6eb435a90ae560a2441f8ae81c6df51", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f0dd1c9ac6eb435a90ae560a2441f8ae81c6df51", "message": "review comments", "committedDate": "2020-09-08T23:05:00Z", "type": "commit"}, {"oid": "052d155f9603233d3fbc9b966add53729665355c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/052d155f9603233d3fbc9b966add53729665355c", "message": "Fix checkstyle", "committedDate": "2020-09-08T23:26:43Z", "type": "commit"}, {"oid": "0dfbc09ddd08dcc9a8407a3f57647d3100e367ac", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0dfbc09ddd08dcc9a8407a3f57647d3100e367ac", "message": "Fix checkstyle", "committedDate": "2020-09-08T23:52:41Z", "type": "commit"}]}