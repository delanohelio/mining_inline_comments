{"pr_number": 18207, "pr_title": "Create obo clientRegistration Repo ", "pr_createdAt": "2020-12-17T08:27:59Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/18207", "timeline": [{"oid": "d566cb740fec114e470dd2692a7f3040ecd28e8a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d566cb740fec114e470dd2692a7f3040ecd28e8a", "message": "Create obo clientRegistration Repo", "committedDate": "2020-12-17T07:54:35Z", "type": "commit"}, {"oid": "43d54a4a587482df96fa8f25fa88615bb2cbf829", "url": "https://github.com/Azure/azure-sdk-for-java/commit/43d54a4a587482df96fa8f25fa88615bb2cbf829", "message": "modify spot bugs 'URF_UNREAD_FIELD' for OboCRRepo", "committedDate": "2020-12-17T09:10:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUyNDYyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r545524626", "bodyText": "WebAppClientsProperties", "author": "chenrujun", "createdAt": "2020-12-18T02:03:04Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java", "diffHunk": "@@ -26,31 +24,30 @@\n @Configuration(proxyBeanMethods = false)\n @ConditionalOnResource(resources = \"classpath:aad.enable.config\")\n @EnableConfigurationProperties({ AADAuthenticationProperties.class })\n-@ConditionalOnClass({BearerTokenAuthenticationToken.class, OAuth2LoginAuthenticationFilter.class})\n+@ConditionalOnClass({ BearerTokenAuthenticationToken.class, OAuth2LoginAuthenticationFilter.class })\n public class AzureActiveDirectoryResourceServerClientConfiguration {\n \n     @Autowired\n-    private AADAuthenticationProperties aadAuthenticationProperties;\n+    private AADAuthenticationProperties properties;", "originalCommit": "43d54a4a587482df96fa8f25fa88615bb2cbf829", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2b2c8a31ce8520871b72a0f28d70935224146f3a", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java\nindex 1b5d946388e..2b68ca7ffe7 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java\n\n@@ -31,23 +37,52 @@ public class AzureActiveDirectoryResourceServerClientConfiguration {\n     private AADAuthenticationProperties properties;\n \n     @Bean\n-    @ConditionalOnMissingBean({ ClientRegistrationRepository.class, OboClientRegistrationRepository.class })\n-    public OboClientRegistrationRepository oboClientRegistrationRepository() {\n-\n-        ClientRegistrationInitialization clientInitialization = new ClientRegistrationInitialization(properties);\n-\n-        return new OboClientRegistrationRepository(clientInitialization.createAuthzClients(), properties);\n+    @ConditionalOnMissingBean({ ClientRegistrationRepository.class, AADOboClientRegistrationRepository.class })\n+    public AADOboClientRegistrationRepository oboClientRegistrationRepository() {\n+        return new AADOboClientRegistrationRepository(createAuthzClients());\n     }\n \n     /**\n-     * Use OboClientRegistrationRepository to create AADOAuth2OboAuthorizedClientRepository\n-     *\n+     * Use AADOboClientRegistrationRepository to create AADOAuth2OboAuthorizedClientRepository\n      * @param repo client registration\n      * @return AADOAuth2OboAuthorizedClientRepository Bean\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    public OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(OboClientRegistrationRepository repo) {\n+    public OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(AADOboClientRegistrationRepository repo) {\n         return new AADOAuth2OboAuthorizedClientRepository(repo);\n     }\n+\n+    public List<ClientRegistration> createAuthzClients() {\n+        List<ClientRegistration> result = new ArrayList<>();\n+        for (String name : properties.getWebApiClients().keySet()) {\n+            AADOboAuthorizationProperties authz = properties.getWebApiClients().get(name);\n+            result.add(createClientBuilder(name, authz));\n+        }\n+        return result;\n+    }\n+\n+    private ClientRegistration createClientBuilder(String id, AADOboAuthorizationProperties authz) {\n+        ClientRegistration.Builder result = createClientBuilder(id);\n+        result.scope(authz.getScopes());\n+        return result.build();\n+    }\n+\n+    private ClientRegistration.Builder createClientBuilder(String id) {\n+        ClientRegistration.Builder result = ClientRegistration.withRegistrationId(id);\n+        result.authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN);\n+        result.redirectUriTemplate(\"{baseUrl}/login/oauth2/code/{registrationId}\");\n+\n+        result.clientId(properties.getClientId());\n+        result.clientSecret(properties.getClientSecret());\n+\n+        AuthorizationServerEndpoints endpoints =\n+            new AuthorizationServerEndpoints(properties.getAuthorizationServerUri());\n+        result.authorizationUri(endpoints.authorizationEndpoint(properties.getTenantId()));\n+        result.tokenUri(endpoints.tokenEndpoint(properties.getTenantId()));\n+        result.jwkSetUri(endpoints.jwkSetEndpoint(properties.getTenantId()));\n+\n+        return result;\n+    }\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUyNDkwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r545524905", "bodyText": "Use name like WebApiClientRegistrationRepository, WebAppClientRegistrationRepository", "author": "chenrujun", "createdAt": "2020-12-18T02:03:54Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/OboClientRegistrationRepository.java", "diffHunk": "@@ -0,0 +1,48 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * ClientRegistration Repository for obo flow\n+ */\n+public class OboClientRegistrationRepository implements ClientRegistrationRepository, Iterable<ClientRegistration> {", "originalCommit": "43d54a4a587482df96fa8f25fa88615bb2cbf829", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2b2c8a31ce8520871b72a0f28d70935224146f3a", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/OboClientRegistrationRepository.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOboClientRegistrationRepository.java\nsimilarity index 65%\nrename from sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/OboClientRegistrationRepository.java\nrename to sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOboClientRegistrationRepository.java\nindex 6b245db7675..1ffba517a43 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/OboClientRegistrationRepository.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOboClientRegistrationRepository.java\n\n@@ -3,7 +3,6 @@\n \n package com.azure.spring.aad.webapi;\n \n-import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n import org.jetbrains.annotations.NotNull;\n import org.springframework.security.oauth2.client.registration.ClientRegistration;\n import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUyNTQ1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r545525450", "bodyText": "Use name like AADWebAppOAuth2AuthorizedClientRepository, AADWebApiOAuth2AuthorizedClientRepository", "author": "chenrujun", "createdAt": "2020-12-18T02:05:35Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java", "diffHunk": "@@ -26,31 +24,30 @@\n @Configuration(proxyBeanMethods = false)\n @ConditionalOnResource(resources = \"classpath:aad.enable.config\")\n @EnableConfigurationProperties({ AADAuthenticationProperties.class })\n-@ConditionalOnClass({BearerTokenAuthenticationToken.class, OAuth2LoginAuthenticationFilter.class})\n+@ConditionalOnClass({ BearerTokenAuthenticationToken.class, OAuth2LoginAuthenticationFilter.class })\n public class AzureActiveDirectoryResourceServerClientConfiguration {\n \n     @Autowired\n-    private AADAuthenticationProperties aadAuthenticationProperties;\n+    private AADAuthenticationProperties properties;\n \n     @Bean\n-    @ConditionalOnMissingBean({ ClientRegistrationRepository.class, AzureClientRegistrationRepository.class })\n-    public AzureClientRegistrationRepository azureClientRegistrationRepository() {\n-        ClientRegistrationInitialization clientRegistrationInitialization =\n-            new ClientRegistrationInitialization(aadAuthenticationProperties);\n-        return new AzureClientRegistrationRepository(\n-            clientRegistrationInitialization.createDefaultClient(),\n-            clientRegistrationInitialization.createAuthzClients(),\n-            aadAuthenticationProperties);\n+    @ConditionalOnMissingBean({ ClientRegistrationRepository.class, OboClientRegistrationRepository.class })\n+    public OboClientRegistrationRepository oboClientRegistrationRepository() {\n+\n+        ClientRegistrationInitialization clientInitialization = new ClientRegistrationInitialization(properties);\n+\n+        return new OboClientRegistrationRepository(clientInitialization.createAuthzClients(), properties);\n     }\n \n     /**\n-     * Use AzureClientRegistrationRepository to create AADOAuth2OboAuthorizedClientRepository\n+     * Use OboClientRegistrationRepository to create AADOAuth2OboAuthorizedClientRepository\n+     *\n      * @param repo client registration\n      * @return AADOAuth2OboAuthorizedClientRepository Bean\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    public OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(AzureClientRegistrationRepository repo) {\n+    public OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(OboClientRegistrationRepository repo) {\n         return new AADOAuth2OboAuthorizedClientRepository(repo);", "originalCommit": "43d54a4a587482df96fa8f25fa88615bb2cbf829", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2b2c8a31ce8520871b72a0f28d70935224146f3a", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java\nindex 1b5d946388e..2b68ca7ffe7 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java\n\n@@ -31,23 +37,52 @@ public class AzureActiveDirectoryResourceServerClientConfiguration {\n     private AADAuthenticationProperties properties;\n \n     @Bean\n-    @ConditionalOnMissingBean({ ClientRegistrationRepository.class, OboClientRegistrationRepository.class })\n-    public OboClientRegistrationRepository oboClientRegistrationRepository() {\n-\n-        ClientRegistrationInitialization clientInitialization = new ClientRegistrationInitialization(properties);\n-\n-        return new OboClientRegistrationRepository(clientInitialization.createAuthzClients(), properties);\n+    @ConditionalOnMissingBean({ ClientRegistrationRepository.class, AADOboClientRegistrationRepository.class })\n+    public AADOboClientRegistrationRepository oboClientRegistrationRepository() {\n+        return new AADOboClientRegistrationRepository(createAuthzClients());\n     }\n \n     /**\n-     * Use OboClientRegistrationRepository to create AADOAuth2OboAuthorizedClientRepository\n-     *\n+     * Use AADOboClientRegistrationRepository to create AADOAuth2OboAuthorizedClientRepository\n      * @param repo client registration\n      * @return AADOAuth2OboAuthorizedClientRepository Bean\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    public OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(OboClientRegistrationRepository repo) {\n+    public OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(AADOboClientRegistrationRepository repo) {\n         return new AADOAuth2OboAuthorizedClientRepository(repo);\n     }\n+\n+    public List<ClientRegistration> createAuthzClients() {\n+        List<ClientRegistration> result = new ArrayList<>();\n+        for (String name : properties.getWebApiClients().keySet()) {\n+            AADOboAuthorizationProperties authz = properties.getWebApiClients().get(name);\n+            result.add(createClientBuilder(name, authz));\n+        }\n+        return result;\n+    }\n+\n+    private ClientRegistration createClientBuilder(String id, AADOboAuthorizationProperties authz) {\n+        ClientRegistration.Builder result = createClientBuilder(id);\n+        result.scope(authz.getScopes());\n+        return result.build();\n+    }\n+\n+    private ClientRegistration.Builder createClientBuilder(String id) {\n+        ClientRegistration.Builder result = ClientRegistration.withRegistrationId(id);\n+        result.authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN);\n+        result.redirectUriTemplate(\"{baseUrl}/login/oauth2/code/{registrationId}\");\n+\n+        result.clientId(properties.getClientId());\n+        result.clientSecret(properties.getClientSecret());\n+\n+        AuthorizationServerEndpoints endpoints =\n+            new AuthorizationServerEndpoints(properties.getAuthorizationServerUri());\n+        result.authorizationUri(endpoints.authorizationEndpoint(properties.getTenantId()));\n+        result.tokenUri(endpoints.tokenEndpoint(properties.getTenantId()));\n+        result.jwkSetUri(endpoints.jwkSetEndpoint(properties.getTenantId()));\n+\n+        return result;\n+    }\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUyNzI2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r545527261", "bodyText": "Not necessary to create a new class.", "author": "chenrujun", "createdAt": "2020-12-18T02:11:34Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/ClientRegistrationInitialization.java", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AuthorizationServerEndpoints;\n+import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Client registration initialization based on AAD properties. Web application and resource server will quote.\n+ */\n+public class ClientRegistrationInitialization {", "originalCommit": "43d54a4a587482df96fa8f25fa88615bb2cbf829", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2b2c8a31ce8520871b72a0f28d70935224146f3a", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/ClientRegistrationInitialization.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/ClientRegistrationInitialization.java\ndeleted file mode 100644\nindex 03045ca7637..00000000000\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/ClientRegistrationInitialization.java\n+++ /dev/null\n\n@@ -1,56 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.spring.aad.webapi;\n-\n-import com.azure.spring.aad.webapp.AuthorizationServerEndpoints;\n-import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n-import org.springframework.security.oauth2.client.registration.ClientRegistration;\n-import org.springframework.security.oauth2.core.AuthorizationGrantType;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-/**\n- * Client registration initialization based on AAD properties. Web application and resource server will quote.\n- */\n-public class ClientRegistrationInitialization {\n-\n-    private final AADAuthenticationProperties aadAuthenticationProperties;\n-\n-    public ClientRegistrationInitialization(AADAuthenticationProperties aadAuthenticationProperties) {\n-        this.aadAuthenticationProperties = aadAuthenticationProperties;\n-    }\n-\n-    public List<ClientRegistration> createAuthzClients() {\n-        List<ClientRegistration> result = new ArrayList<>();\n-        for (String name : aadAuthenticationProperties.getWebApiClients().keySet()) {\n-            WebApiAuthorizationProperties authz = aadAuthenticationProperties.getWebApiClients().get(name);\n-            result.add(createClientBuilder(name, authz));\n-        }\n-        return result;\n-    }\n-\n-    private ClientRegistration createClientBuilder(String id, WebApiAuthorizationProperties authz) {\n-        ClientRegistration.Builder result = createClientBuilder(id);\n-        result.scope(authz.getScopes());\n-        return result.build();\n-    }\n-\n-    private ClientRegistration.Builder createClientBuilder(String id) {\n-        ClientRegistration.Builder result = ClientRegistration.withRegistrationId(id);\n-        result.authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN);\n-        result.redirectUriTemplate(\"{baseUrl}/login/oauth2/code/{registrationId}\");\n-\n-        result.clientId(aadAuthenticationProperties.getClientId());\n-        result.clientSecret(aadAuthenticationProperties.getClientSecret());\n-\n-        AuthorizationServerEndpoints endpoints =\n-            new AuthorizationServerEndpoints(aadAuthenticationProperties.getAuthorizationServerUri());\n-        result.authorizationUri(endpoints.authorizationEndpoint(aadAuthenticationProperties.getTenantId()));\n-        result.tokenUri(endpoints.tokenEndpoint(aadAuthenticationProperties.getTenantId()));\n-        result.jwkSetUri(endpoints.jwkSetEndpoint(aadAuthenticationProperties.getTenantId()));\n-\n-        return result;\n-    }\n-}\n"}}, {"oid": "ca54c13b55361f4c7116665a9c85b5793eda9921", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ca54c13b55361f4c7116665a9c85b5793eda9921", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into create-obo-clientRegistration-repo\n\n# Conflicts:\n#\tsdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\n#\tsdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADWebApiConfiguration.java\n#\tsdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepositoryTest.java\n#\tsdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADWebApiConfigurationTest.java", "committedDate": "2020-12-18T08:04:10Z", "type": "commit"}, {"oid": "2b2c8a31ce8520871b72a0f28d70935224146f3a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2b2c8a31ce8520871b72a0f28d70935224146f3a", "message": "Refactor AADOboClientRegRepo and modify ClassName for Package WebApi", "committedDate": "2020-12-18T09:28:10Z", "type": "commit"}, {"oid": "36537f5fe89c296cbeb5bfa8d7e0c3cf065f719f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/36537f5fe89c296cbeb5bfa8d7e0c3cf065f719f", "message": "Delete obo above in spotbugs", "committedDate": "2020-12-18T09:31:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4MzY2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r546483663", "bodyText": "No need for this properties class anymore.", "author": "saragluna", "createdAt": "2020-12-21T02:49:33Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOboAuthorizationProperties.java", "diffHunk": "@@ -0,0 +1,22 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import java.util.List;\n+\n+/**\n+ * Authorization Properties for an Web api.\n+ */\n+public class AADOboAuthorizationProperties {", "originalCommit": "36537f5fe89c296cbeb5bfa8d7e0c3cf065f719f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d915c43acd60021d00408635f9eb708627e11ae", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOboAuthorizationProperties.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOboAuthorizationProperties.java\ndeleted file mode 100644\nindex 56424cf306b..00000000000\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOboAuthorizationProperties.java\n+++ /dev/null\n\n@@ -1,22 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.spring.aad.webapi;\n-\n-import java.util.List;\n-\n-/**\n- * Authorization Properties for an Web api.\n- */\n-public class AADOboAuthorizationProperties {\n-\n-    private List<String> scopes;\n-\n-    public List<String> getScopes() {\n-        return scopes;\n-    }\n-\n-    public void setScopes(List<String> scopes) {\n-        this.scopes = scopes;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4Mzc3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r546483778", "bodyText": "Change the class name to AADResourceServerOboConfiguration", "author": "saragluna", "createdAt": "2020-12-21T02:50:09Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java", "diffHunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AuthorizationServerEndpoints;\n+import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * <p>\n+ * The configuration will not be activated if no {@link OAuth2LoginAuthenticationFilter} class provided.\n+ * </p>\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@ConditionalOnResource(resources = \"classpath:aad.enable.config\")\n+@EnableConfigurationProperties({ AADAuthenticationProperties.class })\n+@ConditionalOnClass({ BearerTokenAuthenticationToken.class, OAuth2LoginAuthenticationFilter.class })\n+public class AzureActiveDirectoryResourceServerClientConfiguration {", "originalCommit": "36537f5fe89c296cbeb5bfa8d7e0c3cf065f719f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d915c43acd60021d00408635f9eb708627e11ae", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java\nsimilarity index 84%\nrename from sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java\nrename to sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java\nindex 2b68ca7ffe7..dd8e9298930 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java\n\n@@ -3,6 +3,7 @@\n \n package com.azure.spring.aad.webapi;\n \n+import com.azure.spring.aad.webapp.AuthorizationProperties;\n import com.azure.spring.aad.webapp.AuthorizationServerEndpoints;\n import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4MzkwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r546483901", "bodyText": "use meaningful name instead of authz", "author": "saragluna", "createdAt": "2020-12-21T02:50:48Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java", "diffHunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AuthorizationServerEndpoints;\n+import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * <p>\n+ * The configuration will not be activated if no {@link OAuth2LoginAuthenticationFilter} class provided.\n+ * </p>\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@ConditionalOnResource(resources = \"classpath:aad.enable.config\")\n+@EnableConfigurationProperties({ AADAuthenticationProperties.class })\n+@ConditionalOnClass({ BearerTokenAuthenticationToken.class, OAuth2LoginAuthenticationFilter.class })\n+public class AzureActiveDirectoryResourceServerClientConfiguration {\n+\n+    @Autowired\n+    private AADAuthenticationProperties properties;\n+\n+    @Bean\n+    @ConditionalOnMissingBean({ ClientRegistrationRepository.class, AADOboClientRegistrationRepository.class })\n+    public AADOboClientRegistrationRepository oboClientRegistrationRepository() {\n+        return new AADOboClientRegistrationRepository(createAuthzClients());\n+    }\n+\n+    /**\n+     * Use AADOboClientRegistrationRepository to create AADOAuth2OboAuthorizedClientRepository\n+     * @param repo client registration\n+     * @return AADOAuth2OboAuthorizedClientRepository Bean\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(AADOboClientRegistrationRepository repo) {\n+        return new AADOAuth2OboAuthorizedClientRepository(repo);\n+    }\n+\n+    public List<ClientRegistration> createAuthzClients() {\n+        List<ClientRegistration> result = new ArrayList<>();\n+        for (String name : properties.getWebApiClients().keySet()) {\n+            AADOboAuthorizationProperties authz = properties.getWebApiClients().get(name);", "originalCommit": "36537f5fe89c296cbeb5bfa8d7e0c3cf065f719f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d915c43acd60021d00408635f9eb708627e11ae", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java\nsimilarity index 84%\nrename from sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java\nrename to sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java\nindex 2b68ca7ffe7..dd8e9298930 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java\n\n@@ -3,6 +3,7 @@\n \n package com.azure.spring.aad.webapi;\n \n+import com.azure.spring.aad.webapp.AuthorizationProperties;\n import com.azure.spring.aad.webapp.AuthorizationServerEndpoints;\n import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NDA1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r546484057", "bodyText": "Seems like we don't need this function, we could inline these logic.", "author": "saragluna", "createdAt": "2020-12-21T02:51:28Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java", "diffHunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AuthorizationServerEndpoints;\n+import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * <p>\n+ * The configuration will not be activated if no {@link OAuth2LoginAuthenticationFilter} class provided.\n+ * </p>\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@ConditionalOnResource(resources = \"classpath:aad.enable.config\")\n+@EnableConfigurationProperties({ AADAuthenticationProperties.class })\n+@ConditionalOnClass({ BearerTokenAuthenticationToken.class, OAuth2LoginAuthenticationFilter.class })\n+public class AzureActiveDirectoryResourceServerClientConfiguration {\n+\n+    @Autowired\n+    private AADAuthenticationProperties properties;\n+\n+    @Bean\n+    @ConditionalOnMissingBean({ ClientRegistrationRepository.class, AADOboClientRegistrationRepository.class })\n+    public AADOboClientRegistrationRepository oboClientRegistrationRepository() {\n+        return new AADOboClientRegistrationRepository(createAuthzClients());\n+    }\n+\n+    /**\n+     * Use AADOboClientRegistrationRepository to create AADOAuth2OboAuthorizedClientRepository\n+     * @param repo client registration\n+     * @return AADOAuth2OboAuthorizedClientRepository Bean\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(AADOboClientRegistrationRepository repo) {\n+        return new AADOAuth2OboAuthorizedClientRepository(repo);\n+    }\n+\n+    public List<ClientRegistration> createAuthzClients() {\n+        List<ClientRegistration> result = new ArrayList<>();\n+        for (String name : properties.getWebApiClients().keySet()) {\n+            AADOboAuthorizationProperties authz = properties.getWebApiClients().get(name);\n+            result.add(createClientBuilder(name, authz));\n+        }\n+        return result;\n+    }\n+\n+    private ClientRegistration createClientBuilder(String id, AADOboAuthorizationProperties authz) {", "originalCommit": "36537f5fe89c296cbeb5bfa8d7e0c3cf065f719f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d915c43acd60021d00408635f9eb708627e11ae", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java\nsimilarity index 84%\nrename from sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java\nrename to sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java\nindex 2b68ca7ffe7..dd8e9298930 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AzureActiveDirectoryResourceServerClientConfiguration.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java\n\n@@ -3,6 +3,7 @@\n \n package com.azure.spring.aad.webapi;\n \n+import com.azure.spring.aad.webapp.AuthorizationProperties;\n import com.azure.spring.aad.webapp.AuthorizationServerEndpoints;\n import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NDEzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r546484132", "bodyText": "No need for this property field.", "author": "saragluna", "createdAt": "2020-12-21T02:51:52Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AADAuthenticationProperties.java", "diffHunk": "@@ -104,6 +105,8 @@\n \n     private Map<String, AuthorizationProperties> authorization = new HashMap<>();\n \n+    private Map<String, AADOboAuthorizationProperties> webApiClients  = new HashMap<>();", "originalCommit": "36537f5fe89c296cbeb5bfa8d7e0c3cf065f719f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3d915c43acd60021d00408635f9eb708627e11ae", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AADAuthenticationProperties.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AADAuthenticationProperties.java\nindex b1f12b53c29..6540f95d6b6 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AADAuthenticationProperties.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/autoconfigure/aad/AADAuthenticationProperties.java\n\n@@ -105,8 +104,6 @@ public class AADAuthenticationProperties {\n \n     private Map<String, AuthorizationProperties> authorization = new HashMap<>();\n \n-    private Map<String, AADOboAuthorizationProperties> webApiClients  = new HashMap<>();\n-\n     @DeprecatedConfigurationProperty(\n         reason = \"Configuration moved to UserGroup class to keep UserGroup properties together\",\n         replacement = \"azure.activedirectory.user-group.allowed-groups\")\n"}}, {"oid": "3d915c43acd60021d00408635f9eb708627e11ae", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3d915c43acd60021d00408635f9eb708627e11ae", "message": "Rename some details for package 'webapi' and refactor 'web-api-clients'", "committedDate": "2020-12-21T04:31:14Z", "type": "commit"}, {"oid": "49b3026f73d0e791184df6167c0a4ff1ac0d2d3d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/49b3026f73d0e791184df6167c0a4ff1ac0d2d3d", "message": " inline createClientBuilder's logic to createOboClients", "committedDate": "2020-12-21T04:53:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUyMDcwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r546520703", "bodyText": "This is not correct?", "author": "saragluna", "createdAt": "2020-12-21T05:49:15Z", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepositoryTest.java", "diffHunk": "@@ -56,12 +54,12 @@ public void setup() {\n             AAD_PROPERTY_PREFIX + \"tenant-id = fake-tenant-id\",\n             AAD_PROPERTY_PREFIX + \"client-id = fake-client-id\",\n             AAD_PROPERTY_PREFIX + \"client-secret = fake-client-secret\",\n-            AAD_PROPERTY_PREFIX + \"authorization.fake-graph.scopes = https://graph.microsoft.com/.default\"\n+            AAD_PROPERTY_PREFIX + \"webApiClients.fake-graph.scopes = https://graph.microsoft.com/.default\"", "originalCommit": "49b3026f73d0e791184df6167c0a4ff1ac0d2d3d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55ed418791cb3b36d093ad682260f1cf76398dd9", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepositoryTest.java b/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepositoryTest.java\nindex 812892f44c2..6687167260a 100644\n--- a/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepositoryTest.java\n+++ b/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepositoryTest.java\n\n@@ -54,7 +54,7 @@ public class AADOAuth2OboAuthorizedClientRepositoryTest {\n             AAD_PROPERTY_PREFIX + \"tenant-id = fake-tenant-id\",\n             AAD_PROPERTY_PREFIX + \"client-id = fake-client-id\",\n             AAD_PROPERTY_PREFIX + \"client-secret = fake-client-secret\",\n-            AAD_PROPERTY_PREFIX + \"webApiClients.fake-graph.scopes = https://graph.microsoft.com/.default\"\n+            AAD_PROPERTY_PREFIX + \"authorization.fake-graph.scopes = https://graph.microsoft.com/.default\"\n         );\n         context.register(AADResourceServerOboConfiguration.class);\n         context.refresh();\n"}}, {"oid": "55ed418791cb3b36d093ad682260f1cf76398dd9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/55ed418791cb3b36d093ad682260f1cf76398dd9", "message": "Modify some detail in obo Repo Ut", "committedDate": "2020-12-21T05:53:21Z", "type": "commit"}, {"oid": "da2871fd226cced17f36b12900e5be04b0a21383", "url": "https://github.com/Azure/azure-sdk-for-java/commit/da2871fd226cced17f36b12900e5be04b0a21383", "message": "Modify some detail", "committedDate": "2020-12-21T08:12:28Z", "type": "commit"}, {"oid": "71160f7ca2f514ad2c0db330d20986dff7e94911", "url": "https://github.com/Azure/azure-sdk-for-java/commit/71160f7ca2f514ad2c0db330d20986dff7e94911", "message": "Add 'testPropertyNotCorrect'", "committedDate": "2020-12-21T09:25:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3MTY1Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547071657", "bodyText": "Can we use InMemoryClientRegistrationRepository instead of create AADOboClientRegistrationRepository?", "author": "chenrujun", "createdAt": "2020-12-22T05:12:24Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOboClientRegistrationRepository.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * ClientRegistration Repository for obo flow\n+ */\n+public class AADOboClientRegistrationRepository implements ClientRegistrationRepository, Iterable<ClientRegistration> {", "originalCommit": "71160f7ca2f514ad2c0db330d20986dff7e94911", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3OTM0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547079349", "bodyText": "@wujack778  I think we could use InMemoryClientRegistrationRepository directly since we don't have special logic in the client registration repo here.", "author": "saragluna", "createdAt": "2020-12-22T05:41:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA3MTY1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "97248748cc4bbd7e0447e249ec5c08f8f50420e4", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOboClientRegistrationRepository.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOboClientRegistrationRepository.java\ndeleted file mode 100644\nindex 1ffba517a43..00000000000\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOboClientRegistrationRepository.java\n+++ /dev/null\n\n@@ -1,39 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.spring.aad.webapi;\n-\n-import org.jetbrains.annotations.NotNull;\n-import org.springframework.security.oauth2.client.registration.ClientRegistration;\n-import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n-\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-\n-/**\n- * ClientRegistration Repository for obo flow\n- */\n-public class AADOboClientRegistrationRepository implements ClientRegistrationRepository, Iterable<ClientRegistration> {\n-\n-    private final Map<String, ClientRegistration> allClients;\n-\n-    public AADOboClientRegistrationRepository(List<ClientRegistration> resourceClients) {\n-        allClients = new HashMap<>();\n-        for (ClientRegistration c : resourceClients) {\n-            allClients.put(c.getRegistrationId(), c);\n-        }\n-    }\n-\n-    @Override\n-    public ClientRegistration findByRegistrationId(String registrationId) {\n-        return allClients.get(registrationId);\n-    }\n-\n-    @NotNull\n-    @Override\n-    public Iterator<ClientRegistration> iterator() {\n-        return allClients.values().iterator();\n-    }\n-}\n"}}, {"oid": "6c2582dbac8498b1c0e25b306be2a85e57f7e4f0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6c2582dbac8498b1c0e25b306be2a85e57f7e4f0", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into create-obo-clientRegistration-repo", "committedDate": "2020-12-22T05:56:46Z", "type": "commit"}, {"oid": "97248748cc4bbd7e0447e249ec5c08f8f50420e4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/97248748cc4bbd7e0447e249ec5c08f8f50420e4", "message": " Replace AADOboClientRegistrationRepository with  InMemoryClientRegistrationRepository", "committedDate": "2020-12-22T07:52:26Z", "type": "commit"}, {"oid": "e64003c0b23533248807104caea8d4b7f5e4b001", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e64003c0b23533248807104caea8d4b7f5e4b001", "message": "Modify details for checkStyle", "committedDate": "2020-12-22T08:25:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3NjA4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547576085", "bodyText": "Can we assert the value instead of assert size?", "author": "chenrujun", "createdAt": "2020-12-23T00:46:56Z", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import org.junit.Test;\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class AADResourceServerOboConfigurationTest {\n+\n+    private static final String AAD_PROPERTY_PREFIX = \"azure.activedirectory.\";\n+\n+    private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n+        .withPropertyValues(\n+            AAD_PROPERTY_PREFIX + \"tenant-id=fake-tenant-id\",\n+            AAD_PROPERTY_PREFIX + \"client-id=fake-client-id\",\n+            AAD_PROPERTY_PREFIX + \"client-secret=fake-client-secret\");\n+\n+    @Test\n+    public void testNotExistBearerTokenAuthenticationToken() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testNotExistOAuth2LoginAuthenticationFilter() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(OAuth2LoginAuthenticationFilter.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testOnlyGraphClient() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withPropertyValues(AAD_PROPERTY_PREFIX + \"authorization.graph.scopes=User.read\")\n+            .run(context -> {\n+                final InMemoryClientRegistrationRepository oboRepo = context.getBean(\n+                    InMemoryClientRegistrationRepository.class);\n+                final OAuth2AuthorizedClientRepository aadOboRepo = context.getBean(\n+                    AADOAuth2OboAuthorizedClientRepository.class);\n+\n+                ClientRegistration graph = oboRepo.findByRegistrationId(\"graph\");\n+                Set<String> graphScopes = graph.getScopes();\n+\n+                assertThat(aadOboRepo).isNotNull();\n+                assertThat(oboRepo).isExactlyInstanceOf(InMemoryClientRegistrationRepository.class);\n+                assertThat(graph).isNotNull();\n+                assertThat(graphScopes).hasSize(1);\n+            });\n+    }\n+\n+    @Test\n+    public void testExistCustomAndGraphClient() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withPropertyValues(AAD_PROPERTY_PREFIX + \"authorization.graph.scopes=User.read\")\n+            .withPropertyValues(AAD_PROPERTY_PREFIX + \"authorization.custom.scopes=User.read\")\n+            .run(context -> {\n+                final InMemoryClientRegistrationRepository oboRepo = context.getBean(\n+                    InMemoryClientRegistrationRepository.class);\n+                final OAuth2AuthorizedClientRepository aadOboRepo = context.getBean(\n+                    AADOAuth2OboAuthorizedClientRepository.class);\n+\n+                ClientRegistration graph = oboRepo.findByRegistrationId(\"graph\");\n+                ClientRegistration custom = oboRepo.findByRegistrationId(\"custom\");\n+                Set<String> graphScopes = graph.getScopes();\n+                Set<String> customScopes = custom.getScopes();\n+\n+                assertThat(aadOboRepo).isNotNull();\n+                assertThat(oboRepo).isExactlyInstanceOf(InMemoryClientRegistrationRepository.class);\n+                assertThat(graph).isNotNull();\n+                assertThat(customScopes).isNotNull();\n+                assertThat(graphScopes).hasSize(1);\n+                assertThat(customScopes).hasSize(1);", "originalCommit": "e64003c0b23533248807104caea8d4b7f5e4b001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU5MzYzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547593636", "bodyText": "sure", "author": "wujack778", "createdAt": "2020-12-23T01:41:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3NjA4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "bd4951e7dcc0937cd9c65c6bb6258787bb68c7d8", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java b/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java\nindex e9640f830eb..65ae1a3c0f1 100644\n--- a/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java\n+++ b/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java\n\n@@ -18,13 +18,11 @@ import static org.assertj.core.api.Assertions.assertThat;\n \n public class AADResourceServerOboConfigurationTest {\n \n-    private static final String AAD_PROPERTY_PREFIX = \"azure.activedirectory.\";\n-\n     private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n         .withPropertyValues(\n-            AAD_PROPERTY_PREFIX + \"tenant-id=fake-tenant-id\",\n-            AAD_PROPERTY_PREFIX + \"client-id=fake-client-id\",\n-            AAD_PROPERTY_PREFIX + \"client-secret=fake-client-secret\");\n+            \"azure.activedirectory.tenant-id=fake-tenant-id\",\n+            \"azure.activedirectory.client-id=fake-client-id\",\n+            \"azure.activedirectory.client-secret=fake-client-secret\");\n \n     @Test\n     public void testNotExistBearerTokenAuthenticationToken() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3NjQ5MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547576490", "bodyText": "I think AAD_PROPERTY_PREFIX is not necessary.", "author": "chenrujun", "createdAt": "2020-12-23T00:48:26Z", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import org.junit.Test;\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class AADResourceServerOboConfigurationTest {\n+\n+    private static final String AAD_PROPERTY_PREFIX = \"azure.activedirectory.\";", "originalCommit": "e64003c0b23533248807104caea8d4b7f5e4b001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU5MzExOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547593119", "bodyText": "fine", "author": "wujack778", "createdAt": "2020-12-23T01:39:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3NjQ5MA=="}], "type": "inlineReview", "revised_code": {"commit": "bd4951e7dcc0937cd9c65c6bb6258787bb68c7d8", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java b/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java\nindex e9640f830eb..65ae1a3c0f1 100644\n--- a/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java\n+++ b/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java\n\n@@ -18,13 +18,11 @@ import static org.assertj.core.api.Assertions.assertThat;\n \n public class AADResourceServerOboConfigurationTest {\n \n-    private static final String AAD_PROPERTY_PREFIX = \"azure.activedirectory.\";\n-\n     private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n         .withPropertyValues(\n-            AAD_PROPERTY_PREFIX + \"tenant-id=fake-tenant-id\",\n-            AAD_PROPERTY_PREFIX + \"client-id=fake-client-id\",\n-            AAD_PROPERTY_PREFIX + \"client-secret=fake-client-secret\");\n+            \"azure.activedirectory.tenant-id=fake-tenant-id\",\n+            \"azure.activedirectory.client-id=fake-client-id\",\n+            \"azure.activedirectory.client-secret=fake-client-secret\");\n \n     @Test\n     public void testNotExistBearerTokenAuthenticationToken() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3Njk3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547576975", "bodyText": "After discuss with jialin, we think shorter name will make code easier to read. So I suggest to rename inMemoryClientRegistrationRepository to repository", "author": "chenrujun", "createdAt": "2020-12-23T00:50:35Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java", "diffHunk": "@@ -36,11 +37,11 @@\n \n     private static final String OBO_AUTHORIZEDCLIENT_PREFIX = \"obo_authorizedclient_\";\n \n-    private final AADWebApiClientRegistrationRepository aadWebApiClientRegistrationRepository;\n+    private final InMemoryClientRegistrationRepository inMemoryClientRegistrationRepository;", "originalCommit": "e64003c0b23533248807104caea8d4b7f5e4b001", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd4951e7dcc0937cd9c65c6bb6258787bb68c7d8", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\nindex 736c7fc5548..f16fca4ebe5 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2OboAuthorizedClientRepository.java\n\n@@ -37,11 +37,11 @@ public class AADOAuth2OboAuthorizedClientRepository implements OAuth2AuthorizedC\n \n     private static final String OBO_AUTHORIZEDCLIENT_PREFIX = \"obo_authorizedclient_\";\n \n-    private final InMemoryClientRegistrationRepository inMemoryClientRegistrationRepository;\n+    private final InMemoryClientRegistrationRepository repository;\n \n     public AADOAuth2OboAuthorizedClientRepository(\n-        InMemoryClientRegistrationRepository inMemoryClientRegistrationRepository) {\n-        this.inMemoryClientRegistrationRepository = inMemoryClientRegistrationRepository;\n+        InMemoryClientRegistrationRepository repository) {\n+        this.repository = repository;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3NzMxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547577319", "bodyText": "Reformat this code. For example\npublic OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(\n    InMemoryClientRegistrationRepository repo) {", "author": "chenrujun", "createdAt": "2020-12-23T00:52:07Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java", "diffHunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AuthorizationProperties;\n+import com.azure.spring.aad.webapp.AuthorizationServerEndpoints;\n+import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * <p>\n+ * The configuration will not be activated if no {@link OAuth2LoginAuthenticationFilter} class provided.\n+ * </p>\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@ConditionalOnResource(resources = \"classpath:aad.enable.config\")\n+@EnableConfigurationProperties({ AADAuthenticationProperties.class })\n+@ConditionalOnClass({ BearerTokenAuthenticationToken.class, OAuth2LoginAuthenticationFilter.class })\n+public class AADResourceServerOboConfiguration {\n+\n+    @Autowired\n+    private AADAuthenticationProperties properties;\n+\n+    @Bean\n+    @ConditionalOnMissingBean({ ClientRegistrationRepository.class, InMemoryClientRegistrationRepository.class })\n+    public ClientRegistrationRepository oboClientRegistrationRepository() {\n+        return new InMemoryClientRegistrationRepository(createOboClients());\n+    }\n+\n+    /**\n+     * Use InMemoryClientRegistrationRepository to create AADOAuth2OboAuthorizedClientRepository\n+     *\n+     * @param repo client registration\n+     * @return AADOAuth2OboAuthorizedClientRepository Bean\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(InMemoryClientRegistrationRepository\n+                                                                                 repo) {", "originalCommit": "e64003c0b23533248807104caea8d4b7f5e4b001", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd4951e7dcc0937cd9c65c6bb6258787bb68c7d8", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java\nindex ff81753192e..67771350560 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java\n\n@@ -52,8 +52,8 @@ public class AADResourceServerOboConfiguration {\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    public OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(InMemoryClientRegistrationRepository\n-                                                                                 repo) {\n+    public OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(\n+        InMemoryClientRegistrationRepository repo) {\n         return new AADOAuth2OboAuthorizedClientRepository(repo);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3ODcxNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547578714", "bodyText": "Suggestions:\n\nReuse this part of code.\nAdd tenantId in AuthorizationServerEndpoints, just like baseUri.\nConsider whether we need endSessionEndpoint for resource server.\n\nIt's OK to to these in another PR.", "author": "chenrujun", "createdAt": "2020-12-23T00:57:04Z", "path": "sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java", "diffHunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import com.azure.spring.aad.webapp.AuthorizationProperties;\n+import com.azure.spring.aad.webapp.AuthorizationServerEndpoints;\n+import com.azure.spring.autoconfigure.aad.AADAuthenticationProperties;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnResource;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * <p>\n+ * The configuration will not be activated if no {@link OAuth2LoginAuthenticationFilter} class provided.\n+ * </p>\n+ */\n+@Configuration(proxyBeanMethods = false)\n+@ConditionalOnResource(resources = \"classpath:aad.enable.config\")\n+@EnableConfigurationProperties({ AADAuthenticationProperties.class })\n+@ConditionalOnClass({ BearerTokenAuthenticationToken.class, OAuth2LoginAuthenticationFilter.class })\n+public class AADResourceServerOboConfiguration {\n+\n+    @Autowired\n+    private AADAuthenticationProperties properties;\n+\n+    @Bean\n+    @ConditionalOnMissingBean({ ClientRegistrationRepository.class, InMemoryClientRegistrationRepository.class })\n+    public ClientRegistrationRepository oboClientRegistrationRepository() {\n+        return new InMemoryClientRegistrationRepository(createOboClients());\n+    }\n+\n+    /**\n+     * Use InMemoryClientRegistrationRepository to create AADOAuth2OboAuthorizedClientRepository\n+     *\n+     * @param repo client registration\n+     * @return AADOAuth2OboAuthorizedClientRepository Bean\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(InMemoryClientRegistrationRepository\n+                                                                                 repo) {\n+        return new AADOAuth2OboAuthorizedClientRepository(repo);\n+    }\n+\n+    public List<ClientRegistration> createOboClients() {\n+        List<ClientRegistration> result = new ArrayList<>();\n+        for (String name : properties.getAuthorization().keySet()) {\n+            AuthorizationProperties authorizationProperties = properties.getAuthorization().get(name);\n+            ClientRegistration.Builder builder = createClientBuilder(name);\n+            builder.scope(authorizationProperties.getScopes());\n+            result.add(builder.build());\n+        }\n+        return result;\n+    }\n+\n+    private ClientRegistration.Builder createClientBuilder(String id) {", "originalCommit": "e64003c0b23533248807104caea8d4b7f5e4b001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0NjcyMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r548446721", "bodyText": "@wujack778 are we addressing this comment in the current PR?", "author": "saragluna", "createdAt": "2020-12-24T08:30:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3ODcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ1MzU2Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r548453566", "bodyText": "No ,I didn't fully understand what he meant , Maybe next PR?", "author": "wujack778", "createdAt": "2020-12-24T08:52:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3ODcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ2Mzk5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r548463994", "bodyText": "@wujack778 please talk with @chenrujun then. It's okay to do that refactor in another PR.", "author": "saragluna", "createdAt": "2020-12-24T09:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3ODcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ2NTA1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r548465050", "bodyText": "all right.", "author": "wujack778", "createdAt": "2020-12-24T09:27:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3ODcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc2NjA4Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r548766082", "bodyText": "please talk with @chenrujun then. It's okay to do that refactor in another PR.\n\nAgree.", "author": "chenrujun", "createdAt": "2020-12-25T00:07:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3ODcxNA=="}], "type": "inlineReview", "revised_code": {"commit": "bd4951e7dcc0937cd9c65c6bb6258787bb68c7d8", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java\nindex ff81753192e..67771350560 100644\n--- a/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java\n+++ b/sdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADResourceServerOboConfiguration.java\n\n@@ -52,8 +52,8 @@ public class AADResourceServerOboConfiguration {\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    public OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(InMemoryClientRegistrationRepository\n-                                                                                 repo) {\n+    public OAuth2AuthorizedClientRepository oAuth2AuthorizedClientRepository(\n+        InMemoryClientRegistrationRepository repo) {\n         return new AADOAuth2OboAuthorizedClientRepository(repo);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3OTExMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547579112", "bodyText": "Rename aadJwtBearerTokenAuthenticationConverter to converter.", "author": "chenrujun", "createdAt": "2020-12-23T00:58:43Z", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADJwtBearerTokenAuthenticationConverterTest.java", "diffHunk": "@@ -37,11 +37,11 @@ public void init() {\n \n     @Test\n     public void testCreateUserPrincipal() {\n-        AzureJwtBearerTokenAuthenticationConverter azureJwtBearerTokenAuthenticationConverter\n-            = new AzureJwtBearerTokenAuthenticationConverter();\n-        AbstractAuthenticationToken authenticationToken = azureJwtBearerTokenAuthenticationConverter.convert(jwt);\n-        assertThat(authenticationToken.getPrincipal()).isExactlyInstanceOf(AzureOAuth2AuthenticatedPrincipal.class);\n-        AzureOAuth2AuthenticatedPrincipal principal = (AzureOAuth2AuthenticatedPrincipal) authenticationToken\n+        AADJwtBearerTokenAuthenticationConverter aadJwtBearerTokenAuthenticationConverter", "originalCommit": "e64003c0b23533248807104caea8d4b7f5e4b001", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd4951e7dcc0937cd9c65c6bb6258787bb68c7d8", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADJwtBearerTokenAuthenticationConverterTest.java b/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADJwtBearerTokenAuthenticationConverterTest.java\nindex 9ecf1c41afc..ce46b4c7999 100644\n--- a/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADJwtBearerTokenAuthenticationConverterTest.java\n+++ b/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADJwtBearerTokenAuthenticationConverterTest.java\n\n@@ -37,9 +37,9 @@ public class AADJwtBearerTokenAuthenticationConverterTest {\n \n     @Test\n     public void testCreateUserPrincipal() {\n-        AADJwtBearerTokenAuthenticationConverter aadJwtBearerTokenAuthenticationConverter\n+        AADJwtBearerTokenAuthenticationConverter converter\n             = new AADJwtBearerTokenAuthenticationConverter();\n-        AbstractAuthenticationToken authenticationToken = aadJwtBearerTokenAuthenticationConverter.convert(jwt);\n+        AbstractAuthenticationToken authenticationToken = converter.convert(jwt);\n         assertThat(authenticationToken.getPrincipal()).isExactlyInstanceOf(AADOAuth2AuthenticatedPrincipal.class);\n         AADOAuth2AuthenticatedPrincipal principal = (AADOAuth2AuthenticatedPrincipal) authenticationToken\n             .getPrincipal();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3OTE2Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547579167", "bodyText": "Same here.", "author": "chenrujun", "createdAt": "2020-12-23T00:58:52Z", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADJwtBearerTokenAuthenticationConverterTest.java", "diffHunk": "@@ -50,11 +50,11 @@ public void testCreateUserPrincipal() {\n \n     @Test\n     public void testExtractDefaultScopeAuthorities() {\n-        AzureJwtBearerTokenAuthenticationConverter azureJwtBearerTokenAuthenticationConverter\n-            = new AzureJwtBearerTokenAuthenticationConverter();\n-        AbstractAuthenticationToken authenticationToken = azureJwtBearerTokenAuthenticationConverter.convert(jwt);\n-        assertThat(authenticationToken.getPrincipal()).isExactlyInstanceOf(AzureOAuth2AuthenticatedPrincipal.class);\n-        AzureOAuth2AuthenticatedPrincipal principal = (AzureOAuth2AuthenticatedPrincipal) authenticationToken\n+        AADJwtBearerTokenAuthenticationConverter aadJwtBearerTokenAuthenticationConverter", "originalCommit": "e64003c0b23533248807104caea8d4b7f5e4b001", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd4951e7dcc0937cd9c65c6bb6258787bb68c7d8", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADJwtBearerTokenAuthenticationConverterTest.java b/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADJwtBearerTokenAuthenticationConverterTest.java\nindex 9ecf1c41afc..ce46b4c7999 100644\n--- a/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADJwtBearerTokenAuthenticationConverterTest.java\n+++ b/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADJwtBearerTokenAuthenticationConverterTest.java\n\n@@ -50,9 +50,9 @@ public class AADJwtBearerTokenAuthenticationConverterTest {\n \n     @Test\n     public void testExtractDefaultScopeAuthorities() {\n-        AADJwtBearerTokenAuthenticationConverter aadJwtBearerTokenAuthenticationConverter\n+        AADJwtBearerTokenAuthenticationConverter converter\n             = new AADJwtBearerTokenAuthenticationConverter();\n-        AbstractAuthenticationToken authenticationToken = aadJwtBearerTokenAuthenticationConverter.convert(jwt);\n+        AbstractAuthenticationToken authenticationToken = converter.convert(jwt);\n         assertThat(authenticationToken.getPrincipal()).isExactlyInstanceOf(AADOAuth2AuthenticatedPrincipal.class);\n         AADOAuth2AuthenticatedPrincipal principal = (AADOAuth2AuthenticatedPrincipal) authenticationToken\n             .getPrincipal();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU4Mzc1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547583751", "bodyText": "Same here.", "author": "chenrujun", "createdAt": "2020-12-23T01:05:12Z", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADJwtBearerTokenAuthenticationConverterTest.java", "diffHunk": "@@ -63,11 +63,11 @@ public void testExtractDefaultScopeAuthorities() {\n     @Test\n     public void testExtractCustomScopeAuthorities() {\n         when(jwt.containsClaim(\"roles\")).thenReturn(true);\n-        AzureJwtBearerTokenAuthenticationConverter azureJwtBearerTokenAuthenticationConverter\n-            = new AzureJwtBearerTokenAuthenticationConverter(\"roles\", \"ROLE_\");\n-        AbstractAuthenticationToken authenticationToken = azureJwtBearerTokenAuthenticationConverter.convert(jwt);\n-        assertThat(authenticationToken.getPrincipal()).isExactlyInstanceOf(AzureOAuth2AuthenticatedPrincipal.class);\n-        AzureOAuth2AuthenticatedPrincipal principal = (AzureOAuth2AuthenticatedPrincipal) authenticationToken\n+        AADJwtBearerTokenAuthenticationConverter aadJwtBearerTokenAuthenticationConverter", "originalCommit": "e64003c0b23533248807104caea8d4b7f5e4b001", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd4951e7dcc0937cd9c65c6bb6258787bb68c7d8", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADJwtBearerTokenAuthenticationConverterTest.java b/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADJwtBearerTokenAuthenticationConverterTest.java\nindex 9ecf1c41afc..ce46b4c7999 100644\n--- a/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADJwtBearerTokenAuthenticationConverterTest.java\n+++ b/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADJwtBearerTokenAuthenticationConverterTest.java\n\n@@ -63,9 +63,9 @@ public class AADJwtBearerTokenAuthenticationConverterTest {\n     @Test\n     public void testExtractCustomScopeAuthorities() {\n         when(jwt.containsClaim(\"roles\")).thenReturn(true);\n-        AADJwtBearerTokenAuthenticationConverter aadJwtBearerTokenAuthenticationConverter\n+        AADJwtBearerTokenAuthenticationConverter converter\n             = new AADJwtBearerTokenAuthenticationConverter(\"roles\", \"ROLE_\");\n-        AbstractAuthenticationToken authenticationToken = aadJwtBearerTokenAuthenticationConverter.convert(jwt);\n+        AbstractAuthenticationToken authenticationToken = converter.convert(jwt);\n         assertThat(authenticationToken.getPrincipal()).isExactlyInstanceOf(AADOAuth2AuthenticatedPrincipal.class);\n         AADOAuth2AuthenticatedPrincipal principal = (AADOAuth2AuthenticatedPrincipal) authenticationToken\n             .getPrincipal();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU4NDgyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547584828", "bodyText": "Same here.", "author": "chenrujun", "createdAt": "2020-12-23T01:06:30Z", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import org.junit.Test;\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class AADResourceServerOboConfigurationTest {\n+\n+    private static final String AAD_PROPERTY_PREFIX = \"azure.activedirectory.\";\n+\n+    private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n+        .withPropertyValues(\n+            AAD_PROPERTY_PREFIX + \"tenant-id=fake-tenant-id\",\n+            AAD_PROPERTY_PREFIX + \"client-id=fake-client-id\",\n+            AAD_PROPERTY_PREFIX + \"client-secret=fake-client-secret\");\n+\n+    @Test\n+    public void testNotExistBearerTokenAuthenticationToken() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testNotExistOAuth2LoginAuthenticationFilter() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(OAuth2LoginAuthenticationFilter.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testOnlyGraphClient() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withPropertyValues(AAD_PROPERTY_PREFIX + \"authorization.graph.scopes=User.read\")\n+            .run(context -> {\n+                final InMemoryClientRegistrationRepository oboRepo = context.getBean(\n+                    InMemoryClientRegistrationRepository.class);\n+                final OAuth2AuthorizedClientRepository aadOboRepo = context.getBean(\n+                    AADOAuth2OboAuthorizedClientRepository.class);\n+\n+                ClientRegistration graph = oboRepo.findByRegistrationId(\"graph\");\n+                Set<String> graphScopes = graph.getScopes();\n+\n+                assertThat(aadOboRepo).isNotNull();\n+                assertThat(oboRepo).isExactlyInstanceOf(InMemoryClientRegistrationRepository.class);\n+                assertThat(graph).isNotNull();\n+                assertThat(graphScopes).hasSize(1);", "originalCommit": "e64003c0b23533248807104caea8d4b7f5e4b001", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bd4951e7dcc0937cd9c65c6bb6258787bb68c7d8", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java b/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java\nindex e9640f830eb..65ae1a3c0f1 100644\n--- a/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java\n+++ b/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java\n\n@@ -18,13 +18,11 @@ import static org.assertj.core.api.Assertions.assertThat;\n \n public class AADResourceServerOboConfigurationTest {\n \n-    private static final String AAD_PROPERTY_PREFIX = \"azure.activedirectory.\";\n-\n     private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n         .withPropertyValues(\n-            AAD_PROPERTY_PREFIX + \"tenant-id=fake-tenant-id\",\n-            AAD_PROPERTY_PREFIX + \"client-id=fake-client-id\",\n-            AAD_PROPERTY_PREFIX + \"client-secret=fake-client-secret\");\n+            \"azure.activedirectory.tenant-id=fake-tenant-id\",\n+            \"azure.activedirectory.client-id=fake-client-id\",\n+            \"azure.activedirectory.client-secret=fake-client-secret\");\n \n     @Test\n     public void testNotExistBearerTokenAuthenticationToken() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU4NTg3Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547585876", "bodyText": "User.read -> User.Read. R should be upper case.\nscope value should have prefix. i.e. it should be http://xxx/User.Read\nIt's better use more than one scope to test. Like xxx.scopes=xxx/User.Read, xxx/User.Write.", "author": "chenrujun", "createdAt": "2020-12-23T01:09:32Z", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import org.junit.Test;\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class AADResourceServerOboConfigurationTest {\n+\n+    private static final String AAD_PROPERTY_PREFIX = \"azure.activedirectory.\";\n+\n+    private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n+        .withPropertyValues(\n+            AAD_PROPERTY_PREFIX + \"tenant-id=fake-tenant-id\",\n+            AAD_PROPERTY_PREFIX + \"client-id=fake-client-id\",\n+            AAD_PROPERTY_PREFIX + \"client-secret=fake-client-secret\");\n+\n+    @Test\n+    public void testNotExistBearerTokenAuthenticationToken() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testNotExistOAuth2LoginAuthenticationFilter() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(OAuth2LoginAuthenticationFilter.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testOnlyGraphClient() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withPropertyValues(AAD_PROPERTY_PREFIX + \"authorization.graph.scopes=User.read\")", "originalCommit": "e64003c0b23533248807104caea8d4b7f5e4b001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU5MzA1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547593051", "bodyText": "Why is it better to use more than one scope to test?", "author": "saragluna", "createdAt": "2020-12-23T01:38:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU4NTg3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwMjk2Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r547702963", "bodyText": "@saragluna  So we can test whether all scopes take effect.", "author": "chenrujun", "createdAt": "2020-12-23T06:25:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU4NTg3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0NjMyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r548446322", "bodyText": "But how do we achieve that in the unit test?", "author": "saragluna", "createdAt": "2020-12-24T08:29:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU4NTg3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "bd4951e7dcc0937cd9c65c6bb6258787bb68c7d8", "chunk": "diff --git a/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java b/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java\nindex e9640f830eb..65ae1a3c0f1 100644\n--- a/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java\n+++ b/sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java\n\n@@ -18,13 +18,11 @@ import static org.assertj.core.api.Assertions.assertThat;\n \n public class AADResourceServerOboConfigurationTest {\n \n-    private static final String AAD_PROPERTY_PREFIX = \"azure.activedirectory.\";\n-\n     private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n         .withPropertyValues(\n-            AAD_PROPERTY_PREFIX + \"tenant-id=fake-tenant-id\",\n-            AAD_PROPERTY_PREFIX + \"client-id=fake-client-id\",\n-            AAD_PROPERTY_PREFIX + \"client-secret=fake-client-secret\");\n+            \"azure.activedirectory.tenant-id=fake-tenant-id\",\n+            \"azure.activedirectory.client-id=fake-client-id\",\n+            \"azure.activedirectory.client-secret=fake-client-secret\");\n \n     @Test\n     public void testNotExistBearerTokenAuthenticationToken() {\n"}}, {"oid": "bd4951e7dcc0937cd9c65c6bb6258787bb68c7d8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bd4951e7dcc0937cd9c65c6bb6258787bb68c7d8", "message": "Modify obo uts and rename some parameters", "committedDate": "2020-12-23T02:37:02Z", "type": "commit"}, {"oid": "d80a215723e375b9e32c1af46eca06fd9e52f3aa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d80a215723e375b9e32c1af46eca06fd9e52f3aa", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into create-obo-clientRegistration-repo\n\n# Conflicts:\n#\tsdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-active-directory-spring-security-resource-server/README.md", "committedDate": "2020-12-24T04:40:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc2NjAyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r548766022", "bodyText": "@saragluna,\n\nBut how do we achieve that in the unit test?\n\nWe can do like this:\nassertThat(result, Matchers.arrayContaining(expected));\n\nRefs: https://stackoverflow.com/questions/54439629/hamcrest-matcher-to-compare-two-arrays", "author": "chenrujun", "createdAt": "2020-12-25T00:06:42Z", "path": "sdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADResourceServerOboConfigurationTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.spring.aad.webapi;\n+\n+import org.junit.Test;\n+import org.springframework.boot.test.context.FilteredClassLoader;\n+import org.springframework.boot.test.context.runner.WebApplicationContextRunner;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2LoginAuthenticationFilter;\n+import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n+\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class AADResourceServerOboConfigurationTest {\n+\n+    private final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n+        .withPropertyValues(\n+            \"azure.activedirectory.tenant-id=fake-tenant-id\",\n+            \"azure.activedirectory.client-id=fake-client-id\",\n+            \"azure.activedirectory.client-secret=fake-client-secret\");\n+\n+    @Test\n+    public void testNotExistBearerTokenAuthenticationToken() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testNotExistOAuth2LoginAuthenticationFilter() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withClassLoader(new FilteredClassLoader(OAuth2LoginAuthenticationFilter.class))\n+            .run(context -> {\n+                assertThat(context).doesNotHaveBean(\"AADOAuth2OboAuthorizedClientRepository\");\n+            });\n+    }\n+\n+    @Test\n+    public void testOnlyGraphClient() {\n+        this.contextRunner\n+            .withUserConfiguration(AADResourceServerOboConfiguration.class)\n+            .withPropertyValues(\"azure.activedirectory.authorization.graph.scopes=https://graph.microsoft.com/User\"\n+                + \".Read\")\n+            .run(context -> {\n+                final InMemoryClientRegistrationRepository oboRepo = context.getBean(\n+                    InMemoryClientRegistrationRepository.class);\n+                final OAuth2AuthorizedClientRepository aadOboRepo = context.getBean(\n+                    AADOAuth2OboAuthorizedClientRepository.class);\n+\n+                ClientRegistration graph = oboRepo.findByRegistrationId(\"graph\");\n+                Set<String> graphScopes = graph.getScopes();\n+\n+                assertThat(aadOboRepo).isNotNull();\n+                assertThat(oboRepo).isExactlyInstanceOf(InMemoryClientRegistrationRepository.class);\n+                assertThat(graph).isNotNull();\n+                assertThat(graphScopes).containsOnly(\"https://graph.microsoft.com/User.Read\");", "originalCommit": "d80a215723e375b9e32c1af46eca06fd9e52f3aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc4NDUzMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r548784532", "bodyText": "get it.", "author": "wujack778", "createdAt": "2020-12-25T02:47:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc2NjAyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc4OTgxNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/18207#discussion_r548789815", "bodyText": "@chenrujun I see what you're trying to say here. If we have no special logic here and it's just spring doing the parsing, so the array of one element or two elements doesn't make that much difference to me. But we could do with two elements here.", "author": "saragluna", "createdAt": "2020-12-25T03:25:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc2NjAyMg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "7eef875ddfe589ff962e519450267f4d1b53049a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7eef875ddfe589ff962e519450267f4d1b53049a", "message": "Merge branch 'master' of git://github.com/Azure/azure-sdk-for-java into create-obo-clientRegistration-repo\n\n# Conflicts:\n#\tsdk/spring/azure-spring-boot/src/main/java/com/azure/spring/aad/webapi/AADOAuth2AuthenticatedPrincipal.java\n#\tsdk/spring/azure-spring-boot/src/main/resources/META-INF/spring.factories\n#\tsdk/spring/azure-spring-boot/src/test/java/com/azure/spring/aad/webapi/AADJwtBearerTokenAuthenticationConverterTest.java", "committedDate": "2020-12-25T09:19:26Z", "type": "commit"}, {"oid": "57f3f3cce6340addafc8b5bb4f7df9012d29b2e3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/57f3f3cce6340addafc8b5bb4f7df9012d29b2e3", "message": "slove conflicts", "committedDate": "2020-12-25T09:42:02Z", "type": "commit"}]}