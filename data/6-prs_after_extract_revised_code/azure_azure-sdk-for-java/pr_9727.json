{"pr_number": 9727, "pr_title": "Pluggable Modules for JSON Serialization", "pr_createdAt": "2020-04-01T00:16:44Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/9727", "timeline": [{"oid": "b9fa70c846c33a4566b19e82b9cc1cac7155e192", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b9fa70c846c33a4566b19e82b9cc1cac7155e192", "message": "High-level module information and engineering system requirements", "committedDate": "2020-04-01T00:12:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1ODI4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r401358287", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            module azure.core.serializer.avro.apache {\n          \n          \n            \n            module com.azure.core.serializer.avro.apache {", "author": "JonathanGiles", "createdAt": "2020-04-01T05:07:26Z", "path": "sdk/core/azure-core-serializer-avro-apache/src/main/java/module-info.java", "diffHunk": "@@ -0,0 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+module azure.core.serializer.avro.apache {", "originalCommit": "b9fa70c846c33a4566b19e82b9cc1cac7155e192", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36caf8fe7647a24f896477cdf8328e31f3dbbf69", "chunk": "diff --git a/sdk/core/azure-core-serializer-avro-apache/src/main/java/module-info.java b/sdk/core/azure-core-serializer-avro-apache/src/main/java/module-info.java\nindex f45ed4b00f3..53de348b487 100644\n--- a/sdk/core/azure-core-serializer-avro-apache/src/main/java/module-info.java\n+++ b/sdk/core/azure-core-serializer-avro-apache/src/main/java/module-info.java\n\n@@ -1,6 +1,6 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-module azure.core.serializer.avro.apache {\n+module com.azure.core.serializer.avro.apache {\n     requires transitive com.azure.core;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1ODM2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r401358360", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            module azure.core.serializer.avro.jackson {\n          \n          \n            \n            module com.azure.core.serializer.avro.jackson {", "author": "JonathanGiles", "createdAt": "2020-04-01T05:07:46Z", "path": "sdk/core/azure-core-serializer-avro-jackson/src/main/java/module-info.java", "diffHunk": "@@ -0,0 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+module azure.core.serializer.avro.jackson {", "originalCommit": "b9fa70c846c33a4566b19e82b9cc1cac7155e192", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36caf8fe7647a24f896477cdf8328e31f3dbbf69", "chunk": "diff --git a/sdk/core/azure-core-serializer-avro-jackson/src/main/java/module-info.java b/sdk/core/azure-core-serializer-avro-jackson/src/main/java/module-info.java\nindex 75c61d6e94c..ca255346c5d 100644\n--- a/sdk/core/azure-core-serializer-avro-jackson/src/main/java/module-info.java\n+++ b/sdk/core/azure-core-serializer-avro-jackson/src/main/java/module-info.java\n\n@@ -1,6 +1,6 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-module azure.core.serializer.avro.jackson {\n+module com.azure.core.serializer.avro.jackson {\n     requires transitive com.azure.core;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1ODQ2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r401358462", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            module azure.core.serializer.json.gson {\n          \n          \n            \n            module com.azure.core.serializer.json.gson {", "author": "JonathanGiles", "createdAt": "2020-04-01T05:08:07Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/module-info.java", "diffHunk": "@@ -0,0 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+module azure.core.serializer.json.gson {", "originalCommit": "b9fa70c846c33a4566b19e82b9cc1cac7155e192", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36caf8fe7647a24f896477cdf8328e31f3dbbf69", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/module-info.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/module-info.java\nindex 9d9d909cddb..b6a1ccf43c3 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/module-info.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/main/java/module-info.java\n\n@@ -1,6 +1,7 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-module azure.core.serializer.json.gson {\n+module com.azure.core.serializer.json.gson {\n     requires transitive com.azure.core;\n+    requires transitive gson;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM1ODY3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r401358675", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            module azure.core.serializer.json.jackson {\n          \n          \n            \n            module com.azure.core.serializer.json.jackson {", "author": "JonathanGiles", "createdAt": "2020-04-01T05:08:46Z", "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/module-info.java", "diffHunk": "@@ -0,0 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+module azure.core.serializer.json.jackson {", "originalCommit": "b9fa70c846c33a4566b19e82b9cc1cac7155e192", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "36caf8fe7647a24f896477cdf8328e31f3dbbf69", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-jackson/src/main/java/module-info.java b/sdk/core/azure-core-serializer-json-jackson/src/main/java/module-info.java\nindex 470475182d3..5b076e0f587 100644\n--- a/sdk/core/azure-core-serializer-json-jackson/src/main/java/module-info.java\n+++ b/sdk/core/azure-core-serializer-json-jackson/src/main/java/module-info.java\n\n@@ -1,6 +1,6 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-module azure.core.serializer.json.jackson {\n+module com.azure.core.serializer.json.jackson {\n     requires transitive com.azure.core;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4OTQ4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r401389488", "bodyText": "Since this is not a Client, builder is not mandatory but depending on what this class includes and how it gets instantiated we can still use builder if it's convenient.", "author": "srnagar", "createdAt": "2020-04-01T06:46:08Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,11 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+/*\n+ * Thoughts on this class skipping the builder pattern?", "originalCommit": "b9fa70c846c33a4566b19e82b9cc1cac7155e192", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTczNzMzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r401737338", "bodyText": "I'm wondering if it would be easier/more convenient to just have these classes take the pre-built serializer for a given module, a Gson class for gson JSON parsing, ObjectMapper for Jackson, etc.", "author": "alzimmermsft", "createdAt": "2020-04-01T16:13:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4OTQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2MTE2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r403261168", "bodyText": "Made it so these don't have builders for now.", "author": "alzimmermsft", "createdAt": "2020-04-03T19:24:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4OTQ4OA=="}], "type": "inlineReview", "revised_code": {"commit": "36caf8fe7647a24f896477cdf8328e31f3dbbf69", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java\nindex badf9c322ea..675de330a0f 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java\n\n@@ -3,9 +3,77 @@\n \n package com.azure.core.serializer.json.gson;\n \n-/*\n- * Thoughts on this class skipping the builder pattern?\n- */\n-public final class GsonJsonSerializer {\n+import com.azure.core.serializer.JsonSerializer;\n+import com.google.gson.Gson;\n+import reactor.core.publisher.Mono;\n \n+import java.io.Reader;\n+import java.io.Writer;\n+\n+public final class GsonJsonSerializer implements JsonSerializer {\n+    public final Gson gson;\n+\n+    public GsonJsonSerializer(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public <T> T read(String input, Class<T> clazz) {\n+        return gson.fromJson(input, clazz);\n+    }\n+\n+    @Override\n+    public <T> T read(Reader reader, Class<T> clazz) {\n+        return gson.fromJson(reader, clazz);\n+    }\n+\n+    @Override\n+    public <T> Mono<T> readAsync(String input, Class<T> clazz) {\n+        return Mono.fromCallable(() -> read(input, clazz));\n+    }\n+\n+    @Override\n+    public <T> Mono<T> readAsync(Reader reader, Class<T> clazz) {\n+        return Mono.fromCallable(() -> read(reader, clazz));\n+    }\n+\n+    @Override\n+    public String write(Object value) {\n+        return gson.toJson(value);\n+    }\n+\n+    @Override\n+    public String write(Object value, Class<?> clazz) {\n+        return gson.toJson(value, clazz);\n+    }\n+\n+    @Override\n+    public Mono<String> writeAsync(Object value) {\n+        return Mono.fromCallable(() -> write(value));\n+    }\n+\n+    @Override\n+    public Mono<String> writeAsync(Object value, Class<?> clazz) {\n+        return Mono.fromCallable(() -> write(value, clazz));\n+    }\n+\n+    @Override\n+    public void write(Object value, Writer writer) {\n+        gson.toJson(value, writer);\n+    }\n+\n+    @Override\n+    public void write(Object value, Writer writer, Class<?> clazz) {\n+        gson.toJson(value, clazz, writer);\n+    }\n+\n+    @Override\n+    public Mono<Void> writeAsync(Object value, Writer writer) {\n+        return Mono.fromRunnable(() -> write(value, writer));\n+    }\n+\n+    @Override\n+    public Mono<Void> writeAsync(Object value, Writer writer, Class<?> clazz) {\n+        return Mono.fromRunnable(() -> write(value, writer, clazz));\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MDMyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r401390322", "bodyText": "Should these JsonDeserializer/AvroDeserializer interfaces extend from Deserializer? Same for serializers too.", "author": "srnagar", "createdAt": "2020-04-01T06:48:10Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonDeserializer.java", "diffHunk": "@@ -0,0 +1,4 @@\n+package com.azure.core.serializer;\n+\n+public interface JsonDeserializer {", "originalCommit": "b9fa70c846c33a4566b19e82b9cc1cac7155e192", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTczODQwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r401738405", "bodyText": "I was just throwing interfaces into Azure Core to get a feeling on whether we would want overarching interfaces for serialization, general consensus right now is leaning away from that, whether each interface should be broken down into its serialization and deserialization components.", "author": "alzimmermsft", "createdAt": "2020-04-01T16:14:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MDMyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI2MDk5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r403260996", "bodyText": "Removed overarching interfaces.", "author": "alzimmermsft", "createdAt": "2020-04-03T19:23:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MDMyMg=="}], "type": "inlineReview", "revised_code": {"commit": "36caf8fe7647a24f896477cdf8328e31f3dbbf69", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonDeserializer.java b/sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonDeserializer.java\ndeleted file mode 100644\nindex da82ca96540..00000000000\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonDeserializer.java\n+++ /dev/null\n\n@@ -1,4 +0,0 @@\n-package com.azure.core.serializer;\n-\n-public interface JsonDeserializer {\n-}\n"}}, {"oid": "36caf8fe7647a24f896477cdf8328e31f3dbbf69", "url": "https://github.com/Azure/azure-sdk-for-java/commit/36caf8fe7647a24f896477cdf8328e31f3dbbf69", "message": "Updates to interfaces and simple implementations for JSON", "committedDate": "2020-04-02T17:50:13Z", "type": "commit"}, {"oid": "f14fa5a6c6deb6cfa8a5067a22194b42ad07abdf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f14fa5a6c6deb6cfa8a5067a22194b42ad07abdf", "message": "Merged in master", "committedDate": "2020-04-03T19:29:12Z", "type": "commit"}, {"oid": "64df338761c447f50b7d528436026464fec4dece", "url": "https://github.com/Azure/azure-sdk-for-java/commit/64df338761c447f50b7d528436026464fec4dece", "message": "Build updates", "committedDate": "2020-04-06T20:57:44Z", "type": "commit"}, {"oid": "9c6f0441390131455656a197fae53c39b25d57eb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9c6f0441390131455656a197fae53c39b25d57eb", "message": "Added simple example of Avro implementation", "committedDate": "2020-04-06T22:58:44Z", "type": "commit"}, {"oid": "051f37af1ab957529050be917e5b0276543a60f8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/051f37af1ab957529050be917e5b0276543a60f8", "message": "Fixed version tags in Jacoco", "committedDate": "2020-04-06T23:05:07Z", "type": "commit"}, {"oid": "7dfc7bae6c214c032612c366d78131e3ddd18be3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7dfc7bae6c214c032612c366d78131e3ddd18be3", "message": "Remove accidentally added file", "committedDate": "2020-04-06T23:35:24Z", "type": "commit"}, {"oid": "a710dd711e132e556a0da135504deec7e2534aa0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a710dd711e132e556a0da135504deec7e2534aa0", "message": "Merge branch 'master' into AzCore_PluggableSerialization", "committedDate": "2020-04-06T23:35:29Z", "type": "commit"}, {"oid": "a815255096c1b49caa764dd36ae6d888a8c683ca", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a815255096c1b49caa764dd36ae6d888a8c683ca", "message": "Update serializers to have async only APIs", "committedDate": "2020-04-07T00:48:59Z", "type": "commit"}, {"oid": "2a39aaff9c3dbbd1776349383f2d39ed9eb09e90", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2a39aaff9c3dbbd1776349383f2d39ed9eb09e90", "message": "Merge branch 'master' into AzCore_PluggableSerialization", "committedDate": "2020-04-07T18:48:55Z", "type": "commit"}, {"oid": "c31a49ff679d5e08ddcb462a32713217cd0cdd39", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c31a49ff679d5e08ddcb462a32713217cd0cdd39", "message": "Fixed typo in external dependency versions, added baseline Javadocs", "committedDate": "2020-04-07T19:10:48Z", "type": "commit"}, {"oid": "3c52c1b6b68e3b2f3cb5b7b193fe1d9802bb40a3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3c52c1b6b68e3b2f3cb5b7b193fe1d9802bb40a3", "message": "Merge branch 'master' into AzCore_PluggableSerialization", "committedDate": "2020-04-07T20:54:04Z", "type": "commit"}, {"oid": "f451ae6b9f301f11bdc6833ecb16cf3e8b8c2dbc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f451ae6b9f301f11bdc6833ecb16cf3e8b8c2dbc", "message": "Merge branch 'master' into AzCore_PluggableSerialization", "committedDate": "2020-04-07T21:58:28Z", "type": "commit"}, {"oid": "a52bc7546a914fe1969c9733eca123f555c855bd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a52bc7546a914fe1969c9733eca123f555c855bd", "message": "Add CHANGELOGs and READMEs", "committedDate": "2020-04-07T22:11:04Z", "type": "commit"}, {"oid": "031fd217caa9524cfad28da1d2d3bbe223d6d240", "url": "https://github.com/Azure/azure-sdk-for-java/commit/031fd217caa9524cfad28da1d2d3bbe223d6d240", "message": "Remove lsp logs", "committedDate": "2020-04-07T22:13:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1MDExOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r405150119", "bodyText": "What is the use case for this method with the clazz argument?", "author": "JonathanGiles", "createdAt": "2020-04-07T22:27:34Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer;\n+\n+import reactor.core.publisher.Mono;\n+\n+import java.io.OutputStream;\n+\n+/**\n+ * Generic interface covering basic JSON serialization and deserialization methods.\n+ */\n+public interface JsonSerializer {\n+    /**\n+     * Reads the JSON string into its object representation.\n+     *\n+     * @param input The JSON string.\n+     * @param clazz {@link Class} representing the object.\n+     * @param <T> Type of the object.\n+     * @return The object representing the JSON string.\n+     */\n+    <T> Mono<T> read(String input, Class<T> clazz);\n+\n+    /**\n+     * Writes the object into its JSON string.\n+     *\n+     * @param value The object.\n+     * @return The JSON string representing the object.\n+     */\n+    Mono<String> write(Object value);\n+\n+    /**\n+     * Writes the object into its JSON string.\n+     *\n+     * @param value The object.\n+     * @param clazz {@link Class} representing the object.\n+     * @return The JSON string representing the object.\n+     */\n+    Mono<String> write(Object value, Class<?> clazz);\n+\n+    /**\n+     * Converts the object into a JSON string and writes it to the {@link OutputStream}.\n+     *\n+     * @param value The object.\n+     * @param stream The {@link OutputStream} where the JSON string will be written.\n+     * @return An indicator that the object's JSON string has been written to the {@link OutputStream}.\n+     */\n+    Mono<Void> write(Object value, OutputStream stream);\n+\n+    /**\n+     * Converts the object into a JSON string and writes it to the {@link OutputStream}.\n+     *\n+     * @param value The object.\n+     * @param stream The {@link OutputStream} where the JSON string will be written.\n+     * @param clazz {@link Class} representing the object.\n+     * @return An indicator that the object's JSON string has been written to the {@link OutputStream}.\n+     */\n+    Mono<Void> write(Object value, OutputStream stream, Class<?> clazz);", "originalCommit": "031fd217caa9524cfad28da1d2d3bbe223d6d240", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3045d2175459b36e5b6b435345243b5609c7c19c", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java b/sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java\nindex 45e749a0f6b..863e0a54f32 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java\n\n@@ -12,48 +12,48 @@ import java.io.OutputStream;\n  */\n public interface JsonSerializer {\n     /**\n-     * Reads the JSON string into its object representation.\n+     * Reads the JSON byte stream into its object representation.\n      *\n-     * @param input The JSON string.\n+     * @param input JSON byte stream.\n      * @param clazz {@link Class} representing the object.\n      * @param <T> Type of the object.\n      * @return The object representing the JSON string.\n      */\n-    <T> Mono<T> read(String input, Class<T> clazz);\n+    <T> Mono<T> read(byte[] input, Class<T> clazz);\n \n     /**\n-     * Writes the object into its JSON string.\n+     * Writes the object into its JSON byte stream.\n      *\n      * @param value The object.\n-     * @return The JSON string representing the object.\n+     * @return The JSON byte stream representing the object.\n      */\n-    Mono<String> write(Object value);\n+    Mono<byte[]> write(Object value);\n \n     /**\n-     * Writes the object into its JSON string.\n+     * Writes the object into its JSON byte stream.\n      *\n      * @param value The object.\n      * @param clazz {@link Class} representing the object.\n-     * @return The JSON string representing the object.\n+     * @return The JSON byte stream representing the object.\n      */\n-    Mono<String> write(Object value, Class<?> clazz);\n+    Mono<byte[]> write(Object value, Class<?> clazz);\n \n     /**\n-     * Converts the object into a JSON string and writes it to the {@link OutputStream}.\n+     * Converts the object into a JSON byte stream and writes it to the {@link OutputStream}.\n      *\n      * @param value The object.\n-     * @param stream The {@link OutputStream} where the JSON string will be written.\n-     * @return An indicator that the object's JSON string has been written to the {@link OutputStream}.\n+     * @param stream The {@link OutputStream} where the JSON byte stream will be written.\n+     * @return An indicator that the object's JSON byte stream has been written to the {@link OutputStream}.\n      */\n     Mono<Void> write(Object value, OutputStream stream);\n \n     /**\n-     * Converts the object into a JSON string and writes it to the {@link OutputStream}.\n+     * Converts the object into a JSON byte stream and writes it to the {@link OutputStream}.\n      *\n      * @param value The object.\n-     * @param stream The {@link OutputStream} where the JSON string will be written.\n+     * @param stream The {@link OutputStream} where the JSON byte stream will be written.\n      * @param clazz {@link Class} representing the object.\n-     * @return An indicator that the object's JSON string has been written to the {@link OutputStream}.\n+     * @return An indicator that the object's JSON byte stream has been written to the {@link OutputStream}.\n      */\n     Mono<Void> write(Object value, OutputStream stream, Class<?> clazz);\n }\n"}}, {"oid": "455d7b813f3eeb87af7cdaefbb7d3b75fa9c2c13", "url": "https://github.com/Azure/azure-sdk-for-java/commit/455d7b813f3eeb87af7cdaefbb7d3b75fa9c2c13", "message": "Remove generics from AvroSerializer", "committedDate": "2020-04-07T22:34:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1MDI4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r405150285", "bodyText": "Can this just used the provided mapper instead of making a copy?", "author": "srnagar", "createdAt": "2020-04-07T22:27:57Z", "path": "sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.avro.jackson;\n+\n+import com.azure.core.serializer.AvroSerializer;\n+import com.fasterxml.jackson.dataformat.avro.AvroMapper;\n+import com.fasterxml.jackson.dataformat.avro.AvroSchema;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+/**\n+ * Jackson based implementation of the {@link AvroSerializer} interface.\n+ */\n+public final class JacksonAvroSerializer implements AvroSerializer<AvroSchema> {\n+    private final AvroMapper mapper;\n+\n+    /**\n+     * Constructs a {@link AvroSerializer} using the default Jackson serializer.\n+     */\n+    public JacksonAvroSerializer() {\n+        this.mapper = new AvroMapper();\n+    }\n+\n+    /**\n+     * Constructs a {@link AvroSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    public JacksonAvroSerializer(AvroMapper mapper) {\n+        this.mapper = mapper.copy();", "originalCommit": "031fd217caa9524cfad28da1d2d3bbe223d6d240", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NDc3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r405184775", "bodyText": "Removed the copy call.", "author": "alzimmermsft", "createdAt": "2020-04-08T00:09:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1MDI4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "455d7b813f3eeb87af7cdaefbb7d3b75fa9c2c13", "chunk": "diff --git a/sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java b/sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java\nindex 85cb088d40f..11e6f9e0c82 100644\n--- a/sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java\n+++ b/sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java\n\n@@ -5,7 +5,6 @@ package com.azure.core.serializer.avro.jackson;\n \n import com.azure.core.serializer.AvroSerializer;\n import com.fasterxml.jackson.dataformat.avro.AvroMapper;\n-import com.fasterxml.jackson.dataformat.avro.AvroSchema;\n import reactor.core.Exceptions;\n import reactor.core.publisher.Mono;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1MDY3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r405150677", "bodyText": "log and return error.", "author": "srnagar", "createdAt": "2020-04-07T22:28:57Z", "path": "sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.avro.jackson;\n+\n+import com.azure.core.serializer.AvroSerializer;\n+import com.fasterxml.jackson.dataformat.avro.AvroMapper;\n+import com.fasterxml.jackson.dataformat.avro.AvroSchema;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+/**\n+ * Jackson based implementation of the {@link AvroSerializer} interface.\n+ */\n+public final class JacksonAvroSerializer implements AvroSerializer<AvroSchema> {\n+    private final AvroMapper mapper;\n+\n+    /**\n+     * Constructs a {@link AvroSerializer} using the default Jackson serializer.\n+     */\n+    public JacksonAvroSerializer() {\n+        this.mapper = new AvroMapper();\n+    }\n+\n+    /**\n+     * Constructs a {@link AvroSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    public JacksonAvroSerializer(AvroMapper mapper) {\n+        this.mapper = mapper.copy();\n+    }\n+\n+    @Override\n+    public <T> Mono<T> read(byte[] input, AvroSchema schema) {\n+        return Mono.defer(() -> {\n+            try {\n+                return Mono.just(mapper.reader().with(schema).readValue(input));\n+            } catch (IOException ex) {\n+                return Mono.error(ex);", "originalCommit": "031fd217caa9524cfad28da1d2d3bbe223d6d240", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc3OTU1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r405779556", "bodyText": "Done", "author": "alzimmermsft", "createdAt": "2020-04-08T20:01:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1MDY3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "455d7b813f3eeb87af7cdaefbb7d3b75fa9c2c13", "chunk": "diff --git a/sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java b/sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java\nindex 85cb088d40f..11e6f9e0c82 100644\n--- a/sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java\n+++ b/sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java\n\n@@ -5,7 +5,6 @@ package com.azure.core.serializer.avro.jackson;\n \n import com.azure.core.serializer.AvroSerializer;\n import com.fasterxml.jackson.dataformat.avro.AvroMapper;\n-import com.fasterxml.jackson.dataformat.avro.AvroSchema;\n import reactor.core.Exceptions;\n import reactor.core.publisher.Mono;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1MTQwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r405151407", "bodyText": "Mono.fromRunnable() should be sufficient. Don't need to wrap it with Mono.defer()", "author": "srnagar", "createdAt": "2020-04-07T22:30:40Z", "path": "sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.avro.jackson;\n+\n+import com.azure.core.serializer.AvroSerializer;\n+import com.fasterxml.jackson.dataformat.avro.AvroMapper;\n+import com.fasterxml.jackson.dataformat.avro.AvroSchema;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+/**\n+ * Jackson based implementation of the {@link AvroSerializer} interface.\n+ */\n+public final class JacksonAvroSerializer implements AvroSerializer<AvroSchema> {\n+    private final AvroMapper mapper;\n+\n+    /**\n+     * Constructs a {@link AvroSerializer} using the default Jackson serializer.\n+     */\n+    public JacksonAvroSerializer() {\n+        this.mapper = new AvroMapper();\n+    }\n+\n+    /**\n+     * Constructs a {@link AvroSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    public JacksonAvroSerializer(AvroMapper mapper) {\n+        this.mapper = mapper.copy();\n+    }\n+\n+    @Override\n+    public <T> Mono<T> read(byte[] input, AvroSchema schema) {\n+        return Mono.defer(() -> {\n+            try {\n+                return Mono.just(mapper.reader().with(schema).readValue(input));\n+            } catch (IOException ex) {\n+                return Mono.error(ex);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public Mono<byte[]> write(Object value, AvroSchema schema) {\n+        return Mono.defer(() -> {\n+            try {\n+                return Mono.just(mapper.writer().with(schema).writeValueAsBytes(value));\n+            } catch (IOException ex) {\n+                return Mono.error(ex);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public Mono<Void> write(Object value, AvroSchema schema, OutputStream stream) {\n+        return Mono.defer(() -> Mono.fromRunnable(() -> {", "originalCommit": "031fd217caa9524cfad28da1d2d3bbe223d6d240", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc3OTYzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r405779636", "bodyText": "Done", "author": "alzimmermsft", "createdAt": "2020-04-08T20:01:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1MTQwNw=="}], "type": "inlineReview", "revised_code": {"commit": "455d7b813f3eeb87af7cdaefbb7d3b75fa9c2c13", "chunk": "diff --git a/sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java b/sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java\nindex 85cb088d40f..11e6f9e0c82 100644\n--- a/sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java\n+++ b/sdk/core/azure-core-serializer-avro-jackson/src/main/java/com/azure/core/serializer/avro/jackson/JacksonAvroSerializer.java\n\n@@ -5,7 +5,6 @@ package com.azure.core.serializer.avro.jackson;\n \n import com.azure.core.serializer.AvroSerializer;\n import com.fasterxml.jackson.dataformat.avro.AvroMapper;\n-import com.fasterxml.jackson.dataformat.avro.AvroSchema;\n import reactor.core.Exceptions;\n import reactor.core.publisher.Mono;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1NDU5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r405154594", "bodyText": "We should have null checks for input params (in all these read/write methods)", "author": "srnagar", "createdAt": "2020-04-07T22:39:10Z", "path": "sdk/core/azure-core-serializer-avro-apache/src/main/java/com/azure/core/serializer/avro/apache/ApacheAvroSerializer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.avro.apache;\n+\n+import com.azure.core.serializer.AvroSerializer;\n+import org.apache.avro.Schema;\n+import org.apache.avro.generic.GenericDatumReader;\n+import org.apache.avro.generic.GenericDatumWriter;\n+import org.apache.avro.io.DatumReader;\n+import org.apache.avro.io.DatumWriter;\n+import org.apache.avro.io.DecoderFactory;\n+import org.apache.avro.io.EncoderFactory;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+/**\n+ * Apache based implementation of the {@link AvroSerializer} interface.\n+ */\n+public class ApacheAvroSerializer implements AvroSerializer {\n+    private static final Schema.Parser PARSER = new Schema.Parser();\n+    private static final DecoderFactory DECODER_FACTORY = DecoderFactory.get();\n+    private static final EncoderFactory ENCODER_FACTORY = EncoderFactory.get();\n+\n+    @Override\n+    public <T> Mono<T> read(byte[] input, String schema) {", "originalCommit": "455d7b813f3eeb87af7cdaefbb7d3b75fa9c2c13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7fd6800d7636e1bc6223c7480ba7ff1448221b4f", "chunk": "diff --git a/sdk/core/azure-core-serializer-avro-apache/src/main/java/com/azure/core/serializer/avro/apache/ApacheAvroSerializer.java b/sdk/core/azure-core-serializer-avro-apache/src/main/java/com/azure/core/serializer/avro/apache/ApacheAvroSerializer.java\nindex 88cad9fcda5..58669c92f72 100644\n--- a/sdk/core/azure-core-serializer-avro-apache/src/main/java/com/azure/core/serializer/avro/apache/ApacheAvroSerializer.java\n+++ b/sdk/core/azure-core-serializer-avro-apache/src/main/java/com/azure/core/serializer/avro/apache/ApacheAvroSerializer.java\n\n@@ -4,6 +4,8 @@\n package com.azure.core.serializer.avro.apache;\n \n import com.azure.core.serializer.AvroSerializer;\n+import com.azure.core.util.FluxUtil;\n+import com.azure.core.util.logging.ClientLogger;\n import org.apache.avro.Schema;\n import org.apache.avro.generic.GenericDatumReader;\n import org.apache.avro.generic.GenericDatumWriter;\n"}}, {"oid": "e1bc8b5ea9ab2ad637ae7231954164b65af6e8ea", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e1bc8b5ea9ab2ad637ae7231954164b65af6e8ea", "message": "Added builder classes for JSON serializers", "committedDate": "2020-04-07T23:45:17Z", "type": "commit"}, {"oid": "53f6e401c43cc70b0c9873c01a2f384e7caa81ea", "url": "https://github.com/Azure/azure-sdk-for-java/commit/53f6e401c43cc70b0c9873c01a2f384e7caa81ea", "message": "Merge branch 'master' into AzCore_PluggableSerialization", "committedDate": "2020-04-08T19:28:11Z", "type": "commit"}, {"oid": "7fd6800d7636e1bc6223c7480ba7ff1448221b4f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7fd6800d7636e1bc6223c7480ba7ff1448221b4f", "message": "Add exception logging", "committedDate": "2020-04-08T19:59:19Z", "type": "commit"}, {"oid": "0a5512bc08385bf6b1aa4e0c5af4a18fb7afcb1f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0a5512bc08385bf6b1aa4e0c5af4a18fb7afcb1f", "message": "Merge branch 'master' into AzCore_PluggableSerialization", "committedDate": "2020-04-08T22:11:27Z", "type": "commit"}, {"oid": "88b083041e508ed0191a1003515c7f27e637b7d5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/88b083041e508ed0191a1003515c7f27e637b7d5", "message": "Input validation", "committedDate": "2020-04-09T00:18:47Z", "type": "commit"}, {"oid": "81f7cbb47417e169e28557e87db2644c0faead0b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/81f7cbb47417e169e28557e87db2644c0faead0b", "message": "Merge branch 'master' into AzCore_PluggableSerialization", "committedDate": "2020-04-10T17:32:43Z", "type": "commit"}, {"oid": "3045d2175459b36e5b6b435345243b5609c7c19c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3045d2175459b36e5b6b435345243b5609c7c19c", "message": "Updated interface to use bytes", "committedDate": "2020-04-10T22:58:58Z", "type": "commit"}, {"oid": "a80590d67b21718285a98cb7e601efd372854b64", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a80590d67b21718285a98cb7e601efd372854b64", "message": "Merge branch 'master' into AzCore_PluggableSerialization", "committedDate": "2020-04-10T23:05:10Z", "type": "commit"}, {"oid": "bfef0f36b74b20b44906609bf301aa28997e1a50", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bfef0f36b74b20b44906609bf301aa28997e1a50", "message": "Transition GSON library to the new interface design", "committedDate": "2020-04-13T18:39:42Z", "type": "commit"}, {"oid": "163f23529c8300194a4a4b1304cf600cc4193938", "url": "https://github.com/Azure/azure-sdk-for-java/commit/163f23529c8300194a4a4b1304cf600cc4193938", "message": "Merge branch 'master' into AzCore_PluggableSerialization", "committedDate": "2020-04-13T22:20:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc3Nzk1NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r407777954", "bodyText": "why this needs to be async? You have the byte array and class, this only require some computational work. IMO this doesn't need to be async. same for the other APIs as well.", "author": "moderakh", "createdAt": "2020-04-13T23:31:19Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer;\n+\n+import reactor.core.publisher.Mono;\n+\n+import java.io.OutputStream;\n+\n+/**\n+ * Generic interface covering basic JSON serialization and deserialization methods.\n+ */\n+public interface JsonSerializer {\n+    /**\n+     * Reads the JSON byte stream into its object representation.\n+     *\n+     * @param input JSON byte stream.\n+     * @param clazz {@link Class} representing the object.\n+     * @param <T> Type of the object.\n+     * @return The object representing the JSON string.\n+     */\n+    <T> Mono<T> read(byte[] input, Class<T> clazz);", "originalCommit": "163f23529c8300194a4a4b1304cf600cc4193938", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxMDQ4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r408510487", "bodyText": "Changed to sync methods.", "author": "alzimmermsft", "createdAt": "2020-04-15T00:22:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc3Nzk1NA=="}], "type": "inlineReview", "revised_code": {"commit": "71fa56adf6c6a38dcb964f86bbc161c5b6a45116", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java b/sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java\nindex 863e0a54f32..87c02f8fecc 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java\n\n@@ -3,8 +3,6 @@\n \n package com.azure.core.serializer;\n \n-import reactor.core.publisher.Mono;\n-\n import java.io.OutputStream;\n \n /**\n"}}, {"oid": "a8d2363a92fae669620b4ef5e42a5b8922b76729", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a8d2363a92fae669620b4ef5e42a5b8922b76729", "message": "Merge branch 'master' into AzCore_PluggableSerialization", "committedDate": "2020-04-14T23:59:04Z", "type": "commit"}, {"oid": "a6b654d3284cf72e673a2db4f1ae5a5a92ce2981", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a6b654d3284cf72e673a2db4f1ae5a5a92ce2981", "message": "Removed Avro interface and implementations", "committedDate": "2020-04-15T00:02:56Z", "type": "commit"}, {"oid": "71fa56adf6c6a38dcb964f86bbc161c5b6a45116", "url": "https://github.com/Azure/azure-sdk-for-java/commit/71fa56adf6c6a38dcb964f86bbc161c5b6a45116", "message": "Changed inteface to sync only", "committedDate": "2020-04-15T00:09:05Z", "type": "commit"}, {"oid": "98b9e1fe09c5a50ff5be6df0dd08e7a6a9d620f8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/98b9e1fe09c5a50ff5be6df0dd08e7a6a9d620f8", "message": "Fixed linting issues", "committedDate": "2020-04-15T00:34:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0NzYwNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r408947605", "bodyText": "is this more performant than mapper.writeValueAsBytes(value)?", "author": "moderakh", "createdAt": "2020-04-15T15:48:33Z", "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,84 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.serializer.JsonSerializer;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import reactor.core.Exceptions;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * Jackson based implementation of the {@link JsonSerializer} interface.\n+ */\n+public final class JacksonJsonSerializer implements JsonSerializer {\n+    private final ClientLogger logger = new ClientLogger(JacksonJsonSerializer.class);\n+\n+    private final ObjectMapper mapper;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    JacksonJsonSerializer(ObjectMapper mapper) {\n+        this.mapper = mapper;\n+    }\n+\n+    @Override\n+    public <T> T read(byte[] input, Class<T> clazz) {\n+        if (input == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return mapper.readValue(input, clazz);\n+        } catch (IOException ex) {\n+            throw logger.logExceptionAsError(Exceptions.propagate(ex));\n+        }\n+    }\n+\n+    @Override\n+    public byte[] write(Object value) {\n+        try {\n+            return mapper.writeValueAsBytes(value);\n+        } catch (IOException ex) {\n+            throw logger.logExceptionAsError(Exceptions.propagate(ex));\n+        }\n+    }\n+\n+    @Override\n+    public byte[] write(Object value, Class<?> clazz) {\n+        try {\n+            return mapper.writerFor(clazz).writeValueAsBytes(value);", "originalCommit": "98b9e1fe09c5a50ff5be6df0dd08e7a6a9d620f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NjU1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r408976553", "bodyText": "Nope, actually, I'll be removing this as I've read into this more. writerFor is generally meant for scenarios where you want to write the object as one of its super classes or an interface it implements.", "author": "alzimmermsft", "createdAt": "2020-04-15T16:31:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0NzYwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4ODUzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r408988535", "bodyText": "Removed", "author": "alzimmermsft", "createdAt": "2020-04-15T16:50:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0NzYwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ddf520b04683b44663a97f65f757e9ad4ece2102", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java b/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java\nindex 91378bb8af1..5027c83db47 100644\n--- a/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java\n+++ b/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java\n\n@@ -51,15 +51,6 @@ public final class JacksonJsonSerializer implements JsonSerializer {\n         }\n     }\n \n-    @Override\n-    public byte[] write(Object value, Class<?> clazz) {\n-        try {\n-            return mapper.writerFor(clazz).writeValueAsBytes(value);\n-        } catch (IOException ex) {\n-            throw logger.logExceptionAsError(Exceptions.propagate(ex));\n-        }\n-    }\n-\n     @Override\n     public void write(Object value, OutputStream stream) {\n         Objects.requireNonNull(stream, \"'stream' cannot be null.\");\n"}}, {"oid": "ddf520b04683b44663a97f65f757e9ad4ece2102", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ddf520b04683b44663a97f65f757e9ad4ece2102", "message": "Remove write API which takes a class", "committedDate": "2020-04-15T16:45:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMDkzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r409010939", "bodyText": "I don't remember of top of my head, does this support ObjectNode?\ni.e., mapper.readvalue(input, ObjectNode.class)", "author": "moderakh", "createdAt": "2020-04-15T17:26:31Z", "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.serializer.JsonSerializer;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import reactor.core.Exceptions;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * Jackson based implementation of the {@link JsonSerializer} interface.\n+ */\n+public final class JacksonJsonSerializer implements JsonSerializer {\n+    private final ClientLogger logger = new ClientLogger(JacksonJsonSerializer.class);\n+\n+    private final ObjectMapper mapper;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    JacksonJsonSerializer(ObjectMapper mapper) {\n+        this.mapper = mapper;\n+    }\n+\n+    @Override\n+    public <T> T read(byte[] input, Class<T> clazz) {\n+        if (input == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return mapper.readValue(input, clazz);", "originalCommit": "ddf520b04683b44663a97f65f757e9ad4ece2102", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NjkzNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r409276935", "bodyText": "I believe that would be ObjectMapper.readTree, would this be a common scenario for Cosmos?", "author": "alzimmermsft", "createdAt": "2020-04-16T04:38:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMDkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NzEzMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r409277130", "bodyText": "yes, that's a common scenario.", "author": "moderakh", "createdAt": "2020-04-16T04:39:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMDkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3Nzc0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r409277745", "bodyText": "how about adding a if/else branch to the same method on the class type?", "author": "moderakh", "createdAt": "2020-04-16T04:41:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMDkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgyNjkzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r409826934", "bodyText": "Is the tree reading logic used when dealing with customer related objects or when dealing with service objects? I updated the PR description to better clarify the purpose of the interface added. If the tree reading scenario is common with customer object I'll dive into it more, I'd also rather see it being a separate API than tied into the read API which is more data-bindy.", "author": "alzimmermsft", "createdAt": "2020-04-16T20:24:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMDkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0MjU5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r413542591", "bodyText": "ObjectNode is used for both internal cosmos types, and also for user apis.\nas cosmos is a schema less database, we also would like to provide a schema less type, for that reason we also support ObjectNode in the public surface area. The other reason for supporting ObjectNode in the public surface area is perf as deserialization to ObjectNode doesn't require reflection whereas for deserializing to user provivded Pojo, jackson will use reflection which is slow.\nAs an example all of the following public API invocation currently work:\nUserPojo userPojo = cosmosContainer.readItem(id, pk, UserPojo.class).block().getItem();\nObjectNode objectNode = cosmosContainer.readIteam(id, pk, ObjectNode.class).blcok.getItem();", "author": "moderakh", "createdAt": "2020-04-23T06:27:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMDkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0NjExOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r413546119", "bodyText": "btw, at least for jackson, ObjectMapper is capable of handling ObjectNode under the same API:\n static class UserPojo {\n        @JsonProperty\n        String id;\n\n        @JsonProperty\n        String pk;\n    }\n\n    public static void main(String[] args) throws Exception {\n\n        UserPojo userPojo = new UserPojo();\n        userPojo.id = \"myId\";\n        userPojo.pk = \"mypk\";\n\n        ObjectMapper objectMapper = new ObjectMapper();\n        byte[] bytes = objectMapper.writeValueAsBytes(userPojo);\n\n        ObjectNode deserializedObjectNode = objectMapper.readValue(bytes, ObjectNode.class);\n        UserPojo deserializedPojo = objectMapper.readValue(bytes, UserPojo.class);\n\n        assert (deserializedObjectNode.get(\"id\").asText().equals(deserializedPojo.id));\n\n    }", "author": "moderakh", "createdAt": "2020-04-23T06:35:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMDkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0MzQ5OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r414743499", "bodyText": "@moderakh so support for serializing and deserializing ObjectNode is needed? I did some digging into the Jackson code and it does have a quick path if ObjectNode.class is passed as the Class<T> into the deserialize methods. I'll add additional tests to the PR which test this out.\nStill digging into what GSON does, they do have a similar class JsonObject which I imagine also gets the same treatment.", "author": "alzimmermsft", "createdAt": "2020-04-24T17:29:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMDkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "010ae360470bd9f8419689bb3061597065c1b153", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java b/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java\nindex 5027c83db47..6db1113c187 100644\n--- a/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java\n+++ b/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java\n\n@@ -6,10 +6,10 @@ package com.azure.core.serializer.json.jackson;\n import com.azure.core.serializer.JsonSerializer;\n import com.azure.core.util.logging.ClientLogger;\n import com.fasterxml.jackson.databind.ObjectMapper;\n-import reactor.core.Exceptions;\n \n import java.io.IOException;\n import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n import java.util.Objects;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMTA3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r409011071", "bodyText": "I don't remember of top of my head, does this support ObjectNode?", "author": "moderakh", "createdAt": "2020-04-15T17:26:42Z", "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.azure.core.serializer.JsonSerializer;\n+import com.azure.core.util.logging.ClientLogger;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import reactor.core.Exceptions;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Objects;\n+\n+/**\n+ * Jackson based implementation of the {@link JsonSerializer} interface.\n+ */\n+public final class JacksonJsonSerializer implements JsonSerializer {\n+    private final ClientLogger logger = new ClientLogger(JacksonJsonSerializer.class);\n+\n+    private final ObjectMapper mapper;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed Jackson serializer.\n+     *\n+     * @param mapper Configured Jackson serializer.\n+     */\n+    JacksonJsonSerializer(ObjectMapper mapper) {\n+        this.mapper = mapper;\n+    }\n+\n+    @Override\n+    public <T> T read(byte[] input, Class<T> clazz) {\n+        if (input == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return mapper.readValue(input, clazz);\n+        } catch (IOException ex) {\n+            throw logger.logExceptionAsError(Exceptions.propagate(ex));\n+        }\n+    }\n+\n+    @Override\n+    public byte[] write(Object value) {\n+        try {\n+            return mapper.writeValueAsBytes(value);", "originalCommit": "ddf520b04683b44663a97f65f757e9ad4ece2102", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3NzYyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r409277628", "bodyText": "This would be for adding a node into a tree being written, correct?", "author": "alzimmermsft", "createdAt": "2020-04-16T04:41:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMTA3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "010ae360470bd9f8419689bb3061597065c1b153", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java b/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java\nindex 5027c83db47..6db1113c187 100644\n--- a/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java\n+++ b/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializer.java\n\n@@ -6,10 +6,10 @@ package com.azure.core.serializer.json.jackson;\n import com.azure.core.serializer.JsonSerializer;\n import com.azure.core.util.logging.ClientLogger;\n import com.fasterxml.jackson.databind.ObjectMapper;\n-import reactor.core.Exceptions;\n \n import java.io.IOException;\n import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n import java.util.Objects;\n \n /**\n"}}, {"oid": "3df34a218ba5cf419922171d0c84d1e1c0c44fea", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3df34a218ba5cf419922171d0c84d1e1c0c44fea", "message": "Merged in master", "committedDate": "2020-04-16T18:51:17Z", "type": "commit"}, {"oid": "4c7564ea128f0f26dd38307ffa83c36ba6348bdf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4c7564ea128f0f26dd38307ffa83c36ba6348bdf", "message": "Merge branch 'master' into AzCore_PluggableSerialization", "committedDate": "2020-04-16T23:46:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDAwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r410664006", "bodyText": "Let's find a better name for the setter that sets the implementation in these builders.", "author": "JonathanGiles", "createdAt": "2020-04-18T07:46:52Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializerBuilder.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Fluent builder class that configures and instantiates instances of {@link GsonJsonSerializer}.\n+ */\n+public class GsonJsonSerializerBuilder {\n+    private Gson gson;\n+\n+    /**\n+     * Constructs a new instance of {@link GsonJsonSerializer} with the configurations set in this builder.\n+     *\n+     * @return A new instance of {@link GsonJsonSerializer}.\n+     */\n+    public GsonJsonSerializer build() {\n+        return (gson == null)\n+            ? new GsonJsonSerializer(new Gson())\n+            : new GsonJsonSerializer(gson);\n+    }\n+\n+    /**\n+     * Sets the {@link Gson} that will be used during serialization.\n+     * <p>\n+     * If this is set to {@code null} the default {@link Gson} will be used.\n+     *\n+     * @param gson {@link Gson} that will be used during serialization.\n+     * @return The updated GsonJsonSerializerBuilder class.\n+     */\n+    public GsonJsonSerializerBuilder gson(Gson gson) {", "originalCommit": "3df34a218ba5cf419922171d0c84d1e1c0c44fea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxODgzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r411618834", "bodyText": "I'll play with some API names since this will go against the guideline that setters should be named the same as the parameter type.", "author": "alzimmermsft", "createdAt": "2020-04-20T19:02:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDAwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMzMTkwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r412331900", "bodyText": "Thoughts on converging both the GSON and Jackson builders to use serializer when configuring the Gson or ObjectMapper respectively.", "author": "alzimmermsft", "createdAt": "2020-04-21T17:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDAwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMjYzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r412702636", "bodyText": "yeah, I thought about serializer or implementation. Neither are great, but it probably makes sense to just have a standard name for all builders.", "author": "JonathanGiles", "createdAt": "2020-04-22T06:24:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDAwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1MjQ3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r413252475", "bodyText": "Updated to use serializer.", "author": "alzimmermsft", "createdAt": "2020-04-22T19:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDAwNg=="}], "type": "inlineReview", "revised_code": {"commit": "43ff33e2b6ecda28f900870fca471e7ddf27e34b", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializerBuilder.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializerBuilder.java\nindex b31cb4fae0b..30ab5f9ac11 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializerBuilder.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializerBuilder.java\n\n@@ -30,7 +30,7 @@ public class GsonJsonSerializerBuilder {\n      * @param gson {@link Gson} that will be used during serialization.\n      * @return The updated GsonJsonSerializerBuilder class.\n      */\n-    public GsonJsonSerializerBuilder gson(Gson gson) {\n+    public GsonJsonSerializerBuilder serializer(Gson gson) {\n         this.gson = gson;\n         return this;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDIwMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r410664202", "bodyText": "This name might be more appropriate than gson is.", "author": "JonathanGiles", "createdAt": "2020-04-18T07:49:12Z", "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializerBuilder.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.jackson;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * Fluent builder class that configures and instantiates instances of {@link JacksonJsonSerializer}.\n+ */\n+public class JacksonJsonSerializerBuilder {\n+    private ObjectMapper objectMapper;\n+\n+    /**\n+     * Constructs a new instance of {@link JacksonJsonSerializer} with the configurations set in this builder.\n+     *\n+     * @return A new instance of {@link JacksonJsonSerializer}.\n+     */\n+    public JacksonJsonSerializer build() {\n+        return (objectMapper == null)\n+            ? new JacksonJsonSerializer(new ObjectMapper())\n+            : new JacksonJsonSerializer(objectMapper);\n+    }\n+\n+    /**\n+     * Sets the {@link ObjectMapper} that will be used during serialization.\n+     * <p>\n+     * If this is set to {@code null} the default {@link ObjectMapper} will be used.\n+     *\n+     * @param objectMapper {@link ObjectMapper} that will be used during serialization.\n+     * @return The updated JacksonJsonSerializerBuilder class.\n+     */\n+    public JacksonJsonSerializerBuilder objectMapper(ObjectMapper objectMapper) {", "originalCommit": "3df34a218ba5cf419922171d0c84d1e1c0c44fea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxOTAxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r411619017", "bodyText": "I would agree, the name here is better.", "author": "alzimmermsft", "createdAt": "2020-04-20T19:03:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDIwMg=="}], "type": "inlineReview", "revised_code": {"commit": "43ff33e2b6ecda28f900870fca471e7ddf27e34b", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializerBuilder.java b/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializerBuilder.java\nindex ec2121bd5c9..875bd2e5f42 100644\n--- a/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializerBuilder.java\n+++ b/sdk/core/azure-core-serializer-json-jackson/src/main/java/com/azure/core/serializer/json/jackson/JacksonJsonSerializerBuilder.java\n\n@@ -30,7 +30,7 @@ public class JacksonJsonSerializerBuilder {\n      * @param objectMapper {@link ObjectMapper} that will be used during serialization.\n      * @return The updated JacksonJsonSerializerBuilder class.\n      */\n-    public JacksonJsonSerializerBuilder objectMapper(ObjectMapper objectMapper) {\n+    public JacksonJsonSerializerBuilder serializer(ObjectMapper objectMapper) {\n         this.objectMapper = objectMapper;\n         return this;\n     }\n"}}, {"oid": "65787779e8634bb4767e03732e98a5c0c648c82a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/65787779e8634bb4767e03732e98a5c0c648c82a", "message": "Merge branch 'master' into AzCore_PluggableSerialization", "committedDate": "2020-04-20T20:19:51Z", "type": "commit"}, {"oid": "010ae360470bd9f8419689bb3061597065c1b153", "url": "https://github.com/Azure/azure-sdk-for-java/commit/010ae360470bd9f8419689bb3061597065c1b153", "message": "Add simple unit tests, removed Exceptions.propagate", "committedDate": "2020-04-21T01:19:18Z", "type": "commit"}, {"oid": "3ff4db6b514e81ca0688f536abeca20d9c91fb71", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3ff4db6b514e81ca0688f536abeca20d9c91fb71", "message": "Moved argLine module exports to JDK 11+ profile", "committedDate": "2020-04-21T16:59:52Z", "type": "commit"}, {"oid": "31f27cb790c45e6ffa2ab2d38ccefa6ab50505bf", "url": "https://github.com/Azure/azure-sdk-for-java/commit/31f27cb790c45e6ffa2ab2d38ccefa6ab50505bf", "message": "Merge branch 'master' into AzCore_PluggableSerialization", "committedDate": "2020-04-22T19:06:42Z", "type": "commit"}, {"oid": "43ff33e2b6ecda28f900870fca471e7ddf27e34b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/43ff33e2b6ecda28f900870fca471e7ddf27e34b", "message": "Additional tests, updated GSON to use custom stream wrapping appendable to fix flushing issue", "committedDate": "2020-04-22T19:48:53Z", "type": "commit"}, {"oid": "86ec1cdfbc41c1a94dffc53308c455a14c41e65f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/86ec1cdfbc41c1a94dffc53308c455a14c41e65f", "message": "Merge branch 'master' into AzCore_PluggableSerialization", "committedDate": "2020-04-22T20:34:06Z", "type": "commit"}, {"oid": "294573e7db2d91dd3a661b7585abca5e476243e5", "url": "https://github.com/Azure/azure-sdk-for-java/commit/294573e7db2d91dd3a661b7585abca5e476243e5", "message": "Fix listed version", "committedDate": "2020-04-22T20:34:26Z", "type": "commit"}, {"oid": "1588d2d9a1d417315fd266d717e39539c55adf0c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1588d2d9a1d417315fd266d717e39539c55adf0c", "message": "Merge branch 'master' into AzCore_PluggableSerialization", "committedDate": "2020-04-23T22:33:10Z", "type": "commit"}, {"oid": "1d385f140de1e17a1552557436fcfc3d90b120d7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1d385f140de1e17a1552557436fcfc3d90b120d7", "message": "Merge branch 'master' into AzCore_PluggableSerialization", "committedDate": "2020-04-24T17:01:25Z", "type": "commit"}, {"oid": "4bfe2e249c479985b9221a9a31beb10f47c21654", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4bfe2e249c479985b9221a9a31beb10f47c21654", "message": "Add tests for deserializing to generic JSON node representation type", "committedDate": "2020-04-24T17:58:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2NzA0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r414867046", "bodyText": "Should serialize also support other charsets instead of always using UTF 8?", "author": "srnagar", "createdAt": "2020-04-24T21:14:26Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer.json.gson;\n+\n+import com.azure.core.serializer.JsonSerializer;\n+import com.azure.core.util.CoreUtils;\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+\n+/**\n+ * GSON based implementation of the {@link JsonSerializer} interface.\n+ */\n+public final class GsonJsonSerializer implements JsonSerializer {\n+    private final Gson gson;\n+\n+    /**\n+     * Constructs a {@link JsonSerializer} using the passed {@link Gson} serializer.\n+     *\n+     * @param gson Configured {@link Gson} serializer.\n+     */\n+    GsonJsonSerializer(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public <T> T deserialize(byte[] input, Class<T> clazz) {\n+        return gson.fromJson(CoreUtils.bomAwareToString(input, null), clazz);\n+    }\n+\n+    @Override\n+    public byte[] serialize(Object value) {\n+        return gson.toJson(value).getBytes(StandardCharsets.UTF_8);\n+    }", "originalCommit": "4bfe2e249c479985b9221a9a31beb10f47c21654", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxNDI2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r414914269", "bodyText": "I believe it is safe to default to using UTF-8 when dealing with JSON, looking around in other places in code HttpRequest defaults to using UTF-8 when sending String bodies, so at minimum this will fall in line with that.", "author": "alzimmermsft", "createdAt": "2020-04-24T23:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2NzA0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ee6a57df4774aca781f7e3a9e92a631505e0d81b", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java\nindex 96b5d9814f6..706df20aa10 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/main/java/com/azure/core/serializer/json/gson/GsonJsonSerializer.java\n\n@@ -3,7 +3,7 @@\n \n package com.azure.core.serializer.json.gson;\n \n-import com.azure.core.serializer.JsonSerializer;\n+import com.azure.core.util.serializer.JsonSerializer;\n import com.azure.core.util.CoreUtils;\n import com.google.gson.Gson;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2Nzc1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r414867756", "bodyText": "This should export com.azure.core.serializer.json.gson.", "author": "srnagar", "createdAt": "2020-04-24T21:16:00Z", "path": "sdk/core/azure-core-serializer-json-gson/src/main/java/module-info.java", "diffHunk": "@@ -0,0 +1,7 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+module com.azure.core.serializer.json.gson {\n+    requires transitive com.azure.core;\n+    requires transitive gson;", "originalCommit": "4bfe2e249c479985b9221a9a31beb10f47c21654", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg4NjAyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r414886029", "bodyText": "Added", "author": "alzimmermsft", "createdAt": "2020-04-24T21:56:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2Nzc1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "29729f86d0ecb0ac5cf45a7ead46038a88e26021", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-gson/src/main/java/module-info.java b/sdk/core/azure-core-serializer-json-gson/src/main/java/module-info.java\nindex b6a1ccf43c3..95b60af4b64 100644\n--- a/sdk/core/azure-core-serializer-json-gson/src/main/java/module-info.java\n+++ b/sdk/core/azure-core-serializer-json-gson/src/main/java/module-info.java\n\n@@ -4,4 +4,6 @@\n module com.azure.core.serializer.json.gson {\n     requires transitive com.azure.core;\n     requires transitive gson;\n+\n+    exports com.azure.core.serializer.json.gson;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3MTkwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r414871901", "bodyText": "Export com.azure.core.serializer.json.jackson.", "author": "srnagar", "createdAt": "2020-04-24T21:24:29Z", "path": "sdk/core/azure-core-serializer-json-jackson/src/main/java/module-info.java", "diffHunk": "@@ -0,0 +1,6 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+module com.azure.core.serializer.json.jackson {\n+    requires transitive com.azure.core;", "originalCommit": "4bfe2e249c479985b9221a9a31beb10f47c21654", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg4NjA2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r414886064", "bodyText": "Added", "author": "alzimmermsft", "createdAt": "2020-04-24T21:56:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3MTkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "29729f86d0ecb0ac5cf45a7ead46038a88e26021", "chunk": "diff --git a/sdk/core/azure-core-serializer-json-jackson/src/main/java/module-info.java b/sdk/core/azure-core-serializer-json-jackson/src/main/java/module-info.java\nindex 5b076e0f587..e4b049910ee 100644\n--- a/sdk/core/azure-core-serializer-json-jackson/src/main/java/module-info.java\n+++ b/sdk/core/azure-core-serializer-json-jackson/src/main/java/module-info.java\n\n@@ -3,4 +3,6 @@\n \n module com.azure.core.serializer.json.jackson {\n     requires transitive com.azure.core;\n+\n+    exports com.azure.core.serializer.json.jackson;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NTYzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r414875638", "bodyText": "We already have a package named com.azure.core.util.serializer. Should we move this interface to that package instead of creating this new package?", "author": "srnagar", "createdAt": "2020-04-24T21:32:47Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.serializer;", "originalCommit": "4bfe2e249c479985b9221a9a31beb10f47c21654", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg4NjU2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r414886562", "bodyText": "Doesn't hurt to move it into that package, the package currently contains Jackson deserializer/serializer implementations so I don't know if we want to mix this interface into there.", "author": "alzimmermsft", "createdAt": "2020-04-24T21:58:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NTYzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxMzk2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r414913960", "bodyText": "Moved into util.serializer.", "author": "alzimmermsft", "createdAt": "2020-04-24T23:17:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg3NTYzOA=="}], "type": "inlineReview", "revised_code": {"commit": "ee6a57df4774aca781f7e3a9e92a631505e0d81b", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializer.java\nsimilarity index 96%\nrename from sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java\nrename to sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializer.java\nindex 8fdf383d00c..058c9bc68da 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/serializer/JsonSerializer.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializer.java\n\n@@ -1,7 +1,7 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-package com.azure.core.serializer;\n+package com.azure.core.util.serializer;\n \n import java.io.OutputStream;\n \n"}}, {"oid": "da6b650cf490e300343ec0ad859e631650731893", "url": "https://github.com/Azure/azure-sdk-for-java/commit/da6b650cf490e300343ec0ad859e631650731893", "message": "Merge branch 'master' into AzCore_PluggableSerialization", "committedDate": "2020-04-24T21:51:47Z", "type": "commit"}, {"oid": "29729f86d0ecb0ac5cf45a7ead46038a88e26021", "url": "https://github.com/Azure/azure-sdk-for-java/commit/29729f86d0ecb0ac5cf45a7ead46038a88e26021", "message": "Add module-info exports", "committedDate": "2020-04-24T21:59:39Z", "type": "commit"}, {"oid": "0be692555747ca3c172dd301e7354c372287f488", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0be692555747ca3c172dd301e7354c372287f488", "message": "Merge branch 'master' into AzCore_PluggableSerialization", "committedDate": "2020-04-24T23:16:23Z", "type": "commit"}, {"oid": "ee6a57df4774aca781f7e3a9e92a631505e0d81b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ee6a57df4774aca781f7e3a9e92a631505e0d81b", "message": "Moved JsonSerializer interface into util.serializer", "committedDate": "2020-04-24T23:17:19Z", "type": "commit"}, {"oid": "4e99f99ba8dcd6cb0de04eabfe6b2ed902269249", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4e99f99ba8dcd6cb0de04eabfe6b2ed902269249", "message": "Merge branch 'master' into AzCore_PluggableSerialization", "committedDate": "2020-04-24T23:33:30Z", "type": "commit"}, {"oid": "905c7e52d41e29f1378dbbd4540739f93e0ccc72", "url": "https://github.com/Azure/azure-sdk-for-java/commit/905c7e52d41e29f1378dbbd4540739f93e0ccc72", "message": "Remove export for package that no longer exists", "committedDate": "2020-04-24T23:34:12Z", "type": "commit"}, {"oid": "c8c00bd7a573254a226247d02263d43fa6b3d79c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c8c00bd7a573254a226247d02263d43fa6b3d79c", "message": "Merge branch 'master' into AzCore_PluggableSerialization", "committedDate": "2020-04-27T19:55:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNDYxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r416124617", "bodyText": "Is there an immediate use case for this API?", "author": "JonathanGiles", "createdAt": "2020-04-27T20:26:57Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.util.serializer;\n+\n+import java.io.OutputStream;\n+\n+/**\n+ * Generic interface covering basic JSON serialization and deserialization methods.\n+ */\n+public interface JsonSerializer {\n+    /**\n+     * Reads the JSON byte stream into its object representation.\n+     *\n+     * @param input JSON byte stream.\n+     * @param clazz {@link Class} representing the object.\n+     * @param <T> Type of the object.\n+     * @return The object representing the JSON string.\n+     */\n+    <T> T deserialize(byte[] input, Class<T> clazz);\n+\n+    /**\n+     * Writes the object into its JSON byte stream.\n+     *\n+     * @param value The object.\n+     * @return The JSON byte stream representing the object.\n+     */\n+    byte[] serialize(Object value);\n+\n+    /**\n+     * Converts the object into a JSON byte stream and writes it to the {@link OutputStream}.\n+     *\n+     * @param value The object.\n+     * @param stream The {@link OutputStream} where the JSON byte stream will be written.\n+     */\n+    void serialize(Object value, OutputStream stream);", "originalCommit": "905c7e52d41e29f1378dbbd4540739f93e0ccc72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyODE2MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r416128160", "bodyText": "This should be removable and has a viable work around without the existence of the API.\nWith API\nserialize(value, stream);\nWithout API\nstream.write(serialize(value));", "author": "alzimmermsft", "createdAt": "2020-04-27T20:32:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNDYxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEzMDE5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r416130191", "bodyText": "Is there a use case though that the API would enable, in particular with greater perf?", "author": "JonathanGiles", "createdAt": "2020-04-27T20:36:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNDYxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEzMjEwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9727#discussion_r416132101", "bodyText": "There may be a minor performance enhancement but the underlying serialization logic is generally the same when using either write(Object) or write(Object, OutputStream) APIs. Given the API is for a pattern we generally don't see in our libraries I don't think keeping it adds much worth.", "author": "alzimmermsft", "createdAt": "2020-04-27T20:39:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNDYxNw=="}], "type": "inlineReview", "revised_code": {"commit": "23b4b37ff0c108e1a3e7fdbd2f2def2d423452ac", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializer.java b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializer.java\nindex 058c9bc68da..018af906b3b 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializer.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/util/serializer/JsonSerializer.java\n\n@@ -3,8 +3,6 @@\n \n package com.azure.core.util.serializer;\n \n-import java.io.OutputStream;\n-\n /**\n  * Generic interface covering basic JSON serialization and deserialization methods.\n  */\n"}}, {"oid": "23b4b37ff0c108e1a3e7fdbd2f2def2d423452ac", "url": "https://github.com/Azure/azure-sdk-for-java/commit/23b4b37ff0c108e1a3e7fdbd2f2def2d423452ac", "message": "Updated version of gson, removed write(Object, OutputStream) API from JsonSerializer", "committedDate": "2020-04-27T20:37:06Z", "type": "commit"}, {"oid": "7421f17a68e6091d6331ff275be0aed4029bcf91", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7421f17a68e6091d6331ff275be0aed4029bcf91", "message": "Revert GSON verision increase", "committedDate": "2020-04-27T20:55:35Z", "type": "commit"}]}