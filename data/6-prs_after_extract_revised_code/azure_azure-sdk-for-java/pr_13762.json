{"pr_number": 13762, "pr_title": "Sb track2 Do not wait till maxWaitTime timeout If no message arrive", "pr_createdAt": "2020-08-03T23:33:50Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/13762", "timeline": [{"oid": "73dcfb2c9723cb46009e1545213df0756002ac39", "url": "https://github.com/Azure/azure-sdk-for-java/commit/73dcfb2c9723cb46009e1545213df0756002ac39", "message": "adding test", "committedDate": "2020-07-30T19:31:45Z", "type": "commit"}, {"oid": "38c9403afa7ff80399c40c073d9b32c86df5fd9e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/38c9403afa7ff80399c40c073d9b32c86df5fd9e", "message": "more work on integration test", "committedDate": "2020-07-31T18:27:05Z", "type": "commit"}, {"oid": "b3553c6e74a1faa92516d23e0dc01a616b7edbed", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b3553c6e74a1faa92516d23e0dc01a616b7edbed", "message": "Merge branch 'master' into sb-track2-maxwait-timeout-12062", "committedDate": "2020-08-03T19:56:59Z", "type": "commit"}, {"oid": "ec534b106e440e490ea14c97d7339f20f1fd96b9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ec534b106e440e490ea14c97d7339f20f1fd96b9", "message": "SyncClient : Adding short timeout in between messages", "committedDate": "2020-08-03T23:30:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc0MDU0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r464740546", "bodyText": "I'm not sure why this is passed in as a parameter. It seems very specific to a type of algorithm.", "author": "conniey", "createdAt": "2020-08-04T01:05:36Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java", "diffHunk": "@@ -753,7 +753,8 @@ public ServiceBusReceiverAsyncClient buildAsyncClient() {\n          *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n          */\n         public ServiceBusReceiverClient buildClient() {\n-            return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n+            return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout(),\n+                ServiceBusConstants.SHORT_TIMEOUT_BETWEEN_MESSAGES);", "originalCommit": "ec534b106e440e490ea14c97d7339f20f1fd96b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "13db52e838c7b315cdf7f3699c3f2be0ae9cd7f3", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\nindex b4e4e0f2c61..463f0250265 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusClientBuilder.java\n\n@@ -753,8 +753,7 @@ public final class ServiceBusClientBuilder {\n          *     queueName()} or {@link #topicName(String) topicName()}, respectively.\n          */\n         public ServiceBusReceiverClient buildClient() {\n-            return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout(),\n-                ServiceBusConstants.SHORT_TIMEOUT_BETWEEN_MESSAGES);\n+            return new ServiceBusReceiverClient(buildAsyncClient(), retryOptions.getTryTimeout());\n         }\n \n         /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc0MTExMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r464741112", "bodyText": "This is not reactive. There are other operations like switch you can use.", "author": "conniey", "createdAt": "2020-08-04T01:07:53Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousMessageSubscriber.java", "diffHunk": "@@ -205,6 +224,22 @@ private Disposable getTimeoutOperation(SynchronousReceiveWork work) {\n             });\n     }\n \n+    /**\n+     * @param work on which short timeout between message timeout thread need to start.\n+     *\n+     * @return {@link Disposable} for the timeout operation.\n+     */\n+    private Disposable getShortTimeoutBetweenMessages(SynchronousReceiveWork work) {", "originalCommit": "ec534b106e440e490ea14c97d7339f20f1fd96b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e50d2c82450458c1b0c948729e576672ce23f65", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousMessageSubscriber.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousMessageSubscriber.java\nindex 2ee459eba14..084392af35d 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousMessageSubscriber.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousMessageSubscriber.java\n\n@@ -224,22 +209,6 @@ class SynchronousMessageSubscriber extends BaseSubscriber<ServiceBusReceivedMess\n             });\n     }\n \n-    /**\n-     * @param work on which short timeout between message timeout thread need to start.\n-     *\n-     * @return {@link Disposable} for the timeout operation.\n-     */\n-    private Disposable getShortTimeoutBetweenMessages(SynchronousReceiveWork work) {\n-        return Mono.delay(shortTimeoutBetweenMessages).thenReturn(work)\n-            .subscribe(l -> {\n-                synchronized (currentWorkLock) {\n-                    if (currentWork == work) {\n-                        work.timeoutNextMessage();\n-                    }\n-                }\n-            });\n-    }\n-\n     /**\n      * {@inheritDoc}\n      */\n"}}, {"oid": "4e50d2c82450458c1b0c948729e576672ce23f65", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4e50d2c82450458c1b0c948729e576672ce23f65", "message": "Moving the logic of shortTimer to SynchronousReceiveWork", "committedDate": "2020-08-04T23:16:55Z", "type": "commit"}, {"oid": "d57ac96506e6d31c58d558671d1e25c0c5694a18", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d57ac96506e6d31c58d558671d1e25c0c5694a18", "message": "Moving the logic of shortTimer to SynchronousReceiveWork", "committedDate": "2020-08-04T23:19:48Z", "type": "commit"}, {"oid": "b31d28ba19476b90c1f873841649d02f41c83d15", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b31d28ba19476b90c1f873841649d02f41c83d15", "message": "Moving the logic of shortTimer to SynchronousReceiveWork", "committedDate": "2020-08-04T23:21:48Z", "type": "commit"}, {"oid": "13db52e838c7b315cdf7f3699c3f2be0ae9cd7f3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/13db52e838c7b315cdf7f3699c3f2be0ae9cd7f3", "message": "move the logic of timeout in worker class", "committedDate": "2020-08-06T06:23:09Z", "type": "commit"}, {"oid": "6953ea4c5b7c9cf8d17f242555ba7e04ae6171fa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6953ea4c5b7c9cf8d17f242555ba7e04ae6171fa", "message": "Increasing wait time to 200 MS between messages.", "committedDate": "2020-08-06T19:34:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNDk2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r466704965", "bodyText": "Why not make implement Closeable rather than this private close?", "author": "conniey", "createdAt": "2020-08-06T21:49:32Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java", "diffHunk": "@@ -153,4 +168,32 @@ void startedProcessing() {\n     boolean isProcessingStarted() {\n         return this.processingStarted;\n     }\n+\n+    private void close() {", "originalCommit": "6953ea4c5b7c9cf8d17f242555ba7e04ae6171fa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed25a83932203c01fa879c77421a78bca0e11378", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java\nindex 09135e235b5..19667b8b730 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java\n\n@@ -169,7 +202,8 @@ class SynchronousReceiveWork {\n         return this.processingStarted;\n     }\n \n-    private void close() {\n+    @Override\n+    public void close() {\n         if (timeoutBeforeNextMessageOperation != null && !timeoutBeforeNextMessageOperation.isDisposed()) {\n             timeoutBeforeNextMessageOperation.dispose();\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNTUxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r466705511", "bodyText": "This doesn't need to be a public constant.  It can just live inside the synchronous work class.", "author": "conniey", "createdAt": "2020-08-06T21:50:41Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusConstants.java", "diffHunk": "@@ -11,6 +11,7 @@\n public class ServiceBusConstants {\n     public static final String AZURE_ACTIVE_DIRECTORY_SCOPE = \"https://servicebus.azure.net/.default\";\n     public static final Duration OPERATION_TIMEOUT = Duration.ofSeconds(60);\n+    public static final Duration SHORT_TIMEOUT_BETWEEN_MESSAGES = Duration.ofMillis(200);", "originalCommit": "6953ea4c5b7c9cf8d17f242555ba7e04ae6171fa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed25a83932203c01fa879c77421a78bca0e11378", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusConstants.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusConstants.java\nindex 8319a56814e..8ccd4356a77 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusConstants.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/implementation/ServiceBusConstants.java\n\n@@ -11,7 +11,6 @@ import java.time.Duration;\n public class ServiceBusConstants {\n     public static final String AZURE_ACTIVE_DIRECTORY_SCOPE = \"https://servicebus.azure.net/.default\";\n     public static final Duration OPERATION_TIMEOUT = Duration.ofSeconds(60);\n-    public static final Duration SHORT_TIMEOUT_BETWEEN_MESSAGES = Duration.ofMillis(200);\n     public static final Duration TOKEN_VALIDITY = Duration.ofMinutes(20);\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMDI4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r466710289", "bodyText": "This isn't reactive to have to create a new Mono operation everytime a message come in. How about a combination of Flux.swithOnNext(publisher).takeUntil(notCancelled) where a new item is emitted from the publisher if there is a next message? And for each item emitted, delay at an interval. So if the item is emitted, then cancel the emitter.", "author": "conniey", "createdAt": "2020-08-06T22:02:58Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java", "diffHunk": "@@ -96,8 +104,12 @@ boolean isTerminal() {\n      */\n     void next(ServiceBusReceivedMessageContext message) {\n         try {\n+            if (timeoutBeforeNextMessageOperation != null && !timeoutBeforeNextMessageOperation.isDisposed()) {", "originalCommit": "6953ea4c5b7c9cf8d17f242555ba7e04ae6171fa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed25a83932203c01fa879c77421a78bca0e11378", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java\nindex 09135e235b5..19667b8b730 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java\n\n@@ -104,12 +116,33 @@ class SynchronousReceiveWork {\n      */\n     void next(ServiceBusReceivedMessageContext message) {\n         try {\n-            if (timeoutBeforeNextMessageOperation != null && !timeoutBeforeNextMessageOperation.isDisposed()) {\n-                timeoutBeforeNextMessageOperation.dispose();\n+            if (nextMessageSubscriber == null) {\n+                    final Flux<Object> shortTimeOutOccurred = Flux.first(Mono.delay(SHORT_TIMEOUT_BETWEEN_MESSAGES));\n+\n+                    nextMessagePublisher = Flux.switchOnNext(messageReceivedEmitter.handle((messageContext, sink) -> {\n+                        emitter.next(messageContext);\n+                        remaining.decrementAndGet();\n+                    }))\n+                        .takeUntilOther(shortTimeOutOccurred);\n+                    nextMessageSubscriber = nextMessagePublisher\n+                        .subscribe(o -> {\n+                            }\n+                            , throwable -> {\n+                            }\n+                            , () -> {\n+                                emitter.complete();\n+                            });\n             }\n-            emitter.next(message);\n-            remaining.decrementAndGet();\n-            timeoutBeforeNextMessageOperation = getShortTimeoutBetweenMessages();\n+\n+            messageReceivedSink.next(message);\n+\n+            /*if (timeoutBeforeNextMessageOperation != null && !timeoutBeforeNextMessageOperation.isDisposed()) {\n+                timeoutBeforeNextMessageOperation.dispose();\n+            }*/\n+\n+            //emitter.next(message);\n+            //remaining.decrementAndGet();\n+            //timeoutBeforeNextMessageOperation = getShortTimeoutBetweenMessages();\n         } catch (Exception e) {\n             logger.warning(\"Exception occurred while publishing downstream.\", e);\n             error(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMDYzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r466710639", "bodyText": "When is this used?", "author": "conniey", "createdAt": "2020-08-06T22:03:59Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/SynchronousMessageSubscriberTest.java", "diffHunk": "@@ -24,7 +24,7 @@\n  * Unit test for sync subscriber.\n  */\n public class SynchronousMessageSubscriberTest {\n-\n+    public static final Duration SHORT_TIMEOUT_BETWEEN_MESSAGES = Duration.ofMillis(1000 * 15);", "originalCommit": "6953ea4c5b7c9cf8d17f242555ba7e04ae6171fa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "357899c43e6155f956a200ce8fc1a3937d18a177", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/SynchronousMessageSubscriberTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/SynchronousMessageSubscriberTest.java\nindex 0b164447488..8299d1b456f 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/SynchronousMessageSubscriberTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/SynchronousMessageSubscriberTest.java\n\n@@ -24,7 +24,6 @@ import static org.mockito.Mockito.when;\n  * Unit test for sync subscriber.\n  */\n public class SynchronousMessageSubscriberTest {\n-    public static final Duration SHORT_TIMEOUT_BETWEEN_MESSAGES = Duration.ofMillis(1000 * 15);\n     private static final int PREFETCH = 1;\n \n     @Mock\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxMDcyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r466710727", "bodyText": "This is commented out.", "author": "conniey", "createdAt": "2020-08-06T22:04:15Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java", "diffHunk": "@@ -809,6 +815,7 @@ private void setSenderAndReceiver(MessagingEntityType entityType, int entityInde\n                 .buildClient();\n         } else {\n             this.receiver = getReceiverBuilder(false, entityType, entityIndex, Function.identity(), sharedConnection)\n+                //.prefetchCount(5)", "originalCommit": "6953ea4c5b7c9cf8d17f242555ba7e04ae6171fa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb40d338041fbbd3ca66de2b458e854625b4dd70", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java\nindex e3f79fb42f9..526abb49482 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusReceiverClientIntegrationTest.java\n\n@@ -815,7 +816,6 @@ class ServiceBusReceiverClientIntegrationTest extends IntegrationTestBase {\n                 .buildClient();\n         } else {\n             this.receiver = getReceiverBuilder(false, entityType, entityIndex, Function.identity(), sharedConnection)\n-                //.prefetchCount(5)\n                 .buildClient();\n             this.receiveAndDeleteReceiver = getReceiverBuilder(false, entityType, entityIndex,\n                 Function.identity(), sharedConnection)\n"}}, {"oid": "ed25a83932203c01fa879c77421a78bca0e11378", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ed25a83932203c01fa879c77421a78bca0e11378", "message": "continue test", "committedDate": "2020-08-07T06:17:41Z", "type": "commit"}, {"oid": "357899c43e6155f956a200ce8fc1a3937d18a177", "url": "https://github.com/Azure/azure-sdk-for-java/commit/357899c43e6155f956a200ce8fc1a3937d18a177", "message": "Removed unwanted variable", "committedDate": "2020-08-07T15:47:44Z", "type": "commit"}, {"oid": "e76d66898d93d3bf02b48ffede57854bd8e6873f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e76d66898d93d3bf02b48ffede57854bd8e6873f", "message": "REview comment", "committedDate": "2020-08-07T22:57:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMzk4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r467323986", "bodyText": "You don't need any logic to be in here. In the onNext() override, is where you would call emitter.next. And wherever the flux is attached to the Emitter could be the messageReceivedEmitter. MessageReceivedEmitter shouldn't have to exist.", "author": "conniey", "createdAt": "2020-08-07T23:16:54Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java", "diffHunk": "@@ -43,6 +57,20 @@\n         this.numberToReceive = numberToReceive;\n         this.timeout = timeout;\n         this.emitter = emitter;\n+\n+        nextMessageSubscriber = Flux.switchOnNext(messageReceivedEmitter\n+            .map(messageContext -> {\n+                emitter.next(messageContext);", "originalCommit": "e76d66898d93d3bf02b48ffede57854bd8e6873f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "825528d5d5de0130258d78dfce8cabb76948d7d6", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java\nindex c168295dd78..dc03f9deeba 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java\n\n@@ -57,15 +58,14 @@ class SynchronousReceiveWork implements AutoCloseable{\n         this.numberToReceive = numberToReceive;\n         this.timeout = timeout;\n         this.emitter = emitter;\n-\n+        \n         nextMessageSubscriber = Flux.switchOnNext(messageReceivedEmitter\n             .map(messageContext -> {\n                 emitter.next(messageContext);\n                 remaining.decrementAndGet();\n-                return messageContext;\n+                return Mono.delay(SHORT_TIMEOUT_BETWEEN_MESSAGES);\n             })\n-            .flatMap(lockToken -> Mono.delay(SHORT_TIMEOUT_BETWEEN_MESSAGES))\n-            //.takeUntilOther(Flux.first(Mono.delay(SHORT_TIMEOUT_BETWEEN_MESSAGES)))\n+            //.flatMap(lockToken -> Mono.delay(SHORT_TIMEOUT_BETWEEN_MESSAGES))\n             .handle((l, sink) -> {\n                 emitter.complete();\n                 sink.complete();\n"}}, {"oid": "825528d5d5de0130258d78dfce8cabb76948d7d6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/825528d5d5de0130258d78dfce8cabb76948d7d6", "message": "Review comment", "committedDate": "2020-08-08T00:50:57Z", "type": "commit"}, {"oid": "47395a170520686966bbe0ea5fd905af017c193e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/47395a170520686966bbe0ea5fd905af017c193e", "message": "testing", "committedDate": "2020-08-09T18:13:12Z", "type": "commit"}, {"oid": "b04255a8485875dda80a86367f9620e025149b86", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b04255a8485875dda80a86367f9620e025149b86", "message": "Fixing short timeout.", "committedDate": "2020-08-10T22:38:46Z", "type": "commit"}, {"oid": "bb40d338041fbbd3ca66de2b458e854625b4dd70", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bb40d338041fbbd3ca66de2b458e854625b4dd70", "message": "cleanup", "committedDate": "2020-08-10T22:50:01Z", "type": "commit"}, {"oid": "3ebaa7c8400eb44e665485dbd6ce2e67a1c7c343", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3ebaa7c8400eb44e665485dbd6ce2e67a1c7c343", "message": "cleanup", "committedDate": "2020-08-10T22:56:30Z", "type": "commit"}, {"oid": "52102e5eb6fddbc0e3c03b67befc1bcb9d67de1f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/52102e5eb6fddbc0e3c03b67befc1bcb9d67de1f", "message": "cleanup", "committedDate": "2020-08-10T23:11:33Z", "type": "commit"}, {"oid": "b3453e163444f608a38a020d492b50f28b368248", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b3453e163444f608a38a020d492b50f28b368248", "message": "cleanup", "committedDate": "2020-08-10T23:13:16Z", "type": "commit"}, {"oid": "9f766b5f66e9069aa925842b672a9ea3b80d7590", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9f766b5f66e9069aa925842b672a9ea3b80d7590", "message": "Checkstyle fixes", "committedDate": "2020-08-11T04:30:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkxOTgwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r467919800", "bodyText": "TIMEOUT_BETWEEN_MESSAGES is sufficient.", "author": "conniey", "createdAt": "2020-08-10T13:54:10Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java", "diffHunk": "@@ -4,15 +4,22 @@\n package com.azure.messaging.servicebus;\n \n import com.azure.core.util.logging.ClientLogger;\n+import reactor.core.Disposable;\n+import reactor.core.publisher.DirectProcessor;\n+import reactor.core.publisher.EmitterProcessor;\n+import reactor.core.publisher.Flux;\n import reactor.core.publisher.FluxSink;\n+import reactor.core.publisher.Mono;\n \n import java.time.Duration;\n import java.util.concurrent.atomic.AtomicInteger;\n \n /**\n  * Synchronous work for receiving messages.\n  */\n-class SynchronousReceiveWork {\n+class SynchronousReceiveWork implements AutoCloseable{\n+    private static final Duration SHORT_TIMEOUT_BETWEEN_MESSAGES = Duration.ofMillis(100);", "originalCommit": "47395a170520686966bbe0ea5fd905af017c193e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b04255a8485875dda80a86367f9620e025149b86", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java\nindex dc03f9deeba..1716989450c 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java\n\n@@ -6,10 +6,8 @@ package com.azure.messaging.servicebus;\n import com.azure.core.util.logging.ClientLogger;\n import reactor.core.Disposable;\n import reactor.core.publisher.DirectProcessor;\n-import reactor.core.publisher.EmitterProcessor;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.FluxSink;\n-import reactor.core.publisher.Mono;\n \n import java.time.Duration;\n import java.util.concurrent.atomic.AtomicInteger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzMTYyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r468631620", "bodyText": "When it leaves the scope of the method, doesn't this get collected?", "author": "conniey", "createdAt": "2020-08-11T14:37:11Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java", "diffHunk": "@@ -43,6 +54,18 @@\n         this.numberToReceive = numberToReceive;\n         this.timeout = timeout;\n         this.emitter = emitter;\n+\n+        DirectProcessor<ServiceBusReceivedMessageContext> emitterProcessor = DirectProcessor.create();", "originalCommit": "9f766b5f66e9069aa925842b672a9ea3b80d7590", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00229818be7fed2ba0e6338d479df006d0db7cfb", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java\nindex 55b05471ad2..afb2c04ca96 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java\n\n@@ -55,11 +56,11 @@ class SynchronousReceiveWork implements AutoCloseable {\n         this.timeout = timeout;\n         this.emitter = emitter;\n \n-        DirectProcessor<ServiceBusReceivedMessageContext> emitterProcessor = DirectProcessor.create();\n+        emitterProcessor = DirectProcessor.create();\n         messageReceivedSink = emitterProcessor.sink();\n \n         nextMessageSubscriber = Flux.switchOnNext(emitterProcessor.map(messageContext ->\n-            Flux.interval(SHORT_TIMEOUT_BETWEEN_MESSAGES)))\n+            Flux.interval(TIMEOUT_BETWEEN_MESSAGES)))\n             .handle((delay, sink) -> {\n                 logger.info(\"[{}]: Timeout between the messages occurred. Completing the work.\", id);\n                 sink.next(delay);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzMjYyMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r468632622", "bodyText": "is the null check necessary? Isn't this always set in the constructor. You can just call dispose.", "author": "conniey", "createdAt": "2020-08-11T14:38:32Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java", "diffHunk": "@@ -153,4 +180,11 @@ void startedProcessing() {\n     boolean isProcessingStarted() {\n         return this.processingStarted;\n     }\n+\n+    @Override\n+    public void close() {\n+        if (nextMessageSubscriber != null && !nextMessageSubscriber.isDisposed()) {", "originalCommit": "9f766b5f66e9069aa925842b672a9ea3b80d7590", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00229818be7fed2ba0e6338d479df006d0db7cfb", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java\nindex 55b05471ad2..afb2c04ca96 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java\n\n@@ -183,7 +184,7 @@ class SynchronousReceiveWork implements AutoCloseable {\n \n     @Override\n     public void close() {\n-        if (nextMessageSubscriber != null && !nextMessageSubscriber.isDisposed()) {\n+        if (!nextMessageSubscriber.isDisposed()) {\n             nextMessageSubscriber.dispose();\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzMzE1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13762#discussion_r468633156", "bodyText": "TIMEOUT_BETWEEN_MESSAGES is enough.", "author": "conniey", "createdAt": "2020-08-11T14:39:19Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java", "diffHunk": "@@ -12,13 +15,21 @@\n /**\n  * Synchronous work for receiving messages.\n  */\n-class SynchronousReceiveWork {\n+class SynchronousReceiveWork implements AutoCloseable {\n+\n+    /* When we have received at-least one message and next message does not arrive in this time. The work will\n+    complete.*/\n+    private static final Duration SHORT_TIMEOUT_BETWEEN_MESSAGES = Duration.ofMillis(1000);", "originalCommit": "9f766b5f66e9069aa925842b672a9ea3b80d7590", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "00229818be7fed2ba0e6338d479df006d0db7cfb", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java\nindex 55b05471ad2..afb2c04ca96 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/SynchronousReceiveWork.java\n\n@@ -19,7 +19,7 @@ class SynchronousReceiveWork implements AutoCloseable {\n \n     /* When we have received at-least one message and next message does not arrive in this time. The work will\n     complete.*/\n-    private static final Duration SHORT_TIMEOUT_BETWEEN_MESSAGES = Duration.ofMillis(1000);\n+    private static final Duration TIMEOUT_BETWEEN_MESSAGES = Duration.ofMillis(1000);\n \n     private final ClientLogger logger = new ClientLogger(SynchronousReceiveWork.class);\n     private final long id;\n"}}, {"oid": "00229818be7fed2ba0e6338d479df006d0db7cfb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/00229818be7fed2ba0e6338d479df006d0db7cfb", "message": "Review comments", "committedDate": "2020-08-11T15:25:19Z", "type": "commit"}]}