{"pr_number": 13304, "pr_title": "Update Reactor Netty Proxy Handling", "pr_createdAt": "2020-07-17T21:13:22Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/13304", "timeline": [{"oid": "7b664e106a3377bce2cd942200e282c1e34d9533", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7b664e106a3377bce2cd942200e282c1e34d9533", "message": "Fix how the custom proxy handler is added to the ChannelPipeline to ensure the connection can be reused", "committedDate": "2020-07-17T21:04:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc4MjY1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13304#discussion_r457782650", "bodyText": "Do we need to consider (now or later) extending the pattern-matching algorithm to cover standard java networking properties formats? Reactor-netty claims to cover those cases here.", "author": "anuchandy", "createdAt": "2020-07-21T01:30:13Z", "path": "sdk/core/azure-core-http-netty/src/main/java/com/azure/core/http/netty/implementation/DeferredHttpProxyProvider.java", "diffHunk": "@@ -0,0 +1,96 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.core.http.netty.implementation;\n+\n+import com.azure.core.http.ProxyOptions;\n+import com.azure.core.util.AuthorizationChallengeHandler;\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.channel.Channel;\n+import reactor.netty.ConnectionObserver;\n+import reactor.netty.NettyPipeline;\n+\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * This class defers supplying a channel pipeline with a proxy handler.\n+ */\n+public class DeferredHttpProxyProvider implements Function<Bootstrap, BiConsumer<ConnectionObserver, Channel>> {\n+    private final AuthorizationChallengeHandler challengeHandler;\n+    private final AtomicReference<ChallengeHolder> proxyChallengeHolderReference;\n+    private final InetSocketAddress proxyAddress;\n+    private final String username;\n+    private final String password;\n+    private final String nonProxyHosts;\n+\n+    private final Pattern nonProxyHostsPattern;\n+\n+    public DeferredHttpProxyProvider(AuthorizationChallengeHandler challengeHandler,\n+        AtomicReference<ChallengeHolder> proxyChallengeHolderReference, ProxyOptions proxyOptions) {\n+        this.challengeHandler = challengeHandler;\n+        this.proxyChallengeHolderReference = proxyChallengeHolderReference;\n+        this.proxyAddress = proxyOptions.getAddress();\n+        this.username = proxyOptions.getUsername();\n+        this.password = proxyOptions.getPassword();\n+        this.nonProxyHosts = proxyOptions.getNonProxyHosts();\n+\n+        this.nonProxyHostsPattern = (nonProxyHosts == null)\n+            ? null\n+            : Pattern.compile(nonProxyHosts, Pattern.CASE_INSENSITIVE);\n+    }\n+\n+    @Override\n+    public BiConsumer<ConnectionObserver, Channel> apply(Bootstrap bootstrap) {\n+        return ((connectionObserver, channel) -> {\n+            if (shouldApplyProxy(bootstrap.config().remoteAddress())) {\n+                channel.pipeline()\n+                    .addFirst(NettyPipeline.ProxyHandler, new HttpProxyHandler(proxyAddress, challengeHandler,\n+                        proxyChallengeHolderReference))\n+                    .addLast(\"azure.proxy.exceptionHandler\", new HttpProxyExceptionHandler());\n+            }\n+        });\n+    }\n+\n+    private boolean shouldApplyProxy(SocketAddress socketAddress) {\n+        if (nonProxyHostsPattern == null) {\n+            return true;\n+        }\n+\n+        if (!(socketAddress instanceof  InetSocketAddress)) {\n+            return true;\n+        }\n+\n+        InetSocketAddress inetSocketAddress = (InetSocketAddress) socketAddress;\n+\n+        return !nonProxyHostsPattern.matcher(inetSocketAddress.getHostName()).matches();", "originalCommit": "7b664e106a3377bce2cd942200e282c1e34d9533", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0NTY3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/13304#discussion_r458245672", "bodyText": "There is more work that is required around non proxy hosts, should roll that into this issue: #7795", "author": "alzimmermsft", "createdAt": "2020-07-21T16:52:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc4MjY1MA=="}], "type": "inlineReview", "revised_code": null}]}