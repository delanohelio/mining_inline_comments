{"pr_number": 10538, "pr_title": "Add send list API : send list of messages", "pr_createdAt": "2020-04-27T22:46:48Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/10538", "timeline": [{"oid": "4305cecc1f33f476f2ee5a3603b80cb3d77765fa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4305cecc1f33f476f2ee5a3603b80cb3d77765fa", "message": "Add API: send list of messages", "committedDate": "2020-04-27T22:40:27Z", "type": "commit"}, {"oid": "004f781caae390441f7e434ce29760f913ced955", "url": "https://github.com/Azure/azure-sdk-for-java/commit/004f781caae390441f7e434ce29760f913ced955", "message": "Added unit test", "committedDate": "2020-04-27T23:00:40Z", "type": "commit"}, {"oid": "acf243e9d87dd90d583c925577ea129bc7c25dae", "url": "https://github.com/Azure/azure-sdk-for-java/commit/acf243e9d87dd90d583c925577ea129bc7c25dae", "message": "Updated documentation", "committedDate": "2020-04-27T23:13:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI4ODk2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416288968", "bodyText": "Do you have a test case for the exception scenario where there are too many events", "author": "conniey", "createdAt": "2020-04-28T02:55:47Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "diffHunk": "@@ -282,6 +283,39 @@ void sendMultipleMessages() {\n         messagesSent.forEach(message -> Assertions.assertEquals(Section.SectionType.Data, message.getBody().getType()));\n     }\n \n+    /**", "originalCommit": "acf243e9d87dd90d583c925577ea129bc7c25dae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb29d403312a5acb46464f67d3bef114fe999531", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java\nindex 37164761376..8fc8854a928 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java\n\n@@ -291,11 +291,10 @@ class ServiceBusSenderAsyncClientTest {\n         // Arrange\n         final int count = 4;\n         final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n-        final List<ServiceBusMessage> messageList = new ArrayList<>();\n+        final ServiceBusMessage[] messages = new ServiceBusMessage[count];\n \n         IntStream.range(0, count).forEach(index -> {\n-            final ServiceBusMessage message = new ServiceBusMessage(contents);\n-            Assertions.assertTrue(messageList.add(message));\n+            messages[index] = new ServiceBusMessage(contents);\n         });\n \n         when(connection.createSendLink(eq(ENTITY_NAME), eq(ENTITY_NAME), eq(retryOptions)))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI4OTM4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416289381", "bodyText": "Why are you chaining.then()? The send operation already returns a mono void.", "author": "conniey", "createdAt": "2020-04-28T02:56:53Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -135,6 +135,26 @@ public String getEntityPath() {\n         return sendInternal(Flux.just(message));\n     }\n \n+    /**\n+     * Sends a list of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n+     * exceed the maximum size of a single batch, an exception will be triggered and the send will fail.\n+     * By default, the message size is the max amount allowed on the link.\n+     *\n+     * @param messages Messages to be sent to Service Bus queue or topic.\n+     *\n+     * @return The {@link Mono} the finishes this operation on service bus resource.\n+     *\n+     * @throws NullPointerException if {@code messages} is {@code null}.\n+     */\n+    public Mono<Void> send(Iterable<ServiceBusMessage> messages) {\n+        Objects.requireNonNull(messages, \"'messages' cannot be null.\");\n+\n+        return createBatch().flatMap(messageBatch -> {\n+            messages.forEach(serviceBusMessage -> messageBatch.tryAdd(serviceBusMessage));\n+            return send(messageBatch);\n+        }).then();", "originalCommit": "acf243e9d87dd90d583c925577ea129bc7c25dae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb29d403312a5acb46464f67d3bef114fe999531", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\nindex d2668b8ebf5..99931a0feb3 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n\n@@ -136,7 +137,7 @@ public final class ServiceBusSenderAsyncClient implements AutoCloseable {\n     }\n \n     /**\n-     * Sends a list of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n+     * Sends a array of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n      * exceed the maximum size of a single batch, an exception will be triggered and the send will fail.\n      * By default, the message size is the max amount allowed on the link.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI4OTkwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416289909", "bodyText": "Why not varargs instead of iterable. I don't remember this in an API view, so I'm curious.", "author": "conniey", "createdAt": "2020-04-28T02:58:34Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -135,6 +135,26 @@ public String getEntityPath() {\n         return sendInternal(Flux.just(message));\n     }\n \n+    /**\n+     * Sends a list of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n+     * exceed the maximum size of a single batch, an exception will be triggered and the send will fail.\n+     * By default, the message size is the max amount allowed on the link.\n+     *\n+     * @param messages Messages to be sent to Service Bus queue or topic.\n+     *\n+     * @return The {@link Mono} the finishes this operation on service bus resource.\n+     *\n+     * @throws NullPointerException if {@code messages} is {@code null}.\n+     */\n+    public Mono<Void> send(Iterable<ServiceBusMessage> messages) {", "originalCommit": "acf243e9d87dd90d583c925577ea129bc7c25dae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM1NTk1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416355952", "bodyText": "Changed to vargs : This was added by Ramya in last week , I did not had it in API View, We should add just it in API View.", "author": "hemanttanwar", "createdAt": "2020-04-28T06:18:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI4OTkwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "eb29d403312a5acb46464f67d3bef114fe999531", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\nindex d2668b8ebf5..99931a0feb3 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n\n@@ -136,7 +137,7 @@ public final class ServiceBusSenderAsyncClient implements AutoCloseable {\n     }\n \n     /**\n-     * Sends a list of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n+     * Sends a array of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n      * exceed the maximum size of a single batch, an exception will be triggered and the send will fail.\n      * By default, the message size is the max amount allowed on the link.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MDQxMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416290410", "bodyText": "Why the assertion here? It's not testing our code", "author": "conniey", "createdAt": "2020-04-28T03:00:12Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java", "diffHunk": "@@ -144,6 +150,39 @@ void createsMessageBatchWithSize() {\n         Assertions.assertEquals(batch, messageBatch);\n     }\n \n+    /**\n+     * Verifies that sending a single message will result in calling sender.send(Message).\n+     */\n+    @Test\n+    void sendMessageList() {\n+        // Arrange\n+        final int count = 4;\n+        final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n+        final List<ServiceBusMessage> messageList = new ArrayList<>();\n+\n+        IntStream.range(0, count).forEach(index -> {\n+            final ServiceBusMessage message = new ServiceBusMessage(contents);\n+            Assertions.assertTrue(messageList.add(message));", "originalCommit": "acf243e9d87dd90d583c925577ea129bc7c25dae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb29d403312a5acb46464f67d3bef114fe999531", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java\nindex b336d194740..f97a4a352dc 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java\n\n@@ -158,29 +160,30 @@ public class ServiceBusSenderClientTest {\n         // Arrange\n         final int count = 4;\n         final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n-        final List<ServiceBusMessage> messageList = new ArrayList<>();\n+        final String messageId = UUID.randomUUID().toString();\n+        final ServiceBusMessage[] messages = new ServiceBusMessage[count];\n \n         IntStream.range(0, count).forEach(index -> {\n-            final ServiceBusMessage message = new ServiceBusMessage(contents);\n-            Assertions.assertTrue(messageList.add(message));\n+            messages[index] = new ServiceBusMessage(contents);\n         });\n \n-        when(asyncSender.send(messageList)).thenReturn(Mono.empty());\n+        when(asyncSender.send(messages)).thenReturn(Mono.empty());\n \n         // Act\n-        sender.send(messageList);\n+        sender.send(messages);\n \n         // Assert\n-        verify(asyncSender, times(1)).send(messageList);\n+        verify(asyncSender, times(1)).send(messages);\n         verify(asyncSender).send(messageListCaptor.capture());\n \n-        final List<ServiceBusMessage> sentMessages = messageListCaptor.getValue();\n-        Assertions.assertEquals(count, sentMessages.size());\n \n-        sentMessages.forEach(sentMessage -> {\n-            Assertions.assertArrayEquals(contents, sentMessage.getBody());\n-        });\n+        final List<ServiceBusMessage[]> sentMessages = messageListCaptor.getAllValues();\n+        Assertions.assertEquals(count, sentMessages.size());\n \n+        for (int index = 0;index < sentMessages.size(); ++index) {\n+            Object object = sentMessages.get(0);\n+            Assertions.assertArrayEquals(contents, ((ServiceBusMessage) object).getBody());\n+        }\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MDc3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416290771", "bodyText": "Does message need to be fully qualified", "author": "conniey", "createdAt": "2020-04-28T03:01:13Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "diffHunk": "@@ -282,6 +283,39 @@ void sendMultipleMessages() {\n         messagesSent.forEach(message -> Assertions.assertEquals(Section.SectionType.Data, message.getBody().getType()));\n     }\n \n+    /**\n+     * Verifies that sending multiple message will result in calling sender.send(Iterator).\n+     */\n+    @Test\n+    void sendMessagesList() {\n+        // Arrange\n+        final int count = 4;\n+        final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n+        final List<ServiceBusMessage> messageList = new ArrayList<>();\n+\n+        IntStream.range(0, count).forEach(index -> {\n+            final ServiceBusMessage message = new ServiceBusMessage(contents);\n+            Assertions.assertTrue(messageList.add(message));\n+        });\n+\n+        when(connection.createSendLink(eq(ENTITY_NAME), eq(ENTITY_NAME), eq(retryOptions)))\n+            .thenReturn(Mono.just(sendLink));\n+        when(sendLink.send(any(Message.class))).thenReturn(Mono.empty());\n+        when(sendLink.send(anyList())).thenReturn(Mono.empty());\n+\n+        // Act\n+        StepVerifier.create(sender.send(messageList))\n+            .verifyComplete();\n+\n+        // Assert\n+        verify(sendLink).send(messagesCaptor.capture());\n+\n+        final List<org.apache.qpid.proton.message.Message> messagesSent = messagesCaptor.getValue();\n+        Assertions.assertEquals(count, messagesSent.size());", "originalCommit": "acf243e9d87dd90d583c925577ea129bc7c25dae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb29d403312a5acb46464f67d3bef114fe999531", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java\nindex 37164761376..8fc8854a928 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java\n\n@@ -291,11 +291,10 @@ class ServiceBusSenderAsyncClientTest {\n         // Arrange\n         final int count = 4;\n         final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n-        final List<ServiceBusMessage> messageList = new ArrayList<>();\n+        final ServiceBusMessage[] messages = new ServiceBusMessage[count];\n \n         IntStream.range(0, count).forEach(index -> {\n-            final ServiceBusMessage message = new ServiceBusMessage(contents);\n-            Assertions.assertTrue(messageList.add(message));\n+            messages[index] = new ServiceBusMessage(contents);\n         });\n \n         when(connection.createSendLink(eq(ENTITY_NAME), eq(ENTITY_NAME), eq(retryOptions)))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MDg5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416290894", "bodyText": "Why an assertion here?", "author": "conniey", "createdAt": "2020-04-28T03:01:28Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "diffHunk": "@@ -282,6 +283,39 @@ void sendMultipleMessages() {\n         messagesSent.forEach(message -> Assertions.assertEquals(Section.SectionType.Data, message.getBody().getType()));\n     }\n \n+    /**\n+     * Verifies that sending multiple message will result in calling sender.send(Iterator).\n+     */\n+    @Test\n+    void sendMessagesList() {\n+        // Arrange\n+        final int count = 4;\n+        final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n+        final List<ServiceBusMessage> messageList = new ArrayList<>();\n+\n+        IntStream.range(0, count).forEach(index -> {\n+            final ServiceBusMessage message = new ServiceBusMessage(contents);\n+            Assertions.assertTrue(messageList.add(message));", "originalCommit": "acf243e9d87dd90d583c925577ea129bc7c25dae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb29d403312a5acb46464f67d3bef114fe999531", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java\nindex 37164761376..8fc8854a928 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java\n\n@@ -291,11 +291,10 @@ class ServiceBusSenderAsyncClientTest {\n         // Arrange\n         final int count = 4;\n         final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n-        final List<ServiceBusMessage> messageList = new ArrayList<>();\n+        final ServiceBusMessage[] messages = new ServiceBusMessage[count];\n \n         IntStream.range(0, count).forEach(index -> {\n-            final ServiceBusMessage message = new ServiceBusMessage(contents);\n-            Assertions.assertTrue(messageList.add(message));\n+            messages[index] = new ServiceBusMessage(contents);\n         });\n \n         when(connection.createSendLink(eq(ENTITY_NAME), eq(ENTITY_NAME), eq(retryOptions)))\n"}}, {"oid": "eb29d403312a5acb46464f67d3bef114fe999531", "url": "https://github.com/Azure/azure-sdk-for-java/commit/eb29d403312a5acb46464f67d3bef114fe999531", "message": "REview comments", "committedDate": "2020-04-28T06:17:13Z", "type": "commit"}, {"oid": "2d115b4cef011e32a1c30f0ab34c0d82b3e0e94f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2d115b4cef011e32a1c30f0ab34c0d82b3e0e94f", "message": "Review comments", "committedDate": "2020-04-28T16:51:30Z", "type": "commit"}, {"oid": "e7b044122d7e43738b789267c219219264d4765f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e7b044122d7e43738b789267c219219264d4765f", "message": "changed java doc", "committedDate": "2020-04-28T18:51:30Z", "type": "commit"}, {"oid": "8ea189bc64f8a7b7ea684a5fb27882d18d299eb1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8ea189bc64f8a7b7ea684a5fb27882d18d299eb1", "message": "Merge branch 'master' into servicebus-track2-send-multiple-messages-9400", "committedDate": "2020-04-28T19:01:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNDgzMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416924833", "bodyText": "This return doesn't make sense.\n\"A Mono that completes when all messages have been sent to the Service Bus resource.\"", "author": "conniey", "createdAt": "2020-04-28T21:10:34Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -136,21 +137,23 @@ public String getEntityPath() {\n     }\n \n     /**\n-     * Sends a message to a Service Bus queue or topic.\n+     * Sends an array of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n+     * exceed the maximum size of a single batch, an exception will be triggered and the send will fail.\n+     * By default, the message size is the max amount allowed on the link.\n      *\n-     * @param message Message to be sent to Service Bus queue or topic.\n-     * @param sessionId the session id to associate with the message.\n+     * @param messages Messages to be sent to Service Bus queue or topic.\n      *\n-     * @return A {@link Mono} the finishes this operation on service bus resource.\n+     * @return The {@link Mono} the finishes this operation on service bus resource.", "originalCommit": "e7b044122d7e43738b789267c219219264d4765f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cbef17b9819a168cbfaee6c880c8430fdd2d78aa", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\nindex 044909bb89c..14dcf3db184 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n\n@@ -137,21 +136,22 @@ public final class ServiceBusSenderAsyncClient implements AutoCloseable {\n     }\n \n     /**\n-     * Sends an array of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n+     * Sends a set of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n      * exceed the maximum size of a single batch, an exception will be triggered and the send will fail.\n      * By default, the message size is the max amount allowed on the link.\n      *\n      * @param messages Messages to be sent to Service Bus queue or topic.\n      *\n-     * @return The {@link Mono} the finishes this operation on service bus resource.\n+     * @return A {@link Mono} that completes when all messages have been sent to the Service Bus resource.\n      *\n      * @throws NullPointerException if {@code messages} is {@code null}.\n+     * @throws AmqpException if {@code messages} is larger than the maximum allowed size of a single batch.\n      */\n-    public Mono<Void> send(ServiceBusMessage... messages) {\n+    public Mono<Void> send(Iterable<ServiceBusMessage> messages) {\n         Objects.requireNonNull(messages, \"'messages' cannot be null.\");\n \n         return createBatch().flatMap(messageBatch -> {\n-            Stream.of(messages).forEach(serviceBusMessage -> messageBatch.tryAdd(serviceBusMessage));\n+            messages.forEach(message -> messageBatch.tryAdd(message));\n             return send(messageBatch);\n         });\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNTExMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416925112", "bodyText": "You have to indicate what exception is thrown when the payload exceeds the size of a single batch.", "author": "conniey", "createdAt": "2020-04-28T21:11:04Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -136,21 +137,23 @@ public String getEntityPath() {\n     }\n \n     /**\n-     * Sends a message to a Service Bus queue or topic.\n+     * Sends an array of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n+     * exceed the maximum size of a single batch, an exception will be triggered and the send will fail.\n+     * By default, the message size is the max amount allowed on the link.\n      *\n-     * @param message Message to be sent to Service Bus queue or topic.\n-     * @param sessionId the session id to associate with the message.\n+     * @param messages Messages to be sent to Service Bus queue or topic.\n      *\n-     * @return A {@link Mono} the finishes this operation on service bus resource.\n+     * @return The {@link Mono} the finishes this operation on service bus resource.\n      *\n-     * @throws NullPointerException if {@code message} or {@code sessionId} is {@code null}.\n+     * @throws NullPointerException if {@code messages} is {@code null}.", "originalCommit": "e7b044122d7e43738b789267c219219264d4765f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cbef17b9819a168cbfaee6c880c8430fdd2d78aa", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\nindex 044909bb89c..14dcf3db184 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n\n@@ -137,21 +136,22 @@ public final class ServiceBusSenderAsyncClient implements AutoCloseable {\n     }\n \n     /**\n-     * Sends an array of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n+     * Sends a set of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n      * exceed the maximum size of a single batch, an exception will be triggered and the send will fail.\n      * By default, the message size is the max amount allowed on the link.\n      *\n      * @param messages Messages to be sent to Service Bus queue or topic.\n      *\n-     * @return The {@link Mono} the finishes this operation on service bus resource.\n+     * @return A {@link Mono} that completes when all messages have been sent to the Service Bus resource.\n      *\n      * @throws NullPointerException if {@code messages} is {@code null}.\n+     * @throws AmqpException if {@code messages} is larger than the maximum allowed size of a single batch.\n      */\n-    public Mono<Void> send(ServiceBusMessage... messages) {\n+    public Mono<Void> send(Iterable<ServiceBusMessage> messages) {\n         Objects.requireNonNull(messages, \"'messages' cannot be null.\");\n \n         return createBatch().flatMap(messageBatch -> {\n-            Stream.of(messages).forEach(serviceBusMessage -> messageBatch.tryAdd(serviceBusMessage));\n+            messages.forEach(message -> messageBatch.tryAdd(message));\n             return send(messageBatch);\n         });\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNTc4OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416925789", "bodyText": "Why wrap this with a stream when you can use a for loop?", "author": "conniey", "createdAt": "2020-04-28T21:12:15Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -136,21 +137,23 @@ public String getEntityPath() {\n     }\n \n     /**\n-     * Sends a message to a Service Bus queue or topic.\n+     * Sends an array of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n+     * exceed the maximum size of a single batch, an exception will be triggered and the send will fail.\n+     * By default, the message size is the max amount allowed on the link.\n      *\n-     * @param message Message to be sent to Service Bus queue or topic.\n-     * @param sessionId the session id to associate with the message.\n+     * @param messages Messages to be sent to Service Bus queue or topic.\n      *\n-     * @return A {@link Mono} the finishes this operation on service bus resource.\n+     * @return The {@link Mono} the finishes this operation on service bus resource.\n      *\n-     * @throws NullPointerException if {@code message} or {@code sessionId} is {@code null}.\n+     * @throws NullPointerException if {@code messages} is {@code null}.\n      */\n-    public Mono<Void> send(ServiceBusMessage message, String sessionId) {\n-        Objects.requireNonNull(message, \"'message' cannot be null.\");\n-        Objects.requireNonNull(sessionId, \"'sessionId' cannot be null.\");\n+    public Mono<Void> send(ServiceBusMessage... messages) {\n+        Objects.requireNonNull(messages, \"'messages' cannot be null.\");\n \n-        //TODO (hemanttanwar): Implement session id feature.\n-        return Mono.error(new IllegalStateException(\"Not implemented.\"));\n+        return createBatch().flatMap(messageBatch -> {\n+            Stream.of(messages).forEach(serviceBusMessage -> messageBatch.tryAdd(serviceBusMessage));", "originalCommit": "e7b044122d7e43738b789267c219219264d4765f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cbef17b9819a168cbfaee6c880c8430fdd2d78aa", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\nindex 044909bb89c..14dcf3db184 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n\n@@ -137,21 +136,22 @@ public final class ServiceBusSenderAsyncClient implements AutoCloseable {\n     }\n \n     /**\n-     * Sends an array of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n+     * Sends a set of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n      * exceed the maximum size of a single batch, an exception will be triggered and the send will fail.\n      * By default, the message size is the max amount allowed on the link.\n      *\n      * @param messages Messages to be sent to Service Bus queue or topic.\n      *\n-     * @return The {@link Mono} the finishes this operation on service bus resource.\n+     * @return A {@link Mono} that completes when all messages have been sent to the Service Bus resource.\n      *\n      * @throws NullPointerException if {@code messages} is {@code null}.\n+     * @throws AmqpException if {@code messages} is larger than the maximum allowed size of a single batch.\n      */\n-    public Mono<Void> send(ServiceBusMessage... messages) {\n+    public Mono<Void> send(Iterable<ServiceBusMessage> messages) {\n         Objects.requireNonNull(messages, \"'messages' cannot be null.\");\n \n         return createBatch().flatMap(messageBatch -> {\n-            Stream.of(messages).forEach(serviceBusMessage -> messageBatch.tryAdd(serviceBusMessage));\n+            messages.forEach(message -> messageBatch.tryAdd(message));\n             return send(messageBatch);\n         });\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNjExOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416926118", "bodyText": "Specify the error that is thrown when the messages are too large for a single batch.\n@throws ...", "author": "conniey", "createdAt": "2020-04-28T21:12:47Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderClient.java", "diffHunk": "@@ -71,6 +71,19 @@ public void send(ServiceBusMessage message) {\n         asyncClient.send(message).block(tryTimeout);\n     }\n \n+    /**\n+     * Sends an array of {@link ServiceBusMessage} to a Service Bus queue or topic using a batched approach.\n+     * If the size of messages exceed the maximum size of a single batch, an exception will be triggered and the send\n+     * will fail. By default, the message size is the max amount allowed on the link.\n+     *\n+     * @param messages Messages to be sent to Service Bus queue or topic.\n+     *", "originalCommit": "e7b044122d7e43738b789267c219219264d4765f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cbef17b9819a168cbfaee6c880c8430fdd2d78aa", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderClient.java\nindex 0b2eda39b00..ed76f630508 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderClient.java\n\n@@ -72,15 +73,16 @@ public class ServiceBusSenderClient implements AutoCloseable {\n     }\n \n     /**\n-     * Sends an array of {@link ServiceBusMessage} to a Service Bus queue or topic using a batched approach.\n+     * Sends a set of {@link ServiceBusMessage} to a Service Bus queue or topic using a batched approach.\n      * If the size of messages exceed the maximum size of a single batch, an exception will be triggered and the send\n      * will fail. By default, the message size is the max amount allowed on the link.\n      *\n      * @param messages Messages to be sent to Service Bus queue or topic.\n      *\n      * @throws NullPointerException if {@code messages} is {@code null}.\n+     * @throws AmqpException if {@code messages} is larger than the maximum allowed size of a single batch.\n      */\n-    public void send(ServiceBusMessage... messages) {\n+    public void send(Iterable<ServiceBusMessage> messages) {\n         asyncClient.send(messages).block(tryTimeout);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNjk3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416926971", "bodyText": "there is also never() => times(0)", "author": "conniey", "createdAt": "2020-04-28T21:14:21Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "diffHunk": "@@ -282,6 +285,65 @@ void sendMultipleMessages() {\n         messagesSent.forEach(message -> Assertions.assertEquals(Section.SectionType.Data, message.getBody().getType()));\n     }\n \n+    /**\n+     * Verifies that sending multiple message will result in calling sender.send(Message...).\n+     */\n+    @Test\n+    void sendMessagesList() {\n+        // Arrange\n+        final int count = 4;\n+        final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n+        final ServiceBusMessage[] messages = new ServiceBusMessage[count];\n+\n+        IntStream.range(0, count).forEach(index -> {\n+            messages[index] = new ServiceBusMessage(contents).setMessageId(UUID.randomUUID().toString());\n+        });\n+\n+        when(connection.createSendLink(eq(ENTITY_NAME), eq(ENTITY_NAME), eq(retryOptions)))\n+            .thenReturn(Mono.just(sendLink));\n+        when(sendLink.send(any(Message.class))).thenReturn(Mono.empty());\n+        when(sendLink.send(anyList())).thenReturn(Mono.empty());\n+\n+        // Act\n+        StepVerifier.create(sender.send(messages))\n+            .verifyComplete();\n+\n+        // Assert\n+        verify(sendLink).send(messagesCaptor.capture());\n+\n+        final List<Message> messagesSent = messagesCaptor.getValue();\n+        Assertions.assertEquals(count, messagesSent.size());\n+\n+        messagesSent.forEach(message -> Assertions.assertEquals(Section.SectionType.Data, message.getBody().getType()));\n+    }\n+\n+    /**\n+     * Verifies that sending multiple message will result in calling sender.send(Iterator).\n+     */\n+    @Test\n+    void sendMessagesListExceedSize() {\n+        // Arrange\n+        final int count = 4;\n+        final Mono<Integer> linkMaxSize = Mono.just(1);\n+        final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n+        final ServiceBusMessage[] messages = new ServiceBusMessage[count];\n+\n+        IntStream.range(0, count).forEach(index -> {\n+            messages[index] = new ServiceBusMessage(contents).setMessageId(UUID.randomUUID().toString());\n+        });\n+\n+        when(connection.createSendLink(eq(ENTITY_NAME), eq(ENTITY_NAME), eq(retryOptions)))\n+            .thenReturn(Mono.just(sendLink));\n+        when(sendLink.getLinkSize()).thenReturn(linkMaxSize);\n+\n+        // Act & Assert\n+        StepVerifier.create(sender.send(messages))\n+            .verifyErrorMatches(error -> error instanceof AmqpException\n+                && ((AmqpException) error).getErrorCondition() == AmqpErrorCondition.LINK_PAYLOAD_SIZE_EXCEEDED);\n+\n+        verify(sendLink, times(0)).send(anyList());", "originalCommit": "e7b044122d7e43738b789267c219219264d4765f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cbef17b9819a168cbfaee6c880c8430fdd2d78aa", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java\nindex 38e323aae9b..5b1532aa24f 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java\n\n@@ -293,11 +294,7 @@ class ServiceBusSenderAsyncClientTest {\n         // Arrange\n         final int count = 4;\n         final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n-        final ServiceBusMessage[] messages = new ServiceBusMessage[count];\n-\n-        IntStream.range(0, count).forEach(index -> {\n-            messages[index] = new ServiceBusMessage(contents).setMessageId(UUID.randomUUID().toString());\n-        });\n+        final List<ServiceBusMessage> messages = TestUtils.getServiceBusMessages(count, UUID.randomUUID().toString());\n \n         when(connection.createSendLink(eq(ENTITY_NAME), eq(ENTITY_NAME), eq(retryOptions)))\n             .thenReturn(Mono.just(sendLink));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNzQ4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416927481", "bodyText": "Why not for (int i = 0; i < messages.length; i++)? I don't see any added benefit creating this IntStream.", "author": "conniey", "createdAt": "2020-04-28T21:15:22Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java", "diffHunk": "@@ -144,6 +150,38 @@ void createsMessageBatchWithSize() {\n         Assertions.assertEquals(batch, messageBatch);\n     }\n \n+    /**\n+     * Verifies that sending an array of message will result in calling sender.send(Message...).\n+     */\n+    @Test\n+    void sendMessageList() {\n+        // Arrange\n+        final int count = 4;\n+        final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n+        final ServiceBusMessage[] messages = new ServiceBusMessage[count];\n+\n+        IntStream.range(0, count).forEach(index -> {", "originalCommit": "e7b044122d7e43738b789267c219219264d4765f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyODUxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416928513", "bodyText": "There's a helper method that does all this: TestUtils.getServiceBusMessages(3, id).toArray()", "author": "conniey", "createdAt": "2020-04-28T21:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNzQ4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "cbef17b9819a168cbfaee6c880c8430fdd2d78aa", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java\nindex 30f5b5808ff..86129e9ba9b 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderClientTest.java\n\n@@ -158,11 +158,7 @@ public class ServiceBusSenderClientTest {\n         // Arrange\n         final int count = 4;\n         final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n-        final ServiceBusMessage[] messages = new ServiceBusMessage[count];\n-\n-        IntStream.range(0, count).forEach(index -> {\n-            messages[index] = new ServiceBusMessage(contents).setSessionId(UUID.randomUUID().toString());\n-        });\n+        final List<ServiceBusMessage> messages = TestUtils.getServiceBusMessages(count, UUID.randomUUID().toString());\n \n         when(asyncSender.send(messages)).thenReturn(Mono.empty());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNzg4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416927886", "bodyText": "Why not for (int i = 0; i < messages.length; i++)? I don't see any added benefit creating this IntStream.", "author": "conniey", "createdAt": "2020-04-28T21:16:10Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "diffHunk": "@@ -282,6 +285,65 @@ void sendMultipleMessages() {\n         messagesSent.forEach(message -> Assertions.assertEquals(Section.SectionType.Data, message.getBody().getType()));\n     }\n \n+    /**\n+     * Verifies that sending multiple message will result in calling sender.send(Message...).\n+     */\n+    @Test\n+    void sendMessagesList() {\n+        // Arrange\n+        final int count = 4;\n+        final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n+        final ServiceBusMessage[] messages = new ServiceBusMessage[count];\n+\n+        IntStream.range(0, count).forEach(index -> {\n+            messages[index] = new ServiceBusMessage(contents).setMessageId(UUID.randomUUID().toString());\n+        });\n+\n+        when(connection.createSendLink(eq(ENTITY_NAME), eq(ENTITY_NAME), eq(retryOptions)))\n+            .thenReturn(Mono.just(sendLink));\n+        when(sendLink.send(any(Message.class))).thenReturn(Mono.empty());\n+        when(sendLink.send(anyList())).thenReturn(Mono.empty());\n+\n+        // Act\n+        StepVerifier.create(sender.send(messages))\n+            .verifyComplete();\n+\n+        // Assert\n+        verify(sendLink).send(messagesCaptor.capture());\n+\n+        final List<Message> messagesSent = messagesCaptor.getValue();\n+        Assertions.assertEquals(count, messagesSent.size());\n+\n+        messagesSent.forEach(message -> Assertions.assertEquals(Section.SectionType.Data, message.getBody().getType()));\n+    }\n+\n+    /**\n+     * Verifies that sending multiple message will result in calling sender.send(Iterator).\n+     */\n+    @Test\n+    void sendMessagesListExceedSize() {\n+        // Arrange\n+        final int count = 4;\n+        final Mono<Integer> linkMaxSize = Mono.just(1);\n+        final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n+        final ServiceBusMessage[] messages = new ServiceBusMessage[count];\n+\n+        IntStream.range(0, count).forEach(index -> {", "originalCommit": "e7b044122d7e43738b789267c219219264d4765f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cbef17b9819a168cbfaee6c880c8430fdd2d78aa", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java\nindex 38e323aae9b..5b1532aa24f 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java\n\n@@ -293,11 +294,7 @@ class ServiceBusSenderAsyncClientTest {\n         // Arrange\n         final int count = 4;\n         final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n-        final ServiceBusMessage[] messages = new ServiceBusMessage[count];\n-\n-        IntStream.range(0, count).forEach(index -> {\n-            messages[index] = new ServiceBusMessage(contents).setMessageId(UUID.randomUUID().toString());\n-        });\n+        final List<ServiceBusMessage> messages = TestUtils.getServiceBusMessages(count, UUID.randomUUID().toString());\n \n         when(connection.createSendLink(eq(ENTITY_NAME), eq(ENTITY_NAME), eq(retryOptions)))\n             .thenReturn(Mono.just(sendLink));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNzk3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r416927975", "bodyText": "Why not for (int i = 0; i < messages.length; i++)? I don't see any added benefit creating this IntStream.", "author": "conniey", "createdAt": "2020-04-28T21:16:18Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java", "diffHunk": "@@ -282,6 +285,65 @@ void sendMultipleMessages() {\n         messagesSent.forEach(message -> Assertions.assertEquals(Section.SectionType.Data, message.getBody().getType()));\n     }\n \n+    /**\n+     * Verifies that sending multiple message will result in calling sender.send(Message...).\n+     */\n+    @Test\n+    void sendMessagesList() {\n+        // Arrange\n+        final int count = 4;\n+        final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n+        final ServiceBusMessage[] messages = new ServiceBusMessage[count];\n+\n+        IntStream.range(0, count).forEach(index -> {", "originalCommit": "e7b044122d7e43738b789267c219219264d4765f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cbef17b9819a168cbfaee6c880c8430fdd2d78aa", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java\nindex 38e323aae9b..5b1532aa24f 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/test/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClientTest.java\n\n@@ -293,11 +294,7 @@ class ServiceBusSenderAsyncClientTest {\n         // Arrange\n         final int count = 4;\n         final byte[] contents = TEST_CONTENTS.getBytes(UTF_8);\n-        final ServiceBusMessage[] messages = new ServiceBusMessage[count];\n-\n-        IntStream.range(0, count).forEach(index -> {\n-            messages[index] = new ServiceBusMessage(contents).setMessageId(UUID.randomUUID().toString());\n-        });\n+        final List<ServiceBusMessage> messages = TestUtils.getServiceBusMessages(count, UUID.randomUUID().toString());\n \n         when(connection.createSendLink(eq(ENTITY_NAME), eq(ENTITY_NAME), eq(retryOptions)))\n             .thenReturn(Mono.just(sendLink));\n"}}, {"oid": "cbef17b9819a168cbfaee6c880c8430fdd2d78aa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cbef17b9819a168cbfaee6c880c8430fdd2d78aa", "message": "review comments incorporated", "committedDate": "2020-04-29T18:30:08Z", "type": "commit"}, {"oid": "8af471061eddddf60240a0abff8eda5eb7eeae78", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8af471061eddddf60240a0abff8eda5eb7eeae78", "message": "review comments incorporated", "committedDate": "2020-04-29T18:35:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzNTg3Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/10538#discussion_r417535872", "bodyText": "This should return monoError(logger, new NullPointerException(\"'messages' cannot be null.\"); rather than throwing. There are other instances that I need to look at and fix. It's odd when async operations throw instead of returning the terminal error state.", "author": "conniey", "createdAt": "2020-04-29T18:49:07Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java", "diffHunk": "@@ -136,21 +136,24 @@ public String getEntityPath() {\n     }\n \n     /**\n-     * Sends a message to a Service Bus queue or topic.\n+     * Sends a set of messages to a Service Bus queue or topic using a batched approach. If the size of messages\n+     * exceed the maximum size of a single batch, an exception will be triggered and the send will fail.\n+     * By default, the message size is the max amount allowed on the link.\n      *\n-     * @param message Message to be sent to Service Bus queue or topic.\n-     * @param sessionId the session id to associate with the message.\n+     * @param messages Messages to be sent to Service Bus queue or topic.\n      *\n-     * @return A {@link Mono} the finishes this operation on service bus resource.\n+     * @return A {@link Mono} that completes when all messages have been sent to the Service Bus resource.\n      *\n-     * @throws NullPointerException if {@code message} or {@code sessionId} is {@code null}.\n+     * @throws NullPointerException if {@code messages} is {@code null}.\n+     * @throws AmqpException if {@code messages} is larger than the maximum allowed size of a single batch.\n      */\n-    public Mono<Void> send(ServiceBusMessage message, String sessionId) {\n-        Objects.requireNonNull(message, \"'message' cannot be null.\");\n-        Objects.requireNonNull(sessionId, \"'sessionId' cannot be null.\");\n+    public Mono<Void> send(Iterable<ServiceBusMessage> messages) {\n+        Objects.requireNonNull(messages, \"'messages' cannot be null.\");", "originalCommit": "8af471061eddddf60240a0abff8eda5eb7eeae78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89909cf3669e49b002c42dfa7785c97c8001cb1f", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\nindex 14dcf3db184..de4f9809a82 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusSenderAsyncClient.java\n\n@@ -130,8 +130,9 @@ public final class ServiceBusSenderAsyncClient implements AutoCloseable {\n      * @throws NullPointerException if {@code message} is {@code null}.\n      */\n     public Mono<Void> send(ServiceBusMessage message) {\n-        Objects.requireNonNull(message, \"'message' cannot be null.\");\n-\n+        if (Objects.isNull(message)) {\n+            return monoError(logger, new NullPointerException(\"'message' cannot be null.\"));\n+        }\n         return sendInternal(Flux.just(message));\n     }\n \n"}}, {"oid": "89909cf3669e49b002c42dfa7785c97c8001cb1f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/89909cf3669e49b002c42dfa7785c97c8001cb1f", "message": "More review comments", "committedDate": "2020-04-29T21:29:45Z", "type": "commit"}, {"oid": "a6ddd7c078de263ba7d622704875b935b3888df0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a6ddd7c078de263ba7d622704875b935b3888df0", "message": "More review comments", "committedDate": "2020-04-29T21:36:11Z", "type": "commit"}, {"oid": "ca5f4a2c99ed17f87adf69017d2f983fe98e02da", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ca5f4a2c99ed17f87adf69017d2f983fe98e02da", "message": "fix test", "committedDate": "2020-04-30T05:07:20Z", "type": "commit"}]}