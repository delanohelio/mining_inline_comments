{"pr_number": 14669, "pr_title": "Recursive acl", "pr_createdAt": "2020-08-31T23:36:13Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14669", "timeline": [{"oid": "550f54c5cc352d99c46234280f941259cb3a6f90", "url": "https://github.com/Azure/azure-sdk-for-java/commit/550f54c5cc352d99c46234280f941259cb3a6f90", "message": "Implemented setRecursiveAcl", "committedDate": "2020-08-19T00:11:17Z", "type": "commit"}, {"oid": "51dd2805102ed120dd66fc5d01d6eb0dea4e2989", "url": "https://github.com/Azure/azure-sdk-for-java/commit/51dd2805102ed120dd66fc5d01d6eb0dea4e2989", "message": "Added remove/updateAcl and sync methods", "committedDate": "2020-08-21T22:00:14Z", "type": "commit"}, {"oid": "bb2b8e9cebe3a6beea68960f2b685b96fded0015", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bb2b8e9cebe3a6beea68960f2b685b96fded0015", "message": "Finished implementation. Need to start tests", "committedDate": "2020-08-21T23:40:31Z", "type": "commit"}, {"oid": "7893381e89660a468b9430809b2a7be125f17b37", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7893381e89660a468b9430809b2a7be125f17b37", "message": "Finished writing tests", "committedDate": "2020-08-31T23:27:46Z", "type": "commit"}, {"oid": "3016175a893894bd9c0a6bc5bc460a5716df8135", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3016175a893894bd9c0a6bc5bc460a5716df8135", "message": "Added recordings", "committedDate": "2020-08-31T23:30:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NTY0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r480475641", "bodyText": "I think our pattern for these are to add what resource it applies to at the beginning. So I think the options for this PR should be prefixed with Path", "author": "gapra-msft", "createdAt": "2020-08-31T23:42:33Z", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/RemoveAccessControlRecursiveOptions.java", "diffHunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.options;\n+\n+import com.azure.core.http.rest.Response;\n+import com.azure.storage.file.datalake.models.AccessControlChanges;\n+import com.azure.storage.file.datalake.models.RemovePathAccessControlEntry;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Optional parameters for Remove Access Control Recursive.\n+ */\n+public class RemoveAccessControlRecursiveOptions {", "originalCommit": "3016175a893894bd9c0a6bc5bc460a5716df8135", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5MjgxNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482592817", "bodyText": "Done", "author": "rickle-msft", "createdAt": "2020-09-02T23:19:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NTY0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d", "chunk": "diff --git a/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/RemoveAccessControlRecursiveOptions.java b/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/RemoveAccessControlRecursiveOptions.java\ndeleted file mode 100644\nindex f35426fb293..00000000000\n--- a/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/RemoveAccessControlRecursiveOptions.java\n+++ /dev/null\n\n@@ -1,162 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.storage.file.datalake.options;\n-\n-import com.azure.core.http.rest.Response;\n-import com.azure.storage.file.datalake.models.AccessControlChanges;\n-import com.azure.storage.file.datalake.models.RemovePathAccessControlEntry;\n-\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.function.Consumer;\n-\n-/**\n- * Optional parameters for Remove Access Control Recursive.\n- */\n-public class RemoveAccessControlRecursiveOptions {\n-    private final List<RemovePathAccessControlEntry> accessControlList;\n-    private Integer batchSize;\n-    private Integer maxBatches;\n-    private Consumer<Response<AccessControlChanges>> progressHandler;\n-    private String continuationToken;\n-    private boolean continueOnFailure;\n-\n-    /**\n-     * Constructs a new options object.\n-     * @param accessControlList The POSIX access control list for the file or directory.\n-     */\n-    public RemoveAccessControlRecursiveOptions(List<RemovePathAccessControlEntry> accessControlList) {\n-        this.accessControlList = Collections.unmodifiableList(accessControlList);\n-    }\n-\n-    /**\n-     * Returns the POSIX access control list for the file or directory.\n-     *\n-     * @return The POSIX access control list for the file or directory.\n-     */\n-    public List<RemovePathAccessControlEntry> getAccessControlList() {\n-        return accessControlList;\n-    }\n-\n-    /**\n-     * Gets the batch size.\n-     * <p>\n-     * If data set size exceeds batch size then operation will be split into multiple requests so that progress can be\n-     * tracked. Batch size should be between 1 and 2000. The default when unspecified is 2000.\n-     *\n-     * @return The size of the batch.\n-     */\n-    public Integer getBatchSize() {\n-        return batchSize;\n-    }\n-\n-    /**\n-     * Sets the batch size.\n-     * <p>\n-     * If data set size exceeds batch size then operation will be split into multiple requests so that progress can be\n-     * tracked. Batch size should be between 1 and 2000. The default when unspecified is 2000.\n-     *\n-     * @param batchSize The size of the batch.\n-     * @return The updated object.\n-     */\n-    public RemoveAccessControlRecursiveOptions setBatchSize(Integer batchSize) {\n-        this.batchSize = batchSize;\n-        return this;\n-    }\n-\n-    /**\n-     * Gets the maximum number of batches that single change Access Control operation can execute.\n-     * <p>\n-     * If maximum is reached before all subpaths are processed then continuation token can be used to resume operation.\n-     * Empty value indicates that maximum number of batches in unbound and operation continues till end.\n-     *\n-     * @return The maximum number of batches.\n-     */\n-    public Integer getMaxBatches() {\n-        return maxBatches;\n-    }\n-\n-    /**\n-     * Sets the maximum number of batches that single change Access Control operation can execute.\n-     * <p>\n-     * If maximum is reached before all subpaths are processed then continuation token can be used to resume operation.\n-     * Empty value indicates that maximum number of batches in unbound and operation continues till end.\n-     *\n-     * @param maxBatches The maximum number of batches.\n-     * @return The updated object.\n-     */\n-    public RemoveAccessControlRecursiveOptions setMaxBatches(Integer maxBatches) {\n-        this.maxBatches = maxBatches;\n-        return this;\n-    }\n-\n-    /**\n-     * Gets a callback where caller can track progress of the operation as well as collect paths that failed to change\n-     * Access Control.\n-     *\n-     * @return The progress handler.\n-     */\n-    public Consumer<Response<AccessControlChanges>> getProgressHandler() {\n-        return progressHandler;\n-    }\n-\n-    /**\n-     * Sets a callback where caller can track progress of the operation as well as collect paths that failed to change\n-     * Access Control.\n-     *\n-     * @param progressHandler The progress handler.\n-     * @return The updated object.\n-     */\n-    public RemoveAccessControlRecursiveOptions setProgressHandler(\n-        Consumer<Response<AccessControlChanges>> progressHandler) {\n-        this.progressHandler = progressHandler;\n-        return this;\n-    }\n-\n-    /**\n-     * Returns a token that can be used to resume previously stopped operation.\n-     *\n-     * @return A token that can be used to resume previously stopped operation.\n-     */\n-    public String getContinuationToken() {\n-        return continuationToken;\n-    }\n-\n-    /**\n-     * Sets a token that can be used to resume previously stopped operation.\n-     *\n-     * @param continuationToken A token that can be used to resume previously stopped operation.\n-     * @return The updated object.\n-     */\n-    public RemoveAccessControlRecursiveOptions setContinuationToken(String continuationToken) {\n-        this.continuationToken = continuationToken;\n-        return this;\n-    }\n-\n-    /**\n-     * Returns if the operation should continue on user failure.\n-     * <p>\n-     * If set to false, the operation will terminate quickly on encountering user failures. If true, the operation will\n-     * ignore user failures and proceed with the operation on other sub-entities of the directory.\n-     *\n-     * @return If the operation should continue on user failure.\n-     */\n-    public boolean isContinuingOnFailure() {\n-        return continueOnFailure;\n-    }\n-\n-    /**\n-     * Sets if the operation should continue on user failure.\n-     * <p>\n-     * If set to false, the operation will terminate quickly on encountering user failures. If true, the operation will\n-     * ignore user failures and proceed with the operation on other sub-entities of the directory.\n-     *\n-     * @param continueOnFailure Whether the operation should continue on user failure.\n-     * @return The updated object.\n-     */\n-    public RemoveAccessControlRecursiveOptions setContinueOnFailure(boolean continueOnFailure) {\n-        this.continueOnFailure = continueOnFailure;\n-        return this;\n-    }\n-}\n"}}, {"oid": "a3c8def3516486b447540b244e352db8c8177fcb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a3c8def3516486b447540b244e352db8c8177fcb", "message": "Merge remote-tracking branch 'upstream/feature/storage/stg74' into recursiveAcl", "committedDate": "2020-09-01T14:56:49Z", "type": "commit"}, {"oid": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d", "message": "Renamed options types", "committedDate": "2020-09-01T15:02:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NzY0MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481247640", "bodyText": "Can we make this something like Recursively sets access control on a path and its subpaths, and so on? Right now it could read as just 2 levels", "author": "gapra-msft", "createdAt": "2020-09-01T15:52:33Z", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakePathAsyncClient.java", "diffHunk": "@@ -635,6 +649,260 @@ public DataLakeServiceVersion getServiceVersion() {\n                 response.getDeserializedHeaders().getLastModified())));\n     }\n \n+    /**\n+     * Sets the access control on a path and subpaths.", "originalCommit": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5NDU3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482594578", "bodyText": "Ya", "author": "rickle-msft", "createdAt": "2020-09-02T23:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NzY0MA=="}], "type": "inlineReview", "revised_code": {"commit": "4ead15e99b75de67ab372ca420e5165a2afa184f", "chunk": "diff --git a/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakePathAsyncClient.java b/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakePathAsyncClient.java\nindex 8b12ffcb55a..5897bad3635 100644\n--- a/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakePathAsyncClient.java\n+++ b/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakePathAsyncClient.java\n\n@@ -664,7 +664,7 @@ public class DataLakePathAsyncClient {\n      */\n     public Mono<AccessControlChangeResult> setAccessControlRecursive(List<PathAccessControlEntry> accessControlList) {\n         try {\n-            return setAccessControlRecursiveWithResponse(new DirectorySetAccessControlRecursiveOptions(accessControlList))\n+            return setAccessControlRecursiveWithResponse(new PathSetAccessControlRecursiveOptions(accessControlList))\n                 .flatMap(FluxUtil::toMono);\n         } catch (RuntimeException ex) {\n             return monoError(logger, ex);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0ODk3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481348979", "bodyText": "Should we do the try catch error thing here so we can log it?", "author": "gapra-msft", "createdAt": "2020-09-01T18:33:00Z", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakePathClient.java", "diffHunk": "@@ -354,6 +362,140 @@ public PathInfo setPermissions(PathPermissions permissions, String group, String\n         return StorageImplUtils.blockWithOptionalTimeout(response, timeout);\n     }\n \n+    /**\n+     * Sets the access control on a path and subpaths.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.datalake.DataLakePathClient.setAccessControlRecursive#List}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update\">Azure Docs</a></p>\n+     *\n+     * @param accessControlList The POSIX access control list for the file or directory.\n+     * @return The result of the operation.\n+     */\n+    public AccessControlChangeResult setAccessControlRecursive(List<PathAccessControlEntry> accessControlList) {\n+        return setAccessControlRecursiveWithResponse(new DirectorySetAccessControlRecursiveOptions(accessControlList), null,\n+            Context.NONE).getValue();\n+    }\n+\n+    /**\n+     * Sets the access control on a path and subpaths.\n+     *\n+     * <p><strong>Code Samples</strong></p>\n+     *\n+     * {@codesnippet com.azure.storage.file.datalake.DataLakePathClient.setAccessControlRecursive#SetAccessControlRecursiveOptions-Duration-Context}\n+     *\n+     * <p>For more information, see the\n+     * <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update\">Azure Docs</a></p>\n+     *\n+     * @param options {@link DirectorySetAccessControlRecursiveOptions}\n+     * @param timeout An optional timeout value beyond which a {@link RuntimeException} will be raised.\n+     * @param context Additional context that is passed through the Http pipeline during the service call.\n+     * @return A response containing the result of the operation.\n+     */\n+    public Response<AccessControlChangeResult> setAccessControlRecursiveWithResponse(\n+        DirectorySetAccessControlRecursiveOptions options, Duration timeout, Context context) {\n+        Mono<Response<AccessControlChangeResult>> response =\n+            dataLakePathAsyncClient.setAccessControlRecursiveWithResponse(\n+                PathAccessControlEntry.serializeList(options.getAccessControlList()), options.getProgressHandler(),\n+                PathSetAccessControlRecursiveMode.SET, options.getBatchSize(), options.getMaxBatches(),\n+                options.isContinuingOnFailure(), options.getContinuationToken(), context);\n+\n+        return StorageImplUtils.blockWithOptionalTimeout(response, timeout);", "originalCommit": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5ODYyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482598629", "bodyText": "Yea idk why we don't do it on all the datalake methods. I'll add it to all the other ones, too", "author": "rickle-msft", "createdAt": "2020-09-02T23:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0ODk3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5OTIwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482599200", "bodyText": "Hmm. Looks like we don't do that for any of the methods in BlobClientBase either, so I think it'd be better to do that as a separate PR", "author": "rickle-msft", "createdAt": "2020-09-02T23:32:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0ODk3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4ead15e99b75de67ab372ca420e5165a2afa184f", "chunk": "diff --git a/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakePathClient.java b/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakePathClient.java\nindex f97948fef75..c7095eff88e 100644\n--- a/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakePathClient.java\n+++ b/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/DataLakePathClient.java\n\n@@ -376,7 +376,7 @@ public class DataLakePathClient {\n      * @return The result of the operation.\n      */\n     public AccessControlChangeResult setAccessControlRecursive(List<PathAccessControlEntry> accessControlList) {\n-        return setAccessControlRecursiveWithResponse(new DirectorySetAccessControlRecursiveOptions(accessControlList), null,\n+        return setAccessControlRecursiveWithResponse(new PathSetAccessControlRecursiveOptions(accessControlList), null,\n             Context.NONE).getValue();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MzgzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481353836", "bodyText": "operation continues till end or error", "author": "gapra-msft", "createdAt": "2020-09-01T18:42:21Z", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/DirectoryUpdateAccessControlRecursiveOptions.java", "diffHunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.options;\n+\n+import com.azure.core.http.rest.Response;\n+import com.azure.storage.file.datalake.models.AccessControlChanges;\n+import com.azure.storage.file.datalake.models.PathAccessControlEntry;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Optional parameters for Update Access Control Recursive.\n+ */\n+public class DirectoryUpdateAccessControlRecursiveOptions {\n+    private final List<PathAccessControlEntry> accessControlList;\n+    private Integer batchSize;\n+    private Integer maxBatches;\n+    private Consumer<Response<AccessControlChanges>> progressHandler;\n+    private String continuationToken;\n+    private boolean continueOnFailure;\n+\n+    /**\n+     * Constructs a new options object.\n+     * @param accessControlList The POSIX access control list for the file or directory.\n+     */\n+    public DirectoryUpdateAccessControlRecursiveOptions(List<PathAccessControlEntry> accessControlList) {\n+        this.accessControlList = Collections.unmodifiableList(accessControlList);\n+    }\n+\n+    /**\n+     * Returns the POSIX access control list for the file or directory.\n+     *\n+     * @return The POSIX access control list for the file or directory.\n+     */\n+    public List<PathAccessControlEntry> getAccessControlList() {\n+        return accessControlList;\n+    }\n+\n+    /**\n+     * Gets the batch size.\n+     * <p>\n+     * If data set size exceeds batch size then operation will be split into multiple requests so that progress can be\n+     * tracked. Batch size should be between 1 and 2000. The default when unspecified is 2000.\n+     *\n+     * @return The size of the batch.\n+     */\n+    public Integer getBatchSize() {\n+        return batchSize;\n+    }\n+\n+    /**\n+     * Sets the batch size.\n+     * <p>\n+     * If data set size exceeds batch size then operation will be split into multiple requests so that progress can be\n+     * tracked. Batch size should be between 1 and 2000. The default when unspecified is 2000.\n+     *\n+     * @param batchSize The size of the batch.\n+     * @return The updated object.\n+     */\n+    public DirectoryUpdateAccessControlRecursiveOptions setBatchSize(Integer batchSize) {\n+        this.batchSize = batchSize;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the maximum number of batches that single change Access Control operation can execute.\n+     * <p>\n+     * If maximum is reached before all subpaths are processed then continuation token can be used to resume operation.\n+     * Empty value indicates that maximum number of batches in unbound and operation continues till end.\n+     *\n+     * @return The maximum number of batches.\n+     */\n+    public Integer getMaxBatches() {\n+        return maxBatches;\n+    }\n+\n+    /**\n+     * Sets the maximum number of batches that single change Access Control operation can execute.\n+     * <p>\n+     * If maximum is reached before all subpaths are processed then continuation token can be used to resume operation.\n+     * Empty value indicates that maximum number of batches in unbound and operation continues till end.", "originalCommit": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwMDY3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482600671", "bodyText": "Done", "author": "rickle-msft", "createdAt": "2020-09-02T23:37:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1MzgzNg=="}], "type": "inlineReview", "revised_code": {"commit": "4ead15e99b75de67ab372ca420e5165a2afa184f", "chunk": "diff --git a/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/DirectoryUpdateAccessControlRecursiveOptions.java b/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/DirectoryUpdateAccessControlRecursiveOptions.java\ndeleted file mode 100644\nindex 2b8d4b2cf31..00000000000\n--- a/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/DirectoryUpdateAccessControlRecursiveOptions.java\n+++ /dev/null\n\n@@ -1,162 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.storage.file.datalake.options;\n-\n-import com.azure.core.http.rest.Response;\n-import com.azure.storage.file.datalake.models.AccessControlChanges;\n-import com.azure.storage.file.datalake.models.PathAccessControlEntry;\n-\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.function.Consumer;\n-\n-/**\n- * Optional parameters for Update Access Control Recursive.\n- */\n-public class DirectoryUpdateAccessControlRecursiveOptions {\n-    private final List<PathAccessControlEntry> accessControlList;\n-    private Integer batchSize;\n-    private Integer maxBatches;\n-    private Consumer<Response<AccessControlChanges>> progressHandler;\n-    private String continuationToken;\n-    private boolean continueOnFailure;\n-\n-    /**\n-     * Constructs a new options object.\n-     * @param accessControlList The POSIX access control list for the file or directory.\n-     */\n-    public DirectoryUpdateAccessControlRecursiveOptions(List<PathAccessControlEntry> accessControlList) {\n-        this.accessControlList = Collections.unmodifiableList(accessControlList);\n-    }\n-\n-    /**\n-     * Returns the POSIX access control list for the file or directory.\n-     *\n-     * @return The POSIX access control list for the file or directory.\n-     */\n-    public List<PathAccessControlEntry> getAccessControlList() {\n-        return accessControlList;\n-    }\n-\n-    /**\n-     * Gets the batch size.\n-     * <p>\n-     * If data set size exceeds batch size then operation will be split into multiple requests so that progress can be\n-     * tracked. Batch size should be between 1 and 2000. The default when unspecified is 2000.\n-     *\n-     * @return The size of the batch.\n-     */\n-    public Integer getBatchSize() {\n-        return batchSize;\n-    }\n-\n-    /**\n-     * Sets the batch size.\n-     * <p>\n-     * If data set size exceeds batch size then operation will be split into multiple requests so that progress can be\n-     * tracked. Batch size should be between 1 and 2000. The default when unspecified is 2000.\n-     *\n-     * @param batchSize The size of the batch.\n-     * @return The updated object.\n-     */\n-    public DirectoryUpdateAccessControlRecursiveOptions setBatchSize(Integer batchSize) {\n-        this.batchSize = batchSize;\n-        return this;\n-    }\n-\n-    /**\n-     * Gets the maximum number of batches that single change Access Control operation can execute.\n-     * <p>\n-     * If maximum is reached before all subpaths are processed then continuation token can be used to resume operation.\n-     * Empty value indicates that maximum number of batches in unbound and operation continues till end.\n-     *\n-     * @return The maximum number of batches.\n-     */\n-    public Integer getMaxBatches() {\n-        return maxBatches;\n-    }\n-\n-    /**\n-     * Sets the maximum number of batches that single change Access Control operation can execute.\n-     * <p>\n-     * If maximum is reached before all subpaths are processed then continuation token can be used to resume operation.\n-     * Empty value indicates that maximum number of batches in unbound and operation continues till end.\n-     *\n-     * @param maxBatches The maximum number of batches.\n-     * @return The updated object.\n-     */\n-    public DirectoryUpdateAccessControlRecursiveOptions setMaxBatches(Integer maxBatches) {\n-        this.maxBatches = maxBatches;\n-        return this;\n-    }\n-\n-    /**\n-     * Gets a callback where caller can track progress of the operation as well as collect paths that failed to change\n-     * Access Control.\n-     *\n-     * @return The progress handler.\n-     */\n-    public Consumer<Response<AccessControlChanges>> getProgressHandler() {\n-        return progressHandler;\n-    }\n-\n-    /**\n-     * Sets a callback where caller can track progress of the operation as well as collect paths that failed to change\n-     * Access Control.\n-     *\n-     * @param progressHandler The progress handler.\n-     * @return The updated object.\n-     */\n-    public DirectoryUpdateAccessControlRecursiveOptions setProgressHandler(\n-        Consumer<Response<AccessControlChanges>> progressHandler) {\n-        this.progressHandler = progressHandler;\n-        return this;\n-    }\n-\n-    /**\n-     * Returns a token that can be used to resume previously stopped operation.\n-     *\n-     * @return A token that can be used to resume previously stopped operation.\n-     */\n-    public String getContinuationToken() {\n-        return continuationToken;\n-    }\n-\n-    /**\n-     * Sets a token that can be used to resume previously stopped operation.\n-     *\n-     * @param continuationToken A token that can be used to resume previously stopped operation.\n-     * @return The updated object.\n-     */\n-    public DirectoryUpdateAccessControlRecursiveOptions setContinuationToken(String continuationToken) {\n-        this.continuationToken = continuationToken;\n-        return this;\n-    }\n-\n-    /**\n-     * Returns if the operation should continue on user failure.\n-     * <p>\n-     * If set to false, the operation will terminate quickly on encountering user failures. If true, the operation will\n-     * ignore user failures and proceed with the operation on other sub-entities of the directory.\n-     *\n-     * @return If the operation should continue on user failure.\n-     */\n-    public boolean isContinuingOnFailure() {\n-        return continueOnFailure;\n-    }\n-\n-    /**\n-     * Sets if the operation should continue on user failure.\n-     * <p>\n-     * If set to false, the operation will terminate quickly on encountering user failures. If true, the operation will\n-     * ignore user failures and proceed with the operation on other sub-entities of the directory.\n-     *\n-     * @param continueOnFailure Whether the operation should continue on user failure.\n-     * @return The updated object.\n-     */\n-    public DirectoryUpdateAccessControlRecursiveOptions setContinueOnFailure(boolean continueOnFailure) {\n-        this.continueOnFailure = continueOnFailure;\n-        return this;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NDE3MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481354170", "bodyText": "return Collections.unmodifiable list here as well.", "author": "gapra-msft", "createdAt": "2020-09-01T18:43:04Z", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/DirectoryUpdateAccessControlRecursiveOptions.java", "diffHunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.options;\n+\n+import com.azure.core.http.rest.Response;\n+import com.azure.storage.file.datalake.models.AccessControlChanges;\n+import com.azure.storage.file.datalake.models.PathAccessControlEntry;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Optional parameters for Update Access Control Recursive.\n+ */\n+public class DirectoryUpdateAccessControlRecursiveOptions {\n+    private final List<PathAccessControlEntry> accessControlList;\n+    private Integer batchSize;\n+    private Integer maxBatches;\n+    private Consumer<Response<AccessControlChanges>> progressHandler;\n+    private String continuationToken;\n+    private boolean continueOnFailure;\n+\n+    /**\n+     * Constructs a new options object.\n+     * @param accessControlList The POSIX access control list for the file or directory.\n+     */\n+    public DirectoryUpdateAccessControlRecursiveOptions(List<PathAccessControlEntry> accessControlList) {\n+        this.accessControlList = Collections.unmodifiableList(accessControlList);\n+    }\n+\n+    /**\n+     * Returns the POSIX access control list for the file or directory.\n+     *\n+     * @return The POSIX access control list for the file or directory.\n+     */\n+    public List<PathAccessControlEntry> getAccessControlList() {\n+        return accessControlList;", "originalCommit": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ead15e99b75de67ab372ca420e5165a2afa184f", "chunk": "diff --git a/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/DirectoryUpdateAccessControlRecursiveOptions.java b/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/DirectoryUpdateAccessControlRecursiveOptions.java\ndeleted file mode 100644\nindex 2b8d4b2cf31..00000000000\n--- a/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/DirectoryUpdateAccessControlRecursiveOptions.java\n+++ /dev/null\n\n@@ -1,162 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.storage.file.datalake.options;\n-\n-import com.azure.core.http.rest.Response;\n-import com.azure.storage.file.datalake.models.AccessControlChanges;\n-import com.azure.storage.file.datalake.models.PathAccessControlEntry;\n-\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.function.Consumer;\n-\n-/**\n- * Optional parameters for Update Access Control Recursive.\n- */\n-public class DirectoryUpdateAccessControlRecursiveOptions {\n-    private final List<PathAccessControlEntry> accessControlList;\n-    private Integer batchSize;\n-    private Integer maxBatches;\n-    private Consumer<Response<AccessControlChanges>> progressHandler;\n-    private String continuationToken;\n-    private boolean continueOnFailure;\n-\n-    /**\n-     * Constructs a new options object.\n-     * @param accessControlList The POSIX access control list for the file or directory.\n-     */\n-    public DirectoryUpdateAccessControlRecursiveOptions(List<PathAccessControlEntry> accessControlList) {\n-        this.accessControlList = Collections.unmodifiableList(accessControlList);\n-    }\n-\n-    /**\n-     * Returns the POSIX access control list for the file or directory.\n-     *\n-     * @return The POSIX access control list for the file or directory.\n-     */\n-    public List<PathAccessControlEntry> getAccessControlList() {\n-        return accessControlList;\n-    }\n-\n-    /**\n-     * Gets the batch size.\n-     * <p>\n-     * If data set size exceeds batch size then operation will be split into multiple requests so that progress can be\n-     * tracked. Batch size should be between 1 and 2000. The default when unspecified is 2000.\n-     *\n-     * @return The size of the batch.\n-     */\n-    public Integer getBatchSize() {\n-        return batchSize;\n-    }\n-\n-    /**\n-     * Sets the batch size.\n-     * <p>\n-     * If data set size exceeds batch size then operation will be split into multiple requests so that progress can be\n-     * tracked. Batch size should be between 1 and 2000. The default when unspecified is 2000.\n-     *\n-     * @param batchSize The size of the batch.\n-     * @return The updated object.\n-     */\n-    public DirectoryUpdateAccessControlRecursiveOptions setBatchSize(Integer batchSize) {\n-        this.batchSize = batchSize;\n-        return this;\n-    }\n-\n-    /**\n-     * Gets the maximum number of batches that single change Access Control operation can execute.\n-     * <p>\n-     * If maximum is reached before all subpaths are processed then continuation token can be used to resume operation.\n-     * Empty value indicates that maximum number of batches in unbound and operation continues till end.\n-     *\n-     * @return The maximum number of batches.\n-     */\n-    public Integer getMaxBatches() {\n-        return maxBatches;\n-    }\n-\n-    /**\n-     * Sets the maximum number of batches that single change Access Control operation can execute.\n-     * <p>\n-     * If maximum is reached before all subpaths are processed then continuation token can be used to resume operation.\n-     * Empty value indicates that maximum number of batches in unbound and operation continues till end.\n-     *\n-     * @param maxBatches The maximum number of batches.\n-     * @return The updated object.\n-     */\n-    public DirectoryUpdateAccessControlRecursiveOptions setMaxBatches(Integer maxBatches) {\n-        this.maxBatches = maxBatches;\n-        return this;\n-    }\n-\n-    /**\n-     * Gets a callback where caller can track progress of the operation as well as collect paths that failed to change\n-     * Access Control.\n-     *\n-     * @return The progress handler.\n-     */\n-    public Consumer<Response<AccessControlChanges>> getProgressHandler() {\n-        return progressHandler;\n-    }\n-\n-    /**\n-     * Sets a callback where caller can track progress of the operation as well as collect paths that failed to change\n-     * Access Control.\n-     *\n-     * @param progressHandler The progress handler.\n-     * @return The updated object.\n-     */\n-    public DirectoryUpdateAccessControlRecursiveOptions setProgressHandler(\n-        Consumer<Response<AccessControlChanges>> progressHandler) {\n-        this.progressHandler = progressHandler;\n-        return this;\n-    }\n-\n-    /**\n-     * Returns a token that can be used to resume previously stopped operation.\n-     *\n-     * @return A token that can be used to resume previously stopped operation.\n-     */\n-    public String getContinuationToken() {\n-        return continuationToken;\n-    }\n-\n-    /**\n-     * Sets a token that can be used to resume previously stopped operation.\n-     *\n-     * @param continuationToken A token that can be used to resume previously stopped operation.\n-     * @return The updated object.\n-     */\n-    public DirectoryUpdateAccessControlRecursiveOptions setContinuationToken(String continuationToken) {\n-        this.continuationToken = continuationToken;\n-        return this;\n-    }\n-\n-    /**\n-     * Returns if the operation should continue on user failure.\n-     * <p>\n-     * If set to false, the operation will terminate quickly on encountering user failures. If true, the operation will\n-     * ignore user failures and proceed with the operation on other sub-entities of the directory.\n-     *\n-     * @return If the operation should continue on user failure.\n-     */\n-    public boolean isContinuingOnFailure() {\n-        return continueOnFailure;\n-    }\n-\n-    /**\n-     * Sets if the operation should continue on user failure.\n-     * <p>\n-     * If set to false, the operation will terminate quickly on encountering user failures. If true, the operation will\n-     * ignore user failures and proceed with the operation on other sub-entities of the directory.\n-     *\n-     * @param continueOnFailure Whether the operation should continue on user failure.\n-     * @return The updated object.\n-     */\n-    public DirectoryUpdateAccessControlRecursiveOptions setContinueOnFailure(boolean continueOnFailure) {\n-        this.continueOnFailure = continueOnFailure;\n-        return this;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NDM5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481354393", "bodyText": "Should we add a null check here? or protect the call to Collections.unmodifiable list", "author": "gapra-msft", "createdAt": "2020-09-01T18:43:30Z", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/DirectoryUpdateAccessControlRecursiveOptions.java", "diffHunk": "@@ -0,0 +1,162 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.options;\n+\n+import com.azure.core.http.rest.Response;\n+import com.azure.storage.file.datalake.models.AccessControlChanges;\n+import com.azure.storage.file.datalake.models.PathAccessControlEntry;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Optional parameters for Update Access Control Recursive.\n+ */\n+public class DirectoryUpdateAccessControlRecursiveOptions {\n+    private final List<PathAccessControlEntry> accessControlList;\n+    private Integer batchSize;\n+    private Integer maxBatches;\n+    private Consumer<Response<AccessControlChanges>> progressHandler;\n+    private String continuationToken;\n+    private boolean continueOnFailure;\n+\n+    /**\n+     * Constructs a new options object.\n+     * @param accessControlList The POSIX access control list for the file or directory.\n+     */\n+    public DirectoryUpdateAccessControlRecursiveOptions(List<PathAccessControlEntry> accessControlList) {\n+        this.accessControlList = Collections.unmodifiableList(accessControlList);", "originalCommit": "024623bdcab7e8fbd4b22c1eac3d2cf4f529f45d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzODQxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481438411", "bodyText": "Yea. And I think I need to add null checks to the internal implementation method, too", "author": "rickle-msft", "createdAt": "2020-09-01T21:20:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NDM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4ODY1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r483088656", "bodyText": "Done", "author": "rickle-msft", "createdAt": "2020-09-03T16:00:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NDM5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4ead15e99b75de67ab372ca420e5165a2afa184f", "chunk": "diff --git a/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/DirectoryUpdateAccessControlRecursiveOptions.java b/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/DirectoryUpdateAccessControlRecursiveOptions.java\ndeleted file mode 100644\nindex 2b8d4b2cf31..00000000000\n--- a/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/options/DirectoryUpdateAccessControlRecursiveOptions.java\n+++ /dev/null\n\n@@ -1,162 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.azure.storage.file.datalake.options;\n-\n-import com.azure.core.http.rest.Response;\n-import com.azure.storage.file.datalake.models.AccessControlChanges;\n-import com.azure.storage.file.datalake.models.PathAccessControlEntry;\n-\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.function.Consumer;\n-\n-/**\n- * Optional parameters for Update Access Control Recursive.\n- */\n-public class DirectoryUpdateAccessControlRecursiveOptions {\n-    private final List<PathAccessControlEntry> accessControlList;\n-    private Integer batchSize;\n-    private Integer maxBatches;\n-    private Consumer<Response<AccessControlChanges>> progressHandler;\n-    private String continuationToken;\n-    private boolean continueOnFailure;\n-\n-    /**\n-     * Constructs a new options object.\n-     * @param accessControlList The POSIX access control list for the file or directory.\n-     */\n-    public DirectoryUpdateAccessControlRecursiveOptions(List<PathAccessControlEntry> accessControlList) {\n-        this.accessControlList = Collections.unmodifiableList(accessControlList);\n-    }\n-\n-    /**\n-     * Returns the POSIX access control list for the file or directory.\n-     *\n-     * @return The POSIX access control list for the file or directory.\n-     */\n-    public List<PathAccessControlEntry> getAccessControlList() {\n-        return accessControlList;\n-    }\n-\n-    /**\n-     * Gets the batch size.\n-     * <p>\n-     * If data set size exceeds batch size then operation will be split into multiple requests so that progress can be\n-     * tracked. Batch size should be between 1 and 2000. The default when unspecified is 2000.\n-     *\n-     * @return The size of the batch.\n-     */\n-    public Integer getBatchSize() {\n-        return batchSize;\n-    }\n-\n-    /**\n-     * Sets the batch size.\n-     * <p>\n-     * If data set size exceeds batch size then operation will be split into multiple requests so that progress can be\n-     * tracked. Batch size should be between 1 and 2000. The default when unspecified is 2000.\n-     *\n-     * @param batchSize The size of the batch.\n-     * @return The updated object.\n-     */\n-    public DirectoryUpdateAccessControlRecursiveOptions setBatchSize(Integer batchSize) {\n-        this.batchSize = batchSize;\n-        return this;\n-    }\n-\n-    /**\n-     * Gets the maximum number of batches that single change Access Control operation can execute.\n-     * <p>\n-     * If maximum is reached before all subpaths are processed then continuation token can be used to resume operation.\n-     * Empty value indicates that maximum number of batches in unbound and operation continues till end.\n-     *\n-     * @return The maximum number of batches.\n-     */\n-    public Integer getMaxBatches() {\n-        return maxBatches;\n-    }\n-\n-    /**\n-     * Sets the maximum number of batches that single change Access Control operation can execute.\n-     * <p>\n-     * If maximum is reached before all subpaths are processed then continuation token can be used to resume operation.\n-     * Empty value indicates that maximum number of batches in unbound and operation continues till end.\n-     *\n-     * @param maxBatches The maximum number of batches.\n-     * @return The updated object.\n-     */\n-    public DirectoryUpdateAccessControlRecursiveOptions setMaxBatches(Integer maxBatches) {\n-        this.maxBatches = maxBatches;\n-        return this;\n-    }\n-\n-    /**\n-     * Gets a callback where caller can track progress of the operation as well as collect paths that failed to change\n-     * Access Control.\n-     *\n-     * @return The progress handler.\n-     */\n-    public Consumer<Response<AccessControlChanges>> getProgressHandler() {\n-        return progressHandler;\n-    }\n-\n-    /**\n-     * Sets a callback where caller can track progress of the operation as well as collect paths that failed to change\n-     * Access Control.\n-     *\n-     * @param progressHandler The progress handler.\n-     * @return The updated object.\n-     */\n-    public DirectoryUpdateAccessControlRecursiveOptions setProgressHandler(\n-        Consumer<Response<AccessControlChanges>> progressHandler) {\n-        this.progressHandler = progressHandler;\n-        return this;\n-    }\n-\n-    /**\n-     * Returns a token that can be used to resume previously stopped operation.\n-     *\n-     * @return A token that can be used to resume previously stopped operation.\n-     */\n-    public String getContinuationToken() {\n-        return continuationToken;\n-    }\n-\n-    /**\n-     * Sets a token that can be used to resume previously stopped operation.\n-     *\n-     * @param continuationToken A token that can be used to resume previously stopped operation.\n-     * @return The updated object.\n-     */\n-    public DirectoryUpdateAccessControlRecursiveOptions setContinuationToken(String continuationToken) {\n-        this.continuationToken = continuationToken;\n-        return this;\n-    }\n-\n-    /**\n-     * Returns if the operation should continue on user failure.\n-     * <p>\n-     * If set to false, the operation will terminate quickly on encountering user failures. If true, the operation will\n-     * ignore user failures and proceed with the operation on other sub-entities of the directory.\n-     *\n-     * @return If the operation should continue on user failure.\n-     */\n-    public boolean isContinuingOnFailure() {\n-        return continueOnFailure;\n-    }\n-\n-    /**\n-     * Sets if the operation should continue on user failure.\n-     * <p>\n-     * If set to false, the operation will terminate quickly on encountering user failures. If true, the operation will\n-     * ignore user failures and proceed with the operation on other sub-entities of the directory.\n-     *\n-     * @param continueOnFailure Whether the operation should continue on user failure.\n-     * @return The updated object.\n-     */\n-    public DirectoryUpdateAccessControlRecursiveOptions setContinueOnFailure(boolean continueOnFailure) {\n-        this.continueOnFailure = continueOnFailure;\n-        return this;\n-    }\n-}\n"}}, {"oid": "4ead15e99b75de67ab372ca420e5165a2afa184f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4ead15e99b75de67ab372ca420e5165a2afa184f", "message": "Added javadoc codesnippets. Added file tests and recordings", "committedDate": "2020-09-01T18:58:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2ODM4OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481368388", "bodyText": "This sounds kinda weird. Do we have other examples of this? It feels more normal to call this setIsDirectory", "author": "gapra-msft", "createdAt": "2020-09-01T19:04:19Z", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/models/AccessControlChangeFailure.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.models;\n+\n+/**\n+ * Represents an entry that failed to update Access Control List.\n+ */\n+public class AccessControlChangeFailure {\n+    private String name;\n+    private boolean isDirectory;\n+    public String errorMessage;\n+\n+    /**\n+     * Returns the name of an entry.\n+     *\n+     * @return The name of an entry.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Sets the name of an entry.\n+     *\n+     * @param name The name of an entry.\n+     * @return The updated object.\n+     */\n+    public AccessControlChangeFailure setName(String name) {\n+        this.name = name;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns whether entry is a directory.\n+     *\n+     * @return Whether the entry is a directory.\n+     */\n+    public boolean isDirectory() {\n+        return isDirectory;\n+    }\n+\n+    /**\n+     * Sets whether entry is a directory.\n+     *\n+     * @param directory Whether entry is a directory.\n+     * @return The updated object.\n+     */\n+    public AccessControlChangeFailure setDirectory(boolean directory) {", "originalCommit": "4ead15e99b75de67ab372ca420e5165a2afa184f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNDc1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482604758", "bodyText": "I agree. But can we do setIsDirectory and isDirectory. I'm not sure if the guidelines ok with there being an extra \"is\" in the setter.", "author": "rickle-msft", "createdAt": "2020-09-02T23:50:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2ODM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYyMzUwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482623503", "bodyText": "https://stackoverflow.com/questions/5322648/for-a-boolean-field-what-is-the-naming-convention-for-its-getter-setter\nand\nhttps://dzone.com/articles/java-getter-and-setter-basics-common-mistakes-and", "author": "kasobol-msft", "createdAt": "2020-09-03T00:44:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2ODM4OA=="}], "type": "inlineReview", "revised_code": {"commit": "13fbf34d7294d7dafd033cdecd34dd35ec66f96e", "chunk": "diff --git a/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/models/AccessControlChangeFailure.java b/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/models/AccessControlChangeFailure.java\nindex 5ca6491457f..e6f23cd7871 100644\n--- a/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/models/AccessControlChangeFailure.java\n+++ b/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/models/AccessControlChangeFailure.java\n\n@@ -9,7 +9,7 @@ package com.azure.storage.file.datalake.models;\n public class AccessControlChangeFailure {\n     private String name;\n     private boolean isDirectory;\n-    public String errorMessage;\n+    private String errorMessage;\n \n     /**\n      * Returns the name of an entry.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3OTM1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481379351", "bodyText": "Same as with the isDirectory, this probably sounds better as setIsDefaultScope?", "author": "gapra-msft", "createdAt": "2020-09-01T19:25:28Z", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/models/PathRemoveAccessControlEntry.java", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+package com.azure.storage.file.datalake.models;\n+\n+import com.azure.storage.common.implementation.StorageImplUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static com.azure.storage.file.datalake.models.PathAccessControlEntry.ACCESS_CONTROL_ENTRY_INVALID_SCOPE;\n+import static com.azure.storage.file.datalake.models.PathAccessControlEntry.DEFAULT_SCOPE;\n+\n+public class PathRemoveAccessControlEntry {\n+    private boolean defaultScope;\n+    private AccessControlType accessControlType;\n+    private String entityId;\n+\n+    /**\n+     * Indicates whether this is the default entry for the ACL.\n+     *\n+     * @return Whether this is the default entry for the ACL.\n+     */\n+    public boolean isDefaultScope() {\n+        return defaultScope;\n+    }\n+\n+    /**\n+     * Sets whether this is the default entry for the ACL.\n+     *\n+     * @param defaultScope Whether this is the default entry for the ACL.\n+     * @return The updated object.\n+     */\n+    public PathRemoveAccessControlEntry setDefaultScope(boolean defaultScope) {", "originalCommit": "4ead15e99b75de67ab372ca420e5165a2afa184f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNDkzNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482604937", "bodyText": "This one I'd rather keep because it follows the same pattern as PathAccessControlEntry", "author": "rickle-msft", "createdAt": "2020-09-02T23:51:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3OTM1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "13fbf34d7294d7dafd033cdecd34dd35ec66f96e", "chunk": "diff --git a/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/models/PathRemoveAccessControlEntry.java b/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/models/PathRemoveAccessControlEntry.java\nindex 5587e26cdd6..36cf658d54c 100644\n--- a/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/models/PathRemoveAccessControlEntry.java\n+++ b/sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/models/PathRemoveAccessControlEntry.java\n\n@@ -11,6 +11,9 @@ import java.util.Locale;\n import static com.azure.storage.file.datalake.models.PathAccessControlEntry.ACCESS_CONTROL_ENTRY_INVALID_SCOPE;\n import static com.azure.storage.file.datalake.models.PathAccessControlEntry.DEFAULT_SCOPE;\n \n+/**\n+ * Represents an access control in a file access control list for removal.\n+ */\n public class PathRemoveAccessControlEntry {\n     private boolean defaultScope;\n     private AccessControlType accessControlType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4MDU0Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r481380542", "bodyText": "typo - remove", "author": "gapra-msft", "createdAt": "2020-09-01T19:27:56Z", "path": "sdk/storage/azure-storage-file-datalake/src/samples/java/com/azure/storage/file/datalake/PathAsyncClientJavaDocCodeSamples.java", "diffHunk": "@@ -185,6 +192,151 @@ public void setAccessControlWithResponseCodeSnippets() {\n         // END: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlListWithResponse#List-String-String-DataLakeRequestConditions\n     }\n \n+    /**\n+     * Code snippets for {@link DataLakePathAsyncClient#setAccessControlRecursive(List)}\n+     */\n+    public void setAccessControlRecursiveCodeSnippets() {\n+        // BEGIN: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlRecursive#List\n+        PathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n+            .setEntityId(\"entityId\")\n+            .setPermissions(new RolePermissions().setReadPermission(true));\n+        List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n+        pathAccessControlEntries.add(pathAccessControlEntry);\n+\n+        client.setAccessControlRecursive(pathAccessControlEntries).subscribe(\n+            response -> System.out.printf(\"Successful changed file operations: %d\",\n+                response.getCounters().getChangedFilesCount()));\n+        // END: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlRecursive#List\n+    }\n+\n+    /**\n+     * Code snippets for {@link DataLakePathAsyncClient#setAccessControlRecursiveWithResponse(PathSetAccessControlRecursiveOptions)}\n+     */\n+    public void setAccessControlRecursiveWithResponseCodeSnippets() {\n+        // BEGIN: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlRecursiveWithResponse#PathSetAccessControlRecursiveOptions\n+        PathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n+            .setEntityId(\"entityId\")\n+            .setPermissions(new RolePermissions().setReadPermission(true));\n+        List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n+        pathAccessControlEntries.add(pathAccessControlEntry);\n+\n+        Integer batchSize = 2;\n+        Integer maxBatches = 10;\n+        boolean continueOnFailure = false;\n+        String continuationToken = null;\n+        Consumer<Response<AccessControlChanges>> progressHandler =\n+            response -> System.out.println(\"Received response\");\n+\n+        PathSetAccessControlRecursiveOptions options =\n+            new PathSetAccessControlRecursiveOptions(pathAccessControlEntries)\n+                .setBatchSize(batchSize)\n+                .setMaxBatches(maxBatches)\n+                .setContinueOnFailure(continueOnFailure)\n+                .setContinuationToken(continuationToken)\n+                .setProgressHandler(progressHandler);\n+\n+        client.setAccessControlRecursive(pathAccessControlEntries).subscribe(\n+            response -> System.out.printf(\"Successful changed file operations: %d\",\n+                response.getCounters().getChangedFilesCount()));\n+        // END: com.azure.storage.file.datalake.DataLakePathAsyncClient.setAccessControlRecursiveWithResponse#PathSetAccessControlRecursiveOptions\n+    }\n+\n+    /**\n+     * Code snippets for {@link DataLakePathAsyncClient#updateAccessControlRecursive(List)}\n+     */\n+    public void updateAccessControlRecursiveCodeSnippets() {\n+        // BEGIN: com.azure.storage.file.datalake.DataLakePathAsyncClient.updateAccessControlRecursive#List\n+        PathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n+            .setEntityId(\"entityId\")\n+            .setPermissions(new RolePermissions().setReadPermission(true));\n+        List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n+        pathAccessControlEntries.add(pathAccessControlEntry);\n+\n+        client.updateAccessControlRecursive(pathAccessControlEntries).subscribe(\n+            response -> System.out.printf(\"Successful changed file operations: %d\",\n+                response.getCounters().getChangedFilesCount()));\n+        // END: com.azure.storage.file.datalake.DataLakePathAsyncClient.updateAccessControlRecursive#List\n+    }\n+\n+    /**\n+     * Code snippets for {@link DataLakePathAsyncClient#updateAccessControlRecursiveWithResponse(PathUpdateAccessControlRecursiveOptions)}\n+     */\n+    public void updateAccessControlRecursiveWithResponseCodeSnippets() {\n+        // BEGIN: com.azure.storage.file.datalake.DataLakePathAsyncClient.updateAccessControlRecursiveWithResponse#PathUpdateAccessControlRecursiveOptions\n+        PathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n+            .setEntityId(\"entityId\")\n+            .setPermissions(new RolePermissions().setReadPermission(true));\n+        List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n+        pathAccessControlEntries.add(pathAccessControlEntry);\n+\n+        Integer batchSize = 2;\n+        Integer maxBatches = 10;\n+        boolean continueOnFailure = false;\n+        String continuationToken = null;\n+        Consumer<Response<AccessControlChanges>> progressHandler =\n+            response -> System.out.println(\"Received response\");\n+\n+        PathUpdateAccessControlRecursiveOptions options =\n+            new PathUpdateAccessControlRecursiveOptions(pathAccessControlEntries)\n+                .setBatchSize(batchSize)\n+                .setMaxBatches(maxBatches)\n+                .setContinueOnFailure(continueOnFailure)\n+                .setContinuationToken(continuationToken)\n+                .setProgressHandler(progressHandler);\n+\n+        client.updateAccessControlRecursive(pathAccessControlEntries).subscribe(\n+            response -> System.out.printf(\"Successful changed file operations: %d\",\n+                response.getCounters().getChangedFilesCount()));\n+        // END: com.azure.storage.file.datalake.DataLakePathAsyncClientWithResponse.updateAccessControlRecursive#PathUpdateAccessControlRecursiveOptions\n+    }\n+\n+    /**\n+     * Code snippets for {@link DataLakePathAsyncClient#removeAccessControlRecursive(List)}\n+     */\n+    public void removetAccessControlRecursiveCodeSnippets() {", "originalCommit": "4ead15e99b75de67ab372ca420e5165a2afa184f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNTE3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482605175", "bodyText": "Done", "author": "rickle-msft", "createdAt": "2020-09-02T23:52:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4MDU0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "10837f8114f6cf9025aed47cc3972374d35810fd", "chunk": "diff --git a/sdk/storage/azure-storage-file-datalake/src/samples/java/com/azure/storage/file/datalake/PathAsyncClientJavaDocCodeSamples.java b/sdk/storage/azure-storage-file-datalake/src/samples/java/com/azure/storage/file/datalake/PathAsyncClientJavaDocCodeSamples.java\nindex 36721759f93..0dc4a3bd120 100644\n--- a/sdk/storage/azure-storage-file-datalake/src/samples/java/com/azure/storage/file/datalake/PathAsyncClientJavaDocCodeSamples.java\n+++ b/sdk/storage/azure-storage-file-datalake/src/samples/java/com/azure/storage/file/datalake/PathAsyncClientJavaDocCodeSamples.java\n\n@@ -287,7 +287,7 @@ public class PathAsyncClientJavaDocCodeSamples {\n         client.updateAccessControlRecursive(pathAccessControlEntries).subscribe(\n             response -> System.out.printf(\"Successful changed file operations: %d\",\n                 response.getCounters().getChangedFilesCount()));\n-        // END: com.azure.storage.file.datalake.DataLakePathAsyncClientWithResponse.updateAccessControlRecursive#PathUpdateAccessControlRecursiveOptions\n+        // END: com.azure.storage.file.datalake.DataLakePathAsyncClient.updateAccessControlRecursiveWithResponse#PathUpdateAccessControlRecursiveOptions\n     }\n \n     /**\n"}}, {"oid": "eb447047eef98d5ba4272d01deeefaeb854f7200", "url": "https://github.com/Azure/azure-sdk-for-java/commit/eb447047eef98d5ba4272d01deeefaeb854f7200", "message": "Added file missing from git", "committedDate": "2020-09-01T20:49:38Z", "type": "commit"}, {"oid": "6a904a506368b27efe34c391f419a00289b797c4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6a904a506368b27efe34c391f419a00289b797c4", "message": "ci analyze fixes", "committedDate": "2020-09-01T21:35:07Z", "type": "commit"}, {"oid": "d023060e264081f30bf229daa1a1917af3588bbc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d023060e264081f30bf229daa1a1917af3588bbc", "message": "Updated tags for snippets", "committedDate": "2020-09-01T22:39:43Z", "type": "commit"}, {"oid": "10837f8114f6cf9025aed47cc3972374d35810fd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/10837f8114f6cf9025aed47cc3972374d35810fd", "message": "ditto", "committedDate": "2020-09-01T23:13:23Z", "type": "commit"}, {"oid": "13fbf34d7294d7dafd033cdecd34dd35ec66f96e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/13fbf34d7294d7dafd033cdecd34dd35ec66f96e", "message": "Spotbugs", "committedDate": "2020-09-02T00:15:18Z", "type": "commit"}, {"oid": "b9cf7cd2c1d27c018e0e81d01c7565f95c54b767", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b9cf7cd2c1d27c018e0e81d01c7565f95c54b767", "message": "Spotbugs", "committedDate": "2020-09-02T14:52:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM3MTM1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482371355", "bodyText": "This needs a </p> to end the paragraph somewhere. Same for the rest of the PR where there's lonely <p>'s", "author": "amnguye", "createdAt": "2020-09-02T19:52:46Z", "path": "sdk/storage/azure-storage-file-datalake/src/main/java/com/azure/storage/file/datalake/models/AccessControlChanges.java", "diffHunk": "@@ -0,0 +1,97 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.storage.file.datalake.models;\n+\n+/**\n+ * AccessControlChanges contains batch and cumulative counts of operations that change Access Control Lists recursively.\n+ * Additionally it exposes path entries that failed to update while these operations progress.\n+ */\n+public class AccessControlChanges {\n+    private Iterable<AccessControlChangeFailure> batchFailures;\n+    private AccessControlChangeCounters batchCounters;\n+    private AccessControlChangeCounters aggregateCounters;\n+    private String continuationToken;\n+\n+    /**\n+     * Returns an iterable of path entries that failed to update Access Control List within a single batch.\n+     *\n+     * @return An iterable of path entries that failed to update Access Control List within a single batch.\n+     */\n+    public Iterable<AccessControlChangeFailure> getBatchFailures() {\n+        return batchFailures;\n+    }\n+\n+    /**\n+     * Sets an iterable of path entries that failed to update Access Control List within a single batch.\n+     *\n+     * @param batchFailures An iterable of path entries that failed to update Access Control List within a single batch.\n+     * @return The updated object\n+     */\n+    public AccessControlChanges setBatchFailures(Iterable<AccessControlChangeFailure> batchFailures) {\n+        this.batchFailures = batchFailures;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns an {@link AccessControlChangeCounters} that contains counts of paths changed within a single batch.\n+     *\n+     * @return {@link AccessControlChangeCounters}\n+     */\n+    public AccessControlChangeCounters getBatchCounters() {\n+        return batchCounters;\n+    }\n+\n+    /**\n+     * Sets an {@link AccessControlChangeCounters} that contains counts of paths changed within a single batch.\n+     *\n+     * @param batchCounters {@link AccessControlChangeCounters}\n+     * @return The updated object.\n+     */\n+    public AccessControlChanges setBatchCounters(AccessControlChangeCounters batchCounters) {\n+        this.batchCounters = batchCounters;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns an {@link AccessControlChangeCounters} that contains counts of paths changed from start of the operation.\n+     *\n+     * @return {@link AccessControlChangeCounters}\n+     */\n+    public AccessControlChangeCounters getAggregateCounters() {\n+        return aggregateCounters;\n+    }\n+\n+    /**\n+     * Sets an {@link AccessControlChangeCounters} that contains counts of paths changed from start of the operation.\n+     *\n+     * @param aggregateCounters {@link AccessControlChangeCounters}\n+     * @return The updated object.\n+     */\n+    public AccessControlChanges setAggregateCounters(AccessControlChangeCounters aggregateCounters) {\n+        this.aggregateCounters = aggregateCounters;\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the continuation token.\n+     * <p>", "originalCommit": "b9cf7cd2c1d27c018e0e81d01c7565f95c54b767", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNTM3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14669#discussion_r482605374", "bodyText": "This is standard for how we write javadocs", "author": "rickle-msft", "createdAt": "2020-09-02T23:52:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM3MTM1NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "dd5704aaa7271038beecb66f1f27416ba8566203", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dd5704aaa7271038beecb66f1f27416ba8566203", "message": "PR feedback", "committedDate": "2020-09-02T23:53:45Z", "type": "commit"}, {"oid": "12a3dbd64f979d9bcde55aa5ce844fc193e863d8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/12a3dbd64f979d9bcde55aa5ce844fc193e863d8", "message": "Merge remote-tracking branch 'upstream/feature/storage/stg74' into recursiveAcl", "committedDate": "2020-09-02T23:54:02Z", "type": "commit"}, {"oid": "ed4fdb21c8df2c58abe0e8f8f8942cf6e0727305", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ed4fdb21c8df2c58abe0e8f8f8942cf6e0727305", "message": "Fixed broken copy method", "committedDate": "2020-09-03T16:18:22Z", "type": "commit"}, {"oid": "fdb1a85b5d0e9c94122206bde244507d146b88a0", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fdb1a85b5d0e9c94122206bde244507d146b88a0", "message": "Updated options to be strictly fluent", "committedDate": "2020-09-08T17:40:05Z", "type": "commit"}, {"oid": "fc8ca007a5e71bd4d5687d940ee837f6b3b81927", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fc8ca007a5e71bd4d5687d940ee837f6b3b81927", "message": "Merge branch 'feature/storage/stg74' into recursiveAcl", "committedDate": "2020-09-09T18:37:36Z", "type": "commit"}]}