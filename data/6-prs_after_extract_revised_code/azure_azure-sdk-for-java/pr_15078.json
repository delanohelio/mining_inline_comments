{"pr_number": 15078, "pr_title": "Enable Keyvault.keyVaultWithVirtualMachineMSI", "pr_createdAt": "2020-09-11T04:13:17Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/15078", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY4MDIxMg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15078#discussion_r487680212", "bodyText": "Why make such changes here?", "author": "saragluna", "createdAt": "2020-09-14T06:34:35Z", "path": "sdk/spring/azure-spring-boot-test-keyvault/src/test/java/com/microsoft/azure/test/keyvault/KeyVaultIT.java", "diffHunk": "@@ -164,7 +155,13 @@ public void keyVaultWithVirtualMachineMSI() throws Exception {\n             AZURE_KEYVAULT_URI,\n             \"app.jar\"));\n \n-        vm.runCommand(new RunCommandInput().withCommandId(\"RunShellScript\").withScript(commands));\n+        try (SSHShell sshShell = SSHShell.open(host, 22, VM_USER_USERNAME, VM_USER_PASSWORD);", "originalCommit": "d10b4b5236ac3f98d273b30ac4d030808ec1067f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY4MzcwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15078#discussion_r487683703", "bodyText": "Because VirtualMachine.runCommands() cannot find the java environment when executing commands in the virtual machine.", "author": "zhichengliu12581", "createdAt": "2020-09-14T06:43:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY4MDIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY5NzI4NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15078#discussion_r487697284", "bodyText": "And moving the command will help with the Java environment?", "author": "saragluna", "createdAt": "2020-09-14T07:14:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY4MDIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcwNDQyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15078#discussion_r487704429", "bodyText": "No, I just changed the way of executing commands from VirtualMachine.runCommands() to SSHShell.runCommands(). Command still needs to be executed.", "author": "zhichengliu12581", "createdAt": "2020-09-14T07:28:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY4MDIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM1MzMwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15078#discussion_r488353300", "bodyText": "Okay. Let's try fixing this Java environment issue then.", "author": "saragluna", "createdAt": "2020-09-15T02:59:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY4MDIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM1NDg2Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15078#discussion_r488354862", "bodyText": "Sorry, after testing, if the virtual machine is created through test-resources.json, this problem does not occur, but if it is a virtual machine created by myself, there will be a problem of not being able to find the java environment. Maybe some configuration is missing in the virtual machine I created?", "author": "zhichengliu12581", "createdAt": "2020-09-15T03:05:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY4MDIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxNDAyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15078#discussion_r488414023", "bodyText": "test-resources.json have a step to install java.", "author": "chenrujun", "createdAt": "2020-09-15T06:21:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY4MDIxMg=="}], "type": "inlineReview", "revised_code": {"commit": "7da1ed313827ae845dd742f6e05741c416bf07b3", "chunk": "diff --git a/sdk/spring/azure-spring-boot-test-keyvault/src/test/java/com/microsoft/azure/test/keyvault/KeyVaultIT.java b/sdk/spring/azure-spring-boot-test-keyvault/src/test/java/com/microsoft/azure/test/keyvault/KeyVaultIT.java\ndeleted file mode 100644\nindex 5edf2a0acde..00000000000\n--- a/sdk/spring/azure-spring-boot-test-keyvault/src/test/java/com/microsoft/azure/test/keyvault/KeyVaultIT.java\n+++ /dev/null\n\n@@ -1,206 +0,0 @@\n-// Copyright (c) Microsoft Corporation. All rights reserved.\n-// Licensed under the MIT License.\n-\n-package com.microsoft.azure.test.keyvault;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-import com.microsoft.azure.management.Azure;\n-import com.microsoft.azure.management.appservice.WebApp;\n-import com.microsoft.azure.management.compute.VirtualMachine;\n-import com.microsoft.azure.management.resources.fluentcore.utils.SdkContext;\n-import com.microsoft.azure.test.management.ClientSecretAccess;\n-import com.microsoft.azure.test.utils.AppRunner;\n-import com.microsoft.azure.test.utils.MavenBasedProject;\n-import com.microsoft.azure.test.utils.SSHShell;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-import org.junit.Test;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.boot.autoconfigure.SpringBootApplication;\n-import org.springframework.context.ConfigurableApplicationContext;\n-import org.springframework.core.env.ConfigurableEnvironment;\n-import org.springframework.core.env.MutablePropertySources;\n-import org.springframework.core.env.PropertySource;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.web.client.RestTemplate;\n-\n-public class KeyVaultIT {\n-\n-    private static final Logger LOGGER = LoggerFactory.getLogger(KeyVaultIT.class);\n-    private static final String AZURE_KEYVAULT_URI = System.getenv(\"AZURE_KEYVAULT_URI\");\n-    private static final String KEY_VAULT_SECRET_VALUE = System.getenv(\"KEY_VAULT_SECRET_VALUE\");\n-    private static final String KEY_VAULT_SECRET_NAME = System.getenv(\"KEY_VAULT_SECRET_NAME\");\n-    private static final String SPRING_RESOURCE_GROUP = System.getenv(\"SPRING_RESOURCE_GROUP\");\n-    private static final String APP_SERVICE_NAME = System.getenv(\"APP_SERVICE_NAME\");\n-    private static final String VM_NAME = System.getenv(\"VM_NAME\");\n-    private static final String VM_USER_USERNAME = System.getenv(\"VM_USER_USERNAME\");\n-    private static final String VM_USER_PASSWORD = System.getenv(\"VM_USER_PASSWORD\");\n-    private static final int DEFAULT_MAX_RETRY_TIMES = 3;\n-    private static final Azure AZURE;\n-    private static final ClientSecretAccess CLIENT_SECRET_ACCESS;\n-    private static final RestTemplate REST_TEMPLATE = new RestTemplate();\n-\n-    static {\n-        CLIENT_SECRET_ACCESS = ClientSecretAccess.load();\n-        AZURE = Azure.authenticate(CLIENT_SECRET_ACCESS.credentials())\n-            .withSubscription(CLIENT_SECRET_ACCESS.subscription());\n-    }\n-\n-    @Test\n-    public void keyVaultAsPropertySource() {\n-        try (AppRunner app = new AppRunner(DumbApp.class)) {\n-            app.property(\"azure.keyvault.enabled\", \"true\");\n-            app.property(\"azure.keyvault.uri\", AZURE_KEYVAULT_URI);\n-            app.property(\"azure.keyvault.client-id\", CLIENT_SECRET_ACCESS.clientId());\n-            app.property(\"azure.keyvault.client-key\", CLIENT_SECRET_ACCESS.clientSecret());\n-            app.property(\"azure.keyvault.tenant-id\", CLIENT_SECRET_ACCESS.tenantId());\n-\n-            final ConfigurableApplicationContext dummy = app.start(\"dummy\");\n-            final ConfigurableEnvironment environment = dummy.getEnvironment();\n-            final MutablePropertySources propertySources = environment.getPropertySources();\n-            for (final PropertySource<?> propertySource : propertySources) {\n-                System.out.println(\"name =  \" + propertySource.getName() + \"\\nsource = \" + propertySource\n-                    .getSource().getClass() + \"\\n\");\n-            }\n-\n-            assertEquals(KEY_VAULT_SECRET_VALUE, app.getProperty(KEY_VAULT_SECRET_NAME));\n-            LOGGER.info(\"--------------------->test over\");\n-        }\n-    }\n-\n-    @Test\n-    public void keyVaultAsPropertySourceWithSpecificKeys() {\n-        try (AppRunner app = new AppRunner(DumbApp.class)) {\n-            app.property(\"azure.keyvault.enabled\", \"true\");\n-            app.property(\"azure.keyvault.uri\", AZURE_KEYVAULT_URI);\n-            app.property(\"azure.keyvault.client-id\", CLIENT_SECRET_ACCESS.clientId());\n-            app.property(\"azure.keyvault.client-key\", CLIENT_SECRET_ACCESS.clientSecret());\n-            app.property(\"azure.keyvault.tenant-id\", CLIENT_SECRET_ACCESS.tenantId());\n-\n-            app.property(\"azure.keyvault.secret.keys\", KEY_VAULT_SECRET_NAME + \" , azure-cosmosdb-key\");\n-            LOGGER.info(\"====\" + KEY_VAULT_SECRET_NAME + \" , azure-cosmosdb-key\");\n-\n-            app.start();\n-            assertEquals(KEY_VAULT_SECRET_VALUE, app.getProperty(KEY_VAULT_SECRET_NAME));\n-            LOGGER.info(\"--------------------->test over\");\n-        }\n-    }\n-\n-    @Test\n-    public void keyVaultWithAppServiceMSI() {\n-        final WebApp webApp = AZURE\n-            .webApps()\n-            .getByResourceGroup(SPRING_RESOURCE_GROUP, APP_SERVICE_NAME);\n-\n-        final MavenBasedProject app = new MavenBasedProject(\"../azure-spring-boot-test-application\");\n-        app.packageUp();\n-\n-        // Deploy zip\n-        // Add retry logic here to avoid Kudu's socket timeout issue.\n-        // More details: https://github.com/Microsoft/azure-maven-plugins/issues/339\n-        int retryCount = 0;\n-        final File zipFile = new File(app.zipFile());\n-        while (retryCount < DEFAULT_MAX_RETRY_TIMES) {\n-            retryCount += 1;\n-            try {\n-                webApp.zipDeploy(zipFile);\n-                LOGGER.info(String.format(\"Deployed the artifact to https://%s\", webApp.defaultHostName()));\n-                break;\n-            } catch (Exception e) {\n-                LOGGER.error(String.format(\"Exception occurred when deploying the zip package: %s, \"\n-                    + \"retrying immediately (%d/%d)\", e.getMessage(), retryCount, DEFAULT_MAX_RETRY_TIMES));\n-            }\n-        }\n-\n-        // Restart App Service\n-        LOGGER.info(\"restarting app service...\");\n-        webApp.restart();\n-        LOGGER.info(\"restarting app service finished...\");\n-        final String resourceUrl = \"https://\" + webApp.name() + \".azurewebsites.net/get\";\n-        final ResponseEntity<String> response = curlWithRetry(resourceUrl, 3, 120_000, String.class);\n-        assertEquals(HttpStatus.OK, response.getStatusCode());\n-        assertEquals(KEY_VAULT_SECRET_VALUE, response.getBody());\n-        LOGGER.info(\"--------------------->test app service with MSI over\");\n-    }\n-\n-    @Test\n-    public void keyVaultWithVirtualMachineMSI() throws Exception {\n-        final VirtualMachine vm = AZURE.virtualMachines().getByResourceGroup(SPRING_RESOURCE_GROUP, VM_NAME);\n-\n-        final String host = vm.getPrimaryPublicIPAddress().ipAddress();\n-\n-        // Upload app.jar to virtual machine and run java application\n-        final MavenBasedProject app = new MavenBasedProject(\"../azure-spring-boot-test-application\");\n-        app.packageUp();\n-\n-        final File file = new File(app.artifact());\n-\n-        if (!file.exists()) {\n-            throw new FileNotFoundException(\"There's no app.jar file found.\");\n-        }\n-\n-        final List<String> commands = new ArrayList<>();\n-        commands.add(String.format(\"cd /home/%s\", VM_USER_USERNAME));\n-        commands.add(String.format(\"nohup java -jar -Xdebug \"\n-                + \"-Xrunjdwp:server=y,transport=dt_socket,address=4000,suspend=n \"\n-                + \"-Dazure.keyvault.uri=%s %s &\"\n-                + \" >/log.txt  2>&1\",\n-            AZURE_KEYVAULT_URI,\n-            \"app.jar\"));\n-\n-        try (SSHShell sshShell = SSHShell.open(host, 22, VM_USER_USERNAME, VM_USER_PASSWORD);\n-            FileInputStream fis = new FileInputStream(file)) {\n-            LOGGER.info(\"Uploading jar file...\");\n-            sshShell.upload(fis, \"app.jar\", \"\", true, \"4095\");\n-            LOGGER.info(\"Running commands...\");\n-            sshShell.runCommands(commands);\n-        }\n-\n-        final ResponseEntity<String> response = curlWithRetry(\n-            String.format(\"http://%s:8080/get\", host),\n-            3,\n-            60_000,\n-            String.class);\n-\n-        assertEquals(HttpStatus.OK, response.getStatusCode());\n-        assertEquals(KEY_VAULT_SECRET_VALUE, response.getBody());\n-        LOGGER.info(\"key vault value is: {}\", response.getBody());\n-        LOGGER.info(\"--------------------->test virtual machine with MSI over\");\n-    }\n-\n-    private static <T> ResponseEntity<T> curlWithRetry(String resourceUrl,\n-        final int retryTimes,\n-        int sleepMills,\n-        Class<T> clazz) {\n-        HttpStatus httpStatus = HttpStatus.BAD_REQUEST;\n-        ResponseEntity<T> response = ResponseEntity.of(Optional.empty());\n-        int rt = retryTimes;\n-\n-        while (rt-- > 0 && httpStatus != HttpStatus.OK) {\n-            SdkContext.sleep(sleepMills);\n-\n-            LOGGER.info(\"CURLing \" + resourceUrl);\n-\n-            try {\n-                response = REST_TEMPLATE.getForEntity(resourceUrl, clazz);\n-            } catch (Exception e) {\n-                LOGGER.error(e.getMessage(), e);\n-            }\n-\n-            httpStatus = response.getStatusCode();\n-        }\n-        return response;\n-    }\n-\n-    @SpringBootApplication\n-    public static class DumbApp {\n-\n-    }\n-}\n"}}, {"oid": "7da1ed313827ae845dd742f6e05741c416bf07b3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/7da1ed313827ae845dd742f6e05741c416bf07b3", "message": "Keep port 8080 open", "committedDate": "2020-09-22T09:36:54Z", "type": "commit"}, {"oid": "cbab4bce9a0ffde43e7710bd4749cef9e77cd71f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cbab4bce9a0ffde43e7710bd4749cef9e77cd71f", "message": "Change the way of uploading files", "committedDate": "2020-09-22T09:38:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYwNDU2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15078#discussion_r492604561", "bodyText": "Please install java maven in this file: https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/spring/azure-spring-boot-test-keyvault/install_java.sh", "author": "chenrujun", "createdAt": "2020-09-22T09:42:27Z", "path": "sdk/spring/azure-spring-boot-test-keyvault/src/test/java/com/azure/test/keyvault/KeyVaultIT.java", "diffHunk": "@@ -131,30 +127,25 @@ public void keyVaultWithAppServiceMSI() {\n     }\n \n     @Test\n-    @Ignore\n-    public void keyVaultWithVirtualMachineMSI() throws Exception {\n+    public void keyVaultWithVirtualMachineMSI() {\n         final VirtualMachine vm = AZURE.virtualMachines().getByResourceGroup(SPRING_RESOURCE_GROUP, VM_NAME);\n \n         final String host = vm.getPrimaryPublicIPAddress().ipAddress();\n \n-        // Upload app.jar to virtual machine\n-        final MavenBasedProject app = new MavenBasedProject(\"../azure-spring-boot-test-application\");\n-        app.packageUp();\n-\n-        final File file = new File(app.artifact());\n-\n-        if (!file.exists()) {\n-            throw new FileNotFoundException(\"There's no app.jar file found.\");\n-        }\n-        try (SSHShell sshShell = SSHShell.open(host, 22, VM_USER_USERNAME, VM_USER_PASSWORD);\n-            FileInputStream fis = new FileInputStream(file)) {\n-            LOGGER.info(\"Uploading jar file...\");\n-            sshShell.upload(fis, \"app.jar\", \"\", true, \"4095\");\n-        }\n-\n-        // run java application\n         final List<String> commands = new ArrayList<>();\n         commands.add(String.format(\"cd /home/%s\", VM_USER_USERNAME));\n+        commands.add(\"apt-get install maven -y\");\n+        commands.add(\"apt-get install git\");", "originalCommit": "cbab4bce9a0ffde43e7710bd4749cef9e77cd71f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b6910cc8db9af1500d2df9919f08dc36b058c148", "chunk": "diff --git a/sdk/spring/azure-spring-boot-test-keyvault/src/test/java/com/azure/test/keyvault/KeyVaultIT.java b/sdk/spring/azure-spring-boot-test-keyvault/src/test/java/com/azure/test/keyvault/KeyVaultIT.java\nindex ea1384fb2d4..4f49a23af9b 100644\n--- a/sdk/spring/azure-spring-boot-test-keyvault/src/test/java/com/azure/test/keyvault/KeyVaultIT.java\n+++ b/sdk/spring/azure-spring-boot-test-keyvault/src/test/java/com/azure/test/keyvault/KeyVaultIT.java\n\n@@ -134,8 +134,6 @@ public class KeyVaultIT {\n \n         final List<String> commands = new ArrayList<>();\n         commands.add(String.format(\"cd /home/%s\", VM_USER_USERNAME));\n-        commands.add(\"apt-get install maven -y\");\n-        commands.add(\"apt-get install git\");\n         commands.add(\"mkdir azure-sdk-for-java\");\n         commands.add(\"cd azure-sdk-for-java\");\n         commands.add(\"git init\");\n"}}, {"oid": "b6910cc8db9af1500d2df9919f08dc36b058c148", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b6910cc8db9af1500d2df9919f08dc36b058c148", "message": "The virtual machine has installed the software\n\nThe corresponding software has been installed when the virtual machine is created", "committedDate": "2020-09-23T05:49:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI3MTAzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15078#discussion_r493271039", "bodyText": "Can we use current branch instead of master branch?\nRefs: https://stackoverflow.com/questions/49106104/get-current-git-branch-inside-a-java-test", "author": "chenrujun", "createdAt": "2020-09-23T07:50:38Z", "path": "sdk/spring/azure-spring-boot-test-keyvault/src/test/java/com/azure/test/keyvault/KeyVaultIT.java", "diffHunk": "@@ -131,30 +127,23 @@ public void keyVaultWithAppServiceMSI() {\n     }\n \n     @Test\n-    @Ignore\n-    public void keyVaultWithVirtualMachineMSI() throws Exception {\n+    public void keyVaultWithVirtualMachineMSI() {\n         final VirtualMachine vm = AZURE.virtualMachines().getByResourceGroup(SPRING_RESOURCE_GROUP, VM_NAME);\n \n         final String host = vm.getPrimaryPublicIPAddress().ipAddress();\n \n-        // Upload app.jar to virtual machine\n-        final MavenBasedProject app = new MavenBasedProject(\"../azure-spring-boot-test-application\");\n-        app.packageUp();\n-\n-        final File file = new File(app.artifact());\n-\n-        if (!file.exists()) {\n-            throw new FileNotFoundException(\"There's no app.jar file found.\");\n-        }\n-        try (SSHShell sshShell = SSHShell.open(host, 22, VM_USER_USERNAME, VM_USER_PASSWORD);\n-            FileInputStream fis = new FileInputStream(file)) {\n-            LOGGER.info(\"Uploading jar file...\");\n-            sshShell.upload(fis, \"app.jar\", \"\", true, \"4095\");\n-        }\n-\n-        // run java application\n         final List<String> commands = new ArrayList<>();\n         commands.add(String.format(\"cd /home/%s\", VM_USER_USERNAME));\n+        commands.add(\"mkdir azure-sdk-for-java\");\n+        commands.add(\"cd azure-sdk-for-java\");\n+        commands.add(\"git init\");\n+        commands.add(\"git remote add origin https://github.com/Azure/azure-sdk-for-java.git\");\n+        commands.add(\"git config core.sparsecheckout true\");\n+        commands.add(\"echo sdk/spring > .git/info/sparse-checkout\");\n+        commands.add(\"git pull origin master\");", "originalCommit": "b6910cc8db9af1500d2df9919f08dc36b058c148", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI3MzY2NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15078#discussion_r493273665", "bodyText": "We need update origin too.\nRefs: https://stackoverflow.com/questions/171550/find-out-which-remote-branch-a-local-branch-is-tracking", "author": "chenrujun", "createdAt": "2020-09-23T07:54:01Z", "path": "sdk/spring/azure-spring-boot-test-keyvault/src/test/java/com/azure/test/keyvault/KeyVaultIT.java", "diffHunk": "@@ -131,30 +127,23 @@ public void keyVaultWithAppServiceMSI() {\n     }\n \n     @Test\n-    @Ignore\n-    public void keyVaultWithVirtualMachineMSI() throws Exception {\n+    public void keyVaultWithVirtualMachineMSI() {\n         final VirtualMachine vm = AZURE.virtualMachines().getByResourceGroup(SPRING_RESOURCE_GROUP, VM_NAME);\n \n         final String host = vm.getPrimaryPublicIPAddress().ipAddress();\n \n-        // Upload app.jar to virtual machine\n-        final MavenBasedProject app = new MavenBasedProject(\"../azure-spring-boot-test-application\");\n-        app.packageUp();\n-\n-        final File file = new File(app.artifact());\n-\n-        if (!file.exists()) {\n-            throw new FileNotFoundException(\"There's no app.jar file found.\");\n-        }\n-        try (SSHShell sshShell = SSHShell.open(host, 22, VM_USER_USERNAME, VM_USER_PASSWORD);\n-            FileInputStream fis = new FileInputStream(file)) {\n-            LOGGER.info(\"Uploading jar file...\");\n-            sshShell.upload(fis, \"app.jar\", \"\", true, \"4095\");\n-        }\n-\n-        // run java application\n         final List<String> commands = new ArrayList<>();\n         commands.add(String.format(\"cd /home/%s\", VM_USER_USERNAME));\n+        commands.add(\"mkdir azure-sdk-for-java\");\n+        commands.add(\"cd azure-sdk-for-java\");\n+        commands.add(\"git init\");\n+        commands.add(\"git remote add origin https://github.com/Azure/azure-sdk-for-java.git\");", "originalCommit": "b6910cc8db9af1500d2df9919f08dc36b058c148", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU5MTQwNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15078#discussion_r493591407", "bodyText": "So why do we choose to pull the project from GitHub instead of pushing it?", "author": "saragluna", "createdAt": "2020-09-23T13:31:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI3MzY2NQ=="}], "type": "inlineReview", "revised_code": null}]}