{"pr_number": 15431, "pr_title": "Allow for custom serializer in ADT, add mappers for event route and incoming relationship types", "pr_createdAt": "2020-09-21T19:56:43Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/15431", "timeline": [{"oid": "88a6a294f37986c48ad003270287898cd6580200", "url": "https://github.com/Azure/azure-sdk-for-java/commit/88a6a294f37986c48ad003270287898cd6580200", "message": "Allow for custom serializer in ADT, add mappers for event route and incoming relationship types\n\nWe shouldn't expose a generated type like EventRoute, EventRouteListOptions, and IncomingRelationship if those types come with a validate() function. Instead, I have created wrapper classes for each so that we don't expose the validate() function while still getting the client side validation that we want.\n\nFor the json serializer, the changes are modeled after the SearchClient for Azure Search. Like in that client, the custom serializer does not get passed down into the protocol layer, but is used anywhere there is json serialization/deserialization within the convenience layer", "committedDate": "2020-09-21T19:56:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxMTMyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492311326", "bodyText": "This one was odd to me. I'm assuming we didn't mean to assume that there was no continuation token", "author": "timtay-microsoft", "createdAt": "2020-09-21T19:58:13Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -665,7 +700,7 @@ public DigitalTwinsServiceVersion getServiceVersion() {\n                         objectPagedResponse.getStatusCode(),\n                         objectPagedResponse.getHeaders(),\n                         convertedList,\n-                        null,", "originalCommit": "88a6a294f37986c48ad003270287898cd6580200", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxMjM1Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492312353", "bodyText": "While users shouldn't be setting this, we need it to do conversions from generated type to public type", "author": "timtay-microsoft", "createdAt": "2020-09-21T20:00:06Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/models/EventRoute.java", "diffHunk": "@@ -79,13 +77,13 @@ public EventRoute setFilter(String filter) {\n     }\n \n     /**\n-     * Validates the instance.\n+     * Sets the event route's Id.\n      *\n-     * @throws IllegalArgumentException thrown if the instance is not valid.\n+     * @param id The event route's Id to set.\n+     * @return the EventRoute object itself.\n      */\n-    public void validate() {\n-        if (getEndpointName() == null) {\n-            throw new IllegalArgumentException(\"Missing required property endpointName in model EventRoute\");\n-        }\n+    public EventRoute setId(String id) {", "originalCommit": "88a6a294f37986c48ad003270287898cd6580200", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxMjQ4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492312485", "bodyText": "The converters live in a different package, so I can't just make this package private", "author": "timtay-microsoft", "createdAt": "2020-09-21T20:00:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxMjM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyMTc4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492321780", "bodyText": "How about a doc comment to that effect then? If I'm an end-user and see this setter, I'm wondering what happens if I set it, or why I'd want to.", "author": "drwill-ms", "createdAt": "2020-09-21T20:18:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxMjM1Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxNDE3OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492314179", "bodyText": "I'm surprised the host is the 2rd parameter, but it is hard to articulate why. Is there parameter order guidance from team Azure SDK team?", "author": "drwill-ms", "createdAt": "2020-09-21T20:03:33Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -52,8 +57,9 @@\n     private final DigitalTwinsServiceVersion serviceVersion;\n     private final AzureDigitalTwinsAPIImpl protocolLayer;\n     private static final Boolean includeModelDefinitionOnGet = true;\n+    private JsonSerializer serializer = null;\n \n-    DigitalTwinsAsyncClient(HttpPipeline pipeline, DigitalTwinsServiceVersion serviceVersion, String host) {\n+    DigitalTwinsAsyncClient(HttpPipeline pipeline, DigitalTwinsServiceVersion serviceVersion, String host, JsonSerializer jsonSerializer) {", "originalCommit": "88a6a294f37986c48ad003270287898cd6580200", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxNjY5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492316691", "bodyText": "I double checked the configuration client, and they have it as \"host, pipeline, serviceVersion\", so I can switch us to match", "author": "timtay-microsoft", "createdAt": "2020-09-21T20:08:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxNDE3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "98211b71a76ea864be78a70b1d8e28581ad2ce52", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\nindex 6821fa0c07b..98f88b8589e 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\n\n@@ -59,7 +59,7 @@ public final class DigitalTwinsAsyncClient {\n     private static final Boolean includeModelDefinitionOnGet = true;\n     private JsonSerializer serializer = null;\n \n-    DigitalTwinsAsyncClient(HttpPipeline pipeline, DigitalTwinsServiceVersion serviceVersion, String host, JsonSerializer jsonSerializer) {\n+    DigitalTwinsAsyncClient(String serviceEndpoint, HttpPipeline pipeline, DigitalTwinsServiceVersion serviceVersion, JsonSerializer jsonSerializer) {\n         final SimpleModule stringModule = new SimpleModule(\"String Serializer\");\n         stringModule.addSerializer(new DigitalTwinsStringSerializer(String.class, mapper));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxNjY4Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492316687", "bodyText": "nit: can we add a link to DeserializationHelpers here?", "author": "abhipsaMisra", "createdAt": "2020-09-21T20:08:28Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java", "diffHunk": "@@ -62,6 +68,10 @@\n \n         this.serviceVersion = serviceVersion;\n \n+        // Is null by default. If not null, then the user provided a custom json serializer for the convenience layer to use.\n+        // If null, then mapper will be used instead. See DeserializationHelpers for more details", "originalCommit": "88a6a294f37986c48ad003270287898cd6580200", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyMzMwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492323303", "bodyText": "Links only work in javadocs, not comments", "author": "timtay-microsoft", "createdAt": "2020-09-21T20:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxNjY4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0MTgzOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492341839", "bodyText": "\ud83e\udd26, my bad!", "author": "abhipsaMisra", "createdAt": "2020-09-21T20:57:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxNjY4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "98211b71a76ea864be78a70b1d8e28581ad2ce52", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\nindex 6821fa0c07b..98f88b8589e 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/DigitalTwinsAsyncClient.java\n\n@@ -73,7 +73,7 @@ public final class DigitalTwinsAsyncClient {\n         this.serializer = jsonSerializer;\n \n         this.protocolLayer = new AzureDigitalTwinsAPIImplBuilder()\n-            .host(host)\n+            .host(serviceEndpoint)\n             .pipeline(pipeline)\n             .serializerAdapter(jacksonAdapter)\n             .buildClient();\n"}}, {"oid": "98211b71a76ea864be78a70b1d8e28581ad2ce52", "url": "https://github.com/Azure/azure-sdk-for-java/commit/98211b71a76ea864be78a70b1d8e28581ad2ce52", "message": "cr comments", "committedDate": "2020-09-21T20:10:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyMDgyMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492320820", "bodyText": "space before curly brace", "author": "drwill-ms", "createdAt": "2020-09-21T20:16:18Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java", "diffHunk": "@@ -1,23 +1,38 @@\n package com.azure.digitaltwins.core.implementation.serializer;\n \n+import com.azure.core.util.serializer.JsonSerializer;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+\n+import static com.azure.core.util.serializer.TypeReference.createInstance;\n+\n public class DeserializationHelpers {\n \n     /**\n-     * Converts the payload object into a generic type.\n+     * Deserialize the payload object into a generic type.\n      * There are two different paths we will have to take based on the type T\n      * In case of a String, we need to write the value of the payload as a String\n      * In case of any other type that the user decides to deserialize the payload, we will use mapper.convertValue to perform the conversion.\n+     *\n+     * If the customJsonSerializer is null, then no custom serializer will be used for this deserialization. Otherwise, the customJsonSerializer will be used.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T castObject(ObjectMapper mapper, Object payload, Class<T> clazz) throws JsonProcessingException {\n-        if (clazz.isAssignableFrom(String.class)){\n-            return (T)mapper.writeValueAsString(payload);\n+    public static <T> T deserializeObject(ObjectMapper mapper, Object payload, Class<T> clazz, JsonSerializer customJsonSerializer) throws JsonProcessingException {\n+        if (customJsonSerializer == null) {\n+            if (clazz.isAssignableFrom(String.class)){", "originalCommit": "98211b71a76ea864be78a70b1d8e28581ad2ce52", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8317d49776b8057a208bd8a0e08ad317441c324", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java\nindex bb3d835bc28..01ed081048f 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java\n\n@@ -22,17 +22,16 @@ public class DeserializationHelpers {\n     @SuppressWarnings(\"unchecked\")\n     public static <T> T deserializeObject(ObjectMapper mapper, Object payload, Class<T> clazz, JsonSerializer customJsonSerializer) throws JsonProcessingException {\n         if (customJsonSerializer == null) {\n-            if (clazz.isAssignableFrom(String.class)){\n+            if (clazz.isAssignableFrom(String.class)) {\n                 return (T)mapper.writeValueAsString(payload);\n             }\n             else {\n                 return mapper.convertValue(payload, clazz);\n             }\n         }\n-        else {\n-            ByteArrayOutputStream sourceStream = new ByteArrayOutputStream();\n-            customJsonSerializer.serialize(sourceStream, payload);\n-            return customJsonSerializer.deserialize(new ByteArrayInputStream(sourceStream.toByteArray()), createInstance(clazz));\n-        }\n+\n+        ByteArrayOutputStream sourceStream = new ByteArrayOutputStream();\n+        customJsonSerializer.serialize(sourceStream, payload);\n+        return customJsonSerializer.deserialize(new ByteArrayInputStream(sourceStream.toByteArray()), createInstance(clazz));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyMTEzMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492321131", "bodyText": "technically, you could remove this else as the assignable check returns", "author": "drwill-ms", "createdAt": "2020-09-21T20:16:57Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java", "diffHunk": "@@ -1,23 +1,38 @@\n package com.azure.digitaltwins.core.implementation.serializer;\n \n+import com.azure.core.util.serializer.JsonSerializer;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+\n+import static com.azure.core.util.serializer.TypeReference.createInstance;\n+\n public class DeserializationHelpers {\n \n     /**\n-     * Converts the payload object into a generic type.\n+     * Deserialize the payload object into a generic type.\n      * There are two different paths we will have to take based on the type T\n      * In case of a String, we need to write the value of the payload as a String\n      * In case of any other type that the user decides to deserialize the payload, we will use mapper.convertValue to perform the conversion.\n+     *\n+     * If the customJsonSerializer is null, then no custom serializer will be used for this deserialization. Otherwise, the customJsonSerializer will be used.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T castObject(ObjectMapper mapper, Object payload, Class<T> clazz) throws JsonProcessingException {\n-        if (clazz.isAssignableFrom(String.class)){\n-            return (T)mapper.writeValueAsString(payload);\n+    public static <T> T deserializeObject(ObjectMapper mapper, Object payload, Class<T> clazz, JsonSerializer customJsonSerializer) throws JsonProcessingException {\n+        if (customJsonSerializer == null) {\n+            if (clazz.isAssignableFrom(String.class)){\n+                return (T)mapper.writeValueAsString(payload);\n+            }\n+            else {", "originalCommit": "98211b71a76ea864be78a70b1d8e28581ad2ce52", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8317d49776b8057a208bd8a0e08ad317441c324", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java\nindex bb3d835bc28..01ed081048f 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java\n\n@@ -22,17 +22,16 @@ public class DeserializationHelpers {\n     @SuppressWarnings(\"unchecked\")\n     public static <T> T deserializeObject(ObjectMapper mapper, Object payload, Class<T> clazz, JsonSerializer customJsonSerializer) throws JsonProcessingException {\n         if (customJsonSerializer == null) {\n-            if (clazz.isAssignableFrom(String.class)){\n+            if (clazz.isAssignableFrom(String.class)) {\n                 return (T)mapper.writeValueAsString(payload);\n             }\n             else {\n                 return mapper.convertValue(payload, clazz);\n             }\n         }\n-        else {\n-            ByteArrayOutputStream sourceStream = new ByteArrayOutputStream();\n-            customJsonSerializer.serialize(sourceStream, payload);\n-            return customJsonSerializer.deserialize(new ByteArrayInputStream(sourceStream.toByteArray()), createInstance(clazz));\n-        }\n+\n+        ByteArrayOutputStream sourceStream = new ByteArrayOutputStream();\n+        customJsonSerializer.serialize(sourceStream, payload);\n+        return customJsonSerializer.deserialize(new ByteArrayInputStream(sourceStream.toByteArray()), createInstance(clazz));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyMTI0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492321241", "bodyText": "space before curly brace", "author": "drwill-ms", "createdAt": "2020-09-21T20:17:10Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java", "diffHunk": "@@ -15,12 +18,24 @@\n      * Input: {\"_t\":2,\"_s\":null,\"_rc\":\"[{\\\"token\\\":\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\",\\\"range\\\":{\\\"min\\\":\\\"\\\",\\\"max\\\":\\\"05C1DFFFFFFFFC\\\"}}]\",\"_q\":\"SELECT * FROM digitaltwins where IsOccupied = true\"}\n      * Output: \"{\\\"_t\\\":2,\\\"_s\\\":null,\\\"_rc\\\":\\\"[{\\\\\\\"token\\\\\\\":\\\\\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\\\\\",\\\\\\\"range\\\\\\\":{\\\\\\\"min\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"max\\\\\\\":\\\\\\\"05C1DFFFFFFFFC\\\\\\\"}}]\\\",\\\"_q\\\":\\\"SELECT * FROM digitaltwins where IsOccupied = true\\\"}\"\n      */\n-    public static String serializeContinuationToken(String continuationToken) {\n-        try {\n-            return new JacksonAdapter().serialize(continuationToken, SerializerEncoding.JSON);\n+    public static String serializeContinuationToken(String continuationToken, JsonSerializer serializer) {\n+        if (serializer == null) {\n+            try {\n+                return new JacksonAdapter().serialize(continuationToken, SerializerEncoding.JSON);\n+            }\n+            catch (Exception e){", "originalCommit": "98211b71a76ea864be78a70b1d8e28581ad2ce52", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8317d49776b8057a208bd8a0e08ad317441c324", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java\nindex 9d722281079..64ddbf622f5 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java\n\n@@ -23,19 +23,17 @@ public class SerializationHelpers {\n             try {\n                 return new JacksonAdapter().serialize(continuationToken, SerializerEncoding.JSON);\n             }\n-            catch (Exception e){\n+            catch (Exception e) {\n                 throw new IllegalArgumentException(\"Invalid continuation token\", e);\n             }\n         }\n-        else {\n-            try {\n-                ByteArrayOutputStream sourceStream = new ByteArrayOutputStream();\n-                serializer.serialize(sourceStream, continuationToken);\n-                return sourceStream.toString();\n-            }\n-            catch (Exception e){\n-                throw new IllegalArgumentException(\"Invalid continuation token\", e);\n-            }\n+        try {\n+            ByteArrayOutputStream sourceStream = new ByteArrayOutputStream();\n+            serializer.serialize(sourceStream, continuationToken);\n+            return sourceStream.toString();\n+        }\n+        catch (Exception e) {\n+            throw new IllegalArgumentException(\"Invalid continuation token\", e);\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyMTM0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492321346", "bodyText": "space before curly brace", "author": "drwill-ms", "createdAt": "2020-09-21T20:17:23Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java", "diffHunk": "@@ -15,12 +18,24 @@\n      * Input: {\"_t\":2,\"_s\":null,\"_rc\":\"[{\\\"token\\\":\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\",\\\"range\\\":{\\\"min\\\":\\\"\\\",\\\"max\\\":\\\"05C1DFFFFFFFFC\\\"}}]\",\"_q\":\"SELECT * FROM digitaltwins where IsOccupied = true\"}\n      * Output: \"{\\\"_t\\\":2,\\\"_s\\\":null,\\\"_rc\\\":\\\"[{\\\\\\\"token\\\\\\\":\\\\\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\\\\\",\\\\\\\"range\\\\\\\":{\\\\\\\"min\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"max\\\\\\\":\\\\\\\"05C1DFFFFFFFFC\\\\\\\"}}]\\\",\\\"_q\\\":\\\"SELECT * FROM digitaltwins where IsOccupied = true\\\"}\"\n      */\n-    public static String serializeContinuationToken(String continuationToken) {\n-        try {\n-            return new JacksonAdapter().serialize(continuationToken, SerializerEncoding.JSON);\n+    public static String serializeContinuationToken(String continuationToken, JsonSerializer serializer) {\n+        if (serializer == null) {\n+            try {\n+                return new JacksonAdapter().serialize(continuationToken, SerializerEncoding.JSON);\n+            }\n+            catch (Exception e){\n+                throw new IllegalArgumentException(\"Invalid continuation token\", e);\n+            }\n         }\n-        catch (Exception e){\n-            throw new IllegalArgumentException(\"Invalid continuation token\");\n+        else {\n+            try {\n+                ByteArrayOutputStream sourceStream = new ByteArrayOutputStream();\n+                serializer.serialize(sourceStream, continuationToken);\n+                return sourceStream.toString();\n+            }\n+            catch (Exception e){", "originalCommit": "98211b71a76ea864be78a70b1d8e28581ad2ce52", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8317d49776b8057a208bd8a0e08ad317441c324", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java\nindex 9d722281079..64ddbf622f5 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java\n\n@@ -23,19 +23,17 @@ public class SerializationHelpers {\n             try {\n                 return new JacksonAdapter().serialize(continuationToken, SerializerEncoding.JSON);\n             }\n-            catch (Exception e){\n+            catch (Exception e) {\n                 throw new IllegalArgumentException(\"Invalid continuation token\", e);\n             }\n         }\n-        else {\n-            try {\n-                ByteArrayOutputStream sourceStream = new ByteArrayOutputStream();\n-                serializer.serialize(sourceStream, continuationToken);\n-                return sourceStream.toString();\n-            }\n-            catch (Exception e){\n-                throw new IllegalArgumentException(\"Invalid continuation token\", e);\n-            }\n+        try {\n+            ByteArrayOutputStream sourceStream = new ByteArrayOutputStream();\n+            serializer.serialize(sourceStream, continuationToken);\n+            return sourceStream.toString();\n+        }\n+        catch (Exception e) {\n+            throw new IllegalArgumentException(\"Invalid continuation token\", e);\n         }\n     }\n }\n"}}, {"oid": "ddcec6acf6229bae1c6e1a230b9cc7f9a1de0ffd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ddcec6acf6229bae1c6e1a230b9cc7f9a1de0ffd", "message": "fixup", "committedDate": "2020-09-21T20:19:33Z", "type": "commit"}, {"oid": "b8317d49776b8057a208bd8a0e08ad317441c324", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b8317d49776b8057a208bd8a0e08ad317441c324", "message": "cr comments", "committedDate": "2020-09-21T20:22:33Z", "type": "commit"}, {"oid": "2bb69842360a1ae3896719409d2b79e4bbaa75f3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2bb69842360a1ae3896719409d2b79e4bbaa75f3", "message": "to squash", "committedDate": "2020-09-21T20:45:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0MjgyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492342824", "bodyText": "nice!", "author": "abhipsaMisra", "createdAt": "2020-09-21T20:59:34Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/models/EventRoute.java", "diffHunk": "@@ -0,0 +1,87 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+// Code generated by Microsoft (R) AutoRest Code Generator.\n+\n+package com.azure.digitaltwins.core.implementation.models;\n+\n+import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/** The EventRoute model. */\n+@Fluent\n+public final class EventRoute {\n+    /*\n+     * The id of the event route.\n+     */\n+    @JsonProperty(value = \"id\", access = JsonProperty.Access.WRITE_ONLY)\n+    private String id;\n+\n+    /*\n+     * The name of the endpoint this event route is bound to.\n+     */\n+    @JsonProperty(value = \"endpointName\", required = true)\n+    private String endpointName;\n+\n+    /*\n+     * An expression which describes the events which are routed to the\n+     * endpoint.\n+     */\n+    @JsonProperty(value = \"filter\")\n+    private String filter;\n+\n+    /** Creates an instance of EventRoute class. */\n+    @JsonCreator\n+    public EventRoute(@JsonProperty(value = \"endpointName\", required = true) String endpointName) {", "originalCommit": "2bb69842360a1ae3896719409d2b79e4bbaa75f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0MzQ0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492343443", "bodyText": "shouldn't we say what would be used instead, if customJsonSerializer is null?", "author": "abhipsaMisra", "createdAt": "2020-09-21T21:00:44Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java", "diffHunk": "@@ -1,23 +1,37 @@\n package com.azure.digitaltwins.core.implementation.serializer;\n \n+import com.azure.core.util.serializer.JsonSerializer;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+\n+import static com.azure.core.util.serializer.TypeReference.createInstance;\n+\n public class DeserializationHelpers {\n \n     /**\n-     * Converts the payload object into a generic type.\n+     * Deserialize the payload object into a generic type.\n      * There are two different paths we will have to take based on the type T\n      * In case of a String, we need to write the value of the payload as a String\n      * In case of any other type that the user decides to deserialize the payload, we will use mapper.convertValue to perform the conversion.\n+     *\n+     * If the customJsonSerializer is null, then no custom serializer will be used for this deserialization. Otherwise, the customJsonSerializer will be used.", "originalCommit": "2bb69842360a1ae3896719409d2b79e4bbaa75f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM2MzkyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492363927", "bodyText": "Let me re-word this a bit to avoid confusion", "author": "timtay-microsoft", "createdAt": "2020-09-21T21:45:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0MzQ0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ac13280df4bf19b1acac3bcf0aab3f3737663cb1", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java\nindex 01ed081048f..7ead01cc8ac 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/DeserializationHelpers.java\n\n@@ -17,7 +17,8 @@ public class DeserializationHelpers {\n      * In case of a String, we need to write the value of the payload as a String\n      * In case of any other type that the user decides to deserialize the payload, we will use mapper.convertValue to perform the conversion.\n      *\n-     * If the customJsonSerializer is null, then no custom serializer will be used for this deserialization. Otherwise, the customJsonSerializer will be used.\n+     * If the customJsonSerializer is not null, then it will be used to deserialize the provided payload into the provided class. Otherwise\n+     * this function will use the provided mapper which will never be null.\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> T deserializeObject(ObjectMapper mapper, Object payload, Class<T> clazz, JsonSerializer customJsonSerializer) throws JsonProcessingException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0NDIzNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492344234", "bodyText": "why does the continuation token serializer require a custom serializer? Isn't the custom serializer only for serializing user types?", "author": "abhipsaMisra", "createdAt": "2020-09-21T21:02:29Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java", "diffHunk": "@@ -15,12 +18,22 @@\n      * Input: {\"_t\":2,\"_s\":null,\"_rc\":\"[{\\\"token\\\":\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\",\\\"range\\\":{\\\"min\\\":\\\"\\\",\\\"max\\\":\\\"05C1DFFFFFFFFC\\\"}}]\",\"_q\":\"SELECT * FROM digitaltwins where IsOccupied = true\"}\n      * Output: \"{\\\"_t\\\":2,\\\"_s\\\":null,\\\"_rc\\\":\\\"[{\\\\\\\"token\\\\\\\":\\\\\\\"+RID:~WftkAMiSVqReAQAAAAAAAA==#RT:4#TRC:100#ISV:2#IEO:65551#FPC:AgEAAAAMAFEBAMARQP9/n4Eqjw==\\\\\\\",\\\\\\\"range\\\\\\\":{\\\\\\\"min\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"max\\\\\\\":\\\\\\\"05C1DFFFFFFFFC\\\\\\\"}}]\\\",\\\"_q\\\":\\\"SELECT * FROM digitaltwins where IsOccupied = true\\\"}\"\n      */\n-    public static String serializeContinuationToken(String continuationToken) {\n+    public static String serializeContinuationToken(String continuationToken, JsonSerializer serializer) {", "originalCommit": "2bb69842360a1ae3896719409d2b79e4bbaa75f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM2MjUyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492362527", "bodyText": "Good point, we shouldn't use the custom serializer here", "author": "timtay-microsoft", "createdAt": "2020-09-21T21:42:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0NDIzNA=="}], "type": "inlineReview", "revised_code": {"commit": "44dcfc6a505ff40effd2dff72100c4fbf43c16d1", "chunk": "diff --git a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java\nindex 64ddbf622f5..318c704ff42 100644\n--- a/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java\n+++ b/sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/implementation/serializer/SerializationHelpers.java\n\n@@ -30,7 +31,7 @@ public class SerializationHelpers {\n         try {\n             ByteArrayOutputStream sourceStream = new ByteArrayOutputStream();\n             serializer.serialize(sourceStream, continuationToken);\n-            return sourceStream.toString();\n+            return sourceStream.toString(StandardCharsets.UTF_8.name());\n         }\n         catch (Exception e) {\n             throw new IllegalArgumentException(\"Invalid continuation token\", e);\n"}}, {"oid": "210ad9849d304f337f0c7d2080609ac59bf729a3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/210ad9849d304f337f0c7d2080609ac59bf729a3", "message": "to squash", "committedDate": "2020-09-21T21:03:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0NDg4MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492344881", "bodyText": "Srikanta had mentioned during the API review that there was some kind of a flag that we could set at autorest generation to get rid of this validation, did that not work?", "author": "abhipsaMisra", "createdAt": "2020-09-21T21:03:49Z", "path": "sdk/digitaltwins/azure-digitaltwins-core/src/main/java/com/azure/digitaltwins/core/models/EventRoute.java", "diffHunk": "@@ -1,15 +1,20 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n-// Code generated by Microsoft (R) AutoRest Code Generator.\n \n package com.azure.digitaltwins.core.models;\n \n import com.azure.core.annotation.Fluent;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n-/** The EventRoute model. */\n+/**\n+ * The EventRoute model. Event routes are used for defining where published telemetry gets sent to. As an example, an\n+ * event route can point towards an Azure EventHub as a consumer of published telemetry.\n+ */\n+// This class exists so that the public APIs don't directly consume a generated type and so that we can avoid exposing a validate() method", "originalCommit": "2bb69842360a1ae3896719409d2b79e4bbaa75f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM2MjE0NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15431#discussion_r492362144", "bodyText": "Even with the required args being set at constructor time (see autorest.md for this change), we still have the client side validation flag set to true. Because of that, we still get these validate() functions. I didn't want to get rid of the client side validation flag, so the only option I had was to use wrapper classes to cover up these validate() functions", "author": "timtay-microsoft", "createdAt": "2020-09-21T21:41:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0NDg4MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "44dcfc6a505ff40effd2dff72100c4fbf43c16d1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/44dcfc6a505ff40effd2dff72100c4fbf43c16d1", "message": "squash", "committedDate": "2020-09-21T21:24:56Z", "type": "commit"}, {"oid": "9d2aff4e5c09e720a8969368f4a3f97aa46c560a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9d2aff4e5c09e720a8969368f4a3f97aa46c560a", "message": "cr comments", "committedDate": "2020-09-21T21:43:40Z", "type": "commit"}, {"oid": "ac13280df4bf19b1acac3bcf0aab3f3737663cb1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ac13280df4bf19b1acac3bcf0aab3f3737663cb1", "message": "cr comments", "committedDate": "2020-09-21T21:46:18Z", "type": "commit"}, {"oid": "c39da4627cec969b8671af4e124f304a2a7b104b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c39da4627cec969b8671af4e124f304a2a7b104b", "message": "asdf", "committedDate": "2020-09-21T21:47:58Z", "type": "commit"}]}