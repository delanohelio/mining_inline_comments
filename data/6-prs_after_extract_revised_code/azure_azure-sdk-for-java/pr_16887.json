{"pr_number": 16887, "pr_title": "Communication - Purchase Search Follow-up PR", "pr_createdAt": "2020-10-27T18:37:32Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/16887", "timeline": [{"oid": "2c0aa4e6d03837cf30383a2ab9e5af2cf7631cf9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2c0aa4e6d03837cf30383a2ab9e5af2cf7631cf9", "message": "Fixed response types", "committedDate": "2020-10-27T18:52:23Z", "type": "commit"}, {"oid": "2c0aa4e6d03837cf30383a2ab9e5af2cf7631cf9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/2c0aa4e6d03837cf30383a2ab9e5af2cf7631cf9", "message": "Fixed response types", "committedDate": "2020-10-27T18:52:23Z", "type": "forcePushed"}, {"oid": "3fbde25606580ac4df4fe2a1c53562d426b52cfa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3fbde25606580ac4df4fe2a1c53562d426b52cfa", "message": "Fixed EVERYTHING", "committedDate": "2020-10-27T20:00:09Z", "type": "commit"}, {"oid": "3fbde25606580ac4df4fe2a1c53562d426b52cfa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3fbde25606580ac4df4fe2a1c53562d426b52cfa", "message": "Fixed EVERYTHING", "committedDate": "2020-10-27T20:00:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAxNjMyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16887#discussion_r513016323", "bodyText": "Can you make it a const (DEFAULT_POLL_INTERVAL) and reuse in all other methods as well? I guess the only other operation right now is the beginCreateSearch but you will also add the beginReleasePhoneNumber, and you can use the same default for everything", "author": "ankitarorabit", "createdAt": "2020-10-27T20:41:18Z", "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java", "diffHunk": "@@ -847,48 +847,53 @@\n      */\n \n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PollerFlux<Void, Void> beginPurchaseSearch(String searchId, Duration pollInterval) {\n+    public PollerFlux<PhoneNumberSearch, \n+        PhoneNumberSearch> beginPurchaseSearch(String searchId, Duration pollInterval) {\n         Objects.requireNonNull(searchId, \"'searchId' can not be null.\");\n-        Objects.requireNonNull(pollInterval, \"'pollInterval' can not be null.\");\n+        \n+        if (pollInterval == null) {\n+            pollInterval = Duration.ofSeconds(5);", "originalCommit": "3fbde25606580ac4df4fe2a1c53562d426b52cfa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4eddb1cfdeda7cbd19351e576389fa73b3681ff", "chunk": "diff --git a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java\nindex b226abd0c75..211773d00db 100644\n--- a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java\n+++ b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java\n\n@@ -847,53 +847,49 @@ public final class PhoneNumberAsyncClient {\n      */\n \n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PollerFlux<PhoneNumberSearch, \n-        PhoneNumberSearch> beginPurchaseSearch(String searchId, Duration pollInterval) {\n+    public PollerFlux<Void, Void> beginPurchaseSearch(String searchId, Duration pollInterval) {\n         Objects.requireNonNull(searchId, \"'searchId' can not be null.\");\n         \n         if (pollInterval == null) {\n             pollInterval = Duration.ofSeconds(5);\n         }\n \n-        return new PollerFlux<PhoneNumberSearch, PhoneNumberSearch>(pollInterval,\n+        return new PollerFlux<Void, Void>(pollInterval,\n             purchaseSearchActivationOperation(searchId),\n             purchaseSearchPollOperation(searchId),\n             (activationResponse, pollingContext) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),\n             purchaseSearchFetchResultOperation());\n     }\n \n-    private Function<PollingContext<PhoneNumberSearch>, \n-        Mono<PhoneNumberSearch>> purchaseSearchActivationOperation(String searchId) {\n+    private Function<PollingContext<Void>, \n+        Mono<Void>> purchaseSearchActivationOperation(String searchId) {\n         return (pollingContext) -> {\n-            Mono<PhoneNumberSearch> res = purchaseSearch(searchId).flatMap(agh -> {\n-                return getSearchById(searchId);\n-            });\n-            return res;\n+            return purchaseSearch(searchId);\n         };\n     }\n \n-    private Function<PollingContext<PhoneNumberSearch>, Mono<PollResponse<PhoneNumberSearch>>>\n+    private Function<PollingContext<Void>, Mono<PollResponse<Void>>>\n         purchaseSearchPollOperation(String searchId) {\n         return (pollingContext) -> getSearchById(searchId)\n             .flatMap(getSearchResponse -> {\n                 SearchStatus statusResponse = getSearchResponse.getStatus();\n-                if (statusResponse.equals(SearchStatus.EXPIRED)\n-                    || statusResponse.equals(SearchStatus.SUCCESS)) {\n+                if (statusResponse.equals(SearchStatus.SUCCESS)) {\n                     return Mono.just(new PollResponse<>(\n-                    LongRunningOperationStatus.SUCCESSFULLY_COMPLETED, getSearchResponse));\n+                    LongRunningOperationStatus.SUCCESSFULLY_COMPLETED, null));\n                 }\n-                if (statusResponse.equals(SearchStatus.ERROR)) {\n+                if (statusResponse.equals(SearchStatus.ERROR) \n+                    || statusResponse.equals(SearchStatus.EXPIRED)) {\n                     return Mono.just(new PollResponse<>(\n-                    LongRunningOperationStatus.FAILED, getSearchResponse));\n+                    LongRunningOperationStatus.FAILED, null));\n                 }\n-                return Mono.just(new PollResponse<>(LongRunningOperationStatus.IN_PROGRESS, getSearchResponse));\n+                return Mono.just(new PollResponse<>(LongRunningOperationStatus.IN_PROGRESS, null));\n             });\n     }\n \n-    private Function<PollingContext<PhoneNumberSearch>,\n-        Mono<PhoneNumberSearch>> purchaseSearchFetchResultOperation() {\n+    private Function<PollingContext<Void>,\n+        Mono<Void>> purchaseSearchFetchResultOperation() {\n         return pollingContext -> {\n-            return Mono.just(pollingContext.getLatestResponse().getValue());\n+            return Mono.empty();\n         };\n \n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAxODYyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16887#discussion_r513018624", "bodyText": "nit: do you mind moving Mono> to the line above, will look cleaner :)", "author": "ankitarorabit", "createdAt": "2020-10-27T20:45:34Z", "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java", "diffHunk": "@@ -847,48 +847,53 @@\n      */\n \n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PollerFlux<Void, Void> beginPurchaseSearch(String searchId, Duration pollInterval) {\n+    public PollerFlux<PhoneNumberSearch, \n+        PhoneNumberSearch> beginPurchaseSearch(String searchId, Duration pollInterval) {\n         Objects.requireNonNull(searchId, \"'searchId' can not be null.\");\n-        Objects.requireNonNull(pollInterval, \"'pollInterval' can not be null.\");\n+        \n+        if (pollInterval == null) {\n+            pollInterval = Duration.ofSeconds(5);\n+        }\n \n-        return new PollerFlux<Void, Void>(pollInterval,\n+        return new PollerFlux<PhoneNumberSearch, PhoneNumberSearch>(pollInterval,\n             purchaseSearchActivationOperation(searchId),\n             purchaseSearchPollOperation(searchId),\n             (activationResponse, pollingContext) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),\n             purchaseSearchFetchResultOperation());\n     }\n \n-    private Function<PollingContext<Void>, Mono<Void>> purchaseSearchActivationOperation(String searchId) {\n-\n+    private Function<PollingContext<PhoneNumberSearch>, \n+        Mono<PhoneNumberSearch>> purchaseSearchActivationOperation(String searchId) {", "originalCommit": "3fbde25606580ac4df4fe2a1c53562d426b52cfa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b4eddb1cfdeda7cbd19351e576389fa73b3681ff", "chunk": "diff --git a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java\nindex b226abd0c75..211773d00db 100644\n--- a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java\n+++ b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java\n\n@@ -847,53 +847,49 @@ public final class PhoneNumberAsyncClient {\n      */\n \n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PollerFlux<PhoneNumberSearch, \n-        PhoneNumberSearch> beginPurchaseSearch(String searchId, Duration pollInterval) {\n+    public PollerFlux<Void, Void> beginPurchaseSearch(String searchId, Duration pollInterval) {\n         Objects.requireNonNull(searchId, \"'searchId' can not be null.\");\n         \n         if (pollInterval == null) {\n             pollInterval = Duration.ofSeconds(5);\n         }\n \n-        return new PollerFlux<PhoneNumberSearch, PhoneNumberSearch>(pollInterval,\n+        return new PollerFlux<Void, Void>(pollInterval,\n             purchaseSearchActivationOperation(searchId),\n             purchaseSearchPollOperation(searchId),\n             (activationResponse, pollingContext) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),\n             purchaseSearchFetchResultOperation());\n     }\n \n-    private Function<PollingContext<PhoneNumberSearch>, \n-        Mono<PhoneNumberSearch>> purchaseSearchActivationOperation(String searchId) {\n+    private Function<PollingContext<Void>, \n+        Mono<Void>> purchaseSearchActivationOperation(String searchId) {\n         return (pollingContext) -> {\n-            Mono<PhoneNumberSearch> res = purchaseSearch(searchId).flatMap(agh -> {\n-                return getSearchById(searchId);\n-            });\n-            return res;\n+            return purchaseSearch(searchId);\n         };\n     }\n \n-    private Function<PollingContext<PhoneNumberSearch>, Mono<PollResponse<PhoneNumberSearch>>>\n+    private Function<PollingContext<Void>, Mono<PollResponse<Void>>>\n         purchaseSearchPollOperation(String searchId) {\n         return (pollingContext) -> getSearchById(searchId)\n             .flatMap(getSearchResponse -> {\n                 SearchStatus statusResponse = getSearchResponse.getStatus();\n-                if (statusResponse.equals(SearchStatus.EXPIRED)\n-                    || statusResponse.equals(SearchStatus.SUCCESS)) {\n+                if (statusResponse.equals(SearchStatus.SUCCESS)) {\n                     return Mono.just(new PollResponse<>(\n-                    LongRunningOperationStatus.SUCCESSFULLY_COMPLETED, getSearchResponse));\n+                    LongRunningOperationStatus.SUCCESSFULLY_COMPLETED, null));\n                 }\n-                if (statusResponse.equals(SearchStatus.ERROR)) {\n+                if (statusResponse.equals(SearchStatus.ERROR) \n+                    || statusResponse.equals(SearchStatus.EXPIRED)) {\n                     return Mono.just(new PollResponse<>(\n-                    LongRunningOperationStatus.FAILED, getSearchResponse));\n+                    LongRunningOperationStatus.FAILED, null));\n                 }\n-                return Mono.just(new PollResponse<>(LongRunningOperationStatus.IN_PROGRESS, getSearchResponse));\n+                return Mono.just(new PollResponse<>(LongRunningOperationStatus.IN_PROGRESS, null));\n             });\n     }\n \n-    private Function<PollingContext<PhoneNumberSearch>,\n-        Mono<PhoneNumberSearch>> purchaseSearchFetchResultOperation() {\n+    private Function<PollingContext<Void>,\n+        Mono<Void>> purchaseSearchFetchResultOperation() {\n         return pollingContext -> {\n-            return Mono.just(pollingContext.getLatestResponse().getValue());\n+            return Mono.empty();\n         };\n \n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAxOTM4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16887#discussion_r513019386", "bodyText": "Can we use more descriptive parameter names than res, agh?", "author": "ankitarorabit", "createdAt": "2020-10-27T20:46:58Z", "path": "sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java", "diffHunk": "@@ -847,48 +847,53 @@\n      */\n \n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PollerFlux<Void, Void> beginPurchaseSearch(String searchId, Duration pollInterval) {\n+    public PollerFlux<PhoneNumberSearch, \n+        PhoneNumberSearch> beginPurchaseSearch(String searchId, Duration pollInterval) {\n         Objects.requireNonNull(searchId, \"'searchId' can not be null.\");\n-        Objects.requireNonNull(pollInterval, \"'pollInterval' can not be null.\");\n+        \n+        if (pollInterval == null) {\n+            pollInterval = Duration.ofSeconds(5);\n+        }\n \n-        return new PollerFlux<Void, Void>(pollInterval,\n+        return new PollerFlux<PhoneNumberSearch, PhoneNumberSearch>(pollInterval,\n             purchaseSearchActivationOperation(searchId),\n             purchaseSearchPollOperation(searchId),\n             (activationResponse, pollingContext) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),\n             purchaseSearchFetchResultOperation());\n     }\n \n-    private Function<PollingContext<Void>, Mono<Void>> purchaseSearchActivationOperation(String searchId) {\n-\n+    private Function<PollingContext<PhoneNumberSearch>, \n+        Mono<PhoneNumberSearch>> purchaseSearchActivationOperation(String searchId) {\n         return (pollingContext) -> {\n-            Mono<Void> response = purchaseSearch(searchId);\n-            return response;\n+            Mono<PhoneNumberSearch> res = purchaseSearch(searchId).flatMap(agh -> {", "originalCommit": "3fbde25606580ac4df4fe2a1c53562d426b52cfa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAyMzA1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16887#discussion_r513023055", "bodyText": "Also, I find it weird that the argument in flatmap is not used.. is that normal pattern?", "author": "ankitarorabit", "createdAt": "2020-10-27T20:53:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAxOTM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1NTAwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/16887#discussion_r513055009", "bodyText": "I used agh to test, forgot to remove that!", "author": "jbeauregardb", "createdAt": "2020-10-27T21:52:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAxOTM4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b4eddb1cfdeda7cbd19351e576389fa73b3681ff", "chunk": "diff --git a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java\nindex b226abd0c75..211773d00db 100644\n--- a/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java\n+++ b/sdk/communication/azure-communication-administration/src/main/java/com/azure/communication/administration/PhoneNumberAsyncClient.java\n\n@@ -847,53 +847,49 @@ public final class PhoneNumberAsyncClient {\n      */\n \n     @ServiceMethod(returns = ReturnType.COLLECTION)\n-    public PollerFlux<PhoneNumberSearch, \n-        PhoneNumberSearch> beginPurchaseSearch(String searchId, Duration pollInterval) {\n+    public PollerFlux<Void, Void> beginPurchaseSearch(String searchId, Duration pollInterval) {\n         Objects.requireNonNull(searchId, \"'searchId' can not be null.\");\n         \n         if (pollInterval == null) {\n             pollInterval = Duration.ofSeconds(5);\n         }\n \n-        return new PollerFlux<PhoneNumberSearch, PhoneNumberSearch>(pollInterval,\n+        return new PollerFlux<Void, Void>(pollInterval,\n             purchaseSearchActivationOperation(searchId),\n             purchaseSearchPollOperation(searchId),\n             (activationResponse, pollingContext) -> Mono.error(new RuntimeException(\"Cancellation is not supported\")),\n             purchaseSearchFetchResultOperation());\n     }\n \n-    private Function<PollingContext<PhoneNumberSearch>, \n-        Mono<PhoneNumberSearch>> purchaseSearchActivationOperation(String searchId) {\n+    private Function<PollingContext<Void>, \n+        Mono<Void>> purchaseSearchActivationOperation(String searchId) {\n         return (pollingContext) -> {\n-            Mono<PhoneNumberSearch> res = purchaseSearch(searchId).flatMap(agh -> {\n-                return getSearchById(searchId);\n-            });\n-            return res;\n+            return purchaseSearch(searchId);\n         };\n     }\n \n-    private Function<PollingContext<PhoneNumberSearch>, Mono<PollResponse<PhoneNumberSearch>>>\n+    private Function<PollingContext<Void>, Mono<PollResponse<Void>>>\n         purchaseSearchPollOperation(String searchId) {\n         return (pollingContext) -> getSearchById(searchId)\n             .flatMap(getSearchResponse -> {\n                 SearchStatus statusResponse = getSearchResponse.getStatus();\n-                if (statusResponse.equals(SearchStatus.EXPIRED)\n-                    || statusResponse.equals(SearchStatus.SUCCESS)) {\n+                if (statusResponse.equals(SearchStatus.SUCCESS)) {\n                     return Mono.just(new PollResponse<>(\n-                    LongRunningOperationStatus.SUCCESSFULLY_COMPLETED, getSearchResponse));\n+                    LongRunningOperationStatus.SUCCESSFULLY_COMPLETED, null));\n                 }\n-                if (statusResponse.equals(SearchStatus.ERROR)) {\n+                if (statusResponse.equals(SearchStatus.ERROR) \n+                    || statusResponse.equals(SearchStatus.EXPIRED)) {\n                     return Mono.just(new PollResponse<>(\n-                    LongRunningOperationStatus.FAILED, getSearchResponse));\n+                    LongRunningOperationStatus.FAILED, null));\n                 }\n-                return Mono.just(new PollResponse<>(LongRunningOperationStatus.IN_PROGRESS, getSearchResponse));\n+                return Mono.just(new PollResponse<>(LongRunningOperationStatus.IN_PROGRESS, null));\n             });\n     }\n \n-    private Function<PollingContext<PhoneNumberSearch>,\n-        Mono<PhoneNumberSearch>> purchaseSearchFetchResultOperation() {\n+    private Function<PollingContext<Void>,\n+        Mono<Void>> purchaseSearchFetchResultOperation() {\n         return pollingContext -> {\n-            return Mono.just(pollingContext.getLatestResponse().getValue());\n+            return Mono.empty();\n         };\n \n     }\n"}}, {"oid": "b4eddb1cfdeda7cbd19351e576389fa73b3681ff", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b4eddb1cfdeda7cbd19351e576389fa73b3681ff", "message": "Reverted to void", "committedDate": "2020-10-27T22:56:04Z", "type": "commit"}, {"oid": "28e38f9b0f219bded5dd01a8cc659f655dcebc31", "url": "https://github.com/Azure/azure-sdk-for-java/commit/28e38f9b0f219bded5dd01a8cc659f655dcebc31", "message": "Added default poll interval constant", "committedDate": "2020-10-27T23:18:40Z", "type": "forcePushed"}, {"oid": "335c7fd4deabf0709567be2fd87acd788ca70ceb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/335c7fd4deabf0709567be2fd87acd788ca70ceb", "message": "Added default poll interval constant", "committedDate": "2020-10-27T23:37:33Z", "type": "commit"}, {"oid": "335c7fd4deabf0709567be2fd87acd788ca70ceb", "url": "https://github.com/Azure/azure-sdk-for-java/commit/335c7fd4deabf0709567be2fd87acd788ca70ceb", "message": "Added default poll interval constant", "committedDate": "2020-10-27T23:37:33Z", "type": "forcePushed"}, {"oid": "10c94d54b61bd57d9fca90f7e17fe24b6e45eb59", "url": "https://github.com/Azure/azure-sdk-for-java/commit/10c94d54b61bd57d9fca90f7e17fe24b6e45eb59", "message": "Purchase methods are now private", "committedDate": "2020-10-28T15:23:29Z", "type": "commit"}]}