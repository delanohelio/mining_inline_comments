{"pr_number": 15929, "pr_title": "Update ContinuablePagedFluxCore Page Retrieving Logic", "pr_createdAt": "2020-10-05T16:33:10Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/15929", "timeline": [{"oid": "e0d18d38355c49bc05b3fde742721335747019cc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e0d18d38355c49bc05b3fde742721335747019cc", "message": "Use expand instead of concatWith for PagedFlux page iteration", "committedDate": "2020-10-02T22:55:53Z", "type": "commit"}, {"oid": "acf00520047d2cace11f93d30267b17e02d25823", "url": "https://github.com/Azure/azure-sdk-for-java/commit/acf00520047d2cace11f93d30267b17e02d25823", "message": "Changed to expand deep and added an initial capacity hint of 4 to reduce the size of internal buffers", "committedDate": "2020-10-02T23:09:57Z", "type": "commit"}, {"oid": "8b1124a95662a561fc65b82ecc38411f98998aa8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8b1124a95662a561fc65b82ecc38411f98998aa8", "message": "Merge branch 'master' into AzCore_InvestigateMemoryLeaks", "committedDate": "2020-10-03T00:19:39Z", "type": "commit"}, {"oid": "26543a6f7ea580b6325e23ccbf422eb9ce8d1b7a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/26543a6f7ea580b6325e23ccbf422eb9ce8d1b7a", "message": "Change back to expand", "committedDate": "2020-10-03T00:32:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMzQwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15929#discussion_r499733406", "bodyText": "Any reason for setting this to 4 instead of 1? Probably adding a comment to explain why 4 was chosen would help.", "author": "srnagar", "createdAt": "2020-10-05T16:43:21Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedFluxCore.java", "diffHunk": "@@ -156,23 +152,25 @@ public void subscribe(CoreSubscriber<? super T> coreSubscriber) {\n      * @param state the state to be used across multiple Page Retriever Function calls\n      * @param pageRetriever the Page Retriever Function\n      * @param pageSize the preferred page size\n-     * @param <C> the type of Continuation token\n-     * @param <T> The type of items in a {@link ContinuablePage}\n-     * @param <P> The {@link ContinuablePage} holding items of type {@code T}\n      * @return a Flux of {@link ContinuablePage}\n      */\n-    private static <C, T, P extends ContinuablePage<C, T>> Flux<P> concatFluxOfPage(ContinuationState<C> state,\n-        PageRetriever<C, P> pageRetriever, Integer pageSize) {\n+    private Flux<P> retrievePages(ContinuationState<C> state, PageRetriever<C, P> pageRetriever, Integer pageSize) {\n+        return retrievePage(state, pageRetriever, pageSize)\n+            .expand(page -> {\n+                state.setLastContinuationToken(page.getContinuationToken());\n+                return Flux.defer(() -> retrievePage(state, pageRetriever, pageSize));\n+            }, 4);", "originalCommit": "26543a6f7ea580b6325e23ccbf422eb9ce8d1b7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczODY3OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15929#discussion_r499738678", "bodyText": "I should add a comment here. The second argument is a hint to the operator that determines how large of an initial buffer it should instantiate. Given that PageRetriever returns a Flux the implementation could return more than one. Also, appears from looking at Reactor's code the smallest this could be is 8 but sticking with 4 for now in case that changes in the future.", "author": "alzimmermsft", "createdAt": "2020-10-05T16:52:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMzQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "d05ab4cdbc492698a4a8ac04cbbc0bbea23a2044", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedFluxCore.java b/sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedFluxCore.java\nindex 3dde52b694d..bdef0052902 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedFluxCore.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedFluxCore.java\n\n@@ -155,6 +155,12 @@ public abstract class ContinuablePagedFluxCore<C, T, P extends ContinuablePage<C\n      * @return a Flux of {@link ContinuablePage}\n      */\n     private Flux<P> retrievePages(ContinuationState<C> state, PageRetriever<C, P> pageRetriever, Integer pageSize) {\n+        /*\n+         * The second argument for 'expand' is an initial capacity hint to the expand subscriber to indicate what size\n+         * buffer it should instantiate. 4 is used as PageRetriever's 'get' returns a Flux so an implementation may\n+         * return multiple pages, but in the case only one page is retrieved the buffer won't need to be resized or\n+         * request additional pages from the service.\n+         */\n         return retrievePage(state, pageRetriever, pageSize)\n             .expand(page -> {\n                 state.setLastContinuationToken(page.getContinuationToken());\n"}}, {"oid": "d05ab4cdbc492698a4a8ac04cbbc0bbea23a2044", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d05ab4cdbc492698a4a8ac04cbbc0bbea23a2044", "message": "Added documentation explaining why 4 was chosen as expand's second parameter value", "committedDate": "2020-10-05T16:59:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0ODYzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15929#discussion_r499748638", "bodyText": "I think it makes no difference in our case; i.e. storing the continuation-token before we gave the page to the user (i.e. in doOnNext immediately after call to \"retrievePage\") vs storing it after user consumes the page (inside expand).", "author": "anuchandy", "createdAt": "2020-10-05T17:10:20Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/util/paging/ContinuablePagedFluxCore.java", "diffHunk": "@@ -156,23 +152,25 @@ public void subscribe(CoreSubscriber<? super T> coreSubscriber) {\n      * @param state the state to be used across multiple Page Retriever Function calls\n      * @param pageRetriever the Page Retriever Function\n      * @param pageSize the preferred page size\n-     * @param <C> the type of Continuation token\n-     * @param <T> The type of items in a {@link ContinuablePage}\n-     * @param <P> The {@link ContinuablePage} holding items of type {@code T}\n      * @return a Flux of {@link ContinuablePage}\n      */\n-    private static <C, T, P extends ContinuablePage<C, T>> Flux<P> concatFluxOfPage(ContinuationState<C> state,\n-        PageRetriever<C, P> pageRetriever, Integer pageSize) {\n+    private Flux<P> retrievePages(ContinuationState<C> state, PageRetriever<C, P> pageRetriever, Integer pageSize) {\n+        return retrievePage(state, pageRetriever, pageSize)", "originalCommit": "26543a6f7ea580b6325e23ccbf422eb9ce8d1b7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1MjA0OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15929#discussion_r499752049", "bodyText": "From what I remember being told it is better to have explicitly needed operations performed in map or flatMap as doOnX is meant for side affect operations such as logging or metrics. I don't see continuation token updating as a side affect but an explicit need.", "author": "alzimmermsft", "createdAt": "2020-10-05T17:16:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0ODYzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc1NTA4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/15929#discussion_r499755080", "bodyText": "Yep, I think all we need to ensure is the link is tthere before retrieving the next page, which we do. lgtm.", "author": "anuchandy", "createdAt": "2020-10-05T17:21:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0ODYzOA=="}], "type": "inlineReview", "revised_code": null}]}