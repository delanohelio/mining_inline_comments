{"pr_number": 9865, "pr_title": "SB Track2 SyncReceiverClient: add maxWaitTime in receive()", "pr_createdAt": "2020-04-04T17:42:23Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/9865", "timeline": [{"oid": "0fec855e42ac4c183cc88f8d3c9a37b3bf7aae78", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0fec855e42ac4c183cc88f8d3c9a37b3bf7aae78", "message": "SyncClient: add maxWaitTime in receive", "committedDate": "2020-04-04T17:41:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5NjI0Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9865#discussion_r403496243", "bodyText": "This was discussed during review that instead of using tryTimeout, we should be using some default value 1 minute or less.", "author": "hemanttanwar", "createdAt": "2020-04-04T17:43:33Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -28,6 +28,8 @@\n  */\n @ServiceClient(builder = ServiceBusClientBuilder.class)\n public class ServiceBusReceiverClient implements AutoCloseable {\n+    private static final Duration DEFAULT_RECEIVE_WAIT_TIME = Duration.ofMinutes(1);", "originalCommit": "0fec855e42ac4c183cc88f8d3c9a37b3bf7aae78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5NjcyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9865#discussion_r403496724", "bodyText": "The default AmqpRetryOptions has the timeout already set. This isn't necessary. Or if they pass their own default tryTimeout.", "author": "conniey", "createdAt": "2020-04-04T17:48:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5NjI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "dc42fa58b6c225a8c4587ac055f11eee4e797c59", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java\nindex cf7a119d6f3..83322bd9a75 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java\n\n@@ -28,8 +30,6 @@ import java.util.concurrent.atomic.AtomicInteger;\n  */\n @ServiceClient(builder = ServiceBusClientBuilder.class)\n public class ServiceBusReceiverClient implements AutoCloseable {\n-    private static final Duration DEFAULT_RECEIVE_WAIT_TIME = Duration.ofMinutes(1);\n-\n     private final ClientLogger logger = new ClientLogger(ServiceBusReceiverClient.class);\n     private final AtomicInteger idGenerator = new AtomicInteger();\n     private final ServiceBusReceiverAsyncClient asyncClient;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5Njg3NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9865#discussion_r403496875", "bodyText": "To save duplicated logic, this method should call the maximal overload.", "author": "conniey", "createdAt": "2020-04-04T17:49:16Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -250,18 +252,47 @@ public ServiceBusReceivedMessage peekAt(long sequenceNumber) {\n     }\n \n     /**\n-     * Receives an iterable stream of {@link ServiceBusReceivedMessage messages} from the Service Bus entity. The\n+     * Receives an iterable stream of {@link ServiceBusReceivedMessage messages} from the Service Bus entity.\n+     * The receive operation will wait for a default 1 minute for receiving a message before it times out. You can it\n+     * override by using {@link #receive(int, Duration)}.\n      *\n      * @param maxMessages The maximum number of messages to receive.\n      * @return An {@link IterableStream} of at most {@code maxMessages} messages from the Service Bus entity.\n+     *\n+     * @throws IllegalArgumentException if {@code maxMessages} is zero or a negative value.\n      */\n     public IterableStream<ServiceBusReceivedMessage> receive(int maxMessages) {\n         if (maxMessages <= 0) {", "originalCommit": "0fec855e42ac4c183cc88f8d3c9a37b3bf7aae78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc42fa58b6c225a8c4587ac055f11eee4e797c59", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java\nindex cf7a119d6f3..83322bd9a75 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java\n\n@@ -262,15 +262,7 @@ public class ServiceBusReceiverClient implements AutoCloseable {\n      * @throws IllegalArgumentException if {@code maxMessages} is zero or a negative value.\n      */\n     public IterableStream<ServiceBusReceivedMessage> receive(int maxMessages) {\n-        if (maxMessages <= 0) {\n-            throw logger.logExceptionAsError(new IllegalArgumentException(\n-                \"'maxMessages' cannot be less than or equal to 0. maxMessages: \" + maxMessages));\n-        }\n-\n-        final Flux<ServiceBusReceivedMessage> messages = Flux.create(emitter -> queueWork(maxMessages,\n-            DEFAULT_RECEIVE_WAIT_TIME, emitter));\n-\n-        return new IterableStream<>(messages);\n+        return receive(maxMessages, operationTimeout);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5NjkwNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/9865#discussion_r403496906", "bodyText": "Possible NullPointerException if maxWaitTime is null", "author": "conniey", "createdAt": "2020-04-04T17:49:40Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java", "diffHunk": "@@ -250,18 +252,47 @@ public ServiceBusReceivedMessage peekAt(long sequenceNumber) {\n     }\n \n     /**\n-     * Receives an iterable stream of {@link ServiceBusReceivedMessage messages} from the Service Bus entity. The\n+     * Receives an iterable stream of {@link ServiceBusReceivedMessage messages} from the Service Bus entity.\n+     * The receive operation will wait for a default 1 minute for receiving a message before it times out. You can it\n+     * override by using {@link #receive(int, Duration)}.\n      *\n      * @param maxMessages The maximum number of messages to receive.\n      * @return An {@link IterableStream} of at most {@code maxMessages} messages from the Service Bus entity.\n+     *\n+     * @throws IllegalArgumentException if {@code maxMessages} is zero or a negative value.\n      */\n     public IterableStream<ServiceBusReceivedMessage> receive(int maxMessages) {\n         if (maxMessages <= 0) {\n             throw logger.logExceptionAsError(new IllegalArgumentException(\n                 \"'maxMessages' cannot be less than or equal to 0. maxMessages: \" + maxMessages));\n         }\n \n-        final Flux<ServiceBusReceivedMessage> messages = Flux.create(emitter -> queueWork(maxMessages, emitter));\n+        final Flux<ServiceBusReceivedMessage> messages = Flux.create(emitter -> queueWork(maxMessages,\n+            DEFAULT_RECEIVE_WAIT_TIME, emitter));\n+\n+        return new IterableStream<>(messages);\n+    }\n+\n+    /**\n+     * Receives an iterable stream of {@link ServiceBusReceivedMessage messages} from the Service Bus entity.\n+     *\n+     * @param maxMessages The maximum number of messages to receive.\n+     * @param maxWaitTime The time the client waits for receiving a message before it times out.\n+     * @return An {@link IterableStream} of at most {@code maxMessages} messages from the Service Bus entity.\n+     *\n+     * @throws IllegalArgumentException if {@code maxMessages} or {@code maxWaitTime} is zero or a negative value.\n+     */\n+    public IterableStream<ServiceBusReceivedMessage> receive(int maxMessages, Duration maxWaitTime) {\n+        if (maxMessages <= 0) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\n+                \"'maxMessages' cannot be less than or equal to 0. maxMessages: \" + maxMessages));\n+        } else if (maxWaitTime.isNegative() || maxWaitTime.isZero()) {", "originalCommit": "0fec855e42ac4c183cc88f8d3c9a37b3bf7aae78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc42fa58b6c225a8c4587ac055f11eee4e797c59", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java\nindex cf7a119d6f3..83322bd9a75 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/ServiceBusReceiverClient.java\n\n@@ -262,15 +262,7 @@ public class ServiceBusReceiverClient implements AutoCloseable {\n      * @throws IllegalArgumentException if {@code maxMessages} is zero or a negative value.\n      */\n     public IterableStream<ServiceBusReceivedMessage> receive(int maxMessages) {\n-        if (maxMessages <= 0) {\n-            throw logger.logExceptionAsError(new IllegalArgumentException(\n-                \"'maxMessages' cannot be less than or equal to 0. maxMessages: \" + maxMessages));\n-        }\n-\n-        final Flux<ServiceBusReceivedMessage> messages = Flux.create(emitter -> queueWork(maxMessages,\n-            DEFAULT_RECEIVE_WAIT_TIME, emitter));\n-\n-        return new IterableStream<>(messages);\n+        return receive(maxMessages, operationTimeout);\n     }\n \n     /**\n"}}, {"oid": "dc42fa58b6c225a8c4587ac055f11eee4e797c59", "url": "https://github.com/Azure/azure-sdk-for-java/commit/dc42fa58b6c225a8c4587ac055f11eee4e797c59", "message": "added test and review comments", "committedDate": "2020-04-04T22:07:38Z", "type": "commit"}, {"oid": "6191d40293dce550f5b754dbb5aef6935f2c5e22", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6191d40293dce550f5b754dbb5aef6935f2c5e22", "message": "remove unused import", "committedDate": "2020-04-04T22:24:11Z", "type": "commit"}]}