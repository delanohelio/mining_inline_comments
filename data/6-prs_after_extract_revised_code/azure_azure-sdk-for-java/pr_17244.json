{"pr_number": 17244, "pr_title": "Add Additional Search Batching Configurations", "pr_createdAt": "2020-11-06T01:32:20Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/17244", "timeline": [{"oid": "cb853369ec004bc61cf99f5b202f54ad8f31569c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cb853369ec004bc61cf99f5b202f54ad8f31569c", "message": "Expose initial batch action count and max retries configurations, add retry and max retry delay configurations", "committedDate": "2020-11-06T01:29:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwNDYwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r518904603", "bodyText": "I hide BatchSize in Python for this release. Do we want to expose InitialBatchActionCount to users?", "author": "xiangyan99", "createdAt": "2020-11-06T17:40:55Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSender.java", "diffHunk": "@@ -32,12 +32,14 @@\n     }\n \n     /**\n-     * Gets the batch size.\n+     * Gets the number of documents required in a batch for it to be flushed.\n+     * <p>\n+     * This configuration is only taken into account if auto flushing is enabled.\n      *\n-     * @return The batch size.\n+     * @return The number of documents required before a flush is triggered.\n      */\n-    public int getBatchSize() {\n-        return client.getBatchSize();\n+    public int getInitialBatchActionCount() {", "originalCommit": "cb853369ec004bc61cf99f5b202f54ad8f31569c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwNzgzOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r518907838", "bodyText": "I can hide this as well, it doesn't have a major value add right now", "author": "alzimmermsft", "createdAt": "2020-11-06T17:47:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwNDYwMw=="}], "type": "inlineReview", "revised_code": {"commit": "3b1329894f9744653bd3d3d2a81965ee254cc762", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSender.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSender.java\nindex 78fc4cbe4a7..9b945f54844 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSender.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSender.java\n\n@@ -38,8 +38,8 @@ public final class SearchIndexingBufferedSender<T> {\n      *\n      * @return The number of documents required before a flush is triggered.\n      */\n-    public int getInitialBatchActionCount() {\n-        return client.getInitialBatchActionCount();\n+    int getBatchActionCount() {\n+        return client.getBatchActionCount();\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwNTQ5MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r518905491", "bodyText": "Maybe we'd better use property name batchActionCount?\nInitialBatchActionCount is only its initial value, we may change the value when we tune it dynamically.", "author": "xiangyan99", "createdAt": "2020-11-06T17:42:42Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java", "diffHunk": "@@ -21,16 +21,20 @@\n  */\n public final class SearchIndexingBufferedSenderOptions<T> {\n     private static final boolean DEFAULT_AUTO_FLUSH = true;\n-    private static final int DEFAULT_BATCH_SIZE = 500;\n+    private static final int DEFAULT_INITIAL_BATCH_ACTION_COUNT = 512;\n     private static final Duration DEFAULT_FLUSH_WINDOW = Duration.ofSeconds(60);\n-    private static final int DEFAULT_DOCUMENT_TRY_LIMIT = 3;\n+    private static final int DEFAULT_MAX_RETRIES = 3;\n+    private static final Duration DEFAULT_RETRY_DELAY = Duration.ofMillis(800);\n+    private static final Duration DEFAULT_MAX_RETRY_DELAY = Duration.ofMinutes(1);\n \n     private final ClientLogger logger = new ClientLogger(SearchIndexingBufferedSenderOptions.class);\n \n     private Boolean autoFlush;\n     private Duration autoFlushWindow;\n-    private Integer batchSize;\n-    private Integer documentTryLimit;\n+    private Integer initialBatchActionCount;", "originalCommit": "cb853369ec004bc61cf99f5b202f54ad8f31569c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwNzk5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r518907996", "bodyText": "Can change the property name as it doesn't really matter", "author": "alzimmermsft", "createdAt": "2020-11-06T17:47:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwNTQ5MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "1b260868dc80afad452e52ca423e88cd0a1ffe32", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1b260868dc80afad452e52ca423e88cd0a1ffe32", "message": "Merge branch 'master' into AzSearch_AddAdditionalBatchOptions", "committedDate": "2020-11-06T17:47:53Z", "type": "commit"}, {"oid": "3b1329894f9744653bd3d3d2a81965ee254cc762", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3b1329894f9744653bd3d3d2a81965ee254cc762", "message": "Hide getInitialBatchActionCount from public API, renamed internal properties, and updated correlation logic of document operation response to request document", "committedDate": "2020-11-06T18:38:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1MTE1OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r518951158", "bodyText": "Do we need to hide it here as well?", "author": "xiangyan99", "createdAt": "2020-11-06T19:11:27Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java", "diffHunk": "@@ -123,38 +127,96 @@ public Duration getAutoFlushWindow() {\n      *\n      * @return The number of documents required before a flush is triggered.\n      */\n-    int getBatchSize() {\n-        return (batchSize == null) ? DEFAULT_BATCH_SIZE : batchSize;\n+    public int getInitialBatchActionCount() {", "originalCommit": "3b1329894f9744653bd3d3d2a81965ee254cc762", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1NDc3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r518954771", "bodyText": "This is the options class passed into the buffered sender, it could be made package private but I was copying @tg-msft's design where all properties had public get and set.", "author": "alzimmermsft", "createdAt": "2020-11-06T19:19:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1MTE1OA=="}], "type": "inlineReview", "revised_code": {"commit": "b221bb48f4629d1091b5b977c395daa67b144ccc", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java\nindex 5a6626e813b..20bbeb1afad 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java\n\n@@ -189,7 +189,7 @@ public final class SearchIndexingBufferedSenderOptions<T> {\n     }\n \n     /**\n-     * Sets the maximum duration that requests will be delay when the service is throttling.\n+     * Sets the maximum duration that requests will be delayed when the service is throttling.\n      * <p>\n      * If {@code maxRetryDelay} is less than {@link #getRetryDelay()} then {@link #getRetryDelay()} will be used as the\n      * maximum delay.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0MDIxMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r519040211", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param maxRetries The number of times a document will attempt indexing before it is considered failed.\n          \n          \n            \n                 * @param maxRetries The number of times a document will retry indexing before it is considered failed.", "author": "mssfang", "createdAt": "2020-11-06T22:39:29Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java", "diffHunk": "@@ -123,38 +127,96 @@ public Duration getAutoFlushWindow() {\n      *\n      * @return The number of documents required before a flush is triggered.\n      */\n-    int getBatchSize() {\n-        return (batchSize == null) ? DEFAULT_BATCH_SIZE : batchSize;\n+    public int getInitialBatchActionCount() {\n+        return (initialBatchActionCount == null) ? DEFAULT_INITIAL_BATCH_ACTION_COUNT : initialBatchActionCount;\n     }\n \n     /**\n-     * The number of times a document will attempt indexing before it is considered failed.\n+     * Sets the number of times a document will retry indexing before it is considered failed.\n      * <p>\n      * Documents are only retried on retryable status codes.\n      * <p>\n      * Default value is {@code 3}.\n      *\n-     * @param documentTryLimit The number of times a document will attempt indexing before it is considered failed.\n+     * @param maxRetries The number of times a document will attempt indexing before it is considered failed.", "originalCommit": "3b1329894f9744653bd3d3d2a81965ee254cc762", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b221bb48f4629d1091b5b977c395daa67b144ccc", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java\nindex 5a6626e813b..20bbeb1afad 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java\n\n@@ -189,7 +189,7 @@ public final class SearchIndexingBufferedSenderOptions<T> {\n     }\n \n     /**\n-     * Sets the maximum duration that requests will be delay when the service is throttling.\n+     * Sets the maximum duration that requests will be delayed when the service is throttling.\n      * <p>\n      * If {@code maxRetryDelay} is less than {@link #getRetryDelay()} then {@link #getRetryDelay()} will be used as the\n      * maximum delay.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0MTI0NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r519041245", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Gets the initial duration that requests will be delay when the service is throttling.\n          \n          \n            \n                 * Gets the initial duration that requests will be delayed when the service is throttling.", "author": "mssfang", "createdAt": "2020-11-06T22:42:19Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java", "diffHunk": "@@ -123,38 +127,96 @@ public Duration getAutoFlushWindow() {\n      *\n      * @return The number of documents required before a flush is triggered.\n      */\n-    int getBatchSize() {\n-        return (batchSize == null) ? DEFAULT_BATCH_SIZE : batchSize;\n+    public int getInitialBatchActionCount() {\n+        return (initialBatchActionCount == null) ? DEFAULT_INITIAL_BATCH_ACTION_COUNT : initialBatchActionCount;\n     }\n \n     /**\n-     * The number of times a document will attempt indexing before it is considered failed.\n+     * Sets the number of times a document will retry indexing before it is considered failed.\n      * <p>\n      * Documents are only retried on retryable status codes.\n      * <p>\n      * Default value is {@code 3}.\n      *\n-     * @param documentTryLimit The number of times a document will attempt indexing before it is considered failed.\n+     * @param maxRetries The number of times a document will attempt indexing before it is considered failed.\n      * @return The updated SearchIndexingBufferedSenderOptions object.\n      * @throws IllegalArgumentException If {@code documentTryLimit} is less than one.\n      */\n-    SearchIndexingBufferedSenderOptions<T> setDocumentTryLimit(Integer documentTryLimit) {\n-        if (documentTryLimit != null && documentTryLimit < 1) {\n+    public SearchIndexingBufferedSenderOptions<T> setMaxRetries(Integer maxRetries) {\n+        if (maxRetries != null && maxRetries < 1) {\n             throw logger.logExceptionAsError(\n-                new IllegalArgumentException(\"'documentTryLimit' cannot be less than one.\"));\n+                new IllegalArgumentException(\"'maxRetries' cannot be less than one.\"));\n         }\n \n-        this.documentTryLimit = documentTryLimit;\n+        this.maxRetries = maxRetries;\n         return this;\n     }\n \n     /**\n-     * Gets the number of times a document will attempt indexing before it is considered failed.\n+     * Gets the number of times a document will retry indexing before it is considered failed.\n      *\n      * @return The number of times a document will attempt indexing.\n      */\n-    int getDocumentTryLimit() {\n-        return (documentTryLimit == null) ? DEFAULT_DOCUMENT_TRY_LIMIT : documentTryLimit;\n+    public int getMaxRetries() {\n+        return (maxRetries == null) ? DEFAULT_MAX_RETRIES : maxRetries;\n+    }\n+\n+    /**\n+     * Sets the initial duration that requests will be delayed when the service is throttling.\n+     * <p>\n+     * Default value is {@code Duration.ofMillis(800)}.\n+     *\n+     * @param retryDelay The initial duration requests will delay when the service is throttling.\n+     * @return The updated SearchIndexingBufferedSenderOptions object.\n+     * @throws IllegalArgumentException If {@code retryDelay.isNegative()} or {@code retryDelay.isZero()} is true.\n+     */\n+    public SearchIndexingBufferedSenderOptions<T> setRetryDelay(Duration retryDelay) {\n+        if (retryDelay != null && (retryDelay.isNegative() || retryDelay.isZero())) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"'retryDelay' cannot be negative or zero.\"));\n+        }\n+\n+        this.retryDelay = retryDelay;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the initial duration that requests will be delay when the service is throttling.", "originalCommit": "3b1329894f9744653bd3d3d2a81965ee254cc762", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b221bb48f4629d1091b5b977c395daa67b144ccc", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java\nindex 5a6626e813b..20bbeb1afad 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java\n\n@@ -189,7 +189,7 @@ public final class SearchIndexingBufferedSenderOptions<T> {\n     }\n \n     /**\n-     * Sets the maximum duration that requests will be delay when the service is throttling.\n+     * Sets the maximum duration that requests will be delayed when the service is throttling.\n      * <p>\n      * If {@code maxRetryDelay} is less than {@link #getRetryDelay()} then {@link #getRetryDelay()} will be used as the\n      * maximum delay.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0MTQxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r519041419", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Sets the maximum duration that requests will be delay when the service is throttling.\n          \n          \n            \n                 * Sets the maximum duration that requests will be delayed when the service is throttling.", "author": "mssfang", "createdAt": "2020-11-06T22:42:46Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java", "diffHunk": "@@ -123,38 +127,96 @@ public Duration getAutoFlushWindow() {\n      *\n      * @return The number of documents required before a flush is triggered.\n      */\n-    int getBatchSize() {\n-        return (batchSize == null) ? DEFAULT_BATCH_SIZE : batchSize;\n+    public int getInitialBatchActionCount() {\n+        return (initialBatchActionCount == null) ? DEFAULT_INITIAL_BATCH_ACTION_COUNT : initialBatchActionCount;\n     }\n \n     /**\n-     * The number of times a document will attempt indexing before it is considered failed.\n+     * Sets the number of times a document will retry indexing before it is considered failed.\n      * <p>\n      * Documents are only retried on retryable status codes.\n      * <p>\n      * Default value is {@code 3}.\n      *\n-     * @param documentTryLimit The number of times a document will attempt indexing before it is considered failed.\n+     * @param maxRetries The number of times a document will attempt indexing before it is considered failed.\n      * @return The updated SearchIndexingBufferedSenderOptions object.\n      * @throws IllegalArgumentException If {@code documentTryLimit} is less than one.\n      */\n-    SearchIndexingBufferedSenderOptions<T> setDocumentTryLimit(Integer documentTryLimit) {\n-        if (documentTryLimit != null && documentTryLimit < 1) {\n+    public SearchIndexingBufferedSenderOptions<T> setMaxRetries(Integer maxRetries) {\n+        if (maxRetries != null && maxRetries < 1) {\n             throw logger.logExceptionAsError(\n-                new IllegalArgumentException(\"'documentTryLimit' cannot be less than one.\"));\n+                new IllegalArgumentException(\"'maxRetries' cannot be less than one.\"));\n         }\n \n-        this.documentTryLimit = documentTryLimit;\n+        this.maxRetries = maxRetries;\n         return this;\n     }\n \n     /**\n-     * Gets the number of times a document will attempt indexing before it is considered failed.\n+     * Gets the number of times a document will retry indexing before it is considered failed.\n      *\n      * @return The number of times a document will attempt indexing.\n      */\n-    int getDocumentTryLimit() {\n-        return (documentTryLimit == null) ? DEFAULT_DOCUMENT_TRY_LIMIT : documentTryLimit;\n+    public int getMaxRetries() {\n+        return (maxRetries == null) ? DEFAULT_MAX_RETRIES : maxRetries;\n+    }\n+\n+    /**\n+     * Sets the initial duration that requests will be delayed when the service is throttling.\n+     * <p>\n+     * Default value is {@code Duration.ofMillis(800)}.\n+     *\n+     * @param retryDelay The initial duration requests will delay when the service is throttling.\n+     * @return The updated SearchIndexingBufferedSenderOptions object.\n+     * @throws IllegalArgumentException If {@code retryDelay.isNegative()} or {@code retryDelay.isZero()} is true.\n+     */\n+    public SearchIndexingBufferedSenderOptions<T> setRetryDelay(Duration retryDelay) {\n+        if (retryDelay != null && (retryDelay.isNegative() || retryDelay.isZero())) {\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\"'retryDelay' cannot be negative or zero.\"));\n+        }\n+\n+        this.retryDelay = retryDelay;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the initial duration that requests will be delay when the service is throttling.\n+     *\n+     * @return The initial duration requests will delay when the service is throttling.\n+     */\n+    public Duration getRetryDelay() {\n+        return (retryDelay == null) ? DEFAULT_RETRY_DELAY : retryDelay;\n+    }\n+\n+    /**\n+     * Sets the maximum duration that requests will be delay when the service is throttling.", "originalCommit": "3b1329894f9744653bd3d3d2a81965ee254cc762", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b221bb48f4629d1091b5b977c395daa67b144ccc", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java\nindex 5a6626e813b..20bbeb1afad 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java\n\n@@ -189,7 +189,7 @@ public final class SearchIndexingBufferedSenderOptions<T> {\n     }\n \n     /**\n-     * Sets the maximum duration that requests will be delay when the service is throttling.\n+     * Sets the maximum duration that requests will be delayed when the service is throttling.\n      * <p>\n      * If {@code maxRetryDelay} is less than {@link #getRetryDelay()} then {@link #getRetryDelay()} will be used as the\n      * maximum delay.\n"}}, {"oid": "b221bb48f4629d1091b5b977c395daa67b144ccc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b221bb48f4629d1091b5b977c395daa67b144ccc", "message": "Update sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java\n\nCo-authored-by: Shawn Fang <45607042+mssfang@users.noreply.github.com>", "committedDate": "2020-11-06T22:44:43Z", "type": "commit"}, {"oid": "a23fbf8a6c56872152eacb25ece685c04af35bd2", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a23fbf8a6c56872152eacb25ece685c04af35bd2", "message": "Update sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java\n\nCo-authored-by: Shawn Fang <45607042+mssfang@users.noreply.github.com>", "committedDate": "2020-11-06T22:44:54Z", "type": "commit"}, {"oid": "83279d98fffa0ff0d803f9c20d95b6c794717135", "url": "https://github.com/Azure/azure-sdk-for-java/commit/83279d98fffa0ff0d803f9c20d95b6c794717135", "message": "Update sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingBufferedSenderOptions.java\n\nCo-authored-by: Shawn Fang <45607042+mssfang@users.noreply.github.com>", "committedDate": "2020-11-06T22:45:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0NDI2MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r519044261", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (exception.getResponse().getStatusCode() == HttpURLConnection.HTTP_ENTITY_TOO_LARGE) {\n          \n          \n            \n                            if (statusCode == HttpURLConnection.HTTP_ENTITY_TOO_LARGE) {", "author": "mssfang", "createdAt": "2020-11-06T22:51:41Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingPublisher.java", "diffHunk": "@@ -159,20 +176,23 @@ int getBatchSize() {\n         List<com.azure.search.documents.implementation.models.IndexAction> actions, int actionsOffset,\n         Context context) {\n         return client.indexDocumentsWithResponse(actions, true, context)\n+            .delaySubscription(currentRetryDelay)\n             .flatMapMany(response -> Flux.just(\n-                new IndexBatchResponse(response.getValue().getResults(), actionsOffset, actions.size(), false)))\n+                new IndexBatchResponse(response.getStatusCode(), response.getValue().getResults(), actionsOffset,\n+                    actions.size(), false)))\n             .onErrorResume(IndexBatchException.class, exception -> Flux\n-                .just(new IndexBatchResponse(exception.getIndexingResults(), actionsOffset, actions.size(), true)))\n+                .just(new IndexBatchResponse(207, exception.getIndexingResults(), actionsOffset, actions.size(), true)))\n             .onErrorResume(HttpResponseException.class, exception -> {\n                 /*\n                  * If we received an error response where the payload was too large split it into two smaller payloads\n                  * and attempt to index again. If the number of index actions was one raise the error as we cannot split\n                  * that any further.\n                  */\n+                int statusCode = exception.getResponse().getStatusCode();\n                 if (exception.getResponse().getStatusCode() == HttpURLConnection.HTTP_ENTITY_TOO_LARGE) {", "originalCommit": "3b1329894f9744653bd3d3d2a81965ee254cc762", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4da41f93e11c04ae9049d7e68fde4c263fcfef38", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingPublisher.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingPublisher.java\nindex 5a811157d2d..c6024f3d5da 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingPublisher.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingPublisher.java\n\n@@ -189,7 +189,7 @@ final class SearchIndexingPublisher<T> {\n                  * that any further.\n                  */\n                 int statusCode = exception.getResponse().getStatusCode();\n-                if (exception.getResponse().getStatusCode() == HttpURLConnection.HTTP_ENTITY_TOO_LARGE) {\n+                if (statusCode == HttpURLConnection.HTTP_ENTITY_TOO_LARGE) {\n                     int actionCount = actions.size();\n                     if (actionCount == 1) {\n                         return Flux.just(new IndexBatchResponse(statusCode, null, actionsOffset, actionCount, true));\n"}}, {"oid": "4da41f93e11c04ae9049d7e68fde4c263fcfef38", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4da41f93e11c04ae9049d7e68fde4c263fcfef38", "message": "Update sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingPublisher.java\n\nCo-authored-by: Shawn Fang <45607042+mssfang@users.noreply.github.com>", "committedDate": "2020-11-06T22:56:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0ODQyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r519048426", "bodyText": "does the order of action matters?", "author": "mssfang", "createdAt": "2020-11-06T23:06:17Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchIndexingPublisher.java", "diffHunk": "@@ -182,48 +202,70 @@ int getBatchSize() {\n                     );\n                 }\n \n-                return Flux.just(new IndexBatchResponse(null, actionsOffset, actions.size(), true));\n+                return Flux.just(new IndexBatchResponse(statusCode, null, actionsOffset, actions.size(), true));\n             });\n     }\n \n     private void handleResponse(List<TryTrackingIndexAction<T>> actions, IndexBatchResponse batchResponse) {\n         /*\n          * Batch has been split until it had one document in it and it returned a 413 response.\n          */\n-        if (batchResponse.getResults() == null && batchResponse.getCount() == 1) {\n+        if (batchResponse.getStatusCode() == HttpURLConnection.HTTP_ENTITY_TOO_LARGE && batchResponse.getCount() == 1) {\n             IndexAction<T> action = actions.get(batchResponse.getOffset()).getAction();\n             onActionErrorBiConsumer.accept(action,\n                 new RuntimeException(\"Document is too large to be indexed and won't be tried again.\"));\n             return;\n         }\n \n+        List<TryTrackingIndexAction<T>> actionsToRetry = new ArrayList<>();\n+        boolean has503 = batchResponse.getStatusCode() == HttpURLConnection.HTTP_UNAVAILABLE;\n         if (batchResponse.getResults() == null) {\n-            return;\n-        }\n+            /*\n+             * Null results indicates that the entire request failed. Retry all documents.\n+             */\n+            int offset = batchResponse.getOffset();\n+            actionsToRetry.addAll(actions.subList(offset, offset + batchResponse.getCount()));", "originalCommit": "3b1329894f9744653bd3d3d2a81965ee254cc762", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0OTQyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/17244#discussion_r519049429", "bodyText": "Ordering of the actions may matter, so the order they were submitted is retained here.", "author": "alzimmermsft", "createdAt": "2020-11-06T23:10:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0ODQyNg=="}], "type": "inlineReview", "revised_code": null}]}