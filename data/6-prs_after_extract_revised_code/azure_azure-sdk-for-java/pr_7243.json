{"pr_number": 7243, "pr_title": "Don't retry on network failure on writes", "pr_createdAt": "2020-01-07T20:56:52Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/7243", "timeline": [{"oid": "5be6b4066ad42c1618b7e10f3e387fbeea8823f1", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5be6b4066ad42c1618b7e10f3e387fbeea8823f1", "message": "Don't retry on network failure on writes", "committedDate": "2020-01-07T20:55:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI3NjkyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7243#discussion_r364276926", "bodyText": "HttpConstants.StatusCodes.FORBIDDEN, HttpConstants.SubStatusCodes.FORBIDDEN_WRITEFORBIDDEN will qualify as isWebExceptionRetriable ? If not then how does that case handled ?", "author": "simplynaveen20", "createdAt": "2020-01-08T15:04:53Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java", "diffHunk": "@@ -173,8 +173,17 @@ private ShouldRetryResult shouldRetryOnSessionNotAvailable() {\n             retryDelay = Duration.ofMillis(ClientRetryPolicy.RetryIntervalInMS);\n         }\n         this.retryContext = new RetryContext(this.failoverRetryCount, false);\n-        return this.globalEndpointManager.refreshLocationAsync(null, forceRefresh)\n-                .then(Mono.just(ShouldRetryResult.retryAfter(retryDelay)));\n+        Mono<Void> completable = this.globalEndpointManager.refreshLocationAsync(null, forceRefresh);\n+        if (isReadRequest || WebExceptionUtility.isWebExceptionRetriable(e)) {", "originalCommit": "5be6b4066ad42c1618b7e10f3e387fbeea8823f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM4MzUwMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7243#discussion_r364383503", "bodyText": "I don't think it will be qualified as WebExceptionRetriable\nAnd in that case, we force refresh but I don't think we will retry.\nWorth discussing over a meeting.", "author": "kushagraThapar", "createdAt": "2020-01-08T18:42:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI3NjkyNg=="}], "type": "inlineReview", "revised_code": {"commit": "bdcc8e771003200e1a4ca55e2e638178391f9dca", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java\nindex 48e30bdfb0b..32e6d1561a2 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java\n\n@@ -172,18 +167,32 @@ public class ClientRetryPolicy implements IDocumentClientRetryPolicy {\n         } else {\n             retryDelay = Duration.ofMillis(ClientRetryPolicy.RetryIntervalInMS);\n         }\n-        this.retryContext = new RetryContext(this.failoverRetryCount, false);\n-        Mono<Void> completable = this.globalEndpointManager.refreshLocationAsync(null, forceRefresh);\n-        if (isReadRequest || WebExceptionUtility.isWebExceptionRetriable(e)) {\n-            // refresh cache and\n-            // if it is a read request or if it is a write but we are sure the write\n-            // hasn't reached the service retry\n-            return completable.then(Mono.just(ShouldRetryResult.retryAfter(retryDelay)));\n+        return refreshLocationCompletable.then(Mono.just(ShouldRetryResult.retryAfter(retryDelay)));\n+    }\n+\n+    private Mono<ShouldRetryResult> shouldNotRetryOnEndpointFailureAsync(boolean isReadRequest , boolean forceRefresh) {\n+        if (!this.enableEndpointDiscovery || this.failoverRetryCount > MaxRetryCount) {\n+            logger.warn(\"ShouldRetryOnEndpointFailureAsync() Not retrying. Retry count = {}\", this.failoverRetryCount);\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+        Mono<Void> refreshLocationCompletable = this.refreshLocation(isReadRequest, forceRefresh);\n+        return refreshLocationCompletable.then(Mono.just(ShouldRetryResult.noRetry()));\n+    }\n+\n+    private Mono<Void> refreshLocation(boolean isReadRequest, boolean forceRefresh) {\n+        this.failoverRetryCount++;\n+\n+        // Mark the current read endpoint as unavailable\n+        if (this.isReadRequest) {\n+            logger.warn(\"marking the endpoint {} as unavailable for read\",this.locationEndpoint);\n+            this.globalEndpointManager.markEndpointUnavailableForRead(this.locationEndpoint);\n         } else {\n-            // refresh cache and\n-            // no retry for writes which we are not sure if have reached to the service or not\n-            return completable.then(Mono.just(ShouldRetryResult.noRetry()));\n+            logger.warn(\"marking the endpoint {} as unavailable for write\",this.locationEndpoint);\n+            this.globalEndpointManager.markEndpointUnavailableForWrite(this.locationEndpoint);\n         }\n+\n+        this.retryContext = new RetryContext(this.failoverRetryCount, false);\n+        return this.globalEndpointManager.refreshLocationAsync(null, forceRefresh);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI3ODk5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7243#discussion_r364278997", "bodyText": "Isn't heading of PR is contradicting , we are retrying on write in case of network failure ? Until I am missing something", "author": "simplynaveen20", "createdAt": "2020-01-08T15:08:56Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java", "diffHunk": "@@ -173,8 +173,17 @@ private ShouldRetryResult shouldRetryOnSessionNotAvailable() {\n             retryDelay = Duration.ofMillis(ClientRetryPolicy.RetryIntervalInMS);\n         }\n         this.retryContext = new RetryContext(this.failoverRetryCount, false);\n-        return this.globalEndpointManager.refreshLocationAsync(null, forceRefresh)\n-                .then(Mono.just(ShouldRetryResult.retryAfter(retryDelay)));\n+        Mono<Void> completable = this.globalEndpointManager.refreshLocationAsync(null, forceRefresh);\n+        if (isReadRequest || WebExceptionUtility.isWebExceptionRetriable(e)) {\n+            // refresh cache and\n+            // if it is a read request or if it is a write but we are sure the write\n+            // hasn't reached the service retry\n+            return completable.then(Mono.just(ShouldRetryResult.retryAfter(retryDelay)));\n+        } else {\n+            // refresh cache and\n+            // no retry for writes which we are not sure if have reached to the service or not\n+            return completable.then(Mono.just(ShouldRetryResult.noRetry()));", "originalCommit": "5be6b4066ad42c1618b7e10f3e387fbeea8823f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM3NDM2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7243#discussion_r364374364", "bodyText": "We are only retrying if it is a readRequest, or WebExceptionRetriable.\nIn the else case, we are not retrying.. we are calling noRetry()\nWebExceptionRetriable only returns true, when you are trying to connect but you get connection exception.\nThat means, we are sure we haven't reached the server.", "author": "kushagraThapar", "createdAt": "2020-01-08T18:21:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI3ODk5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU1MzkzNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7243#discussion_r364553936", "bodyText": "Ok so it is retry on write in case of connection exception , thinking other way round was confusing.", "author": "simplynaveen20", "createdAt": "2020-01-09T04:21:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI3ODk5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "bdcc8e771003200e1a4ca55e2e638178391f9dca", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java\nindex 48e30bdfb0b..32e6d1561a2 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/ClientRetryPolicy.java\n\n@@ -172,18 +167,32 @@ public class ClientRetryPolicy implements IDocumentClientRetryPolicy {\n         } else {\n             retryDelay = Duration.ofMillis(ClientRetryPolicy.RetryIntervalInMS);\n         }\n-        this.retryContext = new RetryContext(this.failoverRetryCount, false);\n-        Mono<Void> completable = this.globalEndpointManager.refreshLocationAsync(null, forceRefresh);\n-        if (isReadRequest || WebExceptionUtility.isWebExceptionRetriable(e)) {\n-            // refresh cache and\n-            // if it is a read request or if it is a write but we are sure the write\n-            // hasn't reached the service retry\n-            return completable.then(Mono.just(ShouldRetryResult.retryAfter(retryDelay)));\n+        return refreshLocationCompletable.then(Mono.just(ShouldRetryResult.retryAfter(retryDelay)));\n+    }\n+\n+    private Mono<ShouldRetryResult> shouldNotRetryOnEndpointFailureAsync(boolean isReadRequest , boolean forceRefresh) {\n+        if (!this.enableEndpointDiscovery || this.failoverRetryCount > MaxRetryCount) {\n+            logger.warn(\"ShouldRetryOnEndpointFailureAsync() Not retrying. Retry count = {}\", this.failoverRetryCount);\n+            return Mono.just(ShouldRetryResult.noRetry());\n+        }\n+        Mono<Void> refreshLocationCompletable = this.refreshLocation(isReadRequest, forceRefresh);\n+        return refreshLocationCompletable.then(Mono.just(ShouldRetryResult.noRetry()));\n+    }\n+\n+    private Mono<Void> refreshLocation(boolean isReadRequest, boolean forceRefresh) {\n+        this.failoverRetryCount++;\n+\n+        // Mark the current read endpoint as unavailable\n+        if (this.isReadRequest) {\n+            logger.warn(\"marking the endpoint {} as unavailable for read\",this.locationEndpoint);\n+            this.globalEndpointManager.markEndpointUnavailableForRead(this.locationEndpoint);\n         } else {\n-            // refresh cache and\n-            // no retry for writes which we are not sure if have reached to the service or not\n-            return completable.then(Mono.just(ShouldRetryResult.noRetry()));\n+            logger.warn(\"marking the endpoint {} as unavailable for write\",this.locationEndpoint);\n+            this.globalEndpointManager.markEndpointUnavailableForWrite(this.locationEndpoint);\n         }\n+\n+        this.retryContext = new RetryContext(this.failoverRetryCount, false);\n+        return this.globalEndpointManager.refreshLocationAsync(null, forceRefresh);\n     }\n \n     @Override\n"}}, {"oid": "bdcc8e771003200e1a4ca55e2e638178391f9dca", "url": "https://github.com/Azure/azure-sdk-for-java/commit/bdcc8e771003200e1a4ca55e2e638178391f9dca", "message": "Fixing the logic to retry on forbidden status code", "committedDate": "2020-01-13T22:46:15Z", "type": "commit"}, {"oid": "69552e653dd1c68872f632fd15845aa11ad0793f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/69552e653dd1c68872f632fd15845aa11ad0793f", "message": "Replaced this.isReadRequest with local isReadRequest", "committedDate": "2020-01-13T23:11:07Z", "type": "commit"}]}