{"pr_number": 14705, "pr_title": "Update LockRenewalOperation API", "pr_createdAt": "2020-09-02T00:03:34Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/14705", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwODg0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/14705#discussion_r483208846", "bodyText": "Is this duration to cache should be configuration by user ?", "author": "hemanttanwar", "createdAt": "2020-09-03T19:33:33Z", "path": "sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/LockRenewalOperation.java", "diffHunk": "@@ -53,35 +53,63 @@\n      * Creates a new lock renewal operation.\n      *\n      * @param lockToken Lock or session id to renew.\n-     * @param lockedUntil The initial period the message or session is locked until.\n+     * @param tokenLockedUntil The initial period the message or session is locked until.\n      * @param maxLockRenewalDuration The maximum duration this lock should be renewed.\n      * @param isSession Whether the lock represents a session lock or message lock.\n      * @param renewalOperation The renewal operation to call.\n      */\n     LockRenewalOperation(String lockToken, Duration maxLockRenewalDuration, boolean isSession,\n-        Function<String, Mono<OffsetDateTime>> renewalOperation, OffsetDateTime lockedUntil) {\n+        Function<String, Mono<OffsetDateTime>> renewalOperation, OffsetDateTime tokenLockedUntil) {\n         this.lockToken = Objects.requireNonNull(lockToken, \"'lockToken' cannot be null.\");\n         this.renewalOperation = Objects.requireNonNull(renewalOperation, \"'renewalOperation' cannot be null.\");\n         this.isSession = isSession;\n \n-        Objects.requireNonNull(lockedUntil, \"'lockedUntil cannot be null.'\");\n+        Objects.requireNonNull(tokenLockedUntil, \"'lockedUntil cannot be null.'\");\n         Objects.requireNonNull(maxLockRenewalDuration, \"'maxLockRenewalDuration' cannot be null.\");\n \n         if (maxLockRenewalDuration.isNegative()) {\n-            throw logger.logThrowableAsError(new IllegalArgumentException(\n+            throw logger.logExceptionAsError(new IllegalArgumentException(\n                 \"'maxLockRenewalDuration' cannot be negative.\"));\n         }\n \n-        this.lockedUntil.set(lockedUntil);\n-        this.subscription = getRenewLockOperation(lockedUntil, maxLockRenewalDuration);\n+        this.lockedUntil.set(tokenLockedUntil);\n+\n+        final Flux<OffsetDateTime> renewLockOperation = getRenewLockOperation(tokenLockedUntil,\n+            maxLockRenewalDuration)\n+            .takeUntilOther(cancellationProcessor)\n+            .cache(Duration.ofMinutes(2));", "originalCommit": "59dd155bbc2839c91f92073d5c6f93488540b3e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8e2de6d3cea79b4ef5ebaba7280d26a2e7324134", "chunk": "diff --git a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/LockRenewalOperation.java b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/LockRenewalOperation.java\nindex 3895b3fca3c..b644df9fb30 100644\n--- a/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/LockRenewalOperation.java\n+++ b/sdk/servicebus/azure-messaging-servicebus/src/main/java/com/azure/messaging/servicebus/LockRenewalOperation.java\n\n@@ -53,55 +53,27 @@ class LockRenewalOperation implements AutoCloseable {\n      * Creates a new lock renewal operation.\n      *\n      * @param lockToken Lock or session id to renew.\n-     * @param tokenLockedUntil The initial period the message or session is locked until.\n+     * @param lockedUntil The initial period the message or session is locked until.\n      * @param maxLockRenewalDuration The maximum duration this lock should be renewed.\n      * @param isSession Whether the lock represents a session lock or message lock.\n      * @param renewalOperation The renewal operation to call.\n      */\n     LockRenewalOperation(String lockToken, Duration maxLockRenewalDuration, boolean isSession,\n-        Function<String, Mono<OffsetDateTime>> renewalOperation, OffsetDateTime tokenLockedUntil) {\n+        Function<String, Mono<OffsetDateTime>> renewalOperation, OffsetDateTime lockedUntil) {\n         this.lockToken = Objects.requireNonNull(lockToken, \"'lockToken' cannot be null.\");\n         this.renewalOperation = Objects.requireNonNull(renewalOperation, \"'renewalOperation' cannot be null.\");\n         this.isSession = isSession;\n \n-        Objects.requireNonNull(tokenLockedUntil, \"'lockedUntil cannot be null.'\");\n+        Objects.requireNonNull(lockedUntil, \"'lockedUntil cannot be null.'\");\n         Objects.requireNonNull(maxLockRenewalDuration, \"'maxLockRenewalDuration' cannot be null.\");\n \n         if (maxLockRenewalDuration.isNegative()) {\n-            throw logger.logExceptionAsError(new IllegalArgumentException(\n+            throw logger.logThrowableAsError(new IllegalArgumentException(\n                 \"'maxLockRenewalDuration' cannot be negative.\"));\n         }\n \n-        this.lockedUntil.set(tokenLockedUntil);\n-\n-        final Flux<OffsetDateTime> renewLockOperation = getRenewLockOperation(tokenLockedUntil,\n-            maxLockRenewalDuration)\n-            .takeUntilOther(cancellationProcessor)\n-            .cache(Duration.ofMinutes(2));\n-\n-        this.completionMono = renewLockOperation.then();\n-        this.subscription = renewLockOperation.subscribe(until -> this.lockedUntil.set(until),\n-            error -> {\n-                logger.error(\"token[{}]. Error occurred while renewing lock token.\", error);\n-                status.set(LockRenewalStatus.FAILED);\n-                throwable.set(error);\n-                cancellationProcessor.onComplete();\n-            }, () -> {\n-                if (status.compareAndSet(LockRenewalStatus.RUNNING, LockRenewalStatus.COMPLETE)) {\n-                    logger.verbose(\"token[{}]. Renewing session lock task completed.\", lockToken);\n-                }\n-\n-                cancellationProcessor.onComplete();\n-            });\n-    }\n-\n-    /**\n-     * Gets a mono that completes when the operation does.\n-     *\n-     * @return A mono that completes when the renewal operation does.\n-     */\n-    Mono<Void> getCompletionOperation() {\n-        return completionMono;\n+        this.lockedUntil.set(lockedUntil);\n+        this.subscription = getRenewLockOperation(lockedUntil, maxLockRenewalDuration);\n     }\n \n     /**\n"}}, {"oid": "8e2de6d3cea79b4ef5ebaba7280d26a2e7324134", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8e2de6d3cea79b4ef5ebaba7280d26a2e7324134", "message": "Removing public from LockRenewalOperation.", "committedDate": "2020-09-04T08:01:32Z", "type": "commit"}, {"oid": "aad313f93b0b2c3997362d5d294b4a6f6c82b6a3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/aad313f93b0b2c3997362d5d294b4a6f6c82b6a3", "message": "Update LockRenewalOperation to return a completion Mono.", "committedDate": "2020-09-04T08:01:33Z", "type": "commit"}, {"oid": "d08cef73dfe5492f4a71f03e50f67ddcac056d39", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d08cef73dfe5492f4a71f03e50f67ddcac056d39", "message": "Updating lockrenewal operation.", "committedDate": "2020-09-04T08:01:33Z", "type": "commit"}, {"oid": "c83db7ed672bdfa3ffec7beecc458348d966446f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/c83db7ed672bdfa3ffec7beecc458348d966446f", "message": "Fixing tests.", "committedDate": "2020-09-04T08:02:42Z", "type": "commit"}, {"oid": "ffb219e0d2bb4aa0c153aea9bcf3a89663c394a8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/ffb219e0d2bb4aa0c153aea9bcf3a89663c394a8", "message": "Fix conflicting names in LockRenewalOperation.", "committedDate": "2020-09-04T08:02:44Z", "type": "commit"}, {"oid": "0c6eabfb4898fc9e3d6912a1f31038f893f35a79", "url": "https://github.com/Azure/azure-sdk-for-java/commit/0c6eabfb4898fc9e3d6912a1f31038f893f35a79", "message": "Fix test breaks in ServiceBusReceiverAsyncClientTest", "committedDate": "2020-09-04T08:02:44Z", "type": "commit"}, {"oid": "18467b455abd60b3a32338a0c8bc9711d7ee140e", "url": "https://github.com/Azure/azure-sdk-for-java/commit/18467b455abd60b3a32338a0c8bc9711d7ee140e", "message": "Caching response from Flux so it is not reinvoked.", "committedDate": "2020-09-04T08:02:45Z", "type": "commit"}, {"oid": "9da915cf0a1ec3ee7f15b461f4e5e320d2bf93d8", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9da915cf0a1ec3ee7f15b461f4e5e320d2bf93d8", "message": "Removing unused variables in test.", "committedDate": "2020-09-04T08:02:45Z", "type": "commit"}, {"oid": "a246917179b9d2d35e6b891f1ff85c53429bd0bd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/a246917179b9d2d35e6b891f1ff85c53429bd0bd", "message": "Fixing tests.", "committedDate": "2020-09-04T08:02:45Z", "type": "commit"}, {"oid": "95c2ebb98dd3111163acdf2d920d6a41ab7e9653", "url": "https://github.com/Azure/azure-sdk-for-java/commit/95c2ebb98dd3111163acdf2d920d6a41ab7e9653", "message": "Adding sync tests.", "committedDate": "2020-09-04T08:03:56Z", "type": "commit"}, {"oid": "4c7b888fc8bb038b0c8500118f4d1f4d8d8b5f04", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4c7b888fc8bb038b0c8500118f4d1f4d8d8b5f04", "message": "Adding javadoc.", "committedDate": "2020-09-04T08:03:58Z", "type": "commit"}, {"oid": "1c164d8b9a378ac29986c6a3287af2a24fac141d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1c164d8b9a378ac29986c6a3287af2a24fac141d", "message": "Fix checkstyles.", "committedDate": "2020-09-04T08:03:58Z", "type": "commit"}, {"oid": "be888bd0cf06b82da958464ec8a833e28be78cac", "url": "https://github.com/Azure/azure-sdk-for-java/commit/be888bd0cf06b82da958464ec8a833e28be78cac", "message": "Fix spotbugs.", "committedDate": "2020-09-04T08:03:59Z", "type": "commit"}, {"oid": "be888bd0cf06b82da958464ec8a833e28be78cac", "url": "https://github.com/Azure/azure-sdk-for-java/commit/be888bd0cf06b82da958464ec8a833e28be78cac", "message": "Fix spotbugs.", "committedDate": "2020-09-04T08:03:59Z", "type": "forcePushed"}]}