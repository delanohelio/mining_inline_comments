{"pr_number": 7932, "pr_title": "http client pluggability in Identity", "pr_createdAt": "2020-02-04T03:52:24Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/7932", "timeline": [{"oid": "65beec09ebe48825ba92e496598399ae9195d4ea", "url": "https://github.com/Azure/azure-sdk-for-java/commit/65beec09ebe48825ba92e496598399ae9195d4ea", "message": "http client pluggability in Identity", "committedDate": "2020-02-04T02:55:52Z", "type": "commit"}, {"oid": "adbd4c66d730780b2a2d69018c3688e1be7fb99d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/adbd4c66d730780b2a2d69018c3688e1be7fb99d", "message": "Add Retry policy", "committedDate": "2020-02-04T04:12:59Z", "type": "commit"}, {"oid": "47246d158a765fc55d4271f7a292f9eae522869f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/47246d158a765fc55d4271f7a292f9eae522869f", "message": "update options", "committedDate": "2020-02-04T04:19:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5NjIyNg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r374896226", "bodyText": "Have something clearer than 'itself', e.g. \"An updated instance of this builder with the HttpClient set as specified.\"", "author": "JonathanGiles", "createdAt": "2020-02-04T20:09:45Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/CredentialBuilderBase.java", "diffHunk": "@@ -68,4 +70,18 @@ public T httpPipeline(HttpPipeline httpPipeline) {\n         this.identityClientOptions.setHttpPipeline(httpPipeline);\n         return (T) this;\n     }\n+\n+    /**\n+     * Sets the HTTP client to use for sending and receiving requests to and from the service.\n+     *\n+     * @param client The HTTP client to use for requests.\n+     * @return itself", "originalCommit": "47246d158a765fc55d4271f7a292f9eae522869f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4f549300cdcaf3369b69d149ef958f1a9d4b4117", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/CredentialBuilderBase.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/CredentialBuilderBase.java\nindex 9affc1de98f..5f25673b34e 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/CredentialBuilderBase.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/CredentialBuilderBase.java\n\n@@ -63,7 +63,7 @@ public abstract class CredentialBuilderBase<T extends CredentialBuilderBase<T>>\n      * Specifies the HttpPipeline to send all requests. This setting overrides the others.\n      *\n      * @param httpPipeline the HttpPipeline to send all requests\n-     * @return itself\n+     * @return An updated instance of this builder with the http pipeline set as specified.\n      */\n     @SuppressWarnings(\"unchecked\")\n     public T httpPipeline(HttpPipeline httpPipeline) {\n"}}, {"oid": "fa06ca608a3976c31a45945beec9415dc87534a9", "url": "https://github.com/Azure/azure-sdk-for-java/commit/fa06ca608a3976c31a45945beec9415dc87534a9", "message": "Merge remote-tracking branch 'upstream/master' into add-http-client-identity", "committedDate": "2020-02-22T17:51:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3NTc2OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r383675768", "bodyText": "This is not necessary.", "author": "srnagar", "createdAt": "2020-02-25T06:10:02Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/credential/TokenRequestContext.java", "diffHunk": "@@ -13,12 +17,16 @@\n  */\n public class TokenRequestContext {\n     private final List<String> scopes;\n+    private HttpClient httpClient;\n+    private HttpLogOptions logOptions;\n \n     /**\n      * Creates a token request instance.\n      */\n     public TokenRequestContext() {\n         this.scopes = new ArrayList<>();\n+        this.httpClient = null;\n+        this.logOptions = null;", "originalCommit": "29d01fe65df630a518d05f4249d546075bb0913d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "67241b7e2d677f4122424a5eafb7c7fff70c9574", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/credential/TokenRequestContext.java b/sdk/core/azure-core/src/main/java/com/azure/core/credential/TokenRequestContext.java\nindex 6bdb8a7ebaf..622b0c1ae70 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/credential/TokenRequestContext.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/credential/TokenRequestContext.java\n\n@@ -17,16 +13,12 @@ import java.util.Objects;\n  */\n public class TokenRequestContext {\n     private final List<String> scopes;\n-    private HttpClient httpClient;\n-    private HttpLogOptions logOptions;\n \n     /**\n      * Creates a token request instance.\n      */\n     public TokenRequestContext() {\n         this.scopes = new ArrayList<>();\n-        this.httpClient = null;\n-        this.logOptions = null;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3Nzg1Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r383677856", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public KeyVaultCredentialPolicy(TokenCredential credential, HttpClient httpCLient, HttpLogOptions logOptions) {\n          \n          \n            \n                public KeyVaultCredentialPolicy(TokenCredential credential, HttpClient httpClient, HttpLogOptions logOptions) {", "author": "srnagar", "createdAt": "2020-02-25T06:18:07Z", "path": "sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java", "diffHunk": "@@ -37,8 +41,24 @@\n     public KeyVaultCredentialPolicy(TokenCredential credential) {\n         Objects.requireNonNull(credential);\n         this.cache = new ScopeTokenCache((request) -> credential.getToken(request));\n+        this.httpClient = null;\n+        this.logOptions = null;\n     }\n \n+    /**\n+     * Creates KeyVaultCredentialPolicy.\n+     *\n+     * @param credential the token credential to authenticate the request\n+     */\n+    public KeyVaultCredentialPolicy(TokenCredential credential, HttpClient httpCLient, HttpLogOptions logOptions) {", "originalCommit": "29d01fe65df630a518d05f4249d546075bb0913d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "67241b7e2d677f4122424a5eafb7c7fff70c9574", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java b/sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java\nindex 3ac2ed07447..f70c9e519b8 100644\n--- a/sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java\n+++ b/sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java\n\n@@ -41,24 +37,8 @@ public final class KeyVaultCredentialPolicy implements HttpPipelinePolicy {\n     public KeyVaultCredentialPolicy(TokenCredential credential) {\n         Objects.requireNonNull(credential);\n         this.cache = new ScopeTokenCache((request) -> credential.getToken(request));\n-        this.httpClient = null;\n-        this.logOptions = null;\n     }\n \n-    /**\n-     * Creates KeyVaultCredentialPolicy.\n-     *\n-     * @param credential the token credential to authenticate the request\n-     */\n-    public KeyVaultCredentialPolicy(TokenCredential credential, HttpClient httpCLient, HttpLogOptions logOptions) {\n-        Objects.requireNonNull(credential);\n-        this.cache = new ScopeTokenCache((request) -> credential.getToken(request));\n-        this.httpClient = httpCLient;\n-        this.logOptions = logOptions;\n-    }\n-\n-\n-\n     /**\n      * Adds the required header to authenticate a request to Azure Key Vault service.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY4MDAwMA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r383680000", "bodyText": "There are other policies that we are not including like retry policy, timeout policy etc. Any reason why only HttpLogOptions is included here? Can this be deferred, so we can think of all other policies that might be needed and add it when required?", "author": "srnagar", "createdAt": "2020-02-25T06:25:45Z", "path": "sdk/core/azure-core/src/main/java/com/azure/core/credential/TokenRequestContext.java", "diffHunk": "@@ -50,4 +58,46 @@ public TokenRequestContext addScopes(String... scopes) {\n         this.scopes.addAll(Arrays.asList(scopes));\n         return this;\n     }\n+\n+    /**\n+     * Get the configured Http Client.\n+     * @return the Http Client.\n+     */\n+    public HttpClient getHttpClient() {\n+        return httpClient;\n+    }\n+\n+    /**\n+     * Get the configured log options.\n+     * @return the log options.\n+     */\n+    public HttpLogOptions getLogOptions() {", "originalCommit": "29d01fe65df630a518d05f4249d546075bb0913d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "67241b7e2d677f4122424a5eafb7c7fff70c9574", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/com/azure/core/credential/TokenRequestContext.java b/sdk/core/azure-core/src/main/java/com/azure/core/credential/TokenRequestContext.java\nindex 6bdb8a7ebaf..622b0c1ae70 100644\n--- a/sdk/core/azure-core/src/main/java/com/azure/core/credential/TokenRequestContext.java\n+++ b/sdk/core/azure-core/src/main/java/com/azure/core/credential/TokenRequestContext.java\n\n@@ -58,46 +50,4 @@ public class TokenRequestContext {\n         this.scopes.addAll(Arrays.asList(scopes));\n         return this;\n     }\n-\n-    /**\n-     * Get the configured Http Client.\n-     * @return the Http Client.\n-     */\n-    public HttpClient getHttpClient() {\n-        return httpClient;\n-    }\n-\n-    /**\n-     * Get the configured log options.\n-     * @return the log options.\n-     */\n-    public HttpLogOptions getLogOptions() {\n-        return logOptions;\n-    }\n-\n-    /**\n-     * Sets the HTTP client to use for sending and receiving requests to and from the service.\n-     *\n-     * @param client The HTTP client to use for requests.\n-     * @return the updated {@link TokenRequestContext} object.\n-     * @throws NullPointerException If {@code client} is {@code null}.\n-     */\n-    public TokenRequestContext setHttpClient(HttpClient client) {\n-        Objects.requireNonNull(client);\n-        this.httpClient = httpClient;\n-        return this;\n-    }\n-\n-    /**\n-     * Sets the logging configuration for HTTP requests and responses.\n-     *\n-     * <p> If logLevel is not provided, default value of {@link HttpLogDetailLevel#NONE} is set.</p>\n-     *\n-     * @param logOptions The logging configuration to use when sending and receiving HTTP requests/responses.\n-     * @return the updated {@link TokenRequestContext} object.\n-     */\n-    public TokenRequestContext setHttpLogOptions(HttpLogOptions logOptions) {\n-        this.logOptions = logOptions;\n-        return this;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY4Mjg1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r383682855", "bodyText": "If options.getHttpPipeline() is not null, the client provided in TokenRequestContext is overwritten. Can you please add comments on why this is done? Also, it would be better to check if options.getHttpPipeline() is not null first instead of setting up the pipeline which might get overwritten immediately after.", "author": "srnagar", "createdAt": "2020-02-25T06:35:55Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -113,21 +123,40 @@\n                     .authority(authorityUrl);\n             if (options.getProxyOptions() != null) {\n                 applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n+            } else {\n+                HttpPipeline pipeline = setupPipeline(request.getHttpClient(), request.getLogOptions());\n+                applicationBuilder.httpClient(new HttpPipelineAdapter(pipeline));\n             }\n+\n             if (options.getHttpPipeline() != null) {\n                 applicationBuilder.httpClient(new HttpPipelineAdapter(options.getHttpPipeline()));\n             }", "originalCommit": "29d01fe65df630a518d05f4249d546075bb0913d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "67241b7e2d677f4122424a5eafb7c7fff70c9574", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\nindex 909bf76e570..2935d75bb4e 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\n\n@@ -121,23 +129,26 @@ public class IdentityClient {\n             ConfidentialClientApplication.Builder applicationBuilder =\n                 ConfidentialClientApplication.builder(clientId, ClientCredentialFactory.createFromSecret(clientSecret))\n                     .authority(authorityUrl);\n-            if (options.getProxyOptions() != null) {\n-                applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n-            } else {\n-                HttpPipeline pipeline = setupPipeline(request.getHttpClient(), request.getLogOptions());\n-                applicationBuilder.httpClient(new HttpPipelineAdapter(pipeline));\n-            }\n \n+            // If user supplies the pipeline, then it should override all other properties\n+            // as they should directly be set on the pipeline.\n             if (options.getHttpPipeline() != null) {\n                 applicationBuilder.httpClient(new HttpPipelineAdapter(options.getHttpPipeline()));\n+            } else {\n+                // If http client is set on the credential, then it should override the proxy options if any configured.\n+                if (options.getHttpClient() != null) {\n+                    HttpPipeline pipeline = setupPipeline(options.getHttpClient());\n+                    applicationBuilder.httpClient(new HttpPipelineAdapter(pipeline));\n+                } else if (options.getProxyOptions() != null) {\n+                    applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n+                }\n             }\n \n             ConfidentialClientApplication application = applicationBuilder.build();\n             return Mono.fromFuture(application.acquireToken(\n                 ClientCredentialParameters.builder(new HashSet<>(request.getScopes()))\n                     .build()))\n-                    .map(ar ->\n-                             new AccessToken(ar.accessToken(), OffsetDateTime.ofInstant(ar.expiresOnDate().toInstant(),\n+                       .map(ar -> new AccessToken(ar.accessToken(), OffsetDateTime.ofInstant(ar.expiresOnDate().toInstant(),\n                                ZoneOffset.UTC)));\n \n         } catch (MalformedURLException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY4MzI3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r383683274", "bodyText": "This ctr should call the other overload.", "author": "srnagar", "createdAt": "2020-02-25T06:37:34Z", "path": "sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java", "diffHunk": "@@ -37,8 +41,24 @@\n     public KeyVaultCredentialPolicy(TokenCredential credential) {\n         Objects.requireNonNull(credential);\n         this.cache = new ScopeTokenCache((request) -> credential.getToken(request));\n+        this.httpClient = null;\n+        this.logOptions = null;", "originalCommit": "29d01fe65df630a518d05f4249d546075bb0913d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "67241b7e2d677f4122424a5eafb7c7fff70c9574", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java b/sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java\nindex 3ac2ed07447..f70c9e519b8 100644\n--- a/sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java\n+++ b/sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java\n\n@@ -41,24 +37,8 @@ public final class KeyVaultCredentialPolicy implements HttpPipelinePolicy {\n     public KeyVaultCredentialPolicy(TokenCredential credential) {\n         Objects.requireNonNull(credential);\n         this.cache = new ScopeTokenCache((request) -> credential.getToken(request));\n-        this.httpClient = null;\n-        this.logOptions = null;\n     }\n \n-    /**\n-     * Creates KeyVaultCredentialPolicy.\n-     *\n-     * @param credential the token credential to authenticate the request\n-     */\n-    public KeyVaultCredentialPolicy(TokenCredential credential, HttpClient httpCLient, HttpLogOptions logOptions) {\n-        Objects.requireNonNull(credential);\n-        this.cache = new ScopeTokenCache((request) -> credential.getToken(request));\n-        this.httpClient = httpCLient;\n-        this.logOptions = logOptions;\n-    }\n-\n-\n-\n     /**\n      * Adds the required header to authenticate a request to Azure Key Vault service.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY4MzQyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r383683429", "bodyText": "Do we need logOptions?", "author": "srnagar", "createdAt": "2020-02-25T06:38:08Z", "path": "sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java", "diffHunk": "@@ -37,8 +41,24 @@\n     public KeyVaultCredentialPolicy(TokenCredential credential) {\n         Objects.requireNonNull(credential);\n         this.cache = new ScopeTokenCache((request) -> credential.getToken(request));\n+        this.httpClient = null;\n+        this.logOptions = null;\n     }\n \n+    /**\n+     * Creates KeyVaultCredentialPolicy.\n+     *\n+     * @param credential the token credential to authenticate the request\n+     */\n+    public KeyVaultCredentialPolicy(TokenCredential credential, HttpClient httpCLient, HttpLogOptions logOptions) {\n+        Objects.requireNonNull(credential);\n+        this.cache = new ScopeTokenCache((request) -> credential.getToken(request));\n+        this.httpClient = httpCLient;\n+        this.logOptions = logOptions;", "originalCommit": "29d01fe65df630a518d05f4249d546075bb0913d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "67241b7e2d677f4122424a5eafb7c7fff70c9574", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java b/sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java\nindex 3ac2ed07447..f70c9e519b8 100644\n--- a/sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java\n+++ b/sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java\n\n@@ -41,24 +37,8 @@ public final class KeyVaultCredentialPolicy implements HttpPipelinePolicy {\n     public KeyVaultCredentialPolicy(TokenCredential credential) {\n         Objects.requireNonNull(credential);\n         this.cache = new ScopeTokenCache((request) -> credential.getToken(request));\n-        this.httpClient = null;\n-        this.logOptions = null;\n     }\n \n-    /**\n-     * Creates KeyVaultCredentialPolicy.\n-     *\n-     * @param credential the token credential to authenticate the request\n-     */\n-    public KeyVaultCredentialPolicy(TokenCredential credential, HttpClient httpCLient, HttpLogOptions logOptions) {\n-        Objects.requireNonNull(credential);\n-        this.cache = new ScopeTokenCache((request) -> credential.getToken(request));\n-        this.httpClient = httpCLient;\n-        this.logOptions = logOptions;\n-    }\n-\n-\n-\n     /**\n      * Adds the required header to authenticate a request to Azure Key Vault service.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyODg5Mw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r384728893", "bodyText": "I don't see this being used in this class. Since you are allowing users to set the HttpPipline, httpClient can be removed.", "author": "srnagar", "createdAt": "2020-02-26T19:54:17Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClientOptions.java", "diffHunk": "@@ -21,6 +22,7 @@\n     private Function<Duration, Duration> retryTimeout;\n     private ProxyOptions proxyOptions;\n     private HttpPipeline httpPipeline;\n+    private HttpClient httpClient;", "originalCommit": "2c5bca2de2f10f721f62a93712eeb9000cbba03e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1NTE4NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r385355185", "bodyText": "With option 1 design, this is needed now, as we are allowing users to set the client too.", "author": "g2vinay", "createdAt": "2020-02-27T20:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyODg5Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczMDAxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r384730013", "bodyText": "Add some unit tests to cover the changes in this PR.", "author": "srnagar", "createdAt": "2020-02-26T19:56:04Z", "path": "sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java", "diffHunk": "@@ -28,17 +29,29 @@\n     private static final String BEARER_TOKEN_PREFIX = \"Bearer \";\n     private static final String AUTHORIZATION = \"Authorization\";\n     private final ScopeTokenCache cache;\n+    private final HttpClient httpClient;\n \n     /**\n      * Creates KeyVaultCredentialPolicy.\n      *\n      * @param credential the token credential to authenticate the request\n      */\n     public KeyVaultCredentialPolicy(TokenCredential credential) {\n+        this(credential, null);\n+    }\n+\n+    /**\n+     * Creates KeyVaultCredentialPolicy.\n+     *\n+     * @param credential the token credential to authenticate the request\n+     */\n+    public KeyVaultCredentialPolicy(TokenCredential credential, HttpClient httpClient) {", "originalCommit": "2c5bca2de2f10f721f62a93712eeb9000cbba03e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1NDgxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r385354813", "bodyText": "no more changes needed in KV now with option 1 design.", "author": "g2vinay", "createdAt": "2020-02-27T20:30:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDczMDAxMw=="}], "type": "inlineReview", "revised_code": {"commit": "67241b7e2d677f4122424a5eafb7c7fff70c9574", "chunk": "diff --git a/sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java b/sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java\nindex ee827a6608b..f70c9e519b8 100644\n--- a/sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java\n+++ b/sdk/keyvault/azure-security-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/implementation/KeyVaultCredentialPolicy.java\n\n@@ -29,7 +28,6 @@ public final class KeyVaultCredentialPolicy implements HttpPipelinePolicy {\n     private static final String BEARER_TOKEN_PREFIX = \"Bearer \";\n     private static final String AUTHORIZATION = \"Authorization\";\n     private final ScopeTokenCache cache;\n-    private final HttpClient httpClient;\n \n     /**\n      * Creates KeyVaultCredentialPolicy.\n"}}, {"oid": "67241b7e2d677f4122424a5eafb7c7fff70c9574", "url": "https://github.com/Azure/azure-sdk-for-java/commit/67241b7e2d677f4122424a5eafb7c7fff70c9574", "message": "update identity client", "committedDate": "2020-02-27T17:40:31Z", "type": "commit"}, {"oid": "aa0587e29c5b1470f84b1f79241dbcaf5f8f829a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/aa0587e29c5b1470f84b1f79241dbcaf5f8f829a", "message": "checkstyle fix", "committedDate": "2020-02-27T17:41:56Z", "type": "commit"}, {"oid": "aa0587e29c5b1470f84b1f79241dbcaf5f8f829a", "url": "https://github.com/Azure/azure-sdk-for-java/commit/aa0587e29c5b1470f84b1f79241dbcaf5f8f829a", "message": "checkstyle fix", "committedDate": "2020-02-27T17:41:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1NzAxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r385357013", "bodyText": "should we use the same pipeline that we create for the publicApplicationClient in the constructor so we don't have to create a new pipeline for every call to authenticate through the confidential client?", "author": "schaabs", "createdAt": "2020-02-27T20:35:56Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -111,23 +128,45 @@\n             ConfidentialClientApplication.Builder applicationBuilder =\n                 ConfidentialClientApplication.builder(clientId, ClientCredentialFactory.createFromSecret(clientSecret))\n                     .authority(authorityUrl);\n-            if (options.getProxyOptions() != null) {\n-                applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n-            }\n+\n+            // If user supplies the pipeline, then it should override all other properties\n+            // as they should directly be set on the pipeline.\n             if (options.getHttpPipeline() != null) {\n                 applicationBuilder.httpClient(new HttpPipelineAdapter(options.getHttpPipeline()));\n+            } else {\n+                // If http client is set on the credential, then it should override the proxy options if any configured.\n+                if (options.getHttpClient() != null) {\n+                    HttpPipeline pipeline = setupPipeline(options.getHttpClient());\n+                    applicationBuilder.httpClient(new HttpPipelineAdapter(pipeline));\n+                } else if (options.getProxyOptions() != null) {\n+                    applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n+                }", "originalCommit": "aa0587e29c5b1470f84b1f79241dbcaf5f8f829a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQyMzk4MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r385423980", "bodyText": "yeah, pipeline construction is now moved to the constructor.", "author": "g2vinay", "createdAt": "2020-02-27T23:10:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1NzAxMw=="}], "type": "inlineReview", "revised_code": {"commit": "cfd1f3f1c335ad78192e8ea9396ed213570f8a86", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\nindex ab2b9aba54a..e57dded4e23 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\n\n@@ -129,18 +131,11 @@ public class IdentityClient {\n                 ConfidentialClientApplication.builder(clientId, ClientCredentialFactory.createFromSecret(clientSecret))\n                     .authority(authorityUrl);\n \n-            // If user supplies the pipeline, then it should override all other properties\n-            // as they should directly be set on the pipeline.\n-            if (options.getHttpPipeline() != null) {\n+            // If http pipeline is available, then it should override the proxy options if any configured.\n+            if (httpPipeline != null) {\n                 applicationBuilder.httpClient(new HttpPipelineAdapter(options.getHttpPipeline()));\n-            } else {\n-                // If http client is set on the credential, then it should override the proxy options if any configured.\n-                if (options.getHttpClient() != null) {\n-                    HttpPipeline pipeline = setupPipeline(options.getHttpClient());\n-                    applicationBuilder.httpClient(new HttpPipelineAdapter(pipeline));\n-                } else if (options.getProxyOptions() != null) {\n-                    applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n-                }\n+            } else if (options.getProxyOptions() != null) {\n+                applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n             }\n \n             ConfidentialClientApplication application = applicationBuilder.build();\n"}}, {"oid": "cfd1f3f1c335ad78192e8ea9396ed213570f8a86", "url": "https://github.com/Azure/azure-sdk-for-java/commit/cfd1f3f1c335ad78192e8ea9396ed213570f8a86", "message": "build pipeline during client construciton", "committedDate": "2020-02-27T23:08:54Z", "type": "commit"}, {"oid": "4f549300cdcaf3369b69d149ef958f1a9d4b4117", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4f549300cdcaf3369b69d149ef958f1a9d4b4117", "message": "update javadocs for builder base", "committedDate": "2020-02-27T23:17:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0NDY3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r385444671", "bodyText": "I believe this should be applicationBuilder.httpClient(new HttpPipelineAdapter(httpPipeline)); rather than applicationBuilder.httpClient(new HttpPipelineAdapter(options.getHttpPipeline())); because httpPipeline could have been set directly from the options or constructed in the ctor, so I think it's possible that options.getHttpPipeline() is null when httpPipeline is not.\nAlso, the client creates new HttpPipelineAdapter instances for each msal client it creates. Does each msal client need it's own adapter? If not I would suggest caching the HttpPipelineAdapter rather than just the HttpPipeline", "author": "schaabs", "createdAt": "2020-02-28T00:17:31Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -111,23 +130,38 @@\n             ConfidentialClientApplication.Builder applicationBuilder =\n                 ConfidentialClientApplication.builder(clientId, ClientCredentialFactory.createFromSecret(clientSecret))\n                     .authority(authorityUrl);\n-            if (options.getProxyOptions() != null) {\n-                applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n-            }\n-            if (options.getHttpPipeline() != null) {\n+\n+            // If http pipeline is available, then it should override the proxy options if any configured.\n+            if (httpPipeline != null) {\n                 applicationBuilder.httpClient(new HttpPipelineAdapter(options.getHttpPipeline()));", "originalCommit": "4f549300cdcaf3369b69d149ef958f1a9d4b4117", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1NDk5Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r385454996", "bodyText": "added the logic to cache the pipeline adapter.\nThanks for the catch on http pipeline, it was an oversight by me.", "author": "g2vinay", "createdAt": "2020-02-28T00:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0NDY3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "708e8b2a1a218ad7b8252fcd3e5696b44c57ac7d", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\nindex e57dded4e23..0bc727a7567 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\n\n@@ -132,8 +135,8 @@ public class IdentityClient {\n                     .authority(authorityUrl);\n \n             // If http pipeline is available, then it should override the proxy options if any configured.\n-            if (httpPipeline != null) {\n-                applicationBuilder.httpClient(new HttpPipelineAdapter(options.getHttpPipeline()));\n+            if (httpPipelineAdapter != null) {\n+                applicationBuilder.httpClient(httpPipelineAdapter);\n             } else if (options.getProxyOptions() != null) {\n                 applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n             }\n"}}, {"oid": "708e8b2a1a218ad7b8252fcd3e5696b44c57ac7d", "url": "https://github.com/Azure/azure-sdk-for-java/commit/708e8b2a1a218ad7b8252fcd3e5696b44c57ac7d", "message": "cache http pipeline adapter", "committedDate": "2020-02-28T00:53:46Z", "type": "commit"}, {"oid": "e8ce8008e95449f5036d577423f31c67ce16a494", "url": "https://github.com/Azure/azure-sdk-for-java/commit/e8ce8008e95449f5036d577423f31c67ce16a494", "message": "handle null case", "committedDate": "2020-02-28T01:50:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkyMTUyMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r385921523", "bodyText": "Instead of passing httpClient here, you can as well use HttpClient.createDefault() since you know httpClient is null.", "author": "srnagar", "createdAt": "2020-02-28T21:04:58Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -82,17 +93,31 @@\n         } else {\n             String authorityUrl = options.getAuthorityHost().replaceAll(\"/+$\", \"\") + \"/organizations/\" + tenantId;\n             PublicClientApplication.Builder publicClientApplicationBuilder = PublicClientApplication.builder(clientId);\n-            if (options.getHttpPipeline() != null) {\n-                publicClientApplicationBuilder = publicClientApplicationBuilder\n-                        .httpClient(new HttpPipelineAdapter(options.getHttpPipeline()));\n-            }\n             try {\n                 publicClientApplicationBuilder = publicClientApplicationBuilder.authority(authorityUrl);\n             } catch (MalformedURLException e) {\n                 throw logger.logExceptionAsWarning(new IllegalStateException(e));\n             }\n-            if (options.getProxyOptions() != null) {\n-                publicClientApplicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n+\n+            // If user supplies the pipeline, then it should override all other properties\n+            // as they should directly be set on the pipeline.\n+            HttpPipeline httpPipeline = options.getHttpPipeline();\n+            if (httpPipeline != null) {\n+                httpPipelineAdapter = new HttpPipelineAdapter(httpPipeline);\n+                publicClientApplicationBuilder.httpClient(httpPipelineAdapter);\n+            } else {\n+                // If http client is set on the credential, then it should override the proxy options if any configured.\n+                HttpClient httpClient = options.getHttpClient();\n+                if (httpClient != null) {\n+                    httpPipelineAdapter = new HttpPipelineAdapter(setupPipeline(httpClient));\n+                    publicClientApplicationBuilder.httpClient(httpPipelineAdapter);\n+                } else if (options.getProxyOptions() != null) {\n+                    publicClientApplicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n+                } else {\n+                    //Http Client is null, proxy options are not set, use the default client and build the pipeline.\n+                    httpPipelineAdapter = new HttpPipelineAdapter(setupPipeline(httpClient));", "originalCommit": "e8ce8008e95449f5036d577423f31c67ce16a494", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d20d07226d9ade8a1a8d2900dae44773954fb245", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\nindex c1c5a25ddc4..f017d56fbc0 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\n\n@@ -115,7 +115,7 @@ public class IdentityClient {\n                     publicClientApplicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n                 } else {\n                     //Http Client is null, proxy options are not set, use the default client and build the pipeline.\n-                    httpPipelineAdapter = new HttpPipelineAdapter(setupPipeline(httpClient));\n+                    httpPipelineAdapter = new HttpPipelineAdapter(setupPipeline(HttpClient.createDefault()));\n                     publicClientApplicationBuilder.httpClient(httpPipelineAdapter);\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkyMTcyOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7932#discussion_r385921729", "bodyText": "This line can be removed if you pass the default client as suggested above.", "author": "srnagar", "createdAt": "2020-02-28T21:05:28Z", "path": "sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java", "diffHunk": "@@ -111,23 +136,38 @@\n             ConfidentialClientApplication.Builder applicationBuilder =\n                 ConfidentialClientApplication.builder(clientId, ClientCredentialFactory.createFromSecret(clientSecret))\n                     .authority(authorityUrl);\n-            if (options.getProxyOptions() != null) {\n+\n+            // If http pipeline is available, then it should override the proxy options if any configured.\n+            if (httpPipelineAdapter != null) {\n+                applicationBuilder.httpClient(httpPipelineAdapter);\n+            } else if (options.getProxyOptions() != null) {\n                 applicationBuilder.proxy(proxyOptionsToJavaNetProxy(options.getProxyOptions()));\n             }\n-            if (options.getHttpPipeline() != null) {\n-                applicationBuilder.httpClient(new HttpPipelineAdapter(options.getHttpPipeline()));\n-            }\n+\n             ConfidentialClientApplication application = applicationBuilder.build();\n             return Mono.fromFuture(application.acquireToken(\n                 ClientCredentialParameters.builder(new HashSet<>(request.getScopes()))\n-                    .build()))\n-                .map(ar -> new AccessToken(ar.accessToken(), OffsetDateTime.ofInstant(ar.expiresOnDate().toInstant(),\n-                    ZoneOffset.UTC)));\n+                   .build()))\n+                   .map(ar -> new AccessToken(ar.accessToken(), OffsetDateTime.ofInstant(ar.expiresOnDate().toInstant(),\n+                               ZoneOffset.UTC)));\n+\n         } catch (MalformedURLException e) {\n             return Mono.error(e);\n         }\n     }\n \n+    private HttpPipeline setupPipeline(HttpClient httpClient) {\n+        List<HttpPipelinePolicy> policies = new ArrayList<>();\n+        HttpLogOptions httpLogOptions = new HttpLogOptions();\n+        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n+        policies.add(new RetryPolicy());\n+        HttpPolicyProviders.addAfterRetryPolicies(policies);\n+        policies.add(new HttpLoggingPolicy(httpLogOptions));\n+        HttpClient client = httpClient != null ? httpClient : HttpClient.createDefault();", "originalCommit": "e8ce8008e95449f5036d577423f31c67ce16a494", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d20d07226d9ade8a1a8d2900dae44773954fb245", "chunk": "diff --git a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\nindex c1c5a25ddc4..f017d56fbc0 100644\n--- a/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\n+++ b/sdk/identity/azure-identity/src/main/java/com/azure/identity/implementation/IdentityClient.java\n\n@@ -163,8 +163,7 @@ public class IdentityClient {\n         policies.add(new RetryPolicy());\n         HttpPolicyProviders.addAfterRetryPolicies(policies);\n         policies.add(new HttpLoggingPolicy(httpLogOptions));\n-        HttpClient client = httpClient != null ? httpClient : HttpClient.createDefault();\n-        return new HttpPipelineBuilder().httpClient(client)\n+        return new HttpPipelineBuilder().httpClient(httpClient)\n                    .policies(policies.toArray(new HttpPipelinePolicy[0])).build();\n     }\n \n"}}, {"oid": "d20d07226d9ade8a1a8d2900dae44773954fb245", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d20d07226d9ade8a1a8d2900dae44773954fb245", "message": "fix spotbug", "committedDate": "2020-03-02T06:55:16Z", "type": "commit"}]}