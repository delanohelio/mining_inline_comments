{"pr_number": 12455, "pr_title": "Support Jackson only strongly-typed upload/get APIs", "pr_createdAt": "2020-06-23T18:48:09Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/12455", "timeline": [{"oid": "6f725b9d04d7f9b3d95067fcc1471d9ab7d72621", "url": "https://github.com/Azure/azure-sdk-for-java/commit/6f725b9d04d7f9b3d95067fcc1471d9ab7d72621", "message": "Fixed issue with deserializing complex GeoJSON properties, added additional unit tests for more property permutations", "committedDate": "2020-06-23T17:49:38Z", "type": "commit"}, {"oid": "75749d648a68ca18d2973e58a54fcf4487ec4b49", "url": "https://github.com/Azure/azure-sdk-for-java/commit/75749d648a68ca18d2973e58a54fcf4487ec4b49", "message": "Support Jackson only strongly-typed upload/get APIs", "committedDate": "2020-06-23T17:57:26Z", "type": "commit"}, {"oid": "68337c1eb7e4e59eb73c332882c329c0a4c062b6", "url": "https://github.com/Azure/azure-sdk-for-java/commit/68337c1eb7e4e59eb73c332882c329c0a4c062b6", "message": "Merge branch 'AzCore_GeoJSONCleanup' of https://github.com/alzimmermsft/azure-sdk-for-java into removeGeo", "committedDate": "2020-06-23T17:57:32Z", "type": "commit"}, {"oid": "5a6882c44aa0d4169493b4ee652d5f44d4d424fe", "url": "https://github.com/Azure/azure-sdk-for-java/commit/5a6882c44aa0d4169493b4ee652d5f44d4d424fe", "message": "Fixed live tests", "committedDate": "2020-06-23T18:44:57Z", "type": "commit"}, {"oid": "afa0ac7337c8f2275f6df07336ef60f67beb3fb7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/afa0ac7337c8f2275f6df07336ef60f67beb3fb7", "message": "Merge branch 'master' of https://github.com/Azure/azure-sdk-for-java into removeGeo", "committedDate": "2020-06-23T18:45:19Z", "type": "commit"}, {"oid": "69b2ef545de909c0a0da84ec04e9fae548b65eb7", "url": "https://github.com/Azure/azure-sdk-for-java/commit/69b2ef545de909c0a0da84ec04e9fae548b65eb7", "message": "Remove unnecessary ones", "committedDate": "2020-06-23T18:50:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NDUxMw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444464513", "bodyText": "I don't believe this is needed, opening to databind is only needed when using reflective code to serialize and deserialize objects. The spatial models use custom serialization and deserialization which doesn't perform any reflect accesses.", "author": "alzimmermsft", "createdAt": "2020-06-23T19:43:27Z", "path": "sdk/core/azure-core/src/main/java/module-info.java", "diffHunk": "@@ -34,6 +34,7 @@\n     opens com.azure.core.util to com.fasterxml.jackson.databind;\n     opens com.azure.core.util.logging to com.fasterxml.jackson.databind;\n     opens com.azure.core.util.serializer to com.fasterxml.jackson.databind;\n+    opens com.azure.core.models.spatial to com.fasterxml.jackson.databind;", "originalCommit": "69b2ef545de909c0a0da84ec04e9fae548b65eb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3OTU4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444479586", "bodyText": "I am having for tests. Forgot to remove. Thanks for catching this!", "author": "sima-zhu", "createdAt": "2020-06-23T20:12:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NDUxMw=="}], "type": "inlineReview", "revised_code": {"commit": "18543b6c8814ebe87c9c2a44afa7abccc4cbd6a3", "chunk": "diff --git a/sdk/core/azure-core/src/main/java/module-info.java b/sdk/core/azure-core/src/main/java/module-info.java\nindex 389120ab24b..1acd3fc6e2d 100644\n--- a/sdk/core/azure-core/src/main/java/module-info.java\n+++ b/sdk/core/azure-core/src/main/java/module-info.java\n\n@@ -34,7 +34,6 @@ module com.azure.core {\n     opens com.azure.core.util to com.fasterxml.jackson.databind;\n     opens com.azure.core.util.logging to com.fasterxml.jackson.databind;\n     opens com.azure.core.util.serializer to com.fasterxml.jackson.databind;\n-    opens com.azure.core.models.spatial to com.fasterxml.jackson.databind;\n     opens com.azure.core.implementation to com.fasterxml.jackson.databind;\n     opens com.azure.core.implementation.logging to com.fasterxml.jackson.databind;\n     opens com.azure.core.implementation.serializer to com.fasterxml.jackson.databind;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NTQ0MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444465441", "bodyText": "This won't be thread-safe.", "author": "alzimmermsft", "createdAt": "2020-06-23T19:45:14Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "diffHunk": "@@ -769,4 +779,18 @@ private static AutocompleteRequest createAutoCompleteRequest(String searchText,\n             .setDocument(d)));\n         return batch;\n     }\n+\n+    private static class SearchObjectMapper {\n+        private static ObjectMapper MAPPER = null;\n+        private SearchObjectMapper() {\n+        }\n+\n+        static ObjectMapper getInstance() {\n+            if (MAPPER == null) {", "originalCommit": "69b2ef545de909c0a0da84ec04e9fae548b65eb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3OTI1Mg==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444479252", "bodyText": "This is exactly the same setting sharing by threads. Even thread writes the MAPPER, it will not throw error but update with new one.", "author": "sima-zhu", "createdAt": "2020-06-23T20:12:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NTQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5MTQwMQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444491401", "bodyText": "Suppress spotbugs for best practice. Remove singleton and put it property", "author": "sima-zhu", "createdAt": "2020-06-23T20:36:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NTQ0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "18543b6c8814ebe87c9c2a44afa7abccc4cbd6a3", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java\nindex 35e60a42624..0e355dd1e92 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java\n\n@@ -779,18 +786,4 @@ public final class SearchAsyncClient {\n             .setDocument(d)));\n         return batch;\n     }\n-\n-    private static class SearchObjectMapper {\n-        private static ObjectMapper MAPPER = null;\n-        private SearchObjectMapper() {\n-        }\n-\n-        static ObjectMapper getInstance() {\n-            if (MAPPER == null) {\n-                MAPPER = new JacksonAdapter().serializer();\n-                SerializationUtil.configureMapper(MAPPER);\n-            }\n-            return MAPPER;\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NTg3Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444465877", "bodyText": "Given that this ObjectMapper is static and will be shared across instances I don't see an issue with removing the inner class and making this a property on SearchAsyncClient.", "author": "alzimmermsft", "createdAt": "2020-06-23T19:46:07Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "diffHunk": "@@ -769,4 +779,18 @@ private static AutocompleteRequest createAutoCompleteRequest(String searchText,\n             .setDocument(d)));\n         return batch;\n     }\n+\n+    private static class SearchObjectMapper {\n+        private static ObjectMapper MAPPER = null;", "originalCommit": "69b2ef545de909c0a0da84ec04e9fae548b65eb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4MDg1MA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444480850", "bodyText": "Spotbugs complains the annonymous inner class. I am also flexible to suppress spotbugs and have it in property.", "author": "sima-zhu", "createdAt": "2020-06-23T20:15:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NTg3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "18543b6c8814ebe87c9c2a44afa7abccc4cbd6a3", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java\nindex 35e60a42624..0e355dd1e92 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java\n\n@@ -779,18 +786,4 @@ public final class SearchAsyncClient {\n             .setDocument(d)));\n         return batch;\n     }\n-\n-    private static class SearchObjectMapper {\n-        private static ObjectMapper MAPPER = null;\n-        private SearchObjectMapper() {\n-        }\n-\n-        static ObjectMapper getInstance() {\n-            if (MAPPER == null) {\n-                MAPPER = new JacksonAdapter().serializer();\n-                SerializationUtil.configureMapper(MAPPER);\n-            }\n-            return MAPPER;\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NjU5OA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444466598", "bodyText": "Any reason we aren't setting the setSerializationInclusion property when we are constructing the mapper instance? This may lead to a race condition if it is being mutated while being used.", "author": "alzimmermsft", "createdAt": "2020-06-23T19:47:30Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "diffHunk": "@@ -475,20 +476,29 @@ SearchPagedFlux search(String searchText, SearchOptions searchOptions, RequestOp\n      * @see <a href=\"https://docs.microsoft.com/rest/api/searchservice/Lookup-Document\">Lookup document</a>\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<Response<SearchDocument>> getDocumentWithResponse(String key, List<String> selectedFields,\n-        RequestOptions requestOptions) {\n-        return withContext(context -> getDocumentWithResponse(key, selectedFields, requestOptions, context));\n+    public <T> Mono<Response<T>> getDocumentWithResponse(String key, Class<T> modelClass,\n+        List<String> selectedFields, RequestOptions requestOptions) {\n+        return withContext(context -> getDocumentWithResponse(key, modelClass,\n+            selectedFields, requestOptions, context));\n     }\n \n-    Mono<Response<SearchDocument>> getDocumentWithResponse(String key, List<String> selectedFields,\n-        RequestOptions requestOptions, Context context) {\n+    @SuppressWarnings(\"unchecked\")\n+    <T> Mono<Response<T>> getDocumentWithResponse(String key, Class<T> modelClass,\n+        List<String> selectedFields, RequestOptions requestOptions, Context context) {\n         try {\n \n             return restClient.documents()\n                 .getWithRestResponseAsync(key, selectedFields, RequestOptionsConverter.map(requestOptions), context)\n                 .onErrorMap(DocumentResponseConversions::exceptionMapper)\n                 .map(res -> {\n-                    SearchDocument document = MAPPER.convertValue(res.getValue(), SearchDocument.class);\n+                    SearchObjectMapper.getInstance().setSerializationInclusion(JsonInclude.Include.ALWAYS);", "originalCommit": "69b2ef545de909c0a0da84ec04e9fae548b65eb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4MTQ2NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444481464", "bodyText": "Good catch. This can be put in property when construct.", "author": "sima-zhu", "createdAt": "2020-06-23T20:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NjU5OA=="}], "type": "inlineReview", "revised_code": {"commit": "18543b6c8814ebe87c9c2a44afa7abccc4cbd6a3", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java\nindex 35e60a42624..0e355dd1e92 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java\n\n@@ -491,14 +496,16 @@ public final class SearchAsyncClient {\n                 .getWithRestResponseAsync(key, selectedFields, RequestOptionsConverter.map(requestOptions), context)\n                 .onErrorMap(DocumentResponseConversions::exceptionMapper)\n                 .map(res -> {\n-                    SearchObjectMapper.getInstance().setSerializationInclusion(JsonInclude.Include.ALWAYS);\n-                    if (SearchDocument.class.getTypeName().equals(modelClass.getTypeName())) {\n+\n+                    ObjectMapper MAPPER = new JacksonAdapter().serializer();\n+                    SerializationUtil.configureMapper(MAPPER);\n+                    MAPPER.setSerializationInclusion(JsonInclude.Include.ALWAYS);\n+                    if (SearchDocument.class == modelClass) {\n                         TypeReference<Map<String, Object>> typeReference = new TypeReference<Map<String, Object>>() { };\n-                        SearchDocument doc = new SearchDocument(SearchObjectMapper.getInstance()\n-                            .convertValue(res.getValue(), typeReference));\n+                        SearchDocument doc = new SearchDocument(MAPPER.convertValue(res.getValue(), typeReference));\n                         return new SimpleResponse<T>(res, (T) doc);\n                     }\n-                    T document = SearchObjectMapper.getInstance().convertValue(res.getValue(), modelClass);\n+                    T document = MAPPER.convertValue(res.getValue(), modelClass);\n                     return new SimpleResponse<>(res, document);\n                 })\n                 .map(Function.identity());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2NzA5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444467095", "bodyText": "Why do we call SearchObjectMapper.getInstance() twice instead of keeping a reference to it the first time its called?", "author": "alzimmermsft", "createdAt": "2020-06-23T19:48:27Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "diffHunk": "@@ -475,20 +476,29 @@ SearchPagedFlux search(String searchText, SearchOptions searchOptions, RequestOp\n      * @see <a href=\"https://docs.microsoft.com/rest/api/searchservice/Lookup-Document\">Lookup document</a>\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<Response<SearchDocument>> getDocumentWithResponse(String key, List<String> selectedFields,\n-        RequestOptions requestOptions) {\n-        return withContext(context -> getDocumentWithResponse(key, selectedFields, requestOptions, context));\n+    public <T> Mono<Response<T>> getDocumentWithResponse(String key, Class<T> modelClass,\n+        List<String> selectedFields, RequestOptions requestOptions) {\n+        return withContext(context -> getDocumentWithResponse(key, modelClass,\n+            selectedFields, requestOptions, context));\n     }\n \n-    Mono<Response<SearchDocument>> getDocumentWithResponse(String key, List<String> selectedFields,\n-        RequestOptions requestOptions, Context context) {\n+    @SuppressWarnings(\"unchecked\")\n+    <T> Mono<Response<T>> getDocumentWithResponse(String key, Class<T> modelClass,\n+        List<String> selectedFields, RequestOptions requestOptions, Context context) {\n         try {\n \n             return restClient.documents()\n                 .getWithRestResponseAsync(key, selectedFields, RequestOptionsConverter.map(requestOptions), context)\n                 .onErrorMap(DocumentResponseConversions::exceptionMapper)\n                 .map(res -> {\n-                    SearchDocument document = MAPPER.convertValue(res.getValue(), SearchDocument.class);\n+                    SearchObjectMapper.getInstance().setSerializationInclusion(JsonInclude.Include.ALWAYS);\n+                    if (SearchDocument.class.getTypeName().equals(modelClass.getTypeName())) {\n+                        TypeReference<Map<String, Object>> typeReference = new TypeReference<Map<String, Object>>() { };\n+                        SearchDocument doc = new SearchDocument(SearchObjectMapper.getInstance()", "originalCommit": "69b2ef545de909c0a0da84ec04e9fae548b65eb7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "18543b6c8814ebe87c9c2a44afa7abccc4cbd6a3", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java\nindex 35e60a42624..0e355dd1e92 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java\n\n@@ -491,14 +496,16 @@ public final class SearchAsyncClient {\n                 .getWithRestResponseAsync(key, selectedFields, RequestOptionsConverter.map(requestOptions), context)\n                 .onErrorMap(DocumentResponseConversions::exceptionMapper)\n                 .map(res -> {\n-                    SearchObjectMapper.getInstance().setSerializationInclusion(JsonInclude.Include.ALWAYS);\n-                    if (SearchDocument.class.getTypeName().equals(modelClass.getTypeName())) {\n+\n+                    ObjectMapper MAPPER = new JacksonAdapter().serializer();\n+                    SerializationUtil.configureMapper(MAPPER);\n+                    MAPPER.setSerializationInclusion(JsonInclude.Include.ALWAYS);\n+                    if (SearchDocument.class == modelClass) {\n                         TypeReference<Map<String, Object>> typeReference = new TypeReference<Map<String, Object>>() { };\n-                        SearchDocument doc = new SearchDocument(SearchObjectMapper.getInstance()\n-                            .convertValue(res.getValue(), typeReference));\n+                        SearchDocument doc = new SearchDocument(MAPPER.convertValue(res.getValue(), typeReference));\n                         return new SimpleResponse<T>(res, (T) doc);\n                     }\n-                    T document = SearchObjectMapper.getInstance().convertValue(res.getValue(), modelClass);\n+                    T document = MAPPER.convertValue(res.getValue(), modelClass);\n                     return new SimpleResponse<>(res, document);\n                 })\n                 .map(Function.identity());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ2OTk3MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444469971", "bodyText": "Could we just check SeachDocument.class == modelClass?", "author": "alzimmermsft", "createdAt": "2020-06-23T19:54:04Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java", "diffHunk": "@@ -475,20 +476,29 @@ SearchPagedFlux search(String searchText, SearchOptions searchOptions, RequestOp\n      * @see <a href=\"https://docs.microsoft.com/rest/api/searchservice/Lookup-Document\">Lookup document</a>\n      */\n     @ServiceMethod(returns = ReturnType.SINGLE)\n-    public Mono<Response<SearchDocument>> getDocumentWithResponse(String key, List<String> selectedFields,\n-        RequestOptions requestOptions) {\n-        return withContext(context -> getDocumentWithResponse(key, selectedFields, requestOptions, context));\n+    public <T> Mono<Response<T>> getDocumentWithResponse(String key, Class<T> modelClass,\n+        List<String> selectedFields, RequestOptions requestOptions) {\n+        return withContext(context -> getDocumentWithResponse(key, modelClass,\n+            selectedFields, requestOptions, context));\n     }\n \n-    Mono<Response<SearchDocument>> getDocumentWithResponse(String key, List<String> selectedFields,\n-        RequestOptions requestOptions, Context context) {\n+    @SuppressWarnings(\"unchecked\")\n+    <T> Mono<Response<T>> getDocumentWithResponse(String key, Class<T> modelClass,\n+        List<String> selectedFields, RequestOptions requestOptions, Context context) {\n         try {\n \n             return restClient.documents()\n                 .getWithRestResponseAsync(key, selectedFields, RequestOptionsConverter.map(requestOptions), context)\n                 .onErrorMap(DocumentResponseConversions::exceptionMapper)\n                 .map(res -> {\n-                    SearchDocument document = MAPPER.convertValue(res.getValue(), SearchDocument.class);\n+                    SearchObjectMapper.getInstance().setSerializationInclusion(JsonInclude.Include.ALWAYS);\n+                    if (SearchDocument.class.getTypeName().equals(modelClass.getTypeName())) {", "originalCommit": "69b2ef545de909c0a0da84ec04e9fae548b65eb7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "18543b6c8814ebe87c9c2a44afa7abccc4cbd6a3", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java\nindex 35e60a42624..0e355dd1e92 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/SearchAsyncClient.java\n\n@@ -491,14 +496,16 @@ public final class SearchAsyncClient {\n                 .getWithRestResponseAsync(key, selectedFields, RequestOptionsConverter.map(requestOptions), context)\n                 .onErrorMap(DocumentResponseConversions::exceptionMapper)\n                 .map(res -> {\n-                    SearchObjectMapper.getInstance().setSerializationInclusion(JsonInclude.Include.ALWAYS);\n-                    if (SearchDocument.class.getTypeName().equals(modelClass.getTypeName())) {\n+\n+                    ObjectMapper MAPPER = new JacksonAdapter().serializer();\n+                    SerializationUtil.configureMapper(MAPPER);\n+                    MAPPER.setSerializationInclusion(JsonInclude.Include.ALWAYS);\n+                    if (SearchDocument.class == modelClass) {\n                         TypeReference<Map<String, Object>> typeReference = new TypeReference<Map<String, Object>>() { };\n-                        SearchDocument doc = new SearchDocument(SearchObjectMapper.getInstance()\n-                            .convertValue(res.getValue(), typeReference));\n+                        SearchDocument doc = new SearchDocument(MAPPER.convertValue(res.getValue(), typeReference));\n                         return new SimpleResponse<T>(res, (T) doc);\n                     }\n-                    T document = SearchObjectMapper.getInstance().convertValue(res.getValue(), modelClass);\n+                    T document = MAPPER.convertValue(res.getValue(), modelClass);\n                     return new SimpleResponse<>(res, document);\n                 })\n                 .map(Function.identity());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3MTUwOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444471509", "bodyText": "Possible chance for race conditions here.", "author": "alzimmermsft", "createdAt": "2020-06-23T19:56:50Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java", "diffHunk": "@@ -56,19 +61,16 @@\n             indexAction.setActionType(actionType);\n         }\n \n-        ObjectMapper mapper = new JacksonAdapter().serializer();\n-        SerializationUtil.configureMapper(mapper);\n-\n         Map<String, Object> additionalProperties;\n         TypeReference<Map<String, Object>> typeRef = new TypeReference<Map<String, Object>>() {};\n         if (obj.getParamMap() != null) {\n             Map<String, Object> properties = obj.getParamMap();\n-\n-            mapper.setSerializationInclusion(JsonInclude.Include.ALWAYS);\n-            additionalProperties = mapper.convertValue(properties, typeRef);\n+            MAPPER.setSerializationInclusion(JsonInclude.Include.ALWAYS);\n+            additionalProperties = MAPPER.convertValue(properties, typeRef);\n         } else {\n             T properties = obj.getDocument();\n-            additionalProperties = mapper.convertValue(properties, typeRef);\n+            MAPPER.setSerializationInclusion(JsonInclude.Include.NON_DEFAULT);", "originalCommit": "69b2ef545de909c0a0da84ec04e9fae548b65eb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4MjUyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r444482524", "bodyText": "Good catch. Will have local ObjectMapper here in case other thread set something else.", "author": "sima-zhu", "createdAt": "2020-06-23T20:18:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3MTUwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "18543b6c8814ebe87c9c2a44afa7abccc4cbd6a3", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java\nindex 08439b5c485..8f9c9366b44 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java\n\n@@ -63,14 +59,17 @@ public final class IndexActionConverter {\n \n         Map<String, Object> additionalProperties;\n         TypeReference<Map<String, Object>> typeRef = new TypeReference<Map<String, Object>>() {};\n+\n+        ObjectMapper mapper = new JacksonAdapter().serializer();\n+        SerializationUtil.configureMapper(mapper);\n         if (obj.getParamMap() != null) {\n             Map<String, Object> properties = obj.getParamMap();\n-            MAPPER.setSerializationInclusion(JsonInclude.Include.ALWAYS);\n-            additionalProperties = MAPPER.convertValue(properties, typeRef);\n+            mapper.setSerializationInclusion(JsonInclude.Include.USE_DEFAULTS);\n+            additionalProperties = mapper.convertValue(properties, typeRef);\n         } else {\n             T properties = obj.getDocument();\n-            MAPPER.setSerializationInclusion(JsonInclude.Include.NON_DEFAULT);\n-            additionalProperties = MAPPER.convertValue(properties, typeRef);\n+            //mapper.setSerializationInclusion(JsonInclude.Include.USE_DEFAULTS);\n+            additionalProperties = mapper.convertValue(properties, typeRef);\n         }\n \n         indexAction.setAdditionalProperties(additionalProperties);\n"}}, {"oid": "18543b6c8814ebe87c9c2a44afa7abccc4cbd6a3", "url": "https://github.com/Azure/azure-sdk-for-java/commit/18543b6c8814ebe87c9c2a44afa7abccc4cbd6a3", "message": "1", "committedDate": "2020-06-24T00:42:36Z", "type": "commit"}, {"oid": "d119864c862d5cc199784213aa8dcb9b897f302f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d119864c862d5cc199784213aa8dcb9b897f302f", "message": "Support strongly-typed getDocument", "committedDate": "2020-06-24T01:23:07Z", "type": "commit"}, {"oid": "113a3bf121e1c9a24ea6a978000b7d66f2c5536c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/113a3bf121e1c9a24ea6a978000b7d66f2c5536c", "message": "Made more changes", "committedDate": "2020-06-24T02:06:07Z", "type": "commit"}, {"oid": "113a3bf121e1c9a24ea6a978000b7d66f2c5536c", "url": "https://github.com/Azure/azure-sdk-for-java/commit/113a3bf121e1c9a24ea6a978000b7d66f2c5536c", "message": "Made more changes", "committedDate": "2020-06-24T02:06:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyMTk5NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r445021995", "bodyText": "Given creating an ObjectMapper can be a heavy operation, thoughts on this class caching two mappers? One using the default configuration and the other setting inclusion to Include.ALWAYS.", "author": "alzimmermsft", "createdAt": "2020-06-24T16:30:31Z", "path": "sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java", "diffHunk": "@@ -56,14 +57,13 @@\n             indexAction.setActionType(actionType);\n         }\n \n-        ObjectMapper mapper = new JacksonAdapter().serializer();\n-        SerializationUtil.configureMapper(mapper);\n-\n         Map<String, Object> additionalProperties;\n         TypeReference<Map<String, Object>> typeRef = new TypeReference<Map<String, Object>>() {};\n+\n+        ObjectMapper mapper = new JacksonAdapter().serializer();", "originalCommit": "113a3bf121e1c9a24ea6a978000b7d66f2c5536c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNjQyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/12455#discussion_r445026428", "bodyText": "Will have two ObjectMapper as suggested.", "author": "sima-zhu", "createdAt": "2020-06-24T16:37:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyMTk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b2e9041a4430ca93b24911f742823d2698a1d7ab", "chunk": "diff --git a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java\nindex 63b7a00f0c7..e1224cdb345 100644\n--- a/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java\n+++ b/sdk/search/azure-search-documents/src/main/java/com/azure/search/documents/implementation/converters/IndexActionConverter.java\n\n@@ -60,15 +69,13 @@ public final class IndexActionConverter {\n         Map<String, Object> additionalProperties;\n         TypeReference<Map<String, Object>> typeRef = new TypeReference<Map<String, Object>>() {};\n \n-        ObjectMapper mapper = new JacksonAdapter().serializer();\n-        SerializationUtil.configureMapper(mapper);\n         if (obj.getParamMap() != null) {\n             Map<String, Object> properties = obj.getParamMap();\n-            mapper.setSerializationInclusion(JsonInclude.Include.ALWAYS);\n-            additionalProperties = mapper.convertValue(properties, typeRef);\n+            DYNAMIC_TYPE_MAPPER.setSerializationInclusion(JsonInclude.Include.ALWAYS);\n+            additionalProperties = DYNAMIC_TYPE_MAPPER.convertValue(properties, typeRef);\n         } else {\n             T properties = obj.getDocument();\n-            additionalProperties = mapper.convertValue(properties, typeRef);\n+            additionalProperties = STRONGLY_TYPE_MAPPER.convertValue(properties, typeRef);\n         }\n \n         indexAction.setAdditionalProperties(additionalProperties);\n"}}, {"oid": "b2e9041a4430ca93b24911f742823d2698a1d7ab", "url": "https://github.com/Azure/azure-sdk-for-java/commit/b2e9041a4430ca93b24911f742823d2698a1d7ab", "message": "Address PR feedback", "committedDate": "2020-06-24T16:40:53Z", "type": "commit"}]}