{"pr_number": 7839, "pr_title": "Cosmos Paged flux initial POC implementation v4", "pr_createdAt": "2020-01-30T00:16:21Z", "pr_url": "https://github.com/Azure/azure-sdk-for-java/pull/7839", "timeline": [{"oid": "d37beb23e1cb145736670a87ab5adaf422b27152", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d37beb23e1cb145736670a87ab5adaf422b27152", "message": "Updated pom files", "committedDate": "2020-01-24T00:01:54Z", "type": "commit"}, {"oid": "4dddcd35edb8d5e3e0774f697bbf8b1b0f9a1ccc", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4dddcd35edb8d5e3e0774f697bbf8b1b0f9a1ccc", "message": "Merge branch 'feature/cosmos/v4' into paged_flux_implementation_v4", "committedDate": "2020-01-24T22:18:52Z", "type": "commit"}, {"oid": "f89a22b868c88a60de8822ce9b6eb6ad44ef61b4", "url": "https://github.com/Azure/azure-sdk-for-java/commit/f89a22b868c88a60de8822ce9b6eb6ad44ef61b4", "message": "Added CosmosContinuablePagedFlux initial impelmentation and POC for query", "committedDate": "2020-01-30T00:06:19Z", "type": "commit"}, {"oid": "46dd6f2a02bf5ec7ee83e0ca99798deaa5ab578f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/46dd6f2a02bf5ec7ee83e0ca99798deaa5ab578f", "message": "Merged latest feature/cosmos/v4 changes", "committedDate": "2020-01-30T00:08:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NTI5NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#discussion_r373285294", "bodyText": "access should be package level not public.", "author": "moderakh", "createdAt": "2020-01-31T01:56:45Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContinuablePagedFlux.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.paging.ContinuablePagedFlux;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.Flux;\n+\n+import java.util.function.Function;\n+\n+/**\n+ * Cosmos implementation of {@link ContinuablePagedFlux}.\n+ * <p>\n+ * This type is a Flux that provides the ability to operate on pages of type {@link FeedResponse}\n+ * and individual items in such pages. This type supports {@link String} type continuation tokens,\n+ * allowing for restarting from a previously-retrieved continuation token.\n+ * <p>\n+ * For more information on the base type, refer {@link ContinuablePagedFlux}\n+ *\n+ * @param <T> The type of elements in a {@link com.azure.core.util.paging.ContinuablePage}\n+ * @see com.azure.core.util.paging.ContinuablePage\n+ * @see CosmosPagedFluxOptions\n+ * @see FeedResponse\n+ */\n+public class CosmosContinuablePagedFlux<T> extends ContinuablePagedFlux<String, T, FeedResponse<T>> {\n+\n+    private final Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> optionsFluxFunction;\n+\n+    public CosmosContinuablePagedFlux(Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> optionsFluxFunction) {", "originalCommit": "46dd6f2a02bf5ec7ee83e0ca99798deaa5ab578f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY0MjMxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#discussion_r373642319", "bodyText": "Done.", "author": "kushagraThapar", "createdAt": "2020-01-31T19:18:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NTI5NA=="}], "type": "inlineReview", "revised_code": {"commit": "3ecd26a46adcabd6fc2554c7a4e6acba22a804ee", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContinuablePagedFlux.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContinuablePagedFlux.java\nindex 190df89768d..8a3ae8de2f9 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContinuablePagedFlux.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContinuablePagedFlux.java\n\n@@ -28,7 +28,7 @@ public class CosmosContinuablePagedFlux<T> extends ContinuablePagedFlux<String,\n \n     private final Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> optionsFluxFunction;\n \n-    public CosmosContinuablePagedFlux(Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> optionsFluxFunction) {\n+    CosmosContinuablePagedFlux(Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> optionsFluxFunction) {\n         this.optionsFluxFunction = optionsFluxFunction;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NTczNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#discussion_r373285735", "bodyText": "this constructor is not user facing right? then it should not be public.", "author": "moderakh", "createdAt": "2020-01-31T01:58:43Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosPagedFluxOptions.java", "diffHunk": "@@ -0,0 +1,63 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+/**\n+ * Specifies paging options for Cosmos Paged Flux implementation.\n+ * @see CosmosContinuablePagedFlux\n+ */\n+public class CosmosPagedFluxOptions {\n+\n+    private String requestContinuation;\n+    private Integer maxItemCount;\n+\n+    public CosmosPagedFluxOptions(FeedOptions feedOptions) {", "originalCommit": "46dd6f2a02bf5ec7ee83e0ca99798deaa5ab578f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY0Mjc5Nw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#discussion_r373642797", "bodyText": "Its not even used for now :)\nI just added it as it made sense to add something with FeedOptions as parameter for constructor. I will change the public type to package-private.", "author": "kushagraThapar", "createdAt": "2020-01-31T19:19:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NTczNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3ecd26a46adcabd6fc2554c7a4e6acba22a804ee", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosPagedFluxOptions.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosPagedFluxOptions.java\nindex e155f8a4417..b5855b0212f 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosPagedFluxOptions.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosPagedFluxOptions.java\n\n@@ -12,12 +12,12 @@ public class CosmosPagedFluxOptions {\n     private String requestContinuation;\n     private Integer maxItemCount;\n \n-    public CosmosPagedFluxOptions(FeedOptions feedOptions) {\n+    CosmosPagedFluxOptions(FeedOptions feedOptions) {\n         this.requestContinuation = feedOptions.requestContinuation();\n         this.maxItemCount = feedOptions.maxItemCount();\n     }\n \n-    public CosmosPagedFluxOptions() {}\n+    CosmosPagedFluxOptions() {}\n \n     /**\n      * Gets the request continuation token.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NjcyOA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#discussion_r373286728", "bodyText": "aren't we going to have two options class types? now it is not clear if continuationToken is set in FeedOption and also passed by 'CosmosContinuablePageFlux.byPage(continuationToken)' who overrides who.", "author": "moderakh", "createdAt": "2020-01-31T02:04:06Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosAsyncContainer.java", "diffHunk": "@@ -329,22 +329,33 @@ public String getId() {\n      * <p>\n      * After subscription the operation will be performed. The {@link Flux} will\n      * contain one or several feed response of the obtained items. In case of\n-     * failure the {@link Flux} will error.\n+     * failure the {@link CosmosContinuablePagedFlux} will error.\n      *\n      * @param <T> the type parameter\n      * @param querySpec the SQL query specification.\n      * @param options the feed options.\n      * @param klass the class type\n-     * @return a {@link Flux} containing one or several feed response pages of the obtained items or an error.\n+     * @return a {@link CosmosContinuablePagedFlux} containing one or several feed response pages of the obtained items or an error.\n      */\n-    public <T> Flux<FeedResponse<T>> queryItems(SqlQuerySpec querySpec, FeedOptions options, Class<T> klass) {\n-        return getDatabase().getDocClientWrapper().queryDocuments(getLink(),\n-                                                                  querySpec, options)\n-                   .map(response -> BridgeInternal.createFeedResponseWithQueryMetrics(\n-                       (CosmosItemProperties\n-                            .getTypedResultsFromV2Results((List<Document>) (Object) response.getResults(),\n-                                                          klass)), response.getResponseHeaders(),\n-                       response.queryMetrics()));\n+    public <T> CosmosContinuablePagedFlux<T> queryItems(SqlQuerySpec querySpec, FeedOptions options, Class<T> klass) {", "originalCommit": "46dd6f2a02bf5ec7ee83e0ca99798deaa5ab578f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY0NTQ4Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#discussion_r373645486", "bodyText": "I agree with the confusion as \"who overrides who\".\nWe don't need to necessarily split them. Since continuationToken is used internally from feedOptions class, which we don't need to change.\nI think a better solution here would be to hide public setter of continuationToken and maxItemCount. So that end users would have to go via byPage(continuationToken, pageSize) route to set them up, and internally we can copy them to feedOptions, and keep things as it is. We will not have to change the business logic for these.", "author": "kushagraThapar", "createdAt": "2020-01-31T19:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NjcyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY0OTUyNA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#discussion_r373649524", "bodyText": "some questions:\n\nAren't we going to split the options as discussed earlier?\ncan you please run a perf benchmark with and without this PR using this benchmark, and see how different the numbers are?\n#6771\n\n\nRegarding options, let's discuss that offline.\nRegarding benchmark, I will run them today and will post the numbers here.", "author": "kushagraThapar", "createdAt": "2020-01-31T19:34:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NjcyOA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "3ecd26a46adcabd6fc2554c7a4e6acba22a804ee", "url": "https://github.com/Azure/azure-sdk-for-java/commit/3ecd26a46adcabd6fc2554c7a4e6acba22a804ee", "message": "Changed constructor to package level. Updated mixed benchmark to take maxItemCount in the API", "committedDate": "2020-01-31T20:43:12Z", "type": "commit"}, {"oid": "4b92edcd9d0e5101f47edadf9b9c8fd3e08faf9b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/4b92edcd9d0e5101f47edadf9b9c8fd3e08faf9b", "message": "Experimenting Schedulers for elastic pool", "committedDate": "2020-02-01T21:58:52Z", "type": "commit"}, {"oid": "d53d439486d53c2820bf1a5732fbd5fc1d2d5d12", "url": "https://github.com/Azure/azure-sdk-for-java/commit/d53d439486d53c2820bf1a5732fbd5fc1d2d5d12", "message": "Reverted flux experiments", "committedDate": "2020-02-02T12:53:45Z", "type": "commit"}, {"oid": "32a8539420af4d992fc2f3dd7d4920ee1446e907", "url": "https://github.com/Azure/azure-sdk-for-java/commit/32a8539420af4d992fc2f3dd7d4920ee1446e907", "message": "Removed azure-core unwanted dependencies", "committedDate": "2020-02-03T06:52:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2NDM1NQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#discussion_r374264355", "bodyText": "each of the reactor transformation will have its own internal buffering, we need to make sure after the transformation, we fetch limited number of items/pages, and possibly configure how many pages should be pre-fetched.\nWe should have some tests similar to BackPressureCrossPartitionTest and BackpressureTest on the surface query API.\nNot necessarily in this PR. but we need to have that.", "author": "moderakh", "createdAt": "2020-02-03T18:26:37Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContinuablePagedFlux.java", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+import com.azure.core.util.IterableStream;\n+import com.azure.core.util.paging.ContinuablePagedFlux;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.Flux;\n+\n+import java.util.function.Function;\n+\n+/**\n+ * Cosmos implementation of {@link ContinuablePagedFlux}.\n+ * <p>\n+ * This type is a Flux that provides the ability to operate on pages of type {@link FeedResponse}\n+ * and individual items in such pages. This type supports {@link String} type continuation tokens,\n+ * allowing for restarting from a previously-retrieved continuation token.\n+ * <p>\n+ * For more information on the base type, refer {@link ContinuablePagedFlux}\n+ *\n+ * @param <T> The type of elements in a {@link com.azure.core.util.paging.ContinuablePage}\n+ * @see com.azure.core.util.paging.ContinuablePage\n+ * @see CosmosPagedFluxOptions\n+ * @see FeedResponse\n+ */\n+public class CosmosContinuablePagedFlux<T> extends ContinuablePagedFlux<String, T, FeedResponse<T>> {\n+\n+    private final Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> optionsFluxFunction;\n+\n+    CosmosContinuablePagedFlux(Function<CosmosPagedFluxOptions, Flux<FeedResponse<T>>> optionsFluxFunction) {\n+        this.optionsFluxFunction = optionsFluxFunction;\n+    }\n+\n+    @Override\n+    public Flux<FeedResponse<T>> byPage() {\n+        CosmosPagedFluxOptions cosmosPagedFluxOptions = new CosmosPagedFluxOptions();\n+\n+        return this.optionsFluxFunction.apply(cosmosPagedFluxOptions);\n+    }\n+\n+    @Override\n+    public Flux<FeedResponse<T>> byPage(String continuationToken) {\n+        CosmosPagedFluxOptions cosmosPagedFluxOptions = new CosmosPagedFluxOptions();\n+        cosmosPagedFluxOptions.setRequestContinuation(continuationToken);\n+\n+        return this.optionsFluxFunction.apply(cosmosPagedFluxOptions);\n+    }\n+\n+    @Override\n+    public Flux<FeedResponse<T>> byPage(int preferredPageSize) {\n+        CosmosPagedFluxOptions cosmosPagedFluxOptions = new CosmosPagedFluxOptions();\n+        cosmosPagedFluxOptions.setMaxItemCount(preferredPageSize);\n+\n+        return this.optionsFluxFunction.apply(cosmosPagedFluxOptions);\n+    }\n+\n+    @Override\n+    public Flux<FeedResponse<T>> byPage(String continuationToken, int preferredPageSize) {\n+        CosmosPagedFluxOptions cosmosPagedFluxOptions = new CosmosPagedFluxOptions();\n+        cosmosPagedFluxOptions.setRequestContinuation(continuationToken);\n+        cosmosPagedFluxOptions.setMaxItemCount(preferredPageSize);\n+\n+        return this.optionsFluxFunction.apply(cosmosPagedFluxOptions);\n+    }\n+\n+    /**\n+     * Subscribe to consume all items of type {@code T} in the sequence respectively.\n+     * This is recommended for most common scenarios. This will seamlessly fetch next\n+     * page when required and provide with a {@link Flux} of items.\n+     *\n+     * @param coreSubscriber The subscriber for this {@link CosmosContinuablePagedFlux}\n+     */\n+    @Override\n+    public void subscribe(CoreSubscriber<? super T> coreSubscriber) {\n+        Flux<FeedResponse<T>> pagedResponse = this.byPage();\n+        pagedResponse.flatMap(tFeedResponse -> {", "originalCommit": "32a8539420af4d992fc2f3dd7d4920ee1446e907", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMTU0Ng==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#discussion_r374321546", "bodyText": "Sure, will add those. Thanks for the suggestion.", "author": "kushagraThapar", "createdAt": "2020-02-03T20:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2NDM1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0MTk3NA==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#discussion_r374441974", "bodyText": "@moderakh Added back pressure tests for subscribe call on CosmosContinuablePagedFlux object.", "author": "kushagraThapar", "createdAt": "2020-02-04T02:10:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2NDM1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9a252830a15ab284f918949319edaf8f3e2ad52f", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContinuablePagedFlux.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContinuablePagedFlux.java\nindex 8a3ae8de2f9..4272f4d26c0 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContinuablePagedFlux.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosContinuablePagedFlux.java\n\n@@ -5,6 +5,7 @@ package com.azure.cosmos;\n \n import com.azure.core.util.IterableStream;\n import com.azure.core.util.paging.ContinuablePagedFlux;\n+import com.azure.cosmos.implementation.CosmosPagedFluxOptions;\n import reactor.core.CoreSubscriber;\n import reactor.core.publisher.Flux;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2ODUyNQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#discussion_r374268525", "bodyText": "I only see this is used in the implementation of CosmosContinuablePagedFlux but not exposed in the public surface area\nas it is in com.azure.cosmos is it used in the public surface area?", "author": "moderakh", "createdAt": "2020-02-03T18:34:28Z", "path": "sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosPagedFluxOptions.java", "diffHunk": "@@ -0,0 +1,63 @@\n+// Copyright (c) Microsoft Corporation. All rights reserved.\n+// Licensed under the MIT License.\n+\n+package com.azure.cosmos;\n+\n+/**\n+ * Specifies paging options for Cosmos Paged Flux implementation.\n+ * @see CosmosContinuablePagedFlux\n+ */\n+public class CosmosPagedFluxOptions {", "originalCommit": "32a8539420af4d992fc2f3dd7d4920ee1446e907", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMTcyNw==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#discussion_r374321727", "bodyText": "Good point, we should have it in implementation folder, I will move it.", "author": "kushagraThapar", "createdAt": "2020-02-03T20:24:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2ODUyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQzMTIxOQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#discussion_r374431219", "bodyText": "Done.", "author": "kushagraThapar", "createdAt": "2020-02-04T01:22:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2ODUyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwNDc1MQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#discussion_r374804751", "bodyText": "This is still in the public package.", "author": "moderakh", "createdAt": "2020-02-04T17:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2ODUyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyMDU2OQ==", "url": "https://github.com/Azure/azure-sdk-for-java/pull/7839#discussion_r374820569", "bodyText": "I see it in implementation package.\nhttps://github.com/Azure/azure-sdk-for-java/pull/7839/files#diff-2028f0a4901c305ffa200afc82a2cf05", "author": "kushagraThapar", "createdAt": "2020-02-04T17:39:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2ODUyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9a252830a15ab284f918949319edaf8f3e2ad52f", "chunk": "diff --git a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosPagedFluxOptions.java b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosPagedFluxOptions.java\nsimilarity index 85%\nrename from sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosPagedFluxOptions.java\nrename to sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosPagedFluxOptions.java\nindex b5855b0212f..b23cf504a5f 100644\n--- a/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/CosmosPagedFluxOptions.java\n+++ b/sdk/cosmos/azure-cosmos/src/main/java/com/azure/cosmos/implementation/CosmosPagedFluxOptions.java\n\n@@ -1,7 +1,9 @@\n // Copyright (c) Microsoft Corporation. All rights reserved.\n // Licensed under the MIT License.\n \n-package com.azure.cosmos;\n+package com.azure.cosmos.implementation;\n+\n+import com.azure.cosmos.CosmosContinuablePagedFlux;\n \n /**\n  * Specifies paging options for Cosmos Paged Flux implementation.\n"}}, {"oid": "8e4fb2d3cc9328710b855eba5d4476783a2535bd", "url": "https://github.com/Azure/azure-sdk-for-java/commit/8e4fb2d3cc9328710b855eba5d4476783a2535bd", "message": "Moved azure-core dependency to parent pom and used same version in azure-cosmos, benchmark and examples pom", "committedDate": "2020-02-03T20:12:57Z", "type": "commit"}, {"oid": "9a252830a15ab284f918949319edaf8f3e2ad52f", "url": "https://github.com/Azure/azure-sdk-for-java/commit/9a252830a15ab284f918949319edaf8f3e2ad52f", "message": "Moved CosmosPagedFluxOptions to implementation package", "committedDate": "2020-02-03T20:27:24Z", "type": "commit"}, {"oid": "815b30864c83277bb4599d4475b36098ec9a3906", "url": "https://github.com/Azure/azure-sdk-for-java/commit/815b30864c83277bb4599d4475b36098ec9a3906", "message": "Added back pressure tests for CosmosContinuablePagedFlux subscribe call", "committedDate": "2020-02-04T02:09:44Z", "type": "commit"}, {"oid": "1b838224b658f310e1f8278123d2e8788c93226b", "url": "https://github.com/Azure/azure-sdk-for-java/commit/1b838224b658f310e1f8278123d2e8788c93226b", "message": "Merged latest feature/cosmos/v4", "committedDate": "2020-02-04T18:13:17Z", "type": "commit"}, {"oid": "79439359dba3e7f6e8cc88dc5fc09c983dc0d5aa", "url": "https://github.com/Azure/azure-sdk-for-java/commit/79439359dba3e7f6e8cc88dc5fc09c983dc0d5aa", "message": "Updated queryItems sync API to return IterableStream", "committedDate": "2020-02-04T20:32:36Z", "type": "commit"}]}