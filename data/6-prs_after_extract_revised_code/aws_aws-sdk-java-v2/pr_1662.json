{"pr_number": 1662, "pr_title": "Dynamodb-enhanced [preview]: Updates all operations with consumer sty\u2026", "pr_createdAt": "2020-02-24T19:51:13Z", "pr_url": "https://github.com/aws/aws-sdk-java-v2/pull/1662", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ3OTQxMQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1662#discussion_r383479411", "bodyText": "This is the line that was changed from the original PR.", "author": "bmaizels", "createdAt": "2020-02-24T19:52:21Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncBatchWriteItemTest.java", "diffHunk": "@@ -192,58 +189,78 @@ public void multiplePut() {\n         List<WriteBatch> writeBatches =\n             asList(WriteBatch.builder(Record1.class)\n                              .mappedTableResource(mappedTable1)\n-                             .addPutItem(PutItemEnhancedRequest.create(RECORDS_1.get(0)))\n+                             .addPutItem(r -> r.item(RECORDS_1.get(0)))\n                              .build(),\n                    WriteBatch.builder(Record2.class)\n                              .mappedTableResource(mappedTable2)\n-                             .addPutItem(PutItemEnhancedRequest.create(RECORDS_2.get(0)))\n+                             .addPutItem(r -> r.item(RECORDS_2.get(0)))\n                              .build());\n \n         enhancedAsyncClient.batchWriteItem(BatchWriteItemEnhancedRequest.builder().writeBatches(writeBatches).build()).join();\n \n-        Record1 record1 = mappedTable1.getItem(GetItemEnhancedRequest.create(Key.create(numberValue(0)))).join();\n-        Record2 record2 = mappedTable2.getItem(GetItemEnhancedRequest.create(Key.create(numberValue(0)))).join();\n+        Record1 record1 = mappedTable1.getItem(r -> r.key(Key.create(numberValue(0)))).join();\n+        Record2 record2 = mappedTable2.getItem(r -> r.key(Key.create(numberValue(0)))).join();\n         assertThat(record1, is(RECORDS_1.get(0)));\n         assertThat(record2, is(RECORDS_2.get(0)));\n     }\n \n     @Test\n     public void singleDelete() {\n-        mappedTable1.putItem(PutItemEnhancedRequest.create(RECORDS_1.get(0))).join();\n+        mappedTable1.putItem(Record1.class, r -> r.item(RECORDS_1.get(0))).join();\n \n         List<WriteBatch> writeBatches =\n             singletonList(WriteBatch.builder(Record1.class)\n                                     .mappedTableResource(mappedTable1)\n-                                    .addDeleteItem(DeleteItemEnhancedRequest.create(Key.create(numberValue(0))))\n+                                    .addDeleteItem(r -> r.key(Key.create(numberValue(0))))\n                                     .build());\n \n         enhancedAsyncClient.batchWriteItem(BatchWriteItemEnhancedRequest.builder().writeBatches(writeBatches).build()).join();\n \n-        Record1 record = mappedTable1.getItem(GetItemEnhancedRequest.create(Key.create(numberValue(0)))).join();\n+        Record1 record = mappedTable1.getItem(r -> r.key(Key.create(numberValue(0)))).join();\n         assertThat(record, is(nullValue()));\n     }\n \n     @Test\n     public void multipleDelete() {\n-        mappedTable1.putItem(PutItemEnhancedRequest.create(RECORDS_1.get(0))).join();\n-        mappedTable2.putItem(PutItemEnhancedRequest.create(RECORDS_2.get(0))).join();\n+        mappedTable1.putItem(Record1.class, r -> r.item(RECORDS_1.get(0))).join();\n+        mappedTable2.putItem(Record2.class, r -> r.item(RECORDS_2.get(0))).join();\n \n         List<WriteBatch> writeBatches =\n             asList(WriteBatch.builder(Record1.class)\n                              .mappedTableResource(mappedTable1)\n-                             .addDeleteItem(DeleteItemEnhancedRequest.create(Key.create(numberValue(0))))\n+                             .addDeleteItem(DeleteItemEnhancedRequest.builder().key(Key.create(numberValue(0))).build())\n                              .build(),\n                    WriteBatch.builder(Record2.class)\n                              .mappedTableResource(mappedTable2)\n-                             .addDeleteItem(DeleteItemEnhancedRequest.create(Key.create(numberValue(0))))\n+                             .addDeleteItem(DeleteItemEnhancedRequest.builder().key(Key.create(numberValue(0))).build())\n                              .build());\n \n         enhancedAsyncClient.batchWriteItem(BatchWriteItemEnhancedRequest.builder().writeBatches(writeBatches).build()).join();\n \n-        Record1 record1 = mappedTable1.getItem(GetItemEnhancedRequest.create(Key.create(numberValue(0)))).join();\n-        Record2 record2 = mappedTable2.getItem(GetItemEnhancedRequest.create(Key.create(numberValue(0)))).join();\n+        Record1 record1 = mappedTable1.getItem(r -> r.key(Key.create(numberValue(0)))).join();\n+        Record2 record2 = mappedTable2.getItem(r -> r.key(Key.create(numberValue(0)))).join();\n         assertThat(record1, is(nullValue()));\n         assertThat(record2, is(nullValue()));\n     }\n \n+    @Test\n+    public void mixedCommands() {\n+        mappedTable1.putItem(Record1.class, r -> r.item(RECORDS_1.get(0)));\n+        mappedTable2.putItem(Record2.class, r -> r.item(RECORDS_2.get(0)));\n+\n+        enhancedAsyncClient.batchWriteItem(r -> r.writeBatches(\n+            WriteBatch.builder(Record1.class)\n+                      .mappedTableResource(mappedTable1)\n+                      .addPutItem(i -> i.item(RECORDS_1.get(1)))\n+                      .build(),\n+            WriteBatch.builder(Record2.class)\n+                      .mappedTableResource(mappedTable2)\n+                      .addDeleteItem(i -> i.key(Key.create(numberValue(0))))\n+                      .build())).join();", "originalCommit": "2d969b518ea71b3eb8ebbff55b1b8a2506483afe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c66371185fbbba55827e45c6332a0f0f3081b9c4", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncBatchWriteItemTest.java b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncBatchWriteItemTest.java\nindex 402c3adcbe..fef5892f20 100644\n--- a/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncBatchWriteItemTest.java\n+++ b/services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncBatchWriteItemTest.java\n\n@@ -245,8 +245,8 @@ public class AsyncBatchWriteItemTest extends LocalDynamoDbAsyncTestBase {\n \n     @Test\n     public void mixedCommands() {\n-        mappedTable1.putItem(Record1.class, r -> r.item(RECORDS_1.get(0)));\n-        mappedTable2.putItem(Record2.class, r -> r.item(RECORDS_2.get(0)));\n+        mappedTable1.putItem(Record1.class, r -> r.item(RECORDS_1.get(0))).join();\n+        mappedTable2.putItem(Record2.class, r -> r.item(RECORDS_2.get(0))).join();\n \n         enhancedAsyncClient.batchWriteItem(r -> r.writeBatches(\n             WriteBatch.builder(Record1.class)\n"}}, {"oid": "1c4a62d62caed872ac6eb4a01e9a8dc2c785e94a", "url": "https://github.com/aws/aws-sdk-java-v2/commit/1c4a62d62caed872ac6eb4a01e9a8dc2c785e94a", "message": "Dynamodb-enhanced [preview]: Updates all operations with consumer style invocations", "committedDate": "2020-02-24T20:35:08Z", "type": "forcePushed"}, {"oid": "c66371185fbbba55827e45c6332a0f0f3081b9c4", "url": "https://github.com/aws/aws-sdk-java-v2/commit/c66371185fbbba55827e45c6332a0f0f3081b9c4", "message": "Dynamodb-enhanced [preview]: Updates all operations with consumer style invocations", "committedDate": "2020-02-24T22:05:37Z", "type": "forcePushed"}, {"oid": "da5a15ec063bc00674d6f4f1274e2a23f5ddaacc", "url": "https://github.com/aws/aws-sdk-java-v2/commit/da5a15ec063bc00674d6f4f1274e2a23f5ddaacc", "message": "Dynamodb-enhanced [preview]: Updates all operations with consumer style invocations", "committedDate": "2020-02-24T22:29:32Z", "type": "commit"}, {"oid": "da5a15ec063bc00674d6f4f1274e2a23f5ddaacc", "url": "https://github.com/aws/aws-sdk-java-v2/commit/da5a15ec063bc00674d6f4f1274e2a23f5ddaacc", "message": "Dynamodb-enhanced [preview]: Updates all operations with consumer style invocations", "committedDate": "2020-02-24T22:29:32Z", "type": "forcePushed"}]}