{"pr_number": 1689, "pr_title": "Clean-up and refactor of attribute and attribute tags classes; prepar\u2026", "pr_createdAt": "2020-03-06T03:16:50Z", "pr_url": "https://github.com/aws/aws-sdk-java-v2/pull/1689", "timeline": [{"oid": "da4aba0e16117a6393ff1168af7fed0972259295", "url": "https://github.com/aws/aws-sdk-java-v2/commit/da4aba0e16117a6393ff1168af7fed0972259295", "message": "Clean-up and refactor of attribute and attribute tags classes; preparation for injection of custom converters", "committedDate": "2020-03-06T03:21:11Z", "type": "forcePushed"}, {"oid": "58fbca3ac454e0c1d93c9f6de889d041ff4ccebf", "url": "https://github.com/aws/aws-sdk-java-v2/commit/58fbca3ac454e0c1d93c9f6de889d041ff4ccebf", "message": "Clean-up and refactor of attribute and attribute tags classes; preparation for injection of custom converters", "committedDate": "2020-03-06T04:17:28Z", "type": "forcePushed"}, {"oid": "2e597ba33457fc8ebca4e3f1949798dabc40a02f", "url": "https://github.com/aws/aws-sdk-java-v2/commit/2e597ba33457fc8ebca4e3f1949798dabc40a02f", "message": "Clean-up and refactor of attribute and attribute tags classes; preparation for injection of custom converters", "committedDate": "2020-03-06T16:44:10Z", "type": "forcePushed"}, {"oid": "9e0f42a51099a57cf1b4bec5a7dac3ec600a4111", "url": "https://github.com/aws/aws-sdk-java-v2/commit/9e0f42a51099a57cf1b4bec5a7dac3ec600a4111", "message": "Clean-up and refactor of attribute and attribute tags classes; preparation for injection of custom converters", "committedDate": "2020-03-06T17:25:22Z", "type": "forcePushed"}, {"oid": "44cf5fa89b156af77c3c9416022ae47dfbfab74c", "url": "https://github.com/aws/aws-sdk-java-v2/commit/44cf5fa89b156af77c3c9416022ae47dfbfab74c", "message": "Clean-up and refactor of attribute and attribute tags classes; preparation for injection of custom converters", "committedDate": "2020-03-06T17:30:41Z", "type": "forcePushed"}, {"oid": "f1b526010485a88c4aa29a16f38580f53c516842", "url": "https://github.com/aws/aws-sdk-java-v2/commit/f1b526010485a88c4aa29a16f38580f53c516842", "message": "Clean-up and refactor of attribute and attribute tags classes; preparation for injection of custom converters", "committedDate": "2020-03-10T15:50:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMTI2OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390021269", "bodyText": "Line 48 below in javadoc below (not selectable in PR) has the old attribute definition as an example.", "author": "cenedhryn", "createdAt": "2020-03-09T23:46:22Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/extensions/VersionedRecordExtension.java", "diffHunk": "@@ -21,15 +21,16 @@\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.function.Consumer;\n import java.util.function.Function;\n-\n import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.enhanced.dynamodb.AttributeValueType;\n import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClientExtension;\n import software.amazon.awssdk.enhanced.dynamodb.Expression;\n import software.amazon.awssdk.enhanced.dynamodb.TableMetadata;\n import software.amazon.awssdk.enhanced.dynamodb.internal.operations.OperationContext;\n-import software.amazon.awssdk.enhanced.dynamodb.mapper.AttributeTag;\n-import software.amazon.awssdk.enhanced.dynamodb.mapper.AttributeValueType;\n+import software.amazon.awssdk.enhanced.dynamodb.mapper.StaticAttributeTag;\n+import software.amazon.awssdk.enhanced.dynamodb.mapper.StaticTableMetadata;\n import software.amazon.awssdk.services.dynamodb.model.AttributeValue;", "originalCommit": "44cf5fa89b156af77c3c9416022ae47dfbfab74c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3ODA0OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390478049", "bodyText": "Will fix.", "author": "bmaizels", "createdAt": "2020-03-10T17:15:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMTI2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f1b526010485a88c4aa29a16f38580f53c516842", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/extensions/VersionedRecordExtension.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/extensions/VersionedRecordExtension.java\nindex bdd46e9cb9..e67ef045f6 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/extensions/VersionedRecordExtension.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/extensions/VersionedRecordExtension.java\n\n@@ -38,15 +38,22 @@ import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n  * to automatically track each revision of the record as it is modified. To use this extension, first load it as part\n  * of your MappedTable instantiation:\n  *\n+ * <pre>\n+ * {@code\n  * MappedTable.builder()\n  *            .extendWith(VersionedRecordExtension.builder().build())\n  *            .build();\n+ * }\n+ * </pre>\n  *\n+ * <p>\n  * Then create an attribute in your model that will be used to store the record version number. This attribute must\n  * be an 'integer' type numeric (long or integer), and you need to tag it as the version attribute:\n  *\n+ * <p>\n  * ..., integerNumber(\"version\", Customer::getVersion, Customer::setVersion).as(version()), ...\n  *\n+ * <p>\n  * Then, whenever a record is written the write operation will only succeed if the version number of the record has not\n  * been modified since it was last read by the application. Every time a new version of the record is successfully\n  * written to the database, the record version number will be automatically incremented.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyOTczNg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390029736", "bodyText": "I'm assuming all the moving around of static imports is a consistency move, pls confirm.", "author": "cenedhryn", "createdAt": "2020-03-10T00:16:59Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/converters/attribute/OptionalAttributeConvertersTest.java", "diffHunk": "@@ -16,10 +16,10 @@\n package software.amazon.awssdk.enhanced.dynamodb.converters.attribute;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static software.amazon.awssdk.enhanced.dynamodb.internal.converter.attribute.EnhancedAttributeValue.fromNumber;\n-import static software.amazon.awssdk.enhanced.dynamodb.internal.converter.attribute.EnhancedAttributeValue.nullValue;\n import static software.amazon.awssdk.enhanced.dynamodb.converters.attribute.ConverterTestUtils.transformFrom;\n import static software.amazon.awssdk.enhanced.dynamodb.converters.attribute.ConverterTestUtils.transformTo;\n+import static software.amazon.awssdk.enhanced.dynamodb.internal.converter.attribute.EnhancedAttributeValue.fromNumber;", "originalCommit": "44cf5fa89b156af77c3c9416022ae47dfbfab74c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3ODYyNA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390478624", "bodyText": "Yes, I applied a consistent set of import rules across the whole project as I was already touching >50% of the files in this PR.", "author": "bmaizels", "createdAt": "2020-03-10T17:16:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyOTczNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxMjg5MQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390412891", "bodyText": "This line ends unexpectedly.", "author": "cenedhryn", "createdAt": "2020-03-10T15:43:42Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/StaticAttributeTag.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.enhanced.dynamodb.mapper;\n+\n+import java.util.function.Consumer;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.enhanced.dynamodb.AttributeValueType;\n+\n+/**\n+ * Interface for a tag that can be applied to any {@link StaticAttribute}. When a tagged attribute is added to a\n+ * {@link software.amazon.awssdk.enhanced.dynamodb.TableSchema}, the table metadata stored on the schema will be updated\n+ * by calling the {@link #modifyMetadata(String, AttributeValueType)} method for every tag associated with the\n+ * attribute.\n+ * <p>\n+ * Core implementations of these tags that", "originalCommit": "44cf5fa89b156af77c3c9416022ae47dfbfab74c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3ODc1NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390478755", "bodyText": "Will fix.", "author": "bmaizels", "createdAt": "2020-03-10T17:16:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxMjg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzOTMzMw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390539333", "bodyText": "Oddly enough I can't find it, I wonder if it got crunched in a merge. We'll see what happens when I push.", "author": "bmaizels", "createdAt": "2020-03-10T18:53:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxMjg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0MzYwNg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390543606", "bodyText": "Oh never mind I was looking at table tags, not attribute tags. Fixed.", "author": "bmaizels", "createdAt": "2020-03-10T19:00:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxMjg5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e9410dfa7b9972c1eeda9fc8f2ebfb887fe00996", "chunk": "diff --git a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/StaticAttributeTag.java b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/StaticAttributeTag.java\nindex 3dda6c5613..d4a3ec9a92 100644\n--- a/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/StaticAttributeTag.java\n+++ b/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/StaticAttributeTag.java\n\n@@ -25,7 +25,8 @@ import software.amazon.awssdk.enhanced.dynamodb.AttributeValueType;\n  * by calling the {@link #modifyMetadata(String, AttributeValueType)} method for every tag associated with the\n  * attribute.\n  * <p>\n- * Core implementations of these tags that\n+ * Common implementations of this interface that can be used to declare indices in your schema can be found in\n+ * {@link StaticAttributeTags}.\n  */\n @SdkPublicApi\n public interface StaticAttributeTag {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyNTc5NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390425794", "bodyText": "Why did you change to HashMap?", "author": "cenedhryn", "createdAt": "2020-03-10T16:00:46Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/mapper/StaticTableMetadata.java", "diffHunk": "@@ -166,37 +171,31 @@ public int hashCode() {\n         return result;\n     }\n \n-    @ThreadSafe\n+    /**\n+     * Builder for {@link StaticTableMetadata}\n+     */\n     public static class Builder {\n-        private final Map<String, Object> customMetadata = new ConcurrentHashMap<>();\n-        private final Map<String, Index> indexByNameMap = new ConcurrentHashMap<>();\n-        private final Map<String, AttributeValueType> keyAttributes = new ConcurrentHashMap<>();\n+        private final Map<String, Object> customMetadata = new HashMap<>();", "originalCommit": "44cf5fa89b156af77c3c9416022ae47dfbfab74c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3OTIyOA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390479228", "bodyText": "I realized there was no value in maintaining this class as threadsafe as it was an immutable class and we can just follow our standard patterns.", "author": "bmaizels", "createdAt": "2020-03-10T17:17:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyNTc5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4MDA3MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390480070", "bodyText": "Well to be more specific we don't require any of our builders to be threadsafe. It's generally well understood they are not.", "author": "bmaizels", "createdAt": "2020-03-10T17:18:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyNTc5NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzMjYxMw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390432613", "bodyText": "I have noticed that in many test files, we're defining but not using the secondary index. Should we consider adding more tests to target that and cover more behavior?", "author": "cenedhryn", "createdAt": "2020-03-10T16:10:07Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/AsyncBasicCrudTest.java", "diffHunk": "@@ -170,27 +168,43 @@ public int hashCode() {\n \n     private static final TableSchema<Record> TABLE_SCHEMA =\n         StaticTableSchema.builder(Record.class)\n-                   .newItemSupplier(Record::new)\n-                   .attributes(\n-                       attribute(\"id\", TypeToken.of(String.class), Record::getId, Record::setId).as(primaryPartitionKey()),\n-                       attribute(\"sort\", TypeToken.of(String.class), Record::getSort, Record::setSort).as(primarySortKey()),\n-                       // This is a DynamoDb reserved word, forces testing of AttributeNames\n-                       attribute(\"attribute\", TypeToken.of(String.class), Record::getAttribute, Record::setAttribute),\n-                       // Using tricky characters to force scrubbing of attributeName tokens\n-                       attribute(\"*attribute2*\", TypeToken.of(String.class), Record::getAttribute2, Record::setAttribute2)\n-                           .as(secondaryPartitionKey(\"gsi_1\")),\n-                       attribute(\"attribute3\", TypeToken.of(String.class), Record::getAttribute3, Record::setAttribute3)\n-                           .as(secondarySortKey(\"gsi_1\")))\n-                   .build();\n+                         .newItemSupplier(Record::new)\n+                         .addAttribute(String.class, a -> a.name(\"id\")\n+                                                           .getter(Record::getId)\n+                                                           .setter(Record::setId)\n+                                                           .tags(primaryPartitionKey()))\n+                         .addAttribute(String.class, a -> a.name(\"sort\")\n+                                                           .getter(Record::getSort)\n+                                                           .setter(Record::setSort)\n+                                                           .tags(primarySortKey()))\n+                         .addAttribute(String.class, a -> a.name(\"attribute\")\n+                                                           .getter(Record::getAttribute)\n+                                                           .setter(Record::setAttribute))\n+                         .addAttribute(String.class, a -> a.name(\"attribute2*\")", "originalCommit": "f1b526010485a88c4aa29a16f38580f53c516842", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4MjAzNA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390482034", "bodyText": "Query and scan are the only two operations currently supported by secondary indices and we have good test coverage on those. These tests share a lot of the POJOs so in a way what is being tested here is that non-index operations work fine when indexes are present.", "author": "bmaizels", "createdAt": "2020-03-10T17:21:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzMjYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ5NDk3Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1689#discussion_r390494972", "bodyText": "ok", "author": "cenedhryn", "createdAt": "2020-03-10T17:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzMjYxMw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "51ad8c2ef8582c483ea265dbd779c02ef23417a8", "url": "https://github.com/aws/aws-sdk-java-v2/commit/51ad8c2ef8582c483ea265dbd779c02ef23417a8", "message": "Clean-up and refactor of attribute and attribute tags classes; preparation for injection of custom converters", "committedDate": "2020-03-10T18:54:14Z", "type": "forcePushed"}, {"oid": "8012cb844b22c8978639993809cc0bdab473631a", "url": "https://github.com/aws/aws-sdk-java-v2/commit/8012cb844b22c8978639993809cc0bdab473631a", "message": "Clean-up and refactor of attribute and attribute tags classes; preparation for injection of custom converters", "committedDate": "2020-03-10T18:58:03Z", "type": "forcePushed"}, {"oid": "e9410dfa7b9972c1eeda9fc8f2ebfb887fe00996", "url": "https://github.com/aws/aws-sdk-java-v2/commit/e9410dfa7b9972c1eeda9fc8f2ebfb887fe00996", "message": "Clean-up and refactor of attribute and attribute tags classes; preparation for injection of custom converters", "committedDate": "2020-03-10T19:00:03Z", "type": "forcePushed"}, {"oid": "7885a86fca1a8c7251087877cf7649b1a4716d9b", "url": "https://github.com/aws/aws-sdk-java-v2/commit/7885a86fca1a8c7251087877cf7649b1a4716d9b", "message": "Clean-up and refactor of attribute and attribute tags classes; preparation for injection of custom converters", "committedDate": "2020-03-10T23:23:43Z", "type": "commit"}, {"oid": "7885a86fca1a8c7251087877cf7649b1a4716d9b", "url": "https://github.com/aws/aws-sdk-java-v2/commit/7885a86fca1a8c7251087877cf7649b1a4716d9b", "message": "Clean-up and refactor of attribute and attribute tags classes; preparation for injection of custom converters", "committedDate": "2020-03-10T23:23:43Z", "type": "forcePushed"}]}